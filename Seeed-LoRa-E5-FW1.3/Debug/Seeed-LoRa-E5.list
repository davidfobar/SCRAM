
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001db08  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f74  0801dc40  0801dc40  0002dc40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000d8  0801ebb4  0801ebb4  0002ebb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801ec8c  0801ec8c  00030148  2**0
                  CONTENTS
  5 .ARM          00000008  0801ec8c  0801ec8c  0002ec8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801ec94  0801ec94  00030148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0801ec94  0801ec94  0002ec94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801ec98  0801ec98  0002ec98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000148  20000000  0801ec9c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00002188  20000148  0801ede4  00030148  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200022d0  0801ede4  000322d0  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00030148  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030172  2**0
                  CONTENTS, READONLY
 14 .debug_info   0004842a  00000000  00000000  000301b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000b0c6  00000000  00000000  000785df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000038a8  00000000  00000000  000836a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002b1e  00000000  00000000  00086f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002aa18  00000000  00000000  00089a6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000456b8  00000000  00000000  000b4486  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d1751  00000000  00000000  000f9b3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000ea74  00000000  00000000  001cb290  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  001d9d04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000148 	.word	0x20000148
 8000154:	00000000 	.word	0x00000000
 8000158:	0801dc28 	.word	0x0801dc28

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	2000014c 	.word	0x2000014c
 8000174:	0801dc28 	.word	0x0801dc28

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__gedf2>:
 8000500:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000504:	e006      	b.n	8000514 <__cmpdf2+0x4>
 8000506:	bf00      	nop

08000508 <__ledf2>:
 8000508:	f04f 0c01 	mov.w	ip, #1
 800050c:	e002      	b.n	8000514 <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__cmpdf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000518:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800051c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000520:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000524:	bf18      	it	ne
 8000526:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800052a:	d01b      	beq.n	8000564 <__cmpdf2+0x54>
 800052c:	b001      	add	sp, #4
 800052e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000532:	bf0c      	ite	eq
 8000534:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000538:	ea91 0f03 	teqne	r1, r3
 800053c:	bf02      	ittt	eq
 800053e:	ea90 0f02 	teqeq	r0, r2
 8000542:	2000      	moveq	r0, #0
 8000544:	4770      	bxeq	lr
 8000546:	f110 0f00 	cmn.w	r0, #0
 800054a:	ea91 0f03 	teq	r1, r3
 800054e:	bf58      	it	pl
 8000550:	4299      	cmppl	r1, r3
 8000552:	bf08      	it	eq
 8000554:	4290      	cmpeq	r0, r2
 8000556:	bf2c      	ite	cs
 8000558:	17d8      	asrcs	r0, r3, #31
 800055a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800055e:	f040 0001 	orr.w	r0, r0, #1
 8000562:	4770      	bx	lr
 8000564:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800056c:	d102      	bne.n	8000574 <__cmpdf2+0x64>
 800056e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000572:	d107      	bne.n	8000584 <__cmpdf2+0x74>
 8000574:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800057c:	d1d6      	bne.n	800052c <__cmpdf2+0x1c>
 800057e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000582:	d0d3      	beq.n	800052c <__cmpdf2+0x1c>
 8000584:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <__aeabi_cdrcmple>:
 800058c:	4684      	mov	ip, r0
 800058e:	4610      	mov	r0, r2
 8000590:	4662      	mov	r2, ip
 8000592:	468c      	mov	ip, r1
 8000594:	4619      	mov	r1, r3
 8000596:	4663      	mov	r3, ip
 8000598:	e000      	b.n	800059c <__aeabi_cdcmpeq>
 800059a:	bf00      	nop

0800059c <__aeabi_cdcmpeq>:
 800059c:	b501      	push	{r0, lr}
 800059e:	f7ff ffb7 	bl	8000510 <__cmpdf2>
 80005a2:	2800      	cmp	r0, #0
 80005a4:	bf48      	it	mi
 80005a6:	f110 0f00 	cmnmi.w	r0, #0
 80005aa:	bd01      	pop	{r0, pc}

080005ac <__aeabi_dcmpeq>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff fff4 	bl	800059c <__aeabi_cdcmpeq>
 80005b4:	bf0c      	ite	eq
 80005b6:	2001      	moveq	r0, #1
 80005b8:	2000      	movne	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmplt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffea 	bl	800059c <__aeabi_cdcmpeq>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmple>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffe0 	bl	800059c <__aeabi_cdcmpeq>
 80005dc:	bf94      	ite	ls
 80005de:	2001      	movls	r0, #1
 80005e0:	2000      	movhi	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_dcmpge>:
 80005e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ec:	f7ff ffce 	bl	800058c <__aeabi_cdrcmple>
 80005f0:	bf94      	ite	ls
 80005f2:	2001      	movls	r0, #1
 80005f4:	2000      	movhi	r0, #0
 80005f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fa:	bf00      	nop

080005fc <__aeabi_dcmpgt>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff ffc4 	bl	800058c <__aeabi_cdrcmple>
 8000604:	bf34      	ite	cc
 8000606:	2001      	movcc	r0, #1
 8000608:	2000      	movcs	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_d2iz>:
 8000610:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000614:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000618:	d215      	bcs.n	8000646 <__aeabi_d2iz+0x36>
 800061a:	d511      	bpl.n	8000640 <__aeabi_d2iz+0x30>
 800061c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000620:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000624:	d912      	bls.n	800064c <__aeabi_d2iz+0x3c>
 8000626:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800062a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800062e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000632:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000636:	fa23 f002 	lsr.w	r0, r3, r2
 800063a:	bf18      	it	ne
 800063c:	4240      	negne	r0, r0
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d105      	bne.n	8000658 <__aeabi_d2iz+0x48>
 800064c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000650:	bf08      	it	eq
 8000652:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000656:	4770      	bx	lr
 8000658:	f04f 0000 	mov.w	r0, #0
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <__aeabi_frsub>:
 8000660:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000664:	e002      	b.n	800066c <__addsf3>
 8000666:	bf00      	nop

08000668 <__aeabi_fsub>:
 8000668:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800066c <__addsf3>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	bf1f      	itttt	ne
 8000670:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000674:	ea92 0f03 	teqne	r2, r3
 8000678:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800067c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000680:	d06a      	beq.n	8000758 <__addsf3+0xec>
 8000682:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000686:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800068a:	bfc1      	itttt	gt
 800068c:	18d2      	addgt	r2, r2, r3
 800068e:	4041      	eorgt	r1, r0
 8000690:	4048      	eorgt	r0, r1
 8000692:	4041      	eorgt	r1, r0
 8000694:	bfb8      	it	lt
 8000696:	425b      	neglt	r3, r3
 8000698:	2b19      	cmp	r3, #25
 800069a:	bf88      	it	hi
 800069c:	4770      	bxhi	lr
 800069e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006aa:	bf18      	it	ne
 80006ac:	4240      	negne	r0, r0
 80006ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006ba:	bf18      	it	ne
 80006bc:	4249      	negne	r1, r1
 80006be:	ea92 0f03 	teq	r2, r3
 80006c2:	d03f      	beq.n	8000744 <__addsf3+0xd8>
 80006c4:	f1a2 0201 	sub.w	r2, r2, #1
 80006c8:	fa41 fc03 	asr.w	ip, r1, r3
 80006cc:	eb10 000c 	adds.w	r0, r0, ip
 80006d0:	f1c3 0320 	rsb	r3, r3, #32
 80006d4:	fa01 f103 	lsl.w	r1, r1, r3
 80006d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006dc:	d502      	bpl.n	80006e4 <__addsf3+0x78>
 80006de:	4249      	negs	r1, r1
 80006e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006e8:	d313      	bcc.n	8000712 <__addsf3+0xa6>
 80006ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ee:	d306      	bcc.n	80006fe <__addsf3+0x92>
 80006f0:	0840      	lsrs	r0, r0, #1
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	f102 0201 	add.w	r2, r2, #1
 80006fa:	2afe      	cmp	r2, #254	; 0xfe
 80006fc:	d251      	bcs.n	80007a2 <__addsf3+0x136>
 80006fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000702:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000706:	bf08      	it	eq
 8000708:	f020 0001 	biceq.w	r0, r0, #1
 800070c:	ea40 0003 	orr.w	r0, r0, r3
 8000710:	4770      	bx	lr
 8000712:	0049      	lsls	r1, r1, #1
 8000714:	eb40 0000 	adc.w	r0, r0, r0
 8000718:	3a01      	subs	r2, #1
 800071a:	bf28      	it	cs
 800071c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000720:	d2ed      	bcs.n	80006fe <__addsf3+0x92>
 8000722:	fab0 fc80 	clz	ip, r0
 8000726:	f1ac 0c08 	sub.w	ip, ip, #8
 800072a:	ebb2 020c 	subs.w	r2, r2, ip
 800072e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000732:	bfaa      	itet	ge
 8000734:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000738:	4252      	neglt	r2, r2
 800073a:	4318      	orrge	r0, r3
 800073c:	bfbc      	itt	lt
 800073e:	40d0      	lsrlt	r0, r2
 8000740:	4318      	orrlt	r0, r3
 8000742:	4770      	bx	lr
 8000744:	f092 0f00 	teq	r2, #0
 8000748:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800074c:	bf06      	itte	eq
 800074e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000752:	3201      	addeq	r2, #1
 8000754:	3b01      	subne	r3, #1
 8000756:	e7b5      	b.n	80006c4 <__addsf3+0x58>
 8000758:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800075c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000760:	bf18      	it	ne
 8000762:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000766:	d021      	beq.n	80007ac <__addsf3+0x140>
 8000768:	ea92 0f03 	teq	r2, r3
 800076c:	d004      	beq.n	8000778 <__addsf3+0x10c>
 800076e:	f092 0f00 	teq	r2, #0
 8000772:	bf08      	it	eq
 8000774:	4608      	moveq	r0, r1
 8000776:	4770      	bx	lr
 8000778:	ea90 0f01 	teq	r0, r1
 800077c:	bf1c      	itt	ne
 800077e:	2000      	movne	r0, #0
 8000780:	4770      	bxne	lr
 8000782:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000786:	d104      	bne.n	8000792 <__addsf3+0x126>
 8000788:	0040      	lsls	r0, r0, #1
 800078a:	bf28      	it	cs
 800078c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000790:	4770      	bx	lr
 8000792:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000796:	bf3c      	itt	cc
 8000798:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800079c:	4770      	bxcc	lr
 800079e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007aa:	4770      	bx	lr
 80007ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b0:	bf16      	itet	ne
 80007b2:	4608      	movne	r0, r1
 80007b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007b8:	4601      	movne	r1, r0
 80007ba:	0242      	lsls	r2, r0, #9
 80007bc:	bf06      	itte	eq
 80007be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007c2:	ea90 0f01 	teqeq	r0, r1
 80007c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007ca:	4770      	bx	lr

080007cc <__aeabi_ui2f>:
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	e004      	b.n	80007dc <__aeabi_i2f+0x8>
 80007d2:	bf00      	nop

080007d4 <__aeabi_i2f>:
 80007d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007d8:	bf48      	it	mi
 80007da:	4240      	negmi	r0, r0
 80007dc:	ea5f 0c00 	movs.w	ip, r0
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007e8:	4601      	mov	r1, r0
 80007ea:	f04f 0000 	mov.w	r0, #0
 80007ee:	e01c      	b.n	800082a <__aeabi_l2f+0x2a>

080007f0 <__aeabi_ul2f>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e00a      	b.n	8000814 <__aeabi_l2f+0x14>
 80007fe:	bf00      	nop

08000800 <__aeabi_l2f>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800080c:	d502      	bpl.n	8000814 <__aeabi_l2f+0x14>
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	ea5f 0c01 	movs.w	ip, r1
 8000818:	bf02      	ittt	eq
 800081a:	4684      	moveq	ip, r0
 800081c:	4601      	moveq	r1, r0
 800081e:	2000      	moveq	r0, #0
 8000820:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000824:	bf08      	it	eq
 8000826:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800082a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800082e:	fabc f28c 	clz	r2, ip
 8000832:	3a08      	subs	r2, #8
 8000834:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000838:	db10      	blt.n	800085c <__aeabi_l2f+0x5c>
 800083a:	fa01 fc02 	lsl.w	ip, r1, r2
 800083e:	4463      	add	r3, ip
 8000840:	fa00 fc02 	lsl.w	ip, r0, r2
 8000844:	f1c2 0220 	rsb	r2, r2, #32
 8000848:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800084c:	fa20 f202 	lsr.w	r2, r0, r2
 8000850:	eb43 0002 	adc.w	r0, r3, r2
 8000854:	bf08      	it	eq
 8000856:	f020 0001 	biceq.w	r0, r0, #1
 800085a:	4770      	bx	lr
 800085c:	f102 0220 	add.w	r2, r2, #32
 8000860:	fa01 fc02 	lsl.w	ip, r1, r2
 8000864:	f1c2 0220 	rsb	r2, r2, #32
 8000868:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800086c:	fa21 f202 	lsr.w	r2, r1, r2
 8000870:	eb43 0002 	adc.w	r0, r3, r2
 8000874:	bf08      	it	eq
 8000876:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800087a:	4770      	bx	lr

0800087c <__aeabi_fmul>:
 800087c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000880:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000884:	bf1e      	ittt	ne
 8000886:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800088a:	ea92 0f0c 	teqne	r2, ip
 800088e:	ea93 0f0c 	teqne	r3, ip
 8000892:	d06f      	beq.n	8000974 <__aeabi_fmul+0xf8>
 8000894:	441a      	add	r2, r3
 8000896:	ea80 0c01 	eor.w	ip, r0, r1
 800089a:	0240      	lsls	r0, r0, #9
 800089c:	bf18      	it	ne
 800089e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008a2:	d01e      	beq.n	80008e2 <__aeabi_fmul+0x66>
 80008a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008b0:	fba0 3101 	umull	r3, r1, r0, r1
 80008b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80008b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80008bc:	bf3e      	ittt	cc
 80008be:	0049      	lslcc	r1, r1, #1
 80008c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008c4:	005b      	lslcc	r3, r3, #1
 80008c6:	ea40 0001 	orr.w	r0, r0, r1
 80008ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80008ce:	2afd      	cmp	r2, #253	; 0xfd
 80008d0:	d81d      	bhi.n	800090e <__aeabi_fmul+0x92>
 80008d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80008d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008da:	bf08      	it	eq
 80008dc:	f020 0001 	biceq.w	r0, r0, #1
 80008e0:	4770      	bx	lr
 80008e2:	f090 0f00 	teq	r0, #0
 80008e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008ea:	bf08      	it	eq
 80008ec:	0249      	lsleq	r1, r1, #9
 80008ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008f6:	3a7f      	subs	r2, #127	; 0x7f
 80008f8:	bfc2      	ittt	gt
 80008fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80008fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000902:	4770      	bxgt	lr
 8000904:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000908:	f04f 0300 	mov.w	r3, #0
 800090c:	3a01      	subs	r2, #1
 800090e:	dc5d      	bgt.n	80009cc <__aeabi_fmul+0x150>
 8000910:	f112 0f19 	cmn.w	r2, #25
 8000914:	bfdc      	itt	le
 8000916:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800091a:	4770      	bxle	lr
 800091c:	f1c2 0200 	rsb	r2, r2, #0
 8000920:	0041      	lsls	r1, r0, #1
 8000922:	fa21 f102 	lsr.w	r1, r1, r2
 8000926:	f1c2 0220 	rsb	r2, r2, #32
 800092a:	fa00 fc02 	lsl.w	ip, r0, r2
 800092e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000932:	f140 0000 	adc.w	r0, r0, #0
 8000936:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800093a:	bf08      	it	eq
 800093c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000940:	4770      	bx	lr
 8000942:	f092 0f00 	teq	r2, #0
 8000946:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800094a:	bf02      	ittt	eq
 800094c:	0040      	lsleq	r0, r0, #1
 800094e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000952:	3a01      	subeq	r2, #1
 8000954:	d0f9      	beq.n	800094a <__aeabi_fmul+0xce>
 8000956:	ea40 000c 	orr.w	r0, r0, ip
 800095a:	f093 0f00 	teq	r3, #0
 800095e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000962:	bf02      	ittt	eq
 8000964:	0049      	lsleq	r1, r1, #1
 8000966:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800096a:	3b01      	subeq	r3, #1
 800096c:	d0f9      	beq.n	8000962 <__aeabi_fmul+0xe6>
 800096e:	ea41 010c 	orr.w	r1, r1, ip
 8000972:	e78f      	b.n	8000894 <__aeabi_fmul+0x18>
 8000974:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000978:	ea92 0f0c 	teq	r2, ip
 800097c:	bf18      	it	ne
 800097e:	ea93 0f0c 	teqne	r3, ip
 8000982:	d00a      	beq.n	800099a <__aeabi_fmul+0x11e>
 8000984:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000988:	bf18      	it	ne
 800098a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800098e:	d1d8      	bne.n	8000942 <__aeabi_fmul+0xc6>
 8000990:	ea80 0001 	eor.w	r0, r0, r1
 8000994:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000998:	4770      	bx	lr
 800099a:	f090 0f00 	teq	r0, #0
 800099e:	bf17      	itett	ne
 80009a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80009a4:	4608      	moveq	r0, r1
 80009a6:	f091 0f00 	teqne	r1, #0
 80009aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80009ae:	d014      	beq.n	80009da <__aeabi_fmul+0x15e>
 80009b0:	ea92 0f0c 	teq	r2, ip
 80009b4:	d101      	bne.n	80009ba <__aeabi_fmul+0x13e>
 80009b6:	0242      	lsls	r2, r0, #9
 80009b8:	d10f      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009ba:	ea93 0f0c 	teq	r3, ip
 80009be:	d103      	bne.n	80009c8 <__aeabi_fmul+0x14c>
 80009c0:	024b      	lsls	r3, r1, #9
 80009c2:	bf18      	it	ne
 80009c4:	4608      	movne	r0, r1
 80009c6:	d108      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009c8:	ea80 0001 	eor.w	r0, r0, r1
 80009cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d8:	4770      	bx	lr
 80009da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_fdiv>:
 80009e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009ec:	bf1e      	ittt	ne
 80009ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009f2:	ea92 0f0c 	teqne	r2, ip
 80009f6:	ea93 0f0c 	teqne	r3, ip
 80009fa:	d069      	beq.n	8000ad0 <__aeabi_fdiv+0xec>
 80009fc:	eba2 0203 	sub.w	r2, r2, r3
 8000a00:	ea80 0c01 	eor.w	ip, r0, r1
 8000a04:	0249      	lsls	r1, r1, #9
 8000a06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a0a:	d037      	beq.n	8000a7c <__aeabi_fdiv+0x98>
 8000a0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	bf38      	it	cc
 8000a20:	005b      	lslcc	r3, r3, #1
 8000a22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000a26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	bf24      	itt	cs
 8000a2e:	1a5b      	subcs	r3, r3, r1
 8000a30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a38:	bf24      	itt	cs
 8000a3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a46:	bf24      	itt	cs
 8000a48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a54:	bf24      	itt	cs
 8000a56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a5e:	011b      	lsls	r3, r3, #4
 8000a60:	bf18      	it	ne
 8000a62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a66:	d1e0      	bne.n	8000a2a <__aeabi_fdiv+0x46>
 8000a68:	2afd      	cmp	r2, #253	; 0xfd
 8000a6a:	f63f af50 	bhi.w	800090e <__aeabi_fmul+0x92>
 8000a6e:	428b      	cmp	r3, r1
 8000a70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a84:	327f      	adds	r2, #127	; 0x7f
 8000a86:	bfc2      	ittt	gt
 8000a88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a90:	4770      	bxgt	lr
 8000a92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a96:	f04f 0300 	mov.w	r3, #0
 8000a9a:	3a01      	subs	r2, #1
 8000a9c:	e737      	b.n	800090e <__aeabi_fmul+0x92>
 8000a9e:	f092 0f00 	teq	r2, #0
 8000aa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0040      	lsleq	r0, r0, #1
 8000aaa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000aae:	3a01      	subeq	r2, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fdiv+0xc2>
 8000ab2:	ea40 000c 	orr.w	r0, r0, ip
 8000ab6:	f093 0f00 	teq	r3, #0
 8000aba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0049      	lsleq	r1, r1, #1
 8000ac2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ac6:	3b01      	subeq	r3, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fdiv+0xda>
 8000aca:	ea41 010c 	orr.w	r1, r1, ip
 8000ace:	e795      	b.n	80009fc <__aeabi_fdiv+0x18>
 8000ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad4:	ea92 0f0c 	teq	r2, ip
 8000ad8:	d108      	bne.n	8000aec <__aeabi_fdiv+0x108>
 8000ada:	0242      	lsls	r2, r0, #9
 8000adc:	f47f af7d 	bne.w	80009da <__aeabi_fmul+0x15e>
 8000ae0:	ea93 0f0c 	teq	r3, ip
 8000ae4:	f47f af70 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000ae8:	4608      	mov	r0, r1
 8000aea:	e776      	b.n	80009da <__aeabi_fmul+0x15e>
 8000aec:	ea93 0f0c 	teq	r3, ip
 8000af0:	d104      	bne.n	8000afc <__aeabi_fdiv+0x118>
 8000af2:	024b      	lsls	r3, r1, #9
 8000af4:	f43f af4c 	beq.w	8000990 <__aeabi_fmul+0x114>
 8000af8:	4608      	mov	r0, r1
 8000afa:	e76e      	b.n	80009da <__aeabi_fmul+0x15e>
 8000afc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b00:	bf18      	it	ne
 8000b02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b06:	d1ca      	bne.n	8000a9e <__aeabi_fdiv+0xba>
 8000b08:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000b0c:	f47f af5c 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000b10:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000b14:	f47f af3c 	bne.w	8000990 <__aeabi_fmul+0x114>
 8000b18:	e75f      	b.n	80009da <__aeabi_fmul+0x15e>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_f2iz>:
 8000b1c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b20:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b24:	d30f      	bcc.n	8000b46 <__aeabi_f2iz+0x2a>
 8000b26:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b2a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b2e:	d90d      	bls.n	8000b4c <__aeabi_f2iz+0x30>
 8000b30:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b38:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b3c:	fa23 f002 	lsr.w	r0, r3, r2
 8000b40:	bf18      	it	ne
 8000b42:	4240      	negne	r0, r0
 8000b44:	4770      	bx	lr
 8000b46:	f04f 0000 	mov.w	r0, #0
 8000b4a:	4770      	bx	lr
 8000b4c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b50:	d101      	bne.n	8000b56 <__aeabi_f2iz+0x3a>
 8000b52:	0242      	lsls	r2, r0, #9
 8000b54:	d105      	bne.n	8000b62 <__aeabi_f2iz+0x46>
 8000b56:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000b5a:	bf08      	it	eq
 8000b5c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0000 	mov.w	r0, #0
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_f2uiz>:
 8000b68:	0042      	lsls	r2, r0, #1
 8000b6a:	d20e      	bcs.n	8000b8a <__aeabi_f2uiz+0x22>
 8000b6c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b70:	d30b      	bcc.n	8000b8a <__aeabi_f2uiz+0x22>
 8000b72:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b76:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b7a:	d409      	bmi.n	8000b90 <__aeabi_f2uiz+0x28>
 8000b7c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b84:	fa23 f002 	lsr.w	r0, r3, r2
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0000 	mov.w	r0, #0
 8000b8e:	4770      	bx	lr
 8000b90:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b94:	d101      	bne.n	8000b9a <__aeabi_f2uiz+0x32>
 8000b96:	0242      	lsls	r2, r0, #9
 8000b98:	d102      	bne.n	8000ba0 <__aeabi_f2uiz+0x38>
 8000b9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c2c:	f080 811b 	bcs.w	8000e66 <__udivmoddi4+0x28e>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8118 	bls.w	8000e66 <__udivmoddi4+0x28e>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c5a:	f080 8106 	bcs.w	8000e6a <__udivmoddi4+0x292>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8103 	bls.w	8000e6a <__udivmoddi4+0x292>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ec 	beq.w	8000e60 <__udivmoddi4+0x288>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f7 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 808f 	bne.w	8000de6 <__udivmoddi4+0x20e>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80ca 	bhi.w	8000e8e <__udivmoddi4+0x2b6>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80ba 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	4323      	orrs	r3, r4
 8000d4a:	fa00 f901 	lsl.w	r9, r0, r1
 8000d4e:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fbb5 f8f0 	udiv	r8, r5, r0
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	fb00 5518 	mls	r5, r0, r8, r5
 8000d60:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d64:	fb08 f50e 	mul.w	r5, r8, lr
 8000d68:	42a5      	cmp	r5, r4
 8000d6a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d78:	f080 8087 	bcs.w	8000e8a <__udivmoddi4+0x2b2>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8084 	bls.w	8000e8a <__udivmoddi4+0x2b2>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d90:	fb00 4413 	mls	r4, r0, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8000da8:	d26b      	bcs.n	8000e82 <__udivmoddi4+0x2aa>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d969      	bls.n	8000e82 <__udivmoddi4+0x2aa>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000db6:	fba0 8302 	umull	r8, r3, r0, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	429c      	cmp	r4, r3
 8000dc0:	46c6      	mov	lr, r8
 8000dc2:	461d      	mov	r5, r3
 8000dc4:	d355      	bcc.n	8000e72 <__udivmoddi4+0x29a>
 8000dc6:	d052      	beq.n	8000e6e <__udivmoddi4+0x296>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb9 030e 	subs.w	r3, r9, lr
 8000dce:	eb64 0405 	sbc.w	r4, r4, r5
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40cb      	lsrs	r3, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	431f      	orrs	r7, r3
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	2100      	movs	r1, #0
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	f1c3 0120 	rsb	r1, r3, #32
 8000dea:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dee:	fa20 f201 	lsr.w	r2, r0, r1
 8000df2:	fa25 f101 	lsr.w	r1, r5, r1
 8000df6:	409d      	lsls	r5, r3
 8000df8:	432a      	orrs	r2, r5
 8000dfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dfe:	fa1f fe8c 	uxth.w	lr, ip
 8000e02:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e06:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0a:	0c11      	lsrs	r1, r2, #16
 8000e0c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e10:	fb00 f50e 	mul.w	r5, r0, lr
 8000e14:	428d      	cmp	r5, r1
 8000e16:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x256>
 8000e1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e20:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e24:	d22f      	bcs.n	8000e86 <__udivmoddi4+0x2ae>
 8000e26:	428d      	cmp	r5, r1
 8000e28:	d92d      	bls.n	8000e86 <__udivmoddi4+0x2ae>
 8000e2a:	3802      	subs	r0, #2
 8000e2c:	4461      	add	r1, ip
 8000e2e:	1b49      	subs	r1, r1, r5
 8000e30:	b292      	uxth	r2, r2
 8000e32:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e36:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e3e:	fb05 f10e 	mul.w	r1, r5, lr
 8000e42:	4291      	cmp	r1, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x280>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e4e:	d216      	bcs.n	8000e7e <__udivmoddi4+0x2a6>
 8000e50:	4291      	cmp	r1, r2
 8000e52:	d914      	bls.n	8000e7e <__udivmoddi4+0x2a6>
 8000e54:	3d02      	subs	r5, #2
 8000e56:	4462      	add	r2, ip
 8000e58:	1a52      	subs	r2, r2, r1
 8000e5a:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e5e:	e739      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e60:	4631      	mov	r1, r6
 8000e62:	4630      	mov	r0, r6
 8000e64:	e709      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e66:	4639      	mov	r1, r7
 8000e68:	e6e7      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6a:	4610      	mov	r0, r2
 8000e6c:	e6fc      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e6e:	45c1      	cmp	r9, r8
 8000e70:	d2aa      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e72:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e76:	eb63 050c 	sbc.w	r5, r3, ip
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a4      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e7e:	4645      	mov	r5, r8
 8000e80:	e7ea      	b.n	8000e58 <__udivmoddi4+0x280>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e795      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e86:	4640      	mov	r0, r8
 8000e88:	e7d1      	b.n	8000e2e <__udivmoddi4+0x256>
 8000e8a:	46d0      	mov	r8, sl
 8000e8c:	e77c      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e8e:	3d02      	subs	r5, #2
 8000e90:	4462      	add	r2, ip
 8000e92:	e733      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e94:	4608      	mov	r0, r1
 8000e96:	e70b      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e98:	4464      	add	r4, ip
 8000e9a:	3802      	subs	r0, #2
 8000e9c:	e743      	b.n	8000d26 <__udivmoddi4+0x14e>
 8000e9e:	bf00      	nop

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000eac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eb0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000eb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ec0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
}
 8000eca:	bf00      	nop
 8000ecc:	3714      	adds	r7, #20
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr

08000ed4 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ee0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ee2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000eec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ef0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
}
 8000efa:	bf00      	nop
 8000efc:	3714      	adds	r7, #20
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr

08000f04 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000f0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f10:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	43db      	mvns	r3, r3
 8000f16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	660b      	str	r3, [r1, #96]	; 0x60
}
 8000f1e:	bf00      	nop
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr

08000f28 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000f2c:	4b23      	ldr	r3, [pc, #140]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f2e:	4a24      	ldr	r2, [pc, #144]	; (8000fc0 <MX_ADC_Init+0x98>)
 8000f30:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f32:	4b22      	ldr	r3, [pc, #136]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f34:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000f38:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000f3a:	4b20      	ldr	r3, [pc, #128]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f40:	4b1e      	ldr	r3, [pc, #120]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f46:	4b1d      	ldr	r3, [pc, #116]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f4c:	4b1b      	ldr	r3, [pc, #108]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f4e:	2204      	movs	r2, #4
 8000f50:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000f52:	4b1a      	ldr	r3, [pc, #104]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000f58:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000f5e:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8000f64:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000f6a:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f72:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f78:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000f7e:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f86:	4b0d      	ldr	r3, [pc, #52]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f8c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000f8e:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f90:	2207      	movs	r2, #7
 8000f92:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000f94:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f96:	2207      	movs	r2, #7
 8000f98:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000f9a:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000fa2:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <MX_ADC_Init+0x94>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000fa8:	4804      	ldr	r0, [pc, #16]	; (8000fbc <MX_ADC_Init+0x94>)
 8000faa:	f002 f8f7 	bl	800319c <HAL_ADC_Init>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8000fb4:	f000 fd28 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000164 	.word	0x20000164
 8000fc0:	40012400 	.word	0x40012400

08000fc4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b088      	sub	sp, #32
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f107 030c 	add.w	r3, r7, #12
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a0d      	ldr	r2, [pc, #52]	; (8001018 <HAL_ADC_MspInit+0x54>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d113      	bne.n	800100e <HAL_ADC_MspInit+0x4a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000fe6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fea:	f7ff ff73 	bl	8000ed4 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fee:	2002      	movs	r0, #2
 8000ff0:	f7ff ff58 	bl	8000ea4 <LL_AHB2_GRP1_EnableClock>
    /**ADC GPIO Configuration
    PB3     ------> ADC_IN2
    PB4     ------> ADC_IN3
    PB13     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = SiPM_temp_ADC_Pin|GPIO_PIN_4|Battery_Monitor_ADC_Pin;
 8000ff4:	f242 0318 	movw	r3, #8216	; 0x2018
 8000ff8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001002:	f107 030c 	add.w	r3, r7, #12
 8001006:	4619      	mov	r1, r3
 8001008:	4804      	ldr	r0, [pc, #16]	; (800101c <HAL_ADC_MspInit+0x58>)
 800100a:	f003 fec7 	bl	8004d9c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 800100e:	bf00      	nop
 8001010:	3720      	adds	r7, #32
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40012400 	.word	0x40012400
 800101c:	48000400 	.word	0x48000400

08001020 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a07      	ldr	r2, [pc, #28]	; (800104c <HAL_ADC_MspDeInit+0x2c>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d108      	bne.n	8001044 <HAL_ADC_MspDeInit+0x24>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8001032:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001036:	f7ff ff65 	bl	8000f04 <LL_APB2_GRP1_DisableClock>
    /**ADC GPIO Configuration
    PB3     ------> ADC_IN2
    PB4     ------> ADC_IN3
    PB13     ------> ADC_IN0
    */
    HAL_GPIO_DeInit(GPIOB, SiPM_temp_ADC_Pin|GPIO_PIN_4|Battery_Monitor_ADC_Pin);
 800103a:	f242 0118 	movw	r1, #8216	; 0x2018
 800103e:	4804      	ldr	r0, [pc, #16]	; (8001050 <HAL_ADC_MspDeInit+0x30>)
 8001040:	f004 f80c 	bl	800505c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8001044:	bf00      	nop
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40012400 	.word	0x40012400
 8001050:	48000400 	.word	0x48000400

08001054 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 8001058:	4b03      	ldr	r3, [pc, #12]	; (8001068 <SYS_InitMeasurement+0x14>)
 800105a:	4a04      	ldr	r2, [pc, #16]	; (800106c <SYS_InitMeasurement+0x18>)
 800105c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 800105e:	bf00      	nop
 8001060:	46bd      	mov	sp, r7
 8001062:	bc80      	pop	{r7}
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	20000164 	.word	0x20000164
 800106c:	40012400 	.word	0x40012400

08001070 <SYS_GetBatteryLevel>:

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}

uint16_t SYS_GetBatteryLevel(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 800107e:	4813      	ldr	r0, [pc, #76]	; (80010cc <SYS_GetBatteryLevel+0x5c>)
 8001080:	f000 f82a 	bl	80010d8 <ADC_ReadChannels>
 8001084:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d102      	bne.n	8001092 <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	80fb      	strh	r3, [r7, #6]
 8001090:	e016      	b.n	80010c0 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8001092:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <SYS_GetBatteryLevel+0x60>)
 8001094:	881b      	ldrh	r3, [r3, #0]
 8001096:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800109a:	4293      	cmp	r3, r2
 800109c:	d00b      	beq.n	80010b6 <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 800109e:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <SYS_GetBatteryLevel+0x60>)
 80010a0:	881b      	ldrh	r3, [r3, #0]
 80010a2:	461a      	mov	r2, r3
 80010a4:	f640 43e4 	movw	r3, #3300	; 0xce4
 80010a8:	fb03 f202 	mul.w	r2, r3, r2
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b2:	80fb      	strh	r3, [r7, #6]
 80010b4:	e004      	b.n	80010c0 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 80010b6:	4a07      	ldr	r2, [pc, #28]	; (80010d4 <SYS_GetBatteryLevel+0x64>)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80010be:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 80010c0:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	b4002000 	.word	0xb4002000
 80010d0:	1fff75aa 	.word	0x1fff75aa
 80010d4:	004c08d8 	.word	0x004c08d8

080010d8 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010e4:	f107 0308 	add.w	r3, r7, #8
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 80010f0:	f7ff ff1a 	bl	8000f28 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 80010f4:	481a      	ldr	r0, [pc, #104]	; (8001160 <ADC_ReadChannels+0x88>)
 80010f6:	f002 fe70 	bl	8003dda <HAL_ADCEx_Calibration_Start>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 8001100:	f000 fc82 	bl	8001a08 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001108:	2300      	movs	r3, #0
 800110a:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800110c:	2300      	movs	r3, #0
 800110e:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001110:	f107 0308 	add.w	r3, r7, #8
 8001114:	4619      	mov	r1, r3
 8001116:	4812      	ldr	r0, [pc, #72]	; (8001160 <ADC_ReadChannels+0x88>)
 8001118:	f002 fb7c 	bl	8003814 <HAL_ADC_ConfigChannel>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 8001122:	f000 fc71 	bl	8001a08 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8001126:	480e      	ldr	r0, [pc, #56]	; (8001160 <ADC_ReadChannels+0x88>)
 8001128:	f002 fa58 	bl	80035dc <HAL_ADC_Start>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 8001132:	f000 fc69 	bl	8001a08 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8001136:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800113a:	4809      	ldr	r0, [pc, #36]	; (8001160 <ADC_ReadChannels+0x88>)
 800113c:	f002 fac6 	bl	80036cc <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc) ;   /* it calls also ADC_Disable() */
 8001140:	4807      	ldr	r0, [pc, #28]	; (8001160 <ADC_ReadChannels+0x88>)
 8001142:	f002 fa91 	bl	8003668 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8001146:	4806      	ldr	r0, [pc, #24]	; (8001160 <ADC_ReadChannels+0x88>)
 8001148:	f002 fb57 	bl	80037fa <HAL_ADC_GetValue>
 800114c:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 800114e:	4804      	ldr	r0, [pc, #16]	; (8001160 <ADC_ReadChannels+0x88>)
 8001150:	f002 f9b8 	bl	80034c4 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 8001154:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8001156:	4618      	mov	r0, r3
 8001158:	3718      	adds	r7, #24
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000164 	.word	0x20000164

08001164 <LL_AHB1_GRP1_EnableClock>:
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800116c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001170:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001172:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4313      	orrs	r3, r2
 800117a:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800117c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001180:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4013      	ands	r3, r2
 8001186:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001188:	68fb      	ldr	r3, [r7, #12]
}
 800118a:	bf00      	nop
 800118c:	3714      	adds	r7, #20
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr

08001194 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001198:	2004      	movs	r0, #4
 800119a:	f7ff ffe3 	bl	8001164 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800119e:	2001      	movs	r0, #1
 80011a0:	f7ff ffe0 	bl	8001164 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 80011a4:	2200      	movs	r2, #0
 80011a6:	2102      	movs	r1, #2
 80011a8:	200b      	movs	r0, #11
 80011aa:	f002 ffbc 	bl	8004126 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80011ae:	200b      	movs	r0, #11
 80011b0:	f002 ffd3 	bl	800415a <HAL_NVIC_EnableIRQ>

}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <FLASH_IF_Write>:
  /* USER CODE END FLASH_IF_DeInit_2 */
  return ret_status;
}

FLASH_IF_StatusTypedef FLASH_IF_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80011c4:	23ff      	movs	r3, #255	; 0xff
 80011c6:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80011ce:	d311      	bcc.n	80011f4 <FLASH_IF_Write+0x3c>
 80011d0:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <FLASH_IF_Write+0x48>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	029a      	lsls	r2, r3, #10
 80011d6:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <FLASH_IF_Write+0x4c>)
 80011d8:	4013      	ands	r3, r2
 80011da:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80011de:	3b01      	subs	r3, #1
 80011e0:	68fa      	ldr	r2, [r7, #12]
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d306      	bcc.n	80011f4 <FLASH_IF_Write+0x3c>
  {
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	68b9      	ldr	r1, [r7, #8]
 80011ea:	68f8      	ldr	r0, [r7, #12]
 80011ec:	f000 f85a 	bl	80012a4 <FLASH_IF_INT_Write>
 80011f0:	4603      	mov	r3, r0
 80011f2:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
  return ret_status;
 80011f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3718      	adds	r7, #24
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	1fff75e0 	.word	0x1fff75e0
 8001204:	03fffc00 	.word	0x03fffc00

08001208 <FLASH_IF_Read>:

FLASH_IF_StatusTypedef FLASH_IF_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001214:	23ff      	movs	r3, #255	; 0xff
 8001216:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Read_1 */

  /* USER CODE END FLASH_IF_Read_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800121e:	d311      	bcc.n	8001244 <FLASH_IF_Read+0x3c>
 8001220:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <FLASH_IF_Read+0x48>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	029a      	lsls	r2, r3, #10
 8001226:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <FLASH_IF_Read+0x4c>)
 8001228:	4013      	ands	r3, r2
 800122a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800122e:	3b01      	subs	r3, #1
 8001230:	68ba      	ldr	r2, [r7, #8]
 8001232:	4293      	cmp	r3, r2
 8001234:	d306      	bcc.n	8001244 <FLASH_IF_Read+0x3c>
  {
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	68b9      	ldr	r1, [r7, #8]
 800123a:	68f8      	ldr	r0, [r7, #12]
 800123c:	f000 f93a 	bl	80014b4 <FLASH_IF_INT_Read>
 8001240:	4603      	mov	r3, r0
 8001242:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Read_2 */

  /* USER CODE END FLASH_IF_Read_2 */
  return ret_status;
 8001244:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001248:	4618      	mov	r0, r3
 800124a:	3718      	adds	r7, #24
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	1fff75e0 	.word	0x1fff75e0
 8001254:	03fffc00 	.word	0x03fffc00

08001258 <FLASH_IF_Erase>:

FLASH_IF_StatusTypedef FLASH_IF_Erase(void *pStart, uint32_t uLength)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001262:	23ff      	movs	r3, #255	; 0xff
 8001264:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN FLASH_IF_Erase_1 */

  /* USER CODE END FLASH_IF_Erase_1 */
  /* Check Flash start address */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800126c:	d310      	bcc.n	8001290 <FLASH_IF_Erase+0x38>
 800126e:	4b0b      	ldr	r3, [pc, #44]	; (800129c <FLASH_IF_Erase+0x44>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	029a      	lsls	r2, r3, #10
 8001274:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <FLASH_IF_Erase+0x48>)
 8001276:	4013      	ands	r3, r2
 8001278:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800127c:	3b01      	subs	r3, #1
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	4293      	cmp	r3, r2
 8001282:	d305      	bcc.n	8001290 <FLASH_IF_Erase+0x38>
  {
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 8001284:	6839      	ldr	r1, [r7, #0]
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f000 f932 	bl	80014f0 <FLASH_IF_INT_Erase>
 800128c:	4603      	mov	r3, r0
 800128e:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE BEGIN FLASH_IF_Erase_2 */

  /* USER CODE END FLASH_IF_Erase_2 */
  return ret_status;
 8001290:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001294:	4618      	mov	r0, r3
 8001296:	3710      	adds	r7, #16
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	1fff75e0 	.word	0x1fff75e0
 80012a0:	03fffc00 	.word	0x03fffc00

080012a4 <FLASH_IF_INT_Write>:

/* Private Functions Definition -----------------------------------------------*/

/* Private Functions : internal flash -----------------------------------------*/
static FLASH_IF_StatusTypedef FLASH_IF_INT_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b090      	sub	sp, #64	; 0x40
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 80012b0:	2300      	movs	r3, #0
 80012b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  /* USER CODE BEGIN FLASH_IF_INT_Write_1 */

  /* USER CODE END FLASH_IF_INT_Write_1 */
  uint32_t uDest = (uint32_t)pDestination;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t uSource = (uint32_t)pSource;
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t length = uLength;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t number_pages;
  uint32_t current_dest;
  uint32_t current_source;
  uint32_t current_length;

  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d00c      	beq.n	80012e2 <FLASH_IF_INT_Write+0x3e>
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d009      	beq.n	80012e2 <FLASH_IF_INT_Write+0x3e>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	f003 0307 	and.w	r3, r3, #7
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d104      	bne.n	80012e2 <FLASH_IF_INT_Write+0x3e>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d002      	beq.n	80012e8 <FLASH_IF_INT_Write+0x44>
  {
    return FLASH_IF_PARAM_ERROR;
 80012e2:	f06f 0305 	mvn.w	r3, #5
 80012e6:	e0da      	b.n	800149e <FLASH_IF_INT_Write+0x1fa>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 80012e8:	f000 f992 	bl	8001610 <FLASH_IF_INT_Clear_Error>
 80012ec:	4603      	mov	r3, r0
 80012ee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (ret_status == FLASH_IF_OK)
 80012f2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f040 80cf 	bne.w	800149a <FLASH_IF_INT_Write+0x1f6>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 80012fc:	f003 fb78 	bl	80049f0 <HAL_FLASH_Unlock>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	f040 80c6 	bne.w	8001494 <FLASH_IF_INT_Write+0x1f0>
    {
      start_page_index = PAGE_INDEX(uDest);
 8001308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800130a:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 800130e:	4b66      	ldr	r3, [pc, #408]	; (80014a8 <FLASH_IF_INT_Write+0x204>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	0299      	lsls	r1, r3, #10
 8001314:	4b65      	ldr	r3, [pc, #404]	; (80014ac <FLASH_IF_INT_Write+0x208>)
 8001316:	400b      	ands	r3, r1
 8001318:	fbb2 f1f3 	udiv	r1, r2, r3
 800131c:	fb01 f303 	mul.w	r3, r1, r3
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	0adb      	lsrs	r3, r3, #11
 8001324:	61bb      	str	r3, [r7, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 8001326:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4413      	add	r3, r2
 800132c:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001330:	3b01      	subs	r3, #1
 8001332:	4a5d      	ldr	r2, [pc, #372]	; (80014a8 <FLASH_IF_INT_Write+0x204>)
 8001334:	6812      	ldr	r2, [r2, #0]
 8001336:	0291      	lsls	r1, r2, #10
 8001338:	4a5c      	ldr	r2, [pc, #368]	; (80014ac <FLASH_IF_INT_Write+0x208>)
 800133a:	400a      	ands	r2, r1
 800133c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001340:	fb01 f202 	mul.w	r2, r1, r2
 8001344:	1a9b      	subs	r3, r3, r2
 8001346:	0ada      	lsrs	r2, r3, #11
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	3301      	adds	r3, #1
 800134e:	617b      	str	r3, [r7, #20]

      if (number_pages > 1)
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	2b01      	cmp	r3, #1
 8001354:	d905      	bls.n	8001362 <FLASH_IF_INT_Write+0xbe>
      {
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 8001356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001358:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800135c:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001360:	633b      	str	r3, [r7, #48]	; 0x30
      }

      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001366:	e089      	b.n	800147c <FLASH_IF_INT_Write+0x1d8>
      {
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 8001368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800136a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800136e:	02db      	lsls	r3, r3, #11
 8001370:	613b      	str	r3, [r7, #16]
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 8001372:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001374:	68f8      	ldr	r0, [r7, #12]
 8001376:	f000 f925 	bl	80015c4 <FLASH_IF_INT_IsEmpty>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d031      	beq.n	80013e4 <FLASH_IF_INT_Write+0x140>
        {
          if (pAllocatedBuffer == NULL)
 8001380:	4b4b      	ldr	r3, [pc, #300]	; (80014b0 <FLASH_IF_INT_Write+0x20c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d103      	bne.n	8001390 <FLASH_IF_INT_Write+0xec>
          {
            ret_status = FLASH_IF_PARAM_ERROR;
 8001388:	23fa      	movs	r3, #250	; 0xfa
 800138a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break; /* exit for loop */
 800138e:	e07e      	b.n	800148e <FLASH_IF_INT_Write+0x1ea>
          }

          /* backup initial Flash page data in RAM area */
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 8001390:	4b47      	ldr	r3, [pc, #284]	; (80014b0 <FLASH_IF_INT_Write+0x20c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6939      	ldr	r1, [r7, #16]
 8001396:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800139a:	4618      	mov	r0, r3
 800139c:	f000 f88a 	bl	80014b4 <FLASH_IF_INT_Read>
          /* copy fragment into RAM area */
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 80013a0:	4b43      	ldr	r3, [pc, #268]	; (80014b0 <FLASH_IF_INT_Write+0x20c>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013aa:	4413      	add	r3, r2
 80013ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80013ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013b0:	b292      	uxth	r2, r2
 80013b2:	4618      	mov	r0, r3
 80013b4:	f01b f8c8 	bl	801c548 <UTIL_MEM_cpy_8>

          /*  erase the Flash sector, to avoid writing twice in RAM */
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013be:	4618      	mov	r0, r3
 80013c0:	f000 f896 	bl	80014f0 <FLASH_IF_INT_Erase>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d003      	beq.n	80013d2 <FLASH_IF_INT_Write+0x12e>
          {
            ret_status = FLASH_IF_ERASE_ERROR;
 80013ca:	23fe      	movs	r3, #254	; 0xfe
 80013cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break; /* exit for loop */
 80013d0:	e05d      	b.n	800148e <FLASH_IF_INT_Write+0x1ea>
          }

          /* copy the whole flash sector including fragment from RAM to Flash */
          current_dest = page_address;
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
          current_source = (uint32_t)pAllocatedBuffer;
 80013d6:	4b36      	ldr	r3, [pc, #216]	; (80014b0 <FLASH_IF_INT_Write+0x20c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	623b      	str	r3, [r7, #32]
          current_length = FLASH_PAGE_SIZE;
 80013dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013e0:	61fb      	str	r3, [r7, #28]
 80013e2:	e005      	b.n	80013f0 <FLASH_IF_INT_Write+0x14c>
        }
        else
        {
          /* write a part of flash page from selected source data */
          current_dest = uDest;
 80013e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
          current_source = uSource;
 80013e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013ea:	623b      	str	r3, [r7, #32]
          current_length = length;
 80013ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013ee:	61fb      	str	r3, [r7, #28]
        }

        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 80013f0:	2300      	movs	r3, #0
 80013f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80013f4:	e026      	b.n	8001444 <FLASH_IF_INT_Write+0x1a0>
        {
          /* Device voltage range supposed to be [2.7V to 3.6V], the operation will be done by word */
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 80013f6:	6a3a      	ldr	r2, [r7, #32]
 80013f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013fa:	4413      	add	r3, r2
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 80013fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001400:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001402:	2001      	movs	r0, #1
 8001404:	f003 fab0 	bl	8004968 <HAL_FLASH_Program>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d113      	bne.n	8001436 <FLASH_IF_INT_Write+0x192>
          {
            /* Check the written value */
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 800140e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001410:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001414:	6a3a      	ldr	r2, [r7, #32]
 8001416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001418:	4413      	add	r3, r2
 800141a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141e:	4299      	cmp	r1, r3
 8001420:	bf08      	it	eq
 8001422:	4290      	cmpeq	r0, r2
 8001424:	d003      	beq.n	800142e <FLASH_IF_INT_Write+0x18a>
            {
              /* Flash content doesn't match SRAM content */
              ret_status = FLASH_IF_WRITE_ERROR;
 8001426:	23fc      	movs	r3, #252	; 0xfc
 8001428:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              break;
 800142c:	e00e      	b.n	800144c <FLASH_IF_INT_Write+0x1a8>
            }
            /* Increment FLASH Destination address */
            current_dest = current_dest + 8U;
 800142e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001430:	3308      	adds	r3, #8
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
 8001434:	e003      	b.n	800143e <FLASH_IF_INT_Write+0x19a>
          }
          else
          {
            /* Error occurred while writing data in Flash memory */
            ret_status = FLASH_IF_WRITE_ERROR;
 8001436:	23fc      	movs	r3, #252	; 0xfc
 8001438:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break;
 800143c:	e006      	b.n	800144c <FLASH_IF_INT_Write+0x1a8>
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 800143e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001440:	3308      	adds	r3, #8
 8001442:	62bb      	str	r3, [r7, #40]	; 0x28
 8001444:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	429a      	cmp	r2, r3
 800144a:	d3d4      	bcc.n	80013f6 <FLASH_IF_INT_Write+0x152>
          }
        }

        if (ret_status != FLASH_IF_OK)
 800144c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001450:	2b00      	cmp	r3, #0
 8001452:	d11b      	bne.n	800148c <FLASH_IF_INT_Write+0x1e8>
          /* Error occurred while writing data in Flash memory */
          break;
        }

        /* Increment FLASH destination address, source address, and decrease remaining length */
        uDest += length;
 8001454:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001458:	4413      	add	r3, r2
 800145a:	63bb      	str	r3, [r7, #56]	; 0x38
        uSource += length;
 800145c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800145e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001460:	4413      	add	r3, r2
 8001462:	637b      	str	r3, [r7, #52]	; 0x34
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800146e:	bf28      	it	cs
 8001470:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 8001474:	633b      	str	r3, [r7, #48]	; 0x30
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 8001476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001478:	3301      	adds	r3, #1
 800147a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	4413      	add	r3, r2
 8001482:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001484:	429a      	cmp	r2, r3
 8001486:	f4ff af6f 	bcc.w	8001368 <FLASH_IF_INT_Write+0xc4>
 800148a:	e000      	b.n	800148e <FLASH_IF_INT_Write+0x1ea>
          break;
 800148c:	bf00      	nop
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 800148e:	f003 fad1 	bl	8004a34 <HAL_FLASH_Lock>
 8001492:	e002      	b.n	800149a <FLASH_IF_INT_Write+0x1f6>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 8001494:	23fb      	movs	r3, #251	; 0xfb
 8001496:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Write_2 */

  /* USER CODE END FLASH_IF_INT_Write_2 */
  return ret_status;
 800149a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3740      	adds	r7, #64	; 0x40
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	1fff75e0 	.word	0x1fff75e0
 80014ac:	03fffc00 	.word	0x03fffc00
 80014b0:	200001c8 	.word	0x200001c8

080014b4 <FLASH_IF_INT_Read>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 80014c0:	2300      	movs	r3, #0
 80014c2:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_INT_Read_1 */

  /* USER CODE END FLASH_IF_INT_Read_1 */
  if ((pDestination == NULL) || (pSource == NULL))
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d002      	beq.n	80014d0 <FLASH_IF_INT_Read+0x1c>
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d102      	bne.n	80014d6 <FLASH_IF_INT_Read+0x22>
  {
    return FLASH_IF_PARAM_ERROR;
 80014d0:	f06f 0305 	mvn.w	r3, #5
 80014d4:	e008      	b.n	80014e8 <FLASH_IF_INT_Read+0x34>
  }

  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	b29b      	uxth	r3, r3
 80014da:	461a      	mov	r2, r3
 80014dc:	68b9      	ldr	r1, [r7, #8]
 80014de:	68f8      	ldr	r0, [r7, #12]
 80014e0:	f01b f832 	bl	801c548 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN FLASH_IF_INT_Read_2 */

  /* USER CODE END FLASH_IF_INT_Read_2 */
  return ret_status;
 80014e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3718      	adds	r7, #24
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <FLASH_IF_INT_Erase>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Erase(void *pStart, uint32_t uLength)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b088      	sub	sp, #32
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 80014fa:	2300      	movs	r3, #0
 80014fc:	77fb      	strb	r3, [r7, #31]
  /* USER CODE BEGIN FLASH_IF_INT_Erase_1 */

  /* USER CODE END FLASH_IF_INT_Erase_1 */
  HAL_StatusTypeDef hal_status = HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	77bb      	strb	r3, [r7, #30]
  uint32_t page_error = 0U;
 8001502:	2300      	movs	r3, #0
 8001504:	617b      	str	r3, [r7, #20]
  uint32_t uStart = (uint32_t)pStart;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef erase_init;

  if (pStart == NULL)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d102      	bne.n	8001516 <FLASH_IF_INT_Erase+0x26>
  {
    return FLASH_IF_PARAM_ERROR;
 8001510:	f06f 0305 	mvn.w	r3, #5
 8001514:	e04e      	b.n	80015b4 <FLASH_IF_INT_Erase+0xc4>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 8001516:	f000 f87b 	bl	8001610 <FLASH_IF_INT_Clear_Error>
 800151a:	4603      	mov	r3, r0
 800151c:	77fb      	strb	r3, [r7, #31]

  if (ret_status == FLASH_IF_OK)
 800151e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d144      	bne.n	80015b0 <FLASH_IF_INT_Erase+0xc0>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001526:	f003 fa63 	bl	80049f0 <HAL_FLASH_Unlock>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d13d      	bne.n	80015ac <FLASH_IF_INT_Erase+0xbc>
    {
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8001530:	2302      	movs	r3, #2
 8001532:	60bb      	str	r3, [r7, #8]
      erase_init.Page = PAGE_INDEX(uStart);
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 800153a:	4b20      	ldr	r3, [pc, #128]	; (80015bc <FLASH_IF_INT_Erase+0xcc>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	0299      	lsls	r1, r3, #10
 8001540:	4b1f      	ldr	r3, [pc, #124]	; (80015c0 <FLASH_IF_INT_Erase+0xd0>)
 8001542:	400b      	ands	r3, r1
 8001544:	fbb2 f1f3 	udiv	r1, r2, r3
 8001548:	fb01 f303 	mul.w	r3, r1, r3
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	0adb      	lsrs	r3, r3, #11
 8001550:	60fb      	str	r3, [r7, #12]
      /* Get the number of pages to erase from 1st page */
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	4413      	add	r3, r2
 8001558:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800155c:	3b01      	subs	r3, #1
 800155e:	4a17      	ldr	r2, [pc, #92]	; (80015bc <FLASH_IF_INT_Erase+0xcc>)
 8001560:	6812      	ldr	r2, [r2, #0]
 8001562:	0291      	lsls	r1, r2, #10
 8001564:	4a16      	ldr	r2, [pc, #88]	; (80015c0 <FLASH_IF_INT_Erase+0xd0>)
 8001566:	400a      	ands	r2, r1
 8001568:	fbb3 f1f2 	udiv	r1, r3, r2
 800156c:	fb01 f202 	mul.w	r2, r1, r2
 8001570:	1a9b      	subs	r3, r3, r2
 8001572:	0ada      	lsrs	r2, r3, #11
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	3301      	adds	r3, #1
 800157a:	613b      	str	r3, [r7, #16]

      /* Erase the Page */
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 800157c:	f107 0214 	add.w	r2, r7, #20
 8001580:	f107 0308 	add.w	r3, r7, #8
 8001584:	4611      	mov	r1, r2
 8001586:	4618      	mov	r0, r3
 8001588:	f003 fb34 	bl	8004bf4 <HAL_FLASHEx_Erase>
 800158c:	4603      	mov	r3, r0
 800158e:	77bb      	strb	r3, [r7, #30]

      if (hal_status != HAL_OK)
 8001590:	7fbb      	ldrb	r3, [r7, #30]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d007      	beq.n	80015a6 <FLASH_IF_INT_Erase+0xb6>
      {
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 8001596:	7fbb      	ldrb	r3, [r7, #30]
 8001598:	2b02      	cmp	r3, #2
 800159a:	d101      	bne.n	80015a0 <FLASH_IF_INT_Erase+0xb0>
 800159c:	2301      	movs	r3, #1
 800159e:	e001      	b.n	80015a4 <FLASH_IF_INT_Erase+0xb4>
 80015a0:	f06f 0301 	mvn.w	r3, #1
 80015a4:	77fb      	strb	r3, [r7, #31]
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 80015a6:	f003 fa45 	bl	8004a34 <HAL_FLASH_Lock>
 80015aa:	e001      	b.n	80015b0 <FLASH_IF_INT_Erase+0xc0>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 80015ac:	23fb      	movs	r3, #251	; 0xfb
 80015ae:	77fb      	strb	r3, [r7, #31]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Erase_2 */

  /* USER CODE END FLASH_IF_INT_Erase_2 */
  return ret_status;
 80015b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3720      	adds	r7, #32
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	1fff75e0 	.word	0x1fff75e0
 80015c0:	03fffc00 	.word	0x03fffc00

080015c4 <FLASH_IF_INT_IsEmpty>:

static int32_t FLASH_IF_INT_IsEmpty(void *pStart, uint32_t uLength)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  int32_t status = FLASH_IF_MEM_EMPTY;
 80015ce:	2300      	movs	r3, #0
 80015d0:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 80015d2:	2300      	movs	r3, #0
 80015d4:	60bb      	str	r3, [r7, #8]
 80015d6:	e011      	b.n	80015fc <FLASH_IF_INT_IsEmpty+0x38>
  {
    if (*(uint64_t *)pStart != UINT64_MAX)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015e2:	bf08      	it	eq
 80015e4:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 80015e8:	d002      	beq.n	80015f0 <FLASH_IF_INT_IsEmpty+0x2c>
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
 80015ea:	2301      	movs	r3, #1
 80015ec:	60fb      	str	r3, [r7, #12]
      break;
 80015ee:	e009      	b.n	8001604 <FLASH_IF_INT_IsEmpty+0x40>
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	3308      	adds	r3, #8
 80015f4:	607b      	str	r3, [r7, #4]
  for (index = 0; index < uLength; index += 8)
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	3308      	adds	r3, #8
 80015fa:	60bb      	str	r3, [r7, #8]
 80015fc:	68ba      	ldr	r2, [r7, #8]
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	429a      	cmp	r2, r3
 8001602:	d3e9      	bcc.n	80015d8 <FLASH_IF_INT_IsEmpty+0x14>
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
 8001604:	68fb      	ldr	r3, [r7, #12]
}
 8001606:	4618      	mov	r0, r3
 8001608:	3714      	adds	r7, #20
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr

08001610 <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 8001616:	23fb      	movs	r3, #251	; 0xfb
 8001618:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 800161a:	f003 f9e9 	bl	80049f0 <HAL_FLASH_Unlock>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d110      	bne.n	8001646 <FLASH_IF_INT_Clear_Error+0x36>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001624:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <FLASH_IF_INT_Clear_Error+0x44>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	4a0a      	ldr	r2, [pc, #40]	; (8001654 <FLASH_IF_INT_Clear_Error+0x44>)
 800162a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800162e:	6193      	str	r3, [r2, #24]
 8001630:	4b08      	ldr	r3, [pc, #32]	; (8001654 <FLASH_IF_INT_Clear_Error+0x44>)
 8001632:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 8001636:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 8001638:	f003 f9fc 	bl	8004a34 <HAL_FLASH_Lock>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d101      	bne.n	8001646 <FLASH_IF_INT_Clear_Error+0x36>
    {
      ret_status = FLASH_IF_OK;
 8001642:	2300      	movs	r3, #0
 8001644:	71fb      	strb	r3, [r7, #7]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
 8001646:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800164a:	4618      	mov	r0, r3
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	58004000 	.word	0x58004000

08001658 <LL_AHB2_GRP1_EnableClock>:
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001660:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001664:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001666:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4313      	orrs	r3, r2
 800166e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001670:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001674:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4013      	ands	r3, r2
 800167a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800167c:	68fb      	ldr	r3, [r7, #12]
}
 800167e:	bf00      	nop
 8001680:	3714      	adds	r7, #20
 8001682:	46bd      	mov	sp, r7
 8001684:	bc80      	pop	{r7}
 8001686:	4770      	bx	lr

08001688 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168e:	1d3b      	adds	r3, r7, #4
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800169c:	2001      	movs	r0, #1
 800169e:	f7ff ffdb 	bl	8001658 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a2:	2002      	movs	r0, #2
 80016a4:	f7ff ffd8 	bl	8001658 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a8:	2004      	movs	r0, #4
 80016aa:	f7ff ffd5 	bl	8001658 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Memory_CS_Pin|DBG2_Pin, GPIO_PIN_RESET);
 80016ae:	2200      	movs	r2, #0
 80016b0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80016b4:	482b      	ldr	r0, [pc, #172]	; (8001764 <MX_GPIO_Init+0xdc>)
 80016b6:	f003 fd9f 	bl	80051f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Bias_CS_Pin|Bias_Enable_Pin|Stim_Enable_Pin|RF_CTRL1_Pin
 80016ba:	2200      	movs	r2, #0
 80016bc:	f240 413c 	movw	r1, #1084	; 0x43c
 80016c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c4:	f003 fd98 	bl	80051f8 <HAL_GPIO_WritePin>
                          |RF_CTRL2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80016c8:	2201      	movs	r2, #1
 80016ca:	2120      	movs	r1, #32
 80016cc:	4825      	ldr	r0, [pc, #148]	; (8001764 <MX_GPIO_Init+0xdc>)
 80016ce:	f003 fd93 	bl	80051f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Memory_CS_Pin;
 80016d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d8:	2301      	movs	r3, #1
 80016da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e0:	2300      	movs	r3, #0
 80016e2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Memory_CS_GPIO_Port, &GPIO_InitStruct);
 80016e4:	1d3b      	adds	r3, r7, #4
 80016e6:	4619      	mov	r1, r3
 80016e8:	481e      	ldr	r0, [pc, #120]	; (8001764 <MX_GPIO_Init+0xdc>)
 80016ea:	f003 fb57 	bl	8004d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Bias_CS_Pin|Bias_Enable_Pin|Stim_Enable_Pin;
 80016ee:	f240 430c 	movw	r3, #1036	; 0x40c
 80016f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f4:	2301      	movs	r3, #1
 80016f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fc:	2300      	movs	r3, #0
 80016fe:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001700:	1d3b      	adds	r3, r7, #4
 8001702:	4619      	mov	r1, r3
 8001704:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001708:	f003 fb48 	bl	8004d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED2_Pin|DBG2_Pin;
 800170c:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8001710:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001712:	2301      	movs	r3, #1
 8001714:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171a:	2303      	movs	r3, #3
 800171c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171e:	1d3b      	adds	r3, r7, #4
 8001720:	4619      	mov	r1, r3
 8001722:	4810      	ldr	r0, [pc, #64]	; (8001764 <MX_GPIO_Init+0xdc>)
 8001724:	f003 fb3a 	bl	8004d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Anneal_Enable_Pin;
 8001728:	2301      	movs	r3, #1
 800172a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800172c:	2300      	movs	r3, #0
 800172e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(Anneal_Enable_GPIO_Port, &GPIO_InitStruct);
 8001734:	1d3b      	adds	r3, r7, #4
 8001736:	4619      	mov	r1, r3
 8001738:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800173c:	f003 fb2e 	bl	8004d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RF_CTRL1_Pin|RF_CTRL2_Pin;
 8001740:	2330      	movs	r3, #48	; 0x30
 8001742:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001744:	2301      	movs	r3, #1
 8001746:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174c:	2303      	movs	r3, #3
 800174e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001750:	1d3b      	adds	r3, r7, #4
 8001752:	4619      	mov	r1, r3
 8001754:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001758:	f003 fb20 	bl	8004d9c <HAL_GPIO_Init>

}
 800175c:	bf00      	nop
 800175e:	3718      	adds	r7, #24
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	48000400 	.word	0x48000400

08001768 <LL_AHB2_GRP1_EnableClock>:
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001774:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001776:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4313      	orrs	r3, r2
 800177e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001780:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001784:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4013      	ands	r3, r2
 800178a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800178c:	68fb      	ldr	r3, [r7, #12]
}
 800178e:	bf00      	nop
 8001790:	3714      	adds	r7, #20
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr

08001798 <LL_APB1_GRP1_EnableClock>:
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80017a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80017a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80017b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4013      	ands	r3, r2
 80017ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017bc:	68fb      	ldr	r3, [r7, #12]
}
 80017be:	bf00      	nop
 80017c0:	3714      	adds	r7, #20
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bc80      	pop	{r7}
 80017c6:	4770      	bx	lr

080017c8 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80017cc:	4b1b      	ldr	r3, [pc, #108]	; (800183c <MX_I2C2_Init+0x74>)
 80017ce:	4a1c      	ldr	r2, [pc, #112]	; (8001840 <MX_I2C2_Init+0x78>)
 80017d0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 80017d2:	4b1a      	ldr	r3, [pc, #104]	; (800183c <MX_I2C2_Init+0x74>)
 80017d4:	4a1b      	ldr	r2, [pc, #108]	; (8001844 <MX_I2C2_Init+0x7c>)
 80017d6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80017d8:	4b18      	ldr	r3, [pc, #96]	; (800183c <MX_I2C2_Init+0x74>)
 80017da:	2200      	movs	r2, #0
 80017dc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017de:	4b17      	ldr	r3, [pc, #92]	; (800183c <MX_I2C2_Init+0x74>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017e4:	4b15      	ldr	r3, [pc, #84]	; (800183c <MX_I2C2_Init+0x74>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80017ea:	4b14      	ldr	r3, [pc, #80]	; (800183c <MX_I2C2_Init+0x74>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017f0:	4b12      	ldr	r3, [pc, #72]	; (800183c <MX_I2C2_Init+0x74>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017f6:	4b11      	ldr	r3, [pc, #68]	; (800183c <MX_I2C2_Init+0x74>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017fc:	4b0f      	ldr	r3, [pc, #60]	; (800183c <MX_I2C2_Init+0x74>)
 80017fe:	2200      	movs	r2, #0
 8001800:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001802:	480e      	ldr	r0, [pc, #56]	; (800183c <MX_I2C2_Init+0x74>)
 8001804:	f003 fd0f 	bl	8005226 <HAL_I2C_Init>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800180e:	f000 f8fb 	bl	8001a08 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001812:	2100      	movs	r1, #0
 8001814:	4809      	ldr	r0, [pc, #36]	; (800183c <MX_I2C2_Init+0x74>)
 8001816:	f003 fd95 	bl	8005344 <HAL_I2CEx_ConfigAnalogFilter>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001820:	f000 f8f2 	bl	8001a08 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001824:	2100      	movs	r1, #0
 8001826:	4805      	ldr	r0, [pc, #20]	; (800183c <MX_I2C2_Init+0x74>)
 8001828:	f003 fdd6 	bl	80053d8 <HAL_I2CEx_ConfigDigitalFilter>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001832:	f000 f8e9 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	200001cc 	.word	0x200001cc
 8001840:	40005800 	.word	0x40005800
 8001844:	20303e5d 	.word	0x20303e5d

08001848 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b096      	sub	sp, #88	; 0x58
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001850:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
 800185e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001860:	f107 030c 	add.w	r3, r7, #12
 8001864:	2238      	movs	r2, #56	; 0x38
 8001866:	2100      	movs	r1, #0
 8001868:	4618      	mov	r0, r3
 800186a:	f01c f931 	bl	801dad0 <memset>
  if(i2cHandle->Instance==I2C2)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a21      	ldr	r2, [pc, #132]	; (80018f8 <HAL_I2C_MspInit+0xb0>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d13b      	bne.n	80018f0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001878:	2380      	movs	r3, #128	; 0x80
 800187a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800187c:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001880:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001882:	f107 030c 	add.w	r3, r7, #12
 8001886:	4618      	mov	r0, r3
 8001888:	f005 f862 	bl	8006950 <HAL_RCCEx_PeriphCLKConfig>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001892:	f000 f8b9 	bl	8001a08 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001896:	2001      	movs	r0, #1
 8001898:	f7ff ff66 	bl	8001768 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800189c:	2002      	movs	r0, #2
 800189e:	f7ff ff63 	bl	8001768 <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80018a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018a6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018a8:	2312      	movs	r3, #18
 80018aa:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b0:	2300      	movs	r3, #0
 80018b2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80018b4:	2304      	movs	r3, #4
 80018b6:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80018bc:	4619      	mov	r1, r3
 80018be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018c2:	f003 fa6b 	bl	8004d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80018c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018ca:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018cc:	2312      	movs	r3, #18
 80018ce:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d4:	2300      	movs	r3, #0
 80018d6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80018d8:	2304      	movs	r3, #4
 80018da:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80018e0:	4619      	mov	r1, r3
 80018e2:	4806      	ldr	r0, [pc, #24]	; (80018fc <HAL_I2C_MspInit+0xb4>)
 80018e4:	f003 fa5a 	bl	8004d9c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80018e8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80018ec:	f7ff ff54 	bl	8001798 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80018f0:	bf00      	nop
 80018f2:	3758      	adds	r7, #88	; 0x58
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40005800 	.word	0x40005800
 80018fc:	48000400 	.word	0x48000400

08001900 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800190c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001910:	f023 0218 	bic.w	r2, r3, #24
 8001914:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4313      	orrs	r3, r2
 800191c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	bc80      	pop	{r7}
 8001928:	4770      	bx	lr

0800192a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800192e:	f001 fa47 	bl	8002dc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001932:	f000 f80b 	bl	800194c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001936:	f7ff fea7 	bl	8001688 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 800193a:	f008 fc75 	bl	800a228 <MX_LoRaWAN_Init>
  MX_I2C2_Init();
 800193e:	f7ff ff43 	bl	80017c8 <MX_I2C2_Init>
  MX_SPI2_Init();
 8001942:	f000 f94d 	bl	8001be0 <MX_SPI2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 8001946:	f008 fc77 	bl	800a238 <MX_LoRaWAN_Process>
 800194a:	e7fc      	b.n	8001946 <main+0x1c>

0800194c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b09a      	sub	sp, #104	; 0x68
 8001950:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001952:	f107 0320 	add.w	r3, r7, #32
 8001956:	2248      	movs	r2, #72	; 0x48
 8001958:	2100      	movs	r1, #0
 800195a:	4618      	mov	r0, r3
 800195c:	f01c f8b8 	bl	801dad0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001960:	f107 0308 	add.w	r3, r7, #8
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
 800196e:	611a      	str	r2, [r3, #16]
 8001970:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001972:	f003 fd7d 	bl	8005470 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001976:	2000      	movs	r0, #0
 8001978:	f7ff ffc2 	bl	8001900 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800197c:	4b21      	ldr	r3, [pc, #132]	; (8001a04 <SystemClock_Config+0xb8>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001984:	4a1f      	ldr	r2, [pc, #124]	; (8001a04 <SystemClock_Config+0xb8>)
 8001986:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800198a:	6013      	str	r3, [r2, #0]
 800198c:	4b1d      	ldr	r3, [pc, #116]	; (8001a04 <SystemClock_Config+0xb8>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001994:	607b      	str	r3, [r7, #4]
 8001996:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8001998:	2326      	movs	r3, #38	; 0x26
 800199a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800199c:	2381      	movs	r3, #129	; 0x81
 800199e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019a4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80019a6:	2301      	movs	r3, #1
 80019a8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019aa:	2340      	movs	r3, #64	; 0x40
 80019ac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80019ae:	2300      	movs	r3, #0
 80019b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80019b2:	23b0      	movs	r3, #176	; 0xb0
 80019b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80019b6:	2300      	movs	r3, #0
 80019b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019ba:	f107 0320 	add.w	r3, r7, #32
 80019be:	4618      	mov	r0, r3
 80019c0:	f004 f8a2 	bl	8005b08 <HAL_RCC_OscConfig>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <SystemClock_Config+0x82>
  {
    Error_Handler();
 80019ca:	f000 f81d 	bl	8001a08 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80019ce:	234f      	movs	r3, #79	; 0x4f
 80019d0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80019d2:	2300      	movs	r3, #0
 80019d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019d6:	2300      	movs	r3, #0
 80019d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019da:	2300      	movs	r3, #0
 80019dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019de:	2300      	movs	r3, #0
 80019e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019e6:	f107 0308 	add.w	r3, r7, #8
 80019ea:	2102      	movs	r1, #2
 80019ec:	4618      	mov	r0, r3
 80019ee:	f004 fc0d 	bl	800620c <HAL_RCC_ClockConfig>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80019f8:	f000 f806 	bl	8001a08 <Error_Handler>
  }
}
 80019fc:	bf00      	nop
 80019fe:	3768      	adds	r7, #104	; 0x68
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	58000400 	.word	0x58000400

08001a08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a0c:	b672      	cpsid	i
}
 8001a0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a10:	e7fe      	b.n	8001a10 <Error_Handler+0x8>

08001a12 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001a12:	b480      	push	{r7}
 8001a14:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001a16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001a2a:	bf00      	nop
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bc80      	pop	{r7}
 8001a30:	4770      	bx	lr

08001a32 <LL_APB1_GRP1_EnableClock>:
{
 8001a32:	b480      	push	{r7}
 8001a34:	b085      	sub	sp, #20
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001a3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a3e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001a4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a4e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4013      	ands	r3, r2
 8001a54:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a56:	68fb      	ldr	r3, [r7, #12]
}
 8001a58:	bf00      	nop
 8001a5a:	3714      	adds	r7, #20
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc80      	pop	{r7}
 8001a60:	4770      	bx	lr
	...

08001a64 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08c      	sub	sp, #48	; 0x30
 8001a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001a6a:	1d3b      	adds	r3, r7, #4
 8001a6c:	222c      	movs	r2, #44	; 0x2c
 8001a6e:	2100      	movs	r1, #0
 8001a70:	4618      	mov	r0, r3
 8001a72:	f01c f82d 	bl	801dad0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001a76:	4b22      	ldr	r3, [pc, #136]	; (8001b00 <MX_RTC_Init+0x9c>)
 8001a78:	4a22      	ldr	r2, [pc, #136]	; (8001b04 <MX_RTC_Init+0xa0>)
 8001a7a:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001a7c:	4b20      	ldr	r3, [pc, #128]	; (8001b00 <MX_RTC_Init+0x9c>)
 8001a7e:	221f      	movs	r2, #31
 8001a80:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a82:	4b1f      	ldr	r3, [pc, #124]	; (8001b00 <MX_RTC_Init+0x9c>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001a88:	4b1d      	ldr	r3, [pc, #116]	; (8001b00 <MX_RTC_Init+0x9c>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a8e:	4b1c      	ldr	r3, [pc, #112]	; (8001b00 <MX_RTC_Init+0x9c>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a94:	4b1a      	ldr	r3, [pc, #104]	; (8001b00 <MX_RTC_Init+0x9c>)
 8001a96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a9a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001a9c:	4b18      	ldr	r3, [pc, #96]	; (8001b00 <MX_RTC_Init+0x9c>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001aa2:	4b17      	ldr	r3, [pc, #92]	; (8001b00 <MX_RTC_Init+0x9c>)
 8001aa4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001aa8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001aaa:	4815      	ldr	r0, [pc, #84]	; (8001b00 <MX_RTC_Init+0x9c>)
 8001aac:	f005 f86a 	bl	8006b84 <HAL_RTC_Init>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8001ab6:	f7ff ffa7 	bl	8001a08 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001aba:	4811      	ldr	r0, [pc, #68]	; (8001b00 <MX_RTC_Init+0x9c>)
 8001abc:	f005 fb60 	bl	8007180 <HAL_RTCEx_SetSSRU_IT>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001ac6:	f7ff ff9f 	bl	8001a08 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001aca:	2300      	movs	r3, #0
 8001acc:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001ad6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001ada:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001adc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001ae2:	1d3b      	adds	r3, r7, #4
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4805      	ldr	r0, [pc, #20]	; (8001b00 <MX_RTC_Init+0x9c>)
 8001aea:	f005 f8cd 	bl	8006c88 <HAL_RTC_SetAlarm_IT>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001af4:	f7ff ff88 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001af8:	bf00      	nop
 8001afa:	3730      	adds	r7, #48	; 0x30
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	20000220 	.word	0x20000220
 8001b04:	40002800 	.word	0x40002800

08001b08 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b090      	sub	sp, #64	; 0x40
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b10:	f107 0308 	add.w	r3, r7, #8
 8001b14:	2238      	movs	r2, #56	; 0x38
 8001b16:	2100      	movs	r1, #0
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f01b ffd9 	bl	801dad0 <memset>
  if(rtcHandle->Instance==RTC)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a16      	ldr	r2, [pc, #88]	; (8001b7c <HAL_RTC_MspInit+0x74>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d125      	bne.n	8001b74 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001b28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b2c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001b2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b32:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b34:	f107 0308 	add.w	r3, r7, #8
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f004 ff09 	bl	8006950 <HAL_RCCEx_PeriphCLKConfig>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001b44:	f7ff ff60 	bl	8001a08 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001b48:	f7ff ff63 	bl	8001a12 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001b4c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001b50:	f7ff ff6f 	bl	8001a32 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001b54:	2200      	movs	r2, #0
 8001b56:	2100      	movs	r1, #0
 8001b58:	2002      	movs	r0, #2
 8001b5a:	f002 fae4 	bl	8004126 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001b5e:	2002      	movs	r0, #2
 8001b60:	f002 fafb 	bl	800415a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001b64:	2200      	movs	r2, #0
 8001b66:	2100      	movs	r1, #0
 8001b68:	202a      	movs	r0, #42	; 0x2a
 8001b6a:	f002 fadc 	bl	8004126 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001b6e:	202a      	movs	r0, #42	; 0x2a
 8001b70:	f002 faf3 	bl	800415a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001b74:	bf00      	nop
 8001b76:	3740      	adds	r7, #64	; 0x40
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40002800 	.word	0x40002800

08001b80 <LL_AHB2_GRP1_EnableClock>:
{
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001b88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
}
 8001ba6:	bf00      	nop
 8001ba8:	3714      	adds	r7, #20
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bc80      	pop	{r7}
 8001bae:	4770      	bx	lr

08001bb0 <LL_APB1_GRP1_EnableClock>:
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001bb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bbc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001bbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001bc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bcc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
}
 8001bd6:	bf00      	nop
 8001bd8:	3714      	adds	r7, #20
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr

08001be0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001be4:	4b1b      	ldr	r3, [pc, #108]	; (8001c54 <MX_SPI2_Init+0x74>)
 8001be6:	4a1c      	ldr	r2, [pc, #112]	; (8001c58 <MX_SPI2_Init+0x78>)
 8001be8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001bea:	4b1a      	ldr	r3, [pc, #104]	; (8001c54 <MX_SPI2_Init+0x74>)
 8001bec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bf0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001bf2:	4b18      	ldr	r3, [pc, #96]	; (8001c54 <MX_SPI2_Init+0x74>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001bf8:	4b16      	ldr	r3, [pc, #88]	; (8001c54 <MX_SPI2_Init+0x74>)
 8001bfa:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001bfe:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c00:	4b14      	ldr	r3, [pc, #80]	; (8001c54 <MX_SPI2_Init+0x74>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c06:	4b13      	ldr	r3, [pc, #76]	; (8001c54 <MX_SPI2_Init+0x74>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001c0c:	4b11      	ldr	r3, [pc, #68]	; (8001c54 <MX_SPI2_Init+0x74>)
 8001c0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c12:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c14:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <MX_SPI2_Init+0x74>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c1a:	4b0e      	ldr	r3, [pc, #56]	; (8001c54 <MX_SPI2_Init+0x74>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c20:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <MX_SPI2_Init+0x74>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c26:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <MX_SPI2_Init+0x74>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001c2c:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <MX_SPI2_Init+0x74>)
 8001c2e:	2207      	movs	r2, #7
 8001c30:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c32:	4b08      	ldr	r3, [pc, #32]	; (8001c54 <MX_SPI2_Init+0x74>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001c38:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <MX_SPI2_Init+0x74>)
 8001c3a:	2208      	movs	r2, #8
 8001c3c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001c3e:	4805      	ldr	r0, [pc, #20]	; (8001c54 <MX_SPI2_Init+0x74>)
 8001c40:	f005 fb2c 	bl	800729c <HAL_SPI_Init>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001c4a:	f7ff fedd 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001c4e:	bf00      	nop
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	20000258 	.word	0x20000258
 8001c58:	40003800 	.word	0x40003800

08001c5c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b096      	sub	sp, #88	; 0x58
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c64:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
 8001c70:	60da      	str	r2, [r3, #12]
 8001c72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c74:	f107 030c 	add.w	r3, r7, #12
 8001c78:	2238      	movs	r2, #56	; 0x38
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f01b ff27 	bl	801dad0 <memset>
  if(spiHandle->Instance==SPI2)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a2b      	ldr	r2, [pc, #172]	; (8001d34 <HAL_SPI_MspInit+0xd8>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d14e      	bne.n	8001d2a <HAL_SPI_MspInit+0xce>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S2;
 8001c8c:	2310      	movs	r3, #16
 8001c8e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2s2ClockSelection = RCC_I2S2CLKSOURCE_HSI;
 8001c90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c94:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c96:	f107 030c 	add.w	r3, r7, #12
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f004 fe58 	bl	8006950 <HAL_RCCEx_PeriphCLKConfig>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001ca6:	f7ff feaf 	bl	8001a08 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001caa:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001cae:	f7ff ff7f 	bl	8001bb0 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb2:	2002      	movs	r0, #2
 8001cb4:	f7ff ff64 	bl	8001b80 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb8:	2001      	movs	r0, #1
 8001cba:	f7ff ff61 	bl	8001b80 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cbe:	2004      	movs	r0, #4
 8001cc0:	f7ff ff5e 	bl	8001b80 <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PB14     ------> SPI2_MISO
    PA9     ------> SPI2_SCK
    PC1     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001cc4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001cc8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001cd6:	2305      	movs	r3, #5
 8001cd8:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cda:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4815      	ldr	r0, [pc, #84]	; (8001d38 <HAL_SPI_MspInit+0xdc>)
 8001ce2:	f003 f85b 	bl	8004d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ce6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cea:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cec:	2302      	movs	r3, #2
 8001cee:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001cf8:	2305      	movs	r3, #5
 8001cfa:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d00:	4619      	mov	r1, r3
 8001d02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d06:	f003 f849 	bl	8004d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d16:	2300      	movs	r3, #0
 8001d18:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d1e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d22:	4619      	mov	r1, r3
 8001d24:	4805      	ldr	r0, [pc, #20]	; (8001d3c <HAL_SPI_MspInit+0xe0>)
 8001d26:	f003 f839 	bl	8004d9c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001d2a:	bf00      	nop
 8001d2c:	3758      	adds	r7, #88	; 0x58
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40003800 	.word	0x40003800
 8001d38:	48000400 	.word	0x48000400
 8001d3c:	48000800 	.word	0x48000800

08001d40 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001d44:	4b03      	ldr	r3, [pc, #12]	; (8001d54 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8001d46:	2201      	movs	r2, #1
 8001d48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8001d4c:	bf00      	nop
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr
 8001d54:	58000400 	.word	0x58000400

08001d58 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001d5c:	bf00      	nop
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc80      	pop	{r7}
 8001d62:	4770      	bx	lr

08001d64 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr

08001d70 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001d74:	f001 f844 	bl	8002e00 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8001d78:	f7ff ffe2 	bl	8001d40 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001d7c:	2001      	movs	r0, #1
 8001d7e:	f003 fc09 	bl	8005594 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 8001d8a:	f001 f847 	bl	8002e1c <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8001d8e:	f000 fec7 	bl	8002b20 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 8001d9a:	f001 f831 	bl	8002e00 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001d9e:	2101      	movs	r1, #1
 8001da0:	2000      	movs	r0, #0
 8001da2:	f003 fb73 	bl	800548c <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}

08001daa <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8001dae:	f001 f835 	bl	8002e1c <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001db6:	b480      	push	{r7}
 8001db8:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc80      	pop	{r7}
 8001dc0:	4770      	bx	lr

08001dc2 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dc6:	e7fe      	b.n	8001dc6 <NMI_Handler+0x4>

08001dc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dcc:	e7fe      	b.n	8001dcc <HardFault_Handler+0x4>

08001dce <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dd2:	e7fe      	b.n	8001dd2 <MemManage_Handler+0x4>

08001dd4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dd8:	e7fe      	b.n	8001dd8 <BusFault_Handler+0x4>

08001dda <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dde:	e7fe      	b.n	8001dde <UsageFault_Handler+0x4>

08001de0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001de4:	bf00      	nop
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bc80      	pop	{r7}
 8001dea:	4770      	bx	lr

08001dec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001df0:	bf00      	nop
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr

08001df8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dfc:	bf00      	nop
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bc80      	pop	{r7}
 8001e02:	4770      	bx	lr

08001e04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e08:	bf00      	nop
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bc80      	pop	{r7}
 8001e0e:	4770      	bx	lr

08001e10 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001e14:	4802      	ldr	r0, [pc, #8]	; (8001e20 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8001e16:	f005 f9ef 	bl	80071f8 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000220 	.word	0x20000220

08001e24 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001e28:	4802      	ldr	r0, [pc, #8]	; (8001e34 <DMA1_Channel1_IRQHandler+0x10>)
 8001e2a:	f002 fc2d 	bl	8004688 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20000364 	.word	0x20000364

08001e38 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e3c:	4802      	ldr	r0, [pc, #8]	; (8001e48 <USART1_IRQHandler+0x10>)
 8001e3e:	f006 f8f9 	bl	8008034 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	200002d0 	.word	0x200002d0

08001e4c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001e50:	4802      	ldr	r0, [pc, #8]	; (8001e5c <RTC_Alarm_IRQHandler+0x10>)
 8001e52:	f005 f881 	bl	8006f58 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	20000220 	.word	0x20000220

08001e60 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001e64:	4802      	ldr	r0, [pc, #8]	; (8001e70 <SUBGHZ_Radio_IRQHandler+0x10>)
 8001e66:	f005 fe09 	bl	8007a7c <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	200002bc 	.word	0x200002bc

08001e74 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001e7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e80:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001e82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001e8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e90:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4013      	ands	r3, r2
 8001e96:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e98:	68fb      	ldr	r3, [r7, #12]
}
 8001e9a:	bf00      	nop
 8001e9c:	3714      	adds	r7, #20
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bc80      	pop	{r7}
 8001ea2:	4770      	bx	lr

08001ea4 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001ea8:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <MX_SUBGHZ_Init+0x20>)
 8001eaa:	2208      	movs	r2, #8
 8001eac:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001eae:	4805      	ldr	r0, [pc, #20]	; (8001ec4 <MX_SUBGHZ_Init+0x20>)
 8001eb0:	f005 fb62 	bl	8007578 <HAL_SUBGHZ_Init>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8001eba:	f7ff fda5 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	200002bc 	.word	0x200002bc

08001ec8 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001ed0:	2001      	movs	r0, #1
 8001ed2:	f7ff ffcf 	bl	8001e74 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	2100      	movs	r1, #0
 8001eda:	2032      	movs	r0, #50	; 0x32
 8001edc:	f002 f923 	bl	8004126 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001ee0:	2032      	movs	r0, #50	; 0x32
 8001ee2:	f002 f93a 	bl	800415a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <LL_RCC_SetClkAfterWakeFromStop>:
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b083      	sub	sp, #12
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001ef6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001f00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	608b      	str	r3, [r1, #8]
}
 8001f0a:	bf00      	nop
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr

08001f14 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001f18:	4b02      	ldr	r3, [pc, #8]	; (8001f24 <LL_FLASH_GetUDN+0x10>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bc80      	pop	{r7}
 8001f22:	4770      	bx	lr
 8001f24:	1fff7580 	.word	0x1fff7580

08001f28 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001f2c:	4b03      	ldr	r3, [pc, #12]	; (8001f3c <LL_FLASH_GetDeviceID+0x14>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	b2db      	uxtb	r3, r3
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bc80      	pop	{r7}
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	1fff7584 	.word	0x1fff7584

08001f40 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001f44:	4b03      	ldr	r3, [pc, #12]	; (8001f54 <LL_FLASH_GetSTCompanyID+0x14>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	0a1b      	lsrs	r3, r3, #8
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc80      	pop	{r7}
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	1fff7584 	.word	0x1fff7584

08001f58 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8001f5c:	2000      	movs	r0, #0
 8001f5e:	f7ff ffc6 	bl	8001eee <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8001f62:	f01b f87f 	bl	801d064 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8001f66:	4b0e      	ldr	r3, [pc, #56]	; (8001fa0 <SystemApp_Init+0x48>)
 8001f68:	2201      	movs	r2, #1
 8001f6a:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8001f6c:	f000 f974 	bl	8002258 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8001f70:	f01b fb08 	bl	801d584 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001f74:	480b      	ldr	r0, [pc, #44]	; (8001fa4 <SystemApp_Init+0x4c>)
 8001f76:	f01b fbb3 	bl	801d6e0 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001f7a:	4b0b      	ldr	r3, [pc, #44]	; (8001fa8 <SystemApp_Init+0x50>)
 8001f7c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001f80:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001f82:	2002      	movs	r0, #2
 8001f84:	f01b fbba 	bl	801d6fc <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8001f88:	f7ff f864 	bl	8001054 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8001f8c:	f000 f998 	bl	80022c0 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8001f90:	f01a fa34 	bl	801c3fc <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001f94:	2101      	movs	r1, #1
 8001f96:	2001      	movs	r0, #1
 8001f98:	f01a fa70 	bl	801c47c <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8001f9c:	bf00      	nop
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	200002c8 	.word	0x200002c8
 8001fa4:	08002179 	.word	0x08002179
 8001fa8:	58004000 	.word	0x58004000

08001fac <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8001fb0:	f01a fa94 	bl	801c4dc <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8001fb4:	bf00      	nop
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8001fc2:	f7ff f855 	bl	8001070 <SYS_GetBatteryLevel>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8001fca:	88bb      	ldrh	r3, [r7, #4]
 8001fcc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d902      	bls.n	8001fda <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8001fd4:	23fe      	movs	r3, #254	; 0xfe
 8001fd6:	71fb      	strb	r3, [r7, #7]
 8001fd8:	e014      	b.n	8002004 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 8001fda:	88bb      	ldrh	r3, [r7, #4]
 8001fdc:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8001fe0:	d202      	bcs.n	8001fe8 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	71fb      	strb	r3, [r7, #7]
 8001fe6:	e00d      	b.n	8002004 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001fe8:	88bb      	ldrh	r3, [r7, #4]
 8001fea:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8001fee:	461a      	mov	r2, r3
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	01db      	lsls	r3, r3, #7
 8001ff4:	1a9b      	subs	r3, r3, r2
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4b05      	ldr	r3, [pc, #20]	; (8002010 <GetBatteryLevel+0x58>)
 8001ffc:	fba3 2302 	umull	r2, r3, r3, r2
 8002000:	09db      	lsrs	r3, r3, #7
 8002002:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8002004:	79fb      	ldrb	r3, [r7, #7]
}
 8002006:	4618      	mov	r0, r3
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	1b4e81b5 	.word	0x1b4e81b5

08002014 <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b088      	sub	sp, #32
 8002018:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 800201a:	2300      	movs	r3, #0
 800201c:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 800201e:	1d3b      	adds	r3, r7, #4
 8002020:	4618      	mov	r0, r3
 8002022:	f000 f923 	bl	800226c <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	4618      	mov	r0, r3
 800202a:	f7fe fd77 	bl	8000b1c <__aeabi_f2iz>
 800202e:	4603      	mov	r3, r0
 8002030:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8002032:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8002036:	4618      	mov	r0, r3
 8002038:	3720      	adds	r7, #32
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 800203e:	b590      	push	{r4, r7, lr}
 8002040:	b087      	sub	sp, #28
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8002046:	2300      	movs	r3, #0
 8002048:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 800204a:	f7ff ff63 	bl	8001f14 <LL_FLASH_GetUDN>
 800204e:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002056:	d138      	bne.n	80020ca <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8002058:	f000 feee 	bl	8002e38 <HAL_GetUIDw0>
 800205c:	4604      	mov	r4, r0
 800205e:	f000 feff 	bl	8002e60 <HAL_GetUIDw2>
 8002062:	4603      	mov	r3, r0
 8002064:	4423      	add	r3, r4
 8002066:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8002068:	f000 fef0 	bl	8002e4c <HAL_GetUIDw1>
 800206c:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	0e1a      	lsrs	r2, r3, #24
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	3307      	adds	r3, #7
 8002076:	b2d2      	uxtb	r2, r2
 8002078:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	0c1a      	lsrs	r2, r3, #16
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	3306      	adds	r3, #6
 8002082:	b2d2      	uxtb	r2, r2
 8002084:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	0a1a      	lsrs	r2, r3, #8
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	3305      	adds	r3, #5
 800208e:	b2d2      	uxtb	r2, r2
 8002090:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	3304      	adds	r3, #4
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	b2d2      	uxtb	r2, r2
 800209a:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	0e1a      	lsrs	r2, r3, #24
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3303      	adds	r3, #3
 80020a4:	b2d2      	uxtb	r2, r2
 80020a6:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	0c1a      	lsrs	r2, r3, #16
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	3302      	adds	r3, #2
 80020b0:	b2d2      	uxtb	r2, r2
 80020b2:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	0a1a      	lsrs	r2, r3, #8
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3301      	adds	r3, #1
 80020bc:	b2d2      	uxtb	r2, r2
 80020be:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 80020c8:	e031      	b.n	800212e <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	3307      	adds	r3, #7
 80020ce:	697a      	ldr	r2, [r7, #20]
 80020d0:	b2d2      	uxtb	r2, r2
 80020d2:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	0a1a      	lsrs	r2, r3, #8
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3306      	adds	r3, #6
 80020dc:	b2d2      	uxtb	r2, r2
 80020de:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	0c1a      	lsrs	r2, r3, #16
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3305      	adds	r3, #5
 80020e8:	b2d2      	uxtb	r2, r2
 80020ea:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	0e1a      	lsrs	r2, r3, #24
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3304      	adds	r3, #4
 80020f4:	b2d2      	uxtb	r2, r2
 80020f6:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 80020f8:	f7ff ff16 	bl	8001f28 <LL_FLASH_GetDeviceID>
 80020fc:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	3303      	adds	r3, #3
 8002102:	697a      	ldr	r2, [r7, #20]
 8002104:	b2d2      	uxtb	r2, r2
 8002106:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8002108:	f7ff ff1a 	bl	8001f40 <LL_FLASH_GetSTCompanyID>
 800210c:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	3302      	adds	r3, #2
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	b2d2      	uxtb	r2, r2
 8002116:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	0a1a      	lsrs	r2, r3, #8
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3301      	adds	r3, #1
 8002120:	b2d2      	uxtb	r2, r2
 8002122:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	0c1b      	lsrs	r3, r3, #16
 8002128:	b2da      	uxtb	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	701a      	strb	r2, [r3, #0]
}
 800212e:	bf00      	nop
 8002130:	371c      	adds	r7, #28
 8002132:	46bd      	mov	sp, r7
 8002134:	bd90      	pop	{r4, r7, pc}

08002136 <GetDevAddr>:

void GetDevAddr(uint32_t *devAddr)
{
 8002136:	b590      	push	{r4, r7, lr}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  *devAddr = LL_FLASH_GetUDN();
 800213e:	f7ff fee9 	bl	8001f14 <LL_FLASH_GetUDN>
 8002142:	4602      	mov	r2, r0
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	601a      	str	r2, [r3, #0]
  if (*devAddr == 0xFFFFFFFF)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002150:	d10d      	bne.n	800216e <GetDevAddr+0x38>
  {
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8002152:	f000 fe71 	bl	8002e38 <HAL_GetUIDw0>
 8002156:	4604      	mov	r4, r0
 8002158:	f000 fe78 	bl	8002e4c <HAL_GetUIDw1>
 800215c:	4603      	mov	r3, r0
 800215e:	405c      	eors	r4, r3
 8002160:	f000 fe7e 	bl	8002e60 <HAL_GetUIDw2>
 8002164:	4603      	mov	r3, r0
 8002166:	ea84 0203 	eor.w	r2, r4, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
}
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	bd90      	pop	{r4, r7, pc}
	...

08002178 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af02      	add	r7, sp, #8
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8002182:	f107 0308 	add.w	r3, r7, #8
 8002186:	4618      	mov	r0, r3
 8002188:	f01a fab8 	bl	801c6fc <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002192:	9200      	str	r2, [sp, #0]
 8002194:	4a07      	ldr	r2, [pc, #28]	; (80021b4 <TimestampNow+0x3c>)
 8002196:	2110      	movs	r1, #16
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 f81d 	bl	80021d8 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7fd ffea 	bl	8000178 <strlen>
 80021a4:	4603      	mov	r3, r0
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 80021ac:	bf00      	nop
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	0801dc40 	.word	0x0801dc40

080021b8 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 80021bc:	2101      	movs	r1, #1
 80021be:	2002      	movs	r0, #2
 80021c0:	f01a f92c 	bl	801c41c <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 80021c4:	bf00      	nop
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 80021cc:	2100      	movs	r1, #0
 80021ce:	2002      	movs	r0, #2
 80021d0:	f01a f924 	bl	801c41c <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 80021d4:	bf00      	nop
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 80021d8:	b40c      	push	{r2, r3}
 80021da:	b580      	push	{r7, lr}
 80021dc:	b084      	sub	sp, #16
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
 80021e2:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 80021e4:	f107 031c 	add.w	r3, r7, #28
 80021e8:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80021ea:	6839      	ldr	r1, [r7, #0]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f01a fc55 	bl	801caa0 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 80021f6:	bf00      	nop
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002200:	b002      	add	sp, #8
 8002202:	4770      	bx	lr

08002204 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 800220c:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 800220e:	4618      	mov	r0, r3
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	bc80      	pop	{r7}
 8002216:	4770      	bx	lr

08002218 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800221e:	2300      	movs	r3, #0
 8002220:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8002222:	4b06      	ldr	r3, [pc, #24]	; (800223c <HAL_GetTick+0x24>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d002      	beq.n	8002230 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 800222a:	f000 f915 	bl	8002458 <TIMER_IF_GetTimerValue>
 800222e:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8002230:	687b      	ldr	r3, [r7, #4]
}
 8002232:	4618      	mov	r0, r3
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	200002c8 	.word	0x200002c8

08002240 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4618      	mov	r0, r3
 800224c:	f000 f98b 	bl	8002566 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8002250:	bf00      	nop
 8002252:	3708      	adds	r7, #8
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 800225c:	f000 fe0a 	bl	8002e74 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8002260:	f000 fe0e 	bl	8002e80 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8002264:	f000 fe12 	bl	8002e8c <HAL_DBGMCU_DisableDBGStandbyMode>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8002268:	bf00      	nop
 800226a:	bd80      	pop	{r7, pc}

0800226c <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 800226c:	b480      	push	{r7}
 800226e:	b087      	sub	sp, #28
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8002274:	4b0d      	ldr	r3, [pc, #52]	; (80022ac <EnvSensors_Read+0x40>)
 8002276:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8002278:	4b0d      	ldr	r3, [pc, #52]	; (80022b0 <EnvSensors_Read+0x44>)
 800227a:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 800227c:	4b0d      	ldr	r3, [pc, #52]	; (80022b4 <EnvSensors_Read+0x48>)
 800227e:	60fb      	str	r3, [r7, #12]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	697a      	ldr	r2, [r7, #20]
 8002284:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a08      	ldr	r2, [pc, #32]	; (80022b8 <EnvSensors_Read+0x4c>)
 8002296:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4a08      	ldr	r2, [pc, #32]	; (80022bc <EnvSensors_Read+0x50>)
 800229c:	611a      	str	r2, [r3, #16]

  return 0;
 800229e:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	371c      	adds	r7, #28
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bc80      	pop	{r7}
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	42480000 	.word	0x42480000
 80022b0:	41900000 	.word	0x41900000
 80022b4:	447a0000 	.word	0x447a0000
 80022b8:	003e090d 	.word	0x003e090d
 80022bc:	000503ab 	.word	0x000503ab

080022c0 <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
  int32_t ret = 0;
 80022c6:	2300      	movs	r3, #0
 80022c8:	607b      	str	r3, [r7, #4]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 80022ca:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bc80      	pop	{r7}
 80022d4:	4770      	bx	lr

080022d6 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022d6:	b480      	push	{r7}
 80022d8:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80022da:	bf00      	nop
 80022dc:	46bd      	mov	sp, r7
 80022de:	bc80      	pop	{r7}
 80022e0:	4770      	bx	lr

080022e2 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 80022e2:	b480      	push	{r7}
 80022e4:	b083      	sub	sp, #12
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bc80      	pop	{r7}
 80022f6:	4770      	bx	lr

080022f8 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80022fe:	2300      	movs	r3, #0
 8002300:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8002302:	4b14      	ldr	r3, [pc, #80]	; (8002354 <TIMER_IF_Init+0x5c>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	f083 0301 	eor.w	r3, r3, #1
 800230a:	b2db      	uxtb	r3, r3
 800230c:	2b00      	cmp	r3, #0
 800230e:	d01b      	beq.n	8002348 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002310:	4b11      	ldr	r3, [pc, #68]	; (8002358 <TIMER_IF_Init+0x60>)
 8002312:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002316:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8002318:	f7ff fba4 	bl	8001a64 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 800231c:	f000 f856 	bl	80023cc <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002320:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002324:	480c      	ldr	r0, [pc, #48]	; (8002358 <TIMER_IF_Init+0x60>)
 8002326:	f004 fdbb 	bl	8006ea0 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800232a:	4b0b      	ldr	r3, [pc, #44]	; (8002358 <TIMER_IF_Init+0x60>)
 800232c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002330:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8002332:	4809      	ldr	r0, [pc, #36]	; (8002358 <TIMER_IF_Init+0x60>)
 8002334:	f004 fef2 	bl	800711c <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8002338:	2000      	movs	r0, #0
 800233a:	f000 f9d3 	bl	80026e4 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 800233e:	f000 f85f 	bl	8002400 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8002342:	4b04      	ldr	r3, [pc, #16]	; (8002354 <TIMER_IF_Init+0x5c>)
 8002344:	2201      	movs	r2, #1
 8002346:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8002348:	79fb      	ldrb	r3, [r7, #7]
}
 800234a:	4618      	mov	r0, r3
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	200002c9 	.word	0x200002c9
 8002358:	20000220 	.word	0x20000220

0800235c <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b08e      	sub	sp, #56	; 0x38
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002364:	2300      	movs	r3, #0
 8002366:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 800236a:	f107 0308 	add.w	r3, r7, #8
 800236e:	222c      	movs	r2, #44	; 0x2c
 8002370:	2100      	movs	r1, #0
 8002372:	4618      	mov	r0, r3
 8002374:	f01b fbac 	bl	801dad0 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8002378:	f000 f828 	bl	80023cc <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 800237c:	4b11      	ldr	r3, [pc, #68]	; (80023c4 <TIMER_IF_StartTimer+0x68>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	4413      	add	r3, r2
 8002384:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8002386:	2300      	movs	r3, #0
 8002388:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	43db      	mvns	r3, r3
 800238e:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002390:	2300      	movs	r3, #0
 8002392:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002394:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002398:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800239a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800239e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80023a0:	f107 0308 	add.w	r3, r7, #8
 80023a4:	2201      	movs	r2, #1
 80023a6:	4619      	mov	r1, r3
 80023a8:	4807      	ldr	r0, [pc, #28]	; (80023c8 <TIMER_IF_StartTimer+0x6c>)
 80023aa:	f004 fc6d 	bl	8006c88 <HAL_RTC_SetAlarm_IT>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 80023b4:	f7ff fb28 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 80023b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3738      	adds	r7, #56	; 0x38
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	200002cc 	.word	0x200002cc
 80023c8:	20000220 	.word	0x20000220

080023cc <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80023d2:	2300      	movs	r3, #0
 80023d4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 80023d6:	4b08      	ldr	r3, [pc, #32]	; (80023f8 <TIMER_IF_StopTimer+0x2c>)
 80023d8:	2201      	movs	r2, #1
 80023da:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80023dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023e0:	4806      	ldr	r0, [pc, #24]	; (80023fc <TIMER_IF_StopTimer+0x30>)
 80023e2:	f004 fd5d 	bl	8006ea0 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80023e6:	4b05      	ldr	r3, [pc, #20]	; (80023fc <TIMER_IF_StopTimer+0x30>)
 80023e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023ec:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 80023ee:	79fb      	ldrb	r3, [r7, #7]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40002800 	.word	0x40002800
 80023fc:	20000220 	.word	0x20000220

08002400 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8002404:	f000 f98e 	bl	8002724 <GetTimerTicks>
 8002408:	4603      	mov	r3, r0
 800240a:	4a03      	ldr	r2, [pc, #12]	; (8002418 <TIMER_IF_SetTimerContext+0x18>)
 800240c:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 800240e:	4b02      	ldr	r3, [pc, #8]	; (8002418 <TIMER_IF_SetTimerContext+0x18>)
 8002410:	681b      	ldr	r3, [r3, #0]
}
 8002412:	4618      	mov	r0, r3
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	200002cc 	.word	0x200002cc

0800241c <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002420:	4b02      	ldr	r3, [pc, #8]	; (800242c <TIMER_IF_GetTimerContext+0x10>)
 8002422:	681b      	ldr	r3, [r3, #0]
}
 8002424:	4618      	mov	r0, r3
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr
 800242c:	200002cc 	.word	0x200002cc

08002430 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002436:	2300      	movs	r3, #0
 8002438:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 800243a:	f000 f973 	bl	8002724 <GetTimerTicks>
 800243e:	4602      	mov	r2, r0
 8002440:	4b04      	ldr	r3, [pc, #16]	; (8002454 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8002448:	687b      	ldr	r3, [r7, #4]
}
 800244a:	4618      	mov	r0, r3
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	200002cc 	.word	0x200002cc

08002458 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800245e:	2300      	movs	r3, #0
 8002460:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8002462:	4b06      	ldr	r3, [pc, #24]	; (800247c <TIMER_IF_GetTimerValue+0x24>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d002      	beq.n	8002470 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 800246a:	f000 f95b 	bl	8002724 <GetTimerTicks>
 800246e:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8002470:	687b      	ldr	r3, [r7, #4]
}
 8002472:	4618      	mov	r0, r3
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	200002c9 	.word	0x200002c9

08002480 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002486:	2300      	movs	r3, #0
 8002488:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 800248a:	2303      	movs	r3, #3
 800248c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 800248e:	687b      	ldr	r3, [r7, #4]
}
 8002490:	4618      	mov	r0, r3
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	bc80      	pop	{r7}
 8002498:	4770      	bx	lr

0800249a <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 800249a:	b5b0      	push	{r4, r5, r7, lr}
 800249c:	b084      	sub	sp, #16
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80024a2:	2100      	movs	r1, #0
 80024a4:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	2000      	movs	r0, #0
 80024aa:	460a      	mov	r2, r1
 80024ac:	4603      	mov	r3, r0
 80024ae:	0d95      	lsrs	r5, r2, #22
 80024b0:	0294      	lsls	r4, r2, #10
 80024b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80024b6:	f04f 0300 	mov.w	r3, #0
 80024ba:	4620      	mov	r0, r4
 80024bc:	4629      	mov	r1, r5
 80024be:	f7fe fb73 	bl	8000ba8 <__aeabi_uldivmod>
 80024c2:	4602      	mov	r2, r0
 80024c4:	460b      	mov	r3, r1
 80024c6:	4613      	mov	r3, r2
 80024c8:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 80024ca:	68fb      	ldr	r3, [r7, #12]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bdb0      	pop	{r4, r5, r7, pc}

080024d4 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 80024d4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80024d8:	b085      	sub	sp, #20
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80024de:	2100      	movs	r1, #0
 80024e0:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	2000      	movs	r0, #0
 80024e6:	460c      	mov	r4, r1
 80024e8:	4605      	mov	r5, r0
 80024ea:	4620      	mov	r0, r4
 80024ec:	4629      	mov	r1, r5
 80024ee:	f04f 0a00 	mov.w	sl, #0
 80024f2:	f04f 0b00 	mov.w	fp, #0
 80024f6:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 80024fa:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 80024fe:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8002502:	4650      	mov	r0, sl
 8002504:	4659      	mov	r1, fp
 8002506:	1b02      	subs	r2, r0, r4
 8002508:	eb61 0305 	sbc.w	r3, r1, r5
 800250c:	f04f 0000 	mov.w	r0, #0
 8002510:	f04f 0100 	mov.w	r1, #0
 8002514:	0099      	lsls	r1, r3, #2
 8002516:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800251a:	0090      	lsls	r0, r2, #2
 800251c:	4602      	mov	r2, r0
 800251e:	460b      	mov	r3, r1
 8002520:	eb12 0804 	adds.w	r8, r2, r4
 8002524:	eb43 0905 	adc.w	r9, r3, r5
 8002528:	f04f 0200 	mov.w	r2, #0
 800252c:	f04f 0300 	mov.w	r3, #0
 8002530:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002534:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002538:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800253c:	4690      	mov	r8, r2
 800253e:	4699      	mov	r9, r3
 8002540:	4640      	mov	r0, r8
 8002542:	4649      	mov	r1, r9
 8002544:	f04f 0200 	mov.w	r2, #0
 8002548:	f04f 0300 	mov.w	r3, #0
 800254c:	0a82      	lsrs	r2, r0, #10
 800254e:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002552:	0a8b      	lsrs	r3, r1, #10
 8002554:	4613      	mov	r3, r2
 8002556:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8002558:	68fb      	ldr	r3, [r7, #12]
}
 800255a:	4618      	mov	r0, r3
 800255c:	3714      	adds	r7, #20
 800255e:	46bd      	mov	sp, r7
 8002560:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002564:	4770      	bx	lr

08002566 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b084      	sub	sp, #16
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7ff ff93 	bl	800249a <TIMER_IF_Convert_ms2Tick>
 8002574:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8002576:	f000 f8d5 	bl	8002724 <GetTimerTicks>
 800257a:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 800257c:	e000      	b.n	8002580 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 800257e:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002580:	f000 f8d0 	bl	8002724 <GetTimerTicks>
 8002584:	4602      	mov	r2, r0
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	429a      	cmp	r2, r3
 800258e:	d8f6      	bhi.n	800257e <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8002590:	bf00      	nop
 8002592:	bf00      	nop
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b082      	sub	sp, #8
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 80025a2:	f01a fead 	bl	801d300 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 80025a6:	bf00      	nop
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b084      	sub	sp, #16
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 80025b6:	f000 f8a5 	bl	8002704 <TIMER_IF_BkUp_Read_MSBticks>
 80025ba:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	3301      	adds	r3, #1
 80025c0:	4618      	mov	r0, r3
 80025c2:	f000 f88f 	bl	80026e4 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 80025c6:	bf00      	nop
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 80025ce:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025d2:	b08c      	sub	sp, #48	; 0x30
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 80025d8:	2300      	movs	r3, #0
 80025da:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 80025dc:	f000 f8a2 	bl	8002724 <GetTimerTicks>
 80025e0:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 80025e2:	f000 f88f 	bl	8002704 <TIMER_IF_BkUp_Read_MSBticks>
 80025e6:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	2200      	movs	r2, #0
 80025ec:	60bb      	str	r3, [r7, #8]
 80025ee:	60fa      	str	r2, [r7, #12]
 80025f0:	f04f 0200 	mov.w	r2, #0
 80025f4:	f04f 0300 	mov.w	r3, #0
 80025f8:	68b9      	ldr	r1, [r7, #8]
 80025fa:	000b      	movs	r3, r1
 80025fc:	2200      	movs	r2, #0
 80025fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002600:	2000      	movs	r0, #0
 8002602:	460c      	mov	r4, r1
 8002604:	4605      	mov	r5, r0
 8002606:	eb12 0804 	adds.w	r8, r2, r4
 800260a:	eb43 0905 	adc.w	r9, r3, r5
 800260e:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8002612:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002616:	f04f 0200 	mov.w	r2, #0
 800261a:	f04f 0300 	mov.w	r3, #0
 800261e:	0a82      	lsrs	r2, r0, #10
 8002620:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002624:	0a8b      	lsrs	r3, r1, #10
 8002626:	4613      	mov	r3, r2
 8002628:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	2200      	movs	r2, #0
 800262e:	603b      	str	r3, [r7, #0]
 8002630:	607a      	str	r2, [r7, #4]
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8002638:	f04f 0b00 	mov.w	fp, #0
 800263c:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff ff46 	bl	80024d4 <TIMER_IF_Convert_Tick2ms>
 8002648:	4603      	mov	r3, r0
 800264a:	b29a      	uxth	r2, r3
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8002650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002652:	4618      	mov	r0, r3
 8002654:	3730      	adds	r7, #48	; 0x30
 8002656:	46bd      	mov	sp, r7
 8002658:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800265c <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	2100      	movs	r1, #0
 8002668:	4803      	ldr	r0, [pc, #12]	; (8002678 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 800266a:	f004 fde9 	bl	8007240 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 800266e:	bf00      	nop
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	20000220 	.word	0x20000220

0800267c <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	2101      	movs	r1, #1
 8002688:	4803      	ldr	r0, [pc, #12]	; (8002698 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 800268a:	f004 fdd9 	bl	8007240 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 800268e:	bf00      	nop
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	20000220 	.word	0x20000220

0800269c <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80026a2:	2300      	movs	r3, #0
 80026a4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 80026a6:	2100      	movs	r1, #0
 80026a8:	4804      	ldr	r0, [pc, #16]	; (80026bc <TIMER_IF_BkUp_Read_Seconds+0x20>)
 80026aa:	f004 fde1 	bl	8007270 <HAL_RTCEx_BKUPRead>
 80026ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 80026b0:	687b      	ldr	r3, [r7, #4]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	20000220 	.word	0x20000220

080026c0 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80026c6:	2300      	movs	r3, #0
 80026c8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 80026ca:	2101      	movs	r1, #1
 80026cc:	4804      	ldr	r0, [pc, #16]	; (80026e0 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 80026ce:	f004 fdcf 	bl	8007270 <HAL_RTCEx_BKUPRead>
 80026d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 80026d4:	687b      	ldr	r3, [r7, #4]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	20000220 	.word	0x20000220

080026e4 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	2102      	movs	r1, #2
 80026f0:	4803      	ldr	r0, [pc, #12]	; (8002700 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 80026f2:	f004 fda5 	bl	8007240 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 80026f6:	bf00      	nop
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	20000220 	.word	0x20000220

08002704 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 800270a:	2102      	movs	r1, #2
 800270c:	4804      	ldr	r0, [pc, #16]	; (8002720 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 800270e:	f004 fdaf 	bl	8007270 <HAL_RTCEx_BKUPRead>
 8002712:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8002714:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8002716:	4618      	mov	r0, r3
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	20000220 	.word	0x20000220

08002724 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 800272a:	480b      	ldr	r0, [pc, #44]	; (8002758 <GetTimerTicks+0x34>)
 800272c:	f7ff fdd9 	bl	80022e2 <LL_RTC_TIME_GetSubSecond>
 8002730:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002732:	e003      	b.n	800273c <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002734:	4808      	ldr	r0, [pc, #32]	; (8002758 <GetTimerTicks+0x34>)
 8002736:	f7ff fdd4 	bl	80022e2 <LL_RTC_TIME_GetSubSecond>
 800273a:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800273c:	4806      	ldr	r0, [pc, #24]	; (8002758 <GetTimerTicks+0x34>)
 800273e:	f7ff fdd0 	bl	80022e2 <LL_RTC_TIME_GetSubSecond>
 8002742:	4602      	mov	r2, r0
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4293      	cmp	r3, r2
 8002748:	d1f4      	bne.n	8002734 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 800274e:	4618      	mov	r0, r3
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	40002800 	.word	0x40002800

0800275c <LL_AHB2_GRP1_EnableClock>:
{
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002764:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002768:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800276a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4313      	orrs	r3, r2
 8002772:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002774:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002778:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4013      	ands	r3, r2
 800277e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002780:	68fb      	ldr	r3, [r7, #12]
}
 8002782:	bf00      	nop
 8002784:	3714      	adds	r7, #20
 8002786:	46bd      	mov	sp, r7
 8002788:	bc80      	pop	{r7}
 800278a:	4770      	bx	lr

0800278c <LL_APB2_GRP1_EnableClock>:
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002794:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002798:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800279a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80027a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027a8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4013      	ands	r3, r2
 80027ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80027b0:	68fb      	ldr	r3, [r7, #12]
}
 80027b2:	bf00      	nop
 80027b4:	3714      	adds	r7, #20
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc80      	pop	{r7}
 80027ba:	4770      	bx	lr

080027bc <LL_APB2_GRP1_DisableClock>:
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80027c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	43db      	mvns	r3, r3
 80027ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027d2:	4013      	ands	r3, r2
 80027d4:	660b      	str	r3, [r1, #96]	; 0x60
}
 80027d6:	bf00      	nop
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr

080027e0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80027e4:	4b22      	ldr	r3, [pc, #136]	; (8002870 <MX_USART1_UART_Init+0x90>)
 80027e6:	4a23      	ldr	r2, [pc, #140]	; (8002874 <MX_USART1_UART_Init+0x94>)
 80027e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80027ea:	4b21      	ldr	r3, [pc, #132]	; (8002870 <MX_USART1_UART_Init+0x90>)
 80027ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027f2:	4b1f      	ldr	r3, [pc, #124]	; (8002870 <MX_USART1_UART_Init+0x90>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80027f8:	4b1d      	ldr	r3, [pc, #116]	; (8002870 <MX_USART1_UART_Init+0x90>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80027fe:	4b1c      	ldr	r3, [pc, #112]	; (8002870 <MX_USART1_UART_Init+0x90>)
 8002800:	2200      	movs	r2, #0
 8002802:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002804:	4b1a      	ldr	r3, [pc, #104]	; (8002870 <MX_USART1_UART_Init+0x90>)
 8002806:	220c      	movs	r2, #12
 8002808:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800280a:	4b19      	ldr	r3, [pc, #100]	; (8002870 <MX_USART1_UART_Init+0x90>)
 800280c:	2200      	movs	r2, #0
 800280e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002810:	4b17      	ldr	r3, [pc, #92]	; (8002870 <MX_USART1_UART_Init+0x90>)
 8002812:	2200      	movs	r2, #0
 8002814:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002816:	4b16      	ldr	r3, [pc, #88]	; (8002870 <MX_USART1_UART_Init+0x90>)
 8002818:	2200      	movs	r2, #0
 800281a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800281c:	4b14      	ldr	r3, [pc, #80]	; (8002870 <MX_USART1_UART_Init+0x90>)
 800281e:	2200      	movs	r2, #0
 8002820:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002822:	4b13      	ldr	r3, [pc, #76]	; (8002870 <MX_USART1_UART_Init+0x90>)
 8002824:	2200      	movs	r2, #0
 8002826:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002828:	4811      	ldr	r0, [pc, #68]	; (8002870 <MX_USART1_UART_Init+0x90>)
 800282a:	f005 fae6 	bl	8007dfa <HAL_UART_Init>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002834:	f7ff f8e8 	bl	8001a08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002838:	2100      	movs	r1, #0
 800283a:	480d      	ldr	r0, [pc, #52]	; (8002870 <MX_USART1_UART_Init+0x90>)
 800283c:	f007 fc09 	bl	800a052 <HAL_UARTEx_SetTxFifoThreshold>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002846:	f7ff f8df 	bl	8001a08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800284a:	2100      	movs	r1, #0
 800284c:	4808      	ldr	r0, [pc, #32]	; (8002870 <MX_USART1_UART_Init+0x90>)
 800284e:	f007 fc3e 	bl	800a0ce <HAL_UARTEx_SetRxFifoThreshold>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002858:	f7ff f8d6 	bl	8001a08 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 800285c:	4804      	ldr	r0, [pc, #16]	; (8002870 <MX_USART1_UART_Init+0x90>)
 800285e:	f007 fbbd 	bl	8009fdc <HAL_UARTEx_EnableFifoMode>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002868:	f7ff f8ce 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800286c:	bf00      	nop
 800286e:	bd80      	pop	{r7, pc}
 8002870:	200002d0 	.word	0x200002d0
 8002874:	40013800 	.word	0x40013800

08002878 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b096      	sub	sp, #88	; 0x58
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002880:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	605a      	str	r2, [r3, #4]
 800288a:	609a      	str	r2, [r3, #8]
 800288c:	60da      	str	r2, [r3, #12]
 800288e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002890:	f107 030c 	add.w	r3, r7, #12
 8002894:	2238      	movs	r2, #56	; 0x38
 8002896:	2100      	movs	r1, #0
 8002898:	4618      	mov	r0, r3
 800289a:	f01b f919 	bl	801dad0 <memset>
  if(uartHandle->Instance==USART1)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a2f      	ldr	r2, [pc, #188]	; (8002960 <HAL_UART_MspInit+0xe8>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d156      	bne.n	8002956 <HAL_UART_MspInit+0xde>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80028a8:	2301      	movs	r3, #1
 80028aa:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80028ac:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80028b0:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028b2:	f107 030c 	add.w	r3, r7, #12
 80028b6:	4618      	mov	r0, r3
 80028b8:	f004 f84a 	bl	8006950 <HAL_RCCEx_PeriphCLKConfig>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80028c2:	f7ff f8a1 	bl	8001a08 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80028c6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80028ca:	f7ff ff5f 	bl	800278c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ce:	2002      	movs	r0, #2
 80028d0:	f7ff ff44 	bl	800275c <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 80028d4:	23c0      	movs	r3, #192	; 0xc0
 80028d6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d8:	2302      	movs	r3, #2
 80028da:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028dc:	2300      	movs	r3, #0
 80028de:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028e0:	2303      	movs	r3, #3
 80028e2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028e4:	2307      	movs	r3, #7
 80028e6:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028e8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80028ec:	4619      	mov	r1, r3
 80028ee:	481d      	ldr	r0, [pc, #116]	; (8002964 <HAL_UART_MspInit+0xec>)
 80028f0:	f002 fa54 	bl	8004d9c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 80028f4:	4b1c      	ldr	r3, [pc, #112]	; (8002968 <HAL_UART_MspInit+0xf0>)
 80028f6:	4a1d      	ldr	r2, [pc, #116]	; (800296c <HAL_UART_MspInit+0xf4>)
 80028f8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80028fa:	4b1b      	ldr	r3, [pc, #108]	; (8002968 <HAL_UART_MspInit+0xf0>)
 80028fc:	2212      	movs	r2, #18
 80028fe:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002900:	4b19      	ldr	r3, [pc, #100]	; (8002968 <HAL_UART_MspInit+0xf0>)
 8002902:	2210      	movs	r2, #16
 8002904:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002906:	4b18      	ldr	r3, [pc, #96]	; (8002968 <HAL_UART_MspInit+0xf0>)
 8002908:	2200      	movs	r2, #0
 800290a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800290c:	4b16      	ldr	r3, [pc, #88]	; (8002968 <HAL_UART_MspInit+0xf0>)
 800290e:	2280      	movs	r2, #128	; 0x80
 8002910:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002912:	4b15      	ldr	r3, [pc, #84]	; (8002968 <HAL_UART_MspInit+0xf0>)
 8002914:	2200      	movs	r2, #0
 8002916:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002918:	4b13      	ldr	r3, [pc, #76]	; (8002968 <HAL_UART_MspInit+0xf0>)
 800291a:	2200      	movs	r2, #0
 800291c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800291e:	4b12      	ldr	r3, [pc, #72]	; (8002968 <HAL_UART_MspInit+0xf0>)
 8002920:	2200      	movs	r2, #0
 8002922:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002924:	4b10      	ldr	r3, [pc, #64]	; (8002968 <HAL_UART_MspInit+0xf0>)
 8002926:	2200      	movs	r2, #0
 8002928:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800292a:	480f      	ldr	r0, [pc, #60]	; (8002968 <HAL_UART_MspInit+0xf0>)
 800292c:	f001 fc32 	bl	8004194 <HAL_DMA_Init>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8002936:	f7ff f867 	bl	8001a08 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a0a      	ldr	r2, [pc, #40]	; (8002968 <HAL_UART_MspInit+0xf0>)
 800293e:	67da      	str	r2, [r3, #124]	; 0x7c
 8002940:	4a09      	ldr	r2, [pc, #36]	; (8002968 <HAL_UART_MspInit+0xf0>)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8002946:	2200      	movs	r2, #0
 8002948:	2102      	movs	r1, #2
 800294a:	2024      	movs	r0, #36	; 0x24
 800294c:	f001 fbeb 	bl	8004126 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002950:	2024      	movs	r0, #36	; 0x24
 8002952:	f001 fc02 	bl	800415a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002956:	bf00      	nop
 8002958:	3758      	adds	r7, #88	; 0x58
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	40013800 	.word	0x40013800
 8002964:	48000400 	.word	0x48000400
 8002968:	20000364 	.word	0x20000364
 800296c:	40020008 	.word	0x40020008

08002970 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a0b      	ldr	r2, [pc, #44]	; (80029ac <HAL_UART_MspDeInit+0x3c>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d10f      	bne.n	80029a2 <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002982:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002986:	f7ff ff19 	bl	80027bc <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 800298a:	21c0      	movs	r1, #192	; 0xc0
 800298c:	4808      	ldr	r0, [pc, #32]	; (80029b0 <HAL_UART_MspDeInit+0x40>)
 800298e:	f002 fb65 	bl	800505c <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002996:	4618      	mov	r0, r3
 8002998:	f001 fca4 	bl	80042e4 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800299c:	2024      	movs	r0, #36	; 0x24
 800299e:	f001 fbea 	bl	8004176 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 80029a2:	bf00      	nop
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	40013800 	.word	0x40013800
 80029b0:	48000400 	.word	0x48000400

080029b4 <LL_APB2_GRP1_ForceReset>:
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 80029bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	640b      	str	r3, [r1, #64]	; 0x40
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bc80      	pop	{r7}
 80029d4:	4770      	bx	lr

080029d6 <LL_APB2_GRP1_ReleaseReset>:
{
 80029d6:	b480      	push	{r7}
 80029d8:	b083      	sub	sp, #12
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 80029de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	43db      	mvns	r3, r3
 80029e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029ec:	4013      	ands	r3, r2
 80029ee:	640b      	str	r3, [r1, #64]	; 0x40
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bc80      	pop	{r7}
 80029f8:	4770      	bx	lr
	...

080029fc <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002a04:	4b06      	ldr	r3, [pc, #24]	; (8002a20 <LL_EXTI_EnableIT_0_31+0x24>)
 8002a06:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002a0a:	4905      	ldr	r1, [pc, #20]	; (8002a20 <LL_EXTI_EnableIT_0_31+0x24>)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002a14:	bf00      	nop
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bc80      	pop	{r7}
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	58000800 	.word	0x58000800

08002a24 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8002a2c:	4a07      	ldr	r2, [pc, #28]	; (8002a4c <vcom_Init+0x28>)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 8002a32:	f7fe fbaf 	bl	8001194 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002a36:	f7ff fed3 	bl	80027e0 <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 8002a3a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002a3e:	f7ff ffdd 	bl	80029fc <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8002a42:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	200003c8 	.word	0x200003c8

08002a50 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 8002a54:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002a58:	f7ff ffac 	bl	80029b4 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 8002a5c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002a60:	f7ff ffb9 	bl	80029d6 <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8002a64:	4804      	ldr	r0, [pc, #16]	; (8002a78 <vcom_DeInit+0x28>)
 8002a66:	f7ff ff83 	bl	8002970 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8002a6a:	200f      	movs	r0, #15
 8002a6c:	f001 fb83 	bl	8004176 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8002a70:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	200002d0 	.word	0x200002d0

08002a7c <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	460b      	mov	r3, r1
 8002a86:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8002a88:	887b      	ldrh	r3, [r7, #2]
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	6879      	ldr	r1, [r7, #4]
 8002a8e:	4804      	ldr	r0, [pc, #16]	; (8002aa0 <vcom_Trace_DMA+0x24>)
 8002a90:	f005 fa50 	bl	8007f34 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8002a94:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	200002d0 	.word	0x200002d0

08002aa4 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002aac:	4a19      	ldr	r2, [pc, #100]	; (8002b14 <vcom_ReceiveInit+0x70>)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002ab2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ab6:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8002ab8:	f107 0308 	add.w	r3, r7, #8
 8002abc:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002ac0:	4815      	ldr	r0, [pc, #84]	; (8002b18 <vcom_ReceiveInit+0x74>)
 8002ac2:	f007 f9fe 	bl	8009ec2 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8002ac6:	bf00      	nop
 8002ac8:	4b13      	ldr	r3, [pc, #76]	; (8002b18 <vcom_ReceiveInit+0x74>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	69db      	ldr	r3, [r3, #28]
 8002ace:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ad2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ad6:	d0f7      	beq.n	8002ac8 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8002ad8:	bf00      	nop
 8002ada:	4b0f      	ldr	r3, [pc, #60]	; (8002b18 <vcom_ReceiveInit+0x74>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	69db      	ldr	r3, [r3, #28]
 8002ae0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ae4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ae8:	d1f7      	bne.n	8002ada <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8002aea:	4b0b      	ldr	r3, [pc, #44]	; (8002b18 <vcom_ReceiveInit+0x74>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	4b09      	ldr	r3, [pc, #36]	; (8002b18 <vcom_ReceiveInit+0x74>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002af8:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 8002afa:	4807      	ldr	r0, [pc, #28]	; (8002b18 <vcom_ReceiveInit+0x74>)
 8002afc:	f007 fa3c 	bl	8009f78 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 8002b00:	2201      	movs	r2, #1
 8002b02:	4906      	ldr	r1, [pc, #24]	; (8002b1c <vcom_ReceiveInit+0x78>)
 8002b04:	4804      	ldr	r0, [pc, #16]	; (8002b18 <vcom_ReceiveInit+0x74>)
 8002b06:	f005 f9c9 	bl	8007e9c <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8002b0a:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	200003cc 	.word	0x200003cc
 8002b18:	200002d0 	.word	0x200002d0
 8002b1c:	200003c4 	.word	0x200003c4

08002b20 <vcom_Resume>:

void vcom_Resume(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b24:	4808      	ldr	r0, [pc, #32]	; (8002b48 <vcom_Resume+0x28>)
 8002b26:	f005 f968 	bl	8007dfa <HAL_UART_Init>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <vcom_Resume+0x14>
  {
    Error_Handler();
 8002b30:	f7fe ff6a 	bl	8001a08 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002b34:	4805      	ldr	r0, [pc, #20]	; (8002b4c <vcom_Resume+0x2c>)
 8002b36:	f001 fb2d 	bl	8004194 <HAL_DMA_Init>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <vcom_Resume+0x24>
  {
    Error_Handler();
 8002b40:	f7fe ff62 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8002b44:	bf00      	nop
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	200002d0 	.word	0x200002d0
 8002b4c:	20000364 	.word	0x20000364

08002b50 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a05      	ldr	r2, [pc, #20]	; (8002b74 <HAL_UART_TxCpltCallback+0x24>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d103      	bne.n	8002b6a <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 8002b62:	4b05      	ldr	r3, [pc, #20]	; (8002b78 <HAL_UART_TxCpltCallback+0x28>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2000      	movs	r0, #0
 8002b68:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002b6a:	bf00      	nop
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40013800 	.word	0x40013800
 8002b78:	200003c8 	.word	0x200003c8

08002b7c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a0d      	ldr	r2, [pc, #52]	; (8002bc0 <HAL_UART_RxCpltCallback+0x44>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d113      	bne.n	8002bb6 <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8002b8e:	4b0d      	ldr	r3, [pc, #52]	; (8002bc4 <HAL_UART_RxCpltCallback+0x48>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00a      	beq.n	8002bac <HAL_UART_RxCpltCallback+0x30>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d105      	bne.n	8002bac <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 8002ba0:	4b08      	ldr	r3, [pc, #32]	; (8002bc4 <HAL_UART_RxCpltCallback+0x48>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	4807      	ldr	r0, [pc, #28]	; (8002bc8 <HAL_UART_RxCpltCallback+0x4c>)
 8002baa:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8002bac:	2201      	movs	r2, #1
 8002bae:	4906      	ldr	r1, [pc, #24]	; (8002bc8 <HAL_UART_RxCpltCallback+0x4c>)
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f005 f973 	bl	8007e9c <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8002bb6:	bf00      	nop
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40013800 	.word	0x40013800
 8002bc4:	200003cc 	.word	0x200003cc
 8002bc8:	200003c4 	.word	0x200003c4

08002bcc <Reset_Handler>:
 8002bcc:	480d      	ldr	r0, [pc, #52]	; (8002c04 <LoopForever+0x2>)
 8002bce:	4685      	mov	sp, r0
 8002bd0:	f7ff fb81 	bl	80022d6 <SystemInit>
 8002bd4:	480c      	ldr	r0, [pc, #48]	; (8002c08 <LoopForever+0x6>)
 8002bd6:	490d      	ldr	r1, [pc, #52]	; (8002c0c <LoopForever+0xa>)
 8002bd8:	4a0d      	ldr	r2, [pc, #52]	; (8002c10 <LoopForever+0xe>)
 8002bda:	2300      	movs	r3, #0
 8002bdc:	e002      	b.n	8002be4 <LoopCopyDataInit>

08002bde <CopyDataInit>:
 8002bde:	58d4      	ldr	r4, [r2, r3]
 8002be0:	50c4      	str	r4, [r0, r3]
 8002be2:	3304      	adds	r3, #4

08002be4 <LoopCopyDataInit>:
 8002be4:	18c4      	adds	r4, r0, r3
 8002be6:	428c      	cmp	r4, r1
 8002be8:	d3f9      	bcc.n	8002bde <CopyDataInit>
 8002bea:	4a0a      	ldr	r2, [pc, #40]	; (8002c14 <LoopForever+0x12>)
 8002bec:	4c0a      	ldr	r4, [pc, #40]	; (8002c18 <LoopForever+0x16>)
 8002bee:	2300      	movs	r3, #0
 8002bf0:	e001      	b.n	8002bf6 <LoopFillZerobss>

08002bf2 <FillZerobss>:
 8002bf2:	6013      	str	r3, [r2, #0]
 8002bf4:	3204      	adds	r2, #4

08002bf6 <LoopFillZerobss>:
 8002bf6:	42a2      	cmp	r2, r4
 8002bf8:	d3fb      	bcc.n	8002bf2 <FillZerobss>
 8002bfa:	f01a ff71 	bl	801dae0 <__libc_init_array>
 8002bfe:	f7fe fe94 	bl	800192a <main>

08002c02 <LoopForever>:
 8002c02:	e7fe      	b.n	8002c02 <LoopForever>
 8002c04:	20010000 	.word	0x20010000
 8002c08:	20000000 	.word	0x20000000
 8002c0c:	20000148 	.word	0x20000148
 8002c10:	0801ec9c 	.word	0x0801ec9c
 8002c14:	20000148 	.word	0x20000148
 8002c18:	200022d0 	.word	0x200022d0

08002c1c <ADC_IRQHandler>:
 8002c1c:	e7fe      	b.n	8002c1c <ADC_IRQHandler>

08002c1e <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b086      	sub	sp, #24
 8002c22:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002c24:	1d3b      	adds	r3, r7, #4
 8002c26:	2200      	movs	r2, #0
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	605a      	str	r2, [r3, #4]
 8002c2c:	609a      	str	r2, [r3, #8]
 8002c2e:	60da      	str	r2, [r3, #12]
 8002c30:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8002c32:	2310      	movs	r3, #16
 8002c34:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002c36:	2301      	movs	r3, #1
 8002c38:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8002c42:	1d3b      	adds	r3, r7, #4
 8002c44:	4619      	mov	r1, r3
 8002c46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c4a:	f002 f8a7 	bl	8004d9c <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8002c4e:	2320      	movs	r3, #32
 8002c50:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8002c52:	1d3b      	adds	r3, r7, #4
 8002c54:	4619      	mov	r1, r3
 8002c56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c5a:	f002 f89f 	bl	8004d9c <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002c5e:	2200      	movs	r2, #0
 8002c60:	2120      	movs	r1, #32
 8002c62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c66:	f002 fac7 	bl	80051f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	2110      	movs	r1, #16
 8002c6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c72:	f002 fac1 	bl	80051f8 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3718      	adds	r7, #24
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	4603      	mov	r3, r0
 8002c88:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8002c8a:	79fb      	ldrb	r3, [r7, #7]
 8002c8c:	2b03      	cmp	r3, #3
 8002c8e:	d83f      	bhi.n	8002d10 <BSP_RADIO_ConfigRFSwitch+0x90>
 8002c90:	a201      	add	r2, pc, #4	; (adr r2, 8002c98 <BSP_RADIO_ConfigRFSwitch+0x18>)
 8002c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c96:	bf00      	nop
 8002c98:	08002ca9 	.word	0x08002ca9
 8002c9c:	08002cc3 	.word	0x08002cc3
 8002ca0:	08002cdd 	.word	0x08002cdd
 8002ca4:	08002cf7 	.word	0x08002cf7
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8002ca8:	2200      	movs	r2, #0
 8002caa:	2110      	movs	r1, #16
 8002cac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cb0:	f002 faa2 	bl	80051f8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	2120      	movs	r1, #32
 8002cb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cbc:	f002 fa9c 	bl	80051f8 <HAL_GPIO_WritePin>
      break;      
 8002cc0:	e027      	b.n	8002d12 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	2110      	movs	r1, #16
 8002cc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cca:	f002 fa95 	bl	80051f8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002cce:	2200      	movs	r2, #0
 8002cd0:	2120      	movs	r1, #32
 8002cd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cd6:	f002 fa8f 	bl	80051f8 <HAL_GPIO_WritePin>
      break;
 8002cda:	e01a      	b.n	8002d12 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002cdc:	2201      	movs	r2, #1
 8002cde:	2110      	movs	r1, #16
 8002ce0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ce4:	f002 fa88 	bl	80051f8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002ce8:	2201      	movs	r2, #1
 8002cea:	2120      	movs	r1, #32
 8002cec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cf0:	f002 fa82 	bl	80051f8 <HAL_GPIO_WritePin>
      break;
 8002cf4:	e00d      	b.n	8002d12 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	2110      	movs	r1, #16
 8002cfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cfe:	f002 fa7b 	bl	80051f8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002d02:	2201      	movs	r2, #1
 8002d04:	2120      	movs	r1, #32
 8002d06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d0a:	f002 fa75 	bl	80051f8 <HAL_GPIO_WritePin>
      break;
 8002d0e:	e000      	b.n	8002d12 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 8002d10:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 8002d20:	2302      	movs	r3, #2
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bc80      	pop	{r7}
 8002d28:	4770      	bx	lr

08002d2a <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8002d2e:	2301      	movs	r3, #1
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bc80      	pop	{r7}
 8002d36:	4770      	bx	lr

08002d38 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8002d3c:	2301      	movs	r3, #1
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bc80      	pop	{r7}
 8002d44:	4770      	bx	lr

08002d46 <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 8002d46:	b480      	push	{r7}
 8002d48:	b085      	sub	sp, #20
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8002d50:	79fb      	ldrb	r3, [r7, #7]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d102      	bne.n	8002d5c <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8002d56:	230f      	movs	r3, #15
 8002d58:	60fb      	str	r3, [r7, #12]
 8002d5a:	e001      	b.n	8002d60 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8002d5c:	2316      	movs	r3, #22
 8002d5e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002d60:	68fb      	ldr	r3, [r7, #12]
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3714      	adds	r7, #20
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bc80      	pop	{r7}
 8002d6a:	4770      	bx	lr

08002d6c <LL_DBGMCU_DisableDBGSleepMode>:
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002d70:	4b04      	ldr	r3, [pc, #16]	; (8002d84 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	4a03      	ldr	r2, [pc, #12]	; (8002d84 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8002d76:	f023 0301 	bic.w	r3, r3, #1
 8002d7a:	6053      	str	r3, [r2, #4]
}
 8002d7c:	bf00      	nop
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bc80      	pop	{r7}
 8002d82:	4770      	bx	lr
 8002d84:	e0042000 	.word	0xe0042000

08002d88 <LL_DBGMCU_DisableDBGStopMode>:
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002d8c:	4b04      	ldr	r3, [pc, #16]	; (8002da0 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	4a03      	ldr	r2, [pc, #12]	; (8002da0 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002d92:	f023 0302 	bic.w	r3, r3, #2
 8002d96:	6053      	str	r3, [r2, #4]
}
 8002d98:	bf00      	nop
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bc80      	pop	{r7}
 8002d9e:	4770      	bx	lr
 8002da0:	e0042000 	.word	0xe0042000

08002da4 <LL_DBGMCU_DisableDBGStandbyMode>:
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002da8:	4b04      	ldr	r3, [pc, #16]	; (8002dbc <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	4a03      	ldr	r2, [pc, #12]	; (8002dbc <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002dae:	f023 0304 	bic.w	r3, r3, #4
 8002db2:	6053      	str	r3, [r2, #4]
}
 8002db4:	bf00      	nop
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bc80      	pop	{r7}
 8002dba:	4770      	bx	lr
 8002dbc:	e0042000 	.word	0xe0042000

08002dc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dca:	2003      	movs	r0, #3
 8002dcc:	f001 f9a0 	bl	8004110 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002dd0:	f003 fbe0 	bl	8006594 <HAL_RCC_GetHCLKFreq>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	4a09      	ldr	r2, [pc, #36]	; (8002dfc <HAL_Init+0x3c>)
 8002dd8:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002dda:	200f      	movs	r0, #15
 8002ddc:	f7ff fa12 	bl	8002204 <HAL_InitTick>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d002      	beq.n	8002dec <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	71fb      	strb	r3, [r7, #7]
 8002dea:	e001      	b.n	8002df0 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002dec:	f7fe ffe3 	bl	8001db6 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002df0:	79fb      	ldrb	r3, [r7, #7]
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	20000000 	.word	0x20000000

08002e00 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002e04:	4b04      	ldr	r3, [pc, #16]	; (8002e18 <HAL_SuspendTick+0x18>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a03      	ldr	r2, [pc, #12]	; (8002e18 <HAL_SuspendTick+0x18>)
 8002e0a:	f023 0302 	bic.w	r3, r3, #2
 8002e0e:	6013      	str	r3, [r2, #0]
}
 8002e10:	bf00      	nop
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bc80      	pop	{r7}
 8002e16:	4770      	bx	lr
 8002e18:	e000e010 	.word	0xe000e010

08002e1c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002e20:	4b04      	ldr	r3, [pc, #16]	; (8002e34 <HAL_ResumeTick+0x18>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a03      	ldr	r2, [pc, #12]	; (8002e34 <HAL_ResumeTick+0x18>)
 8002e26:	f043 0302 	orr.w	r3, r3, #2
 8002e2a:	6013      	str	r3, [r2, #0]
}
 8002e2c:	bf00      	nop
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bc80      	pop	{r7}
 8002e32:	4770      	bx	lr
 8002e34:	e000e010 	.word	0xe000e010

08002e38 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8002e3c:	4b02      	ldr	r3, [pc, #8]	; (8002e48 <HAL_GetUIDw0+0x10>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bc80      	pop	{r7}
 8002e46:	4770      	bx	lr
 8002e48:	1fff7590 	.word	0x1fff7590

08002e4c <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8002e50:	4b02      	ldr	r3, [pc, #8]	; (8002e5c <HAL_GetUIDw1+0x10>)
 8002e52:	681b      	ldr	r3, [r3, #0]
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bc80      	pop	{r7}
 8002e5a:	4770      	bx	lr
 8002e5c:	1fff7594 	.word	0x1fff7594

08002e60 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002e64:	4b02      	ldr	r3, [pc, #8]	; (8002e70 <HAL_GetUIDw2+0x10>)
 8002e66:	681b      	ldr	r3, [r3, #0]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr
 8002e70:	1fff7598 	.word	0x1fff7598

08002e74 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 8002e78:	f7ff ff78 	bl	8002d6c <LL_DBGMCU_DisableDBGSleepMode>
}
 8002e7c:	bf00      	nop
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 8002e84:	f7ff ff80 	bl	8002d88 <LL_DBGMCU_DisableDBGStopMode>
}
 8002e88:	bf00      	nop
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 8002e90:	f7ff ff88 	bl	8002da4 <LL_DBGMCU_DisableDBGStandbyMode>
}
 8002e94:	bf00      	nop
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	431a      	orrs	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	601a      	str	r2, [r3, #0]
}
 8002eb2:	bf00      	nop
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bc80      	pop	{r7}
 8002eba:	4770      	bx	lr

08002ebc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bc80      	pop	{r7}
 8002ed4:	4770      	bx	lr

08002ed6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	b085      	sub	sp, #20
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	60f8      	str	r0, [r7, #12]
 8002ede:	60b9      	str	r1, [r7, #8]
 8002ee0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	695a      	ldr	r2, [r3, #20]
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	f003 0304 	and.w	r3, r3, #4
 8002eec:	2107      	movs	r1, #7
 8002eee:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef2:	43db      	mvns	r3, r3
 8002ef4:	401a      	ands	r2, r3
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	6879      	ldr	r1, [r7, #4]
 8002efe:	fa01 f303 	lsl.w	r3, r1, r3
 8002f02:	431a      	orrs	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002f08:	bf00      	nop
 8002f0a:	3714      	adds	r7, #20
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bc80      	pop	{r7}
 8002f10:	4770      	bx	lr

08002f12 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
 8002f1a:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	695a      	ldr	r2, [r3, #20]
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	f003 0304 	and.w	r3, r3, #4
 8002f26:	2107      	movs	r1, #7
 8002f28:	fa01 f303 	lsl.w	r3, r1, r3
 8002f2c:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002f34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bc80      	pop	{r7}
 8002f40:	4770      	bx	lr

08002f42 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002f42:	b480      	push	{r7}
 8002f44:	b083      	sub	sp, #12
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002f56:	2301      	movs	r3, #1
 8002f58:	e000      	b.n	8002f5c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bc80      	pop	{r7}
 8002f64:	4770      	bx	lr

08002f66 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002f66:	b480      	push	{r7}
 8002f68:	b085      	sub	sp, #20
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	60f8      	str	r0, [r7, #12]
 8002f6e:	60b9      	str	r1, [r7, #8]
 8002f70:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	f003 031f 	and.w	r3, r3, #31
 8002f7c:	210f      	movs	r1, #15
 8002f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f82:	43db      	mvns	r3, r3
 8002f84:	401a      	ands	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	0e9b      	lsrs	r3, r3, #26
 8002f8a:	f003 010f 	and.w	r1, r3, #15
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	f003 031f 	and.w	r3, r3, #31
 8002f94:	fa01 f303 	lsl.w	r3, r1, r3
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002f9e:	bf00      	nop
 8002fa0:	3714      	adds	r7, #20
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bc80      	pop	{r7}
 8002fa6:	4770      	bx	lr

08002fa8 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002fbc:	431a      	orrs	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002fc2:	bf00      	nop
 8002fc4:	370c      	adds	r7, #12
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bc80      	pop	{r7}
 8002fca:	4770      	bx	lr

08002fcc <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002fe0:	43db      	mvns	r3, r3
 8002fe2:	401a      	ands	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bc80      	pop	{r7}
 8002ff0:	4770      	bx	lr

08002ff2 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b085      	sub	sp, #20
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	60f8      	str	r0, [r7, #12]
 8002ffa:	60b9      	str	r1, [r7, #8]
 8002ffc:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	695a      	ldr	r2, [r3, #20]
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	021b      	lsls	r3, r3, #8
 8003006:	43db      	mvns	r3, r3
 8003008:	401a      	ands	r2, r3
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	0219      	lsls	r1, r3, #8
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	400b      	ands	r3, r1
 8003012:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8003016:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800301a:	431a      	orrs	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003020:	bf00      	nop
 8003022:	3714      	adds	r7, #20
 8003024:	46bd      	mov	sp, r7
 8003026:	bc80      	pop	{r7}
 8003028:	4770      	bx	lr

0800302a <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800302a:	b480      	push	{r7}
 800302c:	b083      	sub	sp, #12
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800303a:	f023 0317 	bic.w	r3, r3, #23
 800303e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003046:	bf00      	nop
 8003048:	370c      	adds	r7, #12
 800304a:	46bd      	mov	sp, r7
 800304c:	bc80      	pop	{r7}
 800304e:	4770      	bx	lr

08003050 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003060:	f023 0317 	bic.w	r3, r3, #23
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	6093      	str	r3, [r2, #8]
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	bc80      	pop	{r7}
 8003070:	4770      	bx	lr

08003072 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003072:	b480      	push	{r7}
 8003074:	b083      	sub	sp, #12
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003082:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003086:	d101      	bne.n	800308c <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003088:	2301      	movs	r3, #1
 800308a:	e000      	b.n	800308e <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	bc80      	pop	{r7}
 8003096:	4770      	bx	lr

08003098 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80030a8:	f023 0317 	bic.w	r3, r3, #23
 80030ac:	f043 0201 	orr.w	r2, r3, #1
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bc80      	pop	{r7}
 80030bc:	4770      	bx	lr

080030be <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80030be:	b480      	push	{r7}
 80030c0:	b083      	sub	sp, #12
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80030ce:	f023 0317 	bic.w	r3, r3, #23
 80030d2:	f043 0202 	orr.w	r2, r3, #2
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80030da:	bf00      	nop
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	bc80      	pop	{r7}
 80030e2:	4770      	bx	lr

080030e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d101      	bne.n	80030fc <LL_ADC_IsEnabled+0x18>
 80030f8:	2301      	movs	r3, #1
 80030fa:	e000      	b.n	80030fe <LL_ADC_IsEnabled+0x1a>
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	bc80      	pop	{r7}
 8003106:	4770      	bx	lr

08003108 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	2b02      	cmp	r3, #2
 800311a:	d101      	bne.n	8003120 <LL_ADC_IsDisableOngoing+0x18>
 800311c:	2301      	movs	r3, #1
 800311e:	e000      	b.n	8003122 <LL_ADC_IsDisableOngoing+0x1a>
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	bc80      	pop	{r7}
 800312a:	4770      	bx	lr

0800312c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800313c:	f023 0317 	bic.w	r3, r3, #23
 8003140:	f043 0204 	orr.w	r2, r3, #4
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003148:	bf00      	nop
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	bc80      	pop	{r7}
 8003150:	4770      	bx	lr

08003152 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003152:	b480      	push	{r7}
 8003154:	b083      	sub	sp, #12
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003162:	f023 0317 	bic.w	r3, r3, #23
 8003166:	f043 0210 	orr.w	r2, r3, #16
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800316e:	bf00      	nop
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	bc80      	pop	{r7}
 8003176:	4770      	bx	lr

08003178 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	2b04      	cmp	r3, #4
 800318a:	d101      	bne.n	8003190 <LL_ADC_REG_IsConversionOngoing+0x18>
 800318c:	2301      	movs	r3, #1
 800318e:	e000      	b.n	8003192 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	bc80      	pop	{r7}
 800319a:	4770      	bx	lr

0800319c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b088      	sub	sp, #32
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031a4:	2300      	movs	r3, #0
 80031a6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 80031a8:	2300      	movs	r3, #0
 80031aa:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80031ac:	2300      	movs	r3, #0
 80031ae:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80031b0:	2300      	movs	r3, #0
 80031b2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e17e      	b.n	80034bc <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d109      	bne.n	80031e0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f7fd fef9 	bl	8000fc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7ff ff44 	bl	8003072 <LL_ADC_IsInternalRegulatorEnabled>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d115      	bne.n	800321c <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7ff ff18 	bl	800302a <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031fa:	4b9e      	ldr	r3, [pc, #632]	; (8003474 <HAL_ADC_Init+0x2d8>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	099b      	lsrs	r3, r3, #6
 8003200:	4a9d      	ldr	r2, [pc, #628]	; (8003478 <HAL_ADC_Init+0x2dc>)
 8003202:	fba2 2303 	umull	r2, r3, r2, r3
 8003206:	099b      	lsrs	r3, r3, #6
 8003208:	3301      	adds	r3, #1
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800320e:	e002      	b.n	8003216 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	3b01      	subs	r3, #1
 8003214:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1f9      	bne.n	8003210 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4618      	mov	r0, r3
 8003222:	f7ff ff26 	bl	8003072 <LL_ADC_IsInternalRegulatorEnabled>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d10d      	bne.n	8003248 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003230:	f043 0210 	orr.w	r2, r3, #16
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800323c:	f043 0201 	orr.w	r2, r3, #1
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4618      	mov	r0, r3
 800324e:	f7ff ff93 	bl	8003178 <LL_ADC_REG_IsConversionOngoing>
 8003252:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003258:	f003 0310 	and.w	r3, r3, #16
 800325c:	2b00      	cmp	r3, #0
 800325e:	f040 8124 	bne.w	80034aa <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	2b00      	cmp	r3, #0
 8003266:	f040 8120 	bne.w	80034aa <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800326e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003272:	f043 0202 	orr.w	r2, r3, #2
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4618      	mov	r0, r3
 8003280:	f7ff ff30 	bl	80030e4 <LL_ADC_IsEnabled>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	f040 80a7 	bne.w	80033da <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	7e1b      	ldrb	r3, [r3, #24]
 8003294:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003296:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	7e5b      	ldrb	r3, [r3, #25]
 800329c:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800329e:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	7e9b      	ldrb	r3, [r3, #26]
 80032a4:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80032a6:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80032ac:	2a00      	cmp	r2, #0
 80032ae:	d002      	beq.n	80032b6 <HAL_ADC_Init+0x11a>
 80032b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80032b4:	e000      	b.n	80032b8 <HAL_ADC_Init+0x11c>
 80032b6:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80032b8:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80032be:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	da04      	bge.n	80032d2 <HAL_ADC_Init+0x136>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	691b      	ldr	r3, [r3, #16]
 80032cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80032d0:	e001      	b.n	80032d6 <HAL_ADC_Init+0x13a>
 80032d2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 80032d6:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80032de:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80032e0:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80032e2:	69ba      	ldr	r2, [r7, #24]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d114      	bne.n	800331c <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	7e9b      	ldrb	r3, [r3, #26]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d104      	bne.n	8003304 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003300:	61bb      	str	r3, [r7, #24]
 8003302:	e00b      	b.n	800331c <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003308:	f043 0220 	orr.w	r2, r3, #32
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003314:	f043 0201 	orr.w	r2, r3, #1
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003320:	2b00      	cmp	r3, #0
 8003322:	d009      	beq.n	8003338 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003328:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003330:	4313      	orrs	r3, r2
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	4313      	orrs	r3, r2
 8003336:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8003342:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	6812      	ldr	r2, [r2, #0]
 800334a:	69b9      	ldr	r1, [r7, #24]
 800334c:	430b      	orrs	r3, r1
 800334e:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800335c:	4313      	orrs	r3, r2
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	4313      	orrs	r3, r2
 8003362:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800336a:	2b01      	cmp	r3, #1
 800336c:	d111      	bne.n	8003392 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800337a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003380:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003386:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	4313      	orrs	r3, r2
 800338c:	f043 0301 	orr.w	r3, r3, #1
 8003390:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	691a      	ldr	r2, [r3, #16]
 8003398:	4b38      	ldr	r3, [pc, #224]	; (800347c <HAL_ADC_Init+0x2e0>)
 800339a:	4013      	ands	r3, r2
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	6812      	ldr	r2, [r2, #0]
 80033a0:	6979      	ldr	r1, [r7, #20]
 80033a2:	430b      	orrs	r3, r1
 80033a4:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80033ae:	d014      	beq.n	80033da <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80033b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033b8:	d00f      	beq.n	80033da <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80033be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033c2:	d00a      	beq.n	80033da <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 80033c4:	4b2e      	ldr	r3, [pc, #184]	; (8003480 <HAL_ADC_Init+0x2e4>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80033d4:	492a      	ldr	r1, [pc, #168]	; (8003480 <HAL_ADC_Init+0x2e4>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6818      	ldr	r0, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033e2:	461a      	mov	r2, r3
 80033e4:	2100      	movs	r1, #0
 80033e6:	f7ff fd76 	bl	8002ed6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6818      	ldr	r0, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f2:	461a      	mov	r2, r3
 80033f4:	4923      	ldr	r1, [pc, #140]	; (8003484 <HAL_ADC_Init+0x2e8>)
 80033f6:	f7ff fd6e 	bl	8002ed6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d108      	bne.n	8003414 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f062 020f 	orn	r2, r2, #15
 8003410:	629a      	str	r2, [r3, #40]	; 0x28
 8003412:	e017      	b.n	8003444 <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800341c:	d112      	bne.n	8003444 <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	69db      	ldr	r3, [r3, #28]
 8003428:	3b01      	subs	r3, #1
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	f003 031c 	and.w	r3, r3, #28
 8003430:	f06f 020f 	mvn.w	r2, #15
 8003434:	fa02 f103 	lsl.w	r1, r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	430a      	orrs	r2, r1
 8003442:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2100      	movs	r1, #0
 800344a:	4618      	mov	r0, r3
 800344c:	f7ff fd61 	bl	8002f12 <LL_ADC_GetSamplingTimeCommonChannels>
 8003450:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003456:	429a      	cmp	r2, r3
 8003458:	d116      	bne.n	8003488 <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003464:	f023 0303 	bic.w	r3, r3, #3
 8003468:	f043 0201 	orr.w	r2, r3, #1
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003470:	e023      	b.n	80034ba <HAL_ADC_Init+0x31e>
 8003472:	bf00      	nop
 8003474:	20000000 	.word	0x20000000
 8003478:	053e2d63 	.word	0x053e2d63
 800347c:	1ffffc02 	.word	0x1ffffc02
 8003480:	40012708 	.word	0x40012708
 8003484:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800348c:	f023 0312 	bic.w	r3, r3, #18
 8003490:	f043 0210 	orr.w	r2, r3, #16
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800349c:	f043 0201 	orr.w	r2, r3, #1
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80034a8:	e007      	b.n	80034ba <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ae:	f043 0210 	orr.w	r2, r3, #16
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 80034ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3720      	adds	r7, #32
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e07a      	b.n	80035cc <HAL_ADC_DeInit+0x108>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034da:	f043 0202 	orr.w	r2, r3, #2
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 face 	bl	8003a84 <ADC_ConversionStop>
 80034e8:	4603      	mov	r3, r0
 80034ea:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80034ec:	7bfb      	ldrb	r3, [r7, #15]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10f      	bne.n	8003512 <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 fb92 	bl	8003c1c <ADC_Disable>
 80034f8:	4603      	mov	r3, r0
 80034fa:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80034fc:	7bfb      	ldrb	r3, [r7, #15]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d102      	bne.n	8003508 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2201      	movs	r2, #1
 8003506:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4618      	mov	r0, r3
 800350e:	f7ff fd9f 	bl	8003050 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	6812      	ldr	r2, [r2, #0]
 800351c:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 8003520:	f023 0303 	bic.w	r3, r3, #3
 8003524:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f240 329f 	movw	r2, #927	; 0x39f
 800352e:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68d9      	ldr	r1, [r3, #12]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	4b26      	ldr	r3, [pc, #152]	; (80035d4 <HAL_ADC_DeInit+0x110>)
 800353c:	400b      	ands	r3, r1
 800353e:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	691a      	ldr	r2, [r3, #16]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 800354e:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	695a      	ldr	r2, [r3, #20]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0207 	bic.w	r2, r2, #7
 800355e:	615a      	str	r2, [r3, #20]

  /* Reset registers AWDxTR */
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6a1a      	ldr	r2, [r3, #32]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 800356e:	621a      	str	r2, [r3, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 800357e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 800358e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2200      	movs	r2, #0
 800359c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 800359e:	4b0e      	ldr	r3, [pc, #56]	; (80035d8 <HAL_ADC_DeInit+0x114>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a0d      	ldr	r2, [pc, #52]	; (80035d8 <HAL_ADC_DeInit+0x114>)
 80035a4:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 80035a8:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f7fd fd38 	bl	8001020 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80035ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	833e0200 	.word	0x833e0200
 80035d8:	40012708 	.word	0x40012708

080035dc <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7ff fdc5 	bl	8003178 <LL_ADC_REG_IsConversionOngoing>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d132      	bne.n	800365a <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d101      	bne.n	8003602 <HAL_ADC_Start+0x26>
 80035fe:	2302      	movs	r3, #2
 8003600:	e02e      	b.n	8003660 <HAL_ADC_Start+0x84>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 fa80 	bl	8003b10 <ADC_Enable>
 8003610:	4603      	mov	r3, r0
 8003612:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003614:	7bfb      	ldrb	r3, [r7, #15]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d11a      	bne.n	8003650 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800361e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003622:	f023 0301 	bic.w	r3, r3, #1
 8003626:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	221c      	movs	r2, #28
 800363a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4618      	mov	r0, r3
 800364a:	f7ff fd6f 	bl	800312c <LL_ADC_REG_StartConversion>
 800364e:	e006      	b.n	800365e <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8003658:	e001      	b.n	800365e <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800365a:	2302      	movs	r3, #2
 800365c:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 800365e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003660:	4618      	mov	r0, r3
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003676:	2b01      	cmp	r3, #1
 8003678:	d101      	bne.n	800367e <HAL_ADC_Stop+0x16>
 800367a:	2302      	movs	r3, #2
 800367c:	e022      	b.n	80036c4 <HAL_ADC_Stop+0x5c>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f9fc 	bl	8003a84 <ADC_ConversionStop>
 800368c:	4603      	mov	r3, r0
 800368e:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003690:	7bfb      	ldrb	r3, [r7, #15]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d111      	bne.n	80036ba <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 fac0 	bl	8003c1c <ADC_Disable>
 800369c:	4603      	mov	r3, r0
 800369e:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80036a0:	7bfb      	ldrb	r3, [r7, #15]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d109      	bne.n	80036ba <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036ae:	f023 0301 	bic.w	r3, r3, #1
 80036b2:	f043 0201 	orr.w	r2, r3, #1
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80036c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	2b08      	cmp	r3, #8
 80036dc:	d102      	bne.n	80036e4 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80036de:	2308      	movs	r3, #8
 80036e0:	60fb      	str	r3, [r7, #12]
 80036e2:	e010      	b.n	8003706 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d007      	beq.n	8003702 <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f6:	f043 0220 	orr.w	r2, r3, #32
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e077      	b.n	80037f2 <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8003702:	2304      	movs	r3, #4
 8003704:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003706:	f7fe fd87 	bl	8002218 <HAL_GetTick>
 800370a:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800370c:	e021      	b.n	8003752 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003714:	d01d      	beq.n	8003752 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003716:	f7fe fd7f 	bl	8002218 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	683a      	ldr	r2, [r7, #0]
 8003722:	429a      	cmp	r2, r3
 8003724:	d302      	bcc.n	800372c <HAL_ADC_PollForConversion+0x60>
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d112      	bne.n	8003752 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	4013      	ands	r3, r2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d10b      	bne.n	8003752 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800373e:	f043 0204 	orr.w	r2, r3, #4
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e04f      	b.n	80037f2 <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	4013      	ands	r3, r2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d0d6      	beq.n	800370e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003764:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4618      	mov	r0, r3
 8003772:	f7ff fbe6 	bl	8002f42 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d031      	beq.n	80037e0 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	7e9b      	ldrb	r3, [r3, #26]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d12d      	bne.n	80037e0 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0308 	and.w	r3, r3, #8
 800378e:	2b08      	cmp	r3, #8
 8003790:	d126      	bne.n	80037e0 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4618      	mov	r0, r3
 8003798:	f7ff fcee 	bl	8003178 <LL_ADC_REG_IsConversionOngoing>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d112      	bne.n	80037c8 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	685a      	ldr	r2, [r3, #4]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f022 020c 	bic.w	r2, r2, #12
 80037b0:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037ba:	f023 0301 	bic.w	r3, r3, #1
 80037be:	f043 0201 	orr.w	r2, r3, #1
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	659a      	str	r2, [r3, #88]	; 0x58
 80037c6:	e00b      	b.n	80037e0 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037cc:	f043 0220 	orr.w	r2, r3, #32
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d8:	f043 0201 	orr.w	r2, r3, #1
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	7e1b      	ldrb	r3, [r3, #24]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d103      	bne.n	80037f0 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	220c      	movs	r2, #12
 80037ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80037fa:	b480      	push	{r7}
 80037fc:	b083      	sub	sp, #12
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003808:	4618      	mov	r0, r3
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	bc80      	pop	{r7}
 8003810:	4770      	bx	lr
	...

08003814 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b088      	sub	sp, #32
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800381e:	2300      	movs	r3, #0
 8003820:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003822:	2300      	movs	r3, #0
 8003824:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003834:	2b01      	cmp	r3, #1
 8003836:	d101      	bne.n	800383c <HAL_ADC_ConfigChannel+0x28>
 8003838:	2302      	movs	r3, #2
 800383a:	e110      	b.n	8003a5e <HAL_ADC_ConfigChannel+0x24a>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4618      	mov	r0, r3
 800384a:	f7ff fc95 	bl	8003178 <LL_ADC_REG_IsConversionOngoing>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	f040 80f7 	bne.w	8003a44 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	2b02      	cmp	r3, #2
 800385c:	f000 80b1 	beq.w	80039c2 <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003868:	d004      	beq.n	8003874 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800386e:	4a7e      	ldr	r2, [pc, #504]	; (8003a68 <HAL_ADC_ConfigChannel+0x254>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d108      	bne.n	8003886 <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4619      	mov	r1, r3
 800387e:	4610      	mov	r0, r2
 8003880:	f7ff fb92 	bl	8002fa8 <LL_ADC_REG_SetSequencerChAdd>
 8003884:	e041      	b.n	800390a <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f003 031f 	and.w	r3, r3, #31
 8003892:	210f      	movs	r1, #15
 8003894:	fa01 f303 	lsl.w	r3, r1, r3
 8003898:	43db      	mvns	r3, r3
 800389a:	401a      	ands	r2, r3
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d105      	bne.n	80038b4 <HAL_ADC_ConfigChannel+0xa0>
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	0e9b      	lsrs	r3, r3, #26
 80038ae:	f003 031f 	and.w	r3, r3, #31
 80038b2:	e011      	b.n	80038d8 <HAL_ADC_ConfigChannel+0xc4>
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	fa93 f3a3 	rbit	r3, r3
 80038c0:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d101      	bne.n	80038d0 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 80038cc:	2320      	movs	r3, #32
 80038ce:	e003      	b.n	80038d8 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	fab3 f383 	clz	r3, r3
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	6839      	ldr	r1, [r7, #0]
 80038da:	6849      	ldr	r1, [r1, #4]
 80038dc:	f001 011f 	and.w	r1, r1, #31
 80038e0:	408b      	lsls	r3, r1
 80038e2:	431a      	orrs	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	089b      	lsrs	r3, r3, #2
 80038ee:	1c5a      	adds	r2, r3, #1
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	69db      	ldr	r3, [r3, #28]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d808      	bhi.n	800390a <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6818      	ldr	r0, [r3, #0]
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	6859      	ldr	r1, [r3, #4]
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	461a      	mov	r2, r3
 8003906:	f7ff fb2e 	bl	8002f66 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6818      	ldr	r0, [r3, #0]
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	6819      	ldr	r1, [r3, #0]
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	461a      	mov	r2, r3
 8003918:	f7ff fb6b 	bl	8002ff2 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	f280 8097 	bge.w	8003a54 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003926:	4851      	ldr	r0, [pc, #324]	; (8003a6c <HAL_ADC_ConfigChannel+0x258>)
 8003928:	f7ff fac8 	bl	8002ebc <LL_ADC_GetCommonPathInternalCh>
 800392c:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a4f      	ldr	r2, [pc, #316]	; (8003a70 <HAL_ADC_ConfigChannel+0x25c>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d120      	bne.n	800397a <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800393e:	2b00      	cmp	r3, #0
 8003940:	d11b      	bne.n	800397a <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003948:	4619      	mov	r1, r3
 800394a:	4848      	ldr	r0, [pc, #288]	; (8003a6c <HAL_ADC_ConfigChannel+0x258>)
 800394c:	f7ff faa4 	bl	8002e98 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003950:	4b48      	ldr	r3, [pc, #288]	; (8003a74 <HAL_ADC_ConfigChannel+0x260>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	099b      	lsrs	r3, r3, #6
 8003956:	4a48      	ldr	r2, [pc, #288]	; (8003a78 <HAL_ADC_ConfigChannel+0x264>)
 8003958:	fba2 2303 	umull	r2, r3, r2, r3
 800395c:	099b      	lsrs	r3, r3, #6
 800395e:	1c5a      	adds	r2, r3, #1
 8003960:	4613      	mov	r3, r2
 8003962:	005b      	lsls	r3, r3, #1
 8003964:	4413      	add	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800396a:	e002      	b.n	8003972 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	3b01      	subs	r3, #1
 8003970:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1f9      	bne.n	800396c <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003978:	e06c      	b.n	8003a54 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a3f      	ldr	r2, [pc, #252]	; (8003a7c <HAL_ADC_ConfigChannel+0x268>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d10c      	bne.n	800399e <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d107      	bne.n	800399e <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003994:	4619      	mov	r1, r3
 8003996:	4835      	ldr	r0, [pc, #212]	; (8003a6c <HAL_ADC_ConfigChannel+0x258>)
 8003998:	f7ff fa7e 	bl	8002e98 <LL_ADC_SetCommonPathInternalCh>
 800399c:	e05a      	b.n	8003a54 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a37      	ldr	r2, [pc, #220]	; (8003a80 <HAL_ADC_ConfigChannel+0x26c>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d155      	bne.n	8003a54 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d150      	bne.n	8003a54 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80039b8:	4619      	mov	r1, r3
 80039ba:	482c      	ldr	r0, [pc, #176]	; (8003a6c <HAL_ADC_ConfigChannel+0x258>)
 80039bc:	f7ff fa6c 	bl	8002e98 <LL_ADC_SetCommonPathInternalCh>
 80039c0:	e048      	b.n	8003a54 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039ca:	d004      	beq.n	80039d6 <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80039d0:	4a25      	ldr	r2, [pc, #148]	; (8003a68 <HAL_ADC_ConfigChannel+0x254>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d107      	bne.n	80039e6 <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4619      	mov	r1, r3
 80039e0:	4610      	mov	r0, r2
 80039e2:	f7ff faf3 	bl	8002fcc <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	da32      	bge.n	8003a54 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80039ee:	481f      	ldr	r0, [pc, #124]	; (8003a6c <HAL_ADC_ConfigChannel+0x258>)
 80039f0:	f7ff fa64 	bl	8002ebc <LL_ADC_GetCommonPathInternalCh>
 80039f4:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a1d      	ldr	r2, [pc, #116]	; (8003a70 <HAL_ADC_ConfigChannel+0x25c>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d107      	bne.n	8003a10 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003a06:	4619      	mov	r1, r3
 8003a08:	4818      	ldr	r0, [pc, #96]	; (8003a6c <HAL_ADC_ConfigChannel+0x258>)
 8003a0a:	f7ff fa45 	bl	8002e98 <LL_ADC_SetCommonPathInternalCh>
 8003a0e:	e021      	b.n	8003a54 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a19      	ldr	r2, [pc, #100]	; (8003a7c <HAL_ADC_ConfigChannel+0x268>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d107      	bne.n	8003a2a <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a20:	4619      	mov	r1, r3
 8003a22:	4812      	ldr	r0, [pc, #72]	; (8003a6c <HAL_ADC_ConfigChannel+0x258>)
 8003a24:	f7ff fa38 	bl	8002e98 <LL_ADC_SetCommonPathInternalCh>
 8003a28:	e014      	b.n	8003a54 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a14      	ldr	r2, [pc, #80]	; (8003a80 <HAL_ADC_ConfigChannel+0x26c>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d10f      	bne.n	8003a54 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	480b      	ldr	r0, [pc, #44]	; (8003a6c <HAL_ADC_ConfigChannel+0x258>)
 8003a3e:	f7ff fa2b 	bl	8002e98 <LL_ADC_SetCommonPathInternalCh>
 8003a42:	e007      	b.n	8003a54 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a48:	f043 0220 	orr.w	r2, r3, #32
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003a5c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3720      	adds	r7, #32
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	80000004 	.word	0x80000004
 8003a6c:	40012708 	.word	0x40012708
 8003a70:	b0001000 	.word	0xb0001000
 8003a74:	20000000 	.word	0x20000000
 8003a78:	053e2d63 	.word	0x053e2d63
 8003a7c:	b8004000 	.word	0xb8004000
 8003a80:	b4002000 	.word	0xb4002000

08003a84 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7ff fb71 	bl	8003178 <LL_ADC_REG_IsConversionOngoing>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d033      	beq.n	8003b04 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7ff fb31 	bl	8003108 <LL_ADC_IsDisableOngoing>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d104      	bne.n	8003ab6 <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7ff fb4e 	bl	8003152 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003ab6:	f7fe fbaf 	bl	8002218 <HAL_GetTick>
 8003aba:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003abc:	e01b      	b.n	8003af6 <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003abe:	f7fe fbab 	bl	8002218 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d914      	bls.n	8003af6 <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f003 0304 	and.w	r3, r3, #4
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00d      	beq.n	8003af6 <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ade:	f043 0210 	orr.w	r2, r3, #16
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aea:	f043 0201 	orr.w	r2, r3, #1
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e007      	b.n	8003b06 <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f003 0304 	and.w	r3, r3, #4
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1dc      	bne.n	8003abe <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
	...

08003b10 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7ff fadf 	bl	80030e4 <LL_ADC_IsEnabled>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d169      	bne.n	8003c00 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	689a      	ldr	r2, [r3, #8]
 8003b32:	4b36      	ldr	r3, [pc, #216]	; (8003c0c <ADC_Enable+0xfc>)
 8003b34:	4013      	ands	r3, r2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00d      	beq.n	8003b56 <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b3e:	f043 0210 	orr.w	r2, r3, #16
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b4a:	f043 0201 	orr.w	r2, r3, #1
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e055      	b.n	8003c02 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7ff fa9c 	bl	8003098 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8003b60:	482b      	ldr	r0, [pc, #172]	; (8003c10 <ADC_Enable+0x100>)
 8003b62:	f7ff f9ab 	bl	8002ebc <LL_ADC_GetCommonPathInternalCh>
 8003b66:	4603      	mov	r3, r0
 8003b68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00f      	beq.n	8003b90 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b70:	4b28      	ldr	r3, [pc, #160]	; (8003c14 <ADC_Enable+0x104>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	099b      	lsrs	r3, r3, #6
 8003b76:	4a28      	ldr	r2, [pc, #160]	; (8003c18 <ADC_Enable+0x108>)
 8003b78:	fba2 2303 	umull	r2, r3, r2, r3
 8003b7c:	099b      	lsrs	r3, r3, #6
 8003b7e:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8003b80:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003b82:	e002      	b.n	8003b8a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	3b01      	subs	r3, #1
 8003b88:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1f9      	bne.n	8003b84 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	7e5b      	ldrb	r3, [r3, #25]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d033      	beq.n	8003c00 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003b98:	f7fe fb3e 	bl	8002218 <HAL_GetTick>
 8003b9c:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b9e:	e028      	b.n	8003bf2 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7ff fa9d 	bl	80030e4 <LL_ADC_IsEnabled>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d104      	bne.n	8003bba <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7ff fa6f 	bl	8003098 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003bba:	f7fe fb2d 	bl	8002218 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d914      	bls.n	8003bf2 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d00d      	beq.n	8003bf2 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bda:	f043 0210 	orr.w	r2, r3, #16
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003be6:	f043 0201 	orr.w	r2, r3, #1
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e007      	b.n	8003c02 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d1cf      	bne.n	8003ba0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	80000017 	.word	0x80000017
 8003c10:	40012708 	.word	0x40012708
 8003c14:	20000000 	.word	0x20000000
 8003c18:	053e2d63 	.word	0x053e2d63

08003c1c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7ff fa6d 	bl	8003108 <LL_ADC_IsDisableOngoing>
 8003c2e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7ff fa55 	bl	80030e4 <LL_ADC_IsEnabled>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d047      	beq.n	8003cd0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d144      	bne.n	8003cd0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f003 0305 	and.w	r3, r3, #5
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d10c      	bne.n	8003c6e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7ff fa30 	bl	80030be <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2203      	movs	r2, #3
 8003c64:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c66:	f7fe fad7 	bl	8002218 <HAL_GetTick>
 8003c6a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c6c:	e029      	b.n	8003cc2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c72:	f043 0210 	orr.w	r2, r3, #16
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c7e:	f043 0201 	orr.w	r2, r3, #1
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e023      	b.n	8003cd2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003c8a:	f7fe fac5 	bl	8002218 <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d914      	bls.n	8003cc2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00d      	beq.n	8003cc2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003caa:	f043 0210 	orr.w	r2, r3, #16
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cb6:	f043 0201 	orr.w	r2, r3, #1
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e007      	b.n	8003cd2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f003 0301 	and.w	r3, r3, #1
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1dc      	bne.n	8003c8a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <LL_ADC_SetCalibrationFactor>:
{
 8003cda:	b480      	push	{r7}
 8003cdc:	b083      	sub	sp, #12
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
 8003ce2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003cea:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	431a      	orrs	r2, r3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bc80      	pop	{r7}
 8003d00:	4770      	bx	lr

08003d02 <LL_ADC_GetCalibrationFactor>:
{
 8003d02:	b480      	push	{r7}
 8003d04:	b083      	sub	sp, #12
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bc80      	pop	{r7}
 8003d1c:	4770      	bx	lr

08003d1e <LL_ADC_Enable>:
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b083      	sub	sp, #12
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d2e:	f023 0317 	bic.w	r3, r3, #23
 8003d32:	f043 0201 	orr.w	r2, r3, #1
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	609a      	str	r2, [r3, #8]
}
 8003d3a:	bf00      	nop
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bc80      	pop	{r7}
 8003d42:	4770      	bx	lr

08003d44 <LL_ADC_Disable>:
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d54:	f023 0317 	bic.w	r3, r3, #23
 8003d58:	f043 0202 	orr.w	r2, r3, #2
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	609a      	str	r2, [r3, #8]
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bc80      	pop	{r7}
 8003d68:	4770      	bx	lr

08003d6a <LL_ADC_IsEnabled>:
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b083      	sub	sp, #12
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d101      	bne.n	8003d82 <LL_ADC_IsEnabled+0x18>
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e000      	b.n	8003d84 <LL_ADC_IsEnabled+0x1a>
 8003d82:	2300      	movs	r3, #0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bc80      	pop	{r7}
 8003d8c:	4770      	bx	lr

08003d8e <LL_ADC_StartCalibration>:
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b083      	sub	sp, #12
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d9e:	f023 0317 	bic.w	r3, r3, #23
 8003da2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	609a      	str	r2, [r3, #8]
}
 8003daa:	bf00      	nop
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bc80      	pop	{r7}
 8003db2:	4770      	bx	lr

08003db4 <LL_ADC_IsCalibrationOnGoing>:
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003dc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003dc8:	d101      	bne.n	8003dce <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e000      	b.n	8003dd0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bc80      	pop	{r7}
 8003dd8:	4770      	bx	lr

08003dda <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b088      	sub	sp, #32
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003de2:	2300      	movs	r3, #0
 8003de4:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8003de6:	2300      	movs	r3, #0
 8003de8:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d101      	bne.n	8003df8 <HAL_ADCEx_Calibration_Start+0x1e>
 8003df4:	2302      	movs	r3, #2
 8003df6:	e0b9      	b.n	8003f6c <HAL_ADCEx_Calibration_Start+0x192>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f7ff ff0b 	bl	8003c1c <ADC_Disable>
 8003e06:	4603      	mov	r3, r0
 8003e08:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7ff ffab 	bl	8003d6a <LL_ADC_IsEnabled>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f040 809d 	bne.w	8003f56 <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e20:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003e24:	f043 0202 	orr.w	r2, r3, #2
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68da      	ldr	r2, [r3, #12]
 8003e32:	f248 0303 	movw	r3, #32771	; 0x8003
 8003e36:	4013      	ands	r3, r2
 8003e38:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	6812      	ldr	r2, [r2, #0]
 8003e44:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003e48:	f023 0303 	bic.w	r3, r3, #3
 8003e4c:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003e4e:	2300      	movs	r3, #0
 8003e50:	61fb      	str	r3, [r7, #28]
 8003e52:	e02e      	b.n	8003eb2 <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7ff ff98 	bl	8003d8e <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003e5e:	e014      	b.n	8003e8a <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	3301      	adds	r3, #1
 8003e64:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8003e6c:	d30d      	bcc.n	8003e8a <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e72:	f023 0312 	bic.w	r3, r3, #18
 8003e76:	f043 0210 	orr.w	r2, r3, #16
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e070      	b.n	8003f6c <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7ff ff90 	bl	8003db4 <LL_ADC_IsCalibrationOnGoing>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1e2      	bne.n	8003e60 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7ff ff2f 	bl	8003d02 <LL_ADC_GetCalibrationFactor>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	3301      	adds	r3, #1
 8003eb0:	61fb      	str	r3, [r7, #28]
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	2b07      	cmp	r3, #7
 8003eb6:	d9cd      	bls.n	8003e54 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec0:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7ff ff29 	bl	8003d1e <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	69b9      	ldr	r1, [r7, #24]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7ff ff01 	bl	8003cda <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7ff ff31 	bl	8003d44 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003ee2:	f7fe f999 	bl	8002218 <HAL_GetTick>
 8003ee6:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003ee8:	e01c      	b.n	8003f24 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003eea:	f7fe f995 	bl	8002218 <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d915      	bls.n	8003f24 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4618      	mov	r0, r3
 8003efe:	f7ff ff34 	bl	8003d6a <LL_ADC_IsEnabled>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d00d      	beq.n	8003f24 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f0c:	f043 0210 	orr.w	r2, r3, #16
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f18:	f043 0201 	orr.w	r2, r3, #1
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e023      	b.n	8003f6c <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7ff ff1e 	bl	8003d6a <LL_ADC_IsEnabled>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d1da      	bne.n	8003eea <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68d9      	ldr	r1, [r3, #12]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	430a      	orrs	r2, r1
 8003f42:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f48:	f023 0303 	bic.w	r3, r3, #3
 8003f4c:	f043 0201 	orr.w	r2, r3, #1
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	659a      	str	r2, [r3, #88]	; 0x58
 8003f54:	e005      	b.n	8003f62 <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f5a:	f043 0210 	orr.w	r2, r3, #16
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003f6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3720      	adds	r7, #32
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f003 0307 	and.w	r3, r3, #7
 8003f82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f84:	4b0c      	ldr	r3, [pc, #48]	; (8003fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f8a:	68ba      	ldr	r2, [r7, #8]
 8003f8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f90:	4013      	ands	r3, r2
 8003f92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003fa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fa6:	4a04      	ldr	r2, [pc, #16]	; (8003fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	60d3      	str	r3, [r2, #12]
}
 8003fac:	bf00      	nop
 8003fae:	3714      	adds	r7, #20
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bc80      	pop	{r7}
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	e000ed00 	.word	0xe000ed00

08003fbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fc0:	4b04      	ldr	r3, [pc, #16]	; (8003fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	0a1b      	lsrs	r3, r3, #8
 8003fc6:	f003 0307 	and.w	r3, r3, #7
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bc80      	pop	{r7}
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	e000ed00 	.word	0xe000ed00

08003fd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	4603      	mov	r3, r0
 8003fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	db0b      	blt.n	8004002 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fea:	79fb      	ldrb	r3, [r7, #7]
 8003fec:	f003 021f 	and.w	r2, r3, #31
 8003ff0:	4906      	ldr	r1, [pc, #24]	; (800400c <__NVIC_EnableIRQ+0x34>)
 8003ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ff6:	095b      	lsrs	r3, r3, #5
 8003ff8:	2001      	movs	r0, #1
 8003ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8003ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004002:	bf00      	nop
 8004004:	370c      	adds	r7, #12
 8004006:	46bd      	mov	sp, r7
 8004008:	bc80      	pop	{r7}
 800400a:	4770      	bx	lr
 800400c:	e000e100 	.word	0xe000e100

08004010 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	4603      	mov	r3, r0
 8004018:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800401a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800401e:	2b00      	cmp	r3, #0
 8004020:	db12      	blt.n	8004048 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004022:	79fb      	ldrb	r3, [r7, #7]
 8004024:	f003 021f 	and.w	r2, r3, #31
 8004028:	490a      	ldr	r1, [pc, #40]	; (8004054 <__NVIC_DisableIRQ+0x44>)
 800402a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800402e:	095b      	lsrs	r3, r3, #5
 8004030:	2001      	movs	r0, #1
 8004032:	fa00 f202 	lsl.w	r2, r0, r2
 8004036:	3320      	adds	r3, #32
 8004038:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800403c:	f3bf 8f4f 	dsb	sy
}
 8004040:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004042:	f3bf 8f6f 	isb	sy
}
 8004046:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	bc80      	pop	{r7}
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	e000e100 	.word	0xe000e100

08004058 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	4603      	mov	r3, r0
 8004060:	6039      	str	r1, [r7, #0]
 8004062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004068:	2b00      	cmp	r3, #0
 800406a:	db0a      	blt.n	8004082 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	b2da      	uxtb	r2, r3
 8004070:	490c      	ldr	r1, [pc, #48]	; (80040a4 <__NVIC_SetPriority+0x4c>)
 8004072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004076:	0112      	lsls	r2, r2, #4
 8004078:	b2d2      	uxtb	r2, r2
 800407a:	440b      	add	r3, r1
 800407c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004080:	e00a      	b.n	8004098 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	b2da      	uxtb	r2, r3
 8004086:	4908      	ldr	r1, [pc, #32]	; (80040a8 <__NVIC_SetPriority+0x50>)
 8004088:	79fb      	ldrb	r3, [r7, #7]
 800408a:	f003 030f 	and.w	r3, r3, #15
 800408e:	3b04      	subs	r3, #4
 8004090:	0112      	lsls	r2, r2, #4
 8004092:	b2d2      	uxtb	r2, r2
 8004094:	440b      	add	r3, r1
 8004096:	761a      	strb	r2, [r3, #24]
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	bc80      	pop	{r7}
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	e000e100 	.word	0xe000e100
 80040a8:	e000ed00 	.word	0xe000ed00

080040ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b089      	sub	sp, #36	; 0x24
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f003 0307 	and.w	r3, r3, #7
 80040be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	f1c3 0307 	rsb	r3, r3, #7
 80040c6:	2b04      	cmp	r3, #4
 80040c8:	bf28      	it	cs
 80040ca:	2304      	movcs	r3, #4
 80040cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	3304      	adds	r3, #4
 80040d2:	2b06      	cmp	r3, #6
 80040d4:	d902      	bls.n	80040dc <NVIC_EncodePriority+0x30>
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	3b03      	subs	r3, #3
 80040da:	e000      	b.n	80040de <NVIC_EncodePriority+0x32>
 80040dc:	2300      	movs	r3, #0
 80040de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ea:	43da      	mvns	r2, r3
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	401a      	ands	r2, r3
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	fa01 f303 	lsl.w	r3, r1, r3
 80040fe:	43d9      	mvns	r1, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004104:	4313      	orrs	r3, r2
         );
}
 8004106:	4618      	mov	r0, r3
 8004108:	3724      	adds	r7, #36	; 0x24
 800410a:	46bd      	mov	sp, r7
 800410c:	bc80      	pop	{r7}
 800410e:	4770      	bx	lr

08004110 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f7ff ff2b 	bl	8003f74 <__NVIC_SetPriorityGrouping>
}
 800411e:	bf00      	nop
 8004120:	3708      	adds	r7, #8
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b086      	sub	sp, #24
 800412a:	af00      	add	r7, sp, #0
 800412c:	4603      	mov	r3, r0
 800412e:	60b9      	str	r1, [r7, #8]
 8004130:	607a      	str	r2, [r7, #4]
 8004132:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004134:	f7ff ff42 	bl	8003fbc <__NVIC_GetPriorityGrouping>
 8004138:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	68b9      	ldr	r1, [r7, #8]
 800413e:	6978      	ldr	r0, [r7, #20]
 8004140:	f7ff ffb4 	bl	80040ac <NVIC_EncodePriority>
 8004144:	4602      	mov	r2, r0
 8004146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800414a:	4611      	mov	r1, r2
 800414c:	4618      	mov	r0, r3
 800414e:	f7ff ff83 	bl	8004058 <__NVIC_SetPriority>
}
 8004152:	bf00      	nop
 8004154:	3718      	adds	r7, #24
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}

0800415a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800415a:	b580      	push	{r7, lr}
 800415c:	b082      	sub	sp, #8
 800415e:	af00      	add	r7, sp, #0
 8004160:	4603      	mov	r3, r0
 8004162:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004168:	4618      	mov	r0, r3
 800416a:	f7ff ff35 	bl	8003fd8 <__NVIC_EnableIRQ>
}
 800416e:	bf00      	nop
 8004170:	3708      	adds	r7, #8
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004176:	b580      	push	{r7, lr}
 8004178:	b082      	sub	sp, #8
 800417a:	af00      	add	r7, sp, #0
 800417c:	4603      	mov	r3, r0
 800417e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004184:	4618      	mov	r0, r3
 8004186:	f7ff ff43 	bl	8004010 <__NVIC_DisableIRQ>
}
 800418a:	bf00      	nop
 800418c:	3708      	adds	r7, #8
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
	...

08004194 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d101      	bne.n	80041a6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e08e      	b.n	80042c4 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	461a      	mov	r2, r3
 80041ac:	4b47      	ldr	r3, [pc, #284]	; (80042cc <HAL_DMA_Init+0x138>)
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d80f      	bhi.n	80041d2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	461a      	mov	r2, r3
 80041b8:	4b45      	ldr	r3, [pc, #276]	; (80042d0 <HAL_DMA_Init+0x13c>)
 80041ba:	4413      	add	r3, r2
 80041bc:	4a45      	ldr	r2, [pc, #276]	; (80042d4 <HAL_DMA_Init+0x140>)
 80041be:	fba2 2303 	umull	r2, r3, r2, r3
 80041c2:	091b      	lsrs	r3, r3, #4
 80041c4:	009a      	lsls	r2, r3, #2
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a42      	ldr	r2, [pc, #264]	; (80042d8 <HAL_DMA_Init+0x144>)
 80041ce:	641a      	str	r2, [r3, #64]	; 0x40
 80041d0:	e00e      	b.n	80041f0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	461a      	mov	r2, r3
 80041d8:	4b40      	ldr	r3, [pc, #256]	; (80042dc <HAL_DMA_Init+0x148>)
 80041da:	4413      	add	r3, r2
 80041dc:	4a3d      	ldr	r2, [pc, #244]	; (80042d4 <HAL_DMA_Init+0x140>)
 80041de:	fba2 2303 	umull	r2, r3, r2, r3
 80041e2:	091b      	lsrs	r3, r3, #4
 80041e4:	009a      	lsls	r2, r3, #2
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a3c      	ldr	r2, [pc, #240]	; (80042e0 <HAL_DMA_Init+0x14c>)
 80041ee:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2202      	movs	r2, #2
 80041f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	6812      	ldr	r2, [r2, #0]
 8004202:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800420a:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	6819      	ldr	r1, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	689a      	ldr	r2, [r3, #8]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	431a      	orrs	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	431a      	orrs	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	431a      	orrs	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	431a      	orrs	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	69db      	ldr	r3, [r3, #28]
 8004232:	431a      	orrs	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	431a      	orrs	r2, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	430a      	orrs	r2, r1
 8004240:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 fb24 	bl	8004890 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004250:	d102      	bne.n	8004258 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004260:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004264:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800426e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d010      	beq.n	800429a <HAL_DMA_Init+0x106>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	2b04      	cmp	r3, #4
 800427e:	d80c      	bhi.n	800429a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 fb4d 	bl	8004920 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800428a:	2200      	movs	r2, #0
 800428c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004296:	605a      	str	r2, [r3, #4]
 8004298:	e008      	b.n	80042ac <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80042c2:	2300      	movs	r3, #0
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3708      	adds	r7, #8
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	40020407 	.word	0x40020407
 80042d0:	bffdfff8 	.word	0xbffdfff8
 80042d4:	cccccccd 	.word	0xcccccccd
 80042d8:	40020000 	.word	0x40020000
 80042dc:	bffdfbf8 	.word	0xbffdfbf8
 80042e0:	40020400 	.word	0x40020400

080042e4 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e07b      	b.n	80043ee <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f022 0201 	bic.w	r2, r2, #1
 8004304:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	461a      	mov	r2, r3
 800430c:	4b3a      	ldr	r3, [pc, #232]	; (80043f8 <HAL_DMA_DeInit+0x114>)
 800430e:	429a      	cmp	r2, r3
 8004310:	d80f      	bhi.n	8004332 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	461a      	mov	r2, r3
 8004318:	4b38      	ldr	r3, [pc, #224]	; (80043fc <HAL_DMA_DeInit+0x118>)
 800431a:	4413      	add	r3, r2
 800431c:	4a38      	ldr	r2, [pc, #224]	; (8004400 <HAL_DMA_DeInit+0x11c>)
 800431e:	fba2 2303 	umull	r2, r3, r2, r3
 8004322:	091b      	lsrs	r3, r3, #4
 8004324:	009a      	lsls	r2, r3, #2
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a35      	ldr	r2, [pc, #212]	; (8004404 <HAL_DMA_DeInit+0x120>)
 800432e:	641a      	str	r2, [r3, #64]	; 0x40
 8004330:	e00e      	b.n	8004350 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	461a      	mov	r2, r3
 8004338:	4b33      	ldr	r3, [pc, #204]	; (8004408 <HAL_DMA_DeInit+0x124>)
 800433a:	4413      	add	r3, r2
 800433c:	4a30      	ldr	r2, [pc, #192]	; (8004400 <HAL_DMA_DeInit+0x11c>)
 800433e:	fba2 2303 	umull	r2, r3, r2, r3
 8004342:	091b      	lsrs	r3, r3, #4
 8004344:	009a      	lsls	r2, r3, #2
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a2f      	ldr	r2, [pc, #188]	; (800440c <HAL_DMA_DeInit+0x128>)
 800434e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2200      	movs	r2, #0
 8004356:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800435c:	f003 021c 	and.w	r2, r3, #28
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004364:	2101      	movs	r1, #1
 8004366:	fa01 f202 	lsl.w	r2, r1, r2
 800436a:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f000 fa8f 	bl	8004890 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004376:	2200      	movs	r2, #0
 8004378:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004382:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00f      	beq.n	80043ac <HAL_DMA_DeInit+0xc8>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	2b04      	cmp	r3, #4
 8004392:	d80b      	bhi.n	80043ac <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 fac3 	bl	8004920 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800439e:	2200      	movs	r2, #0
 80043a0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80043aa:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	40020407 	.word	0x40020407
 80043fc:	bffdfff8 	.word	0xbffdfff8
 8004400:	cccccccd 	.word	0xcccccccd
 8004404:	40020000 	.word	0x40020000
 8004408:	bffdfbf8 	.word	0xbffdfbf8
 800440c:	40020400 	.word	0x40020400

08004410 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b086      	sub	sp, #24
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
 800441c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800441e:	2300      	movs	r3, #0
 8004420:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004428:	2b01      	cmp	r3, #1
 800442a:	d101      	bne.n	8004430 <HAL_DMA_Start_IT+0x20>
 800442c:	2302      	movs	r3, #2
 800442e:	e069      	b.n	8004504 <HAL_DMA_Start_IT+0xf4>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800443e:	b2db      	uxtb	r3, r3
 8004440:	2b01      	cmp	r3, #1
 8004442:	d155      	bne.n	80044f0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2202      	movs	r2, #2
 8004448:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f022 0201 	bic.w	r2, r2, #1
 8004460:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	68b9      	ldr	r1, [r7, #8]
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f000 f9d3 	bl	8004814 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004472:	2b00      	cmp	r3, #0
 8004474:	d008      	beq.n	8004488 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f042 020e 	orr.w	r2, r2, #14
 8004484:	601a      	str	r2, [r3, #0]
 8004486:	e00f      	b.n	80044a8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f022 0204 	bic.w	r2, r2, #4
 8004496:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f042 020a 	orr.w	r2, r2, #10
 80044a6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d007      	beq.n	80044c6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044c4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d007      	beq.n	80044de <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044dc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f042 0201 	orr.w	r2, r2, #1
 80044ec:	601a      	str	r2, [r3, #0]
 80044ee:	e008      	b.n	8004502 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2280      	movs	r2, #128	; 0x80
 80044f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004502:	7dfb      	ldrb	r3, [r7, #23]
}
 8004504:	4618      	mov	r0, r3
 8004506:	3718      	adds	r7, #24
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d101      	bne.n	800451e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e04f      	b.n	80045be <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004524:	b2db      	uxtb	r3, r3
 8004526:	2b02      	cmp	r3, #2
 8004528:	d008      	beq.n	800453c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2204      	movs	r2, #4
 800452e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e040      	b.n	80045be <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f022 020e 	bic.w	r2, r2, #14
 800454a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004556:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800455a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f022 0201 	bic.w	r2, r2, #1
 800456a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004570:	f003 021c 	and.w	r2, r3, #28
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004578:	2101      	movs	r1, #1
 800457a:	fa01 f202 	lsl.w	r2, r1, r2
 800457e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004588:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00c      	beq.n	80045ac <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800459c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045a0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80045aa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	370c      	adds	r7, #12
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bc80      	pop	{r7}
 80045c6:	4770      	bx	lr

080045c8 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045d0:	2300      	movs	r3, #0
 80045d2:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d005      	beq.n	80045ec <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2204      	movs	r2, #4
 80045e4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	73fb      	strb	r3, [r7, #15]
 80045ea:	e047      	b.n	800467c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f022 020e 	bic.w	r2, r2, #14
 80045fa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f022 0201 	bic.w	r2, r2, #1
 800460a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004616:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800461a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004620:	f003 021c 	and.w	r2, r3, #28
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004628:	2101      	movs	r1, #1
 800462a:	fa01 f202 	lsl.w	r2, r1, r2
 800462e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004638:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00c      	beq.n	800465c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800464c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004650:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800465a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004670:	2b00      	cmp	r3, #0
 8004672:	d003      	beq.n	800467c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	4798      	blx	r3
    }
  }
  return status;
 800467c:	7bfb      	ldrb	r3, [r7, #15]
}
 800467e:	4618      	mov	r0, r3
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
	...

08004688 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a4:	f003 031c 	and.w	r3, r3, #28
 80046a8:	2204      	movs	r2, #4
 80046aa:	409a      	lsls	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	4013      	ands	r3, r2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d027      	beq.n	8004704 <HAL_DMA_IRQHandler+0x7c>
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	f003 0304 	and.w	r3, r3, #4
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d022      	beq.n	8004704 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0320 	and.w	r3, r3, #32
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d107      	bne.n	80046dc <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f022 0204 	bic.w	r2, r2, #4
 80046da:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e0:	f003 021c 	and.w	r2, r3, #28
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e8:	2104      	movs	r1, #4
 80046ea:	fa01 f202 	lsl.w	r2, r1, r2
 80046ee:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f000 8081 	beq.w	80047fc <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8004702:	e07b      	b.n	80047fc <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004708:	f003 031c 	and.w	r3, r3, #28
 800470c:	2202      	movs	r2, #2
 800470e:	409a      	lsls	r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	4013      	ands	r3, r2
 8004714:	2b00      	cmp	r3, #0
 8004716:	d03d      	beq.n	8004794 <HAL_DMA_IRQHandler+0x10c>
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b00      	cmp	r3, #0
 8004720:	d038      	beq.n	8004794 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0320 	and.w	r3, r3, #32
 800472c:	2b00      	cmp	r3, #0
 800472e:	d10b      	bne.n	8004748 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f022 020a 	bic.w	r2, r2, #10
 800473e:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	461a      	mov	r2, r3
 800474e:	4b2e      	ldr	r3, [pc, #184]	; (8004808 <HAL_DMA_IRQHandler+0x180>)
 8004750:	429a      	cmp	r2, r3
 8004752:	d909      	bls.n	8004768 <HAL_DMA_IRQHandler+0xe0>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004758:	f003 031c 	and.w	r3, r3, #28
 800475c:	4a2b      	ldr	r2, [pc, #172]	; (800480c <HAL_DMA_IRQHandler+0x184>)
 800475e:	2102      	movs	r1, #2
 8004760:	fa01 f303 	lsl.w	r3, r1, r3
 8004764:	6053      	str	r3, [r2, #4]
 8004766:	e008      	b.n	800477a <HAL_DMA_IRQHandler+0xf2>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800476c:	f003 031c 	and.w	r3, r3, #28
 8004770:	4a27      	ldr	r2, [pc, #156]	; (8004810 <HAL_DMA_IRQHandler+0x188>)
 8004772:	2102      	movs	r1, #2
 8004774:	fa01 f303 	lsl.w	r3, r1, r3
 8004778:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004786:	2b00      	cmp	r3, #0
 8004788:	d038      	beq.n	80047fc <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8004792:	e033      	b.n	80047fc <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004798:	f003 031c 	and.w	r3, r3, #28
 800479c:	2208      	movs	r2, #8
 800479e:	409a      	lsls	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	4013      	ands	r3, r2
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d02a      	beq.n	80047fe <HAL_DMA_IRQHandler+0x176>
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	f003 0308 	and.w	r3, r3, #8
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d025      	beq.n	80047fe <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f022 020e 	bic.w	r2, r2, #14
 80047c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c6:	f003 021c 	and.w	r2, r3, #28
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ce:	2101      	movs	r1, #1
 80047d0:	fa01 f202 	lsl.w	r2, r1, r2
 80047d4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2201      	movs	r2, #1
 80047da:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d004      	beq.n	80047fe <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80047fc:	bf00      	nop
 80047fe:	bf00      	nop
}
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	40020080 	.word	0x40020080
 800480c:	40020400 	.word	0x40020400
 8004810:	40020000 	.word	0x40020000

08004814 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004814:	b480      	push	{r7}
 8004816:	b085      	sub	sp, #20
 8004818:	af00      	add	r7, sp, #0
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	607a      	str	r2, [r7, #4]
 8004820:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800482a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004830:	2b00      	cmp	r3, #0
 8004832:	d004      	beq.n	800483e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800483c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004842:	f003 021c 	and.w	r2, r3, #28
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484a:	2101      	movs	r1, #1
 800484c:	fa01 f202 	lsl.w	r2, r1, r2
 8004850:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	683a      	ldr	r2, [r7, #0]
 8004858:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	2b10      	cmp	r3, #16
 8004860:	d108      	bne.n	8004874 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68ba      	ldr	r2, [r7, #8]
 8004870:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004872:	e007      	b.n	8004884 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68ba      	ldr	r2, [r7, #8]
 800487a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	60da      	str	r2, [r3, #12]
}
 8004884:	bf00      	nop
 8004886:	3714      	adds	r7, #20
 8004888:	46bd      	mov	sp, r7
 800488a:	bc80      	pop	{r7}
 800488c:	4770      	bx	lr
	...

08004890 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	461a      	mov	r2, r3
 800489e:	4b1c      	ldr	r3, [pc, #112]	; (8004910 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d813      	bhi.n	80048cc <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a8:	089b      	lsrs	r3, r3, #2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80048b0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	3b08      	subs	r3, #8
 80048c0:	4a14      	ldr	r2, [pc, #80]	; (8004914 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80048c2:	fba2 2303 	umull	r2, r3, r2, r3
 80048c6:	091b      	lsrs	r3, r3, #4
 80048c8:	60fb      	str	r3, [r7, #12]
 80048ca:	e011      	b.n	80048f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d0:	089b      	lsrs	r3, r3, #2
 80048d2:	009a      	lsls	r2, r3, #2
 80048d4:	4b10      	ldr	r3, [pc, #64]	; (8004918 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80048d6:	4413      	add	r3, r2
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	3b08      	subs	r3, #8
 80048e4:	4a0b      	ldr	r2, [pc, #44]	; (8004914 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80048e6:	fba2 2303 	umull	r2, r3, r2, r3
 80048ea:	091b      	lsrs	r3, r3, #4
 80048ec:	3307      	adds	r3, #7
 80048ee:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a0a      	ldr	r2, [pc, #40]	; (800491c <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80048f4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f003 031f 	and.w	r3, r3, #31
 80048fc:	2201      	movs	r2, #1
 80048fe:	409a      	lsls	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004904:	bf00      	nop
 8004906:	3714      	adds	r7, #20
 8004908:	46bd      	mov	sp, r7
 800490a:	bc80      	pop	{r7}
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	40020407 	.word	0x40020407
 8004914:	cccccccd 	.word	0xcccccccd
 8004918:	4002081c 	.word	0x4002081c
 800491c:	40020880 	.word	0x40020880

08004920 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004930:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	4b0a      	ldr	r3, [pc, #40]	; (8004960 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004936:	4413      	add	r3, r2
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	461a      	mov	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a08      	ldr	r2, [pc, #32]	; (8004964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004944:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	3b01      	subs	r3, #1
 800494a:	f003 0303 	and.w	r3, r3, #3
 800494e:	2201      	movs	r2, #1
 8004950:	409a      	lsls	r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004956:	bf00      	nop
 8004958:	3714      	adds	r7, #20
 800495a:	46bd      	mov	sp, r7
 800495c:	bc80      	pop	{r7}
 800495e:	4770      	bx	lr
 8004960:	1000823f 	.word	0x1000823f
 8004964:	40020940 	.word	0x40020940

08004968 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b086      	sub	sp, #24
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004976:	4b1c      	ldr	r3, [pc, #112]	; (80049e8 <HAL_FLASH_Program+0x80>)
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	2b01      	cmp	r3, #1
 800497c:	d101      	bne.n	8004982 <HAL_FLASH_Program+0x1a>
 800497e:	2302      	movs	r3, #2
 8004980:	e02d      	b.n	80049de <HAL_FLASH_Program+0x76>
 8004982:	4b19      	ldr	r3, [pc, #100]	; (80049e8 <HAL_FLASH_Program+0x80>)
 8004984:	2201      	movs	r2, #1
 8004986:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004988:	4b17      	ldr	r3, [pc, #92]	; (80049e8 <HAL_FLASH_Program+0x80>)
 800498a:	2200      	movs	r2, #0
 800498c:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800498e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004992:	f000 f869 	bl	8004a68 <FLASH_WaitForLastOperation>
 8004996:	4603      	mov	r3, r0
 8004998:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800499a:	7dfb      	ldrb	r3, [r7, #23]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d11a      	bne.n	80049d6 <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d105      	bne.n	80049b2 <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80049a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049aa:	68b8      	ldr	r0, [r7, #8]
 80049ac:	f000 f8be 	bl	8004b2c <FLASH_Program_DoubleWord>
 80049b0:	e004      	b.n	80049bc <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	4619      	mov	r1, r3
 80049b6:	68b8      	ldr	r0, [r7, #8]
 80049b8:	f000 f8de 	bl	8004b78 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80049bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80049c0:	f000 f852 	bl	8004a68 <FLASH_WaitForLastOperation>
 80049c4:	4603      	mov	r3, r0
 80049c6:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80049c8:	4b08      	ldr	r3, [pc, #32]	; (80049ec <HAL_FLASH_Program+0x84>)
 80049ca:	695a      	ldr	r2, [r3, #20]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	43db      	mvns	r3, r3
 80049d0:	4906      	ldr	r1, [pc, #24]	; (80049ec <HAL_FLASH_Program+0x84>)
 80049d2:	4013      	ands	r3, r2
 80049d4:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80049d6:	4b04      	ldr	r3, [pc, #16]	; (80049e8 <HAL_FLASH_Program+0x80>)
 80049d8:	2200      	movs	r2, #0
 80049da:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80049dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3718      	adds	r7, #24
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	200003d0 	.word	0x200003d0
 80049ec:	58004000 	.word	0x58004000

080049f0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80049f6:	2300      	movs	r3, #0
 80049f8:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80049fa:	4b0b      	ldr	r3, [pc, #44]	; (8004a28 <HAL_FLASH_Unlock+0x38>)
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	da0b      	bge.n	8004a1a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004a02:	4b09      	ldr	r3, [pc, #36]	; (8004a28 <HAL_FLASH_Unlock+0x38>)
 8004a04:	4a09      	ldr	r2, [pc, #36]	; (8004a2c <HAL_FLASH_Unlock+0x3c>)
 8004a06:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004a08:	4b07      	ldr	r3, [pc, #28]	; (8004a28 <HAL_FLASH_Unlock+0x38>)
 8004a0a:	4a09      	ldr	r2, [pc, #36]	; (8004a30 <HAL_FLASH_Unlock+0x40>)
 8004a0c:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004a0e:	4b06      	ldr	r3, [pc, #24]	; (8004a28 <HAL_FLASH_Unlock+0x38>)
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	da01      	bge.n	8004a1a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004a1a:	79fb      	ldrb	r3, [r7, #7]
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bc80      	pop	{r7}
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	58004000 	.word	0x58004000
 8004a2c:	45670123 	.word	0x45670123
 8004a30:	cdef89ab 	.word	0xcdef89ab

08004a34 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004a3e:	4b09      	ldr	r3, [pc, #36]	; (8004a64 <HAL_FLASH_Lock+0x30>)
 8004a40:	695b      	ldr	r3, [r3, #20]
 8004a42:	4a08      	ldr	r2, [pc, #32]	; (8004a64 <HAL_FLASH_Lock+0x30>)
 8004a44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a48:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8004a4a:	4b06      	ldr	r3, [pc, #24]	; (8004a64 <HAL_FLASH_Lock+0x30>)
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	db01      	blt.n	8004a56 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8004a56:	79fb      	ldrb	r3, [r7, #7]
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bc80      	pop	{r7}
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	58004000 	.word	0x58004000

08004a68 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8004a70:	f7fd fbd2 	bl	8002218 <HAL_GetTick>
 8004a74:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004a76:	e009      	b.n	8004a8c <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004a78:	f7fd fbce 	bl	8002218 <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d801      	bhi.n	8004a8c <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e047      	b.n	8004b1c <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004a8c:	4b25      	ldr	r3, [pc, #148]	; (8004b24 <FLASH_WaitForLastOperation+0xbc>)
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a98:	d0ee      	beq.n	8004a78 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 8004a9a:	4b22      	ldr	r3, [pc, #136]	; (8004b24 <FLASH_WaitForLastOperation+0xbc>)
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	f003 0301 	and.w	r3, r3, #1
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d002      	beq.n	8004ab0 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004aaa:	4b1e      	ldr	r3, [pc, #120]	; (8004b24 <FLASH_WaitForLastOperation+0xbc>)
 8004aac:	2201      	movs	r2, #1
 8004aae:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8004ab0:	68ba      	ldr	r2, [r7, #8]
 8004ab2:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d007      	beq.n	8004ad4 <FLASH_WaitForLastOperation+0x6c>
 8004ac4:	4b17      	ldr	r3, [pc, #92]	; (8004b24 <FLASH_WaitForLastOperation+0xbc>)
 8004ac6:	699a      	ldr	r2, [r3, #24]
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004ace:	4915      	ldr	r1, [pc, #84]	; (8004b24 <FLASH_WaitForLastOperation+0xbc>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	618b      	str	r3, [r1, #24]
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d004      	beq.n	8004ae8 <FLASH_WaitForLastOperation+0x80>
 8004ade:	4a11      	ldr	r2, [pc, #68]	; (8004b24 <FLASH_WaitForLastOperation+0xbc>)
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004ae6:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00e      	beq.n	8004b0c <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8004aee:	4a0e      	ldr	r2, [pc, #56]	; (8004b28 <FLASH_WaitForLastOperation+0xc0>)
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e011      	b.n	8004b1c <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004af8:	f7fd fb8e 	bl	8002218 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d801      	bhi.n	8004b0c <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e007      	b.n	8004b1c <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8004b0c:	4b05      	ldr	r3, [pc, #20]	; (8004b24 <FLASH_WaitForLastOperation+0xbc>)
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b14:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b18:	d0ee      	beq.n	8004af8 <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3710      	adds	r7, #16
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	58004000 	.word	0x58004000
 8004b28:	200003d0 	.word	0x200003d0

08004b2c <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b085      	sub	sp, #20
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004b38:	4b0e      	ldr	r3, [pc, #56]	; (8004b74 <FLASH_Program_DoubleWord+0x48>)
 8004b3a:	695b      	ldr	r3, [r3, #20]
 8004b3c:	4a0d      	ldr	r2, [pc, #52]	; (8004b74 <FLASH_Program_DoubleWord+0x48>)
 8004b3e:	f043 0301 	orr.w	r3, r3, #1
 8004b42:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	683a      	ldr	r2, [r7, #0]
 8004b48:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004b4a:	f3bf 8f6f 	isb	sy
}
 8004b4e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8004b50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b54:	f04f 0200 	mov.w	r2, #0
 8004b58:	f04f 0300 	mov.w	r3, #0
 8004b5c:	000a      	movs	r2, r1
 8004b5e:	2300      	movs	r3, #0
 8004b60:	68f9      	ldr	r1, [r7, #12]
 8004b62:	3104      	adds	r1, #4
 8004b64:	4613      	mov	r3, r2
 8004b66:	600b      	str	r3, [r1, #0]
}
 8004b68:	bf00      	nop
 8004b6a:	3714      	adds	r7, #20
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bc80      	pop	{r7}
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	58004000 	.word	0x58004000

08004b78 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b089      	sub	sp, #36	; 0x24
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8004b82:	2340      	movs	r3, #64	; 0x40
 8004b84:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8004b8e:	4b18      	ldr	r3, [pc, #96]	; (8004bf0 <FLASH_Program_Fast+0x78>)
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	4a17      	ldr	r2, [pc, #92]	; (8004bf0 <FLASH_Program_Fast+0x78>)
 8004b94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b98:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b9a:	f3ef 8310 	mrs	r3, PRIMASK
 8004b9e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 8004ba2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004ba4:	b672      	cpsid	i
}
 8004ba6:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	3304      	adds	r3, #4
 8004bb4:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	3304      	adds	r3, #4
 8004bba:	617b      	str	r3, [r7, #20]
    row_index--;
 8004bbc:	7ffb      	ldrb	r3, [r7, #31]
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8004bc2:	7ffb      	ldrb	r3, [r7, #31]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d1ef      	bne.n	8004ba8 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8004bc8:	bf00      	nop
 8004bca:	4b09      	ldr	r3, [pc, #36]	; (8004bf0 <FLASH_Program_Fast+0x78>)
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bd6:	d0f8      	beq.n	8004bca <FLASH_Program_Fast+0x52>
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	f383 8810 	msr	PRIMASK, r3
}
 8004be2:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8004be4:	bf00      	nop
 8004be6:	3724      	adds	r7, #36	; 0x24
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bc80      	pop	{r7}
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	58004000 	.word	0x58004000

08004bf4 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004bfe:	4b28      	ldr	r3, [pc, #160]	; (8004ca0 <HAL_FLASHEx_Erase+0xac>)
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d101      	bne.n	8004c0a <HAL_FLASHEx_Erase+0x16>
 8004c06:	2302      	movs	r3, #2
 8004c08:	e046      	b.n	8004c98 <HAL_FLASHEx_Erase+0xa4>
 8004c0a:	4b25      	ldr	r3, [pc, #148]	; (8004ca0 <HAL_FLASHEx_Erase+0xac>)
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004c10:	4b23      	ldr	r3, [pc, #140]	; (8004ca0 <HAL_FLASHEx_Erase+0xac>)
 8004c12:	2200      	movs	r2, #0
 8004c14:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004c16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c1a:	f7ff ff25 	bl	8004a68 <FLASH_WaitForLastOperation>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004c22:	7bfb      	ldrb	r3, [r7, #15]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d133      	bne.n	8004c90 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2b04      	cmp	r3, #4
 8004c2e:	d108      	bne.n	8004c42 <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8004c30:	f000 f838 	bl	8004ca4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004c34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c38:	f7ff ff16 	bl	8004a68 <FLASH_WaitForLastOperation>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	73fb      	strb	r3, [r7, #15]
 8004c40:	e024      	b.n	8004c8c <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c48:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	60bb      	str	r3, [r7, #8]
 8004c50:	e012      	b.n	8004c78 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8004c52:	68b8      	ldr	r0, [r7, #8]
 8004c54:	f000 f836 	bl	8004cc4 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004c58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c5c:	f7ff ff04 	bl	8004a68 <FLASH_WaitForLastOperation>
 8004c60:	4603      	mov	r3, r0
 8004c62:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8004c64:	7bfb      	ldrb	r3, [r7, #15]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d003      	beq.n	8004c72 <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	68ba      	ldr	r2, [r7, #8]
 8004c6e:	601a      	str	r2, [r3, #0]
          break;
 8004c70:	e00a      	b.n	8004c88 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	3301      	adds	r3, #1
 8004c76:	60bb      	str	r3, [r7, #8]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685a      	ldr	r2, [r3, #4]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	4413      	add	r3, r2
 8004c82:	68ba      	ldr	r2, [r7, #8]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d3e4      	bcc.n	8004c52 <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8004c88:	f000 f878 	bl	8004d7c <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004c8c:	f000 f832 	bl	8004cf4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004c90:	4b03      	ldr	r3, [pc, #12]	; (8004ca0 <HAL_FLASHEx_Erase+0xac>)
 8004c92:	2200      	movs	r2, #0
 8004c94:	701a      	strb	r2, [r3, #0]

  return status;
 8004c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	200003d0 	.word	0x200003d0

08004ca4 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8004ca8:	4b05      	ldr	r3, [pc, #20]	; (8004cc0 <FLASH_MassErase+0x1c>)
 8004caa:	695b      	ldr	r3, [r3, #20]
 8004cac:	4a04      	ldr	r2, [pc, #16]	; (8004cc0 <FLASH_MassErase+0x1c>)
 8004cae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cb2:	f043 0304 	orr.w	r3, r3, #4
 8004cb6:	6153      	str	r3, [r2, #20]
#endif
}
 8004cb8:	bf00      	nop
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bc80      	pop	{r7}
 8004cbe:	4770      	bx	lr
 8004cc0:	58004000 	.word	0x58004000

08004cc4 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8004ccc:	4b08      	ldr	r3, [pc, #32]	; (8004cf0 <FLASH_PageErase+0x2c>)
 8004cce:	695b      	ldr	r3, [r3, #20]
 8004cd0:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	00db      	lsls	r3, r3, #3
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	4a05      	ldr	r2, [pc, #20]	; (8004cf0 <FLASH_PageErase+0x2c>)
 8004cdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ce0:	f043 0302 	orr.w	r3, r3, #2
 8004ce4:	6153      	str	r3, [r2, #20]
#endif
}
 8004ce6:	bf00      	nop
 8004ce8:	370c      	adds	r7, #12
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bc80      	pop	{r7}
 8004cee:	4770      	bx	lr
 8004cf0:	58004000 	.word	0x58004000

08004cf4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8004cf8:	4b1f      	ldr	r3, [pc, #124]	; (8004d78 <FLASH_FlushCaches+0x84>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d117      	bne.n	8004d34 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004d04:	4b1c      	ldr	r3, [pc, #112]	; (8004d78 <FLASH_FlushCaches+0x84>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a1b      	ldr	r2, [pc, #108]	; (8004d78 <FLASH_FlushCaches+0x84>)
 8004d0a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d0e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004d10:	4b19      	ldr	r3, [pc, #100]	; (8004d78 <FLASH_FlushCaches+0x84>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a18      	ldr	r2, [pc, #96]	; (8004d78 <FLASH_FlushCaches+0x84>)
 8004d16:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004d1a:	6013      	str	r3, [r2, #0]
 8004d1c:	4b16      	ldr	r3, [pc, #88]	; (8004d78 <FLASH_FlushCaches+0x84>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a15      	ldr	r2, [pc, #84]	; (8004d78 <FLASH_FlushCaches+0x84>)
 8004d22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d26:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004d28:	4b13      	ldr	r3, [pc, #76]	; (8004d78 <FLASH_FlushCaches+0x84>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a12      	ldr	r2, [pc, #72]	; (8004d78 <FLASH_FlushCaches+0x84>)
 8004d2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d32:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8004d34:	4b10      	ldr	r3, [pc, #64]	; (8004d78 <FLASH_FlushCaches+0x84>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d117      	bne.n	8004d70 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004d40:	4b0d      	ldr	r3, [pc, #52]	; (8004d78 <FLASH_FlushCaches+0x84>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a0c      	ldr	r2, [pc, #48]	; (8004d78 <FLASH_FlushCaches+0x84>)
 8004d46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d4a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004d4c:	4b0a      	ldr	r3, [pc, #40]	; (8004d78 <FLASH_FlushCaches+0x84>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a09      	ldr	r2, [pc, #36]	; (8004d78 <FLASH_FlushCaches+0x84>)
 8004d52:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004d56:	6013      	str	r3, [r2, #0]
 8004d58:	4b07      	ldr	r3, [pc, #28]	; (8004d78 <FLASH_FlushCaches+0x84>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a06      	ldr	r2, [pc, #24]	; (8004d78 <FLASH_FlushCaches+0x84>)
 8004d5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d62:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004d64:	4b04      	ldr	r3, [pc, #16]	; (8004d78 <FLASH_FlushCaches+0x84>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a03      	ldr	r2, [pc, #12]	; (8004d78 <FLASH_FlushCaches+0x84>)
 8004d6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d6e:	6013      	str	r3, [r2, #0]
  }
#endif
}
 8004d70:	bf00      	nop
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bc80      	pop	{r7}
 8004d76:	4770      	bx	lr
 8004d78:	58004000 	.word	0x58004000

08004d7c <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8004d80:	4b05      	ldr	r3, [pc, #20]	; (8004d98 <FLASH_AcknowledgePageErase+0x1c>)
 8004d82:	695b      	ldr	r3, [r3, #20]
 8004d84:	4a04      	ldr	r2, [pc, #16]	; (8004d98 <FLASH_AcknowledgePageErase+0x1c>)
 8004d86:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8004d8a:	f023 0302 	bic.w	r3, r3, #2
 8004d8e:	6153      	str	r3, [r2, #20]
#endif
}
 8004d90:	bf00      	nop
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bc80      	pop	{r7}
 8004d96:	4770      	bx	lr
 8004d98:	58004000 	.word	0x58004000

08004d9c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b087      	sub	sp, #28
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004da6:	2300      	movs	r3, #0
 8004da8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004daa:	e140      	b.n	800502e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	2101      	movs	r1, #1
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	fa01 f303 	lsl.w	r3, r1, r3
 8004db8:	4013      	ands	r3, r2
 8004dba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	f000 8132 	beq.w	8005028 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f003 0303 	and.w	r3, r3, #3
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d005      	beq.n	8004ddc <HAL_GPIO_Init+0x40>
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f003 0303 	and.w	r3, r3, #3
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d130      	bne.n	8004e3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	005b      	lsls	r3, r3, #1
 8004de6:	2203      	movs	r2, #3
 8004de8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dec:	43db      	mvns	r3, r3
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	4013      	ands	r3, r2
 8004df2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	68da      	ldr	r2, [r3, #12]
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	005b      	lsls	r3, r3, #1
 8004dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004e00:	693a      	ldr	r2, [r7, #16]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	693a      	ldr	r2, [r7, #16]
 8004e0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e12:	2201      	movs	r2, #1
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1a:	43db      	mvns	r3, r3
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	4013      	ands	r3, r2
 8004e20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	091b      	lsrs	r3, r3, #4
 8004e28:	f003 0201 	and.w	r2, r3, #1
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e32:	693a      	ldr	r2, [r7, #16]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	693a      	ldr	r2, [r7, #16]
 8004e3c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f003 0303 	and.w	r3, r3, #3
 8004e46:	2b03      	cmp	r3, #3
 8004e48:	d017      	beq.n	8004e7a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	005b      	lsls	r3, r3, #1
 8004e54:	2203      	movs	r2, #3
 8004e56:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5a:	43db      	mvns	r3, r3
 8004e5c:	693a      	ldr	r2, [r7, #16]
 8004e5e:	4013      	ands	r3, r2
 8004e60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	689a      	ldr	r2, [r3, #8]
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	005b      	lsls	r3, r3, #1
 8004e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6e:	693a      	ldr	r2, [r7, #16]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	693a      	ldr	r2, [r7, #16]
 8004e78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	f003 0303 	and.w	r3, r3, #3
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d123      	bne.n	8004ece <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	08da      	lsrs	r2, r3, #3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	3208      	adds	r2, #8
 8004e8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	f003 0307 	and.w	r3, r3, #7
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	220f      	movs	r2, #15
 8004e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea2:	43db      	mvns	r3, r3
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	691a      	ldr	r2, [r3, #16]
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	f003 0307 	and.w	r3, r3, #7
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eba:	693a      	ldr	r2, [r7, #16]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	08da      	lsrs	r2, r3, #3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	3208      	adds	r2, #8
 8004ec8:	6939      	ldr	r1, [r7, #16]
 8004eca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	005b      	lsls	r3, r3, #1
 8004ed8:	2203      	movs	r2, #3
 8004eda:	fa02 f303 	lsl.w	r3, r2, r3
 8004ede:	43db      	mvns	r3, r3
 8004ee0:	693a      	ldr	r2, [r7, #16]
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	f003 0203 	and.w	r2, r3, #3
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	005b      	lsls	r3, r3, #1
 8004ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	693a      	ldr	r2, [r7, #16]
 8004f00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	f000 808c 	beq.w	8005028 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004f10:	4a4e      	ldr	r2, [pc, #312]	; (800504c <HAL_GPIO_Init+0x2b0>)
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	089b      	lsrs	r3, r3, #2
 8004f16:	3302      	adds	r3, #2
 8004f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	f003 0303 	and.w	r3, r3, #3
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	2207      	movs	r2, #7
 8004f28:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2c:	43db      	mvns	r3, r3
 8004f2e:	693a      	ldr	r2, [r7, #16]
 8004f30:	4013      	ands	r3, r2
 8004f32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004f3a:	d00d      	beq.n	8004f58 <HAL_GPIO_Init+0x1bc>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a44      	ldr	r2, [pc, #272]	; (8005050 <HAL_GPIO_Init+0x2b4>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d007      	beq.n	8004f54 <HAL_GPIO_Init+0x1b8>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a43      	ldr	r2, [pc, #268]	; (8005054 <HAL_GPIO_Init+0x2b8>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d101      	bne.n	8004f50 <HAL_GPIO_Init+0x1b4>
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	e004      	b.n	8004f5a <HAL_GPIO_Init+0x1be>
 8004f50:	2307      	movs	r3, #7
 8004f52:	e002      	b.n	8004f5a <HAL_GPIO_Init+0x1be>
 8004f54:	2301      	movs	r3, #1
 8004f56:	e000      	b.n	8004f5a <HAL_GPIO_Init+0x1be>
 8004f58:	2300      	movs	r3, #0
 8004f5a:	697a      	ldr	r2, [r7, #20]
 8004f5c:	f002 0203 	and.w	r2, r2, #3
 8004f60:	0092      	lsls	r2, r2, #2
 8004f62:	4093      	lsls	r3, r2
 8004f64:	693a      	ldr	r2, [r7, #16]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004f6a:	4938      	ldr	r1, [pc, #224]	; (800504c <HAL_GPIO_Init+0x2b0>)
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	089b      	lsrs	r3, r3, #2
 8004f70:	3302      	adds	r3, #2
 8004f72:	693a      	ldr	r2, [r7, #16]
 8004f74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004f78:	4b37      	ldr	r3, [pc, #220]	; (8005058 <HAL_GPIO_Init+0x2bc>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	43db      	mvns	r3, r3
 8004f82:	693a      	ldr	r2, [r7, #16]
 8004f84:	4013      	ands	r3, r2
 8004f86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d003      	beq.n	8004f9c <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8004f94:	693a      	ldr	r2, [r7, #16]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004f9c:	4a2e      	ldr	r2, [pc, #184]	; (8005058 <HAL_GPIO_Init+0x2bc>)
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004fa2:	4b2d      	ldr	r3, [pc, #180]	; (8005058 <HAL_GPIO_Init+0x2bc>)
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	43db      	mvns	r3, r3
 8004fac:	693a      	ldr	r2, [r7, #16]
 8004fae:	4013      	ands	r3, r2
 8004fb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d003      	beq.n	8004fc6 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8004fbe:	693a      	ldr	r2, [r7, #16]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004fc6:	4a24      	ldr	r2, [pc, #144]	; (8005058 <HAL_GPIO_Init+0x2bc>)
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8004fcc:	4b22      	ldr	r3, [pc, #136]	; (8005058 <HAL_GPIO_Init+0x2bc>)
 8004fce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fd2:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	43db      	mvns	r3, r3
 8004fd8:	693a      	ldr	r2, [r7, #16]
 8004fda:	4013      	ands	r3, r2
 8004fdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d003      	beq.n	8004ff2 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8004fea:	693a      	ldr	r2, [r7, #16]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8004ff2:	4a19      	ldr	r2, [pc, #100]	; (8005058 <HAL_GPIO_Init+0x2bc>)
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8004ffa:	4b17      	ldr	r3, [pc, #92]	; (8005058 <HAL_GPIO_Init+0x2bc>)
 8004ffc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005000:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	43db      	mvns	r3, r3
 8005006:	693a      	ldr	r2, [r7, #16]
 8005008:	4013      	ands	r3, r2
 800500a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d003      	beq.n	8005020 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005018:	693a      	ldr	r2, [r7, #16]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	4313      	orrs	r3, r2
 800501e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8005020:	4a0d      	ldr	r2, [pc, #52]	; (8005058 <HAL_GPIO_Init+0x2bc>)
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	3301      	adds	r3, #1
 800502c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	fa22 f303 	lsr.w	r3, r2, r3
 8005038:	2b00      	cmp	r3, #0
 800503a:	f47f aeb7 	bne.w	8004dac <HAL_GPIO_Init+0x10>
  }
}
 800503e:	bf00      	nop
 8005040:	bf00      	nop
 8005042:	371c      	adds	r7, #28
 8005044:	46bd      	mov	sp, r7
 8005046:	bc80      	pop	{r7}
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	40010000 	.word	0x40010000
 8005050:	48000400 	.word	0x48000400
 8005054:	48000800 	.word	0x48000800
 8005058:	58000800 	.word	0x58000800

0800505c <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800505c:	b480      	push	{r7}
 800505e:	b087      	sub	sp, #28
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005066:	2300      	movs	r3, #0
 8005068:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800506a:	e0af      	b.n	80051cc <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800506c:	2201      	movs	r2, #1
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	fa02 f303 	lsl.w	r3, r2, r3
 8005074:	683a      	ldr	r2, [r7, #0]
 8005076:	4013      	ands	r3, r2
 8005078:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	2b00      	cmp	r3, #0
 800507e:	f000 80a2 	beq.w	80051c6 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8005082:	4a59      	ldr	r2, [pc, #356]	; (80051e8 <HAL_GPIO_DeInit+0x18c>)
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	089b      	lsrs	r3, r3, #2
 8005088:	3302      	adds	r3, #2
 800508a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800508e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	f003 0303 	and.w	r3, r3, #3
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	2207      	movs	r2, #7
 800509a:	fa02 f303 	lsl.w	r3, r2, r3
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	4013      	ands	r3, r2
 80050a2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80050aa:	d00d      	beq.n	80050c8 <HAL_GPIO_DeInit+0x6c>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a4f      	ldr	r2, [pc, #316]	; (80051ec <HAL_GPIO_DeInit+0x190>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d007      	beq.n	80050c4 <HAL_GPIO_DeInit+0x68>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a4e      	ldr	r2, [pc, #312]	; (80051f0 <HAL_GPIO_DeInit+0x194>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d101      	bne.n	80050c0 <HAL_GPIO_DeInit+0x64>
 80050bc:	2302      	movs	r3, #2
 80050be:	e004      	b.n	80050ca <HAL_GPIO_DeInit+0x6e>
 80050c0:	2307      	movs	r3, #7
 80050c2:	e002      	b.n	80050ca <HAL_GPIO_DeInit+0x6e>
 80050c4:	2301      	movs	r3, #1
 80050c6:	e000      	b.n	80050ca <HAL_GPIO_DeInit+0x6e>
 80050c8:	2300      	movs	r3, #0
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	f002 0203 	and.w	r2, r2, #3
 80050d0:	0092      	lsls	r2, r2, #2
 80050d2:	4093      	lsls	r3, r2
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d136      	bne.n	8005148 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 80050da:	4b46      	ldr	r3, [pc, #280]	; (80051f4 <HAL_GPIO_DeInit+0x198>)
 80050dc:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	43db      	mvns	r3, r3
 80050e4:	4943      	ldr	r1, [pc, #268]	; (80051f4 <HAL_GPIO_DeInit+0x198>)
 80050e6:	4013      	ands	r3, r2
 80050e8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 80050ec:	4b41      	ldr	r3, [pc, #260]	; (80051f4 <HAL_GPIO_DeInit+0x198>)
 80050ee:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	43db      	mvns	r3, r3
 80050f6:	493f      	ldr	r1, [pc, #252]	; (80051f4 <HAL_GPIO_DeInit+0x198>)
 80050f8:	4013      	ands	r3, r2
 80050fa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80050fe:	4b3d      	ldr	r3, [pc, #244]	; (80051f4 <HAL_GPIO_DeInit+0x198>)
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	43db      	mvns	r3, r3
 8005106:	493b      	ldr	r1, [pc, #236]	; (80051f4 <HAL_GPIO_DeInit+0x198>)
 8005108:	4013      	ands	r3, r2
 800510a:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800510c:	4b39      	ldr	r3, [pc, #228]	; (80051f4 <HAL_GPIO_DeInit+0x198>)
 800510e:	685a      	ldr	r2, [r3, #4]
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	43db      	mvns	r3, r3
 8005114:	4937      	ldr	r1, [pc, #220]	; (80051f4 <HAL_GPIO_DeInit+0x198>)
 8005116:	4013      	ands	r3, r2
 8005118:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	f003 0303 	and.w	r3, r3, #3
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	2207      	movs	r2, #7
 8005124:	fa02 f303 	lsl.w	r3, r2, r3
 8005128:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800512a:	4a2f      	ldr	r2, [pc, #188]	; (80051e8 <HAL_GPIO_DeInit+0x18c>)
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	089b      	lsrs	r3, r3, #2
 8005130:	3302      	adds	r3, #2
 8005132:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	43da      	mvns	r2, r3
 800513a:	482b      	ldr	r0, [pc, #172]	; (80051e8 <HAL_GPIO_DeInit+0x18c>)
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	089b      	lsrs	r3, r3, #2
 8005140:	400a      	ands	r2, r1
 8005142:	3302      	adds	r3, #2
 8005144:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	005b      	lsls	r3, r3, #1
 8005150:	2103      	movs	r1, #3
 8005152:	fa01 f303 	lsl.w	r3, r1, r3
 8005156:	431a      	orrs	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	08da      	lsrs	r2, r3, #3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	3208      	adds	r2, #8
 8005164:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	f003 0307 	and.w	r3, r3, #7
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	220f      	movs	r2, #15
 8005172:	fa02 f303 	lsl.w	r3, r2, r3
 8005176:	43db      	mvns	r3, r3
 8005178:	697a      	ldr	r2, [r7, #20]
 800517a:	08d2      	lsrs	r2, r2, #3
 800517c:	4019      	ands	r1, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	3208      	adds	r2, #8
 8005182:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	689a      	ldr	r2, [r3, #8]
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	005b      	lsls	r3, r3, #1
 800518e:	2103      	movs	r1, #3
 8005190:	fa01 f303 	lsl.w	r3, r1, r3
 8005194:	43db      	mvns	r3, r3
 8005196:	401a      	ands	r2, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685a      	ldr	r2, [r3, #4]
 80051a0:	2101      	movs	r1, #1
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	fa01 f303 	lsl.w	r3, r1, r3
 80051a8:	43db      	mvns	r3, r3
 80051aa:	401a      	ands	r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	68da      	ldr	r2, [r3, #12]
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	005b      	lsls	r3, r3, #1
 80051b8:	2103      	movs	r1, #3
 80051ba:	fa01 f303 	lsl.w	r3, r1, r3
 80051be:	43db      	mvns	r3, r3
 80051c0:	401a      	ands	r2, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	60da      	str	r2, [r3, #12]
    }

    position++;
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	3301      	adds	r3, #1
 80051ca:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80051cc:	683a      	ldr	r2, [r7, #0]
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	fa22 f303 	lsr.w	r3, r2, r3
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	f47f af49 	bne.w	800506c <HAL_GPIO_DeInit+0x10>
  }
}
 80051da:	bf00      	nop
 80051dc:	bf00      	nop
 80051de:	371c      	adds	r7, #28
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bc80      	pop	{r7}
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	40010000 	.word	0x40010000
 80051ec:	48000400 	.word	0x48000400
 80051f0:	48000800 	.word	0x48000800
 80051f4:	58000800 	.word	0x58000800

080051f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	460b      	mov	r3, r1
 8005202:	807b      	strh	r3, [r7, #2]
 8005204:	4613      	mov	r3, r2
 8005206:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005208:	787b      	ldrb	r3, [r7, #1]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d003      	beq.n	8005216 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800520e:	887a      	ldrh	r2, [r7, #2]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005214:	e002      	b.n	800521c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005216:	887a      	ldrh	r2, [r7, #2]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800521c:	bf00      	nop
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	bc80      	pop	{r7}
 8005224:	4770      	bx	lr

08005226 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005226:	b580      	push	{r7, lr}
 8005228:	b082      	sub	sp, #8
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d101      	bne.n	8005238 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e081      	b.n	800533c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800523e:	b2db      	uxtb	r3, r3
 8005240:	2b00      	cmp	r3, #0
 8005242:	d106      	bne.n	8005252 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f7fc fafb 	bl	8001848 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2224      	movs	r2, #36	; 0x24
 8005256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f022 0201 	bic.w	r2, r2, #1
 8005268:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685a      	ldr	r2, [r3, #4]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005276:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	689a      	ldr	r2, [r3, #8]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005286:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d107      	bne.n	80052a0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	689a      	ldr	r2, [r3, #8]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800529c:	609a      	str	r2, [r3, #8]
 800529e:	e006      	b.n	80052ae <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	689a      	ldr	r2, [r3, #8]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80052ac:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d104      	bne.n	80052c0 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052be:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	6812      	ldr	r2, [r2, #0]
 80052ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80052ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052d2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	68da      	ldr	r2, [r3, #12]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80052e2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	691a      	ldr	r2, [r3, #16]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	695b      	ldr	r3, [r3, #20]
 80052ec:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	699b      	ldr	r3, [r3, #24]
 80052f4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	430a      	orrs	r2, r1
 80052fc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	69d9      	ldr	r1, [r3, #28]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a1a      	ldr	r2, [r3, #32]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	430a      	orrs	r2, r1
 800530c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f042 0201 	orr.w	r2, r2, #1
 800531c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2220      	movs	r2, #32
 8005328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	3708      	adds	r7, #8
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005354:	b2db      	uxtb	r3, r3
 8005356:	2b20      	cmp	r3, #32
 8005358:	d138      	bne.n	80053cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005360:	2b01      	cmp	r3, #1
 8005362:	d101      	bne.n	8005368 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005364:	2302      	movs	r3, #2
 8005366:	e032      	b.n	80053ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2224      	movs	r2, #36	; 0x24
 8005374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f022 0201 	bic.w	r2, r2, #1
 8005386:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005396:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	6819      	ldr	r1, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	683a      	ldr	r2, [r7, #0]
 80053a4:	430a      	orrs	r2, r1
 80053a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f042 0201 	orr.w	r2, r2, #1
 80053b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2220      	movs	r2, #32
 80053bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80053c8:	2300      	movs	r3, #0
 80053ca:	e000      	b.n	80053ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80053cc:	2302      	movs	r3, #2
  }
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	370c      	adds	r7, #12
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bc80      	pop	{r7}
 80053d6:	4770      	bx	lr

080053d8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80053d8:	b480      	push	{r7}
 80053da:	b085      	sub	sp, #20
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	2b20      	cmp	r3, #32
 80053ec:	d139      	bne.n	8005462 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d101      	bne.n	80053fc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80053f8:	2302      	movs	r3, #2
 80053fa:	e033      	b.n	8005464 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2224      	movs	r2, #36	; 0x24
 8005408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f022 0201 	bic.w	r2, r2, #1
 800541a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800542a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	021b      	lsls	r3, r3, #8
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	4313      	orrs	r3, r2
 8005434:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f042 0201 	orr.w	r2, r2, #1
 800544c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2220      	movs	r2, #32
 8005452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800545e:	2300      	movs	r3, #0
 8005460:	e000      	b.n	8005464 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005462:	2302      	movs	r3, #2
  }
}
 8005464:	4618      	mov	r0, r3
 8005466:	3714      	adds	r7, #20
 8005468:	46bd      	mov	sp, r7
 800546a:	bc80      	pop	{r7}
 800546c:	4770      	bx	lr
	...

08005470 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005470:	b480      	push	{r7}
 8005472:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005474:	4b04      	ldr	r3, [pc, #16]	; (8005488 <HAL_PWR_EnableBkUpAccess+0x18>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a03      	ldr	r2, [pc, #12]	; (8005488 <HAL_PWR_EnableBkUpAccess+0x18>)
 800547a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800547e:	6013      	str	r3, [r2, #0]
}
 8005480:	bf00      	nop
 8005482:	46bd      	mov	sp, r7
 8005484:	bc80      	pop	{r7}
 8005486:	4770      	bx	lr
 8005488:	58000400 	.word	0x58000400

0800548c <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	460b      	mov	r3, r1
 8005496:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d10c      	bne.n	80054b8 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800549e:	4b13      	ldr	r3, [pc, #76]	; (80054ec <HAL_PWR_EnterSLEEPMode+0x60>)
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054aa:	d10d      	bne.n	80054c8 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 80054ac:	f000 f83c 	bl	8005528 <HAL_PWREx_DisableLowPowerRunMode>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d008      	beq.n	80054c8 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 80054b6:	e015      	b.n	80054e4 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 80054b8:	4b0c      	ldr	r3, [pc, #48]	; (80054ec <HAL_PWR_EnterSLEEPMode+0x60>)
 80054ba:	695b      	ldr	r3, [r3, #20]
 80054bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d101      	bne.n	80054c8 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 80054c4:	f000 f822 	bl	800550c <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80054c8:	4b09      	ldr	r3, [pc, #36]	; (80054f0 <HAL_PWR_EnterSLEEPMode+0x64>)
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	4a08      	ldr	r2, [pc, #32]	; (80054f0 <HAL_PWR_EnterSLEEPMode+0x64>)
 80054ce:	f023 0304 	bic.w	r3, r3, #4
 80054d2:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80054d4:	78fb      	ldrb	r3, [r7, #3]
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d101      	bne.n	80054de <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80054da:	bf30      	wfi
 80054dc:	e002      	b.n	80054e4 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80054de:	bf40      	sev
    __WFE();
 80054e0:	bf20      	wfe
    __WFE();
 80054e2:	bf20      	wfe
  }
}
 80054e4:	3708      	adds	r7, #8
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	58000400 	.word	0x58000400
 80054f0:	e000ed00 	.word	0xe000ed00

080054f4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80054f4:	b480      	push	{r7}
 80054f6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80054f8:	4b03      	ldr	r3, [pc, #12]	; (8005508 <HAL_PWREx_GetVoltageRange+0x14>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8005500:	4618      	mov	r0, r3
 8005502:	46bd      	mov	sp, r7
 8005504:	bc80      	pop	{r7}
 8005506:	4770      	bx	lr
 8005508:	58000400 	.word	0x58000400

0800550c <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 800550c:	b480      	push	{r7}
 800550e:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8005510:	4b04      	ldr	r3, [pc, #16]	; (8005524 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a03      	ldr	r2, [pc, #12]	; (8005524 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8005516:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800551a:	6013      	str	r3, [r2, #0]
}
 800551c:	bf00      	nop
 800551e:	46bd      	mov	sp, r7
 8005520:	bc80      	pop	{r7}
 8005522:	4770      	bx	lr
 8005524:	58000400 	.word	0x58000400

08005528 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800552e:	4b16      	ldr	r3, [pc, #88]	; (8005588 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a15      	ldr	r2, [pc, #84]	; (8005588 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005534:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005538:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 800553a:	4b14      	ldr	r3, [pc, #80]	; (800558c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2232      	movs	r2, #50	; 0x32
 8005540:	fb02 f303 	mul.w	r3, r2, r3
 8005544:	4a12      	ldr	r2, [pc, #72]	; (8005590 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8005546:	fba2 2303 	umull	r2, r3, r2, r3
 800554a:	0c9b      	lsrs	r3, r3, #18
 800554c:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800554e:	e002      	b.n	8005556 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	3b01      	subs	r3, #1
 8005554:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005556:	4b0c      	ldr	r3, [pc, #48]	; (8005588 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005558:	695b      	ldr	r3, [r3, #20]
 800555a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800555e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005562:	d102      	bne.n	800556a <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d1f2      	bne.n	8005550 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800556a:	4b07      	ldr	r3, [pc, #28]	; (8005588 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 800556c:	695b      	ldr	r3, [r3, #20]
 800556e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005572:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005576:	d101      	bne.n	800557c <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8005578:	2303      	movs	r3, #3
 800557a:	e000      	b.n	800557e <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	370c      	adds	r7, #12
 8005582:	46bd      	mov	sp, r7
 8005584:	bc80      	pop	{r7}
 8005586:	4770      	bx	lr
 8005588:	58000400 	.word	0x58000400
 800558c:	20000000 	.word	0x20000000
 8005590:	431bde83 	.word	0x431bde83

08005594 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	4603      	mov	r3, r0
 800559c:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 800559e:	4b10      	ldr	r3, [pc, #64]	; (80055e0 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f023 0307 	bic.w	r3, r3, #7
 80055a6:	4a0e      	ldr	r2, [pc, #56]	; (80055e0 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80055a8:	f043 0302 	orr.w	r3, r3, #2
 80055ac:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80055ae:	4b0d      	ldr	r3, [pc, #52]	; (80055e4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	4a0c      	ldr	r2, [pc, #48]	; (80055e4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80055b4:	f043 0304 	orr.w	r3, r3, #4
 80055b8:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80055ba:	79fb      	ldrb	r3, [r7, #7]
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d101      	bne.n	80055c4 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80055c0:	bf30      	wfi
 80055c2:	e002      	b.n	80055ca <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80055c4:	bf40      	sev
    __WFE();
 80055c6:	bf20      	wfe
    __WFE();
 80055c8:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80055ca:	4b06      	ldr	r3, [pc, #24]	; (80055e4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	4a05      	ldr	r2, [pc, #20]	; (80055e4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80055d0:	f023 0304 	bic.w	r3, r3, #4
 80055d4:	6113      	str	r3, [r2, #16]
}
 80055d6:	bf00      	nop
 80055d8:	370c      	adds	r7, #12
 80055da:	46bd      	mov	sp, r7
 80055dc:	bc80      	pop	{r7}
 80055de:	4770      	bx	lr
 80055e0:	58000400 	.word	0x58000400
 80055e4:	e000ed00 	.word	0xe000ed00

080055e8 <LL_PWR_IsEnabledBkUpAccess>:
{
 80055e8:	b480      	push	{r7}
 80055ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80055ec:	4b06      	ldr	r3, [pc, #24]	; (8005608 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055f8:	d101      	bne.n	80055fe <LL_PWR_IsEnabledBkUpAccess+0x16>
 80055fa:	2301      	movs	r3, #1
 80055fc:	e000      	b.n	8005600 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	46bd      	mov	sp, r7
 8005604:	bc80      	pop	{r7}
 8005606:	4770      	bx	lr
 8005608:	58000400 	.word	0x58000400

0800560c <LL_RCC_HSE_EnableTcxo>:
{
 800560c:	b480      	push	{r7}
 800560e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005610:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800561a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800561e:	6013      	str	r3, [r2, #0]
}
 8005620:	bf00      	nop
 8005622:	46bd      	mov	sp, r7
 8005624:	bc80      	pop	{r7}
 8005626:	4770      	bx	lr

08005628 <LL_RCC_HSE_DisableTcxo>:
{
 8005628:	b480      	push	{r7}
 800562a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800562c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005636:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800563a:	6013      	str	r3, [r2, #0]
}
 800563c:	bf00      	nop
 800563e:	46bd      	mov	sp, r7
 8005640:	bc80      	pop	{r7}
 8005642:	4770      	bx	lr

08005644 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005644:	b480      	push	{r7}
 8005646:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005648:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005652:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005656:	d101      	bne.n	800565c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005658:	2301      	movs	r3, #1
 800565a:	e000      	b.n	800565e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	46bd      	mov	sp, r7
 8005662:	bc80      	pop	{r7}
 8005664:	4770      	bx	lr

08005666 <LL_RCC_HSE_Enable>:
{
 8005666:	b480      	push	{r7}
 8005668:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800566a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005678:	6013      	str	r3, [r2, #0]
}
 800567a:	bf00      	nop
 800567c:	46bd      	mov	sp, r7
 800567e:	bc80      	pop	{r7}
 8005680:	4770      	bx	lr

08005682 <LL_RCC_HSE_Disable>:
{
 8005682:	b480      	push	{r7}
 8005684:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005686:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005690:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005694:	6013      	str	r3, [r2, #0]
}
 8005696:	bf00      	nop
 8005698:	46bd      	mov	sp, r7
 800569a:	bc80      	pop	{r7}
 800569c:	4770      	bx	lr

0800569e <LL_RCC_HSE_IsReady>:
{
 800569e:	b480      	push	{r7}
 80056a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80056a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056b0:	d101      	bne.n	80056b6 <LL_RCC_HSE_IsReady+0x18>
 80056b2:	2301      	movs	r3, #1
 80056b4:	e000      	b.n	80056b8 <LL_RCC_HSE_IsReady+0x1a>
 80056b6:	2300      	movs	r3, #0
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bc80      	pop	{r7}
 80056be:	4770      	bx	lr

080056c0 <LL_RCC_HSI_Enable>:
{
 80056c0:	b480      	push	{r7}
 80056c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80056c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056d2:	6013      	str	r3, [r2, #0]
}
 80056d4:	bf00      	nop
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bc80      	pop	{r7}
 80056da:	4770      	bx	lr

080056dc <LL_RCC_HSI_Disable>:
{
 80056dc:	b480      	push	{r7}
 80056de:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80056e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056ee:	6013      	str	r3, [r2, #0]
}
 80056f0:	bf00      	nop
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bc80      	pop	{r7}
 80056f6:	4770      	bx	lr

080056f8 <LL_RCC_HSI_IsReady>:
{
 80056f8:	b480      	push	{r7}
 80056fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80056fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800570a:	d101      	bne.n	8005710 <LL_RCC_HSI_IsReady+0x18>
 800570c:	2301      	movs	r3, #1
 800570e:	e000      	b.n	8005712 <LL_RCC_HSI_IsReady+0x1a>
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	46bd      	mov	sp, r7
 8005716:	bc80      	pop	{r7}
 8005718:	4770      	bx	lr

0800571a <LL_RCC_HSI_SetCalibTrimming>:
{
 800571a:	b480      	push	{r7}
 800571c:	b083      	sub	sp, #12
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005722:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	061b      	lsls	r3, r3, #24
 8005730:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005734:	4313      	orrs	r3, r2
 8005736:	604b      	str	r3, [r1, #4]
}
 8005738:	bf00      	nop
 800573a:	370c      	adds	r7, #12
 800573c:	46bd      	mov	sp, r7
 800573e:	bc80      	pop	{r7}
 8005740:	4770      	bx	lr

08005742 <LL_RCC_LSE_IsReady>:
{
 8005742:	b480      	push	{r7}
 8005744:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005746:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800574a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800574e:	f003 0302 	and.w	r3, r3, #2
 8005752:	2b02      	cmp	r3, #2
 8005754:	d101      	bne.n	800575a <LL_RCC_LSE_IsReady+0x18>
 8005756:	2301      	movs	r3, #1
 8005758:	e000      	b.n	800575c <LL_RCC_LSE_IsReady+0x1a>
 800575a:	2300      	movs	r3, #0
}
 800575c:	4618      	mov	r0, r3
 800575e:	46bd      	mov	sp, r7
 8005760:	bc80      	pop	{r7}
 8005762:	4770      	bx	lr

08005764 <LL_RCC_LSI_Enable>:
{
 8005764:	b480      	push	{r7}
 8005766:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8005768:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800576c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005770:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005774:	f043 0301 	orr.w	r3, r3, #1
 8005778:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800577c:	bf00      	nop
 800577e:	46bd      	mov	sp, r7
 8005780:	bc80      	pop	{r7}
 8005782:	4770      	bx	lr

08005784 <LL_RCC_LSI_Disable>:
{
 8005784:	b480      	push	{r7}
 8005786:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005788:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800578c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005790:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005794:	f023 0301 	bic.w	r3, r3, #1
 8005798:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800579c:	bf00      	nop
 800579e:	46bd      	mov	sp, r7
 80057a0:	bc80      	pop	{r7}
 80057a2:	4770      	bx	lr

080057a4 <LL_RCC_LSI_IsReady>:
{
 80057a4:	b480      	push	{r7}
 80057a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80057a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057b0:	f003 0302 	and.w	r3, r3, #2
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d101      	bne.n	80057bc <LL_RCC_LSI_IsReady+0x18>
 80057b8:	2301      	movs	r3, #1
 80057ba:	e000      	b.n	80057be <LL_RCC_LSI_IsReady+0x1a>
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bc80      	pop	{r7}
 80057c4:	4770      	bx	lr

080057c6 <LL_RCC_MSI_Enable>:
{
 80057c6:	b480      	push	{r7}
 80057c8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80057ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057d4:	f043 0301 	orr.w	r3, r3, #1
 80057d8:	6013      	str	r3, [r2, #0]
}
 80057da:	bf00      	nop
 80057dc:	46bd      	mov	sp, r7
 80057de:	bc80      	pop	{r7}
 80057e0:	4770      	bx	lr

080057e2 <LL_RCC_MSI_Disable>:
{
 80057e2:	b480      	push	{r7}
 80057e4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80057e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057f0:	f023 0301 	bic.w	r3, r3, #1
 80057f4:	6013      	str	r3, [r2, #0]
}
 80057f6:	bf00      	nop
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bc80      	pop	{r7}
 80057fc:	4770      	bx	lr

080057fe <LL_RCC_MSI_IsReady>:
{
 80057fe:	b480      	push	{r7}
 8005800:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005802:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0302 	and.w	r3, r3, #2
 800580c:	2b02      	cmp	r3, #2
 800580e:	d101      	bne.n	8005814 <LL_RCC_MSI_IsReady+0x16>
 8005810:	2301      	movs	r3, #1
 8005812:	e000      	b.n	8005816 <LL_RCC_MSI_IsReady+0x18>
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	46bd      	mov	sp, r7
 800581a:	bc80      	pop	{r7}
 800581c:	4770      	bx	lr

0800581e <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 800581e:	b480      	push	{r7}
 8005820:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0308 	and.w	r3, r3, #8
 800582c:	2b08      	cmp	r3, #8
 800582e:	d101      	bne.n	8005834 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8005830:	2301      	movs	r3, #1
 8005832:	e000      	b.n	8005836 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	46bd      	mov	sp, r7
 800583a:	bc80      	pop	{r7}
 800583c:	4770      	bx	lr

0800583e <LL_RCC_MSI_GetRange>:
{
 800583e:	b480      	push	{r7}
 8005840:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8005842:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800584c:	4618      	mov	r0, r3
 800584e:	46bd      	mov	sp, r7
 8005850:	bc80      	pop	{r7}
 8005852:	4770      	bx	lr

08005854 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8005854:	b480      	push	{r7}
 8005856:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005858:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800585c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005860:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8005864:	4618      	mov	r0, r3
 8005866:	46bd      	mov	sp, r7
 8005868:	bc80      	pop	{r7}
 800586a:	4770      	bx	lr

0800586c <LL_RCC_MSI_SetCalibTrimming>:
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005874:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	021b      	lsls	r3, r3, #8
 8005882:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005886:	4313      	orrs	r3, r2
 8005888:	604b      	str	r3, [r1, #4]
}
 800588a:	bf00      	nop
 800588c:	370c      	adds	r7, #12
 800588e:	46bd      	mov	sp, r7
 8005890:	bc80      	pop	{r7}
 8005892:	4770      	bx	lr

08005894 <LL_RCC_SetSysClkSource>:
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800589c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	f023 0203 	bic.w	r2, r3, #3
 80058a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	608b      	str	r3, [r1, #8]
}
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bc80      	pop	{r7}
 80058b8:	4770      	bx	lr

080058ba <LL_RCC_GetSysClkSource>:
{
 80058ba:	b480      	push	{r7}
 80058bc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80058be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	f003 030c 	and.w	r3, r3, #12
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bc80      	pop	{r7}
 80058ce:	4770      	bx	lr

080058d0 <LL_RCC_SetAHBPrescaler>:
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80058d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	608b      	str	r3, [r1, #8]
}
 80058ec:	bf00      	nop
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bc80      	pop	{r7}
 80058f4:	4770      	bx	lr

080058f6 <LL_RCC_SetAHB3Prescaler>:
{
 80058f6:	b480      	push	{r7}
 80058f8:	b083      	sub	sp, #12
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80058fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005902:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005906:	f023 020f 	bic.w	r2, r3, #15
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	091b      	lsrs	r3, r3, #4
 800590e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005912:	4313      	orrs	r3, r2
 8005914:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005918:	bf00      	nop
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	bc80      	pop	{r7}
 8005920:	4770      	bx	lr

08005922 <LL_RCC_SetAPB1Prescaler>:
{
 8005922:	b480      	push	{r7}
 8005924:	b083      	sub	sp, #12
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800592a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005934:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4313      	orrs	r3, r2
 800593c:	608b      	str	r3, [r1, #8]
}
 800593e:	bf00      	nop
 8005940:	370c      	adds	r7, #12
 8005942:	46bd      	mov	sp, r7
 8005944:	bc80      	pop	{r7}
 8005946:	4770      	bx	lr

08005948 <LL_RCC_SetAPB2Prescaler>:
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005950:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800595a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4313      	orrs	r3, r2
 8005962:	608b      	str	r3, [r1, #8]
}
 8005964:	bf00      	nop
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	bc80      	pop	{r7}
 800596c:	4770      	bx	lr

0800596e <LL_RCC_GetAHBPrescaler>:
{
 800596e:	b480      	push	{r7}
 8005970:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005972:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800597c:	4618      	mov	r0, r3
 800597e:	46bd      	mov	sp, r7
 8005980:	bc80      	pop	{r7}
 8005982:	4770      	bx	lr

08005984 <LL_RCC_GetAHB3Prescaler>:
{
 8005984:	b480      	push	{r7}
 8005986:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005988:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800598c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005990:	011b      	lsls	r3, r3, #4
 8005992:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005996:	4618      	mov	r0, r3
 8005998:	46bd      	mov	sp, r7
 800599a:	bc80      	pop	{r7}
 800599c:	4770      	bx	lr

0800599e <LL_RCC_GetAPB1Prescaler>:
{
 800599e:	b480      	push	{r7}
 80059a0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80059a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bc80      	pop	{r7}
 80059b2:	4770      	bx	lr

080059b4 <LL_RCC_GetAPB2Prescaler>:
{
 80059b4:	b480      	push	{r7}
 80059b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80059b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bc80      	pop	{r7}
 80059c8:	4770      	bx	lr

080059ca <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80059ca:	b480      	push	{r7}
 80059cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80059ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059dc:	6013      	str	r3, [r2, #0]
}
 80059de:	bf00      	nop
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bc80      	pop	{r7}
 80059e4:	4770      	bx	lr

080059e6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80059e6:	b480      	push	{r7}
 80059e8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80059ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059f8:	6013      	str	r3, [r2, #0]
}
 80059fa:	bf00      	nop
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bc80      	pop	{r7}
 8005a00:	4770      	bx	lr

08005a02 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005a02:	b480      	push	{r7}
 8005a04:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005a06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a14:	d101      	bne.n	8005a1a <LL_RCC_PLL_IsReady+0x18>
 8005a16:	2301      	movs	r3, #1
 8005a18:	e000      	b.n	8005a1c <LL_RCC_PLL_IsReady+0x1a>
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bc80      	pop	{r7}
 8005a22:	4770      	bx	lr

08005a24 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005a24:	b480      	push	{r7}
 8005a26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005a28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	0a1b      	lsrs	r3, r3, #8
 8005a30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bc80      	pop	{r7}
 8005a3a:	4770      	bx	lr

08005a3c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005a40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bc80      	pop	{r7}
 8005a50:	4770      	bx	lr

08005a52 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005a52:	b480      	push	{r7}
 8005a54:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005a56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bc80      	pop	{r7}
 8005a66:	4770      	bx	lr

08005a68 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005a6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	f003 0303 	and.w	r3, r3, #3
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bc80      	pop	{r7}
 8005a7c:	4770      	bx	lr

08005a7e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005a7e:	b480      	push	{r7}
 8005a80:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005a82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a90:	d101      	bne.n	8005a96 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005a92:	2301      	movs	r3, #1
 8005a94:	e000      	b.n	8005a98 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bc80      	pop	{r7}
 8005a9e:	4770      	bx	lr

08005aa0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005aa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aa8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005aac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ab4:	d101      	bne.n	8005aba <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e000      	b.n	8005abc <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bc80      	pop	{r7}
 8005ac2:	4770      	bx	lr

08005ac4 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005ac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ad2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ad6:	d101      	bne.n	8005adc <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e000      	b.n	8005ade <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bc80      	pop	{r7}
 8005ae4:	4770      	bx	lr

08005ae6 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005aea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005af4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005af8:	d101      	bne.n	8005afe <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005afa:	2301      	movs	r3, #1
 8005afc:	e000      	b.n	8005b00 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bc80      	pop	{r7}
 8005b06:	4770      	bx	lr

08005b08 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b088      	sub	sp, #32
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d101      	bne.n	8005b1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e36f      	b.n	80061fa <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b1a:	f7ff fece 	bl	80058ba <LL_RCC_GetSysClkSource>
 8005b1e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b20:	f7ff ffa2 	bl	8005a68 <LL_RCC_PLL_GetMainSource>
 8005b24:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0320 	and.w	r3, r3, #32
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	f000 80c4 	beq.w	8005cbc <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d005      	beq.n	8005b46 <HAL_RCC_OscConfig+0x3e>
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	2b0c      	cmp	r3, #12
 8005b3e:	d176      	bne.n	8005c2e <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005b40:	69bb      	ldr	r3, [r7, #24]
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d173      	bne.n	8005c2e <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a1b      	ldr	r3, [r3, #32]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d101      	bne.n	8005b52 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e353      	b.n	80061fa <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0308 	and.w	r3, r3, #8
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d005      	beq.n	8005b70 <HAL_RCC_OscConfig+0x68>
 8005b64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b6e:	e006      	b.n	8005b7e <HAL_RCC_OscConfig+0x76>
 8005b70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b78:	091b      	lsrs	r3, r3, #4
 8005b7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d222      	bcs.n	8005bc8 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b86:	4618      	mov	r0, r3
 8005b88:	f000 fd3c 	bl	8006604 <RCC_SetFlashLatencyFromMSIRange>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d001      	beq.n	8005b96 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e331      	b.n	80061fa <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ba0:	f043 0308 	orr.w	r3, r3, #8
 8005ba4:	6013      	str	r3, [r2, #0]
 8005ba6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f7ff fe53 	bl	800586c <LL_RCC_MSI_SetCalibTrimming>
 8005bc6:	e021      	b.n	8005c0c <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005bc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bd2:	f043 0308 	orr.w	r3, r3, #8
 8005bd6:	6013      	str	r3, [r2, #0]
 8005bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bea:	4313      	orrs	r3, r2
 8005bec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7ff fe3a 	bl	800586c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f000 fd01 	bl	8006604 <RCC_SetFlashLatencyFromMSIRange>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d001      	beq.n	8005c0c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e2f6      	b.n	80061fa <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005c0c:	f000 fcc2 	bl	8006594 <HAL_RCC_GetHCLKFreq>
 8005c10:	4603      	mov	r3, r0
 8005c12:	4aa7      	ldr	r2, [pc, #668]	; (8005eb0 <HAL_RCC_OscConfig+0x3a8>)
 8005c14:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8005c16:	4ba7      	ldr	r3, [pc, #668]	; (8005eb4 <HAL_RCC_OscConfig+0x3ac>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f7fc faf2 	bl	8002204 <HAL_InitTick>
 8005c20:	4603      	mov	r3, r0
 8005c22:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8005c24:	7cfb      	ldrb	r3, [r7, #19]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d047      	beq.n	8005cba <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8005c2a:	7cfb      	ldrb	r3, [r7, #19]
 8005c2c:	e2e5      	b.n	80061fa <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a1b      	ldr	r3, [r3, #32]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d02c      	beq.n	8005c90 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005c36:	f7ff fdc6 	bl	80057c6 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005c3a:	f7fc faed 	bl	8002218 <HAL_GetTick>
 8005c3e:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005c40:	e008      	b.n	8005c54 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005c42:	f7fc fae9 	bl	8002218 <HAL_GetTick>
 8005c46:	4602      	mov	r2, r0
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	1ad3      	subs	r3, r2, r3
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	d901      	bls.n	8005c54 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8005c50:	2303      	movs	r3, #3
 8005c52:	e2d2      	b.n	80061fa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005c54:	f7ff fdd3 	bl	80057fe <LL_RCC_MSI_IsReady>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d0f1      	beq.n	8005c42 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c68:	f043 0308 	orr.w	r3, r3, #8
 8005c6c:	6013      	str	r3, [r2, #0]
 8005c6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c80:	4313      	orrs	r3, r2
 8005c82:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f7ff fdef 	bl	800586c <LL_RCC_MSI_SetCalibTrimming>
 8005c8e:	e015      	b.n	8005cbc <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005c90:	f7ff fda7 	bl	80057e2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005c94:	f7fc fac0 	bl	8002218 <HAL_GetTick>
 8005c98:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005c9a:	e008      	b.n	8005cae <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005c9c:	f7fc fabc 	bl	8002218 <HAL_GetTick>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	d901      	bls.n	8005cae <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e2a5      	b.n	80061fa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005cae:	f7ff fda6 	bl	80057fe <LL_RCC_MSI_IsReady>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d1f1      	bne.n	8005c9c <HAL_RCC_OscConfig+0x194>
 8005cb8:	e000      	b.n	8005cbc <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005cba:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 0301 	and.w	r3, r3, #1
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d058      	beq.n	8005d7a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	2b08      	cmp	r3, #8
 8005ccc:	d005      	beq.n	8005cda <HAL_RCC_OscConfig+0x1d2>
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	2b0c      	cmp	r3, #12
 8005cd2:	d108      	bne.n	8005ce6 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	2b03      	cmp	r3, #3
 8005cd8:	d105      	bne.n	8005ce6 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d14b      	bne.n	8005d7a <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e289      	b.n	80061fa <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8005ce6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d04:	d102      	bne.n	8005d0c <HAL_RCC_OscConfig+0x204>
 8005d06:	f7ff fcae 	bl	8005666 <LL_RCC_HSE_Enable>
 8005d0a:	e00d      	b.n	8005d28 <HAL_RCC_OscConfig+0x220>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8005d14:	d104      	bne.n	8005d20 <HAL_RCC_OscConfig+0x218>
 8005d16:	f7ff fc79 	bl	800560c <LL_RCC_HSE_EnableTcxo>
 8005d1a:	f7ff fca4 	bl	8005666 <LL_RCC_HSE_Enable>
 8005d1e:	e003      	b.n	8005d28 <HAL_RCC_OscConfig+0x220>
 8005d20:	f7ff fcaf 	bl	8005682 <LL_RCC_HSE_Disable>
 8005d24:	f7ff fc80 	bl	8005628 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d012      	beq.n	8005d56 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d30:	f7fc fa72 	bl	8002218 <HAL_GetTick>
 8005d34:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005d36:	e008      	b.n	8005d4a <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d38:	f7fc fa6e 	bl	8002218 <HAL_GetTick>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	2b64      	cmp	r3, #100	; 0x64
 8005d44:	d901      	bls.n	8005d4a <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e257      	b.n	80061fa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005d4a:	f7ff fca8 	bl	800569e <LL_RCC_HSE_IsReady>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d0f1      	beq.n	8005d38 <HAL_RCC_OscConfig+0x230>
 8005d54:	e011      	b.n	8005d7a <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d56:	f7fc fa5f 	bl	8002218 <HAL_GetTick>
 8005d5a:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005d5c:	e008      	b.n	8005d70 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d5e:	f7fc fa5b 	bl	8002218 <HAL_GetTick>
 8005d62:	4602      	mov	r2, r0
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	1ad3      	subs	r3, r2, r3
 8005d68:	2b64      	cmp	r3, #100	; 0x64
 8005d6a:	d901      	bls.n	8005d70 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8005d6c:	2303      	movs	r3, #3
 8005d6e:	e244      	b.n	80061fa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005d70:	f7ff fc95 	bl	800569e <LL_RCC_HSE_IsReady>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d1f1      	bne.n	8005d5e <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 0302 	and.w	r3, r3, #2
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d046      	beq.n	8005e14 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	2b04      	cmp	r3, #4
 8005d8a:	d005      	beq.n	8005d98 <HAL_RCC_OscConfig+0x290>
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	2b0c      	cmp	r3, #12
 8005d90:	d10e      	bne.n	8005db0 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	d10b      	bne.n	8005db0 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d101      	bne.n	8005da4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e22a      	b.n	80061fa <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	695b      	ldr	r3, [r3, #20]
 8005da8:	4618      	mov	r0, r3
 8005daa:	f7ff fcb6 	bl	800571a <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005dae:	e031      	b.n	8005e14 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	691b      	ldr	r3, [r3, #16]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d019      	beq.n	8005dec <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005db8:	f7ff fc82 	bl	80056c0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dbc:	f7fc fa2c 	bl	8002218 <HAL_GetTick>
 8005dc0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005dc2:	e008      	b.n	8005dd6 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005dc4:	f7fc fa28 	bl	8002218 <HAL_GetTick>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	1ad3      	subs	r3, r2, r3
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d901      	bls.n	8005dd6 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e211      	b.n	80061fa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005dd6:	f7ff fc8f 	bl	80056f8 <LL_RCC_HSI_IsReady>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d0f1      	beq.n	8005dc4 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	695b      	ldr	r3, [r3, #20]
 8005de4:	4618      	mov	r0, r3
 8005de6:	f7ff fc98 	bl	800571a <LL_RCC_HSI_SetCalibTrimming>
 8005dea:	e013      	b.n	8005e14 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005dec:	f7ff fc76 	bl	80056dc <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005df0:	f7fc fa12 	bl	8002218 <HAL_GetTick>
 8005df4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005df6:	e008      	b.n	8005e0a <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005df8:	f7fc fa0e 	bl	8002218 <HAL_GetTick>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d901      	bls.n	8005e0a <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8005e06:	2303      	movs	r3, #3
 8005e08:	e1f7      	b.n	80061fa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005e0a:	f7ff fc75 	bl	80056f8 <LL_RCC_HSI_IsReady>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d1f1      	bne.n	8005df8 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 0308 	and.w	r3, r3, #8
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d06e      	beq.n	8005efe <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	699b      	ldr	r3, [r3, #24]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d056      	beq.n	8005ed6 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8005e28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e30:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	69da      	ldr	r2, [r3, #28]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f003 0310 	and.w	r3, r3, #16
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d031      	beq.n	8005ea4 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f003 0302 	and.w	r3, r3, #2
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d006      	beq.n	8005e58 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d101      	bne.n	8005e58 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e1d0      	b.n	80061fa <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f003 0301 	and.w	r3, r3, #1
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d013      	beq.n	8005e8a <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8005e62:	f7ff fc8f 	bl	8005784 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005e66:	f7fc f9d7 	bl	8002218 <HAL_GetTick>
 8005e6a:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8005e6c:	e008      	b.n	8005e80 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e6e:	f7fc f9d3 	bl	8002218 <HAL_GetTick>
 8005e72:	4602      	mov	r2, r0
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	2b11      	cmp	r3, #17
 8005e7a:	d901      	bls.n	8005e80 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	e1bc      	b.n	80061fa <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8005e80:	f7ff fc90 	bl	80057a4 <LL_RCC_LSI_IsReady>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d1f1      	bne.n	8005e6e <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8005e8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e92:	f023 0210 	bic.w	r2, r3, #16
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	69db      	ldr	r3, [r3, #28]
 8005e9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ea4:	f7ff fc5e 	bl	8005764 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ea8:	f7fc f9b6 	bl	8002218 <HAL_GetTick>
 8005eac:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8005eae:	e00c      	b.n	8005eca <HAL_RCC_OscConfig+0x3c2>
 8005eb0:	20000000 	.word	0x20000000
 8005eb4:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005eb8:	f7fc f9ae 	bl	8002218 <HAL_GetTick>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	2b11      	cmp	r3, #17
 8005ec4:	d901      	bls.n	8005eca <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8005ec6:	2303      	movs	r3, #3
 8005ec8:	e197      	b.n	80061fa <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8005eca:	f7ff fc6b 	bl	80057a4 <LL_RCC_LSI_IsReady>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d0f1      	beq.n	8005eb8 <HAL_RCC_OscConfig+0x3b0>
 8005ed4:	e013      	b.n	8005efe <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ed6:	f7ff fc55 	bl	8005784 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005eda:	f7fc f99d 	bl	8002218 <HAL_GetTick>
 8005ede:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8005ee0:	e008      	b.n	8005ef4 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ee2:	f7fc f999 	bl	8002218 <HAL_GetTick>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	2b11      	cmp	r3, #17
 8005eee:	d901      	bls.n	8005ef4 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	e182      	b.n	80061fa <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8005ef4:	f7ff fc56 	bl	80057a4 <LL_RCC_LSI_IsReady>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d1f1      	bne.n	8005ee2 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 0304 	and.w	r3, r3, #4
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	f000 80d8 	beq.w	80060bc <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005f0c:	f7ff fb6c 	bl	80055e8 <LL_PWR_IsEnabledBkUpAccess>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d113      	bne.n	8005f3e <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005f16:	f7ff faab 	bl	8005470 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f1a:	f7fc f97d 	bl	8002218 <HAL_GetTick>
 8005f1e:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005f20:	e008      	b.n	8005f34 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f22:	f7fc f979 	bl	8002218 <HAL_GetTick>
 8005f26:	4602      	mov	r2, r0
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	1ad3      	subs	r3, r2, r3
 8005f2c:	2b02      	cmp	r3, #2
 8005f2e:	d901      	bls.n	8005f34 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8005f30:	2303      	movs	r3, #3
 8005f32:	e162      	b.n	80061fa <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005f34:	f7ff fb58 	bl	80055e8 <LL_PWR_IsEnabledBkUpAccess>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d0f1      	beq.n	8005f22 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d07b      	beq.n	800603e <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	2b85      	cmp	r3, #133	; 0x85
 8005f4c:	d003      	beq.n	8005f56 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	2b05      	cmp	r3, #5
 8005f54:	d109      	bne.n	8005f6a <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005f56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f62:	f043 0304 	orr.w	r3, r3, #4
 8005f66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f6a:	f7fc f955 	bl	8002218 <HAL_GetTick>
 8005f6e:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005f70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f7c:	f043 0301 	orr.w	r3, r3, #1
 8005f80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005f84:	e00a      	b.n	8005f9c <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f86:	f7fc f947 	bl	8002218 <HAL_GetTick>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	1ad3      	subs	r3, r2, r3
 8005f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d901      	bls.n	8005f9c <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	e12e      	b.n	80061fa <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005f9c:	f7ff fbd1 	bl	8005742 <LL_RCC_LSE_IsReady>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d0ef      	beq.n	8005f86 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	2b81      	cmp	r3, #129	; 0x81
 8005fac:	d003      	beq.n	8005fb6 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	2b85      	cmp	r3, #133	; 0x85
 8005fb4:	d121      	bne.n	8005ffa <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fb6:	f7fc f92f 	bl	8002218 <HAL_GetTick>
 8005fba:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005fd0:	e00a      	b.n	8005fe8 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fd2:	f7fc f921 	bl	8002218 <HAL_GetTick>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d901      	bls.n	8005fe8 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e108      	b.n	80061fa <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005fe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ff0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d0ec      	beq.n	8005fd2 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005ff8:	e060      	b.n	80060bc <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ffa:	f7fc f90d 	bl	8002218 <HAL_GetTick>
 8005ffe:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006000:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006008:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800600c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006010:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006014:	e00a      	b.n	800602c <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006016:	f7fc f8ff 	bl	8002218 <HAL_GetTick>
 800601a:	4602      	mov	r2, r0
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	1ad3      	subs	r3, r2, r3
 8006020:	f241 3288 	movw	r2, #5000	; 0x1388
 8006024:	4293      	cmp	r3, r2
 8006026:	d901      	bls.n	800602c <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8006028:	2303      	movs	r3, #3
 800602a:	e0e6      	b.n	80061fa <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800602c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006034:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006038:	2b00      	cmp	r3, #0
 800603a:	d1ec      	bne.n	8006016 <HAL_RCC_OscConfig+0x50e>
 800603c:	e03e      	b.n	80060bc <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800603e:	f7fc f8eb 	bl	8002218 <HAL_GetTick>
 8006042:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800604c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006050:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006054:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006058:	e00a      	b.n	8006070 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800605a:	f7fc f8dd 	bl	8002218 <HAL_GetTick>
 800605e:	4602      	mov	r2, r0
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	1ad3      	subs	r3, r2, r3
 8006064:	f241 3288 	movw	r2, #5000	; 0x1388
 8006068:	4293      	cmp	r3, r2
 800606a:	d901      	bls.n	8006070 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	e0c4      	b.n	80061fa <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006070:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006078:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800607c:	2b00      	cmp	r3, #0
 800607e:	d1ec      	bne.n	800605a <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006080:	f7fc f8ca 	bl	8002218 <HAL_GetTick>
 8006084:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800608a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800608e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006092:	f023 0301 	bic.w	r3, r3, #1
 8006096:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800609a:	e00a      	b.n	80060b2 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800609c:	f7fc f8bc 	bl	8002218 <HAL_GetTick>
 80060a0:	4602      	mov	r2, r0
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	1ad3      	subs	r3, r2, r3
 80060a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d901      	bls.n	80060b2 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	e0a3      	b.n	80061fa <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 80060b2:	f7ff fb46 	bl	8005742 <LL_RCC_LSE_IsReady>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d1ef      	bne.n	800609c <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	f000 8099 	beq.w	80061f8 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	2b0c      	cmp	r3, #12
 80060ca:	d06c      	beq.n	80061a6 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d14b      	bne.n	800616c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060d4:	f7ff fc87 	bl	80059e6 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060d8:	f7fc f89e 	bl	8002218 <HAL_GetTick>
 80060dc:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80060de:	e008      	b.n	80060f2 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060e0:	f7fc f89a 	bl	8002218 <HAL_GetTick>
 80060e4:	4602      	mov	r2, r0
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	2b0a      	cmp	r3, #10
 80060ec:	d901      	bls.n	80060f2 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	e083      	b.n	80061fa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80060f2:	f7ff fc86 	bl	8005a02 <LL_RCC_PLL_IsReady>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d1f1      	bne.n	80060e0 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80060fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006100:	68da      	ldr	r2, [r3, #12]
 8006102:	4b40      	ldr	r3, [pc, #256]	; (8006204 <HAL_RCC_OscConfig+0x6fc>)
 8006104:	4013      	ands	r3, r2
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800610e:	4311      	orrs	r1, r2
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006114:	0212      	lsls	r2, r2, #8
 8006116:	4311      	orrs	r1, r2
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800611c:	4311      	orrs	r1, r2
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006122:	4311      	orrs	r1, r2
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006128:	430a      	orrs	r2, r1
 800612a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800612e:	4313      	orrs	r3, r2
 8006130:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006132:	f7ff fc4a 	bl	80059ca <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006136:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006144:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006146:	f7fc f867 	bl	8002218 <HAL_GetTick>
 800614a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800614c:	e008      	b.n	8006160 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800614e:	f7fc f863 	bl	8002218 <HAL_GetTick>
 8006152:	4602      	mov	r2, r0
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	2b0a      	cmp	r3, #10
 800615a:	d901      	bls.n	8006160 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 800615c:	2303      	movs	r3, #3
 800615e:	e04c      	b.n	80061fa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8006160:	f7ff fc4f 	bl	8005a02 <LL_RCC_PLL_IsReady>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d0f1      	beq.n	800614e <HAL_RCC_OscConfig+0x646>
 800616a:	e045      	b.n	80061f8 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800616c:	f7ff fc3b 	bl	80059e6 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006170:	f7fc f852 	bl	8002218 <HAL_GetTick>
 8006174:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8006176:	e008      	b.n	800618a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006178:	f7fc f84e 	bl	8002218 <HAL_GetTick>
 800617c:	4602      	mov	r2, r0
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	2b0a      	cmp	r3, #10
 8006184:	d901      	bls.n	800618a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	e037      	b.n	80061fa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800618a:	f7ff fc3a 	bl	8005a02 <LL_RCC_PLL_IsReady>
 800618e:	4603      	mov	r3, r0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d1f1      	bne.n	8006178 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8006194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006198:	68da      	ldr	r2, [r3, #12]
 800619a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800619e:	4b1a      	ldr	r3, [pc, #104]	; (8006208 <HAL_RCC_OscConfig+0x700>)
 80061a0:	4013      	ands	r3, r2
 80061a2:	60cb      	str	r3, [r1, #12]
 80061a4:	e028      	b.n	80061f8 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d101      	bne.n	80061b2 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	e023      	b.n	80061fa <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80061b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	f003 0203 	and.w	r2, r3, #3
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d115      	bne.n	80061f4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d10e      	bne.n	80061f4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e0:	021b      	lsls	r3, r3, #8
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d106      	bne.n	80061f4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d001      	beq.n	80061f8 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e000      	b.n	80061fa <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 80061f8:	2300      	movs	r3, #0
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3720      	adds	r7, #32
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	11c1808c 	.word	0x11c1808c
 8006208:	eefefffc 	.word	0xeefefffc

0800620c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d101      	bne.n	8006220 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	e10f      	b.n	8006440 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006220:	4b89      	ldr	r3, [pc, #548]	; (8006448 <HAL_RCC_ClockConfig+0x23c>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 0307 	and.w	r3, r3, #7
 8006228:	683a      	ldr	r2, [r7, #0]
 800622a:	429a      	cmp	r2, r3
 800622c:	d91b      	bls.n	8006266 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800622e:	4b86      	ldr	r3, [pc, #536]	; (8006448 <HAL_RCC_ClockConfig+0x23c>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f023 0207 	bic.w	r2, r3, #7
 8006236:	4984      	ldr	r1, [pc, #528]	; (8006448 <HAL_RCC_ClockConfig+0x23c>)
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	4313      	orrs	r3, r2
 800623c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800623e:	f7fb ffeb 	bl	8002218 <HAL_GetTick>
 8006242:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006244:	e008      	b.n	8006258 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006246:	f7fb ffe7 	bl	8002218 <HAL_GetTick>
 800624a:	4602      	mov	r2, r0
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	1ad3      	subs	r3, r2, r3
 8006250:	2b02      	cmp	r3, #2
 8006252:	d901      	bls.n	8006258 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8006254:	2303      	movs	r3, #3
 8006256:	e0f3      	b.n	8006440 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006258:	4b7b      	ldr	r3, [pc, #492]	; (8006448 <HAL_RCC_ClockConfig+0x23c>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 0307 	and.w	r3, r3, #7
 8006260:	683a      	ldr	r2, [r7, #0]
 8006262:	429a      	cmp	r2, r3
 8006264:	d1ef      	bne.n	8006246 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f003 0302 	and.w	r3, r3, #2
 800626e:	2b00      	cmp	r3, #0
 8006270:	d016      	beq.n	80062a0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	4618      	mov	r0, r3
 8006278:	f7ff fb2a 	bl	80058d0 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800627c:	f7fb ffcc 	bl	8002218 <HAL_GetTick>
 8006280:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006282:	e008      	b.n	8006296 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006284:	f7fb ffc8 	bl	8002218 <HAL_GetTick>
 8006288:	4602      	mov	r2, r0
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	1ad3      	subs	r3, r2, r3
 800628e:	2b02      	cmp	r3, #2
 8006290:	d901      	bls.n	8006296 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8006292:	2303      	movs	r3, #3
 8006294:	e0d4      	b.n	8006440 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006296:	f7ff fbf2 	bl	8005a7e <LL_RCC_IsActiveFlag_HPRE>
 800629a:	4603      	mov	r3, r0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d0f1      	beq.n	8006284 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d016      	beq.n	80062da <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	695b      	ldr	r3, [r3, #20]
 80062b0:	4618      	mov	r0, r3
 80062b2:	f7ff fb20 	bl	80058f6 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80062b6:	f7fb ffaf 	bl	8002218 <HAL_GetTick>
 80062ba:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80062bc:	e008      	b.n	80062d0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80062be:	f7fb ffab 	bl	8002218 <HAL_GetTick>
 80062c2:	4602      	mov	r2, r0
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	1ad3      	subs	r3, r2, r3
 80062c8:	2b02      	cmp	r3, #2
 80062ca:	d901      	bls.n	80062d0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80062cc:	2303      	movs	r3, #3
 80062ce:	e0b7      	b.n	8006440 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80062d0:	f7ff fbe6 	bl	8005aa0 <LL_RCC_IsActiveFlag_SHDHPRE>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d0f1      	beq.n	80062be <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 0304 	and.w	r3, r3, #4
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d016      	beq.n	8006314 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	68db      	ldr	r3, [r3, #12]
 80062ea:	4618      	mov	r0, r3
 80062ec:	f7ff fb19 	bl	8005922 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80062f0:	f7fb ff92 	bl	8002218 <HAL_GetTick>
 80062f4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80062f6:	e008      	b.n	800630a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80062f8:	f7fb ff8e 	bl	8002218 <HAL_GetTick>
 80062fc:	4602      	mov	r2, r0
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	2b02      	cmp	r3, #2
 8006304:	d901      	bls.n	800630a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8006306:	2303      	movs	r3, #3
 8006308:	e09a      	b.n	8006440 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800630a:	f7ff fbdb 	bl	8005ac4 <LL_RCC_IsActiveFlag_PPRE1>
 800630e:	4603      	mov	r3, r0
 8006310:	2b00      	cmp	r3, #0
 8006312:	d0f1      	beq.n	80062f8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 0308 	and.w	r3, r3, #8
 800631c:	2b00      	cmp	r3, #0
 800631e:	d017      	beq.n	8006350 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	00db      	lsls	r3, r3, #3
 8006326:	4618      	mov	r0, r3
 8006328:	f7ff fb0e 	bl	8005948 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800632c:	f7fb ff74 	bl	8002218 <HAL_GetTick>
 8006330:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006332:	e008      	b.n	8006346 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006334:	f7fb ff70 	bl	8002218 <HAL_GetTick>
 8006338:	4602      	mov	r2, r0
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	2b02      	cmp	r3, #2
 8006340:	d901      	bls.n	8006346 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	e07c      	b.n	8006440 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006346:	f7ff fbce 	bl	8005ae6 <LL_RCC_IsActiveFlag_PPRE2>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d0f1      	beq.n	8006334 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 0301 	and.w	r3, r3, #1
 8006358:	2b00      	cmp	r3, #0
 800635a:	d043      	beq.n	80063e4 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	2b02      	cmp	r3, #2
 8006362:	d106      	bne.n	8006372 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8006364:	f7ff f99b 	bl	800569e <LL_RCC_HSE_IsReady>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d11e      	bne.n	80063ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e066      	b.n	8006440 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	2b03      	cmp	r3, #3
 8006378:	d106      	bne.n	8006388 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800637a:	f7ff fb42 	bl	8005a02 <LL_RCC_PLL_IsReady>
 800637e:	4603      	mov	r3, r0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d113      	bne.n	80063ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	e05b      	b.n	8006440 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d106      	bne.n	800639e <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006390:	f7ff fa35 	bl	80057fe <LL_RCC_MSI_IsReady>
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d108      	bne.n	80063ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e050      	b.n	8006440 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800639e:	f7ff f9ab 	bl	80056f8 <LL_RCC_HSI_IsReady>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d101      	bne.n	80063ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	e049      	b.n	8006440 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	4618      	mov	r0, r3
 80063b2:	f7ff fa6f 	bl	8005894 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80063b6:	f7fb ff2f 	bl	8002218 <HAL_GetTick>
 80063ba:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063bc:	e00a      	b.n	80063d4 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063be:	f7fb ff2b 	bl	8002218 <HAL_GetTick>
 80063c2:	4602      	mov	r2, r0
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d901      	bls.n	80063d4 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 80063d0:	2303      	movs	r3, #3
 80063d2:	e035      	b.n	8006440 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063d4:	f7ff fa71 	bl	80058ba <LL_RCC_GetSysClkSource>
 80063d8:	4602      	mov	r2, r0
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d1ec      	bne.n	80063be <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80063e4:	4b18      	ldr	r3, [pc, #96]	; (8006448 <HAL_RCC_ClockConfig+0x23c>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 0307 	and.w	r3, r3, #7
 80063ec:	683a      	ldr	r2, [r7, #0]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d21b      	bcs.n	800642a <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063f2:	4b15      	ldr	r3, [pc, #84]	; (8006448 <HAL_RCC_ClockConfig+0x23c>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f023 0207 	bic.w	r2, r3, #7
 80063fa:	4913      	ldr	r1, [pc, #76]	; (8006448 <HAL_RCC_ClockConfig+0x23c>)
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	4313      	orrs	r3, r2
 8006400:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006402:	f7fb ff09 	bl	8002218 <HAL_GetTick>
 8006406:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006408:	e008      	b.n	800641c <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800640a:	f7fb ff05 	bl	8002218 <HAL_GetTick>
 800640e:	4602      	mov	r2, r0
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	1ad3      	subs	r3, r2, r3
 8006414:	2b02      	cmp	r3, #2
 8006416:	d901      	bls.n	800641c <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8006418:	2303      	movs	r3, #3
 800641a:	e011      	b.n	8006440 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800641c:	4b0a      	ldr	r3, [pc, #40]	; (8006448 <HAL_RCC_ClockConfig+0x23c>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 0307 	and.w	r3, r3, #7
 8006424:	683a      	ldr	r2, [r7, #0]
 8006426:	429a      	cmp	r2, r3
 8006428:	d1ef      	bne.n	800640a <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800642a:	f000 f8b3 	bl	8006594 <HAL_RCC_GetHCLKFreq>
 800642e:	4603      	mov	r3, r0
 8006430:	4a06      	ldr	r2, [pc, #24]	; (800644c <HAL_RCC_ClockConfig+0x240>)
 8006432:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8006434:	4b06      	ldr	r3, [pc, #24]	; (8006450 <HAL_RCC_ClockConfig+0x244>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4618      	mov	r0, r3
 800643a:	f7fb fee3 	bl	8002204 <HAL_InitTick>
 800643e:	4603      	mov	r3, r0
}
 8006440:	4618      	mov	r0, r3
 8006442:	3710      	adds	r7, #16
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}
 8006448:	58004000 	.word	0x58004000
 800644c:	20000000 	.word	0x20000000
 8006450:	20000004 	.word	0x20000004

08006454 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006454:	b590      	push	{r4, r7, lr}
 8006456:	b087      	sub	sp, #28
 8006458:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800645a:	2300      	movs	r3, #0
 800645c:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800645e:	2300      	movs	r3, #0
 8006460:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006462:	f7ff fa2a 	bl	80058ba <LL_RCC_GetSysClkSource>
 8006466:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006468:	f7ff fafe 	bl	8005a68 <LL_RCC_PLL_GetMainSource>
 800646c:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d005      	beq.n	8006480 <HAL_RCC_GetSysClockFreq+0x2c>
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	2b0c      	cmp	r3, #12
 8006478:	d139      	bne.n	80064ee <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2b01      	cmp	r3, #1
 800647e:	d136      	bne.n	80064ee <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006480:	f7ff f9cd 	bl	800581e <LL_RCC_MSI_IsEnabledRangeSelect>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d115      	bne.n	80064b6 <HAL_RCC_GetSysClockFreq+0x62>
 800648a:	f7ff f9c8 	bl	800581e <LL_RCC_MSI_IsEnabledRangeSelect>
 800648e:	4603      	mov	r3, r0
 8006490:	2b01      	cmp	r3, #1
 8006492:	d106      	bne.n	80064a2 <HAL_RCC_GetSysClockFreq+0x4e>
 8006494:	f7ff f9d3 	bl	800583e <LL_RCC_MSI_GetRange>
 8006498:	4603      	mov	r3, r0
 800649a:	0a1b      	lsrs	r3, r3, #8
 800649c:	f003 030f 	and.w	r3, r3, #15
 80064a0:	e005      	b.n	80064ae <HAL_RCC_GetSysClockFreq+0x5a>
 80064a2:	f7ff f9d7 	bl	8005854 <LL_RCC_MSI_GetRangeAfterStandby>
 80064a6:	4603      	mov	r3, r0
 80064a8:	0a1b      	lsrs	r3, r3, #8
 80064aa:	f003 030f 	and.w	r3, r3, #15
 80064ae:	4a36      	ldr	r2, [pc, #216]	; (8006588 <HAL_RCC_GetSysClockFreq+0x134>)
 80064b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064b4:	e014      	b.n	80064e0 <HAL_RCC_GetSysClockFreq+0x8c>
 80064b6:	f7ff f9b2 	bl	800581e <LL_RCC_MSI_IsEnabledRangeSelect>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d106      	bne.n	80064ce <HAL_RCC_GetSysClockFreq+0x7a>
 80064c0:	f7ff f9bd 	bl	800583e <LL_RCC_MSI_GetRange>
 80064c4:	4603      	mov	r3, r0
 80064c6:	091b      	lsrs	r3, r3, #4
 80064c8:	f003 030f 	and.w	r3, r3, #15
 80064cc:	e005      	b.n	80064da <HAL_RCC_GetSysClockFreq+0x86>
 80064ce:	f7ff f9c1 	bl	8005854 <LL_RCC_MSI_GetRangeAfterStandby>
 80064d2:	4603      	mov	r3, r0
 80064d4:	091b      	lsrs	r3, r3, #4
 80064d6:	f003 030f 	and.w	r3, r3, #15
 80064da:	4a2b      	ldr	r2, [pc, #172]	; (8006588 <HAL_RCC_GetSysClockFreq+0x134>)
 80064dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064e0:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d115      	bne.n	8006514 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80064ec:	e012      	b.n	8006514 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	2b04      	cmp	r3, #4
 80064f2:	d102      	bne.n	80064fa <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80064f4:	4b25      	ldr	r3, [pc, #148]	; (800658c <HAL_RCC_GetSysClockFreq+0x138>)
 80064f6:	617b      	str	r3, [r7, #20]
 80064f8:	e00c      	b.n	8006514 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	2b08      	cmp	r3, #8
 80064fe:	d109      	bne.n	8006514 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006500:	f7ff f8a0 	bl	8005644 <LL_RCC_HSE_IsEnabledDiv2>
 8006504:	4603      	mov	r3, r0
 8006506:	2b01      	cmp	r3, #1
 8006508:	d102      	bne.n	8006510 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800650a:	4b20      	ldr	r3, [pc, #128]	; (800658c <HAL_RCC_GetSysClockFreq+0x138>)
 800650c:	617b      	str	r3, [r7, #20]
 800650e:	e001      	b.n	8006514 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006510:	4b1f      	ldr	r3, [pc, #124]	; (8006590 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006512:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006514:	f7ff f9d1 	bl	80058ba <LL_RCC_GetSysClkSource>
 8006518:	4603      	mov	r3, r0
 800651a:	2b0c      	cmp	r3, #12
 800651c:	d12f      	bne.n	800657e <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800651e:	f7ff faa3 	bl	8005a68 <LL_RCC_PLL_GetMainSource>
 8006522:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2b02      	cmp	r3, #2
 8006528:	d003      	beq.n	8006532 <HAL_RCC_GetSysClockFreq+0xde>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2b03      	cmp	r3, #3
 800652e:	d003      	beq.n	8006538 <HAL_RCC_GetSysClockFreq+0xe4>
 8006530:	e00d      	b.n	800654e <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006532:	4b16      	ldr	r3, [pc, #88]	; (800658c <HAL_RCC_GetSysClockFreq+0x138>)
 8006534:	60fb      	str	r3, [r7, #12]
        break;
 8006536:	e00d      	b.n	8006554 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006538:	f7ff f884 	bl	8005644 <LL_RCC_HSE_IsEnabledDiv2>
 800653c:	4603      	mov	r3, r0
 800653e:	2b01      	cmp	r3, #1
 8006540:	d102      	bne.n	8006548 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006542:	4b12      	ldr	r3, [pc, #72]	; (800658c <HAL_RCC_GetSysClockFreq+0x138>)
 8006544:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006546:	e005      	b.n	8006554 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8006548:	4b11      	ldr	r3, [pc, #68]	; (8006590 <HAL_RCC_GetSysClockFreq+0x13c>)
 800654a:	60fb      	str	r3, [r7, #12]
        break;
 800654c:	e002      	b.n	8006554 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	60fb      	str	r3, [r7, #12]
        break;
 8006552:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8006554:	f7ff fa66 	bl	8005a24 <LL_RCC_PLL_GetN>
 8006558:	4602      	mov	r2, r0
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	fb03 f402 	mul.w	r4, r3, r2
 8006560:	f7ff fa77 	bl	8005a52 <LL_RCC_PLL_GetDivider>
 8006564:	4603      	mov	r3, r0
 8006566:	091b      	lsrs	r3, r3, #4
 8006568:	3301      	adds	r3, #1
 800656a:	fbb4 f4f3 	udiv	r4, r4, r3
 800656e:	f7ff fa65 	bl	8005a3c <LL_RCC_PLL_GetR>
 8006572:	4603      	mov	r3, r0
 8006574:	0f5b      	lsrs	r3, r3, #29
 8006576:	3301      	adds	r3, #1
 8006578:	fbb4 f3f3 	udiv	r3, r4, r3
 800657c:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800657e:	697b      	ldr	r3, [r7, #20]
}
 8006580:	4618      	mov	r0, r3
 8006582:	371c      	adds	r7, #28
 8006584:	46bd      	mov	sp, r7
 8006586:	bd90      	pop	{r4, r7, pc}
 8006588:	0801e55c 	.word	0x0801e55c
 800658c:	00f42400 	.word	0x00f42400
 8006590:	01e84800 	.word	0x01e84800

08006594 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006594:	b598      	push	{r3, r4, r7, lr}
 8006596:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006598:	f7ff ff5c 	bl	8006454 <HAL_RCC_GetSysClockFreq>
 800659c:	4604      	mov	r4, r0
 800659e:	f7ff f9e6 	bl	800596e <LL_RCC_GetAHBPrescaler>
 80065a2:	4603      	mov	r3, r0
 80065a4:	091b      	lsrs	r3, r3, #4
 80065a6:	f003 030f 	and.w	r3, r3, #15
 80065aa:	4a03      	ldr	r2, [pc, #12]	; (80065b8 <HAL_RCC_GetHCLKFreq+0x24>)
 80065ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065b0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	bd98      	pop	{r3, r4, r7, pc}
 80065b8:	0801e4fc 	.word	0x0801e4fc

080065bc <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065bc:	b598      	push	{r3, r4, r7, lr}
 80065be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80065c0:	f7ff ffe8 	bl	8006594 <HAL_RCC_GetHCLKFreq>
 80065c4:	4604      	mov	r4, r0
 80065c6:	f7ff f9ea 	bl	800599e <LL_RCC_GetAPB1Prescaler>
 80065ca:	4603      	mov	r3, r0
 80065cc:	0a1b      	lsrs	r3, r3, #8
 80065ce:	4a03      	ldr	r2, [pc, #12]	; (80065dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80065d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065d4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80065d8:	4618      	mov	r0, r3
 80065da:	bd98      	pop	{r3, r4, r7, pc}
 80065dc:	0801e53c 	.word	0x0801e53c

080065e0 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80065e0:	b598      	push	{r3, r4, r7, lr}
 80065e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80065e4:	f7ff ffd6 	bl	8006594 <HAL_RCC_GetHCLKFreq>
 80065e8:	4604      	mov	r4, r0
 80065ea:	f7ff f9e3 	bl	80059b4 <LL_RCC_GetAPB2Prescaler>
 80065ee:	4603      	mov	r3, r0
 80065f0:	0adb      	lsrs	r3, r3, #11
 80065f2:	4a03      	ldr	r2, [pc, #12]	; (8006600 <HAL_RCC_GetPCLK2Freq+0x20>)
 80065f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065f8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	bd98      	pop	{r3, r4, r7, pc}
 8006600:	0801e53c 	.word	0x0801e53c

08006604 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006604:	b590      	push	{r4, r7, lr}
 8006606:	b085      	sub	sp, #20
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	091b      	lsrs	r3, r3, #4
 8006610:	f003 030f 	and.w	r3, r3, #15
 8006614:	4a10      	ldr	r2, [pc, #64]	; (8006658 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8006616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800661a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 800661c:	f7ff f9b2 	bl	8005984 <LL_RCC_GetAHB3Prescaler>
 8006620:	4603      	mov	r3, r0
 8006622:	091b      	lsrs	r3, r3, #4
 8006624:	f003 030f 	and.w	r3, r3, #15
 8006628:	4a0c      	ldr	r2, [pc, #48]	; (800665c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800662a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	fbb2 f3f3 	udiv	r3, r2, r3
 8006634:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	4a09      	ldr	r2, [pc, #36]	; (8006660 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800663a:	fba2 2303 	umull	r2, r3, r2, r3
 800663e:	0c9c      	lsrs	r4, r3, #18
 8006640:	f7fe ff58 	bl	80054f4 <HAL_PWREx_GetVoltageRange>
 8006644:	4603      	mov	r3, r0
 8006646:	4619      	mov	r1, r3
 8006648:	4620      	mov	r0, r4
 800664a:	f000 f80b 	bl	8006664 <RCC_SetFlashLatency>
 800664e:	4603      	mov	r3, r0
}
 8006650:	4618      	mov	r0, r3
 8006652:	3714      	adds	r7, #20
 8006654:	46bd      	mov	sp, r7
 8006656:	bd90      	pop	{r4, r7, pc}
 8006658:	0801e55c 	.word	0x0801e55c
 800665c:	0801e4fc 	.word	0x0801e4fc
 8006660:	431bde83 	.word	0x431bde83

08006664 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b08e      	sub	sp, #56	; 0x38
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800666e:	4a3a      	ldr	r2, [pc, #232]	; (8006758 <RCC_SetFlashLatency+0xf4>)
 8006670:	f107 0320 	add.w	r3, r7, #32
 8006674:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006678:	6018      	str	r0, [r3, #0]
 800667a:	3304      	adds	r3, #4
 800667c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800667e:	4a37      	ldr	r2, [pc, #220]	; (800675c <RCC_SetFlashLatency+0xf8>)
 8006680:	f107 0318 	add.w	r3, r7, #24
 8006684:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006688:	6018      	str	r0, [r3, #0]
 800668a:	3304      	adds	r3, #4
 800668c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800668e:	4a34      	ldr	r2, [pc, #208]	; (8006760 <RCC_SetFlashLatency+0xfc>)
 8006690:	f107 030c 	add.w	r3, r7, #12
 8006694:	ca07      	ldmia	r2, {r0, r1, r2}
 8006696:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800669a:	2300      	movs	r3, #0
 800669c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066a4:	d11b      	bne.n	80066de <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80066a6:	2300      	movs	r3, #0
 80066a8:	633b      	str	r3, [r7, #48]	; 0x30
 80066aa:	e014      	b.n	80066d6 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80066ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ae:	005b      	lsls	r3, r3, #1
 80066b0:	3338      	adds	r3, #56	; 0x38
 80066b2:	443b      	add	r3, r7
 80066b4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80066b8:	461a      	mov	r2, r3
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4293      	cmp	r3, r2
 80066be:	d807      	bhi.n	80066d0 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80066c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	3338      	adds	r3, #56	; 0x38
 80066c6:	443b      	add	r3, r7
 80066c8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80066cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066ce:	e021      	b.n	8006714 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80066d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d2:	3301      	adds	r3, #1
 80066d4:	633b      	str	r3, [r7, #48]	; 0x30
 80066d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d8:	2b02      	cmp	r3, #2
 80066da:	d9e7      	bls.n	80066ac <RCC_SetFlashLatency+0x48>
 80066dc:	e01a      	b.n	8006714 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80066de:	2300      	movs	r3, #0
 80066e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066e2:	e014      	b.n	800670e <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80066e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e6:	005b      	lsls	r3, r3, #1
 80066e8:	3338      	adds	r3, #56	; 0x38
 80066ea:	443b      	add	r3, r7
 80066ec:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80066f0:	461a      	mov	r2, r3
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d807      	bhi.n	8006708 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80066f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	3338      	adds	r3, #56	; 0x38
 80066fe:	443b      	add	r3, r7
 8006700:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006704:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006706:	e005      	b.n	8006714 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800670a:	3301      	adds	r3, #1
 800670c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800670e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006710:	2b02      	cmp	r3, #2
 8006712:	d9e7      	bls.n	80066e4 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006714:	4b13      	ldr	r3, [pc, #76]	; (8006764 <RCC_SetFlashLatency+0x100>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f023 0207 	bic.w	r2, r3, #7
 800671c:	4911      	ldr	r1, [pc, #68]	; (8006764 <RCC_SetFlashLatency+0x100>)
 800671e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006720:	4313      	orrs	r3, r2
 8006722:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006724:	f7fb fd78 	bl	8002218 <HAL_GetTick>
 8006728:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800672a:	e008      	b.n	800673e <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800672c:	f7fb fd74 	bl	8002218 <HAL_GetTick>
 8006730:	4602      	mov	r2, r0
 8006732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	2b02      	cmp	r3, #2
 8006738:	d901      	bls.n	800673e <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 800673a:	2303      	movs	r3, #3
 800673c:	e007      	b.n	800674e <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800673e:	4b09      	ldr	r3, [pc, #36]	; (8006764 <RCC_SetFlashLatency+0x100>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 0307 	and.w	r3, r3, #7
 8006746:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006748:	429a      	cmp	r2, r3
 800674a:	d1ef      	bne.n	800672c <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3738      	adds	r7, #56	; 0x38
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	0801dc4c 	.word	0x0801dc4c
 800675c:	0801dc54 	.word	0x0801dc54
 8006760:	0801dc5c 	.word	0x0801dc5c
 8006764:	58004000 	.word	0x58004000

08006768 <LL_RCC_LSE_IsReady>:
{
 8006768:	b480      	push	{r7}
 800676a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800676c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006774:	f003 0302 	and.w	r3, r3, #2
 8006778:	2b02      	cmp	r3, #2
 800677a:	d101      	bne.n	8006780 <LL_RCC_LSE_IsReady+0x18>
 800677c:	2301      	movs	r3, #1
 800677e:	e000      	b.n	8006782 <LL_RCC_LSE_IsReady+0x1a>
 8006780:	2300      	movs	r3, #0
}
 8006782:	4618      	mov	r0, r3
 8006784:	46bd      	mov	sp, r7
 8006786:	bc80      	pop	{r7}
 8006788:	4770      	bx	lr

0800678a <LL_RCC_SetUSARTClockSource>:
{
 800678a:	b480      	push	{r7}
 800678c:	b083      	sub	sp, #12
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8006792:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006796:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	0c1b      	lsrs	r3, r3, #16
 800679e:	43db      	mvns	r3, r3
 80067a0:	401a      	ands	r2, r3
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067aa:	4313      	orrs	r3, r2
 80067ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80067b0:	bf00      	nop
 80067b2:	370c      	adds	r7, #12
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bc80      	pop	{r7}
 80067b8:	4770      	bx	lr

080067ba <LL_RCC_SetI2SClockSource>:
{
 80067ba:	b480      	push	{r7}
 80067bc:	b083      	sub	sp, #12
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80067c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80067da:	bf00      	nop
 80067dc:	370c      	adds	r7, #12
 80067de:	46bd      	mov	sp, r7
 80067e0:	bc80      	pop	{r7}
 80067e2:	4770      	bx	lr

080067e4 <LL_RCC_SetLPUARTClockSource>:
{
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80067ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067f4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80067f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4313      	orrs	r3, r2
 8006800:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006804:	bf00      	nop
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	bc80      	pop	{r7}
 800680c:	4770      	bx	lr

0800680e <LL_RCC_SetI2CClockSource>:
{
 800680e:	b480      	push	{r7}
 8006810:	b083      	sub	sp, #12
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006816:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800681a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	091b      	lsrs	r3, r3, #4
 8006822:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006826:	43db      	mvns	r3, r3
 8006828:	401a      	ands	r2, r3
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	011b      	lsls	r3, r3, #4
 800682e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006832:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006836:	4313      	orrs	r3, r2
 8006838:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800683c:	bf00      	nop
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	bc80      	pop	{r7}
 8006844:	4770      	bx	lr

08006846 <LL_RCC_SetLPTIMClockSource>:
{
 8006846:	b480      	push	{r7}
 8006848:	b083      	sub	sp, #12
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800684e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006852:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	0c1b      	lsrs	r3, r3, #16
 800685a:	041b      	lsls	r3, r3, #16
 800685c:	43db      	mvns	r3, r3
 800685e:	401a      	ands	r2, r3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	041b      	lsls	r3, r3, #16
 8006864:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006868:	4313      	orrs	r3, r2
 800686a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800686e:	bf00      	nop
 8006870:	370c      	adds	r7, #12
 8006872:	46bd      	mov	sp, r7
 8006874:	bc80      	pop	{r7}
 8006876:	4770      	bx	lr

08006878 <LL_RCC_SetRNGClockSource>:
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006880:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006888:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800688c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4313      	orrs	r3, r2
 8006894:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006898:	bf00      	nop
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	bc80      	pop	{r7}
 80068a0:	4770      	bx	lr

080068a2 <LL_RCC_SetADCClockSource>:
{
 80068a2:	b480      	push	{r7}
 80068a4:	b083      	sub	sp, #12
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80068aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80068b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4313      	orrs	r3, r2
 80068be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80068c2:	bf00      	nop
 80068c4:	370c      	adds	r7, #12
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bc80      	pop	{r7}
 80068ca:	4770      	bx	lr

080068cc <LL_RCC_SetRTCClockSource>:
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80068d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80068e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80068ec:	bf00      	nop
 80068ee:	370c      	adds	r7, #12
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bc80      	pop	{r7}
 80068f4:	4770      	bx	lr

080068f6 <LL_RCC_GetRTCClockSource>:
{
 80068f6:	b480      	push	{r7}
 80068f8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80068fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006902:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006906:	4618      	mov	r0, r3
 8006908:	46bd      	mov	sp, r7
 800690a:	bc80      	pop	{r7}
 800690c:	4770      	bx	lr

0800690e <LL_RCC_ForceBackupDomainReset>:
{
 800690e:	b480      	push	{r7}
 8006910:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006912:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800691a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800691e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006922:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006926:	bf00      	nop
 8006928:	46bd      	mov	sp, r7
 800692a:	bc80      	pop	{r7}
 800692c:	4770      	bx	lr

0800692e <LL_RCC_ReleaseBackupDomainReset>:
{
 800692e:	b480      	push	{r7}
 8006930:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006932:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800693a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800693e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006942:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006946:	bf00      	nop
 8006948:	46bd      	mov	sp, r7
 800694a:	bc80      	pop	{r7}
 800694c:	4770      	bx	lr
	...

08006950 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b086      	sub	sp, #24
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8006958:	2300      	movs	r3, #0
 800695a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 800695c:	2300      	movs	r3, #0
 800695e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006960:	2300      	movs	r3, #0
 8006962:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800696c:	2b00      	cmp	r3, #0
 800696e:	d058      	beq.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8006970:	f7fe fd7e 	bl	8005470 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006974:	f7fb fc50 	bl	8002218 <HAL_GetTick>
 8006978:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800697a:	e009      	b.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800697c:	f7fb fc4c 	bl	8002218 <HAL_GetTick>
 8006980:	4602      	mov	r2, r0
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	1ad3      	subs	r3, r2, r3
 8006986:	2b02      	cmp	r3, #2
 8006988:	d902      	bls.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800698a:	2303      	movs	r3, #3
 800698c:	74fb      	strb	r3, [r7, #19]
        break;
 800698e:	e006      	b.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006990:	4b7b      	ldr	r3, [pc, #492]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006998:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800699c:	d1ee      	bne.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800699e:	7cfb      	ldrb	r3, [r7, #19]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d13c      	bne.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80069a4:	f7ff ffa7 	bl	80068f6 <LL_RCC_GetRTCClockSource>
 80069a8:	4602      	mov	r2, r0
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d00f      	beq.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80069b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069be:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80069c0:	f7ff ffa5 	bl	800690e <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80069c4:	f7ff ffb3 	bl	800692e <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80069c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	f003 0302 	and.w	r3, r3, #2
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d014      	beq.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069dc:	f7fb fc1c 	bl	8002218 <HAL_GetTick>
 80069e0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80069e2:	e00b      	b.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069e4:	f7fb fc18 	bl	8002218 <HAL_GetTick>
 80069e8:	4602      	mov	r2, r0
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	1ad3      	subs	r3, r2, r3
 80069ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d902      	bls.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80069f6:	2303      	movs	r3, #3
 80069f8:	74fb      	strb	r3, [r7, #19]
            break;
 80069fa:	e004      	b.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80069fc:	f7ff feb4 	bl	8006768 <LL_RCC_LSE_IsReady>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d1ee      	bne.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8006a06:	7cfb      	ldrb	r3, [r7, #19]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d105      	bne.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a10:	4618      	mov	r0, r3
 8006a12:	f7ff ff5b 	bl	80068cc <LL_RCC_SetRTCClockSource>
 8006a16:	e004      	b.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006a18:	7cfb      	ldrb	r3, [r7, #19]
 8006a1a:	74bb      	strb	r3, [r7, #18]
 8006a1c:	e001      	b.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a1e:	7cfb      	ldrb	r3, [r7, #19]
 8006a20:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f003 0301 	and.w	r3, r3, #1
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d004      	beq.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	4618      	mov	r0, r3
 8006a34:	f7ff fea9 	bl	800678a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 0302 	and.w	r3, r3, #2
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d004      	beq.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f7ff fe9e 	bl	800678a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f003 0320 	and.w	r3, r3, #32
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d004      	beq.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f7ff fec0 	bl	80067e4 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d004      	beq.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6a1b      	ldr	r3, [r3, #32]
 8006a74:	4618      	mov	r0, r3
 8006a76:	f7ff fee6 	bl	8006846 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d004      	beq.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f7ff fedb 	bl	8006846 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d004      	beq.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f7ff fed0 	bl	8006846 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d004      	beq.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	695b      	ldr	r3, [r3, #20]
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f7ff fea9 	bl	800680e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d004      	beq.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	699b      	ldr	r3, [r3, #24]
 8006acc:	4618      	mov	r0, r3
 8006ace:	f7ff fe9e 	bl	800680e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d004      	beq.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	69db      	ldr	r3, [r3, #28]
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f7ff fe93 	bl	800680e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f003 0310 	and.w	r3, r3, #16
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d011      	beq.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	4618      	mov	r0, r3
 8006afa:	f7ff fe5e 	bl	80067ba <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b06:	d107      	bne.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8006b08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b16:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d010      	beq.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f7ff fea5 	bl	8006878 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d107      	bne.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006b36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b3a:	68db      	ldr	r3, [r3, #12]
 8006b3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b44:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d011      	beq.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b56:	4618      	mov	r0, r3
 8006b58:	f7ff fea3 	bl	80068a2 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b64:	d107      	bne.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006b66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b74:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8006b76:	7cbb      	ldrb	r3, [r7, #18]
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3718      	adds	r7, #24
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}
 8006b80:	58000400 	.word	0x58000400

08006b84 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d071      	beq.n	8006c7a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d106      	bne.n	8006bb0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f7fa ffac 	bl	8001b08 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2202      	movs	r2, #2
 8006bb4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006bb8:	4b32      	ldr	r3, [pc, #200]	; (8006c84 <HAL_RTC_Init+0x100>)
 8006bba:	68db      	ldr	r3, [r3, #12]
 8006bbc:	f003 0310 	and.w	r3, r3, #16
 8006bc0:	2b10      	cmp	r3, #16
 8006bc2:	d051      	beq.n	8006c68 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006bc4:	4b2f      	ldr	r3, [pc, #188]	; (8006c84 <HAL_RTC_Init+0x100>)
 8006bc6:	22ca      	movs	r2, #202	; 0xca
 8006bc8:	625a      	str	r2, [r3, #36]	; 0x24
 8006bca:	4b2e      	ldr	r3, [pc, #184]	; (8006c84 <HAL_RTC_Init+0x100>)
 8006bcc:	2253      	movs	r2, #83	; 0x53
 8006bce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 fa11 	bl	8006ff8 <RTC_EnterInitMode>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8006bda:	7bfb      	ldrb	r3, [r7, #15]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d13f      	bne.n	8006c60 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006be0:	4b28      	ldr	r3, [pc, #160]	; (8006c84 <HAL_RTC_Init+0x100>)
 8006be2:	699b      	ldr	r3, [r3, #24]
 8006be4:	4a27      	ldr	r2, [pc, #156]	; (8006c84 <HAL_RTC_Init+0x100>)
 8006be6:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8006bea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bee:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006bf0:	4b24      	ldr	r3, [pc, #144]	; (8006c84 <HAL_RTC_Init+0x100>)
 8006bf2:	699a      	ldr	r2, [r3, #24]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6859      	ldr	r1, [r3, #4]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	691b      	ldr	r3, [r3, #16]
 8006bfc:	4319      	orrs	r1, r3
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	699b      	ldr	r3, [r3, #24]
 8006c02:	430b      	orrs	r3, r1
 8006c04:	491f      	ldr	r1, [pc, #124]	; (8006c84 <HAL_RTC_Init+0x100>)
 8006c06:	4313      	orrs	r3, r2
 8006c08:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	68da      	ldr	r2, [r3, #12]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	041b      	lsls	r3, r3, #16
 8006c14:	491b      	ldr	r1, [pc, #108]	; (8006c84 <HAL_RTC_Init+0x100>)
 8006c16:	4313      	orrs	r3, r2
 8006c18:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8006c1a:	4b1a      	ldr	r3, [pc, #104]	; (8006c84 <HAL_RTC_Init+0x100>)
 8006c1c:	68db      	ldr	r3, [r3, #12]
 8006c1e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c2a:	430b      	orrs	r3, r1
 8006c2c:	4915      	ldr	r1, [pc, #84]	; (8006c84 <HAL_RTC_Init+0x100>)
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 fa14 	bl	8007060 <RTC_ExitInitMode>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8006c3c:	7bfb      	ldrb	r3, [r7, #15]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d10e      	bne.n	8006c60 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8006c42:	4b10      	ldr	r3, [pc, #64]	; (8006c84 <HAL_RTC_Init+0x100>)
 8006c44:	699b      	ldr	r3, [r3, #24]
 8006c46:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a19      	ldr	r1, [r3, #32]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	69db      	ldr	r3, [r3, #28]
 8006c52:	4319      	orrs	r1, r3
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	695b      	ldr	r3, [r3, #20]
 8006c58:	430b      	orrs	r3, r1
 8006c5a:	490a      	ldr	r1, [pc, #40]	; (8006c84 <HAL_RTC_Init+0x100>)
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c60:	4b08      	ldr	r3, [pc, #32]	; (8006c84 <HAL_RTC_Init+0x100>)
 8006c62:	22ff      	movs	r2, #255	; 0xff
 8006c64:	625a      	str	r2, [r3, #36]	; 0x24
 8006c66:	e001      	b.n	8006c6c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006c6c:	7bfb      	ldrb	r3, [r7, #15]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d103      	bne.n	8006c7a <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2201      	movs	r2, #1
 8006c76:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8006c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3710      	adds	r7, #16
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	40002800 	.word	0x40002800

08006c88 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006c88:	b590      	push	{r4, r7, lr}
 8006c8a:	b087      	sub	sp, #28
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	60b9      	str	r1, [r7, #8]
 8006c92:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8006c94:	2300      	movs	r3, #0
 8006c96:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d101      	bne.n	8006ca6 <HAL_RTC_SetAlarm_IT+0x1e>
 8006ca2:	2302      	movs	r3, #2
 8006ca4:	e0f3      	b.n	8006e8e <HAL_RTC_SetAlarm_IT+0x206>
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2202      	movs	r2, #2
 8006cb2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8006cb6:	4b78      	ldr	r3, [pc, #480]	; (8006e98 <HAL_RTC_SetAlarm_IT+0x210>)
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cbe:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cc6:	d06a      	beq.n	8006d9e <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d13a      	bne.n	8006d44 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006cce:	4b72      	ldr	r3, [pc, #456]	; (8006e98 <HAL_RTC_SetAlarm_IT+0x210>)
 8006cd0:	699b      	ldr	r3, [r3, #24]
 8006cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d102      	bne.n	8006ce0 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	695b      	ldr	r3, [r3, #20]
 8006ce4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	4618      	mov	r0, r3
 8006cee:	f000 f9f5 	bl	80070dc <RTC_ByteToBcd2>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	785b      	ldrb	r3, [r3, #1]
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f000 f9ee 	bl	80070dc <RTC_ByteToBcd2>
 8006d00:	4603      	mov	r3, r0
 8006d02:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006d04:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	789b      	ldrb	r3, [r3, #2]
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f000 f9e6 	bl	80070dc <RTC_ByteToBcd2>
 8006d10:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006d12:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	78db      	ldrb	r3, [r3, #3]
 8006d1a:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006d1c:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006d26:	4618      	mov	r0, r3
 8006d28:	f000 f9d8 	bl	80070dc <RTC_ByteToBcd2>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006d30:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006d38:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	617b      	str	r3, [r7, #20]
 8006d42:	e02c      	b.n	8006d9e <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	695b      	ldr	r3, [r3, #20]
 8006d48:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8006d4c:	d00d      	beq.n	8006d6a <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	695b      	ldr	r3, [r3, #20]
 8006d52:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006d56:	d008      	beq.n	8006d6a <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006d58:	4b4f      	ldr	r3, [pc, #316]	; (8006e98 <HAL_RTC_SetAlarm_IT+0x210>)
 8006d5a:	699b      	ldr	r3, [r3, #24]
 8006d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d102      	bne.n	8006d6a <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	2200      	movs	r2, #0
 8006d68:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	785b      	ldrb	r3, [r3, #1]
 8006d74:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006d76:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006d78:	68ba      	ldr	r2, [r7, #8]
 8006d7a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006d7c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	78db      	ldrb	r3, [r3, #3]
 8006d82:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006d84:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006d8c:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006d8e:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006d94:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d9e:	4b3e      	ldr	r3, [pc, #248]	; (8006e98 <HAL_RTC_SetAlarm_IT+0x210>)
 8006da0:	22ca      	movs	r2, #202	; 0xca
 8006da2:	625a      	str	r2, [r3, #36]	; 0x24
 8006da4:	4b3c      	ldr	r3, [pc, #240]	; (8006e98 <HAL_RTC_SetAlarm_IT+0x210>)
 8006da6:	2253      	movs	r2, #83	; 0x53
 8006da8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006db2:	d12c      	bne.n	8006e0e <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006db4:	4b38      	ldr	r3, [pc, #224]	; (8006e98 <HAL_RTC_SetAlarm_IT+0x210>)
 8006db6:	699b      	ldr	r3, [r3, #24]
 8006db8:	4a37      	ldr	r2, [pc, #220]	; (8006e98 <HAL_RTC_SetAlarm_IT+0x210>)
 8006dba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006dbe:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006dc0:	4b35      	ldr	r3, [pc, #212]	; (8006e98 <HAL_RTC_SetAlarm_IT+0x210>)
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dcc:	d107      	bne.n	8006dde <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	699a      	ldr	r2, [r3, #24]
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	69db      	ldr	r3, [r3, #28]
 8006dd6:	4930      	ldr	r1, [pc, #192]	; (8006e98 <HAL_RTC_SetAlarm_IT+0x210>)
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	644b      	str	r3, [r1, #68]	; 0x44
 8006ddc:	e006      	b.n	8006dec <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8006dde:	4a2e      	ldr	r2, [pc, #184]	; (8006e98 <HAL_RTC_SetAlarm_IT+0x210>)
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8006de4:	4a2c      	ldr	r2, [pc, #176]	; (8006e98 <HAL_RTC_SetAlarm_IT+0x210>)
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	699b      	ldr	r3, [r3, #24]
 8006dea:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8006dec:	4a2a      	ldr	r2, [pc, #168]	; (8006e98 <HAL_RTC_SetAlarm_IT+0x210>)
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006df8:	f043 0201 	orr.w	r2, r3, #1
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006e00:	4b25      	ldr	r3, [pc, #148]	; (8006e98 <HAL_RTC_SetAlarm_IT+0x210>)
 8006e02:	699b      	ldr	r3, [r3, #24]
 8006e04:	4a24      	ldr	r2, [pc, #144]	; (8006e98 <HAL_RTC_SetAlarm_IT+0x210>)
 8006e06:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8006e0a:	6193      	str	r3, [r2, #24]
 8006e0c:	e02b      	b.n	8006e66 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006e0e:	4b22      	ldr	r3, [pc, #136]	; (8006e98 <HAL_RTC_SetAlarm_IT+0x210>)
 8006e10:	699b      	ldr	r3, [r3, #24]
 8006e12:	4a21      	ldr	r2, [pc, #132]	; (8006e98 <HAL_RTC_SetAlarm_IT+0x210>)
 8006e14:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8006e18:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006e1a:	4b1f      	ldr	r3, [pc, #124]	; (8006e98 <HAL_RTC_SetAlarm_IT+0x210>)
 8006e1c:	2202      	movs	r2, #2
 8006e1e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e26:	d107      	bne.n	8006e38 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	699a      	ldr	r2, [r3, #24]
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	69db      	ldr	r3, [r3, #28]
 8006e30:	4919      	ldr	r1, [pc, #100]	; (8006e98 <HAL_RTC_SetAlarm_IT+0x210>)
 8006e32:	4313      	orrs	r3, r2
 8006e34:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006e36:	e006      	b.n	8006e46 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8006e38:	4a17      	ldr	r2, [pc, #92]	; (8006e98 <HAL_RTC_SetAlarm_IT+0x210>)
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8006e3e:	4a16      	ldr	r2, [pc, #88]	; (8006e98 <HAL_RTC_SetAlarm_IT+0x210>)
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	699b      	ldr	r3, [r3, #24]
 8006e44:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8006e46:	4a14      	ldr	r2, [pc, #80]	; (8006e98 <HAL_RTC_SetAlarm_IT+0x210>)
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e52:	f043 0202 	orr.w	r2, r3, #2
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006e5a:	4b0f      	ldr	r3, [pc, #60]	; (8006e98 <HAL_RTC_SetAlarm_IT+0x210>)
 8006e5c:	699b      	ldr	r3, [r3, #24]
 8006e5e:	4a0e      	ldr	r2, [pc, #56]	; (8006e98 <HAL_RTC_SetAlarm_IT+0x210>)
 8006e60:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8006e64:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006e66:	4b0d      	ldr	r3, [pc, #52]	; (8006e9c <HAL_RTC_SetAlarm_IT+0x214>)
 8006e68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e6c:	4a0b      	ldr	r2, [pc, #44]	; (8006e9c <HAL_RTC_SetAlarm_IT+0x214>)
 8006e6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e72:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e76:	4b08      	ldr	r3, [pc, #32]	; (8006e98 <HAL_RTC_SetAlarm_IT+0x210>)
 8006e78:	22ff      	movs	r2, #255	; 0xff
 8006e7a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2200      	movs	r2, #0
 8006e88:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	371c      	adds	r7, #28
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd90      	pop	{r4, r7, pc}
 8006e96:	bf00      	nop
 8006e98:	40002800 	.word	0x40002800
 8006e9c:	58000800 	.word	0x58000800

08006ea0 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d101      	bne.n	8006eb8 <HAL_RTC_DeactivateAlarm+0x18>
 8006eb4:	2302      	movs	r3, #2
 8006eb6:	e048      	b.n	8006f4a <HAL_RTC_DeactivateAlarm+0xaa>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2202      	movs	r2, #2
 8006ec4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006ec8:	4b22      	ldr	r3, [pc, #136]	; (8006f54 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006eca:	22ca      	movs	r2, #202	; 0xca
 8006ecc:	625a      	str	r2, [r3, #36]	; 0x24
 8006ece:	4b21      	ldr	r3, [pc, #132]	; (8006f54 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006ed0:	2253      	movs	r2, #83	; 0x53
 8006ed2:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006eda:	d115      	bne.n	8006f08 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006edc:	4b1d      	ldr	r3, [pc, #116]	; (8006f54 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006ede:	699b      	ldr	r3, [r3, #24]
 8006ee0:	4a1c      	ldr	r2, [pc, #112]	; (8006f54 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006ee2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006ee6:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8006ee8:	4b1a      	ldr	r3, [pc, #104]	; (8006f54 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eec:	4a19      	ldr	r2, [pc, #100]	; (8006f54 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006eee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ef2:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef8:	f023 0201 	bic.w	r2, r3, #1
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006f00:	4b14      	ldr	r3, [pc, #80]	; (8006f54 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006f02:	2201      	movs	r2, #1
 8006f04:	65da      	str	r2, [r3, #92]	; 0x5c
 8006f06:	e014      	b.n	8006f32 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006f08:	4b12      	ldr	r3, [pc, #72]	; (8006f54 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006f0a:	699b      	ldr	r3, [r3, #24]
 8006f0c:	4a11      	ldr	r2, [pc, #68]	; (8006f54 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006f0e:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8006f12:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8006f14:	4b0f      	ldr	r3, [pc, #60]	; (8006f54 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f18:	4a0e      	ldr	r2, [pc, #56]	; (8006f54 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006f1a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f1e:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f24:	f023 0202 	bic.w	r2, r3, #2
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006f2c:	4b09      	ldr	r3, [pc, #36]	; (8006f54 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006f2e:	2202      	movs	r2, #2
 8006f30:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f32:	4b08      	ldr	r3, [pc, #32]	; (8006f54 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006f34:	22ff      	movs	r2, #255	; 0xff
 8006f36:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006f48:	2300      	movs	r3, #0
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	370c      	adds	r7, #12
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bc80      	pop	{r7}
 8006f52:	4770      	bx	lr
 8006f54:	40002800 	.word	0x40002800

08006f58 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b084      	sub	sp, #16
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8006f60:	4b11      	ldr	r3, [pc, #68]	; (8006fa8 <HAL_RTC_AlarmIRQHandler+0x50>)
 8006f62:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f68:	4013      	ands	r3, r2
 8006f6a:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f003 0301 	and.w	r3, r3, #1
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d005      	beq.n	8006f82 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006f76:	4b0c      	ldr	r3, [pc, #48]	; (8006fa8 <HAL_RTC_AlarmIRQHandler+0x50>)
 8006f78:	2201      	movs	r2, #1
 8006f7a:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f7fb fb0c 	bl	800259a <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f003 0302 	and.w	r3, r3, #2
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d005      	beq.n	8006f98 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006f8c:	4b06      	ldr	r3, [pc, #24]	; (8006fa8 <HAL_RTC_AlarmIRQHandler+0x50>)
 8006f8e:	2202      	movs	r2, #2
 8006f90:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 f94a 	bl	800722c <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8006fa0:	bf00      	nop
 8006fa2:	3710      	adds	r7, #16
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}
 8006fa8:	40002800 	.word	0x40002800

08006fac <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8006fb4:	4b0f      	ldr	r3, [pc, #60]	; (8006ff4 <HAL_RTC_WaitForSynchro+0x48>)
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	4a0e      	ldr	r2, [pc, #56]	; (8006ff4 <HAL_RTC_WaitForSynchro+0x48>)
 8006fba:	f023 0320 	bic.w	r3, r3, #32
 8006fbe:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8006fc0:	f7fb f92a 	bl	8002218 <HAL_GetTick>
 8006fc4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006fc6:	e009      	b.n	8006fdc <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006fc8:	f7fb f926 	bl	8002218 <HAL_GetTick>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	1ad3      	subs	r3, r2, r3
 8006fd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006fd6:	d901      	bls.n	8006fdc <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006fd8:	2303      	movs	r3, #3
 8006fda:	e006      	b.n	8006fea <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006fdc:	4b05      	ldr	r3, [pc, #20]	; (8006ff4 <HAL_RTC_WaitForSynchro+0x48>)
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	f003 0320 	and.w	r3, r3, #32
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d0ef      	beq.n	8006fc8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3710      	adds	r7, #16
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	40002800 	.word	0x40002800

08006ff8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b084      	sub	sp, #16
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007000:	2300      	movs	r3, #0
 8007002:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8007004:	4b15      	ldr	r3, [pc, #84]	; (800705c <RTC_EnterInitMode+0x64>)
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800700c:	2b00      	cmp	r3, #0
 800700e:	d120      	bne.n	8007052 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007010:	4b12      	ldr	r3, [pc, #72]	; (800705c <RTC_EnterInitMode+0x64>)
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	4a11      	ldr	r2, [pc, #68]	; (800705c <RTC_EnterInitMode+0x64>)
 8007016:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800701a:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800701c:	f7fb f8fc 	bl	8002218 <HAL_GetTick>
 8007020:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007022:	e00d      	b.n	8007040 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007024:	f7fb f8f8 	bl	8002218 <HAL_GetTick>
 8007028:	4602      	mov	r2, r0
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	1ad3      	subs	r3, r2, r3
 800702e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007032:	d905      	bls.n	8007040 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007034:	2303      	movs	r3, #3
 8007036:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2203      	movs	r2, #3
 800703c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007040:	4b06      	ldr	r3, [pc, #24]	; (800705c <RTC_EnterInitMode+0x64>)
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007048:	2b00      	cmp	r3, #0
 800704a:	d102      	bne.n	8007052 <RTC_EnterInitMode+0x5a>
 800704c:	7bfb      	ldrb	r3, [r7, #15]
 800704e:	2b03      	cmp	r3, #3
 8007050:	d1e8      	bne.n	8007024 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8007052:	7bfb      	ldrb	r3, [r7, #15]
}
 8007054:	4618      	mov	r0, r3
 8007056:	3710      	adds	r7, #16
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}
 800705c:	40002800 	.word	0x40002800

08007060 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b084      	sub	sp, #16
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007068:	2300      	movs	r3, #0
 800706a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800706c:	4b1a      	ldr	r3, [pc, #104]	; (80070d8 <RTC_ExitInitMode+0x78>)
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	4a19      	ldr	r2, [pc, #100]	; (80070d8 <RTC_ExitInitMode+0x78>)
 8007072:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007076:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007078:	4b17      	ldr	r3, [pc, #92]	; (80070d8 <RTC_ExitInitMode+0x78>)
 800707a:	699b      	ldr	r3, [r3, #24]
 800707c:	f003 0320 	and.w	r3, r3, #32
 8007080:	2b00      	cmp	r3, #0
 8007082:	d10c      	bne.n	800709e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f7ff ff91 	bl	8006fac <HAL_RTC_WaitForSynchro>
 800708a:	4603      	mov	r3, r0
 800708c:	2b00      	cmp	r3, #0
 800708e:	d01e      	beq.n	80070ce <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2203      	movs	r2, #3
 8007094:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8007098:	2303      	movs	r3, #3
 800709a:	73fb      	strb	r3, [r7, #15]
 800709c:	e017      	b.n	80070ce <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800709e:	4b0e      	ldr	r3, [pc, #56]	; (80070d8 <RTC_ExitInitMode+0x78>)
 80070a0:	699b      	ldr	r3, [r3, #24]
 80070a2:	4a0d      	ldr	r2, [pc, #52]	; (80070d8 <RTC_ExitInitMode+0x78>)
 80070a4:	f023 0320 	bic.w	r3, r3, #32
 80070a8:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f7ff ff7e 	bl	8006fac <HAL_RTC_WaitForSynchro>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d005      	beq.n	80070c2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2203      	movs	r2, #3
 80070ba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80070be:	2303      	movs	r3, #3
 80070c0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80070c2:	4b05      	ldr	r3, [pc, #20]	; (80070d8 <RTC_ExitInitMode+0x78>)
 80070c4:	699b      	ldr	r3, [r3, #24]
 80070c6:	4a04      	ldr	r2, [pc, #16]	; (80070d8 <RTC_ExitInitMode+0x78>)
 80070c8:	f043 0320 	orr.w	r3, r3, #32
 80070cc:	6193      	str	r3, [r2, #24]
  }

  return status;
 80070ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3710      	adds	r7, #16
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}
 80070d8:	40002800 	.word	0x40002800

080070dc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80070dc:	b480      	push	{r7}
 80070de:	b085      	sub	sp, #20
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	4603      	mov	r3, r0
 80070e4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80070e6:	2300      	movs	r3, #0
 80070e8:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 80070ea:	79fb      	ldrb	r3, [r7, #7]
 80070ec:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 80070ee:	e005      	b.n	80070fc <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	3301      	adds	r3, #1
 80070f4:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 80070f6:	7afb      	ldrb	r3, [r7, #11]
 80070f8:	3b0a      	subs	r3, #10
 80070fa:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 80070fc:	7afb      	ldrb	r3, [r7, #11]
 80070fe:	2b09      	cmp	r3, #9
 8007100:	d8f6      	bhi.n	80070f0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	b2db      	uxtb	r3, r3
 8007106:	011b      	lsls	r3, r3, #4
 8007108:	b2da      	uxtb	r2, r3
 800710a:	7afb      	ldrb	r3, [r7, #11]
 800710c:	4313      	orrs	r3, r2
 800710e:	b2db      	uxtb	r3, r3
}
 8007110:	4618      	mov	r0, r3
 8007112:	3714      	adds	r7, #20
 8007114:	46bd      	mov	sp, r7
 8007116:	bc80      	pop	{r7}
 8007118:	4770      	bx	lr
	...

0800711c <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 800711c:	b480      	push	{r7}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800712a:	2b01      	cmp	r3, #1
 800712c:	d101      	bne.n	8007132 <HAL_RTCEx_EnableBypassShadow+0x16>
 800712e:	2302      	movs	r3, #2
 8007130:	e01f      	b.n	8007172 <HAL_RTCEx_EnableBypassShadow+0x56>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2201      	movs	r2, #1
 8007136:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2202      	movs	r2, #2
 800713e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007142:	4b0e      	ldr	r3, [pc, #56]	; (800717c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007144:	22ca      	movs	r2, #202	; 0xca
 8007146:	625a      	str	r2, [r3, #36]	; 0x24
 8007148:	4b0c      	ldr	r3, [pc, #48]	; (800717c <HAL_RTCEx_EnableBypassShadow+0x60>)
 800714a:	2253      	movs	r2, #83	; 0x53
 800714c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800714e:	4b0b      	ldr	r3, [pc, #44]	; (800717c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007150:	699b      	ldr	r3, [r3, #24]
 8007152:	4a0a      	ldr	r2, [pc, #40]	; (800717c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007154:	f043 0320 	orr.w	r3, r3, #32
 8007158:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800715a:	4b08      	ldr	r3, [pc, #32]	; (800717c <HAL_RTCEx_EnableBypassShadow+0x60>)
 800715c:	22ff      	movs	r2, #255	; 0xff
 800715e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2201      	movs	r2, #1
 8007164:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007170:	2300      	movs	r3, #0
}
 8007172:	4618      	mov	r0, r3
 8007174:	370c      	adds	r7, #12
 8007176:	46bd      	mov	sp, r7
 8007178:	bc80      	pop	{r7}
 800717a:	4770      	bx	lr
 800717c:	40002800 	.word	0x40002800

08007180 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8007180:	b480      	push	{r7}
 8007182:	b083      	sub	sp, #12
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800718e:	2b01      	cmp	r3, #1
 8007190:	d101      	bne.n	8007196 <HAL_RTCEx_SetSSRU_IT+0x16>
 8007192:	2302      	movs	r3, #2
 8007194:	e027      	b.n	80071e6 <HAL_RTCEx_SetSSRU_IT+0x66>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2201      	movs	r2, #1
 800719a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2202      	movs	r2, #2
 80071a2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80071a6:	4b12      	ldr	r3, [pc, #72]	; (80071f0 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80071a8:	22ca      	movs	r2, #202	; 0xca
 80071aa:	625a      	str	r2, [r3, #36]	; 0x24
 80071ac:	4b10      	ldr	r3, [pc, #64]	; (80071f0 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80071ae:	2253      	movs	r2, #83	; 0x53
 80071b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 80071b2:	4b0f      	ldr	r3, [pc, #60]	; (80071f0 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80071b4:	699b      	ldr	r3, [r3, #24]
 80071b6:	4a0e      	ldr	r2, [pc, #56]	; (80071f0 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80071b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071bc:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 80071be:	4b0d      	ldr	r3, [pc, #52]	; (80071f4 <HAL_RTCEx_SetSSRU_IT+0x74>)
 80071c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071c4:	4a0b      	ldr	r2, [pc, #44]	; (80071f4 <HAL_RTCEx_SetSSRU_IT+0x74>)
 80071c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80071ca:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071ce:	4b08      	ldr	r3, [pc, #32]	; (80071f0 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80071d0:	22ff      	movs	r2, #255	; 0xff
 80071d2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	370c      	adds	r7, #12
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bc80      	pop	{r7}
 80071ee:	4770      	bx	lr
 80071f0:	40002800 	.word	0x40002800
 80071f4:	58000800 	.word	0x58000800

080071f8 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8007200:	4b09      	ldr	r3, [pc, #36]	; (8007228 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8007202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007208:	2b00      	cmp	r3, #0
 800720a:	d005      	beq.n	8007218 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 800720c:	4b06      	ldr	r3, [pc, #24]	; (8007228 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800720e:	2240      	movs	r2, #64	; 0x40
 8007210:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f7fb f9cb 	bl	80025ae <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2201      	movs	r2, #1
 800721c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8007220:	bf00      	nop
 8007222:	3708      	adds	r7, #8
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}
 8007228:	40002800 	.word	0x40002800

0800722c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8007234:	bf00      	nop
 8007236:	370c      	adds	r7, #12
 8007238:	46bd      	mov	sp, r7
 800723a:	bc80      	pop	{r7}
 800723c:	4770      	bx	lr
	...

08007240 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8007240:	b480      	push	{r7}
 8007242:	b087      	sub	sp, #28
 8007244:	af00      	add	r7, sp, #0
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	60b9      	str	r1, [r7, #8]
 800724a:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 800724c:	4b07      	ldr	r3, [pc, #28]	; (800726c <HAL_RTCEx_BKUPWrite+0x2c>)
 800724e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	009b      	lsls	r3, r3, #2
 8007254:	697a      	ldr	r2, [r7, #20]
 8007256:	4413      	add	r3, r2
 8007258:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	601a      	str	r2, [r3, #0]
}
 8007260:	bf00      	nop
 8007262:	371c      	adds	r7, #28
 8007264:	46bd      	mov	sp, r7
 8007266:	bc80      	pop	{r7}
 8007268:	4770      	bx	lr
 800726a:	bf00      	nop
 800726c:	4000b100 	.word	0x4000b100

08007270 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8007270:	b480      	push	{r7}
 8007272:	b085      	sub	sp, #20
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 800727a:	4b07      	ldr	r3, [pc, #28]	; (8007298 <HAL_RTCEx_BKUPRead+0x28>)
 800727c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	68fa      	ldr	r2, [r7, #12]
 8007284:	4413      	add	r3, r2
 8007286:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
}
 800728c:	4618      	mov	r0, r3
 800728e:	3714      	adds	r7, #20
 8007290:	46bd      	mov	sp, r7
 8007292:	bc80      	pop	{r7}
 8007294:	4770      	bx	lr
 8007296:	bf00      	nop
 8007298:	4000b100 	.word	0x4000b100

0800729c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b084      	sub	sp, #16
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d101      	bne.n	80072ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	e0c6      	b.n	800743c <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d108      	bne.n	80072c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072be:	d009      	beq.n	80072d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2200      	movs	r2, #0
 80072c4:	61da      	str	r2, [r3, #28]
 80072c6:	e005      	b.n	80072d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d106      	bne.n	80072ee <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f7fa fcb7 	bl	8001c5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2202      	movs	r2, #2
 80072f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007304:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	68db      	ldr	r3, [r3, #12]
 800730a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800730e:	d902      	bls.n	8007316 <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007310:	2300      	movs	r3, #0
 8007312:	60fb      	str	r3, [r7, #12]
 8007314:	e002      	b.n	800731c <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007316:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800731a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007324:	d007      	beq.n	8007336 <HAL_SPI_Init+0x9a>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	68db      	ldr	r3, [r3, #12]
 800732a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800732e:	d002      	beq.n	8007336 <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007346:	431a      	orrs	r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	691b      	ldr	r3, [r3, #16]
 800734c:	f003 0302 	and.w	r3, r3, #2
 8007350:	431a      	orrs	r2, r3
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	695b      	ldr	r3, [r3, #20]
 8007356:	f003 0301 	and.w	r3, r3, #1
 800735a:	431a      	orrs	r2, r3
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	699b      	ldr	r3, [r3, #24]
 8007360:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007364:	431a      	orrs	r2, r3
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	69db      	ldr	r3, [r3, #28]
 800736a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800736e:	431a      	orrs	r2, r3
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6a1b      	ldr	r3, [r3, #32]
 8007374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007378:	ea42 0103 	orr.w	r1, r2, r3
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007380:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	430a      	orrs	r2, r1
 800738a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007390:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007394:	d11b      	bne.n	80073ce <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800739a:	2b00      	cmp	r3, #0
 800739c:	d10b      	bne.n	80073b6 <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	68db      	ldr	r3, [r3, #12]
 80073a2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80073a6:	d903      	bls.n	80073b0 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2202      	movs	r2, #2
 80073ac:	631a      	str	r2, [r3, #48]	; 0x30
 80073ae:	e002      	b.n	80073b6 <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2201      	movs	r2, #1
 80073b4:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ba:	2b02      	cmp	r3, #2
 80073bc:	d107      	bne.n	80073ce <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073cc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	699b      	ldr	r3, [r3, #24]
 80073d2:	0c1b      	lsrs	r3, r3, #16
 80073d4:	f003 0204 	and.w	r2, r3, #4
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073dc:	f003 0310 	and.w	r3, r3, #16
 80073e0:	431a      	orrs	r2, r3
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073e6:	f003 0308 	and.w	r3, r3, #8
 80073ea:	431a      	orrs	r2, r3
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80073f4:	ea42 0103 	orr.w	r1, r2, r3
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	430a      	orrs	r2, r1
 8007404:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800740a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800740e:	d105      	bne.n	800741c <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	b292      	uxth	r2, r2
 800741a:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	69da      	ldr	r2, [r3, #28]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800742a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2201      	movs	r2, #1
 8007436:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800743a:	2300      	movs	r3, #0
}
 800743c:	4618      	mov	r0, r3
 800743e:	3710      	adds	r7, #16
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <LL_PWR_SetRadioBusyTrigger>:
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 800744c:	4b06      	ldr	r3, [pc, #24]	; (8007468 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007454:	4904      	ldr	r1, [pc, #16]	; (8007468 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	4313      	orrs	r3, r2
 800745a:	608b      	str	r3, [r1, #8]
}
 800745c:	bf00      	nop
 800745e:	370c      	adds	r7, #12
 8007460:	46bd      	mov	sp, r7
 8007462:	bc80      	pop	{r7}
 8007464:	4770      	bx	lr
 8007466:	bf00      	nop
 8007468:	58000400 	.word	0x58000400

0800746c <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 800746c:	b480      	push	{r7}
 800746e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007470:	4b05      	ldr	r3, [pc, #20]	; (8007488 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8007472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007476:	4a04      	ldr	r2, [pc, #16]	; (8007488 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8007478:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800747c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007480:	bf00      	nop
 8007482:	46bd      	mov	sp, r7
 8007484:	bc80      	pop	{r7}
 8007486:	4770      	bx	lr
 8007488:	58000400 	.word	0x58000400

0800748c <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 800748c:	b480      	push	{r7}
 800748e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007490:	4b05      	ldr	r3, [pc, #20]	; (80074a8 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8007492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007496:	4a04      	ldr	r2, [pc, #16]	; (80074a8 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8007498:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800749c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80074a0:	bf00      	nop
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bc80      	pop	{r7}
 80074a6:	4770      	bx	lr
 80074a8:	58000400 	.word	0x58000400

080074ac <LL_PWR_ClearFlag_RFBUSY>:
{
 80074ac:	b480      	push	{r7}
 80074ae:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80074b0:	4b03      	ldr	r3, [pc, #12]	; (80074c0 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 80074b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80074b6:	619a      	str	r2, [r3, #24]
}
 80074b8:	bf00      	nop
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bc80      	pop	{r7}
 80074be:	4770      	bx	lr
 80074c0:	58000400 	.word	0x58000400

080074c4 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 80074c4:	b480      	push	{r7}
 80074c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80074c8:	4b06      	ldr	r3, [pc, #24]	; (80074e4 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 80074ca:	695b      	ldr	r3, [r3, #20]
 80074cc:	f003 0302 	and.w	r3, r3, #2
 80074d0:	2b02      	cmp	r3, #2
 80074d2:	d101      	bne.n	80074d8 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 80074d4:	2301      	movs	r3, #1
 80074d6:	e000      	b.n	80074da <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 80074d8:	2300      	movs	r3, #0
}
 80074da:	4618      	mov	r0, r3
 80074dc:	46bd      	mov	sp, r7
 80074de:	bc80      	pop	{r7}
 80074e0:	4770      	bx	lr
 80074e2:	bf00      	nop
 80074e4:	58000400 	.word	0x58000400

080074e8 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 80074e8:	b480      	push	{r7}
 80074ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 80074ec:	4b06      	ldr	r3, [pc, #24]	; (8007508 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 80074ee:	695b      	ldr	r3, [r3, #20]
 80074f0:	f003 0304 	and.w	r3, r3, #4
 80074f4:	2b04      	cmp	r3, #4
 80074f6:	d101      	bne.n	80074fc <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 80074f8:	2301      	movs	r3, #1
 80074fa:	e000      	b.n	80074fe <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	46bd      	mov	sp, r7
 8007502:	bc80      	pop	{r7}
 8007504:	4770      	bx	lr
 8007506:	bf00      	nop
 8007508:	58000400 	.word	0x58000400

0800750c <LL_RCC_RF_DisableReset>:
{
 800750c:	b480      	push	{r7}
 800750e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8007510:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007514:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007518:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800751c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007520:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007524:	bf00      	nop
 8007526:	46bd      	mov	sp, r7
 8007528:	bc80      	pop	{r7}
 800752a:	4770      	bx	lr

0800752c <LL_RCC_IsRFUnderReset>:
{
 800752c:	b480      	push	{r7}
 800752e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8007530:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007534:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007538:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800753c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007540:	d101      	bne.n	8007546 <LL_RCC_IsRFUnderReset+0x1a>
 8007542:	2301      	movs	r3, #1
 8007544:	e000      	b.n	8007548 <LL_RCC_IsRFUnderReset+0x1c>
 8007546:	2300      	movs	r3, #0
}
 8007548:	4618      	mov	r0, r3
 800754a:	46bd      	mov	sp, r7
 800754c:	bc80      	pop	{r7}
 800754e:	4770      	bx	lr

08007550 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8007558:	4b06      	ldr	r3, [pc, #24]	; (8007574 <LL_EXTI_EnableIT_32_63+0x24>)
 800755a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800755e:	4905      	ldr	r1, [pc, #20]	; (8007574 <LL_EXTI_EnableIT_32_63+0x24>)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	4313      	orrs	r3, r2
 8007564:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8007568:	bf00      	nop
 800756a:	370c      	adds	r7, #12
 800756c:	46bd      	mov	sp, r7
 800756e:	bc80      	pop	{r7}
 8007570:	4770      	bx	lr
 8007572:	bf00      	nop
 8007574:	58000800 	.word	0x58000800

08007578 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d103      	bne.n	800758e <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8007586:	2301      	movs	r3, #1
 8007588:	73fb      	strb	r3, [r7, #15]
    return status;
 800758a:	7bfb      	ldrb	r3, [r7, #15]
 800758c:	e052      	b.n	8007634 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 800758e:	2300      	movs	r3, #0
 8007590:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	799b      	ldrb	r3, [r3, #6]
 8007596:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8007598:	7bbb      	ldrb	r3, [r7, #14]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d002      	beq.n	80075a4 <HAL_SUBGHZ_Init+0x2c>
 800759e:	7bbb      	ldrb	r3, [r7, #14]
 80075a0:	2b03      	cmp	r3, #3
 80075a2:	d109      	bne.n	80075b8 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f7fa fc8c 	bl	8001ec8 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 80075b0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80075b4:	f7ff ffcc 	bl	8007550 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 80075b8:	7bbb      	ldrb	r3, [r7, #14]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d126      	bne.n	800760c <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2202      	movs	r2, #2
 80075c2:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 80075c4:	f7ff ffa2 	bl	800750c <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80075c8:	4b1c      	ldr	r3, [pc, #112]	; (800763c <HAL_SUBGHZ_Init+0xc4>)
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	4613      	mov	r3, r2
 80075ce:	00db      	lsls	r3, r3, #3
 80075d0:	1a9b      	subs	r3, r3, r2
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	0cdb      	lsrs	r3, r3, #19
 80075d6:	2264      	movs	r2, #100	; 0x64
 80075d8:	fb02 f303 	mul.w	r3, r2, r3
 80075dc:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d105      	bne.n	80075f0 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2201      	movs	r2, #1
 80075ec:	609a      	str	r2, [r3, #8]
        break;
 80075ee:	e007      	b.n	8007600 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	3b01      	subs	r3, #1
 80075f4:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 80075f6:	f7ff ff99 	bl	800752c <LL_RCC_IsRFUnderReset>
 80075fa:	4603      	mov	r3, r0
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d1ee      	bne.n	80075de <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007600:	f7ff ff34 	bl	800746c <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8007604:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007608:	f7ff ff1c 	bl	8007444 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 800760c:	f7ff ff4e 	bl	80074ac <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8007610:	7bfb      	ldrb	r3, [r7, #15]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d10a      	bne.n	800762c <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4618      	mov	r0, r3
 800761c:	f000 faac 	bl	8007b78 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	719a      	strb	r2, [r3, #6]

  return status;
 8007632:	7bfb      	ldrb	r3, [r7, #15]
}
 8007634:	4618      	mov	r0, r3
 8007636:	3710      	adds	r7, #16
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}
 800763c:	20000000 	.word	0x20000000

08007640 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b086      	sub	sp, #24
 8007644:	af00      	add	r7, sp, #0
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	607a      	str	r2, [r7, #4]
 800764a:	461a      	mov	r2, r3
 800764c:	460b      	mov	r3, r1
 800764e:	817b      	strh	r3, [r7, #10]
 8007650:	4613      	mov	r3, r2
 8007652:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	799b      	ldrb	r3, [r3, #6]
 8007658:	b2db      	uxtb	r3, r3
 800765a:	2b01      	cmp	r3, #1
 800765c:	d14a      	bne.n	80076f4 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	795b      	ldrb	r3, [r3, #5]
 8007662:	2b01      	cmp	r3, #1
 8007664:	d101      	bne.n	800766a <HAL_SUBGHZ_WriteRegisters+0x2a>
 8007666:	2302      	movs	r3, #2
 8007668:	e045      	b.n	80076f6 <HAL_SUBGHZ_WriteRegisters+0xb6>
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2201      	movs	r2, #1
 800766e:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2202      	movs	r2, #2
 8007674:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007676:	68f8      	ldr	r0, [r7, #12]
 8007678:	f000 fb4c 	bl	8007d14 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800767c:	f7ff ff06 	bl	800748c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8007680:	210d      	movs	r1, #13
 8007682:	68f8      	ldr	r0, [r7, #12]
 8007684:	f000 fa98 	bl	8007bb8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8007688:	897b      	ldrh	r3, [r7, #10]
 800768a:	0a1b      	lsrs	r3, r3, #8
 800768c:	b29b      	uxth	r3, r3
 800768e:	b2db      	uxtb	r3, r3
 8007690:	4619      	mov	r1, r3
 8007692:	68f8      	ldr	r0, [r7, #12]
 8007694:	f000 fa90 	bl	8007bb8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8007698:	897b      	ldrh	r3, [r7, #10]
 800769a:	b2db      	uxtb	r3, r3
 800769c:	4619      	mov	r1, r3
 800769e:	68f8      	ldr	r0, [r7, #12]
 80076a0:	f000 fa8a 	bl	8007bb8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80076a4:	2300      	movs	r3, #0
 80076a6:	82bb      	strh	r3, [r7, #20]
 80076a8:	e00a      	b.n	80076c0 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80076aa:	8abb      	ldrh	r3, [r7, #20]
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	4413      	add	r3, r2
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	4619      	mov	r1, r3
 80076b4:	68f8      	ldr	r0, [r7, #12]
 80076b6:	f000 fa7f 	bl	8007bb8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80076ba:	8abb      	ldrh	r3, [r7, #20]
 80076bc:	3301      	adds	r3, #1
 80076be:	82bb      	strh	r3, [r7, #20]
 80076c0:	8aba      	ldrh	r2, [r7, #20]
 80076c2:	893b      	ldrh	r3, [r7, #8]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d3f0      	bcc.n	80076aa <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80076c8:	f7ff fed0 	bl	800746c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80076cc:	68f8      	ldr	r0, [r7, #12]
 80076ce:	f000 fb45 	bl	8007d5c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d002      	beq.n	80076e0 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	75fb      	strb	r3, [r7, #23]
 80076de:	e001      	b.n	80076e4 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 80076e0:	2300      	movs	r3, #0
 80076e2:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2201      	movs	r2, #1
 80076e8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2200      	movs	r2, #0
 80076ee:	715a      	strb	r2, [r3, #5]

    return status;
 80076f0:	7dfb      	ldrb	r3, [r7, #23]
 80076f2:	e000      	b.n	80076f6 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80076f4:	2302      	movs	r3, #2
  }
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3718      	adds	r7, #24
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}

080076fe <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 80076fe:	b580      	push	{r7, lr}
 8007700:	b088      	sub	sp, #32
 8007702:	af00      	add	r7, sp, #0
 8007704:	60f8      	str	r0, [r7, #12]
 8007706:	607a      	str	r2, [r7, #4]
 8007708:	461a      	mov	r2, r3
 800770a:	460b      	mov	r3, r1
 800770c:	817b      	strh	r3, [r7, #10]
 800770e:	4613      	mov	r3, r2
 8007710:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	799b      	ldrb	r3, [r3, #6]
 800771a:	b2db      	uxtb	r3, r3
 800771c:	2b01      	cmp	r3, #1
 800771e:	d14a      	bne.n	80077b6 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	795b      	ldrb	r3, [r3, #5]
 8007724:	2b01      	cmp	r3, #1
 8007726:	d101      	bne.n	800772c <HAL_SUBGHZ_ReadRegisters+0x2e>
 8007728:	2302      	movs	r3, #2
 800772a:	e045      	b.n	80077b8 <HAL_SUBGHZ_ReadRegisters+0xba>
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2201      	movs	r2, #1
 8007730:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007732:	68f8      	ldr	r0, [r7, #12]
 8007734:	f000 faee 	bl	8007d14 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007738:	f7ff fea8 	bl	800748c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 800773c:	211d      	movs	r1, #29
 800773e:	68f8      	ldr	r0, [r7, #12]
 8007740:	f000 fa3a 	bl	8007bb8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8007744:	897b      	ldrh	r3, [r7, #10]
 8007746:	0a1b      	lsrs	r3, r3, #8
 8007748:	b29b      	uxth	r3, r3
 800774a:	b2db      	uxtb	r3, r3
 800774c:	4619      	mov	r1, r3
 800774e:	68f8      	ldr	r0, [r7, #12]
 8007750:	f000 fa32 	bl	8007bb8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8007754:	897b      	ldrh	r3, [r7, #10]
 8007756:	b2db      	uxtb	r3, r3
 8007758:	4619      	mov	r1, r3
 800775a:	68f8      	ldr	r0, [r7, #12]
 800775c:	f000 fa2c 	bl	8007bb8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8007760:	2100      	movs	r1, #0
 8007762:	68f8      	ldr	r0, [r7, #12]
 8007764:	f000 fa28 	bl	8007bb8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007768:	2300      	movs	r3, #0
 800776a:	82fb      	strh	r3, [r7, #22]
 800776c:	e009      	b.n	8007782 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800776e:	69b9      	ldr	r1, [r7, #24]
 8007770:	68f8      	ldr	r0, [r7, #12]
 8007772:	f000 fa77 	bl	8007c64 <SUBGHZSPI_Receive>
      pData++;
 8007776:	69bb      	ldr	r3, [r7, #24]
 8007778:	3301      	adds	r3, #1
 800777a:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800777c:	8afb      	ldrh	r3, [r7, #22]
 800777e:	3301      	adds	r3, #1
 8007780:	82fb      	strh	r3, [r7, #22]
 8007782:	8afa      	ldrh	r2, [r7, #22]
 8007784:	893b      	ldrh	r3, [r7, #8]
 8007786:	429a      	cmp	r2, r3
 8007788:	d3f1      	bcc.n	800776e <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800778a:	f7ff fe6f 	bl	800746c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800778e:	68f8      	ldr	r0, [r7, #12]
 8007790:	f000 fae4 	bl	8007d5c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d002      	beq.n	80077a2 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	77fb      	strb	r3, [r7, #31]
 80077a0:	e001      	b.n	80077a6 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 80077a2:	2300      	movs	r3, #0
 80077a4:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2201      	movs	r2, #1
 80077aa:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2200      	movs	r2, #0
 80077b0:	715a      	strb	r2, [r3, #5]

    return status;
 80077b2:	7ffb      	ldrb	r3, [r7, #31]
 80077b4:	e000      	b.n	80077b8 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 80077b6:	2302      	movs	r3, #2
  }
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3720      	adds	r7, #32
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b086      	sub	sp, #24
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	607a      	str	r2, [r7, #4]
 80077ca:	461a      	mov	r2, r3
 80077cc:	460b      	mov	r3, r1
 80077ce:	72fb      	strb	r3, [r7, #11]
 80077d0:	4613      	mov	r3, r2
 80077d2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	799b      	ldrb	r3, [r3, #6]
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d14a      	bne.n	8007874 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	795b      	ldrb	r3, [r3, #5]
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d101      	bne.n	80077ea <HAL_SUBGHZ_ExecSetCmd+0x2a>
 80077e6:	2302      	movs	r3, #2
 80077e8:	e045      	b.n	8007876 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2201      	movs	r2, #1
 80077ee:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80077f0:	68f8      	ldr	r0, [r7, #12]
 80077f2:	f000 fa8f 	bl	8007d14 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 80077f6:	7afb      	ldrb	r3, [r7, #11]
 80077f8:	2b84      	cmp	r3, #132	; 0x84
 80077fa:	d002      	beq.n	8007802 <HAL_SUBGHZ_ExecSetCmd+0x42>
 80077fc:	7afb      	ldrb	r3, [r7, #11]
 80077fe:	2b94      	cmp	r3, #148	; 0x94
 8007800:	d103      	bne.n	800780a <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2201      	movs	r2, #1
 8007806:	711a      	strb	r2, [r3, #4]
 8007808:	e002      	b.n	8007810 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2200      	movs	r2, #0
 800780e:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007810:	f7ff fe3c 	bl	800748c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007814:	7afb      	ldrb	r3, [r7, #11]
 8007816:	4619      	mov	r1, r3
 8007818:	68f8      	ldr	r0, [r7, #12]
 800781a:	f000 f9cd 	bl	8007bb8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800781e:	2300      	movs	r3, #0
 8007820:	82bb      	strh	r3, [r7, #20]
 8007822:	e00a      	b.n	800783a <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007824:	8abb      	ldrh	r3, [r7, #20]
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	4413      	add	r3, r2
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	4619      	mov	r1, r3
 800782e:	68f8      	ldr	r0, [r7, #12]
 8007830:	f000 f9c2 	bl	8007bb8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007834:	8abb      	ldrh	r3, [r7, #20]
 8007836:	3301      	adds	r3, #1
 8007838:	82bb      	strh	r3, [r7, #20]
 800783a:	8aba      	ldrh	r2, [r7, #20]
 800783c:	893b      	ldrh	r3, [r7, #8]
 800783e:	429a      	cmp	r2, r3
 8007840:	d3f0      	bcc.n	8007824 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007842:	f7ff fe13 	bl	800746c <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8007846:	7afb      	ldrb	r3, [r7, #11]
 8007848:	2b84      	cmp	r3, #132	; 0x84
 800784a:	d002      	beq.n	8007852 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 800784c:	68f8      	ldr	r0, [r7, #12]
 800784e:	f000 fa85 	bl	8007d5c <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d002      	beq.n	8007860 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 800785a:	2301      	movs	r3, #1
 800785c:	75fb      	strb	r3, [r7, #23]
 800785e:	e001      	b.n	8007864 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8007860:	2300      	movs	r3, #0
 8007862:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2201      	movs	r2, #1
 8007868:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2200      	movs	r2, #0
 800786e:	715a      	strb	r2, [r3, #5]

    return status;
 8007870:	7dfb      	ldrb	r3, [r7, #23]
 8007872:	e000      	b.n	8007876 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007874:	2302      	movs	r3, #2
  }
}
 8007876:	4618      	mov	r0, r3
 8007878:	3718      	adds	r7, #24
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}

0800787e <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800787e:	b580      	push	{r7, lr}
 8007880:	b088      	sub	sp, #32
 8007882:	af00      	add	r7, sp, #0
 8007884:	60f8      	str	r0, [r7, #12]
 8007886:	607a      	str	r2, [r7, #4]
 8007888:	461a      	mov	r2, r3
 800788a:	460b      	mov	r3, r1
 800788c:	72fb      	strb	r3, [r7, #11]
 800788e:	4613      	mov	r3, r2
 8007890:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	799b      	ldrb	r3, [r3, #6]
 800789a:	b2db      	uxtb	r3, r3
 800789c:	2b01      	cmp	r3, #1
 800789e:	d13d      	bne.n	800791c <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	795b      	ldrb	r3, [r3, #5]
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d101      	bne.n	80078ac <HAL_SUBGHZ_ExecGetCmd+0x2e>
 80078a8:	2302      	movs	r3, #2
 80078aa:	e038      	b.n	800791e <HAL_SUBGHZ_ExecGetCmd+0xa0>
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2201      	movs	r2, #1
 80078b0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80078b2:	68f8      	ldr	r0, [r7, #12]
 80078b4:	f000 fa2e 	bl	8007d14 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80078b8:	f7ff fde8 	bl	800748c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80078bc:	7afb      	ldrb	r3, [r7, #11]
 80078be:	4619      	mov	r1, r3
 80078c0:	68f8      	ldr	r0, [r7, #12]
 80078c2:	f000 f979 	bl	8007bb8 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80078c6:	2100      	movs	r1, #0
 80078c8:	68f8      	ldr	r0, [r7, #12]
 80078ca:	f000 f975 	bl	8007bb8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80078ce:	2300      	movs	r3, #0
 80078d0:	82fb      	strh	r3, [r7, #22]
 80078d2:	e009      	b.n	80078e8 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80078d4:	69b9      	ldr	r1, [r7, #24]
 80078d6:	68f8      	ldr	r0, [r7, #12]
 80078d8:	f000 f9c4 	bl	8007c64 <SUBGHZSPI_Receive>
      pData++;
 80078dc:	69bb      	ldr	r3, [r7, #24]
 80078de:	3301      	adds	r3, #1
 80078e0:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80078e2:	8afb      	ldrh	r3, [r7, #22]
 80078e4:	3301      	adds	r3, #1
 80078e6:	82fb      	strh	r3, [r7, #22]
 80078e8:	8afa      	ldrh	r2, [r7, #22]
 80078ea:	893b      	ldrh	r3, [r7, #8]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d3f1      	bcc.n	80078d4 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80078f0:	f7ff fdbc 	bl	800746c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80078f4:	68f8      	ldr	r0, [r7, #12]
 80078f6:	f000 fa31 	bl	8007d5c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d002      	beq.n	8007908 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8007902:	2301      	movs	r3, #1
 8007904:	77fb      	strb	r3, [r7, #31]
 8007906:	e001      	b.n	800790c <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8007908:	2300      	movs	r3, #0
 800790a:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2201      	movs	r2, #1
 8007910:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2200      	movs	r2, #0
 8007916:	715a      	strb	r2, [r3, #5]

    return status;
 8007918:	7ffb      	ldrb	r3, [r7, #31]
 800791a:	e000      	b.n	800791e <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800791c:	2302      	movs	r3, #2
  }
}
 800791e:	4618      	mov	r0, r3
 8007920:	3720      	adds	r7, #32
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}

08007926 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8007926:	b580      	push	{r7, lr}
 8007928:	b086      	sub	sp, #24
 800792a:	af00      	add	r7, sp, #0
 800792c:	60f8      	str	r0, [r7, #12]
 800792e:	607a      	str	r2, [r7, #4]
 8007930:	461a      	mov	r2, r3
 8007932:	460b      	mov	r3, r1
 8007934:	72fb      	strb	r3, [r7, #11]
 8007936:	4613      	mov	r3, r2
 8007938:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	799b      	ldrb	r3, [r3, #6]
 800793e:	b2db      	uxtb	r3, r3
 8007940:	2b01      	cmp	r3, #1
 8007942:	d13e      	bne.n	80079c2 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	795b      	ldrb	r3, [r3, #5]
 8007948:	2b01      	cmp	r3, #1
 800794a:	d101      	bne.n	8007950 <HAL_SUBGHZ_WriteBuffer+0x2a>
 800794c:	2302      	movs	r3, #2
 800794e:	e039      	b.n	80079c4 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2201      	movs	r2, #1
 8007954:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007956:	68f8      	ldr	r0, [r7, #12]
 8007958:	f000 f9dc 	bl	8007d14 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800795c:	f7ff fd96 	bl	800748c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8007960:	210e      	movs	r1, #14
 8007962:	68f8      	ldr	r0, [r7, #12]
 8007964:	f000 f928 	bl	8007bb8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007968:	7afb      	ldrb	r3, [r7, #11]
 800796a:	4619      	mov	r1, r3
 800796c:	68f8      	ldr	r0, [r7, #12]
 800796e:	f000 f923 	bl	8007bb8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007972:	2300      	movs	r3, #0
 8007974:	82bb      	strh	r3, [r7, #20]
 8007976:	e00a      	b.n	800798e <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007978:	8abb      	ldrh	r3, [r7, #20]
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	4413      	add	r3, r2
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	4619      	mov	r1, r3
 8007982:	68f8      	ldr	r0, [r7, #12]
 8007984:	f000 f918 	bl	8007bb8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007988:	8abb      	ldrh	r3, [r7, #20]
 800798a:	3301      	adds	r3, #1
 800798c:	82bb      	strh	r3, [r7, #20]
 800798e:	8aba      	ldrh	r2, [r7, #20]
 8007990:	893b      	ldrh	r3, [r7, #8]
 8007992:	429a      	cmp	r2, r3
 8007994:	d3f0      	bcc.n	8007978 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007996:	f7ff fd69 	bl	800746c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800799a:	68f8      	ldr	r0, [r7, #12]
 800799c:	f000 f9de 	bl	8007d5c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d002      	beq.n	80079ae <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 80079a8:	2301      	movs	r3, #1
 80079aa:	75fb      	strb	r3, [r7, #23]
 80079ac:	e001      	b.n	80079b2 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 80079ae:	2300      	movs	r3, #0
 80079b0:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2201      	movs	r2, #1
 80079b6:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2200      	movs	r2, #0
 80079bc:	715a      	strb	r2, [r3, #5]

    return status;
 80079be:	7dfb      	ldrb	r3, [r7, #23]
 80079c0:	e000      	b.n	80079c4 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80079c2:	2302      	movs	r3, #2
  }
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3718      	adds	r7, #24
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b088      	sub	sp, #32
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	607a      	str	r2, [r7, #4]
 80079d6:	461a      	mov	r2, r3
 80079d8:	460b      	mov	r3, r1
 80079da:	72fb      	strb	r3, [r7, #11]
 80079dc:	4613      	mov	r3, r2
 80079de:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	799b      	ldrb	r3, [r3, #6]
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d141      	bne.n	8007a72 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	795b      	ldrb	r3, [r3, #5]
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d101      	bne.n	80079fa <HAL_SUBGHZ_ReadBuffer+0x2e>
 80079f6:	2302      	movs	r3, #2
 80079f8:	e03c      	b.n	8007a74 <HAL_SUBGHZ_ReadBuffer+0xa8>
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2201      	movs	r2, #1
 80079fe:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007a00:	68f8      	ldr	r0, [r7, #12]
 8007a02:	f000 f987 	bl	8007d14 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007a06:	f7ff fd41 	bl	800748c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8007a0a:	211e      	movs	r1, #30
 8007a0c:	68f8      	ldr	r0, [r7, #12]
 8007a0e:	f000 f8d3 	bl	8007bb8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007a12:	7afb      	ldrb	r3, [r7, #11]
 8007a14:	4619      	mov	r1, r3
 8007a16:	68f8      	ldr	r0, [r7, #12]
 8007a18:	f000 f8ce 	bl	8007bb8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007a1c:	2100      	movs	r1, #0
 8007a1e:	68f8      	ldr	r0, [r7, #12]
 8007a20:	f000 f8ca 	bl	8007bb8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007a24:	2300      	movs	r3, #0
 8007a26:	82fb      	strh	r3, [r7, #22]
 8007a28:	e009      	b.n	8007a3e <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007a2a:	69b9      	ldr	r1, [r7, #24]
 8007a2c:	68f8      	ldr	r0, [r7, #12]
 8007a2e:	f000 f919 	bl	8007c64 <SUBGHZSPI_Receive>
      pData++;
 8007a32:	69bb      	ldr	r3, [r7, #24]
 8007a34:	3301      	adds	r3, #1
 8007a36:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007a38:	8afb      	ldrh	r3, [r7, #22]
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	82fb      	strh	r3, [r7, #22]
 8007a3e:	8afa      	ldrh	r2, [r7, #22]
 8007a40:	893b      	ldrh	r3, [r7, #8]
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d3f1      	bcc.n	8007a2a <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007a46:	f7ff fd11 	bl	800746c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007a4a:	68f8      	ldr	r0, [r7, #12]
 8007a4c:	f000 f986 	bl	8007d5c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d002      	beq.n	8007a5e <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	77fb      	strb	r3, [r7, #31]
 8007a5c:	e001      	b.n	8007a62 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2201      	movs	r2, #1
 8007a66:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	715a      	strb	r2, [r3, #5]

    return status;
 8007a6e:	7ffb      	ldrb	r3, [r7, #31]
 8007a70:	e000      	b.n	8007a74 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8007a72:	2302      	movs	r3, #2
  }
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3720      	adds	r7, #32
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8007a84:	2300      	movs	r3, #0
 8007a86:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8007a88:	f107 020c 	add.w	r2, r7, #12
 8007a8c:	2302      	movs	r3, #2
 8007a8e:	2112      	movs	r1, #18
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f7ff fef4 	bl	800787e <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8007a96:	7b3b      	ldrb	r3, [r7, #12]
 8007a98:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8007a9a:	89fb      	ldrh	r3, [r7, #14]
 8007a9c:	021b      	lsls	r3, r3, #8
 8007a9e:	b21a      	sxth	r2, r3
 8007aa0:	7b7b      	ldrb	r3, [r7, #13]
 8007aa2:	b21b      	sxth	r3, r3
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	b21b      	sxth	r3, r3
 8007aa8:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8007aaa:	f107 020c 	add.w	r2, r7, #12
 8007aae:	2302      	movs	r3, #2
 8007ab0:	2102      	movs	r1, #2
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f7ff fe84 	bl	80077c0 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8007ab8:	89fb      	ldrh	r3, [r7, #14]
 8007aba:	f003 0301 	and.w	r3, r3, #1
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d002      	beq.n	8007ac8 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f014 fabe 	bl	801c044 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8007ac8:	89fb      	ldrh	r3, [r7, #14]
 8007aca:	f003 0302 	and.w	r3, r3, #2
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d002      	beq.n	8007ad8 <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f014 fac4 	bl	801c060 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8007ad8:	89fb      	ldrh	r3, [r7, #14]
 8007ada:	f003 0304 	and.w	r3, r3, #4
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d002      	beq.n	8007ae8 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f014 fb14 	bl	801c110 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8007ae8:	89fb      	ldrh	r3, [r7, #14]
 8007aea:	f003 0308 	and.w	r3, r3, #8
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d002      	beq.n	8007af8 <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f014 fb1a 	bl	801c12c <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8007af8:	89fb      	ldrh	r3, [r7, #14]
 8007afa:	f003 0310 	and.w	r3, r3, #16
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d002      	beq.n	8007b08 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f014 fb20 	bl	801c148 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8007b08:	89fb      	ldrh	r3, [r7, #14]
 8007b0a:	f003 0320 	and.w	r3, r3, #32
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d002      	beq.n	8007b18 <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f014 faee 	bl	801c0f4 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8007b18:	89fb      	ldrh	r3, [r7, #14]
 8007b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d002      	beq.n	8007b28 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f014 faaa 	bl	801c07c <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8007b28:	89fb      	ldrh	r3, [r7, #14]
 8007b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d00d      	beq.n	8007b4e <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8007b32:	89fb      	ldrh	r3, [r7, #14]
 8007b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d004      	beq.n	8007b46 <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8007b3c:	2101      	movs	r1, #1
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f014 faaa 	bl	801c098 <HAL_SUBGHZ_CADStatusCallback>
 8007b44:	e003      	b.n	8007b4e <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8007b46:	2100      	movs	r1, #0
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f014 faa5 	bl	801c098 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8007b4e:	89fb      	ldrh	r3, [r7, #14]
 8007b50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d002      	beq.n	8007b5e <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f014 fabb 	bl	801c0d4 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8007b5e:	89fb      	ldrh	r3, [r7, #14]
 8007b60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d002      	beq.n	8007b6e <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f014 fafb 	bl	801c164 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8007b6e:	bf00      	nop
 8007b70:	3710      	adds	r7, #16
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
	...

08007b78 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007b80:	4b0c      	ldr	r3, [pc, #48]	; (8007bb4 <SUBGHZSPI_Init+0x3c>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a0b      	ldr	r2, [pc, #44]	; (8007bb4 <SUBGHZSPI_Init+0x3c>)
 8007b86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b8a:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8007b8c:	4a09      	ldr	r2, [pc, #36]	; (8007bb4 <SUBGHZSPI_Init+0x3c>)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8007b94:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8007b96:	4b07      	ldr	r3, [pc, #28]	; (8007bb4 <SUBGHZSPI_Init+0x3c>)
 8007b98:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8007b9c:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007b9e:	4b05      	ldr	r3, [pc, #20]	; (8007bb4 <SUBGHZSPI_Init+0x3c>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a04      	ldr	r2, [pc, #16]	; (8007bb4 <SUBGHZSPI_Init+0x3c>)
 8007ba4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ba8:	6013      	str	r3, [r2, #0]
}
 8007baa:	bf00      	nop
 8007bac:	370c      	adds	r7, #12
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bc80      	pop	{r7}
 8007bb2:	4770      	bx	lr
 8007bb4:	58010000 	.word	0x58010000

08007bb8 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b087      	sub	sp, #28
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	460b      	mov	r3, r1
 8007bc2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007bc8:	4b23      	ldr	r3, [pc, #140]	; (8007c58 <SUBGHZSPI_Transmit+0xa0>)
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	4613      	mov	r3, r2
 8007bce:	00db      	lsls	r3, r3, #3
 8007bd0:	1a9b      	subs	r3, r3, r2
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	0cdb      	lsrs	r3, r3, #19
 8007bd6:	2264      	movs	r2, #100	; 0x64
 8007bd8:	fb02 f303 	mul.w	r3, r2, r3
 8007bdc:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d105      	bne.n	8007bf0 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8007be4:	2301      	movs	r3, #1
 8007be6:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2201      	movs	r2, #1
 8007bec:	609a      	str	r2, [r3, #8]
      break;
 8007bee:	e008      	b.n	8007c02 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	3b01      	subs	r3, #1
 8007bf4:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007bf6:	4b19      	ldr	r3, [pc, #100]	; (8007c5c <SUBGHZSPI_Transmit+0xa4>)
 8007bf8:	689b      	ldr	r3, [r3, #8]
 8007bfa:	f003 0302 	and.w	r3, r3, #2
 8007bfe:	2b02      	cmp	r3, #2
 8007c00:	d1ed      	bne.n	8007bde <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007c02:	4b17      	ldr	r3, [pc, #92]	; (8007c60 <SUBGHZSPI_Transmit+0xa8>)
 8007c04:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	78fa      	ldrb	r2, [r7, #3]
 8007c0a:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007c0c:	4b12      	ldr	r3, [pc, #72]	; (8007c58 <SUBGHZSPI_Transmit+0xa0>)
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	4613      	mov	r3, r2
 8007c12:	00db      	lsls	r3, r3, #3
 8007c14:	1a9b      	subs	r3, r3, r2
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	0cdb      	lsrs	r3, r3, #19
 8007c1a:	2264      	movs	r2, #100	; 0x64
 8007c1c:	fb02 f303 	mul.w	r3, r2, r3
 8007c20:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d105      	bne.n	8007c34 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	609a      	str	r2, [r3, #8]
      break;
 8007c32:	e008      	b.n	8007c46 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	3b01      	subs	r3, #1
 8007c38:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007c3a:	4b08      	ldr	r3, [pc, #32]	; (8007c5c <SUBGHZSPI_Transmit+0xa4>)
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	f003 0301 	and.w	r3, r3, #1
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	d1ed      	bne.n	8007c22 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8007c46:	4b05      	ldr	r3, [pc, #20]	; (8007c5c <SUBGHZSPI_Transmit+0xa4>)
 8007c48:	68db      	ldr	r3, [r3, #12]

  return status;
 8007c4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	371c      	adds	r7, #28
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bc80      	pop	{r7}
 8007c54:	4770      	bx	lr
 8007c56:	bf00      	nop
 8007c58:	20000000 	.word	0x20000000
 8007c5c:	58010000 	.word	0x58010000
 8007c60:	5801000c 	.word	0x5801000c

08007c64 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b087      	sub	sp, #28
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007c72:	4b25      	ldr	r3, [pc, #148]	; (8007d08 <SUBGHZSPI_Receive+0xa4>)
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	4613      	mov	r3, r2
 8007c78:	00db      	lsls	r3, r3, #3
 8007c7a:	1a9b      	subs	r3, r3, r2
 8007c7c:	009b      	lsls	r3, r3, #2
 8007c7e:	0cdb      	lsrs	r3, r3, #19
 8007c80:	2264      	movs	r2, #100	; 0x64
 8007c82:	fb02 f303 	mul.w	r3, r2, r3
 8007c86:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d105      	bne.n	8007c9a <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2201      	movs	r2, #1
 8007c96:	609a      	str	r2, [r3, #8]
      break;
 8007c98:	e008      	b.n	8007cac <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	3b01      	subs	r3, #1
 8007c9e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007ca0:	4b1a      	ldr	r3, [pc, #104]	; (8007d0c <SUBGHZSPI_Receive+0xa8>)
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	f003 0302 	and.w	r3, r3, #2
 8007ca8:	2b02      	cmp	r3, #2
 8007caa:	d1ed      	bne.n	8007c88 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007cac:	4b18      	ldr	r3, [pc, #96]	; (8007d10 <SUBGHZSPI_Receive+0xac>)
 8007cae:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	22ff      	movs	r2, #255	; 0xff
 8007cb4:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007cb6:	4b14      	ldr	r3, [pc, #80]	; (8007d08 <SUBGHZSPI_Receive+0xa4>)
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	4613      	mov	r3, r2
 8007cbc:	00db      	lsls	r3, r3, #3
 8007cbe:	1a9b      	subs	r3, r3, r2
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	0cdb      	lsrs	r3, r3, #19
 8007cc4:	2264      	movs	r2, #100	; 0x64
 8007cc6:	fb02 f303 	mul.w	r3, r2, r3
 8007cca:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d105      	bne.n	8007cde <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2201      	movs	r2, #1
 8007cda:	609a      	str	r2, [r3, #8]
      break;
 8007cdc:	e008      	b.n	8007cf0 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	3b01      	subs	r3, #1
 8007ce2:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007ce4:	4b09      	ldr	r3, [pc, #36]	; (8007d0c <SUBGHZSPI_Receive+0xa8>)
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	f003 0301 	and.w	r3, r3, #1
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d1ed      	bne.n	8007ccc <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8007cf0:	4b06      	ldr	r3, [pc, #24]	; (8007d0c <SUBGHZSPI_Receive+0xa8>)
 8007cf2:	68db      	ldr	r3, [r3, #12]
 8007cf4:	b2da      	uxtb	r2, r3
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	701a      	strb	r2, [r3, #0]

  return status;
 8007cfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	371c      	adds	r7, #28
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bc80      	pop	{r7}
 8007d04:	4770      	bx	lr
 8007d06:	bf00      	nop
 8007d08:	20000000 	.word	0x20000000
 8007d0c:	58010000 	.word	0x58010000
 8007d10:	5801000c 	.word	0x5801000c

08007d14 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b084      	sub	sp, #16
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	791b      	ldrb	r3, [r3, #4]
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d111      	bne.n	8007d48 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8007d24:	4b0c      	ldr	r3, [pc, #48]	; (8007d58 <SUBGHZ_CheckDeviceReady+0x44>)
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	4613      	mov	r3, r2
 8007d2a:	005b      	lsls	r3, r3, #1
 8007d2c:	4413      	add	r3, r2
 8007d2e:	00db      	lsls	r3, r3, #3
 8007d30:	0c1b      	lsrs	r3, r3, #16
 8007d32:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007d34:	f7ff fbaa 	bl	800748c <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	3b01      	subs	r3, #1
 8007d3c:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d1f9      	bne.n	8007d38 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007d44:	f7ff fb92 	bl	800746c <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f000 f807 	bl	8007d5c <SUBGHZ_WaitOnBusy>
 8007d4e:	4603      	mov	r3, r0
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3710      	adds	r7, #16
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	20000000 	.word	0x20000000

08007d5c <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b086      	sub	sp, #24
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8007d64:	2300      	movs	r3, #0
 8007d66:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8007d68:	4b12      	ldr	r3, [pc, #72]	; (8007db4 <SUBGHZ_WaitOnBusy+0x58>)
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	4613      	mov	r3, r2
 8007d6e:	005b      	lsls	r3, r3, #1
 8007d70:	4413      	add	r3, r2
 8007d72:	00db      	lsls	r3, r3, #3
 8007d74:	0d1b      	lsrs	r3, r3, #20
 8007d76:	2264      	movs	r2, #100	; 0x64
 8007d78:	fb02 f303 	mul.w	r3, r2, r3
 8007d7c:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8007d7e:	f7ff fbb3 	bl	80074e8 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8007d82:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d105      	bne.n	8007d96 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2202      	movs	r2, #2
 8007d92:	609a      	str	r2, [r3, #8]
      break;
 8007d94:	e009      	b.n	8007daa <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	3b01      	subs	r3, #1
 8007d9a:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8007d9c:	f7ff fb92 	bl	80074c4 <LL_PWR_IsActiveFlag_RFBUSYS>
 8007da0:	4602      	mov	r2, r0
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	4013      	ands	r3, r2
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d0e9      	beq.n	8007d7e <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8007daa:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3718      	adds	r7, #24
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	20000000 	.word	0x20000000

08007db8 <LL_RCC_GetUSARTClockSource>:
{
 8007db8:	b480      	push	{r7}
 8007dba:	b083      	sub	sp, #12
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8007dc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007dc4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	401a      	ands	r2, r3
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	041b      	lsls	r3, r3, #16
 8007dd0:	4313      	orrs	r3, r2
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	370c      	adds	r7, #12
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bc80      	pop	{r7}
 8007dda:	4770      	bx	lr

08007ddc <LL_RCC_GetLPUARTClockSource>:
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b083      	sub	sp, #12
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007de4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007de8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	4013      	ands	r3, r2
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	370c      	adds	r7, #12
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bc80      	pop	{r7}
 8007df8:	4770      	bx	lr

08007dfa <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007dfa:	b580      	push	{r7, lr}
 8007dfc:	b082      	sub	sp, #8
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d101      	bne.n	8007e0c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	e042      	b.n	8007e92 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d106      	bne.n	8007e24 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f7fa fd2a 	bl	8002878 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2224      	movs	r2, #36	; 0x24
 8007e28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	681a      	ldr	r2, [r3, #0]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f022 0201 	bic.w	r2, r2, #1
 8007e3a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 fc3b 	bl	80086b8 <UART_SetConfig>
 8007e42:	4603      	mov	r3, r0
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d101      	bne.n	8007e4c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	e022      	b.n	8007e92 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d002      	beq.n	8007e5a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f000 fea3 	bl	8008ba0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	685a      	ldr	r2, [r3, #4]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e68:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	689a      	ldr	r2, [r3, #8]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e78:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f042 0201 	orr.w	r2, r2, #1
 8007e88:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 ff29 	bl	8008ce2 <UART_CheckIdleState>
 8007e90:	4603      	mov	r3, r0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3708      	adds	r7, #8
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
	...

08007e9c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b08a      	sub	sp, #40	; 0x28
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	60f8      	str	r0, [r7, #12]
 8007ea4:	60b9      	str	r1, [r7, #8]
 8007ea6:	4613      	mov	r3, r2
 8007ea8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007eb0:	2b20      	cmp	r3, #32
 8007eb2:	d137      	bne.n	8007f24 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d002      	beq.n	8007ec0 <HAL_UART_Receive_IT+0x24>
 8007eba:	88fb      	ldrh	r3, [r7, #6]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d101      	bne.n	8007ec4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	e030      	b.n	8007f26 <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a18      	ldr	r2, [pc, #96]	; (8007f30 <HAL_UART_Receive_IT+0x94>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d01f      	beq.n	8007f14 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d018      	beq.n	8007f14 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	e853 3f00 	ldrex	r3, [r3]
 8007eee:	613b      	str	r3, [r7, #16]
   return(result);
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007ef6:	627b      	str	r3, [r7, #36]	; 0x24
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	461a      	mov	r2, r3
 8007efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f00:	623b      	str	r3, [r7, #32]
 8007f02:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f04:	69f9      	ldr	r1, [r7, #28]
 8007f06:	6a3a      	ldr	r2, [r7, #32]
 8007f08:	e841 2300 	strex	r3, r2, [r1]
 8007f0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f0e:	69bb      	ldr	r3, [r7, #24]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d1e6      	bne.n	8007ee2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007f14:	88fb      	ldrh	r3, [r7, #6]
 8007f16:	461a      	mov	r2, r3
 8007f18:	68b9      	ldr	r1, [r7, #8]
 8007f1a:	68f8      	ldr	r0, [r7, #12]
 8007f1c:	f000 fff8 	bl	8008f10 <UART_Start_Receive_IT>
 8007f20:	4603      	mov	r3, r0
 8007f22:	e000      	b.n	8007f26 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007f24:	2302      	movs	r3, #2
  }
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3728      	adds	r7, #40	; 0x28
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
 8007f2e:	bf00      	nop
 8007f30:	40008000 	.word	0x40008000

08007f34 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b08a      	sub	sp, #40	; 0x28
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	60f8      	str	r0, [r7, #12]
 8007f3c:	60b9      	str	r1, [r7, #8]
 8007f3e:	4613      	mov	r3, r2
 8007f40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f48:	2b20      	cmp	r3, #32
 8007f4a:	d167      	bne.n	800801c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d002      	beq.n	8007f58 <HAL_UART_Transmit_DMA+0x24>
 8007f52:	88fb      	ldrh	r3, [r7, #6]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d101      	bne.n	8007f5c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	e060      	b.n	800801e <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	68ba      	ldr	r2, [r7, #8]
 8007f60:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	88fa      	ldrh	r2, [r7, #6]
 8007f66:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	88fa      	ldrh	r2, [r7, #6]
 8007f6e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2200      	movs	r2, #0
 8007f76:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2221      	movs	r2, #33	; 0x21
 8007f7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d028      	beq.n	8007fdc <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f8e:	4a26      	ldr	r2, [pc, #152]	; (8008028 <HAL_UART_Transmit_DMA+0xf4>)
 8007f90:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f96:	4a25      	ldr	r2, [pc, #148]	; (800802c <HAL_UART_Transmit_DMA+0xf8>)
 8007f98:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f9e:	4a24      	ldr	r2, [pc, #144]	; (8008030 <HAL_UART_Transmit_DMA+0xfc>)
 8007fa0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	3328      	adds	r3, #40	; 0x28
 8007fba:	461a      	mov	r2, r3
 8007fbc:	88fb      	ldrh	r3, [r7, #6]
 8007fbe:	f7fc fa27 	bl	8004410 <HAL_DMA_Start_IT>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d009      	beq.n	8007fdc <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2210      	movs	r2, #16
 8007fcc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2220      	movs	r2, #32
 8007fd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	e020      	b.n	800801e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	2240      	movs	r2, #64	; 0x40
 8007fe2:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	3308      	adds	r3, #8
 8007fea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	e853 3f00 	ldrex	r3, [r3]
 8007ff2:	613b      	str	r3, [r7, #16]
   return(result);
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ffa:	627b      	str	r3, [r7, #36]	; 0x24
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	3308      	adds	r3, #8
 8008002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008004:	623a      	str	r2, [r7, #32]
 8008006:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008008:	69f9      	ldr	r1, [r7, #28]
 800800a:	6a3a      	ldr	r2, [r7, #32]
 800800c:	e841 2300 	strex	r3, r2, [r1]
 8008010:	61bb      	str	r3, [r7, #24]
   return(result);
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d1e5      	bne.n	8007fe4 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008018:	2300      	movs	r3, #0
 800801a:	e000      	b.n	800801e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800801c:	2302      	movs	r3, #2
  }
}
 800801e:	4618      	mov	r0, r3
 8008020:	3728      	adds	r7, #40	; 0x28
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}
 8008026:	bf00      	nop
 8008028:	0800929b 	.word	0x0800929b
 800802c:	08009335 	.word	0x08009335
 8008030:	08009351 	.word	0x08009351

08008034 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b0ba      	sub	sp, #232	; 0xe8
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	69db      	ldr	r3, [r3, #28]
 8008042:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800805a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800805e:	f640 030f 	movw	r3, #2063	; 0x80f
 8008062:	4013      	ands	r3, r2
 8008064:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008068:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800806c:	2b00      	cmp	r3, #0
 800806e:	d11b      	bne.n	80080a8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008070:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008074:	f003 0320 	and.w	r3, r3, #32
 8008078:	2b00      	cmp	r3, #0
 800807a:	d015      	beq.n	80080a8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800807c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008080:	f003 0320 	and.w	r3, r3, #32
 8008084:	2b00      	cmp	r3, #0
 8008086:	d105      	bne.n	8008094 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008088:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800808c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008090:	2b00      	cmp	r3, #0
 8008092:	d009      	beq.n	80080a8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008098:	2b00      	cmp	r3, #0
 800809a:	f000 82e3 	beq.w	8008664 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	4798      	blx	r3
      }
      return;
 80080a6:	e2dd      	b.n	8008664 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80080a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	f000 8123 	beq.w	80082f8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80080b2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80080b6:	4b8d      	ldr	r3, [pc, #564]	; (80082ec <HAL_UART_IRQHandler+0x2b8>)
 80080b8:	4013      	ands	r3, r2
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d106      	bne.n	80080cc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80080be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80080c2:	4b8b      	ldr	r3, [pc, #556]	; (80082f0 <HAL_UART_IRQHandler+0x2bc>)
 80080c4:	4013      	ands	r3, r2
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	f000 8116 	beq.w	80082f8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80080cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080d0:	f003 0301 	and.w	r3, r3, #1
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d011      	beq.n	80080fc <HAL_UART_IRQHandler+0xc8>
 80080d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d00b      	beq.n	80080fc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	2201      	movs	r2, #1
 80080ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080f2:	f043 0201 	orr.w	r2, r3, #1
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80080fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008100:	f003 0302 	and.w	r3, r3, #2
 8008104:	2b00      	cmp	r3, #0
 8008106:	d011      	beq.n	800812c <HAL_UART_IRQHandler+0xf8>
 8008108:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800810c:	f003 0301 	and.w	r3, r3, #1
 8008110:	2b00      	cmp	r3, #0
 8008112:	d00b      	beq.n	800812c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	2202      	movs	r2, #2
 800811a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008122:	f043 0204 	orr.w	r2, r3, #4
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800812c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008130:	f003 0304 	and.w	r3, r3, #4
 8008134:	2b00      	cmp	r3, #0
 8008136:	d011      	beq.n	800815c <HAL_UART_IRQHandler+0x128>
 8008138:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800813c:	f003 0301 	and.w	r3, r3, #1
 8008140:	2b00      	cmp	r3, #0
 8008142:	d00b      	beq.n	800815c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	2204      	movs	r2, #4
 800814a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008152:	f043 0202 	orr.w	r2, r3, #2
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800815c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008160:	f003 0308 	and.w	r3, r3, #8
 8008164:	2b00      	cmp	r3, #0
 8008166:	d017      	beq.n	8008198 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800816c:	f003 0320 	and.w	r3, r3, #32
 8008170:	2b00      	cmp	r3, #0
 8008172:	d105      	bne.n	8008180 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008174:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008178:	4b5c      	ldr	r3, [pc, #368]	; (80082ec <HAL_UART_IRQHandler+0x2b8>)
 800817a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800817c:	2b00      	cmp	r3, #0
 800817e:	d00b      	beq.n	8008198 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	2208      	movs	r2, #8
 8008186:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800818e:	f043 0208 	orr.w	r2, r3, #8
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800819c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d012      	beq.n	80081ca <HAL_UART_IRQHandler+0x196>
 80081a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d00c      	beq.n	80081ca <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80081b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081c0:	f043 0220 	orr.w	r2, r3, #32
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	f000 8249 	beq.w	8008668 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80081d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081da:	f003 0320 	and.w	r3, r3, #32
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d013      	beq.n	800820a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80081e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081e6:	f003 0320 	and.w	r3, r3, #32
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d105      	bne.n	80081fa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80081ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d007      	beq.n	800820a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d003      	beq.n	800820a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008210:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	689b      	ldr	r3, [r3, #8]
 800821a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800821e:	2b40      	cmp	r3, #64	; 0x40
 8008220:	d005      	beq.n	800822e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008222:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008226:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800822a:	2b00      	cmp	r3, #0
 800822c:	d054      	beq.n	80082d8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 ffce 	bl	80091d0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	689b      	ldr	r3, [r3, #8]
 800823a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800823e:	2b40      	cmp	r3, #64	; 0x40
 8008240:	d146      	bne.n	80082d0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	3308      	adds	r3, #8
 8008248:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800824c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008250:	e853 3f00 	ldrex	r3, [r3]
 8008254:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008258:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800825c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008260:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	3308      	adds	r3, #8
 800826a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800826e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008272:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008276:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800827a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800827e:	e841 2300 	strex	r3, r2, [r1]
 8008282:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008286:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800828a:	2b00      	cmp	r3, #0
 800828c:	d1d9      	bne.n	8008242 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008294:	2b00      	cmp	r3, #0
 8008296:	d017      	beq.n	80082c8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800829e:	4a15      	ldr	r2, [pc, #84]	; (80082f4 <HAL_UART_IRQHandler+0x2c0>)
 80082a0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082a8:	4618      	mov	r0, r3
 80082aa:	f7fc f98d 	bl	80045c8 <HAL_DMA_Abort_IT>
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d019      	beq.n	80082e8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80082c2:	4610      	mov	r0, r2
 80082c4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082c6:	e00f      	b.n	80082e8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 f9e0 	bl	800868e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082ce:	e00b      	b.n	80082e8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f000 f9dc 	bl	800868e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082d6:	e007      	b.n	80082e8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 f9d8 	bl	800868e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80082e6:	e1bf      	b.n	8008668 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082e8:	bf00      	nop
    return;
 80082ea:	e1bd      	b.n	8008668 <HAL_UART_IRQHandler+0x634>
 80082ec:	10000001 	.word	0x10000001
 80082f0:	04000120 	.word	0x04000120
 80082f4:	080093d1 	.word	0x080093d1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	f040 8153 	bne.w	80085a8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008306:	f003 0310 	and.w	r3, r3, #16
 800830a:	2b00      	cmp	r3, #0
 800830c:	f000 814c 	beq.w	80085a8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008310:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008314:	f003 0310 	and.w	r3, r3, #16
 8008318:	2b00      	cmp	r3, #0
 800831a:	f000 8145 	beq.w	80085a8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	2210      	movs	r2, #16
 8008324:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	689b      	ldr	r3, [r3, #8]
 800832c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008330:	2b40      	cmp	r3, #64	; 0x40
 8008332:	f040 80bb 	bne.w	80084ac <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008344:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008348:	2b00      	cmp	r3, #0
 800834a:	f000 818f 	beq.w	800866c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008354:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008358:	429a      	cmp	r2, r3
 800835a:	f080 8187 	bcs.w	800866c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008364:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f003 0320 	and.w	r3, r3, #32
 8008376:	2b00      	cmp	r3, #0
 8008378:	f040 8087 	bne.w	800848a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008384:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008388:	e853 3f00 	ldrex	r3, [r3]
 800838c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008390:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008394:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008398:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	461a      	mov	r2, r3
 80083a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80083a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80083aa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80083b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80083b6:	e841 2300 	strex	r3, r2, [r1]
 80083ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80083be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d1da      	bne.n	800837c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	3308      	adds	r3, #8
 80083cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083d0:	e853 3f00 	ldrex	r3, [r3]
 80083d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80083d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80083d8:	f023 0301 	bic.w	r3, r3, #1
 80083dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	3308      	adds	r3, #8
 80083e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80083ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80083ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80083f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80083f6:	e841 2300 	strex	r3, r2, [r1]
 80083fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80083fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d1e1      	bne.n	80083c6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	3308      	adds	r3, #8
 8008408:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800840a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800840c:	e853 3f00 	ldrex	r3, [r3]
 8008410:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008412:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008414:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008418:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	3308      	adds	r3, #8
 8008422:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008426:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008428:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800842a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800842c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800842e:	e841 2300 	strex	r3, r2, [r1]
 8008432:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008434:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008436:	2b00      	cmp	r3, #0
 8008438:	d1e3      	bne.n	8008402 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2220      	movs	r2, #32
 800843e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2200      	movs	r2, #0
 8008446:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800844e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008450:	e853 3f00 	ldrex	r3, [r3]
 8008454:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008456:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008458:	f023 0310 	bic.w	r3, r3, #16
 800845c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	461a      	mov	r2, r3
 8008466:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800846a:	65bb      	str	r3, [r7, #88]	; 0x58
 800846c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800846e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008470:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008472:	e841 2300 	strex	r3, r2, [r1]
 8008476:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008478:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800847a:	2b00      	cmp	r3, #0
 800847c:	d1e4      	bne.n	8008448 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008484:	4618      	mov	r0, r3
 8008486:	f7fc f841 	bl	800450c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2202      	movs	r2, #2
 800848e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800849c:	b29b      	uxth	r3, r3
 800849e:	1ad3      	subs	r3, r2, r3
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	4619      	mov	r1, r3
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 f8fb 	bl	80086a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80084aa:	e0df      	b.n	800866c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80084b8:	b29b      	uxth	r3, r3
 80084ba:	1ad3      	subs	r3, r2, r3
 80084bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	f000 80d1 	beq.w	8008670 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80084ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	f000 80cc 	beq.w	8008670 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e0:	e853 3f00 	ldrex	r3, [r3]
 80084e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80084e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	461a      	mov	r2, r3
 80084f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80084fa:	647b      	str	r3, [r7, #68]	; 0x44
 80084fc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008500:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008502:	e841 2300 	strex	r3, r2, [r1]
 8008506:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800850a:	2b00      	cmp	r3, #0
 800850c:	d1e4      	bne.n	80084d8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	3308      	adds	r3, #8
 8008514:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008518:	e853 3f00 	ldrex	r3, [r3]
 800851c:	623b      	str	r3, [r7, #32]
   return(result);
 800851e:	6a3b      	ldr	r3, [r7, #32]
 8008520:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008524:	f023 0301 	bic.w	r3, r3, #1
 8008528:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	3308      	adds	r3, #8
 8008532:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008536:	633a      	str	r2, [r7, #48]	; 0x30
 8008538:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800853a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800853c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800853e:	e841 2300 	strex	r3, r2, [r1]
 8008542:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008546:	2b00      	cmp	r3, #0
 8008548:	d1e1      	bne.n	800850e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2220      	movs	r2, #32
 800854e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2200      	movs	r2, #0
 8008556:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	e853 3f00 	ldrex	r3, [r3]
 800856a:	60fb      	str	r3, [r7, #12]
   return(result);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f023 0310 	bic.w	r3, r3, #16
 8008572:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	461a      	mov	r2, r3
 800857c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008580:	61fb      	str	r3, [r7, #28]
 8008582:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008584:	69b9      	ldr	r1, [r7, #24]
 8008586:	69fa      	ldr	r2, [r7, #28]
 8008588:	e841 2300 	strex	r3, r2, [r1]
 800858c:	617b      	str	r3, [r7, #20]
   return(result);
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d1e4      	bne.n	800855e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2202      	movs	r2, #2
 8008598:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800859a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800859e:	4619      	mov	r1, r3
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 f87d 	bl	80086a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80085a6:	e063      	b.n	8008670 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80085a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d00e      	beq.n	80085d2 <HAL_UART_IRQHandler+0x59e>
 80085b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80085b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d008      	beq.n	80085d2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80085c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f001 fc5e 	bl	8009e8c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80085d0:	e051      	b.n	8008676 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80085d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d014      	beq.n	8008608 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80085de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d105      	bne.n	80085f6 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80085ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80085ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d008      	beq.n	8008608 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d03a      	beq.n	8008674 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	4798      	blx	r3
    }
    return;
 8008606:	e035      	b.n	8008674 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800860c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008610:	2b00      	cmp	r3, #0
 8008612:	d009      	beq.n	8008628 <HAL_UART_IRQHandler+0x5f4>
 8008614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800861c:	2b00      	cmp	r3, #0
 800861e:	d003      	beq.n	8008628 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 feeb 	bl	80093fc <UART_EndTransmit_IT>
    return;
 8008626:	e026      	b.n	8008676 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800862c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008630:	2b00      	cmp	r3, #0
 8008632:	d009      	beq.n	8008648 <HAL_UART_IRQHandler+0x614>
 8008634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008638:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800863c:	2b00      	cmp	r3, #0
 800863e:	d003      	beq.n	8008648 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f001 fc35 	bl	8009eb0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008646:	e016      	b.n	8008676 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800864c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008650:	2b00      	cmp	r3, #0
 8008652:	d010      	beq.n	8008676 <HAL_UART_IRQHandler+0x642>
 8008654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008658:	2b00      	cmp	r3, #0
 800865a:	da0c      	bge.n	8008676 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f001 fc1e 	bl	8009e9e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008662:	e008      	b.n	8008676 <HAL_UART_IRQHandler+0x642>
      return;
 8008664:	bf00      	nop
 8008666:	e006      	b.n	8008676 <HAL_UART_IRQHandler+0x642>
    return;
 8008668:	bf00      	nop
 800866a:	e004      	b.n	8008676 <HAL_UART_IRQHandler+0x642>
      return;
 800866c:	bf00      	nop
 800866e:	e002      	b.n	8008676 <HAL_UART_IRQHandler+0x642>
      return;
 8008670:	bf00      	nop
 8008672:	e000      	b.n	8008676 <HAL_UART_IRQHandler+0x642>
    return;
 8008674:	bf00      	nop
  }
}
 8008676:	37e8      	adds	r7, #232	; 0xe8
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800867c:	b480      	push	{r7}
 800867e:	b083      	sub	sp, #12
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008684:	bf00      	nop
 8008686:	370c      	adds	r7, #12
 8008688:	46bd      	mov	sp, r7
 800868a:	bc80      	pop	{r7}
 800868c:	4770      	bx	lr

0800868e <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800868e:	b480      	push	{r7}
 8008690:	b083      	sub	sp, #12
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008696:	bf00      	nop
 8008698:	370c      	adds	r7, #12
 800869a:	46bd      	mov	sp, r7
 800869c:	bc80      	pop	{r7}
 800869e:	4770      	bx	lr

080086a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b083      	sub	sp, #12
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	460b      	mov	r3, r1
 80086aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80086ac:	bf00      	nop
 80086ae:	370c      	adds	r7, #12
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bc80      	pop	{r7}
 80086b4:	4770      	bx	lr
	...

080086b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80086bc:	b08c      	sub	sp, #48	; 0x30
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80086c2:	2300      	movs	r3, #0
 80086c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	689a      	ldr	r2, [r3, #8]
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	691b      	ldr	r3, [r3, #16]
 80086d0:	431a      	orrs	r2, r3
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	695b      	ldr	r3, [r3, #20]
 80086d6:	431a      	orrs	r2, r3
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	69db      	ldr	r3, [r3, #28]
 80086dc:	4313      	orrs	r3, r2
 80086de:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	681a      	ldr	r2, [r3, #0]
 80086e6:	4b94      	ldr	r3, [pc, #592]	; (8008938 <UART_SetConfig+0x280>)
 80086e8:	4013      	ands	r3, r2
 80086ea:	697a      	ldr	r2, [r7, #20]
 80086ec:	6812      	ldr	r2, [r2, #0]
 80086ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80086f0:	430b      	orrs	r3, r1
 80086f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	68da      	ldr	r2, [r3, #12]
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	430a      	orrs	r2, r1
 8008708:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	699b      	ldr	r3, [r3, #24]
 800870e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a89      	ldr	r2, [pc, #548]	; (800893c <UART_SetConfig+0x284>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d004      	beq.n	8008724 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	6a1b      	ldr	r3, [r3, #32]
 800871e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008720:	4313      	orrs	r3, r2
 8008722:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800872e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008732:	697a      	ldr	r2, [r7, #20]
 8008734:	6812      	ldr	r2, [r2, #0]
 8008736:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008738:	430b      	orrs	r3, r1
 800873a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008742:	f023 010f 	bic.w	r1, r3, #15
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	430a      	orrs	r2, r1
 8008750:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a7a      	ldr	r2, [pc, #488]	; (8008940 <UART_SetConfig+0x288>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d127      	bne.n	80087ac <UART_SetConfig+0xf4>
 800875c:	2003      	movs	r0, #3
 800875e:	f7ff fb2b 	bl	8007db8 <LL_RCC_GetUSARTClockSource>
 8008762:	4603      	mov	r3, r0
 8008764:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8008768:	2b03      	cmp	r3, #3
 800876a:	d81b      	bhi.n	80087a4 <UART_SetConfig+0xec>
 800876c:	a201      	add	r2, pc, #4	; (adr r2, 8008774 <UART_SetConfig+0xbc>)
 800876e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008772:	bf00      	nop
 8008774:	08008785 	.word	0x08008785
 8008778:	08008795 	.word	0x08008795
 800877c:	0800878d 	.word	0x0800878d
 8008780:	0800879d 	.word	0x0800879d
 8008784:	2301      	movs	r3, #1
 8008786:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800878a:	e080      	b.n	800888e <UART_SetConfig+0x1d6>
 800878c:	2302      	movs	r3, #2
 800878e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008792:	e07c      	b.n	800888e <UART_SetConfig+0x1d6>
 8008794:	2304      	movs	r3, #4
 8008796:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800879a:	e078      	b.n	800888e <UART_SetConfig+0x1d6>
 800879c:	2308      	movs	r3, #8
 800879e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087a2:	e074      	b.n	800888e <UART_SetConfig+0x1d6>
 80087a4:	2310      	movs	r3, #16
 80087a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087aa:	e070      	b.n	800888e <UART_SetConfig+0x1d6>
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a64      	ldr	r2, [pc, #400]	; (8008944 <UART_SetConfig+0x28c>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d138      	bne.n	8008828 <UART_SetConfig+0x170>
 80087b6:	200c      	movs	r0, #12
 80087b8:	f7ff fafe 	bl	8007db8 <LL_RCC_GetUSARTClockSource>
 80087bc:	4603      	mov	r3, r0
 80087be:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80087c2:	2b0c      	cmp	r3, #12
 80087c4:	d82c      	bhi.n	8008820 <UART_SetConfig+0x168>
 80087c6:	a201      	add	r2, pc, #4	; (adr r2, 80087cc <UART_SetConfig+0x114>)
 80087c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087cc:	08008801 	.word	0x08008801
 80087d0:	08008821 	.word	0x08008821
 80087d4:	08008821 	.word	0x08008821
 80087d8:	08008821 	.word	0x08008821
 80087dc:	08008811 	.word	0x08008811
 80087e0:	08008821 	.word	0x08008821
 80087e4:	08008821 	.word	0x08008821
 80087e8:	08008821 	.word	0x08008821
 80087ec:	08008809 	.word	0x08008809
 80087f0:	08008821 	.word	0x08008821
 80087f4:	08008821 	.word	0x08008821
 80087f8:	08008821 	.word	0x08008821
 80087fc:	08008819 	.word	0x08008819
 8008800:	2300      	movs	r3, #0
 8008802:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008806:	e042      	b.n	800888e <UART_SetConfig+0x1d6>
 8008808:	2302      	movs	r3, #2
 800880a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800880e:	e03e      	b.n	800888e <UART_SetConfig+0x1d6>
 8008810:	2304      	movs	r3, #4
 8008812:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008816:	e03a      	b.n	800888e <UART_SetConfig+0x1d6>
 8008818:	2308      	movs	r3, #8
 800881a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800881e:	e036      	b.n	800888e <UART_SetConfig+0x1d6>
 8008820:	2310      	movs	r3, #16
 8008822:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008826:	e032      	b.n	800888e <UART_SetConfig+0x1d6>
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a43      	ldr	r2, [pc, #268]	; (800893c <UART_SetConfig+0x284>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d12a      	bne.n	8008888 <UART_SetConfig+0x1d0>
 8008832:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008836:	f7ff fad1 	bl	8007ddc <LL_RCC_GetLPUARTClockSource>
 800883a:	4603      	mov	r3, r0
 800883c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008840:	d01a      	beq.n	8008878 <UART_SetConfig+0x1c0>
 8008842:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008846:	d81b      	bhi.n	8008880 <UART_SetConfig+0x1c8>
 8008848:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800884c:	d00c      	beq.n	8008868 <UART_SetConfig+0x1b0>
 800884e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008852:	d815      	bhi.n	8008880 <UART_SetConfig+0x1c8>
 8008854:	2b00      	cmp	r3, #0
 8008856:	d003      	beq.n	8008860 <UART_SetConfig+0x1a8>
 8008858:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800885c:	d008      	beq.n	8008870 <UART_SetConfig+0x1b8>
 800885e:	e00f      	b.n	8008880 <UART_SetConfig+0x1c8>
 8008860:	2300      	movs	r3, #0
 8008862:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008866:	e012      	b.n	800888e <UART_SetConfig+0x1d6>
 8008868:	2302      	movs	r3, #2
 800886a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800886e:	e00e      	b.n	800888e <UART_SetConfig+0x1d6>
 8008870:	2304      	movs	r3, #4
 8008872:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008876:	e00a      	b.n	800888e <UART_SetConfig+0x1d6>
 8008878:	2308      	movs	r3, #8
 800887a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800887e:	e006      	b.n	800888e <UART_SetConfig+0x1d6>
 8008880:	2310      	movs	r3, #16
 8008882:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008886:	e002      	b.n	800888e <UART_SetConfig+0x1d6>
 8008888:	2310      	movs	r3, #16
 800888a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a2a      	ldr	r2, [pc, #168]	; (800893c <UART_SetConfig+0x284>)
 8008894:	4293      	cmp	r3, r2
 8008896:	f040 80a4 	bne.w	80089e2 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800889a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800889e:	2b08      	cmp	r3, #8
 80088a0:	d823      	bhi.n	80088ea <UART_SetConfig+0x232>
 80088a2:	a201      	add	r2, pc, #4	; (adr r2, 80088a8 <UART_SetConfig+0x1f0>)
 80088a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088a8:	080088cd 	.word	0x080088cd
 80088ac:	080088eb 	.word	0x080088eb
 80088b0:	080088d5 	.word	0x080088d5
 80088b4:	080088eb 	.word	0x080088eb
 80088b8:	080088db 	.word	0x080088db
 80088bc:	080088eb 	.word	0x080088eb
 80088c0:	080088eb 	.word	0x080088eb
 80088c4:	080088eb 	.word	0x080088eb
 80088c8:	080088e3 	.word	0x080088e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80088cc:	f7fd fe76 	bl	80065bc <HAL_RCC_GetPCLK1Freq>
 80088d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80088d2:	e010      	b.n	80088f6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80088d4:	4b1c      	ldr	r3, [pc, #112]	; (8008948 <UART_SetConfig+0x290>)
 80088d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80088d8:	e00d      	b.n	80088f6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80088da:	f7fd fdbb 	bl	8006454 <HAL_RCC_GetSysClockFreq>
 80088de:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80088e0:	e009      	b.n	80088f6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80088e8:	e005      	b.n	80088f6 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80088ea:	2300      	movs	r3, #0
 80088ec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80088ee:	2301      	movs	r3, #1
 80088f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80088f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80088f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	f000 8137 	beq.w	8008b6c <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008902:	4a12      	ldr	r2, [pc, #72]	; (800894c <UART_SetConfig+0x294>)
 8008904:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008908:	461a      	mov	r2, r3
 800890a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800890c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008910:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	685a      	ldr	r2, [r3, #4]
 8008916:	4613      	mov	r3, r2
 8008918:	005b      	lsls	r3, r3, #1
 800891a:	4413      	add	r3, r2
 800891c:	69ba      	ldr	r2, [r7, #24]
 800891e:	429a      	cmp	r2, r3
 8008920:	d305      	bcc.n	800892e <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	685b      	ldr	r3, [r3, #4]
 8008926:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008928:	69ba      	ldr	r2, [r7, #24]
 800892a:	429a      	cmp	r2, r3
 800892c:	d910      	bls.n	8008950 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800892e:	2301      	movs	r3, #1
 8008930:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008934:	e11a      	b.n	8008b6c <UART_SetConfig+0x4b4>
 8008936:	bf00      	nop
 8008938:	cfff69f3 	.word	0xcfff69f3
 800893c:	40008000 	.word	0x40008000
 8008940:	40013800 	.word	0x40013800
 8008944:	40004400 	.word	0x40004400
 8008948:	00f42400 	.word	0x00f42400
 800894c:	0801e5ec 	.word	0x0801e5ec
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008952:	2200      	movs	r2, #0
 8008954:	60bb      	str	r3, [r7, #8]
 8008956:	60fa      	str	r2, [r7, #12]
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800895c:	4a8e      	ldr	r2, [pc, #568]	; (8008b98 <UART_SetConfig+0x4e0>)
 800895e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008962:	b29b      	uxth	r3, r3
 8008964:	2200      	movs	r2, #0
 8008966:	603b      	str	r3, [r7, #0]
 8008968:	607a      	str	r2, [r7, #4]
 800896a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800896e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008972:	f7f8 f919 	bl	8000ba8 <__aeabi_uldivmod>
 8008976:	4602      	mov	r2, r0
 8008978:	460b      	mov	r3, r1
 800897a:	4610      	mov	r0, r2
 800897c:	4619      	mov	r1, r3
 800897e:	f04f 0200 	mov.w	r2, #0
 8008982:	f04f 0300 	mov.w	r3, #0
 8008986:	020b      	lsls	r3, r1, #8
 8008988:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800898c:	0202      	lsls	r2, r0, #8
 800898e:	6979      	ldr	r1, [r7, #20]
 8008990:	6849      	ldr	r1, [r1, #4]
 8008992:	0849      	lsrs	r1, r1, #1
 8008994:	2000      	movs	r0, #0
 8008996:	460c      	mov	r4, r1
 8008998:	4605      	mov	r5, r0
 800899a:	eb12 0804 	adds.w	r8, r2, r4
 800899e:	eb43 0905 	adc.w	r9, r3, r5
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	2200      	movs	r2, #0
 80089a8:	469a      	mov	sl, r3
 80089aa:	4693      	mov	fp, r2
 80089ac:	4652      	mov	r2, sl
 80089ae:	465b      	mov	r3, fp
 80089b0:	4640      	mov	r0, r8
 80089b2:	4649      	mov	r1, r9
 80089b4:	f7f8 f8f8 	bl	8000ba8 <__aeabi_uldivmod>
 80089b8:	4602      	mov	r2, r0
 80089ba:	460b      	mov	r3, r1
 80089bc:	4613      	mov	r3, r2
 80089be:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80089c0:	6a3b      	ldr	r3, [r7, #32]
 80089c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089c6:	d308      	bcc.n	80089da <UART_SetConfig+0x322>
 80089c8:	6a3b      	ldr	r3, [r7, #32]
 80089ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089ce:	d204      	bcs.n	80089da <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	6a3a      	ldr	r2, [r7, #32]
 80089d6:	60da      	str	r2, [r3, #12]
 80089d8:	e0c8      	b.n	8008b6c <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80089da:	2301      	movs	r3, #1
 80089dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80089e0:	e0c4      	b.n	8008b6c <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	69db      	ldr	r3, [r3, #28]
 80089e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089ea:	d167      	bne.n	8008abc <UART_SetConfig+0x404>
  {
    switch (clocksource)
 80089ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80089f0:	2b08      	cmp	r3, #8
 80089f2:	d828      	bhi.n	8008a46 <UART_SetConfig+0x38e>
 80089f4:	a201      	add	r2, pc, #4	; (adr r2, 80089fc <UART_SetConfig+0x344>)
 80089f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089fa:	bf00      	nop
 80089fc:	08008a21 	.word	0x08008a21
 8008a00:	08008a29 	.word	0x08008a29
 8008a04:	08008a31 	.word	0x08008a31
 8008a08:	08008a47 	.word	0x08008a47
 8008a0c:	08008a37 	.word	0x08008a37
 8008a10:	08008a47 	.word	0x08008a47
 8008a14:	08008a47 	.word	0x08008a47
 8008a18:	08008a47 	.word	0x08008a47
 8008a1c:	08008a3f 	.word	0x08008a3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a20:	f7fd fdcc 	bl	80065bc <HAL_RCC_GetPCLK1Freq>
 8008a24:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a26:	e014      	b.n	8008a52 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a28:	f7fd fdda 	bl	80065e0 <HAL_RCC_GetPCLK2Freq>
 8008a2c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a2e:	e010      	b.n	8008a52 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a30:	4b5a      	ldr	r3, [pc, #360]	; (8008b9c <UART_SetConfig+0x4e4>)
 8008a32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008a34:	e00d      	b.n	8008a52 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a36:	f7fd fd0d 	bl	8006454 <HAL_RCC_GetSysClockFreq>
 8008a3a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a3c:	e009      	b.n	8008a52 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008a44:	e005      	b.n	8008a52 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8008a46:	2300      	movs	r3, #0
 8008a48:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008a50:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	f000 8089 	beq.w	8008b6c <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a5e:	4a4e      	ldr	r2, [pc, #312]	; (8008b98 <UART_SetConfig+0x4e0>)
 8008a60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a64:	461a      	mov	r2, r3
 8008a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a68:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a6c:	005a      	lsls	r2, r3, #1
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	085b      	lsrs	r3, r3, #1
 8008a74:	441a      	add	r2, r3
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a7e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a80:	6a3b      	ldr	r3, [r7, #32]
 8008a82:	2b0f      	cmp	r3, #15
 8008a84:	d916      	bls.n	8008ab4 <UART_SetConfig+0x3fc>
 8008a86:	6a3b      	ldr	r3, [r7, #32]
 8008a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a8c:	d212      	bcs.n	8008ab4 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008a8e:	6a3b      	ldr	r3, [r7, #32]
 8008a90:	b29b      	uxth	r3, r3
 8008a92:	f023 030f 	bic.w	r3, r3, #15
 8008a96:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008a98:	6a3b      	ldr	r3, [r7, #32]
 8008a9a:	085b      	lsrs	r3, r3, #1
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	f003 0307 	and.w	r3, r3, #7
 8008aa2:	b29a      	uxth	r2, r3
 8008aa4:	8bfb      	ldrh	r3, [r7, #30]
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	8bfa      	ldrh	r2, [r7, #30]
 8008ab0:	60da      	str	r2, [r3, #12]
 8008ab2:	e05b      	b.n	8008b6c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008aba:	e057      	b.n	8008b6c <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008abc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008ac0:	2b08      	cmp	r3, #8
 8008ac2:	d828      	bhi.n	8008b16 <UART_SetConfig+0x45e>
 8008ac4:	a201      	add	r2, pc, #4	; (adr r2, 8008acc <UART_SetConfig+0x414>)
 8008ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aca:	bf00      	nop
 8008acc:	08008af1 	.word	0x08008af1
 8008ad0:	08008af9 	.word	0x08008af9
 8008ad4:	08008b01 	.word	0x08008b01
 8008ad8:	08008b17 	.word	0x08008b17
 8008adc:	08008b07 	.word	0x08008b07
 8008ae0:	08008b17 	.word	0x08008b17
 8008ae4:	08008b17 	.word	0x08008b17
 8008ae8:	08008b17 	.word	0x08008b17
 8008aec:	08008b0f 	.word	0x08008b0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008af0:	f7fd fd64 	bl	80065bc <HAL_RCC_GetPCLK1Freq>
 8008af4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008af6:	e014      	b.n	8008b22 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008af8:	f7fd fd72 	bl	80065e0 <HAL_RCC_GetPCLK2Freq>
 8008afc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008afe:	e010      	b.n	8008b22 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b00:	4b26      	ldr	r3, [pc, #152]	; (8008b9c <UART_SetConfig+0x4e4>)
 8008b02:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008b04:	e00d      	b.n	8008b22 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b06:	f7fd fca5 	bl	8006454 <HAL_RCC_GetSysClockFreq>
 8008b0a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008b0c:	e009      	b.n	8008b22 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008b14:	e005      	b.n	8008b22 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8008b16:	2300      	movs	r3, #0
 8008b18:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008b20:	bf00      	nop
    }

    if (pclk != 0U)
 8008b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d021      	beq.n	8008b6c <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b2c:	4a1a      	ldr	r2, [pc, #104]	; (8008b98 <UART_SetConfig+0x4e0>)
 8008b2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b32:	461a      	mov	r2, r3
 8008b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b36:	fbb3 f2f2 	udiv	r2, r3, r2
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	085b      	lsrs	r3, r3, #1
 8008b40:	441a      	add	r2, r3
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b4a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b4c:	6a3b      	ldr	r3, [r7, #32]
 8008b4e:	2b0f      	cmp	r3, #15
 8008b50:	d909      	bls.n	8008b66 <UART_SetConfig+0x4ae>
 8008b52:	6a3b      	ldr	r3, [r7, #32]
 8008b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b58:	d205      	bcs.n	8008b66 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008b5a:	6a3b      	ldr	r3, [r7, #32]
 8008b5c:	b29a      	uxth	r2, r3
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	60da      	str	r2, [r3, #12]
 8008b64:	e002      	b.n	8008b6c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8008b66:	2301      	movs	r3, #1
 8008b68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	2201      	movs	r2, #1
 8008b70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	2201      	movs	r2, #1
 8008b78:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	2200      	movs	r2, #0
 8008b86:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008b88:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3730      	adds	r7, #48	; 0x30
 8008b90:	46bd      	mov	sp, r7
 8008b92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b96:	bf00      	nop
 8008b98:	0801e5ec 	.word	0x0801e5ec
 8008b9c:	00f42400 	.word	0x00f42400

08008ba0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b083      	sub	sp, #12
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bac:	f003 0301 	and.w	r3, r3, #1
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d00a      	beq.n	8008bca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	430a      	orrs	r2, r1
 8008bc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bce:	f003 0302 	and.w	r3, r3, #2
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d00a      	beq.n	8008bec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	430a      	orrs	r2, r1
 8008bea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bf0:	f003 0304 	and.w	r3, r3, #4
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d00a      	beq.n	8008c0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	430a      	orrs	r2, r1
 8008c0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c12:	f003 0308 	and.w	r3, r3, #8
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d00a      	beq.n	8008c30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	430a      	orrs	r2, r1
 8008c2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c34:	f003 0310 	and.w	r3, r3, #16
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d00a      	beq.n	8008c52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	689b      	ldr	r3, [r3, #8]
 8008c42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	430a      	orrs	r2, r1
 8008c50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c56:	f003 0320 	and.w	r3, r3, #32
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d00a      	beq.n	8008c74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	689b      	ldr	r3, [r3, #8]
 8008c64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	430a      	orrs	r2, r1
 8008c72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d01a      	beq.n	8008cb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	430a      	orrs	r2, r1
 8008c94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c9e:	d10a      	bne.n	8008cb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	430a      	orrs	r2, r1
 8008cb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d00a      	beq.n	8008cd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	430a      	orrs	r2, r1
 8008cd6:	605a      	str	r2, [r3, #4]
  }
}
 8008cd8:	bf00      	nop
 8008cda:	370c      	adds	r7, #12
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bc80      	pop	{r7}
 8008ce0:	4770      	bx	lr

08008ce2 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008ce2:	b580      	push	{r7, lr}
 8008ce4:	b086      	sub	sp, #24
 8008ce6:	af02      	add	r7, sp, #8
 8008ce8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2200      	movs	r2, #0
 8008cee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008cf2:	f7f9 fa91 	bl	8002218 <HAL_GetTick>
 8008cf6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f003 0308 	and.w	r3, r3, #8
 8008d02:	2b08      	cmp	r3, #8
 8008d04:	d10e      	bne.n	8008d24 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d06:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d0a:	9300      	str	r3, [sp, #0]
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f000 f832 	bl	8008d7e <UART_WaitOnFlagUntilTimeout>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d001      	beq.n	8008d24 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d20:	2303      	movs	r3, #3
 8008d22:	e028      	b.n	8008d76 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f003 0304 	and.w	r3, r3, #4
 8008d2e:	2b04      	cmp	r3, #4
 8008d30:	d10e      	bne.n	8008d50 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d32:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d36:	9300      	str	r3, [sp, #0]
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f000 f81c 	bl	8008d7e <UART_WaitOnFlagUntilTimeout>
 8008d46:	4603      	mov	r3, r0
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d001      	beq.n	8008d50 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d4c:	2303      	movs	r3, #3
 8008d4e:	e012      	b.n	8008d76 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2220      	movs	r2, #32
 8008d54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2220      	movs	r2, #32
 8008d5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2200      	movs	r2, #0
 8008d64:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008d74:	2300      	movs	r3, #0
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3710      	adds	r7, #16
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}

08008d7e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008d7e:	b580      	push	{r7, lr}
 8008d80:	b09c      	sub	sp, #112	; 0x70
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	60f8      	str	r0, [r7, #12]
 8008d86:	60b9      	str	r1, [r7, #8]
 8008d88:	603b      	str	r3, [r7, #0]
 8008d8a:	4613      	mov	r3, r2
 8008d8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d8e:	e0a9      	b.n	8008ee4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d96:	f000 80a5 	beq.w	8008ee4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d9a:	f7f9 fa3d 	bl	8002218 <HAL_GetTick>
 8008d9e:	4602      	mov	r2, r0
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	1ad3      	subs	r3, r2, r3
 8008da4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008da6:	429a      	cmp	r2, r3
 8008da8:	d302      	bcc.n	8008db0 <UART_WaitOnFlagUntilTimeout+0x32>
 8008daa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d140      	bne.n	8008e32 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008db6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008db8:	e853 3f00 	ldrex	r3, [r3]
 8008dbc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008dbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dc0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008dc4:	667b      	str	r3, [r7, #100]	; 0x64
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	461a      	mov	r2, r3
 8008dcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008dce:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008dd0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008dd4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008dd6:	e841 2300 	strex	r3, r2, [r1]
 8008dda:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008ddc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d1e6      	bne.n	8008db0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	3308      	adds	r3, #8
 8008de8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dec:	e853 3f00 	ldrex	r3, [r3]
 8008df0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008df4:	f023 0301 	bic.w	r3, r3, #1
 8008df8:	663b      	str	r3, [r7, #96]	; 0x60
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	3308      	adds	r3, #8
 8008e00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008e02:	64ba      	str	r2, [r7, #72]	; 0x48
 8008e04:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008e08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e0a:	e841 2300 	strex	r3, r2, [r1]
 8008e0e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008e10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d1e5      	bne.n	8008de2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2220      	movs	r2, #32
 8008e1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2220      	movs	r2, #32
 8008e22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8008e2e:	2303      	movs	r3, #3
 8008e30:	e069      	b.n	8008f06 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f003 0304 	and.w	r3, r3, #4
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d051      	beq.n	8008ee4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	69db      	ldr	r3, [r3, #28]
 8008e46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e4e:	d149      	bne.n	8008ee4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008e58:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e62:	e853 3f00 	ldrex	r3, [r3]
 8008e66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008e6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	461a      	mov	r2, r3
 8008e76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e78:	637b      	str	r3, [r7, #52]	; 0x34
 8008e7a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008e7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e80:	e841 2300 	strex	r3, r2, [r1]
 8008e84:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d1e6      	bne.n	8008e5a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	3308      	adds	r3, #8
 8008e92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	e853 3f00 	ldrex	r3, [r3]
 8008e9a:	613b      	str	r3, [r7, #16]
   return(result);
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	f023 0301 	bic.w	r3, r3, #1
 8008ea2:	66bb      	str	r3, [r7, #104]	; 0x68
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	3308      	adds	r3, #8
 8008eaa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008eac:	623a      	str	r2, [r7, #32]
 8008eae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb0:	69f9      	ldr	r1, [r7, #28]
 8008eb2:	6a3a      	ldr	r2, [r7, #32]
 8008eb4:	e841 2300 	strex	r3, r2, [r1]
 8008eb8:	61bb      	str	r3, [r7, #24]
   return(result);
 8008eba:	69bb      	ldr	r3, [r7, #24]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d1e5      	bne.n	8008e8c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	2220      	movs	r2, #32
 8008ec4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2220      	movs	r2, #32
 8008ecc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2220      	movs	r2, #32
 8008ed4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	2200      	movs	r2, #0
 8008edc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008ee0:	2303      	movs	r3, #3
 8008ee2:	e010      	b.n	8008f06 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	69da      	ldr	r2, [r3, #28]
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	4013      	ands	r3, r2
 8008eee:	68ba      	ldr	r2, [r7, #8]
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	bf0c      	ite	eq
 8008ef4:	2301      	moveq	r3, #1
 8008ef6:	2300      	movne	r3, #0
 8008ef8:	b2db      	uxtb	r3, r3
 8008efa:	461a      	mov	r2, r3
 8008efc:	79fb      	ldrb	r3, [r7, #7]
 8008efe:	429a      	cmp	r2, r3
 8008f00:	f43f af46 	beq.w	8008d90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008f04:	2300      	movs	r3, #0
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3770      	adds	r7, #112	; 0x70
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
	...

08008f10 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b0a3      	sub	sp, #140	; 0x8c
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	60f8      	str	r0, [r7, #12]
 8008f18:	60b9      	str	r1, [r7, #8]
 8008f1a:	4613      	mov	r3, r2
 8008f1c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	68ba      	ldr	r2, [r7, #8]
 8008f22:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	88fa      	ldrh	r2, [r7, #6]
 8008f28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	88fa      	ldrh	r2, [r7, #6]
 8008f30:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2200      	movs	r2, #0
 8008f38:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	689b      	ldr	r3, [r3, #8]
 8008f3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f42:	d10e      	bne.n	8008f62 <UART_Start_Receive_IT+0x52>
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	691b      	ldr	r3, [r3, #16]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d105      	bne.n	8008f58 <UART_Start_Receive_IT+0x48>
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008f52:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f56:	e02d      	b.n	8008fb4 <UART_Start_Receive_IT+0xa4>
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	22ff      	movs	r2, #255	; 0xff
 8008f5c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f60:	e028      	b.n	8008fb4 <UART_Start_Receive_IT+0xa4>
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d10d      	bne.n	8008f86 <UART_Start_Receive_IT+0x76>
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	691b      	ldr	r3, [r3, #16]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d104      	bne.n	8008f7c <UART_Start_Receive_IT+0x6c>
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	22ff      	movs	r2, #255	; 0xff
 8008f76:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f7a:	e01b      	b.n	8008fb4 <UART_Start_Receive_IT+0xa4>
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	227f      	movs	r2, #127	; 0x7f
 8008f80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f84:	e016      	b.n	8008fb4 <UART_Start_Receive_IT+0xa4>
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	689b      	ldr	r3, [r3, #8]
 8008f8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f8e:	d10d      	bne.n	8008fac <UART_Start_Receive_IT+0x9c>
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	691b      	ldr	r3, [r3, #16]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d104      	bne.n	8008fa2 <UART_Start_Receive_IT+0x92>
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	227f      	movs	r2, #127	; 0x7f
 8008f9c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008fa0:	e008      	b.n	8008fb4 <UART_Start_Receive_IT+0xa4>
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	223f      	movs	r2, #63	; 0x3f
 8008fa6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008faa:	e003      	b.n	8008fb4 <UART_Start_Receive_IT+0xa4>
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	2222      	movs	r2, #34	; 0x22
 8008fc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	3308      	adds	r3, #8
 8008fca:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008fce:	e853 3f00 	ldrex	r3, [r3]
 8008fd2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008fd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008fd6:	f043 0301 	orr.w	r3, r3, #1
 8008fda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	3308      	adds	r3, #8
 8008fe4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008fe8:	673a      	str	r2, [r7, #112]	; 0x70
 8008fea:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fec:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008fee:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008ff0:	e841 2300 	strex	r3, r2, [r1]
 8008ff4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008ff6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d1e3      	bne.n	8008fc4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009000:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009004:	d14f      	bne.n	80090a6 <UART_Start_Receive_IT+0x196>
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800900c:	88fa      	ldrh	r2, [r7, #6]
 800900e:	429a      	cmp	r2, r3
 8009010:	d349      	bcc.n	80090a6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	689b      	ldr	r3, [r3, #8]
 8009016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800901a:	d107      	bne.n	800902c <UART_Start_Receive_IT+0x11c>
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	691b      	ldr	r3, [r3, #16]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d103      	bne.n	800902c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	4a46      	ldr	r2, [pc, #280]	; (8009140 <UART_Start_Receive_IT+0x230>)
 8009028:	675a      	str	r2, [r3, #116]	; 0x74
 800902a:	e002      	b.n	8009032 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	4a45      	ldr	r2, [pc, #276]	; (8009144 <UART_Start_Receive_IT+0x234>)
 8009030:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	691b      	ldr	r3, [r3, #16]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d01a      	beq.n	8009070 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009040:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009042:	e853 3f00 	ldrex	r3, [r3]
 8009046:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009048:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800904a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800904e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	461a      	mov	r2, r3
 8009058:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800905c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800905e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009060:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009062:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009064:	e841 2300 	strex	r3, r2, [r1]
 8009068:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800906a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800906c:	2b00      	cmp	r3, #0
 800906e:	d1e4      	bne.n	800903a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	3308      	adds	r3, #8
 8009076:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800907a:	e853 3f00 	ldrex	r3, [r3]
 800907e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009082:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009086:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	3308      	adds	r3, #8
 800908e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009090:	64ba      	str	r2, [r7, #72]	; 0x48
 8009092:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009094:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009096:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009098:	e841 2300 	strex	r3, r2, [r1]
 800909c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800909e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d1e5      	bne.n	8009070 <UART_Start_Receive_IT+0x160>
 80090a4:	e046      	b.n	8009134 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	689b      	ldr	r3, [r3, #8]
 80090aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090ae:	d107      	bne.n	80090c0 <UART_Start_Receive_IT+0x1b0>
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	691b      	ldr	r3, [r3, #16]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d103      	bne.n	80090c0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	4a23      	ldr	r2, [pc, #140]	; (8009148 <UART_Start_Receive_IT+0x238>)
 80090bc:	675a      	str	r2, [r3, #116]	; 0x74
 80090be:	e002      	b.n	80090c6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	4a22      	ldr	r2, [pc, #136]	; (800914c <UART_Start_Receive_IT+0x23c>)
 80090c4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	691b      	ldr	r3, [r3, #16]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d019      	beq.n	8009102 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090d6:	e853 3f00 	ldrex	r3, [r3]
 80090da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80090dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090de:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80090e2:	677b      	str	r3, [r7, #116]	; 0x74
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	461a      	mov	r2, r3
 80090ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090ec:	637b      	str	r3, [r7, #52]	; 0x34
 80090ee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80090f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80090f4:	e841 2300 	strex	r3, r2, [r1]
 80090f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80090fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d1e6      	bne.n	80090ce <UART_Start_Receive_IT+0x1be>
 8009100:	e018      	b.n	8009134 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	e853 3f00 	ldrex	r3, [r3]
 800910e:	613b      	str	r3, [r7, #16]
   return(result);
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	f043 0320 	orr.w	r3, r3, #32
 8009116:	67bb      	str	r3, [r7, #120]	; 0x78
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	461a      	mov	r2, r3
 800911e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009120:	623b      	str	r3, [r7, #32]
 8009122:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009124:	69f9      	ldr	r1, [r7, #28]
 8009126:	6a3a      	ldr	r2, [r7, #32]
 8009128:	e841 2300 	strex	r3, r2, [r1]
 800912c:	61bb      	str	r3, [r7, #24]
   return(result);
 800912e:	69bb      	ldr	r3, [r7, #24]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d1e6      	bne.n	8009102 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8009134:	2300      	movs	r3, #0
}
 8009136:	4618      	mov	r0, r3
 8009138:	378c      	adds	r7, #140	; 0x8c
 800913a:	46bd      	mov	sp, r7
 800913c:	bc80      	pop	{r7}
 800913e:	4770      	bx	lr
 8009140:	08009b25 	.word	0x08009b25
 8009144:	080097c5 	.word	0x080097c5
 8009148:	0800960d 	.word	0x0800960d
 800914c:	08009455 	.word	0x08009455

08009150 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009150:	b480      	push	{r7}
 8009152:	b08f      	sub	sp, #60	; 0x3c
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800915e:	6a3b      	ldr	r3, [r7, #32]
 8009160:	e853 3f00 	ldrex	r3, [r3]
 8009164:	61fb      	str	r3, [r7, #28]
   return(result);
 8009166:	69fb      	ldr	r3, [r7, #28]
 8009168:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800916c:	637b      	str	r3, [r7, #52]	; 0x34
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	461a      	mov	r2, r3
 8009174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009176:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009178:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800917a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800917c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800917e:	e841 2300 	strex	r3, r2, [r1]
 8009182:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009186:	2b00      	cmp	r3, #0
 8009188:	d1e6      	bne.n	8009158 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	3308      	adds	r3, #8
 8009190:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	e853 3f00 	ldrex	r3, [r3]
 8009198:	60bb      	str	r3, [r7, #8]
   return(result);
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80091a0:	633b      	str	r3, [r7, #48]	; 0x30
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	3308      	adds	r3, #8
 80091a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091aa:	61ba      	str	r2, [r7, #24]
 80091ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ae:	6979      	ldr	r1, [r7, #20]
 80091b0:	69ba      	ldr	r2, [r7, #24]
 80091b2:	e841 2300 	strex	r3, r2, [r1]
 80091b6:	613b      	str	r3, [r7, #16]
   return(result);
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d1e5      	bne.n	800918a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2220      	movs	r2, #32
 80091c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80091c6:	bf00      	nop
 80091c8:	373c      	adds	r7, #60	; 0x3c
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bc80      	pop	{r7}
 80091ce:	4770      	bx	lr

080091d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b095      	sub	sp, #84	; 0x54
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091e0:	e853 3f00 	ldrex	r3, [r3]
 80091e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80091e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80091ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	461a      	mov	r2, r3
 80091f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091f6:	643b      	str	r3, [r7, #64]	; 0x40
 80091f8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80091fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80091fe:	e841 2300 	strex	r3, r2, [r1]
 8009202:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009206:	2b00      	cmp	r3, #0
 8009208:	d1e6      	bne.n	80091d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	3308      	adds	r3, #8
 8009210:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009212:	6a3b      	ldr	r3, [r7, #32]
 8009214:	e853 3f00 	ldrex	r3, [r3]
 8009218:	61fb      	str	r3, [r7, #28]
   return(result);
 800921a:	69fb      	ldr	r3, [r7, #28]
 800921c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009220:	f023 0301 	bic.w	r3, r3, #1
 8009224:	64bb      	str	r3, [r7, #72]	; 0x48
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	3308      	adds	r3, #8
 800922c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800922e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009230:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009232:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009234:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009236:	e841 2300 	strex	r3, r2, [r1]
 800923a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800923c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800923e:	2b00      	cmp	r3, #0
 8009240:	d1e3      	bne.n	800920a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009246:	2b01      	cmp	r3, #1
 8009248:	d118      	bne.n	800927c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	e853 3f00 	ldrex	r3, [r3]
 8009256:	60bb      	str	r3, [r7, #8]
   return(result);
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	f023 0310 	bic.w	r3, r3, #16
 800925e:	647b      	str	r3, [r7, #68]	; 0x44
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	461a      	mov	r2, r3
 8009266:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009268:	61bb      	str	r3, [r7, #24]
 800926a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800926c:	6979      	ldr	r1, [r7, #20]
 800926e:	69ba      	ldr	r2, [r7, #24]
 8009270:	e841 2300 	strex	r3, r2, [r1]
 8009274:	613b      	str	r3, [r7, #16]
   return(result);
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d1e6      	bne.n	800924a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2220      	movs	r2, #32
 8009280:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2200      	movs	r2, #0
 8009288:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2200      	movs	r2, #0
 800928e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009290:	bf00      	nop
 8009292:	3754      	adds	r7, #84	; 0x54
 8009294:	46bd      	mov	sp, r7
 8009296:	bc80      	pop	{r7}
 8009298:	4770      	bx	lr

0800929a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800929a:	b580      	push	{r7, lr}
 800929c:	b090      	sub	sp, #64	; 0x40
 800929e:	af00      	add	r7, sp, #0
 80092a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092a6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f003 0320 	and.w	r3, r3, #32
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d137      	bne.n	8009326 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80092b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092b8:	2200      	movs	r2, #0
 80092ba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80092be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	3308      	adds	r3, #8
 80092c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c8:	e853 3f00 	ldrex	r3, [r3]
 80092cc:	623b      	str	r3, [r7, #32]
   return(result);
 80092ce:	6a3b      	ldr	r3, [r7, #32]
 80092d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80092d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80092d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	3308      	adds	r3, #8
 80092dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092de:	633a      	str	r2, [r7, #48]	; 0x30
 80092e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80092e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092e6:	e841 2300 	strex	r3, r2, [r1]
 80092ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80092ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d1e5      	bne.n	80092be <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80092f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	e853 3f00 	ldrex	r3, [r3]
 80092fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009306:	637b      	str	r3, [r7, #52]	; 0x34
 8009308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	461a      	mov	r2, r3
 800930e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009310:	61fb      	str	r3, [r7, #28]
 8009312:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009314:	69b9      	ldr	r1, [r7, #24]
 8009316:	69fa      	ldr	r2, [r7, #28]
 8009318:	e841 2300 	strex	r3, r2, [r1]
 800931c:	617b      	str	r3, [r7, #20]
   return(result);
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d1e6      	bne.n	80092f2 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009324:	e002      	b.n	800932c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009326:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009328:	f7f9 fc12 	bl	8002b50 <HAL_UART_TxCpltCallback>
}
 800932c:	bf00      	nop
 800932e:	3740      	adds	r7, #64	; 0x40
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}

08009334 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b084      	sub	sp, #16
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009340:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009342:	68f8      	ldr	r0, [r7, #12]
 8009344:	f7ff f99a 	bl	800867c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009348:	bf00      	nop
 800934a:	3710      	adds	r7, #16
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}

08009350 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b086      	sub	sp, #24
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800935c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009364:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800936c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	689b      	ldr	r3, [r3, #8]
 8009374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009378:	2b80      	cmp	r3, #128	; 0x80
 800937a:	d109      	bne.n	8009390 <UART_DMAError+0x40>
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	2b21      	cmp	r3, #33	; 0x21
 8009380:	d106      	bne.n	8009390 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	2200      	movs	r2, #0
 8009386:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800938a:	6978      	ldr	r0, [r7, #20]
 800938c:	f7ff fee0 	bl	8009150 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	689b      	ldr	r3, [r3, #8]
 8009396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800939a:	2b40      	cmp	r3, #64	; 0x40
 800939c:	d109      	bne.n	80093b2 <UART_DMAError+0x62>
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2b22      	cmp	r3, #34	; 0x22
 80093a2:	d106      	bne.n	80093b2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	2200      	movs	r2, #0
 80093a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80093ac:	6978      	ldr	r0, [r7, #20]
 80093ae:	f7ff ff0f 	bl	80091d0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093b8:	f043 0210 	orr.w	r2, r3, #16
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80093c2:	6978      	ldr	r0, [r7, #20]
 80093c4:	f7ff f963 	bl	800868e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093c8:	bf00      	nop
 80093ca:	3718      	adds	r7, #24
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}

080093d0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b084      	sub	sp, #16
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	2200      	movs	r2, #0
 80093e2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	2200      	movs	r2, #0
 80093ea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80093ee:	68f8      	ldr	r0, [r7, #12]
 80093f0:	f7ff f94d 	bl	800868e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093f4:	bf00      	nop
 80093f6:	3710      	adds	r7, #16
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b088      	sub	sp, #32
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	e853 3f00 	ldrex	r3, [r3]
 8009410:	60bb      	str	r3, [r7, #8]
   return(result);
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009418:	61fb      	str	r3, [r7, #28]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	461a      	mov	r2, r3
 8009420:	69fb      	ldr	r3, [r7, #28]
 8009422:	61bb      	str	r3, [r7, #24]
 8009424:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009426:	6979      	ldr	r1, [r7, #20]
 8009428:	69ba      	ldr	r2, [r7, #24]
 800942a:	e841 2300 	strex	r3, r2, [r1]
 800942e:	613b      	str	r3, [r7, #16]
   return(result);
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d1e6      	bne.n	8009404 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2220      	movs	r2, #32
 800943a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2200      	movs	r2, #0
 8009442:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f7f9 fb83 	bl	8002b50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800944a:	bf00      	nop
 800944c:	3720      	adds	r7, #32
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
	...

08009454 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b09c      	sub	sp, #112	; 0x70
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009462:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800946c:	2b22      	cmp	r3, #34	; 0x22
 800946e:	f040 80be 	bne.w	80095ee <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009478:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800947c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009480:	b2d9      	uxtb	r1, r3
 8009482:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8009486:	b2da      	uxtb	r2, r3
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800948c:	400a      	ands	r2, r1
 800948e:	b2d2      	uxtb	r2, r2
 8009490:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009496:	1c5a      	adds	r2, r3, #1
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80094a2:	b29b      	uxth	r3, r3
 80094a4:	3b01      	subs	r3, #1
 80094a6:	b29a      	uxth	r2, r3
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80094b4:	b29b      	uxth	r3, r3
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	f040 80a1 	bne.w	80095fe <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094c4:	e853 3f00 	ldrex	r3, [r3]
 80094c8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80094ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80094d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	461a      	mov	r2, r3
 80094d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80094da:	65bb      	str	r3, [r7, #88]	; 0x58
 80094dc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80094e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80094e2:	e841 2300 	strex	r3, r2, [r1]
 80094e6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80094e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d1e6      	bne.n	80094bc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	3308      	adds	r3, #8
 80094f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f8:	e853 3f00 	ldrex	r3, [r3]
 80094fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80094fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009500:	f023 0301 	bic.w	r3, r3, #1
 8009504:	667b      	str	r3, [r7, #100]	; 0x64
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	3308      	adds	r3, #8
 800950c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800950e:	647a      	str	r2, [r7, #68]	; 0x44
 8009510:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009512:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009514:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009516:	e841 2300 	strex	r3, r2, [r1]
 800951a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800951c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800951e:	2b00      	cmp	r3, #0
 8009520:	d1e5      	bne.n	80094ee <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2220      	movs	r2, #32
 8009526:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2200      	movs	r2, #0
 800952e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2200      	movs	r2, #0
 8009534:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	4a33      	ldr	r2, [pc, #204]	; (8009608 <UART_RxISR_8BIT+0x1b4>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d01f      	beq.n	8009580 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800954a:	2b00      	cmp	r3, #0
 800954c:	d018      	beq.n	8009580 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009556:	e853 3f00 	ldrex	r3, [r3]
 800955a:	623b      	str	r3, [r7, #32]
   return(result);
 800955c:	6a3b      	ldr	r3, [r7, #32]
 800955e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009562:	663b      	str	r3, [r7, #96]	; 0x60
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	461a      	mov	r2, r3
 800956a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800956c:	633b      	str	r3, [r7, #48]	; 0x30
 800956e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009570:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009572:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009574:	e841 2300 	strex	r3, r2, [r1]
 8009578:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800957a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800957c:	2b00      	cmp	r3, #0
 800957e:	d1e6      	bne.n	800954e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009584:	2b01      	cmp	r3, #1
 8009586:	d12e      	bne.n	80095e6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2200      	movs	r2, #0
 800958c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	e853 3f00 	ldrex	r3, [r3]
 800959a:	60fb      	str	r3, [r7, #12]
   return(result);
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	f023 0310 	bic.w	r3, r3, #16
 80095a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	461a      	mov	r2, r3
 80095aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80095ac:	61fb      	str	r3, [r7, #28]
 80095ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095b0:	69b9      	ldr	r1, [r7, #24]
 80095b2:	69fa      	ldr	r2, [r7, #28]
 80095b4:	e841 2300 	strex	r3, r2, [r1]
 80095b8:	617b      	str	r3, [r7, #20]
   return(result);
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d1e6      	bne.n	800958e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	69db      	ldr	r3, [r3, #28]
 80095c6:	f003 0310 	and.w	r3, r3, #16
 80095ca:	2b10      	cmp	r3, #16
 80095cc:	d103      	bne.n	80095d6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	2210      	movs	r2, #16
 80095d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80095dc:	4619      	mov	r1, r3
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f7ff f85e 	bl	80086a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80095e4:	e00b      	b.n	80095fe <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f7f9 fac8 	bl	8002b7c <HAL_UART_RxCpltCallback>
}
 80095ec:	e007      	b.n	80095fe <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	699a      	ldr	r2, [r3, #24]
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f042 0208 	orr.w	r2, r2, #8
 80095fc:	619a      	str	r2, [r3, #24]
}
 80095fe:	bf00      	nop
 8009600:	3770      	adds	r7, #112	; 0x70
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}
 8009606:	bf00      	nop
 8009608:	40008000 	.word	0x40008000

0800960c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b09c      	sub	sp, #112	; 0x70
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800961a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009624:	2b22      	cmp	r3, #34	; 0x22
 8009626:	f040 80be 	bne.w	80097a6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009630:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009638:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800963a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800963e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8009642:	4013      	ands	r3, r2
 8009644:	b29a      	uxth	r2, r3
 8009646:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009648:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800964e:	1c9a      	adds	r2, r3, #2
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800965a:	b29b      	uxth	r3, r3
 800965c:	3b01      	subs	r3, #1
 800965e:	b29a      	uxth	r2, r3
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800966c:	b29b      	uxth	r3, r3
 800966e:	2b00      	cmp	r3, #0
 8009670:	f040 80a1 	bne.w	80097b6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800967a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800967c:	e853 3f00 	ldrex	r3, [r3]
 8009680:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009682:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009684:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009688:	667b      	str	r3, [r7, #100]	; 0x64
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	461a      	mov	r2, r3
 8009690:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009692:	657b      	str	r3, [r7, #84]	; 0x54
 8009694:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009696:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009698:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800969a:	e841 2300 	strex	r3, r2, [r1]
 800969e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80096a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d1e6      	bne.n	8009674 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	3308      	adds	r3, #8
 80096ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096b0:	e853 3f00 	ldrex	r3, [r3]
 80096b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80096b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b8:	f023 0301 	bic.w	r3, r3, #1
 80096bc:	663b      	str	r3, [r7, #96]	; 0x60
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	3308      	adds	r3, #8
 80096c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80096c6:	643a      	str	r2, [r7, #64]	; 0x40
 80096c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80096cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80096ce:	e841 2300 	strex	r3, r2, [r1]
 80096d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80096d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d1e5      	bne.n	80096a6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2220      	movs	r2, #32
 80096de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2200      	movs	r2, #0
 80096e6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2200      	movs	r2, #0
 80096ec:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	4a33      	ldr	r2, [pc, #204]	; (80097c0 <UART_RxISR_16BIT+0x1b4>)
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d01f      	beq.n	8009738 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	685b      	ldr	r3, [r3, #4]
 80096fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009702:	2b00      	cmp	r3, #0
 8009704:	d018      	beq.n	8009738 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800970c:	6a3b      	ldr	r3, [r7, #32]
 800970e:	e853 3f00 	ldrex	r3, [r3]
 8009712:	61fb      	str	r3, [r7, #28]
   return(result);
 8009714:	69fb      	ldr	r3, [r7, #28]
 8009716:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800971a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	461a      	mov	r2, r3
 8009722:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009724:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009726:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009728:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800972a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800972c:	e841 2300 	strex	r3, r2, [r1]
 8009730:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009734:	2b00      	cmp	r3, #0
 8009736:	d1e6      	bne.n	8009706 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800973c:	2b01      	cmp	r3, #1
 800973e:	d12e      	bne.n	800979e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2200      	movs	r2, #0
 8009744:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	e853 3f00 	ldrex	r3, [r3]
 8009752:	60bb      	str	r3, [r7, #8]
   return(result);
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	f023 0310 	bic.w	r3, r3, #16
 800975a:	65bb      	str	r3, [r7, #88]	; 0x58
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	461a      	mov	r2, r3
 8009762:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009764:	61bb      	str	r3, [r7, #24]
 8009766:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009768:	6979      	ldr	r1, [r7, #20]
 800976a:	69ba      	ldr	r2, [r7, #24]
 800976c:	e841 2300 	strex	r3, r2, [r1]
 8009770:	613b      	str	r3, [r7, #16]
   return(result);
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d1e6      	bne.n	8009746 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	69db      	ldr	r3, [r3, #28]
 800977e:	f003 0310 	and.w	r3, r3, #16
 8009782:	2b10      	cmp	r3, #16
 8009784:	d103      	bne.n	800978e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	2210      	movs	r2, #16
 800978c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009794:	4619      	mov	r1, r3
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f7fe ff82 	bl	80086a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800979c:	e00b      	b.n	80097b6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f7f9 f9ec 	bl	8002b7c <HAL_UART_RxCpltCallback>
}
 80097a4:	e007      	b.n	80097b6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	699a      	ldr	r2, [r3, #24]
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f042 0208 	orr.w	r2, r2, #8
 80097b4:	619a      	str	r2, [r3, #24]
}
 80097b6:	bf00      	nop
 80097b8:	3770      	adds	r7, #112	; 0x70
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}
 80097be:	bf00      	nop
 80097c0:	40008000 	.word	0x40008000

080097c4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b0ac      	sub	sp, #176	; 0xb0
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80097d2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	69db      	ldr	r3, [r3, #28]
 80097dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	689b      	ldr	r3, [r3, #8]
 80097f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097fa:	2b22      	cmp	r3, #34	; 0x22
 80097fc:	f040 8182 	bne.w	8009b04 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009806:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800980a:	e125      	b.n	8009a58 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009812:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009816:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800981a:	b2d9      	uxtb	r1, r3
 800981c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009820:	b2da      	uxtb	r2, r3
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009826:	400a      	ands	r2, r1
 8009828:	b2d2      	uxtb	r2, r2
 800982a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009830:	1c5a      	adds	r2, r3, #1
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800983c:	b29b      	uxth	r3, r3
 800983e:	3b01      	subs	r3, #1
 8009840:	b29a      	uxth	r2, r3
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	69db      	ldr	r3, [r3, #28]
 800984e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009852:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009856:	f003 0307 	and.w	r3, r3, #7
 800985a:	2b00      	cmp	r3, #0
 800985c:	d053      	beq.n	8009906 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800985e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009862:	f003 0301 	and.w	r3, r3, #1
 8009866:	2b00      	cmp	r3, #0
 8009868:	d011      	beq.n	800988e <UART_RxISR_8BIT_FIFOEN+0xca>
 800986a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800986e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009872:	2b00      	cmp	r3, #0
 8009874:	d00b      	beq.n	800988e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	2201      	movs	r2, #1
 800987c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009884:	f043 0201 	orr.w	r2, r3, #1
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800988e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009892:	f003 0302 	and.w	r3, r3, #2
 8009896:	2b00      	cmp	r3, #0
 8009898:	d011      	beq.n	80098be <UART_RxISR_8BIT_FIFOEN+0xfa>
 800989a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800989e:	f003 0301 	and.w	r3, r3, #1
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d00b      	beq.n	80098be <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	2202      	movs	r2, #2
 80098ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098b4:	f043 0204 	orr.w	r2, r3, #4
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80098be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80098c2:	f003 0304 	and.w	r3, r3, #4
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d011      	beq.n	80098ee <UART_RxISR_8BIT_FIFOEN+0x12a>
 80098ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80098ce:	f003 0301 	and.w	r3, r3, #1
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d00b      	beq.n	80098ee <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	2204      	movs	r2, #4
 80098dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098e4:	f043 0202 	orr.w	r2, r3, #2
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d006      	beq.n	8009906 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f7fe fec8 	bl	800868e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2200      	movs	r2, #0
 8009902:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800990c:	b29b      	uxth	r3, r3
 800990e:	2b00      	cmp	r3, #0
 8009910:	f040 80a2 	bne.w	8009a58 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800991a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800991c:	e853 3f00 	ldrex	r3, [r3]
 8009920:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8009922:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009924:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009928:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	461a      	mov	r2, r3
 8009932:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009936:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009938:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800993a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800993c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800993e:	e841 2300 	strex	r3, r2, [r1]
 8009942:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8009944:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009946:	2b00      	cmp	r3, #0
 8009948:	d1e4      	bne.n	8009914 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	3308      	adds	r3, #8
 8009950:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009952:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009954:	e853 3f00 	ldrex	r3, [r3]
 8009958:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800995a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800995c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009960:	f023 0301 	bic.w	r3, r3, #1
 8009964:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	3308      	adds	r3, #8
 800996e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009972:	66ba      	str	r2, [r7, #104]	; 0x68
 8009974:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009976:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009978:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800997a:	e841 2300 	strex	r3, r2, [r1]
 800997e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009980:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009982:	2b00      	cmp	r3, #0
 8009984:	d1e1      	bne.n	800994a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2220      	movs	r2, #32
 800998a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2200      	movs	r2, #0
 8009992:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2200      	movs	r2, #0
 8009998:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	4a5f      	ldr	r2, [pc, #380]	; (8009b1c <UART_RxISR_8BIT_FIFOEN+0x358>)
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d021      	beq.n	80099e8 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	685b      	ldr	r3, [r3, #4]
 80099aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d01a      	beq.n	80099e8 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099ba:	e853 3f00 	ldrex	r3, [r3]
 80099be:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80099c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80099c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	461a      	mov	r2, r3
 80099d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80099d4:	657b      	str	r3, [r7, #84]	; 0x54
 80099d6:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80099da:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80099dc:	e841 2300 	strex	r3, r2, [r1]
 80099e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80099e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d1e4      	bne.n	80099b2 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099ec:	2b01      	cmp	r3, #1
 80099ee:	d130      	bne.n	8009a52 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2200      	movs	r2, #0
 80099f4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099fe:	e853 3f00 	ldrex	r3, [r3]
 8009a02:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a06:	f023 0310 	bic.w	r3, r3, #16
 8009a0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	461a      	mov	r2, r3
 8009a14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009a18:	643b      	str	r3, [r7, #64]	; 0x40
 8009a1a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009a1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a20:	e841 2300 	strex	r3, r2, [r1]
 8009a24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d1e4      	bne.n	80099f6 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	69db      	ldr	r3, [r3, #28]
 8009a32:	f003 0310 	and.w	r3, r3, #16
 8009a36:	2b10      	cmp	r3, #16
 8009a38:	d103      	bne.n	8009a42 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	2210      	movs	r2, #16
 8009a40:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009a48:	4619      	mov	r1, r3
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f7fe fe28 	bl	80086a0 <HAL_UARTEx_RxEventCallback>
 8009a50:	e002      	b.n	8009a58 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f7f9 f892 	bl	8002b7c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009a58:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d006      	beq.n	8009a6e <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8009a60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009a64:	f003 0320 	and.w	r3, r3, #32
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	f47f aecf 	bne.w	800980c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009a74:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009a78:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d049      	beq.n	8009b14 <UART_RxISR_8BIT_FIFOEN+0x350>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009a86:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8009a8a:	429a      	cmp	r2, r3
 8009a8c:	d242      	bcs.n	8009b14 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	3308      	adds	r3, #8
 8009a94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a96:	6a3b      	ldr	r3, [r7, #32]
 8009a98:	e853 3f00 	ldrex	r3, [r3]
 8009a9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a9e:	69fb      	ldr	r3, [r7, #28]
 8009aa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009aa4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	3308      	adds	r3, #8
 8009aae:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009ab2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009ab4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ab6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009ab8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009aba:	e841 2300 	strex	r3, r2, [r1]
 8009abe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d1e3      	bne.n	8009a8e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	4a15      	ldr	r2, [pc, #84]	; (8009b20 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009aca:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	e853 3f00 	ldrex	r3, [r3]
 8009ad8:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	f043 0320 	orr.w	r3, r3, #32
 8009ae0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	461a      	mov	r2, r3
 8009aea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009aee:	61bb      	str	r3, [r7, #24]
 8009af0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009af2:	6979      	ldr	r1, [r7, #20]
 8009af4:	69ba      	ldr	r2, [r7, #24]
 8009af6:	e841 2300 	strex	r3, r2, [r1]
 8009afa:	613b      	str	r3, [r7, #16]
   return(result);
 8009afc:	693b      	ldr	r3, [r7, #16]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d1e4      	bne.n	8009acc <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009b02:	e007      	b.n	8009b14 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	699a      	ldr	r2, [r3, #24]
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f042 0208 	orr.w	r2, r2, #8
 8009b12:	619a      	str	r2, [r3, #24]
}
 8009b14:	bf00      	nop
 8009b16:	37b0      	adds	r7, #176	; 0xb0
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}
 8009b1c:	40008000 	.word	0x40008000
 8009b20:	08009455 	.word	0x08009455

08009b24 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b0ae      	sub	sp, #184	; 0xb8
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009b32:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	69db      	ldr	r3, [r3, #28]
 8009b3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	689b      	ldr	r3, [r3, #8]
 8009b50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b5a:	2b22      	cmp	r3, #34	; 0x22
 8009b5c:	f040 8186 	bne.w	8009e6c <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009b66:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009b6a:	e129      	b.n	8009dc0 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b72:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009b7e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8009b82:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8009b86:	4013      	ands	r3, r2
 8009b88:	b29a      	uxth	r2, r3
 8009b8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009b8e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b94:	1c9a      	adds	r2, r3, #2
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009ba0:	b29b      	uxth	r3, r3
 8009ba2:	3b01      	subs	r3, #1
 8009ba4:	b29a      	uxth	r2, r3
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	69db      	ldr	r3, [r3, #28]
 8009bb2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009bb6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009bba:	f003 0307 	and.w	r3, r3, #7
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d053      	beq.n	8009c6a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009bc2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009bc6:	f003 0301 	and.w	r3, r3, #1
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d011      	beq.n	8009bf2 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009bce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d00b      	beq.n	8009bf2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	2201      	movs	r2, #1
 8009be0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009be8:	f043 0201 	orr.w	r2, r3, #1
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009bf2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009bf6:	f003 0302 	and.w	r3, r3, #2
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d011      	beq.n	8009c22 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009bfe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009c02:	f003 0301 	and.w	r3, r3, #1
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d00b      	beq.n	8009c22 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	2202      	movs	r2, #2
 8009c10:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c18:	f043 0204 	orr.w	r2, r3, #4
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009c26:	f003 0304 	and.w	r3, r3, #4
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d011      	beq.n	8009c52 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009c2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009c32:	f003 0301 	and.w	r3, r3, #1
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d00b      	beq.n	8009c52 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	2204      	movs	r2, #4
 8009c40:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c48:	f043 0202 	orr.w	r2, r3, #2
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d006      	beq.n	8009c6a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f7fe fd16 	bl	800868e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2200      	movs	r2, #0
 8009c66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009c70:	b29b      	uxth	r3, r3
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	f040 80a4 	bne.w	8009dc0 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c80:	e853 3f00 	ldrex	r3, [r3]
 8009c84:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009c86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009c88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	461a      	mov	r2, r3
 8009c96:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009c9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009c9e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ca0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009ca2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009ca6:	e841 2300 	strex	r3, r2, [r1]
 8009caa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009cac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d1e2      	bne.n	8009c78 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	3308      	adds	r3, #8
 8009cb8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009cbc:	e853 3f00 	ldrex	r3, [r3]
 8009cc0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009cc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009cc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009cc8:	f023 0301 	bic.w	r3, r3, #1
 8009ccc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	3308      	adds	r3, #8
 8009cd6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009cda:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009cdc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cde:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009ce0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009ce2:	e841 2300 	strex	r3, r2, [r1]
 8009ce6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009ce8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d1e1      	bne.n	8009cb2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2220      	movs	r2, #32
 8009cf2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4a5f      	ldr	r2, [pc, #380]	; (8009e84 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d021      	beq.n	8009d50 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	685b      	ldr	r3, [r3, #4]
 8009d12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d01a      	beq.n	8009d50 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d22:	e853 3f00 	ldrex	r3, [r3]
 8009d26:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009d28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d2a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009d2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	461a      	mov	r2, r3
 8009d38:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009d3c:	65bb      	str	r3, [r7, #88]	; 0x58
 8009d3e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d40:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009d42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009d44:	e841 2300 	strex	r3, r2, [r1]
 8009d48:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009d4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d1e4      	bne.n	8009d1a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	d130      	bne.n	8009dba <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d66:	e853 3f00 	ldrex	r3, [r3]
 8009d6a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d6e:	f023 0310 	bic.w	r3, r3, #16
 8009d72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	461a      	mov	r2, r3
 8009d7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009d80:	647b      	str	r3, [r7, #68]	; 0x44
 8009d82:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d84:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009d86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d88:	e841 2300 	strex	r3, r2, [r1]
 8009d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009d8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d1e4      	bne.n	8009d5e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	69db      	ldr	r3, [r3, #28]
 8009d9a:	f003 0310 	and.w	r3, r3, #16
 8009d9e:	2b10      	cmp	r3, #16
 8009da0:	d103      	bne.n	8009daa <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	2210      	movs	r2, #16
 8009da8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009db0:	4619      	mov	r1, r3
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f7fe fc74 	bl	80086a0 <HAL_UARTEx_RxEventCallback>
 8009db8:	e002      	b.n	8009dc0 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f7f8 fede 	bl	8002b7c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009dc0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d006      	beq.n	8009dd6 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8009dc8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009dcc:	f003 0320 	and.w	r3, r3, #32
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	f47f aecb 	bne.w	8009b6c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009ddc:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009de0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d049      	beq.n	8009e7c <UART_RxISR_16BIT_FIFOEN+0x358>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009dee:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8009df2:	429a      	cmp	r2, r3
 8009df4:	d242      	bcs.n	8009e7c <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	3308      	adds	r3, #8
 8009dfc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e00:	e853 3f00 	ldrex	r3, [r3]
 8009e04:	623b      	str	r3, [r7, #32]
   return(result);
 8009e06:	6a3b      	ldr	r3, [r7, #32]
 8009e08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009e0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	3308      	adds	r3, #8
 8009e16:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009e1a:	633a      	str	r2, [r7, #48]	; 0x30
 8009e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e22:	e841 2300 	strex	r3, r2, [r1]
 8009e26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d1e3      	bne.n	8009df6 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	4a15      	ldr	r2, [pc, #84]	; (8009e88 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009e32:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	e853 3f00 	ldrex	r3, [r3]
 8009e40:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	f043 0320 	orr.w	r3, r3, #32
 8009e48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	461a      	mov	r2, r3
 8009e52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009e56:	61fb      	str	r3, [r7, #28]
 8009e58:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e5a:	69b9      	ldr	r1, [r7, #24]
 8009e5c:	69fa      	ldr	r2, [r7, #28]
 8009e5e:	e841 2300 	strex	r3, r2, [r1]
 8009e62:	617b      	str	r3, [r7, #20]
   return(result);
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d1e4      	bne.n	8009e34 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009e6a:	e007      	b.n	8009e7c <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	699a      	ldr	r2, [r3, #24]
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f042 0208 	orr.w	r2, r2, #8
 8009e7a:	619a      	str	r2, [r3, #24]
}
 8009e7c:	bf00      	nop
 8009e7e:	37b8      	adds	r7, #184	; 0xb8
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}
 8009e84:	40008000 	.word	0x40008000
 8009e88:	0800960d 	.word	0x0800960d

08009e8c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b083      	sub	sp, #12
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009e94:	bf00      	nop
 8009e96:	370c      	adds	r7, #12
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bc80      	pop	{r7}
 8009e9c:	4770      	bx	lr

08009e9e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009e9e:	b480      	push	{r7}
 8009ea0:	b083      	sub	sp, #12
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009ea6:	bf00      	nop
 8009ea8:	370c      	adds	r7, #12
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bc80      	pop	{r7}
 8009eae:	4770      	bx	lr

08009eb0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b083      	sub	sp, #12
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009eb8:	bf00      	nop
 8009eba:	370c      	adds	r7, #12
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bc80      	pop	{r7}
 8009ec0:	4770      	bx	lr

08009ec2 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8009ec2:	b580      	push	{r7, lr}
 8009ec4:	b088      	sub	sp, #32
 8009ec6:	af02      	add	r7, sp, #8
 8009ec8:	60f8      	str	r0, [r7, #12]
 8009eca:	1d3b      	adds	r3, r7, #4
 8009ecc:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009eda:	2b01      	cmp	r3, #1
 8009edc:	d101      	bne.n	8009ee2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 8009ede:	2302      	movs	r3, #2
 8009ee0:	e046      	b.n	8009f70 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	2201      	movs	r2, #1
 8009ee6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	2224      	movs	r2, #36	; 0x24
 8009eee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	681a      	ldr	r2, [r3, #0]
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f022 0201 	bic.w	r2, r2, #1
 8009f00:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	689b      	ldr	r3, [r3, #8]
 8009f08:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009f0c:	687a      	ldr	r2, [r7, #4]
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	430a      	orrs	r2, r1
 8009f14:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d105      	bne.n	8009f28 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8009f1c:	1d3b      	adds	r3, r7, #4
 8009f1e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009f22:	68f8      	ldr	r0, [r7, #12]
 8009f24:	f000 f911 	bl	800a14a <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	681a      	ldr	r2, [r3, #0]
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f042 0201 	orr.w	r2, r2, #1
 8009f36:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009f38:	f7f8 f96e 	bl	8002218 <HAL_GetTick>
 8009f3c:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f3e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009f42:	9300      	str	r3, [sp, #0]
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	2200      	movs	r2, #0
 8009f48:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009f4c:	68f8      	ldr	r0, [r7, #12]
 8009f4e:	f7fe ff16 	bl	8008d7e <UART_WaitOnFlagUntilTimeout>
 8009f52:	4603      	mov	r3, r0
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d002      	beq.n	8009f5e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 8009f58:	2303      	movs	r3, #3
 8009f5a:	75fb      	strb	r3, [r7, #23]
 8009f5c:	e003      	b.n	8009f66 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	2220      	movs	r2, #32
 8009f62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return status;
 8009f6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3718      	adds	r7, #24
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}

08009f78 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b089      	sub	sp, #36	; 0x24
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009f86:	2b01      	cmp	r3, #1
 8009f88:	d101      	bne.n	8009f8e <HAL_UARTEx_EnableStopMode+0x16>
 8009f8a:	2302      	movs	r3, #2
 8009f8c:	e021      	b.n	8009fd2 <HAL_UARTEx_EnableStopMode+0x5a>
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2201      	movs	r2, #1
 8009f92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	e853 3f00 	ldrex	r3, [r3]
 8009fa2:	60bb      	str	r3, [r7, #8]
   return(result);
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	f043 0302 	orr.w	r3, r3, #2
 8009faa:	61fb      	str	r3, [r7, #28]
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	461a      	mov	r2, r3
 8009fb2:	69fb      	ldr	r3, [r7, #28]
 8009fb4:	61bb      	str	r3, [r7, #24]
 8009fb6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fb8:	6979      	ldr	r1, [r7, #20]
 8009fba:	69ba      	ldr	r2, [r7, #24]
 8009fbc:	e841 2300 	strex	r3, r2, [r1]
 8009fc0:	613b      	str	r3, [r7, #16]
   return(result);
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d1e6      	bne.n	8009f96 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009fd0:	2300      	movs	r3, #0
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3724      	adds	r7, #36	; 0x24
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bc80      	pop	{r7}
 8009fda:	4770      	bx	lr

08009fdc <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b084      	sub	sp, #16
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009fea:	2b01      	cmp	r3, #1
 8009fec:	d101      	bne.n	8009ff2 <HAL_UARTEx_EnableFifoMode+0x16>
 8009fee:	2302      	movs	r3, #2
 8009ff0:	e02b      	b.n	800a04a <HAL_UARTEx_EnableFifoMode+0x6e>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2201      	movs	r2, #1
 8009ff6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2224      	movs	r2, #36	; 0x24
 8009ffe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	681a      	ldr	r2, [r3, #0]
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f022 0201 	bic.w	r2, r2, #1
 800a018:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a020:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800a028:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	68fa      	ldr	r2, [r7, #12]
 800a030:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f000 f8ac 	bl	800a190 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2220      	movs	r2, #32
 800a03c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2200      	movs	r2, #0
 800a044:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a048:	2300      	movs	r3, #0
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	3710      	adds	r7, #16
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}

0800a052 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a052:	b580      	push	{r7, lr}
 800a054:	b084      	sub	sp, #16
 800a056:	af00      	add	r7, sp, #0
 800a058:	6078      	str	r0, [r7, #4]
 800a05a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a062:	2b01      	cmp	r3, #1
 800a064:	d101      	bne.n	800a06a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a066:	2302      	movs	r3, #2
 800a068:	e02d      	b.n	800a0c6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2201      	movs	r2, #1
 800a06e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2224      	movs	r2, #36	; 0x24
 800a076:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	681a      	ldr	r2, [r3, #0]
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f022 0201 	bic.w	r2, r2, #1
 800a090:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	689b      	ldr	r3, [r3, #8]
 800a098:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	683a      	ldr	r2, [r7, #0]
 800a0a2:	430a      	orrs	r2, r1
 800a0a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f000 f872 	bl	800a190 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	68fa      	ldr	r2, [r7, #12]
 800a0b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2220      	movs	r2, #32
 800a0b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a0c4:	2300      	movs	r3, #0
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3710      	adds	r7, #16
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}

0800a0ce <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a0ce:	b580      	push	{r7, lr}
 800a0d0:	b084      	sub	sp, #16
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	6078      	str	r0, [r7, #4]
 800a0d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a0de:	2b01      	cmp	r3, #1
 800a0e0:	d101      	bne.n	800a0e6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a0e2:	2302      	movs	r3, #2
 800a0e4:	e02d      	b.n	800a142 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2224      	movs	r2, #36	; 0x24
 800a0f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	681a      	ldr	r2, [r3, #0]
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f022 0201 	bic.w	r2, r2, #1
 800a10c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	689b      	ldr	r3, [r3, #8]
 800a114:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	683a      	ldr	r2, [r7, #0]
 800a11e:	430a      	orrs	r2, r1
 800a120:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f000 f834 	bl	800a190 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	68fa      	ldr	r2, [r7, #12]
 800a12e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2220      	movs	r2, #32
 800a134:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2200      	movs	r2, #0
 800a13c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a140:	2300      	movs	r3, #0
}
 800a142:	4618      	mov	r0, r3
 800a144:	3710      	adds	r7, #16
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}

0800a14a <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800a14a:	b480      	push	{r7}
 800a14c:	b085      	sub	sp, #20
 800a14e:	af00      	add	r7, sp, #0
 800a150:	60f8      	str	r0, [r7, #12]
 800a152:	1d3b      	adds	r3, r7, #4
 800a154:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	685b      	ldr	r3, [r3, #4]
 800a15e:	f023 0210 	bic.w	r2, r3, #16
 800a162:	893b      	ldrh	r3, [r7, #8]
 800a164:	4619      	mov	r1, r3
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	430a      	orrs	r2, r1
 800a16c:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	685b      	ldr	r3, [r3, #4]
 800a174:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800a178:	7abb      	ldrb	r3, [r7, #10]
 800a17a:	061a      	lsls	r2, r3, #24
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	430a      	orrs	r2, r1
 800a182:	605a      	str	r2, [r3, #4]
}
 800a184:	bf00      	nop
 800a186:	3714      	adds	r7, #20
 800a188:	46bd      	mov	sp, r7
 800a18a:	bc80      	pop	{r7}
 800a18c:	4770      	bx	lr
	...

0800a190 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a190:	b480      	push	{r7}
 800a192:	b085      	sub	sp, #20
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d108      	bne.n	800a1b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2201      	movs	r2, #1
 800a1a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a1b0:	e031      	b.n	800a216 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a1b2:	2308      	movs	r3, #8
 800a1b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a1b6:	2308      	movs	r3, #8
 800a1b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	689b      	ldr	r3, [r3, #8]
 800a1c0:	0e5b      	lsrs	r3, r3, #25
 800a1c2:	b2db      	uxtb	r3, r3
 800a1c4:	f003 0307 	and.w	r3, r3, #7
 800a1c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	689b      	ldr	r3, [r3, #8]
 800a1d0:	0f5b      	lsrs	r3, r3, #29
 800a1d2:	b2db      	uxtb	r3, r3
 800a1d4:	f003 0307 	and.w	r3, r3, #7
 800a1d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a1da:	7bbb      	ldrb	r3, [r7, #14]
 800a1dc:	7b3a      	ldrb	r2, [r7, #12]
 800a1de:	4910      	ldr	r1, [pc, #64]	; (800a220 <UARTEx_SetNbDataToProcess+0x90>)
 800a1e0:	5c8a      	ldrb	r2, [r1, r2]
 800a1e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a1e6:	7b3a      	ldrb	r2, [r7, #12]
 800a1e8:	490e      	ldr	r1, [pc, #56]	; (800a224 <UARTEx_SetNbDataToProcess+0x94>)
 800a1ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a1ec:	fb93 f3f2 	sdiv	r3, r3, r2
 800a1f0:	b29a      	uxth	r2, r3
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a1f8:	7bfb      	ldrb	r3, [r7, #15]
 800a1fa:	7b7a      	ldrb	r2, [r7, #13]
 800a1fc:	4908      	ldr	r1, [pc, #32]	; (800a220 <UARTEx_SetNbDataToProcess+0x90>)
 800a1fe:	5c8a      	ldrb	r2, [r1, r2]
 800a200:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a204:	7b7a      	ldrb	r2, [r7, #13]
 800a206:	4907      	ldr	r1, [pc, #28]	; (800a224 <UARTEx_SetNbDataToProcess+0x94>)
 800a208:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a20a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a20e:	b29a      	uxth	r2, r3
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a216:	bf00      	nop
 800a218:	3714      	adds	r7, #20
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bc80      	pop	{r7}
 800a21e:	4770      	bx	lr
 800a220:	0801e604 	.word	0x0801e604
 800a224:	0801e60c 	.word	0x0801e60c

0800a228 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800a22c:	f7f7 fe94 	bl	8001f58 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800a230:	f000 f820 	bl	800a274 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800a234:	bf00      	nop
 800a236:	bd80      	pop	{r7, pc}

0800a238 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800a23c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a240:	f012 fd80 	bl	801cd44 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800a244:	bf00      	nop
 800a246:	bd80      	pop	{r7, pc}

0800a248 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800a248:	b480      	push	{r7}
 800a24a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800a24c:	f3bf 8f4f 	dsb	sy
}
 800a250:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800a252:	4b06      	ldr	r3, [pc, #24]	; (800a26c <__NVIC_SystemReset+0x24>)
 800a254:	68db      	ldr	r3, [r3, #12]
 800a256:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800a25a:	4904      	ldr	r1, [pc, #16]	; (800a26c <__NVIC_SystemReset+0x24>)
 800a25c:	4b04      	ldr	r3, [pc, #16]	; (800a270 <__NVIC_SystemReset+0x28>)
 800a25e:	4313      	orrs	r3, r2
 800a260:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800a262:	f3bf 8f4f 	dsb	sy
}
 800a266:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800a268:	bf00      	nop
 800a26a:	e7fd      	b.n	800a268 <__NVIC_SystemReset+0x20>
 800a26c:	e000ed00 	.word	0xe000ed00
 800a270:	05fa0004 	.word	0x05fa0004

0800a274 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b086      	sub	sp, #24
 800a278:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 800a27a:	2300      	movs	r3, #0
 800a27c:	607b      	str	r3, [r7, #4]
  /* USER CODE END LoRaWAN_Init_LV */

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* Get LoRaWAN APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800a27e:	2300      	movs	r3, #0
 800a280:	9302      	str	r3, [sp, #8]
 800a282:	2303      	movs	r3, #3
 800a284:	9301      	str	r3, [sp, #4]
 800a286:	2301      	movs	r3, #1
 800a288:	9300      	str	r3, [sp, #0]
 800a28a:	4b59      	ldr	r3, [pc, #356]	; (800a3f0 <LoRaWAN_Init+0x17c>)
 800a28c:	2200      	movs	r2, #0
 800a28e:	2100      	movs	r1, #0
 800a290:	2002      	movs	r0, #2
 800a292:	f013 f9a5 	bl	801d5e0 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW LoRaWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 800a296:	2300      	movs	r3, #0
 800a298:	9302      	str	r3, [sp, #8]
 800a29a:	2305      	movs	r3, #5
 800a29c:	9301      	str	r3, [sp, #4]
 800a29e:	2302      	movs	r3, #2
 800a2a0:	9300      	str	r3, [sp, #0]
 800a2a2:	4b54      	ldr	r3, [pc, #336]	; (800a3f4 <LoRaWAN_Init+0x180>)
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	2100      	movs	r1, #0
 800a2a8:	2002      	movs	r0, #2
 800a2aa:	f013 f999 	bl	801d5e0 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(LORAWAN_VERSION_MAIN),
          (uint8_t)(LORAWAN_VERSION_SUB1),
          (uint8_t)(LORAWAN_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	9302      	str	r3, [sp, #8]
 800a2b2:	2303      	movs	r3, #3
 800a2b4:	9301      	str	r3, [sp, #4]
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	9300      	str	r3, [sp, #0]
 800a2ba:	4b4f      	ldr	r3, [pc, #316]	; (800a3f8 <LoRaWAN_Init+0x184>)
 800a2bc:	2200      	movs	r2, #0
 800a2be:	2100      	movs	r1, #0
 800a2c0:	2002      	movs	r0, #2
 800a2c2:	f013 f98d 	bl	801d5e0 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 800a2c6:	1d3b      	adds	r3, r7, #4
 800a2c8:	4619      	mov	r1, r3
 800a2ca:	2000      	movs	r0, #0
 800a2cc:	f003 fa20 	bl	800d710 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	0e1b      	lsrs	r3, r3, #24
 800a2d4:	b2db      	uxtb	r3, r3
 800a2d6:	461a      	mov	r2, r3
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	0c1b      	lsrs	r3, r3, #16
 800a2dc:	b2db      	uxtb	r3, r3
 800a2de:	4619      	mov	r1, r3
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	0a1b      	lsrs	r3, r3, #8
 800a2e4:	b2db      	uxtb	r3, r3
 800a2e6:	9302      	str	r3, [sp, #8]
 800a2e8:	9101      	str	r1, [sp, #4]
 800a2ea:	9200      	str	r2, [sp, #0]
 800a2ec:	4b43      	ldr	r3, [pc, #268]	; (800a3fc <LoRaWAN_Init+0x188>)
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	2100      	movs	r1, #0
 800a2f2:	2002      	movs	r0, #2
 800a2f4:	f013 f974 	bl	801d5e0 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800a2f8:	1d3b      	adds	r3, r7, #4
 800a2fa:	4619      	mov	r1, r3
 800a2fc:	2001      	movs	r0, #1
 800a2fe:	f003 fa07 	bl	800d710 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	0e1b      	lsrs	r3, r3, #24
 800a306:	b2db      	uxtb	r3, r3
 800a308:	461a      	mov	r2, r3
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	0c1b      	lsrs	r3, r3, #16
 800a30e:	b2db      	uxtb	r3, r3
 800a310:	4619      	mov	r1, r3
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	0a1b      	lsrs	r3, r3, #8
 800a316:	b2db      	uxtb	r3, r3
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	b2c0      	uxtb	r0, r0
 800a31c:	9003      	str	r0, [sp, #12]
 800a31e:	9302      	str	r3, [sp, #8]
 800a320:	9101      	str	r1, [sp, #4]
 800a322:	9200      	str	r2, [sp, #0]
 800a324:	4b36      	ldr	r3, [pc, #216]	; (800a400 <LoRaWAN_Init+0x18c>)
 800a326:	2200      	movs	r2, #0
 800a328:	2100      	movs	r1, #0
 800a32a:	2002      	movs	r0, #2
 800a32c:	f013 f958 	bl	801d5e0 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800a330:	2300      	movs	r3, #0
 800a332:	9300      	str	r3, [sp, #0]
 800a334:	4b33      	ldr	r3, [pc, #204]	; (800a404 <LoRaWAN_Init+0x190>)
 800a336:	2200      	movs	r2, #0
 800a338:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a33c:	4832      	ldr	r0, [pc, #200]	; (800a408 <LoRaWAN_Init+0x194>)
 800a33e:	f012 fea1 	bl	801d084 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800a342:	2300      	movs	r3, #0
 800a344:	9300      	str	r3, [sp, #0]
 800a346:	4b31      	ldr	r3, [pc, #196]	; (800a40c <LoRaWAN_Init+0x198>)
 800a348:	2200      	movs	r2, #0
 800a34a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a34e:	4830      	ldr	r0, [pc, #192]	; (800a410 <LoRaWAN_Init+0x19c>)
 800a350:	f012 fe98 	bl	801d084 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800a354:	2300      	movs	r3, #0
 800a356:	9300      	str	r3, [sp, #0]
 800a358:	4b2e      	ldr	r3, [pc, #184]	; (800a414 <LoRaWAN_Init+0x1a0>)
 800a35a:	2201      	movs	r2, #1
 800a35c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a360:	482d      	ldr	r0, [pc, #180]	; (800a418 <LoRaWAN_Init+0x1a4>)
 800a362:	f012 fe8f 	bl	801d084 <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800a366:	2300      	movs	r3, #0
 800a368:	9300      	str	r3, [sp, #0]
 800a36a:	4b2c      	ldr	r3, [pc, #176]	; (800a41c <LoRaWAN_Init+0x1a8>)
 800a36c:	2200      	movs	r2, #0
 800a36e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800a372:	482b      	ldr	r0, [pc, #172]	; (800a420 <LoRaWAN_Init+0x1ac>)
 800a374:	f012 fe86 	bl	801d084 <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800a378:	4a2a      	ldr	r2, [pc, #168]	; (800a424 <LoRaWAN_Init+0x1b0>)
 800a37a:	2100      	movs	r1, #0
 800a37c:	2001      	movs	r0, #1
 800a37e:	f012 fddd 	bl	801cf3c <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800a382:	4a29      	ldr	r2, [pc, #164]	; (800a428 <LoRaWAN_Init+0x1b4>)
 800a384:	2100      	movs	r1, #0
 800a386:	2002      	movs	r0, #2
 800a388:	f012 fdd8 	bl	801cf3c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 800a38c:	4a27      	ldr	r2, [pc, #156]	; (800a42c <LoRaWAN_Init+0x1b8>)
 800a38e:	2100      	movs	r1, #0
 800a390:	2004      	movs	r0, #4
 800a392:	f012 fdd3 	bl	801cf3c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 800a396:	4a26      	ldr	r2, [pc, #152]	; (800a430 <LoRaWAN_Init+0x1bc>)
 800a398:	2100      	movs	r1, #0
 800a39a:	2008      	movs	r0, #8
 800a39c:	f012 fdce 	bl	801cf3c <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800a3a0:	f000 fd0e 	bl	800adc0 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800a3a4:	4923      	ldr	r1, [pc, #140]	; (800a434 <LoRaWAN_Init+0x1c0>)
 800a3a6:	4824      	ldr	r0, [pc, #144]	; (800a438 <LoRaWAN_Init+0x1c4>)
 800a3a8:	f002 fa24 	bl	800c7f4 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800a3ac:	4823      	ldr	r0, [pc, #140]	; (800a43c <LoRaWAN_Init+0x1c8>)
 800a3ae:	f002 fa8f 	bl	800c8d0 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800a3b2:	4819      	ldr	r0, [pc, #100]	; (800a418 <LoRaWAN_Init+0x1a4>)
 800a3b4:	f012 fe9c 	bl	801d0f0 <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 800a3b8:	4b21      	ldr	r3, [pc, #132]	; (800a440 <LoRaWAN_Init+0x1cc>)
 800a3ba:	781b      	ldrb	r3, [r3, #0]
 800a3bc:	4a21      	ldr	r2, [pc, #132]	; (800a444 <LoRaWAN_Init+0x1d0>)
 800a3be:	7812      	ldrb	r2, [r2, #0]
 800a3c0:	4611      	mov	r1, r2
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f002 fbdc 	bl	800cb80 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800a3c8:	4b1f      	ldr	r3, [pc, #124]	; (800a448 <LoRaWAN_Init+0x1d4>)
 800a3ca:	781b      	ldrb	r3, [r3, #0]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d10b      	bne.n	800a3e8 <LoRaWAN_Init+0x174>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800a3d0:	4b1e      	ldr	r3, [pc, #120]	; (800a44c <LoRaWAN_Init+0x1d8>)
 800a3d2:	6819      	ldr	r1, [r3, #0]
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	9300      	str	r3, [sp, #0]
 800a3d8:	4b1d      	ldr	r3, [pc, #116]	; (800a450 <LoRaWAN_Init+0x1dc>)
 800a3da:	2200      	movs	r2, #0
 800a3dc:	481d      	ldr	r0, [pc, #116]	; (800a454 <LoRaWAN_Init+0x1e0>)
 800a3de:	f012 fe51 	bl	801d084 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800a3e2:	481c      	ldr	r0, [pc, #112]	; (800a454 <LoRaWAN_Init+0x1e0>)
 800a3e4:	f012 fe84 	bl	801d0f0 <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800a3e8:	bf00      	nop
 800a3ea:	3708      	adds	r7, #8
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}
 800a3f0:	0801dc88 	.word	0x0801dc88
 800a3f4:	0801dcac 	.word	0x0801dcac
 800a3f8:	0801dcd0 	.word	0x0801dcd0
 800a3fc:	0801dcf4 	.word	0x0801dcf4
 800a400:	0801dd18 	.word	0x0801dd18
 800a404:	0800a8e1 	.word	0x0800a8e1
 800a408:	20000510 	.word	0x20000510
 800a40c:	0800a8f3 	.word	0x0800a8f3
 800a410:	20000528 	.word	0x20000528
 800a414:	0800a905 	.word	0x0800a905
 800a418:	20000540 	.word	0x20000540
 800a41c:	0800acc1 	.word	0x0800acc1
 800a420:	20000404 	.word	0x20000404
 800a424:	0800cb15 	.word	0x0800cb15
 800a428:	0800a5a1 	.word	0x0800a5a1
 800a42c:	0800ace5 	.word	0x0800ace5
 800a430:	0800ac41 	.word	0x0800ac41
 800a434:	01030000 	.word	0x01030000
 800a438:	20000024 	.word	0x20000024
 800a43c:	20000070 	.word	0x20000070
 800a440:	20000020 	.word	0x20000020
 800a444:	20000021 	.word	0x20000021
 800a448:	200003e8 	.word	0x200003e8
 800a44c:	20000088 	.word	0x20000088
 800a450:	0800a8bd 	.word	0x0800a8bd
 800a454:	200003ec 	.word	0x200003ec

0800a458 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800a458:	b5b0      	push	{r4, r5, r7, lr}
 800a45a:	b08a      	sub	sp, #40	; 0x28
 800a45c:	af06      	add	r7, sp, #24
 800a45e:	6078      	str	r0, [r7, #4]
 800a460:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  uint8_t RxPort = 0;
 800a462:	2300      	movs	r3, #0
 800a464:	73fb      	strb	r3, [r7, #15]

  if (params != NULL)
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	f000 8086 	beq.w	800a57a <OnRxData+0x122>
  {
#if 0   // XXX:
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
#endif

    UTIL_TIMER_Start(&RxLedTimer);
 800a46e:	4845      	ldr	r0, [pc, #276]	; (800a584 <OnRxData+0x12c>)
 800a470:	f012 fe3e 	bl	801d0f0 <UTIL_TIMER_Start>

    if (params->IsMcpsIndication)
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	781b      	ldrb	r3, [r3, #0]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d05a      	beq.n	800a532 <OnRxData+0xda>
    {
      if (appData != NULL)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d057      	beq.n	800a532 <OnRxData+0xda>
      {
        RxPort = appData->Port;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	781b      	ldrb	r3, [r3, #0]
 800a486:	73fb      	strb	r3, [r7, #15]
        if (appData->Buffer != NULL)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	685b      	ldr	r3, [r3, #4]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d050      	beq.n	800a532 <OnRxData+0xda>
        {
          switch (appData->Port)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	781b      	ldrb	r3, [r3, #0]
 800a494:	2b02      	cmp	r3, #2
 800a496:	d01f      	beq.n	800a4d8 <OnRxData+0x80>
 800a498:	2b03      	cmp	r3, #3
 800a49a:	d145      	bne.n	800a528 <OnRxData+0xd0>
          {
            case LORAWAN_SWITCH_CLASS_PORT:
              /*this port switches the class*/
              if (appData->BufferSize == 1)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	785b      	ldrb	r3, [r3, #1]
 800a4a0:	2b01      	cmp	r3, #1
 800a4a2:	d143      	bne.n	800a52c <OnRxData+0xd4>
              {
                switch (appData->Buffer[0])
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	685b      	ldr	r3, [r3, #4]
 800a4a8:	781b      	ldrb	r3, [r3, #0]
 800a4aa:	2b02      	cmp	r3, #2
 800a4ac:	d00e      	beq.n	800a4cc <OnRxData+0x74>
 800a4ae:	2b02      	cmp	r3, #2
 800a4b0:	dc10      	bgt.n	800a4d4 <OnRxData+0x7c>
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d002      	beq.n	800a4bc <OnRxData+0x64>
 800a4b6:	2b01      	cmp	r3, #1
 800a4b8:	d004      	beq.n	800a4c4 <OnRxData+0x6c>
                  {
                    LmHandlerRequestClass(CLASS_C);
                    break;
                  }
                  default:
                    break;
 800a4ba:	e00b      	b.n	800a4d4 <OnRxData+0x7c>
                    LmHandlerRequestClass(CLASS_A);
 800a4bc:	2000      	movs	r0, #0
 800a4be:	f002 fd13 	bl	800cee8 <LmHandlerRequestClass>
                    break;
 800a4c2:	e008      	b.n	800a4d6 <OnRxData+0x7e>
                    LmHandlerRequestClass(CLASS_B);
 800a4c4:	2001      	movs	r0, #1
 800a4c6:	f002 fd0f 	bl	800cee8 <LmHandlerRequestClass>
                    break;
 800a4ca:	e004      	b.n	800a4d6 <OnRxData+0x7e>
                    LmHandlerRequestClass(CLASS_C);
 800a4cc:	2002      	movs	r0, #2
 800a4ce:	f002 fd0b 	bl	800cee8 <LmHandlerRequestClass>
                    break;
 800a4d2:	e000      	b.n	800a4d6 <OnRxData+0x7e>
                    break;
 800a4d4:	bf00      	nop
                }
              }
              break;
 800a4d6:	e029      	b.n	800a52c <OnRxData+0xd4>
            case LORAWAN_USER_APP_PORT:
              if (appData->BufferSize == 1)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	785b      	ldrb	r3, [r3, #1]
 800a4dc:	2b01      	cmp	r3, #1
 800a4de:	d127      	bne.n	800a530 <OnRxData+0xd8>
              {
                AppLedStateOn = appData->Buffer[0] & 0x01;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	685b      	ldr	r3, [r3, #4]
 800a4e4:	781b      	ldrb	r3, [r3, #0]
 800a4e6:	f003 0301 	and.w	r3, r3, #1
 800a4ea:	b2da      	uxtb	r2, r3
 800a4ec:	4b26      	ldr	r3, [pc, #152]	; (800a588 <OnRxData+0x130>)
 800a4ee:	701a      	strb	r2, [r3, #0]
                if (AppLedStateOn == RESET)
 800a4f0:	4b25      	ldr	r3, [pc, #148]	; (800a588 <OnRxData+0x130>)
 800a4f2:	781b      	ldrb	r3, [r3, #0]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d10b      	bne.n	800a510 <OnRxData+0xb8>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 800a4f8:	4b24      	ldr	r3, [pc, #144]	; (800a58c <OnRxData+0x134>)
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	2100      	movs	r1, #0
 800a4fe:	2003      	movs	r0, #3
 800a500:	f013 f86e 	bl	801d5e0 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_RED */
 800a504:	2201      	movs	r2, #1
 800a506:	2120      	movs	r1, #32
 800a508:	4821      	ldr	r0, [pc, #132]	; (800a590 <OnRxData+0x138>)
 800a50a:	f7fa fe75 	bl	80051f8 <HAL_GPIO_WritePin>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
                }
              }
              break;
 800a50e:	e00f      	b.n	800a530 <OnRxData+0xd8>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800a510:	4b20      	ldr	r3, [pc, #128]	; (800a594 <OnRxData+0x13c>)
 800a512:	2200      	movs	r2, #0
 800a514:	2100      	movs	r1, #0
 800a516:	2003      	movs	r0, #3
 800a518:	f013 f862 	bl	801d5e0 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
 800a51c:	2200      	movs	r2, #0
 800a51e:	2120      	movs	r1, #32
 800a520:	481b      	ldr	r0, [pc, #108]	; (800a590 <OnRxData+0x138>)
 800a522:	f7fa fe69 	bl	80051f8 <HAL_GPIO_WritePin>
              break;
 800a526:	e003      	b.n	800a530 <OnRxData+0xd8>

            default:

              break;
 800a528:	bf00      	nop
 800a52a:	e002      	b.n	800a532 <OnRxData+0xda>
              break;
 800a52c:	bf00      	nop
 800a52e:	e000      	b.n	800a532 <OnRxData+0xda>
              break;
 800a530:	bf00      	nop
          }
        }
      }
    }
    if (params->RxSlot < RX_SLOT_NONE)
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	7c1b      	ldrb	r3, [r3, #16]
 800a536:	2b05      	cmp	r3, #5
 800a538:	d81f      	bhi.n	800a57a <OnRxData+0x122>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	68db      	ldr	r3, [r3, #12]
 800a53e:	7bfa      	ldrb	r2, [r7, #15]
 800a540:	6839      	ldr	r1, [r7, #0]
 800a542:	f991 1008 	ldrsb.w	r1, [r1, #8]
 800a546:	460c      	mov	r4, r1
 800a548:	6839      	ldr	r1, [r7, #0]
 800a54a:	7c09      	ldrb	r1, [r1, #16]
 800a54c:	4608      	mov	r0, r1
 800a54e:	4912      	ldr	r1, [pc, #72]	; (800a598 <OnRxData+0x140>)
 800a550:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800a554:	6838      	ldr	r0, [r7, #0]
 800a556:	f990 0009 	ldrsb.w	r0, [r0, #9]
 800a55a:	4605      	mov	r5, r0
 800a55c:	6838      	ldr	r0, [r7, #0]
 800a55e:	f990 000a 	ldrsb.w	r0, [r0, #10]
 800a562:	9005      	str	r0, [sp, #20]
 800a564:	9504      	str	r5, [sp, #16]
 800a566:	9103      	str	r1, [sp, #12]
 800a568:	9402      	str	r4, [sp, #8]
 800a56a:	9201      	str	r2, [sp, #4]
 800a56c:	9300      	str	r3, [sp, #0]
 800a56e:	4b0b      	ldr	r3, [pc, #44]	; (800a59c <OnRxData+0x144>)
 800a570:	2200      	movs	r2, #0
 800a572:	2100      	movs	r1, #0
 800a574:	2003      	movs	r0, #3
 800a576:	f013 f833 	bl	801d5e0 <UTIL_ADV_TRACE_COND_FSend>
              params->DownlinkCounter, RxPort, params->Datarate, slotStrings[params->RxSlot], params->Rssi, params->Snr);
    }
  }
  /* USER CODE END OnRxData_1 */
}
 800a57a:	bf00      	nop
 800a57c:	3710      	adds	r7, #16
 800a57e:	46bd      	mov	sp, r7
 800a580:	bdb0      	pop	{r4, r5, r7, pc}
 800a582:	bf00      	nop
 800a584:	20000528 	.word	0x20000528
 800a588:	2000050e 	.word	0x2000050e
 800a58c:	0801dd3c 	.word	0x0801dd3c
 800a590:	48000400 	.word	0x48000400
 800a594:	0801dd48 	.word	0x0801dd48
 800a598:	20000008 	.word	0x20000008
 800a59c:	0801dd54 	.word	0x0801dd54

0800a5a0 <SendTxData>:

static void SendTxData(void)
{
 800a5a0:	b590      	push	{r4, r7, lr}
 800a5a2:	b091      	sub	sp, #68	; 0x44
 800a5a4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800a5a6:	23ff      	movs	r3, #255	; 0xff
 800a5a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t batteryLevel = GetBatteryLevel();
 800a5ac:	f7f7 fd04 	bl	8001fb8 <GetBatteryLevel>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	637b      	str	r3, [r7, #52]	; 0x34

#ifdef CAYENNE_LPP
  uint8_t channel = 0;
#else
  uint16_t pressure = 0;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	85bb      	strh	r3, [r7, #44]	; 0x2c
  int16_t temperature = 0;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t humidity = 0;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	853b      	strh	r3, [r7, #40]	; 0x28
  uint32_t i = 0;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	633b      	str	r3, [r7, #48]	; 0x30
  int32_t latitude = 0;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	627b      	str	r3, [r7, #36]	; 0x24
  int32_t longitude = 0;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	623b      	str	r3, [r7, #32]
  uint16_t altitudeGps = 0;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	83fb      	strh	r3, [r7, #30]
#endif /* CAYENNE_LPP */

  EnvSensors_Read(&sensor_data);
 800a5d6:	1d3b      	adds	r3, r7, #4
 800a5d8:	4618      	mov	r0, r3
 800a5da:	f7f7 fe47 	bl	800226c <EnvSensors_Read>

  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 800a5de:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a5e2:	9300      	str	r3, [sp, #0]
 800a5e4:	4b8f      	ldr	r3, [pc, #572]	; (800a824 <SendTxData+0x284>)
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	2100      	movs	r1, #0
 800a5ea:	2002      	movs	r0, #2
 800a5ec:	f012 fff8 	bl	801d5e0 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f7f6 fa92 	bl	8000b1c <__aeabi_f2iz>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	b21b      	sxth	r3, r3
 800a5fc:	9300      	str	r3, [sp, #0]
 800a5fe:	4b8a      	ldr	r3, [pc, #552]	; (800a828 <SendTxData+0x288>)
 800a600:	2201      	movs	r2, #1
 800a602:	2100      	movs	r1, #0
 800a604:	2002      	movs	r0, #2
 800a606:	f012 ffeb 	bl	801d5e0 <UTIL_ADV_TRACE_COND_FSend>

  AppData.Port = LORAWAN_USER_APP_PORT;
 800a60a:	4b88      	ldr	r3, [pc, #544]	; (800a82c <SendTxData+0x28c>)
 800a60c:	2202      	movs	r2, #2
 800a60e:	701a      	strb	r2, [r3, #0]
  }

  CayenneLppCopy(AppData.Buffer);
  AppData.BufferSize = CayenneLppGetSize();
#else  /* not CAYENNE_LPP */
  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	4987      	ldr	r1, [pc, #540]	; (800a830 <SendTxData+0x290>)
 800a614:	4618      	mov	r0, r3
 800a616:	f7f6 f931 	bl	800087c <__aeabi_fmul>
 800a61a:	4603      	mov	r3, r0
 800a61c:	4618      	mov	r0, r3
 800a61e:	f7f6 faa3 	bl	8000b68 <__aeabi_f2uiz>
 800a622:	4603      	mov	r3, r0
 800a624:	853b      	strh	r3, [r7, #40]	; 0x28
  temperature = (int16_t)(sensor_data.temperature);
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	4618      	mov	r0, r3
 800a62a:	f7f6 fa77 	bl	8000b1c <__aeabi_f2iz>
 800a62e:	4603      	mov	r3, r0
 800a630:	857b      	strh	r3, [r7, #42]	; 0x2a
  pressure = (uint16_t)(sensor_data.pressure * 100 / 10); /* in hPa / 10 */
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	497f      	ldr	r1, [pc, #508]	; (800a834 <SendTxData+0x294>)
 800a636:	4618      	mov	r0, r3
 800a638:	f7f6 f920 	bl	800087c <__aeabi_fmul>
 800a63c:	4603      	mov	r3, r0
 800a63e:	497c      	ldr	r1, [pc, #496]	; (800a830 <SendTxData+0x290>)
 800a640:	4618      	mov	r0, r3
 800a642:	f7f6 f9cf 	bl	80009e4 <__aeabi_fdiv>
 800a646:	4603      	mov	r3, r0
 800a648:	4618      	mov	r0, r3
 800a64a:	f7f6 fa8d 	bl	8000b68 <__aeabi_f2uiz>
 800a64e:	4603      	mov	r3, r0
 800a650:	85bb      	strh	r3, [r7, #44]	; 0x2c

  AppData.Buffer[i++] = AppLedStateOn;
 800a652:	4b76      	ldr	r3, [pc, #472]	; (800a82c <SendTxData+0x28c>)
 800a654:	685a      	ldr	r2, [r3, #4]
 800a656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a658:	1c59      	adds	r1, r3, #1
 800a65a:	6339      	str	r1, [r7, #48]	; 0x30
 800a65c:	4413      	add	r3, r2
 800a65e:	4a76      	ldr	r2, [pc, #472]	; (800a838 <SendTxData+0x298>)
 800a660:	7812      	ldrb	r2, [r2, #0]
 800a662:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 800a664:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a666:	0a1b      	lsrs	r3, r3, #8
 800a668:	b298      	uxth	r0, r3
 800a66a:	4b70      	ldr	r3, [pc, #448]	; (800a82c <SendTxData+0x28c>)
 800a66c:	685a      	ldr	r2, [r3, #4]
 800a66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a670:	1c59      	adds	r1, r3, #1
 800a672:	6339      	str	r1, [r7, #48]	; 0x30
 800a674:	4413      	add	r3, r2
 800a676:	b2c2      	uxtb	r2, r0
 800a678:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 800a67a:	4b6c      	ldr	r3, [pc, #432]	; (800a82c <SendTxData+0x28c>)
 800a67c:	685a      	ldr	r2, [r3, #4]
 800a67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a680:	1c59      	adds	r1, r3, #1
 800a682:	6339      	str	r1, [r7, #48]	; 0x30
 800a684:	4413      	add	r3, r2
 800a686:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800a688:	b2d2      	uxtb	r2, r2
 800a68a:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 800a68c:	4b67      	ldr	r3, [pc, #412]	; (800a82c <SendTxData+0x28c>)
 800a68e:	685a      	ldr	r2, [r3, #4]
 800a690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a692:	1c59      	adds	r1, r3, #1
 800a694:	6339      	str	r1, [r7, #48]	; 0x30
 800a696:	4413      	add	r3, r2
 800a698:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800a69a:	b2d2      	uxtb	r2, r2
 800a69c:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 800a69e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a6a0:	0a1b      	lsrs	r3, r3, #8
 800a6a2:	b298      	uxth	r0, r3
 800a6a4:	4b61      	ldr	r3, [pc, #388]	; (800a82c <SendTxData+0x28c>)
 800a6a6:	685a      	ldr	r2, [r3, #4]
 800a6a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6aa:	1c59      	adds	r1, r3, #1
 800a6ac:	6339      	str	r1, [r7, #48]	; 0x30
 800a6ae:	4413      	add	r3, r2
 800a6b0:	b2c2      	uxtb	r2, r0
 800a6b2:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 800a6b4:	4b5d      	ldr	r3, [pc, #372]	; (800a82c <SendTxData+0x28c>)
 800a6b6:	685a      	ldr	r2, [r3, #4]
 800a6b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ba:	1c59      	adds	r1, r3, #1
 800a6bc:	6339      	str	r1, [r7, #48]	; 0x30
 800a6be:	4413      	add	r3, r2
 800a6c0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800a6c2:	b2d2      	uxtb	r2, r2
 800a6c4:	701a      	strb	r2, [r3, #0]

  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 800a6c6:	4b5d      	ldr	r3, [pc, #372]	; (800a83c <SendTxData+0x29c>)
 800a6c8:	781b      	ldrb	r3, [r3, #0]
 800a6ca:	2b08      	cmp	r3, #8
 800a6cc:	d007      	beq.n	800a6de <SendTxData+0x13e>
 800a6ce:	4b5b      	ldr	r3, [pc, #364]	; (800a83c <SendTxData+0x29c>)
 800a6d0:	781b      	ldrb	r3, [r3, #0]
 800a6d2:	2b01      	cmp	r3, #1
 800a6d4:	d003      	beq.n	800a6de <SendTxData+0x13e>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 800a6d6:	4b59      	ldr	r3, [pc, #356]	; (800a83c <SendTxData+0x29c>)
 800a6d8:	781b      	ldrb	r3, [r3, #0]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d120      	bne.n	800a720 <SendTxData+0x180>
  {
    AppData.Buffer[i++] = 0;
 800a6de:	4b53      	ldr	r3, [pc, #332]	; (800a82c <SendTxData+0x28c>)
 800a6e0:	685a      	ldr	r2, [r3, #4]
 800a6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e4:	1c59      	adds	r1, r3, #1
 800a6e6:	6339      	str	r1, [r7, #48]	; 0x30
 800a6e8:	4413      	add	r3, r2
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800a6ee:	4b4f      	ldr	r3, [pc, #316]	; (800a82c <SendTxData+0x28c>)
 800a6f0:	685a      	ldr	r2, [r3, #4]
 800a6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f4:	1c59      	adds	r1, r3, #1
 800a6f6:	6339      	str	r1, [r7, #48]	; 0x30
 800a6f8:	4413      	add	r3, r2
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800a6fe:	4b4b      	ldr	r3, [pc, #300]	; (800a82c <SendTxData+0x28c>)
 800a700:	685a      	ldr	r2, [r3, #4]
 800a702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a704:	1c59      	adds	r1, r3, #1
 800a706:	6339      	str	r1, [r7, #48]	; 0x30
 800a708:	4413      	add	r3, r2
 800a70a:	2200      	movs	r2, #0
 800a70c:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800a70e:	4b47      	ldr	r3, [pc, #284]	; (800a82c <SendTxData+0x28c>)
 800a710:	685a      	ldr	r2, [r3, #4]
 800a712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a714:	1c59      	adds	r1, r3, #1
 800a716:	6339      	str	r1, [r7, #48]	; 0x30
 800a718:	4413      	add	r3, r2
 800a71a:	2200      	movs	r2, #0
 800a71c:	701a      	strb	r2, [r3, #0]
 800a71e:	e05b      	b.n	800a7d8 <SendTxData+0x238>
  }
  else
  {
    latitude = sensor_data.latitude;
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	627b      	str	r3, [r7, #36]	; 0x24
    longitude = sensor_data.longitude;
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	623b      	str	r3, [r7, #32]

    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 800a728:	4b40      	ldr	r3, [pc, #256]	; (800a82c <SendTxData+0x28c>)
 800a72a:	685a      	ldr	r2, [r3, #4]
 800a72c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a72e:	1c59      	adds	r1, r3, #1
 800a730:	6339      	str	r1, [r7, #48]	; 0x30
 800a732:	18d4      	adds	r4, r2, r3
 800a734:	f7f7 fc40 	bl	8001fb8 <GetBatteryLevel>
 800a738:	4603      	mov	r3, r0
 800a73a:	7023      	strb	r3, [r4, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 800a73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a73e:	1418      	asrs	r0, r3, #16
 800a740:	4b3a      	ldr	r3, [pc, #232]	; (800a82c <SendTxData+0x28c>)
 800a742:	685a      	ldr	r2, [r3, #4]
 800a744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a746:	1c59      	adds	r1, r3, #1
 800a748:	6339      	str	r1, [r7, #48]	; 0x30
 800a74a:	4413      	add	r3, r2
 800a74c:	b2c2      	uxtb	r2, r0
 800a74e:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 800a750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a752:	1218      	asrs	r0, r3, #8
 800a754:	4b35      	ldr	r3, [pc, #212]	; (800a82c <SendTxData+0x28c>)
 800a756:	685a      	ldr	r2, [r3, #4]
 800a758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a75a:	1c59      	adds	r1, r3, #1
 800a75c:	6339      	str	r1, [r7, #48]	; 0x30
 800a75e:	4413      	add	r3, r2
 800a760:	b2c2      	uxtb	r2, r0
 800a762:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 800a764:	4b31      	ldr	r3, [pc, #196]	; (800a82c <SendTxData+0x28c>)
 800a766:	685a      	ldr	r2, [r3, #4]
 800a768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a76a:	1c59      	adds	r1, r3, #1
 800a76c:	6339      	str	r1, [r7, #48]	; 0x30
 800a76e:	4413      	add	r3, r2
 800a770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a772:	b2d2      	uxtb	r2, r2
 800a774:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 800a776:	6a3b      	ldr	r3, [r7, #32]
 800a778:	1418      	asrs	r0, r3, #16
 800a77a:	4b2c      	ldr	r3, [pc, #176]	; (800a82c <SendTxData+0x28c>)
 800a77c:	685a      	ldr	r2, [r3, #4]
 800a77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a780:	1c59      	adds	r1, r3, #1
 800a782:	6339      	str	r1, [r7, #48]	; 0x30
 800a784:	4413      	add	r3, r2
 800a786:	b2c2      	uxtb	r2, r0
 800a788:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 800a78a:	6a3b      	ldr	r3, [r7, #32]
 800a78c:	1218      	asrs	r0, r3, #8
 800a78e:	4b27      	ldr	r3, [pc, #156]	; (800a82c <SendTxData+0x28c>)
 800a790:	685a      	ldr	r2, [r3, #4]
 800a792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a794:	1c59      	adds	r1, r3, #1
 800a796:	6339      	str	r1, [r7, #48]	; 0x30
 800a798:	4413      	add	r3, r2
 800a79a:	b2c2      	uxtb	r2, r0
 800a79c:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 800a79e:	4b23      	ldr	r3, [pc, #140]	; (800a82c <SendTxData+0x28c>)
 800a7a0:	685a      	ldr	r2, [r3, #4]
 800a7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a4:	1c59      	adds	r1, r3, #1
 800a7a6:	6339      	str	r1, [r7, #48]	; 0x30
 800a7a8:	4413      	add	r3, r2
 800a7aa:	6a3a      	ldr	r2, [r7, #32]
 800a7ac:	b2d2      	uxtb	r2, r2
 800a7ae:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 800a7b0:	8bfb      	ldrh	r3, [r7, #30]
 800a7b2:	0a1b      	lsrs	r3, r3, #8
 800a7b4:	b298      	uxth	r0, r3
 800a7b6:	4b1d      	ldr	r3, [pc, #116]	; (800a82c <SendTxData+0x28c>)
 800a7b8:	685a      	ldr	r2, [r3, #4]
 800a7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7bc:	1c59      	adds	r1, r3, #1
 800a7be:	6339      	str	r1, [r7, #48]	; 0x30
 800a7c0:	4413      	add	r3, r2
 800a7c2:	b2c2      	uxtb	r2, r0
 800a7c4:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 800a7c6:	4b19      	ldr	r3, [pc, #100]	; (800a82c <SendTxData+0x28c>)
 800a7c8:	685a      	ldr	r2, [r3, #4]
 800a7ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7cc:	1c59      	adds	r1, r3, #1
 800a7ce:	6339      	str	r1, [r7, #48]	; 0x30
 800a7d0:	4413      	add	r3, r2
 800a7d2:	8bfa      	ldrh	r2, [r7, #30]
 800a7d4:	b2d2      	uxtb	r2, r2
 800a7d6:	701a      	strb	r2, [r3, #0]
  }

  AppData.BufferSize = i;
 800a7d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7da:	b2da      	uxtb	r2, r3
 800a7dc:	4b13      	ldr	r3, [pc, #76]	; (800a82c <SendTxData+0x28c>)
 800a7de:	705a      	strb	r2, [r3, #1]
#endif /* CAYENNE_LPP */

  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800a7e0:	4b17      	ldr	r3, [pc, #92]	; (800a840 <SendTxData+0x2a0>)
 800a7e2:	7a5b      	ldrb	r3, [r3, #9]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d007      	beq.n	800a7f8 <SendTxData+0x258>
 800a7e8:	f002 fa6c 	bl	800ccc4 <LmHandlerJoinStatus>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	2b01      	cmp	r3, #1
 800a7f0:	d102      	bne.n	800a7f8 <SendTxData+0x258>
  {
    UTIL_TIMER_Stop(&JoinLedTimer);
 800a7f2:	4813      	ldr	r0, [pc, #76]	; (800a840 <SendTxData+0x2a0>)
 800a7f4:	f012 fcea 	bl	801d1cc <UTIL_TIMER_Stop>
#if 0   // XXX:
    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif
  }

  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800a7f8:	4b10      	ldr	r3, [pc, #64]	; (800a83c <SendTxData+0x29c>)
 800a7fa:	78db      	ldrb	r3, [r3, #3]
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	4619      	mov	r1, r3
 800a800:	480a      	ldr	r0, [pc, #40]	; (800a82c <SendTxData+0x28c>)
 800a802:	f002 fa7b 	bl	800ccfc <LmHandlerSend>
 800a806:	4603      	mov	r3, r0
 800a808:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (LORAMAC_HANDLER_SUCCESS == status)
 800a80c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a810:	2b00      	cmp	r3, #0
 800a812:	d119      	bne.n	800a848 <SendTxData+0x2a8>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800a814:	4b0b      	ldr	r3, [pc, #44]	; (800a844 <SendTxData+0x2a4>)
 800a816:	2201      	movs	r2, #1
 800a818:	2100      	movs	r1, #0
 800a81a:	2001      	movs	r0, #1
 800a81c:	f012 fee0 	bl	801d5e0 <UTIL_ADV_TRACE_COND_FSend>
 800a820:	e029      	b.n	800a876 <SendTxData+0x2d6>
 800a822:	bf00      	nop
 800a824:	0801dd9c 	.word	0x0801dd9c
 800a828:	0801dda8 	.word	0x0801dda8
 800a82c:	2000008c 	.word	0x2000008c
 800a830:	41200000 	.word	0x41200000
 800a834:	42c80000 	.word	0x42c80000
 800a838:	2000050e 	.word	0x2000050e
 800a83c:	20000070 	.word	0x20000070
 800a840:	20000540 	.word	0x20000540
 800a844:	0801ddb4 	.word	0x0801ddb4
  }
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800a848:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a84c:	f113 0f06 	cmn.w	r3, #6
 800a850:	d111      	bne.n	800a876 <SendTxData+0x2d6>
  {
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800a852:	f002 f98b 	bl	800cb6c <LmHandlerGetDutyCycleWaitTime>
 800a856:	6378      	str	r0, [r7, #52]	; 0x34
    if (nextTxIn > 0)
 800a858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d00b      	beq.n	800a876 <SendTxData+0x2d6>
    {
      APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800a85e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a860:	4a11      	ldr	r2, [pc, #68]	; (800a8a8 <SendTxData+0x308>)
 800a862:	fba2 2303 	umull	r2, r3, r2, r3
 800a866:	099b      	lsrs	r3, r3, #6
 800a868:	9300      	str	r3, [sp, #0]
 800a86a:	4b10      	ldr	r3, [pc, #64]	; (800a8ac <SendTxData+0x30c>)
 800a86c:	2201      	movs	r2, #1
 800a86e:	2100      	movs	r1, #0
 800a870:	2001      	movs	r0, #1
 800a872:	f012 feb5 	bl	801d5e0 <UTIL_ADV_TRACE_COND_FSend>
    }
  }

  if (EventType == TX_ON_TIMER)
 800a876:	4b0e      	ldr	r3, [pc, #56]	; (800a8b0 <SendTxData+0x310>)
 800a878:	781b      	ldrb	r3, [r3, #0]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d10f      	bne.n	800a89e <SendTxData+0x2fe>
  {
    UTIL_TIMER_Stop(&TxTimer);
 800a87e:	480d      	ldr	r0, [pc, #52]	; (800a8b4 <SendTxData+0x314>)
 800a880:	f012 fca4 	bl	801d1cc <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 800a884:	4b0c      	ldr	r3, [pc, #48]	; (800a8b8 <SendTxData+0x318>)
 800a886:	681a      	ldr	r2, [r3, #0]
 800a888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a88a:	4293      	cmp	r3, r2
 800a88c:	bf38      	it	cc
 800a88e:	4613      	movcc	r3, r2
 800a890:	4619      	mov	r1, r3
 800a892:	4808      	ldr	r0, [pc, #32]	; (800a8b4 <SendTxData+0x314>)
 800a894:	f012 fd0a 	bl	801d2ac <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800a898:	4806      	ldr	r0, [pc, #24]	; (800a8b4 <SendTxData+0x314>)
 800a89a:	f012 fc29 	bl	801d0f0 <UTIL_TIMER_Start>
  }

  /* USER CODE END SendTxData_1 */
}
 800a89e:	bf00      	nop
 800a8a0:	373c      	adds	r7, #60	; 0x3c
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd90      	pop	{r4, r7, pc}
 800a8a6:	bf00      	nop
 800a8a8:	10624dd3 	.word	0x10624dd3
 800a8ac:	0801ddc4 	.word	0x0801ddc4
 800a8b0:	200003e8 	.word	0x200003e8
 800a8b4:	200003ec 	.word	0x200003ec
 800a8b8:	20000088 	.word	0x20000088

0800a8bc <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b082      	sub	sp, #8
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800a8c4:	2100      	movs	r1, #0
 800a8c6:	2002      	movs	r0, #2
 800a8c8:	f012 fb5a 	bl	801cf80 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800a8cc:	4803      	ldr	r0, [pc, #12]	; (800a8dc <OnTxTimerEvent+0x20>)
 800a8ce:	f012 fc0f 	bl	801d0f0 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800a8d2:	bf00      	nop
 800a8d4:	3708      	adds	r7, #8
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}
 800a8da:	bf00      	nop
 800a8dc:	200003ec 	.word	0x200003ec

0800a8e0 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	b083      	sub	sp, #12
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
#if 0	// XXX: No LED available
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
}
 800a8e8:	bf00      	nop
 800a8ea:	370c      	adds	r7, #12
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bc80      	pop	{r7}
 800a8f0:	4770      	bx	lr

0800a8f2 <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800a8f2:	b480      	push	{r7}
 800a8f4:	b083      	sub	sp, #12
 800a8f6:	af00      	add	r7, sp, #0
 800a8f8:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
#endif
}
 800a8fa:	bf00      	nop
 800a8fc:	370c      	adds	r7, #12
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bc80      	pop	{r7}
 800a902:	4770      	bx	lr

0800a904 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800a904:	b480      	push	{r7}
 800a906:	b083      	sub	sp, #12
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
#endif
}
 800a90c:	bf00      	nop
 800a90e:	370c      	adds	r7, #12
 800a910:	46bd      	mov	sp, r7
 800a912:	bc80      	pop	{r7}
 800a914:	4770      	bx	lr
	...

0800a918 <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b086      	sub	sp, #24
 800a91c:	af04      	add	r7, sp, #16
 800a91e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d041      	beq.n	800a9aa <OnTxData+0x92>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	781b      	ldrb	r3, [r3, #0]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d03d      	beq.n	800a9aa <OnTxData+0x92>
    {
#if 0	// XXX: No LED available
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif
      UTIL_TIMER_Start(&TxLedTimer);
 800a92e:	4821      	ldr	r0, [pc, #132]	; (800a9b4 <OnTxData+0x9c>)
 800a930:	f012 fbde 	bl	801d0f0 <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800a934:	4b20      	ldr	r3, [pc, #128]	; (800a9b8 <OnTxData+0xa0>)
 800a936:	2200      	movs	r2, #0
 800a938:	2100      	movs	r1, #0
 800a93a:	2002      	movs	r0, #2
 800a93c:	f012 fe50 	bl	801d5e0 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	68db      	ldr	r3, [r3, #12]
 800a944:	687a      	ldr	r2, [r7, #4]
 800a946:	7c12      	ldrb	r2, [r2, #16]
 800a948:	4611      	mov	r1, r2
 800a94a:	687a      	ldr	r2, [r7, #4]
 800a94c:	f992 200a 	ldrsb.w	r2, [r2, #10]
 800a950:	4610      	mov	r0, r2
 800a952:	687a      	ldr	r2, [r7, #4]
 800a954:	f992 2018 	ldrsb.w	r2, [r2, #24]
 800a958:	9203      	str	r2, [sp, #12]
 800a95a:	9002      	str	r0, [sp, #8]
 800a95c:	9101      	str	r1, [sp, #4]
 800a95e:	9300      	str	r3, [sp, #0]
 800a960:	4b16      	ldr	r3, [pc, #88]	; (800a9bc <OnTxData+0xa4>)
 800a962:	2200      	movs	r2, #0
 800a964:	2100      	movs	r1, #0
 800a966:	2003      	movs	r0, #3
 800a968:	f012 fe3a 	bl	801d5e0 <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800a96c:	4b14      	ldr	r3, [pc, #80]	; (800a9c0 <OnTxData+0xa8>)
 800a96e:	2200      	movs	r2, #0
 800a970:	2100      	movs	r1, #0
 800a972:	2003      	movs	r0, #3
 800a974:	f012 fe34 	bl	801d5e0 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	7a1b      	ldrb	r3, [r3, #8]
 800a97c:	2b01      	cmp	r3, #1
 800a97e:	d10e      	bne.n	800a99e <OnTxData+0x86>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	7a5b      	ldrb	r3, [r3, #9]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d001      	beq.n	800a98c <OnTxData+0x74>
 800a988:	4b0e      	ldr	r3, [pc, #56]	; (800a9c4 <OnTxData+0xac>)
 800a98a:	e000      	b.n	800a98e <OnTxData+0x76>
 800a98c:	4b0e      	ldr	r3, [pc, #56]	; (800a9c8 <OnTxData+0xb0>)
 800a98e:	9300      	str	r3, [sp, #0]
 800a990:	4b0e      	ldr	r3, [pc, #56]	; (800a9cc <OnTxData+0xb4>)
 800a992:	2200      	movs	r2, #0
 800a994:	2100      	movs	r1, #0
 800a996:	2003      	movs	r0, #3
 800a998:	f012 fe22 	bl	801d5e0 <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800a99c:	e005      	b.n	800a9aa <OnTxData+0x92>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800a99e:	4b0c      	ldr	r3, [pc, #48]	; (800a9d0 <OnTxData+0xb8>)
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	2100      	movs	r1, #0
 800a9a4:	2003      	movs	r0, #3
 800a9a6:	f012 fe1b 	bl	801d5e0 <UTIL_ADV_TRACE_COND_FSend>
}
 800a9aa:	bf00      	nop
 800a9ac:	3708      	adds	r7, #8
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}
 800a9b2:	bf00      	nop
 800a9b4:	20000510 	.word	0x20000510
 800a9b8:	0801dde4 	.word	0x0801dde4
 800a9bc:	0801de18 	.word	0x0801de18
 800a9c0:	0801de4c 	.word	0x0801de4c
 800a9c4:	0801de5c 	.word	0x0801de5c
 800a9c8:	0801de60 	.word	0x0801de60
 800a9cc:	0801de68 	.word	0x0801de68
 800a9d0:	0801de7c 	.word	0x0801de7c

0800a9d4 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b082      	sub	sp, #8
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d039      	beq.n	800aa56 <OnJoinRequest+0x82>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d11e      	bne.n	800aa2a <OnJoinRequest+0x56>
    {
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), CFG_SEQ_Prio_0);
 800a9ec:	2100      	movs	r1, #0
 800a9ee:	2004      	movs	r0, #4
 800a9f0:	f012 fac6 	bl	801cf80 <UTIL_SEQ_SetTask>

      UTIL_TIMER_Stop(&JoinLedTimer);
 800a9f4:	481a      	ldr	r0, [pc, #104]	; (800aa60 <OnJoinRequest+0x8c>)
 800a9f6:	f012 fbe9 	bl	801d1cc <UTIL_TIMER_Stop>
#if 0   // XXX:
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800a9fa:	4b1a      	ldr	r3, [pc, #104]	; (800aa64 <OnJoinRequest+0x90>)
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	2100      	movs	r1, #0
 800aa00:	2002      	movs	r0, #2
 800aa02:	f012 fded 	bl	801d5e0 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	79db      	ldrb	r3, [r3, #7]
 800aa0a:	2b01      	cmp	r3, #1
 800aa0c:	d106      	bne.n	800aa1c <OnJoinRequest+0x48>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800aa0e:	4b16      	ldr	r3, [pc, #88]	; (800aa68 <OnJoinRequest+0x94>)
 800aa10:	2200      	movs	r2, #0
 800aa12:	2100      	movs	r1, #0
 800aa14:	2002      	movs	r0, #2
 800aa16:	f012 fde3 	bl	801d5e0 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
      }
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800aa1a:	e01c      	b.n	800aa56 <OnJoinRequest+0x82>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800aa1c:	4b13      	ldr	r3, [pc, #76]	; (800aa6c <OnJoinRequest+0x98>)
 800aa1e:	2200      	movs	r2, #0
 800aa20:	2100      	movs	r1, #0
 800aa22:	2002      	movs	r0, #2
 800aa24:	f012 fddc 	bl	801d5e0 <UTIL_ADV_TRACE_COND_FSend>
}
 800aa28:	e015      	b.n	800aa56 <OnJoinRequest+0x82>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800aa2a:	4b11      	ldr	r3, [pc, #68]	; (800aa70 <OnJoinRequest+0x9c>)
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	2100      	movs	r1, #0
 800aa30:	2002      	movs	r0, #2
 800aa32:	f012 fdd5 	bl	801d5e0 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA) {
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	79db      	ldrb	r3, [r3, #7]
 800aa3a:	2b02      	cmp	r3, #2
 800aa3c:	d10b      	bne.n	800aa56 <OnJoinRequest+0x82>
          APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = RE-TRYING OTAA JOIN\r\n");
 800aa3e:	4b0d      	ldr	r3, [pc, #52]	; (800aa74 <OnJoinRequest+0xa0>)
 800aa40:	2200      	movs	r2, #0
 800aa42:	2100      	movs	r1, #0
 800aa44:	2002      	movs	r0, #2
 800aa46:	f012 fdcb 	bl	801d5e0 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 800aa4a:	4b0b      	ldr	r3, [pc, #44]	; (800aa78 <OnJoinRequest+0xa4>)
 800aa4c:	781b      	ldrb	r3, [r3, #0]
 800aa4e:	2101      	movs	r1, #1
 800aa50:	4618      	mov	r0, r3
 800aa52:	f002 f895 	bl	800cb80 <LmHandlerJoin>
}
 800aa56:	bf00      	nop
 800aa58:	3708      	adds	r7, #8
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}
 800aa5e:	bf00      	nop
 800aa60:	20000540 	.word	0x20000540
 800aa64:	0801de8c 	.word	0x0801de8c
 800aa68:	0801dea4 	.word	0x0801dea4
 800aa6c:	0801dec4 	.word	0x0801dec4
 800aa70:	0801dee4 	.word	0x0801dee4
 800aa74:	0801df00 	.word	0x0801df00
 800aa78:	20000020 	.word	0x20000020

0800aa7c <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800aa7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa7e:	b093      	sub	sp, #76	; 0x4c
 800aa80:	af0c      	add	r7, sp, #48	; 0x30
 800aa82:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800aa84:	697b      	ldr	r3, [r7, #20]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d056      	beq.n	800ab38 <OnBeaconStatusChange+0xbc>
  {
    switch (params->State)
 800aa8a:	697b      	ldr	r3, [r7, #20]
 800aa8c:	785b      	ldrb	r3, [r3, #1]
 800aa8e:	2b02      	cmp	r3, #2
 800aa90:	d008      	beq.n	800aaa4 <OnBeaconStatusChange+0x28>
 800aa92:	2b03      	cmp	r3, #3
 800aa94:	d049      	beq.n	800ab2a <OnBeaconStatusChange+0xae>
    {
      default:
      case LORAMAC_HANDLER_BEACON_LOST:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800aa96:	4b2a      	ldr	r3, [pc, #168]	; (800ab40 <OnBeaconStatusChange+0xc4>)
 800aa98:	2200      	movs	r2, #0
 800aa9a:	2100      	movs	r1, #0
 800aa9c:	2002      	movs	r0, #2
 800aa9e:	f012 fd9f 	bl	801d5e0 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800aaa2:	e049      	b.n	800ab38 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_RX:
      {
        APP_LOG(TS_OFF, VLEVEL_M,
 800aaa4:	697b      	ldr	r3, [r7, #20]
 800aaa6:	7c1b      	ldrb	r3, [r3, #16]
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800aab0:	461c      	mov	r4, r3
 800aab2:	697b      	ldr	r3, [r7, #20]
 800aab4:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800aab8:	461d      	mov	r5, r3
 800aaba:	697b      	ldr	r3, [r7, #20]
 800aabc:	68db      	ldr	r3, [r3, #12]
 800aabe:	697a      	ldr	r2, [r7, #20]
 800aac0:	6852      	ldr	r2, [r2, #4]
 800aac2:	6979      	ldr	r1, [r7, #20]
 800aac4:	7d89      	ldrb	r1, [r1, #22]
 800aac6:	460e      	mov	r6, r1
 800aac8:	6979      	ldr	r1, [r7, #20]
 800aaca:	7dc9      	ldrb	r1, [r1, #23]
 800aacc:	6139      	str	r1, [r7, #16]
 800aace:	6979      	ldr	r1, [r7, #20]
 800aad0:	7e09      	ldrb	r1, [r1, #24]
 800aad2:	60f9      	str	r1, [r7, #12]
 800aad4:	6979      	ldr	r1, [r7, #20]
 800aad6:	7e49      	ldrb	r1, [r1, #25]
 800aad8:	60b9      	str	r1, [r7, #8]
 800aada:	6979      	ldr	r1, [r7, #20]
 800aadc:	7e89      	ldrb	r1, [r1, #26]
 800aade:	6079      	str	r1, [r7, #4]
 800aae0:	6979      	ldr	r1, [r7, #20]
 800aae2:	7ec9      	ldrb	r1, [r1, #27]
 800aae4:	6039      	str	r1, [r7, #0]
 800aae6:	6979      	ldr	r1, [r7, #20]
 800aae8:	7f09      	ldrb	r1, [r1, #28]
 800aaea:	910b      	str	r1, [sp, #44]	; 0x2c
 800aaec:	f8d7 c000 	ldr.w	ip, [r7]
 800aaf0:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800aaf4:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800aaf8:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800aafc:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800ab00:	f8cd c020 	str.w	ip, [sp, #32]
 800ab04:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800ab08:	f8cd c01c 	str.w	ip, [sp, #28]
 800ab0c:	6939      	ldr	r1, [r7, #16]
 800ab0e:	9106      	str	r1, [sp, #24]
 800ab10:	9605      	str	r6, [sp, #20]
 800ab12:	9204      	str	r2, [sp, #16]
 800ab14:	9303      	str	r3, [sp, #12]
 800ab16:	9502      	str	r5, [sp, #8]
 800ab18:	9401      	str	r4, [sp, #4]
 800ab1a:	9000      	str	r0, [sp, #0]
 800ab1c:	4b09      	ldr	r3, [pc, #36]	; (800ab44 <OnBeaconStatusChange+0xc8>)
 800ab1e:	2200      	movs	r2, #0
 800ab20:	2100      	movs	r1, #0
 800ab22:	2002      	movs	r0, #2
 800ab24:	f012 fd5c 	bl	801d5e0 <UTIL_ADV_TRACE_COND_FSend>
                params->Info.Datarate, params->Info.Rssi, params->Info.Snr, params->Info.Frequency,
                params->Info.Time.Seconds, params->Info.GwSpecific.InfoDesc,
                params->Info.GwSpecific.Info[0], params->Info.GwSpecific.Info[1],
                params->Info.GwSpecific.Info[2], params->Info.GwSpecific.Info[3],
                params->Info.GwSpecific.Info[4], params->Info.GwSpecific.Info[5]);
        break;
 800ab28:	e006      	b.n	800ab38 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800ab2a:	4b07      	ldr	r3, [pc, #28]	; (800ab48 <OnBeaconStatusChange+0xcc>)
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	2100      	movs	r1, #0
 800ab30:	2002      	movs	r0, #2
 800ab32:	f012 fd55 	bl	801d5e0 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800ab36:	bf00      	nop
      }
    }
  }
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800ab38:	bf00      	nop
 800ab3a:	371c      	adds	r7, #28
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab40:	0801df24 	.word	0x0801df24
 800ab44:	0801df3c 	.word	0x0801df3c
 800ab48:	0801dfb0 	.word	0x0801dfb0

0800ab4c <OnSysTimeUpdate>:

static void OnSysTimeUpdate(void)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 800ab50:	bf00      	nop
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bc80      	pop	{r7}
 800ab56:	4770      	bx	lr

0800ab58 <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b084      	sub	sp, #16
 800ab5c:	af02      	add	r7, sp, #8
 800ab5e:	4603      	mov	r3, r0
 800ab60:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800ab62:	79fb      	ldrb	r3, [r7, #7]
 800ab64:	4a06      	ldr	r2, [pc, #24]	; (800ab80 <OnClassChange+0x28>)
 800ab66:	5cd3      	ldrb	r3, [r2, r3]
 800ab68:	9300      	str	r3, [sp, #0]
 800ab6a:	4b06      	ldr	r3, [pc, #24]	; (800ab84 <OnClassChange+0x2c>)
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	2100      	movs	r1, #0
 800ab70:	2002      	movs	r0, #2
 800ab72:	f012 fd35 	bl	801d5e0 <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END OnClassChange_1 */
}
 800ab76:	bf00      	nop
 800ab78:	3708      	adds	r7, #8
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}
 800ab7e:	bf00      	nop
 800ab80:	0801dfec 	.word	0x0801dfec
 800ab84:	0801dfd0 	.word	0x0801dfd0

0800ab88 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800ab8c:	2100      	movs	r1, #0
 800ab8e:	2001      	movs	r0, #1
 800ab90:	f012 f9f6 	bl	801cf80 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800ab94:	bf00      	nop
 800ab96:	bd80      	pop	{r7, pc}

0800ab98 <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b082      	sub	sp, #8
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800aba0:	4a0d      	ldr	r2, [pc, #52]	; (800abd8 <OnTxPeriodicityChanged+0x40>)
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800aba6:	4b0c      	ldr	r3, [pc, #48]	; (800abd8 <OnTxPeriodicityChanged+0x40>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d103      	bne.n	800abb6 <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800abae:	4b0a      	ldr	r3, [pc, #40]	; (800abd8 <OnTxPeriodicityChanged+0x40>)
 800abb0:	f242 7210 	movw	r2, #10000	; 0x2710
 800abb4:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800abb6:	4809      	ldr	r0, [pc, #36]	; (800abdc <OnTxPeriodicityChanged+0x44>)
 800abb8:	f012 fb08 	bl	801d1cc <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800abbc:	4b06      	ldr	r3, [pc, #24]	; (800abd8 <OnTxPeriodicityChanged+0x40>)
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	4619      	mov	r1, r3
 800abc2:	4806      	ldr	r0, [pc, #24]	; (800abdc <OnTxPeriodicityChanged+0x44>)
 800abc4:	f012 fb72 	bl	801d2ac <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800abc8:	4804      	ldr	r0, [pc, #16]	; (800abdc <OnTxPeriodicityChanged+0x44>)
 800abca:	f012 fa91 	bl	801d0f0 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800abce:	bf00      	nop
 800abd0:	3708      	adds	r7, #8
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}
 800abd6:	bf00      	nop
 800abd8:	20000088 	.word	0x20000088
 800abdc:	200003ec 	.word	0x200003ec

0800abe0 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800abe0:	b480      	push	{r7}
 800abe2:	b083      	sub	sp, #12
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	4603      	mov	r3, r0
 800abe8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800abea:	4a04      	ldr	r2, [pc, #16]	; (800abfc <OnTxFrameCtrlChanged+0x1c>)
 800abec:	79fb      	ldrb	r3, [r7, #7]
 800abee:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800abf0:	bf00      	nop
 800abf2:	370c      	adds	r7, #12
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bc80      	pop	{r7}
 800abf8:	4770      	bx	lr
 800abfa:	bf00      	nop
 800abfc:	20000070 	.word	0x20000070

0800ac00 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b083      	sub	sp, #12
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	4603      	mov	r3, r0
 800ac08:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800ac0a:	4a04      	ldr	r2, [pc, #16]	; (800ac1c <OnPingSlotPeriodicityChanged+0x1c>)
 800ac0c:	79fb      	ldrb	r3, [r7, #7]
 800ac0e:	7413      	strb	r3, [r2, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800ac10:	bf00      	nop
 800ac12:	370c      	adds	r7, #12
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bc80      	pop	{r7}
 800ac18:	4770      	bx	lr
 800ac1a:	bf00      	nop
 800ac1c:	20000070 	.word	0x20000070

0800ac20 <OnSystemReset>:

static void OnSystemReset(void)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800ac24:	f002 fda5 	bl	800d772 <LmHandlerHalt>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d106      	bne.n	800ac3c <OnSystemReset+0x1c>
 800ac2e:	f002 f849 	bl	800ccc4 <LmHandlerJoinStatus>
 800ac32:	4603      	mov	r3, r0
 800ac34:	2b01      	cmp	r3, #1
 800ac36:	d101      	bne.n	800ac3c <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800ac38:	f7ff fb06 	bl	800a248 <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800ac3c:	bf00      	nop
 800ac3e:	bd80      	pop	{r7, pc}

0800ac40 <StopJoin>:

static void StopJoin(void)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800ac44:	4817      	ldr	r0, [pc, #92]	; (800aca4 <StopJoin+0x64>)
 800ac46:	f012 fac1 	bl	801d1cc <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800ac4a:	f002 fd85 	bl	800d758 <LmHandlerStop>
 800ac4e:	4603      	mov	r3, r0
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d006      	beq.n	800ac62 <StopJoin+0x22>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800ac54:	4b14      	ldr	r3, [pc, #80]	; (800aca8 <StopJoin+0x68>)
 800ac56:	2200      	movs	r2, #0
 800ac58:	2100      	movs	r1, #0
 800ac5a:	2002      	movs	r0, #2
 800ac5c:	f012 fcc0 	bl	801d5e0 <UTIL_ADV_TRACE_COND_FSend>
 800ac60:	e01a      	b.n	800ac98 <StopJoin+0x58>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800ac62:	4b12      	ldr	r3, [pc, #72]	; (800acac <StopJoin+0x6c>)
 800ac64:	2200      	movs	r2, #0
 800ac66:	2100      	movs	r1, #0
 800ac68:	2002      	movs	r0, #2
 800ac6a:	f012 fcb9 	bl	801d5e0 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800ac6e:	4b10      	ldr	r3, [pc, #64]	; (800acb0 <StopJoin+0x70>)
 800ac70:	2201      	movs	r2, #1
 800ac72:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800ac74:	4b0f      	ldr	r3, [pc, #60]	; (800acb4 <StopJoin+0x74>)
 800ac76:	2200      	movs	r2, #0
 800ac78:	2100      	movs	r1, #0
 800ac7a:	2002      	movs	r0, #2
 800ac7c:	f012 fcb0 	bl	801d5e0 <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 800ac80:	480d      	ldr	r0, [pc, #52]	; (800acb8 <StopJoin+0x78>)
 800ac82:	f001 fe25 	bl	800c8d0 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800ac86:	4b0a      	ldr	r3, [pc, #40]	; (800acb0 <StopJoin+0x70>)
 800ac88:	781b      	ldrb	r3, [r3, #0]
 800ac8a:	2101      	movs	r1, #1
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	f001 ff77 	bl	800cb80 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800ac92:	4804      	ldr	r0, [pc, #16]	; (800aca4 <StopJoin+0x64>)
 800ac94:	f012 fa2c 	bl	801d0f0 <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800ac98:	4808      	ldr	r0, [pc, #32]	; (800acbc <StopJoin+0x7c>)
 800ac9a:	f012 fa29 	bl	801d0f0 <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800ac9e:	bf00      	nop
 800aca0:	bd80      	pop	{r7, pc}
 800aca2:	bf00      	nop
 800aca4:	200003ec 	.word	0x200003ec
 800aca8:	0801dff0 	.word	0x0801dff0
 800acac:	0801e010 	.word	0x0801e010
 800acb0:	20000020 	.word	0x20000020
 800acb4:	0801e024 	.word	0x0801e024
 800acb8:	20000070 	.word	0x20000070
 800acbc:	20000404 	.word	0x20000404

0800acc0 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b082      	sub	sp, #8
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800acc8:	4b05      	ldr	r3, [pc, #20]	; (800ace0 <OnStopJoinTimerEvent+0x20>)
 800acca:	781b      	ldrb	r3, [r3, #0]
 800accc:	2b02      	cmp	r3, #2
 800acce:	d103      	bne.n	800acd8 <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800acd0:	2100      	movs	r1, #0
 800acd2:	2008      	movs	r0, #8
 800acd4:	f012 f954 	bl	801cf80 <UTIL_SEQ_SetTask>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800acd8:	bf00      	nop
 800acda:	3708      	adds	r7, #8
 800acdc:	46bd      	mov	sp, r7
 800acde:	bd80      	pop	{r7, pc}
 800ace0:	20000020 	.word	0x20000020

0800ace4 <StoreContext>:

static void StoreContext(void)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b082      	sub	sp, #8
 800ace8:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800acea:	23ff      	movs	r3, #255	; 0xff
 800acec:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800acee:	f002 fd75 	bl	800d7dc <LmHandlerNvmDataStore>
 800acf2:	4603      	mov	r3, r0
 800acf4:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800acf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800acfa:	f113 0f08 	cmn.w	r3, #8
 800acfe:	d106      	bne.n	800ad0e <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800ad00:	4b0a      	ldr	r3, [pc, #40]	; (800ad2c <StoreContext+0x48>)
 800ad02:	2200      	movs	r2, #0
 800ad04:	2100      	movs	r1, #0
 800ad06:	2002      	movs	r0, #2
 800ad08:	f012 fc6a 	bl	801d5e0 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800ad0c:	e00a      	b.n	800ad24 <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 800ad0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad16:	d105      	bne.n	800ad24 <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800ad18:	4b05      	ldr	r3, [pc, #20]	; (800ad30 <StoreContext+0x4c>)
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	2100      	movs	r1, #0
 800ad1e:	2002      	movs	r0, #2
 800ad20:	f012 fc5e 	bl	801d5e0 <UTIL_ADV_TRACE_COND_FSend>
}
 800ad24:	bf00      	nop
 800ad26:	3708      	adds	r7, #8
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}
 800ad2c:	0801e044 	.word	0x0801e044
 800ad30:	0801e05c 	.word	0x0801e05c

0800ad34 <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b082      	sub	sp, #8
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800ad3e:	79fb      	ldrb	r3, [r7, #7]
 800ad40:	2b01      	cmp	r3, #1
 800ad42:	d106      	bne.n	800ad52 <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800ad44:	4b08      	ldr	r3, [pc, #32]	; (800ad68 <OnNvmDataChange+0x34>)
 800ad46:	2200      	movs	r2, #0
 800ad48:	2100      	movs	r1, #0
 800ad4a:	2002      	movs	r0, #2
 800ad4c:	f012 fc48 	bl	801d5e0 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800ad50:	e005      	b.n	800ad5e <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800ad52:	4b06      	ldr	r3, [pc, #24]	; (800ad6c <OnNvmDataChange+0x38>)
 800ad54:	2200      	movs	r2, #0
 800ad56:	2100      	movs	r1, #0
 800ad58:	2002      	movs	r0, #2
 800ad5a:	f012 fc41 	bl	801d5e0 <UTIL_ADV_TRACE_COND_FSend>
}
 800ad5e:	bf00      	nop
 800ad60:	3708      	adds	r7, #8
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}
 800ad66:	bf00      	nop
 800ad68:	0801e074 	.word	0x0801e074
 800ad6c:	0801e088 	.word	0x0801e088

0800ad70 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b082      	sub	sp, #8
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 800ad7a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ad7e:	4807      	ldr	r0, [pc, #28]	; (800ad9c <OnStoreContextRequest+0x2c>)
 800ad80:	f7f6 fa6a 	bl	8001258 <FLASH_IF_Erase>
 800ad84:	4603      	mov	r3, r0
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d104      	bne.n	800ad94 <OnStoreContextRequest+0x24>
  {
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 800ad8a:	683a      	ldr	r2, [r7, #0]
 800ad8c:	6879      	ldr	r1, [r7, #4]
 800ad8e:	4803      	ldr	r0, [pc, #12]	; (800ad9c <OnStoreContextRequest+0x2c>)
 800ad90:	f7f6 fa12 	bl	80011b8 <FLASH_IF_Write>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800ad94:	bf00      	nop
 800ad96:	3708      	adds	r7, #8
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}
 800ad9c:	0803f000 	.word	0x0803f000

0800ada0 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b082      	sub	sp, #8
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
 800ada8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800adaa:	683a      	ldr	r2, [r7, #0]
 800adac:	4903      	ldr	r1, [pc, #12]	; (800adbc <OnRestoreContextRequest+0x1c>)
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f7f6 fa2a 	bl	8001208 <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800adb4:	bf00      	nop
 800adb6:	3708      	adds	r7, #8
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}
 800adbc:	0803f000 	.word	0x0803f000

0800adc0 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	af00      	add	r7, sp, #0
  loraInfo.ContextManagement = 0;
 800adc4:	4b18      	ldr	r3, [pc, #96]	; (800ae28 <LoraInfo_Init+0x68>)
 800adc6:	2200      	movs	r2, #0
 800adc8:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800adca:	4b17      	ldr	r3, [pc, #92]	; (800ae28 <LoraInfo_Init+0x68>)
 800adcc:	2200      	movs	r2, #0
 800adce:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800add0:	4b15      	ldr	r3, [pc, #84]	; (800ae28 <LoraInfo_Init+0x68>)
 800add2:	2200      	movs	r2, #0
 800add4:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800add6:	4b14      	ldr	r3, [pc, #80]	; (800ae28 <LoraInfo_Init+0x68>)
 800add8:	2200      	movs	r2, #0
 800adda:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 800addc:	4b12      	ldr	r3, [pc, #72]	; (800ae28 <LoraInfo_Init+0x68>)
 800adde:	685b      	ldr	r3, [r3, #4]
 800ade0:	f043 0320 	orr.w	r3, r3, #32
 800ade4:	4a10      	ldr	r2, [pc, #64]	; (800ae28 <LoraInfo_Init+0x68>)
 800ade6:	6053      	str	r3, [r2, #4]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865);
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915);
 800ade8:	4b0f      	ldr	r3, [pc, #60]	; (800ae28 <LoraInfo_Init+0x68>)
 800adea:	685b      	ldr	r3, [r3, #4]
 800adec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800adf0:	4a0d      	ldr	r2, [pc, #52]	; (800ae28 <LoraInfo_Init+0x68>)
 800adf2:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800adf4:	4b0c      	ldr	r3, [pc, #48]	; (800ae28 <LoraInfo_Init+0x68>)
 800adf6:	685b      	ldr	r3, [r3, #4]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d10c      	bne.n	800ae16 <LoraInfo_Init+0x56>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800adfc:	4b0b      	ldr	r3, [pc, #44]	; (800ae2c <LoraInfo_Init+0x6c>)
 800adfe:	2200      	movs	r2, #0
 800ae00:	2100      	movs	r1, #0
 800ae02:	2000      	movs	r0, #0
 800ae04:	f012 fbec 	bl	801d5e0 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800ae08:	bf00      	nop
 800ae0a:	f012 fbd7 	bl	801d5bc <UTIL_ADV_TRACE_IsBufferEmpty>
 800ae0e:	4603      	mov	r3, r0
 800ae10:	2b01      	cmp	r3, #1
 800ae12:	d1fa      	bne.n	800ae0a <LoraInfo_Init+0x4a>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800ae14:	e7fe      	b.n	800ae14 <LoraInfo_Init+0x54>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800ae16:	4b04      	ldr	r3, [pc, #16]	; (800ae28 <LoraInfo_Init+0x68>)
 800ae18:	2200      	movs	r2, #0
 800ae1a:	60da      	str	r2, [r3, #12]
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
#else /* CONTEXT_MANAGEMENT_ENABLED == 1 */
  loraInfo.ContextManagement = 1;
 800ae1c:	4b02      	ldr	r3, [pc, #8]	; (800ae28 <LoraInfo_Init+0x68>)
 800ae1e:	2201      	movs	r2, #1
 800ae20:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800ae22:	bf00      	nop
 800ae24:	bd80      	pop	{r7, pc}
 800ae26:	bf00      	nop
 800ae28:	20000558 	.word	0x20000558
 800ae2c:	0801e09c 	.word	0x0801e09c

0800ae30 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800ae30:	b480      	push	{r7}
 800ae32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800ae34:	4b02      	ldr	r3, [pc, #8]	; (800ae40 <LoraInfo_GetPtr+0x10>)
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bc80      	pop	{r7}
 800ae3c:	4770      	bx	lr
 800ae3e:	bf00      	nop
 800ae40:	20000558 	.word	0x20000558

0800ae44 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800ae48:	f7f7 fee9 	bl	8002c1e <BSP_RADIO_Init>
 800ae4c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	bd80      	pop	{r7, pc}

0800ae52 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800ae52:	b580      	push	{r7, lr}
 800ae54:	b082      	sub	sp, #8
 800ae56:	af00      	add	r7, sp, #0
 800ae58:	4603      	mov	r3, r0
 800ae5a:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800ae5c:	79fb      	ldrb	r3, [r7, #7]
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f7f7 ff0e 	bl	8002c80 <BSP_RADIO_ConfigRFSwitch>
 800ae64:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3708      	adds	r7, #8
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}

0800ae6e <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800ae6e:	b580      	push	{r7, lr}
 800ae70:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800ae72:	f7f7 ff53 	bl	8002d1c <BSP_RADIO_GetTxConfig>
 800ae76:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	bd80      	pop	{r7, pc}

0800ae7c <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800ae80:	f7f7 ff53 	bl	8002d2a <BSP_RADIO_IsTCXO>
 800ae84:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800ae86:	4618      	mov	r0, r3
 800ae88:	bd80      	pop	{r7, pc}

0800ae8a <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800ae8a:	b580      	push	{r7, lr}
 800ae8c:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800ae8e:	f7f7 ff53 	bl	8002d38 <BSP_RADIO_IsDCDC>
 800ae92:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	bd80      	pop	{r7, pc}

0800ae98 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b082      	sub	sp, #8
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	4603      	mov	r3, r0
 800aea0:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800aea2:	79fb      	ldrb	r3, [r7, #7]
 800aea4:	4618      	mov	r0, r3
 800aea6:	f7f7 ff4e 	bl	8002d46 <BSP_RADIO_GetRFOMaxPowerConfig>
 800aeaa:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800aeac:	4618      	mov	r0, r3
 800aeae:	3708      	adds	r7, #8
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bd80      	pop	{r7, pc}

0800aeb4 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b082      	sub	sp, #8
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	33f1      	adds	r3, #241	; 0xf1
 800aec0:	2210      	movs	r2, #16
 800aec2:	2100      	movs	r1, #0
 800aec4:	4618      	mov	r0, r3
 800aec6:	f00e f821 	bl	8018f0c <memset1>
    ctx->M_n = 0;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2200      	movs	r2, #0
 800aece:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	22f0      	movs	r2, #240	; 0xf0
 800aed6:	2100      	movs	r1, #0
 800aed8:	4618      	mov	r0, r3
 800aeda:	f00e f817 	bl	8018f0c <memset1>
}
 800aede:	bf00      	nop
 800aee0:	3708      	adds	r7, #8
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}

0800aee6 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800aee6:	b580      	push	{r7, lr}
 800aee8:	b082      	sub	sp, #8
 800aeea:	af00      	add	r7, sp, #0
 800aeec:	6078      	str	r0, [r7, #4]
 800aeee:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	461a      	mov	r2, r3
 800aef4:	2110      	movs	r1, #16
 800aef6:	6838      	ldr	r0, [r7, #0]
 800aef8:	f000 fe5c 	bl	800bbb4 <lorawan_aes_set_key>
}
 800aefc:	bf00      	nop
 800aefe:	3708      	adds	r7, #8
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}

0800af04 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b08c      	sub	sp, #48	; 0x30
 800af08:	af00      	add	r7, sp, #0
 800af0a:	60f8      	str	r0, [r7, #12]
 800af0c:	60b9      	str	r1, [r7, #8]
 800af0e:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800af16:	2b00      	cmp	r3, #0
 800af18:	f000 80a1 	beq.w	800b05e <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800af22:	f1c3 0310 	rsb	r3, r3, #16
 800af26:	687a      	ldr	r2, [r7, #4]
 800af28:	4293      	cmp	r3, r2
 800af2a:	bf28      	it	cs
 800af2c:	4613      	movcs	r3, r2
 800af2e:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	f203 1201 	addw	r2, r3, #257	; 0x101
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800af3c:	4413      	add	r3, r2
 800af3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af40:	b292      	uxth	r2, r2
 800af42:	68b9      	ldr	r1, [r7, #8]
 800af44:	4618      	mov	r0, r3
 800af46:	f00d ffa6 	bl	8018e96 <memcpy1>
        ctx->M_n += mlen;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800af50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af52:	441a      	add	r2, r3
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800af60:	2b0f      	cmp	r3, #15
 800af62:	f240 808d 	bls.w	800b080 <AES_CMAC_Update+0x17c>
 800af66:	687a      	ldr	r2, [r7, #4]
 800af68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af6a:	429a      	cmp	r2, r3
 800af6c:	f000 8088 	beq.w	800b080 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800af70:	2300      	movs	r3, #0
 800af72:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af74:	e015      	b.n	800afa2 <AES_CMAC_Update+0x9e>
 800af76:	68fa      	ldr	r2, [r7, #12]
 800af78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af7a:	4413      	add	r3, r2
 800af7c:	33f1      	adds	r3, #241	; 0xf1
 800af7e:	781a      	ldrb	r2, [r3, #0]
 800af80:	68f9      	ldr	r1, [r7, #12]
 800af82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af84:	440b      	add	r3, r1
 800af86:	f203 1301 	addw	r3, r3, #257	; 0x101
 800af8a:	781b      	ldrb	r3, [r3, #0]
 800af8c:	4053      	eors	r3, r2
 800af8e:	b2d9      	uxtb	r1, r3
 800af90:	68fa      	ldr	r2, [r7, #12]
 800af92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af94:	4413      	add	r3, r2
 800af96:	33f1      	adds	r3, #241	; 0xf1
 800af98:	460a      	mov	r2, r1
 800af9a:	701a      	strb	r2, [r3, #0]
 800af9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af9e:	3301      	adds	r3, #1
 800afa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800afa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afa4:	2b0f      	cmp	r3, #15
 800afa6:	dde6      	ble.n	800af76 <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800afae:	f107 0314 	add.w	r3, r7, #20
 800afb2:	2210      	movs	r2, #16
 800afb4:	4618      	mov	r0, r3
 800afb6:	f00d ff6e 	bl	8018e96 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800afba:	68fa      	ldr	r2, [r7, #12]
 800afbc:	f107 0114 	add.w	r1, r7, #20
 800afc0:	f107 0314 	add.w	r3, r7, #20
 800afc4:	4618      	mov	r0, r3
 800afc6:	f000 fed3 	bl	800bd70 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	33f1      	adds	r3, #241	; 0xf1
 800afce:	f107 0114 	add.w	r1, r7, #20
 800afd2:	2210      	movs	r2, #16
 800afd4:	4618      	mov	r0, r3
 800afd6:	f00d ff5e 	bl	8018e96 <memcpy1>

        data += mlen;
 800afda:	68ba      	ldr	r2, [r7, #8]
 800afdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afde:	4413      	add	r3, r2
 800afe0:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800afe2:	687a      	ldr	r2, [r7, #4]
 800afe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe6:	1ad3      	subs	r3, r2, r3
 800afe8:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800afea:	e038      	b.n	800b05e <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800afec:	2300      	movs	r3, #0
 800afee:	62bb      	str	r3, [r7, #40]	; 0x28
 800aff0:	e013      	b.n	800b01a <AES_CMAC_Update+0x116>
 800aff2:	68fa      	ldr	r2, [r7, #12]
 800aff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aff6:	4413      	add	r3, r2
 800aff8:	33f1      	adds	r3, #241	; 0xf1
 800affa:	781a      	ldrb	r2, [r3, #0]
 800affc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800affe:	68b9      	ldr	r1, [r7, #8]
 800b000:	440b      	add	r3, r1
 800b002:	781b      	ldrb	r3, [r3, #0]
 800b004:	4053      	eors	r3, r2
 800b006:	b2d9      	uxtb	r1, r3
 800b008:	68fa      	ldr	r2, [r7, #12]
 800b00a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b00c:	4413      	add	r3, r2
 800b00e:	33f1      	adds	r3, #241	; 0xf1
 800b010:	460a      	mov	r2, r1
 800b012:	701a      	strb	r2, [r3, #0]
 800b014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b016:	3301      	adds	r3, #1
 800b018:	62bb      	str	r3, [r7, #40]	; 0x28
 800b01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b01c:	2b0f      	cmp	r3, #15
 800b01e:	dde8      	ble.n	800aff2 <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800b026:	f107 0314 	add.w	r3, r7, #20
 800b02a:	2210      	movs	r2, #16
 800b02c:	4618      	mov	r0, r3
 800b02e:	f00d ff32 	bl	8018e96 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800b032:	68fa      	ldr	r2, [r7, #12]
 800b034:	f107 0114 	add.w	r1, r7, #20
 800b038:	f107 0314 	add.w	r3, r7, #20
 800b03c:	4618      	mov	r0, r3
 800b03e:	f000 fe97 	bl	800bd70 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	33f1      	adds	r3, #241	; 0xf1
 800b046:	f107 0114 	add.w	r1, r7, #20
 800b04a:	2210      	movs	r2, #16
 800b04c:	4618      	mov	r0, r3
 800b04e:	f00d ff22 	bl	8018e96 <memcpy1>

        data += 16;
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	3310      	adds	r3, #16
 800b056:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	3b10      	subs	r3, #16
 800b05c:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2b10      	cmp	r3, #16
 800b062:	d8c3      	bhi.n	800afec <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b06a:	687a      	ldr	r2, [r7, #4]
 800b06c:	b292      	uxth	r2, r2
 800b06e:	68b9      	ldr	r1, [r7, #8]
 800b070:	4618      	mov	r0, r3
 800b072:	f00d ff10 	bl	8018e96 <memcpy1>
    ctx->M_n = len;
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	687a      	ldr	r2, [r7, #4]
 800b07a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800b07e:	e000      	b.n	800b082 <AES_CMAC_Update+0x17e>
            return;
 800b080:	bf00      	nop
}
 800b082:	3730      	adds	r7, #48	; 0x30
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}

0800b088 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b092      	sub	sp, #72	; 0x48
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
 800b090:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800b092:	f107 031c 	add.w	r3, r7, #28
 800b096:	2210      	movs	r2, #16
 800b098:	2100      	movs	r1, #0
 800b09a:	4618      	mov	r0, r3
 800b09c:	f00d ff36 	bl	8018f0c <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800b0a0:	683a      	ldr	r2, [r7, #0]
 800b0a2:	f107 011c 	add.w	r1, r7, #28
 800b0a6:	f107 031c 	add.w	r3, r7, #28
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f000 fe60 	bl	800bd70 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800b0b0:	7f3b      	ldrb	r3, [r7, #28]
 800b0b2:	b25b      	sxtb	r3, r3
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	da30      	bge.n	800b11a <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	647b      	str	r3, [r7, #68]	; 0x44
 800b0bc:	e01b      	b.n	800b0f6 <AES_CMAC_Final+0x6e>
 800b0be:	f107 021c 	add.w	r2, r7, #28
 800b0c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0c4:	4413      	add	r3, r2
 800b0c6:	781b      	ldrb	r3, [r3, #0]
 800b0c8:	005b      	lsls	r3, r3, #1
 800b0ca:	b25a      	sxtb	r2, r3
 800b0cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0ce:	3301      	adds	r3, #1
 800b0d0:	3348      	adds	r3, #72	; 0x48
 800b0d2:	443b      	add	r3, r7
 800b0d4:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800b0d8:	09db      	lsrs	r3, r3, #7
 800b0da:	b2db      	uxtb	r3, r3
 800b0dc:	b25b      	sxtb	r3, r3
 800b0de:	4313      	orrs	r3, r2
 800b0e0:	b25b      	sxtb	r3, r3
 800b0e2:	b2d9      	uxtb	r1, r3
 800b0e4:	f107 021c 	add.w	r2, r7, #28
 800b0e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0ea:	4413      	add	r3, r2
 800b0ec:	460a      	mov	r2, r1
 800b0ee:	701a      	strb	r2, [r3, #0]
 800b0f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0f2:	3301      	adds	r3, #1
 800b0f4:	647b      	str	r3, [r7, #68]	; 0x44
 800b0f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0f8:	2b0e      	cmp	r3, #14
 800b0fa:	dde0      	ble.n	800b0be <AES_CMAC_Final+0x36>
 800b0fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b100:	005b      	lsls	r3, r3, #1
 800b102:	b2db      	uxtb	r3, r3
 800b104:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800b108:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b10c:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800b110:	43db      	mvns	r3, r3
 800b112:	b2db      	uxtb	r3, r3
 800b114:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b118:	e027      	b.n	800b16a <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800b11a:	2300      	movs	r3, #0
 800b11c:	643b      	str	r3, [r7, #64]	; 0x40
 800b11e:	e01b      	b.n	800b158 <AES_CMAC_Final+0xd0>
 800b120:	f107 021c 	add.w	r2, r7, #28
 800b124:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b126:	4413      	add	r3, r2
 800b128:	781b      	ldrb	r3, [r3, #0]
 800b12a:	005b      	lsls	r3, r3, #1
 800b12c:	b25a      	sxtb	r2, r3
 800b12e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b130:	3301      	adds	r3, #1
 800b132:	3348      	adds	r3, #72	; 0x48
 800b134:	443b      	add	r3, r7
 800b136:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800b13a:	09db      	lsrs	r3, r3, #7
 800b13c:	b2db      	uxtb	r3, r3
 800b13e:	b25b      	sxtb	r3, r3
 800b140:	4313      	orrs	r3, r2
 800b142:	b25b      	sxtb	r3, r3
 800b144:	b2d9      	uxtb	r1, r3
 800b146:	f107 021c 	add.w	r2, r7, #28
 800b14a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b14c:	4413      	add	r3, r2
 800b14e:	460a      	mov	r2, r1
 800b150:	701a      	strb	r2, [r3, #0]
 800b152:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b154:	3301      	adds	r3, #1
 800b156:	643b      	str	r3, [r7, #64]	; 0x40
 800b158:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b15a:	2b0e      	cmp	r3, #14
 800b15c:	dde0      	ble.n	800b120 <AES_CMAC_Final+0x98>
 800b15e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b162:	005b      	lsls	r3, r3, #1
 800b164:	b2db      	uxtb	r3, r3
 800b166:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b170:	2b10      	cmp	r3, #16
 800b172:	d11d      	bne.n	800b1b0 <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800b174:	2300      	movs	r3, #0
 800b176:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b178:	e016      	b.n	800b1a8 <AES_CMAC_Final+0x120>
 800b17a:	683a      	ldr	r2, [r7, #0]
 800b17c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b17e:	4413      	add	r3, r2
 800b180:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b184:	781a      	ldrb	r2, [r3, #0]
 800b186:	f107 011c 	add.w	r1, r7, #28
 800b18a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b18c:	440b      	add	r3, r1
 800b18e:	781b      	ldrb	r3, [r3, #0]
 800b190:	4053      	eors	r3, r2
 800b192:	b2d9      	uxtb	r1, r3
 800b194:	683a      	ldr	r2, [r7, #0]
 800b196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b198:	4413      	add	r3, r2
 800b19a:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b19e:	460a      	mov	r2, r1
 800b1a0:	701a      	strb	r2, [r3, #0]
 800b1a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1a4:	3301      	adds	r3, #1
 800b1a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1aa:	2b0f      	cmp	r3, #15
 800b1ac:	dde5      	ble.n	800b17a <AES_CMAC_Final+0xf2>
 800b1ae:	e096      	b.n	800b2de <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800b1b0:	7f3b      	ldrb	r3, [r7, #28]
 800b1b2:	b25b      	sxtb	r3, r3
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	da30      	bge.n	800b21a <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	63bb      	str	r3, [r7, #56]	; 0x38
 800b1bc:	e01b      	b.n	800b1f6 <AES_CMAC_Final+0x16e>
 800b1be:	f107 021c 	add.w	r2, r7, #28
 800b1c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1c4:	4413      	add	r3, r2
 800b1c6:	781b      	ldrb	r3, [r3, #0]
 800b1c8:	005b      	lsls	r3, r3, #1
 800b1ca:	b25a      	sxtb	r2, r3
 800b1cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ce:	3301      	adds	r3, #1
 800b1d0:	3348      	adds	r3, #72	; 0x48
 800b1d2:	443b      	add	r3, r7
 800b1d4:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800b1d8:	09db      	lsrs	r3, r3, #7
 800b1da:	b2db      	uxtb	r3, r3
 800b1dc:	b25b      	sxtb	r3, r3
 800b1de:	4313      	orrs	r3, r2
 800b1e0:	b25b      	sxtb	r3, r3
 800b1e2:	b2d9      	uxtb	r1, r3
 800b1e4:	f107 021c 	add.w	r2, r7, #28
 800b1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ea:	4413      	add	r3, r2
 800b1ec:	460a      	mov	r2, r1
 800b1ee:	701a      	strb	r2, [r3, #0]
 800b1f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1f2:	3301      	adds	r3, #1
 800b1f4:	63bb      	str	r3, [r7, #56]	; 0x38
 800b1f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1f8:	2b0e      	cmp	r3, #14
 800b1fa:	dde0      	ble.n	800b1be <AES_CMAC_Final+0x136>
 800b1fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b200:	005b      	lsls	r3, r3, #1
 800b202:	b2db      	uxtb	r3, r3
 800b204:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800b208:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b20c:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800b210:	43db      	mvns	r3, r3
 800b212:	b2db      	uxtb	r3, r3
 800b214:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b218:	e027      	b.n	800b26a <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800b21a:	2300      	movs	r3, #0
 800b21c:	637b      	str	r3, [r7, #52]	; 0x34
 800b21e:	e01b      	b.n	800b258 <AES_CMAC_Final+0x1d0>
 800b220:	f107 021c 	add.w	r2, r7, #28
 800b224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b226:	4413      	add	r3, r2
 800b228:	781b      	ldrb	r3, [r3, #0]
 800b22a:	005b      	lsls	r3, r3, #1
 800b22c:	b25a      	sxtb	r2, r3
 800b22e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b230:	3301      	adds	r3, #1
 800b232:	3348      	adds	r3, #72	; 0x48
 800b234:	443b      	add	r3, r7
 800b236:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800b23a:	09db      	lsrs	r3, r3, #7
 800b23c:	b2db      	uxtb	r3, r3
 800b23e:	b25b      	sxtb	r3, r3
 800b240:	4313      	orrs	r3, r2
 800b242:	b25b      	sxtb	r3, r3
 800b244:	b2d9      	uxtb	r1, r3
 800b246:	f107 021c 	add.w	r2, r7, #28
 800b24a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b24c:	4413      	add	r3, r2
 800b24e:	460a      	mov	r2, r1
 800b250:	701a      	strb	r2, [r3, #0]
 800b252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b254:	3301      	adds	r3, #1
 800b256:	637b      	str	r3, [r7, #52]	; 0x34
 800b258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b25a:	2b0e      	cmp	r3, #14
 800b25c:	dde0      	ble.n	800b220 <AES_CMAC_Final+0x198>
 800b25e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b262:	005b      	lsls	r3, r3, #1
 800b264:	b2db      	uxtb	r3, r3
 800b266:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b270:	683a      	ldr	r2, [r7, #0]
 800b272:	4413      	add	r3, r2
 800b274:	2280      	movs	r2, #128	; 0x80
 800b276:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800b27a:	e007      	b.n	800b28c <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b282:	683a      	ldr	r2, [r7, #0]
 800b284:	4413      	add	r3, r2
 800b286:	2200      	movs	r2, #0
 800b288:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b292:	1c5a      	adds	r2, r3, #1
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b2a0:	2b0f      	cmp	r3, #15
 800b2a2:	d9eb      	bls.n	800b27c <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	633b      	str	r3, [r7, #48]	; 0x30
 800b2a8:	e016      	b.n	800b2d8 <AES_CMAC_Final+0x250>
 800b2aa:	683a      	ldr	r2, [r7, #0]
 800b2ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ae:	4413      	add	r3, r2
 800b2b0:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b2b4:	781a      	ldrb	r2, [r3, #0]
 800b2b6:	f107 011c 	add.w	r1, r7, #28
 800b2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2bc:	440b      	add	r3, r1
 800b2be:	781b      	ldrb	r3, [r3, #0]
 800b2c0:	4053      	eors	r3, r2
 800b2c2:	b2d9      	uxtb	r1, r3
 800b2c4:	683a      	ldr	r2, [r7, #0]
 800b2c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2c8:	4413      	add	r3, r2
 800b2ca:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b2ce:	460a      	mov	r2, r1
 800b2d0:	701a      	strb	r2, [r3, #0]
 800b2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d4:	3301      	adds	r3, #1
 800b2d6:	633b      	str	r3, [r7, #48]	; 0x30
 800b2d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2da:	2b0f      	cmp	r3, #15
 800b2dc:	dde5      	ble.n	800b2aa <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800b2de:	2300      	movs	r3, #0
 800b2e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b2e2:	e015      	b.n	800b310 <AES_CMAC_Final+0x288>
 800b2e4:	683a      	ldr	r2, [r7, #0]
 800b2e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2e8:	4413      	add	r3, r2
 800b2ea:	33f1      	adds	r3, #241	; 0xf1
 800b2ec:	781a      	ldrb	r2, [r3, #0]
 800b2ee:	6839      	ldr	r1, [r7, #0]
 800b2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2f2:	440b      	add	r3, r1
 800b2f4:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b2f8:	781b      	ldrb	r3, [r3, #0]
 800b2fa:	4053      	eors	r3, r2
 800b2fc:	b2d9      	uxtb	r1, r3
 800b2fe:	683a      	ldr	r2, [r7, #0]
 800b300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b302:	4413      	add	r3, r2
 800b304:	33f1      	adds	r3, #241	; 0xf1
 800b306:	460a      	mov	r2, r1
 800b308:	701a      	strb	r2, [r3, #0]
 800b30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b30c:	3301      	adds	r3, #1
 800b30e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b312:	2b0f      	cmp	r3, #15
 800b314:	dde6      	ble.n	800b2e4 <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800b31c:	f107 030c 	add.w	r3, r7, #12
 800b320:	2210      	movs	r2, #16
 800b322:	4618      	mov	r0, r3
 800b324:	f00d fdb7 	bl	8018e96 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800b328:	683a      	ldr	r2, [r7, #0]
 800b32a:	f107 030c 	add.w	r3, r7, #12
 800b32e:	6879      	ldr	r1, [r7, #4]
 800b330:	4618      	mov	r0, r3
 800b332:	f000 fd1d 	bl	800bd70 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800b336:	f107 031c 	add.w	r3, r7, #28
 800b33a:	2210      	movs	r2, #16
 800b33c:	2100      	movs	r1, #0
 800b33e:	4618      	mov	r0, r3
 800b340:	f00d fde4 	bl	8018f0c <memset1>
}
 800b344:	bf00      	nop
 800b346:	3748      	adds	r7, #72	; 0x48
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}

0800b34c <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800b34c:	b480      	push	{r7}
 800b34e:	b083      	sub	sp, #12
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
 800b354:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	781a      	ldrb	r2, [r3, #0]
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	3301      	adds	r3, #1
 800b362:	683a      	ldr	r2, [r7, #0]
 800b364:	7852      	ldrb	r2, [r2, #1]
 800b366:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	3302      	adds	r3, #2
 800b36c:	683a      	ldr	r2, [r7, #0]
 800b36e:	7892      	ldrb	r2, [r2, #2]
 800b370:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	3303      	adds	r3, #3
 800b376:	683a      	ldr	r2, [r7, #0]
 800b378:	78d2      	ldrb	r2, [r2, #3]
 800b37a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	3304      	adds	r3, #4
 800b380:	683a      	ldr	r2, [r7, #0]
 800b382:	7912      	ldrb	r2, [r2, #4]
 800b384:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	3305      	adds	r3, #5
 800b38a:	683a      	ldr	r2, [r7, #0]
 800b38c:	7952      	ldrb	r2, [r2, #5]
 800b38e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	3306      	adds	r3, #6
 800b394:	683a      	ldr	r2, [r7, #0]
 800b396:	7992      	ldrb	r2, [r2, #6]
 800b398:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	3307      	adds	r3, #7
 800b39e:	683a      	ldr	r2, [r7, #0]
 800b3a0:	79d2      	ldrb	r2, [r2, #7]
 800b3a2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	3308      	adds	r3, #8
 800b3a8:	683a      	ldr	r2, [r7, #0]
 800b3aa:	7a12      	ldrb	r2, [r2, #8]
 800b3ac:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	3309      	adds	r3, #9
 800b3b2:	683a      	ldr	r2, [r7, #0]
 800b3b4:	7a52      	ldrb	r2, [r2, #9]
 800b3b6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	330a      	adds	r3, #10
 800b3bc:	683a      	ldr	r2, [r7, #0]
 800b3be:	7a92      	ldrb	r2, [r2, #10]
 800b3c0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	330b      	adds	r3, #11
 800b3c6:	683a      	ldr	r2, [r7, #0]
 800b3c8:	7ad2      	ldrb	r2, [r2, #11]
 800b3ca:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	330c      	adds	r3, #12
 800b3d0:	683a      	ldr	r2, [r7, #0]
 800b3d2:	7b12      	ldrb	r2, [r2, #12]
 800b3d4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	330d      	adds	r3, #13
 800b3da:	683a      	ldr	r2, [r7, #0]
 800b3dc:	7b52      	ldrb	r2, [r2, #13]
 800b3de:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	330e      	adds	r3, #14
 800b3e4:	683a      	ldr	r2, [r7, #0]
 800b3e6:	7b92      	ldrb	r2, [r2, #14]
 800b3e8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	330f      	adds	r3, #15
 800b3ee:	683a      	ldr	r2, [r7, #0]
 800b3f0:	7bd2      	ldrb	r2, [r2, #15]
 800b3f2:	701a      	strb	r2, [r3, #0]
#endif
}
 800b3f4:	bf00      	nop
 800b3f6:	370c      	adds	r7, #12
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bc80      	pop	{r7}
 800b3fc:	4770      	bx	lr

0800b3fe <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800b3fe:	b480      	push	{r7}
 800b400:	b085      	sub	sp, #20
 800b402:	af00      	add	r7, sp, #0
 800b404:	60f8      	str	r0, [r7, #12]
 800b406:	60b9      	str	r1, [r7, #8]
 800b408:	4613      	mov	r3, r2
 800b40a:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800b40c:	e007      	b.n	800b41e <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800b40e:	68ba      	ldr	r2, [r7, #8]
 800b410:	1c53      	adds	r3, r2, #1
 800b412:	60bb      	str	r3, [r7, #8]
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	1c59      	adds	r1, r3, #1
 800b418:	60f9      	str	r1, [r7, #12]
 800b41a:	7812      	ldrb	r2, [r2, #0]
 800b41c:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800b41e:	79fb      	ldrb	r3, [r7, #7]
 800b420:	1e5a      	subs	r2, r3, #1
 800b422:	71fa      	strb	r2, [r7, #7]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d1f2      	bne.n	800b40e <copy_block_nn+0x10>
}
 800b428:	bf00      	nop
 800b42a:	bf00      	nop
 800b42c:	3714      	adds	r7, #20
 800b42e:	46bd      	mov	sp, r7
 800b430:	bc80      	pop	{r7}
 800b432:	4770      	bx	lr

0800b434 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800b434:	b480      	push	{r7}
 800b436:	b083      	sub	sp, #12
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
 800b43c:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	781a      	ldrb	r2, [r3, #0]
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	781b      	ldrb	r3, [r3, #0]
 800b446:	4053      	eors	r3, r2
 800b448:	b2da      	uxtb	r2, r3
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	3301      	adds	r3, #1
 800b452:	7819      	ldrb	r1, [r3, #0]
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	3301      	adds	r3, #1
 800b458:	781a      	ldrb	r2, [r3, #0]
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	3301      	adds	r3, #1
 800b45e:	404a      	eors	r2, r1
 800b460:	b2d2      	uxtb	r2, r2
 800b462:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	3302      	adds	r3, #2
 800b468:	7819      	ldrb	r1, [r3, #0]
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	3302      	adds	r3, #2
 800b46e:	781a      	ldrb	r2, [r3, #0]
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	3302      	adds	r3, #2
 800b474:	404a      	eors	r2, r1
 800b476:	b2d2      	uxtb	r2, r2
 800b478:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	3303      	adds	r3, #3
 800b47e:	7819      	ldrb	r1, [r3, #0]
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	3303      	adds	r3, #3
 800b484:	781a      	ldrb	r2, [r3, #0]
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	3303      	adds	r3, #3
 800b48a:	404a      	eors	r2, r1
 800b48c:	b2d2      	uxtb	r2, r2
 800b48e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	3304      	adds	r3, #4
 800b494:	7819      	ldrb	r1, [r3, #0]
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	3304      	adds	r3, #4
 800b49a:	781a      	ldrb	r2, [r3, #0]
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	3304      	adds	r3, #4
 800b4a0:	404a      	eors	r2, r1
 800b4a2:	b2d2      	uxtb	r2, r2
 800b4a4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	3305      	adds	r3, #5
 800b4aa:	7819      	ldrb	r1, [r3, #0]
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	3305      	adds	r3, #5
 800b4b0:	781a      	ldrb	r2, [r3, #0]
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	3305      	adds	r3, #5
 800b4b6:	404a      	eors	r2, r1
 800b4b8:	b2d2      	uxtb	r2, r2
 800b4ba:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	3306      	adds	r3, #6
 800b4c0:	7819      	ldrb	r1, [r3, #0]
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	3306      	adds	r3, #6
 800b4c6:	781a      	ldrb	r2, [r3, #0]
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	3306      	adds	r3, #6
 800b4cc:	404a      	eors	r2, r1
 800b4ce:	b2d2      	uxtb	r2, r2
 800b4d0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	3307      	adds	r3, #7
 800b4d6:	7819      	ldrb	r1, [r3, #0]
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	3307      	adds	r3, #7
 800b4dc:	781a      	ldrb	r2, [r3, #0]
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	3307      	adds	r3, #7
 800b4e2:	404a      	eors	r2, r1
 800b4e4:	b2d2      	uxtb	r2, r2
 800b4e6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	3308      	adds	r3, #8
 800b4ec:	7819      	ldrb	r1, [r3, #0]
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	3308      	adds	r3, #8
 800b4f2:	781a      	ldrb	r2, [r3, #0]
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	3308      	adds	r3, #8
 800b4f8:	404a      	eors	r2, r1
 800b4fa:	b2d2      	uxtb	r2, r2
 800b4fc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	3309      	adds	r3, #9
 800b502:	7819      	ldrb	r1, [r3, #0]
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	3309      	adds	r3, #9
 800b508:	781a      	ldrb	r2, [r3, #0]
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	3309      	adds	r3, #9
 800b50e:	404a      	eors	r2, r1
 800b510:	b2d2      	uxtb	r2, r2
 800b512:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	330a      	adds	r3, #10
 800b518:	7819      	ldrb	r1, [r3, #0]
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	330a      	adds	r3, #10
 800b51e:	781a      	ldrb	r2, [r3, #0]
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	330a      	adds	r3, #10
 800b524:	404a      	eors	r2, r1
 800b526:	b2d2      	uxtb	r2, r2
 800b528:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	330b      	adds	r3, #11
 800b52e:	7819      	ldrb	r1, [r3, #0]
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	330b      	adds	r3, #11
 800b534:	781a      	ldrb	r2, [r3, #0]
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	330b      	adds	r3, #11
 800b53a:	404a      	eors	r2, r1
 800b53c:	b2d2      	uxtb	r2, r2
 800b53e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	330c      	adds	r3, #12
 800b544:	7819      	ldrb	r1, [r3, #0]
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	330c      	adds	r3, #12
 800b54a:	781a      	ldrb	r2, [r3, #0]
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	330c      	adds	r3, #12
 800b550:	404a      	eors	r2, r1
 800b552:	b2d2      	uxtb	r2, r2
 800b554:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	330d      	adds	r3, #13
 800b55a:	7819      	ldrb	r1, [r3, #0]
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	330d      	adds	r3, #13
 800b560:	781a      	ldrb	r2, [r3, #0]
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	330d      	adds	r3, #13
 800b566:	404a      	eors	r2, r1
 800b568:	b2d2      	uxtb	r2, r2
 800b56a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	330e      	adds	r3, #14
 800b570:	7819      	ldrb	r1, [r3, #0]
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	330e      	adds	r3, #14
 800b576:	781a      	ldrb	r2, [r3, #0]
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	330e      	adds	r3, #14
 800b57c:	404a      	eors	r2, r1
 800b57e:	b2d2      	uxtb	r2, r2
 800b580:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	330f      	adds	r3, #15
 800b586:	7819      	ldrb	r1, [r3, #0]
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	330f      	adds	r3, #15
 800b58c:	781a      	ldrb	r2, [r3, #0]
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	330f      	adds	r3, #15
 800b592:	404a      	eors	r2, r1
 800b594:	b2d2      	uxtb	r2, r2
 800b596:	701a      	strb	r2, [r3, #0]
#endif
}
 800b598:	bf00      	nop
 800b59a:	370c      	adds	r7, #12
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bc80      	pop	{r7}
 800b5a0:	4770      	bx	lr

0800b5a2 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800b5a2:	b480      	push	{r7}
 800b5a4:	b085      	sub	sp, #20
 800b5a6:	af00      	add	r7, sp, #0
 800b5a8:	60f8      	str	r0, [r7, #12]
 800b5aa:	60b9      	str	r1, [r7, #8]
 800b5ac:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	781a      	ldrb	r2, [r3, #0]
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	781b      	ldrb	r3, [r3, #0]
 800b5b6:	4053      	eors	r3, r2
 800b5b8:	b2da      	uxtb	r2, r3
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	3301      	adds	r3, #1
 800b5c2:	7819      	ldrb	r1, [r3, #0]
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	3301      	adds	r3, #1
 800b5c8:	781a      	ldrb	r2, [r3, #0]
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	3301      	adds	r3, #1
 800b5ce:	404a      	eors	r2, r1
 800b5d0:	b2d2      	uxtb	r2, r2
 800b5d2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	3302      	adds	r3, #2
 800b5d8:	7819      	ldrb	r1, [r3, #0]
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	3302      	adds	r3, #2
 800b5de:	781a      	ldrb	r2, [r3, #0]
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	3302      	adds	r3, #2
 800b5e4:	404a      	eors	r2, r1
 800b5e6:	b2d2      	uxtb	r2, r2
 800b5e8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	3303      	adds	r3, #3
 800b5ee:	7819      	ldrb	r1, [r3, #0]
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	3303      	adds	r3, #3
 800b5f4:	781a      	ldrb	r2, [r3, #0]
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	3303      	adds	r3, #3
 800b5fa:	404a      	eors	r2, r1
 800b5fc:	b2d2      	uxtb	r2, r2
 800b5fe:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800b600:	68bb      	ldr	r3, [r7, #8]
 800b602:	3304      	adds	r3, #4
 800b604:	7819      	ldrb	r1, [r3, #0]
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	3304      	adds	r3, #4
 800b60a:	781a      	ldrb	r2, [r3, #0]
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	3304      	adds	r3, #4
 800b610:	404a      	eors	r2, r1
 800b612:	b2d2      	uxtb	r2, r2
 800b614:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	3305      	adds	r3, #5
 800b61a:	7819      	ldrb	r1, [r3, #0]
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	3305      	adds	r3, #5
 800b620:	781a      	ldrb	r2, [r3, #0]
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	3305      	adds	r3, #5
 800b626:	404a      	eors	r2, r1
 800b628:	b2d2      	uxtb	r2, r2
 800b62a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	3306      	adds	r3, #6
 800b630:	7819      	ldrb	r1, [r3, #0]
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	3306      	adds	r3, #6
 800b636:	781a      	ldrb	r2, [r3, #0]
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	3306      	adds	r3, #6
 800b63c:	404a      	eors	r2, r1
 800b63e:	b2d2      	uxtb	r2, r2
 800b640:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800b642:	68bb      	ldr	r3, [r7, #8]
 800b644:	3307      	adds	r3, #7
 800b646:	7819      	ldrb	r1, [r3, #0]
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	3307      	adds	r3, #7
 800b64c:	781a      	ldrb	r2, [r3, #0]
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	3307      	adds	r3, #7
 800b652:	404a      	eors	r2, r1
 800b654:	b2d2      	uxtb	r2, r2
 800b656:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	3308      	adds	r3, #8
 800b65c:	7819      	ldrb	r1, [r3, #0]
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	3308      	adds	r3, #8
 800b662:	781a      	ldrb	r2, [r3, #0]
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	3308      	adds	r3, #8
 800b668:	404a      	eors	r2, r1
 800b66a:	b2d2      	uxtb	r2, r2
 800b66c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800b66e:	68bb      	ldr	r3, [r7, #8]
 800b670:	3309      	adds	r3, #9
 800b672:	7819      	ldrb	r1, [r3, #0]
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	3309      	adds	r3, #9
 800b678:	781a      	ldrb	r2, [r3, #0]
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	3309      	adds	r3, #9
 800b67e:	404a      	eors	r2, r1
 800b680:	b2d2      	uxtb	r2, r2
 800b682:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800b684:	68bb      	ldr	r3, [r7, #8]
 800b686:	330a      	adds	r3, #10
 800b688:	7819      	ldrb	r1, [r3, #0]
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	330a      	adds	r3, #10
 800b68e:	781a      	ldrb	r2, [r3, #0]
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	330a      	adds	r3, #10
 800b694:	404a      	eors	r2, r1
 800b696:	b2d2      	uxtb	r2, r2
 800b698:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	330b      	adds	r3, #11
 800b69e:	7819      	ldrb	r1, [r3, #0]
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	330b      	adds	r3, #11
 800b6a4:	781a      	ldrb	r2, [r3, #0]
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	330b      	adds	r3, #11
 800b6aa:	404a      	eors	r2, r1
 800b6ac:	b2d2      	uxtb	r2, r2
 800b6ae:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800b6b0:	68bb      	ldr	r3, [r7, #8]
 800b6b2:	330c      	adds	r3, #12
 800b6b4:	7819      	ldrb	r1, [r3, #0]
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	330c      	adds	r3, #12
 800b6ba:	781a      	ldrb	r2, [r3, #0]
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	330c      	adds	r3, #12
 800b6c0:	404a      	eors	r2, r1
 800b6c2:	b2d2      	uxtb	r2, r2
 800b6c4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	330d      	adds	r3, #13
 800b6ca:	7819      	ldrb	r1, [r3, #0]
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	330d      	adds	r3, #13
 800b6d0:	781a      	ldrb	r2, [r3, #0]
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	330d      	adds	r3, #13
 800b6d6:	404a      	eors	r2, r1
 800b6d8:	b2d2      	uxtb	r2, r2
 800b6da:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	330e      	adds	r3, #14
 800b6e0:	7819      	ldrb	r1, [r3, #0]
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	330e      	adds	r3, #14
 800b6e6:	781a      	ldrb	r2, [r3, #0]
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	330e      	adds	r3, #14
 800b6ec:	404a      	eors	r2, r1
 800b6ee:	b2d2      	uxtb	r2, r2
 800b6f0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800b6f2:	68bb      	ldr	r3, [r7, #8]
 800b6f4:	330f      	adds	r3, #15
 800b6f6:	7819      	ldrb	r1, [r3, #0]
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	330f      	adds	r3, #15
 800b6fc:	781a      	ldrb	r2, [r3, #0]
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	330f      	adds	r3, #15
 800b702:	404a      	eors	r2, r1
 800b704:	b2d2      	uxtb	r2, r2
 800b706:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800b708:	bf00      	nop
 800b70a:	3714      	adds	r7, #20
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bc80      	pop	{r7}
 800b710:	4770      	bx	lr

0800b712 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800b712:	b580      	push	{r7, lr}
 800b714:	b082      	sub	sp, #8
 800b716:	af00      	add	r7, sp, #0
 800b718:	6078      	str	r0, [r7, #4]
 800b71a:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800b71c:	6839      	ldr	r1, [r7, #0]
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	f7ff fe88 	bl	800b434 <xor_block>
}
 800b724:	bf00      	nop
 800b726:	3708      	adds	r7, #8
 800b728:	46bd      	mov	sp, r7
 800b72a:	bd80      	pop	{r7, pc}

0800b72c <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800b72c:	b480      	push	{r7}
 800b72e:	b085      	sub	sp, #20
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	781b      	ldrb	r3, [r3, #0]
 800b738:	461a      	mov	r2, r3
 800b73a:	4b48      	ldr	r3, [pc, #288]	; (800b85c <shift_sub_rows+0x130>)
 800b73c:	5c9a      	ldrb	r2, [r3, r2]
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	701a      	strb	r2, [r3, #0]
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	3304      	adds	r3, #4
 800b746:	781b      	ldrb	r3, [r3, #0]
 800b748:	4619      	mov	r1, r3
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	3304      	adds	r3, #4
 800b74e:	4a43      	ldr	r2, [pc, #268]	; (800b85c <shift_sub_rows+0x130>)
 800b750:	5c52      	ldrb	r2, [r2, r1]
 800b752:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	3308      	adds	r3, #8
 800b758:	781b      	ldrb	r3, [r3, #0]
 800b75a:	4619      	mov	r1, r3
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	3308      	adds	r3, #8
 800b760:	4a3e      	ldr	r2, [pc, #248]	; (800b85c <shift_sub_rows+0x130>)
 800b762:	5c52      	ldrb	r2, [r2, r1]
 800b764:	701a      	strb	r2, [r3, #0]
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	330c      	adds	r3, #12
 800b76a:	781b      	ldrb	r3, [r3, #0]
 800b76c:	4619      	mov	r1, r3
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	330c      	adds	r3, #12
 800b772:	4a3a      	ldr	r2, [pc, #232]	; (800b85c <shift_sub_rows+0x130>)
 800b774:	5c52      	ldrb	r2, [r2, r1]
 800b776:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	785b      	ldrb	r3, [r3, #1]
 800b77c:	73fb      	strb	r3, [r7, #15]
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	3305      	adds	r3, #5
 800b782:	781b      	ldrb	r3, [r3, #0]
 800b784:	4619      	mov	r1, r3
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	3301      	adds	r3, #1
 800b78a:	4a34      	ldr	r2, [pc, #208]	; (800b85c <shift_sub_rows+0x130>)
 800b78c:	5c52      	ldrb	r2, [r2, r1]
 800b78e:	701a      	strb	r2, [r3, #0]
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	3309      	adds	r3, #9
 800b794:	781b      	ldrb	r3, [r3, #0]
 800b796:	4619      	mov	r1, r3
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	3305      	adds	r3, #5
 800b79c:	4a2f      	ldr	r2, [pc, #188]	; (800b85c <shift_sub_rows+0x130>)
 800b79e:	5c52      	ldrb	r2, [r2, r1]
 800b7a0:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	330d      	adds	r3, #13
 800b7a6:	781b      	ldrb	r3, [r3, #0]
 800b7a8:	4619      	mov	r1, r3
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	3309      	adds	r3, #9
 800b7ae:	4a2b      	ldr	r2, [pc, #172]	; (800b85c <shift_sub_rows+0x130>)
 800b7b0:	5c52      	ldrb	r2, [r2, r1]
 800b7b2:	701a      	strb	r2, [r3, #0]
 800b7b4:	7bfa      	ldrb	r2, [r7, #15]
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	330d      	adds	r3, #13
 800b7ba:	4928      	ldr	r1, [pc, #160]	; (800b85c <shift_sub_rows+0x130>)
 800b7bc:	5c8a      	ldrb	r2, [r1, r2]
 800b7be:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	789b      	ldrb	r3, [r3, #2]
 800b7c4:	73fb      	strb	r3, [r7, #15]
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	330a      	adds	r3, #10
 800b7ca:	781b      	ldrb	r3, [r3, #0]
 800b7cc:	4619      	mov	r1, r3
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	3302      	adds	r3, #2
 800b7d2:	4a22      	ldr	r2, [pc, #136]	; (800b85c <shift_sub_rows+0x130>)
 800b7d4:	5c52      	ldrb	r2, [r2, r1]
 800b7d6:	701a      	strb	r2, [r3, #0]
 800b7d8:	7bfa      	ldrb	r2, [r7, #15]
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	330a      	adds	r3, #10
 800b7de:	491f      	ldr	r1, [pc, #124]	; (800b85c <shift_sub_rows+0x130>)
 800b7e0:	5c8a      	ldrb	r2, [r1, r2]
 800b7e2:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	799b      	ldrb	r3, [r3, #6]
 800b7e8:	73fb      	strb	r3, [r7, #15]
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	330e      	adds	r3, #14
 800b7ee:	781b      	ldrb	r3, [r3, #0]
 800b7f0:	4619      	mov	r1, r3
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	3306      	adds	r3, #6
 800b7f6:	4a19      	ldr	r2, [pc, #100]	; (800b85c <shift_sub_rows+0x130>)
 800b7f8:	5c52      	ldrb	r2, [r2, r1]
 800b7fa:	701a      	strb	r2, [r3, #0]
 800b7fc:	7bfa      	ldrb	r2, [r7, #15]
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	330e      	adds	r3, #14
 800b802:	4916      	ldr	r1, [pc, #88]	; (800b85c <shift_sub_rows+0x130>)
 800b804:	5c8a      	ldrb	r2, [r1, r2]
 800b806:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	7bdb      	ldrb	r3, [r3, #15]
 800b80c:	73fb      	strb	r3, [r7, #15]
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	330b      	adds	r3, #11
 800b812:	781b      	ldrb	r3, [r3, #0]
 800b814:	4619      	mov	r1, r3
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	330f      	adds	r3, #15
 800b81a:	4a10      	ldr	r2, [pc, #64]	; (800b85c <shift_sub_rows+0x130>)
 800b81c:	5c52      	ldrb	r2, [r2, r1]
 800b81e:	701a      	strb	r2, [r3, #0]
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	3307      	adds	r3, #7
 800b824:	781b      	ldrb	r3, [r3, #0]
 800b826:	4619      	mov	r1, r3
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	330b      	adds	r3, #11
 800b82c:	4a0b      	ldr	r2, [pc, #44]	; (800b85c <shift_sub_rows+0x130>)
 800b82e:	5c52      	ldrb	r2, [r2, r1]
 800b830:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	3303      	adds	r3, #3
 800b836:	781b      	ldrb	r3, [r3, #0]
 800b838:	4619      	mov	r1, r3
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	3307      	adds	r3, #7
 800b83e:	4a07      	ldr	r2, [pc, #28]	; (800b85c <shift_sub_rows+0x130>)
 800b840:	5c52      	ldrb	r2, [r2, r1]
 800b842:	701a      	strb	r2, [r3, #0]
 800b844:	7bfa      	ldrb	r2, [r7, #15]
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	3303      	adds	r3, #3
 800b84a:	4904      	ldr	r1, [pc, #16]	; (800b85c <shift_sub_rows+0x130>)
 800b84c:	5c8a      	ldrb	r2, [r1, r2]
 800b84e:	701a      	strb	r2, [r3, #0]
}
 800b850:	bf00      	nop
 800b852:	3714      	adds	r7, #20
 800b854:	46bd      	mov	sp, r7
 800b856:	bc80      	pop	{r7}
 800b858:	4770      	bx	lr
 800b85a:	bf00      	nop
 800b85c:	0801e614 	.word	0x0801e614

0800b860 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800b860:	b580      	push	{r7, lr}
 800b862:	b086      	sub	sp, #24
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800b868:	f107 0308 	add.w	r3, r7, #8
 800b86c:	6879      	ldr	r1, [r7, #4]
 800b86e:	4618      	mov	r0, r3
 800b870:	f7ff fd6c 	bl	800b34c <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800b874:	7a3b      	ldrb	r3, [r7, #8]
 800b876:	461a      	mov	r2, r3
 800b878:	4b9a      	ldr	r3, [pc, #616]	; (800bae4 <mix_sub_columns+0x284>)
 800b87a:	5c9a      	ldrb	r2, [r3, r2]
 800b87c:	7b7b      	ldrb	r3, [r7, #13]
 800b87e:	4619      	mov	r1, r3
 800b880:	4b99      	ldr	r3, [pc, #612]	; (800bae8 <mix_sub_columns+0x288>)
 800b882:	5c5b      	ldrb	r3, [r3, r1]
 800b884:	4053      	eors	r3, r2
 800b886:	b2da      	uxtb	r2, r3
 800b888:	7cbb      	ldrb	r3, [r7, #18]
 800b88a:	4619      	mov	r1, r3
 800b88c:	4b97      	ldr	r3, [pc, #604]	; (800baec <mix_sub_columns+0x28c>)
 800b88e:	5c5b      	ldrb	r3, [r3, r1]
 800b890:	4053      	eors	r3, r2
 800b892:	b2da      	uxtb	r2, r3
 800b894:	7dfb      	ldrb	r3, [r7, #23]
 800b896:	4619      	mov	r1, r3
 800b898:	4b94      	ldr	r3, [pc, #592]	; (800baec <mix_sub_columns+0x28c>)
 800b89a:	5c5b      	ldrb	r3, [r3, r1]
 800b89c:	4053      	eors	r3, r2
 800b89e:	b2da      	uxtb	r2, r3
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800b8a4:	7a3b      	ldrb	r3, [r7, #8]
 800b8a6:	461a      	mov	r2, r3
 800b8a8:	4b90      	ldr	r3, [pc, #576]	; (800baec <mix_sub_columns+0x28c>)
 800b8aa:	5c9a      	ldrb	r2, [r3, r2]
 800b8ac:	7b7b      	ldrb	r3, [r7, #13]
 800b8ae:	4619      	mov	r1, r3
 800b8b0:	4b8c      	ldr	r3, [pc, #560]	; (800bae4 <mix_sub_columns+0x284>)
 800b8b2:	5c5b      	ldrb	r3, [r3, r1]
 800b8b4:	4053      	eors	r3, r2
 800b8b6:	b2da      	uxtb	r2, r3
 800b8b8:	7cbb      	ldrb	r3, [r7, #18]
 800b8ba:	4619      	mov	r1, r3
 800b8bc:	4b8a      	ldr	r3, [pc, #552]	; (800bae8 <mix_sub_columns+0x288>)
 800b8be:	5c5b      	ldrb	r3, [r3, r1]
 800b8c0:	4053      	eors	r3, r2
 800b8c2:	b2d9      	uxtb	r1, r3
 800b8c4:	7dfb      	ldrb	r3, [r7, #23]
 800b8c6:	461a      	mov	r2, r3
 800b8c8:	4b88      	ldr	r3, [pc, #544]	; (800baec <mix_sub_columns+0x28c>)
 800b8ca:	5c9a      	ldrb	r2, [r3, r2]
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	3301      	adds	r3, #1
 800b8d0:	404a      	eors	r2, r1
 800b8d2:	b2d2      	uxtb	r2, r2
 800b8d4:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800b8d6:	7a3b      	ldrb	r3, [r7, #8]
 800b8d8:	461a      	mov	r2, r3
 800b8da:	4b84      	ldr	r3, [pc, #528]	; (800baec <mix_sub_columns+0x28c>)
 800b8dc:	5c9a      	ldrb	r2, [r3, r2]
 800b8de:	7b7b      	ldrb	r3, [r7, #13]
 800b8e0:	4619      	mov	r1, r3
 800b8e2:	4b82      	ldr	r3, [pc, #520]	; (800baec <mix_sub_columns+0x28c>)
 800b8e4:	5c5b      	ldrb	r3, [r3, r1]
 800b8e6:	4053      	eors	r3, r2
 800b8e8:	b2da      	uxtb	r2, r3
 800b8ea:	7cbb      	ldrb	r3, [r7, #18]
 800b8ec:	4619      	mov	r1, r3
 800b8ee:	4b7d      	ldr	r3, [pc, #500]	; (800bae4 <mix_sub_columns+0x284>)
 800b8f0:	5c5b      	ldrb	r3, [r3, r1]
 800b8f2:	4053      	eors	r3, r2
 800b8f4:	b2d9      	uxtb	r1, r3
 800b8f6:	7dfb      	ldrb	r3, [r7, #23]
 800b8f8:	461a      	mov	r2, r3
 800b8fa:	4b7b      	ldr	r3, [pc, #492]	; (800bae8 <mix_sub_columns+0x288>)
 800b8fc:	5c9a      	ldrb	r2, [r3, r2]
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	3302      	adds	r3, #2
 800b902:	404a      	eors	r2, r1
 800b904:	b2d2      	uxtb	r2, r2
 800b906:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800b908:	7a3b      	ldrb	r3, [r7, #8]
 800b90a:	461a      	mov	r2, r3
 800b90c:	4b76      	ldr	r3, [pc, #472]	; (800bae8 <mix_sub_columns+0x288>)
 800b90e:	5c9a      	ldrb	r2, [r3, r2]
 800b910:	7b7b      	ldrb	r3, [r7, #13]
 800b912:	4619      	mov	r1, r3
 800b914:	4b75      	ldr	r3, [pc, #468]	; (800baec <mix_sub_columns+0x28c>)
 800b916:	5c5b      	ldrb	r3, [r3, r1]
 800b918:	4053      	eors	r3, r2
 800b91a:	b2da      	uxtb	r2, r3
 800b91c:	7cbb      	ldrb	r3, [r7, #18]
 800b91e:	4619      	mov	r1, r3
 800b920:	4b72      	ldr	r3, [pc, #456]	; (800baec <mix_sub_columns+0x28c>)
 800b922:	5c5b      	ldrb	r3, [r3, r1]
 800b924:	4053      	eors	r3, r2
 800b926:	b2d9      	uxtb	r1, r3
 800b928:	7dfb      	ldrb	r3, [r7, #23]
 800b92a:	461a      	mov	r2, r3
 800b92c:	4b6d      	ldr	r3, [pc, #436]	; (800bae4 <mix_sub_columns+0x284>)
 800b92e:	5c9a      	ldrb	r2, [r3, r2]
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	3303      	adds	r3, #3
 800b934:	404a      	eors	r2, r1
 800b936:	b2d2      	uxtb	r2, r2
 800b938:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800b93a:	7b3b      	ldrb	r3, [r7, #12]
 800b93c:	461a      	mov	r2, r3
 800b93e:	4b69      	ldr	r3, [pc, #420]	; (800bae4 <mix_sub_columns+0x284>)
 800b940:	5c9a      	ldrb	r2, [r3, r2]
 800b942:	7c7b      	ldrb	r3, [r7, #17]
 800b944:	4619      	mov	r1, r3
 800b946:	4b68      	ldr	r3, [pc, #416]	; (800bae8 <mix_sub_columns+0x288>)
 800b948:	5c5b      	ldrb	r3, [r3, r1]
 800b94a:	4053      	eors	r3, r2
 800b94c:	b2da      	uxtb	r2, r3
 800b94e:	7dbb      	ldrb	r3, [r7, #22]
 800b950:	4619      	mov	r1, r3
 800b952:	4b66      	ldr	r3, [pc, #408]	; (800baec <mix_sub_columns+0x28c>)
 800b954:	5c5b      	ldrb	r3, [r3, r1]
 800b956:	4053      	eors	r3, r2
 800b958:	b2d9      	uxtb	r1, r3
 800b95a:	7afb      	ldrb	r3, [r7, #11]
 800b95c:	461a      	mov	r2, r3
 800b95e:	4b63      	ldr	r3, [pc, #396]	; (800baec <mix_sub_columns+0x28c>)
 800b960:	5c9a      	ldrb	r2, [r3, r2]
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	3304      	adds	r3, #4
 800b966:	404a      	eors	r2, r1
 800b968:	b2d2      	uxtb	r2, r2
 800b96a:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800b96c:	7b3b      	ldrb	r3, [r7, #12]
 800b96e:	461a      	mov	r2, r3
 800b970:	4b5e      	ldr	r3, [pc, #376]	; (800baec <mix_sub_columns+0x28c>)
 800b972:	5c9a      	ldrb	r2, [r3, r2]
 800b974:	7c7b      	ldrb	r3, [r7, #17]
 800b976:	4619      	mov	r1, r3
 800b978:	4b5a      	ldr	r3, [pc, #360]	; (800bae4 <mix_sub_columns+0x284>)
 800b97a:	5c5b      	ldrb	r3, [r3, r1]
 800b97c:	4053      	eors	r3, r2
 800b97e:	b2da      	uxtb	r2, r3
 800b980:	7dbb      	ldrb	r3, [r7, #22]
 800b982:	4619      	mov	r1, r3
 800b984:	4b58      	ldr	r3, [pc, #352]	; (800bae8 <mix_sub_columns+0x288>)
 800b986:	5c5b      	ldrb	r3, [r3, r1]
 800b988:	4053      	eors	r3, r2
 800b98a:	b2d9      	uxtb	r1, r3
 800b98c:	7afb      	ldrb	r3, [r7, #11]
 800b98e:	461a      	mov	r2, r3
 800b990:	4b56      	ldr	r3, [pc, #344]	; (800baec <mix_sub_columns+0x28c>)
 800b992:	5c9a      	ldrb	r2, [r3, r2]
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	3305      	adds	r3, #5
 800b998:	404a      	eors	r2, r1
 800b99a:	b2d2      	uxtb	r2, r2
 800b99c:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800b99e:	7b3b      	ldrb	r3, [r7, #12]
 800b9a0:	461a      	mov	r2, r3
 800b9a2:	4b52      	ldr	r3, [pc, #328]	; (800baec <mix_sub_columns+0x28c>)
 800b9a4:	5c9a      	ldrb	r2, [r3, r2]
 800b9a6:	7c7b      	ldrb	r3, [r7, #17]
 800b9a8:	4619      	mov	r1, r3
 800b9aa:	4b50      	ldr	r3, [pc, #320]	; (800baec <mix_sub_columns+0x28c>)
 800b9ac:	5c5b      	ldrb	r3, [r3, r1]
 800b9ae:	4053      	eors	r3, r2
 800b9b0:	b2da      	uxtb	r2, r3
 800b9b2:	7dbb      	ldrb	r3, [r7, #22]
 800b9b4:	4619      	mov	r1, r3
 800b9b6:	4b4b      	ldr	r3, [pc, #300]	; (800bae4 <mix_sub_columns+0x284>)
 800b9b8:	5c5b      	ldrb	r3, [r3, r1]
 800b9ba:	4053      	eors	r3, r2
 800b9bc:	b2d9      	uxtb	r1, r3
 800b9be:	7afb      	ldrb	r3, [r7, #11]
 800b9c0:	461a      	mov	r2, r3
 800b9c2:	4b49      	ldr	r3, [pc, #292]	; (800bae8 <mix_sub_columns+0x288>)
 800b9c4:	5c9a      	ldrb	r2, [r3, r2]
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	3306      	adds	r3, #6
 800b9ca:	404a      	eors	r2, r1
 800b9cc:	b2d2      	uxtb	r2, r2
 800b9ce:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800b9d0:	7b3b      	ldrb	r3, [r7, #12]
 800b9d2:	461a      	mov	r2, r3
 800b9d4:	4b44      	ldr	r3, [pc, #272]	; (800bae8 <mix_sub_columns+0x288>)
 800b9d6:	5c9a      	ldrb	r2, [r3, r2]
 800b9d8:	7c7b      	ldrb	r3, [r7, #17]
 800b9da:	4619      	mov	r1, r3
 800b9dc:	4b43      	ldr	r3, [pc, #268]	; (800baec <mix_sub_columns+0x28c>)
 800b9de:	5c5b      	ldrb	r3, [r3, r1]
 800b9e0:	4053      	eors	r3, r2
 800b9e2:	b2da      	uxtb	r2, r3
 800b9e4:	7dbb      	ldrb	r3, [r7, #22]
 800b9e6:	4619      	mov	r1, r3
 800b9e8:	4b40      	ldr	r3, [pc, #256]	; (800baec <mix_sub_columns+0x28c>)
 800b9ea:	5c5b      	ldrb	r3, [r3, r1]
 800b9ec:	4053      	eors	r3, r2
 800b9ee:	b2d9      	uxtb	r1, r3
 800b9f0:	7afb      	ldrb	r3, [r7, #11]
 800b9f2:	461a      	mov	r2, r3
 800b9f4:	4b3b      	ldr	r3, [pc, #236]	; (800bae4 <mix_sub_columns+0x284>)
 800b9f6:	5c9a      	ldrb	r2, [r3, r2]
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	3307      	adds	r3, #7
 800b9fc:	404a      	eors	r2, r1
 800b9fe:	b2d2      	uxtb	r2, r2
 800ba00:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800ba02:	7c3b      	ldrb	r3, [r7, #16]
 800ba04:	461a      	mov	r2, r3
 800ba06:	4b37      	ldr	r3, [pc, #220]	; (800bae4 <mix_sub_columns+0x284>)
 800ba08:	5c9a      	ldrb	r2, [r3, r2]
 800ba0a:	7d7b      	ldrb	r3, [r7, #21]
 800ba0c:	4619      	mov	r1, r3
 800ba0e:	4b36      	ldr	r3, [pc, #216]	; (800bae8 <mix_sub_columns+0x288>)
 800ba10:	5c5b      	ldrb	r3, [r3, r1]
 800ba12:	4053      	eors	r3, r2
 800ba14:	b2da      	uxtb	r2, r3
 800ba16:	7abb      	ldrb	r3, [r7, #10]
 800ba18:	4619      	mov	r1, r3
 800ba1a:	4b34      	ldr	r3, [pc, #208]	; (800baec <mix_sub_columns+0x28c>)
 800ba1c:	5c5b      	ldrb	r3, [r3, r1]
 800ba1e:	4053      	eors	r3, r2
 800ba20:	b2d9      	uxtb	r1, r3
 800ba22:	7bfb      	ldrb	r3, [r7, #15]
 800ba24:	461a      	mov	r2, r3
 800ba26:	4b31      	ldr	r3, [pc, #196]	; (800baec <mix_sub_columns+0x28c>)
 800ba28:	5c9a      	ldrb	r2, [r3, r2]
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	3308      	adds	r3, #8
 800ba2e:	404a      	eors	r2, r1
 800ba30:	b2d2      	uxtb	r2, r2
 800ba32:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800ba34:	7c3b      	ldrb	r3, [r7, #16]
 800ba36:	461a      	mov	r2, r3
 800ba38:	4b2c      	ldr	r3, [pc, #176]	; (800baec <mix_sub_columns+0x28c>)
 800ba3a:	5c9a      	ldrb	r2, [r3, r2]
 800ba3c:	7d7b      	ldrb	r3, [r7, #21]
 800ba3e:	4619      	mov	r1, r3
 800ba40:	4b28      	ldr	r3, [pc, #160]	; (800bae4 <mix_sub_columns+0x284>)
 800ba42:	5c5b      	ldrb	r3, [r3, r1]
 800ba44:	4053      	eors	r3, r2
 800ba46:	b2da      	uxtb	r2, r3
 800ba48:	7abb      	ldrb	r3, [r7, #10]
 800ba4a:	4619      	mov	r1, r3
 800ba4c:	4b26      	ldr	r3, [pc, #152]	; (800bae8 <mix_sub_columns+0x288>)
 800ba4e:	5c5b      	ldrb	r3, [r3, r1]
 800ba50:	4053      	eors	r3, r2
 800ba52:	b2d9      	uxtb	r1, r3
 800ba54:	7bfb      	ldrb	r3, [r7, #15]
 800ba56:	461a      	mov	r2, r3
 800ba58:	4b24      	ldr	r3, [pc, #144]	; (800baec <mix_sub_columns+0x28c>)
 800ba5a:	5c9a      	ldrb	r2, [r3, r2]
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	3309      	adds	r3, #9
 800ba60:	404a      	eors	r2, r1
 800ba62:	b2d2      	uxtb	r2, r2
 800ba64:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800ba66:	7c3b      	ldrb	r3, [r7, #16]
 800ba68:	461a      	mov	r2, r3
 800ba6a:	4b20      	ldr	r3, [pc, #128]	; (800baec <mix_sub_columns+0x28c>)
 800ba6c:	5c9a      	ldrb	r2, [r3, r2]
 800ba6e:	7d7b      	ldrb	r3, [r7, #21]
 800ba70:	4619      	mov	r1, r3
 800ba72:	4b1e      	ldr	r3, [pc, #120]	; (800baec <mix_sub_columns+0x28c>)
 800ba74:	5c5b      	ldrb	r3, [r3, r1]
 800ba76:	4053      	eors	r3, r2
 800ba78:	b2da      	uxtb	r2, r3
 800ba7a:	7abb      	ldrb	r3, [r7, #10]
 800ba7c:	4619      	mov	r1, r3
 800ba7e:	4b19      	ldr	r3, [pc, #100]	; (800bae4 <mix_sub_columns+0x284>)
 800ba80:	5c5b      	ldrb	r3, [r3, r1]
 800ba82:	4053      	eors	r3, r2
 800ba84:	b2d9      	uxtb	r1, r3
 800ba86:	7bfb      	ldrb	r3, [r7, #15]
 800ba88:	461a      	mov	r2, r3
 800ba8a:	4b17      	ldr	r3, [pc, #92]	; (800bae8 <mix_sub_columns+0x288>)
 800ba8c:	5c9a      	ldrb	r2, [r3, r2]
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	330a      	adds	r3, #10
 800ba92:	404a      	eors	r2, r1
 800ba94:	b2d2      	uxtb	r2, r2
 800ba96:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800ba98:	7c3b      	ldrb	r3, [r7, #16]
 800ba9a:	461a      	mov	r2, r3
 800ba9c:	4b12      	ldr	r3, [pc, #72]	; (800bae8 <mix_sub_columns+0x288>)
 800ba9e:	5c9a      	ldrb	r2, [r3, r2]
 800baa0:	7d7b      	ldrb	r3, [r7, #21]
 800baa2:	4619      	mov	r1, r3
 800baa4:	4b11      	ldr	r3, [pc, #68]	; (800baec <mix_sub_columns+0x28c>)
 800baa6:	5c5b      	ldrb	r3, [r3, r1]
 800baa8:	4053      	eors	r3, r2
 800baaa:	b2da      	uxtb	r2, r3
 800baac:	7abb      	ldrb	r3, [r7, #10]
 800baae:	4619      	mov	r1, r3
 800bab0:	4b0e      	ldr	r3, [pc, #56]	; (800baec <mix_sub_columns+0x28c>)
 800bab2:	5c5b      	ldrb	r3, [r3, r1]
 800bab4:	4053      	eors	r3, r2
 800bab6:	b2d9      	uxtb	r1, r3
 800bab8:	7bfb      	ldrb	r3, [r7, #15]
 800baba:	461a      	mov	r2, r3
 800babc:	4b09      	ldr	r3, [pc, #36]	; (800bae4 <mix_sub_columns+0x284>)
 800babe:	5c9a      	ldrb	r2, [r3, r2]
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	330b      	adds	r3, #11
 800bac4:	404a      	eors	r2, r1
 800bac6:	b2d2      	uxtb	r2, r2
 800bac8:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800baca:	7d3b      	ldrb	r3, [r7, #20]
 800bacc:	461a      	mov	r2, r3
 800bace:	4b05      	ldr	r3, [pc, #20]	; (800bae4 <mix_sub_columns+0x284>)
 800bad0:	5c9a      	ldrb	r2, [r3, r2]
 800bad2:	7a7b      	ldrb	r3, [r7, #9]
 800bad4:	4619      	mov	r1, r3
 800bad6:	4b04      	ldr	r3, [pc, #16]	; (800bae8 <mix_sub_columns+0x288>)
 800bad8:	5c5b      	ldrb	r3, [r3, r1]
 800bada:	4053      	eors	r3, r2
 800badc:	b2da      	uxtb	r2, r3
 800bade:	7bbb      	ldrb	r3, [r7, #14]
 800bae0:	4619      	mov	r1, r3
 800bae2:	e005      	b.n	800baf0 <mix_sub_columns+0x290>
 800bae4:	0801e714 	.word	0x0801e714
 800bae8:	0801e814 	.word	0x0801e814
 800baec:	0801e614 	.word	0x0801e614
 800baf0:	4b2d      	ldr	r3, [pc, #180]	; (800bba8 <mix_sub_columns+0x348>)
 800baf2:	5c5b      	ldrb	r3, [r3, r1]
 800baf4:	4053      	eors	r3, r2
 800baf6:	b2d9      	uxtb	r1, r3
 800baf8:	7cfb      	ldrb	r3, [r7, #19]
 800bafa:	461a      	mov	r2, r3
 800bafc:	4b2a      	ldr	r3, [pc, #168]	; (800bba8 <mix_sub_columns+0x348>)
 800bafe:	5c9a      	ldrb	r2, [r3, r2]
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	330c      	adds	r3, #12
 800bb04:	404a      	eors	r2, r1
 800bb06:	b2d2      	uxtb	r2, r2
 800bb08:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800bb0a:	7d3b      	ldrb	r3, [r7, #20]
 800bb0c:	461a      	mov	r2, r3
 800bb0e:	4b26      	ldr	r3, [pc, #152]	; (800bba8 <mix_sub_columns+0x348>)
 800bb10:	5c9a      	ldrb	r2, [r3, r2]
 800bb12:	7a7b      	ldrb	r3, [r7, #9]
 800bb14:	4619      	mov	r1, r3
 800bb16:	4b25      	ldr	r3, [pc, #148]	; (800bbac <mix_sub_columns+0x34c>)
 800bb18:	5c5b      	ldrb	r3, [r3, r1]
 800bb1a:	4053      	eors	r3, r2
 800bb1c:	b2da      	uxtb	r2, r3
 800bb1e:	7bbb      	ldrb	r3, [r7, #14]
 800bb20:	4619      	mov	r1, r3
 800bb22:	4b23      	ldr	r3, [pc, #140]	; (800bbb0 <mix_sub_columns+0x350>)
 800bb24:	5c5b      	ldrb	r3, [r3, r1]
 800bb26:	4053      	eors	r3, r2
 800bb28:	b2d9      	uxtb	r1, r3
 800bb2a:	7cfb      	ldrb	r3, [r7, #19]
 800bb2c:	461a      	mov	r2, r3
 800bb2e:	4b1e      	ldr	r3, [pc, #120]	; (800bba8 <mix_sub_columns+0x348>)
 800bb30:	5c9a      	ldrb	r2, [r3, r2]
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	330d      	adds	r3, #13
 800bb36:	404a      	eors	r2, r1
 800bb38:	b2d2      	uxtb	r2, r2
 800bb3a:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800bb3c:	7d3b      	ldrb	r3, [r7, #20]
 800bb3e:	461a      	mov	r2, r3
 800bb40:	4b19      	ldr	r3, [pc, #100]	; (800bba8 <mix_sub_columns+0x348>)
 800bb42:	5c9a      	ldrb	r2, [r3, r2]
 800bb44:	7a7b      	ldrb	r3, [r7, #9]
 800bb46:	4619      	mov	r1, r3
 800bb48:	4b17      	ldr	r3, [pc, #92]	; (800bba8 <mix_sub_columns+0x348>)
 800bb4a:	5c5b      	ldrb	r3, [r3, r1]
 800bb4c:	4053      	eors	r3, r2
 800bb4e:	b2da      	uxtb	r2, r3
 800bb50:	7bbb      	ldrb	r3, [r7, #14]
 800bb52:	4619      	mov	r1, r3
 800bb54:	4b15      	ldr	r3, [pc, #84]	; (800bbac <mix_sub_columns+0x34c>)
 800bb56:	5c5b      	ldrb	r3, [r3, r1]
 800bb58:	4053      	eors	r3, r2
 800bb5a:	b2d9      	uxtb	r1, r3
 800bb5c:	7cfb      	ldrb	r3, [r7, #19]
 800bb5e:	461a      	mov	r2, r3
 800bb60:	4b13      	ldr	r3, [pc, #76]	; (800bbb0 <mix_sub_columns+0x350>)
 800bb62:	5c9a      	ldrb	r2, [r3, r2]
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	330e      	adds	r3, #14
 800bb68:	404a      	eors	r2, r1
 800bb6a:	b2d2      	uxtb	r2, r2
 800bb6c:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800bb6e:	7d3b      	ldrb	r3, [r7, #20]
 800bb70:	461a      	mov	r2, r3
 800bb72:	4b0f      	ldr	r3, [pc, #60]	; (800bbb0 <mix_sub_columns+0x350>)
 800bb74:	5c9a      	ldrb	r2, [r3, r2]
 800bb76:	7a7b      	ldrb	r3, [r7, #9]
 800bb78:	4619      	mov	r1, r3
 800bb7a:	4b0b      	ldr	r3, [pc, #44]	; (800bba8 <mix_sub_columns+0x348>)
 800bb7c:	5c5b      	ldrb	r3, [r3, r1]
 800bb7e:	4053      	eors	r3, r2
 800bb80:	b2da      	uxtb	r2, r3
 800bb82:	7bbb      	ldrb	r3, [r7, #14]
 800bb84:	4619      	mov	r1, r3
 800bb86:	4b08      	ldr	r3, [pc, #32]	; (800bba8 <mix_sub_columns+0x348>)
 800bb88:	5c5b      	ldrb	r3, [r3, r1]
 800bb8a:	4053      	eors	r3, r2
 800bb8c:	b2d9      	uxtb	r1, r3
 800bb8e:	7cfb      	ldrb	r3, [r7, #19]
 800bb90:	461a      	mov	r2, r3
 800bb92:	4b06      	ldr	r3, [pc, #24]	; (800bbac <mix_sub_columns+0x34c>)
 800bb94:	5c9a      	ldrb	r2, [r3, r2]
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	330f      	adds	r3, #15
 800bb9a:	404a      	eors	r2, r1
 800bb9c:	b2d2      	uxtb	r2, r2
 800bb9e:	701a      	strb	r2, [r3, #0]
  }
 800bba0:	bf00      	nop
 800bba2:	3718      	adds	r7, #24
 800bba4:	46bd      	mov	sp, r7
 800bba6:	bd80      	pop	{r7, pc}
 800bba8:	0801e614 	.word	0x0801e614
 800bbac:	0801e714 	.word	0x0801e714
 800bbb0:	0801e814 	.word	0x0801e814

0800bbb4 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b086      	sub	sp, #24
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	60f8      	str	r0, [r7, #12]
 800bbbc:	460b      	mov	r3, r1
 800bbbe:	607a      	str	r2, [r7, #4]
 800bbc0:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800bbc2:	7afb      	ldrb	r3, [r7, #11]
 800bbc4:	3b10      	subs	r3, #16
 800bbc6:	2b10      	cmp	r3, #16
 800bbc8:	bf8c      	ite	hi
 800bbca:	2201      	movhi	r2, #1
 800bbcc:	2200      	movls	r2, #0
 800bbce:	b2d2      	uxtb	r2, r2
 800bbd0:	2a00      	cmp	r2, #0
 800bbd2:	d10b      	bne.n	800bbec <lorawan_aes_set_key+0x38>
 800bbd4:	4a64      	ldr	r2, [pc, #400]	; (800bd68 <lorawan_aes_set_key+0x1b4>)
 800bbd6:	fa22 f303 	lsr.w	r3, r2, r3
 800bbda:	f003 0301 	and.w	r3, r3, #1
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	bf14      	ite	ne
 800bbe2:	2301      	movne	r3, #1
 800bbe4:	2300      	moveq	r3, #0
 800bbe6:	b2db      	uxtb	r3, r3
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d105      	bne.n	800bbf8 <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2200      	movs	r2, #0
 800bbf0:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800bbf4:	23ff      	movs	r3, #255	; 0xff
 800bbf6:	e0b2      	b.n	800bd5e <lorawan_aes_set_key+0x1aa>
        break;
 800bbf8:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	7afa      	ldrb	r2, [r7, #11]
 800bbfe:	68f9      	ldr	r1, [r7, #12]
 800bc00:	4618      	mov	r0, r3
 800bc02:	f7ff fbfc 	bl	800b3fe <copy_block_nn>
    hi = (keylen + 28) << 2;
 800bc06:	7afb      	ldrb	r3, [r7, #11]
 800bc08:	331c      	adds	r3, #28
 800bc0a:	b2db      	uxtb	r3, r3
 800bc0c:	009b      	lsls	r3, r3, #2
 800bc0e:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800bc10:	7c7b      	ldrb	r3, [r7, #17]
 800bc12:	091b      	lsrs	r3, r3, #4
 800bc14:	b2db      	uxtb	r3, r3
 800bc16:	3b01      	subs	r3, #1
 800bc18:	b2da      	uxtb	r2, r3
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800bc20:	7afb      	ldrb	r3, [r7, #11]
 800bc22:	75fb      	strb	r3, [r7, #23]
 800bc24:	2301      	movs	r3, #1
 800bc26:	75bb      	strb	r3, [r7, #22]
 800bc28:	e093      	b.n	800bd52 <lorawan_aes_set_key+0x19e>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800bc2a:	7dfb      	ldrb	r3, [r7, #23]
 800bc2c:	3b04      	subs	r3, #4
 800bc2e:	687a      	ldr	r2, [r7, #4]
 800bc30:	5cd3      	ldrb	r3, [r2, r3]
 800bc32:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800bc34:	7dfb      	ldrb	r3, [r7, #23]
 800bc36:	3b03      	subs	r3, #3
 800bc38:	687a      	ldr	r2, [r7, #4]
 800bc3a:	5cd3      	ldrb	r3, [r2, r3]
 800bc3c:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800bc3e:	7dfb      	ldrb	r3, [r7, #23]
 800bc40:	3b02      	subs	r3, #2
 800bc42:	687a      	ldr	r2, [r7, #4]
 800bc44:	5cd3      	ldrb	r3, [r2, r3]
 800bc46:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800bc48:	7dfb      	ldrb	r3, [r7, #23]
 800bc4a:	3b01      	subs	r3, #1
 800bc4c:	687a      	ldr	r2, [r7, #4]
 800bc4e:	5cd3      	ldrb	r3, [r2, r3]
 800bc50:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800bc52:	7dfb      	ldrb	r3, [r7, #23]
 800bc54:	7afa      	ldrb	r2, [r7, #11]
 800bc56:	fbb3 f1f2 	udiv	r1, r3, r2
 800bc5a:	fb01 f202 	mul.w	r2, r1, r2
 800bc5e:	1a9b      	subs	r3, r3, r2
 800bc60:	b2db      	uxtb	r3, r3
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d127      	bne.n	800bcb6 <lorawan_aes_set_key+0x102>
        {
            tt = t0;
 800bc66:	7d7b      	ldrb	r3, [r7, #21]
 800bc68:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800bc6a:	7d3b      	ldrb	r3, [r7, #20]
 800bc6c:	4a3f      	ldr	r2, [pc, #252]	; (800bd6c <lorawan_aes_set_key+0x1b8>)
 800bc6e:	5cd2      	ldrb	r2, [r2, r3]
 800bc70:	7dbb      	ldrb	r3, [r7, #22]
 800bc72:	4053      	eors	r3, r2
 800bc74:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800bc76:	7cfb      	ldrb	r3, [r7, #19]
 800bc78:	4a3c      	ldr	r2, [pc, #240]	; (800bd6c <lorawan_aes_set_key+0x1b8>)
 800bc7a:	5cd3      	ldrb	r3, [r2, r3]
 800bc7c:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800bc7e:	7cbb      	ldrb	r3, [r7, #18]
 800bc80:	4a3a      	ldr	r2, [pc, #232]	; (800bd6c <lorawan_aes_set_key+0x1b8>)
 800bc82:	5cd3      	ldrb	r3, [r2, r3]
 800bc84:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800bc86:	7c3b      	ldrb	r3, [r7, #16]
 800bc88:	4a38      	ldr	r2, [pc, #224]	; (800bd6c <lorawan_aes_set_key+0x1b8>)
 800bc8a:	5cd3      	ldrb	r3, [r2, r3]
 800bc8c:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800bc8e:	7dbb      	ldrb	r3, [r7, #22]
 800bc90:	005b      	lsls	r3, r3, #1
 800bc92:	b25a      	sxtb	r2, r3
 800bc94:	7dbb      	ldrb	r3, [r7, #22]
 800bc96:	09db      	lsrs	r3, r3, #7
 800bc98:	b2db      	uxtb	r3, r3
 800bc9a:	4619      	mov	r1, r3
 800bc9c:	0049      	lsls	r1, r1, #1
 800bc9e:	440b      	add	r3, r1
 800bca0:	4619      	mov	r1, r3
 800bca2:	00c8      	lsls	r0, r1, #3
 800bca4:	4619      	mov	r1, r3
 800bca6:	4603      	mov	r3, r0
 800bca8:	440b      	add	r3, r1
 800bcaa:	b2db      	uxtb	r3, r3
 800bcac:	b25b      	sxtb	r3, r3
 800bcae:	4053      	eors	r3, r2
 800bcb0:	b25b      	sxtb	r3, r3
 800bcb2:	75bb      	strb	r3, [r7, #22]
 800bcb4:	e01c      	b.n	800bcf0 <lorawan_aes_set_key+0x13c>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800bcb6:	7afb      	ldrb	r3, [r7, #11]
 800bcb8:	2b18      	cmp	r3, #24
 800bcba:	d919      	bls.n	800bcf0 <lorawan_aes_set_key+0x13c>
 800bcbc:	7dfb      	ldrb	r3, [r7, #23]
 800bcbe:	7afa      	ldrb	r2, [r7, #11]
 800bcc0:	fbb3 f1f2 	udiv	r1, r3, r2
 800bcc4:	fb01 f202 	mul.w	r2, r1, r2
 800bcc8:	1a9b      	subs	r3, r3, r2
 800bcca:	b2db      	uxtb	r3, r3
 800bccc:	2b10      	cmp	r3, #16
 800bcce:	d10f      	bne.n	800bcf0 <lorawan_aes_set_key+0x13c>
        {
            t0 = s_box(t0);
 800bcd0:	7d7b      	ldrb	r3, [r7, #21]
 800bcd2:	4a26      	ldr	r2, [pc, #152]	; (800bd6c <lorawan_aes_set_key+0x1b8>)
 800bcd4:	5cd3      	ldrb	r3, [r2, r3]
 800bcd6:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800bcd8:	7d3b      	ldrb	r3, [r7, #20]
 800bcda:	4a24      	ldr	r2, [pc, #144]	; (800bd6c <lorawan_aes_set_key+0x1b8>)
 800bcdc:	5cd3      	ldrb	r3, [r2, r3]
 800bcde:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800bce0:	7cfb      	ldrb	r3, [r7, #19]
 800bce2:	4a22      	ldr	r2, [pc, #136]	; (800bd6c <lorawan_aes_set_key+0x1b8>)
 800bce4:	5cd3      	ldrb	r3, [r2, r3]
 800bce6:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800bce8:	7cbb      	ldrb	r3, [r7, #18]
 800bcea:	4a20      	ldr	r2, [pc, #128]	; (800bd6c <lorawan_aes_set_key+0x1b8>)
 800bcec:	5cd3      	ldrb	r3, [r2, r3]
 800bcee:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800bcf0:	7dfa      	ldrb	r2, [r7, #23]
 800bcf2:	7afb      	ldrb	r3, [r7, #11]
 800bcf4:	1ad3      	subs	r3, r2, r3
 800bcf6:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800bcf8:	7c3b      	ldrb	r3, [r7, #16]
 800bcfa:	687a      	ldr	r2, [r7, #4]
 800bcfc:	5cd1      	ldrb	r1, [r2, r3]
 800bcfe:	7dfb      	ldrb	r3, [r7, #23]
 800bd00:	7d7a      	ldrb	r2, [r7, #21]
 800bd02:	404a      	eors	r2, r1
 800bd04:	b2d1      	uxtb	r1, r2
 800bd06:	687a      	ldr	r2, [r7, #4]
 800bd08:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800bd0a:	7c3b      	ldrb	r3, [r7, #16]
 800bd0c:	3301      	adds	r3, #1
 800bd0e:	687a      	ldr	r2, [r7, #4]
 800bd10:	5cd1      	ldrb	r1, [r2, r3]
 800bd12:	7dfb      	ldrb	r3, [r7, #23]
 800bd14:	3301      	adds	r3, #1
 800bd16:	7d3a      	ldrb	r2, [r7, #20]
 800bd18:	404a      	eors	r2, r1
 800bd1a:	b2d1      	uxtb	r1, r2
 800bd1c:	687a      	ldr	r2, [r7, #4]
 800bd1e:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800bd20:	7c3b      	ldrb	r3, [r7, #16]
 800bd22:	3302      	adds	r3, #2
 800bd24:	687a      	ldr	r2, [r7, #4]
 800bd26:	5cd1      	ldrb	r1, [r2, r3]
 800bd28:	7dfb      	ldrb	r3, [r7, #23]
 800bd2a:	3302      	adds	r3, #2
 800bd2c:	7cfa      	ldrb	r2, [r7, #19]
 800bd2e:	404a      	eors	r2, r1
 800bd30:	b2d1      	uxtb	r1, r2
 800bd32:	687a      	ldr	r2, [r7, #4]
 800bd34:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800bd36:	7c3b      	ldrb	r3, [r7, #16]
 800bd38:	3303      	adds	r3, #3
 800bd3a:	687a      	ldr	r2, [r7, #4]
 800bd3c:	5cd1      	ldrb	r1, [r2, r3]
 800bd3e:	7dfb      	ldrb	r3, [r7, #23]
 800bd40:	3303      	adds	r3, #3
 800bd42:	7cba      	ldrb	r2, [r7, #18]
 800bd44:	404a      	eors	r2, r1
 800bd46:	b2d1      	uxtb	r1, r2
 800bd48:	687a      	ldr	r2, [r7, #4]
 800bd4a:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800bd4c:	7dfb      	ldrb	r3, [r7, #23]
 800bd4e:	3304      	adds	r3, #4
 800bd50:	75fb      	strb	r3, [r7, #23]
 800bd52:	7dfa      	ldrb	r2, [r7, #23]
 800bd54:	7c7b      	ldrb	r3, [r7, #17]
 800bd56:	429a      	cmp	r2, r3
 800bd58:	f4ff af67 	bcc.w	800bc2a <lorawan_aes_set_key+0x76>
    }
    return 0;
 800bd5c:	2300      	movs	r3, #0
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	3718      	adds	r7, #24
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}
 800bd66:	bf00      	nop
 800bd68:	00010101 	.word	0x00010101
 800bd6c:	0801e614 	.word	0x0801e614

0800bd70 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b08a      	sub	sp, #40	; 0x28
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	60f8      	str	r0, [r7, #12]
 800bd78:	60b9      	str	r1, [r7, #8]
 800bd7a:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d038      	beq.n	800bdf8 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800bd86:	687a      	ldr	r2, [r7, #4]
 800bd88:	f107 0314 	add.w	r3, r7, #20
 800bd8c:	68f9      	ldr	r1, [r7, #12]
 800bd8e:	4618      	mov	r0, r3
 800bd90:	f7ff fc07 	bl	800b5a2 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800bd94:	2301      	movs	r3, #1
 800bd96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bd9a:	e014      	b.n	800bdc6 <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800bd9c:	f107 0314 	add.w	r3, r7, #20
 800bda0:	4618      	mov	r0, r3
 800bda2:	f7ff fd5d 	bl	800b860 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bdac:	0112      	lsls	r2, r2, #4
 800bdae:	441a      	add	r2, r3
 800bdb0:	f107 0314 	add.w	r3, r7, #20
 800bdb4:	4611      	mov	r1, r2
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f7ff fcab 	bl	800b712 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800bdbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bdc0:	3301      	adds	r3, #1
 800bdc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800bdcc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bdd0:	429a      	cmp	r2, r3
 800bdd2:	d3e3      	bcc.n	800bd9c <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800bdd4:	f107 0314 	add.w	r3, r7, #20
 800bdd8:	4618      	mov	r0, r3
 800bdda:	f7ff fca7 	bl	800b72c <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bde4:	0112      	lsls	r2, r2, #4
 800bde6:	441a      	add	r2, r3
 800bde8:	f107 0314 	add.w	r3, r7, #20
 800bdec:	4619      	mov	r1, r3
 800bdee:	68b8      	ldr	r0, [r7, #8]
 800bdf0:	f7ff fbd7 	bl	800b5a2 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	e000      	b.n	800bdfa <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800bdf8:	23ff      	movs	r3, #255	; 0xff
}
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	3728      	adds	r7, #40	; 0x28
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bd80      	pop	{r7, pc}
	...

0800be04 <PrintKey>:
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac );

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t keyID )
{
 800be04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be06:	b0a1      	sub	sp, #132	; 0x84
 800be08:	af12      	add	r7, sp, #72	; 0x48
 800be0a:	4603      	mov	r3, r0
 800be0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#if (KEY_EXTRACTABLE == 1)
#if (LORAWAN_KMS == 0)
    Key_t *keyItem;
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 800be10:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800be14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800be18:	4611      	mov	r1, r2
 800be1a:	4618      	mov	r0, r3
 800be1c:	f000 fa12 	bl	800c244 <SecureElementGetKeyByID>
 800be20:	4603      	mov	r3, r0
 800be22:	2b00      	cmp	r3, #0
 800be24:	d174      	bne.n	800bf10 <PrintKey+0x10c>
#else
    uint8_t extractable_key[SE_KEY_SIZE] = {0};
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, ( uint8_t * )extractable_key ) )
#endif /* LORAWAN_KMS */
    {
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800be26:	2300      	movs	r3, #0
 800be28:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800be2c:	e06c      	b.n	800bf08 <PrintKey+0x104>
        {
            if( KeyLabel[i].keyID == keyID )
 800be2e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800be32:	4939      	ldr	r1, [pc, #228]	; (800bf18 <PrintKey+0x114>)
 800be34:	4613      	mov	r3, r2
 800be36:	005b      	lsls	r3, r3, #1
 800be38:	4413      	add	r3, r2
 800be3a:	009b      	lsls	r3, r3, #2
 800be3c:	440b      	add	r3, r1
 800be3e:	781b      	ldrb	r3, [r3, #0]
 800be40:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800be44:	429a      	cmp	r2, r3
 800be46:	d15a      	bne.n	800befe <PrintKey+0xfa>
            {
#if (LORAWAN_KMS == 0)
                MW_LOG( TS_OFF, VLEVEL_M,
 800be48:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800be4c:	4932      	ldr	r1, [pc, #200]	; (800bf18 <PrintKey+0x114>)
 800be4e:	4613      	mov	r3, r2
 800be50:	005b      	lsls	r3, r3, #1
 800be52:	4413      	add	r3, r2
 800be54:	009b      	lsls	r3, r3, #2
 800be56:	440b      	add	r3, r1
 800be58:	3308      	adds	r3, #8
 800be5a:	6819      	ldr	r1, [r3, #0]
 800be5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be5e:	785b      	ldrb	r3, [r3, #1]
 800be60:	461d      	mov	r5, r3
 800be62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be64:	789b      	ldrb	r3, [r3, #2]
 800be66:	461e      	mov	r6, r3
 800be68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be6a:	78db      	ldrb	r3, [r3, #3]
 800be6c:	62bb      	str	r3, [r7, #40]	; 0x28
 800be6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be70:	791b      	ldrb	r3, [r3, #4]
 800be72:	627b      	str	r3, [r7, #36]	; 0x24
 800be74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be76:	795b      	ldrb	r3, [r3, #5]
 800be78:	623b      	str	r3, [r7, #32]
 800be7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be7c:	799b      	ldrb	r3, [r3, #6]
 800be7e:	61fb      	str	r3, [r7, #28]
 800be80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be82:	79db      	ldrb	r3, [r3, #7]
 800be84:	61bb      	str	r3, [r7, #24]
 800be86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be88:	7a1b      	ldrb	r3, [r3, #8]
 800be8a:	617b      	str	r3, [r7, #20]
 800be8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be8e:	7a5b      	ldrb	r3, [r3, #9]
 800be90:	613b      	str	r3, [r7, #16]
 800be92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be94:	7a9b      	ldrb	r3, [r3, #10]
 800be96:	60fb      	str	r3, [r7, #12]
 800be98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be9a:	7adb      	ldrb	r3, [r3, #11]
 800be9c:	60bb      	str	r3, [r7, #8]
 800be9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bea0:	7b1b      	ldrb	r3, [r3, #12]
 800bea2:	607b      	str	r3, [r7, #4]
 800bea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bea6:	7b5b      	ldrb	r3, [r3, #13]
 800bea8:	461c      	mov	r4, r3
 800beaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beac:	7b9b      	ldrb	r3, [r3, #14]
 800beae:	4618      	mov	r0, r3
 800beb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb2:	7bdb      	ldrb	r3, [r3, #15]
 800beb4:	461a      	mov	r2, r3
 800beb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb8:	7c1b      	ldrb	r3, [r3, #16]
 800beba:	9310      	str	r3, [sp, #64]	; 0x40
 800bebc:	920f      	str	r2, [sp, #60]	; 0x3c
 800bebe:	900e      	str	r0, [sp, #56]	; 0x38
 800bec0:	940d      	str	r4, [sp, #52]	; 0x34
 800bec2:	687a      	ldr	r2, [r7, #4]
 800bec4:	920c      	str	r2, [sp, #48]	; 0x30
 800bec6:	68ba      	ldr	r2, [r7, #8]
 800bec8:	920b      	str	r2, [sp, #44]	; 0x2c
 800beca:	68fa      	ldr	r2, [r7, #12]
 800becc:	920a      	str	r2, [sp, #40]	; 0x28
 800bece:	693a      	ldr	r2, [r7, #16]
 800bed0:	9209      	str	r2, [sp, #36]	; 0x24
 800bed2:	697a      	ldr	r2, [r7, #20]
 800bed4:	9208      	str	r2, [sp, #32]
 800bed6:	69ba      	ldr	r2, [r7, #24]
 800bed8:	9207      	str	r2, [sp, #28]
 800beda:	69fa      	ldr	r2, [r7, #28]
 800bedc:	9206      	str	r2, [sp, #24]
 800bede:	6a3a      	ldr	r2, [r7, #32]
 800bee0:	9205      	str	r2, [sp, #20]
 800bee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bee4:	9204      	str	r2, [sp, #16]
 800bee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bee8:	9303      	str	r3, [sp, #12]
 800beea:	9602      	str	r6, [sp, #8]
 800beec:	9501      	str	r5, [sp, #4]
 800beee:	9100      	str	r1, [sp, #0]
 800bef0:	4b0a      	ldr	r3, [pc, #40]	; (800bf1c <PrintKey+0x118>)
 800bef2:	2200      	movs	r2, #0
 800bef4:	2100      	movs	r1, #0
 800bef6:	2002      	movs	r0, #2
 800bef8:	f011 fb72 	bl	801d5e0 <UTIL_ADV_TRACE_COND_FSend>
 800befc:	e008      	b.n	800bf10 <PrintKey+0x10c>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800befe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bf02:	3301      	adds	r3, #1
 800bf04:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800bf08:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bf0c:	2b0a      	cmp	r3, #10
 800bf0e:	d98e      	bls.n	800be2e <PrintKey+0x2a>
                return;
            }
        }
    }
#endif /* KEY_EXTRACTABLE */
}
 800bf10:	373c      	adds	r7, #60	; 0x3c
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf16:	bf00      	nop
 800bf18:	0801e914 	.word	0x0801e914
 800bf1c:	0801e180 	.word	0x0801e180

0800bf20 <PrintIds>:

static void PrintIds( ActivationType_t mode )
{
 800bf20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf22:	b091      	sub	sp, #68	; 0x44
 800bf24:	af08      	add	r7, sp, #32
 800bf26:	4603      	mov	r3, r0
 800bf28:	71fb      	strb	r3, [r7, #7]
    uint8_t joinEui[SE_EUI_SIZE];
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddr = 0;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	60fb      	str	r3, [r7, #12]

    SecureElementGetDevEui( devEui );
 800bf2e:	f107 0310 	add.w	r3, r7, #16
 800bf32:	4618      	mov	r0, r3
 800bf34:	f000 fbda 	bl	800c6ec <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 800bf38:	7c3b      	ldrb	r3, [r7, #16]
 800bf3a:	7c7a      	ldrb	r2, [r7, #17]
 800bf3c:	7cb9      	ldrb	r1, [r7, #18]
 800bf3e:	7cf8      	ldrb	r0, [r7, #19]
 800bf40:	7d3c      	ldrb	r4, [r7, #20]
 800bf42:	7d7d      	ldrb	r5, [r7, #21]
 800bf44:	7dbe      	ldrb	r6, [r7, #22]
 800bf46:	f897 c017 	ldrb.w	ip, [r7, #23]
 800bf4a:	f8cd c01c 	str.w	ip, [sp, #28]
 800bf4e:	9606      	str	r6, [sp, #24]
 800bf50:	9505      	str	r5, [sp, #20]
 800bf52:	9404      	str	r4, [sp, #16]
 800bf54:	9003      	str	r0, [sp, #12]
 800bf56:	9102      	str	r1, [sp, #8]
 800bf58:	9201      	str	r2, [sp, #4]
 800bf5a:	9300      	str	r3, [sp, #0]
 800bf5c:	4b24      	ldr	r3, [pc, #144]	; (800bff0 <PrintIds+0xd0>)
 800bf5e:	2200      	movs	r2, #0
 800bf60:	2100      	movs	r1, #0
 800bf62:	2002      	movs	r0, #2
 800bf64:	f011 fb3c 	bl	801d5e0 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetJoinEui( joinEui );
 800bf68:	f107 0318 	add.w	r3, r7, #24
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f000 fbed 	bl	800c74c <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 800bf72:	7e3b      	ldrb	r3, [r7, #24]
 800bf74:	7e7a      	ldrb	r2, [r7, #25]
 800bf76:	7eb9      	ldrb	r1, [r7, #26]
 800bf78:	7ef8      	ldrb	r0, [r7, #27]
 800bf7a:	7f3c      	ldrb	r4, [r7, #28]
 800bf7c:	7f7d      	ldrb	r5, [r7, #29]
 800bf7e:	7fbe      	ldrb	r6, [r7, #30]
 800bf80:	f897 c01f 	ldrb.w	ip, [r7, #31]
 800bf84:	f8cd c01c 	str.w	ip, [sp, #28]
 800bf88:	9606      	str	r6, [sp, #24]
 800bf8a:	9505      	str	r5, [sp, #20]
 800bf8c:	9404      	str	r4, [sp, #16]
 800bf8e:	9003      	str	r0, [sp, #12]
 800bf90:	9102      	str	r1, [sp, #8]
 800bf92:	9201      	str	r2, [sp, #4]
 800bf94:	9300      	str	r3, [sp, #0]
 800bf96:	4b17      	ldr	r3, [pc, #92]	; (800bff4 <PrintIds+0xd4>)
 800bf98:	2200      	movs	r2, #0
 800bf9a:	2100      	movs	r1, #0
 800bf9c:	2002      	movs	r0, #2
 800bf9e:	f011 fb1f 	bl	801d5e0 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetDevAddr( mode, &devAddr );
 800bfa2:	f107 020c 	add.w	r2, r7, #12
 800bfa6:	79fb      	ldrb	r3, [r7, #7]
 800bfa8:	4611      	mov	r1, r2
 800bfaa:	4618      	mov	r0, r3
 800bfac:	f000 fc00 	bl	800c7b0 <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800bfb0:	f107 030c 	add.w	r3, r7, #12
 800bfb4:	3303      	adds	r3, #3
 800bfb6:	781b      	ldrb	r3, [r3, #0]
 800bfb8:	461a      	mov	r2, r3
 800bfba:	f107 030c 	add.w	r3, r7, #12
 800bfbe:	3302      	adds	r3, #2
 800bfc0:	781b      	ldrb	r3, [r3, #0]
 800bfc2:	4619      	mov	r1, r3
 800bfc4:	f107 030c 	add.w	r3, r7, #12
 800bfc8:	3301      	adds	r3, #1
 800bfca:	781b      	ldrb	r3, [r3, #0]
 800bfcc:	4618      	mov	r0, r3
 800bfce:	f107 030c 	add.w	r3, r7, #12
 800bfd2:	781b      	ldrb	r3, [r3, #0]
 800bfd4:	9303      	str	r3, [sp, #12]
 800bfd6:	9002      	str	r0, [sp, #8]
 800bfd8:	9101      	str	r1, [sp, #4]
 800bfda:	9200      	str	r2, [sp, #0]
 800bfdc:	4b06      	ldr	r3, [pc, #24]	; (800bff8 <PrintIds+0xd8>)
 800bfde:	2200      	movs	r2, #0
 800bfe0:	2100      	movs	r1, #0
 800bfe2:	2002      	movs	r0, #2
 800bfe4:	f011 fafc 	bl	801d5e0 <UTIL_ADV_TRACE_COND_FSend>
            ( unsigned )( ( unsigned char * )( &devAddr ) )[3],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[2],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[1],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[0] );
}
 800bfe8:	bf00      	nop
 800bfea:	3724      	adds	r7, #36	; 0x24
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bff0:	0801e1dc 	.word	0x0801e1dc
 800bff4:	0801e21c 	.word	0x0801e21c
 800bff8:	0801e25c 	.word	0x0801e25c

0800bffc <GetKeyByID>:

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800bffc:	b480      	push	{r7}
 800bffe:	b085      	sub	sp, #20
 800c000:	af00      	add	r7, sp, #0
 800c002:	4603      	mov	r3, r0
 800c004:	6039      	str	r1, [r7, #0]
 800c006:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c008:	2300      	movs	r3, #0
 800c00a:	73fb      	strb	r3, [r7, #15]
 800c00c:	e01a      	b.n	800c044 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800c00e:	4b12      	ldr	r3, [pc, #72]	; (800c058 <GetKeyByID+0x5c>)
 800c010:	6819      	ldr	r1, [r3, #0]
 800c012:	7bfa      	ldrb	r2, [r7, #15]
 800c014:	4613      	mov	r3, r2
 800c016:	011b      	lsls	r3, r3, #4
 800c018:	4413      	add	r3, r2
 800c01a:	440b      	add	r3, r1
 800c01c:	3318      	adds	r3, #24
 800c01e:	781b      	ldrb	r3, [r3, #0]
 800c020:	79fa      	ldrb	r2, [r7, #7]
 800c022:	429a      	cmp	r2, r3
 800c024:	d10b      	bne.n	800c03e <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800c026:	4b0c      	ldr	r3, [pc, #48]	; (800c058 <GetKeyByID+0x5c>)
 800c028:	6819      	ldr	r1, [r3, #0]
 800c02a:	7bfa      	ldrb	r2, [r7, #15]
 800c02c:	4613      	mov	r3, r2
 800c02e:	011b      	lsls	r3, r3, #4
 800c030:	4413      	add	r3, r2
 800c032:	3318      	adds	r3, #24
 800c034:	18ca      	adds	r2, r1, r3
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800c03a:	2300      	movs	r3, #0
 800c03c:	e006      	b.n	800c04c <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c03e:	7bfb      	ldrb	r3, [r7, #15]
 800c040:	3301      	adds	r3, #1
 800c042:	73fb      	strb	r3, [r7, #15]
 800c044:	7bfb      	ldrb	r3, [r7, #15]
 800c046:	2b0a      	cmp	r3, #10
 800c048:	d9e1      	bls.n	800c00e <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c04a:	2303      	movs	r3, #3
}
 800c04c:	4618      	mov	r0, r3
 800c04e:	3714      	adds	r7, #20
 800c050:	46bd      	mov	sp, r7
 800c052:	bc80      	pop	{r7}
 800c054:	4770      	bx	lr
 800c056:	bf00      	nop
 800c058:	20000568 	.word	0x20000568

0800c05c <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 800c05c:	b590      	push	{r4, r7, lr}
 800c05e:	b0d1      	sub	sp, #324	; 0x144
 800c060:	af00      	add	r7, sp, #0
 800c062:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 800c066:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 800c06a:	6020      	str	r0, [r4, #0]
 800c06c:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800c070:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800c074:	6001      	str	r1, [r0, #0]
 800c076:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800c07a:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 800c07e:	600a      	str	r2, [r1, #0]
 800c080:	461a      	mov	r2, r3
 800c082:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c086:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800c08a:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800c08c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c090:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d003      	beq.n	800c0a2 <ComputeCmac+0x46>
 800c09a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d101      	bne.n	800c0a6 <ComputeCmac+0x4a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c0a2:	2302      	movs	r3, #2
 800c0a4:	e05d      	b.n	800c162 <ComputeCmac+0x106>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800c0a6:	f107 0314 	add.w	r3, r7, #20
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	f7fe ff02 	bl	800aeb4 <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800c0b0:	f107 0210 	add.w	r2, r7, #16
 800c0b4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c0b8:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800c0bc:	781b      	ldrb	r3, [r3, #0]
 800c0be:	4611      	mov	r1, r2
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	f7ff ff9b 	bl	800bffc <GetKeyByID>
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800c0cc:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d144      	bne.n	800c15e <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800c0d4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c0d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	1c5a      	adds	r2, r3, #1
 800c0e0:	f107 0314 	add.w	r3, r7, #20
 800c0e4:	4611      	mov	r1, r2
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f7fe fefd 	bl	800aee6 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800c0ec:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c0f0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d009      	beq.n	800c10e <ComputeCmac+0xb2>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 800c0fa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c0fe:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800c102:	f107 0014 	add.w	r0, r7, #20
 800c106:	2210      	movs	r2, #16
 800c108:	6819      	ldr	r1, [r3, #0]
 800c10a:	f7fe fefb 	bl	800af04 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800c10e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c112:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 800c116:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c11a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800c11e:	f107 0014 	add.w	r0, r7, #20
 800c122:	6812      	ldr	r2, [r2, #0]
 800c124:	6819      	ldr	r1, [r3, #0]
 800c126:	f7fe feed 	bl	800af04 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800c12a:	f107 0214 	add.w	r2, r7, #20
 800c12e:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800c132:	4611      	mov	r1, r2
 800c134:	4618      	mov	r0, r3
 800c136:	f7fe ffa7 	bl	800b088 <AES_CMAC_Final>

        /* Bring into the required format */
        *cmac = GET_UINT32_LE( Cmac, 0 );
 800c13a:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 800c13e:	461a      	mov	r2, r3
 800c140:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800c144:	021b      	lsls	r3, r3, #8
 800c146:	431a      	orrs	r2, r3
 800c148:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800c14c:	041b      	lsls	r3, r3, #16
 800c14e:	431a      	orrs	r2, r3
 800c150:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800c154:	061b      	lsls	r3, r3, #24
 800c156:	431a      	orrs	r2, r3
 800c158:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800c15c:	601a      	str	r2, [r3, #0]
    if( rv != CKR_OK )
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800c15e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800c162:	4618      	mov	r0, r3
 800c164:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd90      	pop	{r4, r7, pc}

0800c16c <SecureElementInit>:
/* Exported functions ---------------------------------------------------------*/
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b082      	sub	sp, #8
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d101      	bne.n	800c17e <SecureElementInit+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c17a:	2302      	movs	r3, #2
 800c17c:	e00a      	b.n	800c194 <SecureElementInit+0x28>
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 800c17e:	4a07      	ldr	r2, [pc, #28]	; (800c19c <SecureElementInit+0x30>)
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	6013      	str	r3, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 800c184:	4b05      	ldr	r3, [pc, #20]	; (800c19c <SecureElementInit+0x30>)
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	22d8      	movs	r2, #216	; 0xd8
 800c18a:	4905      	ldr	r1, [pc, #20]	; (800c1a0 <SecureElementInit+0x34>)
 800c18c:	4618      	mov	r0, r3
 800c18e:	f00c fe82 	bl	8018e96 <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 800c192:	2300      	movs	r3, #0
}
 800c194:	4618      	mov	r0, r3
 800c196:	3708      	adds	r7, #8
 800c198:	46bd      	mov	sp, r7
 800c19a:	bd80      	pop	{r7, pc}
 800c19c:	20000568 	.word	0x20000568
 800c1a0:	0801ebb4 	.word	0x0801ebb4

0800c1a4 <SecureElementInitMcuID>:

SecureElementStatus_t SecureElementInitMcuID( SecureElementGetUniqueId_t seGetUniqueId,
                                              SecureElementGetDevAddr_t seGetDevAddr )
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b086      	sub	sp, #24
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
 800c1ac:	6039      	str	r1, [r7, #0]
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddrABP = 0;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	60bb      	str	r3, [r7, #8]

    SecureElementGetDevEui( devEui );
 800c1b2:	f107 030c 	add.w	r3, r7, #12
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	f000 fa98 	bl	800c6ec <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 800c1bc:	f107 0308 	add.w	r3, r7, #8
 800c1c0:	4619      	mov	r1, r3
 800c1c2:	2001      	movs	r0, #1
 800c1c4:	f000 faf4 	bl	800c7b0 <SecureElementGetDevAddr>

    if( seGetUniqueId != NULL )
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d024      	beq.n	800c218 <SecureElementInitMcuID+0x74>
    {
        bool id_init = false;
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	75fb      	strb	r3, [r7, #23]
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	75bb      	strb	r3, [r7, #22]
 800c1d6:	e00c      	b.n	800c1f2 <SecureElementInitMcuID+0x4e>
        {
            if( devEui[index] != 0 )
 800c1d8:	7dbb      	ldrb	r3, [r7, #22]
 800c1da:	3318      	adds	r3, #24
 800c1dc:	443b      	add	r3, r7
 800c1de:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d002      	beq.n	800c1ec <SecureElementInitMcuID+0x48>
            {
                id_init = true;
 800c1e6:	2301      	movs	r3, #1
 800c1e8:	75fb      	strb	r3, [r7, #23]
                break;
 800c1ea:	e005      	b.n	800c1f8 <SecureElementInitMcuID+0x54>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800c1ec:	7dbb      	ldrb	r3, [r7, #22]
 800c1ee:	3301      	adds	r3, #1
 800c1f0:	75bb      	strb	r3, [r7, #22]
 800c1f2:	7dbb      	ldrb	r3, [r7, #22]
 800c1f4:	2b07      	cmp	r3, #7
 800c1f6:	d9ef      	bls.n	800c1d8 <SecureElementInitMcuID+0x34>
            }
        }
        if( id_init == false )
 800c1f8:	7dfb      	ldrb	r3, [r7, #23]
 800c1fa:	f083 0301 	eor.w	r3, r3, #1
 800c1fe:	b2db      	uxtb	r3, r3
 800c200:	2b00      	cmp	r3, #0
 800c202:	d009      	beq.n	800c218 <SecureElementInitMcuID+0x74>
        {
            /* Get a DevEUI from MCU unique ID */
            seGetUniqueId( devEui );
 800c204:	f107 020c 	add.w	r2, r7, #12
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	4610      	mov	r0, r2
 800c20c:	4798      	blx	r3
            SecureElementSetDevEui( devEui );
 800c20e:	f107 030c 	add.w	r3, r7, #12
 800c212:	4618      	mov	r0, r3
 800c214:	f000 fa52 	bl	800c6bc <SecureElementSetDevEui>
        }
    }

    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d00c      	beq.n	800c238 <SecureElementInitMcuID+0x94>
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d109      	bne.n	800c238 <SecureElementInitMcuID+0x94>
    {
        /* callback to dynamic DevAddr generation */
        seGetDevAddr( &devAddrABP );
 800c224:	f107 0208 	add.w	r2, r7, #8
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	4610      	mov	r0, r2
 800c22c:	4798      	blx	r3
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 800c22e:	68bb      	ldr	r3, [r7, #8]
 800c230:	4619      	mov	r1, r3
 800c232:	2001      	movs	r0, #1
 800c234:	f000 faa2 	bl	800c77c <SecureElementSetDevAddr>
    }

    return SECURE_ELEMENT_SUCCESS;
 800c238:	2300      	movs	r3, #0
}
 800c23a:	4618      	mov	r0, r3
 800c23c:	3718      	adds	r7, #24
 800c23e:	46bd      	mov	sp, r7
 800c240:	bd80      	pop	{r7, pc}
	...

0800c244 <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800c244:	b480      	push	{r7}
 800c246:	b085      	sub	sp, #20
 800c248:	af00      	add	r7, sp, #0
 800c24a:	4603      	mov	r3, r0
 800c24c:	6039      	str	r1, [r7, #0]
 800c24e:	71fb      	strb	r3, [r7, #7]
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c250:	2300      	movs	r3, #0
 800c252:	73fb      	strb	r3, [r7, #15]
 800c254:	e01a      	b.n	800c28c <SecureElementGetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800c256:	4b12      	ldr	r3, [pc, #72]	; (800c2a0 <SecureElementGetKeyByID+0x5c>)
 800c258:	6819      	ldr	r1, [r3, #0]
 800c25a:	7bfa      	ldrb	r2, [r7, #15]
 800c25c:	4613      	mov	r3, r2
 800c25e:	011b      	lsls	r3, r3, #4
 800c260:	4413      	add	r3, r2
 800c262:	440b      	add	r3, r1
 800c264:	3318      	adds	r3, #24
 800c266:	781b      	ldrb	r3, [r3, #0]
 800c268:	79fa      	ldrb	r2, [r7, #7]
 800c26a:	429a      	cmp	r2, r3
 800c26c:	d10b      	bne.n	800c286 <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800c26e:	4b0c      	ldr	r3, [pc, #48]	; (800c2a0 <SecureElementGetKeyByID+0x5c>)
 800c270:	6819      	ldr	r1, [r3, #0]
 800c272:	7bfa      	ldrb	r2, [r7, #15]
 800c274:	4613      	mov	r3, r2
 800c276:	011b      	lsls	r3, r3, #4
 800c278:	4413      	add	r3, r2
 800c27a:	3318      	adds	r3, #24
 800c27c:	18ca      	adds	r2, r1, r3
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800c282:	2300      	movs	r3, #0
 800c284:	e006      	b.n	800c294 <SecureElementGetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c286:	7bfb      	ldrb	r3, [r7, #15]
 800c288:	3301      	adds	r3, #1
 800c28a:	73fb      	strb	r3, [r7, #15]
 800c28c:	7bfb      	ldrb	r3, [r7, #15]
 800c28e:	2b0a      	cmp	r3, #10
 800c290:	d9e1      	bls.n	800c256 <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c292:	2303      	movs	r3, #3
}
 800c294:	4618      	mov	r0, r3
 800c296:	3714      	adds	r7, #20
 800c298:	46bd      	mov	sp, r7
 800c29a:	bc80      	pop	{r7}
 800c29c:	4770      	bx	lr
 800c29e:	bf00      	nop
 800c2a0:	20000568 	.word	0x20000568

0800c2a4 <SecureElementPrintKeys>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAWAN_KMS */

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	af00      	add	r7, sp, #0
    PrintKey( APP_KEY );
 800c2a8:	2000      	movs	r0, #0
 800c2aa:	f7ff fdab 	bl	800be04 <PrintKey>
    PrintKey( NWK_KEY );
 800c2ae:	2001      	movs	r0, #1
 800c2b0:	f7ff fda8 	bl	800be04 <PrintKey>
    PrintKey( APP_S_KEY );
 800c2b4:	2009      	movs	r0, #9
 800c2b6:	f7ff fda5 	bl	800be04 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800c2ba:	2008      	movs	r0, #8
 800c2bc:	f7ff fda2 	bl	800be04 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintIds( ACTIVATION_TYPE_NONE );
 800c2c0:	2000      	movs	r0, #0
 800c2c2:	f7ff fe2d 	bl	800bf20 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800c2c6:	2300      	movs	r3, #0
}
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	bd80      	pop	{r7, pc}

0800c2cc <SecureElementPrintSessionKeys>:

SecureElementStatus_t SecureElementPrintSessionKeys( ActivationType_t mode )
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b082      	sub	sp, #8
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	4603      	mov	r3, r0
 800c2d4:	71fb      	strb	r3, [r7, #7]
    PrintKey( MC_ROOT_KEY );
 800c2d6:	200b      	movs	r0, #11
 800c2d8:	f7ff fd94 	bl	800be04 <PrintKey>
    PrintKey( MC_KE_KEY );
 800c2dc:	200c      	movs	r0, #12
 800c2de:	f7ff fd91 	bl	800be04 <PrintKey>
    PrintKey( APP_S_KEY );
 800c2e2:	2009      	movs	r0, #9
 800c2e4:	f7ff fd8e 	bl	800be04 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800c2e8:	2008      	movs	r0, #8
 800c2ea:	f7ff fd8b 	bl	800be04 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintKey( DATABLOCK_INT_KEY );
 800c2ee:	200a      	movs	r0, #10
 800c2f0:	f7ff fd88 	bl	800be04 <PrintKey>
    PrintIds( mode );
 800c2f4:	79fb      	ldrb	r3, [r7, #7]
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	f7ff fe12 	bl	800bf20 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800c2fc:	2300      	movs	r3, #0
}
 800c2fe:	4618      	mov	r0, r3
 800c300:	3708      	adds	r7, #8
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}
	...

0800c308 <SecureElementSetKey>:
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t *key )
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b088      	sub	sp, #32
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	4603      	mov	r3, r0
 800c310:	6039      	str	r1, [r7, #0]
 800c312:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800c314:	683b      	ldr	r3, [r7, #0]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d101      	bne.n	800c31e <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c31a:	2302      	movs	r3, #2
 800c31c:	e04c      	b.n	800c3b8 <SecureElementSetKey+0xb0>
    }

#if (LORAWAN_KMS == 0)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c31e:	2300      	movs	r3, #0
 800c320:	77fb      	strb	r3, [r7, #31]
 800c322:	e045      	b.n	800c3b0 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800c324:	4b26      	ldr	r3, [pc, #152]	; (800c3c0 <SecureElementSetKey+0xb8>)
 800c326:	6819      	ldr	r1, [r3, #0]
 800c328:	7ffa      	ldrb	r2, [r7, #31]
 800c32a:	4613      	mov	r3, r2
 800c32c:	011b      	lsls	r3, r3, #4
 800c32e:	4413      	add	r3, r2
 800c330:	440b      	add	r3, r1
 800c332:	3318      	adds	r3, #24
 800c334:	781b      	ldrb	r3, [r3, #0]
 800c336:	79fa      	ldrb	r2, [r7, #7]
 800c338:	429a      	cmp	r2, r3
 800c33a:	d136      	bne.n	800c3aa <SecureElementSetKey+0xa2>
        {
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if( keyID == MC_KEY_0 )
 800c33c:	79fb      	ldrb	r3, [r7, #7]
 800c33e:	2b0d      	cmp	r3, #13
 800c340:	d123      	bne.n	800c38a <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            {
                /* Decrypt the key if its a Mckey */
                SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800c342:	2306      	movs	r3, #6
 800c344:	77bb      	strb	r3, [r7, #30]
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 800c346:	2300      	movs	r3, #0
 800c348:	60fb      	str	r3, [r7, #12]
 800c34a:	f107 0310 	add.w	r3, r7, #16
 800c34e:	2200      	movs	r2, #0
 800c350:	601a      	str	r2, [r3, #0]
 800c352:	605a      	str	r2, [r3, #4]
 800c354:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 800c356:	f107 030c 	add.w	r3, r7, #12
 800c35a:	220c      	movs	r2, #12
 800c35c:	2110      	movs	r1, #16
 800c35e:	6838      	ldr	r0, [r7, #0]
 800c360:	f000 f876 	bl	800c450 <SecureElementAesEncrypt>
 800c364:	4603      	mov	r3, r0
 800c366:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800c368:	4b15      	ldr	r3, [pc, #84]	; (800c3c0 <SecureElementSetKey+0xb8>)
 800c36a:	6819      	ldr	r1, [r3, #0]
 800c36c:	7ffa      	ldrb	r2, [r7, #31]
 800c36e:	4613      	mov	r3, r2
 800c370:	011b      	lsls	r3, r3, #4
 800c372:	4413      	add	r3, r2
 800c374:	3318      	adds	r3, #24
 800c376:	440b      	add	r3, r1
 800c378:	3301      	adds	r3, #1
 800c37a:	f107 010c 	add.w	r1, r7, #12
 800c37e:	2210      	movs	r2, #16
 800c380:	4618      	mov	r0, r3
 800c382:	f00c fd88 	bl	8018e96 <memcpy1>
                return retval;
 800c386:	7fbb      	ldrb	r3, [r7, #30]
 800c388:	e016      	b.n	800c3b8 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800c38a:	4b0d      	ldr	r3, [pc, #52]	; (800c3c0 <SecureElementSetKey+0xb8>)
 800c38c:	6819      	ldr	r1, [r3, #0]
 800c38e:	7ffa      	ldrb	r2, [r7, #31]
 800c390:	4613      	mov	r3, r2
 800c392:	011b      	lsls	r3, r3, #4
 800c394:	4413      	add	r3, r2
 800c396:	3318      	adds	r3, #24
 800c398:	440b      	add	r3, r1
 800c39a:	3301      	adds	r3, #1
 800c39c:	2210      	movs	r2, #16
 800c39e:	6839      	ldr	r1, [r7, #0]
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	f00c fd78 	bl	8018e96 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	e006      	b.n	800c3b8 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c3aa:	7ffb      	ldrb	r3, [r7, #31]
 800c3ac:	3301      	adds	r3, #1
 800c3ae:	77fb      	strb	r3, [r7, #31]
 800c3b0:	7ffb      	ldrb	r3, [r7, #31]
 800c3b2:	2b0a      	cmp	r3, #10
 800c3b4:	d9b6      	bls.n	800c324 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c3b6:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	3720      	adds	r7, #32
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	bd80      	pop	{r7, pc}
 800c3c0:	20000568 	.word	0x20000568

0800c3c4 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b086      	sub	sp, #24
 800c3c8:	af02      	add	r7, sp, #8
 800c3ca:	60f8      	str	r0, [r7, #12]
 800c3cc:	60b9      	str	r1, [r7, #8]
 800c3ce:	607a      	str	r2, [r7, #4]
 800c3d0:	70fb      	strb	r3, [r7, #3]
    if( keyID >= MC_KE_KEY )
 800c3d2:	78fb      	ldrb	r3, [r7, #3]
 800c3d4:	2b0b      	cmp	r3, #11
 800c3d6:	d901      	bls.n	800c3dc <SecureElementComputeAesCmac+0x18>
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c3d8:	2303      	movs	r3, #3
 800c3da:	e009      	b.n	800c3f0 <SecureElementComputeAesCmac+0x2c>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800c3dc:	78fa      	ldrb	r2, [r7, #3]
 800c3de:	69bb      	ldr	r3, [r7, #24]
 800c3e0:	9300      	str	r3, [sp, #0]
 800c3e2:	4613      	mov	r3, r2
 800c3e4:	687a      	ldr	r2, [r7, #4]
 800c3e6:	68b9      	ldr	r1, [r7, #8]
 800c3e8:	68f8      	ldr	r0, [r7, #12]
 800c3ea:	f7ff fe37 	bl	800c05c <ComputeCmac>
 800c3ee:	4603      	mov	r3, r0
}
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	3710      	adds	r7, #16
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd80      	pop	{r7, pc}

0800c3f8 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b088      	sub	sp, #32
 800c3fc:	af02      	add	r7, sp, #8
 800c3fe:	60f8      	str	r0, [r7, #12]
 800c400:	60b9      	str	r1, [r7, #8]
 800c402:	607a      	str	r2, [r7, #4]
 800c404:	70fb      	strb	r3, [r7, #3]
    if( buffer == NULL )
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d101      	bne.n	800c410 <SecureElementVerifyAesCmac+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c40c:	2302      	movs	r3, #2
 800c40e:	e01b      	b.n	800c448 <SecureElementVerifyAesCmac+0x50>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800c410:	2306      	movs	r3, #6
 800c412:	75fb      	strb	r3, [r7, #23]
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 800c414:	2300      	movs	r3, #0
 800c416:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800c418:	78fa      	ldrb	r2, [r7, #3]
 800c41a:	f107 0310 	add.w	r3, r7, #16
 800c41e:	9300      	str	r3, [sp, #0]
 800c420:	4613      	mov	r3, r2
 800c422:	68ba      	ldr	r2, [r7, #8]
 800c424:	68f9      	ldr	r1, [r7, #12]
 800c426:	2000      	movs	r0, #0
 800c428:	f7ff fe18 	bl	800c05c <ComputeCmac>
 800c42c:	4603      	mov	r3, r0
 800c42e:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c430:	7dfb      	ldrb	r3, [r7, #23]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d001      	beq.n	800c43a <SecureElementVerifyAesCmac+0x42>
    {
        return retval;
 800c436:	7dfb      	ldrb	r3, [r7, #23]
 800c438:	e006      	b.n	800c448 <SecureElementVerifyAesCmac+0x50>
    }

    if( expectedCmac != compCmac )
 800c43a:	693b      	ldr	r3, [r7, #16]
 800c43c:	687a      	ldr	r2, [r7, #4]
 800c43e:	429a      	cmp	r2, r3
 800c440:	d001      	beq.n	800c446 <SecureElementVerifyAesCmac+0x4e>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800c442:	2301      	movs	r3, #1
 800c444:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800c446:	7dfb      	ldrb	r3, [r7, #23]
}
 800c448:	4618      	mov	r0, r3
 800c44a:	3718      	adds	r7, #24
 800c44c:	46bd      	mov	sp, r7
 800c44e:	bd80      	pop	{r7, pc}

0800c450 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b0c2      	sub	sp, #264	; 0x108
 800c454:	af00      	add	r7, sp, #0
 800c456:	60f8      	str	r0, [r7, #12]
 800c458:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c45c:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 800c460:	6001      	str	r1, [r0, #0]
 800c462:	4611      	mov	r1, r2
 800c464:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800c468:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800c46c:	6013      	str	r3, [r2, #0]
 800c46e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c472:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 800c476:	460a      	mov	r2, r1
 800c478:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d006      	beq.n	800c48e <SecureElementAesEncrypt+0x3e>
 800c480:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c484:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d101      	bne.n	800c492 <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c48e:	2302      	movs	r3, #2
 800c490:	e059      	b.n	800c546 <SecureElementAesEncrypt+0xf6>
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 800c492:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c496:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	f003 030f 	and.w	r3, r3, #15
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d001      	beq.n	800c4a8 <SecureElementAesEncrypt+0x58>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800c4a4:	2305      	movs	r3, #5
 800c4a6:	e04e      	b.n	800c546 <SecureElementAesEncrypt+0xf6>
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800c4a8:	f107 0314 	add.w	r3, r7, #20
 800c4ac:	22f0      	movs	r2, #240	; 0xf0
 800c4ae:	2100      	movs	r1, #0
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f00c fd2b 	bl	8018f0c <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800c4b6:	f107 0210 	add.w	r2, r7, #16
 800c4ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4be:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 800c4c2:	781b      	ldrb	r3, [r3, #0]
 800c4c4:	4611      	mov	r1, r2
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f7ff fd98 	bl	800bffc <GetKeyByID>
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800c4d2:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d133      	bne.n	800c542 <SecureElementAesEncrypt+0xf2>
    {
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 800c4da:	693b      	ldr	r3, [r7, #16]
 800c4dc:	3301      	adds	r3, #1
 800c4de:	f107 0214 	add.w	r2, r7, #20
 800c4e2:	2110      	movs	r1, #16
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	f7ff fb65 	bl	800bbb4 <lorawan_aes_set_key>

        uint8_t block = 0;
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800c4f0:	e020      	b.n	800c534 <SecureElementAesEncrypt+0xe4>
        {
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 800c4f2:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800c4f6:	68fa      	ldr	r2, [r7, #12]
 800c4f8:	18d0      	adds	r0, r2, r3
 800c4fa:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800c4fe:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800c502:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800c506:	6812      	ldr	r2, [r2, #0]
 800c508:	4413      	add	r3, r2
 800c50a:	f107 0214 	add.w	r2, r7, #20
 800c50e:	4619      	mov	r1, r3
 800c510:	f7ff fc2e 	bl	800bd70 <lorawan_aes_encrypt>
            block = block + 16;
 800c514:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800c518:	3310      	adds	r3, #16
 800c51a:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800c51e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c522:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800c526:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800c52a:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800c52e:	6812      	ldr	r2, [r2, #0]
 800c530:	3a10      	subs	r2, #16
 800c532:	601a      	str	r2, [r3, #0]
        while( size != 0 )
 800c534:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c538:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d1d7      	bne.n	800c4f2 <SecureElementAesEncrypt+0xa2>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800c542:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800c546:	4618      	mov	r0, r3
 800c548:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800c54c:	46bd      	mov	sp, r7
 800c54e:	bd80      	pop	{r7, pc}

0800c550 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b088      	sub	sp, #32
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
 800c558:	460b      	mov	r3, r1
 800c55a:	70fb      	strb	r3, [r7, #3]
 800c55c:	4613      	mov	r3, r2
 800c55e:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d101      	bne.n	800c56a <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c566:	2302      	movs	r3, #2
 800c568:	e02e      	b.n	800c5c8 <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800c56a:	2306      	movs	r3, #6
 800c56c:	77fb      	strb	r3, [r7, #31]

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 800c56e:	78bb      	ldrb	r3, [r7, #2]
 800c570:	2b0c      	cmp	r3, #12
 800c572:	d104      	bne.n	800c57e <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800c574:	78fb      	ldrb	r3, [r7, #3]
 800c576:	2b0b      	cmp	r3, #11
 800c578:	d001      	beq.n	800c57e <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c57a:	2303      	movs	r3, #3
 800c57c:	e024      	b.n	800c5c8 <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 800c57e:	2300      	movs	r3, #0
 800c580:	60fb      	str	r3, [r7, #12]
 800c582:	f107 0310 	add.w	r3, r7, #16
 800c586:	2200      	movs	r2, #0
 800c588:	601a      	str	r2, [r3, #0]
 800c58a:	605a      	str	r2, [r3, #4]
 800c58c:	609a      	str	r2, [r3, #8]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 800c58e:	f107 030c 	add.w	r3, r7, #12
 800c592:	78fa      	ldrb	r2, [r7, #3]
 800c594:	2110      	movs	r1, #16
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	f7ff ff5a 	bl	800c450 <SecureElementAesEncrypt>
 800c59c:	4603      	mov	r3, r0
 800c59e:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c5a0:	7ffb      	ldrb	r3, [r7, #31]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d001      	beq.n	800c5aa <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800c5a6:	7ffb      	ldrb	r3, [r7, #31]
 800c5a8:	e00e      	b.n	800c5c8 <SecureElementDeriveAndStoreKey+0x78>
    }

    /* Store key */
    retval = SecureElementSetKey( targetKeyID, key );
 800c5aa:	f107 020c 	add.w	r2, r7, #12
 800c5ae:	78bb      	ldrb	r3, [r7, #2]
 800c5b0:	4611      	mov	r1, r2
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	f7ff fea8 	bl	800c308 <SecureElementSetKey>
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c5bc:	7ffb      	ldrb	r3, [r7, #31]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d001      	beq.n	800c5c6 <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800c5c2:	7ffb      	ldrb	r3, [r7, #31]
 800c5c4:	e000      	b.n	800c5c8 <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800c5c6:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	3720      	adds	r7, #32
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	bd80      	pop	{r7, pc}

0800c5d0 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b086      	sub	sp, #24
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	60b9      	str	r1, [r7, #8]
 800c5d8:	607b      	str	r3, [r7, #4]
 800c5da:	4603      	mov	r3, r0
 800c5dc:	73fb      	strb	r3, [r7, #15]
 800c5de:	4613      	mov	r3, r2
 800c5e0:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d005      	beq.n	800c5f4 <SecureElementProcessJoinAccept+0x24>
 800c5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d002      	beq.n	800c5f4 <SecureElementProcessJoinAccept+0x24>
 800c5ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d101      	bne.n	800c5f8 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c5f4:	2302      	movs	r3, #2
 800c5f6:	e05c      	b.n	800c6b2 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800c5f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c5fc:	2b21      	cmp	r3, #33	; 0x21
 800c5fe:	d901      	bls.n	800c604 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800c600:	2305      	movs	r3, #5
 800c602:	e056      	b.n	800c6b2 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Determine decryption key */
    KeyIdentifier_t encKeyID = NWK_KEY;
 800c604:	2301      	movs	r3, #1
 800c606:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800c608:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c60c:	b29b      	uxth	r3, r3
 800c60e:	461a      	mov	r2, r3
 800c610:	6879      	ldr	r1, [r7, #4]
 800c612:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c614:	f00c fc3f 	bl	8018e96 <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	1c58      	adds	r0, r3, #1
 800c61c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c620:	3b01      	subs	r3, #1
 800c622:	4619      	mov	r1, r3
 800c624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c626:	3301      	adds	r3, #1
 800c628:	7dfa      	ldrb	r2, [r7, #23]
 800c62a:	f7ff ff11 	bl	800c450 <SecureElementAesEncrypt>
 800c62e:	4603      	mov	r3, r0
 800c630:	2b00      	cmp	r3, #0
 800c632:	d001      	beq.n	800c638 <SecureElementProcessJoinAccept+0x68>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800c634:	2307      	movs	r3, #7
 800c636:	e03c      	b.n	800c6b2 <SecureElementProcessJoinAccept+0xe2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800c638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c63a:	330b      	adds	r3, #11
 800c63c:	781b      	ldrb	r3, [r3, #0]
 800c63e:	09db      	lsrs	r3, r3, #7
 800c640:	b2da      	uxtb	r2, r3
 800c642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c644:	701a      	strb	r2, [r3, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 800c646:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c64a:	3b04      	subs	r3, #4
 800c64c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c64e:	4413      	add	r3, r2
 800c650:	781b      	ldrb	r3, [r3, #0]
 800c652:	4619      	mov	r1, r3
 800c654:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c658:	3b03      	subs	r3, #3
 800c65a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c65c:	4413      	add	r3, r2
 800c65e:	781b      	ldrb	r3, [r3, #0]
 800c660:	021b      	lsls	r3, r3, #8
 800c662:	ea41 0203 	orr.w	r2, r1, r3
 800c666:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c66a:	3b02      	subs	r3, #2
 800c66c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c66e:	440b      	add	r3, r1
 800c670:	781b      	ldrb	r3, [r3, #0]
 800c672:	041b      	lsls	r3, r3, #16
 800c674:	431a      	orrs	r2, r3
 800c676:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c67a:	3b01      	subs	r3, #1
 800c67c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c67e:	440b      	add	r3, r1
 800c680:	781b      	ldrb	r3, [r3, #0]
 800c682:	061b      	lsls	r3, r3, #24
 800c684:	4313      	orrs	r3, r2
 800c686:	613b      	str	r3, [r7, #16]
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 800c688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c68a:	781b      	ldrb	r3, [r3, #0]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d10d      	bne.n	800c6ac <SecureElementProcessJoinAccept+0xdc>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800c690:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c694:	3b04      	subs	r3, #4
 800c696:	4619      	mov	r1, r3
 800c698:	2301      	movs	r3, #1
 800c69a:	693a      	ldr	r2, [r7, #16]
 800c69c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c69e:	f7ff feab 	bl	800c3f8 <SecureElementVerifyAesCmac>
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d003      	beq.n	800c6b0 <SecureElementProcessJoinAccept+0xe0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800c6a8:	2301      	movs	r3, #1
 800c6aa:	e002      	b.n	800c6b2 <SecureElementProcessJoinAccept+0xe2>
        }
    }
#endif /* LORAMAC_VERSION */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800c6ac:	2304      	movs	r3, #4
 800c6ae:	e000      	b.n	800c6b2 <SecureElementProcessJoinAccept+0xe2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800c6b0:	2300      	movs	r3, #0
}
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	3718      	adds	r7, #24
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	bd80      	pop	{r7, pc}
	...

0800c6bc <SecureElementSetDevEui>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b082      	sub	sp, #8
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d101      	bne.n	800c6ce <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c6ca:	2302      	movs	r3, #2
 800c6cc:	e007      	b.n	800c6de <SecureElementSetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 800c6ce:	4b06      	ldr	r3, [pc, #24]	; (800c6e8 <SecureElementSetDevEui+0x2c>)
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	2208      	movs	r2, #8
 800c6d4:	6879      	ldr	r1, [r7, #4]
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	f00c fbdd 	bl	8018e96 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c6dc:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	3708      	adds	r7, #8
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}
 800c6e6:	bf00      	nop
 800c6e8:	20000568 	.word	0x20000568

0800c6ec <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b082      	sub	sp, #8
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d101      	bne.n	800c6fe <SecureElementGetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c6fa:	2302      	movs	r3, #2
 800c6fc:	e007      	b.n	800c70e <SecureElementGetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 800c6fe:	4b06      	ldr	r3, [pc, #24]	; (800c718 <SecureElementGetDevEui+0x2c>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	2208      	movs	r2, #8
 800c704:	4619      	mov	r1, r3
 800c706:	6878      	ldr	r0, [r7, #4]
 800c708:	f00c fbc5 	bl	8018e96 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c70c:	2300      	movs	r3, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800c70e:	4618      	mov	r0, r3
 800c710:	3708      	adds	r7, #8
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}
 800c716:	bf00      	nop
 800c718:	20000568 	.word	0x20000568

0800c71c <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b082      	sub	sp, #8
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d101      	bne.n	800c72e <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c72a:	2302      	movs	r3, #2
 800c72c:	e008      	b.n	800c740 <SecureElementSetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 800c72e:	4b06      	ldr	r3, [pc, #24]	; (800c748 <SecureElementSetJoinEui+0x2c>)
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	3308      	adds	r3, #8
 800c734:	2208      	movs	r2, #8
 800c736:	6879      	ldr	r1, [r7, #4]
 800c738:	4618      	mov	r0, r3
 800c73a:	f00c fbac 	bl	8018e96 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c73e:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800c740:	4618      	mov	r0, r3
 800c742:	3708      	adds	r7, #8
 800c744:	46bd      	mov	sp, r7
 800c746:	bd80      	pop	{r7, pc}
 800c748:	20000568 	.word	0x20000568

0800c74c <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b082      	sub	sp, #8
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d101      	bne.n	800c75e <SecureElementGetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c75a:	2302      	movs	r3, #2
 800c75c:	e008      	b.n	800c770 <SecureElementGetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 800c75e:	4b06      	ldr	r3, [pc, #24]	; (800c778 <SecureElementGetJoinEui+0x2c>)
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	3308      	adds	r3, #8
 800c764:	2208      	movs	r2, #8
 800c766:	4619      	mov	r1, r3
 800c768:	6878      	ldr	r0, [r7, #4]
 800c76a:	f00c fb94 	bl	8018e96 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c76e:	2300      	movs	r3, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800c770:	4618      	mov	r0, r3
 800c772:	3708      	adds	r7, #8
 800c774:	46bd      	mov	sp, r7
 800c776:	bd80      	pop	{r7, pc}
 800c778:	20000568 	.word	0x20000568

0800c77c <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
 800c77c:	b480      	push	{r7}
 800c77e:	b083      	sub	sp, #12
 800c780:	af00      	add	r7, sp, #0
 800c782:	4603      	mov	r3, r0
 800c784:	6039      	str	r1, [r7, #0]
 800c786:	71fb      	strb	r3, [r7, #7]
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 800c788:	79fb      	ldrb	r3, [r7, #7]
 800c78a:	2b02      	cmp	r3, #2
 800c78c:	d104      	bne.n	800c798 <SecureElementSetDevAddr+0x1c>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 800c78e:	4b07      	ldr	r3, [pc, #28]	; (800c7ac <SecureElementSetDevAddr+0x30>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	683a      	ldr	r2, [r7, #0]
 800c794:	611a      	str	r2, [r3, #16]
 800c796:	e003      	b.n	800c7a0 <SecureElementSetDevAddr+0x24>
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 800c798:	4b04      	ldr	r3, [pc, #16]	; (800c7ac <SecureElementSetDevAddr+0x30>)
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	683a      	ldr	r2, [r7, #0]
 800c79e:	615a      	str	r2, [r3, #20]
    }

    return SECURE_ELEMENT_SUCCESS;
 800c7a0:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	370c      	adds	r7, #12
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bc80      	pop	{r7}
 800c7aa:	4770      	bx	lr
 800c7ac:	20000568 	.word	0x20000568

0800c7b0 <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
 800c7b0:	b480      	push	{r7}
 800c7b2:	b083      	sub	sp, #12
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	6039      	str	r1, [r7, #0]
 800c7ba:	71fb      	strb	r3, [r7, #7]
    if( devAddr == NULL )
 800c7bc:	683b      	ldr	r3, [r7, #0]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d101      	bne.n	800c7c6 <SecureElementGetDevAddr+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c7c2:	2302      	movs	r3, #2
 800c7c4:	e00e      	b.n	800c7e4 <SecureElementGetDevAddr+0x34>
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 800c7c6:	79fb      	ldrb	r3, [r7, #7]
 800c7c8:	2b02      	cmp	r3, #2
 800c7ca:	d105      	bne.n	800c7d8 <SecureElementGetDevAddr+0x28>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 800c7cc:	4b08      	ldr	r3, [pc, #32]	; (800c7f0 <SecureElementGetDevAddr+0x40>)
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	691a      	ldr	r2, [r3, #16]
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	601a      	str	r2, [r3, #0]
 800c7d6:	e004      	b.n	800c7e2 <SecureElementGetDevAddr+0x32>
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 800c7d8:	4b05      	ldr	r3, [pc, #20]	; (800c7f0 <SecureElementGetDevAddr+0x40>)
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	695a      	ldr	r2, [r3, #20]
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	601a      	str	r2, [r3, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 800c7e2:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	370c      	adds	r7, #12
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bc80      	pop	{r7}
 800c7ec:	4770      	bx	lr
 800c7ee:	bf00      	nop
 800c7f0:	20000568 	.word	0x20000568

0800c7f4 <LmHandlerInit>:
static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity );
#endif /* LORAMAC_VERSION */

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b082      	sub	sp, #8
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
 800c7fc:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800c7fe:	4a29      	ldr	r2, [pc, #164]	; (800c8a4 <LmHandlerInit+0xb0>)
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800c804:	4b28      	ldr	r3, [pc, #160]	; (800c8a8 <LmHandlerInit+0xb4>)
 800c806:	4a29      	ldr	r2, [pc, #164]	; (800c8ac <LmHandlerInit+0xb8>)
 800c808:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800c80a:	4b27      	ldr	r3, [pc, #156]	; (800c8a8 <LmHandlerInit+0xb4>)
 800c80c:	4a28      	ldr	r2, [pc, #160]	; (800c8b0 <LmHandlerInit+0xbc>)
 800c80e:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800c810:	4b25      	ldr	r3, [pc, #148]	; (800c8a8 <LmHandlerInit+0xb4>)
 800c812:	4a28      	ldr	r2, [pc, #160]	; (800c8b4 <LmHandlerInit+0xc0>)
 800c814:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800c816:	4b24      	ldr	r3, [pc, #144]	; (800c8a8 <LmHandlerInit+0xb4>)
 800c818:	4a27      	ldr	r2, [pc, #156]	; (800c8b8 <LmHandlerInit+0xc4>)
 800c81a:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800c81c:	4b21      	ldr	r3, [pc, #132]	; (800c8a4 <LmHandlerInit+0xb0>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	4a26      	ldr	r2, [pc, #152]	; (800c8bc <LmHandlerInit+0xc8>)
 800c824:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800c826:	4b1f      	ldr	r3, [pc, #124]	; (800c8a4 <LmHandlerInit+0xb0>)
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	685b      	ldr	r3, [r3, #4]
 800c82c:	4a23      	ldr	r2, [pc, #140]	; (800c8bc <LmHandlerInit+0xc8>)
 800c82e:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800c830:	4b1c      	ldr	r3, [pc, #112]	; (800c8a4 <LmHandlerInit+0xb0>)
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	689b      	ldr	r3, [r3, #8]
 800c836:	4a21      	ldr	r2, [pc, #132]	; (800c8bc <LmHandlerInit+0xc8>)
 800c838:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 800c83a:	4b1a      	ldr	r3, [pc, #104]	; (800c8a4 <LmHandlerInit+0xb0>)
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	68db      	ldr	r3, [r3, #12]
 800c840:	4a1e      	ldr	r2, [pc, #120]	; (800c8bc <LmHandlerInit+0xc8>)
 800c842:	60d3      	str	r3, [r2, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800c844:	4b1d      	ldr	r3, [pc, #116]	; (800c8bc <LmHandlerInit+0xc8>)
 800c846:	4a1e      	ldr	r2, [pc, #120]	; (800c8c0 <LmHandlerInit+0xcc>)
 800c848:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800c84a:	4b16      	ldr	r3, [pc, #88]	; (800c8a4 <LmHandlerInit+0xb0>)
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	699b      	ldr	r3, [r3, #24]
 800c850:	4a1a      	ldr	r2, [pc, #104]	; (800c8bc <LmHandlerInit+0xc8>)
 800c852:	6153      	str	r3, [r2, #20]

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	4a1b      	ldr	r2, [pc, #108]	; (800c8c4 <LmHandlerInit+0xd0>)
 800c858:	6013      	str	r3, [r2, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 800c85a:	4b12      	ldr	r3, [pc, #72]	; (800c8a4 <LmHandlerInit+0xb0>)
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c860:	4a18      	ldr	r2, [pc, #96]	; (800c8c4 <LmHandlerInit+0xd0>)
 800c862:	6053      	str	r3, [r2, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
 800c864:	4b17      	ldr	r3, [pc, #92]	; (800c8c4 <LmHandlerInit+0xd0>)
 800c866:	4a18      	ldr	r2, [pc, #96]	; (800c8c8 <LmHandlerInit+0xd4>)
 800c868:	609a      	str	r2, [r3, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
 800c86a:	4b16      	ldr	r3, [pc, #88]	; (800c8c4 <LmHandlerInit+0xd0>)
 800c86c:	4a17      	ldr	r2, [pc, #92]	; (800c8cc <LmHandlerInit+0xd8>)
 800c86e:	60da      	str	r2, [r3, #12]
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 800c870:	4914      	ldr	r1, [pc, #80]	; (800c8c4 <LmHandlerInit+0xd0>)
 800c872:	2000      	movs	r0, #0
 800c874:	f000 fdb4 	bl	800d3e0 <LmHandlerPackageRegister>
 800c878:	4603      	mov	r3, r0
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d002      	beq.n	800c884 <LmHandlerInit+0x90>
    {
        return LORAMAC_HANDLER_ERROR;
 800c87e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c882:	e00a      	b.n	800c89a <LmHandlerInit+0xa6>
    }

    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 800c884:	463b      	mov	r3, r7
 800c886:	4618      	mov	r0, r3
 800c888:	f001 fd2a 	bl	800e2e0 <LmhpPackagesRegistrationInit>
 800c88c:	4603      	mov	r3, r0
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d002      	beq.n	800c898 <LmHandlerInit+0xa4>
    {
        return LORAMAC_HANDLER_ERROR;
 800c892:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c896:	e000      	b.n	800c89a <LmHandlerInit+0xa6>
    }

    return LORAMAC_HANDLER_SUCCESS;
 800c898:	2300      	movs	r3, #0
}
 800c89a:	4618      	mov	r0, r3
 800c89c:	3708      	adds	r7, #8
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bd80      	pop	{r7, pc}
 800c8a2:	bf00      	nop
 800c8a4:	200005c0 	.word	0x200005c0
 800c8a8:	200005c4 	.word	0x200005c4
 800c8ac:	0800d0b9 	.word	0x0800d0b9
 800c8b0:	0800d12d 	.word	0x0800d12d
 800c8b4:	0800d1fd 	.word	0x0800d1fd
 800c8b8:	0800d34d 	.word	0x0800d34d
 800c8bc:	200005d4 	.word	0x200005d4
 800c8c0:	0800d88d 	.word	0x0800d88d
 800c8c4:	20000584 	.word	0x20000584
 800c8c8:	0800d6a1 	.word	0x0800d6a1
 800c8cc:	0800d6d9 	.word	0x0800d6d9

0800c8d0 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b092      	sub	sp, #72	; 0x48
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 800c8d8:	2218      	movs	r2, #24
 800c8da:	6879      	ldr	r1, [r7, #4]
 800c8dc:	4884      	ldr	r0, [pc, #528]	; (800caf0 <LmHandlerConfigure+0x220>)
 800c8de:	f00c fada 	bl	8018e96 <memcpy1>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    IsUplinkTxPending = false;
 800c8e2:	4b84      	ldr	r3, [pc, #528]	; (800caf4 <LmHandlerConfigure+0x224>)
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800c8e8:	f7fe faa2 	bl	800ae30 <LoraInfo_GetPtr>
 800c8ec:	6478      	str	r0, [r7, #68]	; 0x44

    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 800c8ee:	4b80      	ldr	r3, [pc, #512]	; (800caf0 <LmHandlerConfigure+0x220>)
 800c8f0:	781b      	ldrb	r3, [r3, #0]
 800c8f2:	461a      	mov	r2, r3
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	4093      	lsls	r3, r2
 800c8f8:	461a      	mov	r2, r3
 800c8fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c8fc:	685b      	ldr	r3, [r3, #4]
 800c8fe:	4013      	ands	r3, r2
 800c900:	2b00      	cmp	r3, #0
 800c902:	d106      	bne.n	800c912 <LmHandlerConfigure+0x42>
    {
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 800c904:	4b7c      	ldr	r3, [pc, #496]	; (800caf8 <LmHandlerConfigure+0x228>)
 800c906:	2201      	movs	r2, #1
 800c908:	2100      	movs	r1, #0
 800c90a:	2000      	movs	r0, #0
 800c90c:	f010 fe68 	bl	801d5e0 <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 800c910:	e7fe      	b.n	800c910 <LmHandlerConfigure+0x40>
    }

    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 800c912:	4b77      	ldr	r3, [pc, #476]	; (800caf0 <LmHandlerConfigure+0x220>)
 800c914:	781b      	ldrb	r3, [r3, #0]
 800c916:	461a      	mov	r2, r3
 800c918:	4978      	ldr	r1, [pc, #480]	; (800cafc <LmHandlerConfigure+0x22c>)
 800c91a:	4879      	ldr	r0, [pc, #484]	; (800cb00 <LmHandlerConfigure+0x230>)
 800c91c:	f004 ffd4 	bl	80118c8 <LoRaMacInitialization>
 800c920:	4603      	mov	r3, r0
 800c922:	2b00      	cmp	r3, #0
 800c924:	d002      	beq.n	800c92c <LmHandlerConfigure+0x5c>
    {
        return LORAMAC_HANDLER_ERROR;
 800c926:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c92a:	e0dc      	b.n	800cae6 <LmHandlerConfigure+0x216>
    }

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    /* Try the restore context from the Backup RAM structure if data retention is available */
    mibReq.Type = MIB_NVM_CTXS;
 800c92c:	2327      	movs	r3, #39	; 0x27
 800c92e:	763b      	strb	r3, [r7, #24]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800c930:	f107 0318 	add.w	r3, r7, #24
 800c934:	4618      	mov	r0, r3
 800c936:	f005 fd53 	bl	80123e0 <LoRaMacMibSetRequestConfirm>
 800c93a:	4603      	mov	r3, r0
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d103      	bne.n	800c948 <LmHandlerConfigure+0x78>
    {
        CtxRestoreDone = true;
 800c940:	4b70      	ldr	r3, [pc, #448]	; (800cb04 <LmHandlerConfigure+0x234>)
 800c942:	2201      	movs	r2, #1
 800c944:	701a      	strb	r2, [r3, #0]
 800c946:	e02a      	b.n	800c99e <LmHandlerConfigure+0xce>
    }
    else
    {
        /* Restore context data backup from user callback (stored in FLASH) */
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800c948:	2328      	movs	r3, #40	; 0x28
 800c94a:	763b      	strb	r3, [r7, #24]
        if( LmHandlerCallbacks->OnRestoreContextRequest != NULL )
 800c94c:	4b6e      	ldr	r3, [pc, #440]	; (800cb08 <LmHandlerConfigure+0x238>)
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	691b      	ldr	r3, [r3, #16]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d00c      	beq.n	800c970 <LmHandlerConfigure+0xa0>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 800c956:	f107 0318 	add.w	r3, r7, #24
 800c95a:	4618      	mov	r0, r3
 800c95c:	f005 fb68 	bl	8012030 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest( mibReq.Param.BackupContexts, sizeof( LoRaMacNvmData_t ) );
 800c960:	4b69      	ldr	r3, [pc, #420]	; (800cb08 <LmHandlerConfigure+0x238>)
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	691b      	ldr	r3, [r3, #16]
 800c966:	69fa      	ldr	r2, [r7, #28]
 800c968:	f240 51cc 	movw	r1, #1484	; 0x5cc
 800c96c:	4610      	mov	r0, r2
 800c96e:	4798      	blx	r3
        }
        /* Restore context data from backup to main nvm structure */
        mibReq.Type = MIB_NVM_CTXS;
 800c970:	2327      	movs	r3, #39	; 0x27
 800c972:	763b      	strb	r3, [r7, #24]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800c974:	f107 0318 	add.w	r3, r7, #24
 800c978:	4618      	mov	r0, r3
 800c97a:	f005 fd31 	bl	80123e0 <LoRaMacMibSetRequestConfirm>
 800c97e:	4603      	mov	r3, r0
 800c980:	2b00      	cmp	r3, #0
 800c982:	d10c      	bne.n	800c99e <LmHandlerConfigure+0xce>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c984:	2301      	movs	r3, #1
 800c986:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800c988:	f107 0318 	add.w	r3, r7, #24
 800c98c:	4618      	mov	r0, r3
 800c98e:	f005 fb4f 	bl	8012030 <LoRaMacMibGetRequestConfirm>
            if( mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE )
 800c992:	7f3b      	ldrb	r3, [r7, #28]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d002      	beq.n	800c99e <LmHandlerConfigure+0xce>
            {
                CtxRestoreDone = true;
 800c998:	4b5a      	ldr	r3, [pc, #360]	; (800cb04 <LmHandlerConfigure+0x234>)
 800c99a:	2201      	movs	r2, #1
 800c99c:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if( CtxRestoreDone == true )
 800c99e:	4b59      	ldr	r3, [pc, #356]	; (800cb04 <LmHandlerConfigure+0x234>)
 800c9a0:	781b      	ldrb	r3, [r3, #0]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d022      	beq.n	800c9ec <LmHandlerConfigure+0x11c>
    {
        if( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800c9a6:	4b58      	ldr	r3, [pc, #352]	; (800cb08 <LmHandlerConfigure+0x238>)
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	69db      	ldr	r3, [r3, #28]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d004      	beq.n	800c9ba <LmHandlerConfigure+0xea>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800c9b0:	4b55      	ldr	r3, [pc, #340]	; (800cb08 <LmHandlerConfigure+0x238>)
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	69db      	ldr	r3, [r3, #28]
 800c9b6:	2000      	movs	r0, #0
 800c9b8:	4798      	blx	r3
        }

        mibReq.Type = MIB_NVM_CTXS;
 800c9ba:	2327      	movs	r3, #39	; 0x27
 800c9bc:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800c9be:	f107 0318 	add.w	r3, r7, #24
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	f005 fb34 	bl	8012030 <LoRaMacMibGetRequestConfirm>
        LoRaMacNvmData_t *current_nvm = mibReq.Param.Contexts;
 800c9c8:	69fb      	ldr	r3, [r7, #28]
 800c9ca:	643b      	str	r3, [r7, #64]	; 0x40

        LmHandlerParams.ActiveRegion = current_nvm->MacGroup2.Region;
 800c9cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9ce:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800c9d2:	4b47      	ldr	r3, [pc, #284]	; (800caf0 <LmHandlerConfigure+0x220>)
 800c9d4:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = current_nvm->MacGroup2.DeviceClass;
 800c9d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9d8:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 800c9dc:	4b44      	ldr	r3, [pc, #272]	; (800caf0 <LmHandlerConfigure+0x220>)
 800c9de:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
 800c9e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9e2:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 800c9e6:	4b42      	ldr	r3, [pc, #264]	; (800caf0 <LmHandlerConfigure+0x220>)
 800c9e8:	709a      	strb	r2, [r3, #2]
 800c9ea:	e008      	b.n	800c9fe <LmHandlerConfigure+0x12e>
    }
    else
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
    {
        mibReq.Type = MIB_NET_ID;
 800c9ec:	2305      	movs	r3, #5
 800c9ee:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800c9f4:	f107 0318 	add.w	r3, r7, #24
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	f005 fcf1 	bl	80123e0 <LoRaMacMibSetRequestConfirm>
    }

    /* Restore ID struct from NVM or Init from callbacks */
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 800c9fe:	4b3f      	ldr	r3, [pc, #252]	; (800cafc <LmHandlerConfigure+0x22c>)
 800ca00:	689b      	ldr	r3, [r3, #8]
 800ca02:	4a3e      	ldr	r2, [pc, #248]	; (800cafc <LmHandlerConfigure+0x22c>)
 800ca04:	68d2      	ldr	r2, [r2, #12]
 800ca06:	4611      	mov	r1, r2
 800ca08:	4618      	mov	r0, r3
 800ca0a:	f7ff fbcb 	bl	800c1a4 <SecureElementInitMcuID>
 800ca0e:	4603      	mov	r3, r0
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d002      	beq.n	800ca1a <LmHandlerConfigure+0x14a>
    {
        return LORAMAC_HANDLER_ERROR;
 800ca14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ca18:	e065      	b.n	800cae6 <LmHandlerConfigure+0x216>
    }

    /* Read secure-element DEV_EUI, JOIN_EUI and DEV_ADDR values. */
    mibReq.Type = MIB_DEV_ADDR;
 800ca1a:	2306      	movs	r3, #6
 800ca1c:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800ca1e:	f107 0318 	add.w	r3, r7, #24
 800ca22:	4618      	mov	r0, r3
 800ca24:	f005 fb04 	bl	8012030 <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800ca28:	69fb      	ldr	r3, [r7, #28]
 800ca2a:	4a38      	ldr	r2, [pc, #224]	; (800cb0c <LmHandlerConfigure+0x23c>)
 800ca2c:	6153      	str	r3, [r2, #20]

    /* Override DevAddress value after init from callbacks */
    LoRaMacMibSetRequestConfirm( &mibReq );
 800ca2e:	f107 0318 	add.w	r3, r7, #24
 800ca32:	4618      	mov	r0, r3
 800ca34:	f005 fcd4 	bl	80123e0 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_DEV_EUI;
 800ca38:	2302      	movs	r3, #2
 800ca3a:	763b      	strb	r3, [r7, #24]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 800ca3c:	4b33      	ldr	r3, [pc, #204]	; (800cb0c <LmHandlerConfigure+0x23c>)
 800ca3e:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800ca40:	f107 0318 	add.w	r3, r7, #24
 800ca44:	4618      	mov	r0, r3
 800ca46:	f005 faf3 	bl	8012030 <LoRaMacMibGetRequestConfirm>

    mibReq.Type = MIB_JOIN_EUI;
 800ca4a:	2303      	movs	r3, #3
 800ca4c:	763b      	strb	r3, [r7, #24]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 800ca4e:	4b30      	ldr	r3, [pc, #192]	; (800cb10 <LmHandlerConfigure+0x240>)
 800ca50:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800ca52:	f107 0318 	add.w	r3, r7, #24
 800ca56:	4618      	mov	r0, r3
 800ca58:	f005 faea 	bl	8012030 <LoRaMacMibGetRequestConfirm>

    SecureElementPrintKeys();
 800ca5c:	f7ff fc22 	bl	800c2a4 <SecureElementPrintKeys>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG( TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n" );
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800ca60:	230f      	movs	r3, #15
 800ca62:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800ca64:	2301      	movs	r3, #1
 800ca66:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800ca68:	f107 0318 	add.w	r3, r7, #24
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	f005 fcb7 	bl	80123e0 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800ca72:	2310      	movs	r3, #16
 800ca74:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800ca76:	2300      	movs	r3, #0
 800ca78:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800ca7a:	f107 0318 	add.w	r3, r7, #24
 800ca7e:	4618      	mov	r0, r3
 800ca80:	f005 fcae 	bl	80123e0 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800ca84:	2304      	movs	r3, #4
 800ca86:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800ca88:	4b19      	ldr	r3, [pc, #100]	; (800caf0 <LmHandlerConfigure+0x220>)
 800ca8a:	789b      	ldrb	r3, [r3, #2]
 800ca8c:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800ca8e:	f107 0318 	add.w	r3, r7, #24
 800ca92:	4618      	mov	r0, r3
 800ca94:	f005 fca4 	bl	80123e0 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800ca98:	233a      	movs	r3, #58	; 0x3a
 800ca9a:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800ca9c:	4b14      	ldr	r3, [pc, #80]	; (800caf0 <LmHandlerConfigure+0x220>)
 800ca9e:	695b      	ldr	r3, [r3, #20]
 800caa0:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800caa2:	f107 0318 	add.w	r3, r7, #24
 800caa6:	4618      	mov	r0, r3
 800caa8:	f005 fc9a 	bl	80123e0 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800caac:	230f      	movs	r3, #15
 800caae:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800cab0:	4b0f      	ldr	r3, [pc, #60]	; (800caf0 <LmHandlerConfigure+0x220>)
 800cab2:	781b      	ldrb	r3, [r3, #0]
 800cab4:	f107 0210 	add.w	r2, r7, #16
 800cab8:	4611      	mov	r1, r2
 800caba:	4618      	mov	r0, r3
 800cabc:	f008 fbea 	bl	8015294 <RegionGetPhyParam>
 800cac0:	4603      	mov	r3, r0
 800cac2:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	bf14      	ite	ne
 800caca:	2301      	movne	r3, #1
 800cacc:	2300      	moveq	r3, #0
 800cace:	b2da      	uxtb	r2, r3
 800cad0:	4b07      	ldr	r3, [pc, #28]	; (800caf0 <LmHandlerConfigure+0x220>)
 800cad2:	71da      	strb	r2, [r3, #7]

    /* Set system maximum tolerated rx error in milliseconds */
    LmHandlerSetSystemMaxRxError( 20 );
 800cad4:	2014      	movs	r0, #20
 800cad6:	f000 fad7 	bl	800d088 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800cada:	4b05      	ldr	r3, [pc, #20]	; (800caf0 <LmHandlerConfigure+0x220>)
 800cadc:	79db      	ldrb	r3, [r3, #7]
 800cade:	4618      	mov	r0, r3
 800cae0:	f006 faf8 	bl	80130d4 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800cae4:	2300      	movs	r3, #0
}
 800cae6:	4618      	mov	r0, r3
 800cae8:	3748      	adds	r7, #72	; 0x48
 800caea:	46bd      	mov	sp, r7
 800caec:	bd80      	pop	{r7, pc}
 800caee:	bf00      	nop
 800caf0:	200005a8 	.word	0x200005a8
 800caf4:	200005f0 	.word	0x200005f0
 800caf8:	0801e288 	.word	0x0801e288
 800cafc:	200005d4 	.word	0x200005d4
 800cb00:	200005c4 	.word	0x200005c4
 800cb04:	200006e6 	.word	0x200006e6
 800cb08:	200005c0 	.word	0x200005c0
 800cb0c:	2000056c 	.word	0x2000056c
 800cb10:	20000574 	.word	0x20000574

0800cb14 <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b082      	sub	sp, #8
 800cb18:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    /* Processes the LoRaMac events */
    LoRaMacProcess( );
 800cb1a:	f002 fe49 	bl	800f7b0 <LoRaMacProcess>

    /* Call all packages process functions */
    LmHandlerPackagesProcess( );
 800cb1e:	f000 fd8b 	bl	800d638 <LmHandlerPackagesProcess>

    /* Check if a package transmission is pending. */
    /* If it is the case exit function earlier */
    if( LmHandlerPackageIsTxPending( ) == true )
 800cb22:	f000 fd5f 	bl	800d5e4 <LmHandlerPackageIsTxPending>
 800cb26:	4603      	mov	r3, r0
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d117      	bne.n	800cb5c <LmHandlerProcess+0x48>
        return;
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    /* If a MAC layer scheduled uplink is still pending try to send it. */
    if( IsUplinkTxPending == true )
 800cb2c:	4b0d      	ldr	r3, [pc, #52]	; (800cb64 <LmHandlerProcess+0x50>)
 800cb2e:	781b      	ldrb	r3, [r3, #0]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d014      	beq.n	800cb5e <LmHandlerProcess+0x4a>
    {
        /* Send an empty message */
        LmHandlerAppData_t appData =
 800cb34:	2300      	movs	r3, #0
 800cb36:	703b      	strb	r3, [r7, #0]
 800cb38:	2300      	movs	r3, #0
 800cb3a:	707b      	strb	r3, [r7, #1]
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	607b      	str	r3, [r7, #4]
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0,
        };

        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 800cb40:	4b09      	ldr	r3, [pc, #36]	; (800cb68 <LmHandlerProcess+0x54>)
 800cb42:	78d9      	ldrb	r1, [r3, #3]
 800cb44:	463b      	mov	r3, r7
 800cb46:	2200      	movs	r2, #0
 800cb48:	4618      	mov	r0, r3
 800cb4a:	f000 f8d7 	bl	800ccfc <LmHandlerSend>
 800cb4e:	4603      	mov	r3, r0
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d104      	bne.n	800cb5e <LmHandlerProcess+0x4a>
        {
            IsUplinkTxPending = false;
 800cb54:	4b03      	ldr	r3, [pc, #12]	; (800cb64 <LmHandlerProcess+0x50>)
 800cb56:	2200      	movs	r2, #0
 800cb58:	701a      	strb	r2, [r3, #0]
 800cb5a:	e000      	b.n	800cb5e <LmHandlerProcess+0x4a>
        return;
 800cb5c:	bf00      	nop
        }
    }
#endif /* LORAMAC_VERSION */
}
 800cb5e:	3708      	adds	r7, #8
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bd80      	pop	{r7, pc}
 800cb64:	200005f0 	.word	0x200005f0
 800cb68:	200005a8 	.word	0x200005a8

0800cb6c <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800cb6c:	b480      	push	{r7}
 800cb6e:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800cb70:	4b02      	ldr	r3, [pc, #8]	; (800cb7c <LmHandlerGetDutyCycleWaitTime+0x10>)
 800cb72:	681b      	ldr	r3, [r3, #0]
}
 800cb74:	4618      	mov	r0, r3
 800cb76:	46bd      	mov	sp, r7
 800cb78:	bc80      	pop	{r7}
 800cb7a:	4770      	bx	lr
 800cb7c:	200005ec 	.word	0x200005ec

0800cb80 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b092      	sub	sp, #72	; 0x48
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	4603      	mov	r3, r0
 800cb88:	460a      	mov	r2, r1
 800cb8a:	71fb      	strb	r3, [r7, #7]
 800cb8c:	4613      	mov	r3, r2
 800cb8e:	71bb      	strb	r3, [r7, #6]
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800cb90:	2301      	movs	r3, #1
 800cb92:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800cb96:	4b46      	ldr	r3, [pc, #280]	; (800ccb0 <LmHandlerJoin+0x130>)
 800cb98:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800cb9c:	b2db      	uxtb	r3, r3
 800cb9e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 800cba2:	4b43      	ldr	r3, [pc, #268]	; (800ccb0 <LmHandlerJoin+0x130>)
 800cba4:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800cba8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

    if( mode == ACTIVATION_TYPE_OTAA )
 800cbac:	79fb      	ldrb	r3, [r7, #7]
 800cbae:	2b02      	cmp	r3, #2
 800cbb0:	d10b      	bne.n	800cbca <LmHandlerJoin+0x4a>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800cbb2:	2302      	movs	r3, #2
 800cbb4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800cbb8:	4b3e      	ldr	r3, [pc, #248]	; (800ccb4 <LmHandlerJoin+0x134>)
 800cbba:	2202      	movs	r2, #2
 800cbbc:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 800cbbe:	4a3d      	ldr	r2, [pc, #244]	; (800ccb4 <LmHandlerJoin+0x134>)
 800cbc0:	79bb      	ldrb	r3, [r7, #6]
 800cbc2:	7213      	strb	r3, [r2, #8]
        LoRaMacStart();
 800cbc4:	f005 f936 	bl	8011e34 <LoRaMacStart>
 800cbc8:	e05c      	b.n	800cc84 <LmHandlerJoin+0x104>
    }
    else
    {
        MibRequestConfirm_t mibReq;

        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800cbca:	2301      	movs	r3, #1
 800cbcc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800cbd0:	4b38      	ldr	r3, [pc, #224]	; (800ccb4 <LmHandlerJoin+0x134>)
 800cbd2:	2201      	movs	r2, #1
 800cbd4:	71da      	strb	r2, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800cbd6:	4b36      	ldr	r3, [pc, #216]	; (800ccb0 <LmHandlerJoin+0x130>)
 800cbd8:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800cbdc:	4b35      	ldr	r3, [pc, #212]	; (800ccb4 <LmHandlerJoin+0x134>)
 800cbde:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 800cbe0:	4b33      	ldr	r3, [pc, #204]	; (800ccb0 <LmHandlerJoin+0x130>)
 800cbe2:	f993 2005 	ldrsb.w	r2, [r3, #5]
 800cbe6:	4b33      	ldr	r3, [pc, #204]	; (800ccb4 <LmHandlerJoin+0x134>)
 800cbe8:	715a      	strb	r2, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800cbea:	4b32      	ldr	r3, [pc, #200]	; (800ccb4 <LmHandlerJoin+0x134>)
 800cbec:	2200      	movs	r2, #0
 800cbee:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800cbf0:	4a30      	ldr	r2, [pc, #192]	; (800ccb4 <LmHandlerJoin+0x134>)
 800cbf2:	79bb      	ldrb	r3, [r7, #6]
 800cbf4:	7213      	strb	r3, [r2, #8]

        if( CtxRestoreDone == false )
 800cbf6:	4b30      	ldr	r3, [pc, #192]	; (800ccb8 <LmHandlerJoin+0x138>)
 800cbf8:	781b      	ldrb	r3, [r3, #0]
 800cbfa:	f083 0301 	eor.w	r3, r3, #1
 800cbfe:	b2db      	uxtb	r3, r3
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d034      	beq.n	800cc6e <LmHandlerJoin+0xee>
        {
            /* Configure the default datarate */
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800cc04:	231f      	movs	r3, #31
 800cc06:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800cc08:	4b29      	ldr	r3, [pc, #164]	; (800ccb0 <LmHandlerJoin+0x130>)
 800cc0a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800cc0e:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800cc10:	f107 030c 	add.w	r3, r7, #12
 800cc14:	4618      	mov	r0, r3
 800cc16:	f005 fbe3 	bl	80123e0 <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_DATARATE;
 800cc1a:	2320      	movs	r3, #32
 800cc1c:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800cc1e:	4b24      	ldr	r3, [pc, #144]	; (800ccb0 <LmHandlerJoin+0x130>)
 800cc20:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800cc24:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800cc26:	f107 030c 	add.w	r3, r7, #12
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	f005 fbd8 	bl	80123e0 <LoRaMacMibSetRequestConfirm>

            /* Configure the default Tx Power */
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 800cc30:	2322      	movs	r3, #34	; 0x22
 800cc32:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 800cc34:	4b1e      	ldr	r3, [pc, #120]	; (800ccb0 <LmHandlerJoin+0x130>)
 800cc36:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800cc3a:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800cc3c:	f107 030c 	add.w	r3, r7, #12
 800cc40:	4618      	mov	r0, r3
 800cc42:	f005 fbcd 	bl	80123e0 <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_TX_POWER;
 800cc46:	2321      	movs	r3, #33	; 0x21
 800cc48:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 800cc4a:	4b19      	ldr	r3, [pc, #100]	; (800ccb0 <LmHandlerJoin+0x130>)
 800cc4c:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800cc50:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800cc52:	f107 030c 	add.w	r3, r7, #12
 800cc56:	4618      	mov	r0, r3
 800cc58:	f005 fbc2 	bl	80123e0 <LoRaMacMibSetRequestConfirm>

            /* Tell the MAC layer which network server version are we connecting too. */
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800cc5c:	2329      	movs	r3, #41	; 0x29
 800cc5e:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800cc60:	4b16      	ldr	r3, [pc, #88]	; (800ccbc <LmHandlerJoin+0x13c>)
 800cc62:	613b      	str	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800cc64:	f107 030c 	add.w	r3, r7, #12
 800cc68:	4618      	mov	r0, r3
 800cc6a:	f005 fbb9 	bl	80123e0 <LoRaMacMibSetRequestConfirm>
        }

        LoRaMacStart();
 800cc6e:	f005 f8e1 	bl	8011e34 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800cc72:	2301      	movs	r3, #1
 800cc74:	733b      	strb	r3, [r7, #12]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800cc76:	2301      	movs	r3, #1
 800cc78:	743b      	strb	r3, [r7, #16]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800cc7a:	f107 030c 	add.w	r3, r7, #12
 800cc7e:	4618      	mov	r0, r3
 800cc80:	f005 fbae 	bl	80123e0 <LoRaMacMibSetRequestConfirm>
        LmHandlerRequestClass( LmHandlerParams.DefaultClass );
#endif /* LORAMAC_VERSION */
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( ( CtxRestoreDone == false ) || ( forceRejoin == true ) )
 800cc84:	4b0c      	ldr	r3, [pc, #48]	; (800ccb8 <LmHandlerJoin+0x138>)
 800cc86:	781b      	ldrb	r3, [r3, #0]
 800cc88:	f083 0301 	eor.w	r3, r3, #1
 800cc8c:	b2db      	uxtb	r3, r3
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d102      	bne.n	800cc98 <LmHandlerJoin+0x118>
 800cc92:	79bb      	ldrb	r3, [r7, #6]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d004      	beq.n	800cca2 <LmHandlerJoin+0x122>
    {
        /* Starts the join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
 800cc98:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	f005 ff49 	bl	8012b34 <LoRaMacMlmeRequest>
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800cca2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cca4:	4a06      	ldr	r2, [pc, #24]	; (800ccc0 <LmHandlerJoin+0x140>)
 800cca6:	6013      	str	r3, [r2, #0]
#endif /* LORAMAC_VERSION */
}
 800cca8:	bf00      	nop
 800ccaa:	3748      	adds	r7, #72	; 0x48
 800ccac:	46bd      	mov	sp, r7
 800ccae:	bd80      	pop	{r7, pc}
 800ccb0:	200005a8 	.word	0x200005a8
 800ccb4:	20000094 	.word	0x20000094
 800ccb8:	200006e6 	.word	0x200006e6
 800ccbc:	01000400 	.word	0x01000400
 800ccc0:	200005ec 	.word	0x200005ec

0800ccc4 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b08c      	sub	sp, #48	; 0x30
 800ccc8:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800ccca:	2301      	movs	r3, #1
 800cccc:	713b      	strb	r3, [r7, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800ccce:	1d3b      	adds	r3, r7, #4
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	f005 f9ad 	bl	8012030 <LoRaMacMibGetRequestConfirm>
 800ccd6:	4603      	mov	r3, r0
 800ccd8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if( status == LORAMAC_STATUS_OK )
 800ccdc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d106      	bne.n	800ccf2 <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800cce4:	7a3b      	ldrb	r3, [r7, #8]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d101      	bne.n	800ccee <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800ccea:	2300      	movs	r3, #0
 800ccec:	e002      	b.n	800ccf4 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800ccee:	2301      	movs	r3, #1
 800ccf0:	e000      	b.n	800ccf4 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800ccf2:	2300      	movs	r3, #0
    }
}
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	3730      	adds	r7, #48	; 0x30
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	bd80      	pop	{r7, pc}

0800ccfc <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      bool allowDelayedTx )
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b08a      	sub	sp, #40	; 0x28
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
 800cd04:	460b      	mov	r3, r1
 800cd06:	70fb      	strb	r3, [r7, #3]
 800cd08:	4613      	mov	r3, r2
 800cd0a:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800cd0c:	23ff      	movs	r3, #255	; 0xff
 800cd0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if( LoRaMacIsBusy() == true )
 800cd12:	f002 faa7 	bl	800f264 <LoRaMacIsBusy>
 800cd16:	4603      	mov	r3, r0
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d002      	beq.n	800cd22 <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800cd1c:	f06f 0301 	mvn.w	r3, #1
 800cd20:	e0ab      	b.n	800ce7a <LmHandlerSend+0x17e>
    }

    if( LoRaMacIsStopped() == true )
 800cd22:	f002 fac7 	bl	800f2b4 <LoRaMacIsStopped>
 800cd26:	4603      	mov	r3, r0
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d002      	beq.n	800cd32 <LmHandlerSend+0x36>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800cd2c:	f06f 0302 	mvn.w	r3, #2
 800cd30:	e0a3      	b.n	800ce7a <LmHandlerSend+0x17e>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800cd32:	f7ff ffc7 	bl	800ccc4 <LmHandlerJoinStatus>
 800cd36:	4603      	mov	r3, r0
 800cd38:	2b01      	cmp	r3, #1
 800cd3a:	d00a      	beq.n	800cd52 <LmHandlerSend+0x56>
    {
        /* The network isn't joined, try again. */
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800cd3c:	4b51      	ldr	r3, [pc, #324]	; (800ce84 <LmHandlerSend+0x188>)
 800cd3e:	79db      	ldrb	r3, [r3, #7]
 800cd40:	4a50      	ldr	r2, [pc, #320]	; (800ce84 <LmHandlerSend+0x188>)
 800cd42:	7a12      	ldrb	r2, [r2, #8]
 800cd44:	4611      	mov	r1, r2
 800cd46:	4618      	mov	r0, r3
 800cd48:	f7ff ff1a 	bl	800cb80 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800cd4c:	f06f 0302 	mvn.w	r3, #2
 800cd50:	e093      	b.n	800ce7a <LmHandlerSend+0x17e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800cd52:	4a4d      	ldr	r2, [pc, #308]	; (800ce88 <LmHandlerSend+0x18c>)
 800cd54:	78fb      	ldrb	r3, [r7, #3]
 800cd56:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800cd58:	78fb      	ldrb	r3, [r7, #3]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	bf14      	ite	ne
 800cd5e:	2301      	movne	r3, #1
 800cd60:	2300      	moveq	r3, #0
 800cd62:	b2db      	uxtb	r3, r3
 800cd64:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800cd66:	4b49      	ldr	r3, [pc, #292]	; (800ce8c <LmHandlerSend+0x190>)
 800cd68:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800cd6c:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	785b      	ldrb	r3, [r3, #1]
 800cd72:	f107 020c 	add.w	r2, r7, #12
 800cd76:	4611      	mov	r1, r2
 800cd78:	4618      	mov	r0, r3
 800cd7a:	f005 f8c9 	bl	8011f10 <LoRaMacQueryTxPossible>
 800cd7e:	4603      	mov	r3, r0
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d009      	beq.n	800cd98 <LmHandlerSend+0x9c>
    {
        /* Send empty frame in order to flush MAC commands */
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800cd84:	2300      	movs	r3, #0
 800cd86:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800cd88:	2300      	movs	r3, #0
 800cd8a:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800cd90:	23f9      	movs	r3, #249	; 0xf9
 800cd92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cd96:	e009      	b.n	800cdac <LmHandlerSend+0xb0>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	781b      	ldrb	r3, [r3, #0]
 800cd9c:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	785b      	ldrb	r3, [r3, #1]
 800cda2:	b29b      	uxth	r3, r3
 800cda4:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	685b      	ldr	r3, [r3, #4]
 800cdaa:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800cdac:	4b36      	ldr	r3, [pc, #216]	; (800ce88 <LmHandlerSend+0x18c>)
 800cdae:	687a      	ldr	r2, [r7, #4]
 800cdb0:	3310      	adds	r3, #16
 800cdb2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cdb6:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800cdba:	4b34      	ldr	r3, [pc, #208]	; (800ce8c <LmHandlerSend+0x190>)
 800cdbc:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800cdc0:	4b31      	ldr	r3, [pc, #196]	; (800ce88 <LmHandlerSend+0x18c>)
 800cdc2:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 800cdc4:	78ba      	ldrb	r2, [r7, #2]
 800cdc6:	f107 0310 	add.w	r3, r7, #16
 800cdca:	4611      	mov	r1, r2
 800cdcc:	4618      	mov	r0, r3
 800cdce:	f006 f849 	bl	8012e64 <LoRaMacMcpsRequest>
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800cdd8:	6a3b      	ldr	r3, [r7, #32]
 800cdda:	4a2d      	ldr	r2, [pc, #180]	; (800ce90 <LmHandlerSend+0x194>)
 800cddc:	6013      	str	r3, [r2, #0]

    switch( status )
 800cdde:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cde2:	2b11      	cmp	r3, #17
 800cde4:	d842      	bhi.n	800ce6c <LmHandlerSend+0x170>
 800cde6:	a201      	add	r2, pc, #4	; (adr r2, 800cdec <LmHandlerSend+0xf0>)
 800cde8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdec:	0800ce35 	.word	0x0800ce35
 800cdf0:	0800ce4d 	.word	0x0800ce4d
 800cdf4:	0800ce6d 	.word	0x0800ce6d
 800cdf8:	0800ce6d 	.word	0x0800ce6d
 800cdfc:	0800ce6d 	.word	0x0800ce6d
 800ce00:	0800ce6d 	.word	0x0800ce6d
 800ce04:	0800ce6d 	.word	0x0800ce6d
 800ce08:	0800ce55 	.word	0x0800ce55
 800ce0c:	0800ce6d 	.word	0x0800ce6d
 800ce10:	0800ce6d 	.word	0x0800ce6d
 800ce14:	0800ce6d 	.word	0x0800ce6d
 800ce18:	0800ce65 	.word	0x0800ce65
 800ce1c:	0800ce6d 	.word	0x0800ce6d
 800ce20:	0800ce6d 	.word	0x0800ce6d
 800ce24:	0800ce4d 	.word	0x0800ce4d
 800ce28:	0800ce4d 	.word	0x0800ce4d
 800ce2c:	0800ce4d 	.word	0x0800ce4d
 800ce30:	0800ce5d 	.word	0x0800ce5d
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            IsUplinkTxPending = false;
 800ce34:	4b17      	ldr	r3, [pc, #92]	; (800ce94 <LmHandlerSend+0x198>)
 800ce36:	2200      	movs	r2, #0
 800ce38:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 800ce3a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ce3e:	f113 0f07 	cmn.w	r3, #7
 800ce42:	d017      	beq.n	800ce74 <LmHandlerSend+0x178>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800ce44:	2300      	movs	r3, #0
 800ce46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 800ce4a:	e013      	b.n	800ce74 <LmHandlerSend+0x178>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800ce4c:	23fe      	movs	r3, #254	; 0xfe
 800ce4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800ce52:	e010      	b.n	800ce76 <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800ce54:	23fd      	movs	r3, #253	; 0xfd
 800ce56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800ce5a:	e00c      	b.n	800ce76 <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800ce5c:	23fb      	movs	r3, #251	; 0xfb
 800ce5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800ce62:	e008      	b.n	800ce76 <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800ce64:	23fa      	movs	r3, #250	; 0xfa
 800ce66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800ce6a:	e004      	b.n	800ce76 <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800ce6c:	23ff      	movs	r3, #255	; 0xff
 800ce6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800ce72:	e000      	b.n	800ce76 <LmHandlerSend+0x17a>
            break;
 800ce74:	bf00      	nop
    }

    return lmhStatus;
 800ce76:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	3728      	adds	r7, #40	; 0x28
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bd80      	pop	{r7, pc}
 800ce82:	bf00      	nop
 800ce84:	20000094 	.word	0x20000094
 800ce88:	200000a0 	.word	0x200000a0
 800ce8c:	200005a8 	.word	0x200005a8
 800ce90:	200005ec 	.word	0x200005ec
 800ce94:	200005f0 	.word	0x200005f0

0800ce98 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b086      	sub	sp, #24
 800ce9c:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800ce9e:	2309      	movs	r3, #9
 800cea0:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800cea2:	463b      	mov	r3, r7
 800cea4:	4618      	mov	r0, r3
 800cea6:	f005 fe45 	bl	8012b34 <LoRaMacMlmeRequest>
 800ceaa:	4603      	mov	r3, r0
 800ceac:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800ceae:	693b      	ldr	r3, [r7, #16]
 800ceb0:	4a06      	ldr	r2, [pc, #24]	; (800cecc <LmHandlerDeviceTimeReq+0x34>)
 800ceb2:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800ceb4:	7dfb      	ldrb	r3, [r7, #23]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d101      	bne.n	800cebe <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800ceba:	2300      	movs	r3, #0
 800cebc:	e001      	b.n	800cec2 <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800cebe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
 800cec2:	4618      	mov	r0, r3
 800cec4:	3718      	adds	r7, #24
 800cec6:	46bd      	mov	sp, r7
 800cec8:	bd80      	pop	{r7, pc}
 800ceca:	bf00      	nop
 800cecc:	200005ec 	.word	0x200005ec

0800ced0 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800ced0:	b480      	push	{r7}
 800ced2:	b083      	sub	sp, #12
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	4603      	mov	r3, r0
 800ced8:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800ceda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
 800cede:	4618      	mov	r0, r3
 800cee0:	370c      	adds	r7, #12
 800cee2:	46bd      	mov	sp, r7
 800cee4:	bc80      	pop	{r7}
 800cee6:	4770      	bx	lr

0800cee8 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b08e      	sub	sp, #56	; 0x38
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	4603      	mov	r3, r0
 800cef0:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800cef2:	2300      	movs	r3, #0
 800cef4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( LoRaMacIsBusy() == true )
 800cef8:	f002 f9b4 	bl	800f264 <LoRaMacIsBusy>
 800cefc:	4603      	mov	r3, r0
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d002      	beq.n	800cf08 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800cf02:	f06f 0301 	mvn.w	r3, #1
 800cf06:	e071      	b.n	800cfec <LmHandlerRequestClass+0x104>
    }

    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 800cf08:	f7ff fedc 	bl	800ccc4 <LmHandlerJoinStatus>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	2b01      	cmp	r3, #1
 800cf10:	d002      	beq.n	800cf18 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800cf12:	f06f 0302 	mvn.w	r3, #2
 800cf16:	e069      	b.n	800cfec <LmHandlerRequestClass+0x104>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800cf18:	2300      	movs	r3, #0
 800cf1a:	733b      	strb	r3, [r7, #12]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800cf1c:	f107 030c 	add.w	r3, r7, #12
 800cf20:	4618      	mov	r0, r3
 800cf22:	f005 f885 	bl	8012030 <LoRaMacMibGetRequestConfirm>
 800cf26:	4603      	mov	r3, r0
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d002      	beq.n	800cf32 <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800cf2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cf30:	e05c      	b.n	800cfec <LmHandlerRequestClass+0x104>
    }
    currentClass = mibReq.Param.Class;
 800cf32:	7c3b      	ldrb	r3, [r7, #16]
 800cf34:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Attempt to switch only if class update */
    if( currentClass != newClass )
 800cf38:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800cf3c:	79fb      	ldrb	r3, [r7, #7]
 800cf3e:	429a      	cmp	r2, r3
 800cf40:	d052      	beq.n	800cfe8 <LmHandlerRequestClass+0x100>
    {
        switch( newClass )
 800cf42:	79fb      	ldrb	r3, [r7, #7]
 800cf44:	2b02      	cmp	r3, #2
 800cf46:	d028      	beq.n	800cf9a <LmHandlerRequestClass+0xb2>
 800cf48:	2b02      	cmp	r3, #2
 800cf4a:	dc48      	bgt.n	800cfde <LmHandlerRequestClass+0xf6>
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d002      	beq.n	800cf56 <LmHandlerRequestClass+0x6e>
 800cf50:	2b01      	cmp	r3, #1
 800cf52:	d01e      	beq.n	800cf92 <LmHandlerRequestClass+0xaa>
                        }
                    }
                }
                break;
            default:
                break;
 800cf54:	e043      	b.n	800cfde <LmHandlerRequestClass+0xf6>
                    if( currentClass != CLASS_A )
 800cf56:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d041      	beq.n	800cfe2 <LmHandlerRequestClass+0xfa>
                        mibReq.Param.Class = newClass;
 800cf5e:	79fb      	ldrb	r3, [r7, #7]
 800cf60:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800cf62:	f107 030c 	add.w	r3, r7, #12
 800cf66:	4618      	mov	r0, r3
 800cf68:	f005 fa3a 	bl	80123e0 <LoRaMacMibSetRequestConfirm>
 800cf6c:	4603      	mov	r3, r0
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d10b      	bne.n	800cf8a <LmHandlerRequestClass+0xa2>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800cf72:	4b20      	ldr	r3, [pc, #128]	; (800cff4 <LmHandlerRequestClass+0x10c>)
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d032      	beq.n	800cfe2 <LmHandlerRequestClass+0xfa>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800cf7c:	4b1d      	ldr	r3, [pc, #116]	; (800cff4 <LmHandlerRequestClass+0x10c>)
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf82:	79fa      	ldrb	r2, [r7, #7]
 800cf84:	4610      	mov	r0, r2
 800cf86:	4798      	blx	r3
                break;
 800cf88:	e02b      	b.n	800cfe2 <LmHandlerRequestClass+0xfa>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800cf8a:	23ff      	movs	r3, #255	; 0xff
 800cf8c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800cf90:	e027      	b.n	800cfe2 <LmHandlerRequestClass+0xfa>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800cf92:	23ff      	movs	r3, #255	; 0xff
 800cf94:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800cf98:	e026      	b.n	800cfe8 <LmHandlerRequestClass+0x100>
                    if( currentClass != CLASS_A )
 800cf9a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d003      	beq.n	800cfaa <LmHandlerRequestClass+0xc2>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800cfa2:	23ff      	movs	r3, #255	; 0xff
 800cfa4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800cfa8:	e01d      	b.n	800cfe6 <LmHandlerRequestClass+0xfe>
                        mibReq.Param.Class = newClass;
 800cfaa:	79fb      	ldrb	r3, [r7, #7]
 800cfac:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800cfae:	f107 030c 	add.w	r3, r7, #12
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	f005 fa14 	bl	80123e0 <LoRaMacMibSetRequestConfirm>
 800cfb8:	4603      	mov	r3, r0
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d10b      	bne.n	800cfd6 <LmHandlerRequestClass+0xee>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800cfbe:	4b0d      	ldr	r3, [pc, #52]	; (800cff4 <LmHandlerRequestClass+0x10c>)
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d00e      	beq.n	800cfe6 <LmHandlerRequestClass+0xfe>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800cfc8:	4b0a      	ldr	r3, [pc, #40]	; (800cff4 <LmHandlerRequestClass+0x10c>)
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfce:	79fa      	ldrb	r2, [r7, #7]
 800cfd0:	4610      	mov	r0, r2
 800cfd2:	4798      	blx	r3
                break;
 800cfd4:	e007      	b.n	800cfe6 <LmHandlerRequestClass+0xfe>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800cfd6:	23ff      	movs	r3, #255	; 0xff
 800cfd8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800cfdc:	e003      	b.n	800cfe6 <LmHandlerRequestClass+0xfe>
                break;
 800cfde:	bf00      	nop
 800cfe0:	e002      	b.n	800cfe8 <LmHandlerRequestClass+0x100>
                break;
 800cfe2:	bf00      	nop
 800cfe4:	e000      	b.n	800cfe8 <LmHandlerRequestClass+0x100>
                break;
 800cfe6:	bf00      	nop
        }
    }
    return errorStatus;
 800cfe8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800cfec:	4618      	mov	r0, r3
 800cfee:	3738      	adds	r7, #56	; 0x38
 800cff0:	46bd      	mov	sp, r7
 800cff2:	bd80      	pop	{r7, pc}
 800cff4:	200005c0 	.word	0x200005c0

0800cff8 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b08c      	sub	sp, #48	; 0x30
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( deviceClass == NULL )
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d102      	bne.n	800d00c <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800d006:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d00a:	e010      	b.n	800d02e <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800d00c:	2300      	movs	r3, #0
 800d00e:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800d010:	f107 0308 	add.w	r3, r7, #8
 800d014:	4618      	mov	r0, r3
 800d016:	f005 f80b 	bl	8012030 <LoRaMacMibGetRequestConfirm>
 800d01a:	4603      	mov	r3, r0
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d002      	beq.n	800d026 <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800d020:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d024:	e003      	b.n	800d02e <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800d026:	7b3a      	ldrb	r2, [r7, #12]
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800d02c:	2300      	movs	r3, #0
}
 800d02e:	4618      	mov	r0, r3
 800d030:	3730      	adds	r7, #48	; 0x30
 800d032:	46bd      	mov	sp, r7
 800d034:	bd80      	pop	{r7, pc}
	...

0800d038 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b08c      	sub	sp, #48	; 0x30
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if( txDatarate == NULL )
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d102      	bne.n	800d04c <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800d046:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d04a:	e016      	b.n	800d07a <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800d04c:	2320      	movs	r3, #32
 800d04e:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 800d050:	f107 0308 	add.w	r3, r7, #8
 800d054:	4618      	mov	r0, r3
 800d056:	f004 ffeb 	bl	8012030 <LoRaMacMibGetRequestConfirm>
 800d05a:	4603      	mov	r3, r0
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d002      	beq.n	800d066 <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800d060:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d064:	e009      	b.n	800d07a <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800d066:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	f993 2000 	ldrsb.w	r2, [r3]
 800d074:	4b03      	ldr	r3, [pc, #12]	; (800d084 <LmHandlerGetTxDatarate+0x4c>)
 800d076:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800d078:	2300      	movs	r3, #0
}
 800d07a:	4618      	mov	r0, r3
 800d07c:	3730      	adds	r7, #48	; 0x30
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd80      	pop	{r7, pc}
 800d082:	bf00      	nop
 800d084:	200005a8 	.word	0x200005a8

0800d088 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b08c      	sub	sp, #48	; 0x30
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800d090:	2323      	movs	r3, #35	; 0x23
 800d092:	723b      	strb	r3, [r7, #8]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	60fb      	str	r3, [r7, #12]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800d098:	f107 0308 	add.w	r3, r7, #8
 800d09c:	4618      	mov	r0, r3
 800d09e:	f005 f99f 	bl	80123e0 <LoRaMacMibSetRequestConfirm>
 800d0a2:	4603      	mov	r3, r0
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d002      	beq.n	800d0ae <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800d0a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d0ac:	e000      	b.n	800d0b0 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800d0ae:	2300      	movs	r3, #0
}
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	3730      	adds	r7, #48	; 0x30
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	bd80      	pop	{r7, pc}

0800d0b8 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b082      	sub	sp, #8
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800d0c0:	4b18      	ldr	r3, [pc, #96]	; (800d124 <McpsConfirm+0x6c>)
 800d0c2:	2201      	movs	r2, #1
 800d0c4:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	785a      	ldrb	r2, [r3, #1]
 800d0ca:	4b16      	ldr	r3, [pc, #88]	; (800d124 <McpsConfirm+0x6c>)
 800d0cc:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	789b      	ldrb	r3, [r3, #2]
 800d0d2:	b25a      	sxtb	r2, r3
 800d0d4:	4b13      	ldr	r3, [pc, #76]	; (800d124 <McpsConfirm+0x6c>)
 800d0d6:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	68db      	ldr	r3, [r3, #12]
 800d0dc:	4a11      	ldr	r2, [pc, #68]	; (800d124 <McpsConfirm+0x6c>)
 800d0de:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800d0e6:	4b0f      	ldr	r3, [pc, #60]	; (800d124 <McpsConfirm+0x6c>)
 800d0e8:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	691b      	ldr	r3, [r3, #16]
 800d0ee:	b2da      	uxtb	r2, r3
 800d0f0:	4b0c      	ldr	r3, [pc, #48]	; (800d124 <McpsConfirm+0x6c>)
 800d0f2:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	791b      	ldrb	r3, [r3, #4]
 800d0f8:	461a      	mov	r2, r3
 800d0fa:	4b0a      	ldr	r3, [pc, #40]	; (800d124 <McpsConfirm+0x6c>)
 800d0fc:	725a      	strb	r2, [r3, #9]

    if( LmHandlerCallbacks->OnTxData != NULL )
 800d0fe:	4b0a      	ldr	r3, [pc, #40]	; (800d128 <McpsConfirm+0x70>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d104:	2b00      	cmp	r3, #0
 800d106:	d004      	beq.n	800d112 <McpsConfirm+0x5a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800d108:	4b07      	ldr	r3, [pc, #28]	; (800d128 <McpsConfirm+0x70>)
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d10e:	4805      	ldr	r0, [pc, #20]	; (800d124 <McpsConfirm+0x6c>)
 800d110:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800d112:	6879      	ldr	r1, [r7, #4]
 800d114:	2000      	movs	r0, #0
 800d116:	f000 f9e9 	bl	800d4ec <LmHandlerPackagesNotify>
}
 800d11a:	bf00      	nop
 800d11c:	3708      	adds	r7, #8
 800d11e:	46bd      	mov	sp, r7
 800d120:	bd80      	pop	{r7, pc}
 800d122:	bf00      	nop
 800d124:	200000a0 	.word	0x200000a0
 800d128:	200005c0 	.word	0x200005c0

0800d12c <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b086      	sub	sp, #24
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
 800d134:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800d136:	2300      	movs	r3, #0
 800d138:	73fb      	strb	r3, [r7, #15]
    RxParams.IsMcpsIndication = 1;
 800d13a:	4b2d      	ldr	r3, [pc, #180]	; (800d1f0 <McpsIndication+0xc4>)
 800d13c:	2201      	movs	r2, #1
 800d13e:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	785a      	ldrb	r2, [r3, #1]
 800d144:	4b2a      	ldr	r3, [pc, #168]	; (800d1f0 <McpsIndication+0xc4>)
 800d146:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800d148:	4b29      	ldr	r3, [pc, #164]	; (800d1f0 <McpsIndication+0xc4>)
 800d14a:	785b      	ldrb	r3, [r3, #1]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d14b      	bne.n	800d1e8 <McpsIndication+0xbc>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	791b      	ldrb	r3, [r3, #4]
 800d154:	b25a      	sxtb	r2, r3
 800d156:	4b26      	ldr	r3, [pc, #152]	; (800d1f0 <McpsIndication+0xc4>)
 800d158:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d160:	b25a      	sxtb	r2, r3
 800d162:	4b23      	ldr	r3, [pc, #140]	; (800d1f0 <McpsIndication+0xc4>)
 800d164:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800d166:	683b      	ldr	r3, [r7, #0]
 800d168:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800d16c:	4b20      	ldr	r3, [pc, #128]	; (800d1f0 <McpsIndication+0xc4>)
 800d16e:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	78da      	ldrb	r2, [r3, #3]
 800d174:	4b1e      	ldr	r3, [pc, #120]	; (800d1f0 <McpsIndication+0xc4>)
 800d176:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	691b      	ldr	r3, [r3, #16]
 800d17c:	4a1c      	ldr	r2, [pc, #112]	; (800d1f0 <McpsIndication+0xc4>)
 800d17e:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	78db      	ldrb	r3, [r3, #3]
 800d184:	743b      	strb	r3, [r7, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	7b1b      	ldrb	r3, [r3, #12]
 800d18a:	747b      	strb	r3, [r7, #17]
    appData.Buffer = mcpsIndication->Buffer;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	689b      	ldr	r3, [r3, #8]
 800d190:	617b      	str	r3, [r7, #20]

    if( LmHandlerCallbacks->OnRxData != NULL )
 800d192:	4b18      	ldr	r3, [pc, #96]	; (800d1f4 <McpsIndication+0xc8>)
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d007      	beq.n	800d1ac <McpsIndication+0x80>
    {
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800d19c:	4b15      	ldr	r3, [pc, #84]	; (800d1f4 <McpsIndication+0xc8>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1a2:	f107 0210 	add.w	r2, r7, #16
 800d1a6:	4912      	ldr	r1, [pc, #72]	; (800d1f0 <McpsIndication+0xc4>)
 800d1a8:	4610      	mov	r0, r2
 800d1aa:	4798      	blx	r3
    }

    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 800d1ac:	4b11      	ldr	r3, [pc, #68]	; (800d1f4 <McpsIndication+0xc8>)
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d007      	beq.n	800d1c6 <McpsIndication+0x9a>
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	7e1b      	ldrb	r3, [r3, #24]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d003      	beq.n	800d1c6 <McpsIndication+0x9a>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800d1be:	4b0d      	ldr	r3, [pc, #52]	; (800d1f4 <McpsIndication+0xc8>)
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1c4:	4798      	blx	r3
    }
    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800d1c6:	6879      	ldr	r1, [r7, #4]
 800d1c8:	2001      	movs	r0, #1
 800d1ca:	f000 f98f 	bl	800d4ec <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800d1ce:	f107 030f 	add.w	r3, r7, #15
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f7ff ff10 	bl	800cff8 <LmHandlerGetCurrentClass>
            .Port = 0
        };
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( mcpsIndication->IsUplinkTxPending != 0 )
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	795b      	ldrb	r3, [r3, #5]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d004      	beq.n	800d1ea <McpsIndication+0xbe>
    {
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */
        IsUplinkTxPending = true;
 800d1e0:	4b05      	ldr	r3, [pc, #20]	; (800d1f8 <McpsIndication+0xcc>)
 800d1e2:	2201      	movs	r2, #1
 800d1e4:	701a      	strb	r2, [r3, #0]
 800d1e6:	e000      	b.n	800d1ea <McpsIndication+0xbe>
        return;
 800d1e8:	bf00      	nop
    }
#endif /* LORAMAC_VERSION */
}
 800d1ea:	3718      	adds	r7, #24
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bd80      	pop	{r7, pc}
 800d1f0:	200000bc 	.word	0x200000bc
 800d1f4:	200005c0 	.word	0x200005c0
 800d1f8:	200005f0 	.word	0x200005f0

0800d1fc <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b08c      	sub	sp, #48	; 0x30
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800d204:	4b49      	ldr	r3, [pc, #292]	; (800d32c <MlmeConfirm+0x130>)
 800d206:	2200      	movs	r2, #0
 800d208:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	785a      	ldrb	r2, [r3, #1]
 800d20e:	4b47      	ldr	r3, [pc, #284]	; (800d32c <MlmeConfirm+0x130>)
 800d210:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 800d212:	4b47      	ldr	r3, [pc, #284]	; (800d330 <MlmeConfirm+0x134>)
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d004      	beq.n	800d226 <MlmeConfirm+0x2a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800d21c:	4b44      	ldr	r3, [pc, #272]	; (800d330 <MlmeConfirm+0x134>)
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d222:	4842      	ldr	r0, [pc, #264]	; (800d32c <MlmeConfirm+0x130>)
 800d224:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800d226:	6879      	ldr	r1, [r7, #4]
 800d228:	2002      	movs	r0, #2
 800d22a:	f000 f95f 	bl	800d4ec <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	781b      	ldrb	r3, [r3, #0]
 800d232:	3b01      	subs	r3, #1
 800d234:	2b0b      	cmp	r3, #11
 800d236:	d872      	bhi.n	800d31e <MlmeConfirm+0x122>
 800d238:	a201      	add	r2, pc, #4	; (adr r2, 800d240 <MlmeConfirm+0x44>)
 800d23a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d23e:	bf00      	nop
 800d240:	0800d271 	.word	0x0800d271
 800d244:	0800d31f 	.word	0x0800d31f
 800d248:	0800d31f 	.word	0x0800d31f
 800d24c:	0800d31f 	.word	0x0800d31f
 800d250:	0800d2ed 	.word	0x0800d2ed
 800d254:	0800d31f 	.word	0x0800d31f
 800d258:	0800d31f 	.word	0x0800d31f
 800d25c:	0800d31f 	.word	0x0800d31f
 800d260:	0800d31f 	.word	0x0800d31f
 800d264:	0800d31f 	.word	0x0800d31f
 800d268:	0800d305 	.word	0x0800d305
 800d26c:	0800d31f 	.word	0x0800d31f
    {
        case MLME_JOIN:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type = MIB_DEV_ADDR;
 800d270:	2306      	movs	r3, #6
 800d272:	723b      	strb	r3, [r7, #8]
                LoRaMacMibGetRequestConfirm( &mibReq );
 800d274:	f107 0308 	add.w	r3, r7, #8
 800d278:	4618      	mov	r0, r3
 800d27a:	f004 fed9 	bl	8012030 <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 800d27e:	4b2d      	ldr	r3, [pc, #180]	; (800d334 <MlmeConfirm+0x138>)
 800d280:	79db      	ldrb	r3, [r3, #7]
 800d282:	68fa      	ldr	r2, [r7, #12]
 800d284:	4611      	mov	r1, r2
 800d286:	4618      	mov	r0, r3
 800d288:	f7ff fa78 	bl	800c77c <SecureElementSetDevAddr>
 800d28c:	4603      	mov	r3, r0
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d102      	bne.n	800d298 <MlmeConfirm+0x9c>
                {
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	4a28      	ldr	r2, [pc, #160]	; (800d338 <MlmeConfirm+0x13c>)
 800d296:	6153      	str	r3, [r2, #20]
                }
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800d298:	4828      	ldr	r0, [pc, #160]	; (800d33c <MlmeConfirm+0x140>)
 800d29a:	f7ff fecd 	bl	800d038 <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 800d29e:	4828      	ldr	r0, [pc, #160]	; (800d340 <MlmeConfirm+0x144>)
 800d2a0:	f000 fa74 	bl	800d78c <LmHandlerGetTxPower>

                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800d2a4:	4b21      	ldr	r3, [pc, #132]	; (800d32c <MlmeConfirm+0x130>)
 800d2a6:	785b      	ldrb	r3, [r3, #1]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d108      	bne.n	800d2be <MlmeConfirm+0xc2>
                {
                    /* Status is OK, node has joined the network */
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800d2ac:	4b21      	ldr	r3, [pc, #132]	; (800d334 <MlmeConfirm+0x138>)
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	719a      	strb	r2, [r3, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800d2b2:	4b24      	ldr	r3, [pc, #144]	; (800d344 <MlmeConfirm+0x148>)
 800d2b4:	785b      	ldrb	r3, [r3, #1]
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	f7ff fe16 	bl	800cee8 <LmHandlerRequestClass>
 800d2bc:	e002      	b.n	800d2c4 <MlmeConfirm+0xc8>
                }
                else
                {
                    /* Join was not successful. Try to join again */
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800d2be:	4b1d      	ldr	r3, [pc, #116]	; (800d334 <MlmeConfirm+0x138>)
 800d2c0:	22ff      	movs	r2, #255	; 0xff
 800d2c2:	719a      	strb	r2, [r3, #6]
                }
                /* Notify upper layer */
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800d2c4:	4b1a      	ldr	r3, [pc, #104]	; (800d330 <MlmeConfirm+0x134>)
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d004      	beq.n	800d2d8 <MlmeConfirm+0xdc>
                {
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800d2ce:	4b18      	ldr	r3, [pc, #96]	; (800d330 <MlmeConfirm+0x134>)
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2d4:	4817      	ldr	r0, [pc, #92]	; (800d334 <MlmeConfirm+0x138>)
 800d2d6:	4798      	blx	r3
                }
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800d2d8:	4b14      	ldr	r3, [pc, #80]	; (800d32c <MlmeConfirm+0x130>)
 800d2da:	785b      	ldrb	r3, [r3, #1]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d120      	bne.n	800d322 <MlmeConfirm+0x126>
                {
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 800d2e0:	4b14      	ldr	r3, [pc, #80]	; (800d334 <MlmeConfirm+0x138>)
 800d2e2:	79db      	ldrb	r3, [r3, #7]
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	f7fe fff1 	bl	800c2cc <SecureElementPrintSessionKeys>
                }
            }
            break;
 800d2ea:	e01a      	b.n	800d322 <MlmeConfirm+0x126>
        case MLME_LINK_CHECK:
            {
                RxParams.LinkCheck = true;
 800d2ec:	4b16      	ldr	r3, [pc, #88]	; (800d348 <MlmeConfirm+0x14c>)
 800d2ee:	2201      	movs	r2, #1
 800d2f0:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	7a1a      	ldrb	r2, [r3, #8]
 800d2f6:	4b14      	ldr	r3, [pc, #80]	; (800d348 <MlmeConfirm+0x14c>)
 800d2f8:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	7a5a      	ldrb	r2, [r3, #9]
 800d2fe:	4b12      	ldr	r3, [pc, #72]	; (800d348 <MlmeConfirm+0x14c>)
 800d300:	74da      	strb	r2, [r3, #19]
            }
            break;
 800d302:	e00f      	b.n	800d324 <MlmeConfirm+0x128>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        case MLME_BEACON_ACQUISITION:
            {
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	785b      	ldrb	r3, [r3, #1]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d105      	bne.n	800d318 <MlmeConfirm+0x11c>
                {
                    /* Beacon has been acquired */
                    /* Request server for ping slot */
                    LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800d30c:	4b0d      	ldr	r3, [pc, #52]	; (800d344 <MlmeConfirm+0x148>)
 800d30e:	7c1b      	ldrb	r3, [r3, #16]
 800d310:	4618      	mov	r0, r3
 800d312:	f7ff fddd 	bl	800ced0 <LmHandlerPingSlotReq>
                    /* Beacon not acquired */
                    /* Request Device Time again. */
                    LmHandlerDeviceTimeReq( );
                }
            }
            break;
 800d316:	e005      	b.n	800d324 <MlmeConfirm+0x128>
                    LmHandlerDeviceTimeReq( );
 800d318:	f7ff fdbe 	bl	800ce98 <LmHandlerDeviceTimeReq>
            break;
 800d31c:	e002      	b.n	800d324 <MlmeConfirm+0x128>
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800d31e:	bf00      	nop
 800d320:	e000      	b.n	800d324 <MlmeConfirm+0x128>
            break;
 800d322:	bf00      	nop
    }
}
 800d324:	bf00      	nop
 800d326:	3730      	adds	r7, #48	; 0x30
 800d328:	46bd      	mov	sp, r7
 800d32a:	bd80      	pop	{r7, pc}
 800d32c:	200000a0 	.word	0x200000a0
 800d330:	200005c0 	.word	0x200005c0
 800d334:	20000094 	.word	0x20000094
 800d338:	2000056c 	.word	0x2000056c
 800d33c:	20000098 	.word	0x20000098
 800d340:	20000099 	.word	0x20000099
 800d344:	200005a8 	.word	0x200005a8
 800d348:	200000bc 	.word	0x200000bc

0800d34c <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b082      	sub	sp, #8
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
 800d354:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800d356:	4b20      	ldr	r3, [pc, #128]	; (800d3d8 <MlmeIndication+0x8c>)
 800d358:	2200      	movs	r2, #0
 800d35a:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	785a      	ldrb	r2, [r3, #1]
 800d360:	4b1d      	ldr	r3, [pc, #116]	; (800d3d8 <MlmeIndication+0x8c>)
 800d362:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	789b      	ldrb	r3, [r3, #2]
 800d368:	b25a      	sxtb	r2, r3
 800d36a:	4b1b      	ldr	r3, [pc, #108]	; (800d3d8 <MlmeIndication+0x8c>)
 800d36c:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800d36e:	683b      	ldr	r3, [r7, #0]
 800d370:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d374:	b25a      	sxtb	r2, r3
 800d376:	4b18      	ldr	r3, [pc, #96]	; (800d3d8 <MlmeIndication+0x8c>)
 800d378:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800d380:	4b15      	ldr	r3, [pc, #84]	; (800d3d8 <MlmeIndication+0x8c>)
 800d382:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	78da      	ldrb	r2, [r3, #3]
 800d388:	4b13      	ldr	r3, [pc, #76]	; (800d3d8 <MlmeIndication+0x8c>)
 800d38a:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	685b      	ldr	r3, [r3, #4]
 800d390:	4a11      	ldr	r2, [pc, #68]	; (800d3d8 <MlmeIndication+0x8c>)
 800d392:	60d3      	str	r3, [r2, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 800d394:	4b11      	ldr	r3, [pc, #68]	; (800d3dc <MlmeIndication+0x90>)
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d00d      	beq.n	800d3ba <MlmeIndication+0x6e>
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	781b      	ldrb	r3, [r3, #0]
 800d3a2:	2b0a      	cmp	r3, #10
 800d3a4:	d009      	beq.n	800d3ba <MlmeIndication+0x6e>
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	781b      	ldrb	r3, [r3, #0]
 800d3aa:	2b0e      	cmp	r3, #14
 800d3ac:	d005      	beq.n	800d3ba <MlmeIndication+0x6e>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800d3ae:	4b0b      	ldr	r3, [pc, #44]	; (800d3dc <MlmeIndication+0x90>)
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3b4:	4908      	ldr	r1, [pc, #32]	; (800d3d8 <MlmeIndication+0x8c>)
 800d3b6:	2000      	movs	r0, #0
 800d3b8:	4798      	blx	r3
    }

    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800d3ba:	6879      	ldr	r1, [r7, #4]
 800d3bc:	2003      	movs	r0, #3
 800d3be:	f000 f895 	bl	800d4ec <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	781b      	ldrb	r3, [r3, #0]
 800d3c6:	2b0a      	cmp	r3, #10
 800d3c8:	d001      	beq.n	800d3ce <MlmeIndication+0x82>
 800d3ca:	2b0e      	cmp	r3, #14
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800d3cc:	e000      	b.n	800d3d0 <MlmeIndication+0x84>
            break;
 800d3ce:	bf00      	nop
    }
}
 800d3d0:	bf00      	nop
 800d3d2:	3708      	adds	r7, #8
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	bd80      	pop	{r7, pc}
 800d3d8:	200000bc 	.word	0x200000bc
 800d3dc:	200005c0 	.word	0x200005c0

0800d3e0 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b084      	sub	sp, #16
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	6039      	str	r1, [r7, #0]
 800d3ea:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	60fb      	str	r3, [r7, #12]
    switch( id )
 800d3f0:	79fb      	ldrb	r3, [r7, #7]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d104      	bne.n	800d400 <LmHandlerPackageRegister+0x20>
    {
        case PACKAGE_ID_COMPLIANCE:
            {
                package = LmhpCompliancePackageFactory( );
 800d3f6:	f000 fa8b 	bl	800d910 <LmhpCompliancePackageFactory>
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	60fb      	str	r3, [r7, #12]
                break;
 800d3fe:	e00d      	b.n	800d41c <LmHandlerPackageRegister+0x3c>
            }
        default:
            {
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 800d400:	f107 020c 	add.w	r2, r7, #12
 800d404:	79fb      	ldrb	r3, [r7, #7]
 800d406:	4611      	mov	r1, r2
 800d408:	4618      	mov	r0, r3
 800d40a:	f000 ff73 	bl	800e2f4 <LmhpPackagesRegister>
 800d40e:	4603      	mov	r3, r0
 800d410:	2b00      	cmp	r3, #0
 800d412:	d002      	beq.n	800d41a <LmHandlerPackageRegister+0x3a>
                {
                    return LORAMAC_HANDLER_ERROR;
 800d414:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d418:	e03b      	b.n	800d492 <LmHandlerPackageRegister+0xb2>
                }
                break;
 800d41a:	bf00      	nop
            }
    }
    if( package != NULL )
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d035      	beq.n	800d48e <LmHandlerPackageRegister+0xae>
    {
        LmHandlerPackages[id] = package;
 800d422:	79fb      	ldrb	r3, [r7, #7]
 800d424:	68fa      	ldr	r2, [r7, #12]
 800d426:	491d      	ldr	r1, [pc, #116]	; (800d49c <LmHandlerPackageRegister+0xbc>)
 800d428:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800d42c:	79fb      	ldrb	r3, [r7, #7]
 800d42e:	4a1b      	ldr	r2, [pc, #108]	; (800d49c <LmHandlerPackageRegister+0xbc>)
 800d430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d434:	4a1a      	ldr	r2, [pc, #104]	; (800d4a0 <LmHandlerPackageRegister+0xc0>)
 800d436:	629a      	str	r2, [r3, #40]	; 0x28
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 800d438:	4b1a      	ldr	r3, [pc, #104]	; (800d4a4 <LmHandlerPackageRegister+0xc4>)
 800d43a:	681a      	ldr	r2, [r3, #0]
 800d43c:	79fb      	ldrb	r3, [r7, #7]
 800d43e:	4917      	ldr	r1, [pc, #92]	; (800d49c <LmHandlerPackageRegister+0xbc>)
 800d440:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d444:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d446:	631a      	str	r2, [r3, #48]	; 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 800d448:	4b16      	ldr	r3, [pc, #88]	; (800d4a4 <LmHandlerPackageRegister+0xc4>)
 800d44a:	681a      	ldr	r2, [r3, #0]
 800d44c:	79fb      	ldrb	r3, [r7, #7]
 800d44e:	4913      	ldr	r1, [pc, #76]	; (800d49c <LmHandlerPackageRegister+0xbc>)
 800d450:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d454:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d456:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800d458:	79fb      	ldrb	r3, [r7, #7]
 800d45a:	4a10      	ldr	r2, [pc, #64]	; (800d49c <LmHandlerPackageRegister+0xbc>)
 800d45c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d460:	4a11      	ldr	r2, [pc, #68]	; (800d4a8 <LmHandlerPackageRegister+0xc8>)
 800d462:	62da      	str	r2, [r3, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800d464:	4b0f      	ldr	r3, [pc, #60]	; (800d4a4 <LmHandlerPackageRegister+0xc4>)
 800d466:	681a      	ldr	r2, [r3, #0]
 800d468:	79fb      	ldrb	r3, [r7, #7]
 800d46a:	490c      	ldr	r1, [pc, #48]	; (800d49c <LmHandlerPackageRegister+0xbc>)
 800d46c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d470:	6992      	ldr	r2, [r2, #24]
 800d472:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800d474:	79fb      	ldrb	r3, [r7, #7]
 800d476:	4a09      	ldr	r2, [pc, #36]	; (800d49c <LmHandlerPackageRegister+0xbc>)
 800d478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d47c:	685b      	ldr	r3, [r3, #4]
 800d47e:	4a0b      	ldr	r2, [pc, #44]	; (800d4ac <LmHandlerPackageRegister+0xcc>)
 800d480:	6851      	ldr	r1, [r2, #4]
 800d482:	4a0a      	ldr	r2, [pc, #40]	; (800d4ac <LmHandlerPackageRegister+0xcc>)
 800d484:	7852      	ldrb	r2, [r2, #1]
 800d486:	6838      	ldr	r0, [r7, #0]
 800d488:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800d48a:	2300      	movs	r3, #0
 800d48c:	e001      	b.n	800d492 <LmHandlerPackageRegister+0xb2>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800d48e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
 800d492:	4618      	mov	r0, r3
 800d494:	3710      	adds	r7, #16
 800d496:	46bd      	mov	sp, r7
 800d498:	bd80      	pop	{r7, pc}
 800d49a:	bf00      	nop
 800d49c:	20000594 	.word	0x20000594
 800d4a0:	0800cb81 	.word	0x0800cb81
 800d4a4:	200005c0 	.word	0x200005c0
 800d4a8:	0800ce99 	.word	0x0800ce99
 800d4ac:	200000d0 	.word	0x200000d0

0800d4b0 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b082      	sub	sp, #8
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	4603      	mov	r3, r0
 800d4b8:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800d4ba:	79fb      	ldrb	r3, [r7, #7]
 800d4bc:	2b04      	cmp	r3, #4
 800d4be:	d80e      	bhi.n	800d4de <LmHandlerPackageIsInitialized+0x2e>
 800d4c0:	79fb      	ldrb	r3, [r7, #7]
 800d4c2:	4a09      	ldr	r2, [pc, #36]	; (800d4e8 <LmHandlerPackageIsInitialized+0x38>)
 800d4c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d4c8:	689b      	ldr	r3, [r3, #8]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d007      	beq.n	800d4de <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800d4ce:	79fb      	ldrb	r3, [r7, #7]
 800d4d0:	4a05      	ldr	r2, [pc, #20]	; (800d4e8 <LmHandlerPackageIsInitialized+0x38>)
 800d4d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d4d6:	689b      	ldr	r3, [r3, #8]
 800d4d8:	4798      	blx	r3
 800d4da:	4603      	mov	r3, r0
 800d4dc:	e000      	b.n	800d4e0 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800d4de:	2300      	movs	r3, #0
    }
}
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	3708      	adds	r7, #8
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	bd80      	pop	{r7, pc}
 800d4e8:	20000594 	.word	0x20000594

0800d4ec <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b084      	sub	sp, #16
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	4603      	mov	r3, r0
 800d4f4:	6039      	str	r1, [r7, #0]
 800d4f6:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	73fb      	strb	r3, [r7, #15]
 800d4fc:	e067      	b.n	800d5ce <LmHandlerPackagesNotify+0xe2>
    {
        if( LmHandlerPackages[i] != NULL )
 800d4fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d502:	4a37      	ldr	r2, [pc, #220]	; (800d5e0 <LmHandlerPackagesNotify+0xf4>)
 800d504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d05a      	beq.n	800d5c2 <LmHandlerPackagesNotify+0xd6>
        {
            switch( notifyType )
 800d50c:	79fb      	ldrb	r3, [r7, #7]
 800d50e:	2b03      	cmp	r3, #3
 800d510:	d84e      	bhi.n	800d5b0 <LmHandlerPackagesNotify+0xc4>
 800d512:	a201      	add	r2, pc, #4	; (adr r2, 800d518 <LmHandlerPackagesNotify+0x2c>)
 800d514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d518:	0800d529 	.word	0x0800d529
 800d51c:	0800d54b 	.word	0x0800d54b
 800d520:	0800d56d 	.word	0x0800d56d
 800d524:	0800d58f 	.word	0x0800d58f
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800d528:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d52c:	4a2c      	ldr	r2, [pc, #176]	; (800d5e0 <LmHandlerPackagesNotify+0xf4>)
 800d52e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d532:	699b      	ldr	r3, [r3, #24]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d03d      	beq.n	800d5b4 <LmHandlerPackagesNotify+0xc8>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 800d538:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d53c:	4a28      	ldr	r2, [pc, #160]	; (800d5e0 <LmHandlerPackagesNotify+0xf4>)
 800d53e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d542:	699b      	ldr	r3, [r3, #24]
 800d544:	6838      	ldr	r0, [r7, #0]
 800d546:	4798      	blx	r3
                        }
                        break;
 800d548:	e034      	b.n	800d5b4 <LmHandlerPackagesNotify+0xc8>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 800d54a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d54e:	4a24      	ldr	r2, [pc, #144]	; (800d5e0 <LmHandlerPackagesNotify+0xf4>)
 800d550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d554:	69db      	ldr	r3, [r3, #28]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d02e      	beq.n	800d5b8 <LmHandlerPackagesNotify+0xcc>
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 800d55a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d55e:	4a20      	ldr	r2, [pc, #128]	; (800d5e0 <LmHandlerPackagesNotify+0xf4>)
 800d560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d564:	69db      	ldr	r3, [r3, #28]
 800d566:	6838      	ldr	r0, [r7, #0]
 800d568:	4798      	blx	r3
                        }
                        break;
 800d56a:	e025      	b.n	800d5b8 <LmHandlerPackagesNotify+0xcc>
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800d56c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d570:	4a1b      	ldr	r2, [pc, #108]	; (800d5e0 <LmHandlerPackagesNotify+0xf4>)
 800d572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d576:	6a1b      	ldr	r3, [r3, #32]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d01f      	beq.n	800d5bc <LmHandlerPackagesNotify+0xd0>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 800d57c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d580:	4a17      	ldr	r2, [pc, #92]	; (800d5e0 <LmHandlerPackagesNotify+0xf4>)
 800d582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d586:	6a1b      	ldr	r3, [r3, #32]
 800d588:	6838      	ldr	r0, [r7, #0]
 800d58a:	4798      	blx	r3
                        }
                        break;
 800d58c:	e016      	b.n	800d5bc <LmHandlerPackagesNotify+0xd0>
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800d58e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d592:	4a13      	ldr	r2, [pc, #76]	; (800d5e0 <LmHandlerPackagesNotify+0xf4>)
 800d594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d010      	beq.n	800d5c0 <LmHandlerPackagesNotify+0xd4>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800d59e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d5a2:	4a0f      	ldr	r2, [pc, #60]	; (800d5e0 <LmHandlerPackagesNotify+0xf4>)
 800d5a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5aa:	6838      	ldr	r0, [r7, #0]
 800d5ac:	4798      	blx	r3
                        }
                        break;
 800d5ae:	e007      	b.n	800d5c0 <LmHandlerPackagesNotify+0xd4>
                    }
                default:
                    {
                        break;
 800d5b0:	bf00      	nop
 800d5b2:	e006      	b.n	800d5c2 <LmHandlerPackagesNotify+0xd6>
                        break;
 800d5b4:	bf00      	nop
 800d5b6:	e004      	b.n	800d5c2 <LmHandlerPackagesNotify+0xd6>
                        break;
 800d5b8:	bf00      	nop
 800d5ba:	e002      	b.n	800d5c2 <LmHandlerPackagesNotify+0xd6>
                        break;
 800d5bc:	bf00      	nop
 800d5be:	e000      	b.n	800d5c2 <LmHandlerPackagesNotify+0xd6>
                        break;
 800d5c0:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d5c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d5c6:	b2db      	uxtb	r3, r3
 800d5c8:	3301      	adds	r3, #1
 800d5ca:	b2db      	uxtb	r3, r3
 800d5cc:	73fb      	strb	r3, [r7, #15]
 800d5ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d5d2:	2b04      	cmp	r3, #4
 800d5d4:	dd93      	ble.n	800d4fe <LmHandlerPackagesNotify+0x12>
                    }
            }
        }
    }
}
 800d5d6:	bf00      	nop
 800d5d8:	bf00      	nop
 800d5da:	3710      	adds	r7, #16
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}
 800d5e0:	20000594 	.word	0x20000594

0800d5e4 <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b082      	sub	sp, #8
 800d5e8:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	71fb      	strb	r3, [r7, #7]
 800d5ee:	e018      	b.n	800d622 <LmHandlerPackageIsTxPending+0x3e>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
#else
        if( LmHandlerPackages[i] != NULL )
 800d5f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d5f4:	4a0f      	ldr	r2, [pc, #60]	; (800d634 <LmHandlerPackageIsTxPending+0x50>)
 800d5f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d00b      	beq.n	800d616 <LmHandlerPackageIsTxPending+0x32>
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800d5fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d602:	4a0c      	ldr	r2, [pc, #48]	; (800d634 <LmHandlerPackageIsTxPending+0x50>)
 800d604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d608:	68db      	ldr	r3, [r3, #12]
 800d60a:	4798      	blx	r3
 800d60c:	4603      	mov	r3, r0
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d001      	beq.n	800d616 <LmHandlerPackageIsTxPending+0x32>
            {
                return true;
 800d612:	2301      	movs	r3, #1
 800d614:	e00a      	b.n	800d62c <LmHandlerPackageIsTxPending+0x48>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d61a:	b2db      	uxtb	r3, r3
 800d61c:	3301      	adds	r3, #1
 800d61e:	b2db      	uxtb	r3, r3
 800d620:	71fb      	strb	r3, [r7, #7]
 800d622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d626:	2b04      	cmp	r3, #4
 800d628:	dde2      	ble.n	800d5f0 <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 800d62a:	2300      	movs	r3, #0
}
 800d62c:	4618      	mov	r0, r3
 800d62e:	3708      	adds	r7, #8
 800d630:	46bd      	mov	sp, r7
 800d632:	bd80      	pop	{r7, pc}
 800d634:	20000594 	.word	0x20000594

0800d638 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b082      	sub	sp, #8
 800d63c:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d63e:	2300      	movs	r3, #0
 800d640:	71fb      	strb	r3, [r7, #7]
 800d642:	e022      	b.n	800d68a <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800d644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d648:	4a14      	ldr	r2, [pc, #80]	; (800d69c <LmHandlerPackagesProcess+0x64>)
 800d64a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d015      	beq.n	800d67e <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800d652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d656:	4a11      	ldr	r2, [pc, #68]	; (800d69c <LmHandlerPackagesProcess+0x64>)
 800d658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d65c:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d00d      	beq.n	800d67e <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800d662:	79fb      	ldrb	r3, [r7, #7]
 800d664:	4618      	mov	r0, r3
 800d666:	f7ff ff23 	bl	800d4b0 <LmHandlerPackageIsInitialized>
 800d66a:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d006      	beq.n	800d67e <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800d670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d674:	4a09      	ldr	r2, [pc, #36]	; (800d69c <LmHandlerPackagesProcess+0x64>)
 800d676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d67a:	691b      	ldr	r3, [r3, #16]
 800d67c:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d67e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d682:	b2db      	uxtb	r3, r3
 800d684:	3301      	adds	r3, #1
 800d686:	b2db      	uxtb	r3, r3
 800d688:	71fb      	strb	r3, [r7, #7]
 800d68a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d68e:	2b04      	cmp	r3, #4
 800d690:	ddd8      	ble.n	800d644 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800d692:	bf00      	nop
 800d694:	bf00      	nop
 800d696:	3708      	adds	r7, #8
 800d698:	46bd      	mov	sp, r7
 800d69a:	bd80      	pop	{r7, pc}
 800d69c:	20000594 	.word	0x20000594

0800d6a0 <LmHandlerOnTxFrameCtrlChanged>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void LmHandlerOnTxFrameCtrlChanged( LmHandlerMsgTypes_t isTxConfirmed )
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b082      	sub	sp, #8
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	71fb      	strb	r3, [r7, #7]
    LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800d6aa:	4a09      	ldr	r2, [pc, #36]	; (800d6d0 <LmHandlerOnTxFrameCtrlChanged+0x30>)
 800d6ac:	79fb      	ldrb	r3, [r7, #7]
 800d6ae:	70d3      	strb	r3, [r2, #3]

    if (LmHandlerCallbacks->OnTxFrameCtrlChanged != NULL)
 800d6b0:	4b08      	ldr	r3, [pc, #32]	; (800d6d4 <LmHandlerOnTxFrameCtrlChanged+0x34>)
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d005      	beq.n	800d6c6 <LmHandlerOnTxFrameCtrlChanged+0x26>
    {
        LmHandlerCallbacks->OnTxFrameCtrlChanged( isTxConfirmed );
 800d6ba:	4b06      	ldr	r3, [pc, #24]	; (800d6d4 <LmHandlerOnTxFrameCtrlChanged+0x34>)
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6c0:	79fa      	ldrb	r2, [r7, #7]
 800d6c2:	4610      	mov	r0, r2
 800d6c4:	4798      	blx	r3
    }
}
 800d6c6:	bf00      	nop
 800d6c8:	3708      	adds	r7, #8
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	bd80      	pop	{r7, pc}
 800d6ce:	bf00      	nop
 800d6d0:	200005a8 	.word	0x200005a8
 800d6d4:	200005c0 	.word	0x200005c0

0800d6d8 <LmHandlerOnPingSlotPeriodicityChanged>:

static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity )
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b082      	sub	sp, #8
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	4603      	mov	r3, r0
 800d6e0:	71fb      	strb	r3, [r7, #7]
    LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800d6e2:	4a09      	ldr	r2, [pc, #36]	; (800d708 <LmHandlerOnPingSlotPeriodicityChanged+0x30>)
 800d6e4:	79fb      	ldrb	r3, [r7, #7]
 800d6e6:	7413      	strb	r3, [r2, #16]

    if (LmHandlerCallbacks->OnPingSlotPeriodicityChanged != NULL)
 800d6e8:	4b08      	ldr	r3, [pc, #32]	; (800d70c <LmHandlerOnPingSlotPeriodicityChanged+0x34>)
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d005      	beq.n	800d6fe <LmHandlerOnPingSlotPeriodicityChanged+0x26>
    {
        LmHandlerCallbacks->OnPingSlotPeriodicityChanged( pingSlotPeriodicity );
 800d6f2:	4b06      	ldr	r3, [pc, #24]	; (800d70c <LmHandlerOnPingSlotPeriodicityChanged+0x34>)
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d6f8:	79fa      	ldrb	r2, [r7, #7]
 800d6fa:	4610      	mov	r0, r2
 800d6fc:	4798      	blx	r3
    }
}
 800d6fe:	bf00      	nop
 800d700:	3708      	adds	r7, #8
 800d702:	46bd      	mov	sp, r7
 800d704:	bd80      	pop	{r7, pc}
 800d706:	bf00      	nop
 800d708:	200005a8 	.word	0x200005a8
 800d70c:	200005c0 	.word	0x200005c0

0800d710 <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion( LmHandlerVersionType_t lmhType, uint32_t *featureVersion )
{
 800d710:	b480      	push	{r7}
 800d712:	b083      	sub	sp, #12
 800d714:	af00      	add	r7, sp, #0
 800d716:	4603      	mov	r3, r0
 800d718:	6039      	str	r1, [r7, #0]
 800d71a:	71fb      	strb	r3, [r7, #7]
    if( featureVersion == NULL )
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d102      	bne.n	800d728 <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 800d722:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d726:	e00e      	b.n	800d746 <LmHandlerGetVersion+0x36>
    }

    switch( lmhType )
 800d728:	79fb      	ldrb	r3, [r7, #7]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d002      	beq.n	800d734 <LmHandlerGetVersion+0x24>
 800d72e:	2b01      	cmp	r3, #1
 800d730:	d004      	beq.n	800d73c <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
            break;
 800d732:	e007      	b.n	800d744 <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 800d734:	683b      	ldr	r3, [r7, #0]
 800d736:	4a06      	ldr	r2, [pc, #24]	; (800d750 <LmHandlerGetVersion+0x40>)
 800d738:	601a      	str	r2, [r3, #0]
            break;
 800d73a:	e003      	b.n	800d744 <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 800d73c:	683b      	ldr	r3, [r7, #0]
 800d73e:	4a05      	ldr	r2, [pc, #20]	; (800d754 <LmHandlerGetVersion+0x44>)
 800d740:	601a      	str	r2, [r3, #0]
            break;
 800d742:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 800d744:	2300      	movs	r3, #0
}
 800d746:	4618      	mov	r0, r3
 800d748:	370c      	adds	r7, #12
 800d74a:	46bd      	mov	sp, r7
 800d74c:	bc80      	pop	{r7}
 800d74e:	4770      	bx	lr
 800d750:	01000400 	.word	0x01000400
 800d754:	02010001 	.word	0x02010001

0800d758 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	af00      	add	r7, sp, #0
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 800d75c:	f005 fce0 	bl	8013120 <LoRaMacDeInitialization>
 800d760:	4603      	mov	r3, r0
 800d762:	2b00      	cmp	r3, #0
 800d764:	d101      	bne.n	800d76a <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800d766:	2300      	movs	r3, #0
 800d768:	e001      	b.n	800d76e <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800d76a:	f06f 0301 	mvn.w	r3, #1
    }
}
 800d76e:	4618      	mov	r0, r3
 800d770:	bd80      	pop	{r7, pc}

0800d772 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 800d772:	b580      	push	{r7, lr}
 800d774:	af00      	add	r7, sp, #0
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 800d776:	f004 fb93 	bl	8011ea0 <LoRaMacHalt>
 800d77a:	4603      	mov	r3, r0
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d101      	bne.n	800d784 <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800d780:	2300      	movs	r3, #0
 800d782:	e001      	b.n	800d788 <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800d784:	f06f 0301 	mvn.w	r3, #1
    }
}
 800d788:	4618      	mov	r0, r3
 800d78a:	bd80      	pop	{r7, pc}

0800d78c <LmHandlerGetTxPower>:
    rxParams->Datarate = mibReq.Param.Rx2Channel.Datarate;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b08c      	sub	sp, #48	; 0x30
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d102      	bne.n	800d7a0 <LmHandlerGetTxPower+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800d79a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d79e:	e016      	b.n	800d7ce <LmHandlerGetTxPower+0x42>
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 800d7a0:	2321      	movs	r3, #33	; 0x21
 800d7a2:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800d7a4:	f107 0308 	add.w	r3, r7, #8
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	f004 fc41 	bl	8012030 <LoRaMacMibGetRequestConfirm>
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d002      	beq.n	800d7ba <LmHandlerGetTxPower+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800d7b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d7b8:	e009      	b.n	800d7ce <LmHandlerGetTxPower+0x42>
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 800d7ba:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxPower = *txPower;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	f993 2000 	ldrsb.w	r2, [r3]
 800d7c8:	4b03      	ldr	r3, [pc, #12]	; (800d7d8 <LmHandlerGetTxPower+0x4c>)
 800d7ca:	715a      	strb	r2, [r3, #5]
    return LORAMAC_HANDLER_SUCCESS;
 800d7cc:	2300      	movs	r3, #0
}
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	3730      	adds	r7, #48	; 0x30
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	bd80      	pop	{r7, pc}
 800d7d6:	bf00      	nop
 800d7d8:	200005a8 	.word	0x200005a8

0800d7dc <LmHandlerNvmDataStore>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b08e      	sub	sp, #56	; 0x38
 800d7e0:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    int32_t status = NVM_DATA_OK;
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	633b      	str	r3, [r7, #48]	; 0x30

    lmhStatus = LmHandlerHalt();
 800d7ec:	f7ff ffc1 	bl	800d772 <LmHandlerHalt>
 800d7f0:	4603      	mov	r3, r0
 800d7f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( lmhStatus == LORAMAC_HANDLER_SUCCESS )
 800d7f6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d12f      	bne.n	800d85e <LmHandlerNvmDataStore+0x82>
    {
        status = NvmDataMgmtStoreBegin();
 800d7fe:	f000 f859 	bl	800d8b4 <NvmDataMgmtStoreBegin>
 800d802:	6338      	str	r0, [r7, #48]	; 0x30

        if( status == NVM_DATA_NO_UPDATED_DATA )
 800d804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d806:	f113 0f02 	cmn.w	r3, #2
 800d80a:	d103      	bne.n	800d814 <LmHandlerNvmDataStore+0x38>
        {
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800d80c:	23f8      	movs	r3, #248	; 0xf8
 800d80e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d812:	e01c      	b.n	800d84e <LmHandlerNvmDataStore+0x72>
        }
        else if( ( status != NVM_DATA_OK ) || ( LmHandlerCallbacks->OnStoreContextRequest == NULL ) )
 800d814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d816:	2b00      	cmp	r3, #0
 800d818:	d104      	bne.n	800d824 <LmHandlerNvmDataStore+0x48>
 800d81a:	4b1b      	ldr	r3, [pc, #108]	; (800d888 <LmHandlerNvmDataStore+0xac>)
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	695b      	ldr	r3, [r3, #20]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d103      	bne.n	800d82c <LmHandlerNvmDataStore+0x50>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800d824:	23ff      	movs	r3, #255	; 0xff
 800d826:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d82a:	e010      	b.n	800d84e <LmHandlerNvmDataStore+0x72>
        }
        else
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_NVM_CTXS;
 800d82c:	2327      	movs	r3, #39	; 0x27
 800d82e:	703b      	strb	r3, [r7, #0]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800d830:	463b      	mov	r3, r7
 800d832:	4618      	mov	r0, r3
 800d834:	f004 fbfc 	bl	8012030 <LoRaMacMibGetRequestConfirm>
            nvm = ( LoRaMacNvmData_t * )mibReq.Param.Contexts;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	62fb      	str	r3, [r7, #44]	; 0x2c
            nvm_size = ( ( sizeof( LoRaMacNvmData_t ) + 7 ) & ~0x07 );
 800d83c:	f44f 63ba 	mov.w	r3, #1488	; 0x5d0
 800d840:	62bb      	str	r3, [r7, #40]	; 0x28
            LmHandlerCallbacks->OnStoreContextRequest( nvm, nvm_size );
 800d842:	4b11      	ldr	r3, [pc, #68]	; (800d888 <LmHandlerNvmDataStore+0xac>)
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	695b      	ldr	r3, [r3, #20]
 800d848:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d84a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d84c:	4798      	blx	r3
        }

        if( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 800d84e:	f000 f847 	bl	800d8e0 <NvmDataMgmtStoreEnd>
 800d852:	4603      	mov	r3, r0
 800d854:	2b00      	cmp	r3, #0
 800d856:	d002      	beq.n	800d85e <LmHandlerNvmDataStore+0x82>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800d858:	23ff      	movs	r3, #255	; 0xff
 800d85a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }

    if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) && ( LmHandlerCallbacks->OnNvmDataChange != NULL ) )
 800d85e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800d862:	2b00      	cmp	r3, #0
 800d864:	d109      	bne.n	800d87a <LmHandlerNvmDataStore+0x9e>
 800d866:	4b08      	ldr	r3, [pc, #32]	; (800d888 <LmHandlerNvmDataStore+0xac>)
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	69db      	ldr	r3, [r3, #28]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d004      	beq.n	800d87a <LmHandlerNvmDataStore+0x9e>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800d870:	4b05      	ldr	r3, [pc, #20]	; (800d888 <LmHandlerNvmDataStore+0xac>)
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	69db      	ldr	r3, [r3, #28]
 800d876:	2001      	movs	r0, #1
 800d878:	4798      	blx	r3
    }

    return lmhStatus;
 800d87a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800d87e:	4618      	mov	r0, r3
 800d880:	3738      	adds	r7, #56	; 0x38
 800d882:	46bd      	mov	sp, r7
 800d884:	bd80      	pop	{r7, pc}
 800d886:	bf00      	nop
 800d888:	200005c0 	.word	0x200005c0

0800d88c <NvmDataMgmtEvent>:
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800d88c:	b480      	push	{r7}
 800d88e:	b083      	sub	sp, #12
 800d890:	af00      	add	r7, sp, #0
 800d892:	4603      	mov	r3, r0
 800d894:	80fb      	strh	r3, [r7, #6]
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800d896:	4b06      	ldr	r3, [pc, #24]	; (800d8b0 <NvmDataMgmtEvent+0x24>)
 800d898:	881a      	ldrh	r2, [r3, #0]
 800d89a:	88fb      	ldrh	r3, [r7, #6]
 800d89c:	4313      	orrs	r3, r2
 800d89e:	b29a      	uxth	r2, r3
 800d8a0:	4b03      	ldr	r3, [pc, #12]	; (800d8b0 <NvmDataMgmtEvent+0x24>)
 800d8a2:	801a      	strh	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800d8a4:	bf00      	nop
 800d8a6:	370c      	adds	r7, #12
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	bc80      	pop	{r7}
 800d8ac:	4770      	bx	lr
 800d8ae:	bf00      	nop
 800d8b0:	200006e8 	.word	0x200006e8

0800d8b4 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	af00      	add	r7, sp, #0
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Input checks */
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800d8b8:	4b08      	ldr	r3, [pc, #32]	; (800d8dc <NvmDataMgmtStoreBegin+0x28>)
 800d8ba:	881b      	ldrh	r3, [r3, #0]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d102      	bne.n	800d8c6 <NvmDataMgmtStoreBegin+0x12>
    {
        /* There was no update. */
        return NVM_DATA_NO_UPDATED_DATA;
 800d8c0:	f06f 0301 	mvn.w	r3, #1
 800d8c4:	e008      	b.n	800d8d8 <NvmDataMgmtStoreBegin+0x24>
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800d8c6:	f004 fac3 	bl	8011e50 <LoRaMacStop>
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d002      	beq.n	800d8d6 <NvmDataMgmtStoreBegin+0x22>
    {
        return NVM_DATA_NOT_AVAILABLE;
 800d8d0:	f06f 0302 	mvn.w	r3, #2
 800d8d4:	e000      	b.n	800d8d8 <NvmDataMgmtStoreBegin+0x24>
    }
    return NVM_DATA_OK;
 800d8d6:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800d8d8:	4618      	mov	r0, r3
 800d8da:	bd80      	pop	{r7, pc}
 800d8dc:	200006e8 	.word	0x200006e8

0800d8e0 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	af00      	add	r7, sp, #0
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Reset notification flags */
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800d8e4:	4b03      	ldr	r3, [pc, #12]	; (800d8f4 <NvmDataMgmtStoreEnd+0x14>)
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	801a      	strh	r2, [r3, #0]

    /* Resume LoRaMac */
    LoRaMacStart( );
 800d8ea:	f004 faa3 	bl	8011e34 <LoRaMacStart>
    return NVM_DATA_OK;
 800d8ee:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	bd80      	pop	{r7, pc}
 800d8f4:	200006e8 	.word	0x200006e8

0800d8f8 <ClassBStatusReset>:

/*!
 * Reset Beacon status structure
 */
static inline void ClassBStatusReset( void )
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	af00      	add	r7, sp, #0
    memset1( ( uint8_t * ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 800d8fc:	2220      	movs	r2, #32
 800d8fe:	2100      	movs	r1, #0
 800d900:	4802      	ldr	r0, [pc, #8]	; (800d90c <ClassBStatusReset+0x14>)
 800d902:	f00b fb03 	bl	8018f0c <memset1>
}
 800d906:	bf00      	nop
 800d908:	bd80      	pop	{r7, pc}
 800d90a:	bf00      	nop
 800d90c:	20000700 	.word	0x20000700

0800d910 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate         = NULL,  /* To be initialized by LmHandler */
    .OnSystemReset           = NULL,  /* To be initialized by LmHandler */
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800d910:	b480      	push	{r7}
 800d912:	af00      	add	r7, sp, #0
    return &CompliancePackage;
 800d914:	4b02      	ldr	r3, [pc, #8]	; (800d920 <LmhpCompliancePackageFactory+0x10>)
}
 800d916:	4618      	mov	r0, r3
 800d918:	46bd      	mov	sp, r7
 800d91a:	bc80      	pop	{r7}
 800d91c:	4770      	bx	lr
 800d91e:	bf00      	nop
 800d920:	200000d8 	.word	0x200000d8

0800d924 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800d924:	b580      	push	{r7, lr}
 800d926:	b086      	sub	sp, #24
 800d928:	af02      	add	r7, sp, #8
 800d92a:	60f8      	str	r0, [r7, #12]
 800d92c:	60b9      	str	r1, [r7, #8]
 800d92e:	4613      	mov	r3, r2
 800d930:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d018      	beq.n	800d96a <LmhpComplianceInit+0x46>
 800d938:	68bb      	ldr	r3, [r7, #8]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d015      	beq.n	800d96a <LmhpComplianceInit+0x46>
    {
        ComplianceParams                      = ( LmhpComplianceParams_t * ) params;
 800d93e:	4a19      	ldr	r2, [pc, #100]	; (800d9a4 <LmhpComplianceInit+0x80>)
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 800d944:	4a18      	ldr	r2, [pc, #96]	; (800d9a8 <LmhpComplianceInit+0x84>)
 800d946:	68bb      	ldr	r3, [r7, #8]
 800d948:	60d3      	str	r3, [r2, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800d94a:	4a17      	ldr	r2, [pc, #92]	; (800d9a8 <LmhpComplianceInit+0x84>)
 800d94c:	79fb      	ldrb	r3, [r7, #7]
 800d94e:	7253      	strb	r3, [r2, #9]
        ComplianceTestState.Initialized       = true;
 800d950:	4b15      	ldr	r3, [pc, #84]	; (800d9a8 <LmhpComplianceInit+0x84>)
 800d952:	2201      	movs	r2, #1
 800d954:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 800d956:	2300      	movs	r3, #0
 800d958:	9300      	str	r3, [sp, #0]
 800d95a:	4b14      	ldr	r3, [pc, #80]	; (800d9ac <LmhpComplianceInit+0x88>)
 800d95c:	2200      	movs	r2, #0
 800d95e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800d962:	4813      	ldr	r0, [pc, #76]	; (800d9b0 <LmhpComplianceInit+0x8c>)
 800d964:	f00f fb8e 	bl	801d084 <UTIL_TIMER_Create>
 800d968:	e005      	b.n	800d976 <LmhpComplianceInit+0x52>
    }
    else
    {
        ComplianceParams                = NULL;
 800d96a:	4b0e      	ldr	r3, [pc, #56]	; (800d9a4 <LmhpComplianceInit+0x80>)
 800d96c:	2200      	movs	r2, #0
 800d96e:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800d970:	4b0d      	ldr	r3, [pc, #52]	; (800d9a8 <LmhpComplianceInit+0x84>)
 800d972:	2200      	movs	r2, #0
 800d974:	701a      	strb	r2, [r3, #0]
    }
    ComplianceTestState.RxAppCnt = 0;
 800d976:	4b0c      	ldr	r3, [pc, #48]	; (800d9a8 <LmhpComplianceInit+0x84>)
 800d978:	2200      	movs	r2, #0
 800d97a:	821a      	strh	r2, [r3, #16]
    ClassBStatusReset( );
 800d97c:	f7ff ffbc 	bl	800d8f8 <ClassBStatusReset>
    ComplianceTestState.IsTxPending = false;
 800d980:	4b09      	ldr	r3, [pc, #36]	; (800d9a8 <LmhpComplianceInit+0x84>)
 800d982:	2200      	movs	r2, #0
 800d984:	705a      	strb	r2, [r3, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 800d986:	4b08      	ldr	r3, [pc, #32]	; (800d9a8 <LmhpComplianceInit+0x84>)
 800d988:	2200      	movs	r2, #0
 800d98a:	749a      	strb	r2, [r3, #18]
    ComplianceTestState.IsResetCmdPending = false;
 800d98c:	4b06      	ldr	r3, [pc, #24]	; (800d9a8 <LmhpComplianceInit+0x84>)
 800d98e:	2200      	movs	r2, #0
 800d990:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 800d994:	4b04      	ldr	r3, [pc, #16]	; (800d9a8 <LmhpComplianceInit+0x84>)
 800d996:	2200      	movs	r2, #0
 800d998:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 800d99c:	bf00      	nop
 800d99e:	3710      	adds	r7, #16
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	bd80      	pop	{r7, pc}
 800d9a4:	20000724 	.word	0x20000724
 800d9a8:	200006ec 	.word	0x200006ec
 800d9ac:	0800e2ad 	.word	0x0800e2ad
 800d9b0:	20000728 	.word	0x20000728

0800d9b4 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800d9b4:	b480      	push	{r7}
 800d9b6:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800d9b8:	4b02      	ldr	r3, [pc, #8]	; (800d9c4 <LmhpComplianceIsInitialized+0x10>)
 800d9ba:	781b      	ldrb	r3, [r3, #0]
}
 800d9bc:	4618      	mov	r0, r3
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	bc80      	pop	{r7}
 800d9c2:	4770      	bx	lr
 800d9c4:	200006ec 	.word	0x200006ec

0800d9c8 <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
 800d9c8:	b480      	push	{r7}
 800d9ca:	af00      	add	r7, sp, #0
    return ComplianceTestState.IsTxPending;
 800d9cc:	4b02      	ldr	r3, [pc, #8]	; (800d9d8 <LmhpComplianceIsTxPending+0x10>)
 800d9ce:	785b      	ldrb	r3, [r3, #1]
}
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	bc80      	pop	{r7}
 800d9d6:	4770      	bx	lr
 800d9d8:	200006ec 	.word	0x200006ec

0800d9dc <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800d9dc:	b590      	push	{r4, r7, lr}
 800d9de:	b085      	sub	sp, #20
 800d9e0:	af00      	add	r7, sp, #0
    if( ComplianceTestState.IsTxPending == true )
 800d9e2:	4b33      	ldr	r3, [pc, #204]	; (800dab0 <LmhpComplianceProcess+0xd4>)
 800d9e4:	785b      	ldrb	r3, [r3, #1]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d03e      	beq.n	800da68 <LmhpComplianceProcess+0x8c>
    {
        TimerTime_t now = TimerGetCurrentTime( );
 800d9ea:	f00f fd09 	bl	801d400 <UTIL_TIMER_GetCurrentTime>
 800d9ee:	60f8      	str	r0, [r7, #12]
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 800d9f0:	4b2f      	ldr	r3, [pc, #188]	; (800dab0 <LmhpComplianceProcess+0xd4>)
 800d9f2:	685c      	ldr	r4, [r3, #4]
 800d9f4:	f7ff f8ba 	bl	800cb6c <LmHandlerGetDutyCycleWaitTime>
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	4423      	add	r3, r4
 800d9fc:	68fa      	ldr	r2, [r7, #12]
 800d9fe:	429a      	cmp	r2, r3
 800da00:	d941      	bls.n	800da86 <LmhpComplianceProcess+0xaa>
        {
            if( ComplianceTestState.DataBufferSize != 0 )
 800da02:	4b2b      	ldr	r3, [pc, #172]	; (800dab0 <LmhpComplianceProcess+0xd4>)
 800da04:	7a9b      	ldrb	r3, [r3, #10]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d03d      	beq.n	800da86 <LmhpComplianceProcess+0xaa>
            {
                /* Answer commands */
                LmHandlerAppData_t appData =
 800da0a:	23e0      	movs	r3, #224	; 0xe0
 800da0c:	703b      	strb	r3, [r7, #0]
                {
                    .Buffer     = ComplianceTestState.DataBuffer,
                    .BufferSize = ComplianceTestState.DataBufferSize,
 800da0e:	4b28      	ldr	r3, [pc, #160]	; (800dab0 <LmhpComplianceProcess+0xd4>)
 800da10:	7a9b      	ldrb	r3, [r3, #10]
                LmHandlerAppData_t appData =
 800da12:	707b      	strb	r3, [r7, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 800da14:	4b26      	ldr	r3, [pc, #152]	; (800dab0 <LmhpComplianceProcess+0xd4>)
 800da16:	68db      	ldr	r3, [r3, #12]
                LmHandlerAppData_t appData =
 800da18:	607b      	str	r3, [r7, #4]
                    .Port       = COMPLIANCE_PORT,
                };

                LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800da1a:	23ff      	movs	r3, #255	; 0xff
 800da1c:	72fb      	strb	r3, [r7, #11]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 800da1e:	4b24      	ldr	r3, [pc, #144]	; (800dab0 <LmhpComplianceProcess+0xd4>)
 800da20:	7a19      	ldrb	r1, [r3, #8]
 800da22:	463b      	mov	r3, r7
 800da24:	2201      	movs	r2, #1
 800da26:	4618      	mov	r0, r3
 800da28:	f7ff f968 	bl	800ccfc <LmHandlerSend>
 800da2c:	4603      	mov	r3, r0
 800da2e:	72fb      	strb	r3, [r7, #11]
                if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) || ( lmhStatus == LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED ) )
 800da30:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d004      	beq.n	800da42 <LmhpComplianceProcess+0x66>
 800da38:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800da3c:	f113 0f07 	cmn.w	r3, #7
 800da40:	d106      	bne.n	800da50 <LmhpComplianceProcess+0x74>
                {
                    ComplianceTestState.IsTxPending = false;
 800da42:	4b1b      	ldr	r3, [pc, #108]	; (800dab0 <LmhpComplianceProcess+0xd4>)
 800da44:	2200      	movs	r2, #0
 800da46:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 800da48:	4b19      	ldr	r3, [pc, #100]	; (800dab0 <LmhpComplianceProcess+0xd4>)
 800da4a:	2200      	movs	r2, #0
 800da4c:	729a      	strb	r2, [r3, #10]
 800da4e:	e007      	b.n	800da60 <LmhpComplianceProcess+0x84>
                }
                else
                {
                    /* try to send the message again */
                    TimerSetValue( &ProcessTimer, 1500 );
 800da50:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800da54:	4817      	ldr	r0, [pc, #92]	; (800dab4 <LmhpComplianceProcess+0xd8>)
 800da56:	f00f fc29 	bl	801d2ac <UTIL_TIMER_SetPeriod>
                    TimerStart( &ProcessTimer );
 800da5a:	4816      	ldr	r0, [pc, #88]	; (800dab4 <LmhpComplianceProcess+0xd8>)
 800da5c:	f00f fb48 	bl	801d0f0 <UTIL_TIMER_Start>
                }

                ComplianceTestState.TxPendingTimestamp = now;
 800da60:	4a13      	ldr	r2, [pc, #76]	; (800dab0 <LmhpComplianceProcess+0xd4>)
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	6053      	str	r3, [r2, #4]
 800da66:	e00e      	b.n	800da86 <LmhpComplianceProcess+0xaa>
        }
    }
    else
    {
        /* If no Tx is pending process other commands */
        if( ComplianceTestState.IsClassReqCmdPending == true )
 800da68:	4b11      	ldr	r3, [pc, #68]	; (800dab0 <LmhpComplianceProcess+0xd4>)
 800da6a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d009      	beq.n	800da86 <LmhpComplianceProcess+0xaa>
        {
            ComplianceTestState.IsClassReqCmdPending = false;
 800da72:	4b0f      	ldr	r3, [pc, #60]	; (800dab0 <LmhpComplianceProcess+0xd4>)
 800da74:	2200      	movs	r2, #0
 800da76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 800da7a:	4b0d      	ldr	r3, [pc, #52]	; (800dab0 <LmhpComplianceProcess+0xd4>)
 800da7c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800da80:	4618      	mov	r0, r3
 800da82:	f7ff fa31 	bl	800cee8 <LmHandlerRequestClass>
        }
    }

    if( ComplianceTestState.IsResetCmdPending == true )
 800da86:	4b0a      	ldr	r3, [pc, #40]	; (800dab0 <LmhpComplianceProcess+0xd4>)
 800da88:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d00a      	beq.n	800daa6 <LmhpComplianceProcess+0xca>
    {
        ComplianceTestState.IsResetCmdPending = false;
 800da90:	4b07      	ldr	r3, [pc, #28]	; (800dab0 <LmhpComplianceProcess+0xd4>)
 800da92:	2200      	movs	r2, #0
 800da94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Call platform MCU reset API */
        if( CompliancePackage.OnSystemReset != NULL )
 800da98:	4b07      	ldr	r3, [pc, #28]	; (800dab8 <LmhpComplianceProcess+0xdc>)
 800da9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d002      	beq.n	800daa6 <LmhpComplianceProcess+0xca>
        {
            CompliancePackage.OnSystemReset( );
 800daa0:	4b05      	ldr	r3, [pc, #20]	; (800dab8 <LmhpComplianceProcess+0xdc>)
 800daa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800daa4:	4798      	blx	r3
        }
    }
}
 800daa6:	bf00      	nop
 800daa8:	3714      	adds	r7, #20
 800daaa:	46bd      	mov	sp, r7
 800daac:	bd90      	pop	{r4, r7, pc}
 800daae:	bf00      	nop
 800dab0:	200006ec 	.word	0x200006ec
 800dab4:	20000728 	.word	0x20000728
 800dab8:	200000d8 	.word	0x200000d8

0800dabc <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t *mcpsIndication )
{
 800dabc:	b5b0      	push	{r4, r5, r7, lr}
 800dabe:	b0a4      	sub	sp, #144	; 0x90
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
    uint8_t cmdIndex        = 0;
 800dac4:	2300      	movs	r3, #0
 800dac6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    MibRequestConfirm_t mibReq;

    if( ComplianceTestState.Initialized == false )
 800daca:	4bd0      	ldr	r3, [pc, #832]	; (800de0c <LmhpComplianceOnMcpsIndication+0x350>)
 800dacc:	781b      	ldrb	r3, [r3, #0]
 800dace:	f083 0301 	eor.w	r3, r3, #1
 800dad2:	b2db      	uxtb	r3, r3
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	f040 83bf 	bne.w	800e258 <LmhpComplianceOnMcpsIndication+0x79c>
        return;
    }

    /* Increment the compliance certification protocol downlink counter */
    /* Not counting downlinks on FPort 0 */
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	78db      	ldrb	r3, [r3, #3]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d103      	bne.n	800daea <LmhpComplianceOnMcpsIndication+0x2e>
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	7b9b      	ldrb	r3, [r3, #14]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d005      	beq.n	800daf6 <LmhpComplianceOnMcpsIndication+0x3a>
    {
        ComplianceTestState.RxAppCnt++;
 800daea:	4bc8      	ldr	r3, [pc, #800]	; (800de0c <LmhpComplianceOnMcpsIndication+0x350>)
 800daec:	8a1b      	ldrh	r3, [r3, #16]
 800daee:	3301      	adds	r3, #1
 800daf0:	b29a      	uxth	r2, r3
 800daf2:	4bc6      	ldr	r3, [pc, #792]	; (800de0c <LmhpComplianceOnMcpsIndication+0x350>)
 800daf4:	821a      	strh	r2, [r3, #16]
    }

    if( mcpsIndication->RxData == false )
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	7b5b      	ldrb	r3, [r3, #13]
 800dafa:	f083 0301 	eor.w	r3, r3, #1
 800dafe:	b2db      	uxtb	r3, r3
 800db00:	2b00      	cmp	r3, #0
 800db02:	f040 83ab 	bne.w	800e25c <LmhpComplianceOnMcpsIndication+0x7a0>
    {
        return;
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	78db      	ldrb	r3, [r3, #3]
 800db0a:	2be0      	cmp	r3, #224	; 0xe0
 800db0c:	f040 83a8 	bne.w	800e260 <LmhpComplianceOnMcpsIndication+0x7a4>
    {
        return;
    }

    ComplianceTestState.DataBufferSize = 0;
 800db10:	4bbe      	ldr	r3, [pc, #760]	; (800de0c <LmhpComplianceOnMcpsIndication+0x350>)
 800db12:	2200      	movs	r2, #0
 800db14:	729a      	strb	r2, [r3, #10]

    switch( mcpsIndication->Buffer[cmdIndex++] )
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	689a      	ldr	r2, [r3, #8]
 800db1a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800db1e:	1c59      	adds	r1, r3, #1
 800db20:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800db24:	4413      	add	r3, r2
 800db26:	781b      	ldrb	r3, [r3, #0]
 800db28:	2b7f      	cmp	r3, #127	; 0x7f
 800db2a:	f200 8372 	bhi.w	800e212 <LmhpComplianceOnMcpsIndication+0x756>
 800db2e:	a201      	add	r2, pc, #4	; (adr r2, 800db34 <LmhpComplianceOnMcpsIndication+0x78>)
 800db30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db34:	0800dd35 	.word	0x0800dd35
 800db38:	0800dd79 	.word	0x0800dd79
 800db3c:	0800dd83 	.word	0x0800dd83
 800db40:	0800dd99 	.word	0x0800dd99
 800db44:	0800ddbb 	.word	0x0800ddbb
 800db48:	0800dde9 	.word	0x0800dde9
 800db4c:	0800de15 	.word	0x0800de15
 800db50:	0800de73 	.word	0x0800de73
 800db54:	0800decb 	.word	0x0800decb
 800db58:	0800df37 	.word	0x0800df37
 800db5c:	0800df87 	.word	0x0800df87
 800db60:	0800e213 	.word	0x0800e213
 800db64:	0800e213 	.word	0x0800e213
 800db68:	0800e213 	.word	0x0800e213
 800db6c:	0800e213 	.word	0x0800e213
 800db70:	0800e213 	.word	0x0800e213
 800db74:	0800e213 	.word	0x0800e213
 800db78:	0800e213 	.word	0x0800e213
 800db7c:	0800e213 	.word	0x0800e213
 800db80:	0800e213 	.word	0x0800e213
 800db84:	0800e213 	.word	0x0800e213
 800db88:	0800e213 	.word	0x0800e213
 800db8c:	0800e213 	.word	0x0800e213
 800db90:	0800e213 	.word	0x0800e213
 800db94:	0800e213 	.word	0x0800e213
 800db98:	0800e213 	.word	0x0800e213
 800db9c:	0800e213 	.word	0x0800e213
 800dba0:	0800e213 	.word	0x0800e213
 800dba4:	0800e213 	.word	0x0800e213
 800dba8:	0800e213 	.word	0x0800e213
 800dbac:	0800e213 	.word	0x0800e213
 800dbb0:	0800e213 	.word	0x0800e213
 800dbb4:	0800df8f 	.word	0x0800df8f
 800dbb8:	0800dfa1 	.word	0x0800dfa1
 800dbbc:	0800dfa9 	.word	0x0800dfa9
 800dbc0:	0800e213 	.word	0x0800e213
 800dbc4:	0800e213 	.word	0x0800e213
 800dbc8:	0800e213 	.word	0x0800e213
 800dbcc:	0800e213 	.word	0x0800e213
 800dbd0:	0800e213 	.word	0x0800e213
 800dbd4:	0800e213 	.word	0x0800e213
 800dbd8:	0800e213 	.word	0x0800e213
 800dbdc:	0800e213 	.word	0x0800e213
 800dbe0:	0800e213 	.word	0x0800e213
 800dbe4:	0800e213 	.word	0x0800e213
 800dbe8:	0800e213 	.word	0x0800e213
 800dbec:	0800e213 	.word	0x0800e213
 800dbf0:	0800e213 	.word	0x0800e213
 800dbf4:	0800e213 	.word	0x0800e213
 800dbf8:	0800e213 	.word	0x0800e213
 800dbfc:	0800e213 	.word	0x0800e213
 800dc00:	0800e213 	.word	0x0800e213
 800dc04:	0800e213 	.word	0x0800e213
 800dc08:	0800e213 	.word	0x0800e213
 800dc0c:	0800e213 	.word	0x0800e213
 800dc10:	0800e213 	.word	0x0800e213
 800dc14:	0800e213 	.word	0x0800e213
 800dc18:	0800e213 	.word	0x0800e213
 800dc1c:	0800e213 	.word	0x0800e213
 800dc20:	0800e213 	.word	0x0800e213
 800dc24:	0800e213 	.word	0x0800e213
 800dc28:	0800e213 	.word	0x0800e213
 800dc2c:	0800e213 	.word	0x0800e213
 800dc30:	0800e213 	.word	0x0800e213
 800dc34:	0800e213 	.word	0x0800e213
 800dc38:	0800e213 	.word	0x0800e213
 800dc3c:	0800e213 	.word	0x0800e213
 800dc40:	0800e213 	.word	0x0800e213
 800dc44:	0800e213 	.word	0x0800e213
 800dc48:	0800e213 	.word	0x0800e213
 800dc4c:	0800e213 	.word	0x0800e213
 800dc50:	0800e213 	.word	0x0800e213
 800dc54:	0800e213 	.word	0x0800e213
 800dc58:	0800e213 	.word	0x0800e213
 800dc5c:	0800e213 	.word	0x0800e213
 800dc60:	0800e213 	.word	0x0800e213
 800dc64:	0800e213 	.word	0x0800e213
 800dc68:	0800e213 	.word	0x0800e213
 800dc6c:	0800e213 	.word	0x0800e213
 800dc70:	0800e213 	.word	0x0800e213
 800dc74:	0800e213 	.word	0x0800e213
 800dc78:	0800e213 	.word	0x0800e213
 800dc7c:	0800e213 	.word	0x0800e213
 800dc80:	0800e213 	.word	0x0800e213
 800dc84:	0800e213 	.word	0x0800e213
 800dc88:	0800e213 	.word	0x0800e213
 800dc8c:	0800e213 	.word	0x0800e213
 800dc90:	0800e213 	.word	0x0800e213
 800dc94:	0800e213 	.word	0x0800e213
 800dc98:	0800e213 	.word	0x0800e213
 800dc9c:	0800e213 	.word	0x0800e213
 800dca0:	0800e213 	.word	0x0800e213
 800dca4:	0800e213 	.word	0x0800e213
 800dca8:	0800e213 	.word	0x0800e213
 800dcac:	0800e213 	.word	0x0800e213
 800dcb0:	0800e213 	.word	0x0800e213
 800dcb4:	0800e213 	.word	0x0800e213
 800dcb8:	0800e213 	.word	0x0800e213
 800dcbc:	0800e213 	.word	0x0800e213
 800dcc0:	0800e213 	.word	0x0800e213
 800dcc4:	0800e213 	.word	0x0800e213
 800dcc8:	0800e213 	.word	0x0800e213
 800dccc:	0800e213 	.word	0x0800e213
 800dcd0:	0800e213 	.word	0x0800e213
 800dcd4:	0800e213 	.word	0x0800e213
 800dcd8:	0800e213 	.word	0x0800e213
 800dcdc:	0800e213 	.word	0x0800e213
 800dce0:	0800e213 	.word	0x0800e213
 800dce4:	0800e213 	.word	0x0800e213
 800dce8:	0800e213 	.word	0x0800e213
 800dcec:	0800e213 	.word	0x0800e213
 800dcf0:	0800e213 	.word	0x0800e213
 800dcf4:	0800e213 	.word	0x0800e213
 800dcf8:	0800e213 	.word	0x0800e213
 800dcfc:	0800e213 	.word	0x0800e213
 800dd00:	0800e213 	.word	0x0800e213
 800dd04:	0800e213 	.word	0x0800e213
 800dd08:	0800e213 	.word	0x0800e213
 800dd0c:	0800e213 	.word	0x0800e213
 800dd10:	0800e213 	.word	0x0800e213
 800dd14:	0800e213 	.word	0x0800e213
 800dd18:	0800e213 	.word	0x0800e213
 800dd1c:	0800e213 	.word	0x0800e213
 800dd20:	0800e213 	.word	0x0800e213
 800dd24:	0800e213 	.word	0x0800e213
 800dd28:	0800dfdb 	.word	0x0800dfdb
 800dd2c:	0800e08b 	.word	0x0800e08b
 800dd30:	0800e0bd 	.word	0x0800e0bd
    {
        case COMPLIANCE_PKG_VERSION_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 800dd34:	4b35      	ldr	r3, [pc, #212]	; (800de0c <LmhpComplianceOnMcpsIndication+0x350>)
 800dd36:	68da      	ldr	r2, [r3, #12]
 800dd38:	4b34      	ldr	r3, [pc, #208]	; (800de0c <LmhpComplianceOnMcpsIndication+0x350>)
 800dd3a:	7a9b      	ldrb	r3, [r3, #10]
 800dd3c:	1c59      	adds	r1, r3, #1
 800dd3e:	b2c8      	uxtb	r0, r1
 800dd40:	4932      	ldr	r1, [pc, #200]	; (800de0c <LmhpComplianceOnMcpsIndication+0x350>)
 800dd42:	7288      	strb	r0, [r1, #10]
 800dd44:	4413      	add	r3, r2
 800dd46:	2200      	movs	r2, #0
 800dd48:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 800dd4a:	4b30      	ldr	r3, [pc, #192]	; (800de0c <LmhpComplianceOnMcpsIndication+0x350>)
 800dd4c:	68da      	ldr	r2, [r3, #12]
 800dd4e:	4b2f      	ldr	r3, [pc, #188]	; (800de0c <LmhpComplianceOnMcpsIndication+0x350>)
 800dd50:	7a9b      	ldrb	r3, [r3, #10]
 800dd52:	1c59      	adds	r1, r3, #1
 800dd54:	b2c8      	uxtb	r0, r1
 800dd56:	492d      	ldr	r1, [pc, #180]	; (800de0c <LmhpComplianceOnMcpsIndication+0x350>)
 800dd58:	7288      	strb	r0, [r1, #10]
 800dd5a:	4413      	add	r3, r2
 800dd5c:	2206      	movs	r2, #6
 800dd5e:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 800dd60:	4b2a      	ldr	r3, [pc, #168]	; (800de0c <LmhpComplianceOnMcpsIndication+0x350>)
 800dd62:	68da      	ldr	r2, [r3, #12]
 800dd64:	4b29      	ldr	r3, [pc, #164]	; (800de0c <LmhpComplianceOnMcpsIndication+0x350>)
 800dd66:	7a9b      	ldrb	r3, [r3, #10]
 800dd68:	1c59      	adds	r1, r3, #1
 800dd6a:	b2c8      	uxtb	r0, r1
 800dd6c:	4927      	ldr	r1, [pc, #156]	; (800de0c <LmhpComplianceOnMcpsIndication+0x350>)
 800dd6e:	7288      	strb	r0, [r1, #10]
 800dd70:	4413      	add	r3, r2
 800dd72:	2201      	movs	r2, #1
 800dd74:	701a      	strb	r2, [r3, #0]
                break;
 800dd76:	e257      	b.n	800e228 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DUT_RESET_REQ:
            {
                ComplianceTestState.IsResetCmdPending = true;
 800dd78:	4b24      	ldr	r3, [pc, #144]	; (800de0c <LmhpComplianceOnMcpsIndication+0x350>)
 800dd7a:	2201      	movs	r2, #1
 800dd7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                break;
 800dd80:	e252      	b.n	800e228 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DUT_JOIN_REQ:
            {
                if( CompliancePackage.OnJoinRequest != NULL )
 800dd82:	4b23      	ldr	r3, [pc, #140]	; (800de10 <LmhpComplianceOnMcpsIndication+0x354>)
 800dd84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	f000 8245 	beq.w	800e216 <LmhpComplianceOnMcpsIndication+0x75a>
                {
                    CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800dd8c:	4b20      	ldr	r3, [pc, #128]	; (800de10 <LmhpComplianceOnMcpsIndication+0x354>)
 800dd8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd90:	2101      	movs	r1, #1
 800dd92:	2002      	movs	r0, #2
 800dd94:	4798      	blx	r3
                }
                break;
 800dd96:	e23e      	b.n	800e216 <LmhpComplianceOnMcpsIndication+0x75a>
            }
        case COMPLIANCE_SWITCH_CLASS_REQ:
            {
                /* CLASS_A = 0, CLASS_B = 1, CLASS_C = 2 */
                ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	689a      	ldr	r2, [r3, #8]
 800dd9c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800dda0:	1c59      	adds	r1, r3, #1
 800dda2:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800dda6:	4413      	add	r3, r2
 800dda8:	781a      	ldrb	r2, [r3, #0]
 800ddaa:	4b18      	ldr	r3, [pc, #96]	; (800de0c <LmhpComplianceOnMcpsIndication+0x350>)
 800ddac:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                ComplianceTestState.IsClassReqCmdPending = true;
 800ddb0:	4b16      	ldr	r3, [pc, #88]	; (800de0c <LmhpComplianceOnMcpsIndication+0x350>)
 800ddb2:	2201      	movs	r2, #1
 800ddb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                break;
 800ddb8:	e236      	b.n	800e228 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_ADR_BIT_CHANGE_REQ:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type            = MIB_ADR;
 800ddba:	2304      	movs	r3, #4
 800ddbc:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	689a      	ldr	r2, [r3, #8]
 800ddc2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800ddc6:	1c59      	adds	r1, r3, #1
 800ddc8:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800ddcc:	4413      	add	r3, r2
 800ddce:	781b      	ldrb	r3, [r3, #0]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	bf14      	ite	ne
 800ddd4:	2301      	movne	r3, #1
 800ddd6:	2300      	moveq	r3, #0
 800ddd8:	b2db      	uxtb	r3, r3
 800ddda:	733b      	strb	r3, [r7, #12]

                LoRaMacMibSetRequestConfirm( &mibReq );
 800dddc:	f107 0308 	add.w	r3, r7, #8
 800dde0:	4618      	mov	r0, r3
 800dde2:	f004 fafd 	bl	80123e0 <LoRaMacMibSetRequestConfirm>
                break;
 800dde6:	e21f      	b.n	800e228 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_REGIONAL_DUTY_CYCLE_CTRL_REQ:
            {
                LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	689a      	ldr	r2, [r3, #8]
 800ddec:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800ddf0:	1c59      	adds	r1, r3, #1
 800ddf2:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800ddf6:	4413      	add	r3, r2
 800ddf8:	781b      	ldrb	r3, [r3, #0]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	bf14      	ite	ne
 800ddfe:	2301      	movne	r3, #1
 800de00:	2300      	moveq	r3, #0
 800de02:	b2db      	uxtb	r3, r3
 800de04:	4618      	mov	r0, r3
 800de06:	f005 f965 	bl	80130d4 <LoRaMacTestSetDutyCycleOn>
                break;
 800de0a:	e20d      	b.n	800e228 <LmhpComplianceOnMcpsIndication+0x76c>
 800de0c:	200006ec 	.word	0x200006ec
 800de10:	200000d8 	.word	0x200000d8
            }
        case COMPLIANCE_TX_PERIODICITY_CHANGE_REQ:
            {
                /* Periodicity in milli-seconds */
                uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 800de14:	4ba5      	ldr	r3, [pc, #660]	; (800e0ac <LmhpComplianceOnMcpsIndication+0x5f0>)
 800de16:	f107 0408 	add.w	r4, r7, #8
 800de1a:	461d      	mov	r5, r3
 800de1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800de1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800de20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800de22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800de24:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800de28:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	689a      	ldr	r2, [r3, #8]
 800de30:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800de34:	1c59      	adds	r1, r3, #1
 800de36:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800de3a:	4413      	add	r3, r2
 800de3c:	781b      	ldrb	r3, [r3, #0]
 800de3e:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

                if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 800de42:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800de46:	2b0a      	cmp	r3, #10
 800de48:	f200 81e7 	bhi.w	800e21a <LmhpComplianceOnMcpsIndication+0x75e>
                {
                    if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 800de4c:	4b98      	ldr	r3, [pc, #608]	; (800e0b0 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	685b      	ldr	r3, [r3, #4]
 800de52:	2b00      	cmp	r3, #0
 800de54:	f000 81e1 	beq.w	800e21a <LmhpComplianceOnMcpsIndication+0x75e>
                    {
                        ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 800de58:	4b95      	ldr	r3, [pc, #596]	; (800e0b0 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	685a      	ldr	r2, [r3, #4]
 800de5e:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800de62:	009b      	lsls	r3, r3, #2
 800de64:	3390      	adds	r3, #144	; 0x90
 800de66:	443b      	add	r3, r7
 800de68:	f853 3c88 	ldr.w	r3, [r3, #-136]
 800de6c:	4618      	mov	r0, r3
 800de6e:	4790      	blx	r2
                    }
                }
                break;
 800de70:	e1d3      	b.n	800e21a <LmhpComplianceOnMcpsIndication+0x75e>
            }
        case COMPLIANCE_TX_FRAMES_CTRL_REQ:
            {
                uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	689a      	ldr	r2, [r3, #8]
 800de76:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800de7a:	1c59      	adds	r1, r3, #1
 800de7c:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800de80:	4413      	add	r3, r2
 800de82:	781b      	ldrb	r3, [r3, #0]
 800de84:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

                if( ( frameType == 1 ) || ( frameType == 2 ) )
 800de88:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800de8c:	2b01      	cmp	r3, #1
 800de8e:	d004      	beq.n	800de9a <LmhpComplianceOnMcpsIndication+0x3de>
 800de90:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800de94:	2b02      	cmp	r3, #2
 800de96:	f040 81c2 	bne.w	800e21e <LmhpComplianceOnMcpsIndication+0x762>
                {
                    ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800de9a:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800de9e:	2b01      	cmp	r3, #1
 800dea0:	bf14      	ite	ne
 800dea2:	2301      	movne	r3, #1
 800dea4:	2300      	moveq	r3, #0
 800dea6:	b2db      	uxtb	r3, r3
 800dea8:	461a      	mov	r2, r3
 800deaa:	4b82      	ldr	r3, [pc, #520]	; (800e0b4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800deac:	721a      	strb	r2, [r3, #8]

                    if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 800deae:	4b80      	ldr	r3, [pc, #512]	; (800e0b0 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	689b      	ldr	r3, [r3, #8]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	f000 81b2 	beq.w	800e21e <LmhpComplianceOnMcpsIndication+0x762>
                    {
                        ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 800deba:	4b7d      	ldr	r3, [pc, #500]	; (800e0b0 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	689b      	ldr	r3, [r3, #8]
 800dec0:	4a7c      	ldr	r2, [pc, #496]	; (800e0b4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800dec2:	7a12      	ldrb	r2, [r2, #8]
 800dec4:	4610      	mov	r0, r2
 800dec6:	4798      	blx	r3
                    }
                }
                break;
 800dec8:	e1a9      	b.n	800e21e <LmhpComplianceOnMcpsIndication+0x762>
            }
        case COMPLIANCE_ECHO_PAYLOAD_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 800deca:	4b7a      	ldr	r3, [pc, #488]	; (800e0b4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800decc:	68da      	ldr	r2, [r3, #12]
 800dece:	4b79      	ldr	r3, [pc, #484]	; (800e0b4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800ded0:	7a9b      	ldrb	r3, [r3, #10]
 800ded2:	1c59      	adds	r1, r3, #1
 800ded4:	b2c8      	uxtb	r0, r1
 800ded6:	4977      	ldr	r1, [pc, #476]	; (800e0b4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800ded8:	7288      	strb	r0, [r1, #10]
 800deda:	4413      	add	r3, r2
 800dedc:	2208      	movs	r2, #8
 800dede:	701a      	strb	r2, [r3, #0]

                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800dee0:	2301      	movs	r3, #1
 800dee2:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 800dee6:	e019      	b.n	800df1c <LmhpComplianceOnMcpsIndication+0x460>
                     i++ )
                {
                    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	689a      	ldr	r2, [r3, #8]
 800deec:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800def0:	1c59      	adds	r1, r3, #1
 800def2:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800def6:	4413      	add	r3, r2
 800def8:	781a      	ldrb	r2, [r3, #0]
 800defa:	4b6e      	ldr	r3, [pc, #440]	; (800e0b4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800defc:	68d9      	ldr	r1, [r3, #12]
 800defe:	4b6d      	ldr	r3, [pc, #436]	; (800e0b4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800df00:	7a9b      	ldrb	r3, [r3, #10]
 800df02:	1c58      	adds	r0, r3, #1
 800df04:	b2c4      	uxtb	r4, r0
 800df06:	486b      	ldr	r0, [pc, #428]	; (800e0b4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800df08:	7284      	strb	r4, [r0, #10]
 800df0a:	440b      	add	r3, r1
 800df0c:	3201      	adds	r2, #1
 800df0e:	b2d2      	uxtb	r2, r2
 800df10:	701a      	strb	r2, [r3, #0]
                     i++ )
 800df12:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800df16:	3301      	adds	r3, #1
 800df18:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800df1c:	4b65      	ldr	r3, [pc, #404]	; (800e0b4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800df1e:	7a5a      	ldrb	r2, [r3, #9]
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	7b1b      	ldrb	r3, [r3, #12]
 800df24:	4293      	cmp	r3, r2
 800df26:	bf28      	it	cs
 800df28:	4613      	movcs	r3, r2
 800df2a:	b2db      	uxtb	r3, r3
 800df2c:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 800df30:	429a      	cmp	r2, r3
 800df32:	d3d9      	bcc.n	800dee8 <LmhpComplianceOnMcpsIndication+0x42c>
                }
                break;
 800df34:	e178      	b.n	800e228 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_RX_APP_CNT_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 800df36:	4b5f      	ldr	r3, [pc, #380]	; (800e0b4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800df38:	68da      	ldr	r2, [r3, #12]
 800df3a:	4b5e      	ldr	r3, [pc, #376]	; (800e0b4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800df3c:	7a9b      	ldrb	r3, [r3, #10]
 800df3e:	1c59      	adds	r1, r3, #1
 800df40:	b2c8      	uxtb	r0, r1
 800df42:	495c      	ldr	r1, [pc, #368]	; (800e0b4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800df44:	7288      	strb	r0, [r1, #10]
 800df46:	4413      	add	r3, r2
 800df48:	2209      	movs	r2, #9
 800df4a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 800df4c:	4b59      	ldr	r3, [pc, #356]	; (800e0b4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800df4e:	8a18      	ldrh	r0, [r3, #16]
 800df50:	4b58      	ldr	r3, [pc, #352]	; (800e0b4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800df52:	68da      	ldr	r2, [r3, #12]
 800df54:	4b57      	ldr	r3, [pc, #348]	; (800e0b4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800df56:	7a9b      	ldrb	r3, [r3, #10]
 800df58:	1c59      	adds	r1, r3, #1
 800df5a:	b2cc      	uxtb	r4, r1
 800df5c:	4955      	ldr	r1, [pc, #340]	; (800e0b4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800df5e:	728c      	strb	r4, [r1, #10]
 800df60:	4413      	add	r3, r2
 800df62:	b2c2      	uxtb	r2, r0
 800df64:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 800df66:	4b53      	ldr	r3, [pc, #332]	; (800e0b4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800df68:	8a1b      	ldrh	r3, [r3, #16]
 800df6a:	0a1b      	lsrs	r3, r3, #8
 800df6c:	b298      	uxth	r0, r3
 800df6e:	4b51      	ldr	r3, [pc, #324]	; (800e0b4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800df70:	68da      	ldr	r2, [r3, #12]
 800df72:	4b50      	ldr	r3, [pc, #320]	; (800e0b4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800df74:	7a9b      	ldrb	r3, [r3, #10]
 800df76:	1c59      	adds	r1, r3, #1
 800df78:	b2cc      	uxtb	r4, r1
 800df7a:	494e      	ldr	r1, [pc, #312]	; (800e0b4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800df7c:	728c      	strb	r4, [r1, #10]
 800df7e:	4413      	add	r3, r2
 800df80:	b2c2      	uxtb	r2, r0
 800df82:	701a      	strb	r2, [r3, #0]
                break;
 800df84:	e150      	b.n	800e228 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_RX_APP_CNT_RESET_REQ:
            {
                ComplianceTestState.RxAppCnt = 0;
 800df86:	4b4b      	ldr	r3, [pc, #300]	; (800e0b4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800df88:	2200      	movs	r2, #0
 800df8a:	821a      	strh	r2, [r3, #16]
                break;
 800df8c:	e14c      	b.n	800e228 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_LINK_CHECK_REQ:
            {
                MlmeReq_t mlmeReq;
                mlmeReq.Type = MLME_LINK_CHECK;
 800df8e:	2305      	movs	r3, #5
 800df90:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50

                LoRaMacMlmeRequest( &mlmeReq );
 800df94:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800df98:	4618      	mov	r0, r3
 800df9a:	f004 fdcb 	bl	8012b34 <LoRaMacMlmeRequest>
                break;
 800df9e:	e143      	b.n	800e228 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DEVICE_TIME_REQ:
            {
                CompliancePackage.OnDeviceTimeRequest( );
 800dfa0:	4b45      	ldr	r3, [pc, #276]	; (800e0b8 <LmhpComplianceOnMcpsIndication+0x5fc>)
 800dfa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfa4:	4798      	blx	r3
                break;
 800dfa6:	e13f      	b.n	800e228 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_PING_SLOT_INFO_REQ:
            {
                ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	689a      	ldr	r2, [r3, #8]
 800dfac:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800dfb0:	1c59      	adds	r1, r3, #1
 800dfb2:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800dfb6:	4413      	add	r3, r2
 800dfb8:	781a      	ldrb	r2, [r3, #0]
 800dfba:	4b3e      	ldr	r3, [pc, #248]	; (800e0b4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800dfbc:	755a      	strb	r2, [r3, #21]
                if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 800dfbe:	4b3c      	ldr	r3, [pc, #240]	; (800e0b0 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	68db      	ldr	r3, [r3, #12]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	f000 812c 	beq.w	800e222 <LmhpComplianceOnMcpsIndication+0x766>
                {
                    ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 800dfca:	4b39      	ldr	r3, [pc, #228]	; (800e0b0 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	68db      	ldr	r3, [r3, #12]
 800dfd0:	4a38      	ldr	r2, [pc, #224]	; (800e0b4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800dfd2:	7d52      	ldrb	r2, [r2, #21]
 800dfd4:	4610      	mov	r0, r2
 800dfd6:	4798      	blx	r3
                }
                break;
 800dfd8:	e123      	b.n	800e222 <LmhpComplianceOnMcpsIndication+0x766>
            }
#endif /* CLASS_B not available */
        case COMPLIANCE_TX_CW_REQ:
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 7 )
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	7b1b      	ldrb	r3, [r3, #12]
 800dfde:	2b07      	cmp	r3, #7
 800dfe0:	f040 8121 	bne.w	800e226 <LmhpComplianceOnMcpsIndication+0x76a>
                {
                    mlmeReq.Type = MLME_TXCW;
 800dfe4:	2306      	movs	r3, #6
 800dfe6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
                    mlmeReq.Req.TxCw.Timeout =
                        ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	689a      	ldr	r2, [r3, #8]
 800dfee:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800dff2:	4413      	add	r3, r2
 800dff4:	781b      	ldrb	r3, [r3, #0]
 800dff6:	b21a      	sxth	r2, r3
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	6899      	ldr	r1, [r3, #8]
 800dffc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e000:	3301      	adds	r3, #1
 800e002:	440b      	add	r3, r1
 800e004:	781b      	ldrb	r3, [r3, #0]
 800e006:	021b      	lsls	r3, r3, #8
 800e008:	b21b      	sxth	r3, r3
 800e00a:	4313      	orrs	r3, r2
 800e00c:	b21b      	sxth	r3, r3
 800e00e:	b29b      	uxth	r3, r3
                    mlmeReq.Req.TxCw.Timeout =
 800e010:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                    cmdIndex += 2;
 800e014:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e018:	3302      	adds	r3, #2
 800e01a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                    mlmeReq.Req.TxCw.Frequency =
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	689a      	ldr	r2, [r3, #8]
 800e022:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e026:	4413      	add	r3, r2
 800e028:	781b      	ldrb	r3, [r3, #0]
 800e02a:	4619      	mov	r1, r3
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	689a      	ldr	r2, [r3, #8]
 800e030:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e034:	3301      	adds	r3, #1
 800e036:	4413      	add	r3, r2
 800e038:	781b      	ldrb	r3, [r3, #0]
 800e03a:	021b      	lsls	r3, r3, #8
 800e03c:	ea41 0203 	orr.w	r2, r1, r3
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	6899      	ldr	r1, [r3, #8]
 800e044:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e048:	3302      	adds	r3, #2
 800e04a:	440b      	add	r3, r1
 800e04c:	781b      	ldrb	r3, [r3, #0]
 800e04e:	041b      	lsls	r3, r3, #16
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800e050:	4313      	orrs	r3, r2
 800e052:	461a      	mov	r2, r3
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800e054:	2364      	movs	r3, #100	; 0x64
 800e056:	fb02 f303 	mul.w	r3, r2, r3
                    mlmeReq.Req.TxCw.Frequency =
 800e05a:	647b      	str	r3, [r7, #68]	; 0x44
                        100;
                    cmdIndex += 3;
 800e05c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e060:	3303      	adds	r3, #3
 800e062:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	689a      	ldr	r2, [r3, #8]
 800e06a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e06e:	1c59      	adds	r1, r3, #1
 800e070:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800e074:	4413      	add	r3, r2
 800e076:	781b      	ldrb	r3, [r3, #0]
 800e078:	b25b      	sxtb	r3, r3
 800e07a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

                    LoRaMacMlmeRequest( &mlmeReq );
 800e07e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800e082:	4618      	mov	r0, r3
 800e084:	f004 fd56 	bl	8012b34 <LoRaMacMlmeRequest>
                }
                break;
 800e088:	e0cd      	b.n	800e226 <LmhpComplianceOnMcpsIndication+0x76a>
            }
        case COMPLIANCE_DUT_FPORT_224_DISABLE_REQ:
            {
                mibReq.Type = MIB_IS_CERT_FPORT_ON;
 800e08a:	233b      	movs	r3, #59	; 0x3b
 800e08c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                mibReq.Param.IsCertPortOn = false;
 800e090:	2300      	movs	r3, #0
 800e092:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacMibSetRequestConfirm( &mibReq );
 800e096:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e09a:	4618      	mov	r0, r3
 800e09c:	f004 f9a0 	bl	80123e0 <LoRaMacMibSetRequestConfirm>

                ComplianceTestState.IsResetCmdPending = true;
 800e0a0:	4b04      	ldr	r3, [pc, #16]	; (800e0b4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800e0a2:	2201      	movs	r2, #1
 800e0a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                break;
 800e0a8:	e0be      	b.n	800e228 <LmhpComplianceOnMcpsIndication+0x76c>
 800e0aa:	bf00      	nop
 800e0ac:	0801e2d4 	.word	0x0801e2d4
 800e0b0:	20000724 	.word	0x20000724
 800e0b4:	200006ec 	.word	0x200006ec
 800e0b8:	200000d8 	.word	0x200000d8
            {
                Version_t           lrwanVersion;
                Version_t           lrwanRpVersion;
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_LORAWAN_VERSION;
 800e0bc:	232a      	movs	r3, #42	; 0x2a
 800e0be:	723b      	strb	r3, [r7, #8]

                LoRaMacMibGetRequestConfirm( &mibReq );
 800e0c0:	f107 0308 	add.w	r3, r7, #8
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	f003 ffb3 	bl	8012030 <LoRaMacMibGetRequestConfirm>
                lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	63bb      	str	r3, [r7, #56]	; 0x38
                lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 800e0ce:	693b      	ldr	r3, [r7, #16]
 800e0d0:	637b      	str	r3, [r7, #52]	; 0x34

                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 800e0d2:	4b65      	ldr	r3, [pc, #404]	; (800e268 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e0d4:	68da      	ldr	r2, [r3, #12]
 800e0d6:	4b64      	ldr	r3, [pc, #400]	; (800e268 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e0d8:	7a9b      	ldrb	r3, [r3, #10]
 800e0da:	1c59      	adds	r1, r3, #1
 800e0dc:	b2c8      	uxtb	r0, r1
 800e0de:	4962      	ldr	r1, [pc, #392]	; (800e268 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e0e0:	7288      	strb	r0, [r1, #10]
 800e0e2:	4413      	add	r3, r2
 800e0e4:	227f      	movs	r2, #127	; 0x7f
 800e0e6:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 800e0e8:	4b60      	ldr	r3, [pc, #384]	; (800e26c <LmhpComplianceOnMcpsIndication+0x7b0>)
 800e0ea:	681a      	ldr	r2, [r3, #0]
 800e0ec:	4b5e      	ldr	r3, [pc, #376]	; (800e268 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e0ee:	68d9      	ldr	r1, [r3, #12]
 800e0f0:	4b5d      	ldr	r3, [pc, #372]	; (800e268 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e0f2:	7a9b      	ldrb	r3, [r3, #10]
 800e0f4:	1c58      	adds	r0, r3, #1
 800e0f6:	b2c4      	uxtb	r4, r0
 800e0f8:	485b      	ldr	r0, [pc, #364]	; (800e268 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e0fa:	7284      	strb	r4, [r0, #10]
 800e0fc:	440b      	add	r3, r1
 800e0fe:	78d2      	ldrb	r2, [r2, #3]
 800e100:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 800e102:	4b5a      	ldr	r3, [pc, #360]	; (800e26c <LmhpComplianceOnMcpsIndication+0x7b0>)
 800e104:	681a      	ldr	r2, [r3, #0]
 800e106:	4b58      	ldr	r3, [pc, #352]	; (800e268 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e108:	68d9      	ldr	r1, [r3, #12]
 800e10a:	4b57      	ldr	r3, [pc, #348]	; (800e268 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e10c:	7a9b      	ldrb	r3, [r3, #10]
 800e10e:	1c58      	adds	r0, r3, #1
 800e110:	b2c4      	uxtb	r4, r0
 800e112:	4855      	ldr	r0, [pc, #340]	; (800e268 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e114:	7284      	strb	r4, [r0, #10]
 800e116:	440b      	add	r3, r1
 800e118:	7892      	ldrb	r2, [r2, #2]
 800e11a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 800e11c:	4b53      	ldr	r3, [pc, #332]	; (800e26c <LmhpComplianceOnMcpsIndication+0x7b0>)
 800e11e:	681a      	ldr	r2, [r3, #0]
 800e120:	4b51      	ldr	r3, [pc, #324]	; (800e268 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e122:	68d9      	ldr	r1, [r3, #12]
 800e124:	4b50      	ldr	r3, [pc, #320]	; (800e268 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e126:	7a9b      	ldrb	r3, [r3, #10]
 800e128:	1c58      	adds	r0, r3, #1
 800e12a:	b2c4      	uxtb	r4, r0
 800e12c:	484e      	ldr	r0, [pc, #312]	; (800e268 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e12e:	7284      	strb	r4, [r0, #10]
 800e130:	440b      	add	r3, r1
 800e132:	7852      	ldrb	r2, [r2, #1]
 800e134:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 800e136:	4b4d      	ldr	r3, [pc, #308]	; (800e26c <LmhpComplianceOnMcpsIndication+0x7b0>)
 800e138:	681a      	ldr	r2, [r3, #0]
 800e13a:	4b4b      	ldr	r3, [pc, #300]	; (800e268 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e13c:	68d9      	ldr	r1, [r3, #12]
 800e13e:	4b4a      	ldr	r3, [pc, #296]	; (800e268 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e140:	7a9b      	ldrb	r3, [r3, #10]
 800e142:	1c58      	adds	r0, r3, #1
 800e144:	b2c4      	uxtb	r4, r0
 800e146:	4848      	ldr	r0, [pc, #288]	; (800e268 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e148:	7284      	strb	r4, [r0, #10]
 800e14a:	440b      	add	r3, r1
 800e14c:	7812      	ldrb	r2, [r2, #0]
 800e14e:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 800e150:	4b45      	ldr	r3, [pc, #276]	; (800e268 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e152:	68da      	ldr	r2, [r3, #12]
 800e154:	4b44      	ldr	r3, [pc, #272]	; (800e268 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e156:	7a9b      	ldrb	r3, [r3, #10]
 800e158:	1c59      	adds	r1, r3, #1
 800e15a:	b2c8      	uxtb	r0, r1
 800e15c:	4942      	ldr	r1, [pc, #264]	; (800e268 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e15e:	7288      	strb	r0, [r1, #10]
 800e160:	4413      	add	r3, r2
 800e162:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800e166:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 800e168:	4b3f      	ldr	r3, [pc, #252]	; (800e268 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e16a:	68da      	ldr	r2, [r3, #12]
 800e16c:	4b3e      	ldr	r3, [pc, #248]	; (800e268 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e16e:	7a9b      	ldrb	r3, [r3, #10]
 800e170:	1c59      	adds	r1, r3, #1
 800e172:	b2c8      	uxtb	r0, r1
 800e174:	493c      	ldr	r1, [pc, #240]	; (800e268 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e176:	7288      	strb	r0, [r1, #10]
 800e178:	4413      	add	r3, r2
 800e17a:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800e17e:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 800e180:	4b39      	ldr	r3, [pc, #228]	; (800e268 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e182:	68da      	ldr	r2, [r3, #12]
 800e184:	4b38      	ldr	r3, [pc, #224]	; (800e268 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e186:	7a9b      	ldrb	r3, [r3, #10]
 800e188:	1c59      	adds	r1, r3, #1
 800e18a:	b2c8      	uxtb	r0, r1
 800e18c:	4936      	ldr	r1, [pc, #216]	; (800e268 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e18e:	7288      	strb	r0, [r1, #10]
 800e190:	4413      	add	r3, r2
 800e192:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 800e196:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 800e198:	4b33      	ldr	r3, [pc, #204]	; (800e268 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e19a:	68da      	ldr	r2, [r3, #12]
 800e19c:	4b32      	ldr	r3, [pc, #200]	; (800e268 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e19e:	7a9b      	ldrb	r3, [r3, #10]
 800e1a0:	1c59      	adds	r1, r3, #1
 800e1a2:	b2c8      	uxtb	r0, r1
 800e1a4:	4930      	ldr	r1, [pc, #192]	; (800e268 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e1a6:	7288      	strb	r0, [r1, #10]
 800e1a8:	4413      	add	r3, r2
 800e1aa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e1ae:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 800e1b0:	4b2d      	ldr	r3, [pc, #180]	; (800e268 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e1b2:	68da      	ldr	r2, [r3, #12]
 800e1b4:	4b2c      	ldr	r3, [pc, #176]	; (800e268 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e1b6:	7a9b      	ldrb	r3, [r3, #10]
 800e1b8:	1c59      	adds	r1, r3, #1
 800e1ba:	b2c8      	uxtb	r0, r1
 800e1bc:	492a      	ldr	r1, [pc, #168]	; (800e268 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e1be:	7288      	strb	r0, [r1, #10]
 800e1c0:	4413      	add	r3, r2
 800e1c2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e1c6:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 800e1c8:	4b27      	ldr	r3, [pc, #156]	; (800e268 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e1ca:	68da      	ldr	r2, [r3, #12]
 800e1cc:	4b26      	ldr	r3, [pc, #152]	; (800e268 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e1ce:	7a9b      	ldrb	r3, [r3, #10]
 800e1d0:	1c59      	adds	r1, r3, #1
 800e1d2:	b2c8      	uxtb	r0, r1
 800e1d4:	4924      	ldr	r1, [pc, #144]	; (800e268 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e1d6:	7288      	strb	r0, [r1, #10]
 800e1d8:	4413      	add	r3, r2
 800e1da:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800e1de:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 800e1e0:	4b21      	ldr	r3, [pc, #132]	; (800e268 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e1e2:	68da      	ldr	r2, [r3, #12]
 800e1e4:	4b20      	ldr	r3, [pc, #128]	; (800e268 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e1e6:	7a9b      	ldrb	r3, [r3, #10]
 800e1e8:	1c59      	adds	r1, r3, #1
 800e1ea:	b2c8      	uxtb	r0, r1
 800e1ec:	491e      	ldr	r1, [pc, #120]	; (800e268 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e1ee:	7288      	strb	r0, [r1, #10]
 800e1f0:	4413      	add	r3, r2
 800e1f2:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800e1f6:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 800e1f8:	4b1b      	ldr	r3, [pc, #108]	; (800e268 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e1fa:	68da      	ldr	r2, [r3, #12]
 800e1fc:	4b1a      	ldr	r3, [pc, #104]	; (800e268 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e1fe:	7a9b      	ldrb	r3, [r3, #10]
 800e200:	1c59      	adds	r1, r3, #1
 800e202:	b2c8      	uxtb	r0, r1
 800e204:	4918      	ldr	r1, [pc, #96]	; (800e268 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e206:	7288      	strb	r0, [r1, #10]
 800e208:	4413      	add	r3, r2
 800e20a:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800e20e:	701a      	strb	r2, [r3, #0]
                break;
 800e210:	e00a      	b.n	800e228 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        default:
            {
                break;
 800e212:	bf00      	nop
 800e214:	e008      	b.n	800e228 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800e216:	bf00      	nop
 800e218:	e006      	b.n	800e228 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800e21a:	bf00      	nop
 800e21c:	e004      	b.n	800e228 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800e21e:	bf00      	nop
 800e220:	e002      	b.n	800e228 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800e222:	bf00      	nop
 800e224:	e000      	b.n	800e228 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800e226:	bf00      	nop
            }
    }

    if( ComplianceTestState.DataBufferSize != 0 )
 800e228:	4b0f      	ldr	r3, [pc, #60]	; (800e268 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e22a:	7a9b      	ldrb	r3, [r3, #10]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d00c      	beq.n	800e24a <LmhpComplianceOnMcpsIndication+0x78e>
    {
        if( ProcessTimer.IsRunning == 0U)
 800e230:	4b0f      	ldr	r3, [pc, #60]	; (800e270 <LmhpComplianceOnMcpsIndication+0x7b4>)
 800e232:	7a5b      	ldrb	r3, [r3, #9]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d114      	bne.n	800e262 <LmhpComplianceOnMcpsIndication+0x7a6>
        {
            TimerSetValue( &ProcessTimer, 1000 );
 800e238:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800e23c:	480c      	ldr	r0, [pc, #48]	; (800e270 <LmhpComplianceOnMcpsIndication+0x7b4>)
 800e23e:	f00f f835 	bl	801d2ac <UTIL_TIMER_SetPeriod>
            TimerStart( &ProcessTimer );
 800e242:	480b      	ldr	r0, [pc, #44]	; (800e270 <LmhpComplianceOnMcpsIndication+0x7b4>)
 800e244:	f00e ff54 	bl	801d0f0 <UTIL_TIMER_Start>
 800e248:	e00b      	b.n	800e262 <LmhpComplianceOnMcpsIndication+0x7a6>
        }
    }
    else
    {
        /* Abort any pending Tx as a new command has been processed */
        TimerStop( &ProcessTimer );
 800e24a:	4809      	ldr	r0, [pc, #36]	; (800e270 <LmhpComplianceOnMcpsIndication+0x7b4>)
 800e24c:	f00e ffbe 	bl	801d1cc <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 800e250:	4b05      	ldr	r3, [pc, #20]	; (800e268 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e252:	2200      	movs	r2, #0
 800e254:	705a      	strb	r2, [r3, #1]
 800e256:	e004      	b.n	800e262 <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 800e258:	bf00      	nop
 800e25a:	e002      	b.n	800e262 <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 800e25c:	bf00      	nop
 800e25e:	e000      	b.n	800e262 <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 800e260:	bf00      	nop
    }
}
 800e262:	3790      	adds	r7, #144	; 0x90
 800e264:	46bd      	mov	sp, r7
 800e266:	bdb0      	pop	{r4, r5, r7, pc}
 800e268:	200006ec 	.word	0x200006ec
 800e26c:	20000724 	.word	0x20000724
 800e270:	20000728 	.word	0x20000728

0800e274 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800e274:	b480      	push	{r7}
 800e276:	b083      	sub	sp, #12
 800e278:	af00      	add	r7, sp, #0
 800e27a:	6078      	str	r0, [r7, #4]
                }
                break;
            }
#endif /* CLASS_B not available */
        default:
            break;
 800e27c:	bf00      	nop
    }
}
 800e27e:	bf00      	nop
 800e280:	370c      	adds	r7, #12
 800e282:	46bd      	mov	sp, r7
 800e284:	bc80      	pop	{r7}
 800e286:	4770      	bx	lr

0800e288 <LmhpComplianceOnMlmeIndication>:

static void LmhpComplianceOnMlmeIndication( MlmeIndication_t *mlmeIndication )
{
 800e288:	b480      	push	{r7}
 800e28a:	b083      	sub	sp, #12
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800e290:	4b05      	ldr	r3, [pc, #20]	; (800e2a8 <LmhpComplianceOnMlmeIndication+0x20>)
 800e292:	781b      	ldrb	r3, [r3, #0]
 800e294:	f083 0301 	eor.w	r3, r3, #1
 800e298:	b2db      	uxtb	r3, r3
 800e29a:	2b00      	cmp	r3, #0
    {
        return;
 800e29c:	bf00      	nop
            }
#endif /* CLASS_B not available */
        default:
            break;
    }
}
 800e29e:	370c      	adds	r7, #12
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	bc80      	pop	{r7}
 800e2a4:	4770      	bx	lr
 800e2a6:	bf00      	nop
 800e2a8:	200006ec 	.word	0x200006ec

0800e2ac <OnProcessTimer>:
    }
}
#endif /* CLASS_B not available */

static void OnProcessTimer( void *context )
{
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	b082      	sub	sp, #8
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.DataBufferSize != 0 )
 800e2b4:	4b08      	ldr	r3, [pc, #32]	; (800e2d8 <OnProcessTimer+0x2c>)
 800e2b6:	7a9b      	ldrb	r3, [r3, #10]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d002      	beq.n	800e2c2 <OnProcessTimer+0x16>
    {
        ComplianceTestState.IsTxPending = true;
 800e2bc:	4b06      	ldr	r3, [pc, #24]	; (800e2d8 <OnProcessTimer+0x2c>)
 800e2be:	2201      	movs	r2, #1
 800e2c0:	705a      	strb	r2, [r3, #1]
    }
    if( CompliancePackage.OnPackageProcessEvent != NULL )
 800e2c2:	4b06      	ldr	r3, [pc, #24]	; (800e2dc <OnProcessTimer+0x30>)
 800e2c4:	695b      	ldr	r3, [r3, #20]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d002      	beq.n	800e2d0 <OnProcessTimer+0x24>
    {
        CompliancePackage.OnPackageProcessEvent();
 800e2ca:	4b04      	ldr	r3, [pc, #16]	; (800e2dc <OnProcessTimer+0x30>)
 800e2cc:	695b      	ldr	r3, [r3, #20]
 800e2ce:	4798      	blx	r3
    }
}
 800e2d0:	bf00      	nop
 800e2d2:	3708      	adds	r7, #8
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	bd80      	pop	{r7, pc}
 800e2d8:	200006ec 	.word	0x200006ec
 800e2dc:	200000d8 	.word	0x200000d8

0800e2e0 <LmhpPackagesRegistrationInit>:

/* Private variables ---------------------------------------------------------*/

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmhpPackagesRegistrationInit( Version_t *fwVersion )
{
 800e2e0:	b480      	push	{r7}
 800e2e2:	b083      	sub	sp, #12
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	6078      	str	r0, [r7, #4]
        return LORAMAC_HANDLER_ERROR;
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
 800e2e8:	2300      	movs	r3, #0
}
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	370c      	adds	r7, #12
 800e2ee:	46bd      	mov	sp, r7
 800e2f0:	bc80      	pop	{r7}
 800e2f2:	4770      	bx	lr

0800e2f4 <LmhpPackagesRegister>:

LmHandlerErrorStatus_t LmhpPackagesRegister( uint8_t id, LmhPackage_t **package )
{
 800e2f4:	b480      	push	{r7}
 800e2f6:	b083      	sub	sp, #12
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	4603      	mov	r3, r0
 800e2fc:	6039      	str	r1, [r7, #0]
 800e2fe:	71fb      	strb	r3, [r7, #7]
                break;
            }
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
 800e300:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 800e304:	4618      	mov	r0, r3
 800e306:	370c      	adds	r7, #12
 800e308:	46bd      	mov	sp, r7
 800e30a:	bc80      	pop	{r7}
 800e30c:	4770      	bx	lr
	...

0800e310 <OnRadioTxDone>:
}RxDoneParams_t;

static RxDoneParams_t RxDoneParams;

static void OnRadioTxDone( void )
{
 800e310:	b590      	push	{r4, r7, lr}
 800e312:	b083      	sub	sp, #12
 800e314:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800e316:	f00f f873 	bl	801d400 <UTIL_TIMER_GetCurrentTime>
 800e31a:	4603      	mov	r3, r0
 800e31c:	4a0f      	ldr	r2, [pc, #60]	; (800e35c <OnRadioTxDone+0x4c>)
 800e31e:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800e320:	4c0f      	ldr	r4, [pc, #60]	; (800e360 <OnRadioTxDone+0x50>)
 800e322:	463b      	mov	r3, r7
 800e324:	4618      	mov	r0, r3
 800e326:	f00e f9e9 	bl	801c6fc <SysTimeGet>
 800e32a:	f504 734e 	add.w	r3, r4, #824	; 0x338
 800e32e:	463a      	mov	r2, r7
 800e330:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e334:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800e338:	4a0a      	ldr	r2, [pc, #40]	; (800e364 <OnRadioTxDone+0x54>)
 800e33a:	7813      	ldrb	r3, [r2, #0]
 800e33c:	f043 0320 	orr.w	r3, r3, #32
 800e340:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800e342:	f003 fa71 	bl	8011828 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800e346:	4b08      	ldr	r3, [pc, #32]	; (800e368 <OnRadioTxDone+0x58>)
 800e348:	2201      	movs	r2, #1
 800e34a:	2100      	movs	r1, #0
 800e34c:	2002      	movs	r0, #2
 800e34e:	f00f f947 	bl	801d5e0 <UTIL_ADV_TRACE_COND_FSend>
}
 800e352:	bf00      	nop
 800e354:	370c      	adds	r7, #12
 800e356:	46bd      	mov	sp, r7
 800e358:	bd90      	pop	{r4, r7, pc}
 800e35a:	bf00      	nop
 800e35c:	20001888 	.word	0x20001888
 800e360:	20000740 	.word	0x20000740
 800e364:	20001884 	.word	0x20001884
 800e368:	0801e300 	.word	0x0801e300

0800e36c <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b084      	sub	sp, #16
 800e370:	af00      	add	r7, sp, #0
 800e372:	60f8      	str	r0, [r7, #12]
 800e374:	4608      	mov	r0, r1
 800e376:	4611      	mov	r1, r2
 800e378:	461a      	mov	r2, r3
 800e37a:	4603      	mov	r3, r0
 800e37c:	817b      	strh	r3, [r7, #10]
 800e37e:	460b      	mov	r3, r1
 800e380:	813b      	strh	r3, [r7, #8]
 800e382:	4613      	mov	r3, r2
 800e384:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800e386:	f00f f83b 	bl	801d400 <UTIL_TIMER_GetCurrentTime>
 800e38a:	4603      	mov	r3, r0
 800e38c:	4a11      	ldr	r2, [pc, #68]	; (800e3d4 <OnRadioRxDone+0x68>)
 800e38e:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800e390:	4a10      	ldr	r2, [pc, #64]	; (800e3d4 <OnRadioRxDone+0x68>)
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800e396:	4a0f      	ldr	r2, [pc, #60]	; (800e3d4 <OnRadioRxDone+0x68>)
 800e398:	897b      	ldrh	r3, [r7, #10]
 800e39a:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800e39c:	4a0d      	ldr	r2, [pc, #52]	; (800e3d4 <OnRadioRxDone+0x68>)
 800e39e:	893b      	ldrh	r3, [r7, #8]
 800e3a0:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800e3a2:	4a0c      	ldr	r2, [pc, #48]	; (800e3d4 <OnRadioRxDone+0x68>)
 800e3a4:	79fb      	ldrb	r3, [r7, #7]
 800e3a6:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800e3a8:	4a0b      	ldr	r2, [pc, #44]	; (800e3d8 <OnRadioRxDone+0x6c>)
 800e3aa:	7813      	ldrb	r3, [r2, #0]
 800e3ac:	f043 0310 	orr.w	r3, r3, #16
 800e3b0:	7013      	strb	r3, [r2, #0]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 800e3b2:	4a09      	ldr	r2, [pc, #36]	; (800e3d8 <OnRadioRxDone+0x6c>)
 800e3b4:	7813      	ldrb	r3, [r2, #0]
 800e3b6:	f043 0301 	orr.w	r3, r3, #1
 800e3ba:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    OnMacProcessNotify( );
 800e3bc:	f003 fa34 	bl	8011828 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800e3c0:	4b06      	ldr	r3, [pc, #24]	; (800e3dc <OnRadioRxDone+0x70>)
 800e3c2:	2201      	movs	r2, #1
 800e3c4:	2100      	movs	r1, #0
 800e3c6:	2002      	movs	r0, #2
 800e3c8:	f00f f90a 	bl	801d5e0 <UTIL_ADV_TRACE_COND_FSend>
}
 800e3cc:	bf00      	nop
 800e3ce:	3710      	adds	r7, #16
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	bd80      	pop	{r7, pc}
 800e3d4:	2000188c 	.word	0x2000188c
 800e3d8:	20001884 	.word	0x20001884
 800e3dc:	0801e310 	.word	0x0801e310

0800e3e0 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800e3e4:	4a07      	ldr	r2, [pc, #28]	; (800e404 <OnRadioTxTimeout+0x24>)
 800e3e6:	7813      	ldrb	r3, [r2, #0]
 800e3e8:	f043 0308 	orr.w	r3, r3, #8
 800e3ec:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800e3ee:	f003 fa1b 	bl	8011828 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800e3f2:	4b05      	ldr	r3, [pc, #20]	; (800e408 <OnRadioTxTimeout+0x28>)
 800e3f4:	2201      	movs	r2, #1
 800e3f6:	2100      	movs	r1, #0
 800e3f8:	2002      	movs	r0, #2
 800e3fa:	f00f f8f1 	bl	801d5e0 <UTIL_ADV_TRACE_COND_FSend>
}
 800e3fe:	bf00      	nop
 800e400:	bd80      	pop	{r7, pc}
 800e402:	bf00      	nop
 800e404:	20001884 	.word	0x20001884
 800e408:	0801e320 	.word	0x0801e320

0800e40c <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800e40c:	b580      	push	{r7, lr}
 800e40e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800e410:	4a04      	ldr	r2, [pc, #16]	; (800e424 <OnRadioRxError+0x18>)
 800e412:	7813      	ldrb	r3, [r2, #0]
 800e414:	f043 0304 	orr.w	r3, r3, #4
 800e418:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800e41a:	f003 fa05 	bl	8011828 <OnMacProcessNotify>
}
 800e41e:	bf00      	nop
 800e420:	bd80      	pop	{r7, pc}
 800e422:	bf00      	nop
 800e424:	20001884 	.word	0x20001884

0800e428 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800e428:	b580      	push	{r7, lr}
 800e42a:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800e42c:	4a07      	ldr	r2, [pc, #28]	; (800e44c <OnRadioRxTimeout+0x24>)
 800e42e:	7813      	ldrb	r3, [r2, #0]
 800e430:	f043 0302 	orr.w	r3, r3, #2
 800e434:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800e436:	f003 f9f7 	bl	8011828 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800e43a:	4b05      	ldr	r3, [pc, #20]	; (800e450 <OnRadioRxTimeout+0x28>)
 800e43c:	2201      	movs	r2, #1
 800e43e:	2100      	movs	r1, #0
 800e440:	2002      	movs	r0, #2
 800e442:	f00f f8cd 	bl	801d5e0 <UTIL_ADV_TRACE_COND_FSend>
}
 800e446:	bf00      	nop
 800e448:	bd80      	pop	{r7, pc}
 800e44a:	bf00      	nop
 800e44c:	20001884 	.word	0x20001884
 800e450:	0801e330 	.word	0x0801e330

0800e454 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800e454:	b480      	push	{r7}
 800e456:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e458:	4b08      	ldr	r3, [pc, #32]	; (800e47c <UpdateRxSlotIdleState+0x28>)
 800e45a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800e45e:	2b02      	cmp	r3, #2
 800e460:	d004      	beq.n	800e46c <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800e462:	4b07      	ldr	r3, [pc, #28]	; (800e480 <UpdateRxSlotIdleState+0x2c>)
 800e464:	2206      	movs	r2, #6
 800e466:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800e46a:	e003      	b.n	800e474 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800e46c:	4b04      	ldr	r3, [pc, #16]	; (800e480 <UpdateRxSlotIdleState+0x2c>)
 800e46e:	2202      	movs	r2, #2
 800e470:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
}
 800e474:	bf00      	nop
 800e476:	46bd      	mov	sp, r7
 800e478:	bc80      	pop	{r7}
 800e47a:	4770      	bx	lr
 800e47c:	20000c5c 	.word	0x20000c5c
 800e480:	20000740 	.word	0x20000740

0800e484 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800e484:	b580      	push	{r7, lr}
 800e486:	b092      	sub	sp, #72	; 0x48
 800e488:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e48a:	4b4a      	ldr	r3, [pc, #296]	; (800e5b4 <ProcessRadioTxDone+0x130>)
 800e48c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800e490:	2b02      	cmp	r3, #2
 800e492:	d002      	beq.n	800e49a <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800e494:	4b48      	ldr	r3, [pc, #288]	; (800e5b8 <ProcessRadioTxDone+0x134>)
 800e496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e498:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e49a:	f3ef 8310 	mrs	r3, PRIMASK
 800e49e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800e4a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    CRITICAL_SECTION_BEGIN( );
 800e4a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
 800e4a4:	b672      	cpsid	i
}
 800e4a6:	bf00      	nop
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 800e4a8:	f00e ffaa 	bl	801d400 <UTIL_TIMER_GetCurrentTime>
 800e4ac:	4602      	mov	r2, r0
 800e4ae:	4b43      	ldr	r3, [pc, #268]	; (800e5bc <ProcessRadioTxDone+0x138>)
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	1ad3      	subs	r3, r2, r3
 800e4b4:	63bb      	str	r3, [r7, #56]	; 0x38
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 800e4b6:	4b42      	ldr	r3, [pc, #264]	; (800e5c0 <ProcessRadioTxDone+0x13c>)
 800e4b8:	f8d3 23b0 	ldr.w	r2, [r3, #944]	; 0x3b0
 800e4bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4be:	1ad3      	subs	r3, r2, r3
 800e4c0:	4619      	mov	r1, r3
 800e4c2:	4840      	ldr	r0, [pc, #256]	; (800e5c4 <ProcessRadioTxDone+0x140>)
 800e4c4:	f00e fef2 	bl	801d2ac <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800e4c8:	483e      	ldr	r0, [pc, #248]	; (800e5c4 <ProcessRadioTxDone+0x140>)
 800e4ca:	f00e fe11 	bl	801d0f0 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 800e4ce:	4b3c      	ldr	r3, [pc, #240]	; (800e5c0 <ProcessRadioTxDone+0x13c>)
 800e4d0:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 800e4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4d6:	1ad3      	subs	r3, r2, r3
 800e4d8:	4619      	mov	r1, r3
 800e4da:	483b      	ldr	r0, [pc, #236]	; (800e5c8 <ProcessRadioTxDone+0x144>)
 800e4dc:	f00e fee6 	bl	801d2ac <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800e4e0:	4839      	ldr	r0, [pc, #228]	; (800e5c8 <ProcessRadioTxDone+0x144>)
 800e4e2:	f00e fe05 	bl	801d0f0 <UTIL_TIMER_Start>
 800e4e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4e8:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e4ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4ec:	f383 8810 	msr	PRIMASK, r3
}
 800e4f0:	bf00      	nop
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
        TimerStart( &MacCtx.AckTimeoutTimer );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.NodeAckRequested == true )
 800e4f2:	4b33      	ldr	r3, [pc, #204]	; (800e5c0 <ProcessRadioTxDone+0x13c>)
 800e4f4:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d01a      	beq.n	800e532 <ProcessRadioTxDone+0xae>
    {
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 800e4fc:	2315      	movs	r3, #21
 800e4fe:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e502:	4b2c      	ldr	r3, [pc, #176]	; (800e5b4 <ProcessRadioTxDone+0x130>)
 800e504:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800e508:	f107 0220 	add.w	r2, r7, #32
 800e50c:	4611      	mov	r1, r2
 800e50e:	4618      	mov	r0, r3
 800e510:	f006 fec0 	bl	8015294 <RegionGetPhyParam>
 800e514:	4603      	mov	r3, r0
 800e516:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800e518:	4b29      	ldr	r3, [pc, #164]	; (800e5c0 <ProcessRadioTxDone+0x13c>)
 800e51a:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 800e51e:	69fb      	ldr	r3, [r7, #28]
 800e520:	4413      	add	r3, r2
 800e522:	4619      	mov	r1, r3
 800e524:	4829      	ldr	r0, [pc, #164]	; (800e5cc <ProcessRadioTxDone+0x148>)
 800e526:	f00e fec1 	bl	801d2ac <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 800e52a:	4828      	ldr	r0, [pc, #160]	; (800e5cc <ProcessRadioTxDone+0x148>)
 800e52c:	f00e fde0 	bl	801d0f0 <UTIL_TIMER_Start>
 800e530:	e003      	b.n	800e53a <ProcessRadioTxDone+0xb6>
    }
    else
    {
        // Transmission successful, setup status directly
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e532:	4b23      	ldr	r3, [pc, #140]	; (800e5c0 <ProcessRadioTxDone+0x13c>)
 800e534:	2200      	movs	r2, #0
 800e536:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800e53a:	4b20      	ldr	r3, [pc, #128]	; (800e5bc <ProcessRadioTxDone+0x138>)
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	4a1d      	ldr	r2, [pc, #116]	; (800e5b4 <ProcessRadioTxDone+0x130>)
 800e540:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800e542:	4b1f      	ldr	r3, [pc, #124]	; (800e5c0 <ProcessRadioTxDone+0x13c>)
 800e544:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 800e548:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800e54a:	4b1c      	ldr	r3, [pc, #112]	; (800e5bc <ProcessRadioTxDone+0x138>)
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800e550:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e554:	4618      	mov	r0, r3
 800e556:	f00e f909 	bl	801c76c <SysTimeGetMcuTime>
 800e55a:	4638      	mov	r0, r7
 800e55c:	4b15      	ldr	r3, [pc, #84]	; (800e5b4 <ProcessRadioTxDone+0x130>)
 800e55e:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 800e562:	9200      	str	r2, [sp, #0]
 800e564:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800e568:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800e56c:	ca06      	ldmia	r2, {r1, r2}
 800e56e:	f00e f85e 	bl	801c62e <SysTimeSub>
 800e572:	f107 0314 	add.w	r3, r7, #20
 800e576:	463a      	mov	r2, r7
 800e578:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e57c:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800e580:	4b0f      	ldr	r3, [pc, #60]	; (800e5c0 <ProcessRadioTxDone+0x13c>)
 800e582:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800e586:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800e588:	2301      	movs	r3, #1
 800e58a:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800e58c:	4b09      	ldr	r3, [pc, #36]	; (800e5b4 <ProcessRadioTxDone+0x130>)
 800e58e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800e592:	2b00      	cmp	r3, #0
 800e594:	d101      	bne.n	800e59a <ProcessRadioTxDone+0x116>
    {
        txDone.Joined  = false;
 800e596:	2300      	movs	r3, #0
 800e598:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800e59a:	4b06      	ldr	r3, [pc, #24]	; (800e5b4 <ProcessRadioTxDone+0x130>)
 800e59c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800e5a0:	f107 0208 	add.w	r2, r7, #8
 800e5a4:	4611      	mov	r1, r2
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	f006 fe95 	bl	80152d6 <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */
}
 800e5ac:	bf00      	nop
 800e5ae:	3740      	adds	r7, #64	; 0x40
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	bd80      	pop	{r7, pc}
 800e5b4:	20000c5c 	.word	0x20000c5c
 800e5b8:	0801ea64 	.word	0x0801ea64
 800e5bc:	20001888 	.word	0x20001888
 800e5c0:	20000740 	.word	0x20000740
 800e5c4:	20000ac0 	.word	0x20000ac0
 800e5c8:	20000ad8 	.word	0x20000ad8
 800e5cc:	20000b40 	.word	0x20000b40

0800e5d0 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800e5d4:	4b10      	ldr	r3, [pc, #64]	; (800e618 <PrepareRxDoneAbort+0x48>)
 800e5d6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e5da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e5de:	4a0e      	ldr	r2, [pc, #56]	; (800e618 <PrepareRxDoneAbort+0x48>)
 800e5e0:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 800e5e4:	4b0c      	ldr	r3, [pc, #48]	; (800e618 <PrepareRxDoneAbort+0x48>)
 800e5e6:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d002      	beq.n	800e5f4 <PrepareRxDoneAbort+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        OnRetransmitTimeoutTimerEvent( NULL );
 800e5ee:	2000      	movs	r0, #0
 800e5f0:	f001 f9fa 	bl	800f9e8 <OnRetransmitTimeoutTimerEvent>
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800e5f4:	4a08      	ldr	r2, [pc, #32]	; (800e618 <PrepareRxDoneAbort+0x48>)
 800e5f6:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800e5fa:	f043 0302 	orr.w	r3, r3, #2
 800e5fe:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    MacCtx.MacFlags.Bits.MacDone = 1;
 800e602:	4a05      	ldr	r2, [pc, #20]	; (800e618 <PrepareRxDoneAbort+0x48>)
 800e604:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800e608:	f043 0310 	orr.w	r3, r3, #16
 800e60c:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491

    UpdateRxSlotIdleState( );
 800e610:	f7ff ff20 	bl	800e454 <UpdateRxSlotIdleState>
}
 800e614:	bf00      	nop
 800e616:	bd80      	pop	{r7, pc}
 800e618:	20000740 	.word	0x20000740

0800e61c <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800e61c:	b590      	push	{r4, r7, lr}
 800e61e:	b0ab      	sub	sp, #172	; 0xac
 800e620:	af02      	add	r7, sp, #8
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800e622:	2312      	movs	r3, #18
 800e624:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800e628:	4b81      	ldr	r3, [pc, #516]	; (800e830 <ProcessRadioRxDone+0x214>)
 800e62a:	685b      	ldr	r3, [r3, #4]
 800e62c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    uint16_t size = RxDoneParams.Size;
 800e630:	4b7f      	ldr	r3, [pc, #508]	; (800e830 <ProcessRadioRxDone+0x214>)
 800e632:	891b      	ldrh	r3, [r3, #8]
 800e634:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
    int16_t rssi = RxDoneParams.Rssi;
 800e638:	4b7d      	ldr	r3, [pc, #500]	; (800e830 <ProcessRadioRxDone+0x214>)
 800e63a:	895b      	ldrh	r3, [r3, #10]
 800e63c:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
    int8_t snr = RxDoneParams.Snr;
 800e640:	4b7b      	ldr	r3, [pc, #492]	; (800e830 <ProcessRadioRxDone+0x214>)
 800e642:	7b1b      	ldrb	r3, [r3, #12]
 800e644:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

    uint8_t pktHeaderLen = 0;
 800e648:	2300      	movs	r3, #0
 800e64a:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e

    uint32_t downLinkCounter = 0;
 800e64e:	2300      	movs	r3, #0
 800e650:	617b      	str	r3, [r7, #20]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800e652:	4b78      	ldr	r3, [pc, #480]	; (800e834 <ProcessRadioRxDone+0x218>)
 800e654:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e658:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    uint8_t multicast = 0;
 800e65c:	2300      	movs	r3, #0
 800e65e:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800e662:	2301      	movs	r3, #1
 800e664:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
    FCntIdentifier_t fCntID;
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    uint8_t macCmdPayload[2] = { 0 };
#endif /* LORAMAC_VERSION */
    Mlme_t joinType = MLME_JOIN;
 800e668:	2301      	movs	r3, #1
 800e66a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 800e66e:	4a72      	ldr	r2, [pc, #456]	; (800e838 <ProcessRadioRxDone+0x21c>)
 800e670:	7813      	ldrb	r3, [r2, #0]
 800e672:	f36f 0300 	bfc	r3, #0, #1
 800e676:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 800e678:	4b70      	ldr	r3, [pc, #448]	; (800e83c <ProcessRadioRxDone+0x220>)
 800e67a:	2200      	movs	r2, #0
 800e67c:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
    MacCtx.RxStatus.Rssi = rssi;
 800e680:	4a6e      	ldr	r2, [pc, #440]	; (800e83c <ProcessRadioRxDone+0x220>)
 800e682:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800e686:	f8a2 348c 	strh.w	r3, [r2, #1164]	; 0x48c
    MacCtx.RxStatus.Snr = snr;
 800e68a:	4a6c      	ldr	r2, [pc, #432]	; (800e83c <ProcessRadioRxDone+0x220>)
 800e68c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e690:	f882 348e 	strb.w	r3, [r2, #1166]	; 0x48e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800e694:	4b69      	ldr	r3, [pc, #420]	; (800e83c <ProcessRadioRxDone+0x220>)
 800e696:	f893 2490 	ldrb.w	r2, [r3, #1168]	; 0x490
 800e69a:	4b68      	ldr	r3, [pc, #416]	; (800e83c <ProcessRadioRxDone+0x220>)
 800e69c:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
    MacCtx.McpsIndication.Port = 0;
 800e6a0:	4b66      	ldr	r3, [pc, #408]	; (800e83c <ProcessRadioRxDone+0x220>)
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
    MacCtx.McpsIndication.Multicast = 0;
 800e6a8:	4b64      	ldr	r3, [pc, #400]	; (800e83c <ProcessRadioRxDone+0x220>)
 800e6aa:	2200      	movs	r2, #0
 800e6ac:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 800e6b0:	4b62      	ldr	r3, [pc, #392]	; (800e83c <ProcessRadioRxDone+0x220>)
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
    MacCtx.McpsIndication.Buffer = NULL;
 800e6b8:	4b60      	ldr	r3, [pc, #384]	; (800e83c <ProcessRadioRxDone+0x220>)
 800e6ba:	2200      	movs	r2, #0
 800e6bc:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
    MacCtx.McpsIndication.BufferSize = 0;
 800e6c0:	4b5e      	ldr	r3, [pc, #376]	; (800e83c <ProcessRadioRxDone+0x220>)
 800e6c2:	2200      	movs	r2, #0
 800e6c4:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.RxData = false;
 800e6c8:	4b5c      	ldr	r3, [pc, #368]	; (800e83c <ProcessRadioRxDone+0x220>)
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
    MacCtx.McpsIndication.AckReceived = false;
 800e6d0:	4b5a      	ldr	r3, [pc, #360]	; (800e83c <ProcessRadioRxDone+0x220>)
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800e6d8:	4b58      	ldr	r3, [pc, #352]	; (800e83c <ProcessRadioRxDone+0x220>)
 800e6da:	2200      	movs	r2, #0
 800e6dc:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800e6e0:	4b56      	ldr	r3, [pc, #344]	; (800e83c <ProcessRadioRxDone+0x220>)
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
    MacCtx.McpsIndication.DevAddress = 0;
 800e6e8:	4b54      	ldr	r3, [pc, #336]	; (800e83c <ProcessRadioRxDone+0x220>)
 800e6ea:	2200      	movs	r2, #0
 800e6ec:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800e6f0:	4b52      	ldr	r3, [pc, #328]	; (800e83c <ProcessRadioRxDone+0x220>)
 800e6f2:	2200      	movs	r2, #0
 800e6f4:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.McpsIndication.ResponseTimeout = 0;
 800e6f8:	4b50      	ldr	r3, [pc, #320]	; (800e83c <ProcessRadioRxDone+0x220>)
 800e6fa:	2200      	movs	r2, #0
 800e6fc:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 800e700:	4b4f      	ldr	r3, [pc, #316]	; (800e840 <ProcessRadioRxDone+0x224>)
 800e702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e704:	4798      	blx	r3

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800e706:	4b4d      	ldr	r3, [pc, #308]	; (800e83c <ProcessRadioRxDone+0x220>)
 800e708:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d102      	bne.n	800e716 <ProcessRadioRxDone+0xfa>
    {
        TimerStop( &MacCtx.RxWindowTimer2 );
 800e710:	484c      	ldr	r0, [pc, #304]	; (800e844 <ProcessRadioRxDone+0x228>)
 800e712:	f00e fd5b 	bl	801d1cc <UTIL_TIMER_Stop>
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800e716:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800e71a:	4619      	mov	r1, r3
 800e71c:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800e720:	f004 fe28 	bl	8013374 <LoRaMacClassBRxBeacon>
 800e724:	4603      	mov	r3, r0
 800e726:	2b00      	cmp	r3, #0
 800e728:	d00b      	beq.n	800e742 <ProcessRadioRxDone+0x126>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800e72a:	4a44      	ldr	r2, [pc, #272]	; (800e83c <ProcessRadioRxDone+0x220>)
 800e72c:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800e730:	f8a2 347e 	strh.w	r3, [r2, #1150]	; 0x47e
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800e734:	4a41      	ldr	r2, [pc, #260]	; (800e83c <ProcessRadioRxDone+0x220>)
 800e736:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e73a:	f882 3480 	strb.w	r3, [r2, #1152]	; 0x480
        return;
 800e73e:	f000 bc75 	b.w	800f02c <ProcessRadioRxDone+0xa10>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800e742:	4b3c      	ldr	r3, [pc, #240]	; (800e834 <ProcessRadioRxDone+0x218>)
 800e744:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800e748:	2b01      	cmp	r3, #1
 800e74a:	d11e      	bne.n	800e78a <ProcessRadioRxDone+0x16e>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800e74c:	f004 fe25 	bl	801339a <LoRaMacClassBIsPingExpected>
 800e750:	4603      	mov	r3, r0
 800e752:	2b00      	cmp	r3, #0
 800e754:	d00a      	beq.n	800e76c <ProcessRadioRxDone+0x150>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e756:	2000      	movs	r0, #0
 800e758:	f004 fdd6 	bl	8013308 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800e75c:	2000      	movs	r0, #0
 800e75e:	f004 fdf7 	bl	8013350 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800e762:	4b36      	ldr	r3, [pc, #216]	; (800e83c <ProcessRadioRxDone+0x220>)
 800e764:	2204      	movs	r2, #4
 800e766:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
 800e76a:	e00e      	b.n	800e78a <ProcessRadioRxDone+0x16e>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800e76c:	f004 fe1c 	bl	80133a8 <LoRaMacClassBIsMulticastExpected>
 800e770:	4603      	mov	r3, r0
 800e772:	2b00      	cmp	r3, #0
 800e774:	d009      	beq.n	800e78a <ProcessRadioRxDone+0x16e>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e776:	2000      	movs	r0, #0
 800e778:	f004 fdd0 	bl	801331c <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800e77c:	2000      	movs	r0, #0
 800e77e:	f004 fdf0 	bl	8013362 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800e782:	4b2e      	ldr	r3, [pc, #184]	; (800e83c <ProcessRadioRxDone+0x220>)
 800e784:	2205      	movs	r2, #5
 800e786:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
        }
    }

    // Abort on empty radio frames
    if( size == 0 )
 800e78a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d107      	bne.n	800e7a2 <ProcessRadioRxDone+0x186>
    {
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e792:	4b2a      	ldr	r3, [pc, #168]	; (800e83c <ProcessRadioRxDone+0x220>)
 800e794:	2201      	movs	r2, #1
 800e796:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
        PrepareRxDoneAbort( );
 800e79a:	f7ff ff19 	bl	800e5d0 <PrepareRxDoneAbort>
        return;
 800e79e:	f000 bc45 	b.w	800f02c <ProcessRadioRxDone+0xa10>
    }

    macHdr.Value = payload[pktHeaderLen++];
 800e7a2:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800e7a6:	1c5a      	adds	r2, r3, #1
 800e7a8:	f887 208e 	strb.w	r2, [r7, #142]	; 0x8e
 800e7ac:	461a      	mov	r2, r3
 800e7ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e7b2:	4413      	add	r3, r2
 800e7b4:	781b      	ldrb	r3, [r3, #0]
 800e7b6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
        PrepareRxDoneAbort( );
        return;
    }
#endif /* LORAMAC_VERSION */

    switch( macHdr.Bits.MType )
 800e7ba:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800e7be:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800e7c2:	b2db      	uxtb	r3, r3
 800e7c4:	3b01      	subs	r3, #1
 800e7c6:	2b06      	cmp	r3, #6
 800e7c8:	f200 8403 	bhi.w	800efd2 <ProcessRadioRxDone+0x9b6>
 800e7cc:	a201      	add	r2, pc, #4	; (adr r2, 800e7d4 <ProcessRadioRxDone+0x1b8>)
 800e7ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7d2:	bf00      	nop
 800e7d4:	0800e7f1 	.word	0x0800e7f1
 800e7d8:	0800efd3 	.word	0x0800efd3
 800e7dc:	0800e9ef 	.word	0x0800e9ef
 800e7e0:	0800efd3 	.word	0x0800efd3
 800e7e4:	0800e9e7 	.word	0x0800e9e7
 800e7e8:	0800efd3 	.word	0x0800efd3
 800e7ec:	0800ef77 	.word	0x0800ef77
    {
        case FRAME_TYPE_JOIN_ACCEPT:
        {
            uint8_t joinEui[SE_EUI_SIZE];
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800e7f0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800e7f4:	2b10      	cmp	r3, #16
 800e7f6:	d807      	bhi.n	800e808 <ProcessRadioRxDone+0x1ec>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e7f8:	4b10      	ldr	r3, [pc, #64]	; (800e83c <ProcessRadioRxDone+0x220>)
 800e7fa:	2201      	movs	r2, #1
 800e7fc:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800e800:	f7ff fee6 	bl	800e5d0 <PrepareRxDoneAbort>
                return;
 800e804:	f000 bc12 	b.w	800f02c <ProcessRadioRxDone+0xa10>
            }
            macMsgJoinAccept.Buffer = payload;
 800e808:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e80c:	61bb      	str	r3, [r7, #24]
            macMsgJoinAccept.BufSize = size;
 800e80e:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800e812:	b2db      	uxtb	r3, r3
 800e814:	773b      	strb	r3, [r7, #28]

            // Abort in case if the device is already joined and no rejoin request is ongoing.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
            if( ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) && ( Nvm.MacGroup2.IsRejoinAcceptPending == false ) )
#else
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800e816:	4b07      	ldr	r3, [pc, #28]	; (800e834 <ProcessRadioRxDone+0x218>)
 800e818:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d013      	beq.n	800e848 <ProcessRadioRxDone+0x22c>
#endif /* LORAMAC_VERSION */
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e820:	4b06      	ldr	r3, [pc, #24]	; (800e83c <ProcessRadioRxDone+0x220>)
 800e822:	2201      	movs	r2, #1
 800e824:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800e828:	f7ff fed2 	bl	800e5d0 <PrepareRxDoneAbort>
                return;
 800e82c:	e3fe      	b.n	800f02c <ProcessRadioRxDone+0xa10>
 800e82e:	bf00      	nop
 800e830:	2000188c 	.word	0x2000188c
 800e834:	20000c5c 	.word	0x20000c5c
 800e838:	20001884 	.word	0x20001884
 800e83c:	20000740 	.word	0x20000740
 800e840:	0801ea64 	.word	0x0801ea64
 800e844:	20000ad8 	.word	0x20000ad8
            }

            SecureElementGetJoinEui( joinEui );
 800e848:	f107 0308 	add.w	r3, r7, #8
 800e84c:	4618      	mov	r0, r3
 800e84e:	f7fd ff7d 	bl	800c74c <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 800e852:	f107 0218 	add.w	r2, r7, #24
 800e856:	f107 0308 	add.w	r3, r7, #8
 800e85a:	4619      	mov	r1, r3
 800e85c:	20ff      	movs	r0, #255	; 0xff
 800e85e:	f005 ff95 	bl	801478c <LoRaMacCryptoHandleJoinAccept>
 800e862:	4603      	mov	r3, r0
 800e864:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
                joinType = MLME_REJOIN_2;
            }
#endif /* LORAMAC_VERSION */

            VerifyParams_t verifyRxDr;
            bool rxDrValid = false;
 800e868:	2300      	movs	r3, #0
 800e86a:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800e86e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e872:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e876:	b2db      	uxtb	r3, r3
 800e878:	b25b      	sxtb	r3, r3
 800e87a:	713b      	strb	r3, [r7, #4]
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e87c:	4bb1      	ldr	r3, [pc, #708]	; (800eb44 <ProcessRadioRxDone+0x528>)
 800e87e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800e882:	717b      	strb	r3, [r7, #5]
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 800e884:	4baf      	ldr	r3, [pc, #700]	; (800eb44 <ProcessRadioRxDone+0x528>)
 800e886:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800e88a:	1d39      	adds	r1, r7, #4
 800e88c:	2207      	movs	r2, #7
 800e88e:	4618      	mov	r0, r3
 800e890:	f006 fd4e 	bl	8015330 <RegionVerify>
 800e894:	4603      	mov	r3, r0
 800e896:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
 800e89a:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	f040 8095 	bne.w	800e9ce <ProcessRadioRxDone+0x3b2>
 800e8a4:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	f000 8090 	beq.w	800e9ce <ProcessRadioRxDone+0x3b2>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800e8ae:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e8b2:	461a      	mov	r2, r3
 800e8b4:	4ba3      	ldr	r3, [pc, #652]	; (800eb44 <ProcessRadioRxDone+0x528>)
 800e8b6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800e8ba:	4ba2      	ldr	r3, [pc, #648]	; (800eb44 <ProcessRadioRxDone+0x528>)
 800e8bc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800e8c0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e8c4:	021b      	lsls	r3, r3, #8
 800e8c6:	4313      	orrs	r3, r2
 800e8c8:	4a9e      	ldr	r2, [pc, #632]	; (800eb44 <ProcessRadioRxDone+0x528>)
 800e8ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800e8ce:	4b9d      	ldr	r3, [pc, #628]	; (800eb44 <ProcessRadioRxDone+0x528>)
 800e8d0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800e8d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e8d8:	041b      	lsls	r3, r3, #16
 800e8da:	4313      	orrs	r3, r2
 800e8dc:	4a99      	ldr	r2, [pc, #612]	; (800eb44 <ProcessRadioRxDone+0x528>)
 800e8de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800e8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8e4:	4a97      	ldr	r2, [pc, #604]	; (800eb44 <ProcessRadioRxDone+0x528>)
 800e8e6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
                // Update NVM DevAddrOTAA with network value
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 800e8ea:	4b96      	ldr	r3, [pc, #600]	; (800eb44 <ProcessRadioRxDone+0x528>)
 800e8ec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e8f0:	4619      	mov	r1, r3
 800e8f2:	2002      	movs	r0, #2
 800e8f4:	f7fd ff42 	bl	800c77c <SecureElementSetDevAddr>

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800e8f8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e8fc:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800e900:	b2db      	uxtb	r3, r3
 800e902:	461a      	mov	r2, r3
 800e904:	4b8f      	ldr	r3, [pc, #572]	; (800eb44 <ProcessRadioRxDone+0x528>)
 800e906:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800e90a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e90e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e912:	b2db      	uxtb	r3, r3
 800e914:	461a      	mov	r2, r3
 800e916:	4b8b      	ldr	r3, [pc, #556]	; (800eb44 <ProcessRadioRxDone+0x528>)
 800e918:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800e91c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e920:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e924:	b2db      	uxtb	r3, r3
 800e926:	461a      	mov	r2, r3
 800e928:	4b86      	ldr	r3, [pc, #536]	; (800eb44 <ProcessRadioRxDone+0x528>)
 800e92a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800e92e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800e932:	461a      	mov	r2, r3
 800e934:	4b83      	ldr	r3, [pc, #524]	; (800eb44 <ProcessRadioRxDone+0x528>)
 800e936:	659a      	str	r2, [r3, #88]	; 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800e938:	4b82      	ldr	r3, [pc, #520]	; (800eb44 <ProcessRadioRxDone+0x528>)
 800e93a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d102      	bne.n	800e946 <ProcessRadioRxDone+0x32a>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800e940:	4b80      	ldr	r3, [pc, #512]	; (800eb44 <ProcessRadioRxDone+0x528>)
 800e942:	2201      	movs	r2, #1
 800e944:	659a      	str	r2, [r3, #88]	; 0x58
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800e946:	4b7f      	ldr	r3, [pc, #508]	; (800eb44 <ProcessRadioRxDone+0x528>)
 800e948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e94a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e94e:	fb02 f303 	mul.w	r3, r2, r3
 800e952:	4a7c      	ldr	r2, [pc, #496]	; (800eb44 <ProcessRadioRxDone+0x528>)
 800e954:	6593      	str	r3, [r2, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800e956:	4b7b      	ldr	r3, [pc, #492]	; (800eb44 <ProcessRadioRxDone+0x528>)
 800e958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e95a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800e95e:	4a79      	ldr	r2, [pc, #484]	; (800eb44 <ProcessRadioRxDone+0x528>)
 800e960:	65d3      	str	r3, [r2, #92]	; 0x5c

                // Reset NbTrans to default value
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 800e962:	4b78      	ldr	r3, [pc, #480]	; (800eb44 <ProcessRadioRxDone+0x528>)
 800e964:	2201      	movs	r2, #1
 800e966:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                else
                {
                    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
                }
#else
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800e96a:	4b76      	ldr	r3, [pc, #472]	; (800eb44 <ProcessRadioRxDone+0x528>)
 800e96c:	2200      	movs	r2, #0
 800e96e:	f883 212e 	strb.w	r2, [r3, #302]	; 0x12e
#endif /* LORAMAC_VERSION */

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800e972:	f107 0318 	add.w	r3, r7, #24
 800e976:	3312      	adds	r3, #18
 800e978:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800e97c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800e980:	b2db      	uxtb	r3, r3
 800e982:	3b11      	subs	r3, #17
 800e984:	b2db      	uxtb	r3, r3
 800e986:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
 800e98a:	4b6f      	ldr	r3, [pc, #444]	; (800eb48 <ProcessRadioRxDone+0x52c>)
 800e98c:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 800e990:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800e994:	4b6b      	ldr	r3, [pc, #428]	; (800eb44 <ProcessRadioRxDone+0x528>)
 800e996:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800e99a:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 800e99e:	4611      	mov	r1, r2
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	f006 fce6 	bl	8015372 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800e9a6:	4b67      	ldr	r3, [pc, #412]	; (800eb44 <ProcessRadioRxDone+0x528>)
 800e9a8:	2202      	movs	r2, #2
 800e9aa:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
                }
#endif /* LORAMAC_VERSION */

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 800e9ae:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	f005 f9f4 	bl	8013da0 <LoRaMacConfirmQueueIsCmdActive>
 800e9b8:	4603      	mov	r3, r0
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	f000 8311 	beq.w	800efe2 <ProcessRadioRxDone+0x9c6>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 800e9c0:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800e9c4:	4619      	mov	r1, r3
 800e9c6:	2000      	movs	r0, #0
 800e9c8:	f005 f95e 	bl	8013c88 <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 800e9cc:	e309      	b.n	800efe2 <ProcessRadioRxDone+0x9c6>
#endif /* LORAMAC_VERSION */
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800e9ce:	2001      	movs	r0, #1
 800e9d0:	f005 f9e6 	bl	8013da0 <LoRaMacConfirmQueueIsCmdActive>
 800e9d4:	4603      	mov	r3, r0
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	f000 8302 	beq.w	800efe0 <ProcessRadioRxDone+0x9c4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800e9dc:	2101      	movs	r1, #1
 800e9de:	2007      	movs	r0, #7
 800e9e0:	f005 f952 	bl	8013c88 <LoRaMacConfirmQueueSetStatus>
                }
            }

            break;
 800e9e4:	e2fc      	b.n	800efe0 <ProcessRadioRxDone+0x9c4>
        }
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800e9e6:	4b58      	ldr	r3, [pc, #352]	; (800eb48 <ProcessRadioRxDone+0x52c>)
 800e9e8:	2201      	movs	r2, #1
 800e9ea:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e9ee:	4b55      	ldr	r3, [pc, #340]	; (800eb44 <ProcessRadioRxDone+0x528>)
 800e9f0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800e9f4:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800e9f8:	4b53      	ldr	r3, [pc, #332]	; (800eb48 <ProcessRadioRxDone+0x52c>)
 800e9fa:	f893 3424 	ldrb.w	r3, [r3, #1060]	; 0x424
 800e9fe:	b25b      	sxtb	r3, r3
 800ea00:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800ea04:	230d      	movs	r3, #13
 800ea06:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800ea0a:	4b4e      	ldr	r3, [pc, #312]	; (800eb44 <ProcessRadioRxDone+0x528>)
 800ea0c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d002      	beq.n	800ea1a <ProcessRadioRxDone+0x3fe>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800ea14:	230e      	movs	r3, #14
 800ea16:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
            }

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ea1a:	4b4a      	ldr	r3, [pc, #296]	; (800eb44 <ProcessRadioRxDone+0x528>)
 800ea1c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ea20:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800ea24:	4611      	mov	r1, r2
 800ea26:	4618      	mov	r0, r3
 800ea28:	f006 fc34 	bl	8015294 <RegionGetPhyParam>
 800ea2c:	4603      	mov	r3, r0
 800ea2e:	673b      	str	r3, [r7, #112]	; 0x70
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800ea30:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800ea34:	3b0d      	subs	r3, #13
 800ea36:	b29b      	uxth	r3, r3
 800ea38:	b21b      	sxth	r3, r3
 800ea3a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ea3e:	b21a      	sxth	r2, r3
 800ea40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ea42:	b21b      	sxth	r3, r3
 800ea44:	429a      	cmp	r2, r3
 800ea46:	dc03      	bgt.n	800ea50 <ProcessRadioRxDone+0x434>
 800ea48:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800ea4c:	2b0b      	cmp	r3, #11
 800ea4e:	d806      	bhi.n	800ea5e <ProcessRadioRxDone+0x442>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ea50:	4b3d      	ldr	r3, [pc, #244]	; (800eb48 <ProcessRadioRxDone+0x52c>)
 800ea52:	2201      	movs	r2, #1
 800ea54:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800ea58:	f7ff fdba 	bl	800e5d0 <PrepareRxDoneAbort>
                return;
 800ea5c:	e2e6      	b.n	800f02c <ProcessRadioRxDone+0xa10>
            }
            macMsgData.Buffer = payload;
 800ea5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ea62:	643b      	str	r3, [r7, #64]	; 0x40
            macMsgData.BufSize = size;
 800ea64:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800ea68:	b2db      	uxtb	r3, r3
 800ea6a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800ea6e:	4b37      	ldr	r3, [pc, #220]	; (800eb4c <ProcessRadioRxDone+0x530>)
 800ea70:	667b      	str	r3, [r7, #100]	; 0x64
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800ea72:	23ff      	movs	r3, #255	; 0xff
 800ea74:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800ea78:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	f006 f987 	bl	8014d90 <LoRaMacParserData>
 800ea82:	4603      	mov	r3, r0
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d006      	beq.n	800ea96 <ProcessRadioRxDone+0x47a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ea88:	4b2f      	ldr	r3, [pc, #188]	; (800eb48 <ProcessRadioRxDone+0x52c>)
 800ea8a:	2201      	movs	r2, #1
 800ea8c:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800ea90:	f7ff fd9e 	bl	800e5d0 <PrepareRxDoneAbort>
                return;
 800ea94:	e2ca      	b.n	800f02c <ProcessRadioRxDone+0xa10>
            }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Handle Class B
            // Check if we expect a ping or a multicast slot.
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800ea96:	4b2b      	ldr	r3, [pc, #172]	; (800eb44 <ProcessRadioRxDone+0x528>)
 800ea98:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800ea9c:	2b01      	cmp	r3, #1
 800ea9e:	d132      	bne.n	800eb06 <ProcessRadioRxDone+0x4ea>
            {
                if( LoRaMacClassBIsPingExpected( ) == true )
 800eaa0:	f004 fc7b 	bl	801339a <LoRaMacClassBIsPingExpected>
 800eaa4:	4603      	mov	r3, r0
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d014      	beq.n	800ead4 <ProcessRadioRxDone+0x4b8>
                {
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800eaaa:	2000      	movs	r0, #0
 800eaac:	f004 fc2c 	bl	8013308 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 800eab0:	2000      	movs	r0, #0
 800eab2:	f004 fc4d 	bl	8013350 <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800eab6:	4b24      	ldr	r3, [pc, #144]	; (800eb48 <ProcessRadioRxDone+0x52c>)
 800eab8:	2204      	movs	r2, #4
 800eaba:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800eabe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eac0:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800eac4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800eac8:	b2db      	uxtb	r3, r3
 800eaca:	4619      	mov	r1, r3
 800eacc:	4610      	mov	r0, r2
 800eace:	f004 fced 	bl	80134ac <LoRaMacClassBSetFPendingBit>
 800ead2:	e018      	b.n	800eb06 <ProcessRadioRxDone+0x4ea>
                }
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800ead4:	f004 fc68 	bl	80133a8 <LoRaMacClassBIsMulticastExpected>
 800ead8:	4603      	mov	r3, r0
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d013      	beq.n	800eb06 <ProcessRadioRxDone+0x4ea>
                {
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800eade:	2000      	movs	r0, #0
 800eae0:	f004 fc1c 	bl	801331c <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800eae4:	2000      	movs	r0, #0
 800eae6:	f004 fc3c 	bl	8013362 <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800eaea:	4b17      	ldr	r3, [pc, #92]	; (800eb48 <ProcessRadioRxDone+0x52c>)
 800eaec:	2205      	movs	r2, #5
 800eaee:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800eaf2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eaf4:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800eaf8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800eafc:	b2db      	uxtb	r3, r3
 800eafe:	4619      	mov	r1, r3
 800eb00:	4610      	mov	r0, r2
 800eb02:	f004 fcd3 	bl	80134ac <LoRaMacClassBSetFPendingBit>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800eb06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb08:	4a0f      	ldr	r2, [pc, #60]	; (800eb48 <ProcessRadioRxDone+0x52c>)
 800eb0a:	f8c2 3434 	str.w	r3, [r2, #1076]	; 0x434

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800eb0e:	f107 0212 	add.w	r2, r7, #18
 800eb12:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800eb16:	4611      	mov	r1, r2
 800eb18:	4618      	mov	r0, r3
 800eb1a:	f002 fd81 	bl	8011620 <DetermineFrameType>
 800eb1e:	4603      	mov	r3, r0
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d006      	beq.n	800eb32 <ProcessRadioRxDone+0x516>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800eb24:	4b08      	ldr	r3, [pc, #32]	; (800eb48 <ProcessRadioRxDone+0x52c>)
 800eb26:	2201      	movs	r2, #1
 800eb28:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800eb2c:	f7ff fd50 	bl	800e5d0 <PrepareRxDoneAbort>
                return;
 800eb30:	e27c      	b.n	800f02c <ProcessRadioRxDone+0xa10>
            }

            //Check if it is a multicast message
            multicast = 0;
 800eb32:	2300      	movs	r3, #0
 800eb34:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
            downLinkCounter = 0;
 800eb38:	2300      	movs	r3, #0
 800eb3a:	617b      	str	r3, [r7, #20]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
 800eb42:	e055      	b.n	800ebf0 <ProcessRadioRxDone+0x5d4>
 800eb44:	20000c5c 	.word	0x20000c5c
 800eb48:	20000740 	.word	0x20000740
 800eb4c:	20000978 	.word	0x20000978
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800eb50:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 800eb54:	499f      	ldr	r1, [pc, #636]	; (800edd4 <ProcessRadioRxDone+0x7b8>)
 800eb56:	4613      	mov	r3, r2
 800eb58:	005b      	lsls	r3, r3, #1
 800eb5a:	4413      	add	r3, r2
 800eb5c:	011b      	lsls	r3, r3, #4
 800eb5e:	440b      	add	r3, r1
 800eb60:	33ec      	adds	r3, #236	; 0xec
 800eb62:	681a      	ldr	r2, [r3, #0]
 800eb64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb66:	429a      	cmp	r2, r3
 800eb68:	d13d      	bne.n	800ebe6 <ProcessRadioRxDone+0x5ca>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800eb6a:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 800eb6e:	4999      	ldr	r1, [pc, #612]	; (800edd4 <ProcessRadioRxDone+0x7b8>)
 800eb70:	4613      	mov	r3, r2
 800eb72:	005b      	lsls	r3, r3, #1
 800eb74:	4413      	add	r3, r2
 800eb76:	011b      	lsls	r3, r3, #4
 800eb78:	440b      	add	r3, r1
 800eb7a:	33e9      	adds	r3, #233	; 0xe9
 800eb7c:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d031      	beq.n	800ebe6 <ProcessRadioRxDone+0x5ca>
                {
                    multicast = 1;
 800eb82:	2301      	movs	r3, #1
 800eb84:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800eb88:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 800eb8c:	4991      	ldr	r1, [pc, #580]	; (800edd4 <ProcessRadioRxDone+0x7b8>)
 800eb8e:	4613      	mov	r3, r2
 800eb90:	005b      	lsls	r3, r3, #1
 800eb92:	4413      	add	r3, r2
 800eb94:	011b      	lsls	r3, r3, #4
 800eb96:	440b      	add	r3, r1
 800eb98:	33ea      	adds	r3, #234	; 0xea
 800eb9a:	781b      	ldrb	r3, [r3, #0]
 800eb9c:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800eba0:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 800eba4:	498b      	ldr	r1, [pc, #556]	; (800edd4 <ProcessRadioRxDone+0x7b8>)
 800eba6:	4613      	mov	r3, r2
 800eba8:	005b      	lsls	r3, r3, #1
 800ebaa:	4413      	add	r3, r2
 800ebac:	011b      	lsls	r3, r3, #4
 800ebae:	440b      	add	r3, r1
 800ebb0:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	617b      	str	r3, [r7, #20]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800ebba:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 800ebbe:	4985      	ldr	r1, [pc, #532]	; (800edd4 <ProcessRadioRxDone+0x7b8>)
 800ebc0:	4613      	mov	r3, r2
 800ebc2:	005b      	lsls	r3, r3, #1
 800ebc4:	4413      	add	r3, r2
 800ebc6:	011b      	lsls	r3, r3, #4
 800ebc8:	440b      	add	r3, r1
 800ebca:	33ec      	adds	r3, #236	; 0xec
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800ebd2:	4b80      	ldr	r3, [pc, #512]	; (800edd4 <ProcessRadioRxDone+0x7b8>)
 800ebd4:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800ebd8:	2b02      	cmp	r3, #2
 800ebda:	d10e      	bne.n	800ebfa <ProcessRadioRxDone+0x5de>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800ebdc:	4b7e      	ldr	r3, [pc, #504]	; (800edd8 <ProcessRadioRxDone+0x7bc>)
 800ebde:	2203      	movs	r2, #3
 800ebe0:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    }
                    break;
 800ebe4:	e009      	b.n	800ebfa <ProcessRadioRxDone+0x5de>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ebe6:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 800ebea:	3301      	adds	r3, #1
 800ebec:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
 800ebf0:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d0ab      	beq.n	800eb50 <ProcessRadioRxDone+0x534>
 800ebf8:	e000      	b.n	800ebfc <ProcessRadioRxDone+0x5e0>
                    break;
 800ebfa:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800ebfc:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800ec00:	2b01      	cmp	r3, #1
 800ec02:	d117      	bne.n	800ec34 <ProcessRadioRxDone+0x618>
 800ec04:	7cbb      	ldrb	r3, [r7, #18]
 800ec06:	2b03      	cmp	r3, #3
 800ec08:	d10d      	bne.n	800ec26 <ProcessRadioRxDone+0x60a>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800ec0a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800ec0e:	f003 0320 	and.w	r3, r3, #32
 800ec12:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d106      	bne.n	800ec26 <ProcessRadioRxDone+0x60a>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800ec18:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800ec1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec20:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d006      	beq.n	800ec34 <ProcessRadioRxDone+0x618>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ec26:	4b6c      	ldr	r3, [pc, #432]	; (800edd8 <ProcessRadioRxDone+0x7bc>)
 800ec28:	2201      	movs	r2, #1
 800ec2a:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800ec2e:	f7ff fccf 	bl	800e5d0 <PrepareRxDoneAbort>
                return;
 800ec32:	e1fb      	b.n	800f02c <ProcessRadioRxDone+0xa10>
                PrepareRxDoneAbort( );
                return;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 800ec34:	7cb9      	ldrb	r1, [r7, #18]
 800ec36:	4c67      	ldr	r4, [pc, #412]	; (800edd4 <ProcessRadioRxDone+0x7b8>)
 800ec38:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800ec3c:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 800ec40:	f107 0314 	add.w	r3, r7, #20
 800ec44:	9301      	str	r3, [sp, #4]
 800ec46:	f107 0313 	add.w	r3, r7, #19
 800ec4a:	9300      	str	r3, [sp, #0]
 800ec4c:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 800ec50:	f000 fee4 	bl	800fa1c <GetFCntDown>
 800ec54:	4603      	mov	r3, r0
 800ec56:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800ec5a:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d017      	beq.n	800ec92 <ProcessRadioRxDone+0x676>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800ec62:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 800ec66:	2b07      	cmp	r3, #7
 800ec68:	d104      	bne.n	800ec74 <ProcessRadioRxDone+0x658>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800ec6a:	4b5b      	ldr	r3, [pc, #364]	; (800edd8 <ProcessRadioRxDone+0x7bc>)
 800ec6c:	2208      	movs	r2, #8
 800ec6e:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 800ec72:	e003      	b.n	800ec7c <ProcessRadioRxDone+0x660>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ec74:	4b58      	ldr	r3, [pc, #352]	; (800edd8 <ProcessRadioRxDone+0x7bc>)
 800ec76:	2201      	movs	r2, #1
 800ec78:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800ec7c:	697b      	ldr	r3, [r7, #20]
 800ec7e:	4a56      	ldr	r2, [pc, #344]	; (800edd8 <ProcessRadioRxDone+0x7bc>)
 800ec80:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800ec84:	697b      	ldr	r3, [r7, #20]
 800ec86:	4a54      	ldr	r2, [pc, #336]	; (800edd8 <ProcessRadioRxDone+0x7bc>)
 800ec88:	f8c2 346c 	str.w	r3, [r2, #1132]	; 0x46c
                PrepareRxDoneAbort( );
 800ec8c:	f7ff fca0 	bl	800e5d0 <PrepareRxDoneAbort>
                return;
 800ec90:	e1cc      	b.n	800f02c <ProcessRadioRxDone+0xa10>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800ec92:	7cfa      	ldrb	r2, [r7, #19]
 800ec94:	6979      	ldr	r1, [r7, #20]
 800ec96:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 800ec9a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ec9e:	9300      	str	r3, [sp, #0]
 800eca0:	460b      	mov	r3, r1
 800eca2:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800eca6:	f005 fed3 	bl	8014a50 <LoRaMacCryptoUnsecureMessage>
 800ecaa:	4603      	mov	r3, r0
 800ecac:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800ecb0:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d00f      	beq.n	800ecd8 <ProcessRadioRxDone+0x6bc>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800ecb8:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 800ecbc:	2b02      	cmp	r3, #2
 800ecbe:	d104      	bne.n	800ecca <ProcessRadioRxDone+0x6ae>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800ecc0:	4b45      	ldr	r3, [pc, #276]	; (800edd8 <ProcessRadioRxDone+0x7bc>)
 800ecc2:	220a      	movs	r2, #10
 800ecc4:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 800ecc8:	e003      	b.n	800ecd2 <ProcessRadioRxDone+0x6b6>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800ecca:	4b43      	ldr	r3, [pc, #268]	; (800edd8 <ProcessRadioRxDone+0x7bc>)
 800eccc:	220b      	movs	r2, #11
 800ecce:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                }
                PrepareRxDoneAbort( );
 800ecd2:	f7ff fc7d 	bl	800e5d0 <PrepareRxDoneAbort>
                return;
 800ecd6:	e1a9      	b.n	800f02c <ProcessRadioRxDone+0xa10>
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800ecd8:	4b3f      	ldr	r3, [pc, #252]	; (800edd8 <ProcessRadioRxDone+0x7bc>)
 800ecda:	2200      	movs	r2, #0
 800ecdc:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Multicast = multicast;
 800ece0:	4a3d      	ldr	r2, [pc, #244]	; (800edd8 <ProcessRadioRxDone+0x7bc>)
 800ece2:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800ece6:	f882 3422 	strb.w	r3, [r2, #1058]	; 0x422
            MacCtx.McpsIndication.Buffer = NULL;
 800ecea:	4b3b      	ldr	r3, [pc, #236]	; (800edd8 <ProcessRadioRxDone+0x7bc>)
 800ecec:	2200      	movs	r2, #0
 800ecee:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = 0;
 800ecf2:	4b39      	ldr	r3, [pc, #228]	; (800edd8 <ProcessRadioRxDone+0x7bc>)
 800ecf4:	2200      	movs	r2, #0
 800ecf6:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800ecfa:	697b      	ldr	r3, [r7, #20]
 800ecfc:	4a36      	ldr	r2, [pc, #216]	; (800edd8 <ProcessRadioRxDone+0x7bc>)
 800ecfe:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800ed02:	697b      	ldr	r3, [r7, #20]
 800ed04:	4a34      	ldr	r2, [pc, #208]	; (800edd8 <ProcessRadioRxDone+0x7bc>)
 800ed06:	f8c2 346c 	str.w	r3, [r2, #1132]	; 0x46c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800ed0a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800ed0e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ed12:	b2db      	uxtb	r3, r3
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	bf14      	ite	ne
 800ed18:	2301      	movne	r3, #1
 800ed1a:	2300      	moveq	r3, #0
 800ed1c:	b2da      	uxtb	r2, r3
 800ed1e:	4b2e      	ldr	r3, [pc, #184]	; (800edd8 <ProcessRadioRxDone+0x7bc>)
 800ed20:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800ed24:	4b2c      	ldr	r3, [pc, #176]	; (800edd8 <ProcessRadioRxDone+0x7bc>)
 800ed26:	2200      	movs	r2, #0
 800ed28:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800ed2c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800ed30:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ed34:	b2db      	uxtb	r3, r3
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	bf14      	ite	ne
 800ed3a:	2301      	movne	r3, #1
 800ed3c:	2300      	moveq	r3, #0
 800ed3e:	b2da      	uxtb	r2, r3
 800ed40:	4b25      	ldr	r3, [pc, #148]	; (800edd8 <ProcessRadioRxDone+0x7bc>)
 800ed42:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800ed46:	4b24      	ldr	r3, [pc, #144]	; (800edd8 <ProcessRadioRxDone+0x7bc>)
 800ed48:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d004      	beq.n	800ed5a <ProcessRadioRxDone+0x73e>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800ed50:	4b21      	ldr	r3, [pc, #132]	; (800edd8 <ProcessRadioRxDone+0x7bc>)
 800ed52:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800ed56:	2b01      	cmp	r3, #1
 800ed58:	d106      	bne.n	800ed68 <ProcessRadioRxDone+0x74c>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800ed5a:	4b1e      	ldr	r3, [pc, #120]	; (800edd4 <ProcessRadioRxDone+0x7b8>)
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	629a      	str	r2, [r3, #40]	; 0x28
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                Nvm.MacGroup2.DownlinkReceived = true;
 800ed60:	4b1c      	ldr	r3, [pc, #112]	; (800edd4 <ProcessRadioRxDone+0x7b8>)
 800ed62:	2201      	movs	r2, #1
 800ed64:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800ed68:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800ed6c:	2b01      	cmp	r3, #1
 800ed6e:	d104      	bne.n	800ed7a <ProcessRadioRxDone+0x75e>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800ed70:	4b19      	ldr	r3, [pc, #100]	; (800edd8 <ProcessRadioRxDone+0x7bc>)
 800ed72:	2202      	movs	r2, #2
 800ed74:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 800ed78:	e03a      	b.n	800edf0 <ProcessRadioRxDone+0x7d4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800ed7a:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800ed7e:	f023 031f 	bic.w	r3, r3, #31
 800ed82:	b2db      	uxtb	r3, r3
 800ed84:	2ba0      	cmp	r3, #160	; 0xa0
 800ed86:	d12b      	bne.n	800ede0 <ProcessRadioRxDone+0x7c4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800ed88:	4b12      	ldr	r3, [pc, #72]	; (800edd4 <ProcessRadioRxDone+0x7b8>)
 800ed8a:	2201      	movs	r2, #1
 800ed8c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800ed90:	4b10      	ldr	r3, [pc, #64]	; (800edd4 <ProcessRadioRxDone+0x7b8>)
 800ed92:	f893 312e 	ldrb.w	r3, [r3, #302]	; 0x12e
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d102      	bne.n	800eda0 <ProcessRadioRxDone+0x784>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800ed9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed9c:	4a0d      	ldr	r2, [pc, #52]	; (800edd4 <ProcessRadioRxDone+0x7b8>)
 800ed9e:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800eda0:	4b0d      	ldr	r3, [pc, #52]	; (800edd8 <ProcessRadioRxDone+0x7bc>)
 800eda2:	2201      	movs	r2, #1
 800eda4:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // Handle response timeout for class c and class b downlinks
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800eda8:	4b0b      	ldr	r3, [pc, #44]	; (800edd8 <ProcessRadioRxDone+0x7bc>)
 800edaa:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d01e      	beq.n	800edf0 <ProcessRadioRxDone+0x7d4>
                        ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) )
 800edb2:	4b09      	ldr	r3, [pc, #36]	; (800edd8 <ProcessRadioRxDone+0x7bc>)
 800edb4:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800edb8:	2b01      	cmp	r3, #1
 800edba:	d019      	beq.n	800edf0 <ProcessRadioRxDone+0x7d4>
                    {
                        // Calculate timeout
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800edbc:	4b05      	ldr	r3, [pc, #20]	; (800edd4 <ProcessRadioRxDone+0x7b8>)
 800edbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800edc2:	4a05      	ldr	r2, [pc, #20]	; (800edd8 <ProcessRadioRxDone+0x7bc>)
 800edc4:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 800edc8:	4b04      	ldr	r3, [pc, #16]	; (800eddc <ProcessRadioRxDone+0x7c0>)
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	4a02      	ldr	r2, [pc, #8]	; (800edd8 <ProcessRadioRxDone+0x7bc>)
 800edce:	f8c2 3498 	str.w	r3, [r2, #1176]	; 0x498
 800edd2:	e00d      	b.n	800edf0 <ProcessRadioRxDone+0x7d4>
 800edd4:	20000c5c 	.word	0x20000c5c
 800edd8:	20000740 	.word	0x20000740
 800eddc:	2000188c 	.word	0x2000188c
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800ede0:	4b94      	ldr	r3, [pc, #592]	; (800f034 <ProcessRadioRxDone+0xa18>)
 800ede2:	2200      	movs	r2, #0
 800ede4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800ede8:	4b93      	ldr	r3, [pc, #588]	; (800f038 <ProcessRadioRxDone+0xa1c>)
 800edea:	2200      	movs	r2, #0
 800edec:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
            }

            // Set the pending status
            /* if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
                ( MacCtx.McpsIndication.ResponseTimeout > 0 ) ) */
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 800edf0:	4b90      	ldr	r3, [pc, #576]	; (800f034 <ProcessRadioRxDone+0xa18>)
 800edf2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d106      	bne.n	800ee08 <ProcessRadioRxDone+0x7ec>
 800edfa:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800edfe:	f003 0310 	and.w	r3, r3, #16
 800ee02:	b2db      	uxtb	r3, r3
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d008      	beq.n	800ee1a <ProcessRadioRxDone+0x7fe>
 800ee08:	4b8a      	ldr	r3, [pc, #552]	; (800f034 <ProcessRadioRxDone+0xa18>)
 800ee0a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d103      	bne.n	800ee1a <ProcessRadioRxDone+0x7fe>
            {
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 800ee12:	4b89      	ldr	r3, [pc, #548]	; (800f038 <ProcessRadioRxDone+0xa1c>)
 800ee14:	2201      	movs	r2, #1
 800ee16:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800ee1a:	4b87      	ldr	r3, [pc, #540]	; (800f038 <ProcessRadioRxDone+0xa1c>)
 800ee1c:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800ee20:	4a85      	ldr	r2, [pc, #532]	; (800f038 <ProcessRadioRxDone+0xa1c>)
 800ee22:	f892 2440 	ldrb.w	r2, [r2, #1088]	; 0x440
 800ee26:	f897 104c 	ldrb.w	r1, [r7, #76]	; 0x4c
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	f001 ff8a 	bl	8010d44 <RemoveMacCommands>

            switch( fType )
 800ee30:	7cbb      	ldrb	r3, [r7, #18]
 800ee32:	2b03      	cmp	r3, #3
 800ee34:	d873      	bhi.n	800ef1e <ProcessRadioRxDone+0x902>
 800ee36:	a201      	add	r2, pc, #4	; (adr r2, 800ee3c <ProcessRadioRxDone+0x820>)
 800ee38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee3c:	0800ee4d 	.word	0x0800ee4d
 800ee40:	0800ee9d 	.word	0x0800ee9d
 800ee44:	0800eed3 	.word	0x0800eed3
 800ee48:	0800eef9 	.word	0x0800eef9
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800ee4c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800ee50:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800ee54:	b2db      	uxtb	r3, r3
 800ee56:	461c      	mov	r4, r3
 800ee58:	4b77      	ldr	r3, [pc, #476]	; (800f038 <ProcessRadioRxDone+0xa1c>)
 800ee5a:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800ee5e:	f997 108f 	ldrsb.w	r1, [r7, #143]	; 0x8f
 800ee62:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800ee66:	f102 0010 	add.w	r0, r2, #16
 800ee6a:	9300      	str	r3, [sp, #0]
 800ee6c:	460b      	mov	r3, r1
 800ee6e:	4622      	mov	r2, r4
 800ee70:	2100      	movs	r1, #0
 800ee72:	f000 ff4f 	bl	800fd14 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800ee76:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800ee7a:	4b6f      	ldr	r3, [pc, #444]	; (800f038 <ProcessRadioRxDone+0xa1c>)
 800ee7c:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800ee80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ee82:	4a6d      	ldr	r2, [pc, #436]	; (800f038 <ProcessRadioRxDone+0xa1c>)
 800ee84:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800ee88:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 800ee8c:	4b6a      	ldr	r3, [pc, #424]	; (800f038 <ProcessRadioRxDone+0xa1c>)
 800ee8e:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 800ee92:	4b69      	ldr	r3, [pc, #420]	; (800f038 <ProcessRadioRxDone+0xa1c>)
 800ee94:	2201      	movs	r2, #1
 800ee96:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
                    break;
 800ee9a:	e047      	b.n	800ef2c <ProcessRadioRxDone+0x910>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800ee9c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800eea0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800eea4:	b2db      	uxtb	r3, r3
 800eea6:	461c      	mov	r4, r3
 800eea8:	4b63      	ldr	r3, [pc, #396]	; (800f038 <ProcessRadioRxDone+0xa1c>)
 800eeaa:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800eeae:	f997 108f 	ldrsb.w	r1, [r7, #143]	; 0x8f
 800eeb2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800eeb6:	f102 0010 	add.w	r0, r2, #16
 800eeba:	9300      	str	r3, [sp, #0]
 800eebc:	460b      	mov	r3, r1
 800eebe:	4622      	mov	r2, r4
 800eec0:	2100      	movs	r1, #0
 800eec2:	f000 ff27 	bl	800fd14 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800eec6:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800eeca:	4b5b      	ldr	r3, [pc, #364]	; (800f038 <ProcessRadioRxDone+0xa1c>)
 800eecc:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    break;
 800eed0:	e02c      	b.n	800ef2c <ProcessRadioRxDone+0x910>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800eed2:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800eed4:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 800eed8:	4b57      	ldr	r3, [pc, #348]	; (800f038 <ProcessRadioRxDone+0xa1c>)
 800eeda:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800eede:	f997 108f 	ldrsb.w	r1, [r7, #143]	; 0x8f
 800eee2:	9300      	str	r3, [sp, #0]
 800eee4:	460b      	mov	r3, r1
 800eee6:	2100      	movs	r1, #0
 800eee8:	f000 ff14 	bl	800fd14 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800eeec:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800eef0:	4b51      	ldr	r3, [pc, #324]	; (800f038 <ProcessRadioRxDone+0xa1c>)
 800eef2:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    break;
 800eef6:	e019      	b.n	800ef2c <ProcessRadioRxDone+0x910>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800eef8:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800eefc:	4b4e      	ldr	r3, [pc, #312]	; (800f038 <ProcessRadioRxDone+0xa1c>)
 800eefe:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800ef02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ef04:	4a4c      	ldr	r2, [pc, #304]	; (800f038 <ProcessRadioRxDone+0xa1c>)
 800ef06:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800ef0a:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 800ef0e:	4b4a      	ldr	r3, [pc, #296]	; (800f038 <ProcessRadioRxDone+0xa1c>)
 800ef10:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 800ef14:	4b48      	ldr	r3, [pc, #288]	; (800f038 <ProcessRadioRxDone+0xa1c>)
 800ef16:	2201      	movs	r2, #1
 800ef18:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
                    break;
 800ef1c:	e006      	b.n	800ef2c <ProcessRadioRxDone+0x910>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ef1e:	4b46      	ldr	r3, [pc, #280]	; (800f038 <ProcessRadioRxDone+0xa1c>)
 800ef20:	2201      	movs	r2, #1
 800ef22:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                    PrepareRxDoneAbort( );
 800ef26:	f7ff fb53 	bl	800e5d0 <PrepareRxDoneAbort>
                    break;
 800ef2a:	bf00      	nop
                }
            }
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800ef2c:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800ef30:	2be0      	cmp	r3, #224	; 0xe0
 800ef32:	d118      	bne.n	800ef66 <ProcessRadioRxDone+0x94a>
 800ef34:	4b3f      	ldr	r3, [pc, #252]	; (800f034 <ProcessRadioRxDone+0xa18>)
 800ef36:	f893 311f 	ldrb.w	r3, [r3, #287]	; 0x11f
 800ef3a:	f083 0301 	eor.w	r3, r3, #1
 800ef3e:	b2db      	uxtb	r3, r3
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d010      	beq.n	800ef66 <ProcessRadioRxDone+0x94a>
            { // Do not notify the upper layer of data reception on FPort LORAMAC_CERT_FPORT if the port
              // handling is disabled.
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 800ef44:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800ef48:	4b3b      	ldr	r3, [pc, #236]	; (800f038 <ProcessRadioRxDone+0xa1c>)
 800ef4a:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                MacCtx.McpsIndication.Buffer = NULL;
 800ef4e:	4b3a      	ldr	r3, [pc, #232]	; (800f038 <ProcessRadioRxDone+0xa1c>)
 800ef50:	2200      	movs	r2, #0
 800ef52:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
                MacCtx.McpsIndication.BufferSize = 0;
 800ef56:	4b38      	ldr	r3, [pc, #224]	; (800f038 <ProcessRadioRxDone+0xa1c>)
 800ef58:	2200      	movs	r2, #0
 800ef5a:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
                MacCtx.McpsIndication.RxData = false;
 800ef5e:	4b36      	ldr	r3, [pc, #216]	; (800f038 <ProcessRadioRxDone+0xa1c>)
 800ef60:	2200      	movs	r2, #0
 800ef62:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800ef66:	4a34      	ldr	r2, [pc, #208]	; (800f038 <ProcessRadioRxDone+0xa1c>)
 800ef68:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800ef6c:	f043 0302 	orr.w	r3, r3, #2
 800ef70:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491

            break;
 800ef74:	e035      	b.n	800efe2 <ProcessRadioRxDone+0x9c6>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800ef76:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800ef7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ef7e:	18d1      	adds	r1, r2, r3
 800ef80:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800ef84:	b29b      	uxth	r3, r3
 800ef86:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 800ef8a:	1ad3      	subs	r3, r2, r3
 800ef8c:	b29b      	uxth	r3, r3
 800ef8e:	461a      	mov	r2, r3
 800ef90:	482a      	ldr	r0, [pc, #168]	; (800f03c <ProcessRadioRxDone+0xa20>)
 800ef92:	f009 ff80 	bl	8018e96 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800ef96:	4b28      	ldr	r3, [pc, #160]	; (800f038 <ProcessRadioRxDone+0xa1c>)
 800ef98:	2203      	movs	r2, #3
 800ef9a:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800ef9e:	4b26      	ldr	r3, [pc, #152]	; (800f038 <ProcessRadioRxDone+0xa1c>)
 800efa0:	2200      	movs	r2, #0
 800efa2:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800efa6:	4b24      	ldr	r3, [pc, #144]	; (800f038 <ProcessRadioRxDone+0xa1c>)
 800efa8:	4a24      	ldr	r2, [pc, #144]	; (800f03c <ProcessRadioRxDone+0xa20>)
 800efaa:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800efae:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800efb2:	b2da      	uxtb	r2, r3
 800efb4:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800efb8:	1ad3      	subs	r3, r2, r3
 800efba:	b2da      	uxtb	r2, r3
 800efbc:	4b1e      	ldr	r3, [pc, #120]	; (800f038 <ProcessRadioRxDone+0xa1c>)
 800efbe:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800efc2:	4a1d      	ldr	r2, [pc, #116]	; (800f038 <ProcessRadioRxDone+0xa1c>)
 800efc4:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800efc8:	f043 0302 	orr.w	r3, r3, #2
 800efcc:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
            break;
 800efd0:	e007      	b.n	800efe2 <ProcessRadioRxDone+0x9c6>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800efd2:	4b19      	ldr	r3, [pc, #100]	; (800f038 <ProcessRadioRxDone+0xa1c>)
 800efd4:	2201      	movs	r2, #1
 800efd6:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            PrepareRxDoneAbort( );
 800efda:	f7ff faf9 	bl	800e5d0 <PrepareRxDoneAbort>
            break;
 800efde:	e000      	b.n	800efe2 <ProcessRadioRxDone+0x9c6>
            break;
 800efe0:	bf00      	nop
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Verify if we need to disable the RetransmitTimeoutTimer
    // Only applies if downlink is received on Rx1 or Rx2 windows.
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800efe2:	4b15      	ldr	r3, [pc, #84]	; (800f038 <ProcessRadioRxDone+0xa1c>)
 800efe4:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d004      	beq.n	800eff6 <ProcessRadioRxDone+0x9da>
        ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800efec:	4b12      	ldr	r3, [pc, #72]	; (800f038 <ProcessRadioRxDone+0xa1c>)
 800efee:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800eff2:	2b01      	cmp	r3, #1
 800eff4:	d10c      	bne.n	800f010 <ProcessRadioRxDone+0x9f4>
    {
        if( MacCtx.NodeAckRequested == true )
 800eff6:	4b10      	ldr	r3, [pc, #64]	; (800f038 <ProcessRadioRxDone+0xa1c>)
 800eff8:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800effc:	2b00      	cmp	r3, #0
 800effe:	d007      	beq.n	800f010 <ProcessRadioRxDone+0x9f4>
        {
            if( MacCtx.McpsConfirm.AckReceived == true )
 800f000:	4b0d      	ldr	r3, [pc, #52]	; (800f038 <ProcessRadioRxDone+0xa1c>)
 800f002:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 800f006:	2b00      	cmp	r3, #0
 800f008:	d002      	beq.n	800f010 <ProcessRadioRxDone+0x9f4>
            {
                OnRetransmitTimeoutTimerEvent( NULL );
 800f00a:	2000      	movs	r0, #0
 800f00c:	f000 fcec 	bl	800f9e8 <OnRetransmitTimeoutTimerEvent>
            }
        }
    }

    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 800f010:	4b09      	ldr	r3, [pc, #36]	; (800f038 <ProcessRadioRxDone+0xa1c>)
 800f012:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800f016:	2b02      	cmp	r3, #2
 800f018:	d006      	beq.n	800f028 <ProcessRadioRxDone+0xa0c>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800f01a:	4a07      	ldr	r2, [pc, #28]	; (800f038 <ProcessRadioRxDone+0xa1c>)
 800f01c:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f020:	f043 0310 	orr.w	r3, r3, #16
 800f024:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 800f028:	f7ff fa14 	bl	800e454 <UpdateRxSlotIdleState>
}
 800f02c:	37a4      	adds	r7, #164	; 0xa4
 800f02e:	46bd      	mov	sp, r7
 800f030:	bd90      	pop	{r4, r7, pc}
 800f032:	bf00      	nop
 800f034:	20000c5c 	.word	0x20000c5c
 800f038:	20000740 	.word	0x20000740
 800f03c:	20000978 	.word	0x20000978

0800f040 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800f040:	b580      	push	{r7, lr}
 800f042:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f044:	4b11      	ldr	r3, [pc, #68]	; (800f08c <ProcessRadioTxTimeout+0x4c>)
 800f046:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800f04a:	2b02      	cmp	r3, #2
 800f04c:	d002      	beq.n	800f054 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800f04e:	4b10      	ldr	r3, [pc, #64]	; (800f090 <ProcessRadioTxTimeout+0x50>)
 800f050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f052:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800f054:	f7ff f9fe 	bl	800e454 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800f058:	4b0e      	ldr	r3, [pc, #56]	; (800f094 <ProcessRadioTxTimeout+0x54>)
 800f05a:	2202      	movs	r2, #2
 800f05c:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800f060:	2002      	movs	r0, #2
 800f062:	f004 fe69 	bl	8013d38 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800f066:	4b0b      	ldr	r3, [pc, #44]	; (800f094 <ProcessRadioTxTimeout+0x54>)
 800f068:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d003      	beq.n	800f078 <ProcessRadioTxTimeout+0x38>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        MacCtx.RetransmitTimeoutRetry = true;
 800f070:	4b08      	ldr	r3, [pc, #32]	; (800f094 <ProcessRadioTxTimeout+0x54>)
 800f072:	2201      	movs	r2, #1
 800f074:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800f078:	4a06      	ldr	r2, [pc, #24]	; (800f094 <ProcessRadioTxTimeout+0x54>)
 800f07a:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f07e:	f043 0310 	orr.w	r3, r3, #16
 800f082:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
}
 800f086:	bf00      	nop
 800f088:	bd80      	pop	{r7, pc}
 800f08a:	bf00      	nop
 800f08c:	20000c5c 	.word	0x20000c5c
 800f090:	0801ea64 	.word	0x0801ea64
 800f094:	20000740 	.word	0x20000740

0800f098 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800f098:	b580      	push	{r7, lr}
 800f09a:	b084      	sub	sp, #16
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	4603      	mov	r3, r0
 800f0a0:	460a      	mov	r2, r1
 800f0a2:	71fb      	strb	r3, [r7, #7]
 800f0a4:	4613      	mov	r3, r2
 800f0a6:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f0ac:	4b3d      	ldr	r3, [pc, #244]	; (800f1a4 <HandleRadioRxErrorTimeout+0x10c>)
 800f0ae:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800f0b2:	2b02      	cmp	r3, #2
 800f0b4:	d002      	beq.n	800f0bc <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800f0b6:	4b3c      	ldr	r3, [pc, #240]	; (800f1a8 <HandleRadioRxErrorTimeout+0x110>)
 800f0b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0ba:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800f0bc:	f004 f966 	bl	801338c <LoRaMacClassBIsBeaconExpected>
 800f0c0:	4603      	mov	r3, r0
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d007      	beq.n	800f0d6 <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800f0c6:	2002      	movs	r0, #2
 800f0c8:	f004 f914 	bl	80132f4 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800f0cc:	2000      	movs	r0, #0
 800f0ce:	f004 f936 	bl	801333e <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800f0d2:	2301      	movs	r3, #1
 800f0d4:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f0d6:	4b33      	ldr	r3, [pc, #204]	; (800f1a4 <HandleRadioRxErrorTimeout+0x10c>)
 800f0d8:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800f0dc:	2b01      	cmp	r3, #1
 800f0de:	d119      	bne.n	800f114 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800f0e0:	f004 f95b 	bl	801339a <LoRaMacClassBIsPingExpected>
 800f0e4:	4603      	mov	r3, r0
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d007      	beq.n	800f0fa <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f0ea:	2000      	movs	r0, #0
 800f0ec:	f004 f90c 	bl	8013308 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800f0f0:	2000      	movs	r0, #0
 800f0f2:	f004 f92d 	bl	8013350 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800f0f6:	2301      	movs	r3, #1
 800f0f8:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800f0fa:	f004 f955 	bl	80133a8 <LoRaMacClassBIsMulticastExpected>
 800f0fe:	4603      	mov	r3, r0
 800f100:	2b00      	cmp	r3, #0
 800f102:	d007      	beq.n	800f114 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f104:	2000      	movs	r0, #0
 800f106:	f004 f909 	bl	801331c <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800f10a:	2000      	movs	r0, #0
 800f10c:	f004 f929 	bl	8013362 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800f110:	2301      	movs	r3, #1
 800f112:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800f114:	7bfb      	ldrb	r3, [r7, #15]
 800f116:	f083 0301 	eor.w	r3, r3, #1
 800f11a:	b2db      	uxtb	r3, r3
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d03b      	beq.n	800f198 <HandleRadioRxErrorTimeout+0x100>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800f120:	4b22      	ldr	r3, [pc, #136]	; (800f1ac <HandleRadioRxErrorTimeout+0x114>)
 800f122:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 800f126:	2b00      	cmp	r3, #0
 800f128:	d122      	bne.n	800f170 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800f12a:	4b20      	ldr	r3, [pc, #128]	; (800f1ac <HandleRadioRxErrorTimeout+0x114>)
 800f12c:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800f130:	2b00      	cmp	r3, #0
 800f132:	d003      	beq.n	800f13c <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800f134:	4a1d      	ldr	r2, [pc, #116]	; (800f1ac <HandleRadioRxErrorTimeout+0x114>)
 800f136:	79fb      	ldrb	r3, [r7, #7]
 800f138:	f882 3441 	strb.w	r3, [r2, #1089]	; 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800f13c:	79fb      	ldrb	r3, [r7, #7]
 800f13e:	4618      	mov	r0, r3
 800f140:	f004 fdfa 	bl	8013d38 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800f144:	4b17      	ldr	r3, [pc, #92]	; (800f1a4 <HandleRadioRxErrorTimeout+0x10c>)
 800f146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f148:	4618      	mov	r0, r3
 800f14a:	f00e f96b 	bl	801d424 <UTIL_TIMER_GetElapsedTime>
 800f14e:	4602      	mov	r2, r0
 800f150:	4b16      	ldr	r3, [pc, #88]	; (800f1ac <HandleRadioRxErrorTimeout+0x114>)
 800f152:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800f156:	429a      	cmp	r2, r3
 800f158:	d31e      	bcc.n	800f198 <HandleRadioRxErrorTimeout+0x100>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800f15a:	4815      	ldr	r0, [pc, #84]	; (800f1b0 <HandleRadioRxErrorTimeout+0x118>)
 800f15c:	f00e f836 	bl	801d1cc <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800f160:	4a12      	ldr	r2, [pc, #72]	; (800f1ac <HandleRadioRxErrorTimeout+0x114>)
 800f162:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f166:	f043 0310 	orr.w	r3, r3, #16
 800f16a:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 800f16e:	e013      	b.n	800f198 <HandleRadioRxErrorTimeout+0x100>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800f170:	4b0e      	ldr	r3, [pc, #56]	; (800f1ac <HandleRadioRxErrorTimeout+0x114>)
 800f172:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800f176:	2b00      	cmp	r3, #0
 800f178:	d003      	beq.n	800f182 <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800f17a:	4a0c      	ldr	r2, [pc, #48]	; (800f1ac <HandleRadioRxErrorTimeout+0x114>)
 800f17c:	79bb      	ldrb	r3, [r7, #6]
 800f17e:	f882 3441 	strb.w	r3, [r2, #1089]	; 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800f182:	79bb      	ldrb	r3, [r7, #6]
 800f184:	4618      	mov	r0, r3
 800f186:	f004 fdd7 	bl	8013d38 <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.MacFlags.Bits.MacDone = 1;
 800f18a:	4a08      	ldr	r2, [pc, #32]	; (800f1ac <HandleRadioRxErrorTimeout+0x114>)
 800f18c:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f190:	f043 0310 	orr.w	r3, r3, #16
 800f194:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 800f198:	f7ff f95c 	bl	800e454 <UpdateRxSlotIdleState>
}
 800f19c:	bf00      	nop
 800f19e:	3710      	adds	r7, #16
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	bd80      	pop	{r7, pc}
 800f1a4:	20000c5c 	.word	0x20000c5c
 800f1a8:	0801ea64 	.word	0x0801ea64
 800f1ac:	20000740 	.word	0x20000740
 800f1b0:	20000ad8 	.word	0x20000ad8

0800f1b4 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800f1b4:	b580      	push	{r7, lr}
 800f1b6:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800f1b8:	2106      	movs	r1, #6
 800f1ba:	2005      	movs	r0, #5
 800f1bc:	f7ff ff6c 	bl	800f098 <HandleRadioRxErrorTimeout>
}
 800f1c0:	bf00      	nop
 800f1c2:	bd80      	pop	{r7, pc}

0800f1c4 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800f1c4:	b580      	push	{r7, lr}
 800f1c6:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800f1c8:	2104      	movs	r1, #4
 800f1ca:	2003      	movs	r0, #3
 800f1cc:	f7ff ff64 	bl	800f098 <HandleRadioRxErrorTimeout>
}
 800f1d0:	bf00      	nop
 800f1d2:	bd80      	pop	{r7, pc}

0800f1d4 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800f1d4:	b580      	push	{r7, lr}
 800f1d6:	b084      	sub	sp, #16
 800f1d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f1da:	f3ef 8310 	mrs	r3, PRIMASK
 800f1de:	607b      	str	r3, [r7, #4]
  return(result);
 800f1e0:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800f1e2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800f1e4:	b672      	cpsid	i
}
 800f1e6:	bf00      	nop
    events = LoRaMacRadioEvents;
 800f1e8:	4b1d      	ldr	r3, [pc, #116]	; (800f260 <LoRaMacHandleIrqEvents+0x8c>)
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800f1ee:	4b1c      	ldr	r3, [pc, #112]	; (800f260 <LoRaMacHandleIrqEvents+0x8c>)
 800f1f0:	2200      	movs	r2, #0
 800f1f2:	601a      	str	r2, [r3, #0]
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f1f8:	68bb      	ldr	r3, [r7, #8]
 800f1fa:	f383 8810 	msr	PRIMASK, r3
}
 800f1fe:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800f200:	683b      	ldr	r3, [r7, #0]
 800f202:	2b00      	cmp	r3, #0
 800f204:	d027      	beq.n	800f256 <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800f206:	783b      	ldrb	r3, [r7, #0]
 800f208:	f003 0320 	and.w	r3, r3, #32
 800f20c:	b2db      	uxtb	r3, r3
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d001      	beq.n	800f216 <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800f212:	f7ff f937 	bl	800e484 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800f216:	783b      	ldrb	r3, [r7, #0]
 800f218:	f003 0310 	and.w	r3, r3, #16
 800f21c:	b2db      	uxtb	r3, r3
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d001      	beq.n	800f226 <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800f222:	f7ff f9fb 	bl	800e61c <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800f226:	783b      	ldrb	r3, [r7, #0]
 800f228:	f003 0308 	and.w	r3, r3, #8
 800f22c:	b2db      	uxtb	r3, r3
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d001      	beq.n	800f236 <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800f232:	f7ff ff05 	bl	800f040 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800f236:	783b      	ldrb	r3, [r7, #0]
 800f238:	f003 0304 	and.w	r3, r3, #4
 800f23c:	b2db      	uxtb	r3, r3
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d001      	beq.n	800f246 <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800f242:	f7ff ffb7 	bl	800f1b4 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800f246:	783b      	ldrb	r3, [r7, #0]
 800f248:	f003 0302 	and.w	r3, r3, #2
 800f24c:	b2db      	uxtb	r3, r3
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d001      	beq.n	800f256 <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800f252:	f7ff ffb7 	bl	800f1c4 <ProcessRadioRxTimeout>
        }
    }
}
 800f256:	bf00      	nop
 800f258:	3710      	adds	r7, #16
 800f25a:	46bd      	mov	sp, r7
 800f25c:	bd80      	pop	{r7, pc}
 800f25e:	bf00      	nop
 800f260:	20001884 	.word	0x20001884

0800f264 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800f264:	b480      	push	{r7}
 800f266:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800f268:	4b10      	ldr	r3, [pc, #64]	; (800f2ac <LoRaMacIsBusy+0x48>)
 800f26a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f26e:	2b01      	cmp	r3, #1
 800f270:	d101      	bne.n	800f276 <LoRaMacIsBusy+0x12>
    {
        return false;
 800f272:	2300      	movs	r3, #0
 800f274:	e015      	b.n	800f2a2 <LoRaMacIsBusy+0x3e>
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 800f276:	4b0e      	ldr	r3, [pc, #56]	; (800f2b0 <LoRaMacIsBusy+0x4c>)
 800f278:	781b      	ldrb	r3, [r3, #0]
 800f27a:	f003 0301 	and.w	r3, r3, #1
 800f27e:	b2db      	uxtb	r3, r3
 800f280:	2b00      	cmp	r3, #0
 800f282:	d001      	beq.n	800f288 <LoRaMacIsBusy+0x24>
    {
        return true;
 800f284:	2301      	movs	r3, #1
 800f286:	e00c      	b.n	800f2a2 <LoRaMacIsBusy+0x3e>
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800f288:	4b08      	ldr	r3, [pc, #32]	; (800f2ac <LoRaMacIsBusy+0x48>)
 800f28a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d106      	bne.n	800f2a0 <LoRaMacIsBusy+0x3c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800f292:	4b06      	ldr	r3, [pc, #24]	; (800f2ac <LoRaMacIsBusy+0x48>)
 800f294:	f893 3492 	ldrb.w	r3, [r3, #1170]	; 0x492
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800f298:	2b01      	cmp	r3, #1
 800f29a:	d101      	bne.n	800f2a0 <LoRaMacIsBusy+0x3c>
    {
        return false;
 800f29c:	2300      	movs	r3, #0
 800f29e:	e000      	b.n	800f2a2 <LoRaMacIsBusy+0x3e>
    }
    return true;
 800f2a0:	2301      	movs	r3, #1
}
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	bc80      	pop	{r7}
 800f2a8:	4770      	bx	lr
 800f2aa:	bf00      	nop
 800f2ac:	20000740 	.word	0x20000740
 800f2b0:	20001884 	.word	0x20001884

0800f2b4 <LoRaMacIsStopped>:

bool LoRaMacIsStopped( void )
{
 800f2b4:	b480      	push	{r7}
 800f2b6:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800f2b8:	4b05      	ldr	r3, [pc, #20]	; (800f2d0 <LoRaMacIsStopped+0x1c>)
 800f2ba:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f2be:	2b01      	cmp	r3, #1
 800f2c0:	d101      	bne.n	800f2c6 <LoRaMacIsStopped+0x12>
    {
        return true;
 800f2c2:	2301      	movs	r3, #1
 800f2c4:	e000      	b.n	800f2c8 <LoRaMacIsStopped+0x14>
    }
    return false;
 800f2c6:	2300      	movs	r3, #0
}
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	46bd      	mov	sp, r7
 800f2cc:	bc80      	pop	{r7}
 800f2ce:	4770      	bx	lr
 800f2d0:	20000740 	.word	0x20000740

0800f2d4 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800f2d4:	b480      	push	{r7}
 800f2d6:	b083      	sub	sp, #12
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	4603      	mov	r3, r0
 800f2dc:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800f2de:	4a04      	ldr	r2, [pc, #16]	; (800f2f0 <LoRaMacEnableRequests+0x1c>)
 800f2e0:	79fb      	ldrb	r3, [r7, #7]
 800f2e2:	f882 3492 	strb.w	r3, [r2, #1170]	; 0x492
}
 800f2e6:	bf00      	nop
 800f2e8:	370c      	adds	r7, #12
 800f2ea:	46bd      	mov	sp, r7
 800f2ec:	bc80      	pop	{r7}
 800f2ee:	4770      	bx	lr
 800f2f0:	20000740 	.word	0x20000740

0800f2f4 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800f2f4:	b580      	push	{r7, lr}
 800f2f6:	b082      	sub	sp, #8
 800f2f8:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800f2fa:	4b2c      	ldr	r3, [pc, #176]	; (800f3ac <LoRaMacHandleRequestEvents+0xb8>)
 800f2fc:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800f300:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800f302:	4b2a      	ldr	r3, [pc, #168]	; (800f3ac <LoRaMacHandleRequestEvents+0xb8>)
 800f304:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d14a      	bne.n	800f3a2 <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800f30c:	4b27      	ldr	r3, [pc, #156]	; (800f3ac <LoRaMacHandleRequestEvents+0xb8>)
 800f30e:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800f312:	f003 0301 	and.w	r3, r3, #1
 800f316:	b2db      	uxtb	r3, r3
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d006      	beq.n	800f32a <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800f31c:	4a23      	ldr	r2, [pc, #140]	; (800f3ac <LoRaMacHandleRequestEvents+0xb8>)
 800f31e:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f322:	f36f 0300 	bfc	r3, #0, #1
 800f326:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800f32a:	4b20      	ldr	r3, [pc, #128]	; (800f3ac <LoRaMacHandleRequestEvents+0xb8>)
 800f32c:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800f330:	f003 0304 	and.w	r3, r3, #4
 800f334:	b2db      	uxtb	r3, r3
 800f336:	2b00      	cmp	r3, #0
 800f338:	d006      	beq.n	800f348 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800f33a:	4a1c      	ldr	r2, [pc, #112]	; (800f3ac <LoRaMacHandleRequestEvents+0xb8>)
 800f33c:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f340:	f36f 0382 	bfc	r3, #2, #1
 800f344:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800f348:	2001      	movs	r0, #1
 800f34a:	f7ff ffc3 	bl	800f2d4 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800f34e:	793b      	ldrb	r3, [r7, #4]
 800f350:	f003 0301 	and.w	r3, r3, #1
 800f354:	b2db      	uxtb	r3, r3
 800f356:	2b00      	cmp	r3, #0
 800f358:	d005      	beq.n	800f366 <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800f35a:	4b14      	ldr	r3, [pc, #80]	; (800f3ac <LoRaMacHandleRequestEvents+0xb8>)
 800f35c:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	4813      	ldr	r0, [pc, #76]	; (800f3b0 <LoRaMacHandleRequestEvents+0xbc>)
 800f364:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800f366:	793b      	ldrb	r3, [r7, #4]
 800f368:	f003 0304 	and.w	r3, r3, #4
 800f36c:	b2db      	uxtb	r3, r3
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d00e      	beq.n	800f390 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800f372:	4810      	ldr	r0, [pc, #64]	; (800f3b4 <LoRaMacHandleRequestEvents+0xc0>)
 800f374:	f004 fd2e 	bl	8013dd4 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800f378:	f004 fd7e 	bl	8013e78 <LoRaMacConfirmQueueGetCnt>
 800f37c:	4603      	mov	r3, r0
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d006      	beq.n	800f390 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800f382:	4a0a      	ldr	r2, [pc, #40]	; (800f3ac <LoRaMacHandleRequestEvents+0xb8>)
 800f384:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f388:	f043 0304 	orr.w	r3, r3, #4
 800f38c:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800f390:	f004 f828 	bl	80133e4 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800f394:	4a05      	ldr	r2, [pc, #20]	; (800f3ac <LoRaMacHandleRequestEvents+0xb8>)
 800f396:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f39a:	f36f 1304 	bfc	r3, #4, #1
 800f39e:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
}
 800f3a2:	bf00      	nop
 800f3a4:	3708      	adds	r7, #8
 800f3a6:	46bd      	mov	sp, r7
 800f3a8:	bd80      	pop	{r7, pc}
 800f3aa:	bf00      	nop
 800f3ac:	20000740 	.word	0x20000740
 800f3b0:	20000b80 	.word	0x20000b80
 800f3b4:	20000b94 	.word	0x20000b94

0800f3b8 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800f3b8:	b580      	push	{r7, lr}
 800f3ba:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800f3bc:	4b16      	ldr	r3, [pc, #88]	; (800f418 <LoRaMacHandleIndicationEvents+0x60>)
 800f3be:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800f3c2:	f003 0308 	and.w	r3, r3, #8
 800f3c6:	b2db      	uxtb	r3, r3
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d00d      	beq.n	800f3e8 <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800f3cc:	4a12      	ldr	r2, [pc, #72]	; (800f418 <LoRaMacHandleIndicationEvents+0x60>)
 800f3ce:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f3d2:	f36f 03c3 	bfc	r3, #3, #1
 800f3d6:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800f3da:	4b0f      	ldr	r3, [pc, #60]	; (800f418 <LoRaMacHandleIndicationEvents+0x60>)
 800f3dc:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800f3e0:	68db      	ldr	r3, [r3, #12]
 800f3e2:	490e      	ldr	r1, [pc, #56]	; (800f41c <LoRaMacHandleIndicationEvents+0x64>)
 800f3e4:	480e      	ldr	r0, [pc, #56]	; (800f420 <LoRaMacHandleIndicationEvents+0x68>)
 800f3e6:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800f3e8:	4b0b      	ldr	r3, [pc, #44]	; (800f418 <LoRaMacHandleIndicationEvents+0x60>)
 800f3ea:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800f3ee:	f003 0302 	and.w	r3, r3, #2
 800f3f2:	b2db      	uxtb	r3, r3
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d00d      	beq.n	800f414 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800f3f8:	4a07      	ldr	r2, [pc, #28]	; (800f418 <LoRaMacHandleIndicationEvents+0x60>)
 800f3fa:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f3fe:	f36f 0341 	bfc	r3, #1, #1
 800f402:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800f406:	4b04      	ldr	r3, [pc, #16]	; (800f418 <LoRaMacHandleIndicationEvents+0x60>)
 800f408:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800f40c:	685b      	ldr	r3, [r3, #4]
 800f40e:	4903      	ldr	r1, [pc, #12]	; (800f41c <LoRaMacHandleIndicationEvents+0x64>)
 800f410:	4804      	ldr	r0, [pc, #16]	; (800f424 <LoRaMacHandleIndicationEvents+0x6c>)
 800f412:	4798      	blx	r3
    }
}
 800f414:	bf00      	nop
 800f416:	bd80      	pop	{r7, pc}
 800f418:	20000740 	.word	0x20000740
 800f41c:	20000bcc 	.word	0x20000bcc
 800f420:	20000ba8 	.word	0x20000ba8
 800f424:	20000b60 	.word	0x20000b60

0800f428 <LoRaMacHandleMcpsRequest>:
    }
}
#endif /* LORAMAC_VERSION */

static void LoRaMacHandleMcpsRequest( void )
{
 800f428:	b580      	push	{r7, lr}
 800f42a:	b082      	sub	sp, #8
 800f42c:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800f42e:	4b2a      	ldr	r3, [pc, #168]	; (800f4d8 <LoRaMacHandleMcpsRequest+0xb0>)
 800f430:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800f434:	f003 0301 	and.w	r3, r3, #1
 800f438:	b2db      	uxtb	r3, r3
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d048      	beq.n	800f4d0 <LoRaMacHandleMcpsRequest+0xa8>
    {
        bool stopRetransmission = false;
 800f43e:	2300      	movs	r3, #0
 800f440:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800f442:	2300      	movs	r3, #0
 800f444:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800f446:	4b24      	ldr	r3, [pc, #144]	; (800f4d8 <LoRaMacHandleMcpsRequest+0xb0>)
 800f448:	f893 3440 	ldrb.w	r3, [r3, #1088]	; 0x440
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d004      	beq.n	800f45a <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800f450:	4b21      	ldr	r3, [pc, #132]	; (800f4d8 <LoRaMacHandleMcpsRequest+0xb0>)
 800f452:	f893 3440 	ldrb.w	r3, [r3, #1088]	; 0x440
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800f456:	2b03      	cmp	r3, #3
 800f458:	d104      	bne.n	800f464 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800f45a:	f002 f943 	bl	80116e4 <CheckRetransUnconfirmedUplink>
 800f45e:	4603      	mov	r3, r0
 800f460:	71fb      	strb	r3, [r7, #7]
 800f462:	e010      	b.n	800f486 <LoRaMacHandleMcpsRequest+0x5e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800f464:	4b1c      	ldr	r3, [pc, #112]	; (800f4d8 <LoRaMacHandleMcpsRequest+0xb0>)
 800f466:	f893 3440 	ldrb.w	r3, [r3, #1088]	; 0x440
 800f46a:	2b01      	cmp	r3, #1
 800f46c:	d10b      	bne.n	800f486 <LoRaMacHandleMcpsRequest+0x5e>
            else
            {
                waitForRetransmission = true;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.RetransmitTimeoutRetry == true )
 800f46e:	4b1a      	ldr	r3, [pc, #104]	; (800f4d8 <LoRaMacHandleMcpsRequest+0xb0>)
 800f470:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 800f474:	2b00      	cmp	r3, #0
 800f476:	d004      	beq.n	800f482 <LoRaMacHandleMcpsRequest+0x5a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800f478:	f002 f960 	bl	801173c <CheckRetransConfirmedUplink>
 800f47c:	4603      	mov	r3, r0
 800f47e:	71fb      	strb	r3, [r7, #7]
 800f480:	e001      	b.n	800f486 <LoRaMacHandleMcpsRequest+0x5e>
            }
            else
            {
                waitForRetransmission = true;
 800f482:	2301      	movs	r3, #1
 800f484:	71bb      	strb	r3, [r7, #6]
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 800f486:	79fb      	ldrb	r3, [r7, #7]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d00d      	beq.n	800f4a8 <LoRaMacHandleMcpsRequest+0x80>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800f48c:	4813      	ldr	r0, [pc, #76]	; (800f4dc <LoRaMacHandleMcpsRequest+0xb4>)
 800f48e:	f00d fe9d 	bl	801d1cc <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800f492:	4b11      	ldr	r3, [pc, #68]	; (800f4d8 <LoRaMacHandleMcpsRequest+0xb0>)
 800f494:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f498:	f023 0320 	bic.w	r3, r3, #32
 800f49c:	4a0e      	ldr	r2, [pc, #56]	; (800f4d8 <LoRaMacHandleMcpsRequest+0xb0>)
 800f49e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 800f4a2:	f002 f985 	bl	80117b0 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800f4a6:	e013      	b.n	800f4d0 <LoRaMacHandleMcpsRequest+0xa8>
        else if( waitForRetransmission == false )
 800f4a8:	79bb      	ldrb	r3, [r7, #6]
 800f4aa:	f083 0301 	eor.w	r3, r3, #1
 800f4ae:	b2db      	uxtb	r3, r3
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d00d      	beq.n	800f4d0 <LoRaMacHandleMcpsRequest+0xa8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800f4b4:	4a08      	ldr	r2, [pc, #32]	; (800f4d8 <LoRaMacHandleMcpsRequest+0xb0>)
 800f4b6:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f4ba:	f36f 1304 	bfc	r3, #4, #1
 800f4be:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
            MacCtx.RetransmitTimeoutRetry = false;
 800f4c2:	4b05      	ldr	r3, [pc, #20]	; (800f4d8 <LoRaMacHandleMcpsRequest+0xb0>)
 800f4c4:	2200      	movs	r2, #0
 800f4c6:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
            OnTxDelayedTimerEvent( NULL );
 800f4ca:	2000      	movs	r0, #0
 800f4cc:	f000 f9c8 	bl	800f860 <OnTxDelayedTimerEvent>
}
 800f4d0:	bf00      	nop
 800f4d2:	3708      	adds	r7, #8
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	bd80      	pop	{r7, pc}
 800f4d8:	20000740 	.word	0x20000740
 800f4dc:	20000aa8 	.word	0x20000aa8

0800f4e0 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800f4e0:	b580      	push	{r7, lr}
 800f4e2:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800f4e4:	4b18      	ldr	r3, [pc, #96]	; (800f548 <LoRaMacHandleMlmeRequest+0x68>)
 800f4e6:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800f4ea:	f003 0304 	and.w	r3, r3, #4
 800f4ee:	b2db      	uxtb	r3, r3
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d026      	beq.n	800f542 <LoRaMacHandleMlmeRequest+0x62>
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_1 ) == true ) ||
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_2 ) == true ) )
        {
            MacCtx.ChannelsNbTransCounter = 0;
#else
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800f4f4:	2001      	movs	r0, #1
 800f4f6:	f004 fc53 	bl	8013da0 <LoRaMacConfirmQueueIsCmdActive>
 800f4fa:	4603      	mov	r3, r0
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d012      	beq.n	800f526 <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800f500:	2001      	movs	r0, #1
 800f502:	f004 fbef 	bl	8013ce4 <LoRaMacConfirmQueueGetStatus>
 800f506:	4603      	mov	r3, r0
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d103      	bne.n	800f514 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800f50c:	4b0e      	ldr	r3, [pc, #56]	; (800f548 <LoRaMacHandleMlmeRequest+0x68>)
 800f50e:	2200      	movs	r2, #0
 800f510:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            }
#endif /* LORAMAC_VERSION */
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f514:	4b0c      	ldr	r3, [pc, #48]	; (800f548 <LoRaMacHandleMlmeRequest+0x68>)
 800f516:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f51a:	f023 0302 	bic.w	r3, r3, #2
 800f51e:	4a0a      	ldr	r2, [pc, #40]	; (800f548 <LoRaMacHandleMlmeRequest+0x68>)
 800f520:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 800f524:	e00d      	b.n	800f542 <LoRaMacHandleMlmeRequest+0x62>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 800f526:	2006      	movs	r0, #6
 800f528:	f004 fc3a 	bl	8013da0 <LoRaMacConfirmQueueIsCmdActive>
 800f52c:	4603      	mov	r3, r0
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d007      	beq.n	800f542 <LoRaMacHandleMlmeRequest+0x62>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f532:	4b05      	ldr	r3, [pc, #20]	; (800f548 <LoRaMacHandleMlmeRequest+0x68>)
 800f534:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f538:	f023 0302 	bic.w	r3, r3, #2
 800f53c:	4a02      	ldr	r2, [pc, #8]	; (800f548 <LoRaMacHandleMlmeRequest+0x68>)
 800f53e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 800f542:	bf00      	nop
 800f544:	bd80      	pop	{r7, pc}
 800f546:	bf00      	nop
 800f548:	20000740 	.word	0x20000740

0800f54c <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800f54c:	b580      	push	{r7, lr}
 800f54e:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800f550:	200b      	movs	r0, #11
 800f552:	f004 fc25 	bl	8013da0 <LoRaMacConfirmQueueIsCmdActive>
 800f556:	4603      	mov	r3, r0
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d019      	beq.n	800f590 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800f55c:	4b0e      	ldr	r3, [pc, #56]	; (800f598 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f55e:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800f562:	f003 0301 	and.w	r3, r3, #1
 800f566:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d111      	bne.n	800f590 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800f56c:	4b0a      	ldr	r3, [pc, #40]	; (800f598 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f56e:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800f572:	f003 0304 	and.w	r3, r3, #4
 800f576:	b2db      	uxtb	r3, r3
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d009      	beq.n	800f590 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f57c:	4b06      	ldr	r3, [pc, #24]	; (800f598 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f57e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f582:	f023 0302 	bic.w	r3, r3, #2
 800f586:	4a04      	ldr	r2, [pc, #16]	; (800f598 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f588:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 800f58c:	2301      	movs	r3, #1
 800f58e:	e000      	b.n	800f592 <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 800f590:	2300      	movs	r3, #0
}
 800f592:	4618      	mov	r0, r3
 800f594:	bd80      	pop	{r7, pc}
 800f596:	bf00      	nop
 800f598:	20000740 	.word	0x20000740

0800f59c <CheckForMinimumAbpDatarate>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
 800f59c:	b480      	push	{r7}
 800f59e:	b083      	sub	sp, #12
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	71fb      	strb	r3, [r7, #7]
 800f5a6:	460b      	mov	r3, r1
 800f5a8:	71bb      	strb	r3, [r7, #6]
 800f5aa:	4613      	mov	r3, r2
 800f5ac:	717b      	strb	r3, [r7, #5]
    if( ( adr == true ) &&
 800f5ae:	79fb      	ldrb	r3, [r7, #7]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d00a      	beq.n	800f5ca <CheckForMinimumAbpDatarate+0x2e>
 800f5b4:	79bb      	ldrb	r3, [r7, #6]
 800f5b6:	2b01      	cmp	r3, #1
 800f5b8:	d107      	bne.n	800f5ca <CheckForMinimumAbpDatarate+0x2e>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
 800f5ba:	797b      	ldrb	r3, [r7, #5]
 800f5bc:	f083 0301 	eor.w	r3, r3, #1
 800f5c0:	b2db      	uxtb	r3, r3
        ( activation == ACTIVATION_TYPE_ABP ) &&
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d001      	beq.n	800f5ca <CheckForMinimumAbpDatarate+0x2e>
    {
        return true;
 800f5c6:	2301      	movs	r3, #1
 800f5c8:	e000      	b.n	800f5cc <CheckForMinimumAbpDatarate+0x30>
    }
    return false;
 800f5ca:	2300      	movs	r3, #0
}
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	370c      	adds	r7, #12
 800f5d0:	46bd      	mov	sp, r7
 800f5d2:	bc80      	pop	{r7}
 800f5d4:	4770      	bx	lr
	...

0800f5d8 <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 800f5d8:	b480      	push	{r7}
 800f5da:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800f5dc:	4b0d      	ldr	r3, [pc, #52]	; (800f614 <LoRaMacCheckForRxAbort+0x3c>)
 800f5de:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f5e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d00f      	beq.n	800f60a <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800f5ea:	4b0a      	ldr	r3, [pc, #40]	; (800f614 <LoRaMacCheckForRxAbort+0x3c>)
 800f5ec:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f5f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f5f4:	4a07      	ldr	r2, [pc, #28]	; (800f614 <LoRaMacCheckForRxAbort+0x3c>)
 800f5f6:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f5fa:	4b06      	ldr	r3, [pc, #24]	; (800f614 <LoRaMacCheckForRxAbort+0x3c>)
 800f5fc:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f600:	f023 0302 	bic.w	r3, r3, #2
 800f604:	4a03      	ldr	r2, [pc, #12]	; (800f614 <LoRaMacCheckForRxAbort+0x3c>)
 800f606:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 800f60a:	bf00      	nop
 800f60c:	46bd      	mov	sp, r7
 800f60e:	bc80      	pop	{r7}
 800f610:	4770      	bx	lr
 800f612:	bf00      	nop
 800f614:	20000740 	.word	0x20000740

0800f618 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 800f618:	b580      	push	{r7, lr}
 800f61a:	b084      	sub	sp, #16
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800f620:	2300      	movs	r3, #0
 800f622:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800f624:	2300      	movs	r3, #0
 800f626:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 800f628:	4b51      	ldr	r3, [pc, #324]	; (800f770 <LoRaMacHandleNvm+0x158>)
 800f62a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f62e:	2b00      	cmp	r3, #0
 800f630:	f040 8099 	bne.w	800f766 <LoRaMacHandleNvm+0x14e>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	2124      	movs	r1, #36	; 0x24
 800f638:	4618      	mov	r0, r3
 800f63a:	f009 fc81 	bl	8018f40 <Crc32>
 800f63e:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f644:	68ba      	ldr	r2, [r7, #8]
 800f646:	429a      	cmp	r2, r3
 800f648:	d006      	beq.n	800f658 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	68ba      	ldr	r2, [r7, #8]
 800f64e:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800f650:	89fb      	ldrh	r3, [r7, #14]
 800f652:	f043 0301 	orr.w	r3, r3, #1
 800f656:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	3328      	adds	r3, #40	; 0x28
 800f65c:	211c      	movs	r1, #28
 800f65e:	4618      	mov	r0, r3
 800f660:	f009 fc6e 	bl	8018f40 <Crc32>
 800f664:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f66a:	68ba      	ldr	r2, [r7, #8]
 800f66c:	429a      	cmp	r2, r3
 800f66e:	d006      	beq.n	800f67e <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	68ba      	ldr	r2, [r7, #8]
 800f674:	645a      	str	r2, [r3, #68]	; 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800f676:	89fb      	ldrh	r3, [r7, #14]
 800f678:	f043 0302 	orr.w	r3, r3, #2
 800f67c:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	3348      	adds	r3, #72	; 0x48
 800f682:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f686:	4618      	mov	r0, r3
 800f688:	f009 fc5a 	bl	8018f40 <Crc32>
 800f68c:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800f694:	68ba      	ldr	r2, [r7, #8]
 800f696:	429a      	cmp	r2, r3
 800f698:	d007      	beq.n	800f6aa <LoRaMacHandleNvm+0x92>
    {
        nvmData->MacGroup2.Crc32 = crc;
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	68ba      	ldr	r2, [r7, #8]
 800f69e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800f6a2:	89fb      	ldrh	r3, [r7, #14]
 800f6a4:	f043 0304 	orr.w	r3, r3, #4
 800f6a8:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800f6b0:	21d4      	movs	r1, #212	; 0xd4
 800f6b2:	4618      	mov	r0, r3
 800f6b4:	f009 fc44 	bl	8018f40 <Crc32>
 800f6b8:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800f6c0:	68ba      	ldr	r2, [r7, #8]
 800f6c2:	429a      	cmp	r2, r3
 800f6c4:	d007      	beq.n	800f6d6 <LoRaMacHandleNvm+0xbe>
    {
        nvmData->SecureElement.Crc32 = crc;
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	68ba      	ldr	r2, [r7, #8]
 800f6ca:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800f6ce:	89fb      	ldrh	r3, [r7, #14]
 800f6d0:	f043 0308 	orr.w	r3, r3, #8
 800f6d4:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	f503 7309 	add.w	r3, r3, #548	; 0x224
 800f6dc:	2110      	movs	r1, #16
 800f6de:	4618      	mov	r0, r3
 800f6e0:	f009 fc2e 	bl	8018f40 <Crc32>
 800f6e4:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 800f6ec:	68ba      	ldr	r2, [r7, #8]
 800f6ee:	429a      	cmp	r2, r3
 800f6f0:	d007      	beq.n	800f702 <LoRaMacHandleNvm+0xea>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	68ba      	ldr	r2, [r7, #8]
 800f6f6:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800f6fa:	89fb      	ldrh	r3, [r7, #14]
 800f6fc:	f043 0310 	orr.w	r3, r3, #16
 800f700:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	f503 730e 	add.w	r3, r3, #568	; 0x238
 800f708:	f44f 715e 	mov.w	r1, #888	; 0x378
 800f70c:	4618      	mov	r0, r3
 800f70e:	f009 fc17 	bl	8018f40 <Crc32>
 800f712:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	; 0x5b0
 800f71a:	68ba      	ldr	r2, [r7, #8]
 800f71c:	429a      	cmp	r2, r3
 800f71e:	d007      	beq.n	800f730 <LoRaMacHandleNvm+0x118>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	68ba      	ldr	r2, [r7, #8]
 800f724:	f8c3 25b0 	str.w	r2, [r3, #1456]	; 0x5b0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800f728:	89fb      	ldrh	r3, [r7, #14]
 800f72a:	f043 0320 	orr.w	r3, r3, #32
 800f72e:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	f203 53b4 	addw	r3, r3, #1460	; 0x5b4
 800f736:	2114      	movs	r1, #20
 800f738:	4618      	mov	r0, r3
 800f73a:	f009 fc01 	bl	8018f40 <Crc32>
 800f73e:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	f8d3 35c8 	ldr.w	r3, [r3, #1480]	; 0x5c8
 800f746:	68ba      	ldr	r2, [r7, #8]
 800f748:	429a      	cmp	r2, r3
 800f74a:	d007      	beq.n	800f75c <LoRaMacHandleNvm+0x144>
    {
        nvmData->ClassB.Crc32 = crc;
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	68ba      	ldr	r2, [r7, #8]
 800f750:	f8c3 25c8 	str.w	r2, [r3, #1480]	; 0x5c8
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800f754:	89fb      	ldrh	r3, [r7, #14]
 800f756:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f75a:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 800f75c:	89fb      	ldrh	r3, [r7, #14]
 800f75e:	4618      	mov	r0, r3
 800f760:	f002 f878 	bl	8011854 <CallNvmDataChangeCallback>
 800f764:	e000      	b.n	800f768 <LoRaMacHandleNvm+0x150>
        return;
 800f766:	bf00      	nop
}
 800f768:	3710      	adds	r7, #16
 800f76a:	46bd      	mov	sp, r7
 800f76c:	bd80      	pop	{r7, pc}
 800f76e:	bf00      	nop
 800f770:	20000740 	.word	0x20000740

0800f774 <LoRaMacHandleResponseTimeout>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool LoRaMacHandleResponseTimeout( TimerTime_t timeoutInMs, TimerTime_t startTimeInMs )
{
 800f774:	b580      	push	{r7, lr}
 800f776:	b084      	sub	sp, #16
 800f778:	af00      	add	r7, sp, #0
 800f77a:	6078      	str	r0, [r7, #4]
 800f77c:	6039      	str	r1, [r7, #0]
    if( startTimeInMs != 0 )
 800f77e:	683b      	ldr	r3, [r7, #0]
 800f780:	2b00      	cmp	r3, #0
 800f782:	d00d      	beq.n	800f7a0 <LoRaMacHandleResponseTimeout+0x2c>
    {
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 800f784:	6838      	ldr	r0, [r7, #0]
 800f786:	f00d fe4d 	bl	801d424 <UTIL_TIMER_GetElapsedTime>
 800f78a:	60f8      	str	r0, [r7, #12]
        if( elapsedTime > timeoutInMs )
 800f78c:	68fa      	ldr	r2, [r7, #12]
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	429a      	cmp	r2, r3
 800f792:	d905      	bls.n	800f7a0 <LoRaMacHandleResponseTimeout+0x2c>
        {
            Nvm.MacGroup1.SrvAckRequested = false;
 800f794:	4b05      	ldr	r3, [pc, #20]	; (800f7ac <LoRaMacHandleResponseTimeout+0x38>)
 800f796:	2200      	movs	r2, #0
 800f798:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
            return true;
 800f79c:	2301      	movs	r3, #1
 800f79e:	e000      	b.n	800f7a2 <LoRaMacHandleResponseTimeout+0x2e>
        }
    }
    return false;
 800f7a0:	2300      	movs	r3, #0
}
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	3710      	adds	r7, #16
 800f7a6:	46bd      	mov	sp, r7
 800f7a8:	bd80      	pop	{r7, pc}
 800f7aa:	bf00      	nop
 800f7ac:	20000c5c 	.word	0x20000c5c

0800f7b0 <LoRaMacProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b082      	sub	sp, #8
 800f7b4:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 800f7ba:	f7ff fd0b 	bl	800f1d4 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800f7be:	f003 fe80 	bl	80134c2 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800f7c2:	4b25      	ldr	r3, [pc, #148]	; (800f858 <LoRaMacProcess+0xa8>)
 800f7c4:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800f7c8:	f003 0310 	and.w	r3, r3, #16
 800f7cc:	b2db      	uxtb	r3, r3
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d023      	beq.n	800f81a <LoRaMacProcess+0x6a>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800f7d2:	2000      	movs	r0, #0
 800f7d4:	f7ff fd7e 	bl	800f2d4 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800f7d8:	f7ff fefe 	bl	800f5d8 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800f7dc:	f002 f858 	bl	8011890 <IsRequestPending>
 800f7e0:	4603      	mov	r3, r0
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d006      	beq.n	800f7f4 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800f7e6:	f7ff feb1 	bl	800f54c <LoRaMacCheckForBeaconAcquisition>
 800f7ea:	4603      	mov	r3, r0
 800f7ec:	461a      	mov	r2, r3
 800f7ee:	79fb      	ldrb	r3, [r7, #7]
 800f7f0:	4313      	orrs	r3, r2
 800f7f2:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 800f7f4:	79fb      	ldrb	r3, [r7, #7]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d103      	bne.n	800f802 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 800f7fa:	f7ff fe71 	bl	800f4e0 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800f7fe:	f7ff fe13 	bl	800f428 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800f802:	f7ff fd77 	bl	800f2f4 <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800f806:	2001      	movs	r0, #1
 800f808:	f7ff fd64 	bl	800f2d4 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800f80c:	4a12      	ldr	r2, [pc, #72]	; (800f858 <LoRaMacProcess+0xa8>)
 800f80e:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f812:	f043 0320 	orr.w	r3, r3, #32
 800f816:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
    LoRaMacHandleIndicationEvents( );
 800f81a:	f7ff fdcd 	bl	800f3b8 <LoRaMacHandleIndicationEvents>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    LoRaMacHandleRejoinEvents( );
#endif /* LORAMAC_VERSION */

    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800f81e:	4b0e      	ldr	r3, [pc, #56]	; (800f858 <LoRaMacProcess+0xa8>)
 800f820:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 800f824:	2b02      	cmp	r3, #2
 800f826:	d101      	bne.n	800f82c <LoRaMacProcess+0x7c>
    {
        OpenContinuousRxCWindow( );
 800f828:	f001 fc1a 	bl	8011060 <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800f82c:	4b0a      	ldr	r3, [pc, #40]	; (800f858 <LoRaMacProcess+0xa8>)
 800f82e:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800f832:	f003 0320 	and.w	r3, r3, #32
 800f836:	b2db      	uxtb	r3, r3
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d009      	beq.n	800f850 <LoRaMacProcess+0xa0>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800f83c:	4a06      	ldr	r2, [pc, #24]	; (800f858 <LoRaMacProcess+0xa8>)
 800f83e:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f842:	f36f 1345 	bfc	r3, #5, #1
 800f846:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        LoRaMacHandleNvm( &Nvm );
 800f84a:	4804      	ldr	r0, [pc, #16]	; (800f85c <LoRaMacProcess+0xac>)
 800f84c:	f7ff fee4 	bl	800f618 <LoRaMacHandleNvm>
    }
}
 800f850:	bf00      	nop
 800f852:	3708      	adds	r7, #8
 800f854:	46bd      	mov	sp, r7
 800f856:	bd80      	pop	{r7, pc}
 800f858:	20000740 	.word	0x20000740
 800f85c:	20000c5c 	.word	0x20000c5c

0800f860 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800f860:	b580      	push	{r7, lr}
 800f862:	b082      	sub	sp, #8
 800f864:	af00      	add	r7, sp, #0
 800f866:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800f868:	481e      	ldr	r0, [pc, #120]	; (800f8e4 <OnTxDelayedTimerEvent+0x84>)
 800f86a:	f00d fcaf 	bl	801d1cc <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800f86e:	4b1e      	ldr	r3, [pc, #120]	; (800f8e8 <OnTxDelayedTimerEvent+0x88>)
 800f870:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f874:	f023 0320 	bic.w	r3, r3, #32
 800f878:	4a1b      	ldr	r2, [pc, #108]	; (800f8e8 <OnTxDelayedTimerEvent+0x88>)
 800f87a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800f87e:	4b1b      	ldr	r3, [pc, #108]	; (800f8ec <OnTxDelayedTimerEvent+0x8c>)
 800f880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f884:	4a18      	ldr	r2, [pc, #96]	; (800f8e8 <OnTxDelayedTimerEvent+0x88>)
 800f886:	f8d2 2498 	ldr.w	r2, [r2, #1176]	; 0x498
 800f88a:	4611      	mov	r1, r2
 800f88c:	4618      	mov	r0, r3
 800f88e:	f7ff ff71 	bl	800f774 <LoRaMacHandleResponseTimeout>
 800f892:	4603      	mov	r3, r0
 800f894:	2b00      	cmp	r3, #0
 800f896:	d11e      	bne.n	800f8d6 <OnTxDelayedTimerEvent+0x76>
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800f898:	2001      	movs	r0, #1
 800f89a:	f001 f92b 	bl	8010af4 <ScheduleTx>
 800f89e:	4603      	mov	r3, r0
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d01a      	beq.n	800f8da <OnTxDelayedTimerEvent+0x7a>
 800f8a4:	2b0b      	cmp	r3, #11
 800f8a6:	d018      	beq.n	800f8da <OnTxDelayedTimerEvent+0x7a>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f8a8:	4b10      	ldr	r3, [pc, #64]	; (800f8ec <OnTxDelayedTimerEvent+0x8c>)
 800f8aa:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f8ae:	b2da      	uxtb	r2, r3
 800f8b0:	4b0d      	ldr	r3, [pc, #52]	; (800f8e8 <OnTxDelayedTimerEvent+0x88>)
 800f8b2:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800f8b6:	4b0c      	ldr	r3, [pc, #48]	; (800f8e8 <OnTxDelayedTimerEvent+0x88>)
 800f8b8:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800f8bc:	4b0a      	ldr	r3, [pc, #40]	; (800f8e8 <OnTxDelayedTimerEvent+0x88>)
 800f8be:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800f8c2:	4b09      	ldr	r3, [pc, #36]	; (800f8e8 <OnTxDelayedTimerEvent+0x88>)
 800f8c4:	2209      	movs	r2, #9
 800f8c6:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800f8ca:	2009      	movs	r0, #9
 800f8cc:	f004 fa34 	bl	8013d38 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800f8d0:	f001 ff6e 	bl	80117b0 <StopRetransmission>
            break;
 800f8d4:	e002      	b.n	800f8dc <OnTxDelayedTimerEvent+0x7c>
        return;
 800f8d6:	bf00      	nop
 800f8d8:	e000      	b.n	800f8dc <OnTxDelayedTimerEvent+0x7c>
            break;
 800f8da:	bf00      	nop
        }
    }
}
 800f8dc:	3708      	adds	r7, #8
 800f8de:	46bd      	mov	sp, r7
 800f8e0:	bd80      	pop	{r7, pc}
 800f8e2:	bf00      	nop
 800f8e4:	20000aa8 	.word	0x20000aa8
 800f8e8:	20000740 	.word	0x20000740
 800f8ec:	20000c5c 	.word	0x20000c5c

0800f8f0 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	b082      	sub	sp, #8
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800f8f8:	4b17      	ldr	r3, [pc, #92]	; (800f958 <OnRxWindow1TimerEvent+0x68>)
 800f8fa:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 800f8fe:	4b16      	ldr	r3, [pc, #88]	; (800f958 <OnRxWindow1TimerEvent+0x68>)
 800f900:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800f904:	4b15      	ldr	r3, [pc, #84]	; (800f95c <OnRxWindow1TimerEvent+0x6c>)
 800f906:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800f90a:	b25a      	sxtb	r2, r3
 800f90c:	4b12      	ldr	r3, [pc, #72]	; (800f958 <OnRxWindow1TimerEvent+0x68>)
 800f90e:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f912:	4b12      	ldr	r3, [pc, #72]	; (800f95c <OnRxWindow1TimerEvent+0x6c>)
 800f914:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800f918:	4b0f      	ldr	r3, [pc, #60]	; (800f958 <OnRxWindow1TimerEvent+0x68>)
 800f91a:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800f91e:	4b0f      	ldr	r3, [pc, #60]	; (800f95c <OnRxWindow1TimerEvent+0x6c>)
 800f920:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 800f924:	4b0c      	ldr	r3, [pc, #48]	; (800f958 <OnRxWindow1TimerEvent+0x68>)
 800f926:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800f92a:	4b0b      	ldr	r3, [pc, #44]	; (800f958 <OnRxWindow1TimerEvent+0x68>)
 800f92c:	2200      	movs	r2, #0
 800f92e:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800f932:	4b09      	ldr	r3, [pc, #36]	; (800f958 <OnRxWindow1TimerEvent+0x68>)
 800f934:	2200      	movs	r2, #0
 800f936:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800f93a:	4b08      	ldr	r3, [pc, #32]	; (800f95c <OnRxWindow1TimerEvent+0x6c>)
 800f93c:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 800f940:	4b05      	ldr	r3, [pc, #20]	; (800f958 <OnRxWindow1TimerEvent+0x68>)
 800f942:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800f946:	4906      	ldr	r1, [pc, #24]	; (800f960 <OnRxWindow1TimerEvent+0x70>)
 800f948:	4806      	ldr	r0, [pc, #24]	; (800f964 <OnRxWindow1TimerEvent+0x74>)
 800f94a:	f001 fb55 	bl	8010ff8 <RxWindowSetup>
}
 800f94e:	bf00      	nop
 800f950:	3708      	adds	r7, #8
 800f952:	46bd      	mov	sp, r7
 800f954:	bd80      	pop	{r7, pc}
 800f956:	bf00      	nop
 800f958:	20000740 	.word	0x20000740
 800f95c:	20000c5c 	.word	0x20000c5c
 800f960:	20000af8 	.word	0x20000af8
 800f964:	20000ac0 	.word	0x20000ac0

0800f968 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800f968:	b580      	push	{r7, lr}
 800f96a:	b082      	sub	sp, #8
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800f970:	4b19      	ldr	r3, [pc, #100]	; (800f9d8 <OnRxWindow2TimerEvent+0x70>)
 800f972:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 800f976:	2b00      	cmp	r3, #0
 800f978:	d029      	beq.n	800f9ce <OnRxWindow2TimerEvent+0x66>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800f97a:	4b17      	ldr	r3, [pc, #92]	; (800f9d8 <OnRxWindow2TimerEvent+0x70>)
 800f97c:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 800f980:	4b15      	ldr	r3, [pc, #84]	; (800f9d8 <OnRxWindow2TimerEvent+0x70>)
 800f982:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800f986:	4b15      	ldr	r3, [pc, #84]	; (800f9dc <OnRxWindow2TimerEvent+0x74>)
 800f988:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f98a:	4a13      	ldr	r2, [pc, #76]	; (800f9d8 <OnRxWindow2TimerEvent+0x70>)
 800f98c:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f990:	4b12      	ldr	r3, [pc, #72]	; (800f9dc <OnRxWindow2TimerEvent+0x74>)
 800f992:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800f996:	4b10      	ldr	r3, [pc, #64]	; (800f9d8 <OnRxWindow2TimerEvent+0x70>)
 800f998:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800f99c:	4b0f      	ldr	r3, [pc, #60]	; (800f9dc <OnRxWindow2TimerEvent+0x74>)
 800f99e:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 800f9a2:	4b0d      	ldr	r3, [pc, #52]	; (800f9d8 <OnRxWindow2TimerEvent+0x70>)
 800f9a4:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800f9a8:	4b0b      	ldr	r3, [pc, #44]	; (800f9d8 <OnRxWindow2TimerEvent+0x70>)
 800f9aa:	2200      	movs	r2, #0
 800f9ac:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800f9b0:	4b09      	ldr	r3, [pc, #36]	; (800f9d8 <OnRxWindow2TimerEvent+0x70>)
 800f9b2:	2201      	movs	r2, #1
 800f9b4:	f883 23e3 	strb.w	r2, [r3, #995]	; 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800f9b8:	4b08      	ldr	r3, [pc, #32]	; (800f9dc <OnRxWindow2TimerEvent+0x74>)
 800f9ba:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 800f9be:	4b06      	ldr	r3, [pc, #24]	; (800f9d8 <OnRxWindow2TimerEvent+0x70>)
 800f9c0:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800f9c4:	4906      	ldr	r1, [pc, #24]	; (800f9e0 <OnRxWindow2TimerEvent+0x78>)
 800f9c6:	4807      	ldr	r0, [pc, #28]	; (800f9e4 <OnRxWindow2TimerEvent+0x7c>)
 800f9c8:	f001 fb16 	bl	8010ff8 <RxWindowSetup>
 800f9cc:	e000      	b.n	800f9d0 <OnRxWindow2TimerEvent+0x68>
        return;
 800f9ce:	bf00      	nop
}
 800f9d0:	3708      	adds	r7, #8
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	bd80      	pop	{r7, pc}
 800f9d6:	bf00      	nop
 800f9d8:	20000740 	.word	0x20000740
 800f9dc:	20000c5c 	.word	0x20000c5c
 800f9e0:	20000b10 	.word	0x20000b10
 800f9e4:	20000ad8 	.word	0x20000ad8

0800f9e8 <OnRetransmitTimeoutTimerEvent>:

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void OnRetransmitTimeoutTimerEvent( void* context )
{
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b082      	sub	sp, #8
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800f9f0:	4808      	ldr	r0, [pc, #32]	; (800fa14 <OnRetransmitTimeoutTimerEvent+0x2c>)
 800f9f2:	f00d fbeb 	bl	801d1cc <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800f9f6:	4b08      	ldr	r3, [pc, #32]	; (800fa18 <OnRetransmitTimeoutTimerEvent+0x30>)
 800f9f8:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d003      	beq.n	800fa08 <OnRetransmitTimeoutTimerEvent+0x20>
    {
        MacCtx.RetransmitTimeoutRetry = true;
 800fa00:	4b05      	ldr	r3, [pc, #20]	; (800fa18 <OnRetransmitTimeoutTimerEvent+0x30>)
 800fa02:	2201      	movs	r2, #1
 800fa04:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
    }
    OnMacProcessNotify( );
 800fa08:	f001 ff0e 	bl	8011828 <OnMacProcessNotify>
}
 800fa0c:	bf00      	nop
 800fa0e:	3708      	adds	r7, #8
 800fa10:	46bd      	mov	sp, r7
 800fa12:	bd80      	pop	{r7, pc}
 800fa14:	20000b40 	.word	0x20000b40
 800fa18:	20000740 	.word	0x20000740

0800fa1c <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800fa1c:	b580      	push	{r7, lr}
 800fa1e:	b084      	sub	sp, #16
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	60ba      	str	r2, [r7, #8]
 800fa24:	607b      	str	r3, [r7, #4]
 800fa26:	4603      	mov	r3, r0
 800fa28:	73fb      	strb	r3, [r7, #15]
 800fa2a:	460b      	mov	r3, r1
 800fa2c:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800fa2e:	68bb      	ldr	r3, [r7, #8]
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d005      	beq.n	800fa40 <GetFCntDown+0x24>
 800fa34:	69bb      	ldr	r3, [r7, #24]
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d002      	beq.n	800fa40 <GetFCntDown+0x24>
 800fa3a:	69fb      	ldr	r3, [r7, #28]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d101      	bne.n	800fa44 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800fa40:	2309      	movs	r3, #9
 800fa42:	e028      	b.n	800fa96 <GetFCntDown+0x7a>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800fa44:	7bfb      	ldrb	r3, [r7, #15]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d016      	beq.n	800fa78 <GetFCntDown+0x5c>
 800fa4a:	2b01      	cmp	r3, #1
 800fa4c:	d118      	bne.n	800fa80 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800fa4e:	79bb      	ldrb	r3, [r7, #6]
 800fa50:	2b01      	cmp	r3, #1
 800fa52:	d10d      	bne.n	800fa70 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800fa54:	7bbb      	ldrb	r3, [r7, #14]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d002      	beq.n	800fa60 <GetFCntDown+0x44>
 800fa5a:	7bbb      	ldrb	r3, [r7, #14]
 800fa5c:	2b03      	cmp	r3, #3
 800fa5e:	d103      	bne.n	800fa68 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 800fa60:	69bb      	ldr	r3, [r7, #24]
 800fa62:	2202      	movs	r2, #2
 800fa64:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800fa66:	e00d      	b.n	800fa84 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 800fa68:	69bb      	ldr	r3, [r7, #24]
 800fa6a:	2201      	movs	r2, #1
 800fa6c:	701a      	strb	r2, [r3, #0]
            break;
 800fa6e:	e009      	b.n	800fa84 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 800fa70:	69bb      	ldr	r3, [r7, #24]
 800fa72:	2203      	movs	r2, #3
 800fa74:	701a      	strb	r2, [r3, #0]
            break;
 800fa76:	e005      	b.n	800fa84 <GetFCntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800fa78:	69bb      	ldr	r3, [r7, #24]
 800fa7a:	2204      	movs	r2, #4
 800fa7c:	701a      	strb	r2, [r3, #0]
            break;
 800fa7e:	e001      	b.n	800fa84 <GetFCntDown+0x68>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800fa80:	2305      	movs	r3, #5
 800fa82:	e008      	b.n	800fa96 <GetFCntDown+0x7a>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 800fa84:	69bb      	ldr	r3, [r7, #24]
 800fa86:	7818      	ldrb	r0, [r3, #0]
 800fa88:	68bb      	ldr	r3, [r7, #8]
 800fa8a:	89db      	ldrh	r3, [r3, #14]
 800fa8c:	69fa      	ldr	r2, [r7, #28]
 800fa8e:	4619      	mov	r1, r3
 800fa90:	f004 fd90 	bl	80145b4 <LoRaMacCryptoGetFCntDown>
 800fa94:	4603      	mov	r3, r0
}
 800fa96:	4618      	mov	r0, r3
 800fa98:	3710      	adds	r7, #16
 800fa9a:	46bd      	mov	sp, r7
 800fa9c:	bd80      	pop	{r7, pc}
	...

0800faa0 <SwitchClass>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800faa0:	b5b0      	push	{r4, r5, r7, lr}
 800faa2:	b084      	sub	sp, #16
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	4603      	mov	r3, r0
 800faa8:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800faaa:	2303      	movs	r3, #3
 800faac:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 800faae:	4b6e      	ldr	r3, [pc, #440]	; (800fc68 <SwitchClass+0x1c8>)
 800fab0:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800fab4:	2b02      	cmp	r3, #2
 800fab6:	f000 80bb 	beq.w	800fc30 <SwitchClass+0x190>
 800faba:	2b02      	cmp	r3, #2
 800fabc:	f300 80ce 	bgt.w	800fc5c <SwitchClass+0x1bc>
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d003      	beq.n	800facc <SwitchClass+0x2c>
 800fac4:	2b01      	cmp	r3, #1
 800fac6:	f000 80a5 	beq.w	800fc14 <SwitchClass+0x174>
 800faca:	e0c7      	b.n	800fc5c <SwitchClass+0x1bc>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800facc:	79fb      	ldrb	r3, [r7, #7]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d109      	bne.n	800fae6 <SwitchClass+0x46>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800fad2:	4b65      	ldr	r3, [pc, #404]	; (800fc68 <SwitchClass+0x1c8>)
 800fad4:	4a64      	ldr	r2, [pc, #400]	; (800fc68 <SwitchClass+0x1c8>)
 800fad6:	3374      	adds	r3, #116	; 0x74
 800fad8:	326c      	adds	r2, #108	; 0x6c
 800fada:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fade:	e883 0003 	stmia.w	r3, {r0, r1}

                status = LORAMAC_STATUS_OK;
 800fae2:	2300      	movs	r3, #0
 800fae4:	73fb      	strb	r3, [r7, #15]
            }
            if( deviceClass == CLASS_B )
 800fae6:	79fb      	ldrb	r3, [r7, #7]
 800fae8:	2b01      	cmp	r3, #1
 800faea:	d10c      	bne.n	800fb06 <SwitchClass+0x66>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800faec:	79fb      	ldrb	r3, [r7, #7]
 800faee:	4618      	mov	r0, r3
 800faf0:	f003 fc7e 	bl	80133f0 <LoRaMacClassBSwitchClass>
 800faf4:	4603      	mov	r3, r0
 800faf6:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 800faf8:	7bfb      	ldrb	r3, [r7, #15]
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d103      	bne.n	800fb06 <SwitchClass+0x66>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800fafe:	4a5a      	ldr	r2, [pc, #360]	; (800fc68 <SwitchClass+0x1c8>)
 800fb00:	79fb      	ldrb	r3, [r7, #7]
 800fb02:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
                }
            }

            if( deviceClass == CLASS_C )
 800fb06:	79fb      	ldrb	r3, [r7, #7]
 800fb08:	2b02      	cmp	r3, #2
 800fb0a:	f040 80a2 	bne.w	800fc52 <SwitchClass+0x1b2>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800fb0e:	4a56      	ldr	r2, [pc, #344]	; (800fc68 <SwitchClass+0x1c8>)
 800fb10:	79fb      	ldrb	r3, [r7, #7]
 800fb12:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800fb16:	4a55      	ldr	r2, [pc, #340]	; (800fc6c <SwitchClass+0x1cc>)
 800fb18:	4b54      	ldr	r3, [pc, #336]	; (800fc6c <SwitchClass+0x1cc>)
 800fb1a:	f502 747a 	add.w	r4, r2, #1000	; 0x3e8
 800fb1e:	f503 7574 	add.w	r5, r3, #976	; 0x3d0
 800fb22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fb24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fb26:	e895 0003 	ldmia.w	r5, {r0, r1}
 800fb2a:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800fb2e:	4b4f      	ldr	r3, [pc, #316]	; (800fc6c <SwitchClass+0x1cc>)
 800fb30:	2202      	movs	r2, #2
 800fb32:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800fb36:	2300      	movs	r3, #0
 800fb38:	73bb      	strb	r3, [r7, #14]
 800fb3a:	e05b      	b.n	800fbf4 <SwitchClass+0x154>
                {
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800fb3c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800fb40:	4949      	ldr	r1, [pc, #292]	; (800fc68 <SwitchClass+0x1c8>)
 800fb42:	4613      	mov	r3, r2
 800fb44:	005b      	lsls	r3, r3, #1
 800fb46:	4413      	add	r3, r2
 800fb48:	011b      	lsls	r3, r3, #4
 800fb4a:	440b      	add	r3, r1
 800fb4c:	33e9      	adds	r3, #233	; 0xe9
 800fb4e:	781b      	ldrb	r3, [r3, #0]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d049      	beq.n	800fbe8 <SwitchClass+0x148>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 800fb54:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800fb58:	4943      	ldr	r1, [pc, #268]	; (800fc68 <SwitchClass+0x1c8>)
 800fb5a:	4613      	mov	r3, r2
 800fb5c:	005b      	lsls	r3, r3, #1
 800fb5e:	4413      	add	r3, r2
 800fb60:	011b      	lsls	r3, r3, #4
 800fb62:	440b      	add	r3, r1
 800fb64:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800fb68:	781b      	ldrb	r3, [r3, #0]
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800fb6a:	2b02      	cmp	r3, #2
 800fb6c:	d13c      	bne.n	800fbe8 <SwitchClass+0x148>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 800fb6e:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800fb72:	493d      	ldr	r1, [pc, #244]	; (800fc68 <SwitchClass+0x1c8>)
 800fb74:	4613      	mov	r3, r2
 800fb76:	005b      	lsls	r3, r3, #1
 800fb78:	4413      	add	r3, r2
 800fb7a:	011b      	lsls	r3, r3, #4
 800fb7c:	440b      	add	r3, r1
 800fb7e:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	4a38      	ldr	r2, [pc, #224]	; (800fc68 <SwitchClass+0x1c8>)
 800fb86:	6753      	str	r3, [r2, #116]	; 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 800fb88:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800fb8c:	4936      	ldr	r1, [pc, #216]	; (800fc68 <SwitchClass+0x1c8>)
 800fb8e:	4613      	mov	r3, r2
 800fb90:	005b      	lsls	r3, r3, #1
 800fb92:	4413      	add	r3, r2
 800fb94:	011b      	lsls	r3, r3, #4
 800fb96:	440b      	add	r3, r1
 800fb98:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800fb9c:	f993 3000 	ldrsb.w	r3, [r3]
 800fba0:	b2da      	uxtb	r2, r3
 800fba2:	4b31      	ldr	r3, [pc, #196]	; (800fc68 <SwitchClass+0x1c8>)
 800fba4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800fba8:	4b30      	ldr	r3, [pc, #192]	; (800fc6c <SwitchClass+0x1cc>)
 800fbaa:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 800fbae:	4b2f      	ldr	r3, [pc, #188]	; (800fc6c <SwitchClass+0x1cc>)
 800fbb0:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800fbb4:	4b2c      	ldr	r3, [pc, #176]	; (800fc68 <SwitchClass+0x1c8>)
 800fbb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fbb8:	4a2c      	ldr	r2, [pc, #176]	; (800fc6c <SwitchClass+0x1cc>)
 800fbba:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800fbbe:	4b2a      	ldr	r3, [pc, #168]	; (800fc68 <SwitchClass+0x1c8>)
 800fbc0:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800fbc4:	4b29      	ldr	r3, [pc, #164]	; (800fc6c <SwitchClass+0x1cc>)
 800fbc6:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800fbca:	4b27      	ldr	r3, [pc, #156]	; (800fc68 <SwitchClass+0x1c8>)
 800fbcc:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 800fbd0:	4b26      	ldr	r3, [pc, #152]	; (800fc6c <SwitchClass+0x1cc>)
 800fbd2:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800fbd6:	4b25      	ldr	r3, [pc, #148]	; (800fc6c <SwitchClass+0x1cc>)
 800fbd8:	2203      	movs	r2, #3
 800fbda:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800fbde:	4b23      	ldr	r3, [pc, #140]	; (800fc6c <SwitchClass+0x1cc>)
 800fbe0:	2201      	movs	r2, #1
 800fbe2:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
                        break;
 800fbe6:	e009      	b.n	800fbfc <SwitchClass+0x15c>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800fbe8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fbec:	b2db      	uxtb	r3, r3
 800fbee:	3301      	adds	r3, #1
 800fbf0:	b2db      	uxtb	r3, r3
 800fbf2:	73bb      	strb	r3, [r7, #14]
 800fbf4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	dd9f      	ble.n	800fb3c <SwitchClass+0x9c>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800fbfc:	4b1b      	ldr	r3, [pc, #108]	; (800fc6c <SwitchClass+0x1cc>)
 800fbfe:	2200      	movs	r2, #0
 800fc00:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800fc04:	4b1a      	ldr	r3, [pc, #104]	; (800fc70 <SwitchClass+0x1d0>)
 800fc06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc08:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 800fc0a:	f001 fa29 	bl	8011060 <OpenContinuousRxCWindow>
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */

                status = LORAMAC_STATUS_OK;
 800fc0e:	2300      	movs	r3, #0
 800fc10:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800fc12:	e01e      	b.n	800fc52 <SwitchClass+0x1b2>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800fc14:	79fb      	ldrb	r3, [r7, #7]
 800fc16:	4618      	mov	r0, r3
 800fc18:	f003 fbea 	bl	80133f0 <LoRaMacClassBSwitchClass>
 800fc1c:	4603      	mov	r3, r0
 800fc1e:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 800fc20:	7bfb      	ldrb	r3, [r7, #15]
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d117      	bne.n	800fc56 <SwitchClass+0x1b6>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800fc26:	4a10      	ldr	r2, [pc, #64]	; (800fc68 <SwitchClass+0x1c8>)
 800fc28:	79fb      	ldrb	r3, [r7, #7]
 800fc2a:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
            }
            break;
 800fc2e:	e012      	b.n	800fc56 <SwitchClass+0x1b6>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800fc30:	79fb      	ldrb	r3, [r7, #7]
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d111      	bne.n	800fc5a <SwitchClass+0x1ba>
            {
                // Reset RxSlot to NONE
                MacCtx.RxSlot = RX_SLOT_NONE;
 800fc36:	4b0d      	ldr	r3, [pc, #52]	; (800fc6c <SwitchClass+0x1cc>)
 800fc38:	2206      	movs	r2, #6
 800fc3a:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490

                Nvm.MacGroup2.DeviceClass = deviceClass;
 800fc3e:	4a0a      	ldr	r2, [pc, #40]	; (800fc68 <SwitchClass+0x1c8>)
 800fc40:	79fb      	ldrb	r3, [r7, #7]
 800fc42:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800fc46:	4b0a      	ldr	r3, [pc, #40]	; (800fc70 <SwitchClass+0x1d0>)
 800fc48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc4a:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800fc4c:	2300      	movs	r3, #0
 800fc4e:	73fb      	strb	r3, [r7, #15]
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */
            }
            break;
 800fc50:	e003      	b.n	800fc5a <SwitchClass+0x1ba>
            break;
 800fc52:	bf00      	nop
 800fc54:	e002      	b.n	800fc5c <SwitchClass+0x1bc>
            break;
 800fc56:	bf00      	nop
 800fc58:	e000      	b.n	800fc5c <SwitchClass+0x1bc>
            break;
 800fc5a:	bf00      	nop
        }
    }

    return status;
 800fc5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc5e:	4618      	mov	r0, r3
 800fc60:	3710      	adds	r7, #16
 800fc62:	46bd      	mov	sp, r7
 800fc64:	bdb0      	pop	{r4, r5, r7, pc}
 800fc66:	bf00      	nop
 800fc68:	20000c5c 	.word	0x20000c5c
 800fc6c:	20000740 	.word	0x20000740
 800fc70:	0801ea64 	.word	0x0801ea64

0800fc74 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800fc74:	b580      	push	{r7, lr}
 800fc76:	b086      	sub	sp, #24
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	4603      	mov	r3, r0
 800fc7c:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800fc7e:	4b10      	ldr	r3, [pc, #64]	; (800fcc0 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800fc80:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800fc84:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 800fc86:	79fb      	ldrb	r3, [r7, #7]
 800fc88:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800fc8a:	230d      	movs	r3, #13
 800fc8c:	743b      	strb	r3, [r7, #16]

    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800fc8e:	4b0c      	ldr	r3, [pc, #48]	; (800fcc0 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800fc90:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d001      	beq.n	800fc9c <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800fc98:	230e      	movs	r3, #14
 800fc9a:	743b      	strb	r3, [r7, #16]
    }
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fc9c:	4b08      	ldr	r3, [pc, #32]	; (800fcc0 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800fc9e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800fca2:	f107 0210 	add.w	r2, r7, #16
 800fca6:	4611      	mov	r1, r2
 800fca8:	4618      	mov	r0, r3
 800fcaa:	f005 faf3 	bl	8015294 <RegionGetPhyParam>
 800fcae:	4603      	mov	r3, r0
 800fcb0:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	b2db      	uxtb	r3, r3
}
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	3718      	adds	r7, #24
 800fcba:	46bd      	mov	sp, r7
 800fcbc:	bd80      	pop	{r7, pc}
 800fcbe:	bf00      	nop
 800fcc0:	20000c5c 	.word	0x20000c5c

0800fcc4 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800fcc4:	b580      	push	{r7, lr}
 800fcc6:	b084      	sub	sp, #16
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	4603      	mov	r3, r0
 800fccc:	71fb      	strb	r3, [r7, #7]
 800fcce:	460b      	mov	r3, r1
 800fcd0:	71bb      	strb	r3, [r7, #6]
 800fcd2:	4613      	mov	r3, r2
 800fcd4:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 800fcd6:	2300      	movs	r3, #0
 800fcd8:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 800fcda:	2300      	movs	r3, #0
 800fcdc:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800fcde:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800fce2:	4618      	mov	r0, r3
 800fce4:	f7ff ffc6 	bl	800fc74 <GetMaxAppPayloadWithoutFOptsLength>
 800fce8:	4603      	mov	r3, r0
 800fcea:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800fcec:	79fb      	ldrb	r3, [r7, #7]
 800fcee:	b29a      	uxth	r2, r3
 800fcf0:	797b      	ldrb	r3, [r7, #5]
 800fcf2:	b29b      	uxth	r3, r3
 800fcf4:	4413      	add	r3, r2
 800fcf6:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800fcf8:	89ba      	ldrh	r2, [r7, #12]
 800fcfa:	89fb      	ldrh	r3, [r7, #14]
 800fcfc:	429a      	cmp	r2, r3
 800fcfe:	d804      	bhi.n	800fd0a <ValidatePayloadLength+0x46>
 800fd00:	89bb      	ldrh	r3, [r7, #12]
 800fd02:	2bff      	cmp	r3, #255	; 0xff
 800fd04:	d801      	bhi.n	800fd0a <ValidatePayloadLength+0x46>
    {
        return true;
 800fd06:	2301      	movs	r3, #1
 800fd08:	e000      	b.n	800fd0c <ValidatePayloadLength+0x48>
    }
    return false;
 800fd0a:	2300      	movs	r3, #0
}
 800fd0c:	4618      	mov	r0, r3
 800fd0e:	3710      	adds	r7, #16
 800fd10:	46bd      	mov	sp, r7
 800fd12:	bd80      	pop	{r7, pc}

0800fd14 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800fd14:	b590      	push	{r4, r7, lr}
 800fd16:	b0a5      	sub	sp, #148	; 0x94
 800fd18:	af02      	add	r7, sp, #8
 800fd1a:	6078      	str	r0, [r7, #4]
 800fd1c:	4608      	mov	r0, r1
 800fd1e:	4611      	mov	r1, r2
 800fd20:	461a      	mov	r2, r3
 800fd22:	4603      	mov	r3, r0
 800fd24:	70fb      	strb	r3, [r7, #3]
 800fd26:	460b      	mov	r3, r1
 800fd28:	70bb      	strb	r3, [r7, #2]
 800fd2a:	4613      	mov	r3, r2
 800fd2c:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 800fd2e:	2300      	movs	r3, #0
 800fd30:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 800fd34:	2300      	movs	r3, #0
 800fd36:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800fd3a:	2300      	movs	r3, #0
 800fd3c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    MacCommand_t* macCmd;
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 800fd40:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	f000 84ab 	beq.w	80106a0 <ProcessMacCommands+0x98c>
 800fd4a:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 800fd4e:	2b01      	cmp	r3, #1
 800fd50:	f040 84ac 	bne.w	80106ac <ProcessMacCommands+0x998>
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 800fd54:	f000 bca4 	b.w	80106a0 <ProcessMacCommands+0x98c>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800fd58:	78fb      	ldrb	r3, [r7, #3]
 800fd5a:	687a      	ldr	r2, [r7, #4]
 800fd5c:	4413      	add	r3, r2
 800fd5e:	781b      	ldrb	r3, [r3, #0]
 800fd60:	4618      	mov	r0, r3
 800fd62:	f003 fe45 	bl	80139f0 <LoRaMacCommandsGetCmdSize>
 800fd66:	4603      	mov	r3, r0
 800fd68:	461a      	mov	r2, r3
 800fd6a:	78fb      	ldrb	r3, [r7, #3]
 800fd6c:	441a      	add	r2, r3
 800fd6e:	78bb      	ldrb	r3, [r7, #2]
 800fd70:	429a      	cmp	r2, r3
 800fd72:	f300 849d 	bgt.w	80106b0 <ProcessMacCommands+0x99c>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800fd76:	78fb      	ldrb	r3, [r7, #3]
 800fd78:	1c5a      	adds	r2, r3, #1
 800fd7a:	70fa      	strb	r2, [r7, #3]
 800fd7c:	461a      	mov	r2, r3
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	4413      	add	r3, r2
 800fd82:	781b      	ldrb	r3, [r3, #0]
 800fd84:	3b02      	subs	r3, #2
 800fd86:	2b11      	cmp	r3, #17
 800fd88:	f200 8494 	bhi.w	80106b4 <ProcessMacCommands+0x9a0>
 800fd8c:	a201      	add	r2, pc, #4	; (adr r2, 800fd94 <ProcessMacCommands+0x80>)
 800fd8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd92:	bf00      	nop
 800fd94:	0800fddd 	.word	0x0800fddd
 800fd98:	0800fe1f 	.word	0x0800fe1f
 800fd9c:	0800ff9b 	.word	0x0800ff9b
 800fda0:	0800ffd9 	.word	0x0800ffd9
 800fda4:	080100d1 	.word	0x080100d1
 800fda8:	08010121 	.word	0x08010121
 800fdac:	080101dd 	.word	0x080101dd
 800fdb0:	08010233 	.word	0x08010233
 800fdb4:	08010319 	.word	0x08010319
 800fdb8:	080106b5 	.word	0x080106b5
 800fdbc:	080106b5 	.word	0x080106b5
 800fdc0:	080103c1 	.word	0x080103c1
 800fdc4:	080106b5 	.word	0x080106b5
 800fdc8:	080106b5 	.word	0x080106b5
 800fdcc:	080104e1 	.word	0x080104e1
 800fdd0:	08010515 	.word	0x08010515
 800fdd4:	080105a5 	.word	0x080105a5
 800fdd8:	0801061b 	.word	0x0801061b
                break;
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800fddc:	2005      	movs	r0, #5
 800fdde:	f003 ffdf 	bl	8013da0 <LoRaMacConfirmQueueIsCmdActive>
 800fde2:	4603      	mov	r3, r0
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	f000 845b 	beq.w	80106a0 <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800fdea:	2105      	movs	r1, #5
 800fdec:	2000      	movs	r0, #0
 800fdee:	f003 ff4b 	bl	8013c88 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800fdf2:	78fb      	ldrb	r3, [r7, #3]
 800fdf4:	1c5a      	adds	r2, r3, #1
 800fdf6:	70fa      	strb	r2, [r7, #3]
 800fdf8:	461a      	mov	r2, r3
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	4413      	add	r3, r2
 800fdfe:	781a      	ldrb	r2, [r3, #0]
 800fe00:	4bb0      	ldr	r3, [pc, #704]	; (80100c4 <ProcessMacCommands+0x3b0>)
 800fe02:	f883 245c 	strb.w	r2, [r3, #1116]	; 0x45c
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800fe06:	78fb      	ldrb	r3, [r7, #3]
 800fe08:	1c5a      	adds	r2, r3, #1
 800fe0a:	70fa      	strb	r2, [r7, #3]
 800fe0c:	461a      	mov	r2, r3
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	4413      	add	r3, r2
 800fe12:	781a      	ldrb	r2, [r3, #0]
 800fe14:	4bab      	ldr	r3, [pc, #684]	; (80100c4 <ProcessMacCommands+0x3b0>)
 800fe16:	f883 245d 	strb.w	r2, [r3, #1117]	; 0x45d
                }
                break;
 800fe1a:	f000 bc41 	b.w	80106a0 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800fe1e:	2300      	movs	r3, #0
 800fe20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 800fe24:	2300      	movs	r3, #0
 800fe26:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 800fe2a:	2300      	movs	r3, #0
 800fe2c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 800fe30:	2300      	movs	r3, #0
 800fe32:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
                }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                if( adrBlockFound == false )
 800fe36:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800fe3a:	f083 0301 	eor.w	r3, r3, #1
 800fe3e:	b2db      	uxtb	r3, r3
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	f000 80a5 	beq.w	800ff90 <ProcessMacCommands+0x27c>
                {
                    adrBlockFound = true;
 800fe46:	2301      	movs	r3, #1
 800fe48:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    do
                    {
                        // Fill parameter structure
                        linkAdrReq.Payload = &payload[macIndex - 1];
 800fe4c:	78fb      	ldrb	r3, [r7, #3]
 800fe4e:	3b01      	subs	r3, #1
 800fe50:	687a      	ldr	r2, [r7, #4]
 800fe52:	4413      	add	r3, r2
 800fe54:	65fb      	str	r3, [r7, #92]	; 0x5c
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800fe56:	4b9c      	ldr	r3, [pc, #624]	; (80100c8 <ProcessMacCommands+0x3b4>)
 800fe58:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 800fe5c:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800fe60:	4b99      	ldr	r3, [pc, #612]	; (80100c8 <ProcessMacCommands+0x3b4>)
 800fe62:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800fe66:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800fe6a:	4b97      	ldr	r3, [pc, #604]	; (80100c8 <ProcessMacCommands+0x3b4>)
 800fe6c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800fe70:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800fe74:	4b94      	ldr	r3, [pc, #592]	; (80100c8 <ProcessMacCommands+0x3b4>)
 800fe76:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800fe7a:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800fe7e:	4b92      	ldr	r3, [pc, #584]	; (80100c8 <ProcessMacCommands+0x3b4>)
 800fe80:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800fe84:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 800fe88:	4b8f      	ldr	r3, [pc, #572]	; (80100c8 <ProcessMacCommands+0x3b4>)
 800fe8a:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800fe8e:	65bb      	str	r3, [r7, #88]	; 0x58

                        // There is a fundamental difference in reporting the status
                        // of the LinkAdrRequests when ADR is on or off. When ADR is on, every
                        // LinkAdrAns contains the same value. This does not hold when ADR is off,
                        // where every LinkAdrAns requires an individual status.
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800fe90:	4b8d      	ldr	r3, [pc, #564]	; (80100c8 <ProcessMacCommands+0x3b4>)
 800fe92:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d008      	beq.n	800feac <ProcessMacCommands+0x198>
                        {
                            // When ADR is on, the function RegionLinkAdrReq will take care
                            // about the parsing and interpretation of the LinkAdrRequest block and
                            // it provides one status which shall be applied to every LinkAdrAns
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800fe9a:	78ba      	ldrb	r2, [r7, #2]
 800fe9c:	78fb      	ldrb	r3, [r7, #3]
 800fe9e:	1ad3      	subs	r3, r2, r3
 800fea0:	b2db      	uxtb	r3, r3
 800fea2:	3301      	adds	r3, #1
 800fea4:	b2db      	uxtb	r3, r3
 800fea6:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 800feaa:	e002      	b.n	800feb2 <ProcessMacCommands+0x19e>
                            // When ADR is off, this function will loop over the individual LinkAdrRequests
                            // and will call RegionLinkAdrReq for each individually, as every request
                            // requires an individual answer.
                            // When ADR is off, the function RegionLinkAdrReq ignores the new values for
                            // ChannelsDatarate, ChannelsTxPower and ChannelsNbTrans.
                            linkAdrReq.PayloadSize = 5;
 800feac:	2305      	movs	r3, #5
 800feae:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                        }

                        // Process the ADR requests
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800feb2:	4b85      	ldr	r3, [pc, #532]	; (80100c8 <ProcessMacCommands+0x3b4>)
 800feb4:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800feb8:	f107 0456 	add.w	r4, r7, #86	; 0x56
 800febc:	f107 0257 	add.w	r2, r7, #87	; 0x57
 800fec0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800fec4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800fec8:	9301      	str	r3, [sp, #4]
 800feca:	f107 0355 	add.w	r3, r7, #85	; 0x55
 800fece:	9300      	str	r3, [sp, #0]
 800fed0:	4623      	mov	r3, r4
 800fed2:	f005 fae2 	bl	801549a <RegionLinkAdrReq>
 800fed6:	4603      	mov	r3, r0
 800fed8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                                &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                        if( ( status & 0x07 ) == 0x07 )
 800fedc:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800fee0:	f003 0307 	and.w	r3, r3, #7
 800fee4:	2b07      	cmp	r3, #7
 800fee6:	d119      	bne.n	800ff1c <ProcessMacCommands+0x208>
                        {
                            // Set the status that the datarate has been increased
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 800fee8:	4b77      	ldr	r3, [pc, #476]	; (80100c8 <ProcessMacCommands+0x3b4>)
 800feea:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 800feee:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800fef2:	429a      	cmp	r2, r3
 800fef4:	da03      	bge.n	800fefe <ProcessMacCommands+0x1ea>
                            {
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 800fef6:	4b74      	ldr	r3, [pc, #464]	; (80100c8 <ProcessMacCommands+0x3b4>)
 800fef8:	2201      	movs	r2, #1
 800fefa:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
                            }
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800fefe:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 800ff02:	4b71      	ldr	r3, [pc, #452]	; (80100c8 <ProcessMacCommands+0x3b4>)
 800ff04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800ff08:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 800ff0c:	4b6e      	ldr	r3, [pc, #440]	; (80100c8 <ProcessMacCommands+0x3b4>)
 800ff0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800ff12:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800ff16:	4b6c      	ldr	r3, [pc, #432]	; (80100c8 <ProcessMacCommands+0x3b4>)
 800ff18:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                        }

                        // Add the answers to the buffer
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800ff1c:	2300      	movs	r3, #0
 800ff1e:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800ff22:	e00b      	b.n	800ff3c <ProcessMacCommands+0x228>
                        {
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800ff24:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 800ff28:	2201      	movs	r2, #1
 800ff2a:	4619      	mov	r1, r3
 800ff2c:	2003      	movs	r0, #3
 800ff2e:	f003 fbff 	bl	8013730 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800ff32:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800ff36:	3301      	adds	r3, #1
 800ff38:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800ff3c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800ff40:	4a62      	ldr	r2, [pc, #392]	; (80100cc <ProcessMacCommands+0x3b8>)
 800ff42:	fba2 2303 	umull	r2, r3, r2, r3
 800ff46:	089b      	lsrs	r3, r3, #2
 800ff48:	b2db      	uxtb	r3, r3
 800ff4a:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 800ff4e:	429a      	cmp	r2, r3
 800ff50:	d3e8      	bcc.n	800ff24 <ProcessMacCommands+0x210>
                        }
                        // Update MAC index
                        macIndex += linkAdrNbBytesParsed - 1;
 800ff52:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800ff56:	78fb      	ldrb	r3, [r7, #3]
 800ff58:	4413      	add	r3, r2
 800ff5a:	b2db      	uxtb	r3, r3
 800ff5c:	3b01      	subs	r3, #1
 800ff5e:	70fb      	strb	r3, [r7, #3]

                        // Check to prevent invalid access
                        if( macIndex >= commandsSize )
 800ff60:	78fa      	ldrb	r2, [r7, #3]
 800ff62:	78bb      	ldrb	r3, [r7, #2]
 800ff64:	429a      	cmp	r2, r3
 800ff66:	d20a      	bcs.n	800ff7e <ProcessMacCommands+0x26a>
                            break;

                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 800ff68:	78fb      	ldrb	r3, [r7, #3]
 800ff6a:	1c5a      	adds	r2, r3, #1
 800ff6c:	70fa      	strb	r2, [r7, #3]
 800ff6e:	461a      	mov	r2, r3
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	4413      	add	r3, r2
 800ff74:	781b      	ldrb	r3, [r3, #0]
 800ff76:	2b03      	cmp	r3, #3
 800ff78:	f43f af68 	beq.w	800fe4c <ProcessMacCommands+0x138>
 800ff7c:	e000      	b.n	800ff80 <ProcessMacCommands+0x26c>
                            break;
 800ff7e:	bf00      	nop

                    if( macIndex < commandsSize )
 800ff80:	78fa      	ldrb	r2, [r7, #3]
 800ff82:	78bb      	ldrb	r3, [r7, #2]
 800ff84:	429a      	cmp	r2, r3
 800ff86:	d206      	bcs.n	800ff96 <ProcessMacCommands+0x282>
                    {
                        // Decrease the index such that it points to the next MAC command
                        macIndex--;
 800ff88:	78fb      	ldrb	r3, [r7, #3]
 800ff8a:	3b01      	subs	r3, #1
 800ff8c:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 800ff8e:	e002      	b.n	800ff96 <ProcessMacCommands+0x282>
                    macIndex += 4;
 800ff90:	78fb      	ldrb	r3, [r7, #3]
 800ff92:	3304      	adds	r3, #4
 800ff94:	70fb      	strb	r3, [r7, #3]
                break;
 800ff96:	bf00      	nop
 800ff98:	e382      	b.n	80106a0 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800ff9a:	78fb      	ldrb	r3, [r7, #3]
 800ff9c:	1c5a      	adds	r2, r3, #1
 800ff9e:	70fa      	strb	r2, [r7, #3]
 800ffa0:	461a      	mov	r2, r3
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	4413      	add	r3, r2
 800ffa6:	781b      	ldrb	r3, [r3, #0]
 800ffa8:	f003 030f 	and.w	r3, r3, #15
 800ffac:	b2da      	uxtb	r2, r3
 800ffae:	4b46      	ldr	r3, [pc, #280]	; (80100c8 <ProcessMacCommands+0x3b4>)
 800ffb0:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800ffb4:	4b44      	ldr	r3, [pc, #272]	; (80100c8 <ProcessMacCommands+0x3b4>)
 800ffb6:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 800ffba:	461a      	mov	r2, r3
 800ffbc:	2301      	movs	r3, #1
 800ffbe:	4093      	lsls	r3, r2
 800ffc0:	b29a      	uxth	r2, r3
 800ffc2:	4b41      	ldr	r3, [pc, #260]	; (80100c8 <ProcessMacCommands+0x3b4>)
 800ffc4:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800ffc8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800ffcc:	2200      	movs	r2, #0
 800ffce:	4619      	mov	r1, r3
 800ffd0:	2004      	movs	r0, #4
 800ffd2:	f003 fbad 	bl	8013730 <LoRaMacCommandsAddCmd>
                break;
 800ffd6:	e363      	b.n	80106a0 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 800ffd8:	2307      	movs	r3, #7
 800ffda:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800ffde:	78fb      	ldrb	r3, [r7, #3]
 800ffe0:	687a      	ldr	r2, [r7, #4]
 800ffe2:	4413      	add	r3, r2
 800ffe4:	781b      	ldrb	r3, [r3, #0]
 800ffe6:	091b      	lsrs	r3, r3, #4
 800ffe8:	b2db      	uxtb	r3, r3
 800ffea:	b25b      	sxtb	r3, r3
 800ffec:	f003 0307 	and.w	r3, r3, #7
 800fff0:	b25b      	sxtb	r3, r3
 800fff2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800fff6:	78fb      	ldrb	r3, [r7, #3]
 800fff8:	687a      	ldr	r2, [r7, #4]
 800fffa:	4413      	add	r3, r2
 800fffc:	781b      	ldrb	r3, [r3, #0]
 800fffe:	b25b      	sxtb	r3, r3
 8010000:	f003 030f 	and.w	r3, r3, #15
 8010004:	b25b      	sxtb	r3, r3
 8010006:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 801000a:	78fb      	ldrb	r3, [r7, #3]
 801000c:	3301      	adds	r3, #1
 801000e:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8010010:	78fb      	ldrb	r3, [r7, #3]
 8010012:	1c5a      	adds	r2, r3, #1
 8010014:	70fa      	strb	r2, [r7, #3]
 8010016:	461a      	mov	r2, r3
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	4413      	add	r3, r2
 801001c:	781b      	ldrb	r3, [r3, #0]
 801001e:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8010020:	78fb      	ldrb	r3, [r7, #3]
 8010022:	1c5a      	adds	r2, r3, #1
 8010024:	70fa      	strb	r2, [r7, #3]
 8010026:	461a      	mov	r2, r3
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	4413      	add	r3, r2
 801002c:	781b      	ldrb	r3, [r3, #0]
 801002e:	021a      	lsls	r2, r3, #8
 8010030:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010032:	4313      	orrs	r3, r2
 8010034:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8010036:	78fb      	ldrb	r3, [r7, #3]
 8010038:	1c5a      	adds	r2, r3, #1
 801003a:	70fa      	strb	r2, [r7, #3]
 801003c:	461a      	mov	r2, r3
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	4413      	add	r3, r2
 8010042:	781b      	ldrb	r3, [r3, #0]
 8010044:	041a      	lsls	r2, r3, #16
 8010046:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010048:	4313      	orrs	r3, r2
 801004a:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 801004c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801004e:	2264      	movs	r2, #100	; 0x64
 8010050:	fb02 f303 	mul.w	r3, r2, r3
 8010054:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 8010056:	4b1c      	ldr	r3, [pc, #112]	; (80100c8 <ProcessMacCommands+0x3b4>)
 8010058:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801005c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8010060:	4611      	mov	r1, r2
 8010062:	4618      	mov	r0, r3
 8010064:	f005 fa40 	bl	80154e8 <RegionRxParamSetupReq>
 8010068:	4603      	mov	r3, r0
 801006a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 801006e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8010072:	f003 0307 	and.w	r3, r3, #7
 8010076:	2b07      	cmp	r3, #7
 8010078:	d117      	bne.n	80100aa <ProcessMacCommands+0x396>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 801007a:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 801007e:	b2da      	uxtb	r2, r3
 8010080:	4b11      	ldr	r3, [pc, #68]	; (80100c8 <ProcessMacCommands+0x3b4>)
 8010082:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8010086:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 801008a:	b2da      	uxtb	r2, r3
 801008c:	4b0e      	ldr	r3, [pc, #56]	; (80100c8 <ProcessMacCommands+0x3b4>)
 801008e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8010092:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010094:	4a0c      	ldr	r2, [pc, #48]	; (80100c8 <ProcessMacCommands+0x3b4>)
 8010096:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8010098:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801009a:	4a0b      	ldr	r2, [pc, #44]	; (80100c8 <ProcessMacCommands+0x3b4>)
 801009c:	6753      	str	r3, [r2, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 801009e:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 80100a2:	b2da      	uxtb	r2, r3
 80100a4:	4b08      	ldr	r3, [pc, #32]	; (80100c8 <ProcessMacCommands+0x3b4>)
 80100a6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                }
                macCmdPayload[0] = status;
 80100aa:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80100ae:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 80100b2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80100b6:	2201      	movs	r2, #1
 80100b8:	4619      	mov	r1, r3
 80100ba:	2005      	movs	r0, #5
 80100bc:	f003 fb38 	bl	8013730 <LoRaMacCommandsAddCmd>
                break;
 80100c0:	bf00      	nop
 80100c2:	e2ed      	b.n	80106a0 <ProcessMacCommands+0x98c>
 80100c4:	20000740 	.word	0x20000740
 80100c8:	20000c5c 	.word	0x20000c5c
 80100cc:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 80100d0:	23ff      	movs	r3, #255	; 0xff
 80100d2:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 80100d6:	4bb7      	ldr	r3, [pc, #732]	; (80103b4 <ProcessMacCommands+0x6a0>)
 80100d8:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d00d      	beq.n	80100fc <ProcessMacCommands+0x3e8>
 80100e0:	4bb4      	ldr	r3, [pc, #720]	; (80103b4 <ProcessMacCommands+0x6a0>)
 80100e2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d007      	beq.n	80100fc <ProcessMacCommands+0x3e8>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 80100ec:	4bb1      	ldr	r3, [pc, #708]	; (80103b4 <ProcessMacCommands+0x6a0>)
 80100ee:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	4798      	blx	r3
 80100f6:	4603      	mov	r3, r0
 80100f8:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 80100fc:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8010100:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8010104:	787b      	ldrb	r3, [r7, #1]
 8010106:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801010a:	b2db      	uxtb	r3, r3
 801010c:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8010110:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010114:	2202      	movs	r2, #2
 8010116:	4619      	mov	r1, r3
 8010118:	2006      	movs	r0, #6
 801011a:	f003 fb09 	bl	8013730 <LoRaMacCommandsAddCmd>
                break;
 801011e:	e2bf      	b.n	80106a0 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 8010120:	2303      	movs	r3, #3
 8010122:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 8010126:	78fb      	ldrb	r3, [r7, #3]
 8010128:	1c5a      	adds	r2, r3, #1
 801012a:	70fa      	strb	r2, [r7, #3]
 801012c:	461a      	mov	r2, r3
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	4413      	add	r3, r2
 8010132:	781b      	ldrb	r3, [r3, #0]
 8010134:	b25b      	sxtb	r3, r3
 8010136:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 801013a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801013e:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8010140:	78fb      	ldrb	r3, [r7, #3]
 8010142:	1c5a      	adds	r2, r3, #1
 8010144:	70fa      	strb	r2, [r7, #3]
 8010146:	461a      	mov	r2, r3
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	4413      	add	r3, r2
 801014c:	781b      	ldrb	r3, [r3, #0]
 801014e:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8010150:	78fb      	ldrb	r3, [r7, #3]
 8010152:	1c5a      	adds	r2, r3, #1
 8010154:	70fa      	strb	r2, [r7, #3]
 8010156:	461a      	mov	r2, r3
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	4413      	add	r3, r2
 801015c:	781b      	ldrb	r3, [r3, #0]
 801015e:	021a      	lsls	r2, r3, #8
 8010160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010162:	4313      	orrs	r3, r2
 8010164:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8010166:	78fb      	ldrb	r3, [r7, #3]
 8010168:	1c5a      	adds	r2, r3, #1
 801016a:	70fa      	strb	r2, [r7, #3]
 801016c:	461a      	mov	r2, r3
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	4413      	add	r3, r2
 8010172:	781b      	ldrb	r3, [r3, #0]
 8010174:	041a      	lsls	r2, r3, #16
 8010176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010178:	4313      	orrs	r3, r2
 801017a:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 801017c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801017e:	2264      	movs	r2, #100	; 0x64
 8010180:	fb02 f303 	mul.w	r3, r2, r3
 8010184:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 8010186:	2300      	movs	r3, #0
 8010188:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 801018a:	78fb      	ldrb	r3, [r7, #3]
 801018c:	1c5a      	adds	r2, r3, #1
 801018e:	70fa      	strb	r2, [r7, #3]
 8010190:	461a      	mov	r2, r3
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	4413      	add	r3, r2
 8010196:	781b      	ldrb	r3, [r3, #0]
 8010198:	b25b      	sxtb	r3, r3
 801019a:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 801019e:	4b86      	ldr	r3, [pc, #536]	; (80103b8 <ProcessMacCommands+0x6a4>)
 80101a0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80101a4:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80101a8:	4611      	mov	r1, r2
 80101aa:	4618      	mov	r0, r3
 80101ac:	f005 f9b7 	bl	801551e <RegionNewChannelReq>
 80101b0:	4603      	mov	r3, r0
 80101b2:	b2db      	uxtb	r3, r3
 80101b4:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 80101b8:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80101bc:	b25b      	sxtb	r3, r3
 80101be:	2b00      	cmp	r3, #0
 80101c0:	db0a      	blt.n	80101d8 <ProcessMacCommands+0x4c4>
                {
                    macCmdPayload[0] = status;
 80101c2:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80101c6:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 80101ca:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80101ce:	2201      	movs	r2, #1
 80101d0:	4619      	mov	r1, r3
 80101d2:	2007      	movs	r0, #7
 80101d4:	f003 faac 	bl	8013730 <LoRaMacCommandsAddCmd>
                }
                break;
 80101d8:	bf00      	nop
 80101da:	e261      	b.n	80106a0 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 80101dc:	78fb      	ldrb	r3, [r7, #3]
 80101de:	1c5a      	adds	r2, r3, #1
 80101e0:	70fa      	strb	r2, [r7, #3]
 80101e2:	461a      	mov	r2, r3
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	4413      	add	r3, r2
 80101e8:	781b      	ldrb	r3, [r3, #0]
 80101ea:	f003 030f 	and.w	r3, r3, #15
 80101ee:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 80101f2:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d104      	bne.n	8010204 <ProcessMacCommands+0x4f0>
                {
                    delay++;
 80101fa:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80101fe:	3301      	adds	r3, #1
 8010200:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8010204:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8010208:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801020c:	fb02 f303 	mul.w	r3, r2, r3
 8010210:	461a      	mov	r2, r3
 8010212:	4b69      	ldr	r3, [pc, #420]	; (80103b8 <ProcessMacCommands+0x6a4>)
 8010214:	659a      	str	r2, [r3, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8010216:	4b68      	ldr	r3, [pc, #416]	; (80103b8 <ProcessMacCommands+0x6a4>)
 8010218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801021a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801021e:	4a66      	ldr	r2, [pc, #408]	; (80103b8 <ProcessMacCommands+0x6a4>)
 8010220:	65d3      	str	r3, [r2, #92]	; 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8010222:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010226:	2200      	movs	r2, #0
 8010228:	4619      	mov	r1, r3
 801022a:	2008      	movs	r0, #8
 801022c:	f003 fa80 	bl	8013730 <LoRaMacCommandsAddCmd>
                break;
 8010230:	e236      	b.n	80106a0 <ProcessMacCommands+0x98c>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 8010232:	78fb      	ldrb	r3, [r7, #3]
 8010234:	1c5a      	adds	r2, r3, #1
 8010236:	70fa      	strb	r2, [r7, #3]
 8010238:	461a      	mov	r2, r3
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	4413      	add	r3, r2
 801023e:	781b      	ldrb	r3, [r3, #0]
 8010240:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 8010244:	2300      	movs	r3, #0
 8010246:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 801024a:	2300      	movs	r3, #0
 801024c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8010250:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8010254:	f003 0320 	and.w	r3, r3, #32
 8010258:	2b00      	cmp	r3, #0
 801025a:	d002      	beq.n	8010262 <ProcessMacCommands+0x54e>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 801025c:	2301      	movs	r3, #1
 801025e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8010262:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8010266:	f003 0310 	and.w	r3, r3, #16
 801026a:	2b00      	cmp	r3, #0
 801026c:	d002      	beq.n	8010274 <ProcessMacCommands+0x560>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 801026e:	2301      	movs	r3, #1
 8010270:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8010274:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8010278:	f003 030f 	and.w	r3, r3, #15
 801027c:	b2db      	uxtb	r3, r3
 801027e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8010282:	4b4d      	ldr	r3, [pc, #308]	; (80103b8 <ProcessMacCommands+0x6a4>)
 8010284:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010288:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801028c:	4611      	mov	r1, r2
 801028e:	4618      	mov	r0, r3
 8010290:	f005 f960 	bl	8015554 <RegionTxParamSetupReq>
 8010294:	4603      	mov	r3, r0
 8010296:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801029a:	d03b      	beq.n	8010314 <ProcessMacCommands+0x600>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 801029c:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 80102a0:	4b45      	ldr	r3, [pc, #276]	; (80103b8 <ProcessMacCommands+0x6a4>)
 80102a2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 80102a6:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80102aa:	4b43      	ldr	r3, [pc, #268]	; (80103b8 <ProcessMacCommands+0x6a4>)
 80102ac:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 80102b0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80102b4:	461a      	mov	r2, r3
 80102b6:	4b41      	ldr	r3, [pc, #260]	; (80103bc <ProcessMacCommands+0x6a8>)
 80102b8:	5c9b      	ldrb	r3, [r3, r2]
 80102ba:	4618      	mov	r0, r3
 80102bc:	f7f0 fa86 	bl	80007cc <__aeabi_ui2f>
 80102c0:	4603      	mov	r3, r0
 80102c2:	4a3d      	ldr	r2, [pc, #244]	; (80103b8 <ProcessMacCommands+0x6a4>)
 80102c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 80102c8:	2302      	movs	r3, #2
 80102ca:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80102ce:	4b3a      	ldr	r3, [pc, #232]	; (80103b8 <ProcessMacCommands+0x6a4>)
 80102d0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80102d4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80102d8:	4b37      	ldr	r3, [pc, #220]	; (80103b8 <ProcessMacCommands+0x6a4>)
 80102da:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80102de:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80102e2:	4611      	mov	r1, r2
 80102e4:	4618      	mov	r0, r3
 80102e6:	f004 ffd5 	bl	8015294 <RegionGetPhyParam>
 80102ea:	4603      	mov	r3, r0
 80102ec:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 80102ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102f0:	b25a      	sxtb	r2, r3
 80102f2:	4b31      	ldr	r3, [pc, #196]	; (80103b8 <ProcessMacCommands+0x6a4>)
 80102f4:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80102f8:	4293      	cmp	r3, r2
 80102fa:	bfb8      	it	lt
 80102fc:	4613      	movlt	r3, r2
 80102fe:	b25a      	sxtb	r2, r3
 8010300:	4b2d      	ldr	r3, [pc, #180]	; (80103b8 <ProcessMacCommands+0x6a4>)
 8010302:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8010306:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801030a:	2200      	movs	r2, #0
 801030c:	4619      	mov	r1, r3
 801030e:	2009      	movs	r0, #9
 8010310:	f003 fa0e 	bl	8013730 <LoRaMacCommandsAddCmd>
                }
                break;
 8010314:	bf00      	nop
 8010316:	e1c3      	b.n	80106a0 <ProcessMacCommands+0x98c>
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 8010318:	2303      	movs	r3, #3
 801031a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 801031e:	78fb      	ldrb	r3, [r7, #3]
 8010320:	1c5a      	adds	r2, r3, #1
 8010322:	70fa      	strb	r2, [r7, #3]
 8010324:	461a      	mov	r2, r3
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	4413      	add	r3, r2
 801032a:	781b      	ldrb	r3, [r3, #0]
 801032c:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8010330:	78fb      	ldrb	r3, [r7, #3]
 8010332:	1c5a      	adds	r2, r3, #1
 8010334:	70fa      	strb	r2, [r7, #3]
 8010336:	461a      	mov	r2, r3
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	4413      	add	r3, r2
 801033c:	781b      	ldrb	r3, [r3, #0]
 801033e:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8010340:	78fb      	ldrb	r3, [r7, #3]
 8010342:	1c5a      	adds	r2, r3, #1
 8010344:	70fa      	strb	r2, [r7, #3]
 8010346:	461a      	mov	r2, r3
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	4413      	add	r3, r2
 801034c:	781b      	ldrb	r3, [r3, #0]
 801034e:	021a      	lsls	r2, r3, #8
 8010350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010352:	4313      	orrs	r3, r2
 8010354:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8010356:	78fb      	ldrb	r3, [r7, #3]
 8010358:	1c5a      	adds	r2, r3, #1
 801035a:	70fa      	strb	r2, [r7, #3]
 801035c:	461a      	mov	r2, r3
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	4413      	add	r3, r2
 8010362:	781b      	ldrb	r3, [r3, #0]
 8010364:	041a      	lsls	r2, r3, #16
 8010366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010368:	4313      	orrs	r3, r2
 801036a:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 801036c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801036e:	2264      	movs	r2, #100	; 0x64
 8010370:	fb02 f303 	mul.w	r3, r2, r3
 8010374:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8010376:	4b10      	ldr	r3, [pc, #64]	; (80103b8 <ProcessMacCommands+0x6a4>)
 8010378:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801037c:	f107 0220 	add.w	r2, r7, #32
 8010380:	4611      	mov	r1, r2
 8010382:	4618      	mov	r0, r3
 8010384:	f005 f901 	bl	801558a <RegionDlChannelReq>
 8010388:	4603      	mov	r3, r0
 801038a:	b2db      	uxtb	r3, r3
 801038c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 8010390:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8010394:	b25b      	sxtb	r3, r3
 8010396:	2b00      	cmp	r3, #0
 8010398:	db0a      	blt.n	80103b0 <ProcessMacCommands+0x69c>
                {
                    macCmdPayload[0] = status;
 801039a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 801039e:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 80103a2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80103a6:	2201      	movs	r2, #1
 80103a8:	4619      	mov	r1, r3
 80103aa:	200a      	movs	r0, #10
 80103ac:	f003 f9c0 	bl	8013730 <LoRaMacCommandsAddCmd>
                }
                break;
 80103b0:	bf00      	nop
 80103b2:	e175      	b.n	80106a0 <ProcessMacCommands+0x98c>
 80103b4:	20000740 	.word	0x20000740
 80103b8:	20000c5c 	.word	0x20000c5c
 80103bc:	0801e998 	.word	0x0801e998
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 80103c0:	2009      	movs	r0, #9
 80103c2:	f003 fced 	bl	8013da0 <LoRaMacConfirmQueueIsCmdActive>
 80103c6:	4603      	mov	r3, r0
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	f000 8084 	beq.w	80104d6 <ProcessMacCommands+0x7c2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 80103ce:	2109      	movs	r1, #9
 80103d0:	2000      	movs	r0, #0
 80103d2:	f003 fc59 	bl	8013c88 <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 80103d6:	f107 0318 	add.w	r3, r7, #24
 80103da:	2200      	movs	r2, #0
 80103dc:	601a      	str	r2, [r3, #0]
 80103de:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 80103e0:	f107 0310 	add.w	r3, r7, #16
 80103e4:	2200      	movs	r2, #0
 80103e6:	601a      	str	r2, [r3, #0]
 80103e8:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 80103ea:	f107 0308 	add.w	r3, r7, #8
 80103ee:	2200      	movs	r2, #0
 80103f0:	601a      	str	r2, [r3, #0]
 80103f2:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 80103f4:	78fb      	ldrb	r3, [r7, #3]
 80103f6:	1c5a      	adds	r2, r3, #1
 80103f8:	70fa      	strb	r2, [r7, #3]
 80103fa:	461a      	mov	r2, r3
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	4413      	add	r3, r2
 8010400:	781b      	ldrb	r3, [r3, #0]
 8010402:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8010404:	78fb      	ldrb	r3, [r7, #3]
 8010406:	1c5a      	adds	r2, r3, #1
 8010408:	70fa      	strb	r2, [r7, #3]
 801040a:	461a      	mov	r2, r3
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	4413      	add	r3, r2
 8010410:	781b      	ldrb	r3, [r3, #0]
 8010412:	021a      	lsls	r2, r3, #8
 8010414:	69bb      	ldr	r3, [r7, #24]
 8010416:	4313      	orrs	r3, r2
 8010418:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 801041a:	78fb      	ldrb	r3, [r7, #3]
 801041c:	1c5a      	adds	r2, r3, #1
 801041e:	70fa      	strb	r2, [r7, #3]
 8010420:	461a      	mov	r2, r3
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	4413      	add	r3, r2
 8010426:	781b      	ldrb	r3, [r3, #0]
 8010428:	041a      	lsls	r2, r3, #16
 801042a:	69bb      	ldr	r3, [r7, #24]
 801042c:	4313      	orrs	r3, r2
 801042e:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8010430:	78fb      	ldrb	r3, [r7, #3]
 8010432:	1c5a      	adds	r2, r3, #1
 8010434:	70fa      	strb	r2, [r7, #3]
 8010436:	461a      	mov	r2, r3
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	4413      	add	r3, r2
 801043c:	781b      	ldrb	r3, [r3, #0]
 801043e:	061a      	lsls	r2, r3, #24
 8010440:	69bb      	ldr	r3, [r7, #24]
 8010442:	4313      	orrs	r3, r2
 8010444:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8010446:	78fb      	ldrb	r3, [r7, #3]
 8010448:	1c5a      	adds	r2, r3, #1
 801044a:	70fa      	strb	r2, [r7, #3]
 801044c:	461a      	mov	r2, r3
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	4413      	add	r3, r2
 8010452:	781b      	ldrb	r3, [r3, #0]
 8010454:	b21b      	sxth	r3, r3
 8010456:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8010458:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801045c:	461a      	mov	r2, r3
 801045e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010462:	fb02 f303 	mul.w	r3, r2, r3
 8010466:	121b      	asrs	r3, r3, #8
 8010468:	b21b      	sxth	r3, r3
 801046a:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 801046c:	f107 0310 	add.w	r3, r7, #16
 8010470:	f107 0218 	add.w	r2, r7, #24
 8010474:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010478:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 801047c:	693a      	ldr	r2, [r7, #16]
 801047e:	4b8f      	ldr	r3, [pc, #572]	; (80106bc <ProcessMacCommands+0x9a8>)
 8010480:	4413      	add	r3, r2
 8010482:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 8010484:	f107 0308 	add.w	r3, r7, #8
 8010488:	4618      	mov	r0, r3
 801048a:	f00c f937 	bl	801c6fc <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 801048e:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8010492:	4b8b      	ldr	r3, [pc, #556]	; (80106c0 <ProcessMacCommands+0x9ac>)
 8010494:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 8010498:	9200      	str	r2, [sp, #0]
 801049a:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 801049e:	f107 0210 	add.w	r2, r7, #16
 80104a2:	ca06      	ldmia	r2, {r1, r2}
 80104a4:	f00c f8c3 	bl	801c62e <SysTimeSub>
 80104a8:	f107 0010 	add.w	r0, r7, #16
 80104ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80104ae:	9300      	str	r3, [sp, #0]
 80104b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80104b2:	f107 0208 	add.w	r2, r7, #8
 80104b6:	ca06      	ldmia	r2, {r1, r2}
 80104b8:	f00c f880 	bl	801c5bc <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 80104bc:	f107 0310 	add.w	r3, r7, #16
 80104c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80104c4:	f00c f8ec 	bl	801c6a0 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 80104c8:	f002 ffd0 	bl	801346c <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 80104cc:	4b7c      	ldr	r3, [pc, #496]	; (80106c0 <ProcessMacCommands+0x9ac>)
 80104ce:	2201      	movs	r2, #1
 80104d0:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
 80104d4:	e0e4      	b.n	80106a0 <ProcessMacCommands+0x98c>
                }
                else
                {
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 80104d6:	4b7a      	ldr	r3, [pc, #488]	; (80106c0 <ProcessMacCommands+0x9ac>)
 80104d8:	2200      	movs	r2, #0
 80104da:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
#endif /* LORAMAC_VERSION */
                }
                break;
 80104de:	e0df      	b.n	80106a0 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 80104e0:	200c      	movs	r0, #12
 80104e2:	f003 fc5d 	bl	8013da0 <LoRaMacConfirmQueueIsCmdActive>
 80104e6:	4603      	mov	r3, r0
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	f000 80d9 	beq.w	80106a0 <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 80104ee:	210c      	movs	r1, #12
 80104f0:	2000      	movs	r0, #0
 80104f2:	f003 fbc9 	bl	8013c88 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 80104f6:	4b72      	ldr	r3, [pc, #456]	; (80106c0 <ProcessMacCommands+0x9ac>)
 80104f8:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 80104fc:	2b04      	cmp	r3, #4
 80104fe:	f000 80cf 	beq.w	80106a0 <ProcessMacCommands+0x98c>
 8010502:	4b6f      	ldr	r3, [pc, #444]	; (80106c0 <ProcessMacCommands+0x9ac>)
 8010504:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 8010508:	2b05      	cmp	r3, #5
 801050a:	f000 80c9 	beq.w	80106a0 <ProcessMacCommands+0x98c>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 801050e:	f002 ff8e 	bl	801342e <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 8010512:	e0c5      	b.n	80106a0 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 8010514:	2303      	movs	r3, #3
 8010516:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 801051a:	2300      	movs	r3, #0
 801051c:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 801051e:	78fb      	ldrb	r3, [r7, #3]
 8010520:	1c5a      	adds	r2, r3, #1
 8010522:	70fa      	strb	r2, [r7, #3]
 8010524:	461a      	mov	r2, r3
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	4413      	add	r3, r2
 801052a:	781b      	ldrb	r3, [r3, #0]
 801052c:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 801052e:	78fb      	ldrb	r3, [r7, #3]
 8010530:	1c5a      	adds	r2, r3, #1
 8010532:	70fa      	strb	r2, [r7, #3]
 8010534:	461a      	mov	r2, r3
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	4413      	add	r3, r2
 801053a:	781b      	ldrb	r3, [r3, #0]
 801053c:	021b      	lsls	r3, r3, #8
 801053e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010540:	4313      	orrs	r3, r2
 8010542:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8010544:	78fb      	ldrb	r3, [r7, #3]
 8010546:	1c5a      	adds	r2, r3, #1
 8010548:	70fa      	strb	r2, [r7, #3]
 801054a:	461a      	mov	r2, r3
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	4413      	add	r3, r2
 8010550:	781b      	ldrb	r3, [r3, #0]
 8010552:	041b      	lsls	r3, r3, #16
 8010554:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010556:	4313      	orrs	r3, r2
 8010558:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 801055a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801055c:	2264      	movs	r2, #100	; 0x64
 801055e:	fb02 f303 	mul.w	r3, r2, r3
 8010562:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 8010564:	78fb      	ldrb	r3, [r7, #3]
 8010566:	1c5a      	adds	r2, r3, #1
 8010568:	70fa      	strb	r2, [r7, #3]
 801056a:	461a      	mov	r2, r3
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	4413      	add	r3, r2
 8010570:	781b      	ldrb	r3, [r3, #0]
 8010572:	f003 030f 	and.w	r3, r3, #15
 8010576:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 801057a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801057e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8010580:	4618      	mov	r0, r3
 8010582:	f002 ff5a 	bl	801343a <LoRaMacClassBPingSlotChannelReq>
 8010586:	4603      	mov	r3, r0
 8010588:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 801058c:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8010590:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 8010594:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010598:	2201      	movs	r2, #1
 801059a:	4619      	mov	r1, r3
 801059c:	2011      	movs	r0, #17
 801059e:	f003 f8c7 	bl	8013730 <LoRaMacCommandsAddCmd>
#endif /* LORAMAC_VERSION */
                break;
 80105a2:	e07d      	b.n	80106a0 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 80105a4:	200d      	movs	r0, #13
 80105a6:	f003 fbfb 	bl	8013da0 <LoRaMacConfirmQueueIsCmdActive>
 80105aa:	4603      	mov	r3, r0
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d077      	beq.n	80106a0 <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 80105b0:	210d      	movs	r1, #13
 80105b2:	2000      	movs	r0, #0
 80105b4:	f003 fb68 	bl	8013c88 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 80105b8:	2300      	movs	r3, #0
 80105ba:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 80105be:	2300      	movs	r3, #0
 80105c0:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 80105c4:	78fb      	ldrb	r3, [r7, #3]
 80105c6:	1c5a      	adds	r2, r3, #1
 80105c8:	70fa      	strb	r2, [r7, #3]
 80105ca:	461a      	mov	r2, r3
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	4413      	add	r3, r2
 80105d0:	781b      	ldrb	r3, [r3, #0]
 80105d2:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 80105d6:	78fb      	ldrb	r3, [r7, #3]
 80105d8:	1c5a      	adds	r2, r3, #1
 80105da:	70fa      	strb	r2, [r7, #3]
 80105dc:	461a      	mov	r2, r3
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	4413      	add	r3, r2
 80105e2:	781b      	ldrb	r3, [r3, #0]
 80105e4:	021b      	lsls	r3, r3, #8
 80105e6:	b21a      	sxth	r2, r3
 80105e8:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 80105ec:	4313      	orrs	r3, r2
 80105ee:	b21b      	sxth	r3, r3
 80105f0:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 80105f4:	78fb      	ldrb	r3, [r7, #3]
 80105f6:	1c5a      	adds	r2, r3, #1
 80105f8:	70fa      	strb	r2, [r7, #3]
 80105fa:	461a      	mov	r2, r3
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	4413      	add	r3, r2
 8010600:	781b      	ldrb	r3, [r3, #0]
 8010602:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8010606:	4b2f      	ldr	r3, [pc, #188]	; (80106c4 <ProcessMacCommands+0x9b0>)
 8010608:	681a      	ldr	r2, [r3, #0]
 801060a:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 801060e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8010612:	4618      	mov	r0, r3
 8010614:	f002 ff1d 	bl	8013452 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 8010618:	e042      	b.n	80106a0 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 801061a:	2300      	movs	r3, #0
 801061c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 8010620:	78fb      	ldrb	r3, [r7, #3]
 8010622:	1c5a      	adds	r2, r3, #1
 8010624:	70fa      	strb	r2, [r7, #3]
 8010626:	461a      	mov	r2, r3
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	4413      	add	r3, r2
 801062c:	781b      	ldrb	r3, [r3, #0]
 801062e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8010632:	78fb      	ldrb	r3, [r7, #3]
 8010634:	1c5a      	adds	r2, r3, #1
 8010636:	70fa      	strb	r2, [r7, #3]
 8010638:	461a      	mov	r2, r3
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	4413      	add	r3, r2
 801063e:	781b      	ldrb	r3, [r3, #0]
 8010640:	021b      	lsls	r3, r3, #8
 8010642:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010646:	4313      	orrs	r3, r2
 8010648:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 801064c:	78fb      	ldrb	r3, [r7, #3]
 801064e:	1c5a      	adds	r2, r3, #1
 8010650:	70fa      	strb	r2, [r7, #3]
 8010652:	461a      	mov	r2, r3
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	4413      	add	r3, r2
 8010658:	781b      	ldrb	r3, [r3, #0]
 801065a:	041b      	lsls	r3, r3, #16
 801065c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010660:	4313      	orrs	r3, r2
 8010662:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 8010666:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801066a:	2264      	movs	r2, #100	; 0x64
 801066c:	fb02 f303 	mul.w	r3, r2, r3
 8010670:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8010674:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8010678:	f002 fefe 	bl	8013478 <LoRaMacClassBBeaconFreqReq>
 801067c:	4603      	mov	r3, r0
 801067e:	2b00      	cmp	r3, #0
 8010680:	d003      	beq.n	801068a <ProcessMacCommands+0x976>
                    {
                        macCmdPayload[0] = 1;
 8010682:	2301      	movs	r3, #1
 8010684:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 8010688:	e002      	b.n	8010690 <ProcessMacCommands+0x97c>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 801068a:	2300      	movs	r3, #0
 801068c:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8010690:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010694:	2201      	movs	r2, #1
 8010696:	4619      	mov	r1, r3
 8010698:	2013      	movs	r0, #19
 801069a:	f003 f849 	bl	8013730 <LoRaMacCommandsAddCmd>
                }
                break;
 801069e:	bf00      	nop
    while( macIndex < commandsSize )
 80106a0:	78fa      	ldrb	r2, [r7, #3]
 80106a2:	78bb      	ldrb	r3, [r7, #2]
 80106a4:	429a      	cmp	r2, r3
 80106a6:	f4ff ab57 	bcc.w	800fd58 <ProcessMacCommands+0x44>
 80106aa:	e004      	b.n	80106b6 <ProcessMacCommands+0x9a2>
        return;
 80106ac:	bf00      	nop
 80106ae:	e002      	b.n	80106b6 <ProcessMacCommands+0x9a2>
            return;
 80106b0:	bf00      	nop
 80106b2:	e000      	b.n	80106b6 <ProcessMacCommands+0x9a2>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 80106b4:	bf00      	nop
        }
    }
}
 80106b6:	378c      	adds	r7, #140	; 0x8c
 80106b8:	46bd      	mov	sp, r7
 80106ba:	bd90      	pop	{r4, r7, pc}
 80106bc:	12d53d80 	.word	0x12d53d80
 80106c0:	20000740 	.word	0x20000740
 80106c4:	2000188c 	.word	0x2000188c

080106c8 <Send>:

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 80106c8:	b580      	push	{r7, lr}
 80106ca:	b08e      	sub	sp, #56	; 0x38
 80106cc:	af02      	add	r7, sp, #8
 80106ce:	60f8      	str	r0, [r7, #12]
 80106d0:	607a      	str	r2, [r7, #4]
 80106d2:	461a      	mov	r2, r3
 80106d4:	460b      	mov	r3, r1
 80106d6:	72fb      	strb	r3, [r7, #11]
 80106d8:	4613      	mov	r3, r2
 80106da:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80106dc:	2303      	movs	r3, #3
 80106de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 80106e2:	4b66      	ldr	r3, [pc, #408]	; (801087c <Send+0x1b4>)
 80106e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80106e8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 80106ec:	4b63      	ldr	r3, [pc, #396]	; (801087c <Send+0x1b4>)
 80106ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80106f2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80106f6:	4b61      	ldr	r3, [pc, #388]	; (801087c <Send+0x1b4>)
 80106f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80106fa:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80106fc:	4b5f      	ldr	r3, [pc, #380]	; (801087c <Send+0x1b4>)
 80106fe:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8010702:	2b00      	cmp	r3, #0
 8010704:	d101      	bne.n	801070a <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8010706:	2307      	movs	r3, #7
 8010708:	e0b4      	b.n	8010874 <Send+0x1ac>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 801070a:	4b5c      	ldr	r3, [pc, #368]	; (801087c <Send+0x1b4>)
 801070c:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 8010710:	2b00      	cmp	r3, #0
 8010712:	d102      	bne.n	801071a <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8010714:	4b59      	ldr	r3, [pc, #356]	; (801087c <Send+0x1b4>)
 8010716:	2200      	movs	r2, #0
 8010718:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 801071a:	2300      	movs	r3, #0
 801071c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 8010720:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010724:	f36f 0303 	bfc	r3, #0, #4
 8010728:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 801072c:	4b53      	ldr	r3, [pc, #332]	; (801087c <Send+0x1b4>)
 801072e:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 8010732:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010736:	f362 13c7 	bfi	r3, r2, #7, #1
 801073a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801073e:	4b4f      	ldr	r3, [pc, #316]	; (801087c <Send+0x1b4>)
 8010740:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010744:	2b01      	cmp	r3, #1
 8010746:	d106      	bne.n	8010756 <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 8010748:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801074c:	f043 0310 	orr.w	r3, r3, #16
 8010750:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8010754:	e005      	b.n	8010762 <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 8010756:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801075a:	f36f 1304 	bfc	r3, #4, #1
 801075e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 8010762:	4b46      	ldr	r3, [pc, #280]	; (801087c <Send+0x1b4>)
 8010764:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010768:	2b00      	cmp	r3, #0
 801076a:	d005      	beq.n	8010778 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 801076c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010770:	f043 0320 	orr.w	r3, r3, #32
 8010774:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
    adrNext.UpdateChanMask = true;
 8010778:	2301      	movs	r3, #1
 801077a:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 801077c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010780:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8010784:	b2db      	uxtb	r3, r3
 8010786:	2b00      	cmp	r3, #0
 8010788:	bf14      	ite	ne
 801078a:	2301      	movne	r3, #1
 801078c:	2300      	moveq	r3, #0
 801078e:	b2db      	uxtb	r3, r3
 8010790:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8010792:	4b3a      	ldr	r3, [pc, #232]	; (801087c <Send+0x1b4>)
 8010794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010796:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8010798:	4b38      	ldr	r3, [pc, #224]	; (801087c <Send+0x1b4>)
 801079a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 801079e:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 80107a0:	4b36      	ldr	r3, [pc, #216]	; (801087c <Send+0x1b4>)
 80107a2:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 80107a6:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80107a8:	4b34      	ldr	r3, [pc, #208]	; (801087c <Send+0x1b4>)
 80107aa:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80107ae:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80107b2:	4b32      	ldr	r3, [pc, #200]	; (801087c <Send+0x1b4>)
 80107b4:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80107b8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80107bc:	4b2f      	ldr	r3, [pc, #188]	; (801087c <Send+0x1b4>)
 80107be:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80107c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 80107c6:	4b2d      	ldr	r3, [pc, #180]	; (801087c <Send+0x1b4>)
 80107c8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80107cc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80107d0:	4b2a      	ldr	r3, [pc, #168]	; (801087c <Send+0x1b4>)
 80107d2:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80107d6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 80107da:	f107 0014 	add.w	r0, r7, #20
 80107de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80107e2:	9300      	str	r3, [sp, #0]
 80107e4:	4b26      	ldr	r3, [pc, #152]	; (8010880 <Send+0x1b8>)
 80107e6:	4a27      	ldr	r2, [pc, #156]	; (8010884 <Send+0x1bc>)
 80107e8:	4927      	ldr	r1, [pc, #156]	; (8010888 <Send+0x1c0>)
 80107ea:	f002 fcbf 	bl	801316c <LoRaMacAdrCalcNext>
 80107ee:	4603      	mov	r3, r0
 80107f0:	461a      	mov	r2, r3
 80107f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80107f6:	f362 1386 	bfi	r3, r2, #6, #1
 80107fa:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 80107fe:	7afa      	ldrb	r2, [r7, #11]
 8010800:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8010804:	893b      	ldrh	r3, [r7, #8]
 8010806:	9300      	str	r3, [sp, #0]
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	68f8      	ldr	r0, [r7, #12]
 801080c:	f000 fc72 	bl	80110f4 <PrepareFrame>
 8010810:	4603      	mov	r3, r0
 8010812:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8010816:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801081a:	2b00      	cmp	r3, #0
 801081c:	d003      	beq.n	8010826 <Send+0x15e>
 801081e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010822:	2b0a      	cmp	r3, #10
 8010824:	d107      	bne.n	8010836 <Send+0x16e>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 8010826:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 801082a:	4618      	mov	r0, r3
 801082c:	f000 f962 	bl	8010af4 <ScheduleTx>
 8010830:	4603      	mov	r3, r0
 8010832:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 8010836:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801083a:	2b00      	cmp	r3, #0
 801083c:	d00a      	beq.n	8010854 <Send+0x18c>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 801083e:	4a0f      	ldr	r2, [pc, #60]	; (801087c <Send+0x1b4>)
 8010840:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010844:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8010848:	4a0c      	ldr	r2, [pc, #48]	; (801087c <Send+0x1b4>)
 801084a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801084e:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 8010852:	e00d      	b.n	8010870 <Send+0x1a8>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 8010854:	4b09      	ldr	r3, [pc, #36]	; (801087c <Send+0x1b4>)
 8010856:	2200      	movs	r2, #0
 8010858:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 801085c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801085e:	4a07      	ldr	r2, [pc, #28]	; (801087c <Send+0x1b4>)
 8010860:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8010862:	f003 f80b 	bl	801387c <LoRaMacCommandsRemoveNoneStickyCmds>
 8010866:	4603      	mov	r3, r0
 8010868:	2b00      	cmp	r3, #0
 801086a:	d001      	beq.n	8010870 <Send+0x1a8>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801086c:	2313      	movs	r3, #19
 801086e:	e001      	b.n	8010874 <Send+0x1ac>
        }
    }
    return status;
 8010870:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8010874:	4618      	mov	r0, r3
 8010876:	3730      	adds	r7, #48	; 0x30
 8010878:	46bd      	mov	sp, r7
 801087a:	bd80      	pop	{r7, pc}
 801087c:	20000c5c 	.word	0x20000c5c
 8010880:	20000cc4 	.word	0x20000cc4
 8010884:	20000c94 	.word	0x20000c94
 8010888:	20000c95 	.word	0x20000c95

0801088c <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 801088c:	b580      	push	{r7, lr}
 801088e:	b084      	sub	sp, #16
 8010890:	af00      	add	r7, sp, #0
 8010892:	4603      	mov	r3, r0
 8010894:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010896:	2300      	movs	r3, #0
 8010898:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 801089a:	2300      	movs	r3, #0
 801089c:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 801089e:	2301      	movs	r3, #1
 80108a0:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 80108a2:	79fb      	ldrb	r3, [r7, #7]
 80108a4:	2bff      	cmp	r3, #255	; 0xff
 80108a6:	d11f      	bne.n	80108e8 <SendReJoinReq+0x5c>
            break;
        }
#endif /* LORAMAC_VERSION */
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 80108a8:	2000      	movs	r0, #0
 80108aa:	f7ff f8f9 	bl	800faa0 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 80108ae:	4b15      	ldr	r3, [pc, #84]	; (8010904 <SendReJoinReq+0x78>)
 80108b0:	2200      	movs	r2, #0
 80108b2:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 80108b6:	4b13      	ldr	r3, [pc, #76]	; (8010904 <SendReJoinReq+0x78>)
 80108b8:	4a13      	ldr	r2, [pc, #76]	; (8010908 <SendReJoinReq+0x7c>)
 80108ba:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 80108be:	4b11      	ldr	r3, [pc, #68]	; (8010904 <SendReJoinReq+0x78>)
 80108c0:	22ff      	movs	r2, #255	; 0xff
 80108c2:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 80108c6:	7b3b      	ldrb	r3, [r7, #12]
 80108c8:	f36f 1347 	bfc	r3, #5, #3
 80108cc:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 80108ce:	7b3a      	ldrb	r2, [r7, #12]
 80108d0:	4b0c      	ldr	r3, [pc, #48]	; (8010904 <SendReJoinReq+0x78>)
 80108d2:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 80108d6:	480d      	ldr	r0, [pc, #52]	; (801090c <SendReJoinReq+0x80>)
 80108d8:	f7fb ff38 	bl	800c74c <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 80108dc:	480c      	ldr	r0, [pc, #48]	; (8010910 <SendReJoinReq+0x84>)
 80108de:	f7fb ff05 	bl	800c6ec <SecureElementGetDevEui>

            allowDelayedTx = false;
 80108e2:	2300      	movs	r3, #0
 80108e4:	73fb      	strb	r3, [r7, #15]

            break;
 80108e6:	e002      	b.n	80108ee <SendReJoinReq+0x62>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80108e8:	2302      	movs	r3, #2
 80108ea:	73bb      	strb	r3, [r7, #14]
            break;
 80108ec:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 80108ee:	7bfb      	ldrb	r3, [r7, #15]
 80108f0:	4618      	mov	r0, r3
 80108f2:	f000 f8ff 	bl	8010af4 <ScheduleTx>
 80108f6:	4603      	mov	r3, r0
 80108f8:	73bb      	strb	r3, [r7, #14]
    return status;
 80108fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80108fc:	4618      	mov	r0, r3
 80108fe:	3710      	adds	r7, #16
 8010900:	46bd      	mov	sp, r7
 8010902:	bd80      	pop	{r7, pc}
 8010904:	20000740 	.word	0x20000740
 8010908:	20000742 	.word	0x20000742
 801090c:	2000084e 	.word	0x2000084e
 8010910:	20000856 	.word	0x20000856

08010914 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 8010914:	b580      	push	{r7, lr}
 8010916:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8010918:	f002 fd38 	bl	801338c <LoRaMacClassBIsBeaconExpected>
 801091c:	4603      	mov	r3, r0
 801091e:	2b00      	cmp	r3, #0
 8010920:	d001      	beq.n	8010926 <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8010922:	230e      	movs	r3, #14
 8010924:	e013      	b.n	801094e <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8010926:	4b0b      	ldr	r3, [pc, #44]	; (8010954 <CheckForClassBCollision+0x40>)
 8010928:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801092c:	2b01      	cmp	r3, #1
 801092e:	d10d      	bne.n	801094c <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8010930:	f002 fd33 	bl	801339a <LoRaMacClassBIsPingExpected>
 8010934:	4603      	mov	r3, r0
 8010936:	2b00      	cmp	r3, #0
 8010938:	d001      	beq.n	801093e <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 801093a:	230f      	movs	r3, #15
 801093c:	e007      	b.n	801094e <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 801093e:	f002 fd33 	bl	80133a8 <LoRaMacClassBIsMulticastExpected>
 8010942:	4603      	mov	r3, r0
 8010944:	2b00      	cmp	r3, #0
 8010946:	d001      	beq.n	801094c <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8010948:	230f      	movs	r3, #15
 801094a:	e000      	b.n	801094e <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 801094c:	2300      	movs	r3, #0
}
 801094e:	4618      	mov	r0, r3
 8010950:	bd80      	pop	{r7, pc}
 8010952:	bf00      	nop
 8010954:	20000c5c 	.word	0x20000c5c

08010958 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 8010958:	b590      	push	{r4, r7, lr}
 801095a:	b083      	sub	sp, #12
 801095c:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801095e:	4b2d      	ldr	r3, [pc, #180]	; (8010a14 <ComputeRxWindowParameters+0xbc>)
 8010960:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8010964:	4b2b      	ldr	r3, [pc, #172]	; (8010a14 <ComputeRxWindowParameters+0xbc>)
 8010966:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 801096a:	4b2a      	ldr	r3, [pc, #168]	; (8010a14 <ComputeRxWindowParameters+0xbc>)
 801096c:	f893 107d 	ldrb.w	r1, [r3, #125]	; 0x7d
 8010970:	4b28      	ldr	r3, [pc, #160]	; (8010a14 <ComputeRxWindowParameters+0xbc>)
 8010972:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 8010976:	4b27      	ldr	r3, [pc, #156]	; (8010a14 <ComputeRxWindowParameters+0xbc>)
 8010978:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 801097c:	b25b      	sxtb	r3, r3
 801097e:	f004 fe68 	bl	8015652 <RegionApplyDrOffset>
 8010982:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010984:	b259      	sxtb	r1, r3
 8010986:	4b23      	ldr	r3, [pc, #140]	; (8010a14 <ComputeRxWindowParameters+0xbc>)
 8010988:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 801098c:	4b21      	ldr	r3, [pc, #132]	; (8010a14 <ComputeRxWindowParameters+0xbc>)
 801098e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010990:	4821      	ldr	r0, [pc, #132]	; (8010a18 <ComputeRxWindowParameters+0xc0>)
 8010992:	9000      	str	r0, [sp, #0]
 8010994:	4620      	mov	r0, r4
 8010996:	f004 fd1e 	bl	80153d6 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801099a:	4b1e      	ldr	r3, [pc, #120]	; (8010a14 <ComputeRxWindowParameters+0xbc>)
 801099c:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 80109a0:	4b1c      	ldr	r3, [pc, #112]	; (8010a14 <ComputeRxWindowParameters+0xbc>)
 80109a2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80109a6:	b259      	sxtb	r1, r3
 80109a8:	4b1a      	ldr	r3, [pc, #104]	; (8010a14 <ComputeRxWindowParameters+0xbc>)
 80109aa:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 80109ae:	4b19      	ldr	r3, [pc, #100]	; (8010a14 <ComputeRxWindowParameters+0xbc>)
 80109b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80109b2:	4c1a      	ldr	r4, [pc, #104]	; (8010a1c <ComputeRxWindowParameters+0xc4>)
 80109b4:	9400      	str	r4, [sp, #0]
 80109b6:	f004 fd0e 	bl	80153d6 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80109ba:	4b16      	ldr	r3, [pc, #88]	; (8010a14 <ComputeRxWindowParameters+0xbc>)
 80109bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80109be:	4a18      	ldr	r2, [pc, #96]	; (8010a20 <ComputeRxWindowParameters+0xc8>)
 80109c0:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 80109c4:	4413      	add	r3, r2
 80109c6:	4a16      	ldr	r2, [pc, #88]	; (8010a20 <ComputeRxWindowParameters+0xc8>)
 80109c8:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80109cc:	4b11      	ldr	r3, [pc, #68]	; (8010a14 <ComputeRxWindowParameters+0xbc>)
 80109ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80109d0:	4a13      	ldr	r2, [pc, #76]	; (8010a20 <ComputeRxWindowParameters+0xc8>)
 80109d2:	f8d2 23dc 	ldr.w	r2, [r2, #988]	; 0x3dc
 80109d6:	4413      	add	r3, r2
 80109d8:	4a11      	ldr	r2, [pc, #68]	; (8010a20 <ComputeRxWindowParameters+0xc8>)
 80109da:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 80109de:	4b10      	ldr	r3, [pc, #64]	; (8010a20 <ComputeRxWindowParameters+0xc8>)
 80109e0:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80109e4:	2b04      	cmp	r3, #4
 80109e6:	d011      	beq.n	8010a0c <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80109e8:	4b0a      	ldr	r3, [pc, #40]	; (8010a14 <ComputeRxWindowParameters+0xbc>)
 80109ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80109ec:	4a0c      	ldr	r2, [pc, #48]	; (8010a20 <ComputeRxWindowParameters+0xc8>)
 80109ee:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 80109f2:	4413      	add	r3, r2
 80109f4:	4a0a      	ldr	r2, [pc, #40]	; (8010a20 <ComputeRxWindowParameters+0xc8>)
 80109f6:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80109fa:	4b06      	ldr	r3, [pc, #24]	; (8010a14 <ComputeRxWindowParameters+0xbc>)
 80109fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80109fe:	4a08      	ldr	r2, [pc, #32]	; (8010a20 <ComputeRxWindowParameters+0xc8>)
 8010a00:	f8d2 23dc 	ldr.w	r2, [r2, #988]	; 0x3dc
 8010a04:	4413      	add	r3, r2
 8010a06:	4a06      	ldr	r2, [pc, #24]	; (8010a20 <ComputeRxWindowParameters+0xc8>)
 8010a08:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 8010a0c:	bf00      	nop
 8010a0e:	3704      	adds	r7, #4
 8010a10:	46bd      	mov	sp, r7
 8010a12:	bd90      	pop	{r4, r7, pc}
 8010a14:	20000c5c 	.word	0x20000c5c
 8010a18:	20000af8 	.word	0x20000af8
 8010a1c:	20000b10 	.word	0x20000b10
 8010a20:	20000740 	.word	0x20000740

08010a24 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 8010a24:	b580      	push	{r7, lr}
 8010a26:	b082      	sub	sp, #8
 8010a28:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 8010a2a:	2300      	movs	r3, #0
 8010a2c:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8010a2e:	4b13      	ldr	r3, [pc, #76]	; (8010a7c <VerifyTxFrame+0x58>)
 8010a30:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d01b      	beq.n	8010a70 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8010a38:	1d3b      	adds	r3, r7, #4
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	f002 ff6e 	bl	801391c <LoRaMacCommandsGetSizeSerializedCmds>
 8010a40:	4603      	mov	r3, r0
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d001      	beq.n	8010a4a <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010a46:	2313      	movs	r3, #19
 8010a48:	e013      	b.n	8010a72 <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8010a4a:	4b0d      	ldr	r3, [pc, #52]	; (8010a80 <VerifyTxFrame+0x5c>)
 8010a4c:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8010a50:	4a0a      	ldr	r2, [pc, #40]	; (8010a7c <VerifyTxFrame+0x58>)
 8010a52:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 8010a56:	687a      	ldr	r2, [r7, #4]
 8010a58:	b2d2      	uxtb	r2, r2
 8010a5a:	4618      	mov	r0, r3
 8010a5c:	f7ff f932 	bl	800fcc4 <ValidatePayloadLength>
 8010a60:	4603      	mov	r3, r0
 8010a62:	f083 0301 	eor.w	r3, r3, #1
 8010a66:	b2db      	uxtb	r3, r3
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d001      	beq.n	8010a70 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 8010a6c:	2308      	movs	r3, #8
 8010a6e:	e000      	b.n	8010a72 <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 8010a70:	2300      	movs	r3, #0
}
 8010a72:	4618      	mov	r0, r3
 8010a74:	3708      	adds	r7, #8
 8010a76:	46bd      	mov	sp, r7
 8010a78:	bd80      	pop	{r7, pc}
 8010a7a:	bf00      	nop
 8010a7c:	20000c5c 	.word	0x20000c5c
 8010a80:	20000740 	.word	0x20000740

08010a84 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 8010a84:	b580      	push	{r7, lr}
 8010a86:	b082      	sub	sp, #8
 8010a88:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 8010a8a:	4b18      	ldr	r3, [pc, #96]	; (8010aec <SerializeTxFrame+0x68>)
 8010a8c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d002      	beq.n	8010a9a <SerializeTxFrame+0x16>
 8010a94:	2b04      	cmp	r3, #4
 8010a96:	d011      	beq.n	8010abc <SerializeTxFrame+0x38>
 8010a98:	e021      	b.n	8010ade <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8010a9a:	4815      	ldr	r0, [pc, #84]	; (8010af0 <SerializeTxFrame+0x6c>)
 8010a9c:	f004 fa6c 	bl	8014f78 <LoRaMacSerializerJoinRequest>
 8010aa0:	4603      	mov	r3, r0
 8010aa2:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8010aa4:	79fb      	ldrb	r3, [r7, #7]
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d001      	beq.n	8010aae <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010aaa:	2311      	movs	r3, #17
 8010aac:	e01a      	b.n	8010ae4 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8010aae:	4b0f      	ldr	r3, [pc, #60]	; (8010aec <SerializeTxFrame+0x68>)
 8010ab0:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8010ab4:	b29a      	uxth	r2, r3
 8010ab6:	4b0d      	ldr	r3, [pc, #52]	; (8010aec <SerializeTxFrame+0x68>)
 8010ab8:	801a      	strh	r2, [r3, #0]
            break;
 8010aba:	e012      	b.n	8010ae2 <SerializeTxFrame+0x5e>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8010abc:	480c      	ldr	r0, [pc, #48]	; (8010af0 <SerializeTxFrame+0x6c>)
 8010abe:	f004 fadd 	bl	801507c <LoRaMacSerializerData>
 8010ac2:	4603      	mov	r3, r0
 8010ac4:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8010ac6:	79fb      	ldrb	r3, [r7, #7]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d001      	beq.n	8010ad0 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010acc:	2311      	movs	r3, #17
 8010ace:	e009      	b.n	8010ae4 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8010ad0:	4b06      	ldr	r3, [pc, #24]	; (8010aec <SerializeTxFrame+0x68>)
 8010ad2:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8010ad6:	b29a      	uxth	r2, r3
 8010ad8:	4b04      	ldr	r3, [pc, #16]	; (8010aec <SerializeTxFrame+0x68>)
 8010ada:	801a      	strh	r2, [r3, #0]
            break;
 8010adc:	e001      	b.n	8010ae2 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8010ade:	2303      	movs	r3, #3
 8010ae0:	e000      	b.n	8010ae4 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 8010ae2:	2300      	movs	r3, #0
}
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	3708      	adds	r7, #8
 8010ae8:	46bd      	mov	sp, r7
 8010aea:	bd80      	pop	{r7, pc}
 8010aec:	20000740 	.word	0x20000740
 8010af0:	20000848 	.word	0x20000848

08010af4 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8010af4:	b580      	push	{r7, lr}
 8010af6:	b090      	sub	sp, #64	; 0x40
 8010af8:	af02      	add	r7, sp, #8
 8010afa:	4603      	mov	r3, r0
 8010afc:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010afe:	2303      	movs	r3, #3
 8010b00:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8010b04:	f7ff ff06 	bl	8010914 <CheckForClassBCollision>
 8010b08:	4603      	mov	r3, r0
 8010b0a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8010b0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d002      	beq.n	8010b1c <ScheduleTx+0x28>
    {
        return status;
 8010b16:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010b1a:	e092      	b.n	8010c42 <ScheduleTx+0x14e>
    }

    // Update back-off
    CalculateBackOff( );
 8010b1c:	f000 f8f8 	bl	8010d10 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8010b20:	f7ff ffb0 	bl	8010a84 <SerializeTxFrame>
 8010b24:	4603      	mov	r3, r0
 8010b26:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8010b2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d002      	beq.n	8010b38 <ScheduleTx+0x44>
    {
        return status;
 8010b32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010b36:	e084      	b.n	8010c42 <ScheduleTx+0x14e>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8010b38:	4b44      	ldr	r3, [pc, #272]	; (8010c4c <ScheduleTx+0x158>)
 8010b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b3c:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010b3e:	4b43      	ldr	r3, [pc, #268]	; (8010c4c <ScheduleTx+0x158>)
 8010b40:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010b44:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8010b46:	4b41      	ldr	r3, [pc, #260]	; (8010c4c <ScheduleTx+0x158>)
 8010b48:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8010b4c:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8010b4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010b52:	4618      	mov	r0, r3
 8010b54:	f00b fe0a 	bl	801c76c <SysTimeGetMcuTime>
 8010b58:	4638      	mov	r0, r7
 8010b5a:	4b3c      	ldr	r3, [pc, #240]	; (8010c4c <ScheduleTx+0x158>)
 8010b5c:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 8010b60:	9200      	str	r2, [sp, #0]
 8010b62:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8010b66:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8010b6a:	ca06      	ldmia	r2, {r1, r2}
 8010b6c:	f00b fd5f 	bl	801c62e <SysTimeSub>
 8010b70:	f107 0320 	add.w	r3, r7, #32
 8010b74:	463a      	mov	r2, r7
 8010b76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010b7a:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8010b7e:	4b33      	ldr	r3, [pc, #204]	; (8010c4c <ScheduleTx+0x158>)
 8010b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b82:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 8010b84:	2300      	movs	r3, #0
 8010b86:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 8010b8a:	2301      	movs	r3, #1
 8010b8c:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8010b8e:	4b30      	ldr	r3, [pc, #192]	; (8010c50 <ScheduleTx+0x15c>)
 8010b90:	881b      	ldrh	r3, [r3, #0]
 8010b92:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8010b94:	4b2d      	ldr	r3, [pc, #180]	; (8010c4c <ScheduleTx+0x158>)
 8010b96:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d104      	bne.n	8010ba8 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 8010b9e:	2301      	movs	r3, #1
 8010ba0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 8010ba4:	2300      	movs	r3, #0
 8010ba6:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 8010ba8:	4b28      	ldr	r3, [pc, #160]	; (8010c4c <ScheduleTx+0x158>)
 8010baa:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8010bae:	f107 0114 	add.w	r1, r7, #20
 8010bb2:	4b28      	ldr	r3, [pc, #160]	; (8010c54 <ScheduleTx+0x160>)
 8010bb4:	9300      	str	r3, [sp, #0]
 8010bb6:	4b28      	ldr	r3, [pc, #160]	; (8010c58 <ScheduleTx+0x164>)
 8010bb8:	4a28      	ldr	r2, [pc, #160]	; (8010c5c <ScheduleTx+0x168>)
 8010bba:	f004 fd27 	bl	801560c <RegionNextChannel>
 8010bbe:	4603      	mov	r3, r0
 8010bc0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 8010bc4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d025      	beq.n	8010c18 <ScheduleTx+0x124>
    {
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 8010bcc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010bd0:	2b0b      	cmp	r3, #11
 8010bd2:	d11e      	bne.n	8010c12 <ScheduleTx+0x11e>
        {
            if( MacCtx.DutyCycleWaitTime != 0 )
 8010bd4:	4b1e      	ldr	r3, [pc, #120]	; (8010c50 <ScheduleTx+0x15c>)
 8010bd6:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d01c      	beq.n	8010c18 <ScheduleTx+0x124>
            {
                if( allowDelayedTx == true )
 8010bde:	7bfb      	ldrb	r3, [r7, #15]
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d013      	beq.n	8010c0c <ScheduleTx+0x118>
                {
                    // Allow delayed transmissions. We have to allow it in case
                    // the MAC must retransmit a frame with the frame repetitions
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8010be4:	4b1a      	ldr	r3, [pc, #104]	; (8010c50 <ScheduleTx+0x15c>)
 8010be6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010bea:	f043 0320 	orr.w	r3, r3, #32
 8010bee:	4a18      	ldr	r2, [pc, #96]	; (8010c50 <ScheduleTx+0x15c>)
 8010bf0:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8010bf4:	4b16      	ldr	r3, [pc, #88]	; (8010c50 <ScheduleTx+0x15c>)
 8010bf6:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8010bfa:	4619      	mov	r1, r3
 8010bfc:	4818      	ldr	r0, [pc, #96]	; (8010c60 <ScheduleTx+0x16c>)
 8010bfe:	f00c fb55 	bl	801d2ac <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 8010c02:	4817      	ldr	r0, [pc, #92]	; (8010c60 <ScheduleTx+0x16c>)
 8010c04:	f00c fa74 	bl	801d0f0 <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 8010c08:	2300      	movs	r3, #0
 8010c0a:	e01a      	b.n	8010c42 <ScheduleTx+0x14e>
                }
                // Need to delay, but allowDelayedTx does not allow it
                return status;
 8010c0c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010c10:	e017      	b.n	8010c42 <ScheduleTx+0x14e>
            }
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8010c12:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010c16:	e014      	b.n	8010c42 <ScheduleTx+0x14e>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 8010c18:	f7ff fe9e 	bl	8010958 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 8010c1c:	f7ff ff02 	bl	8010a24 <VerifyTxFrame>
 8010c20:	4603      	mov	r3, r0
 8010c22:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8010c26:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d002      	beq.n	8010c34 <ScheduleTx+0x140>
    {
        return status;
 8010c2e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010c32:	e006      	b.n	8010c42 <ScheduleTx+0x14e>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8010c34:	4b06      	ldr	r3, [pc, #24]	; (8010c50 <ScheduleTx+0x15c>)
 8010c36:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 8010c3a:	4618      	mov	r0, r3
 8010c3c:	f000 fb76 	bl	801132c <SendFrameOnChannel>
 8010c40:	4603      	mov	r3, r0
}
 8010c42:	4618      	mov	r0, r3
 8010c44:	3738      	adds	r7, #56	; 0x38
 8010c46:	46bd      	mov	sp, r7
 8010c48:	bd80      	pop	{r7, pc}
 8010c4a:	bf00      	nop
 8010c4c:	20000c5c 	.word	0x20000c5c
 8010c50:	20000740 	.word	0x20000740
 8010c54:	20000c8c 	.word	0x20000c8c
 8010c58:	20000bd4 	.word	0x20000bd4
 8010c5c:	20000b5b 	.word	0x20000b5b
 8010c60:	20000aa8 	.word	0x20000aa8

08010c64 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8010c64:	b580      	push	{r7, lr}
 8010c66:	b084      	sub	sp, #16
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	4603      	mov	r3, r0
 8010c6c:	460a      	mov	r2, r1
 8010c6e:	71fb      	strb	r3, [r7, #7]
 8010c70:	4613      	mov	r3, r2
 8010c72:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8010c74:	2312      	movs	r3, #18
 8010c76:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 8010c78:	2300      	movs	r3, #0
 8010c7a:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 8010c7c:	4b22      	ldr	r3, [pc, #136]	; (8010d08 <SecureFrame+0xa4>)
 8010c7e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d002      	beq.n	8010c8c <SecureFrame+0x28>
 8010c86:	2b04      	cmp	r3, #4
 8010c88:	d011      	beq.n	8010cae <SecureFrame+0x4a>
 8010c8a:	e036      	b.n	8010cfa <SecureFrame+0x96>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8010c8c:	481f      	ldr	r0, [pc, #124]	; (8010d0c <SecureFrame+0xa8>)
 8010c8e:	f003 fd3f 	bl	8014710 <LoRaMacCryptoPrepareJoinRequest>
 8010c92:	4603      	mov	r3, r0
 8010c94:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8010c96:	7bfb      	ldrb	r3, [r7, #15]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d001      	beq.n	8010ca0 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010c9c:	2311      	movs	r3, #17
 8010c9e:	e02f      	b.n	8010d00 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8010ca0:	4b19      	ldr	r3, [pc, #100]	; (8010d08 <SecureFrame+0xa4>)
 8010ca2:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8010ca6:	b29a      	uxth	r2, r3
 8010ca8:	4b17      	ldr	r3, [pc, #92]	; (8010d08 <SecureFrame+0xa4>)
 8010caa:	801a      	strh	r2, [r3, #0]
            break;
 8010cac:	e027      	b.n	8010cfe <SecureFrame+0x9a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8010cae:	f107 0308 	add.w	r3, r7, #8
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	f003 fc66 	bl	8014584 <LoRaMacCryptoGetFCntUp>
 8010cb8:	4603      	mov	r3, r0
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d001      	beq.n	8010cc2 <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8010cbe:	2312      	movs	r3, #18
 8010cc0:	e01e      	b.n	8010d00 <SecureFrame+0x9c>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 8010cc2:	4b11      	ldr	r3, [pc, #68]	; (8010d08 <SecureFrame+0xa4>)
 8010cc4:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d002      	beq.n	8010cd2 <SecureFrame+0x6e>
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 8010ccc:	68bb      	ldr	r3, [r7, #8]
 8010cce:	3b01      	subs	r3, #1
 8010cd0:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8010cd2:	68b8      	ldr	r0, [r7, #8]
 8010cd4:	79ba      	ldrb	r2, [r7, #6]
 8010cd6:	79f9      	ldrb	r1, [r7, #7]
 8010cd8:	4b0c      	ldr	r3, [pc, #48]	; (8010d0c <SecureFrame+0xa8>)
 8010cda:	f003 fe41 	bl	8014960 <LoRaMacCryptoSecureMessage>
 8010cde:	4603      	mov	r3, r0
 8010ce0:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8010ce2:	7bfb      	ldrb	r3, [r7, #15]
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d001      	beq.n	8010cec <SecureFrame+0x88>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010ce8:	2311      	movs	r3, #17
 8010cea:	e009      	b.n	8010d00 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8010cec:	4b06      	ldr	r3, [pc, #24]	; (8010d08 <SecureFrame+0xa4>)
 8010cee:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8010cf2:	b29a      	uxth	r2, r3
 8010cf4:	4b04      	ldr	r3, [pc, #16]	; (8010d08 <SecureFrame+0xa4>)
 8010cf6:	801a      	strh	r2, [r3, #0]
            break;
 8010cf8:	e001      	b.n	8010cfe <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8010cfa:	2303      	movs	r3, #3
 8010cfc:	e000      	b.n	8010d00 <SecureFrame+0x9c>
    }
    return LORAMAC_STATUS_OK;
 8010cfe:	2300      	movs	r3, #0
}
 8010d00:	4618      	mov	r0, r3
 8010d02:	3710      	adds	r7, #16
 8010d04:	46bd      	mov	sp, r7
 8010d06:	bd80      	pop	{r7, pc}
 8010d08:	20000740 	.word	0x20000740
 8010d0c:	20000848 	.word	0x20000848

08010d10 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8010d10:	b480      	push	{r7}
 8010d12:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8010d14:	4b09      	ldr	r3, [pc, #36]	; (8010d3c <CalculateBackOff+0x2c>)
 8010d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d10a      	bne.n	8010d32 <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8010d1c:	4b07      	ldr	r3, [pc, #28]	; (8010d3c <CalculateBackOff+0x2c>)
 8010d1e:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 8010d22:	3b01      	subs	r3, #1
 8010d24:	4a06      	ldr	r2, [pc, #24]	; (8010d40 <CalculateBackOff+0x30>)
 8010d26:	f8d2 241c 	ldr.w	r2, [r2, #1052]	; 0x41c
 8010d2a:	fb02 f303 	mul.w	r3, r2, r3
 8010d2e:	4a03      	ldr	r2, [pc, #12]	; (8010d3c <CalculateBackOff+0x2c>)
 8010d30:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 8010d32:	bf00      	nop
 8010d34:	46bd      	mov	sp, r7
 8010d36:	bc80      	pop	{r7}
 8010d38:	4770      	bx	lr
 8010d3a:	bf00      	nop
 8010d3c:	20000c5c 	.word	0x20000c5c
 8010d40:	20000740 	.word	0x20000740

08010d44 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8010d44:	b580      	push	{r7, lr}
 8010d46:	b082      	sub	sp, #8
 8010d48:	af00      	add	r7, sp, #0
 8010d4a:	4603      	mov	r3, r0
 8010d4c:	7139      	strb	r1, [r7, #4]
 8010d4e:	71fb      	strb	r3, [r7, #7]
 8010d50:	4613      	mov	r3, r2
 8010d52:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8010d54:	79fb      	ldrb	r3, [r7, #7]
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d002      	beq.n	8010d60 <RemoveMacCommands+0x1c>
 8010d5a:	79fb      	ldrb	r3, [r7, #7]
 8010d5c:	2b01      	cmp	r3, #1
 8010d5e:	d10d      	bne.n	8010d7c <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 8010d60:	79bb      	ldrb	r3, [r7, #6]
 8010d62:	2b01      	cmp	r3, #1
 8010d64:	d108      	bne.n	8010d78 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 8010d66:	793b      	ldrb	r3, [r7, #4]
 8010d68:	f003 0320 	and.w	r3, r3, #32
 8010d6c:	b2db      	uxtb	r3, r3
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d004      	beq.n	8010d7c <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8010d72:	f002 fda7 	bl	80138c4 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 8010d76:	e001      	b.n	8010d7c <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8010d78:	f002 fda4 	bl	80138c4 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8010d7c:	bf00      	nop
 8010d7e:	3708      	adds	r7, #8
 8010d80:	46bd      	mov	sp, r7
 8010d82:	bd80      	pop	{r7, pc}

08010d84 <ResetMacParameters>:

static void ResetMacParameters( bool isRejoin )
{
 8010d84:	b5b0      	push	{r4, r5, r7, lr}
 8010d86:	b092      	sub	sp, #72	; 0x48
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	4603      	mov	r3, r0
 8010d8c:	71fb      	strb	r3, [r7, #7]
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( isRejoin == false )
 8010d8e:	79fb      	ldrb	r3, [r7, #7]
 8010d90:	f083 0301 	eor.w	r3, r3, #1
 8010d94:	b2db      	uxtb	r3, r3
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d003      	beq.n	8010da2 <ResetMacParameters+0x1e>
    {
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8010d9a:	4b88      	ldr	r3, [pc, #544]	; (8010fbc <ResetMacParameters+0x238>)
 8010d9c:	2200      	movs	r2, #0
 8010d9e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
    }

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 8010da2:	4b86      	ldr	r3, [pc, #536]	; (8010fbc <ResetMacParameters+0x238>)
 8010da4:	2200      	movs	r2, #0
 8010da6:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 8010da8:	4b85      	ldr	r3, [pc, #532]	; (8010fc0 <ResetMacParameters+0x23c>)
 8010daa:	2200      	movs	r2, #0
 8010dac:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 8010db0:	4b83      	ldr	r3, [pc, #524]	; (8010fc0 <ResetMacParameters+0x23c>)
 8010db2:	2200      	movs	r2, #0
 8010db4:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
    MacCtx.ResponseTimeoutStartTime = 0;
 8010db8:	4b81      	ldr	r3, [pc, #516]	; (8010fc0 <ResetMacParameters+0x23c>)
 8010dba:	2200      	movs	r2, #0
 8010dbc:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 8010dc0:	4b7e      	ldr	r3, [pc, #504]	; (8010fbc <ResetMacParameters+0x238>)
 8010dc2:	2200      	movs	r2, #0
 8010dc4:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8010dc8:	4b7c      	ldr	r3, [pc, #496]	; (8010fbc <ResetMacParameters+0x238>)
 8010dca:	2201      	movs	r2, #1
 8010dcc:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8010dd0:	4b7a      	ldr	r3, [pc, #488]	; (8010fbc <ResetMacParameters+0x238>)
 8010dd2:	f993 20dc 	ldrsb.w	r2, [r3, #220]	; 0xdc
 8010dd6:	4b79      	ldr	r3, [pc, #484]	; (8010fbc <ResetMacParameters+0x238>)
 8010dd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8010ddc:	4b77      	ldr	r3, [pc, #476]	; (8010fbc <ResetMacParameters+0x238>)
 8010dde:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 8010de2:	4b76      	ldr	r3, [pc, #472]	; (8010fbc <ResetMacParameters+0x238>)
 8010de4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8010de8:	4b74      	ldr	r3, [pc, #464]	; (8010fbc <ResetMacParameters+0x238>)
 8010dea:	f893 20b1 	ldrb.w	r2, [r3, #177]	; 0xb1
 8010dee:	4b73      	ldr	r3, [pc, #460]	; (8010fbc <ResetMacParameters+0x238>)
 8010df0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8010df4:	4b71      	ldr	r3, [pc, #452]	; (8010fbc <ResetMacParameters+0x238>)
 8010df6:	4a71      	ldr	r2, [pc, #452]	; (8010fbc <ResetMacParameters+0x238>)
 8010df8:	336c      	adds	r3, #108	; 0x6c
 8010dfa:	32b4      	adds	r2, #180	; 0xb4
 8010dfc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010e00:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8010e04:	4b6d      	ldr	r3, [pc, #436]	; (8010fbc <ResetMacParameters+0x238>)
 8010e06:	4a6d      	ldr	r2, [pc, #436]	; (8010fbc <ResetMacParameters+0x238>)
 8010e08:	3374      	adds	r3, #116	; 0x74
 8010e0a:	32bc      	adds	r2, #188	; 0xbc
 8010e0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010e10:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8010e14:	4b69      	ldr	r3, [pc, #420]	; (8010fbc <ResetMacParameters+0x238>)
 8010e16:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
 8010e1a:	4b68      	ldr	r3, [pc, #416]	; (8010fbc <ResetMacParameters+0x238>)
 8010e1c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8010e20:	4b66      	ldr	r3, [pc, #408]	; (8010fbc <ResetMacParameters+0x238>)
 8010e22:	f893 20c5 	ldrb.w	r2, [r3, #197]	; 0xc5
 8010e26:	4b65      	ldr	r3, [pc, #404]	; (8010fbc <ResetMacParameters+0x238>)
 8010e28:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8010e2c:	4b63      	ldr	r3, [pc, #396]	; (8010fbc <ResetMacParameters+0x238>)
 8010e2e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8010e32:	4a62      	ldr	r2, [pc, #392]	; (8010fbc <ResetMacParameters+0x238>)
 8010e34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8010e38:	4b60      	ldr	r3, [pc, #384]	; (8010fbc <ResetMacParameters+0x238>)
 8010e3a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8010e3e:	4a5f      	ldr	r2, [pc, #380]	; (8010fbc <ResetMacParameters+0x238>)
 8010e40:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 8010e44:	4b5d      	ldr	r3, [pc, #372]	; (8010fbc <ResetMacParameters+0x238>)
 8010e46:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 8010e4a:	4b5c      	ldr	r3, [pc, #368]	; (8010fbc <ResetMacParameters+0x238>)
 8010e4c:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 8010e50:	4b5a      	ldr	r3, [pc, #360]	; (8010fbc <ResetMacParameters+0x238>)
 8010e52:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 8010e56:	4b59      	ldr	r3, [pc, #356]	; (8010fbc <ResetMacParameters+0x238>)
 8010e58:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

    MacCtx.NodeAckRequested = false;
 8010e5c:	4b58      	ldr	r3, [pc, #352]	; (8010fc0 <ResetMacParameters+0x23c>)
 8010e5e:	2200      	movs	r2, #0
 8010e60:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
    Nvm.MacGroup1.SrvAckRequested = false;
 8010e64:	4b55      	ldr	r3, [pc, #340]	; (8010fbc <ResetMacParameters+0x238>)
 8010e66:	2200      	movs	r2, #0
 8010e68:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8010e6c:	4b53      	ldr	r3, [pc, #332]	; (8010fbc <ResetMacParameters+0x238>)
 8010e6e:	2200      	movs	r2, #0
 8010e70:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
    Nvm.MacGroup2.DownlinkReceived = false;
 8010e74:	4b51      	ldr	r3, [pc, #324]	; (8010fbc <ResetMacParameters+0x238>)
 8010e76:	2200      	movs	r2, #0
 8010e78:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 8010e7c:	4b4f      	ldr	r3, [pc, #316]	; (8010fbc <ResetMacParameters+0x238>)
 8010e7e:	2200      	movs	r2, #0
 8010e80:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 8010e84:	4b4d      	ldr	r3, [pc, #308]	; (8010fbc <ResetMacParameters+0x238>)
 8010e86:	2200      	movs	r2, #0
 8010e88:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
    Nvm.MacGroup2.ForceRejoinType = 0;
 8010e8c:	4b4b      	ldr	r3, [pc, #300]	; (8010fbc <ResetMacParameters+0x238>)
 8010e8e:	2200      	movs	r2, #0
 8010e90:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 8010e94:	4b49      	ldr	r3, [pc, #292]	; (8010fbc <ResetMacParameters+0x238>)
 8010e96:	2200      	movs	r2, #0
 8010e98:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 8010e9c:	4b47      	ldr	r3, [pc, #284]	; (8010fbc <ResetMacParameters+0x238>)
 8010e9e:	2200      	movs	r2, #0
 8010ea0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 8010ea4:	4b45      	ldr	r3, [pc, #276]	; (8010fbc <ResetMacParameters+0x238>)
 8010ea6:	2200      	movs	r2, #0
 8010ea8:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 8010eac:	4b43      	ldr	r3, [pc, #268]	; (8010fbc <ResetMacParameters+0x238>)
 8010eae:	2200      	movs	r2, #0
 8010eb0:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 8010eb4:	4b41      	ldr	r3, [pc, #260]	; (8010fbc <ResetMacParameters+0x238>)
 8010eb6:	2200      	movs	r2, #0
 8010eb8:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8010ebc:	2301      	movs	r3, #1
 8010ebe:	763b      	strb	r3, [r7, #24]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8010ec0:	4b40      	ldr	r3, [pc, #256]	; (8010fc4 <ResetMacParameters+0x240>)
 8010ec2:	60fb      	str	r3, [r7, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8010ec4:	4b40      	ldr	r3, [pc, #256]	; (8010fc8 <ResetMacParameters+0x244>)
 8010ec6:	613b      	str	r3, [r7, #16]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    params.Bands = &RegionBands;
 8010ec8:	4b40      	ldr	r3, [pc, #256]	; (8010fcc <ResetMacParameters+0x248>)
 8010eca:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8010ecc:	4b3b      	ldr	r3, [pc, #236]	; (8010fbc <ResetMacParameters+0x238>)
 8010ece:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010ed2:	f107 020c 	add.w	r2, r7, #12
 8010ed6:	4611      	mov	r1, r2
 8010ed8:	4618      	mov	r0, r3
 8010eda:	f004 fa12 	bl	8015302 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8010ede:	4b38      	ldr	r3, [pc, #224]	; (8010fc0 <ResetMacParameters+0x23c>)
 8010ee0:	2200      	movs	r2, #0
 8010ee2:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8010ee6:	4b36      	ldr	r3, [pc, #216]	; (8010fc0 <ResetMacParameters+0x23c>)
 8010ee8:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 8010eec:	4b34      	ldr	r3, [pc, #208]	; (8010fc0 <ResetMacParameters+0x23c>)
 8010eee:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8010ef2:	4b32      	ldr	r3, [pc, #200]	; (8010fbc <ResetMacParameters+0x238>)
 8010ef4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ef6:	4a32      	ldr	r2, [pc, #200]	; (8010fc0 <ResetMacParameters+0x23c>)
 8010ef8:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010efc:	4b2f      	ldr	r3, [pc, #188]	; (8010fbc <ResetMacParameters+0x238>)
 8010efe:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8010f02:	4b2f      	ldr	r3, [pc, #188]	; (8010fc0 <ResetMacParameters+0x23c>)
 8010f04:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8010f08:	4b2c      	ldr	r3, [pc, #176]	; (8010fbc <ResetMacParameters+0x238>)
 8010f0a:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8010f0e:	4b2c      	ldr	r3, [pc, #176]	; (8010fc0 <ResetMacParameters+0x23c>)
 8010f10:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 8010f14:	4b2a      	ldr	r3, [pc, #168]	; (8010fc0 <ResetMacParameters+0x23c>)
 8010f16:	2200      	movs	r2, #0
 8010f18:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8010f1c:	4b28      	ldr	r3, [pc, #160]	; (8010fc0 <ResetMacParameters+0x23c>)
 8010f1e:	2201      	movs	r2, #1
 8010f20:	f883 23e3 	strb.w	r2, [r3, #995]	; 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8010f24:	4b25      	ldr	r3, [pc, #148]	; (8010fbc <ResetMacParameters+0x238>)
 8010f26:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8010f2a:	4b25      	ldr	r3, [pc, #148]	; (8010fc0 <ResetMacParameters+0x23c>)
 8010f2c:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8010f30:	4a23      	ldr	r2, [pc, #140]	; (8010fc0 <ResetMacParameters+0x23c>)
 8010f32:	4b23      	ldr	r3, [pc, #140]	; (8010fc0 <ResetMacParameters+0x23c>)
 8010f34:	f502 747a 	add.w	r4, r2, #1000	; 0x3e8
 8010f38:	f503 7574 	add.w	r5, r3, #976	; 0x3d0
 8010f3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010f3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010f40:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010f44:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8010f48:	4b1d      	ldr	r3, [pc, #116]	; (8010fc0 <ResetMacParameters+0x23c>)
 8010f4a:	2201      	movs	r2, #1
 8010f4c:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010f50:	4b1b      	ldr	r3, [pc, #108]	; (8010fc0 <ResetMacParameters+0x23c>)
 8010f52:	2202      	movs	r2, #2
 8010f54:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 8010f58:	2300      	movs	r3, #0
 8010f5a:	643b      	str	r3, [r7, #64]	; 0x40
    classBCallbacks.MacProcessNotify = NULL;
 8010f5c:	2300      	movs	r3, #0
 8010f5e:	647b      	str	r3, [r7, #68]	; 0x44

    if( MacCtx.MacCallbacks != NULL )
 8010f60:	4b17      	ldr	r3, [pc, #92]	; (8010fc0 <ResetMacParameters+0x23c>)
 8010f62:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d009      	beq.n	8010f7e <ResetMacParameters+0x1fa>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8010f6a:	4b15      	ldr	r3, [pc, #84]	; (8010fc0 <ResetMacParameters+0x23c>)
 8010f6c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010f70:	685b      	ldr	r3, [r3, #4]
 8010f72:	643b      	str	r3, [r7, #64]	; 0x40
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8010f74:	4b12      	ldr	r3, [pc, #72]	; (8010fc0 <ResetMacParameters+0x23c>)
 8010f76:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010f7a:	695b      	ldr	r3, [r3, #20]
 8010f7c:	647b      	str	r3, [r7, #68]	; 0x44
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8010f7e:	4b14      	ldr	r3, [pc, #80]	; (8010fd0 <ResetMacParameters+0x24c>)
 8010f80:	61fb      	str	r3, [r7, #28]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8010f82:	4b14      	ldr	r3, [pc, #80]	; (8010fd4 <ResetMacParameters+0x250>)
 8010f84:	623b      	str	r3, [r7, #32]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8010f86:	4b14      	ldr	r3, [pc, #80]	; (8010fd8 <ResetMacParameters+0x254>)
 8010f88:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8010f8a:	4b14      	ldr	r3, [pc, #80]	; (8010fdc <ResetMacParameters+0x258>)
 8010f8c:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8010f8e:	4b14      	ldr	r3, [pc, #80]	; (8010fe0 <ResetMacParameters+0x25c>)
 8010f90:	62fb      	str	r3, [r7, #44]	; 0x2c
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8010f92:	4b14      	ldr	r3, [pc, #80]	; (8010fe4 <ResetMacParameters+0x260>)
 8010f94:	633b      	str	r3, [r7, #48]	; 0x30
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8010f96:	4b14      	ldr	r3, [pc, #80]	; (8010fe8 <ResetMacParameters+0x264>)
 8010f98:	637b      	str	r3, [r7, #52]	; 0x34
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8010f9a:	4b14      	ldr	r3, [pc, #80]	; (8010fec <ResetMacParameters+0x268>)
 8010f9c:	63bb      	str	r3, [r7, #56]	; 0x38
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 8010f9e:	4b14      	ldr	r3, [pc, #80]	; (8010ff0 <ResetMacParameters+0x26c>)
 8010fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8010fa2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8010fa6:	f107 031c 	add.w	r3, r7, #28
 8010faa:	4a12      	ldr	r2, [pc, #72]	; (8010ff4 <ResetMacParameters+0x270>)
 8010fac:	4618      	mov	r0, r3
 8010fae:	f002 f996 	bl	80132de <LoRaMacClassBInit>
}
 8010fb2:	bf00      	nop
 8010fb4:	3748      	adds	r7, #72	; 0x48
 8010fb6:	46bd      	mov	sp, r7
 8010fb8:	bdb0      	pop	{r4, r5, r7, pc}
 8010fba:	bf00      	nop
 8010fbc:	20000c5c 	.word	0x20000c5c
 8010fc0:	20000740 	.word	0x20000740
 8010fc4:	20000e80 	.word	0x20000e80
 8010fc8:	20000e94 	.word	0x20000e94
 8010fcc:	200017f4 	.word	0x200017f4
 8010fd0:	20000ba8 	.word	0x20000ba8
 8010fd4:	20000b60 	.word	0x20000b60
 8010fd8:	20000b94 	.word	0x20000b94
 8010fdc:	20000bd1 	.word	0x20000bd1
 8010fe0:	20000d40 	.word	0x20000d40
 8010fe4:	20000ca4 	.word	0x20000ca4
 8010fe8:	20000ca8 	.word	0x20000ca8
 8010fec:	20000d44 	.word	0x20000d44
 8010ff0:	20000d8c 	.word	0x20000d8c
 8010ff4:	20001210 	.word	0x20001210

08010ff8 <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8010ff8:	b580      	push	{r7, lr}
 8010ffa:	b082      	sub	sp, #8
 8010ffc:	af00      	add	r7, sp, #0
 8010ffe:	6078      	str	r0, [r7, #4]
 8011000:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 8011002:	6878      	ldr	r0, [r7, #4]
 8011004:	f00c f8e2 	bl	801d1cc <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 8011008:	4b11      	ldr	r3, [pc, #68]	; (8011050 <RxWindowSetup+0x58>)
 801100a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801100c:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 801100e:	4b11      	ldr	r3, [pc, #68]	; (8011054 <RxWindowSetup+0x5c>)
 8011010:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011014:	4a10      	ldr	r2, [pc, #64]	; (8011058 <RxWindowSetup+0x60>)
 8011016:	6839      	ldr	r1, [r7, #0]
 8011018:	4618      	mov	r0, r3
 801101a:	f004 f9ff 	bl	801541c <RegionRxConfig>
 801101e:	4603      	mov	r3, r0
 8011020:	2b00      	cmp	r3, #0
 8011022:	d010      	beq.n	8011046 <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8011024:	4b0d      	ldr	r3, [pc, #52]	; (801105c <RxWindowSetup+0x64>)
 8011026:	f893 2424 	ldrb.w	r2, [r3, #1060]	; 0x424
 801102a:	4b0c      	ldr	r3, [pc, #48]	; (801105c <RxWindowSetup+0x64>)
 801102c:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8011030:	4b07      	ldr	r3, [pc, #28]	; (8011050 <RxWindowSetup+0x58>)
 8011032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011034:	4a07      	ldr	r2, [pc, #28]	; (8011054 <RxWindowSetup+0x5c>)
 8011036:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8011038:	4610      	mov	r0, r2
 801103a:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 801103c:	683b      	ldr	r3, [r7, #0]
 801103e:	7cda      	ldrb	r2, [r3, #19]
 8011040:	4b06      	ldr	r3, [pc, #24]	; (801105c <RxWindowSetup+0x64>)
 8011042:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
    }
}
 8011046:	bf00      	nop
 8011048:	3708      	adds	r7, #8
 801104a:	46bd      	mov	sp, r7
 801104c:	bd80      	pop	{r7, pc}
 801104e:	bf00      	nop
 8011050:	0801ea64 	.word	0x0801ea64
 8011054:	20000c5c 	.word	0x20000c5c
 8011058:	20000b64 	.word	0x20000b64
 801105c:	20000740 	.word	0x20000740

08011060 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8011060:	b590      	push	{r4, r7, lr}
 8011062:	b083      	sub	sp, #12
 8011064:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011066:	4b1e      	ldr	r3, [pc, #120]	; (80110e0 <OpenContinuousRxCWindow+0x80>)
 8011068:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 801106c:	4b1c      	ldr	r3, [pc, #112]	; (80110e0 <OpenContinuousRxCWindow+0x80>)
 801106e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011072:	b259      	sxtb	r1, r3
 8011074:	4b1a      	ldr	r3, [pc, #104]	; (80110e0 <OpenContinuousRxCWindow+0x80>)
 8011076:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 801107a:	4b19      	ldr	r3, [pc, #100]	; (80110e0 <OpenContinuousRxCWindow+0x80>)
 801107c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801107e:	4c19      	ldr	r4, [pc, #100]	; (80110e4 <OpenContinuousRxCWindow+0x84>)
 8011080:	9400      	str	r4, [sp, #0]
 8011082:	f004 f9a8 	bl	80153d6 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8011086:	4b18      	ldr	r3, [pc, #96]	; (80110e8 <OpenContinuousRxCWindow+0x88>)
 8011088:	2202      	movs	r2, #2
 801108a:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 801108e:	4b14      	ldr	r3, [pc, #80]	; (80110e0 <OpenContinuousRxCWindow+0x80>)
 8011090:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8011094:	4b14      	ldr	r3, [pc, #80]	; (80110e8 <OpenContinuousRxCWindow+0x88>)
 8011096:	f883 23fc 	strb.w	r2, [r3, #1020]	; 0x3fc
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 801109a:	4b13      	ldr	r3, [pc, #76]	; (80110e8 <OpenContinuousRxCWindow+0x88>)
 801109c:	2201      	movs	r2, #1
 801109e:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80110a2:	4b0f      	ldr	r3, [pc, #60]	; (80110e0 <OpenContinuousRxCWindow+0x80>)
 80110a4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80110a8:	4a10      	ldr	r2, [pc, #64]	; (80110ec <OpenContinuousRxCWindow+0x8c>)
 80110aa:	490e      	ldr	r1, [pc, #56]	; (80110e4 <OpenContinuousRxCWindow+0x84>)
 80110ac:	4618      	mov	r0, r3
 80110ae:	f004 f9b5 	bl	801541c <RegionRxConfig>
 80110b2:	4603      	mov	r3, r0
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d00f      	beq.n	80110d8 <OpenContinuousRxCWindow+0x78>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 80110b8:	4b0b      	ldr	r3, [pc, #44]	; (80110e8 <OpenContinuousRxCWindow+0x88>)
 80110ba:	f893 2424 	ldrb.w	r2, [r3, #1060]	; 0x424
 80110be:	4b0a      	ldr	r3, [pc, #40]	; (80110e8 <OpenContinuousRxCWindow+0x88>)
 80110c0:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
        Radio.Rx( 0 ); // Continuous mode
 80110c4:	4b0a      	ldr	r3, [pc, #40]	; (80110f0 <OpenContinuousRxCWindow+0x90>)
 80110c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110c8:	2000      	movs	r0, #0
 80110ca:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 80110cc:	4b06      	ldr	r3, [pc, #24]	; (80110e8 <OpenContinuousRxCWindow+0x88>)
 80110ce:	f893 23fb 	ldrb.w	r2, [r3, #1019]	; 0x3fb
 80110d2:	4b05      	ldr	r3, [pc, #20]	; (80110e8 <OpenContinuousRxCWindow+0x88>)
 80110d4:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
    }
}
 80110d8:	bf00      	nop
 80110da:	3704      	adds	r7, #4
 80110dc:	46bd      	mov	sp, r7
 80110de:	bd90      	pop	{r4, r7, pc}
 80110e0:	20000c5c 	.word	0x20000c5c
 80110e4:	20000b28 	.word	0x20000b28
 80110e8:	20000740 	.word	0x20000740
 80110ec:	20000b64 	.word	0x20000b64
 80110f0:	0801ea64 	.word	0x0801ea64

080110f4 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 80110f4:	b580      	push	{r7, lr}
 80110f6:	b088      	sub	sp, #32
 80110f8:	af00      	add	r7, sp, #0
 80110fa:	60f8      	str	r0, [r7, #12]
 80110fc:	60b9      	str	r1, [r7, #8]
 80110fe:	603b      	str	r3, [r7, #0]
 8011100:	4613      	mov	r3, r2
 8011102:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 8011104:	4b82      	ldr	r3, [pc, #520]	; (8011310 <PrepareFrame+0x21c>)
 8011106:	2200      	movs	r2, #0
 8011108:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 801110a:	4b81      	ldr	r3, [pc, #516]	; (8011310 <PrepareFrame+0x21c>)
 801110c:	2200      	movs	r2, #0
 801110e:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
    uint32_t fCntUp = 0;
 8011112:	2300      	movs	r3, #0
 8011114:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 8011116:	2300      	movs	r3, #0
 8011118:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 801111a:	2300      	movs	r3, #0
 801111c:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 801111e:	683b      	ldr	r3, [r7, #0]
 8011120:	2b00      	cmp	r3, #0
 8011122:	d101      	bne.n	8011128 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 8011124:	2300      	movs	r3, #0
 8011126:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8011128:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801112a:	461a      	mov	r2, r3
 801112c:	6839      	ldr	r1, [r7, #0]
 801112e:	4879      	ldr	r0, [pc, #484]	; (8011314 <PrepareFrame+0x220>)
 8011130:	f007 feb1 	bl	8018e96 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8011134:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011136:	b2da      	uxtb	r2, r3
 8011138:	4b75      	ldr	r3, [pc, #468]	; (8011310 <PrepareFrame+0x21c>)
 801113a:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	781a      	ldrb	r2, [r3, #0]
 8011142:	4b73      	ldr	r3, [pc, #460]	; (8011310 <PrepareFrame+0x21c>)
 8011144:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	781b      	ldrb	r3, [r3, #0]
 801114a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801114e:	b2db      	uxtb	r3, r3
 8011150:	2b07      	cmp	r3, #7
 8011152:	f000 80b9 	beq.w	80112c8 <PrepareFrame+0x1d4>
 8011156:	2b07      	cmp	r3, #7
 8011158:	f300 80d0 	bgt.w	80112fc <PrepareFrame+0x208>
 801115c:	2b02      	cmp	r3, #2
 801115e:	d006      	beq.n	801116e <PrepareFrame+0x7a>
 8011160:	2b04      	cmp	r3, #4
 8011162:	f040 80cb 	bne.w	80112fc <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 8011166:	4b6a      	ldr	r3, [pc, #424]	; (8011310 <PrepareFrame+0x21c>)
 8011168:	2201      	movs	r2, #1
 801116a:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 801116e:	4b68      	ldr	r3, [pc, #416]	; (8011310 <PrepareFrame+0x21c>)
 8011170:	2204      	movs	r2, #4
 8011172:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8011176:	4b66      	ldr	r3, [pc, #408]	; (8011310 <PrepareFrame+0x21c>)
 8011178:	4a67      	ldr	r2, [pc, #412]	; (8011318 <PrepareFrame+0x224>)
 801117a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 801117e:	4b64      	ldr	r3, [pc, #400]	; (8011310 <PrepareFrame+0x21c>)
 8011180:	22ff      	movs	r2, #255	; 0xff
 8011182:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	781a      	ldrb	r2, [r3, #0]
 801118a:	4b61      	ldr	r3, [pc, #388]	; (8011310 <PrepareFrame+0x21c>)
 801118c:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8011190:	4a5f      	ldr	r2, [pc, #380]	; (8011310 <PrepareFrame+0x21c>)
 8011192:	79fb      	ldrb	r3, [r7, #7]
 8011194:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8011198:	4b60      	ldr	r3, [pc, #384]	; (801131c <PrepareFrame+0x228>)
 801119a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 801119e:	4a5c      	ldr	r2, [pc, #368]	; (8011310 <PrepareFrame+0x21c>)
 80111a0:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 80111a4:	68bb      	ldr	r3, [r7, #8]
 80111a6:	781a      	ldrb	r2, [r3, #0]
 80111a8:	4b59      	ldr	r3, [pc, #356]	; (8011310 <PrepareFrame+0x21c>)
 80111aa:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 80111ae:	4b58      	ldr	r3, [pc, #352]	; (8011310 <PrepareFrame+0x21c>)
 80111b0:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 80111b4:	4b56      	ldr	r3, [pc, #344]	; (8011310 <PrepareFrame+0x21c>)
 80111b6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 80111ba:	4b55      	ldr	r3, [pc, #340]	; (8011310 <PrepareFrame+0x21c>)
 80111bc:	4a55      	ldr	r2, [pc, #340]	; (8011314 <PrepareFrame+0x220>)
 80111be:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80111c2:	f107 0318 	add.w	r3, r7, #24
 80111c6:	4618      	mov	r0, r3
 80111c8:	f003 f9dc 	bl	8014584 <LoRaMacCryptoGetFCntUp>
 80111cc:	4603      	mov	r3, r0
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d001      	beq.n	80111d6 <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80111d2:	2312      	movs	r3, #18
 80111d4:	e098      	b.n	8011308 <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 80111d6:	69bb      	ldr	r3, [r7, #24]
 80111d8:	b29a      	uxth	r2, r3
 80111da:	4b4d      	ldr	r3, [pc, #308]	; (8011310 <PrepareFrame+0x21c>)
 80111dc:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = 0;
 80111e0:	4b4b      	ldr	r3, [pc, #300]	; (8011310 <PrepareFrame+0x21c>)
 80111e2:	2200      	movs	r2, #0
 80111e4:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 80111e8:	4b49      	ldr	r3, [pc, #292]	; (8011310 <PrepareFrame+0x21c>)
 80111ea:	2200      	movs	r2, #0
 80111ec:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 80111f0:	69bb      	ldr	r3, [r7, #24]
 80111f2:	4a47      	ldr	r2, [pc, #284]	; (8011310 <PrepareFrame+0x21c>)
 80111f4:	f8c2 344c 	str.w	r3, [r2, #1100]	; 0x44c

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80111f8:	f107 0314 	add.w	r3, r7, #20
 80111fc:	4618      	mov	r0, r3
 80111fe:	f002 fb8d 	bl	801391c <LoRaMacCommandsGetSizeSerializedCmds>
 8011202:	4603      	mov	r3, r0
 8011204:	2b00      	cmp	r3, #0
 8011206:	d001      	beq.n	801120c <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011208:	2313      	movs	r3, #19
 801120a:	e07d      	b.n	8011308 <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 801120c:	697b      	ldr	r3, [r7, #20]
 801120e:	2b00      	cmp	r3, #0
 8011210:	d076      	beq.n	8011300 <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8011212:	4b42      	ldr	r3, [pc, #264]	; (801131c <PrepareFrame+0x228>)
 8011214:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011218:	4618      	mov	r0, r3
 801121a:	f7fe fd2b 	bl	800fc74 <GetMaxAppPayloadWithoutFOptsLength>
 801121e:	4603      	mov	r3, r0
 8011220:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8011222:	4b3b      	ldr	r3, [pc, #236]	; (8011310 <PrepareFrame+0x21c>)
 8011224:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8011228:	2b00      	cmp	r3, #0
 801122a:	d01d      	beq.n	8011268 <PrepareFrame+0x174>
 801122c:	697b      	ldr	r3, [r7, #20]
 801122e:	2b0f      	cmp	r3, #15
 8011230:	d81a      	bhi.n	8011268 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8011232:	f107 0314 	add.w	r3, r7, #20
 8011236:	4a3a      	ldr	r2, [pc, #232]	; (8011320 <PrepareFrame+0x22c>)
 8011238:	4619      	mov	r1, r3
 801123a:	200f      	movs	r0, #15
 801123c:	f002 fb84 	bl	8013948 <LoRaMacCommandsSerializeCmds>
 8011240:	4603      	mov	r3, r0
 8011242:	2b00      	cmp	r3, #0
 8011244:	d001      	beq.n	801124a <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011246:	2313      	movs	r3, #19
 8011248:	e05e      	b.n	8011308 <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 801124a:	697b      	ldr	r3, [r7, #20]
 801124c:	f003 030f 	and.w	r3, r3, #15
 8011250:	b2d9      	uxtb	r1, r3
 8011252:	68ba      	ldr	r2, [r7, #8]
 8011254:	7813      	ldrb	r3, [r2, #0]
 8011256:	f361 0303 	bfi	r3, r1, #0, #4
 801125a:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 801125c:	68bb      	ldr	r3, [r7, #8]
 801125e:	781a      	ldrb	r2, [r3, #0]
 8011260:	4b2b      	ldr	r3, [pc, #172]	; (8011310 <PrepareFrame+0x21c>)
 8011262:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 8011266:	e04b      	b.n	8011300 <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8011268:	4b29      	ldr	r3, [pc, #164]	; (8011310 <PrepareFrame+0x21c>)
 801126a:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 801126e:	2b00      	cmp	r3, #0
 8011270:	d010      	beq.n	8011294 <PrepareFrame+0x1a0>
 8011272:	697b      	ldr	r3, [r7, #20]
 8011274:	2b0f      	cmp	r3, #15
 8011276:	d90d      	bls.n	8011294 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8011278:	7ffb      	ldrb	r3, [r7, #31]
 801127a:	f107 0114 	add.w	r1, r7, #20
 801127e:	4a29      	ldr	r2, [pc, #164]	; (8011324 <PrepareFrame+0x230>)
 8011280:	4618      	mov	r0, r3
 8011282:	f002 fb61 	bl	8013948 <LoRaMacCommandsSerializeCmds>
 8011286:	4603      	mov	r3, r0
 8011288:	2b00      	cmp	r3, #0
 801128a:	d001      	beq.n	8011290 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801128c:	2313      	movs	r3, #19
 801128e:	e03b      	b.n	8011308 <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8011290:	230a      	movs	r3, #10
 8011292:	e039      	b.n	8011308 <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8011294:	7ffb      	ldrb	r3, [r7, #31]
 8011296:	f107 0114 	add.w	r1, r7, #20
 801129a:	4a22      	ldr	r2, [pc, #136]	; (8011324 <PrepareFrame+0x230>)
 801129c:	4618      	mov	r0, r3
 801129e:	f002 fb53 	bl	8013948 <LoRaMacCommandsSerializeCmds>
 80112a2:	4603      	mov	r3, r0
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d001      	beq.n	80112ac <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80112a8:	2313      	movs	r3, #19
 80112aa:	e02d      	b.n	8011308 <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 80112ac:	4b18      	ldr	r3, [pc, #96]	; (8011310 <PrepareFrame+0x21c>)
 80112ae:	2200      	movs	r2, #0
 80112b0:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 80112b4:	4b16      	ldr	r3, [pc, #88]	; (8011310 <PrepareFrame+0x21c>)
 80112b6:	4a1b      	ldr	r2, [pc, #108]	; (8011324 <PrepareFrame+0x230>)
 80112b8:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 80112bc:	697b      	ldr	r3, [r7, #20]
 80112be:	b2da      	uxtb	r2, r3
 80112c0:	4b13      	ldr	r3, [pc, #76]	; (8011310 <PrepareFrame+0x21c>)
 80112c2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 80112c6:	e01b      	b.n	8011300 <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 80112c8:	683b      	ldr	r3, [r7, #0]
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d01a      	beq.n	8011304 <PrepareFrame+0x210>
 80112ce:	4b10      	ldr	r3, [pc, #64]	; (8011310 <PrepareFrame+0x21c>)
 80112d0:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d015      	beq.n	8011304 <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 80112d8:	4813      	ldr	r0, [pc, #76]	; (8011328 <PrepareFrame+0x234>)
 80112da:	4b0d      	ldr	r3, [pc, #52]	; (8011310 <PrepareFrame+0x21c>)
 80112dc:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80112e0:	b29b      	uxth	r3, r3
 80112e2:	461a      	mov	r2, r3
 80112e4:	6839      	ldr	r1, [r7, #0]
 80112e6:	f007 fdd6 	bl	8018e96 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 80112ea:	4b09      	ldr	r3, [pc, #36]	; (8011310 <PrepareFrame+0x21c>)
 80112ec:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80112f0:	b29b      	uxth	r3, r3
 80112f2:	3301      	adds	r3, #1
 80112f4:	b29a      	uxth	r2, r3
 80112f6:	4b06      	ldr	r3, [pc, #24]	; (8011310 <PrepareFrame+0x21c>)
 80112f8:	801a      	strh	r2, [r3, #0]
            }
            break;
 80112fa:	e003      	b.n	8011304 <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80112fc:	2302      	movs	r3, #2
 80112fe:	e003      	b.n	8011308 <PrepareFrame+0x214>
            break;
 8011300:	bf00      	nop
 8011302:	e000      	b.n	8011306 <PrepareFrame+0x212>
            break;
 8011304:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 8011306:	2300      	movs	r3, #0
}
 8011308:	4618      	mov	r0, r3
 801130a:	3720      	adds	r7, #32
 801130c:	46bd      	mov	sp, r7
 801130e:	bd80      	pop	{r7, pc}
 8011310:	20000740 	.word	0x20000740
 8011314:	20000878 	.word	0x20000878
 8011318:	20000742 	.word	0x20000742
 801131c:	20000c5c 	.word	0x20000c5c
 8011320:	20000858 	.word	0x20000858
 8011324:	20000bdc 	.word	0x20000bdc
 8011328:	20000743 	.word	0x20000743

0801132c <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 801132c:	b580      	push	{r7, lr}
 801132e:	b08a      	sub	sp, #40	; 0x28
 8011330:	af00      	add	r7, sp, #0
 8011332:	4603      	mov	r3, r0
 8011334:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011336:	2303      	movs	r3, #3
 8011338:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 801133c:	2300      	movs	r3, #0
 801133e:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 8011340:	79fb      	ldrb	r3, [r7, #7]
 8011342:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011344:	4b4b      	ldr	r3, [pc, #300]	; (8011474 <SendFrameOnChannel+0x148>)
 8011346:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801134a:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 801134c:	4b49      	ldr	r3, [pc, #292]	; (8011474 <SendFrameOnChannel+0x148>)
 801134e:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8011352:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8011354:	4b47      	ldr	r3, [pc, #284]	; (8011474 <SendFrameOnChannel+0x148>)
 8011356:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801135a:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 801135c:	4b45      	ldr	r3, [pc, #276]	; (8011474 <SendFrameOnChannel+0x148>)
 801135e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011362:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8011364:	4b44      	ldr	r3, [pc, #272]	; (8011478 <SendFrameOnChannel+0x14c>)
 8011366:	881b      	ldrh	r3, [r3, #0]
 8011368:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 801136a:	4b42      	ldr	r3, [pc, #264]	; (8011474 <SendFrameOnChannel+0x148>)
 801136c:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8011370:	77bb      	strb	r3, [r7, #30]
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8011372:	4b40      	ldr	r3, [pc, #256]	; (8011474 <SendFrameOnChannel+0x148>)
 8011374:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8011378:	f107 020f 	add.w	r2, r7, #15
 801137c:	f107 0110 	add.w	r1, r7, #16
 8011380:	4b3e      	ldr	r3, [pc, #248]	; (801147c <SendFrameOnChannel+0x150>)
 8011382:	f004 f869 	bl	8015458 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011386:	4b3c      	ldr	r3, [pc, #240]	; (8011478 <SendFrameOnChannel+0x14c>)
 8011388:	2201      	movs	r2, #1
 801138a:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801138e:	4b39      	ldr	r3, [pc, #228]	; (8011474 <SendFrameOnChannel+0x148>)
 8011390:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011394:	b2da      	uxtb	r2, r3
 8011396:	4b38      	ldr	r3, [pc, #224]	; (8011478 <SendFrameOnChannel+0x14c>)
 8011398:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
    MacCtx.McpsConfirm.TxPower = txPower;
 801139c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80113a0:	4b35      	ldr	r3, [pc, #212]	; (8011478 <SendFrameOnChannel+0x14c>)
 80113a2:	f883 2443 	strb.w	r2, [r3, #1091]	; 0x443
    MacCtx.McpsConfirm.Channel = channel;
 80113a6:	79fb      	ldrb	r3, [r7, #7]
 80113a8:	4a33      	ldr	r2, [pc, #204]	; (8011478 <SendFrameOnChannel+0x14c>)
 80113aa:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80113ae:	4b32      	ldr	r3, [pc, #200]	; (8011478 <SendFrameOnChannel+0x14c>)
 80113b0:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 80113b4:	4a30      	ldr	r2, [pc, #192]	; (8011478 <SendFrameOnChannel+0x14c>)
 80113b6:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80113ba:	4b2f      	ldr	r3, [pc, #188]	; (8011478 <SendFrameOnChannel+0x14c>)
 80113bc:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 80113c0:	4a2d      	ldr	r2, [pc, #180]	; (8011478 <SendFrameOnChannel+0x14c>)
 80113c2:	f8c2 3458 	str.w	r3, [r2, #1112]	; 0x458

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 80113c6:	f001 fff6 	bl	80133b6 <LoRaMacClassBIsBeaconModeActive>
 80113ca:	4603      	mov	r3, r0
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d00b      	beq.n	80113e8 <SendFrameOnChannel+0xbc>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 80113d0:	4b29      	ldr	r3, [pc, #164]	; (8011478 <SendFrameOnChannel+0x14c>)
 80113d2:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 80113d6:	4618      	mov	r0, r3
 80113d8:	f002 f858 	bl	801348c <LoRaMacClassBIsUplinkCollision>
 80113dc:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 80113de:	6a3b      	ldr	r3, [r7, #32]
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d001      	beq.n	80113e8 <SendFrameOnChannel+0xbc>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 80113e4:	2310      	movs	r3, #16
 80113e6:	e040      	b.n	801146a <SendFrameOnChannel+0x13e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80113e8:	4b22      	ldr	r3, [pc, #136]	; (8011474 <SendFrameOnChannel+0x148>)
 80113ea:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80113ee:	2b01      	cmp	r3, #1
 80113f0:	d101      	bne.n	80113f6 <SendFrameOnChannel+0xca>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 80113f2:	f002 f855 	bl	80134a0 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 80113f6:	f001 ffef 	bl	80133d8 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 80113fa:	4b1e      	ldr	r3, [pc, #120]	; (8011474 <SendFrameOnChannel+0x148>)
 80113fc:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011400:	b2db      	uxtb	r3, r3
 8011402:	4a1d      	ldr	r2, [pc, #116]	; (8011478 <SendFrameOnChannel+0x14c>)
 8011404:	f892 241b 	ldrb.w	r2, [r2, #1051]	; 0x41b
 8011408:	4611      	mov	r1, r2
 801140a:	4618      	mov	r0, r3
 801140c:	f7ff fc2a 	bl	8010c64 <SecureFrame>
 8011410:	4603      	mov	r3, r0
 8011412:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 8011416:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801141a:	2b00      	cmp	r3, #0
 801141c:	d002      	beq.n	8011424 <SendFrameOnChannel+0xf8>
    {
        return status;
 801141e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011422:	e022      	b.n	801146a <SendFrameOnChannel+0x13e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8011424:	4b14      	ldr	r3, [pc, #80]	; (8011478 <SendFrameOnChannel+0x14c>)
 8011426:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801142a:	f043 0302 	orr.w	r3, r3, #2
 801142e:	4a12      	ldr	r2, [pc, #72]	; (8011478 <SendFrameOnChannel+0x14c>)
 8011430:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.ChannelsNbTransCounter++;
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.ChannelsNbTransCounter++;
 8011434:	4b10      	ldr	r3, [pc, #64]	; (8011478 <SendFrameOnChannel+0x14c>)
 8011436:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 801143a:	3301      	adds	r3, #1
 801143c:	b2da      	uxtb	r2, r3
 801143e:	4b0e      	ldr	r3, [pc, #56]	; (8011478 <SendFrameOnChannel+0x14c>)
 8011440:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 8011444:	4b0c      	ldr	r3, [pc, #48]	; (8011478 <SendFrameOnChannel+0x14c>)
 8011446:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 801144a:	4b0b      	ldr	r3, [pc, #44]	; (8011478 <SendFrameOnChannel+0x14c>)
 801144c:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
    MacCtx.ResponseTimeoutStartTime = 0;
 8011450:	4b09      	ldr	r3, [pc, #36]	; (8011478 <SendFrameOnChannel+0x14c>)
 8011452:	2200      	movs	r2, #0
 8011454:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8011458:	4b09      	ldr	r3, [pc, #36]	; (8011480 <SendFrameOnChannel+0x154>)
 801145a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801145c:	4a06      	ldr	r2, [pc, #24]	; (8011478 <SendFrameOnChannel+0x14c>)
 801145e:	8812      	ldrh	r2, [r2, #0]
 8011460:	b2d2      	uxtb	r2, r2
 8011462:	4611      	mov	r1, r2
 8011464:	4807      	ldr	r0, [pc, #28]	; (8011484 <SendFrameOnChannel+0x158>)
 8011466:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8011468:	2300      	movs	r3, #0
}
 801146a:	4618      	mov	r0, r3
 801146c:	3728      	adds	r7, #40	; 0x28
 801146e:	46bd      	mov	sp, r7
 8011470:	bd80      	pop	{r7, pc}
 8011472:	bf00      	nop
 8011474:	20000c5c 	.word	0x20000c5c
 8011478:	20000740 	.word	0x20000740
 801147c:	20000b5c 	.word	0x20000b5c
 8011480:	0801ea64 	.word	0x0801ea64
 8011484:	20000742 	.word	0x20000742

08011488 <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8011488:	b580      	push	{r7, lr}
 801148a:	b082      	sub	sp, #8
 801148c:	af00      	add	r7, sp, #0
 801148e:	4603      	mov	r3, r0
 8011490:	6039      	str	r1, [r7, #0]
 8011492:	80fb      	strh	r3, [r7, #6]
 8011494:	4613      	mov	r3, r2
 8011496:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8011498:	4b09      	ldr	r3, [pc, #36]	; (80114c0 <SetTxContinuousWave+0x38>)
 801149a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801149c:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80114a0:	88fa      	ldrh	r2, [r7, #6]
 80114a2:	6838      	ldr	r0, [r7, #0]
 80114a4:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80114a6:	4b07      	ldr	r3, [pc, #28]	; (80114c4 <SetTxContinuousWave+0x3c>)
 80114a8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80114ac:	f043 0302 	orr.w	r3, r3, #2
 80114b0:	4a04      	ldr	r2, [pc, #16]	; (80114c4 <SetTxContinuousWave+0x3c>)
 80114b2:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 80114b6:	2300      	movs	r3, #0
}
 80114b8:	4618      	mov	r0, r3
 80114ba:	3708      	adds	r7, #8
 80114bc:	46bd      	mov	sp, r7
 80114be:	bd80      	pop	{r7, pc}
 80114c0:	0801ea64 	.word	0x0801ea64
 80114c4:	20000740 	.word	0x20000740

080114c8 <RestoreNvmData>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 80114c8:	b580      	push	{r7, lr}
 80114ca:	b082      	sub	sp, #8
 80114cc:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    uint32_t crc = 0;
 80114ce:	2300      	movs	r3, #0
 80114d0:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 80114d2:	4b49      	ldr	r3, [pc, #292]	; (80115f8 <RestoreNvmData+0x130>)
 80114d4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80114d8:	2b01      	cmp	r3, #1
 80114da:	d001      	beq.n	80114e0 <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 80114dc:	2301      	movs	r3, #1
 80114de:	e087      	b.n	80115f0 <RestoreNvmData+0x128>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 80114e0:	2124      	movs	r1, #36	; 0x24
 80114e2:	4846      	ldr	r0, [pc, #280]	; (80115fc <RestoreNvmData+0x134>)
 80114e4:	f007 fd2c 	bl	8018f40 <Crc32>
 80114e8:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 80114ea:	4b44      	ldr	r3, [pc, #272]	; (80115fc <RestoreNvmData+0x134>)
 80114ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114ee:	687a      	ldr	r2, [r7, #4]
 80114f0:	429a      	cmp	r2, r3
 80114f2:	d001      	beq.n	80114f8 <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80114f4:	2317      	movs	r3, #23
 80114f6:	e07b      	b.n	80115f0 <RestoreNvmData+0x128>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 80114f8:	211c      	movs	r1, #28
 80114fa:	4841      	ldr	r0, [pc, #260]	; (8011600 <RestoreNvmData+0x138>)
 80114fc:	f007 fd20 	bl	8018f40 <Crc32>
 8011500:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 8011502:	4b3e      	ldr	r3, [pc, #248]	; (80115fc <RestoreNvmData+0x134>)
 8011504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011506:	687a      	ldr	r2, [r7, #4]
 8011508:	429a      	cmp	r2, r3
 801150a:	d001      	beq.n	8011510 <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 801150c:	2317      	movs	r3, #23
 801150e:	e06f      	b.n	80115f0 <RestoreNvmData+0x128>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 8011510:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011514:	483b      	ldr	r0, [pc, #236]	; (8011604 <RestoreNvmData+0x13c>)
 8011516:	f007 fd13 	bl	8018f40 <Crc32>
 801151a:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 801151c:	4b37      	ldr	r3, [pc, #220]	; (80115fc <RestoreNvmData+0x134>)
 801151e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8011522:	687a      	ldr	r2, [r7, #4]
 8011524:	429a      	cmp	r2, r3
 8011526:	d001      	beq.n	801152c <RestoreNvmData+0x64>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8011528:	2317      	movs	r3, #23
 801152a:	e061      	b.n	80115f0 <RestoreNvmData+0x128>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 801152c:	21d4      	movs	r1, #212	; 0xd4
 801152e:	4836      	ldr	r0, [pc, #216]	; (8011608 <RestoreNvmData+0x140>)
 8011530:	f007 fd06 	bl	8018f40 <Crc32>
 8011534:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 8011536:	4b31      	ldr	r3, [pc, #196]	; (80115fc <RestoreNvmData+0x134>)
 8011538:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 801153c:	687a      	ldr	r2, [r7, #4]
 801153e:	429a      	cmp	r2, r3
 8011540:	d001      	beq.n	8011546 <RestoreNvmData+0x7e>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8011542:	2317      	movs	r3, #23
 8011544:	e054      	b.n	80115f0 <RestoreNvmData+0x128>
    }

    // RegionGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 8011546:	2110      	movs	r1, #16
 8011548:	4830      	ldr	r0, [pc, #192]	; (801160c <RestoreNvmData+0x144>)
 801154a:	f007 fcf9 	bl	8018f40 <Crc32>
 801154e:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 8011550:	4b2a      	ldr	r3, [pc, #168]	; (80115fc <RestoreNvmData+0x134>)
 8011552:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 8011556:	687a      	ldr	r2, [r7, #4]
 8011558:	429a      	cmp	r2, r3
 801155a:	d001      	beq.n	8011560 <RestoreNvmData+0x98>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 801155c:	2317      	movs	r3, #23
 801155e:	e047      	b.n	80115f0 <RestoreNvmData+0x128>
    }

    // RegionGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup2), sizeof( NvmBackup.RegionGroup2 ) -
 8011560:	f44f 715e 	mov.w	r1, #888	; 0x378
 8011564:	482a      	ldr	r0, [pc, #168]	; (8011610 <RestoreNvmData+0x148>)
 8011566:	f007 fceb 	bl	8018f40 <Crc32>
 801156a:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup2.Crc32 ) );
    if( crc != NvmBackup.RegionGroup2.Crc32 )
 801156c:	4b23      	ldr	r3, [pc, #140]	; (80115fc <RestoreNvmData+0x134>)
 801156e:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	; 0x5b0
 8011572:	687a      	ldr	r2, [r7, #4]
 8011574:	429a      	cmp	r2, r3
 8011576:	d001      	beq.n	801157c <RestoreNvmData+0xb4>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8011578:	2317      	movs	r3, #23
 801157a:	e039      	b.n	80115f0 <RestoreNvmData+0x128>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 801157c:	2114      	movs	r1, #20
 801157e:	4825      	ldr	r0, [pc, #148]	; (8011614 <RestoreNvmData+0x14c>)
 8011580:	f007 fcde 	bl	8018f40 <Crc32>
 8011584:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 8011586:	4b1d      	ldr	r3, [pc, #116]	; (80115fc <RestoreNvmData+0x134>)
 8011588:	f8d3 35c8 	ldr.w	r3, [r3, #1480]	; 0x5c8
 801158c:	687a      	ldr	r2, [r7, #4]
 801158e:	429a      	cmp	r2, r3
 8011590:	d001      	beq.n	8011596 <RestoreNvmData+0xce>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8011592:	2317      	movs	r3, #23
 8011594:	e02c      	b.n	80115f0 <RestoreNvmData+0x128>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 8011596:	f240 52cc 	movw	r2, #1484	; 0x5cc
 801159a:	4918      	ldr	r1, [pc, #96]	; (80115fc <RestoreNvmData+0x134>)
 801159c:	481e      	ldr	r0, [pc, #120]	; (8011618 <RestoreNvmData+0x150>)
 801159e:	f007 fc7a 	bl	8018e96 <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 80115a2:	f240 52cc 	movw	r2, #1484	; 0x5cc
 80115a6:	2100      	movs	r1, #0
 80115a8:	4814      	ldr	r0, [pc, #80]	; (80115fc <RestoreNvmData+0x134>)
 80115aa:	f007 fcaf 	bl	8018f0c <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 80115ae:	4b12      	ldr	r3, [pc, #72]	; (80115f8 <RestoreNvmData+0x130>)
 80115b0:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 80115b4:	4b10      	ldr	r3, [pc, #64]	; (80115f8 <RestoreNvmData+0x130>)
 80115b6:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 80115ba:	4b17      	ldr	r3, [pc, #92]	; (8011618 <RestoreNvmData+0x150>)
 80115bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80115be:	4a0e      	ldr	r2, [pc, #56]	; (80115f8 <RestoreNvmData+0x130>)
 80115c0:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80115c4:	4b14      	ldr	r3, [pc, #80]	; (8011618 <RestoreNvmData+0x150>)
 80115c6:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 80115ca:	4b0b      	ldr	r3, [pc, #44]	; (80115f8 <RestoreNvmData+0x130>)
 80115cc:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80115d0:	4b09      	ldr	r3, [pc, #36]	; (80115f8 <RestoreNvmData+0x130>)
 80115d2:	2201      	movs	r2, #1
 80115d4:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80115d8:	4b07      	ldr	r3, [pc, #28]	; (80115f8 <RestoreNvmData+0x130>)
 80115da:	2202      	movs	r2, #2
 80115dc:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

    // The public/private network flag may change upon reloading MacGroup2
    // from NVM and we thus need to synchronize the radio. The same function
    // is invoked in LoRaMacInitialization.
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80115e0:	4b0e      	ldr	r3, [pc, #56]	; (801161c <RestoreNvmData+0x154>)
 80115e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80115e4:	4a0c      	ldr	r2, [pc, #48]	; (8011618 <RestoreNvmData+0x150>)
 80115e6:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 80115ea:	4610      	mov	r0, r2
 80115ec:	4798      	blx	r3
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

    return LORAMAC_STATUS_OK;
 80115ee:	2300      	movs	r3, #0
}
 80115f0:	4618      	mov	r0, r3
 80115f2:	3708      	adds	r7, #8
 80115f4:	46bd      	mov	sp, r7
 80115f6:	bd80      	pop	{r7, pc}
 80115f8:	20000740 	.word	0x20000740
 80115fc:	20001228 	.word	0x20001228
 8011600:	20001250 	.word	0x20001250
 8011604:	20001270 	.word	0x20001270
 8011608:	20001374 	.word	0x20001374
 801160c:	2000144c 	.word	0x2000144c
 8011610:	20001460 	.word	0x20001460
 8011614:	200017dc 	.word	0x200017dc
 8011618:	20000c5c 	.word	0x20000c5c
 801161c:	0801ea64 	.word	0x0801ea64

08011620 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 8011620:	b480      	push	{r7}
 8011622:	b083      	sub	sp, #12
 8011624:	af00      	add	r7, sp, #0
 8011626:	6078      	str	r0, [r7, #4]
 8011628:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	2b00      	cmp	r3, #0
 801162e:	d002      	beq.n	8011636 <DetermineFrameType+0x16>
 8011630:	683b      	ldr	r3, [r7, #0]
 8011632:	2b00      	cmp	r3, #0
 8011634:	d101      	bne.n	801163a <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011636:	2303      	movs	r3, #3
 8011638:	e03b      	b.n	80116b2 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	7b1b      	ldrb	r3, [r3, #12]
 801163e:	f003 030f 	and.w	r3, r3, #15
 8011642:	b2db      	uxtb	r3, r3
 8011644:	2b00      	cmp	r3, #0
 8011646:	d008      	beq.n	801165a <DetermineFrameType+0x3a>
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801164e:	2b00      	cmp	r3, #0
 8011650:	d003      	beq.n	801165a <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 8011652:	683b      	ldr	r3, [r7, #0]
 8011654:	2200      	movs	r2, #0
 8011656:	701a      	strb	r2, [r3, #0]
 8011658:	e02a      	b.n	80116b0 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011660:	2b00      	cmp	r3, #0
 8011662:	d103      	bne.n	801166c <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8011664:	683b      	ldr	r3, [r7, #0]
 8011666:	2201      	movs	r2, #1
 8011668:	701a      	strb	r2, [r3, #0]
 801166a:	e021      	b.n	80116b0 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	7b1b      	ldrb	r3, [r3, #12]
 8011670:	f003 030f 	and.w	r3, r3, #15
 8011674:	b2db      	uxtb	r3, r3
 8011676:	2b00      	cmp	r3, #0
 8011678:	d108      	bne.n	801168c <DetermineFrameType+0x6c>
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011680:	2b00      	cmp	r3, #0
 8011682:	d103      	bne.n	801168c <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8011684:	683b      	ldr	r3, [r7, #0]
 8011686:	2202      	movs	r2, #2
 8011688:	701a      	strb	r2, [r3, #0]
 801168a:	e011      	b.n	80116b0 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	7b1b      	ldrb	r3, [r3, #12]
 8011690:	f003 030f 	and.w	r3, r3, #15
 8011694:	b2db      	uxtb	r3, r3
 8011696:	2b00      	cmp	r3, #0
 8011698:	d108      	bne.n	80116ac <DetermineFrameType+0x8c>
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d003      	beq.n	80116ac <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 80116a4:	683b      	ldr	r3, [r7, #0]
 80116a6:	2203      	movs	r2, #3
 80116a8:	701a      	strb	r2, [r3, #0]
 80116aa:	e001      	b.n	80116b0 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 80116ac:	2318      	movs	r3, #24
 80116ae:	e000      	b.n	80116b2 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 80116b0:	2300      	movs	r3, #0
}
 80116b2:	4618      	mov	r0, r3
 80116b4:	370c      	adds	r7, #12
 80116b6:	46bd      	mov	sp, r7
 80116b8:	bc80      	pop	{r7}
 80116ba:	4770      	bx	lr

080116bc <CheckRetrans>:
    }
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
 80116bc:	b480      	push	{r7}
 80116be:	b083      	sub	sp, #12
 80116c0:	af00      	add	r7, sp, #0
 80116c2:	4603      	mov	r3, r0
 80116c4:	460a      	mov	r2, r1
 80116c6:	71fb      	strb	r3, [r7, #7]
 80116c8:	4613      	mov	r3, r2
 80116ca:	71bb      	strb	r3, [r7, #6]
    if( counter >= limit )
 80116cc:	79fa      	ldrb	r2, [r7, #7]
 80116ce:	79bb      	ldrb	r3, [r7, #6]
 80116d0:	429a      	cmp	r2, r3
 80116d2:	d301      	bcc.n	80116d8 <CheckRetrans+0x1c>
    {
        return true;
 80116d4:	2301      	movs	r3, #1
 80116d6:	e000      	b.n	80116da <CheckRetrans+0x1e>
    }
    return false;
 80116d8:	2300      	movs	r3, #0
}
 80116da:	4618      	mov	r0, r3
 80116dc:	370c      	adds	r7, #12
 80116de:	46bd      	mov	sp, r7
 80116e0:	bc80      	pop	{r7}
 80116e2:	4770      	bx	lr

080116e4 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 80116e4:	b580      	push	{r7, lr}
 80116e6:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 80116e8:	4b12      	ldr	r3, [pc, #72]	; (8011734 <CheckRetransUnconfirmedUplink+0x50>)
 80116ea:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80116ee:	4a12      	ldr	r2, [pc, #72]	; (8011738 <CheckRetransUnconfirmedUplink+0x54>)
 80116f0:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
 80116f4:	4611      	mov	r1, r2
 80116f6:	4618      	mov	r0, r3
 80116f8:	f7ff ffe0 	bl	80116bc <CheckRetrans>
 80116fc:	4603      	mov	r3, r0
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d001      	beq.n	8011706 <CheckRetransUnconfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 8011702:	2301      	movs	r3, #1
 8011704:	e014      	b.n	8011730 <CheckRetransUnconfirmedUplink+0x4c>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8011706:	4b0b      	ldr	r3, [pc, #44]	; (8011734 <CheckRetransUnconfirmedUplink+0x50>)
 8011708:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 801170c:	f003 0302 	and.w	r3, r3, #2
 8011710:	b2db      	uxtb	r3, r3
 8011712:	2b00      	cmp	r3, #0
 8011714:	d00b      	beq.n	801172e <CheckRetransUnconfirmedUplink+0x4a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8011716:	4b07      	ldr	r3, [pc, #28]	; (8011734 <CheckRetransUnconfirmedUplink+0x50>)
 8011718:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 801171c:	2b00      	cmp	r3, #0
 801171e:	d004      	beq.n	801172a <CheckRetransUnconfirmedUplink+0x46>
            ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8011720:	4b04      	ldr	r3, [pc, #16]	; (8011734 <CheckRetransUnconfirmedUplink+0x50>)
 8011722:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8011726:	2b01      	cmp	r3, #1
 8011728:	d101      	bne.n	801172e <CheckRetransUnconfirmedUplink+0x4a>
        {
            return true;
 801172a:	2301      	movs	r3, #1
 801172c:	e000      	b.n	8011730 <CheckRetransUnconfirmedUplink+0x4c>
        }
    }
    return false;
 801172e:	2300      	movs	r3, #0
}
 8011730:	4618      	mov	r0, r3
 8011732:	bd80      	pop	{r7, pc}
 8011734:	20000740 	.word	0x20000740
 8011738:	20000c5c 	.word	0x20000c5c

0801173c <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 801173c:	b580      	push	{r7, lr}
 801173e:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8011740:	4b10      	ldr	r3, [pc, #64]	; (8011784 <CheckRetransConfirmedUplink+0x48>)
 8011742:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8011746:	4a10      	ldr	r2, [pc, #64]	; (8011788 <CheckRetransConfirmedUplink+0x4c>)
 8011748:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
 801174c:	4611      	mov	r1, r2
 801174e:	4618      	mov	r0, r3
 8011750:	f7ff ffb4 	bl	80116bc <CheckRetrans>
 8011754:	4603      	mov	r3, r0
 8011756:	2b00      	cmp	r3, #0
 8011758:	d001      	beq.n	801175e <CheckRetransConfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 801175a:	2301      	movs	r3, #1
 801175c:	e00f      	b.n	801177e <CheckRetransConfirmedUplink+0x42>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 801175e:	4b09      	ldr	r3, [pc, #36]	; (8011784 <CheckRetransConfirmedUplink+0x48>)
 8011760:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8011764:	f003 0302 	and.w	r3, r3, #2
 8011768:	b2db      	uxtb	r3, r3
 801176a:	2b00      	cmp	r3, #0
 801176c:	d006      	beq.n	801177c <CheckRetransConfirmedUplink+0x40>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 801176e:	4b05      	ldr	r3, [pc, #20]	; (8011784 <CheckRetransConfirmedUplink+0x48>)
 8011770:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 8011774:	2b00      	cmp	r3, #0
 8011776:	d001      	beq.n	801177c <CheckRetransConfirmedUplink+0x40>
        {
            return true;
 8011778:	2301      	movs	r3, #1
 801177a:	e000      	b.n	801177e <CheckRetransConfirmedUplink+0x42>
        }
    }
    return false;
 801177c:	2300      	movs	r3, #0
}
 801177e:	4618      	mov	r0, r3
 8011780:	bd80      	pop	{r7, pc}
 8011782:	bf00      	nop
 8011784:	20000740 	.word	0x20000740
 8011788:	20000c5c 	.word	0x20000c5c

0801178c <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
 801178c:	b480      	push	{r7}
 801178e:	b083      	sub	sp, #12
 8011790:	af00      	add	r7, sp, #0
 8011792:	6078      	str	r0, [r7, #4]
    if( counter < ADR_ACK_COUNTER_MAX )
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801179a:	d002      	beq.n	80117a2 <IncreaseAdrAckCounter+0x16>
    {
        counter++;
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	3301      	adds	r3, #1
 80117a0:	607b      	str	r3, [r7, #4]
    }
    return counter;
 80117a2:	687b      	ldr	r3, [r7, #4]
}
 80117a4:	4618      	mov	r0, r3
 80117a6:	370c      	adds	r7, #12
 80117a8:	46bd      	mov	sp, r7
 80117aa:	bc80      	pop	{r7}
 80117ac:	4770      	bx	lr
	...

080117b0 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 80117b0:	b580      	push	{r7, lr}
 80117b2:	af00      	add	r7, sp, #0
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80117b4:	4b1a      	ldr	r3, [pc, #104]	; (8011820 <StopRetransmission+0x70>)
 80117b6:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 80117ba:	f003 0302 	and.w	r3, r3, #2
 80117be:	b2db      	uxtb	r3, r3
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d009      	beq.n	80117d8 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80117c4:	4b16      	ldr	r3, [pc, #88]	; (8011820 <StopRetransmission+0x70>)
 80117c6:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d011      	beq.n	80117f2 <StopRetransmission+0x42>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 80117ce:	4b14      	ldr	r3, [pc, #80]	; (8011820 <StopRetransmission+0x70>)
 80117d0:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80117d4:	2b01      	cmp	r3, #1
 80117d6:	d00c      	beq.n	80117f2 <StopRetransmission+0x42>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 80117d8:	4b12      	ldr	r3, [pc, #72]	; (8011824 <StopRetransmission+0x74>)
 80117da:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d007      	beq.n	80117f2 <StopRetransmission+0x42>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 80117e2:	4b10      	ldr	r3, [pc, #64]	; (8011824 <StopRetransmission+0x74>)
 80117e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117e6:	4618      	mov	r0, r3
 80117e8:	f7ff ffd0 	bl	801178c <IncreaseAdrAckCounter>
 80117ec:	4603      	mov	r3, r0
 80117ee:	4a0d      	ldr	r2, [pc, #52]	; (8011824 <StopRetransmission+0x74>)
 80117f0:	6293      	str	r3, [r2, #40]	; 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 80117f2:	4b0b      	ldr	r3, [pc, #44]	; (8011820 <StopRetransmission+0x70>)
 80117f4:	2200      	movs	r2, #0
 80117f6:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    MacCtx.NodeAckRequested = false;
 80117fa:	4b09      	ldr	r3, [pc, #36]	; (8011820 <StopRetransmission+0x70>)
 80117fc:	2200      	movs	r2, #0
 80117fe:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 8011802:	4b07      	ldr	r3, [pc, #28]	; (8011820 <StopRetransmission+0x70>)
 8011804:	2200      	movs	r2, #0
 8011806:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 801180a:	4b05      	ldr	r3, [pc, #20]	; (8011820 <StopRetransmission+0x70>)
 801180c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011810:	f023 0302 	bic.w	r3, r3, #2
 8011814:	4a02      	ldr	r2, [pc, #8]	; (8011820 <StopRetransmission+0x70>)
 8011816:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 801181a:	2301      	movs	r3, #1
}
 801181c:	4618      	mov	r0, r3
 801181e:	bd80      	pop	{r7, pc}
 8011820:	20000740 	.word	0x20000740
 8011824:	20000c5c 	.word	0x20000c5c

08011828 <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 8011828:	b580      	push	{r7, lr}
 801182a:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 801182c:	4b08      	ldr	r3, [pc, #32]	; (8011850 <OnMacProcessNotify+0x28>)
 801182e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011832:	2b00      	cmp	r3, #0
 8011834:	d00a      	beq.n	801184c <OnMacProcessNotify+0x24>
 8011836:	4b06      	ldr	r3, [pc, #24]	; (8011850 <OnMacProcessNotify+0x28>)
 8011838:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801183c:	695b      	ldr	r3, [r3, #20]
 801183e:	2b00      	cmp	r3, #0
 8011840:	d004      	beq.n	801184c <OnMacProcessNotify+0x24>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8011842:	4b03      	ldr	r3, [pc, #12]	; (8011850 <OnMacProcessNotify+0x28>)
 8011844:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011848:	695b      	ldr	r3, [r3, #20]
 801184a:	4798      	blx	r3
    }
}
 801184c:	bf00      	nop
 801184e:	bd80      	pop	{r7, pc}
 8011850:	20000740 	.word	0x20000740

08011854 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8011854:	b580      	push	{r7, lr}
 8011856:	b082      	sub	sp, #8
 8011858:	af00      	add	r7, sp, #0
 801185a:	4603      	mov	r3, r0
 801185c:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 801185e:	4b0b      	ldr	r3, [pc, #44]	; (801188c <CallNvmDataChangeCallback+0x38>)
 8011860:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011864:	2b00      	cmp	r3, #0
 8011866:	d00c      	beq.n	8011882 <CallNvmDataChangeCallback+0x2e>
 8011868:	4b08      	ldr	r3, [pc, #32]	; (801188c <CallNvmDataChangeCallback+0x38>)
 801186a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801186e:	691b      	ldr	r3, [r3, #16]
 8011870:	2b00      	cmp	r3, #0
 8011872:	d006      	beq.n	8011882 <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8011874:	4b05      	ldr	r3, [pc, #20]	; (801188c <CallNvmDataChangeCallback+0x38>)
 8011876:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801187a:	691b      	ldr	r3, [r3, #16]
 801187c:	88fa      	ldrh	r2, [r7, #6]
 801187e:	4610      	mov	r0, r2
 8011880:	4798      	blx	r3
    }
}
 8011882:	bf00      	nop
 8011884:	3708      	adds	r7, #8
 8011886:	46bd      	mov	sp, r7
 8011888:	bd80      	pop	{r7, pc}
 801188a:	bf00      	nop
 801188c:	20000740 	.word	0x20000740

08011890 <IsRequestPending>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 8011890:	b480      	push	{r7}
 8011892:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8011894:	4b0b      	ldr	r3, [pc, #44]	; (80118c4 <IsRequestPending+0x34>)
 8011896:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 801189a:	f003 0304 	and.w	r3, r3, #4
 801189e:	b2db      	uxtb	r3, r3
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d107      	bne.n	80118b4 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 80118a4:	4b07      	ldr	r3, [pc, #28]	; (80118c4 <IsRequestPending+0x34>)
 80118a6:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 80118aa:	f003 0301 	and.w	r3, r3, #1
 80118ae:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d001      	beq.n	80118b8 <IsRequestPending+0x28>
    {
        return 1;
 80118b4:	2301      	movs	r3, #1
 80118b6:	e000      	b.n	80118ba <IsRequestPending+0x2a>
    }
    return 0;
 80118b8:	2300      	movs	r3, #0
}
 80118ba:	4618      	mov	r0, r3
 80118bc:	46bd      	mov	sp, r7
 80118be:	bc80      	pop	{r7}
 80118c0:	4770      	bx	lr
 80118c2:	bf00      	nop
 80118c4:	20000740 	.word	0x20000740

080118c8 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 80118c8:	b590      	push	{r4, r7, lr}
 80118ca:	b091      	sub	sp, #68	; 0x44
 80118cc:	af02      	add	r7, sp, #8
 80118ce:	6178      	str	r0, [r7, #20]
 80118d0:	6139      	str	r1, [r7, #16]
 80118d2:	4613      	mov	r3, r2
 80118d4:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 80118d6:	697b      	ldr	r3, [r7, #20]
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d002      	beq.n	80118e2 <LoRaMacInitialization+0x1a>
 80118dc:	693b      	ldr	r3, [r7, #16]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d101      	bne.n	80118e6 <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80118e2:	2303      	movs	r3, #3
 80118e4:	e27a      	b.n	8011ddc <LoRaMacInitialization+0x514>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 80118e6:	697b      	ldr	r3, [r7, #20]
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d00b      	beq.n	8011906 <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 80118ee:	697b      	ldr	r3, [r7, #20]
 80118f0:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d007      	beq.n	8011906 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 80118f6:	697b      	ldr	r3, [r7, #20]
 80118f8:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d003      	beq.n	8011906 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 80118fe:	697b      	ldr	r3, [r7, #20]
 8011900:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8011902:	2b00      	cmp	r3, #0
 8011904:	d101      	bne.n	801190a <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011906:	2303      	movs	r3, #3
 8011908:	e268      	b.n	8011ddc <LoRaMacInitialization+0x514>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 801190a:	7bfb      	ldrb	r3, [r7, #15]
 801190c:	4618      	mov	r0, r3
 801190e:	f003 fcac 	bl	801526a <RegionIsActive>
 8011912:	4603      	mov	r3, r0
 8011914:	f083 0301 	eor.w	r3, r3, #1
 8011918:	b2db      	uxtb	r3, r3
 801191a:	2b00      	cmp	r3, #0
 801191c:	d001      	beq.n	8011922 <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 801191e:	2309      	movs	r3, #9
 8011920:	e25c      	b.n	8011ddc <LoRaMacInitialization+0x514>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8011922:	6978      	ldr	r0, [r7, #20]
 8011924:	f002 f932 	bl	8013b8c <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8011928:	f240 52cc 	movw	r2, #1484	; 0x5cc
 801192c:	2100      	movs	r1, #0
 801192e:	48c7      	ldr	r0, [pc, #796]	; (8011c4c <LoRaMacInitialization+0x384>)
 8011930:	f007 faec 	bl	8018f0c <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8011934:	f240 521c 	movw	r2, #1308	; 0x51c
 8011938:	2100      	movs	r1, #0
 801193a:	48c5      	ldr	r0, [pc, #788]	; (8011c50 <LoRaMacInitialization+0x388>)
 801193c:	f007 fae6 	bl	8018f0c <memset1>
    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 8011940:	4ac2      	ldr	r2, [pc, #776]	; (8011c4c <LoRaMacInitialization+0x384>)
 8011942:	7bfb      	ldrb	r3, [r7, #15]
 8011944:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8011948:	4bc0      	ldr	r3, [pc, #768]	; (8011c4c <LoRaMacInitialization+0x384>)
 801194a:	2200      	movs	r2, #0
 801194c:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 8011950:	4bbe      	ldr	r3, [pc, #760]	; (8011c4c <LoRaMacInitialization+0x384>)
 8011952:	2200      	movs	r2, #0
 8011954:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8011958:	4bbc      	ldr	r3, [pc, #752]	; (8011c4c <LoRaMacInitialization+0x384>)
 801195a:	4abe      	ldr	r2, [pc, #760]	; (8011c54 <LoRaMacInitialization+0x38c>)
 801195c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8011960:	2300      	movs	r3, #0
 8011962:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8011966:	4bbc      	ldr	r3, [pc, #752]	; (8011c58 <LoRaMacInitialization+0x390>)
 8011968:	61fb      	str	r3, [r7, #28]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 801196a:	4bbc      	ldr	r3, [pc, #752]	; (8011c5c <LoRaMacInitialization+0x394>)
 801196c:	623b      	str	r3, [r7, #32]
    params.Bands = &RegionBands;
 801196e:	4bbc      	ldr	r3, [pc, #752]	; (8011c60 <LoRaMacInitialization+0x398>)
 8011970:	627b      	str	r3, [r7, #36]	; 0x24
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8011972:	4bb6      	ldr	r3, [pc, #728]	; (8011c4c <LoRaMacInitialization+0x384>)
 8011974:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011978:	f107 021c 	add.w	r2, r7, #28
 801197c:	4611      	mov	r1, r2
 801197e:	4618      	mov	r0, r3
 8011980:	f003 fcbf 	bl	8015302 <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8011984:	230f      	movs	r3, #15
 8011986:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801198a:	4bb0      	ldr	r3, [pc, #704]	; (8011c4c <LoRaMacInitialization+0x384>)
 801198c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011990:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011994:	4611      	mov	r1, r2
 8011996:	4618      	mov	r0, r3
 8011998:	f003 fc7c 	bl	8015294 <RegionGetPhyParam>
 801199c:	4603      	mov	r3, r0
 801199e:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 80119a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	bf14      	ite	ne
 80119a6:	2301      	movne	r3, #1
 80119a8:	2300      	moveq	r3, #0
 80119aa:	b2da      	uxtb	r2, r3
 80119ac:	4ba7      	ldr	r3, [pc, #668]	; (8011c4c <LoRaMacInitialization+0x384>)
 80119ae:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 80119b2:	230a      	movs	r3, #10
 80119b4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80119b8:	4ba4      	ldr	r3, [pc, #656]	; (8011c4c <LoRaMacInitialization+0x384>)
 80119ba:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80119be:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80119c2:	4611      	mov	r1, r2
 80119c4:	4618      	mov	r0, r3
 80119c6:	f003 fc65 	bl	8015294 <RegionGetPhyParam>
 80119ca:	4603      	mov	r3, r0
 80119cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 80119ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119d0:	b25a      	sxtb	r2, r3
 80119d2:	4b9e      	ldr	r3, [pc, #632]	; (8011c4c <LoRaMacInitialization+0x384>)
 80119d4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 80119d8:	2306      	movs	r3, #6
 80119da:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80119de:	4b9b      	ldr	r3, [pc, #620]	; (8011c4c <LoRaMacInitialization+0x384>)
 80119e0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80119e4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80119e8:	4611      	mov	r1, r2
 80119ea:	4618      	mov	r0, r3
 80119ec:	f003 fc52 	bl	8015294 <RegionGetPhyParam>
 80119f0:	4603      	mov	r3, r0
 80119f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 80119f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119f6:	b25a      	sxtb	r2, r3
 80119f8:	4b94      	ldr	r3, [pc, #592]	; (8011c4c <LoRaMacInitialization+0x384>)
 80119fa:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 80119fe:	2310      	movs	r3, #16
 8011a00:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011a04:	4b91      	ldr	r3, [pc, #580]	; (8011c4c <LoRaMacInitialization+0x384>)
 8011a06:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011a0a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011a0e:	4611      	mov	r1, r2
 8011a10:	4618      	mov	r0, r3
 8011a12:	f003 fc3f 	bl	8015294 <RegionGetPhyParam>
 8011a16:	4603      	mov	r3, r0
 8011a18:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8011a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a1c:	4a8b      	ldr	r2, [pc, #556]	; (8011c4c <LoRaMacInitialization+0x384>)
 8011a1e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8011a22:	2311      	movs	r3, #17
 8011a24:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011a28:	4b88      	ldr	r3, [pc, #544]	; (8011c4c <LoRaMacInitialization+0x384>)
 8011a2a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011a2e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011a32:	4611      	mov	r1, r2
 8011a34:	4618      	mov	r0, r3
 8011a36:	f003 fc2d 	bl	8015294 <RegionGetPhyParam>
 8011a3a:	4603      	mov	r3, r0
 8011a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8011a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a40:	4a82      	ldr	r2, [pc, #520]	; (8011c4c <LoRaMacInitialization+0x384>)
 8011a42:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8011a46:	2312      	movs	r3, #18
 8011a48:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011a4c:	4b7f      	ldr	r3, [pc, #508]	; (8011c4c <LoRaMacInitialization+0x384>)
 8011a4e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011a52:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011a56:	4611      	mov	r1, r2
 8011a58:	4618      	mov	r0, r3
 8011a5a:	f003 fc1b 	bl	8015294 <RegionGetPhyParam>
 8011a5e:	4603      	mov	r3, r0
 8011a60:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8011a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a64:	4a79      	ldr	r2, [pc, #484]	; (8011c4c <LoRaMacInitialization+0x384>)
 8011a66:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8011a6a:	2313      	movs	r3, #19
 8011a6c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011a70:	4b76      	ldr	r3, [pc, #472]	; (8011c4c <LoRaMacInitialization+0x384>)
 8011a72:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011a76:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011a7a:	4611      	mov	r1, r2
 8011a7c:	4618      	mov	r0, r3
 8011a7e:	f003 fc09 	bl	8015294 <RegionGetPhyParam>
 8011a82:	4603      	mov	r3, r0
 8011a84:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8011a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a88:	4a70      	ldr	r2, [pc, #448]	; (8011c4c <LoRaMacInitialization+0x384>)
 8011a8a:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8011a8e:	2314      	movs	r3, #20
 8011a90:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011a94:	4b6d      	ldr	r3, [pc, #436]	; (8011c4c <LoRaMacInitialization+0x384>)
 8011a96:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011a9a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011a9e:	4611      	mov	r1, r2
 8011aa0:	4618      	mov	r0, r3
 8011aa2:	f003 fbf7 	bl	8015294 <RegionGetPhyParam>
 8011aa6:	4603      	mov	r3, r0
 8011aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8011aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aac:	4a67      	ldr	r2, [pc, #412]	; (8011c4c <LoRaMacInitialization+0x384>)
 8011aae:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8011ab2:	2316      	movs	r3, #22
 8011ab4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011ab8:	4b64      	ldr	r3, [pc, #400]	; (8011c4c <LoRaMacInitialization+0x384>)
 8011aba:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011abe:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011ac2:	4611      	mov	r1, r2
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	f003 fbe5 	bl	8015294 <RegionGetPhyParam>
 8011aca:	4603      	mov	r3, r0
 8011acc:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8011ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ad0:	b2da      	uxtb	r2, r3
 8011ad2:	4b5e      	ldr	r3, [pc, #376]	; (8011c4c <LoRaMacInitialization+0x384>)
 8011ad4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8011ad8:	2317      	movs	r3, #23
 8011ada:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011ade:	4b5b      	ldr	r3, [pc, #364]	; (8011c4c <LoRaMacInitialization+0x384>)
 8011ae0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011ae4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011ae8:	4611      	mov	r1, r2
 8011aea:	4618      	mov	r0, r3
 8011aec:	f003 fbd2 	bl	8015294 <RegionGetPhyParam>
 8011af0:	4603      	mov	r3, r0
 8011af2:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8011af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011af6:	4a55      	ldr	r2, [pc, #340]	; (8011c4c <LoRaMacInitialization+0x384>)
 8011af8:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8011afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011afe:	4a53      	ldr	r2, [pc, #332]	; (8011c4c <LoRaMacInitialization+0x384>)
 8011b00:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8011b04:	2318      	movs	r3, #24
 8011b06:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011b0a:	4b50      	ldr	r3, [pc, #320]	; (8011c4c <LoRaMacInitialization+0x384>)
 8011b0c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011b10:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011b14:	4611      	mov	r1, r2
 8011b16:	4618      	mov	r0, r3
 8011b18:	f003 fbbc 	bl	8015294 <RegionGetPhyParam>
 8011b1c:	4603      	mov	r3, r0
 8011b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8011b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b22:	b2da      	uxtb	r2, r3
 8011b24:	4b49      	ldr	r3, [pc, #292]	; (8011c4c <LoRaMacInitialization+0x384>)
 8011b26:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8011b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b2c:	b2da      	uxtb	r2, r3
 8011b2e:	4b47      	ldr	r3, [pc, #284]	; (8011c4c <LoRaMacInitialization+0x384>)
 8011b30:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8011b34:	231d      	movs	r3, #29
 8011b36:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011b3a:	4b44      	ldr	r3, [pc, #272]	; (8011c4c <LoRaMacInitialization+0x384>)
 8011b3c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011b40:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011b44:	4611      	mov	r1, r2
 8011b46:	4618      	mov	r0, r3
 8011b48:	f003 fba4 	bl	8015294 <RegionGetPhyParam>
 8011b4c:	4603      	mov	r3, r0
 8011b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8011b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b52:	b2da      	uxtb	r2, r3
 8011b54:	4b3d      	ldr	r3, [pc, #244]	; (8011c4c <LoRaMacInitialization+0x384>)
 8011b56:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8011b5a:	231e      	movs	r3, #30
 8011b5c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011b60:	4b3a      	ldr	r3, [pc, #232]	; (8011c4c <LoRaMacInitialization+0x384>)
 8011b62:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011b66:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011b6a:	4611      	mov	r1, r2
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	f003 fb91 	bl	8015294 <RegionGetPhyParam>
 8011b72:	4603      	mov	r3, r0
 8011b74:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8011b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b78:	b2da      	uxtb	r2, r3
 8011b7a:	4b34      	ldr	r3, [pc, #208]	; (8011c4c <LoRaMacInitialization+0x384>)
 8011b7c:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8011b80:	231f      	movs	r3, #31
 8011b82:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011b86:	4b31      	ldr	r3, [pc, #196]	; (8011c4c <LoRaMacInitialization+0x384>)
 8011b88:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011b8c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011b90:	4611      	mov	r1, r2
 8011b92:	4618      	mov	r0, r3
 8011b94:	f003 fb7e 	bl	8015294 <RegionGetPhyParam>
 8011b98:	4603      	mov	r3, r0
 8011b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8011b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b9e:	4a2b      	ldr	r2, [pc, #172]	; (8011c4c <LoRaMacInitialization+0x384>)
 8011ba0:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8011ba4:	2320      	movs	r3, #32
 8011ba6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011baa:	4b28      	ldr	r3, [pc, #160]	; (8011c4c <LoRaMacInitialization+0x384>)
 8011bac:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011bb0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011bb4:	4611      	mov	r1, r2
 8011bb6:	4618      	mov	r0, r3
 8011bb8:	f003 fb6c 	bl	8015294 <RegionGetPhyParam>
 8011bbc:	4603      	mov	r3, r0
 8011bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8011bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bc2:	4a22      	ldr	r2, [pc, #136]	; (8011c4c <LoRaMacInitialization+0x384>)
 8011bc4:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8011bc8:	230b      	movs	r3, #11
 8011bca:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011bce:	4b1f      	ldr	r3, [pc, #124]	; (8011c4c <LoRaMacInitialization+0x384>)
 8011bd0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011bd4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011bd8:	4611      	mov	r1, r2
 8011bda:	4618      	mov	r0, r3
 8011bdc:	f003 fb5a 	bl	8015294 <RegionGetPhyParam>
 8011be0:	4603      	mov	r3, r0
 8011be2:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 8011be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011be6:	b29a      	uxth	r2, r3
 8011be8:	4b18      	ldr	r3, [pc, #96]	; (8011c4c <LoRaMacInitialization+0x384>)
 8011bea:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8011bee:	230c      	movs	r3, #12
 8011bf0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011bf4:	4b15      	ldr	r3, [pc, #84]	; (8011c4c <LoRaMacInitialization+0x384>)
 8011bf6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011bfa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011bfe:	4611      	mov	r1, r2
 8011c00:	4618      	mov	r0, r3
 8011c02:	f003 fb47 	bl	8015294 <RegionGetPhyParam>
 8011c06:	4603      	mov	r3, r0
 8011c08:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 8011c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c0c:	b29a      	uxth	r2, r3
 8011c0e:	4b0f      	ldr	r3, [pc, #60]	; (8011c4c <LoRaMacInitialization+0x384>)
 8011c10:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8011c14:	4b0d      	ldr	r3, [pc, #52]	; (8011c4c <LoRaMacInitialization+0x384>)
 8011c16:	2201      	movs	r2, #1
 8011c18:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8011c1c:	4b0b      	ldr	r3, [pc, #44]	; (8011c4c <LoRaMacInitialization+0x384>)
 8011c1e:	220a      	movs	r2, #10
 8011c20:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8011c24:	4b09      	ldr	r3, [pc, #36]	; (8011c4c <LoRaMacInitialization+0x384>)
 8011c26:	2206      	movs	r2, #6
 8011c28:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8011c2c:	4b07      	ldr	r3, [pc, #28]	; (8011c4c <LoRaMacInitialization+0x384>)
 8011c2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011c32:	4a06      	ldr	r2, [pc, #24]	; (8011c4c <LoRaMacInitialization+0x384>)
 8011c34:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8011c36:	4b05      	ldr	r3, [pc, #20]	; (8011c4c <LoRaMacInitialization+0x384>)
 8011c38:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 8011c3c:	4b03      	ldr	r3, [pc, #12]	; (8011c4c <LoRaMacInitialization+0x384>)
 8011c3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8011c42:	4b02      	ldr	r3, [pc, #8]	; (8011c4c <LoRaMacInitialization+0x384>)
 8011c44:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8011c48:	e00c      	b.n	8011c64 <LoRaMacInitialization+0x39c>
 8011c4a:	bf00      	nop
 8011c4c:	20000c5c 	.word	0x20000c5c
 8011c50:	20000740 	.word	0x20000740
 8011c54:	01000400 	.word	0x01000400
 8011c58:	20000e80 	.word	0x20000e80
 8011c5c:	20000e94 	.word	0x20000e94
 8011c60:	200017f4 	.word	0x200017f4
 8011c64:	4a5f      	ldr	r2, [pc, #380]	; (8011de4 <LoRaMacInitialization+0x51c>)
 8011c66:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8011c68:	4b5e      	ldr	r3, [pc, #376]	; (8011de4 <LoRaMacInitialization+0x51c>)
 8011c6a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8011c6e:	4a5d      	ldr	r2, [pc, #372]	; (8011de4 <LoRaMacInitialization+0x51c>)
 8011c70:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8011c72:	4b5c      	ldr	r3, [pc, #368]	; (8011de4 <LoRaMacInitialization+0x51c>)
 8011c74:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8011c78:	4a5a      	ldr	r2, [pc, #360]	; (8011de4 <LoRaMacInitialization+0x51c>)
 8011c7a:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8011c7c:	4b59      	ldr	r3, [pc, #356]	; (8011de4 <LoRaMacInitialization+0x51c>)
 8011c7e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8011c82:	4a58      	ldr	r2, [pc, #352]	; (8011de4 <LoRaMacInitialization+0x51c>)
 8011c84:	6613      	str	r3, [r2, #96]	; 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8011c86:	4b57      	ldr	r3, [pc, #348]	; (8011de4 <LoRaMacInitialization+0x51c>)
 8011c88:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8011c8c:	4a55      	ldr	r2, [pc, #340]	; (8011de4 <LoRaMacInitialization+0x51c>)
 8011c8e:	6653      	str	r3, [r2, #100]	; 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8011c90:	4b54      	ldr	r3, [pc, #336]	; (8011de4 <LoRaMacInitialization+0x51c>)
 8011c92:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
 8011c96:	4b53      	ldr	r3, [pc, #332]	; (8011de4 <LoRaMacInitialization+0x51c>)
 8011c98:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 8011c9c:	4b51      	ldr	r3, [pc, #324]	; (8011de4 <LoRaMacInitialization+0x51c>)
 8011c9e:	2201      	movs	r2, #1
 8011ca0:	f883 211f 	strb.w	r2, [r3, #287]	; 0x11f
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 8011ca4:	4a50      	ldr	r2, [pc, #320]	; (8011de8 <LoRaMacInitialization+0x520>)
 8011ca6:	693b      	ldr	r3, [r7, #16]
 8011ca8:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( false );
 8011cac:	2000      	movs	r0, #0
 8011cae:	f7ff f869 	bl	8010d84 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8011cb2:	4b4c      	ldr	r3, [pc, #304]	; (8011de4 <LoRaMacInitialization+0x51c>)
 8011cb4:	2201      	movs	r2, #1
 8011cb6:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119

    MacCtx.MacPrimitives = primitives;
 8011cba:	4a4b      	ldr	r2, [pc, #300]	; (8011de8 <LoRaMacInitialization+0x520>)
 8011cbc:	697b      	ldr	r3, [r7, #20]
 8011cbe:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 8011cc2:	4b49      	ldr	r3, [pc, #292]	; (8011de8 <LoRaMacInitialization+0x520>)
 8011cc4:	2200      	movs	r2, #0
 8011cc6:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
    MacCtx.MacState = LORAMAC_STOPPED;
 8011cca:	4b47      	ldr	r3, [pc, #284]	; (8011de8 <LoRaMacInitialization+0x520>)
 8011ccc:	2201      	movs	r2, #1
 8011cce:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8011cd2:	4b44      	ldr	r3, [pc, #272]	; (8011de4 <LoRaMacInitialization+0x51c>)
 8011cd4:	2200      	movs	r2, #0
 8011cd6:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8011cd8:	4b42      	ldr	r3, [pc, #264]	; (8011de4 <LoRaMacInitialization+0x51c>)
 8011cda:	2200      	movs	r2, #0
 8011cdc:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8011cde:	2300      	movs	r3, #0
 8011ce0:	9300      	str	r3, [sp, #0]
 8011ce2:	4b42      	ldr	r3, [pc, #264]	; (8011dec <LoRaMacInitialization+0x524>)
 8011ce4:	2200      	movs	r2, #0
 8011ce6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8011cea:	4841      	ldr	r0, [pc, #260]	; (8011df0 <LoRaMacInitialization+0x528>)
 8011cec:	f00b f9ca 	bl	801d084 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8011cf0:	2300      	movs	r3, #0
 8011cf2:	9300      	str	r3, [sp, #0]
 8011cf4:	4b3f      	ldr	r3, [pc, #252]	; (8011df4 <LoRaMacInitialization+0x52c>)
 8011cf6:	2200      	movs	r2, #0
 8011cf8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8011cfc:	483e      	ldr	r0, [pc, #248]	; (8011df8 <LoRaMacInitialization+0x530>)
 8011cfe:	f00b f9c1 	bl	801d084 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8011d02:	2300      	movs	r3, #0
 8011d04:	9300      	str	r3, [sp, #0]
 8011d06:	4b3d      	ldr	r3, [pc, #244]	; (8011dfc <LoRaMacInitialization+0x534>)
 8011d08:	2200      	movs	r2, #0
 8011d0a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8011d0e:	483c      	ldr	r0, [pc, #240]	; (8011e00 <LoRaMacInitialization+0x538>)
 8011d10:	f00b f9b8 	bl	801d084 <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 8011d14:	2300      	movs	r3, #0
 8011d16:	9300      	str	r3, [sp, #0]
 8011d18:	4b3a      	ldr	r3, [pc, #232]	; (8011e04 <LoRaMacInitialization+0x53c>)
 8011d1a:	2200      	movs	r2, #0
 8011d1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8011d20:	4839      	ldr	r0, [pc, #228]	; (8011e08 <LoRaMacInitialization+0x540>)
 8011d22:	f00b f9af 	bl	801d084 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8011d26:	4c2f      	ldr	r4, [pc, #188]	; (8011de4 <LoRaMacInitialization+0x51c>)
 8011d28:	463b      	mov	r3, r7
 8011d2a:	4618      	mov	r0, r3
 8011d2c:	f00a fd1e 	bl	801c76c <SysTimeGetMcuTime>
 8011d30:	f504 7392 	add.w	r3, r4, #292	; 0x124
 8011d34:	463a      	mov	r2, r7
 8011d36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011d3a:	e883 0003 	stmia.w	r3, {r0, r1}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 8011d3e:	4b33      	ldr	r3, [pc, #204]	; (8011e0c <LoRaMacInitialization+0x544>)
 8011d40:	2200      	movs	r2, #0
 8011d42:	601a      	str	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8011d44:	4b28      	ldr	r3, [pc, #160]	; (8011de8 <LoRaMacInitialization+0x520>)
 8011d46:	4a32      	ldr	r2, [pc, #200]	; (8011e10 <LoRaMacInitialization+0x548>)
 8011d48:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8011d4c:	4b26      	ldr	r3, [pc, #152]	; (8011de8 <LoRaMacInitialization+0x520>)
 8011d4e:	4a31      	ldr	r2, [pc, #196]	; (8011e14 <LoRaMacInitialization+0x54c>)
 8011d50:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8011d54:	4b24      	ldr	r3, [pc, #144]	; (8011de8 <LoRaMacInitialization+0x520>)
 8011d56:	4a30      	ldr	r2, [pc, #192]	; (8011e18 <LoRaMacInitialization+0x550>)
 8011d58:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8011d5c:	4b22      	ldr	r3, [pc, #136]	; (8011de8 <LoRaMacInitialization+0x520>)
 8011d5e:	4a2f      	ldr	r2, [pc, #188]	; (8011e1c <LoRaMacInitialization+0x554>)
 8011d60:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8011d64:	4b20      	ldr	r3, [pc, #128]	; (8011de8 <LoRaMacInitialization+0x520>)
 8011d66:	4a2e      	ldr	r2, [pc, #184]	; (8011e20 <LoRaMacInitialization+0x558>)
 8011d68:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8011d6c:	4b2d      	ldr	r3, [pc, #180]	; (8011e24 <LoRaMacInitialization+0x55c>)
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	482d      	ldr	r0, [pc, #180]	; (8011e28 <LoRaMacInitialization+0x560>)
 8011d72:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 8011d74:	482d      	ldr	r0, [pc, #180]	; (8011e2c <LoRaMacInitialization+0x564>)
 8011d76:	f7fa f9f9 	bl	800c16c <SecureElementInit>
 8011d7a:	4603      	mov	r3, r0
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d001      	beq.n	8011d84 <LoRaMacInitialization+0x4bc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8011d80:	2311      	movs	r3, #17
 8011d82:	e02b      	b.n	8011ddc <LoRaMacInitialization+0x514>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8011d84:	4817      	ldr	r0, [pc, #92]	; (8011de4 <LoRaMacInitialization+0x51c>)
 8011d86:	f002 fbc1 	bl	801450c <LoRaMacCryptoInit>
 8011d8a:	4603      	mov	r3, r0
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d001      	beq.n	8011d94 <LoRaMacInitialization+0x4cc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8011d90:	2311      	movs	r3, #17
 8011d92:	e023      	b.n	8011ddc <LoRaMacInitialization+0x514>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8011d94:	f001 fcbc 	bl	8013710 <LoRaMacCommandsInit>
 8011d98:	4603      	mov	r3, r0
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d001      	beq.n	8011da2 <LoRaMacInitialization+0x4da>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011d9e:	2313      	movs	r3, #19
 8011da0:	e01c      	b.n	8011ddc <LoRaMacInitialization+0x514>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8011da2:	4823      	ldr	r0, [pc, #140]	; (8011e30 <LoRaMacInitialization+0x568>)
 8011da4:	f002 fc52 	bl	801464c <LoRaMacCryptoSetMulticastReference>
 8011da8:	4603      	mov	r3, r0
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d001      	beq.n	8011db2 <LoRaMacInitialization+0x4ea>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8011dae:	2311      	movs	r3, #17
 8011db0:	e014      	b.n	8011ddc <LoRaMacInitialization+0x514>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8011db2:	4b1c      	ldr	r3, [pc, #112]	; (8011e24 <LoRaMacInitialization+0x55c>)
 8011db4:	695b      	ldr	r3, [r3, #20]
 8011db6:	4798      	blx	r3
 8011db8:	4603      	mov	r3, r0
 8011dba:	4618      	mov	r0, r3
 8011dbc:	f007 f846 	bl	8018e4c <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8011dc0:	4b18      	ldr	r3, [pc, #96]	; (8011e24 <LoRaMacInitialization+0x55c>)
 8011dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011dc4:	4a07      	ldr	r2, [pc, #28]	; (8011de4 <LoRaMacInitialization+0x51c>)
 8011dc6:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 8011dca:	4610      	mov	r0, r2
 8011dcc:	4798      	blx	r3
    Radio.Sleep( );
 8011dce:	4b15      	ldr	r3, [pc, #84]	; (8011e24 <LoRaMacInitialization+0x55c>)
 8011dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011dd2:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8011dd4:	2001      	movs	r0, #1
 8011dd6:	f7fd fa7d 	bl	800f2d4 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8011dda:	2300      	movs	r3, #0
}
 8011ddc:	4618      	mov	r0, r3
 8011dde:	373c      	adds	r7, #60	; 0x3c
 8011de0:	46bd      	mov	sp, r7
 8011de2:	bd90      	pop	{r4, r7, pc}
 8011de4:	20000c5c 	.word	0x20000c5c
 8011de8:	20000740 	.word	0x20000740
 8011dec:	0800f861 	.word	0x0800f861
 8011df0:	20000aa8 	.word	0x20000aa8
 8011df4:	0800f8f1 	.word	0x0800f8f1
 8011df8:	20000ac0 	.word	0x20000ac0
 8011dfc:	0800f969 	.word	0x0800f969
 8011e00:	20000ad8 	.word	0x20000ad8
 8011e04:	0800f9e9 	.word	0x0800f9e9
 8011e08:	20000b40 	.word	0x20000b40
 8011e0c:	20001884 	.word	0x20001884
 8011e10:	0800e311 	.word	0x0800e311
 8011e14:	0800e36d 	.word	0x0800e36d
 8011e18:	0800e40d 	.word	0x0800e40d
 8011e1c:	0800e3e1 	.word	0x0800e3e1
 8011e20:	0800e429 	.word	0x0800e429
 8011e24:	0801ea64 	.word	0x0801ea64
 8011e28:	20000a8c 	.word	0x20000a8c
 8011e2c:	20000da8 	.word	0x20000da8
 8011e30:	20000d44 	.word	0x20000d44

08011e34 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8011e34:	b580      	push	{r7, lr}
 8011e36:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8011e38:	4b04      	ldr	r3, [pc, #16]	; (8011e4c <LoRaMacStart+0x18>)
 8011e3a:	2200      	movs	r2, #0
 8011e3c:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    UpdateRxSlotIdleState();
 8011e40:	f7fc fb08 	bl	800e454 <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
 8011e44:	2300      	movs	r3, #0
}
 8011e46:	4618      	mov	r0, r3
 8011e48:	bd80      	pop	{r7, pc}
 8011e4a:	bf00      	nop
 8011e4c:	20000740 	.word	0x20000740

08011e50 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 8011e50:	b580      	push	{r7, lr}
 8011e52:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 8011e54:	f7fd fa06 	bl	800f264 <LoRaMacIsBusy>
 8011e58:	4603      	mov	r3, r0
 8011e5a:	f083 0301 	eor.w	r3, r3, #1
 8011e5e:	b2db      	uxtb	r3, r3
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d00d      	beq.n	8011e80 <LoRaMacStop+0x30>
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8011e64:	4b0b      	ldr	r3, [pc, #44]	; (8011e94 <LoRaMacStop+0x44>)
 8011e66:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011e6a:	2b02      	cmp	r3, #2
 8011e6c:	d102      	bne.n	8011e74 <LoRaMacStop+0x24>
        {
            Radio.Sleep( );
 8011e6e:	4b0a      	ldr	r3, [pc, #40]	; (8011e98 <LoRaMacStop+0x48>)
 8011e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e72:	4798      	blx	r3
        }
        MacCtx.MacState = LORAMAC_STOPPED;
 8011e74:	4b09      	ldr	r3, [pc, #36]	; (8011e9c <LoRaMacStop+0x4c>)
 8011e76:	2201      	movs	r2, #1
 8011e78:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 8011e7c:	2300      	movs	r3, #0
 8011e7e:	e007      	b.n	8011e90 <LoRaMacStop+0x40>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 8011e80:	4b06      	ldr	r3, [pc, #24]	; (8011e9c <LoRaMacStop+0x4c>)
 8011e82:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011e86:	2b01      	cmp	r3, #1
 8011e88:	d101      	bne.n	8011e8e <LoRaMacStop+0x3e>
    {
        return LORAMAC_STATUS_OK;
 8011e8a:	2300      	movs	r3, #0
 8011e8c:	e000      	b.n	8011e90 <LoRaMacStop+0x40>
    }
    return LORAMAC_STATUS_BUSY;
 8011e8e:	2301      	movs	r3, #1
}
 8011e90:	4618      	mov	r0, r3
 8011e92:	bd80      	pop	{r7, pc}
 8011e94:	20000c5c 	.word	0x20000c5c
 8011e98:	0801ea64 	.word	0x0801ea64
 8011e9c:	20000740 	.word	0x20000740

08011ea0 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 8011ea0:	b580      	push	{r7, lr}
 8011ea2:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 8011ea4:	4812      	ldr	r0, [pc, #72]	; (8011ef0 <LoRaMacHalt+0x50>)
 8011ea6:	f00b f991 	bl	801d1cc <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 8011eaa:	4812      	ldr	r0, [pc, #72]	; (8011ef4 <LoRaMacHalt+0x54>)
 8011eac:	f00b f98e 	bl	801d1cc <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 8011eb0:	4811      	ldr	r0, [pc, #68]	; (8011ef8 <LoRaMacHalt+0x58>)
 8011eb2:	f00b f98b 	bl	801d1cc <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 8011eb6:	4811      	ldr	r0, [pc, #68]	; (8011efc <LoRaMacHalt+0x5c>)
 8011eb8:	f00b f988 	bl	801d1cc <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 8011ebc:	f001 fa8c 	bl	80133d8 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 8011ec0:	4b0f      	ldr	r3, [pc, #60]	; (8011f00 <LoRaMacHalt+0x60>)
 8011ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ec4:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 8011ec6:	4b0f      	ldr	r3, [pc, #60]	; (8011f04 <LoRaMacHalt+0x64>)
 8011ec8:	2200      	movs	r2, #0
 8011eca:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacHandleNvm( &Nvm );
 8011ece:	480e      	ldr	r0, [pc, #56]	; (8011f08 <LoRaMacHalt+0x68>)
 8011ed0:	f7fd fba2 	bl	800f618 <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 8011ed4:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8011ed8:	490b      	ldr	r1, [pc, #44]	; (8011f08 <LoRaMacHalt+0x68>)
 8011eda:	480c      	ldr	r0, [pc, #48]	; (8011f0c <LoRaMacHalt+0x6c>)
 8011edc:	f006 ffdb 	bl	8018e96 <memcpy1>
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 8011ee0:	4b08      	ldr	r3, [pc, #32]	; (8011f04 <LoRaMacHalt+0x64>)
 8011ee2:	2201      	movs	r2, #1
 8011ee4:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8011ee8:	2300      	movs	r3, #0
}
 8011eea:	4618      	mov	r0, r3
 8011eec:	bd80      	pop	{r7, pc}
 8011eee:	bf00      	nop
 8011ef0:	20000aa8 	.word	0x20000aa8
 8011ef4:	20000ac0 	.word	0x20000ac0
 8011ef8:	20000ad8 	.word	0x20000ad8
 8011efc:	20000b40 	.word	0x20000b40
 8011f00:	0801ea64 	.word	0x0801ea64
 8011f04:	20000740 	.word	0x20000740
 8011f08:	20000c5c 	.word	0x20000c5c
 8011f0c:	20001228 	.word	0x20001228

08011f10 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8011f10:	b590      	push	{r4, r7, lr}
 8011f12:	b08d      	sub	sp, #52	; 0x34
 8011f14:	af02      	add	r7, sp, #8
 8011f16:	4603      	mov	r3, r0
 8011f18:	6039      	str	r1, [r7, #0]
 8011f1a:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8011f1c:	4b42      	ldr	r3, [pc, #264]	; (8012028 <LoRaMacQueryTxPossible+0x118>)
 8011f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f20:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8011f22:	4b41      	ldr	r3, [pc, #260]	; (8012028 <LoRaMacQueryTxPossible+0x118>)
 8011f24:	f993 30dd 	ldrsb.w	r3, [r3, #221]	; 0xdd
 8011f28:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8011f2a:	4b3f      	ldr	r3, [pc, #252]	; (8012028 <LoRaMacQueryTxPossible+0x118>)
 8011f2c:	f993 30dc 	ldrsb.w	r3, [r3, #220]	; 0xdc
 8011f30:	73bb      	strb	r3, [r7, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 8011f32:	4b3e      	ldr	r3, [pc, #248]	; (801202c <LoRaMacQueryTxPossible+0x11c>)
 8011f34:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8011f38:	737b      	strb	r3, [r7, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 8011f3a:	2300      	movs	r3, #0
 8011f3c:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8011f3e:	683b      	ldr	r3, [r7, #0]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d101      	bne.n	8011f48 <LoRaMacQueryTxPossible+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011f44:	2303      	movs	r3, #3
 8011f46:	e06b      	b.n	8012020 <LoRaMacQueryTxPossible+0x110>

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 8011f48:	2300      	movs	r3, #0
 8011f4a:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8011f4c:	4b36      	ldr	r3, [pc, #216]	; (8012028 <LoRaMacQueryTxPossible+0x118>)
 8011f4e:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8011f52:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8011f54:	4b34      	ldr	r3, [pc, #208]	; (8012028 <LoRaMacQueryTxPossible+0x118>)
 8011f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f58:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8011f5a:	4b33      	ldr	r3, [pc, #204]	; (8012028 <LoRaMacQueryTxPossible+0x118>)
 8011f5c:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8011f60:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8011f62:	4b31      	ldr	r3, [pc, #196]	; (8012028 <LoRaMacQueryTxPossible+0x118>)
 8011f64:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8011f68:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011f6a:	4b2f      	ldr	r3, [pc, #188]	; (8012028 <LoRaMacQueryTxPossible+0x118>)
 8011f6c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011f70:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011f74:	4b2c      	ldr	r3, [pc, #176]	; (8012028 <LoRaMacQueryTxPossible+0x118>)
 8011f76:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8011f7a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 8011f7e:	4b2b      	ldr	r3, [pc, #172]	; (801202c <LoRaMacQueryTxPossible+0x11c>)
 8011f80:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8011f84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011f88:	4b27      	ldr	r3, [pc, #156]	; (8012028 <LoRaMacQueryTxPossible+0x118>)
 8011f8a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8011f8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 8011f92:	4b25      	ldr	r3, [pc, #148]	; (8012028 <LoRaMacQueryTxPossible+0x118>)
 8011f94:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011f98:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 8011f9c:	f107 040d 	add.w	r4, r7, #13
 8011fa0:	f107 020e 	add.w	r2, r7, #14
 8011fa4:	f107 010f 	add.w	r1, r7, #15
 8011fa8:	f107 0014 	add.w	r0, r7, #20
 8011fac:	f107 0310 	add.w	r3, r7, #16
 8011fb0:	9300      	str	r3, [sp, #0]
 8011fb2:	4623      	mov	r3, r4
 8011fb4:	f001 f8da 	bl	801316c <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8011fb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011fbc:	4618      	mov	r0, r3
 8011fbe:	f7fd fe59 	bl	800fc74 <GetMaxAppPayloadWithoutFOptsLength>
 8011fc2:	4603      	mov	r3, r0
 8011fc4:	461a      	mov	r2, r3
 8011fc6:	683b      	ldr	r3, [r7, #0]
 8011fc8:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8011fca:	f107 0308 	add.w	r3, r7, #8
 8011fce:	4618      	mov	r0, r3
 8011fd0:	f001 fca4 	bl	801391c <LoRaMacCommandsGetSizeSerializedCmds>
 8011fd4:	4603      	mov	r3, r0
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d001      	beq.n	8011fde <LoRaMacQueryTxPossible+0xce>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011fda:	2313      	movs	r3, #19
 8011fdc:	e020      	b.n	8012020 <LoRaMacQueryTxPossible+0x110>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8011fde:	68bb      	ldr	r3, [r7, #8]
 8011fe0:	2b0f      	cmp	r3, #15
 8011fe2:	d819      	bhi.n	8012018 <LoRaMacQueryTxPossible+0x108>
 8011fe4:	683b      	ldr	r3, [r7, #0]
 8011fe6:	785b      	ldrb	r3, [r3, #1]
 8011fe8:	461a      	mov	r2, r3
 8011fea:	68bb      	ldr	r3, [r7, #8]
 8011fec:	429a      	cmp	r2, r3
 8011fee:	d313      	bcc.n	8012018 <LoRaMacQueryTxPossible+0x108>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8011ff0:	683b      	ldr	r3, [r7, #0]
 8011ff2:	785a      	ldrb	r2, [r3, #1]
 8011ff4:	68bb      	ldr	r3, [r7, #8]
 8011ff6:	b2db      	uxtb	r3, r3
 8011ff8:	1ad3      	subs	r3, r2, r3
 8011ffa:	b2da      	uxtb	r2, r3
 8011ffc:	683b      	ldr	r3, [r7, #0]
 8011ffe:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8012000:	683b      	ldr	r3, [r7, #0]
 8012002:	785b      	ldrb	r3, [r3, #1]
 8012004:	4619      	mov	r1, r3
 8012006:	79fa      	ldrb	r2, [r7, #7]
 8012008:	68bb      	ldr	r3, [r7, #8]
 801200a:	4413      	add	r3, r2
 801200c:	4299      	cmp	r1, r3
 801200e:	d301      	bcc.n	8012014 <LoRaMacQueryTxPossible+0x104>
        {
            return LORAMAC_STATUS_OK;
 8012010:	2300      	movs	r3, #0
 8012012:	e005      	b.n	8012020 <LoRaMacQueryTxPossible+0x110>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8012014:	2308      	movs	r3, #8
 8012016:	e003      	b.n	8012020 <LoRaMacQueryTxPossible+0x110>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8012018:	683b      	ldr	r3, [r7, #0]
 801201a:	2200      	movs	r2, #0
 801201c:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 801201e:	2308      	movs	r3, #8
    }
}
 8012020:	4618      	mov	r0, r3
 8012022:	372c      	adds	r7, #44	; 0x2c
 8012024:	46bd      	mov	sp, r7
 8012026:	bd90      	pop	{r4, r7, pc}
 8012028:	20000c5c 	.word	0x20000c5c
 801202c:	20000740 	.word	0x20000740

08012030 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8012030:	b590      	push	{r4, r7, lr}
 8012032:	b087      	sub	sp, #28
 8012034:	af00      	add	r7, sp, #0
 8012036:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8012038:	2300      	movs	r3, #0
 801203a:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	2b00      	cmp	r3, #0
 8012040:	d101      	bne.n	8012046 <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012042:	2303      	movs	r3, #3
 8012044:	e1c4      	b.n	80123d0 <LoRaMacMibGetRequestConfirm+0x3a0>
    }

    switch( mibGet->Type )
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	781b      	ldrb	r3, [r3, #0]
 801204a:	2b41      	cmp	r3, #65	; 0x41
 801204c:	f200 81b9 	bhi.w	80123c2 <LoRaMacMibGetRequestConfirm+0x392>
 8012050:	a201      	add	r2, pc, #4	; (adr r2, 8012058 <LoRaMacMibGetRequestConfirm+0x28>)
 8012052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012056:	bf00      	nop
 8012058:	08012161 	.word	0x08012161
 801205c:	0801216d 	.word	0x0801216d
 8012060:	08012179 	.word	0x08012179
 8012064:	08012185 	.word	0x08012185
 8012068:	08012191 	.word	0x08012191
 801206c:	0801219d 	.word	0x0801219d
 8012070:	080121a9 	.word	0x080121a9
 8012074:	080123c3 	.word	0x080123c3
 8012078:	080123c3 	.word	0x080123c3
 801207c:	080123c3 	.word	0x080123c3
 8012080:	080123c3 	.word	0x080123c3
 8012084:	080123c3 	.word	0x080123c3
 8012088:	080123c3 	.word	0x080123c3
 801208c:	080123c3 	.word	0x080123c3
 8012090:	080123c3 	.word	0x080123c3
 8012094:	080121bd 	.word	0x080121bd
 8012098:	080121c9 	.word	0x080121c9
 801209c:	080121d5 	.word	0x080121d5
 80120a0:	080121f7 	.word	0x080121f7
 80120a4:	08012209 	.word	0x08012209
 80120a8:	0801221b 	.word	0x0801221b
 80120ac:	0801222d 	.word	0x0801222d
 80120b0:	08012261 	.word	0x08012261
 80120b4:	0801223f 	.word	0x0801223f
 80120b8:	08012283 	.word	0x08012283
 80120bc:	0801228f 	.word	0x0801228f
 80120c0:	08012299 	.word	0x08012299
 80120c4:	080122a3 	.word	0x080122a3
 80120c8:	080122ad 	.word	0x080122ad
 80120cc:	080122b7 	.word	0x080122b7
 80120d0:	080122c1 	.word	0x080122c1
 80120d4:	080122ed 	.word	0x080122ed
 80120d8:	080122f9 	.word	0x080122f9
 80120dc:	08012311 	.word	0x08012311
 80120e0:	08012305 	.word	0x08012305
 80120e4:	0801231d 	.word	0x0801231d
 80120e8:	08012327 	.word	0x08012327
 80120ec:	08012333 	.word	0x08012333
 80120f0:	0801234f 	.word	0x0801234f
 80120f4:	0801233f 	.word	0x0801233f
 80120f8:	08012347 	.word	0x08012347
 80120fc:	080123c3 	.word	0x080123c3
 8012100:	0801235b 	.word	0x0801235b
 8012104:	080123c3 	.word	0x080123c3
 8012108:	080123c3 	.word	0x080123c3
 801210c:	080123c3 	.word	0x080123c3
 8012110:	080123c3 	.word	0x080123c3
 8012114:	080123c3 	.word	0x080123c3
 8012118:	080123c3 	.word	0x080123c3
 801211c:	080123c3 	.word	0x080123c3
 8012120:	080123c3 	.word	0x080123c3
 8012124:	080123c3 	.word	0x080123c3
 8012128:	080123c3 	.word	0x080123c3
 801212c:	080123c3 	.word	0x080123c3
 8012130:	080123c3 	.word	0x080123c3
 8012134:	080123c3 	.word	0x080123c3
 8012138:	080123c3 	.word	0x080123c3
 801213c:	080123c3 	.word	0x080123c3
 8012140:	0801236f 	.word	0x0801236f
 8012144:	0801237b 	.word	0x0801237b
 8012148:	08012387 	.word	0x08012387
 801214c:	08012393 	.word	0x08012393
 8012150:	0801239f 	.word	0x0801239f
 8012154:	080123ab 	.word	0x080123ab
 8012158:	080123b7 	.word	0x080123b7
 801215c:	080123bd 	.word	0x080123bd
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8012160:	4b9d      	ldr	r3, [pc, #628]	; (80123d8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012162:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	711a      	strb	r2, [r3, #4]
            break;
 801216a:	e130      	b.n	80123ce <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 801216c:	4b9a      	ldr	r3, [pc, #616]	; (80123d8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801216e:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	711a      	strb	r2, [r3, #4]
            break;
 8012176:	e12a      	b.n	80123ce <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	685b      	ldr	r3, [r3, #4]
 801217c:	4618      	mov	r0, r3
 801217e:	f7fa fab5 	bl	800c6ec <SecureElementGetDevEui>
            break;
 8012182:	e124      	b.n	80123ce <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	685b      	ldr	r3, [r3, #4]
 8012188:	4618      	mov	r0, r3
 801218a:	f7fa fadf 	bl	800c74c <SecureElementGetJoinEui>
            break;
 801218e:	e11e      	b.n	80123ce <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8012190:	4b91      	ldr	r3, [pc, #580]	; (80123d8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012192:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	711a      	strb	r2, [r3, #4]
            break;
 801219a:	e118      	b.n	80123ce <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 801219c:	4b8e      	ldr	r3, [pc, #568]	; (80123d8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801219e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	605a      	str	r2, [r3, #4]
            break;
 80121a6:	e112      	b.n	80123ce <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 80121a8:	4b8b      	ldr	r3, [pc, #556]	; (80123d8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80121aa:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	3304      	adds	r3, #4
 80121b2:	4619      	mov	r1, r3
 80121b4:	4610      	mov	r0, r2
 80121b6:	f7fa fafb 	bl	800c7b0 <SecureElementGetDevAddr>
            break;
 80121ba:	e108      	b.n	80123ce <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 80121bc:	4b86      	ldr	r3, [pc, #536]	; (80123d8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80121be:	f893 2119 	ldrb.w	r2, [r3, #281]	; 0x119
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	711a      	strb	r2, [r3, #4]
            break;
 80121c6:	e102      	b.n	80123ce <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80121c8:	4b83      	ldr	r3, [pc, #524]	; (80123d8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80121ca:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	711a      	strb	r2, [r3, #4]
            break;
 80121d2:	e0fc      	b.n	80123ce <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 80121d4:	231c      	movs	r3, #28
 80121d6:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80121d8:	4b7f      	ldr	r3, [pc, #508]	; (80123d8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80121da:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80121de:	f107 0210 	add.w	r2, r7, #16
 80121e2:	4611      	mov	r1, r2
 80121e4:	4618      	mov	r0, r3
 80121e6:	f003 f855 	bl	8015294 <RegionGetPhyParam>
 80121ea:	4603      	mov	r3, r0
 80121ec:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 80121ee:	68fa      	ldr	r2, [r7, #12]
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	605a      	str	r2, [r3, #4]
            break;
 80121f4:	e0eb      	b.n	80123ce <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	4a77      	ldr	r2, [pc, #476]	; (80123d8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80121fa:	3304      	adds	r3, #4
 80121fc:	326c      	adds	r2, #108	; 0x6c
 80121fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012202:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8012206:	e0e2      	b.n	80123ce <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	4a73      	ldr	r2, [pc, #460]	; (80123d8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801220c:	3304      	adds	r3, #4
 801220e:	32b4      	adds	r2, #180	; 0xb4
 8012210:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012214:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8012218:	e0d9      	b.n	80123ce <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	4a6e      	ldr	r2, [pc, #440]	; (80123d8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801221e:	3304      	adds	r3, #4
 8012220:	3274      	adds	r2, #116	; 0x74
 8012222:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012226:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801222a:	e0d0      	b.n	80123ce <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	4a6a      	ldr	r2, [pc, #424]	; (80123d8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012230:	3304      	adds	r3, #4
 8012232:	32bc      	adds	r2, #188	; 0xbc
 8012234:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012238:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801223c:	e0c7      	b.n	80123ce <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 801223e:	231a      	movs	r3, #26
 8012240:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012242:	4b65      	ldr	r3, [pc, #404]	; (80123d8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012244:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012248:	f107 0210 	add.w	r2, r7, #16
 801224c:	4611      	mov	r1, r2
 801224e:	4618      	mov	r0, r3
 8012250:	f003 f820 	bl	8015294 <RegionGetPhyParam>
 8012254:	4603      	mov	r3, r0
 8012256:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8012258:	68fa      	ldr	r2, [r7, #12]
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	605a      	str	r2, [r3, #4]
            break;
 801225e:	e0b6      	b.n	80123ce <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8012260:	2319      	movs	r3, #25
 8012262:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012264:	4b5c      	ldr	r3, [pc, #368]	; (80123d8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012266:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801226a:	f107 0210 	add.w	r2, r7, #16
 801226e:	4611      	mov	r1, r2
 8012270:	4618      	mov	r0, r3
 8012272:	f003 f80f 	bl	8015294 <RegionGetPhyParam>
 8012276:	4603      	mov	r3, r0
 8012278:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 801227a:	68fa      	ldr	r2, [r7, #12]
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	605a      	str	r2, [r3, #4]
            break;
 8012280:	e0a5      	b.n	80123ce <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8012282:	4b55      	ldr	r3, [pc, #340]	; (80123d8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012284:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	711a      	strb	r2, [r3, #4]
            break;
 801228c:	e09f      	b.n	80123ce <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 801228e:	4b52      	ldr	r3, [pc, #328]	; (80123d8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012290:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	605a      	str	r2, [r3, #4]
            break;
 8012296:	e09a      	b.n	80123ce <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8012298:	4b4f      	ldr	r3, [pc, #316]	; (80123d8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801229a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	605a      	str	r2, [r3, #4]
            break;
 80122a0:	e095      	b.n	80123ce <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 80122a2:	4b4d      	ldr	r3, [pc, #308]	; (80123d8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80122a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	605a      	str	r2, [r3, #4]
            break;
 80122aa:	e090      	b.n	80123ce <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 80122ac:	4b4a      	ldr	r3, [pc, #296]	; (80123d8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80122ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	605a      	str	r2, [r3, #4]
            break;
 80122b4:	e08b      	b.n	80123ce <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 80122b6:	4b48      	ldr	r3, [pc, #288]	; (80123d8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80122b8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	605a      	str	r2, [r3, #4]
            break;
 80122be:	e086      	b.n	80123ce <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_CHANNELS_MIN_TX_DATARATE:
        {
            getPhy.Attribute = PHY_MIN_TX_DR;
 80122c0:	2302      	movs	r3, #2
 80122c2:	743b      	strb	r3, [r7, #16]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80122c4:	4b44      	ldr	r3, [pc, #272]	; (80123d8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80122c6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80122ca:	74bb      	strb	r3, [r7, #18]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80122cc:	4b42      	ldr	r3, [pc, #264]	; (80123d8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80122ce:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80122d2:	f107 0210 	add.w	r2, r7, #16
 80122d6:	4611      	mov	r1, r2
 80122d8:	4618      	mov	r0, r3
 80122da:	f002 ffdb 	bl	8015294 <RegionGetPhyParam>
 80122de:	4603      	mov	r3, r0
 80122e0:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	b25a      	sxtb	r2, r3
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	711a      	strb	r2, [r3, #4]
            break;
 80122ea:	e070      	b.n	80123ce <LoRaMacMibGetRequestConfirm+0x39e>
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80122ec:	4b3a      	ldr	r3, [pc, #232]	; (80123d8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80122ee:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	711a      	strb	r2, [r3, #4]
            break;
 80122f6:	e06a      	b.n	80123ce <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 80122f8:	4b37      	ldr	r3, [pc, #220]	; (80123d8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80122fa:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	711a      	strb	r2, [r3, #4]
            break;
 8012302:	e064      	b.n	80123ce <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8012304:	4b34      	ldr	r3, [pc, #208]	; (80123d8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012306:	f993 20dc 	ldrsb.w	r2, [r3, #220]	; 0xdc
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	711a      	strb	r2, [r3, #4]
            break;
 801230e:	e05e      	b.n	80123ce <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8012310:	4b31      	ldr	r3, [pc, #196]	; (80123d8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012312:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	711a      	strb	r2, [r3, #4]
            break;
 801231a:	e058      	b.n	80123ce <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 801231c:	4b2e      	ldr	r3, [pc, #184]	; (80123d8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801231e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	605a      	str	r2, [r3, #4]
            break;
 8012324:	e053      	b.n	80123ce <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8012326:	4b2c      	ldr	r3, [pc, #176]	; (80123d8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012328:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	711a      	strb	r2, [r3, #4]
            break;
 8012330:	e04d      	b.n	80123ce <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8012332:	4b29      	ldr	r3, [pc, #164]	; (80123d8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012334:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	605a      	str	r2, [r3, #4]
            break;
 801233c:	e047      	b.n	80123ce <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	4a25      	ldr	r2, [pc, #148]	; (80123d8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012342:	605a      	str	r2, [r3, #4]
            break;
 8012344:	e043      	b.n	80123ce <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	4a24      	ldr	r2, [pc, #144]	; (80123dc <LoRaMacMibGetRequestConfirm+0x3ac>)
 801234a:	605a      	str	r2, [r3, #4]
#else
            mibGet->Param.BackupContexts = NULL;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 801234c:	e03f      	b.n	80123ce <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 801234e:	4b22      	ldr	r3, [pc, #136]	; (80123d8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012350:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	605a      	str	r2, [r3, #4]
            break;
 8012358:	e039      	b.n	80123ce <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	4a1e      	ldr	r2, [pc, #120]	; (80123d8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801235e:	f8d2 212c 	ldr.w	r2, [r2, #300]	; 0x12c
 8012362:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8012364:	687c      	ldr	r4, [r7, #4]
 8012366:	f003 f9a3 	bl	80156b0 <RegionGetVersion>
 801236a:	60a0      	str	r0, [r4, #8]
            break;
 801236c:	e02f      	b.n	80123ce <LoRaMacMibGetRequestConfirm+0x39e>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 801236e:	4b1a      	ldr	r3, [pc, #104]	; (80123d8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012370:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	605a      	str	r2, [r3, #4]
            break;
 8012378:	e029      	b.n	80123ce <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 801237a:	4b17      	ldr	r3, [pc, #92]	; (80123d8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801237c:	f893 211f 	ldrb.w	r2, [r3, #287]	; 0x11f
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	711a      	strb	r2, [r3, #4]
            break;
 8012384:	e023      	b.n	80123ce <LoRaMacMibGetRequestConfirm+0x39e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8012386:	4b14      	ldr	r3, [pc, #80]	; (80123d8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012388:	f8b3 2088 	ldrh.w	r2, [r3, #136]	; 0x88
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	809a      	strh	r2, [r3, #4]
            break;
 8012390:	e01d      	b.n	80123ce <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8012392:	4b11      	ldr	r3, [pc, #68]	; (80123d8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012394:	f8b3 208a 	ldrh.w	r2, [r3, #138]	; 0x8a
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	809a      	strh	r2, [r3, #4]
            break;
 801239c:	e017      	b.n	80123ce <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 801239e:	4b0e      	ldr	r3, [pc, #56]	; (80123d8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80123a0:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	809a      	strh	r2, [r3, #4]
            break;
 80123a8:	e011      	b.n	80123ce <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 80123aa:	4b0b      	ldr	r3, [pc, #44]	; (80123d8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80123ac:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	809a      	strh	r2, [r3, #4]
            break;
 80123b4:	e00b      	b.n	80123ce <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.RssiFreeThreshold = Nvm.RegionGroup2.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 80123b6:	2318      	movs	r3, #24
 80123b8:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 80123ba:	e008      	b.n	80123ce <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.CarrierSenseTime = Nvm.RegionGroup2.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 80123bc:	2318      	movs	r3, #24
 80123be:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 80123c0:	e005      	b.n	80123ce <LoRaMacMibGetRequestConfirm+0x39e>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 80123c2:	6878      	ldr	r0, [r7, #4]
 80123c4:	f001 f81f 	bl	8013406 <LoRaMacClassBMibGetRequestConfirm>
 80123c8:	4603      	mov	r3, r0
 80123ca:	75fb      	strb	r3, [r7, #23]
            break;
 80123cc:	bf00      	nop
        }
    }
    return status;
 80123ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80123d0:	4618      	mov	r0, r3
 80123d2:	371c      	adds	r7, #28
 80123d4:	46bd      	mov	sp, r7
 80123d6:	bd90      	pop	{r4, r7, pc}
 80123d8:	20000c5c 	.word	0x20000c5c
 80123dc:	20001228 	.word	0x20001228

080123e0 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 80123e0:	b580      	push	{r7, lr}
 80123e2:	b086      	sub	sp, #24
 80123e4:	af00      	add	r7, sp, #0
 80123e6:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80123e8:	2300      	movs	r3, #0
 80123ea:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d101      	bne.n	80123f6 <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80123f2:	2303      	movs	r3, #3
 80123f4:	e396      	b.n	8012b24 <LoRaMacMibSetRequestConfirm+0x744>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 80123f6:	4bbd      	ldr	r3, [pc, #756]	; (80126ec <LoRaMacMibSetRequestConfirm+0x30c>)
 80123f8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80123fc:	f003 0302 	and.w	r3, r3, #2
 8012400:	2b00      	cmp	r3, #0
 8012402:	d001      	beq.n	8012408 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8012404:	2301      	movs	r3, #1
 8012406:	e38d      	b.n	8012b24 <LoRaMacMibSetRequestConfirm+0x744>
    }

    switch( mibSet->Type )
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	781b      	ldrb	r3, [r3, #0]
 801240c:	2b41      	cmp	r3, #65	; 0x41
 801240e:	f200 835d 	bhi.w	8012acc <LoRaMacMibSetRequestConfirm+0x6ec>
 8012412:	a201      	add	r2, pc, #4	; (adr r2, 8012418 <LoRaMacMibSetRequestConfirm+0x38>)
 8012414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012418:	08012521 	.word	0x08012521
 801241c:	08012531 	.word	0x08012531
 8012420:	0801254b 	.word	0x0801254b
 8012424:	08012563 	.word	0x08012563
 8012428:	0801257b 	.word	0x0801257b
 801242c:	08012587 	.word	0x08012587
 8012430:	08012593 	.word	0x08012593
 8012434:	080125bd 	.word	0x080125bd
 8012438:	080125e3 	.word	0x080125e3
 801243c:	08012609 	.word	0x08012609
 8012440:	0801262f 	.word	0x0801262f
 8012444:	08012655 	.word	0x08012655
 8012448:	0801267b 	.word	0x0801267b
 801244c:	080126a1 	.word	0x080126a1
 8012450:	080126c7 	.word	0x080126c7
 8012454:	080126f5 	.word	0x080126f5
 8012458:	08012715 	.word	0x08012715
 801245c:	08012acd 	.word	0x08012acd
 8012460:	08012721 	.word	0x08012721
 8012464:	08012791 	.word	0x08012791
 8012468:	080127d1 	.word	0x080127d1
 801246c:	08012833 	.word	0x08012833
 8012470:	080128a3 	.word	0x080128a3
 8012474:	08012873 	.word	0x08012873
 8012478:	080128d3 	.word	0x080128d3
 801247c:	080128f5 	.word	0x080128f5
 8012480:	080128ff 	.word	0x080128ff
 8012484:	08012909 	.word	0x08012909
 8012488:	08012913 	.word	0x08012913
 801248c:	0801291d 	.word	0x0801291d
 8012490:	08012acd 	.word	0x08012acd
 8012494:	08012927 	.word	0x08012927
 8012498:	08012959 	.word	0x08012959
 801249c:	080129cd 	.word	0x080129cd
 80124a0:	08012993 	.word	0x08012993
 80124a4:	080129ff 	.word	0x080129ff
 80124a8:	08012a15 	.word	0x08012a15
 80124ac:	08012a2d 	.word	0x08012a2d
 80124b0:	08012a39 	.word	0x08012a39
 80124b4:	08012a45 	.word	0x08012a45
 80124b8:	08012acd 	.word	0x08012acd
 80124bc:	08012a4f 	.word	0x08012a4f
 80124c0:	08012acd 	.word	0x08012acd
 80124c4:	08012acd 	.word	0x08012acd
 80124c8:	08012acd 	.word	0x08012acd
 80124cc:	08012acd 	.word	0x08012acd
 80124d0:	08012acd 	.word	0x08012acd
 80124d4:	08012acd 	.word	0x08012acd
 80124d8:	08012acd 	.word	0x08012acd
 80124dc:	08012acd 	.word	0x08012acd
 80124e0:	08012acd 	.word	0x08012acd
 80124e4:	08012acd 	.word	0x08012acd
 80124e8:	08012acd 	.word	0x08012acd
 80124ec:	08012acd 	.word	0x08012acd
 80124f0:	08012acd 	.word	0x08012acd
 80124f4:	08012acd 	.word	0x08012acd
 80124f8:	08012acd 	.word	0x08012acd
 80124fc:	08012acd 	.word	0x08012acd
 8012500:	08012a79 	.word	0x08012a79
 8012504:	08012a85 	.word	0x08012a85
 8012508:	08012a91 	.word	0x08012a91
 801250c:	08012a9d 	.word	0x08012a9d
 8012510:	08012aa9 	.word	0x08012aa9
 8012514:	08012ab5 	.word	0x08012ab5
 8012518:	08012ac1 	.word	0x08012ac1
 801251c:	08012ac7 	.word	0x08012ac7
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	791b      	ldrb	r3, [r3, #4]
 8012524:	4618      	mov	r0, r3
 8012526:	f7fd fabb 	bl	800faa0 <SwitchClass>
 801252a:	4603      	mov	r3, r0
 801252c:	75fb      	strb	r3, [r7, #23]
            break;
 801252e:	e2ee      	b.n	8012b0e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	791b      	ldrb	r3, [r3, #4]
 8012534:	2b02      	cmp	r3, #2
 8012536:	d005      	beq.n	8012544 <LoRaMacMibSetRequestConfirm+0x164>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	791a      	ldrb	r2, [r3, #4]
 801253c:	4b6c      	ldr	r3, [pc, #432]	; (80126f0 <LoRaMacMibSetRequestConfirm+0x310>)
 801253e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012542:	e2e4      	b.n	8012b0e <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012544:	2303      	movs	r3, #3
 8012546:	75fb      	strb	r3, [r7, #23]
            break;
 8012548:	e2e1      	b.n	8012b0e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	685b      	ldr	r3, [r3, #4]
 801254e:	4618      	mov	r0, r3
 8012550:	f7fa f8b4 	bl	800c6bc <SecureElementSetDevEui>
 8012554:	4603      	mov	r3, r0
 8012556:	2b00      	cmp	r3, #0
 8012558:	f000 82be 	beq.w	8012ad8 <LoRaMacMibSetRequestConfirm+0x6f8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801255c:	2303      	movs	r3, #3
 801255e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012560:	e2ba      	b.n	8012ad8 <LoRaMacMibSetRequestConfirm+0x6f8>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	685b      	ldr	r3, [r3, #4]
 8012566:	4618      	mov	r0, r3
 8012568:	f7fa f8d8 	bl	800c71c <SecureElementSetJoinEui>
 801256c:	4603      	mov	r3, r0
 801256e:	2b00      	cmp	r3, #0
 8012570:	f000 82b4 	beq.w	8012adc <LoRaMacMibSetRequestConfirm+0x6fc>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012574:	2303      	movs	r3, #3
 8012576:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012578:	e2b0      	b.n	8012adc <LoRaMacMibSetRequestConfirm+0x6fc>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	791a      	ldrb	r2, [r3, #4]
 801257e:	4b5c      	ldr	r3, [pc, #368]	; (80126f0 <LoRaMacMibSetRequestConfirm+0x310>)
 8012580:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
            break;
 8012584:	e2c3      	b.n	8012b0e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	685b      	ldr	r3, [r3, #4]
 801258a:	4a59      	ldr	r2, [pc, #356]	; (80126f0 <LoRaMacMibSetRequestConfirm+0x310>)
 801258c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
            break;
 8012590:	e2bd      	b.n	8012b0e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEV_ADDR:
        {
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 8012592:	4b57      	ldr	r3, [pc, #348]	; (80126f0 <LoRaMacMibSetRequestConfirm+0x310>)
 8012594:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	685b      	ldr	r3, [r3, #4]
 801259c:	4619      	mov	r1, r3
 801259e:	4610      	mov	r0, r2
 80125a0:	f7fa f8ec 	bl	800c77c <SecureElementSetDevAddr>
 80125a4:	4603      	mov	r3, r0
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d002      	beq.n	80125b0 <LoRaMacMibSetRequestConfirm+0x1d0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80125aa:	2303      	movs	r3, #3
 80125ac:	75fb      	strb	r3, [r7, #23]
            else
            {
                /* Update Nvm.MacGroup2.devAdr to handle set/get sequence */
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
            }
            break;
 80125ae:	e2ae      	b.n	8012b0e <LoRaMacMibSetRequestConfirm+0x72e>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	685b      	ldr	r3, [r3, #4]
 80125b4:	4a4e      	ldr	r2, [pc, #312]	; (80126f0 <LoRaMacMibSetRequestConfirm+0x310>)
 80125b6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
            break;
 80125ba:	e2a8      	b.n	8012b0e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	685b      	ldr	r3, [r3, #4]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d00b      	beq.n	80125dc <LoRaMacMibSetRequestConfirm+0x1fc>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	685b      	ldr	r3, [r3, #4]
 80125c8:	4619      	mov	r1, r3
 80125ca:	2000      	movs	r0, #0
 80125cc:	f002 f868 	bl	80146a0 <LoRaMacCryptoSetKey>
 80125d0:	4603      	mov	r3, r0
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	f000 8284 	beq.w	8012ae0 <LoRaMacMibSetRequestConfirm+0x700>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80125d8:	2311      	movs	r3, #17
 80125da:	e2a3      	b.n	8012b24 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80125dc:	2303      	movs	r3, #3
 80125de:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80125e0:	e27e      	b.n	8012ae0 <LoRaMacMibSetRequestConfirm+0x700>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	685b      	ldr	r3, [r3, #4]
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d00b      	beq.n	8012602 <LoRaMacMibSetRequestConfirm+0x222>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	685b      	ldr	r3, [r3, #4]
 80125ee:	4619      	mov	r1, r3
 80125f0:	2001      	movs	r0, #1
 80125f2:	f002 f855 	bl	80146a0 <LoRaMacCryptoSetKey>
 80125f6:	4603      	mov	r3, r0
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	f000 8273 	beq.w	8012ae4 <LoRaMacMibSetRequestConfirm+0x704>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80125fe:	2311      	movs	r3, #17
 8012600:	e290      	b.n	8012b24 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012602:	2303      	movs	r3, #3
 8012604:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012606:	e26d      	b.n	8012ae4 <LoRaMacMibSetRequestConfirm+0x704>
            break;
        }
#else
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	685b      	ldr	r3, [r3, #4]
 801260c:	2b00      	cmp	r3, #0
 801260e:	d00b      	beq.n	8012628 <LoRaMacMibSetRequestConfirm+0x248>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	685b      	ldr	r3, [r3, #4]
 8012614:	4619      	mov	r1, r3
 8012616:	2008      	movs	r0, #8
 8012618:	f002 f842 	bl	80146a0 <LoRaMacCryptoSetKey>
 801261c:	4603      	mov	r3, r0
 801261e:	2b00      	cmp	r3, #0
 8012620:	f000 8262 	beq.w	8012ae8 <LoRaMacMibSetRequestConfirm+0x708>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012624:	2311      	movs	r3, #17
 8012626:	e27d      	b.n	8012b24 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012628:	2303      	movs	r3, #3
 801262a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801262c:	e25c      	b.n	8012ae8 <LoRaMacMibSetRequestConfirm+0x708>
        }
#endif /* LORAMAC_VERSION */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	685b      	ldr	r3, [r3, #4]
 8012632:	2b00      	cmp	r3, #0
 8012634:	d00b      	beq.n	801264e <LoRaMacMibSetRequestConfirm+0x26e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	685b      	ldr	r3, [r3, #4]
 801263a:	4619      	mov	r1, r3
 801263c:	2009      	movs	r0, #9
 801263e:	f002 f82f 	bl	80146a0 <LoRaMacCryptoSetKey>
 8012642:	4603      	mov	r3, r0
 8012644:	2b00      	cmp	r3, #0
 8012646:	f000 8251 	beq.w	8012aec <LoRaMacMibSetRequestConfirm+0x70c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801264a:	2311      	movs	r3, #17
 801264c:	e26a      	b.n	8012b24 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801264e:	2303      	movs	r3, #3
 8012650:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012652:	e24b      	b.n	8012aec <LoRaMacMibSetRequestConfirm+0x70c>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	685b      	ldr	r3, [r3, #4]
 8012658:	2b00      	cmp	r3, #0
 801265a:	d00b      	beq.n	8012674 <LoRaMacMibSetRequestConfirm+0x294>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	685b      	ldr	r3, [r3, #4]
 8012660:	4619      	mov	r1, r3
 8012662:	200c      	movs	r0, #12
 8012664:	f002 f81c 	bl	80146a0 <LoRaMacCryptoSetKey>
 8012668:	4603      	mov	r3, r0
 801266a:	2b00      	cmp	r3, #0
 801266c:	f000 8240 	beq.w	8012af0 <LoRaMacMibSetRequestConfirm+0x710>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012670:	2311      	movs	r3, #17
 8012672:	e257      	b.n	8012b24 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012674:	2303      	movs	r3, #3
 8012676:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012678:	e23a      	b.n	8012af0 <LoRaMacMibSetRequestConfirm+0x710>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	685b      	ldr	r3, [r3, #4]
 801267e:	2b00      	cmp	r3, #0
 8012680:	d00b      	beq.n	801269a <LoRaMacMibSetRequestConfirm+0x2ba>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	685b      	ldr	r3, [r3, #4]
 8012686:	4619      	mov	r1, r3
 8012688:	200d      	movs	r0, #13
 801268a:	f002 f809 	bl	80146a0 <LoRaMacCryptoSetKey>
 801268e:	4603      	mov	r3, r0
 8012690:	2b00      	cmp	r3, #0
 8012692:	f000 822f 	beq.w	8012af4 <LoRaMacMibSetRequestConfirm+0x714>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012696:	2311      	movs	r3, #17
 8012698:	e244      	b.n	8012b24 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801269a:	2303      	movs	r3, #3
 801269c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801269e:	e229      	b.n	8012af4 <LoRaMacMibSetRequestConfirm+0x714>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	685b      	ldr	r3, [r3, #4]
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d00b      	beq.n	80126c0 <LoRaMacMibSetRequestConfirm+0x2e0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	685b      	ldr	r3, [r3, #4]
 80126ac:	4619      	mov	r1, r3
 80126ae:	200e      	movs	r0, #14
 80126b0:	f001 fff6 	bl	80146a0 <LoRaMacCryptoSetKey>
 80126b4:	4603      	mov	r3, r0
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	f000 821e 	beq.w	8012af8 <LoRaMacMibSetRequestConfirm+0x718>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80126bc:	2311      	movs	r3, #17
 80126be:	e231      	b.n	8012b24 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80126c0:	2303      	movs	r3, #3
 80126c2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80126c4:	e218      	b.n	8012af8 <LoRaMacMibSetRequestConfirm+0x718>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	685b      	ldr	r3, [r3, #4]
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d00b      	beq.n	80126e6 <LoRaMacMibSetRequestConfirm+0x306>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	685b      	ldr	r3, [r3, #4]
 80126d2:	4619      	mov	r1, r3
 80126d4:	200f      	movs	r0, #15
 80126d6:	f001 ffe3 	bl	80146a0 <LoRaMacCryptoSetKey>
 80126da:	4603      	mov	r3, r0
 80126dc:	2b00      	cmp	r3, #0
 80126de:	f000 820d 	beq.w	8012afc <LoRaMacMibSetRequestConfirm+0x71c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80126e2:	2311      	movs	r3, #17
 80126e4:	e21e      	b.n	8012b24 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80126e6:	2303      	movs	r3, #3
 80126e8:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80126ea:	e207      	b.n	8012afc <LoRaMacMibSetRequestConfirm+0x71c>
 80126ec:	20000740 	.word	0x20000740
 80126f0:	20000c5c 	.word	0x20000c5c
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	791a      	ldrb	r2, [r3, #4]
 80126f8:	4bb2      	ldr	r3, [pc, #712]	; (80129c4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80126fa:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80126fe:	4bb2      	ldr	r3, [pc, #712]	; (80129c8 <LoRaMacMibSetRequestConfirm+0x5e8>)
 8012700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012702:	4ab0      	ldr	r2, [pc, #704]	; (80129c4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012704:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 8012708:	4610      	mov	r0, r2
 801270a:	4798      	blx	r3
            Radio.Sleep( );
 801270c:	4bae      	ldr	r3, [pc, #696]	; (80129c8 <LoRaMacMibSetRequestConfirm+0x5e8>)
 801270e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012710:	4798      	blx	r3
            break;
 8012712:	e1fc      	b.n	8012b0e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	791a      	ldrb	r2, [r3, #4]
 8012718:	4baa      	ldr	r3, [pc, #680]	; (80129c4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801271a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
            break;
 801271e:	e1f6      	b.n	8012b0e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	7a1b      	ldrb	r3, [r3, #8]
 8012724:	b25b      	sxtb	r3, r3
 8012726:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012728:	4ba6      	ldr	r3, [pc, #664]	; (80129c4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801272a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 801272e:	727b      	strb	r3, [r7, #9]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8012730:	4ba4      	ldr	r3, [pc, #656]	; (80129c4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012732:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012736:	f107 0108 	add.w	r1, r7, #8
 801273a:	2207      	movs	r2, #7
 801273c:	4618      	mov	r0, r3
 801273e:	f002 fdf7 	bl	8015330 <RegionVerify>
 8012742:	4603      	mov	r3, r0
 8012744:	f083 0301 	eor.w	r3, r3, #1
 8012748:	b2db      	uxtb	r3, r3
 801274a:	2b00      	cmp	r3, #0
 801274c:	d002      	beq.n	8012754 <LoRaMacMibSetRequestConfirm+0x374>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801274e:	2303      	movs	r3, #3
 8012750:	75fb      	strb	r3, [r7, #23]
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            break;
 8012752:	e1dc      	b.n	8012b0e <LoRaMacMibSetRequestConfirm+0x72e>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	685b      	ldr	r3, [r3, #4]
 8012758:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 801275a:	4b9a      	ldr	r3, [pc, #616]	; (80129c4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801275c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012760:	f107 0108 	add.w	r1, r7, #8
 8012764:	2200      	movs	r2, #0
 8012766:	4618      	mov	r0, r3
 8012768:	f002 fde2 	bl	8015330 <RegionVerify>
 801276c:	4603      	mov	r3, r0
 801276e:	f083 0301 	eor.w	r3, r3, #1
 8012772:	b2db      	uxtb	r3, r3
 8012774:	2b00      	cmp	r3, #0
 8012776:	d002      	beq.n	801277e <LoRaMacMibSetRequestConfirm+0x39e>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012778:	2303      	movs	r3, #3
 801277a:	75fb      	strb	r3, [r7, #23]
            break;
 801277c:	e1c7      	b.n	8012b0e <LoRaMacMibSetRequestConfirm+0x72e>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 801277e:	4b91      	ldr	r3, [pc, #580]	; (80129c4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012780:	687a      	ldr	r2, [r7, #4]
 8012782:	336c      	adds	r3, #108	; 0x6c
 8012784:	3204      	adds	r2, #4
 8012786:	e892 0003 	ldmia.w	r2, {r0, r1}
 801278a:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801278e:	e1be      	b.n	8012b0e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	7a1b      	ldrb	r3, [r3, #8]
 8012794:	b25b      	sxtb	r3, r3
 8012796:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012798:	4b8a      	ldr	r3, [pc, #552]	; (80129c4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801279a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 801279e:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80127a0:	4b88      	ldr	r3, [pc, #544]	; (80129c4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80127a2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80127a6:	f107 0108 	add.w	r1, r7, #8
 80127aa:	2207      	movs	r2, #7
 80127ac:	4618      	mov	r0, r3
 80127ae:	f002 fdbf 	bl	8015330 <RegionVerify>
 80127b2:	4603      	mov	r3, r0
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d008      	beq.n	80127ca <LoRaMacMibSetRequestConfirm+0x3ea>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 80127b8:	4b82      	ldr	r3, [pc, #520]	; (80129c4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80127ba:	687a      	ldr	r2, [r7, #4]
 80127bc:	33b4      	adds	r3, #180	; 0xb4
 80127be:	3204      	adds	r2, #4
 80127c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80127c4:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80127c8:	e1a1      	b.n	8012b0e <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80127ca:	2303      	movs	r3, #3
 80127cc:	75fb      	strb	r3, [r7, #23]
            break;
 80127ce:	e19e      	b.n	8012b0e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	7a1b      	ldrb	r3, [r3, #8]
 80127d4:	b25b      	sxtb	r3, r3
 80127d6:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80127d8:	4b7a      	ldr	r3, [pc, #488]	; (80129c4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80127da:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80127de:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80127e0:	4b78      	ldr	r3, [pc, #480]	; (80129c4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80127e2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80127e6:	f107 0108 	add.w	r1, r7, #8
 80127ea:	2207      	movs	r2, #7
 80127ec:	4618      	mov	r0, r3
 80127ee:	f002 fd9f 	bl	8015330 <RegionVerify>
 80127f2:	4603      	mov	r3, r0
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d019      	beq.n	801282c <LoRaMacMibSetRequestConfirm+0x44c>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 80127f8:	4b72      	ldr	r3, [pc, #456]	; (80129c4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80127fa:	687a      	ldr	r2, [r7, #4]
 80127fc:	3374      	adds	r3, #116	; 0x74
 80127fe:	3204      	adds	r2, #4
 8012800:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012804:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8012808:	4b6e      	ldr	r3, [pc, #440]	; (80129c4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801280a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801280e:	2b02      	cmp	r3, #2
 8012810:	f040 8176 	bne.w	8012b00 <LoRaMacMibSetRequestConfirm+0x720>
 8012814:	4b6b      	ldr	r3, [pc, #428]	; (80129c4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012816:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 801281a:	2b00      	cmp	r3, #0
 801281c:	f000 8170 	beq.w	8012b00 <LoRaMacMibSetRequestConfirm+0x720>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8012820:	4b69      	ldr	r3, [pc, #420]	; (80129c8 <LoRaMacMibSetRequestConfirm+0x5e8>)
 8012822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012824:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8012826:	f7fe fc1b 	bl	8011060 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801282a:	e169      	b.n	8012b00 <LoRaMacMibSetRequestConfirm+0x720>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801282c:	2303      	movs	r3, #3
 801282e:	75fb      	strb	r3, [r7, #23]
            break;
 8012830:	e166      	b.n	8012b00 <LoRaMacMibSetRequestConfirm+0x720>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	7a1b      	ldrb	r3, [r3, #8]
 8012836:	b25b      	sxtb	r3, r3
 8012838:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801283a:	4b62      	ldr	r3, [pc, #392]	; (80129c4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801283c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8012840:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8012842:	4b60      	ldr	r3, [pc, #384]	; (80129c4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012844:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012848:	f107 0108 	add.w	r1, r7, #8
 801284c:	2207      	movs	r2, #7
 801284e:	4618      	mov	r0, r3
 8012850:	f002 fd6e 	bl	8015330 <RegionVerify>
 8012854:	4603      	mov	r3, r0
 8012856:	2b00      	cmp	r3, #0
 8012858:	d008      	beq.n	801286c <LoRaMacMibSetRequestConfirm+0x48c>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 801285a:	4b5a      	ldr	r3, [pc, #360]	; (80129c4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801285c:	687a      	ldr	r2, [r7, #4]
 801285e:	33bc      	adds	r3, #188	; 0xbc
 8012860:	3204      	adds	r2, #4
 8012862:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012866:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801286a:	e150      	b.n	8012b0e <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801286c:	2303      	movs	r3, #3
 801286e:	75fb      	strb	r3, [r7, #23]
            break;
 8012870:	e14d      	b.n	8012b0e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	685b      	ldr	r3, [r3, #4]
 8012876:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8012878:	2301      	movs	r3, #1
 801287a:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 801287c:	4b51      	ldr	r3, [pc, #324]	; (80129c4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801287e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012882:	f107 020c 	add.w	r2, r7, #12
 8012886:	4611      	mov	r1, r2
 8012888:	4618      	mov	r0, r3
 801288a:	f002 fd89 	bl	80153a0 <RegionChanMaskSet>
 801288e:	4603      	mov	r3, r0
 8012890:	f083 0301 	eor.w	r3, r3, #1
 8012894:	b2db      	uxtb	r3, r3
 8012896:	2b00      	cmp	r3, #0
 8012898:	f000 8134 	beq.w	8012b04 <LoRaMacMibSetRequestConfirm+0x724>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801289c:	2303      	movs	r3, #3
 801289e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80128a0:	e130      	b.n	8012b04 <LoRaMacMibSetRequestConfirm+0x724>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	685b      	ldr	r3, [r3, #4]
 80128a6:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 80128a8:	2300      	movs	r3, #0
 80128aa:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 80128ac:	4b45      	ldr	r3, [pc, #276]	; (80129c4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80128ae:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80128b2:	f107 020c 	add.w	r2, r7, #12
 80128b6:	4611      	mov	r1, r2
 80128b8:	4618      	mov	r0, r3
 80128ba:	f002 fd71 	bl	80153a0 <RegionChanMaskSet>
 80128be:	4603      	mov	r3, r0
 80128c0:	f083 0301 	eor.w	r3, r3, #1
 80128c4:	b2db      	uxtb	r3, r3
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	f000 811e 	beq.w	8012b08 <LoRaMacMibSetRequestConfirm+0x728>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80128cc:	2303      	movs	r3, #3
 80128ce:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80128d0:	e11a      	b.n	8012b08 <LoRaMacMibSetRequestConfirm+0x728>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	791b      	ldrb	r3, [r3, #4]
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d009      	beq.n	80128ee <LoRaMacMibSetRequestConfirm+0x50e>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 80128de:	2b0f      	cmp	r3, #15
 80128e0:	d805      	bhi.n	80128ee <LoRaMacMibSetRequestConfirm+0x50e>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	791a      	ldrb	r2, [r3, #4]
 80128e6:	4b37      	ldr	r3, [pc, #220]	; (80129c4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80128e8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80128ec:	e10f      	b.n	8012b0e <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80128ee:	2303      	movs	r3, #3
 80128f0:	75fb      	strb	r3, [r7, #23]
            break;
 80128f2:	e10c      	b.n	8012b0e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	685b      	ldr	r3, [r3, #4]
 80128f8:	4a32      	ldr	r2, [pc, #200]	; (80129c4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80128fa:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 80128fc:	e107      	b.n	8012b0e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	685b      	ldr	r3, [r3, #4]
 8012902:	4a30      	ldr	r2, [pc, #192]	; (80129c4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012904:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 8012906:	e102      	b.n	8012b0e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	685b      	ldr	r3, [r3, #4]
 801290c:	4a2d      	ldr	r2, [pc, #180]	; (80129c4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801290e:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 8012910:	e0fd      	b.n	8012b0e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	685b      	ldr	r3, [r3, #4]
 8012916:	4a2b      	ldr	r2, [pc, #172]	; (80129c4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012918:	6613      	str	r3, [r2, #96]	; 0x60
            break;
 801291a:	e0f8      	b.n	8012b0e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	685b      	ldr	r3, [r3, #4]
 8012920:	4a28      	ldr	r2, [pc, #160]	; (80129c4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012922:	6653      	str	r3, [r2, #100]	; 0x64
            break;
 8012924:	e0f3      	b.n	8012b0e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801292c:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 801292e:	4b25      	ldr	r3, [pc, #148]	; (80129c4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012930:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012934:	f107 0108 	add.w	r1, r7, #8
 8012938:	2206      	movs	r2, #6
 801293a:	4618      	mov	r0, r3
 801293c:	f002 fcf8 	bl	8015330 <RegionVerify>
 8012940:	4603      	mov	r3, r0
 8012942:	2b00      	cmp	r3, #0
 8012944:	d005      	beq.n	8012952 <LoRaMacMibSetRequestConfirm+0x572>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8012946:	f997 2008 	ldrsb.w	r2, [r7, #8]
 801294a:	4b1e      	ldr	r3, [pc, #120]	; (80129c4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801294c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012950:	e0dd      	b.n	8012b0e <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012952:	2303      	movs	r3, #3
 8012954:	75fb      	strb	r3, [r7, #23]
            break;
 8012956:	e0da      	b.n	8012b0e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801295e:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012960:	4b18      	ldr	r3, [pc, #96]	; (80129c4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012962:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8012966:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8012968:	4b16      	ldr	r3, [pc, #88]	; (80129c4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801296a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801296e:	f107 0108 	add.w	r1, r7, #8
 8012972:	2205      	movs	r2, #5
 8012974:	4618      	mov	r0, r3
 8012976:	f002 fcdb 	bl	8015330 <RegionVerify>
 801297a:	4603      	mov	r3, r0
 801297c:	2b00      	cmp	r3, #0
 801297e:	d005      	beq.n	801298c <LoRaMacMibSetRequestConfirm+0x5ac>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8012980:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8012984:	4b0f      	ldr	r3, [pc, #60]	; (80129c4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012986:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801298a:	e0c0      	b.n	8012b0e <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801298c:	2303      	movs	r3, #3
 801298e:	75fb      	strb	r3, [r7, #23]
            break;
 8012990:	e0bd      	b.n	8012b0e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012998:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 801299a:	4b0a      	ldr	r3, [pc, #40]	; (80129c4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801299c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80129a0:	f107 0108 	add.w	r1, r7, #8
 80129a4:	220a      	movs	r2, #10
 80129a6:	4618      	mov	r0, r3
 80129a8:	f002 fcc2 	bl	8015330 <RegionVerify>
 80129ac:	4603      	mov	r3, r0
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d005      	beq.n	80129be <LoRaMacMibSetRequestConfirm+0x5de>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 80129b2:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80129b6:	4b03      	ldr	r3, [pc, #12]	; (80129c4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80129b8:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80129bc:	e0a7      	b.n	8012b0e <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80129be:	2303      	movs	r3, #3
 80129c0:	75fb      	strb	r3, [r7, #23]
            break;
 80129c2:	e0a4      	b.n	8012b0e <LoRaMacMibSetRequestConfirm+0x72e>
 80129c4:	20000c5c 	.word	0x20000c5c
 80129c8:	0801ea64 	.word	0x0801ea64
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80129d2:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 80129d4:	4b55      	ldr	r3, [pc, #340]	; (8012b2c <LoRaMacMibSetRequestConfirm+0x74c>)
 80129d6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80129da:	f107 0108 	add.w	r1, r7, #8
 80129de:	2209      	movs	r2, #9
 80129e0:	4618      	mov	r0, r3
 80129e2:	f002 fca5 	bl	8015330 <RegionVerify>
 80129e6:	4603      	mov	r3, r0
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d005      	beq.n	80129f8 <LoRaMacMibSetRequestConfirm+0x618>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 80129ec:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80129f0:	4b4e      	ldr	r3, [pc, #312]	; (8012b2c <LoRaMacMibSetRequestConfirm+0x74c>)
 80129f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80129f6:	e08a      	b.n	8012b0e <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80129f8:	2303      	movs	r3, #3
 80129fa:	75fb      	strb	r3, [r7, #23]
            break;
 80129fc:	e087      	b.n	8012b0e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	685b      	ldr	r3, [r3, #4]
 8012a02:	4a4a      	ldr	r2, [pc, #296]	; (8012b2c <LoRaMacMibSetRequestConfirm+0x74c>)
 8012a04:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8012a08:	4b48      	ldr	r3, [pc, #288]	; (8012b2c <LoRaMacMibSetRequestConfirm+0x74c>)
 8012a0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012a0e:	4a47      	ldr	r2, [pc, #284]	; (8012b2c <LoRaMacMibSetRequestConfirm+0x74c>)
 8012a10:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 8012a12:	e07c      	b.n	8012b0e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	791a      	ldrb	r2, [r3, #4]
 8012a18:	4b44      	ldr	r3, [pc, #272]	; (8012b2c <LoRaMacMibSetRequestConfirm+0x74c>)
 8012a1a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 8012a1e:	4b43      	ldr	r3, [pc, #268]	; (8012b2c <LoRaMacMibSetRequestConfirm+0x74c>)
 8012a20:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 8012a24:	4b41      	ldr	r3, [pc, #260]	; (8012b2c <LoRaMacMibSetRequestConfirm+0x74c>)
 8012a26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            break;
 8012a2a:	e070      	b.n	8012b0e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	685b      	ldr	r3, [r3, #4]
 8012a30:	4a3e      	ldr	r2, [pc, #248]	; (8012b2c <LoRaMacMibSetRequestConfirm+0x74c>)
 8012a32:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            break;
 8012a36:	e06a      	b.n	8012b0e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	685b      	ldr	r3, [r3, #4]
 8012a3c:	4a3b      	ldr	r2, [pc, #236]	; (8012b2c <LoRaMacMibSetRequestConfirm+0x74c>)
 8012a3e:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
            break;
 8012a42:	e064      	b.n	8012b0e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 8012a44:	f7fe fd40 	bl	80114c8 <RestoreNvmData>
 8012a48:	4603      	mov	r3, r0
 8012a4a:	75fb      	strb	r3, [r7, #23]
            break;
 8012a4c:	e05f      	b.n	8012b0e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	799b      	ldrb	r3, [r3, #6]
 8012a52:	2b01      	cmp	r3, #1
 8012a54:	d80d      	bhi.n	8012a72 <LoRaMacMibSetRequestConfirm+0x692>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8012a56:	4a35      	ldr	r2, [pc, #212]	; (8012b2c <LoRaMacMibSetRequestConfirm+0x74c>)
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	685b      	ldr	r3, [r3, #4]
 8012a5c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	6858      	ldr	r0, [r3, #4]
 8012a64:	f001 fd7e 	bl	8014564 <LoRaMacCryptoSetLrWanVersion>
 8012a68:	4603      	mov	r3, r0
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d04e      	beq.n	8012b0c <LoRaMacMibSetRequestConfirm+0x72c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012a6e:	2311      	movs	r3, #17
 8012a70:	e058      	b.n	8012b24 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012a72:	2303      	movs	r3, #3
 8012a74:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012a76:	e049      	b.n	8012b0c <LoRaMacMibSetRequestConfirm+0x72c>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	685b      	ldr	r3, [r3, #4]
 8012a7c:	4a2b      	ldr	r2, [pc, #172]	; (8012b2c <LoRaMacMibSetRequestConfirm+0x74c>)
 8012a7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
            break;
 8012a82:	e044      	b.n	8012b0e <LoRaMacMibSetRequestConfirm+0x72e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	791a      	ldrb	r2, [r3, #4]
 8012a88:	4b28      	ldr	r3, [pc, #160]	; (8012b2c <LoRaMacMibSetRequestConfirm+0x74c>)
 8012a8a:	f883 211f 	strb.w	r2, [r3, #287]	; 0x11f
            break;
 8012a8e:	e03e      	b.n	8012b0e <LoRaMacMibSetRequestConfirm+0x72e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	889a      	ldrh	r2, [r3, #4]
 8012a94:	4b25      	ldr	r3, [pc, #148]	; (8012b2c <LoRaMacMibSetRequestConfirm+0x74c>)
 8012a96:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
            break;
 8012a9a:	e038      	b.n	8012b0e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	889a      	ldrh	r2, [r3, #4]
 8012aa0:	4b22      	ldr	r3, [pc, #136]	; (8012b2c <LoRaMacMibSetRequestConfirm+0x74c>)
 8012aa2:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
            break;
 8012aa6:	e032      	b.n	8012b0e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	889a      	ldrh	r2, [r3, #4]
 8012aac:	4b1f      	ldr	r3, [pc, #124]	; (8012b2c <LoRaMacMibSetRequestConfirm+0x74c>)
 8012aae:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
            break;
 8012ab2:	e02c      	b.n	8012b0e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	889a      	ldrh	r2, [r3, #4]
 8012ab8:	4b1c      	ldr	r3, [pc, #112]	; (8012b2c <LoRaMacMibSetRequestConfirm+0x74c>)
 8012aba:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
            break;
 8012abe:	e026      	b.n	8012b0e <LoRaMacMibSetRequestConfirm+0x72e>
            else
            {
                Nvm.RegionGroup2.RssiFreeThreshold = mibSet->Param.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8012ac0:	2318      	movs	r3, #24
 8012ac2:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8012ac4:	e023      	b.n	8012b0e <LoRaMacMibSetRequestConfirm+0x72e>
            else
            {
                Nvm.RegionGroup2.CarrierSenseTime = mibSet->Param.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8012ac6:	2318      	movs	r3, #24
 8012ac8:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8012aca:	e020      	b.n	8012b0e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8012acc:	6878      	ldr	r0, [r7, #4]
 8012ace:	f000 fca4 	bl	801341a <LoRaMacMibClassBSetRequestConfirm>
 8012ad2:	4603      	mov	r3, r0
 8012ad4:	75fb      	strb	r3, [r7, #23]
            break;
 8012ad6:	e01a      	b.n	8012b0e <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8012ad8:	bf00      	nop
 8012ada:	e018      	b.n	8012b0e <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8012adc:	bf00      	nop
 8012ade:	e016      	b.n	8012b0e <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8012ae0:	bf00      	nop
 8012ae2:	e014      	b.n	8012b0e <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8012ae4:	bf00      	nop
 8012ae6:	e012      	b.n	8012b0e <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8012ae8:	bf00      	nop
 8012aea:	e010      	b.n	8012b0e <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8012aec:	bf00      	nop
 8012aee:	e00e      	b.n	8012b0e <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8012af0:	bf00      	nop
 8012af2:	e00c      	b.n	8012b0e <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8012af4:	bf00      	nop
 8012af6:	e00a      	b.n	8012b0e <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8012af8:	bf00      	nop
 8012afa:	e008      	b.n	8012b0e <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8012afc:	bf00      	nop
 8012afe:	e006      	b.n	8012b0e <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8012b00:	bf00      	nop
 8012b02:	e004      	b.n	8012b0e <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8012b04:	bf00      	nop
 8012b06:	e002      	b.n	8012b0e <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8012b08:	bf00      	nop
 8012b0a:	e000      	b.n	8012b0e <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8012b0c:	bf00      	nop
        }
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( status == LORAMAC_STATUS_OK )
 8012b0e:	7dfb      	ldrb	r3, [r7, #23]
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d106      	bne.n	8012b22 <LoRaMacMibSetRequestConfirm+0x742>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8012b14:	4a06      	ldr	r2, [pc, #24]	; (8012b30 <LoRaMacMibSetRequestConfirm+0x750>)
 8012b16:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8012b1a:	f043 0320 	orr.w	r3, r3, #32
 8012b1e:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
#endif /* LORAMAC_VERSION */
    return status;
 8012b22:	7dfb      	ldrb	r3, [r7, #23]
}
 8012b24:	4618      	mov	r0, r3
 8012b26:	3718      	adds	r7, #24
 8012b28:	46bd      	mov	sp, r7
 8012b2a:	bd80      	pop	{r7, pc}
 8012b2c:	20000c5c 	.word	0x20000c5c
 8012b30:	20000740 	.word	0x20000740

08012b34 <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8012b34:	b580      	push	{r7, lr}
 8012b36:	b08a      	sub	sp, #40	; 0x28
 8012b38:	af00      	add	r7, sp, #0
 8012b3a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012b3c:	2302      	movs	r3, #2
 8012b3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8012b42:	2300      	movs	r3, #0
 8012b44:	83bb      	strh	r3, [r7, #28]

    if( mlmeRequest == NULL )
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d101      	bne.n	8012b50 <LoRaMacMlmeRequest+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012b4c:	2303      	movs	r3, #3
 8012b4e:	e17e      	b.n	8012e4e <LoRaMacMlmeRequest+0x31a>
    }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	2200      	movs	r2, #0
 8012b54:	611a      	str	r2, [r3, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 8012b56:	f7fc fb85 	bl	800f264 <LoRaMacIsBusy>
 8012b5a:	4603      	mov	r3, r0
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d001      	beq.n	8012b64 <LoRaMacMlmeRequest+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 8012b60:	2301      	movs	r3, #1
 8012b62:	e174      	b.n	8012e4e <LoRaMacMlmeRequest+0x31a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8012b64:	f001 f994 	bl	8013e90 <LoRaMacConfirmQueueIsFull>
 8012b68:	4603      	mov	r3, r0
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d001      	beq.n	8012b72 <LoRaMacMlmeRequest+0x3e>
    {
        return LORAMAC_STATUS_BUSY;
 8012b6e:	2301      	movs	r3, #1
 8012b70:	e16d      	b.n	8012e4e <LoRaMacMlmeRequest+0x31a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8012b72:	f001 f981 	bl	8013e78 <LoRaMacConfirmQueueGetCnt>
 8012b76:	4603      	mov	r3, r0
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d104      	bne.n	8012b86 <LoRaMacMlmeRequest+0x52>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8012b7c:	2214      	movs	r2, #20
 8012b7e:	2100      	movs	r1, #0
 8012b80:	48b5      	ldr	r0, [pc, #724]	; (8012e58 <LoRaMacMlmeRequest+0x324>)
 8012b82:	f006 f9c3 	bl	8018f0c <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012b86:	4bb5      	ldr	r3, [pc, #724]	; (8012e5c <LoRaMacMlmeRequest+0x328>)
 8012b88:	2201      	movs	r2, #1
 8012b8a:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8012b8e:	4ab3      	ldr	r2, [pc, #716]	; (8012e5c <LoRaMacMlmeRequest+0x328>)
 8012b90:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8012b94:	f043 0304 	orr.w	r3, r3, #4
 8012b98:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    queueElement.Request = mlmeRequest->Type;
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	781b      	ldrb	r3, [r3, #0]
 8012ba0:	f887 3020 	strb.w	r3, [r7, #32]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012ba4:	2301      	movs	r3, #1
 8012ba6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    queueElement.RestrictCommonReadyToHandle = false;
 8012baa:	2300      	movs	r3, #0
 8012bac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    queueElement.ReadyToHandle = false;
 8012bb0:	2300      	movs	r3, #0
 8012bb2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	781b      	ldrb	r3, [r3, #0]
 8012bba:	3b01      	subs	r3, #1
 8012bbc:	2b0c      	cmp	r3, #12
 8012bbe:	f200 811a 	bhi.w	8012df6 <LoRaMacMlmeRequest+0x2c2>
 8012bc2:	a201      	add	r2, pc, #4	; (adr r2, 8012bc8 <LoRaMacMlmeRequest+0x94>)
 8012bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012bc8:	08012bfd 	.word	0x08012bfd
 8012bcc:	08012df7 	.word	0x08012df7
 8012bd0:	08012df7 	.word	0x08012df7
 8012bd4:	08012df7 	.word	0x08012df7
 8012bd8:	08012cdb 	.word	0x08012cdb
 8012bdc:	08012cff 	.word	0x08012cff
 8012be0:	08012df7 	.word	0x08012df7
 8012be4:	08012df7 	.word	0x08012df7
 8012be8:	08012d1d 	.word	0x08012d1d
 8012bec:	08012df7 	.word	0x08012df7
 8012bf0:	08012dc5 	.word	0x08012dc5
 8012bf4:	08012d59 	.word	0x08012d59
 8012bf8:	08012da3 	.word	0x08012da3
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8012bfc:	4b97      	ldr	r3, [pc, #604]	; (8012e5c <LoRaMacMlmeRequest+0x328>)
 8012bfe:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012c02:	f003 0320 	and.w	r3, r3, #32
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d001      	beq.n	8012c0e <LoRaMacMlmeRequest+0xda>
            {
                return LORAMAC_STATUS_BUSY;
 8012c0a:	2301      	movs	r3, #1
 8012c0c:	e11f      	b.n	8012e4e <LoRaMacMlmeRequest+0x31a>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	791b      	ldrb	r3, [r3, #4]
 8012c12:	2b02      	cmp	r3, #2
 8012c14:	d135      	bne.n	8012c82 <LoRaMacMlmeRequest+0x14e>
            {
                ResetMacParameters( false );
 8012c16:	2000      	movs	r0, #0
 8012c18:	f7fe f8b4 	bl	8010d84 <ResetMacParameters>

                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8012c1c:	4b90      	ldr	r3, [pc, #576]	; (8012e60 <LoRaMacMlmeRequest+0x32c>)
 8012c1e:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	795b      	ldrb	r3, [r3, #5]
 8012c26:	b25b      	sxtb	r3, r3
 8012c28:	2200      	movs	r2, #0
 8012c2a:	4619      	mov	r1, r3
 8012c2c:	f002 fcc8 	bl	80155c0 <RegionAlternateDr>
 8012c30:	4603      	mov	r3, r0
 8012c32:	461a      	mov	r2, r3
 8012c34:	4b8a      	ldr	r3, [pc, #552]	; (8012e60 <LoRaMacMlmeRequest+0x32c>)
 8012c36:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8012c40:	4b87      	ldr	r3, [pc, #540]	; (8012e60 <LoRaMacMlmeRequest+0x32c>)
 8012c42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8012c46:	2307      	movs	r3, #7
 8012c48:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

                status = SendReJoinReq( JOIN_REQ );
 8012c4c:	20ff      	movs	r0, #255	; 0xff
 8012c4e:	f7fd fe1d 	bl	801088c <SendReJoinReq>
 8012c52:	4603      	mov	r3, r0
 8012c54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                if( status != LORAMAC_STATUS_OK )
 8012c58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	f000 80cc 	beq.w	8012dfa <LoRaMacMlmeRequest+0x2c6>
                {
                    // Revert back the previous datarate ( mainly used for US915 like regions )
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8012c62:	4b7f      	ldr	r3, [pc, #508]	; (8012e60 <LoRaMacMlmeRequest+0x32c>)
 8012c64:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	795b      	ldrb	r3, [r3, #5]
 8012c6c:	b25b      	sxtb	r3, r3
 8012c6e:	2201      	movs	r2, #1
 8012c70:	4619      	mov	r1, r3
 8012c72:	f002 fca5 	bl	80155c0 <RegionAlternateDr>
 8012c76:	4603      	mov	r3, r0
 8012c78:	461a      	mov	r2, r3
 8012c7a:	4b79      	ldr	r3, [pc, #484]	; (8012e60 <LoRaMacMlmeRequest+0x32c>)
 8012c7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                OnMacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 8012c80:	e0bb      	b.n	8012dfa <LoRaMacMlmeRequest+0x2c6>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	791b      	ldrb	r3, [r3, #4]
 8012c86:	2b01      	cmp	r3, #1
 8012c88:	f040 80b7 	bne.w	8012dfa <LoRaMacMlmeRequest+0x2c6>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8012c8c:	4b74      	ldr	r3, [pc, #464]	; (8012e60 <LoRaMacMlmeRequest+0x32c>)
 8012c8e:	2200      	movs	r2, #0
 8012c90:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8012c94:	2302      	movs	r3, #2
 8012c96:	763b      	strb	r3, [r7, #24]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8012c98:	4b71      	ldr	r3, [pc, #452]	; (8012e60 <LoRaMacMlmeRequest+0x32c>)
 8012c9a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012c9e:	f107 020c 	add.w	r2, r7, #12
 8012ca2:	4611      	mov	r1, r2
 8012ca4:	4618      	mov	r0, r3
 8012ca6:	f002 fb2c 	bl	8015302 <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	791a      	ldrb	r2, [r3, #4]
 8012cae:	4b6c      	ldr	r3, [pc, #432]	; (8012e60 <LoRaMacMlmeRequest+0x32c>)
 8012cb0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8012cb4:	2300      	movs	r3, #0
 8012cb6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                queueElement.ReadyToHandle = true;
 8012cba:	2301      	movs	r3, #1
 8012cbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
                OnMacProcessNotify( );
 8012cc0:	f7fe fdb2 	bl	8011828 <OnMacProcessNotify>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8012cc4:	4a65      	ldr	r2, [pc, #404]	; (8012e5c <LoRaMacMlmeRequest+0x328>)
 8012cc6:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8012cca:	f043 0310 	orr.w	r3, r3, #16
 8012cce:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
                status = LORAMAC_STATUS_OK;
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8012cd8:	e08f      	b.n	8012dfa <LoRaMacMlmeRequest+0x2c6>
        }
#endif /* LORAMAC_VERSION */
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8012cda:	2300      	movs	r3, #0
 8012cdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8012ce0:	f107 031c 	add.w	r3, r7, #28
 8012ce4:	2200      	movs	r2, #0
 8012ce6:	4619      	mov	r1, r3
 8012ce8:	2002      	movs	r0, #2
 8012cea:	f000 fd21 	bl	8013730 <LoRaMacCommandsAddCmd>
 8012cee:	4603      	mov	r3, r0
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	f000 8084 	beq.w	8012dfe <LoRaMacMlmeRequest+0x2ca>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012cf6:	2313      	movs	r3, #19
 8012cf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 8012cfc:	e07f      	b.n	8012dfe <LoRaMacMlmeRequest+0x2ca>
            break;
        }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	8898      	ldrh	r0, [r3, #4]
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	6899      	ldr	r1, [r3, #8]
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8012d0c:	b2db      	uxtb	r3, r3
 8012d0e:	461a      	mov	r2, r3
 8012d10:	f7fe fbba 	bl	8011488 <SetTxContinuousWave>
 8012d14:	4603      	mov	r3, r0
 8012d16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8012d1a:	e077      	b.n	8012e0c <LoRaMacMlmeRequest+0x2d8>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8012d1c:	2300      	movs	r3, #0
 8012d1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            MacCommand_t* newCmd;
            /* ST_CODE Begin: Add MAC command condition to prevent some duplicated request */
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 8012d22:	f107 0308 	add.w	r3, r7, #8
 8012d26:	4619      	mov	r1, r3
 8012d28:	200d      	movs	r0, #13
 8012d2a:	f000 fd81 	bl	8013830 <LoRaMacCommandsGetCmd>
 8012d2e:	4603      	mov	r3, r0
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d103      	bne.n	8012d3c <LoRaMacMlmeRequest+0x208>
            {
                status = LORAMAC_STATUS_OK;
 8012d34:	2300      	movs	r3, #0
 8012d36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            /* ST_CODE End */
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
            }
            break;
 8012d3a:	e062      	b.n	8012e02 <LoRaMacMlmeRequest+0x2ce>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8012d3c:	f107 031c 	add.w	r3, r7, #28
 8012d40:	2200      	movs	r2, #0
 8012d42:	4619      	mov	r1, r3
 8012d44:	200d      	movs	r0, #13
 8012d46:	f000 fcf3 	bl	8013730 <LoRaMacCommandsAddCmd>
 8012d4a:	4603      	mov	r3, r0
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d058      	beq.n	8012e02 <LoRaMacMlmeRequest+0x2ce>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012d50:	2313      	movs	r3, #19
 8012d52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8012d56:	e054      	b.n	8012e02 <LoRaMacMlmeRequest+0x2ce>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8012d58:	4b41      	ldr	r3, [pc, #260]	; (8012e60 <LoRaMacMlmeRequest+0x32c>)
 8012d5a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d151      	bne.n	8012e06 <LoRaMacMlmeRequest+0x2d2>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	791b      	ldrb	r3, [r3, #4]
 8012d66:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	791b      	ldrb	r3, [r3, #4]
 8012d6e:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8012d72:	b2db      	uxtb	r3, r3
 8012d74:	4618      	mov	r0, r3
 8012d76:	f000 fb25 	bl	80133c4 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8012d7a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012d7e:	773b      	strb	r3, [r7, #28]
                status = LORAMAC_STATUS_OK;
 8012d80:	2300      	movs	r3, #0
 8012d82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8012d86:	f107 031c 	add.w	r3, r7, #28
 8012d8a:	2201      	movs	r2, #1
 8012d8c:	4619      	mov	r1, r3
 8012d8e:	2010      	movs	r0, #16
 8012d90:	f000 fcce 	bl	8013730 <LoRaMacCommandsAddCmd>
 8012d94:	4603      	mov	r3, r0
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d035      	beq.n	8012e06 <LoRaMacMlmeRequest+0x2d2>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012d9a:	2313      	movs	r3, #19
 8012d9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
            }
            break;
 8012da0:	e031      	b.n	8012e06 <LoRaMacMlmeRequest+0x2d2>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8012da2:	2300      	movs	r3, #0
 8012da4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8012da8:	f107 031c 	add.w	r3, r7, #28
 8012dac:	2200      	movs	r2, #0
 8012dae:	4619      	mov	r1, r3
 8012db0:	2012      	movs	r0, #18
 8012db2:	f000 fcbd 	bl	8013730 <LoRaMacCommandsAddCmd>
 8012db6:	4603      	mov	r3, r0
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d026      	beq.n	8012e0a <LoRaMacMlmeRequest+0x2d6>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012dbc:	2313      	movs	r3, #19
 8012dbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 8012dc2:	e022      	b.n	8012e0a <LoRaMacMlmeRequest+0x2d6>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8012dc4:	2301      	movs	r3, #1
 8012dc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8012dca:	f000 fab1 	bl	8013330 <LoRaMacClassBIsAcquisitionInProgress>
 8012dce:	4603      	mov	r3, r0
 8012dd0:	f083 0301 	eor.w	r3, r3, #1
 8012dd4:	b2db      	uxtb	r3, r3
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d009      	beq.n	8012dee <LoRaMacMlmeRequest+0x2ba>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8012dda:	2000      	movs	r0, #0
 8012ddc:	f000 fa8a 	bl	80132f4 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8012de0:	2000      	movs	r0, #0
 8012de2:	f000 faac 	bl	801333e <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8012de6:	2300      	movs	r3, #0
 8012de8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8012dec:	e00e      	b.n	8012e0c <LoRaMacMlmeRequest+0x2d8>
                status = LORAMAC_STATUS_BUSY;
 8012dee:	2301      	movs	r3, #1
 8012df0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8012df4:	e00a      	b.n	8012e0c <LoRaMacMlmeRequest+0x2d8>
        }
        default:
            break;
 8012df6:	bf00      	nop
 8012df8:	e008      	b.n	8012e0c <LoRaMacMlmeRequest+0x2d8>
            break;
 8012dfa:	bf00      	nop
 8012dfc:	e006      	b.n	8012e0c <LoRaMacMlmeRequest+0x2d8>
            break;
 8012dfe:	bf00      	nop
 8012e00:	e004      	b.n	8012e0c <LoRaMacMlmeRequest+0x2d8>
            break;
 8012e02:	bf00      	nop
 8012e04:	e002      	b.n	8012e0c <LoRaMacMlmeRequest+0x2d8>
            break;
 8012e06:	bf00      	nop
 8012e08:	e000      	b.n	8012e0c <LoRaMacMlmeRequest+0x2d8>
            break;
 8012e0a:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8012e0c:	4b13      	ldr	r3, [pc, #76]	; (8012e5c <LoRaMacMlmeRequest+0x328>)
 8012e0e:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8012e16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d010      	beq.n	8012e40 <LoRaMacMlmeRequest+0x30c>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8012e1e:	f001 f82b 	bl	8013e78 <LoRaMacConfirmQueueGetCnt>
 8012e22:	4603      	mov	r3, r0
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d110      	bne.n	8012e4a <LoRaMacMlmeRequest+0x316>
        {
            MacCtx.NodeAckRequested = false;
 8012e28:	4b0c      	ldr	r3, [pc, #48]	; (8012e5c <LoRaMacMlmeRequest+0x328>)
 8012e2a:	2200      	movs	r2, #0
 8012e2c:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8012e30:	4a0a      	ldr	r2, [pc, #40]	; (8012e5c <LoRaMacMlmeRequest+0x328>)
 8012e32:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8012e36:	f36f 0382 	bfc	r3, #2, #1
 8012e3a:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 8012e3e:	e004      	b.n	8012e4a <LoRaMacMlmeRequest+0x316>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8012e40:	f107 0320 	add.w	r3, r7, #32
 8012e44:	4618      	mov	r0, r3
 8012e46:	f000 fec3 	bl	8013bd0 <LoRaMacConfirmQueueAdd>
    }
    return status;
 8012e4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8012e4e:	4618      	mov	r0, r3
 8012e50:	3728      	adds	r7, #40	; 0x28
 8012e52:	46bd      	mov	sp, r7
 8012e54:	bd80      	pop	{r7, pc}
 8012e56:	bf00      	nop
 8012e58:	20000b94 	.word	0x20000b94
 8012e5c:	20000740 	.word	0x20000740
 8012e60:	20000c5c 	.word	0x20000c5c

08012e64 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8012e64:	b5b0      	push	{r4, r5, r7, lr}
 8012e66:	b092      	sub	sp, #72	; 0x48
 8012e68:	af02      	add	r7, sp, #8
 8012e6a:	6078      	str	r0, [r7, #4]
 8012e6c:	460b      	mov	r3, r1
 8012e6e:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012e70:	2302      	movs	r3, #2
 8012e72:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8012e76:	2300      	movs	r3, #0
 8012e78:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    void* fBuffer = NULL;
 8012e7c:	2300      	movs	r3, #0
 8012e7e:	63bb      	str	r3, [r7, #56]	; 0x38
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8012e80:	2300      	movs	r3, #0
 8012e82:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    bool readyToSend = false;
 8012e86:	2300      	movs	r3, #0
 8012e88:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    if( mcpsRequest == NULL )
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d101      	bne.n	8012e96 <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012e92:	2303      	movs	r3, #3
 8012e94:	e113      	b.n	80130be <LoRaMacMcpsRequest+0x25a>
        }
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	2200      	movs	r2, #0
 8012e9a:	611a      	str	r2, [r3, #16]

    if( LoRaMacIsBusy( ) == true )
 8012e9c:	f7fc f9e2 	bl	800f264 <LoRaMacIsBusy>
 8012ea0:	4603      	mov	r3, r0
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d001      	beq.n	8012eaa <LoRaMacMcpsRequest+0x46>
    {
        return LORAMAC_STATUS_BUSY;
 8012ea6:	2301      	movs	r3, #1
 8012ea8:	e109      	b.n	80130be <LoRaMacMcpsRequest+0x25a>
    }

    McpsReq_t request = *mcpsRequest;
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	f107 040c 	add.w	r4, r7, #12
 8012eb0:	461d      	mov	r5, r3
 8012eb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012eb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012eb6:	682b      	ldr	r3, [r5, #0]
 8012eb8:	6023      	str	r3, [r4, #0]

    macHdr.Value = 0;
 8012eba:	2300      	movs	r3, #0
 8012ebc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8012ec0:	2214      	movs	r2, #20
 8012ec2:	2100      	movs	r1, #0
 8012ec4:	4880      	ldr	r0, [pc, #512]	; (80130c8 <LoRaMacMcpsRequest+0x264>)
 8012ec6:	f006 f821 	bl	8018f0c <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012eca:	4b80      	ldr	r3, [pc, #512]	; (80130cc <LoRaMacMcpsRequest+0x268>)
 8012ecc:	2201      	movs	r2, #1
 8012ece:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441

    // Apply confirmed downlinks, if the device has not received a valid
    // downlink after a join accept.
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 8012ed2:	4b7f      	ldr	r3, [pc, #508]	; (80130d0 <LoRaMacMcpsRequest+0x26c>)
 8012ed4:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8012ed8:	2b02      	cmp	r3, #2
 8012eda:	d111      	bne.n	8012f00 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8012edc:	4b7c      	ldr	r3, [pc, #496]	; (80130d0 <LoRaMacMcpsRequest+0x26c>)
 8012ede:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 8012ee2:	2b02      	cmp	r3, #2
 8012ee4:	d10c      	bne.n	8012f00 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 8012ee6:	4b7a      	ldr	r3, [pc, #488]	; (80130d0 <LoRaMacMcpsRequest+0x26c>)
 8012ee8:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
 8012eec:	f083 0301 	eor.w	r3, r3, #1
 8012ef0:	b2db      	uxtb	r3, r3
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d004      	beq.n	8012f00 <LoRaMacMcpsRequest+0x9c>
        ( request.Type == MCPS_UNCONFIRMED ) )
 8012ef6:	7b3b      	ldrb	r3, [r7, #12]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d101      	bne.n	8012f00 <LoRaMacMcpsRequest+0x9c>
    {
        request.Type = MCPS_CONFIRMED;
 8012efc:	2301      	movs	r3, #1
 8012efe:	733b      	strb	r3, [r7, #12]
    }

    switch( request.Type )
 8012f00:	7b3b      	ldrb	r3, [r7, #12]
 8012f02:	2b03      	cmp	r3, #3
 8012f04:	d030      	beq.n	8012f68 <LoRaMacMcpsRequest+0x104>
 8012f06:	2b03      	cmp	r3, #3
 8012f08:	dc3f      	bgt.n	8012f8a <LoRaMacMcpsRequest+0x126>
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d002      	beq.n	8012f14 <LoRaMacMcpsRequest+0xb0>
 8012f0e:	2b01      	cmp	r3, #1
 8012f10:	d015      	beq.n	8012f3e <LoRaMacMcpsRequest+0xda>
            fBufferSize = request.Req.Proprietary.fBufferSize;
            datarate = request.Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8012f12:	e03a      	b.n	8012f8a <LoRaMacMcpsRequest+0x126>
            readyToSend = true;
 8012f14:	2301      	movs	r3, #1
 8012f16:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8012f1a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012f1e:	2202      	movs	r2, #2
 8012f20:	f362 1347 	bfi	r3, r2, #5, #3
 8012f24:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fPort = request.Req.Unconfirmed.fPort;
 8012f28:	7c3b      	ldrb	r3, [r7, #16]
 8012f2a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            fBuffer = request.Req.Unconfirmed.fBuffer;
 8012f2e:	697b      	ldr	r3, [r7, #20]
 8012f30:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 8012f32:	8b3b      	ldrh	r3, [r7, #24]
 8012f34:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Unconfirmed.Datarate;
 8012f36:	7ebb      	ldrb	r3, [r7, #26]
 8012f38:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8012f3c:	e026      	b.n	8012f8c <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 8012f3e:	2301      	movs	r3, #1
 8012f40:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8012f44:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012f48:	2204      	movs	r2, #4
 8012f4a:	f362 1347 	bfi	r3, r2, #5, #3
 8012f4e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fPort = request.Req.Confirmed.fPort;
 8012f52:	7c3b      	ldrb	r3, [r7, #16]
 8012f54:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            fBuffer = request.Req.Confirmed.fBuffer;
 8012f58:	697b      	ldr	r3, [r7, #20]
 8012f5a:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Confirmed.fBufferSize;
 8012f5c:	8b3b      	ldrh	r3, [r7, #24]
 8012f5e:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Confirmed.Datarate;
 8012f60:	7ebb      	ldrb	r3, [r7, #26]
 8012f62:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8012f66:	e011      	b.n	8012f8c <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 8012f68:	2301      	movs	r3, #1
 8012f6a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8012f6e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012f72:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8012f76:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fBuffer = request.Req.Proprietary.fBuffer;
 8012f7a:	693b      	ldr	r3, [r7, #16]
 8012f7c:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Proprietary.fBufferSize;
 8012f7e:	8abb      	ldrh	r3, [r7, #20]
 8012f80:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Proprietary.Datarate;
 8012f82:	7dbb      	ldrb	r3, [r7, #22]
 8012f84:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8012f88:	e000      	b.n	8012f8c <LoRaMacMcpsRequest+0x128>
            break;
 8012f8a:	bf00      	nop
    }

    // Make sure that the input datarate is compliant
    // to the regional specification.
    getPhy.Attribute = PHY_MIN_TX_DR;
 8012f8c:	2302      	movs	r3, #2
 8012f8e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012f92:	4b4f      	ldr	r3, [pc, #316]	; (80130d0 <LoRaMacMcpsRequest+0x26c>)
 8012f94:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8012f98:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012f9c:	4b4c      	ldr	r3, [pc, #304]	; (80130d0 <LoRaMacMcpsRequest+0x26c>)
 8012f9e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012fa2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8012fa6:	4611      	mov	r1, r2
 8012fa8:	4618      	mov	r0, r3
 8012faa:	f002 f973 	bl	8015294 <RegionGetPhyParam>
 8012fae:	4603      	mov	r3, r0
 8012fb0:	62bb      	str	r3, [r7, #40]	; 0x28
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8012fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fb4:	b25b      	sxtb	r3, r3
 8012fb6:	f997 2035 	ldrsb.w	r2, [r7, #53]	; 0x35
 8012fba:	4293      	cmp	r3, r2
 8012fbc:	bfb8      	it	lt
 8012fbe:	4613      	movlt	r3, r2
 8012fc0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    // Apply minimum datarate in this special case.
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8012fc4:	4b42      	ldr	r3, [pc, #264]	; (80130d0 <LoRaMacMcpsRequest+0x26c>)
 8012fc6:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8012fca:	4a41      	ldr	r2, [pc, #260]	; (80130d0 <LoRaMacMcpsRequest+0x26c>)
 8012fcc:	f892 1130 	ldrb.w	r1, [r2, #304]	; 0x130
 8012fd0:	4a3f      	ldr	r2, [pc, #252]	; (80130d0 <LoRaMacMcpsRequest+0x26c>)
 8012fd2:	f892 211d 	ldrb.w	r2, [r2, #285]	; 0x11d
 8012fd6:	4618      	mov	r0, r3
 8012fd8:	f7fc fae0 	bl	800f59c <CheckForMinimumAbpDatarate>
 8012fdc:	4603      	mov	r3, r0
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d002      	beq.n	8012fe8 <LoRaMacMcpsRequest+0x184>
                                    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true )
    {
        datarate = ( int8_t )phyParam.Value;
 8012fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fe4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if( readyToSend == true )
 8012fe8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d05f      	beq.n	80130b0 <LoRaMacMcpsRequest+0x24c>
    {
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8012ff0:	4b37      	ldr	r3, [pc, #220]	; (80130d0 <LoRaMacMcpsRequest+0x26c>)
 8012ff2:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8012ff6:	f083 0301 	eor.w	r3, r3, #1
 8012ffa:	b2db      	uxtb	r3, r3
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d10e      	bne.n	801301e <LoRaMacMcpsRequest+0x1ba>
            ( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8013000:	4b33      	ldr	r3, [pc, #204]	; (80130d0 <LoRaMacMcpsRequest+0x26c>)
 8013002:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8013006:	4a32      	ldr	r2, [pc, #200]	; (80130d0 <LoRaMacMcpsRequest+0x26c>)
 8013008:	f892 1130 	ldrb.w	r1, [r2, #304]	; 0x130
 801300c:	4a30      	ldr	r2, [pc, #192]	; (80130d0 <LoRaMacMcpsRequest+0x26c>)
 801300e:	f892 211d 	ldrb.w	r2, [r2, #285]	; 0x11d
 8013012:	4618      	mov	r0, r3
 8013014:	f7fc fac2 	bl	800f59c <CheckForMinimumAbpDatarate>
 8013018:	4603      	mov	r3, r0
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 801301a:	2b00      	cmp	r3, #0
 801301c:	d01c      	beq.n	8013058 <LoRaMacMcpsRequest+0x1f4>
                                          Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true ) )
        {
            verify.DatarateParams.Datarate = datarate;
 801301e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8013022:	f887 3020 	strb.w	r3, [r7, #32]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8013026:	4b2a      	ldr	r3, [pc, #168]	; (80130d0 <LoRaMacMcpsRequest+0x26c>)
 8013028:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801302c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8013030:	4b27      	ldr	r3, [pc, #156]	; (80130d0 <LoRaMacMcpsRequest+0x26c>)
 8013032:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013036:	f107 0120 	add.w	r1, r7, #32
 801303a:	2205      	movs	r2, #5
 801303c:	4618      	mov	r0, r3
 801303e:	f002 f977 	bl	8015330 <RegionVerify>
 8013042:	4603      	mov	r3, r0
 8013044:	2b00      	cmp	r3, #0
 8013046:	d005      	beq.n	8013054 <LoRaMacMcpsRequest+0x1f0>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8013048:	f997 2020 	ldrsb.w	r2, [r7, #32]
 801304c:	4b20      	ldr	r3, [pc, #128]	; (80130d0 <LoRaMacMcpsRequest+0x26c>)
 801304e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8013052:	e001      	b.n	8013058 <LoRaMacMcpsRequest+0x1f4>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8013054:	2303      	movs	r3, #3
 8013056:	e032      	b.n	80130be <LoRaMacMcpsRequest+0x25a>
            }
        }

        // Verification of response timeout for class b and class c
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 8013058:	4b1d      	ldr	r3, [pc, #116]	; (80130d0 <LoRaMacMcpsRequest+0x26c>)
 801305a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801305e:	4a1b      	ldr	r2, [pc, #108]	; (80130cc <LoRaMacMcpsRequest+0x268>)
 8013060:	f8d2 2498 	ldr.w	r2, [r2, #1176]	; 0x498
 8013064:	4611      	mov	r1, r2
 8013066:	4618      	mov	r0, r3
 8013068:	f7fc fb84 	bl	800f774 <LoRaMacHandleResponseTimeout>
                                      MacCtx.ResponseTimeoutStartTime );

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 801306c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801306e:	f897 103e 	ldrb.w	r1, [r7, #62]	; 0x3e
 8013072:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8013076:	78fb      	ldrb	r3, [r7, #3]
 8013078:	9300      	str	r3, [sp, #0]
 801307a:	4613      	mov	r3, r2
 801307c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801307e:	f7fd fb23 	bl	80106c8 <Send>
 8013082:	4603      	mov	r3, r0
 8013084:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if( status == LORAMAC_STATUS_OK )
 8013088:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801308c:	2b00      	cmp	r3, #0
 801308e:	d10b      	bne.n	80130a8 <LoRaMacMcpsRequest+0x244>
        {
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 8013090:	7b3a      	ldrb	r2, [r7, #12]
 8013092:	4b0e      	ldr	r3, [pc, #56]	; (80130cc <LoRaMacMcpsRequest+0x268>)
 8013094:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8013098:	4a0c      	ldr	r2, [pc, #48]	; (80130cc <LoRaMacMcpsRequest+0x268>)
 801309a:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 801309e:	f043 0301 	orr.w	r3, r3, #1
 80130a2:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 80130a6:	e003      	b.n	80130b0 <LoRaMacMcpsRequest+0x24c>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 80130a8:	4b08      	ldr	r3, [pc, #32]	; (80130cc <LoRaMacMcpsRequest+0x268>)
 80130aa:	2200      	movs	r2, #0
 80130ac:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80130b0:	4b06      	ldr	r3, [pc, #24]	; (80130cc <LoRaMacMcpsRequest+0x268>)
 80130b2:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	611a      	str	r2, [r3, #16]

    return status;
 80130ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80130be:	4618      	mov	r0, r3
 80130c0:	3740      	adds	r7, #64	; 0x40
 80130c2:	46bd      	mov	sp, r7
 80130c4:	bdb0      	pop	{r4, r5, r7, pc}
 80130c6:	bf00      	nop
 80130c8:	20000b80 	.word	0x20000b80
 80130cc:	20000740 	.word	0x20000740
 80130d0:	20000c5c 	.word	0x20000c5c

080130d4 <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 80130d4:	b580      	push	{r7, lr}
 80130d6:	b084      	sub	sp, #16
 80130d8:	af00      	add	r7, sp, #0
 80130da:	4603      	mov	r3, r0
 80130dc:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 80130de:	79fb      	ldrb	r3, [r7, #7]
 80130e0:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 80130e2:	4b0d      	ldr	r3, [pc, #52]	; (8013118 <LoRaMacTestSetDutyCycleOn+0x44>)
 80130e4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80130e8:	f107 010c 	add.w	r1, r7, #12
 80130ec:	220f      	movs	r2, #15
 80130ee:	4618      	mov	r0, r3
 80130f0:	f002 f91e 	bl	8015330 <RegionVerify>
 80130f4:	4603      	mov	r3, r0
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d00a      	beq.n	8013110 <LoRaMacTestSetDutyCycleOn+0x3c>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 80130fa:	4a07      	ldr	r2, [pc, #28]	; (8013118 <LoRaMacTestSetDutyCycleOn+0x44>)
 80130fc:	79fb      	ldrb	r3, [r7, #7]
 80130fe:	f882 311c 	strb.w	r3, [r2, #284]	; 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8013102:	4a06      	ldr	r2, [pc, #24]	; (801311c <LoRaMacTestSetDutyCycleOn+0x48>)
 8013104:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8013108:	f043 0320 	orr.w	r3, r3, #32
 801310c:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
}
 8013110:	bf00      	nop
 8013112:	3710      	adds	r7, #16
 8013114:	46bd      	mov	sp, r7
 8013116:	bd80      	pop	{r7, pc}
 8013118:	20000c5c 	.word	0x20000c5c
 801311c:	20000740 	.word	0x20000740

08013120 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 8013120:	b580      	push	{r7, lr}
 8013122:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 8013124:	f7fe fe94 	bl	8011e50 <LoRaMacStop>
 8013128:	4603      	mov	r3, r0
 801312a:	2b00      	cmp	r3, #0
 801312c:	d112      	bne.n	8013154 <LoRaMacDeInitialization+0x34>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 801312e:	480b      	ldr	r0, [pc, #44]	; (801315c <LoRaMacDeInitialization+0x3c>)
 8013130:	f00a f84c 	bl	801d1cc <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 8013134:	480a      	ldr	r0, [pc, #40]	; (8013160 <LoRaMacDeInitialization+0x40>)
 8013136:	f00a f849 	bl	801d1cc <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 801313a:	480a      	ldr	r0, [pc, #40]	; (8013164 <LoRaMacDeInitialization+0x44>)
 801313c:	f00a f846 	bl	801d1cc <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 8013140:	f000 f94a 	bl	80133d8 <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( false );
 8013144:	2000      	movs	r0, #0
 8013146:	f7fd fe1d 	bl	8010d84 <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 801314a:	4b07      	ldr	r3, [pc, #28]	; (8013168 <LoRaMacDeInitialization+0x48>)
 801314c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801314e:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 8013150:	2300      	movs	r3, #0
 8013152:	e000      	b.n	8013156 <LoRaMacDeInitialization+0x36>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 8013154:	2301      	movs	r3, #1
    }
}
 8013156:	4618      	mov	r0, r3
 8013158:	bd80      	pop	{r7, pc}
 801315a:	bf00      	nop
 801315c:	20000aa8 	.word	0x20000aa8
 8013160:	20000ac0 	.word	0x20000ac0
 8013164:	20000ad8 	.word	0x20000ad8
 8013168:	0801ea64 	.word	0x0801ea64

0801316c <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 801316c:	b580      	push	{r7, lr}
 801316e:	b08c      	sub	sp, #48	; 0x30
 8013170:	af00      	add	r7, sp, #0
 8013172:	60f8      	str	r0, [r7, #12]
 8013174:	60b9      	str	r1, [r7, #8]
 8013176:	607a      	str	r2, [r7, #4]
 8013178:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 801317a:	2300      	movs	r3, #0
 801317c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	7b1b      	ldrb	r3, [r3, #12]
 8013184:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 8013188:	68fb      	ldr	r3, [r7, #12]
 801318a:	7b5b      	ldrb	r3, [r3, #13]
 801318c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint8_t nbTrans = adrNext->NbTrans;
 8013190:	68fb      	ldr	r3, [r7, #12]
 8013192:	7b9b      	ldrb	r3, [r3, #14]
 8013194:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	685a      	ldr	r2, [r3, #4]
 801319c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801319e:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 80131a0:	68fb      	ldr	r3, [r7, #12]
 80131a2:	785b      	ldrb	r3, [r3, #1]
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	f000 8088 	beq.w	80132ba <LoRaMacAdrCalcNext+0x14e>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 80131aa:	2302      	movs	r3, #2
 80131ac:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80131b0:	68fb      	ldr	r3, [r7, #12]
 80131b2:	7bdb      	ldrb	r3, [r3, #15]
 80131b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	7c1b      	ldrb	r3, [r3, #16]
 80131bc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80131c0:	4611      	mov	r1, r2
 80131c2:	4618      	mov	r0, r3
 80131c4:	f002 f866 	bl	8015294 <RegionGetPhyParam>
 80131c8:	4603      	mov	r3, r0
 80131ca:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 80131cc:	6a3b      	ldr	r3, [r7, #32]
 80131ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        datarate = MAX( datarate, minTxDatarate );
 80131d2:	f997 202b 	ldrsb.w	r2, [r7, #43]	; 0x2b
 80131d6:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80131da:	4293      	cmp	r3, r2
 80131dc:	bfb8      	it	lt
 80131de:	4613      	movlt	r3, r2
 80131e0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        // Verify if ADR ack req bit needs to be set.
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 80131e4:	68fb      	ldr	r3, [r7, #12]
 80131e6:	685b      	ldr	r3, [r3, #4]
 80131e8:	68fa      	ldr	r2, [r7, #12]
 80131ea:	8912      	ldrh	r2, [r2, #8]
 80131ec:	4293      	cmp	r3, r2
 80131ee:	d302      	bcc.n	80131f6 <LoRaMacAdrCalcNext+0x8a>
        {
            adrAckReq = true;
 80131f0:	2301      	movs	r3, #1
 80131f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        // Verify, if we need to set the TX power to default
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 80131f6:	68fb      	ldr	r3, [r7, #12]
 80131f8:	685b      	ldr	r3, [r3, #4]
 80131fa:	68fa      	ldr	r2, [r7, #12]
 80131fc:	8912      	ldrh	r2, [r2, #8]
 80131fe:	4611      	mov	r1, r2
 8013200:	68fa      	ldr	r2, [r7, #12]
 8013202:	8952      	ldrh	r2, [r2, #10]
 8013204:	440a      	add	r2, r1
 8013206:	4293      	cmp	r3, r2
 8013208:	d30f      	bcc.n	801322a <LoRaMacAdrCalcNext+0xbe>
        {
            // Set TX Power to default
            getPhy.Attribute = PHY_DEF_TX_POWER;
 801320a:	230a      	movs	r3, #10
 801320c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8013210:	68fb      	ldr	r3, [r7, #12]
 8013212:	7c1b      	ldrb	r3, [r3, #16]
 8013214:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8013218:	4611      	mov	r1, r2
 801321a:	4618      	mov	r0, r3
 801321c:	f002 f83a 	bl	8015294 <RegionGetPhyParam>
 8013220:	4603      	mov	r3, r0
 8013222:	623b      	str	r3, [r7, #32]
            txPower = phyParam.Value;
 8013224:	6a3b      	ldr	r3, [r7, #32]
 8013226:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        }

        // Verify, if we need to decrease the data rate
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 801322a:	68fb      	ldr	r3, [r7, #12]
 801322c:	685b      	ldr	r3, [r3, #4]
 801322e:	68fa      	ldr	r2, [r7, #12]
 8013230:	8912      	ldrh	r2, [r2, #8]
 8013232:	4611      	mov	r1, r2
 8013234:	68fa      	ldr	r2, [r7, #12]
 8013236:	8952      	ldrh	r2, [r2, #10]
 8013238:	0052      	lsls	r2, r2, #1
 801323a:	440a      	add	r2, r1
 801323c:	4293      	cmp	r3, r2
 801323e:	d33c      	bcc.n	80132ba <LoRaMacAdrCalcNext+0x14e>
        {
            // Perform actions with every adrNext->AdrAckDelay only
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 8013240:	68fb      	ldr	r3, [r7, #12]
 8013242:	685b      	ldr	r3, [r3, #4]
 8013244:	68fa      	ldr	r2, [r7, #12]
 8013246:	8912      	ldrh	r2, [r2, #8]
 8013248:	1a9b      	subs	r3, r3, r2
 801324a:	68fa      	ldr	r2, [r7, #12]
 801324c:	8952      	ldrh	r2, [r2, #10]
 801324e:	fbb3 f1f2 	udiv	r1, r3, r2
 8013252:	fb01 f202 	mul.w	r2, r1, r2
 8013256:	1a9b      	subs	r3, r3, r2
 8013258:	2b00      	cmp	r3, #0
 801325a:	d12e      	bne.n	80132ba <LoRaMacAdrCalcNext+0x14e>
            {
                if( datarate == minTxDatarate )
 801325c:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8013260:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8013264:	429a      	cmp	r2, r3
 8013266:	d110      	bne.n	801328a <LoRaMacAdrCalcNext+0x11e>
                {
                    // Restore the channel mask
                    if( adrNext->UpdateChanMask == true )
 8013268:	68fb      	ldr	r3, [r7, #12]
 801326a:	781b      	ldrb	r3, [r3, #0]
 801326c:	2b00      	cmp	r3, #0
 801326e:	d009      	beq.n	8013284 <LoRaMacAdrCalcNext+0x118>
                    {
                        InitDefaultsParams_t params;
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8013270:	2302      	movs	r3, #2
 8013272:	773b      	strb	r3, [r7, #28]
                        RegionInitDefaults( adrNext->Region, &params );
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	7c1b      	ldrb	r3, [r3, #16]
 8013278:	f107 0210 	add.w	r2, r7, #16
 801327c:	4611      	mov	r1, r2
 801327e:	4618      	mov	r0, r3
 8013280:	f002 f83f 	bl	8015302 <RegionInitDefaults>
                    }

                    // Restore NbTrans
                    nbTrans = 1;
 8013284:	2301      	movs	r3, #1
 8013286:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                // Decrease the datarate
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 801328a:	2321      	movs	r3, #33	; 0x21
 801328c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                getPhy.Datarate = datarate;
 8013290:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8013294:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8013298:	68fb      	ldr	r3, [r7, #12]
 801329a:	7bdb      	ldrb	r3, [r3, #15]
 801329c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80132a0:	68fb      	ldr	r3, [r7, #12]
 80132a2:	7c1b      	ldrb	r3, [r3, #16]
 80132a4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80132a8:	4611      	mov	r1, r2
 80132aa:	4618      	mov	r0, r3
 80132ac:	f001 fff2 	bl	8015294 <RegionGetPhyParam>
 80132b0:	4603      	mov	r3, r0
 80132b2:	623b      	str	r3, [r7, #32]
                datarate = phyParam.Value;
 80132b4:	6a3b      	ldr	r3, [r7, #32]
 80132b6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            }
        }
    }

    *drOut = datarate;
 80132ba:	68bb      	ldr	r3, [r7, #8]
 80132bc:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80132c0:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80132c8:	701a      	strb	r2, [r3, #0]
    *nbTransOut = nbTrans;
 80132ca:	683b      	ldr	r3, [r7, #0]
 80132cc:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80132d0:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 80132d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80132d6:	4618      	mov	r0, r3
 80132d8:	3730      	adds	r7, #48	; 0x30
 80132da:	46bd      	mov	sp, r7
 80132dc:	bd80      	pop	{r7, pc}

080132de <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 80132de:	b480      	push	{r7}
 80132e0:	b085      	sub	sp, #20
 80132e2:	af00      	add	r7, sp, #0
 80132e4:	60f8      	str	r0, [r7, #12]
 80132e6:	60b9      	str	r1, [r7, #8]
 80132e8:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80132ea:	bf00      	nop
 80132ec:	3714      	adds	r7, #20
 80132ee:	46bd      	mov	sp, r7
 80132f0:	bc80      	pop	{r7}
 80132f2:	4770      	bx	lr

080132f4 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 80132f4:	b480      	push	{r7}
 80132f6:	b083      	sub	sp, #12
 80132f8:	af00      	add	r7, sp, #0
 80132fa:	4603      	mov	r3, r0
 80132fc:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80132fe:	bf00      	nop
 8013300:	370c      	adds	r7, #12
 8013302:	46bd      	mov	sp, r7
 8013304:	bc80      	pop	{r7}
 8013306:	4770      	bx	lr

08013308 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8013308:	b480      	push	{r7}
 801330a:	b083      	sub	sp, #12
 801330c:	af00      	add	r7, sp, #0
 801330e:	4603      	mov	r3, r0
 8013310:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013312:	bf00      	nop
 8013314:	370c      	adds	r7, #12
 8013316:	46bd      	mov	sp, r7
 8013318:	bc80      	pop	{r7}
 801331a:	4770      	bx	lr

0801331c <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 801331c:	b480      	push	{r7}
 801331e:	b083      	sub	sp, #12
 8013320:	af00      	add	r7, sp, #0
 8013322:	4603      	mov	r3, r0
 8013324:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013326:	bf00      	nop
 8013328:	370c      	adds	r7, #12
 801332a:	46bd      	mov	sp, r7
 801332c:	bc80      	pop	{r7}
 801332e:	4770      	bx	lr

08013330 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8013330:	b480      	push	{r7}
 8013332:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8013334:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013336:	4618      	mov	r0, r3
 8013338:	46bd      	mov	sp, r7
 801333a:	bc80      	pop	{r7}
 801333c:	4770      	bx	lr

0801333e <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 801333e:	b480      	push	{r7}
 8013340:	b083      	sub	sp, #12
 8013342:	af00      	add	r7, sp, #0
 8013344:	6078      	str	r0, [r7, #4]
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013346:	bf00      	nop
 8013348:	370c      	adds	r7, #12
 801334a:	46bd      	mov	sp, r7
 801334c:	bc80      	pop	{r7}
 801334e:	4770      	bx	lr

08013350 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8013350:	b480      	push	{r7}
 8013352:	b083      	sub	sp, #12
 8013354:	af00      	add	r7, sp, #0
 8013356:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013358:	bf00      	nop
 801335a:	370c      	adds	r7, #12
 801335c:	46bd      	mov	sp, r7
 801335e:	bc80      	pop	{r7}
 8013360:	4770      	bx	lr

08013362 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8013362:	b480      	push	{r7}
 8013364:	b083      	sub	sp, #12
 8013366:	af00      	add	r7, sp, #0
 8013368:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801336a:	bf00      	nop
 801336c:	370c      	adds	r7, #12
 801336e:	46bd      	mov	sp, r7
 8013370:	bc80      	pop	{r7}
 8013372:	4770      	bx	lr

08013374 <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 8013374:	b480      	push	{r7}
 8013376:	b083      	sub	sp, #12
 8013378:	af00      	add	r7, sp, #0
 801337a:	6078      	str	r0, [r7, #4]
 801337c:	460b      	mov	r3, r1
 801337e:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8013380:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013382:	4618      	mov	r0, r3
 8013384:	370c      	adds	r7, #12
 8013386:	46bd      	mov	sp, r7
 8013388:	bc80      	pop	{r7}
 801338a:	4770      	bx	lr

0801338c <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 801338c:	b480      	push	{r7}
 801338e:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8013390:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013392:	4618      	mov	r0, r3
 8013394:	46bd      	mov	sp, r7
 8013396:	bc80      	pop	{r7}
 8013398:	4770      	bx	lr

0801339a <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 801339a:	b480      	push	{r7}
 801339c:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 801339e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80133a0:	4618      	mov	r0, r3
 80133a2:	46bd      	mov	sp, r7
 80133a4:	bc80      	pop	{r7}
 80133a6:	4770      	bx	lr

080133a8 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 80133a8:	b480      	push	{r7}
 80133aa:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80133ac:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80133ae:	4618      	mov	r0, r3
 80133b0:	46bd      	mov	sp, r7
 80133b2:	bc80      	pop	{r7}
 80133b4:	4770      	bx	lr

080133b6 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 80133b6:	b480      	push	{r7}
 80133b8:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80133ba:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80133bc:	4618      	mov	r0, r3
 80133be:	46bd      	mov	sp, r7
 80133c0:	bc80      	pop	{r7}
 80133c2:	4770      	bx	lr

080133c4 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 80133c4:	b480      	push	{r7}
 80133c6:	b083      	sub	sp, #12
 80133c8:	af00      	add	r7, sp, #0
 80133ca:	4603      	mov	r3, r0
 80133cc:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80133ce:	bf00      	nop
 80133d0:	370c      	adds	r7, #12
 80133d2:	46bd      	mov	sp, r7
 80133d4:	bc80      	pop	{r7}
 80133d6:	4770      	bx	lr

080133d8 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 80133d8:	b480      	push	{r7}
 80133da:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80133dc:	bf00      	nop
 80133de:	46bd      	mov	sp, r7
 80133e0:	bc80      	pop	{r7}
 80133e2:	4770      	bx	lr

080133e4 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 80133e4:	b480      	push	{r7}
 80133e6:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80133e8:	bf00      	nop
 80133ea:	46bd      	mov	sp, r7
 80133ec:	bc80      	pop	{r7}
 80133ee:	4770      	bx	lr

080133f0 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 80133f0:	b480      	push	{r7}
 80133f2:	b083      	sub	sp, #12
 80133f4:	af00      	add	r7, sp, #0
 80133f6:	4603      	mov	r3, r0
 80133f8:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80133fa:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80133fc:	4618      	mov	r0, r3
 80133fe:	370c      	adds	r7, #12
 8013400:	46bd      	mov	sp, r7
 8013402:	bc80      	pop	{r7}
 8013404:	4770      	bx	lr

08013406 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8013406:	b480      	push	{r7}
 8013408:	b083      	sub	sp, #12
 801340a:	af00      	add	r7, sp, #0
 801340c:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 801340e:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013410:	4618      	mov	r0, r3
 8013412:	370c      	adds	r7, #12
 8013414:	46bd      	mov	sp, r7
 8013416:	bc80      	pop	{r7}
 8013418:	4770      	bx	lr

0801341a <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 801341a:	b480      	push	{r7}
 801341c:	b083      	sub	sp, #12
 801341e:	af00      	add	r7, sp, #0
 8013420:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013422:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013424:	4618      	mov	r0, r3
 8013426:	370c      	adds	r7, #12
 8013428:	46bd      	mov	sp, r7
 801342a:	bc80      	pop	{r7}
 801342c:	4770      	bx	lr

0801342e <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 801342e:	b480      	push	{r7}
 8013430:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013432:	bf00      	nop
 8013434:	46bd      	mov	sp, r7
 8013436:	bc80      	pop	{r7}
 8013438:	4770      	bx	lr

0801343a <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 801343a:	b480      	push	{r7}
 801343c:	b083      	sub	sp, #12
 801343e:	af00      	add	r7, sp, #0
 8013440:	4603      	mov	r3, r0
 8013442:	6039      	str	r1, [r7, #0]
 8013444:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 8013446:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013448:	4618      	mov	r0, r3
 801344a:	370c      	adds	r7, #12
 801344c:	46bd      	mov	sp, r7
 801344e:	bc80      	pop	{r7}
 8013450:	4770      	bx	lr

08013452 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8013452:	b480      	push	{r7}
 8013454:	b083      	sub	sp, #12
 8013456:	af00      	add	r7, sp, #0
 8013458:	4603      	mov	r3, r0
 801345a:	603a      	str	r2, [r7, #0]
 801345c:	80fb      	strh	r3, [r7, #6]
 801345e:	460b      	mov	r3, r1
 8013460:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013462:	bf00      	nop
 8013464:	370c      	adds	r7, #12
 8013466:	46bd      	mov	sp, r7
 8013468:	bc80      	pop	{r7}
 801346a:	4770      	bx	lr

0801346c <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 801346c:	b480      	push	{r7}
 801346e:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013470:	bf00      	nop
 8013472:	46bd      	mov	sp, r7
 8013474:	bc80      	pop	{r7}
 8013476:	4770      	bx	lr

08013478 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8013478:	b480      	push	{r7}
 801347a:	b083      	sub	sp, #12
 801347c:	af00      	add	r7, sp, #0
 801347e:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 8013480:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013482:	4618      	mov	r0, r3
 8013484:	370c      	adds	r7, #12
 8013486:	46bd      	mov	sp, r7
 8013488:	bc80      	pop	{r7}
 801348a:	4770      	bx	lr

0801348c <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 801348c:	b480      	push	{r7}
 801348e:	b083      	sub	sp, #12
 8013490:	af00      	add	r7, sp, #0
 8013492:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8013494:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013496:	4618      	mov	r0, r3
 8013498:	370c      	adds	r7, #12
 801349a:	46bd      	mov	sp, r7
 801349c:	bc80      	pop	{r7}
 801349e:	4770      	bx	lr

080134a0 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 80134a0:	b480      	push	{r7}
 80134a2:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80134a4:	bf00      	nop
 80134a6:	46bd      	mov	sp, r7
 80134a8:	bc80      	pop	{r7}
 80134aa:	4770      	bx	lr

080134ac <LoRaMacClassBSetFPendingBit>:
#endif /* LORAMAC_CLASSB_ENABLED */
}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
void LoRaMacClassBSetFPendingBit( uint32_t address, uint8_t fPendingSet )
{
 80134ac:	b480      	push	{r7}
 80134ae:	b083      	sub	sp, #12
 80134b0:	af00      	add	r7, sp, #0
 80134b2:	6078      	str	r0, [r7, #4]
 80134b4:	460b      	mov	r3, r1
 80134b6:	70fb      	strb	r3, [r7, #3]
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80134b8:	bf00      	nop
 80134ba:	370c      	adds	r7, #12
 80134bc:	46bd      	mov	sp, r7
 80134be:	bc80      	pop	{r7}
 80134c0:	4770      	bx	lr

080134c2 <LoRaMacClassBProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 80134c2:	b480      	push	{r7}
 80134c4:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80134c6:	bf00      	nop
 80134c8:	46bd      	mov	sp, r7
 80134ca:	bc80      	pop	{r7}
 80134cc:	4770      	bx	lr

080134ce <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 80134ce:	b480      	push	{r7}
 80134d0:	b085      	sub	sp, #20
 80134d2:	af00      	add	r7, sp, #0
 80134d4:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80134da:	2300      	movs	r3, #0
 80134dc:	81fb      	strh	r3, [r7, #14]
 80134de:	e00a      	b.n	80134f6 <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 80134e0:	89fb      	ldrh	r3, [r7, #14]
 80134e2:	68ba      	ldr	r2, [r7, #8]
 80134e4:	4413      	add	r3, r2
 80134e6:	781b      	ldrb	r3, [r3, #0]
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d001      	beq.n	80134f0 <IsSlotFree+0x22>
        {
            return false;
 80134ec:	2300      	movs	r3, #0
 80134ee:	e006      	b.n	80134fe <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80134f0:	89fb      	ldrh	r3, [r7, #14]
 80134f2:	3301      	adds	r3, #1
 80134f4:	81fb      	strh	r3, [r7, #14]
 80134f6:	89fb      	ldrh	r3, [r7, #14]
 80134f8:	2b0f      	cmp	r3, #15
 80134fa:	d9f1      	bls.n	80134e0 <IsSlotFree+0x12>
        }
    }
    return true;
 80134fc:	2301      	movs	r3, #1
}
 80134fe:	4618      	mov	r0, r3
 8013500:	3714      	adds	r7, #20
 8013502:	46bd      	mov	sp, r7
 8013504:	bc80      	pop	{r7}
 8013506:	4770      	bx	lr

08013508 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8013508:	b580      	push	{r7, lr}
 801350a:	b082      	sub	sp, #8
 801350c:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 801350e:	2300      	movs	r3, #0
 8013510:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8013512:	e007      	b.n	8013524 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8013514:	79fb      	ldrb	r3, [r7, #7]
 8013516:	3301      	adds	r3, #1
 8013518:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 801351a:	79fb      	ldrb	r3, [r7, #7]
 801351c:	2b20      	cmp	r3, #32
 801351e:	d101      	bne.n	8013524 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8013520:	2300      	movs	r3, #0
 8013522:	e012      	b.n	801354a <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8013524:	79fb      	ldrb	r3, [r7, #7]
 8013526:	011b      	lsls	r3, r3, #4
 8013528:	3308      	adds	r3, #8
 801352a:	4a0a      	ldr	r2, [pc, #40]	; (8013554 <MallocNewMacCommandSlot+0x4c>)
 801352c:	4413      	add	r3, r2
 801352e:	4618      	mov	r0, r3
 8013530:	f7ff ffcd 	bl	80134ce <IsSlotFree>
 8013534:	4603      	mov	r3, r0
 8013536:	f083 0301 	eor.w	r3, r3, #1
 801353a:	b2db      	uxtb	r3, r3
 801353c:	2b00      	cmp	r3, #0
 801353e:	d1e9      	bne.n	8013514 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8013540:	79fb      	ldrb	r3, [r7, #7]
 8013542:	011b      	lsls	r3, r3, #4
 8013544:	3308      	adds	r3, #8
 8013546:	4a03      	ldr	r2, [pc, #12]	; (8013554 <MallocNewMacCommandSlot+0x4c>)
 8013548:	4413      	add	r3, r2
}
 801354a:	4618      	mov	r0, r3
 801354c:	3708      	adds	r7, #8
 801354e:	46bd      	mov	sp, r7
 8013550:	bd80      	pop	{r7, pc}
 8013552:	bf00      	nop
 8013554:	2000189c 	.word	0x2000189c

08013558 <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8013558:	b580      	push	{r7, lr}
 801355a:	b082      	sub	sp, #8
 801355c:	af00      	add	r7, sp, #0
 801355e:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	2b00      	cmp	r3, #0
 8013564:	d101      	bne.n	801356a <FreeMacCommandSlot+0x12>
    {
        return false;
 8013566:	2300      	movs	r3, #0
 8013568:	e005      	b.n	8013576 <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 801356a:	2210      	movs	r2, #16
 801356c:	2100      	movs	r1, #0
 801356e:	6878      	ldr	r0, [r7, #4]
 8013570:	f005 fccc 	bl	8018f0c <memset1>

    return true;
 8013574:	2301      	movs	r3, #1
}
 8013576:	4618      	mov	r0, r3
 8013578:	3708      	adds	r7, #8
 801357a:	46bd      	mov	sp, r7
 801357c:	bd80      	pop	{r7, pc}

0801357e <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 801357e:	b480      	push	{r7}
 8013580:	b083      	sub	sp, #12
 8013582:	af00      	add	r7, sp, #0
 8013584:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	2b00      	cmp	r3, #0
 801358a:	d101      	bne.n	8013590 <LinkedListInit+0x12>
    {
        return false;
 801358c:	2300      	movs	r3, #0
 801358e:	e006      	b.n	801359e <LinkedListInit+0x20>
    }

    list->First = NULL;
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	2200      	movs	r2, #0
 8013594:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	2200      	movs	r2, #0
 801359a:	605a      	str	r2, [r3, #4]

    return true;
 801359c:	2301      	movs	r3, #1
}
 801359e:	4618      	mov	r0, r3
 80135a0:	370c      	adds	r7, #12
 80135a2:	46bd      	mov	sp, r7
 80135a4:	bc80      	pop	{r7}
 80135a6:	4770      	bx	lr

080135a8 <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 80135a8:	b480      	push	{r7}
 80135aa:	b083      	sub	sp, #12
 80135ac:	af00      	add	r7, sp, #0
 80135ae:	6078      	str	r0, [r7, #4]
 80135b0:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d002      	beq.n	80135be <LinkedListAdd+0x16>
 80135b8:	683b      	ldr	r3, [r7, #0]
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d101      	bne.n	80135c2 <LinkedListAdd+0x1a>
    {
        return false;
 80135be:	2300      	movs	r3, #0
 80135c0:	e015      	b.n	80135ee <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	681b      	ldr	r3, [r3, #0]
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d102      	bne.n	80135d0 <LinkedListAdd+0x28>
    {
        list->First = element;
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	683a      	ldr	r2, [r7, #0]
 80135ce:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	685b      	ldr	r3, [r3, #4]
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d003      	beq.n	80135e0 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	685b      	ldr	r3, [r3, #4]
 80135dc:	683a      	ldr	r2, [r7, #0]
 80135de:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 80135e0:	683b      	ldr	r3, [r7, #0]
 80135e2:	2200      	movs	r2, #0
 80135e4:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	683a      	ldr	r2, [r7, #0]
 80135ea:	605a      	str	r2, [r3, #4]

    return true;
 80135ec:	2301      	movs	r3, #1
}
 80135ee:	4618      	mov	r0, r3
 80135f0:	370c      	adds	r7, #12
 80135f2:	46bd      	mov	sp, r7
 80135f4:	bc80      	pop	{r7}
 80135f6:	4770      	bx	lr

080135f8 <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 80135f8:	b480      	push	{r7}
 80135fa:	b085      	sub	sp, #20
 80135fc:	af00      	add	r7, sp, #0
 80135fe:	6078      	str	r0, [r7, #4]
 8013600:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	2b00      	cmp	r3, #0
 8013606:	d002      	beq.n	801360e <LinkedListGetPrevious+0x16>
 8013608:	683b      	ldr	r3, [r7, #0]
 801360a:	2b00      	cmp	r3, #0
 801360c:	d101      	bne.n	8013612 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 801360e:	2300      	movs	r3, #0
 8013610:	e016      	b.n	8013640 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8013618:	683a      	ldr	r2, [r7, #0]
 801361a:	68fb      	ldr	r3, [r7, #12]
 801361c:	429a      	cmp	r2, r3
 801361e:	d00c      	beq.n	801363a <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8013620:	e002      	b.n	8013628 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8013622:	68fb      	ldr	r3, [r7, #12]
 8013624:	681b      	ldr	r3, [r3, #0]
 8013626:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	2b00      	cmp	r3, #0
 801362c:	d007      	beq.n	801363e <LinkedListGetPrevious+0x46>
 801362e:	68fb      	ldr	r3, [r7, #12]
 8013630:	681b      	ldr	r3, [r3, #0]
 8013632:	683a      	ldr	r2, [r7, #0]
 8013634:	429a      	cmp	r2, r3
 8013636:	d1f4      	bne.n	8013622 <LinkedListGetPrevious+0x2a>
 8013638:	e001      	b.n	801363e <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 801363a:	2300      	movs	r3, #0
 801363c:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 801363e:	68fb      	ldr	r3, [r7, #12]
}
 8013640:	4618      	mov	r0, r3
 8013642:	3714      	adds	r7, #20
 8013644:	46bd      	mov	sp, r7
 8013646:	bc80      	pop	{r7}
 8013648:	4770      	bx	lr

0801364a <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 801364a:	b580      	push	{r7, lr}
 801364c:	b084      	sub	sp, #16
 801364e:	af00      	add	r7, sp, #0
 8013650:	6078      	str	r0, [r7, #4]
 8013652:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	2b00      	cmp	r3, #0
 8013658:	d002      	beq.n	8013660 <LinkedListRemove+0x16>
 801365a:	683b      	ldr	r3, [r7, #0]
 801365c:	2b00      	cmp	r3, #0
 801365e:	d101      	bne.n	8013664 <LinkedListRemove+0x1a>
    {
        return false;
 8013660:	2300      	movs	r3, #0
 8013662:	e020      	b.n	80136a6 <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8013664:	6839      	ldr	r1, [r7, #0]
 8013666:	6878      	ldr	r0, [r7, #4]
 8013668:	f7ff ffc6 	bl	80135f8 <LinkedListGetPrevious>
 801366c:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	681b      	ldr	r3, [r3, #0]
 8013672:	683a      	ldr	r2, [r7, #0]
 8013674:	429a      	cmp	r2, r3
 8013676:	d103      	bne.n	8013680 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8013678:	683b      	ldr	r3, [r7, #0]
 801367a:	681a      	ldr	r2, [r3, #0]
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	685b      	ldr	r3, [r3, #4]
 8013684:	683a      	ldr	r2, [r7, #0]
 8013686:	429a      	cmp	r2, r3
 8013688:	d102      	bne.n	8013690 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	68fa      	ldr	r2, [r7, #12]
 801368e:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	2b00      	cmp	r3, #0
 8013694:	d003      	beq.n	801369e <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 8013696:	683b      	ldr	r3, [r7, #0]
 8013698:	681a      	ldr	r2, [r3, #0]
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 801369e:	683b      	ldr	r3, [r7, #0]
 80136a0:	2200      	movs	r2, #0
 80136a2:	601a      	str	r2, [r3, #0]

    return true;
 80136a4:	2301      	movs	r3, #1
}
 80136a6:	4618      	mov	r0, r3
 80136a8:	3710      	adds	r7, #16
 80136aa:	46bd      	mov	sp, r7
 80136ac:	bd80      	pop	{r7, pc}
	...

080136b0 <IsSticky>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 80136b0:	b480      	push	{r7}
 80136b2:	b083      	sub	sp, #12
 80136b4:	af00      	add	r7, sp, #0
 80136b6:	4603      	mov	r3, r0
 80136b8:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 80136ba:	79fb      	ldrb	r3, [r7, #7]
 80136bc:	2b11      	cmp	r3, #17
 80136be:	bf8c      	ite	hi
 80136c0:	2201      	movhi	r2, #1
 80136c2:	2200      	movls	r2, #0
 80136c4:	b2d2      	uxtb	r2, r2
 80136c6:	2a00      	cmp	r2, #0
 80136c8:	d10d      	bne.n	80136e6 <IsSticky+0x36>
 80136ca:	4a0a      	ldr	r2, [pc, #40]	; (80136f4 <IsSticky+0x44>)
 80136cc:	fa22 f303 	lsr.w	r3, r2, r3
 80136d0:	f003 0301 	and.w	r3, r3, #1
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	bf14      	ite	ne
 80136d8:	2301      	movne	r3, #1
 80136da:	2300      	moveq	r3, #0
 80136dc:	b2db      	uxtb	r3, r3
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d001      	beq.n	80136e6 <IsSticky+0x36>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 80136e2:	2301      	movs	r3, #1
 80136e4:	e000      	b.n	80136e8 <IsSticky+0x38>
        default:
            return false;
 80136e6:	2300      	movs	r3, #0
    }
}
 80136e8:	4618      	mov	r0, r3
 80136ea:	370c      	adds	r7, #12
 80136ec:	46bd      	mov	sp, r7
 80136ee:	bc80      	pop	{r7}
 80136f0:	4770      	bx	lr
 80136f2:	bf00      	nop
 80136f4:	00020720 	.word	0x00020720

080136f8 <IsConfirmationRequired>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsConfirmationRequired( uint8_t cid )
{
 80136f8:	b480      	push	{r7}
 80136fa:	b083      	sub	sp, #12
 80136fc:	af00      	add	r7, sp, #0
 80136fe:	4603      	mov	r3, r0
 8013700:	71fb      	strb	r3, [r7, #7]
        case MOTE_MAC_REKEY_IND:
        case MOTE_MAC_DEVICE_MODE_IND:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
 8013702:	2300      	movs	r3, #0
    }
}
 8013704:	4618      	mov	r0, r3
 8013706:	370c      	adds	r7, #12
 8013708:	46bd      	mov	sp, r7
 801370a:	bc80      	pop	{r7}
 801370c:	4770      	bx	lr
	...

08013710 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8013710:	b580      	push	{r7, lr}
 8013712:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8013714:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8013718:	2100      	movs	r1, #0
 801371a:	4804      	ldr	r0, [pc, #16]	; (801372c <LoRaMacCommandsInit+0x1c>)
 801371c:	f005 fbf6 	bl	8018f0c <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8013720:	4802      	ldr	r0, [pc, #8]	; (801372c <LoRaMacCommandsInit+0x1c>)
 8013722:	f7ff ff2c 	bl	801357e <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 8013726:	2300      	movs	r3, #0
}
 8013728:	4618      	mov	r0, r3
 801372a:	bd80      	pop	{r7, pc}
 801372c:	2000189c 	.word	0x2000189c

08013730 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8013730:	b580      	push	{r7, lr}
 8013732:	b086      	sub	sp, #24
 8013734:	af00      	add	r7, sp, #0
 8013736:	4603      	mov	r3, r0
 8013738:	60b9      	str	r1, [r7, #8]
 801373a:	607a      	str	r2, [r7, #4]
 801373c:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 801373e:	68bb      	ldr	r3, [r7, #8]
 8013740:	2b00      	cmp	r3, #0
 8013742:	d101      	bne.n	8013748 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8013744:	2301      	movs	r3, #1
 8013746:	e03b      	b.n	80137c0 <LoRaMacCommandsAddCmd+0x90>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8013748:	f7ff fede 	bl	8013508 <MallocNewMacCommandSlot>
 801374c:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 801374e:	697b      	ldr	r3, [r7, #20]
 8013750:	2b00      	cmp	r3, #0
 8013752:	d101      	bne.n	8013758 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8013754:	2302      	movs	r3, #2
 8013756:	e033      	b.n	80137c0 <LoRaMacCommandsAddCmd+0x90>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8013758:	6979      	ldr	r1, [r7, #20]
 801375a:	481b      	ldr	r0, [pc, #108]	; (80137c8 <LoRaMacCommandsAddCmd+0x98>)
 801375c:	f7ff ff24 	bl	80135a8 <LinkedListAdd>
 8013760:	4603      	mov	r3, r0
 8013762:	f083 0301 	eor.w	r3, r3, #1
 8013766:	b2db      	uxtb	r3, r3
 8013768:	2b00      	cmp	r3, #0
 801376a:	d001      	beq.n	8013770 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 801376c:	2305      	movs	r3, #5
 801376e:	e027      	b.n	80137c0 <LoRaMacCommandsAddCmd+0x90>
    }

    // Set Values
    newCmd->CID = cid;
 8013770:	697b      	ldr	r3, [r7, #20]
 8013772:	7bfa      	ldrb	r2, [r7, #15]
 8013774:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8013776:	697b      	ldr	r3, [r7, #20]
 8013778:	687a      	ldr	r2, [r7, #4]
 801377a:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 801377c:	697b      	ldr	r3, [r7, #20]
 801377e:	3305      	adds	r3, #5
 8013780:	687a      	ldr	r2, [r7, #4]
 8013782:	b292      	uxth	r2, r2
 8013784:	68b9      	ldr	r1, [r7, #8]
 8013786:	4618      	mov	r0, r3
 8013788:	f005 fb85 	bl	8018e96 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 801378c:	7bfb      	ldrb	r3, [r7, #15]
 801378e:	4618      	mov	r0, r3
 8013790:	f7ff ff8e 	bl	80136b0 <IsSticky>
 8013794:	4603      	mov	r3, r0
 8013796:	461a      	mov	r2, r3
 8013798:	697b      	ldr	r3, [r7, #20]
 801379a:	731a      	strb	r2, [r3, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 801379c:	7bfb      	ldrb	r3, [r7, #15]
 801379e:	4618      	mov	r0, r3
 80137a0:	f7ff ffaa 	bl	80136f8 <IsConfirmationRequired>
 80137a4:	4603      	mov	r3, r0
 80137a6:	461a      	mov	r2, r3
 80137a8:	697b      	ldr	r3, [r7, #20]
 80137aa:	735a      	strb	r2, [r3, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 80137ac:	4b06      	ldr	r3, [pc, #24]	; (80137c8 <LoRaMacCommandsAddCmd+0x98>)
 80137ae:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	4413      	add	r3, r2
 80137b6:	3301      	adds	r3, #1
 80137b8:	4a03      	ldr	r2, [pc, #12]	; (80137c8 <LoRaMacCommandsAddCmd+0x98>)
 80137ba:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 80137be:	2300      	movs	r3, #0
}
 80137c0:	4618      	mov	r0, r3
 80137c2:	3718      	adds	r7, #24
 80137c4:	46bd      	mov	sp, r7
 80137c6:	bd80      	pop	{r7, pc}
 80137c8:	2000189c 	.word	0x2000189c

080137cc <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 80137cc:	b580      	push	{r7, lr}
 80137ce:	b082      	sub	sp, #8
 80137d0:	af00      	add	r7, sp, #0
 80137d2:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d101      	bne.n	80137de <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80137da:	2301      	movs	r3, #1
 80137dc:	e021      	b.n	8013822 <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 80137de:	6879      	ldr	r1, [r7, #4]
 80137e0:	4812      	ldr	r0, [pc, #72]	; (801382c <LoRaMacCommandsRemoveCmd+0x60>)
 80137e2:	f7ff ff32 	bl	801364a <LinkedListRemove>
 80137e6:	4603      	mov	r3, r0
 80137e8:	f083 0301 	eor.w	r3, r3, #1
 80137ec:	b2db      	uxtb	r3, r3
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d001      	beq.n	80137f6 <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 80137f2:	2303      	movs	r3, #3
 80137f4:	e015      	b.n	8013822 <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 80137f6:	4b0d      	ldr	r3, [pc, #52]	; (801382c <LoRaMacCommandsRemoveCmd+0x60>)
 80137f8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	689b      	ldr	r3, [r3, #8]
 8013800:	1ad3      	subs	r3, r2, r3
 8013802:	3b01      	subs	r3, #1
 8013804:	4a09      	ldr	r2, [pc, #36]	; (801382c <LoRaMacCommandsRemoveCmd+0x60>)
 8013806:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 801380a:	6878      	ldr	r0, [r7, #4]
 801380c:	f7ff fea4 	bl	8013558 <FreeMacCommandSlot>
 8013810:	4603      	mov	r3, r0
 8013812:	f083 0301 	eor.w	r3, r3, #1
 8013816:	b2db      	uxtb	r3, r3
 8013818:	2b00      	cmp	r3, #0
 801381a:	d001      	beq.n	8013820 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 801381c:	2305      	movs	r3, #5
 801381e:	e000      	b.n	8013822 <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8013820:	2300      	movs	r3, #0
}
 8013822:	4618      	mov	r0, r3
 8013824:	3708      	adds	r7, #8
 8013826:	46bd      	mov	sp, r7
 8013828:	bd80      	pop	{r7, pc}
 801382a:	bf00      	nop
 801382c:	2000189c 	.word	0x2000189c

08013830 <LoRaMacCommandsGetCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
 8013830:	b480      	push	{r7}
 8013832:	b085      	sub	sp, #20
 8013834:	af00      	add	r7, sp, #0
 8013836:	4603      	mov	r3, r0
 8013838:	6039      	str	r1, [r7, #0]
 801383a:	71fb      	strb	r3, [r7, #7]
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 801383c:	4b0e      	ldr	r3, [pc, #56]	; (8013878 <LoRaMacCommandsGetCmd+0x48>)
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	60fb      	str	r3, [r7, #12]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8013842:	e002      	b.n	801384a <LoRaMacCommandsGetCmd+0x1a>
    {
        curElement = curElement->Next;
 8013844:	68fb      	ldr	r3, [r7, #12]
 8013846:	681b      	ldr	r3, [r3, #0]
 8013848:	60fb      	str	r3, [r7, #12]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 801384a:	68fb      	ldr	r3, [r7, #12]
 801384c:	2b00      	cmp	r3, #0
 801384e:	d004      	beq.n	801385a <LoRaMacCommandsGetCmd+0x2a>
 8013850:	68fb      	ldr	r3, [r7, #12]
 8013852:	791b      	ldrb	r3, [r3, #4]
 8013854:	79fa      	ldrb	r2, [r7, #7]
 8013856:	429a      	cmp	r2, r3
 8013858:	d1f4      	bne.n	8013844 <LoRaMacCommandsGetCmd+0x14>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 801385a:	683b      	ldr	r3, [r7, #0]
 801385c:	68fa      	ldr	r2, [r7, #12]
 801385e:	601a      	str	r2, [r3, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	2b00      	cmp	r3, #0
 8013864:	d101      	bne.n	801386a <LoRaMacCommandsGetCmd+0x3a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8013866:	2303      	movs	r3, #3
 8013868:	e000      	b.n	801386c <LoRaMacCommandsGetCmd+0x3c>
    }
    return LORAMAC_COMMANDS_SUCCESS;
 801386a:	2300      	movs	r3, #0
}
 801386c:	4618      	mov	r0, r3
 801386e:	3714      	adds	r7, #20
 8013870:	46bd      	mov	sp, r7
 8013872:	bc80      	pop	{r7}
 8013874:	4770      	bx	lr
 8013876:	bf00      	nop
 8013878:	2000189c 	.word	0x2000189c

0801387c <LoRaMacCommandsRemoveNoneStickyCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 801387c:	b580      	push	{r7, lr}
 801387e:	b082      	sub	sp, #8
 8013880:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8013882:	4b0f      	ldr	r3, [pc, #60]	; (80138c0 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8013884:	681b      	ldr	r3, [r3, #0]
 8013886:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8013888:	e012      	b.n	80138b0 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	7b1b      	ldrb	r3, [r3, #12]
 801388e:	f083 0301 	eor.w	r3, r3, #1
 8013892:	b2db      	uxtb	r3, r3
 8013894:	2b00      	cmp	r3, #0
 8013896:	d008      	beq.n	80138aa <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	681b      	ldr	r3, [r3, #0]
 801389c:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 801389e:	6878      	ldr	r0, [r7, #4]
 80138a0:	f7ff ff94 	bl	80137cc <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 80138a4:	683b      	ldr	r3, [r7, #0]
 80138a6:	607b      	str	r3, [r7, #4]
 80138a8:	e002      	b.n	80138b0 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	681b      	ldr	r3, [r3, #0]
 80138ae:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d1e9      	bne.n	801388a <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80138b6:	2300      	movs	r3, #0
}
 80138b8:	4618      	mov	r0, r3
 80138ba:	3708      	adds	r7, #8
 80138bc:	46bd      	mov	sp, r7
 80138be:	bd80      	pop	{r7, pc}
 80138c0:	2000189c 	.word	0x2000189c

080138c4 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 80138c4:	b580      	push	{r7, lr}
 80138c6:	b082      	sub	sp, #8
 80138c8:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80138ca:	4b13      	ldr	r3, [pc, #76]	; (8013918 <LoRaMacCommandsRemoveStickyAnsCmds+0x54>)
 80138cc:	681b      	ldr	r3, [r3, #0]
 80138ce:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 80138d0:	e01a      	b.n	8013908 <LoRaMacCommandsRemoveStickyAnsCmds+0x44>
    {
        nexElement = curElement->Next;
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	603b      	str	r3, [r7, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	791b      	ldrb	r3, [r3, #4]
 80138dc:	4618      	mov	r0, r3
 80138de:	f7ff fee7 	bl	80136b0 <IsSticky>
 80138e2:	4603      	mov	r3, r0
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d00d      	beq.n	8013904 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	791b      	ldrb	r3, [r3, #4]
 80138ec:	4618      	mov	r0, r3
 80138ee:	f7ff ff03 	bl	80136f8 <IsConfirmationRequired>
 80138f2:	4603      	mov	r3, r0
 80138f4:	f083 0301 	eor.w	r3, r3, #1
 80138f8:	b2db      	uxtb	r3, r3
        if( ( IsSticky( curElement->CID ) == true ) &&
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d002      	beq.n	8013904 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 80138fe:	6878      	ldr	r0, [r7, #4]
 8013900:	f7ff ff64 	bl	80137cc <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8013904:	683b      	ldr	r3, [r7, #0]
 8013906:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	2b00      	cmp	r3, #0
 801390c:	d1e1      	bne.n	80138d2 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 801390e:	2300      	movs	r3, #0
}
 8013910:	4618      	mov	r0, r3
 8013912:	3708      	adds	r7, #8
 8013914:	46bd      	mov	sp, r7
 8013916:	bd80      	pop	{r7, pc}
 8013918:	2000189c 	.word	0x2000189c

0801391c <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 801391c:	b480      	push	{r7}
 801391e:	b083      	sub	sp, #12
 8013920:	af00      	add	r7, sp, #0
 8013922:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	2b00      	cmp	r3, #0
 8013928:	d101      	bne.n	801392e <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801392a:	2301      	movs	r3, #1
 801392c:	e005      	b.n	801393a <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 801392e:	4b05      	ldr	r3, [pc, #20]	; (8013944 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8013930:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8013938:	2300      	movs	r3, #0
}
 801393a:	4618      	mov	r0, r3
 801393c:	370c      	adds	r7, #12
 801393e:	46bd      	mov	sp, r7
 8013940:	bc80      	pop	{r7}
 8013942:	4770      	bx	lr
 8013944:	2000189c 	.word	0x2000189c

08013948 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8013948:	b580      	push	{r7, lr}
 801394a:	b088      	sub	sp, #32
 801394c:	af00      	add	r7, sp, #0
 801394e:	60f8      	str	r0, [r7, #12]
 8013950:	60b9      	str	r1, [r7, #8]
 8013952:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8013954:	4b25      	ldr	r3, [pc, #148]	; (80139ec <LoRaMacCommandsSerializeCmds+0xa4>)
 8013956:	681b      	ldr	r3, [r3, #0]
 8013958:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 801395a:	2300      	movs	r3, #0
 801395c:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	2b00      	cmp	r3, #0
 8013962:	d002      	beq.n	801396a <LoRaMacCommandsSerializeCmds+0x22>
 8013964:	68bb      	ldr	r3, [r7, #8]
 8013966:	2b00      	cmp	r3, #0
 8013968:	d126      	bne.n	80139b8 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801396a:	2301      	movs	r3, #1
 801396c:	e039      	b.n	80139e2 <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 801396e:	7efb      	ldrb	r3, [r7, #27]
 8013970:	68fa      	ldr	r2, [r7, #12]
 8013972:	1ad2      	subs	r2, r2, r3
 8013974:	69fb      	ldr	r3, [r7, #28]
 8013976:	689b      	ldr	r3, [r3, #8]
 8013978:	3301      	adds	r3, #1
 801397a:	429a      	cmp	r2, r3
 801397c:	d320      	bcc.n	80139c0 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 801397e:	7efb      	ldrb	r3, [r7, #27]
 8013980:	1c5a      	adds	r2, r3, #1
 8013982:	76fa      	strb	r2, [r7, #27]
 8013984:	461a      	mov	r2, r3
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	4413      	add	r3, r2
 801398a:	69fa      	ldr	r2, [r7, #28]
 801398c:	7912      	ldrb	r2, [r2, #4]
 801398e:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8013990:	7efb      	ldrb	r3, [r7, #27]
 8013992:	687a      	ldr	r2, [r7, #4]
 8013994:	18d0      	adds	r0, r2, r3
 8013996:	69fb      	ldr	r3, [r7, #28]
 8013998:	1d59      	adds	r1, r3, #5
 801399a:	69fb      	ldr	r3, [r7, #28]
 801399c:	689b      	ldr	r3, [r3, #8]
 801399e:	b29b      	uxth	r3, r3
 80139a0:	461a      	mov	r2, r3
 80139a2:	f005 fa78 	bl	8018e96 <memcpy1>
            itr += curElement->PayloadSize;
 80139a6:	69fb      	ldr	r3, [r7, #28]
 80139a8:	689b      	ldr	r3, [r3, #8]
 80139aa:	b2da      	uxtb	r2, r3
 80139ac:	7efb      	ldrb	r3, [r7, #27]
 80139ae:	4413      	add	r3, r2
 80139b0:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 80139b2:	69fb      	ldr	r3, [r7, #28]
 80139b4:	681b      	ldr	r3, [r3, #0]
 80139b6:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80139b8:	69fb      	ldr	r3, [r7, #28]
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d1d7      	bne.n	801396e <LoRaMacCommandsSerializeCmds+0x26>
 80139be:	e009      	b.n	80139d4 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 80139c0:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 80139c2:	e007      	b.n	80139d4 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 80139c4:	69fb      	ldr	r3, [r7, #28]
 80139c6:	681b      	ldr	r3, [r3, #0]
 80139c8:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 80139ca:	69f8      	ldr	r0, [r7, #28]
 80139cc:	f7ff fefe 	bl	80137cc <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 80139d0:	697b      	ldr	r3, [r7, #20]
 80139d2:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80139d4:	69fb      	ldr	r3, [r7, #28]
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	d1f4      	bne.n	80139c4 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 80139da:	68b8      	ldr	r0, [r7, #8]
 80139dc:	f7ff ff9e 	bl	801391c <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 80139e0:	2300      	movs	r3, #0
}
 80139e2:	4618      	mov	r0, r3
 80139e4:	3720      	adds	r7, #32
 80139e6:	46bd      	mov	sp, r7
 80139e8:	bd80      	pop	{r7, pc}
 80139ea:	bf00      	nop
 80139ec:	2000189c 	.word	0x2000189c

080139f0 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 80139f0:	b480      	push	{r7}
 80139f2:	b085      	sub	sp, #20
 80139f4:	af00      	add	r7, sp, #0
 80139f6:	4603      	mov	r3, r0
 80139f8:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 80139fa:	2300      	movs	r3, #0
 80139fc:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 80139fe:	79fb      	ldrb	r3, [r7, #7]
 8013a00:	3b02      	subs	r3, #2
 8013a02:	2b11      	cmp	r3, #17
 8013a04:	d850      	bhi.n	8013aa8 <LoRaMacCommandsGetCmdSize+0xb8>
 8013a06:	a201      	add	r2, pc, #4	; (adr r2, 8013a0c <LoRaMacCommandsGetCmdSize+0x1c>)
 8013a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a0c:	08013a55 	.word	0x08013a55
 8013a10:	08013a5b 	.word	0x08013a5b
 8013a14:	08013a61 	.word	0x08013a61
 8013a18:	08013a67 	.word	0x08013a67
 8013a1c:	08013a6d 	.word	0x08013a6d
 8013a20:	08013a73 	.word	0x08013a73
 8013a24:	08013a79 	.word	0x08013a79
 8013a28:	08013a7f 	.word	0x08013a7f
 8013a2c:	08013a85 	.word	0x08013a85
 8013a30:	08013aa9 	.word	0x08013aa9
 8013a34:	08013aa9 	.word	0x08013aa9
 8013a38:	08013a8b 	.word	0x08013a8b
 8013a3c:	08013aa9 	.word	0x08013aa9
 8013a40:	08013aa9 	.word	0x08013aa9
 8013a44:	08013a91 	.word	0x08013a91
 8013a48:	08013a97 	.word	0x08013a97
 8013a4c:	08013a9d 	.word	0x08013a9d
 8013a50:	08013aa3 	.word	0x08013aa3
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8013a54:	2303      	movs	r3, #3
 8013a56:	73fb      	strb	r3, [r7, #15]
            break;
 8013a58:	e027      	b.n	8013aaa <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8013a5a:	2305      	movs	r3, #5
 8013a5c:	73fb      	strb	r3, [r7, #15]
            break;
 8013a5e:	e024      	b.n	8013aaa <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8013a60:	2302      	movs	r3, #2
 8013a62:	73fb      	strb	r3, [r7, #15]
            break;
 8013a64:	e021      	b.n	8013aaa <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 8013a66:	2305      	movs	r3, #5
 8013a68:	73fb      	strb	r3, [r7, #15]
            break;
 8013a6a:	e01e      	b.n	8013aaa <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8013a6c:	2301      	movs	r3, #1
 8013a6e:	73fb      	strb	r3, [r7, #15]
            break;
 8013a70:	e01b      	b.n	8013aaa <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8013a72:	2306      	movs	r3, #6
 8013a74:	73fb      	strb	r3, [r7, #15]
            break;
 8013a76:	e018      	b.n	8013aaa <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8013a78:	2302      	movs	r3, #2
 8013a7a:	73fb      	strb	r3, [r7, #15]
            break;
 8013a7c:	e015      	b.n	8013aaa <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8013a7e:	2302      	movs	r3, #2
 8013a80:	73fb      	strb	r3, [r7, #15]
            break;
 8013a82:	e012      	b.n	8013aaa <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8013a84:	2305      	movs	r3, #5
 8013a86:	73fb      	strb	r3, [r7, #15]
            break;
 8013a88:	e00f      	b.n	8013aaa <LoRaMacCommandsGetCmdSize+0xba>
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8013a8a:	2306      	movs	r3, #6
 8013a8c:	73fb      	strb	r3, [r7, #15]
            break;
 8013a8e:	e00c      	b.n	8013aaa <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8013a90:	2301      	movs	r3, #1
 8013a92:	73fb      	strb	r3, [r7, #15]
            break;
 8013a94:	e009      	b.n	8013aaa <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8013a96:	2305      	movs	r3, #5
 8013a98:	73fb      	strb	r3, [r7, #15]
            break;
 8013a9a:	e006      	b.n	8013aaa <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8013a9c:	2304      	movs	r3, #4
 8013a9e:	73fb      	strb	r3, [r7, #15]
            break;
 8013aa0:	e003      	b.n	8013aaa <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8013aa2:	2304      	movs	r3, #4
 8013aa4:	73fb      	strb	r3, [r7, #15]
            break;
 8013aa6:	e000      	b.n	8013aaa <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8013aa8:	bf00      	nop
        }
    }
    return cidSize;
 8013aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8013aac:	4618      	mov	r0, r3
 8013aae:	3714      	adds	r7, #20
 8013ab0:	46bd      	mov	sp, r7
 8013ab2:	bc80      	pop	{r7}
 8013ab4:	4770      	bx	lr
 8013ab6:	bf00      	nop

08013ab8 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8013ab8:	b480      	push	{r7}
 8013aba:	b083      	sub	sp, #12
 8013abc:	af00      	add	r7, sp, #0
 8013abe:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	4a07      	ldr	r2, [pc, #28]	; (8013ae0 <IncreaseBufferPointer+0x28>)
 8013ac4:	4293      	cmp	r3, r2
 8013ac6:	d102      	bne.n	8013ace <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8013ac8:	4b06      	ldr	r3, [pc, #24]	; (8013ae4 <IncreaseBufferPointer+0x2c>)
 8013aca:	607b      	str	r3, [r7, #4]
 8013acc:	e002      	b.n	8013ad4 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	3304      	adds	r3, #4
 8013ad2:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8013ad4:	687b      	ldr	r3, [r7, #4]
}
 8013ad6:	4618      	mov	r0, r3
 8013ad8:	370c      	adds	r7, #12
 8013ada:	46bd      	mov	sp, r7
 8013adc:	bc80      	pop	{r7}
 8013ade:	4770      	bx	lr
 8013ae0:	20001ac4 	.word	0x20001ac4
 8013ae4:	20001ab4 	.word	0x20001ab4

08013ae8 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8013ae8:	b480      	push	{r7}
 8013aea:	b083      	sub	sp, #12
 8013aec:	af00      	add	r7, sp, #0
 8013aee:	4603      	mov	r3, r0
 8013af0:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8013af2:	79fb      	ldrb	r3, [r7, #7]
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d101      	bne.n	8013afc <IsListEmpty+0x14>
    {
        return true;
 8013af8:	2301      	movs	r3, #1
 8013afa:	e000      	b.n	8013afe <IsListEmpty+0x16>
    }
    return false;
 8013afc:	2300      	movs	r3, #0
}
 8013afe:	4618      	mov	r0, r3
 8013b00:	370c      	adds	r7, #12
 8013b02:	46bd      	mov	sp, r7
 8013b04:	bc80      	pop	{r7}
 8013b06:	4770      	bx	lr

08013b08 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8013b08:	b480      	push	{r7}
 8013b0a:	b083      	sub	sp, #12
 8013b0c:	af00      	add	r7, sp, #0
 8013b0e:	4603      	mov	r3, r0
 8013b10:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8013b12:	79fb      	ldrb	r3, [r7, #7]
 8013b14:	2b04      	cmp	r3, #4
 8013b16:	d901      	bls.n	8013b1c <IsListFull+0x14>
    {
        return true;
 8013b18:	2301      	movs	r3, #1
 8013b1a:	e000      	b.n	8013b1e <IsListFull+0x16>
    }
    return false;
 8013b1c:	2300      	movs	r3, #0
}
 8013b1e:	4618      	mov	r0, r3
 8013b20:	370c      	adds	r7, #12
 8013b22:	46bd      	mov	sp, r7
 8013b24:	bc80      	pop	{r7}
 8013b26:	4770      	bx	lr

08013b28 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8013b28:	b580      	push	{r7, lr}
 8013b2a:	b086      	sub	sp, #24
 8013b2c:	af00      	add	r7, sp, #0
 8013b2e:	4603      	mov	r3, r0
 8013b30:	60b9      	str	r1, [r7, #8]
 8013b32:	607a      	str	r2, [r7, #4]
 8013b34:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 8013b36:	68bb      	ldr	r3, [r7, #8]
 8013b38:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013b3a:	4b13      	ldr	r3, [pc, #76]	; (8013b88 <GetElement+0x60>)
 8013b3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013b40:	4618      	mov	r0, r3
 8013b42:	f7ff ffd1 	bl	8013ae8 <IsListEmpty>
 8013b46:	4603      	mov	r3, r0
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d001      	beq.n	8013b50 <GetElement+0x28>
    {
        return NULL;
 8013b4c:	2300      	movs	r3, #0
 8013b4e:	e017      	b.n	8013b80 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8013b50:	2300      	movs	r3, #0
 8013b52:	74fb      	strb	r3, [r7, #19]
 8013b54:	e00d      	b.n	8013b72 <GetElement+0x4a>
    {
        if( element->Request == request )
 8013b56:	697b      	ldr	r3, [r7, #20]
 8013b58:	781b      	ldrb	r3, [r3, #0]
 8013b5a:	7bfa      	ldrb	r2, [r7, #15]
 8013b5c:	429a      	cmp	r2, r3
 8013b5e:	d101      	bne.n	8013b64 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8013b60:	697b      	ldr	r3, [r7, #20]
 8013b62:	e00d      	b.n	8013b80 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8013b64:	6978      	ldr	r0, [r7, #20]
 8013b66:	f7ff ffa7 	bl	8013ab8 <IncreaseBufferPointer>
 8013b6a:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8013b6c:	7cfb      	ldrb	r3, [r7, #19]
 8013b6e:	3301      	adds	r3, #1
 8013b70:	74fb      	strb	r3, [r7, #19]
 8013b72:	4b05      	ldr	r3, [pc, #20]	; (8013b88 <GetElement+0x60>)
 8013b74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013b78:	7cfa      	ldrb	r2, [r7, #19]
 8013b7a:	429a      	cmp	r2, r3
 8013b7c:	d3eb      	bcc.n	8013b56 <GetElement+0x2e>
    }

    return NULL;
 8013b7e:	2300      	movs	r3, #0
}
 8013b80:	4618      	mov	r0, r3
 8013b82:	3718      	adds	r7, #24
 8013b84:	46bd      	mov	sp, r7
 8013b86:	bd80      	pop	{r7, pc}
 8013b88:	20001aa8 	.word	0x20001aa8

08013b8c <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8013b8c:	b580      	push	{r7, lr}
 8013b8e:	b082      	sub	sp, #8
 8013b90:	af00      	add	r7, sp, #0
 8013b92:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8013b94:	4a0c      	ldr	r2, [pc, #48]	; (8013bc8 <LoRaMacConfirmQueueInit+0x3c>)
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 8013b9a:	4b0b      	ldr	r3, [pc, #44]	; (8013bc8 <LoRaMacConfirmQueueInit+0x3c>)
 8013b9c:	2200      	movs	r2, #0
 8013b9e:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8013ba2:	4b09      	ldr	r3, [pc, #36]	; (8013bc8 <LoRaMacConfirmQueueInit+0x3c>)
 8013ba4:	4a09      	ldr	r2, [pc, #36]	; (8013bcc <LoRaMacConfirmQueueInit+0x40>)
 8013ba6:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8013ba8:	4b07      	ldr	r3, [pc, #28]	; (8013bc8 <LoRaMacConfirmQueueInit+0x3c>)
 8013baa:	4a08      	ldr	r2, [pc, #32]	; (8013bcc <LoRaMacConfirmQueueInit+0x40>)
 8013bac:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8013bae:	2214      	movs	r2, #20
 8013bb0:	21ff      	movs	r1, #255	; 0xff
 8013bb2:	4806      	ldr	r0, [pc, #24]	; (8013bcc <LoRaMacConfirmQueueInit+0x40>)
 8013bb4:	f005 f9aa 	bl	8018f0c <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013bb8:	4b03      	ldr	r3, [pc, #12]	; (8013bc8 <LoRaMacConfirmQueueInit+0x3c>)
 8013bba:	2201      	movs	r2, #1
 8013bbc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8013bc0:	bf00      	nop
 8013bc2:	3708      	adds	r7, #8
 8013bc4:	46bd      	mov	sp, r7
 8013bc6:	bd80      	pop	{r7, pc}
 8013bc8:	20001aa8 	.word	0x20001aa8
 8013bcc:	20001ab4 	.word	0x20001ab4

08013bd0 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8013bd0:	b580      	push	{r7, lr}
 8013bd2:	b082      	sub	sp, #8
 8013bd4:	af00      	add	r7, sp, #0
 8013bd6:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013bd8:	4b19      	ldr	r3, [pc, #100]	; (8013c40 <LoRaMacConfirmQueueAdd+0x70>)
 8013bda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013bde:	4618      	mov	r0, r3
 8013be0:	f7ff ff92 	bl	8013b08 <IsListFull>
 8013be4:	4603      	mov	r3, r0
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d001      	beq.n	8013bee <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 8013bea:	2300      	movs	r3, #0
 8013bec:	e024      	b.n	8013c38 <LoRaMacConfirmQueueAdd+0x68>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8013bee:	4b14      	ldr	r3, [pc, #80]	; (8013c40 <LoRaMacConfirmQueueAdd+0x70>)
 8013bf0:	689b      	ldr	r3, [r3, #8]
 8013bf2:	687a      	ldr	r2, [r7, #4]
 8013bf4:	7812      	ldrb	r2, [r2, #0]
 8013bf6:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8013bf8:	4b11      	ldr	r3, [pc, #68]	; (8013c40 <LoRaMacConfirmQueueAdd+0x70>)
 8013bfa:	689b      	ldr	r3, [r3, #8]
 8013bfc:	687a      	ldr	r2, [r7, #4]
 8013bfe:	7852      	ldrb	r2, [r2, #1]
 8013c00:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8013c02:	4b0f      	ldr	r3, [pc, #60]	; (8013c40 <LoRaMacConfirmQueueAdd+0x70>)
 8013c04:	689b      	ldr	r3, [r3, #8]
 8013c06:	687a      	ldr	r2, [r7, #4]
 8013c08:	78d2      	ldrb	r2, [r2, #3]
 8013c0a:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 8013c0c:	4b0c      	ldr	r3, [pc, #48]	; (8013c40 <LoRaMacConfirmQueueAdd+0x70>)
 8013c0e:	689b      	ldr	r3, [r3, #8]
 8013c10:	687a      	ldr	r2, [r7, #4]
 8013c12:	7892      	ldrb	r2, [r2, #2]
 8013c14:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8013c16:	4b0a      	ldr	r3, [pc, #40]	; (8013c40 <LoRaMacConfirmQueueAdd+0x70>)
 8013c18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013c1c:	3301      	adds	r3, #1
 8013c1e:	b2da      	uxtb	r2, r3
 8013c20:	4b07      	ldr	r3, [pc, #28]	; (8013c40 <LoRaMacConfirmQueueAdd+0x70>)
 8013c22:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8013c26:	4b06      	ldr	r3, [pc, #24]	; (8013c40 <LoRaMacConfirmQueueAdd+0x70>)
 8013c28:	689b      	ldr	r3, [r3, #8]
 8013c2a:	4618      	mov	r0, r3
 8013c2c:	f7ff ff44 	bl	8013ab8 <IncreaseBufferPointer>
 8013c30:	4603      	mov	r3, r0
 8013c32:	4a03      	ldr	r2, [pc, #12]	; (8013c40 <LoRaMacConfirmQueueAdd+0x70>)
 8013c34:	6093      	str	r3, [r2, #8]

    return true;
 8013c36:	2301      	movs	r3, #1
}
 8013c38:	4618      	mov	r0, r3
 8013c3a:	3708      	adds	r7, #8
 8013c3c:	46bd      	mov	sp, r7
 8013c3e:	bd80      	pop	{r7, pc}
 8013c40:	20001aa8 	.word	0x20001aa8

08013c44 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8013c44:	b580      	push	{r7, lr}
 8013c46:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013c48:	4b0e      	ldr	r3, [pc, #56]	; (8013c84 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013c4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013c4e:	4618      	mov	r0, r3
 8013c50:	f7ff ff4a 	bl	8013ae8 <IsListEmpty>
 8013c54:	4603      	mov	r3, r0
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d001      	beq.n	8013c5e <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8013c5a:	2300      	movs	r3, #0
 8013c5c:	e010      	b.n	8013c80 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8013c5e:	4b09      	ldr	r3, [pc, #36]	; (8013c84 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013c60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013c64:	3b01      	subs	r3, #1
 8013c66:	b2da      	uxtb	r2, r3
 8013c68:	4b06      	ldr	r3, [pc, #24]	; (8013c84 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013c6a:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8013c6e:	4b05      	ldr	r3, [pc, #20]	; (8013c84 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013c70:	685b      	ldr	r3, [r3, #4]
 8013c72:	4618      	mov	r0, r3
 8013c74:	f7ff ff20 	bl	8013ab8 <IncreaseBufferPointer>
 8013c78:	4603      	mov	r3, r0
 8013c7a:	4a02      	ldr	r2, [pc, #8]	; (8013c84 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013c7c:	6053      	str	r3, [r2, #4]

    return true;
 8013c7e:	2301      	movs	r3, #1
}
 8013c80:	4618      	mov	r0, r3
 8013c82:	bd80      	pop	{r7, pc}
 8013c84:	20001aa8 	.word	0x20001aa8

08013c88 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8013c88:	b580      	push	{r7, lr}
 8013c8a:	b084      	sub	sp, #16
 8013c8c:	af00      	add	r7, sp, #0
 8013c8e:	4603      	mov	r3, r0
 8013c90:	460a      	mov	r2, r1
 8013c92:	71fb      	strb	r3, [r7, #7]
 8013c94:	4613      	mov	r3, r2
 8013c96:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8013c98:	2300      	movs	r3, #0
 8013c9a:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8013c9c:	4b10      	ldr	r3, [pc, #64]	; (8013ce0 <LoRaMacConfirmQueueSetStatus+0x58>)
 8013c9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013ca2:	4618      	mov	r0, r3
 8013ca4:	f7ff ff20 	bl	8013ae8 <IsListEmpty>
 8013ca8:	4603      	mov	r3, r0
 8013caa:	f083 0301 	eor.w	r3, r3, #1
 8013cae:	b2db      	uxtb	r3, r3
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d011      	beq.n	8013cd8 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8013cb4:	4b0a      	ldr	r3, [pc, #40]	; (8013ce0 <LoRaMacConfirmQueueSetStatus+0x58>)
 8013cb6:	6859      	ldr	r1, [r3, #4]
 8013cb8:	4b09      	ldr	r3, [pc, #36]	; (8013ce0 <LoRaMacConfirmQueueSetStatus+0x58>)
 8013cba:	689a      	ldr	r2, [r3, #8]
 8013cbc:	79bb      	ldrb	r3, [r7, #6]
 8013cbe:	4618      	mov	r0, r3
 8013cc0:	f7ff ff32 	bl	8013b28 <GetElement>
 8013cc4:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d005      	beq.n	8013cd8 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8013ccc:	68fb      	ldr	r3, [r7, #12]
 8013cce:	79fa      	ldrb	r2, [r7, #7]
 8013cd0:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8013cd2:	68fb      	ldr	r3, [r7, #12]
 8013cd4:	2201      	movs	r2, #1
 8013cd6:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8013cd8:	bf00      	nop
 8013cda:	3710      	adds	r7, #16
 8013cdc:	46bd      	mov	sp, r7
 8013cde:	bd80      	pop	{r7, pc}
 8013ce0:	20001aa8 	.word	0x20001aa8

08013ce4 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8013ce4:	b580      	push	{r7, lr}
 8013ce6:	b084      	sub	sp, #16
 8013ce8:	af00      	add	r7, sp, #0
 8013cea:	4603      	mov	r3, r0
 8013cec:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8013cee:	2300      	movs	r3, #0
 8013cf0:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8013cf2:	4b10      	ldr	r3, [pc, #64]	; (8013d34 <LoRaMacConfirmQueueGetStatus+0x50>)
 8013cf4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013cf8:	4618      	mov	r0, r3
 8013cfa:	f7ff fef5 	bl	8013ae8 <IsListEmpty>
 8013cfe:	4603      	mov	r3, r0
 8013d00:	f083 0301 	eor.w	r3, r3, #1
 8013d04:	b2db      	uxtb	r3, r3
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d00e      	beq.n	8013d28 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8013d0a:	4b0a      	ldr	r3, [pc, #40]	; (8013d34 <LoRaMacConfirmQueueGetStatus+0x50>)
 8013d0c:	6859      	ldr	r1, [r3, #4]
 8013d0e:	4b09      	ldr	r3, [pc, #36]	; (8013d34 <LoRaMacConfirmQueueGetStatus+0x50>)
 8013d10:	689a      	ldr	r2, [r3, #8]
 8013d12:	79fb      	ldrb	r3, [r7, #7]
 8013d14:	4618      	mov	r0, r3
 8013d16:	f7ff ff07 	bl	8013b28 <GetElement>
 8013d1a:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8013d1c:	68fb      	ldr	r3, [r7, #12]
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d002      	beq.n	8013d28 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8013d22:	68fb      	ldr	r3, [r7, #12]
 8013d24:	785b      	ldrb	r3, [r3, #1]
 8013d26:	e000      	b.n	8013d2a <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013d28:	2301      	movs	r3, #1
}
 8013d2a:	4618      	mov	r0, r3
 8013d2c:	3710      	adds	r7, #16
 8013d2e:	46bd      	mov	sp, r7
 8013d30:	bd80      	pop	{r7, pc}
 8013d32:	bf00      	nop
 8013d34:	20001aa8 	.word	0x20001aa8

08013d38 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8013d38:	b580      	push	{r7, lr}
 8013d3a:	b084      	sub	sp, #16
 8013d3c:	af00      	add	r7, sp, #0
 8013d3e:	4603      	mov	r3, r0
 8013d40:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8013d42:	4b16      	ldr	r3, [pc, #88]	; (8013d9c <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013d44:	685b      	ldr	r3, [r3, #4]
 8013d46:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8013d48:	4a14      	ldr	r2, [pc, #80]	; (8013d9c <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013d4a:	79fb      	ldrb	r3, [r7, #7]
 8013d4c:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8013d50:	4b12      	ldr	r3, [pc, #72]	; (8013d9c <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013d52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013d56:	4618      	mov	r0, r3
 8013d58:	f7ff fec6 	bl	8013ae8 <IsListEmpty>
 8013d5c:	4603      	mov	r3, r0
 8013d5e:	f083 0301 	eor.w	r3, r3, #1
 8013d62:	b2db      	uxtb	r3, r3
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d015      	beq.n	8013d94 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8013d68:	68fb      	ldr	r3, [r7, #12]
 8013d6a:	79fa      	ldrb	r2, [r7, #7]
 8013d6c:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8013d6e:	68fb      	ldr	r3, [r7, #12]
 8013d70:	78db      	ldrb	r3, [r3, #3]
 8013d72:	f083 0301 	eor.w	r3, r3, #1
 8013d76:	b2db      	uxtb	r3, r3
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d002      	beq.n	8013d82 <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8013d7c:	68fb      	ldr	r3, [r7, #12]
 8013d7e:	2201      	movs	r2, #1
 8013d80:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8013d82:	68f8      	ldr	r0, [r7, #12]
 8013d84:	f7ff fe98 	bl	8013ab8 <IncreaseBufferPointer>
 8013d88:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8013d8a:	4b04      	ldr	r3, [pc, #16]	; (8013d9c <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013d8c:	689b      	ldr	r3, [r3, #8]
 8013d8e:	68fa      	ldr	r2, [r7, #12]
 8013d90:	429a      	cmp	r2, r3
 8013d92:	d1e9      	bne.n	8013d68 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8013d94:	bf00      	nop
 8013d96:	3710      	adds	r7, #16
 8013d98:	46bd      	mov	sp, r7
 8013d9a:	bd80      	pop	{r7, pc}
 8013d9c:	20001aa8 	.word	0x20001aa8

08013da0 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8013da0:	b580      	push	{r7, lr}
 8013da2:	b082      	sub	sp, #8
 8013da4:	af00      	add	r7, sp, #0
 8013da6:	4603      	mov	r3, r0
 8013da8:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8013daa:	4b09      	ldr	r3, [pc, #36]	; (8013dd0 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8013dac:	6859      	ldr	r1, [r3, #4]
 8013dae:	4b08      	ldr	r3, [pc, #32]	; (8013dd0 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8013db0:	689a      	ldr	r2, [r3, #8]
 8013db2:	79fb      	ldrb	r3, [r7, #7]
 8013db4:	4618      	mov	r0, r3
 8013db6:	f7ff feb7 	bl	8013b28 <GetElement>
 8013dba:	4603      	mov	r3, r0
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d001      	beq.n	8013dc4 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8013dc0:	2301      	movs	r3, #1
 8013dc2:	e000      	b.n	8013dc6 <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8013dc4:	2300      	movs	r3, #0
}
 8013dc6:	4618      	mov	r0, r3
 8013dc8:	3708      	adds	r7, #8
 8013dca:	46bd      	mov	sp, r7
 8013dcc:	bd80      	pop	{r7, pc}
 8013dce:	bf00      	nop
 8013dd0:	20001aa8 	.word	0x20001aa8

08013dd4 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8013dd4:	b580      	push	{r7, lr}
 8013dd6:	b084      	sub	sp, #16
 8013dd8:	af00      	add	r7, sp, #0
 8013dda:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8013ddc:	4b25      	ldr	r3, [pc, #148]	; (8013e74 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8013dde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013de2:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8013de4:	2300      	movs	r3, #0
 8013de6:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 8013de8:	f107 0308 	add.w	r3, r7, #8
 8013dec:	2204      	movs	r2, #4
 8013dee:	2100      	movs	r1, #0
 8013df0:	4618      	mov	r0, r3
 8013df2:	f005 f88b 	bl	8018f0c <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 8013df6:	2300      	movs	r3, #0
 8013df8:	73fb      	strb	r3, [r7, #15]
 8013dfa:	e032      	b.n	8013e62 <LoRaMacConfirmQueueHandleCb+0x8e>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8013dfc:	4b1d      	ldr	r3, [pc, #116]	; (8013e74 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8013dfe:	685b      	ldr	r3, [r3, #4]
 8013e00:	781a      	ldrb	r2, [r3, #0]
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8013e06:	4b1b      	ldr	r3, [pc, #108]	; (8013e74 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8013e08:	685b      	ldr	r3, [r3, #4]
 8013e0a:	785a      	ldrb	r2, [r3, #1]
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8013e10:	4b18      	ldr	r3, [pc, #96]	; (8013e74 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8013e12:	685b      	ldr	r3, [r3, #4]
 8013e14:	789b      	ldrb	r3, [r3, #2]
 8013e16:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8013e18:	7b7b      	ldrb	r3, [r7, #13]
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d005      	beq.n	8013e2a <LoRaMacConfirmQueueHandleCb+0x56>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8013e1e:	4b15      	ldr	r3, [pc, #84]	; (8013e74 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8013e20:	681b      	ldr	r3, [r3, #0]
 8013e22:	689b      	ldr	r3, [r3, #8]
 8013e24:	6878      	ldr	r0, [r7, #4]
 8013e26:	4798      	blx	r3
 8013e28:	e00b      	b.n	8013e42 <LoRaMacConfirmQueueHandleCb+0x6e>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8013e2a:	4b12      	ldr	r3, [pc, #72]	; (8013e74 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8013e2c:	685b      	ldr	r3, [r3, #4]
 8013e2e:	781b      	ldrb	r3, [r3, #0]
 8013e30:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8013e32:	4b10      	ldr	r3, [pc, #64]	; (8013e74 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8013e34:	685b      	ldr	r3, [r3, #4]
 8013e36:	785b      	ldrb	r3, [r3, #1]
 8013e38:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8013e3a:	4b0e      	ldr	r3, [pc, #56]	; (8013e74 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8013e3c:	685b      	ldr	r3, [r3, #4]
 8013e3e:	78db      	ldrb	r3, [r3, #3]
 8013e40:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8013e42:	f7ff feff 	bl	8013c44 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8013e46:	7b7b      	ldrb	r3, [r7, #13]
 8013e48:	f083 0301 	eor.w	r3, r3, #1
 8013e4c:	b2db      	uxtb	r3, r3
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d004      	beq.n	8013e5c <LoRaMacConfirmQueueHandleCb+0x88>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8013e52:	f107 0308 	add.w	r3, r7, #8
 8013e56:	4618      	mov	r0, r3
 8013e58:	f7ff feba 	bl	8013bd0 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8013e5c:	7bfb      	ldrb	r3, [r7, #15]
 8013e5e:	3301      	adds	r3, #1
 8013e60:	73fb      	strb	r3, [r7, #15]
 8013e62:	7bfa      	ldrb	r2, [r7, #15]
 8013e64:	7bbb      	ldrb	r3, [r7, #14]
 8013e66:	429a      	cmp	r2, r3
 8013e68:	d3c8      	bcc.n	8013dfc <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 8013e6a:	bf00      	nop
 8013e6c:	bf00      	nop
 8013e6e:	3710      	adds	r7, #16
 8013e70:	46bd      	mov	sp, r7
 8013e72:	bd80      	pop	{r7, pc}
 8013e74:	20001aa8 	.word	0x20001aa8

08013e78 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8013e78:	b480      	push	{r7}
 8013e7a:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8013e7c:	4b03      	ldr	r3, [pc, #12]	; (8013e8c <LoRaMacConfirmQueueGetCnt+0x14>)
 8013e7e:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8013e82:	4618      	mov	r0, r3
 8013e84:	46bd      	mov	sp, r7
 8013e86:	bc80      	pop	{r7}
 8013e88:	4770      	bx	lr
 8013e8a:	bf00      	nop
 8013e8c:	20001aa8 	.word	0x20001aa8

08013e90 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8013e90:	b580      	push	{r7, lr}
 8013e92:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013e94:	4b06      	ldr	r3, [pc, #24]	; (8013eb0 <LoRaMacConfirmQueueIsFull+0x20>)
 8013e96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013e9a:	4618      	mov	r0, r3
 8013e9c:	f7ff fe34 	bl	8013b08 <IsListFull>
 8013ea0:	4603      	mov	r3, r0
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d001      	beq.n	8013eaa <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 8013ea6:	2301      	movs	r3, #1
 8013ea8:	e000      	b.n	8013eac <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 8013eaa:	2300      	movs	r3, #0
    }
}
 8013eac:	4618      	mov	r0, r3
 8013eae:	bd80      	pop	{r7, pc}
 8013eb0:	20001aa8 	.word	0x20001aa8

08013eb4 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8013eb4:	b580      	push	{r7, lr}
 8013eb6:	b08e      	sub	sp, #56	; 0x38
 8013eb8:	af00      	add	r7, sp, #0
 8013eba:	60f8      	str	r0, [r7, #12]
 8013ebc:	607b      	str	r3, [r7, #4]
 8013ebe:	460b      	mov	r3, r1
 8013ec0:	817b      	strh	r3, [r7, #10]
 8013ec2:	4613      	mov	r3, r2
 8013ec4:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 8013ec6:	68fb      	ldr	r3, [r7, #12]
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d101      	bne.n	8013ed0 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013ecc:	2309      	movs	r3, #9
 8013ece:	e086      	b.n	8013fde <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 8013ed0:	2300      	movs	r3, #0
 8013ed2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 8013ed6:	2301      	movs	r3, #1
 8013ed8:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 8013eda:	2300      	movs	r3, #0
 8013edc:	623b      	str	r3, [r7, #32]
 8013ede:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013ee2:	2200      	movs	r2, #0
 8013ee4:	601a      	str	r2, [r3, #0]
 8013ee6:	605a      	str	r2, [r3, #4]
 8013ee8:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 8013eea:	2300      	movs	r3, #0
 8013eec:	613b      	str	r3, [r7, #16]
 8013eee:	f107 0314 	add.w	r3, r7, #20
 8013ef2:	2200      	movs	r2, #0
 8013ef4:	601a      	str	r2, [r3, #0]
 8013ef6:	605a      	str	r2, [r3, #4]
 8013ef8:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 8013efa:	2301      	movs	r3, #1
 8013efc:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8013efe:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8013f02:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	b2db      	uxtb	r3, r3
 8013f08:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	0a1b      	lsrs	r3, r3, #8
 8013f0e:	b2db      	uxtb	r3, r3
 8013f10:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	0c1b      	lsrs	r3, r3, #16
 8013f16:	b2db      	uxtb	r3, r3
 8013f18:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	0e1b      	lsrs	r3, r3, #24
 8013f1e:	b2db      	uxtb	r3, r3
 8013f20:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 8013f22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013f24:	b2db      	uxtb	r3, r3
 8013f26:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8013f28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013f2a:	0a1b      	lsrs	r3, r3, #8
 8013f2c:	b2db      	uxtb	r3, r3
 8013f2e:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8013f30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013f32:	0c1b      	lsrs	r3, r3, #16
 8013f34:	b2db      	uxtb	r3, r3
 8013f36:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8013f38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013f3a:	0e1b      	lsrs	r3, r3, #24
 8013f3c:	b2db      	uxtb	r3, r3
 8013f3e:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8013f40:	e048      	b.n	8013fd4 <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 8013f42:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013f44:	b2db      	uxtb	r3, r3
 8013f46:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8013f48:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013f4a:	3301      	adds	r3, #1
 8013f4c:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8013f4e:	f107 0320 	add.w	r3, r7, #32
 8013f52:	7a7a      	ldrb	r2, [r7, #9]
 8013f54:	f107 0010 	add.w	r0, r7, #16
 8013f58:	2110      	movs	r1, #16
 8013f5a:	f7f8 fa79 	bl	800c450 <SecureElementAesEncrypt>
 8013f5e:	4603      	mov	r3, r0
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d001      	beq.n	8013f68 <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013f64:	230e      	movs	r3, #14
 8013f66:	e03a      	b.n	8013fde <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8013f68:	2300      	movs	r3, #0
 8013f6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013f6e:	e01e      	b.n	8013fae <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8013f70:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013f74:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013f78:	4413      	add	r3, r2
 8013f7a:	461a      	mov	r2, r3
 8013f7c:	68fb      	ldr	r3, [r7, #12]
 8013f7e:	4413      	add	r3, r2
 8013f80:	7819      	ldrb	r1, [r3, #0]
 8013f82:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013f86:	3338      	adds	r3, #56	; 0x38
 8013f88:	443b      	add	r3, r7
 8013f8a:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8013f8e:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8013f92:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013f96:	4403      	add	r3, r0
 8013f98:	4618      	mov	r0, r3
 8013f9a:	68fb      	ldr	r3, [r7, #12]
 8013f9c:	4403      	add	r3, r0
 8013f9e:	404a      	eors	r2, r1
 8013fa0:	b2d2      	uxtb	r2, r2
 8013fa2:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8013fa4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013fa8:	3301      	adds	r3, #1
 8013faa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013fae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013fb2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8013fb6:	2a10      	cmp	r2, #16
 8013fb8:	bfa8      	it	ge
 8013fba:	2210      	movge	r2, #16
 8013fbc:	b212      	sxth	r2, r2
 8013fbe:	4293      	cmp	r3, r2
 8013fc0:	dbd6      	blt.n	8013f70 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 8013fc2:	897b      	ldrh	r3, [r7, #10]
 8013fc4:	3b10      	subs	r3, #16
 8013fc6:	b29b      	uxth	r3, r3
 8013fc8:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 8013fca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013fce:	3310      	adds	r3, #16
 8013fd0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 8013fd4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	dcb2      	bgt.n	8013f42 <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013fdc:	2300      	movs	r3, #0
}
 8013fde:	4618      	mov	r0, r3
 8013fe0:	3738      	adds	r7, #56	; 0x38
 8013fe2:	46bd      	mov	sp, r7
 8013fe4:	bd80      	pop	{r7, pc}

08013fe6 <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8013fe6:	b490      	push	{r4, r7}
 8013fe8:	b082      	sub	sp, #8
 8013fea:	af00      	add	r7, sp, #0
 8013fec:	4604      	mov	r4, r0
 8013fee:	4608      	mov	r0, r1
 8013ff0:	4611      	mov	r1, r2
 8013ff2:	461a      	mov	r2, r3
 8013ff4:	4623      	mov	r3, r4
 8013ff6:	80fb      	strh	r3, [r7, #6]
 8013ff8:	4603      	mov	r3, r0
 8013ffa:	717b      	strb	r3, [r7, #5]
 8013ffc:	460b      	mov	r3, r1
 8013ffe:	713b      	strb	r3, [r7, #4]
 8014000:	4613      	mov	r3, r2
 8014002:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8014004:	69bb      	ldr	r3, [r7, #24]
 8014006:	2b00      	cmp	r3, #0
 8014008:	d101      	bne.n	801400e <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801400a:	2309      	movs	r3, #9
 801400c:	e04e      	b.n	80140ac <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 801400e:	69bb      	ldr	r3, [r7, #24]
 8014010:	2249      	movs	r2, #73	; 0x49
 8014012:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 8014014:	69bb      	ldr	r3, [r7, #24]
 8014016:	3301      	adds	r3, #1
 8014018:	2200      	movs	r2, #0
 801401a:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 801401c:	69bb      	ldr	r3, [r7, #24]
 801401e:	3302      	adds	r3, #2
 8014020:	2200      	movs	r2, #0
 8014022:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8014024:	69bb      	ldr	r3, [r7, #24]
 8014026:	3303      	adds	r3, #3
 8014028:	2200      	movs	r2, #0
 801402a:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 801402c:	69bb      	ldr	r3, [r7, #24]
 801402e:	3304      	adds	r3, #4
 8014030:	2200      	movs	r2, #0
 8014032:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8014034:	69bb      	ldr	r3, [r7, #24]
 8014036:	3305      	adds	r3, #5
 8014038:	78fa      	ldrb	r2, [r7, #3]
 801403a:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 801403c:	69bb      	ldr	r3, [r7, #24]
 801403e:	3306      	adds	r3, #6
 8014040:	693a      	ldr	r2, [r7, #16]
 8014042:	b2d2      	uxtb	r2, r2
 8014044:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8014046:	693b      	ldr	r3, [r7, #16]
 8014048:	0a1a      	lsrs	r2, r3, #8
 801404a:	69bb      	ldr	r3, [r7, #24]
 801404c:	3307      	adds	r3, #7
 801404e:	b2d2      	uxtb	r2, r2
 8014050:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8014052:	693b      	ldr	r3, [r7, #16]
 8014054:	0c1a      	lsrs	r2, r3, #16
 8014056:	69bb      	ldr	r3, [r7, #24]
 8014058:	3308      	adds	r3, #8
 801405a:	b2d2      	uxtb	r2, r2
 801405c:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 801405e:	693b      	ldr	r3, [r7, #16]
 8014060:	0e1a      	lsrs	r2, r3, #24
 8014062:	69bb      	ldr	r3, [r7, #24]
 8014064:	3309      	adds	r3, #9
 8014066:	b2d2      	uxtb	r2, r2
 8014068:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 801406a:	69bb      	ldr	r3, [r7, #24]
 801406c:	330a      	adds	r3, #10
 801406e:	697a      	ldr	r2, [r7, #20]
 8014070:	b2d2      	uxtb	r2, r2
 8014072:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8014074:	697b      	ldr	r3, [r7, #20]
 8014076:	0a1a      	lsrs	r2, r3, #8
 8014078:	69bb      	ldr	r3, [r7, #24]
 801407a:	330b      	adds	r3, #11
 801407c:	b2d2      	uxtb	r2, r2
 801407e:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8014080:	697b      	ldr	r3, [r7, #20]
 8014082:	0c1a      	lsrs	r2, r3, #16
 8014084:	69bb      	ldr	r3, [r7, #24]
 8014086:	330c      	adds	r3, #12
 8014088:	b2d2      	uxtb	r2, r2
 801408a:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 801408c:	697b      	ldr	r3, [r7, #20]
 801408e:	0e1a      	lsrs	r2, r3, #24
 8014090:	69bb      	ldr	r3, [r7, #24]
 8014092:	330d      	adds	r3, #13
 8014094:	b2d2      	uxtb	r2, r2
 8014096:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8014098:	69bb      	ldr	r3, [r7, #24]
 801409a:	330e      	adds	r3, #14
 801409c:	2200      	movs	r2, #0
 801409e:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 80140a0:	69bb      	ldr	r3, [r7, #24]
 80140a2:	330f      	adds	r3, #15
 80140a4:	88fa      	ldrh	r2, [r7, #6]
 80140a6:	b2d2      	uxtb	r2, r2
 80140a8:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80140aa:	2300      	movs	r3, #0
}
 80140ac:	4618      	mov	r0, r3
 80140ae:	3708      	adds	r7, #8
 80140b0:	46bd      	mov	sp, r7
 80140b2:	bc90      	pop	{r4, r7}
 80140b4:	4770      	bx	lr

080140b6 <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 80140b6:	b590      	push	{r4, r7, lr}
 80140b8:	b08b      	sub	sp, #44	; 0x2c
 80140ba:	af04      	add	r7, sp, #16
 80140bc:	6078      	str	r0, [r7, #4]
 80140be:	4608      	mov	r0, r1
 80140c0:	4611      	mov	r1, r2
 80140c2:	461a      	mov	r2, r3
 80140c4:	4603      	mov	r3, r0
 80140c6:	807b      	strh	r3, [r7, #2]
 80140c8:	460b      	mov	r3, r1
 80140ca:	707b      	strb	r3, [r7, #1]
 80140cc:	4613      	mov	r3, r2
 80140ce:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	d002      	beq.n	80140dc <ComputeCmacB0+0x26>
 80140d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140d8:	2b00      	cmp	r3, #0
 80140da:	d101      	bne.n	80140e0 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80140dc:	2309      	movs	r3, #9
 80140de:	e024      	b.n	801412a <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80140e0:	887b      	ldrh	r3, [r7, #2]
 80140e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80140e6:	d901      	bls.n	80140ec <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 80140e8:	230d      	movs	r3, #13
 80140ea:	e01e      	b.n	801412a <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE] ALIGN(4);

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80140ec:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 80140f0:	783a      	ldrb	r2, [r7, #0]
 80140f2:	7879      	ldrb	r1, [r7, #1]
 80140f4:	8878      	ldrh	r0, [r7, #2]
 80140f6:	f107 0308 	add.w	r3, r7, #8
 80140fa:	9302      	str	r3, [sp, #8]
 80140fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140fe:	9301      	str	r3, [sp, #4]
 8014100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014102:	9300      	str	r3, [sp, #0]
 8014104:	4623      	mov	r3, r4
 8014106:	f7ff ff6e 	bl	8013fe6 <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 801410a:	887a      	ldrh	r2, [r7, #2]
 801410c:	7879      	ldrb	r1, [r7, #1]
 801410e:	f107 0008 	add.w	r0, r7, #8
 8014112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014114:	9300      	str	r3, [sp, #0]
 8014116:	460b      	mov	r3, r1
 8014118:	6879      	ldr	r1, [r7, #4]
 801411a:	f7f8 f953 	bl	800c3c4 <SecureElementComputeAesCmac>
 801411e:	4603      	mov	r3, r0
 8014120:	2b00      	cmp	r3, #0
 8014122:	d001      	beq.n	8014128 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014124:	230e      	movs	r3, #14
 8014126:	e000      	b.n	801412a <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8014128:	2300      	movs	r3, #0
}
 801412a:	4618      	mov	r0, r3
 801412c:	371c      	adds	r7, #28
 801412e:	46bd      	mov	sp, r7
 8014130:	bd90      	pop	{r4, r7, pc}

08014132 <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8014132:	b590      	push	{r4, r7, lr}
 8014134:	b0cd      	sub	sp, #308	; 0x134
 8014136:	af04      	add	r7, sp, #16
 8014138:	f507 7490 	add.w	r4, r7, #288	; 0x120
 801413c:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 8014140:	6020      	str	r0, [r4, #0]
 8014142:	460c      	mov	r4, r1
 8014144:	4610      	mov	r0, r2
 8014146:	4619      	mov	r1, r3
 8014148:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801414c:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8014150:	4622      	mov	r2, r4
 8014152:	801a      	strh	r2, [r3, #0]
 8014154:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014158:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 801415c:	4602      	mov	r2, r0
 801415e:	701a      	strb	r2, [r3, #0]
 8014160:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014164:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8014168:	460a      	mov	r2, r1
 801416a:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 801416c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014170:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8014174:	681b      	ldr	r3, [r3, #0]
 8014176:	2b00      	cmp	r3, #0
 8014178:	d101      	bne.n	801417e <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801417a:	2309      	movs	r3, #9
 801417c:	e063      	b.n	8014246 <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 801417e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014182:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8014186:	881b      	ldrh	r3, [r3, #0]
 8014188:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801418c:	d901      	bls.n	8014192 <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 801418e:	230d      	movs	r3, #13
 8014190:	e059      	b.n	8014246 <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8014192:	f107 030c 	add.w	r3, r7, #12
 8014196:	f44f 7288 	mov.w	r2, #272	; 0x110
 801419a:	2100      	movs	r1, #0
 801419c:	4618      	mov	r0, r3
 801419e:	f004 feb5 	bl	8018f0c <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80141a2:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 80141a6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80141aa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80141ae:	781a      	ldrb	r2, [r3, #0]
 80141b0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80141b4:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 80141b8:	7819      	ldrb	r1, [r3, #0]
 80141ba:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80141be:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 80141c2:	8818      	ldrh	r0, [r3, #0]
 80141c4:	f107 030c 	add.w	r3, r7, #12
 80141c8:	9302      	str	r3, [sp, #8]
 80141ca:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80141ce:	9301      	str	r3, [sp, #4]
 80141d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80141d4:	9300      	str	r3, [sp, #0]
 80141d6:	4623      	mov	r3, r4
 80141d8:	f7ff ff05 	bl	8013fe6 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 80141dc:	f107 030c 	add.w	r3, r7, #12
 80141e0:	3310      	adds	r3, #16
 80141e2:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80141e6:	f5a2 728f 	sub.w	r2, r2, #286	; 0x11e
 80141ea:	8812      	ldrh	r2, [r2, #0]
 80141ec:	f507 7190 	add.w	r1, r7, #288	; 0x120
 80141f0:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 80141f4:	6809      	ldr	r1, [r1, #0]
 80141f6:	4618      	mov	r0, r3
 80141f8:	f004 fe4d 	bl	8018e96 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 80141fc:	2306      	movs	r3, #6
 80141fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8014202:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014206:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 801420a:	881b      	ldrh	r3, [r3, #0]
 801420c:	3310      	adds	r3, #16
 801420e:	4619      	mov	r1, r3
 8014210:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014214:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8014218:	781b      	ldrb	r3, [r3, #0]
 801421a:	f107 000c 	add.w	r0, r7, #12
 801421e:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8014222:	f7f8 f8e9 	bl	800c3f8 <SecureElementVerifyAesCmac>
 8014226:	4603      	mov	r3, r0
 8014228:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 801422c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014230:	2b00      	cmp	r3, #0
 8014232:	d101      	bne.n	8014238 <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8014234:	2300      	movs	r3, #0
 8014236:	e006      	b.n	8014246 <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8014238:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801423c:	2b01      	cmp	r3, #1
 801423e:	d101      	bne.n	8014244 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8014240:	2301      	movs	r3, #1
 8014242:	e000      	b.n	8014246 <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014244:	230e      	movs	r3, #14
}
 8014246:	4618      	mov	r0, r3
 8014248:	f507 7792 	add.w	r7, r7, #292	; 0x124
 801424c:	46bd      	mov	sp, r7
 801424e:	bd90      	pop	{r4, r7, pc}

08014250 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8014250:	b480      	push	{r7}
 8014252:	b085      	sub	sp, #20
 8014254:	af00      	add	r7, sp, #0
 8014256:	4603      	mov	r3, r0
 8014258:	6039      	str	r1, [r7, #0]
 801425a:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 801425c:	2300      	movs	r3, #0
 801425e:	73fb      	strb	r3, [r7, #15]
 8014260:	e011      	b.n	8014286 <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8014262:	7bfb      	ldrb	r3, [r7, #15]
 8014264:	4a0c      	ldr	r2, [pc, #48]	; (8014298 <GetKeyAddrItem+0x48>)
 8014266:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 801426a:	79fa      	ldrb	r2, [r7, #7]
 801426c:	429a      	cmp	r2, r3
 801426e:	d107      	bne.n	8014280 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8014270:	7bfb      	ldrb	r3, [r7, #15]
 8014272:	009b      	lsls	r3, r3, #2
 8014274:	4a08      	ldr	r2, [pc, #32]	; (8014298 <GetKeyAddrItem+0x48>)
 8014276:	441a      	add	r2, r3
 8014278:	683b      	ldr	r3, [r7, #0]
 801427a:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 801427c:	2300      	movs	r3, #0
 801427e:	e006      	b.n	801428e <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8014280:	7bfb      	ldrb	r3, [r7, #15]
 8014282:	3301      	adds	r3, #1
 8014284:	73fb      	strb	r3, [r7, #15]
 8014286:	7bfb      	ldrb	r3, [r7, #15]
 8014288:	2b01      	cmp	r3, #1
 801428a:	d9ea      	bls.n	8014262 <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 801428c:	230b      	movs	r3, #11
}
 801428e:	4618      	mov	r0, r3
 8014290:	3714      	adds	r7, #20
 8014292:	46bd      	mov	sp, r7
 8014294:	bc80      	pop	{r7}
 8014296:	4770      	bx	lr
 8014298:	20000110 	.word	0x20000110

0801429c <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 801429c:	b580      	push	{r7, lr}
 801429e:	b088      	sub	sp, #32
 80142a0:	af00      	add	r7, sp, #0
 80142a2:	60b9      	str	r1, [r7, #8]
 80142a4:	607a      	str	r2, [r7, #4]
 80142a6:	461a      	mov	r2, r3
 80142a8:	4603      	mov	r3, r0
 80142aa:	73fb      	strb	r3, [r7, #15]
 80142ac:	4613      	mov	r3, r2
 80142ae:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 80142b0:	2300      	movs	r3, #0
 80142b2:	613b      	str	r3, [r7, #16]
 80142b4:	f107 0314 	add.w	r3, r7, #20
 80142b8:	2200      	movs	r2, #0
 80142ba:	601a      	str	r2, [r3, #0]
 80142bc:	605a      	str	r2, [r3, #4]
 80142be:	609a      	str	r2, [r3, #8]

    switch( keyID )
 80142c0:	7bfb      	ldrb	r3, [r7, #15]
 80142c2:	2b08      	cmp	r3, #8
 80142c4:	d002      	beq.n	80142cc <DeriveSessionKey10x+0x30>
 80142c6:	2b09      	cmp	r3, #9
 80142c8:	d003      	beq.n	80142d2 <DeriveSessionKey10x+0x36>
 80142ca:	e005      	b.n	80142d8 <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else
        case NWK_S_KEY:
#endif /* LORAMAC_VERSION */
            compBase[0] = 0x01;
 80142cc:	2301      	movs	r3, #1
 80142ce:	743b      	strb	r3, [r7, #16]
            break;
 80142d0:	e004      	b.n	80142dc <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 80142d2:	2302      	movs	r3, #2
 80142d4:	743b      	strb	r3, [r7, #16]
            break;
 80142d6:	e001      	b.n	80142dc <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80142d8:	230a      	movs	r3, #10
 80142da:	e02a      	b.n	8014332 <DeriveSessionKey10x+0x96>
    }

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 80142dc:	68bb      	ldr	r3, [r7, #8]
 80142de:	b2db      	uxtb	r3, r3
 80142e0:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 80142e2:	68bb      	ldr	r3, [r7, #8]
 80142e4:	0a1b      	lsrs	r3, r3, #8
 80142e6:	b2db      	uxtb	r3, r3
 80142e8:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 80142ea:	68bb      	ldr	r3, [r7, #8]
 80142ec:	0c1b      	lsrs	r3, r3, #16
 80142ee:	b2db      	uxtb	r3, r3
 80142f0:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	b2db      	uxtb	r3, r3
 80142f6:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	0a1b      	lsrs	r3, r3, #8
 80142fc:	b2db      	uxtb	r3, r3
 80142fe:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	0c1b      	lsrs	r3, r3, #16
 8014304:	b2db      	uxtb	r3, r3
 8014306:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8014308:	89bb      	ldrh	r3, [r7, #12]
 801430a:	b2db      	uxtb	r3, r3
 801430c:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 801430e:	89bb      	ldrh	r3, [r7, #12]
 8014310:	0a1b      	lsrs	r3, r3, #8
 8014312:	b29b      	uxth	r3, r3
 8014314:	b2db      	uxtb	r3, r3
 8014316:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8014318:	7bfa      	ldrb	r2, [r7, #15]
 801431a:	f107 0310 	add.w	r3, r7, #16
 801431e:	2101      	movs	r1, #1
 8014320:	4618      	mov	r0, r3
 8014322:	f7f8 f915 	bl	800c550 <SecureElementDeriveAndStoreKey>
 8014326:	4603      	mov	r3, r0
 8014328:	2b00      	cmp	r3, #0
 801432a:	d001      	beq.n	8014330 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801432c:	230e      	movs	r3, #14
 801432e:	e000      	b.n	8014332 <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014330:	2300      	movs	r3, #0
}
 8014332:	4618      	mov	r0, r3
 8014334:	3720      	adds	r7, #32
 8014336:	46bd      	mov	sp, r7
 8014338:	bd80      	pop	{r7, pc}
	...

0801433c <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 801433c:	b480      	push	{r7}
 801433e:	b083      	sub	sp, #12
 8014340:	af00      	add	r7, sp, #0
 8014342:	4603      	mov	r3, r0
 8014344:	6039      	str	r1, [r7, #0]
 8014346:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8014348:	683b      	ldr	r3, [r7, #0]
 801434a:	2b00      	cmp	r3, #0
 801434c:	d101      	bne.n	8014352 <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801434e:	2309      	movs	r3, #9
 8014350:	e029      	b.n	80143a6 <GetLastFcntDown+0x6a>
    }
    switch( fCntID )
 8014352:	79fb      	ldrb	r3, [r7, #7]
 8014354:	3b01      	subs	r3, #1
 8014356:	2b03      	cmp	r3, #3
 8014358:	d822      	bhi.n	80143a0 <GetLastFcntDown+0x64>
 801435a:	a201      	add	r2, pc, #4	; (adr r2, 8014360 <GetLastFcntDown+0x24>)
 801435c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014360:	08014371 	.word	0x08014371
 8014364:	0801437d 	.word	0x0801437d
 8014368:	08014389 	.word	0x08014389
 801436c:	08014395 	.word	0x08014395
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8014370:	4b0f      	ldr	r3, [pc, #60]	; (80143b0 <GetLastFcntDown+0x74>)
 8014372:	681b      	ldr	r3, [r3, #0]
 8014374:	691a      	ldr	r2, [r3, #16]
 8014376:	683b      	ldr	r3, [r7, #0]
 8014378:	601a      	str	r2, [r3, #0]
            break;
 801437a:	e013      	b.n	80143a4 <GetLastFcntDown+0x68>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 801437c:	4b0c      	ldr	r3, [pc, #48]	; (80143b0 <GetLastFcntDown+0x74>)
 801437e:	681b      	ldr	r3, [r3, #0]
 8014380:	695a      	ldr	r2, [r3, #20]
 8014382:	683b      	ldr	r3, [r7, #0]
 8014384:	601a      	str	r2, [r3, #0]
            break;
 8014386:	e00d      	b.n	80143a4 <GetLastFcntDown+0x68>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8014388:	4b09      	ldr	r3, [pc, #36]	; (80143b0 <GetLastFcntDown+0x74>)
 801438a:	681b      	ldr	r3, [r3, #0]
 801438c:	699a      	ldr	r2, [r3, #24]
 801438e:	683b      	ldr	r3, [r7, #0]
 8014390:	601a      	str	r2, [r3, #0]
            break;
 8014392:	e007      	b.n	80143a4 <GetLastFcntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8014394:	4b06      	ldr	r3, [pc, #24]	; (80143b0 <GetLastFcntDown+0x74>)
 8014396:	681b      	ldr	r3, [r3, #0]
 8014398:	69da      	ldr	r2, [r3, #28]
 801439a:	683b      	ldr	r3, [r7, #0]
 801439c:	601a      	str	r2, [r3, #0]
            break;
 801439e:	e001      	b.n	80143a4 <GetLastFcntDown+0x68>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 80143a0:	2305      	movs	r3, #5
 80143a2:	e000      	b.n	80143a6 <GetLastFcntDown+0x6a>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80143a4:	2300      	movs	r3, #0
}
 80143a6:	4618      	mov	r0, r3
 80143a8:	370c      	adds	r7, #12
 80143aa:	46bd      	mov	sp, r7
 80143ac:	bc80      	pop	{r7}
 80143ae:	4770      	bx	lr
 80143b0:	20001acc 	.word	0x20001acc

080143b4 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80143b4:	b580      	push	{r7, lr}
 80143b6:	b084      	sub	sp, #16
 80143b8:	af00      	add	r7, sp, #0
 80143ba:	4603      	mov	r3, r0
 80143bc:	6039      	str	r1, [r7, #0]
 80143be:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 80143c0:	2300      	movs	r3, #0
 80143c2:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 80143c4:	f107 020c 	add.w	r2, r7, #12
 80143c8:	79fb      	ldrb	r3, [r7, #7]
 80143ca:	4611      	mov	r1, r2
 80143cc:	4618      	mov	r0, r3
 80143ce:	f7ff ffb5 	bl	801433c <GetLastFcntDown>
 80143d2:	4603      	mov	r3, r0
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	d001      	beq.n	80143dc <CheckFCntDown+0x28>
    {
        return false;
 80143d8:	2300      	movs	r3, #0
 80143da:	e00a      	b.n	80143f2 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 80143dc:	68fb      	ldr	r3, [r7, #12]
 80143de:	683a      	ldr	r2, [r7, #0]
 80143e0:	429a      	cmp	r2, r3
 80143e2:	d803      	bhi.n	80143ec <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITIAL_VALUE ) )
 80143e4:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 80143e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80143ea:	d101      	bne.n	80143f0 <CheckFCntDown+0x3c>
    {
        return true;
 80143ec:	2301      	movs	r3, #1
 80143ee:	e000      	b.n	80143f2 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 80143f0:	2300      	movs	r3, #0
    }
}
 80143f2:	4618      	mov	r0, r3
 80143f4:	3710      	adds	r7, #16
 80143f6:	46bd      	mov	sp, r7
 80143f8:	bd80      	pop	{r7, pc}
	...

080143fc <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80143fc:	b480      	push	{r7}
 80143fe:	b083      	sub	sp, #12
 8014400:	af00      	add	r7, sp, #0
 8014402:	4603      	mov	r3, r0
 8014404:	6039      	str	r1, [r7, #0]
 8014406:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8014408:	79fb      	ldrb	r3, [r7, #7]
 801440a:	3b01      	subs	r3, #1
 801440c:	2b03      	cmp	r3, #3
 801440e:	d82b      	bhi.n	8014468 <UpdateFCntDown+0x6c>
 8014410:	a201      	add	r2, pc, #4	; (adr r2, 8014418 <UpdateFCntDown+0x1c>)
 8014412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014416:	bf00      	nop
 8014418:	08014429 	.word	0x08014429
 801441c:	0801443b 	.word	0x0801443b
 8014420:	0801444d 	.word	0x0801444d
 8014424:	0801445f 	.word	0x0801445f
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8014428:	4b12      	ldr	r3, [pc, #72]	; (8014474 <UpdateFCntDown+0x78>)
 801442a:	681b      	ldr	r3, [r3, #0]
 801442c:	683a      	ldr	r2, [r7, #0]
 801442e:	611a      	str	r2, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 8014430:	4b10      	ldr	r3, [pc, #64]	; (8014474 <UpdateFCntDown+0x78>)
 8014432:	681b      	ldr	r3, [r3, #0]
 8014434:	683a      	ldr	r2, [r7, #0]
 8014436:	621a      	str	r2, [r3, #32]
            break;
 8014438:	e017      	b.n	801446a <UpdateFCntDown+0x6e>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 801443a:	4b0e      	ldr	r3, [pc, #56]	; (8014474 <UpdateFCntDown+0x78>)
 801443c:	681b      	ldr	r3, [r3, #0]
 801443e:	683a      	ldr	r2, [r7, #0]
 8014440:	615a      	str	r2, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 8014442:	4b0c      	ldr	r3, [pc, #48]	; (8014474 <UpdateFCntDown+0x78>)
 8014444:	681b      	ldr	r3, [r3, #0]
 8014446:	683a      	ldr	r2, [r7, #0]
 8014448:	621a      	str	r2, [r3, #32]
            break;
 801444a:	e00e      	b.n	801446a <UpdateFCntDown+0x6e>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 801444c:	4b09      	ldr	r3, [pc, #36]	; (8014474 <UpdateFCntDown+0x78>)
 801444e:	681b      	ldr	r3, [r3, #0]
 8014450:	683a      	ldr	r2, [r7, #0]
 8014452:	619a      	str	r2, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 8014454:	4b07      	ldr	r3, [pc, #28]	; (8014474 <UpdateFCntDown+0x78>)
 8014456:	681b      	ldr	r3, [r3, #0]
 8014458:	683a      	ldr	r2, [r7, #0]
 801445a:	621a      	str	r2, [r3, #32]
            break;
 801445c:	e005      	b.n	801446a <UpdateFCntDown+0x6e>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 801445e:	4b05      	ldr	r3, [pc, #20]	; (8014474 <UpdateFCntDown+0x78>)
 8014460:	681b      	ldr	r3, [r3, #0]
 8014462:	683a      	ldr	r2, [r7, #0]
 8014464:	61da      	str	r2, [r3, #28]
            break;
 8014466:	e000      	b.n	801446a <UpdateFCntDown+0x6e>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8014468:	bf00      	nop
    }
}
 801446a:	bf00      	nop
 801446c:	370c      	adds	r7, #12
 801446e:	46bd      	mov	sp, r7
 8014470:	bc80      	pop	{r7}
 8014472:	4770      	bx	lr
 8014474:	20001acc 	.word	0x20001acc

08014478 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8014478:	b480      	push	{r7}
 801447a:	b083      	sub	sp, #12
 801447c:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 801447e:	4b18      	ldr	r3, [pc, #96]	; (80144e0 <ResetFCnts+0x68>)
 8014480:	681b      	ldr	r3, [r3, #0]
 8014482:	2200      	movs	r2, #0
 8014484:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8014486:	4b16      	ldr	r3, [pc, #88]	; (80144e0 <ResetFCnts+0x68>)
 8014488:	681b      	ldr	r3, [r3, #0]
 801448a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801448e:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8014490:	4b13      	ldr	r3, [pc, #76]	; (80144e0 <ResetFCnts+0x68>)
 8014492:	681b      	ldr	r3, [r3, #0]
 8014494:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014498:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 801449a:	4b11      	ldr	r3, [pc, #68]	; (80144e0 <ResetFCnts+0x68>)
 801449c:	681b      	ldr	r3, [r3, #0]
 801449e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80144a2:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 80144a4:	4b0e      	ldr	r3, [pc, #56]	; (80144e0 <ResetFCnts+0x68>)
 80144a6:	681a      	ldr	r2, [r3, #0]
 80144a8:	4b0d      	ldr	r3, [pc, #52]	; (80144e0 <ResetFCnts+0x68>)
 80144aa:	681b      	ldr	r3, [r3, #0]
 80144ac:	6992      	ldr	r2, [r2, #24]
 80144ae:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80144b0:	2300      	movs	r3, #0
 80144b2:	607b      	str	r3, [r7, #4]
 80144b4:	e00b      	b.n	80144ce <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 80144b6:	4b0a      	ldr	r3, [pc, #40]	; (80144e0 <ResetFCnts+0x68>)
 80144b8:	681a      	ldr	r2, [r3, #0]
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	3306      	adds	r3, #6
 80144be:	009b      	lsls	r3, r3, #2
 80144c0:	4413      	add	r3, r2
 80144c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80144c6:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	3301      	adds	r3, #1
 80144cc:	607b      	str	r3, [r7, #4]
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	ddf0      	ble.n	80144b6 <ResetFCnts+0x3e>
    }
}
 80144d4:	bf00      	nop
 80144d6:	bf00      	nop
 80144d8:	370c      	adds	r7, #12
 80144da:	46bd      	mov	sp, r7
 80144dc:	bc80      	pop	{r7}
 80144de:	4770      	bx	lr
 80144e0:	20001acc 	.word	0x20001acc

080144e4 <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
 80144e4:	b480      	push	{r7}
 80144e6:	b083      	sub	sp, #12
 80144e8:	af00      	add	r7, sp, #0
 80144ea:	6078      	str	r0, [r7, #4]
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 80144ec:	4b06      	ldr	r3, [pc, #24]	; (8014508 <IsJoinNonce10xOk+0x24>)
 80144ee:	681b      	ldr	r3, [r3, #0]
 80144f0:	689b      	ldr	r3, [r3, #8]
 80144f2:	687a      	ldr	r2, [r7, #4]
 80144f4:	429a      	cmp	r2, r3
 80144f6:	bf8c      	ite	hi
 80144f8:	2301      	movhi	r3, #1
 80144fa:	2300      	movls	r3, #0
 80144fc:	b2db      	uxtb	r3, r3
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 80144fe:	4618      	mov	r0, r3
 8014500:	370c      	adds	r7, #12
 8014502:	46bd      	mov	sp, r7
 8014504:	bc80      	pop	{r7}
 8014506:	4770      	bx	lr
 8014508:	20001acc 	.word	0x20001acc

0801450c <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 801450c:	b580      	push	{r7, lr}
 801450e:	b082      	sub	sp, #8
 8014510:	af00      	add	r7, sp, #0
 8014512:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	2b00      	cmp	r3, #0
 8014518:	d101      	bne.n	801451e <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 801451a:	2308      	movs	r3, #8
 801451c:	e01c      	b.n	8014558 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 801451e:	4a10      	ldr	r2, [pc, #64]	; (8014560 <LoRaMacCryptoInit+0x54>)
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8014524:	4b0e      	ldr	r3, [pc, #56]	; (8014560 <LoRaMacCryptoInit+0x54>)
 8014526:	681b      	ldr	r3, [r3, #0]
 8014528:	2228      	movs	r2, #40	; 0x28
 801452a:	2100      	movs	r1, #0
 801452c:	4618      	mov	r0, r3
 801452e:	f004 fced 	bl	8018f0c <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8014532:	4b0b      	ldr	r3, [pc, #44]	; (8014560 <LoRaMacCryptoInit+0x54>)
 8014534:	681b      	ldr	r3, [r3, #0]
 8014536:	2201      	movs	r2, #1
 8014538:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 801453a:	4b09      	ldr	r3, [pc, #36]	; (8014560 <LoRaMacCryptoInit+0x54>)
 801453c:	681b      	ldr	r3, [r3, #0]
 801453e:	2201      	movs	r2, #1
 8014540:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 8014542:	4b07      	ldr	r3, [pc, #28]	; (8014560 <LoRaMacCryptoInit+0x54>)
 8014544:	681b      	ldr	r3, [r3, #0]
 8014546:	2201      	movs	r2, #1
 8014548:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 801454a:	4b05      	ldr	r3, [pc, #20]	; (8014560 <LoRaMacCryptoInit+0x54>)
 801454c:	681b      	ldr	r3, [r3, #0]
 801454e:	2200      	movs	r2, #0
 8014550:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8014552:	f7ff ff91 	bl	8014478 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8014556:	2300      	movs	r3, #0
}
 8014558:	4618      	mov	r0, r3
 801455a:	3708      	adds	r7, #8
 801455c:	46bd      	mov	sp, r7
 801455e:	bd80      	pop	{r7, pc}
 8014560:	20001acc 	.word	0x20001acc

08014564 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8014564:	b480      	push	{r7}
 8014566:	b083      	sub	sp, #12
 8014568:	af00      	add	r7, sp, #0
 801456a:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 801456c:	4b04      	ldr	r3, [pc, #16]	; (8014580 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 801456e:	681b      	ldr	r3, [r3, #0]
 8014570:	687a      	ldr	r2, [r7, #4]
 8014572:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8014574:	2300      	movs	r3, #0
}
 8014576:	4618      	mov	r0, r3
 8014578:	370c      	adds	r7, #12
 801457a:	46bd      	mov	sp, r7
 801457c:	bc80      	pop	{r7}
 801457e:	4770      	bx	lr
 8014580:	20001acc 	.word	0x20001acc

08014584 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8014584:	b480      	push	{r7}
 8014586:	b083      	sub	sp, #12
 8014588:	af00      	add	r7, sp, #0
 801458a:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	2b00      	cmp	r3, #0
 8014590:	d101      	bne.n	8014596 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014592:	2309      	movs	r3, #9
 8014594:	e006      	b.n	80145a4 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8014596:	4b06      	ldr	r3, [pc, #24]	; (80145b0 <LoRaMacCryptoGetFCntUp+0x2c>)
 8014598:	681b      	ldr	r3, [r3, #0]
 801459a:	68db      	ldr	r3, [r3, #12]
 801459c:	1c5a      	adds	r2, r3, #1
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80145a2:	2300      	movs	r3, #0
}
 80145a4:	4618      	mov	r0, r3
 80145a6:	370c      	adds	r7, #12
 80145a8:	46bd      	mov	sp, r7
 80145aa:	bc80      	pop	{r7}
 80145ac:	4770      	bx	lr
 80145ae:	bf00      	nop
 80145b0:	20001acc 	.word	0x20001acc

080145b4 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 80145b4:	b580      	push	{r7, lr}
 80145b6:	b088      	sub	sp, #32
 80145b8:	af00      	add	r7, sp, #0
 80145ba:	4603      	mov	r3, r0
 80145bc:	60b9      	str	r1, [r7, #8]
 80145be:	607a      	str	r2, [r7, #4]
 80145c0:	73fb      	strb	r3, [r7, #15]
    uint32_t lastDown = 0;
 80145c2:	2300      	movs	r3, #0
 80145c4:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 80145c6:	2300      	movs	r3, #0
 80145c8:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 80145ca:	2312      	movs	r3, #18
 80145cc:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	d101      	bne.n	80145d8 <LoRaMacCryptoGetFCntDown+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80145d4:	2309      	movs	r3, #9
 80145d6:	e035      	b.n	8014644 <LoRaMacCryptoGetFCntDown+0x90>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 80145d8:	f107 0214 	add.w	r2, r7, #20
 80145dc:	7bfb      	ldrb	r3, [r7, #15]
 80145de:	4611      	mov	r1, r2
 80145e0:	4618      	mov	r0, r3
 80145e2:	f7ff feab 	bl	801433c <GetLastFcntDown>
 80145e6:	4603      	mov	r3, r0
 80145e8:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80145ea:	7efb      	ldrb	r3, [r7, #27]
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	d001      	beq.n	80145f4 <LoRaMacCryptoGetFCntDown+0x40>
    {
        return cryptoStatus;
 80145f0:	7efb      	ldrb	r3, [r7, #27]
 80145f2:	e027      	b.n	8014644 <LoRaMacCryptoGetFCntDown+0x90>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 80145f4:	697b      	ldr	r3, [r7, #20]
 80145f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80145fa:	d103      	bne.n	8014604 <LoRaMacCryptoGetFCntDown+0x50>
    {
        *currentDown = frameFcnt;
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	68ba      	ldr	r2, [r7, #8]
 8014600:	601a      	str	r2, [r3, #0]
 8014602:	e01e      	b.n	8014642 <LoRaMacCryptoGetFCntDown+0x8e>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8014604:	697b      	ldr	r3, [r7, #20]
 8014606:	b29b      	uxth	r3, r3
 8014608:	68ba      	ldr	r2, [r7, #8]
 801460a:	1ad3      	subs	r3, r2, r3
 801460c:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 801460e:	69fb      	ldr	r3, [r7, #28]
 8014610:	2b00      	cmp	r3, #0
 8014612:	dd05      	ble.n	8014620 <LoRaMacCryptoGetFCntDown+0x6c>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8014614:	697a      	ldr	r2, [r7, #20]
 8014616:	69fb      	ldr	r3, [r7, #28]
 8014618:	441a      	add	r2, r3
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	601a      	str	r2, [r3, #0]
 801461e:	e010      	b.n	8014642 <LoRaMacCryptoGetFCntDown+0x8e>
        }
        else if( fCntDiff == 0 )
 8014620:	69fb      	ldr	r3, [r7, #28]
 8014622:	2b00      	cmp	r3, #0
 8014624:	d104      	bne.n	8014630 <LoRaMacCryptoGetFCntDown+0x7c>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8014626:	697a      	ldr	r2, [r7, #20]
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 801462c:	2307      	movs	r3, #7
 801462e:	e009      	b.n	8014644 <LoRaMacCryptoGetFCntDown+0x90>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8014630:	697b      	ldr	r3, [r7, #20]
 8014632:	0c1b      	lsrs	r3, r3, #16
 8014634:	041b      	lsls	r3, r3, #16
 8014636:	68ba      	ldr	r2, [r7, #8]
 8014638:	4413      	add	r3, r2
 801463a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	601a      	str	r2, [r3, #0]
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014642:	2300      	movs	r3, #0
}
 8014644:	4618      	mov	r0, r3
 8014646:	3720      	adds	r7, #32
 8014648:	46bd      	mov	sp, r7
 801464a:	bd80      	pop	{r7, pc}

0801464c <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 801464c:	b480      	push	{r7}
 801464e:	b085      	sub	sp, #20
 8014650:	af00      	add	r7, sp, #0
 8014652:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	2b00      	cmp	r3, #0
 8014658:	d101      	bne.n	801465e <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801465a:	2309      	movs	r3, #9
 801465c:	e019      	b.n	8014692 <LoRaMacCryptoSetMulticastReference+0x46>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801465e:	2300      	movs	r3, #0
 8014660:	60fb      	str	r3, [r7, #12]
 8014662:	e012      	b.n	801468a <LoRaMacCryptoSetMulticastReference+0x3e>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8014664:	4b0d      	ldr	r3, [pc, #52]	; (801469c <LoRaMacCryptoSetMulticastReference+0x50>)
 8014666:	6819      	ldr	r1, [r3, #0]
 8014668:	68fa      	ldr	r2, [r7, #12]
 801466a:	4613      	mov	r3, r2
 801466c:	005b      	lsls	r3, r3, #1
 801466e:	4413      	add	r3, r2
 8014670:	011b      	lsls	r3, r3, #4
 8014672:	461a      	mov	r2, r3
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	4413      	add	r3, r2
 8014678:	68fa      	ldr	r2, [r7, #12]
 801467a:	3206      	adds	r2, #6
 801467c:	0092      	lsls	r2, r2, #2
 801467e:	440a      	add	r2, r1
 8014680:	3204      	adds	r2, #4
 8014682:	625a      	str	r2, [r3, #36]	; 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8014684:	68fb      	ldr	r3, [r7, #12]
 8014686:	3301      	adds	r3, #1
 8014688:	60fb      	str	r3, [r7, #12]
 801468a:	68fb      	ldr	r3, [r7, #12]
 801468c:	2b00      	cmp	r3, #0
 801468e:	dde9      	ble.n	8014664 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014690:	2300      	movs	r3, #0
}
 8014692:	4618      	mov	r0, r3
 8014694:	3714      	adds	r7, #20
 8014696:	46bd      	mov	sp, r7
 8014698:	bc80      	pop	{r7}
 801469a:	4770      	bx	lr
 801469c:	20001acc 	.word	0x20001acc

080146a0 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 80146a0:	b580      	push	{r7, lr}
 80146a2:	b082      	sub	sp, #8
 80146a4:	af00      	add	r7, sp, #0
 80146a6:	4603      	mov	r3, r0
 80146a8:	6039      	str	r1, [r7, #0]
 80146aa:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 80146ac:	79fb      	ldrb	r3, [r7, #7]
 80146ae:	6839      	ldr	r1, [r7, #0]
 80146b0:	4618      	mov	r0, r3
 80146b2:	f7f7 fe29 	bl	800c308 <SecureElementSetKey>
 80146b6:	4603      	mov	r3, r0
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d001      	beq.n	80146c0 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80146bc:	230e      	movs	r3, #14
 80146be:	e021      	b.n	8014704 <LoRaMacCryptoSetKey+0x64>
    }
    if( keyID == APP_KEY )
 80146c0:	79fb      	ldrb	r3, [r7, #7]
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	d11d      	bne.n	8014702 <LoRaMacCryptoSetKey+0x62>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 80146c6:	4b11      	ldr	r3, [pc, #68]	; (801470c <LoRaMacCryptoSetKey+0x6c>)
 80146c8:	681b      	ldr	r3, [r3, #0]
 80146ca:	789b      	ldrb	r3, [r3, #2]
 80146cc:	210b      	movs	r1, #11
 80146ce:	4618      	mov	r0, r3
 80146d0:	f000 fa58 	bl	8014b84 <LoRaMacCryptoDeriveLifeTimeKey>
 80146d4:	4603      	mov	r3, r0
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	d001      	beq.n	80146de <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80146da:	230e      	movs	r3, #14
 80146dc:	e012      	b.n	8014704 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 80146de:	210c      	movs	r1, #12
 80146e0:	2000      	movs	r0, #0
 80146e2:	f000 fa4f 	bl	8014b84 <LoRaMacCryptoDeriveLifeTimeKey>
 80146e6:	4603      	mov	r3, r0
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d001      	beq.n	80146f0 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80146ec:	230e      	movs	r3, #14
 80146ee:	e009      	b.n	8014704 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 80146f0:	210a      	movs	r1, #10
 80146f2:	2000      	movs	r0, #0
 80146f4:	f000 fa46 	bl	8014b84 <LoRaMacCryptoDeriveLifeTimeKey>
 80146f8:	4603      	mov	r3, r0
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	d001      	beq.n	8014702 <LoRaMacCryptoSetKey+0x62>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80146fe:	230e      	movs	r3, #14
 8014700:	e000      	b.n	8014704 <LoRaMacCryptoSetKey+0x64>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8014702:	2300      	movs	r3, #0
}
 8014704:	4618      	mov	r0, r3
 8014706:	3708      	adds	r7, #8
 8014708:	46bd      	mov	sp, r7
 801470a:	bd80      	pop	{r7, pc}
 801470c:	20001acc 	.word	0x20001acc

08014710 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8014710:	b580      	push	{r7, lr}
 8014712:	b086      	sub	sp, #24
 8014714:	af02      	add	r7, sp, #8
 8014716:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	2b00      	cmp	r3, #0
 801471c:	d101      	bne.n	8014722 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801471e:	2309      	movs	r3, #9
 8014720:	e02d      	b.n	801477e <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8014722:	2301      	movs	r3, #1
 8014724:	73fb      	strb	r3, [r7, #15]
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 8014726:	4b18      	ldr	r3, [pc, #96]	; (8014788 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 8014728:	681b      	ldr	r3, [r3, #0]
 801472a:	889a      	ldrh	r2, [r3, #4]
 801472c:	3201      	adds	r2, #1
 801472e:	b292      	uxth	r2, r2
 8014730:	809a      	strh	r2, [r3, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8014732:	4b15      	ldr	r3, [pc, #84]	; (8014788 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 8014734:	681b      	ldr	r3, [r3, #0]
 8014736:	889a      	ldrh	r2, [r3, #4]
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801473c:	6878      	ldr	r0, [r7, #4]
 801473e:	f000 fc1b 	bl	8014f78 <LoRaMacSerializerJoinRequest>
 8014742:	4603      	mov	r3, r0
 8014744:	2b00      	cmp	r3, #0
 8014746:	d001      	beq.n	801474c <LoRaMacCryptoPrepareJoinRequest+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8014748:	2310      	movs	r3, #16
 801474a:	e018      	b.n	801477e <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	6819      	ldr	r1, [r3, #0]
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	3318      	adds	r3, #24
 8014754:	7bfa      	ldrb	r2, [r7, #15]
 8014756:	9300      	str	r3, [sp, #0]
 8014758:	4613      	mov	r3, r2
 801475a:	2213      	movs	r2, #19
 801475c:	2000      	movs	r0, #0
 801475e:	f7f7 fe31 	bl	800c3c4 <SecureElementComputeAesCmac>
 8014762:	4603      	mov	r3, r0
 8014764:	2b00      	cmp	r3, #0
 8014766:	d001      	beq.n	801476c <LoRaMacCryptoPrepareJoinRequest+0x5c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014768:	230e      	movs	r3, #14
 801476a:	e008      	b.n	801477e <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801476c:	6878      	ldr	r0, [r7, #4]
 801476e:	f000 fc03 	bl	8014f78 <LoRaMacSerializerJoinRequest>
 8014772:	4603      	mov	r3, r0
 8014774:	2b00      	cmp	r3, #0
 8014776:	d001      	beq.n	801477c <LoRaMacCryptoPrepareJoinRequest+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8014778:	2310      	movs	r3, #16
 801477a:	e000      	b.n	801477e <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801477c:	2300      	movs	r3, #0
}
 801477e:	4618      	mov	r0, r3
 8014780:	3710      	adds	r7, #16
 8014782:	46bd      	mov	sp, r7
 8014784:	bd80      	pop	{r7, pc}
 8014786:	bf00      	nop
 8014788:	20001acc 	.word	0x20001acc

0801478c <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 801478c:	b590      	push	{r4, r7, lr}
 801478e:	b097      	sub	sp, #92	; 0x5c
 8014790:	af04      	add	r7, sp, #16
 8014792:	4603      	mov	r3, r0
 8014794:	60b9      	str	r1, [r7, #8]
 8014796:	607a      	str	r2, [r7, #4]
 8014798:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	2b00      	cmp	r3, #0
 801479e:	d002      	beq.n	80147a6 <LoRaMacCryptoHandleJoinAccept+0x1a>
 80147a0:	68bb      	ldr	r3, [r7, #8]
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d101      	bne.n	80147aa <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80147a6:	2309      	movs	r3, #9
 80147a8:	e0d3      	b.n	8014952 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80147aa:	2312      	movs	r3, #18
 80147ac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 80147b0:	2300      	movs	r3, #0
 80147b2:	617b      	str	r3, [r7, #20]
 80147b4:	f107 0318 	add.w	r3, r7, #24
 80147b8:	221d      	movs	r2, #29
 80147ba:	2100      	movs	r1, #0
 80147bc:	4618      	mov	r0, r3
 80147be:	f009 f987 	bl	801dad0 <memset>
    uint8_t versionMinor         = 0;
 80147c2:	2300      	movs	r3, #0
 80147c4:	74fb      	strb	r3, [r7, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 80147c6:	4b65      	ldr	r3, [pc, #404]	; (801495c <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 80147c8:	681b      	ldr	r3, [r3, #0]
 80147ca:	889b      	ldrh	r3, [r3, #4]
 80147cc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* LORAMAC_VERSION */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	681c      	ldr	r4, [r3, #0]
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	791b      	ldrb	r3, [r3, #4]
 80147d8:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 80147dc:	7bf8      	ldrb	r0, [r7, #15]
 80147de:	f107 0213 	add.w	r2, r7, #19
 80147e2:	9202      	str	r2, [sp, #8]
 80147e4:	f107 0214 	add.w	r2, r7, #20
 80147e8:	9201      	str	r2, [sp, #4]
 80147ea:	9300      	str	r3, [sp, #0]
 80147ec:	4623      	mov	r3, r4
 80147ee:	460a      	mov	r2, r1
 80147f0:	68b9      	ldr	r1, [r7, #8]
 80147f2:	f7f7 feed 	bl	800c5d0 <SecureElementProcessJoinAccept>
 80147f6:	4603      	mov	r3, r0
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d001      	beq.n	8014800 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80147fc:	230e      	movs	r3, #14
 80147fe:	e0a8      	b.n	8014952 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	6818      	ldr	r0, [r3, #0]
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	791b      	ldrb	r3, [r3, #4]
 8014808:	b29a      	uxth	r2, r3
 801480a:	f107 0314 	add.w	r3, r7, #20
 801480e:	4619      	mov	r1, r3
 8014810:	f004 fb41 	bl	8018e96 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8014814:	6878      	ldr	r0, [r7, #4]
 8014816:	f000 f9f0 	bl	8014bfa <LoRaMacParserJoinAccept>
 801481a:	4603      	mov	r3, r0
 801481c:	2b00      	cmp	r3, #0
 801481e:	d001      	beq.n	8014824 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8014820:	230f      	movs	r3, #15
 8014822:	e096      	b.n	8014952 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    uint32_t currentJoinNonce;
    bool isJoinNonceOk = false;
 8014824:	2300      	movs	r3, #0
 8014826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	799b      	ldrb	r3, [r3, #6]
 801482e:	63fb      	str	r3, [r7, #60]	; 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	79db      	ldrb	r3, [r3, #7]
 8014834:	021b      	lsls	r3, r3, #8
 8014836:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014838:	4313      	orrs	r3, r2
 801483a:	63fb      	str	r3, [r7, #60]	; 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	7a1b      	ldrb	r3, [r3, #8]
 8014840:	041b      	lsls	r3, r3, #16
 8014842:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014844:	4313      	orrs	r3, r2
 8014846:	63fb      	str	r3, [r7, #60]	; 0x3c
        isJoinNonceOk = IsJoinNonce11xOk( currentJoinNonce );
    }
    else
#endif /* LORAMAC_VERSION */
    {
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 8014848:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801484a:	f7ff fe4b 	bl	80144e4 <IsJoinNonce10xOk>
 801484e:	4603      	mov	r3, r0
 8014850:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    }

    if( isJoinNonceOk == true )
 8014854:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8014858:	2b00      	cmp	r3, #0
 801485a:	d010      	beq.n	801487e <LoRaMacCryptoHandleJoinAccept+0xf2>
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 801485c:	4b3f      	ldr	r3, [pc, #252]	; (801495c <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 801485e:	681b      	ldr	r3, [r3, #0]
 8014860:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014862:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 8014864:	7cfb      	ldrb	r3, [r7, #19]
 8014866:	210b      	movs	r1, #11
 8014868:	4618      	mov	r0, r3
 801486a:	f000 f98b 	bl	8014b84 <LoRaMacCryptoDeriveLifeTimeKey>
 801486e:	4603      	mov	r3, r0
 8014870:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014874:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014878:	2b00      	cmp	r3, #0
 801487a:	d005      	beq.n	8014888 <LoRaMacCryptoHandleJoinAccept+0xfc>
 801487c:	e001      	b.n	8014882 <LoRaMacCryptoHandleJoinAccept+0xf6>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 801487e:	2303      	movs	r3, #3
 8014880:	e067      	b.n	8014952 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        return retval;
 8014882:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014886:	e064      	b.n	8014952 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 8014888:	210c      	movs	r1, #12
 801488a:	2000      	movs	r0, #0
 801488c:	f000 f97a 	bl	8014b84 <LoRaMacCryptoDeriveLifeTimeKey>
 8014890:	4603      	mov	r3, r0
 8014892:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014896:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801489a:	2b00      	cmp	r3, #0
 801489c:	d002      	beq.n	80148a4 <LoRaMacCryptoHandleJoinAccept+0x118>
    {
        return retval;
 801489e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80148a2:	e056      	b.n	8014952 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 80148a4:	210a      	movs	r1, #10
 80148a6:	2000      	movs	r0, #0
 80148a8:	f000 f96c 	bl	8014b84 <LoRaMacCryptoDeriveLifeTimeKey>
 80148ac:	4603      	mov	r3, r0
 80148ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80148b2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d002      	beq.n	80148c0 <LoRaMacCryptoHandleJoinAccept+0x134>
    {
        return retval;
 80148ba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80148be:	e048      	b.n	8014952 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	7a5b      	ldrb	r3, [r3, #9]
 80148c4:	63bb      	str	r3, [r7, #56]	; 0x38
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	7a9b      	ldrb	r3, [r3, #10]
 80148ca:	021b      	lsls	r3, r3, #8
 80148cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80148ce:	4313      	orrs	r3, r2
 80148d0:	63bb      	str	r3, [r7, #56]	; 0x38
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	7adb      	ldrb	r3, [r3, #11]
 80148d6:	041b      	lsls	r3, r3, #16
 80148d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80148da:	4313      	orrs	r3, r2
 80148dc:	63bb      	str	r3, [r7, #56]	; 0x38

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 80148de:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80148e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80148e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80148e6:	2009      	movs	r0, #9
 80148e8:	f7ff fcd8 	bl	801429c <DeriveSessionKey10x>
 80148ec:	4603      	mov	r3, r0
 80148ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80148f2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80148f6:	2b00      	cmp	r3, #0
 80148f8:	d002      	beq.n	8014900 <LoRaMacCryptoHandleJoinAccept+0x174>
        {
            return retval;
 80148fa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80148fe:	e028      	b.n	8014952 <LoRaMacCryptoHandleJoinAccept+0x1c6>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8014900:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014904:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014906:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014908:	2008      	movs	r0, #8
 801490a:	f7ff fcc7 	bl	801429c <DeriveSessionKey10x>
 801490e:	4603      	mov	r3, r0
 8014910:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* LORAMAC_VERSION */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014914:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014918:	2b00      	cmp	r3, #0
 801491a:	d002      	beq.n	8014922 <LoRaMacCryptoHandleJoinAccept+0x196>
        {
            return retval;
 801491c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014920:	e017      	b.n	8014952 <LoRaMacCryptoHandleJoinAccept+0x1c6>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8014922:	4b0e      	ldr	r3, [pc, #56]	; (801495c <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8014924:	681b      	ldr	r3, [r3, #0]
 8014926:	7cfa      	ldrb	r2, [r7, #19]
 8014928:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    RJcount0 = 0;
#endif /* LORAMAC_VERSION */
    CryptoNvm->FCntList.FCntUp = 0;
 801492a:	4b0c      	ldr	r3, [pc, #48]	; (801495c <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 801492c:	681b      	ldr	r3, [r3, #0]
 801492e:	2200      	movs	r2, #0
 8014930:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 8014932:	4b0a      	ldr	r3, [pc, #40]	; (801495c <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8014934:	681b      	ldr	r3, [r3, #0]
 8014936:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801493a:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 801493c:	4b07      	ldr	r3, [pc, #28]	; (801495c <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 801493e:	681b      	ldr	r3, [r3, #0]
 8014940:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014944:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8014946:	4b05      	ldr	r3, [pc, #20]	; (801495c <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8014948:	681b      	ldr	r3, [r3, #0]
 801494a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801494e:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8014950:	2300      	movs	r3, #0
}
 8014952:	4618      	mov	r0, r3
 8014954:	374c      	adds	r7, #76	; 0x4c
 8014956:	46bd      	mov	sp, r7
 8014958:	bd90      	pop	{r4, r7, pc}
 801495a:	bf00      	nop
 801495c:	20001acc 	.word	0x20001acc

08014960 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8014960:	b590      	push	{r4, r7, lr}
 8014962:	b08b      	sub	sp, #44	; 0x2c
 8014964:	af04      	add	r7, sp, #16
 8014966:	60f8      	str	r0, [r7, #12]
 8014968:	607b      	str	r3, [r7, #4]
 801496a:	460b      	mov	r3, r1
 801496c:	72fb      	strb	r3, [r7, #11]
 801496e:	4613      	mov	r3, r2
 8014970:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8014972:	2312      	movs	r3, #18
 8014974:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8014976:	2309      	movs	r3, #9
 8014978:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	2b00      	cmp	r3, #0
 801497e:	d101      	bne.n	8014984 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014980:	2309      	movs	r3, #9
 8014982:	e05f      	b.n	8014a44 <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8014984:	4b31      	ldr	r3, [pc, #196]	; (8014a4c <LoRaMacCryptoSecureMessage+0xec>)
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	68db      	ldr	r3, [r3, #12]
 801498a:	68fa      	ldr	r2, [r7, #12]
 801498c:	429a      	cmp	r2, r3
 801498e:	d201      	bcs.n	8014994 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8014990:	2306      	movs	r3, #6
 8014992:	e057      	b.n	8014a44 <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	f893 3020 	ldrb.w	r3, [r3, #32]
 801499a:	2b00      	cmp	r3, #0
 801499c:	d101      	bne.n	80149a2 <LoRaMacCryptoSecureMessage+0x42>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 801499e:	2308      	movs	r3, #8
 80149a0:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 80149a2:	4b2a      	ldr	r3, [pc, #168]	; (8014a4c <LoRaMacCryptoSecureMessage+0xec>)
 80149a4:	681b      	ldr	r3, [r3, #0]
 80149a6:	68db      	ldr	r3, [r3, #12]
 80149a8:	68fa      	ldr	r2, [r7, #12]
 80149aa:	429a      	cmp	r2, r3
 80149ac:	d916      	bls.n	80149dc <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80149b8:	b219      	sxth	r1, r3
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	689c      	ldr	r4, [r3, #8]
 80149be:	7dfa      	ldrb	r2, [r7, #23]
 80149c0:	68fb      	ldr	r3, [r7, #12]
 80149c2:	9301      	str	r3, [sp, #4]
 80149c4:	2300      	movs	r3, #0
 80149c6:	9300      	str	r3, [sp, #0]
 80149c8:	4623      	mov	r3, r4
 80149ca:	f7ff fa73 	bl	8013eb4 <PayloadEncrypt>
 80149ce:	4603      	mov	r3, r0
 80149d0:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80149d2:	7dbb      	ldrb	r3, [r7, #22]
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d001      	beq.n	80149dc <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 80149d8:	7dbb      	ldrb	r3, [r7, #22]
 80149da:	e033      	b.n	8014a44 <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80149dc:	6878      	ldr	r0, [r7, #4]
 80149de:	f000 fb4d 	bl	801507c <LoRaMacSerializerData>
 80149e2:	4603      	mov	r3, r0
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	d001      	beq.n	80149ec <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80149e8:	2310      	movs	r3, #16
 80149ea:	e02b      	b.n	8014a44 <LoRaMacCryptoSecureMessage+0xe4>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 80149ec:	2308      	movs	r3, #8
 80149ee:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	6818      	ldr	r0, [r3, #0]
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	791b      	ldrb	r3, [r3, #4]
 80149f8:	b29b      	uxth	r3, r3
 80149fa:	3b04      	subs	r3, #4
 80149fc:	b299      	uxth	r1, r3
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	689b      	ldr	r3, [r3, #8]
 8014a02:	687a      	ldr	r2, [r7, #4]
 8014a04:	322c      	adds	r2, #44	; 0x2c
 8014a06:	7dfc      	ldrb	r4, [r7, #23]
 8014a08:	9203      	str	r2, [sp, #12]
 8014a0a:	68fa      	ldr	r2, [r7, #12]
 8014a0c:	9202      	str	r2, [sp, #8]
 8014a0e:	9301      	str	r3, [sp, #4]
 8014a10:	2300      	movs	r3, #0
 8014a12:	9300      	str	r3, [sp, #0]
 8014a14:	2300      	movs	r3, #0
 8014a16:	4622      	mov	r2, r4
 8014a18:	f7ff fb4d 	bl	80140b6 <ComputeCmacB0>
 8014a1c:	4603      	mov	r3, r0
 8014a1e:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014a20:	7dbb      	ldrb	r3, [r7, #22]
 8014a22:	2b00      	cmp	r3, #0
 8014a24:	d001      	beq.n	8014a2a <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 8014a26:	7dbb      	ldrb	r3, [r7, #22]
 8014a28:	e00c      	b.n	8014a44 <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8014a2a:	6878      	ldr	r0, [r7, #4]
 8014a2c:	f000 fb26 	bl	801507c <LoRaMacSerializerData>
 8014a30:	4603      	mov	r3, r0
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	d001      	beq.n	8014a3a <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8014a36:	2310      	movs	r3, #16
 8014a38:	e004      	b.n	8014a44 <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8014a3a:	4b04      	ldr	r3, [pc, #16]	; (8014a4c <LoRaMacCryptoSecureMessage+0xec>)
 8014a3c:	681b      	ldr	r3, [r3, #0]
 8014a3e:	68fa      	ldr	r2, [r7, #12]
 8014a40:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8014a42:	2300      	movs	r3, #0
}
 8014a44:	4618      	mov	r0, r3
 8014a46:	371c      	adds	r7, #28
 8014a48:	46bd      	mov	sp, r7
 8014a4a:	bd90      	pop	{r4, r7, pc}
 8014a4c:	20001acc 	.word	0x20001acc

08014a50 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8014a50:	b590      	push	{r4, r7, lr}
 8014a52:	b08b      	sub	sp, #44	; 0x2c
 8014a54:	af04      	add	r7, sp, #16
 8014a56:	60b9      	str	r1, [r7, #8]
 8014a58:	607b      	str	r3, [r7, #4]
 8014a5a:	4603      	mov	r3, r0
 8014a5c:	73fb      	strb	r3, [r7, #15]
 8014a5e:	4613      	mov	r3, r2
 8014a60:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8014a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	d101      	bne.n	8014a6c <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014a68:	2309      	movs	r3, #9
 8014a6a:	e084      	b.n	8014b76 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8014a6c:	7bbb      	ldrb	r3, [r7, #14]
 8014a6e:	6879      	ldr	r1, [r7, #4]
 8014a70:	4618      	mov	r0, r3
 8014a72:	f7ff fc9f 	bl	80143b4 <CheckFCntDown>
 8014a76:	4603      	mov	r3, r0
 8014a78:	f083 0301 	eor.w	r3, r3, #1
 8014a7c:	b2db      	uxtb	r3, r3
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	d001      	beq.n	8014a86 <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8014a82:	2306      	movs	r3, #6
 8014a84:	e077      	b.n	8014b76 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8014a86:	2312      	movs	r3, #18
 8014a88:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8014a8a:	2309      	movs	r3, #9
 8014a8c:	75fb      	strb	r3, [r7, #23]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8014a8e:	2308      	movs	r3, #8
 8014a90:	753b      	strb	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8014a92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014a94:	f000 f97c 	bl	8014d90 <LoRaMacParserData>
 8014a98:	4603      	mov	r3, r0
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	d001      	beq.n	8014aa2 <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8014a9e:	230f      	movs	r3, #15
 8014aa0:	e069      	b.n	8014b76 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8014aa2:	f107 0210 	add.w	r2, r7, #16
 8014aa6:	7bfb      	ldrb	r3, [r7, #15]
 8014aa8:	4611      	mov	r1, r2
 8014aaa:	4618      	mov	r0, r3
 8014aac:	f7ff fbd0 	bl	8014250 <GetKeyAddrItem>
 8014ab0:	4603      	mov	r3, r0
 8014ab2:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014ab4:	7d7b      	ldrb	r3, [r7, #21]
 8014ab6:	2b00      	cmp	r3, #0
 8014ab8:	d001      	beq.n	8014abe <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 8014aba:	7d7b      	ldrb	r3, [r7, #21]
 8014abc:	e05b      	b.n	8014b76 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8014abe:	693b      	ldr	r3, [r7, #16]
 8014ac0:	785b      	ldrb	r3, [r3, #1]
 8014ac2:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8014ac4:	693b      	ldr	r3, [r7, #16]
 8014ac6:	789b      	ldrb	r3, [r3, #2]
 8014ac8:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8014aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014acc:	689b      	ldr	r3, [r3, #8]
 8014ace:	68ba      	ldr	r2, [r7, #8]
 8014ad0:	429a      	cmp	r2, r3
 8014ad2:	d001      	beq.n	8014ad8 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8014ad4:	2302      	movs	r3, #2
 8014ad6:	e04e      	b.n	8014b76 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8014ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ada:	7b1b      	ldrb	r3, [r3, #12]
 8014adc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8014ae0:	b2db      	uxtb	r3, r3
 8014ae2:	2b00      	cmp	r3, #0
 8014ae4:	bf14      	ite	ne
 8014ae6:	2301      	movne	r3, #1
 8014ae8:	2300      	moveq	r3, #0
 8014aea:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8014aec:	4b24      	ldr	r3, [pc, #144]	; (8014b80 <LoRaMacCryptoUnsecureMessage+0x130>)
 8014aee:	681b      	ldr	r3, [r3, #0]
 8014af0:	789b      	ldrb	r3, [r3, #2]
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	d101      	bne.n	8014afa <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8014af6:	2300      	movs	r3, #0
 8014af8:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8014afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014afc:	6818      	ldr	r0, [r3, #0]
 8014afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b00:	791b      	ldrb	r3, [r3, #4]
 8014b02:	b29b      	uxth	r3, r3
 8014b04:	3b04      	subs	r3, #4
 8014b06:	b299      	uxth	r1, r3
 8014b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b0c:	7dbc      	ldrb	r4, [r7, #22]
 8014b0e:	7d3a      	ldrb	r2, [r7, #20]
 8014b10:	9303      	str	r3, [sp, #12]
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	9302      	str	r3, [sp, #8]
 8014b16:	68bb      	ldr	r3, [r7, #8]
 8014b18:	9301      	str	r3, [sp, #4]
 8014b1a:	2301      	movs	r3, #1
 8014b1c:	9300      	str	r3, [sp, #0]
 8014b1e:	4623      	mov	r3, r4
 8014b20:	f7ff fb07 	bl	8014132 <VerifyCmacB0>
 8014b24:	4603      	mov	r3, r0
 8014b26:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014b28:	7d7b      	ldrb	r3, [r7, #21]
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	d001      	beq.n	8014b32 <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 8014b2e:	7d7b      	ldrb	r3, [r7, #21]
 8014b30:	e021      	b.n	8014b76 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8014b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	d101      	bne.n	8014b40 <LoRaMacCryptoUnsecureMessage+0xf0>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8014b3c:	2308      	movs	r3, #8
 8014b3e:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8014b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b42:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8014b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014b4a:	b219      	sxth	r1, r3
 8014b4c:	7dfa      	ldrb	r2, [r7, #23]
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	9301      	str	r3, [sp, #4]
 8014b52:	2301      	movs	r3, #1
 8014b54:	9300      	str	r3, [sp, #0]
 8014b56:	68bb      	ldr	r3, [r7, #8]
 8014b58:	f7ff f9ac 	bl	8013eb4 <PayloadEncrypt>
 8014b5c:	4603      	mov	r3, r0
 8014b5e:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014b60:	7d7b      	ldrb	r3, [r7, #21]
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d001      	beq.n	8014b6a <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 8014b66:	7d7b      	ldrb	r3, [r7, #21]
 8014b68:	e005      	b.n	8014b76 <LoRaMacCryptoUnsecureMessage+0x126>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 8014b6a:	7bbb      	ldrb	r3, [r7, #14]
 8014b6c:	6879      	ldr	r1, [r7, #4]
 8014b6e:	4618      	mov	r0, r3
 8014b70:	f7ff fc44 	bl	80143fc <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8014b74:	2300      	movs	r3, #0
}
 8014b76:	4618      	mov	r0, r3
 8014b78:	371c      	adds	r7, #28
 8014b7a:	46bd      	mov	sp, r7
 8014b7c:	bd90      	pop	{r4, r7, pc}
 8014b7e:	bf00      	nop
 8014b80:	20001acc 	.word	0x20001acc

08014b84 <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8014b84:	b580      	push	{r7, lr}
 8014b86:	b088      	sub	sp, #32
 8014b88:	af00      	add	r7, sp, #0
 8014b8a:	4603      	mov	r3, r0
 8014b8c:	460a      	mov	r2, r1
 8014b8e:	71fb      	strb	r3, [r7, #7]
 8014b90:	4613      	mov	r3, r2
 8014b92:	71bb      	strb	r3, [r7, #6]
    uint8_t compBase[16] = { 0 };
 8014b94:	2300      	movs	r3, #0
 8014b96:	60fb      	str	r3, [r7, #12]
 8014b98:	f107 0310 	add.w	r3, r7, #16
 8014b9c:	2200      	movs	r2, #0
 8014b9e:	601a      	str	r2, [r3, #0]
 8014ba0:	605a      	str	r2, [r3, #4]
 8014ba2:	609a      	str	r2, [r3, #8]
    KeyIdentifier_t rootKeyId = APP_KEY;
 8014ba4:	2300      	movs	r3, #0
 8014ba6:	77fb      	strb	r3, [r7, #31]
    switch( keyID )
 8014ba8:	79bb      	ldrb	r3, [r7, #6]
 8014baa:	2b0c      	cmp	r3, #12
 8014bac:	d00b      	beq.n	8014bc6 <LoRaMacCryptoDeriveLifeTimeKey+0x42>
 8014bae:	2b0c      	cmp	r3, #12
 8014bb0:	dc0f      	bgt.n	8014bd2 <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
 8014bb2:	2b0a      	cmp	r3, #10
 8014bb4:	d00a      	beq.n	8014bcc <LoRaMacCryptoDeriveLifeTimeKey+0x48>
 8014bb6:	2b0b      	cmp	r3, #11
 8014bb8:	d10b      	bne.n	8014bd2 <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
    {
        case MC_ROOT_KEY:
            if( versionMinor == 1 )
 8014bba:	79fb      	ldrb	r3, [r7, #7]
 8014bbc:	2b01      	cmp	r3, #1
 8014bbe:	d10a      	bne.n	8014bd6 <LoRaMacCryptoDeriveLifeTimeKey+0x52>
            {
                compBase[0] = 0x20;
 8014bc0:	2320      	movs	r3, #32
 8014bc2:	733b      	strb	r3, [r7, #12]
            }
            break;
 8014bc4:	e007      	b.n	8014bd6 <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        case MC_KE_KEY:
            rootKeyId = MC_ROOT_KEY;
 8014bc6:	230b      	movs	r3, #11
 8014bc8:	77fb      	strb	r3, [r7, #31]
            break;
 8014bca:	e005      	b.n	8014bd8 <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        case DATABLOCK_INT_KEY:
            compBase[0] = 0x30;
 8014bcc:	2330      	movs	r3, #48	; 0x30
 8014bce:	733b      	strb	r3, [r7, #12]
            break;
 8014bd0:	e002      	b.n	8014bd8 <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8014bd2:	230a      	movs	r3, #10
 8014bd4:	e00d      	b.n	8014bf2 <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
            break;
 8014bd6:	bf00      	nop
    }

    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 8014bd8:	79ba      	ldrb	r2, [r7, #6]
 8014bda:	7ff9      	ldrb	r1, [r7, #31]
 8014bdc:	f107 030c 	add.w	r3, r7, #12
 8014be0:	4618      	mov	r0, r3
 8014be2:	f7f7 fcb5 	bl	800c550 <SecureElementDeriveAndStoreKey>
 8014be6:	4603      	mov	r3, r0
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	d001      	beq.n	8014bf0 <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014bec:	230e      	movs	r3, #14
 8014bee:	e000      	b.n	8014bf2 <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014bf0:	2300      	movs	r3, #0
}
 8014bf2:	4618      	mov	r0, r3
 8014bf4:	3720      	adds	r7, #32
 8014bf6:	46bd      	mov	sp, r7
 8014bf8:	bd80      	pop	{r7, pc}

08014bfa <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8014bfa:	b580      	push	{r7, lr}
 8014bfc:	b084      	sub	sp, #16
 8014bfe:	af00      	add	r7, sp, #0
 8014c00:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	2b00      	cmp	r3, #0
 8014c06:	d003      	beq.n	8014c10 <LoRaMacParserJoinAccept+0x16>
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	681b      	ldr	r3, [r3, #0]
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d101      	bne.n	8014c14 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8014c10:	2302      	movs	r3, #2
 8014c12:	e0b9      	b.n	8014d88 <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8014c14:	2300      	movs	r3, #0
 8014c16:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	681a      	ldr	r2, [r3, #0]
 8014c1c:	89fb      	ldrh	r3, [r7, #14]
 8014c1e:	1c59      	adds	r1, r3, #1
 8014c20:	81f9      	strh	r1, [r7, #14]
 8014c22:	4413      	add	r3, r2
 8014c24:	781a      	ldrb	r2, [r3, #0]
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	1d98      	adds	r0, r3, #6
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	681a      	ldr	r2, [r3, #0]
 8014c32:	89fb      	ldrh	r3, [r7, #14]
 8014c34:	4413      	add	r3, r2
 8014c36:	2203      	movs	r2, #3
 8014c38:	4619      	mov	r1, r3
 8014c3a:	f004 f92c 	bl	8018e96 <memcpy1>
    bufItr = bufItr + 3;
 8014c3e:	89fb      	ldrh	r3, [r7, #14]
 8014c40:	3303      	adds	r3, #3
 8014c42:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	f103 0009 	add.w	r0, r3, #9
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	681a      	ldr	r2, [r3, #0]
 8014c4e:	89fb      	ldrh	r3, [r7, #14]
 8014c50:	4413      	add	r3, r2
 8014c52:	2203      	movs	r2, #3
 8014c54:	4619      	mov	r1, r3
 8014c56:	f004 f91e 	bl	8018e96 <memcpy1>
    bufItr = bufItr + 3;
 8014c5a:	89fb      	ldrh	r3, [r7, #14]
 8014c5c:	3303      	adds	r3, #3
 8014c5e:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	681a      	ldr	r2, [r3, #0]
 8014c64:	89fb      	ldrh	r3, [r7, #14]
 8014c66:	1c59      	adds	r1, r3, #1
 8014c68:	81f9      	strh	r1, [r7, #14]
 8014c6a:	4413      	add	r3, r2
 8014c6c:	781b      	ldrb	r3, [r3, #0]
 8014c6e:	461a      	mov	r2, r3
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	681a      	ldr	r2, [r3, #0]
 8014c78:	89fb      	ldrh	r3, [r7, #14]
 8014c7a:	1c59      	adds	r1, r3, #1
 8014c7c:	81f9      	strh	r1, [r7, #14]
 8014c7e:	4413      	add	r3, r2
 8014c80:	781b      	ldrb	r3, [r3, #0]
 8014c82:	021a      	lsls	r2, r3, #8
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	68db      	ldr	r3, [r3, #12]
 8014c88:	431a      	orrs	r2, r3
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	681a      	ldr	r2, [r3, #0]
 8014c92:	89fb      	ldrh	r3, [r7, #14]
 8014c94:	1c59      	adds	r1, r3, #1
 8014c96:	81f9      	strh	r1, [r7, #14]
 8014c98:	4413      	add	r3, r2
 8014c9a:	781b      	ldrb	r3, [r3, #0]
 8014c9c:	041a      	lsls	r2, r3, #16
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	68db      	ldr	r3, [r3, #12]
 8014ca2:	431a      	orrs	r2, r3
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	681a      	ldr	r2, [r3, #0]
 8014cac:	89fb      	ldrh	r3, [r7, #14]
 8014cae:	1c59      	adds	r1, r3, #1
 8014cb0:	81f9      	strh	r1, [r7, #14]
 8014cb2:	4413      	add	r3, r2
 8014cb4:	781b      	ldrb	r3, [r3, #0]
 8014cb6:	061a      	lsls	r2, r3, #24
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	68db      	ldr	r3, [r3, #12]
 8014cbc:	431a      	orrs	r2, r3
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	681a      	ldr	r2, [r3, #0]
 8014cc6:	89fb      	ldrh	r3, [r7, #14]
 8014cc8:	1c59      	adds	r1, r3, #1
 8014cca:	81f9      	strh	r1, [r7, #14]
 8014ccc:	4413      	add	r3, r2
 8014cce:	781a      	ldrb	r2, [r3, #0]
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	681a      	ldr	r2, [r3, #0]
 8014cd8:	89fb      	ldrh	r3, [r7, #14]
 8014cda:	1c59      	adds	r1, r3, #1
 8014cdc:	81f9      	strh	r1, [r7, #14]
 8014cde:	4413      	add	r3, r2
 8014ce0:	781a      	ldrb	r2, [r3, #0]
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	791b      	ldrb	r3, [r3, #4]
 8014cea:	1f1a      	subs	r2, r3, #4
 8014cec:	89fb      	ldrh	r3, [r7, #14]
 8014cee:	1ad3      	subs	r3, r2, r3
 8014cf0:	2b10      	cmp	r3, #16
 8014cf2:	d10e      	bne.n	8014d12 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	f103 0012 	add.w	r0, r3, #18
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	681a      	ldr	r2, [r3, #0]
 8014cfe:	89fb      	ldrh	r3, [r7, #14]
 8014d00:	4413      	add	r3, r2
 8014d02:	2210      	movs	r2, #16
 8014d04:	4619      	mov	r1, r3
 8014d06:	f004 f8c6 	bl	8018e96 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8014d0a:	89fb      	ldrh	r3, [r7, #14]
 8014d0c:	3310      	adds	r3, #16
 8014d0e:	81fb      	strh	r3, [r7, #14]
 8014d10:	e008      	b.n	8014d24 <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	791b      	ldrb	r3, [r3, #4]
 8014d16:	1f1a      	subs	r2, r3, #4
 8014d18:	89fb      	ldrh	r3, [r7, #14]
 8014d1a:	1ad3      	subs	r3, r2, r3
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	dd01      	ble.n	8014d24 <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8014d20:	2301      	movs	r3, #1
 8014d22:	e031      	b.n	8014d88 <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	681a      	ldr	r2, [r3, #0]
 8014d28:	89fb      	ldrh	r3, [r7, #14]
 8014d2a:	1c59      	adds	r1, r3, #1
 8014d2c:	81f9      	strh	r1, [r7, #14]
 8014d2e:	4413      	add	r3, r2
 8014d30:	781b      	ldrb	r3, [r3, #0]
 8014d32:	461a      	mov	r2, r3
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	681a      	ldr	r2, [r3, #0]
 8014d3c:	89fb      	ldrh	r3, [r7, #14]
 8014d3e:	1c59      	adds	r1, r3, #1
 8014d40:	81f9      	strh	r1, [r7, #14]
 8014d42:	4413      	add	r3, r2
 8014d44:	781b      	ldrb	r3, [r3, #0]
 8014d46:	021a      	lsls	r2, r3, #8
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d4c:	431a      	orrs	r2, r3
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	681a      	ldr	r2, [r3, #0]
 8014d56:	89fb      	ldrh	r3, [r7, #14]
 8014d58:	1c59      	adds	r1, r3, #1
 8014d5a:	81f9      	strh	r1, [r7, #14]
 8014d5c:	4413      	add	r3, r2
 8014d5e:	781b      	ldrb	r3, [r3, #0]
 8014d60:	041a      	lsls	r2, r3, #16
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d66:	431a      	orrs	r2, r3
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	681a      	ldr	r2, [r3, #0]
 8014d70:	89fb      	ldrh	r3, [r7, #14]
 8014d72:	1c59      	adds	r1, r3, #1
 8014d74:	81f9      	strh	r1, [r7, #14]
 8014d76:	4413      	add	r3, r2
 8014d78:	781b      	ldrb	r3, [r3, #0]
 8014d7a:	061a      	lsls	r2, r3, #24
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d80:	431a      	orrs	r2, r3
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 8014d86:	2300      	movs	r3, #0
}
 8014d88:	4618      	mov	r0, r3
 8014d8a:	3710      	adds	r7, #16
 8014d8c:	46bd      	mov	sp, r7
 8014d8e:	bd80      	pop	{r7, pc}

08014d90 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8014d90:	b580      	push	{r7, lr}
 8014d92:	b084      	sub	sp, #16
 8014d94:	af00      	add	r7, sp, #0
 8014d96:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	d003      	beq.n	8014da6 <LoRaMacParserData+0x16>
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	681b      	ldr	r3, [r3, #0]
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	d101      	bne.n	8014daa <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8014da6:	2302      	movs	r3, #2
 8014da8:	e0e2      	b.n	8014f70 <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 8014daa:	2300      	movs	r3, #0
 8014dac:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	681a      	ldr	r2, [r3, #0]
 8014db2:	89fb      	ldrh	r3, [r7, #14]
 8014db4:	1c59      	adds	r1, r3, #1
 8014db6:	81f9      	strh	r1, [r7, #14]
 8014db8:	4413      	add	r3, r2
 8014dba:	781a      	ldrb	r2, [r3, #0]
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	681a      	ldr	r2, [r3, #0]
 8014dc4:	89fb      	ldrh	r3, [r7, #14]
 8014dc6:	1c59      	adds	r1, r3, #1
 8014dc8:	81f9      	strh	r1, [r7, #14]
 8014dca:	4413      	add	r3, r2
 8014dcc:	781b      	ldrb	r3, [r3, #0]
 8014dce:	461a      	mov	r2, r3
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	681a      	ldr	r2, [r3, #0]
 8014dd8:	89fb      	ldrh	r3, [r7, #14]
 8014dda:	1c59      	adds	r1, r3, #1
 8014ddc:	81f9      	strh	r1, [r7, #14]
 8014dde:	4413      	add	r3, r2
 8014de0:	781b      	ldrb	r3, [r3, #0]
 8014de2:	021a      	lsls	r2, r3, #8
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	689b      	ldr	r3, [r3, #8]
 8014de8:	431a      	orrs	r2, r3
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	681a      	ldr	r2, [r3, #0]
 8014df2:	89fb      	ldrh	r3, [r7, #14]
 8014df4:	1c59      	adds	r1, r3, #1
 8014df6:	81f9      	strh	r1, [r7, #14]
 8014df8:	4413      	add	r3, r2
 8014dfa:	781b      	ldrb	r3, [r3, #0]
 8014dfc:	041a      	lsls	r2, r3, #16
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	689b      	ldr	r3, [r3, #8]
 8014e02:	431a      	orrs	r2, r3
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	681a      	ldr	r2, [r3, #0]
 8014e0c:	89fb      	ldrh	r3, [r7, #14]
 8014e0e:	1c59      	adds	r1, r3, #1
 8014e10:	81f9      	strh	r1, [r7, #14]
 8014e12:	4413      	add	r3, r2
 8014e14:	781b      	ldrb	r3, [r3, #0]
 8014e16:	061a      	lsls	r2, r3, #24
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	689b      	ldr	r3, [r3, #8]
 8014e1c:	431a      	orrs	r2, r3
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	681a      	ldr	r2, [r3, #0]
 8014e26:	89fb      	ldrh	r3, [r7, #14]
 8014e28:	1c59      	adds	r1, r3, #1
 8014e2a:	81f9      	strh	r1, [r7, #14]
 8014e2c:	4413      	add	r3, r2
 8014e2e:	781a      	ldrb	r2, [r3, #0]
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	681a      	ldr	r2, [r3, #0]
 8014e38:	89fb      	ldrh	r3, [r7, #14]
 8014e3a:	1c59      	adds	r1, r3, #1
 8014e3c:	81f9      	strh	r1, [r7, #14]
 8014e3e:	4413      	add	r3, r2
 8014e40:	781b      	ldrb	r3, [r3, #0]
 8014e42:	b29a      	uxth	r2, r3
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	681a      	ldr	r2, [r3, #0]
 8014e4c:	89fb      	ldrh	r3, [r7, #14]
 8014e4e:	1c59      	adds	r1, r3, #1
 8014e50:	81f9      	strh	r1, [r7, #14]
 8014e52:	4413      	add	r3, r2
 8014e54:	781b      	ldrb	r3, [r3, #0]
 8014e56:	0219      	lsls	r1, r3, #8
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	89db      	ldrh	r3, [r3, #14]
 8014e5c:	b21a      	sxth	r2, r3
 8014e5e:	b20b      	sxth	r3, r1
 8014e60:	4313      	orrs	r3, r2
 8014e62:	b21b      	sxth	r3, r3
 8014e64:	b29a      	uxth	r2, r3
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	81da      	strh	r2, [r3, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	f103 0010 	add.w	r0, r3, #16
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	681a      	ldr	r2, [r3, #0]
 8014e74:	89fb      	ldrh	r3, [r7, #14]
 8014e76:	18d1      	adds	r1, r2, r3
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	7b1b      	ldrb	r3, [r3, #12]
 8014e7c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014e80:	b2db      	uxtb	r3, r3
 8014e82:	b29b      	uxth	r3, r3
 8014e84:	461a      	mov	r2, r3
 8014e86:	f004 f806 	bl	8018e96 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	7b1b      	ldrb	r3, [r3, #12]
 8014e8e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014e92:	b2db      	uxtb	r3, r3
 8014e94:	b29a      	uxth	r2, r3
 8014e96:	89fb      	ldrh	r3, [r7, #14]
 8014e98:	4413      	add	r3, r2
 8014e9a:	81fb      	strh	r3, [r7, #14]

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	2200      	movs	r2, #0
 8014ea0:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	2200      	movs	r2, #0
 8014ea8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	791b      	ldrb	r3, [r3, #4]
 8014eb0:	461a      	mov	r2, r3
 8014eb2:	89fb      	ldrh	r3, [r7, #14]
 8014eb4:	1ad3      	subs	r3, r2, r3
 8014eb6:	2b04      	cmp	r3, #4
 8014eb8:	dd28      	ble.n	8014f0c <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	681a      	ldr	r2, [r3, #0]
 8014ebe:	89fb      	ldrh	r3, [r7, #14]
 8014ec0:	1c59      	adds	r1, r3, #1
 8014ec2:	81f9      	strh	r1, [r7, #14]
 8014ec4:	4413      	add	r3, r2
 8014ec6:	781a      	ldrb	r2, [r3, #0]
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	791a      	ldrb	r2, [r3, #4]
 8014ed2:	89fb      	ldrh	r3, [r7, #14]
 8014ed4:	b2db      	uxtb	r3, r3
 8014ed6:	1ad3      	subs	r3, r2, r3
 8014ed8:	b2db      	uxtb	r3, r3
 8014eda:	3b04      	subs	r3, #4
 8014edc:	b2da      	uxtb	r2, r3
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	681a      	ldr	r2, [r3, #0]
 8014eec:	89fb      	ldrh	r3, [r7, #14]
 8014eee:	18d1      	adds	r1, r2, r3
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014ef6:	b29b      	uxth	r3, r3
 8014ef8:	461a      	mov	r2, r3
 8014efa:	f003 ffcc 	bl	8018e96 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014f04:	b29a      	uxth	r2, r3
 8014f06:	89fb      	ldrh	r3, [r7, #14]
 8014f08:	4413      	add	r3, r2
 8014f0a:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	681a      	ldr	r2, [r3, #0]
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	791b      	ldrb	r3, [r3, #4]
 8014f14:	3b04      	subs	r3, #4
 8014f16:	4413      	add	r3, r2
 8014f18:	781b      	ldrb	r3, [r3, #0]
 8014f1a:	461a      	mov	r2, r3
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	6819      	ldr	r1, [r3, #0]
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	791b      	ldrb	r3, [r3, #4]
 8014f2c:	3b03      	subs	r3, #3
 8014f2e:	440b      	add	r3, r1
 8014f30:	781b      	ldrb	r3, [r3, #0]
 8014f32:	021b      	lsls	r3, r3, #8
 8014f34:	431a      	orrs	r2, r3
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	6819      	ldr	r1, [r3, #0]
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	791b      	ldrb	r3, [r3, #4]
 8014f46:	3b02      	subs	r3, #2
 8014f48:	440b      	add	r3, r1
 8014f4a:	781b      	ldrb	r3, [r3, #0]
 8014f4c:	041b      	lsls	r3, r3, #16
 8014f4e:	431a      	orrs	r2, r3
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	6819      	ldr	r1, [r3, #0]
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	791b      	ldrb	r3, [r3, #4]
 8014f60:	3b01      	subs	r3, #1
 8014f62:	440b      	add	r3, r1
 8014f64:	781b      	ldrb	r3, [r3, #0]
 8014f66:	061b      	lsls	r3, r3, #24
 8014f68:	431a      	orrs	r2, r3
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8014f6e:	2300      	movs	r3, #0
}
 8014f70:	4618      	mov	r0, r3
 8014f72:	3710      	adds	r7, #16
 8014f74:	46bd      	mov	sp, r7
 8014f76:	bd80      	pop	{r7, pc}

08014f78 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8014f78:	b580      	push	{r7, lr}
 8014f7a:	b084      	sub	sp, #16
 8014f7c:	af00      	add	r7, sp, #0
 8014f7e:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	d003      	beq.n	8014f8e <LoRaMacSerializerJoinRequest+0x16>
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	681b      	ldr	r3, [r3, #0]
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d101      	bne.n	8014f92 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8014f8e:	2301      	movs	r3, #1
 8014f90:	e070      	b.n	8015074 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8014f92:	2300      	movs	r3, #0
 8014f94:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	791b      	ldrb	r3, [r3, #4]
 8014f9a:	2b16      	cmp	r3, #22
 8014f9c:	d801      	bhi.n	8014fa2 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8014f9e:	2302      	movs	r3, #2
 8014fa0:	e068      	b.n	8015074 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	681a      	ldr	r2, [r3, #0]
 8014fa6:	89fb      	ldrh	r3, [r7, #14]
 8014fa8:	1c59      	adds	r1, r3, #1
 8014faa:	81f9      	strh	r1, [r7, #14]
 8014fac:	4413      	add	r3, r2
 8014fae:	687a      	ldr	r2, [r7, #4]
 8014fb0:	7952      	ldrb	r2, [r2, #5]
 8014fb2:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	681a      	ldr	r2, [r3, #0]
 8014fb8:	89fb      	ldrh	r3, [r7, #14]
 8014fba:	18d0      	adds	r0, r2, r3
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	3306      	adds	r3, #6
 8014fc0:	2208      	movs	r2, #8
 8014fc2:	4619      	mov	r1, r3
 8014fc4:	f003 ff82 	bl	8018ecc <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8014fc8:	89fb      	ldrh	r3, [r7, #14]
 8014fca:	3308      	adds	r3, #8
 8014fcc:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	681a      	ldr	r2, [r3, #0]
 8014fd2:	89fb      	ldrh	r3, [r7, #14]
 8014fd4:	18d0      	adds	r0, r2, r3
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	330e      	adds	r3, #14
 8014fda:	2208      	movs	r2, #8
 8014fdc:	4619      	mov	r1, r3
 8014fde:	f003 ff75 	bl	8018ecc <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8014fe2:	89fb      	ldrh	r3, [r7, #14]
 8014fe4:	3308      	adds	r3, #8
 8014fe6:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	8ad9      	ldrh	r1, [r3, #22]
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	681a      	ldr	r2, [r3, #0]
 8014ff0:	89fb      	ldrh	r3, [r7, #14]
 8014ff2:	1c58      	adds	r0, r3, #1
 8014ff4:	81f8      	strh	r0, [r7, #14]
 8014ff6:	4413      	add	r3, r2
 8014ff8:	b2ca      	uxtb	r2, r1
 8014ffa:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	8adb      	ldrh	r3, [r3, #22]
 8015000:	0a1b      	lsrs	r3, r3, #8
 8015002:	b299      	uxth	r1, r3
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	681a      	ldr	r2, [r3, #0]
 8015008:	89fb      	ldrh	r3, [r7, #14]
 801500a:	1c58      	adds	r0, r3, #1
 801500c:	81f8      	strh	r0, [r7, #14]
 801500e:	4413      	add	r3, r2
 8015010:	b2ca      	uxtb	r2, r1
 8015012:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	6999      	ldr	r1, [r3, #24]
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	681a      	ldr	r2, [r3, #0]
 801501c:	89fb      	ldrh	r3, [r7, #14]
 801501e:	1c58      	adds	r0, r3, #1
 8015020:	81f8      	strh	r0, [r7, #14]
 8015022:	4413      	add	r3, r2
 8015024:	b2ca      	uxtb	r2, r1
 8015026:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	699b      	ldr	r3, [r3, #24]
 801502c:	0a19      	lsrs	r1, r3, #8
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	681a      	ldr	r2, [r3, #0]
 8015032:	89fb      	ldrh	r3, [r7, #14]
 8015034:	1c58      	adds	r0, r3, #1
 8015036:	81f8      	strh	r0, [r7, #14]
 8015038:	4413      	add	r3, r2
 801503a:	b2ca      	uxtb	r2, r1
 801503c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	699b      	ldr	r3, [r3, #24]
 8015042:	0c19      	lsrs	r1, r3, #16
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	681a      	ldr	r2, [r3, #0]
 8015048:	89fb      	ldrh	r3, [r7, #14]
 801504a:	1c58      	adds	r0, r3, #1
 801504c:	81f8      	strh	r0, [r7, #14]
 801504e:	4413      	add	r3, r2
 8015050:	b2ca      	uxtb	r2, r1
 8015052:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	699b      	ldr	r3, [r3, #24]
 8015058:	0e19      	lsrs	r1, r3, #24
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	681a      	ldr	r2, [r3, #0]
 801505e:	89fb      	ldrh	r3, [r7, #14]
 8015060:	1c58      	adds	r0, r3, #1
 8015062:	81f8      	strh	r0, [r7, #14]
 8015064:	4413      	add	r3, r2
 8015066:	b2ca      	uxtb	r2, r1
 8015068:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 801506a:	89fb      	ldrh	r3, [r7, #14]
 801506c:	b2da      	uxtb	r2, r3
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8015072:	2300      	movs	r3, #0
}
 8015074:	4618      	mov	r0, r3
 8015076:	3710      	adds	r7, #16
 8015078:	46bd      	mov	sp, r7
 801507a:	bd80      	pop	{r7, pc}

0801507c <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 801507c:	b580      	push	{r7, lr}
 801507e:	b084      	sub	sp, #16
 8015080:	af00      	add	r7, sp, #0
 8015082:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	2b00      	cmp	r3, #0
 8015088:	d003      	beq.n	8015092 <LoRaMacSerializerData+0x16>
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	681b      	ldr	r3, [r3, #0]
 801508e:	2b00      	cmp	r3, #0
 8015090:	d101      	bne.n	8015096 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8015092:	2301      	movs	r3, #1
 8015094:	e0e5      	b.n	8015262 <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 8015096:	2300      	movs	r3, #0
 8015098:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 801509a:	2308      	movs	r3, #8
 801509c:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	7b1b      	ldrb	r3, [r3, #12]
 80150a2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80150a6:	b2db      	uxtb	r3, r3
 80150a8:	b29a      	uxth	r2, r3
 80150aa:	89bb      	ldrh	r3, [r7, #12]
 80150ac:	4413      	add	r3, r2
 80150ae:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80150b6:	2b00      	cmp	r3, #0
 80150b8:	d002      	beq.n	80150c0 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 80150ba:	89bb      	ldrh	r3, [r7, #12]
 80150bc:	3301      	adds	r3, #1
 80150be:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80150c6:	b29a      	uxth	r2, r3
 80150c8:	89bb      	ldrh	r3, [r7, #12]
 80150ca:	4413      	add	r3, r2
 80150cc:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 80150ce:	89bb      	ldrh	r3, [r7, #12]
 80150d0:	3304      	adds	r3, #4
 80150d2:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	791b      	ldrb	r3, [r3, #4]
 80150d8:	b29b      	uxth	r3, r3
 80150da:	89ba      	ldrh	r2, [r7, #12]
 80150dc:	429a      	cmp	r2, r3
 80150de:	d901      	bls.n	80150e4 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80150e0:	2302      	movs	r3, #2
 80150e2:	e0be      	b.n	8015262 <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	681a      	ldr	r2, [r3, #0]
 80150e8:	89fb      	ldrh	r3, [r7, #14]
 80150ea:	1c59      	adds	r1, r3, #1
 80150ec:	81f9      	strh	r1, [r7, #14]
 80150ee:	4413      	add	r3, r2
 80150f0:	687a      	ldr	r2, [r7, #4]
 80150f2:	7952      	ldrb	r2, [r2, #5]
 80150f4:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	6899      	ldr	r1, [r3, #8]
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	681a      	ldr	r2, [r3, #0]
 80150fe:	89fb      	ldrh	r3, [r7, #14]
 8015100:	1c58      	adds	r0, r3, #1
 8015102:	81f8      	strh	r0, [r7, #14]
 8015104:	4413      	add	r3, r2
 8015106:	b2ca      	uxtb	r2, r1
 8015108:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	689b      	ldr	r3, [r3, #8]
 801510e:	0a19      	lsrs	r1, r3, #8
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	681a      	ldr	r2, [r3, #0]
 8015114:	89fb      	ldrh	r3, [r7, #14]
 8015116:	1c58      	adds	r0, r3, #1
 8015118:	81f8      	strh	r0, [r7, #14]
 801511a:	4413      	add	r3, r2
 801511c:	b2ca      	uxtb	r2, r1
 801511e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	689b      	ldr	r3, [r3, #8]
 8015124:	0c19      	lsrs	r1, r3, #16
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	681a      	ldr	r2, [r3, #0]
 801512a:	89fb      	ldrh	r3, [r7, #14]
 801512c:	1c58      	adds	r0, r3, #1
 801512e:	81f8      	strh	r0, [r7, #14]
 8015130:	4413      	add	r3, r2
 8015132:	b2ca      	uxtb	r2, r1
 8015134:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	689b      	ldr	r3, [r3, #8]
 801513a:	0e19      	lsrs	r1, r3, #24
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	681a      	ldr	r2, [r3, #0]
 8015140:	89fb      	ldrh	r3, [r7, #14]
 8015142:	1c58      	adds	r0, r3, #1
 8015144:	81f8      	strh	r0, [r7, #14]
 8015146:	4413      	add	r3, r2
 8015148:	b2ca      	uxtb	r2, r1
 801514a:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	681a      	ldr	r2, [r3, #0]
 8015150:	89fb      	ldrh	r3, [r7, #14]
 8015152:	1c59      	adds	r1, r3, #1
 8015154:	81f9      	strh	r1, [r7, #14]
 8015156:	4413      	add	r3, r2
 8015158:	687a      	ldr	r2, [r7, #4]
 801515a:	7b12      	ldrb	r2, [r2, #12]
 801515c:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	89d9      	ldrh	r1, [r3, #14]
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	681a      	ldr	r2, [r3, #0]
 8015166:	89fb      	ldrh	r3, [r7, #14]
 8015168:	1c58      	adds	r0, r3, #1
 801516a:	81f8      	strh	r0, [r7, #14]
 801516c:	4413      	add	r3, r2
 801516e:	b2ca      	uxtb	r2, r1
 8015170:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	89db      	ldrh	r3, [r3, #14]
 8015176:	0a1b      	lsrs	r3, r3, #8
 8015178:	b299      	uxth	r1, r3
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	681a      	ldr	r2, [r3, #0]
 801517e:	89fb      	ldrh	r3, [r7, #14]
 8015180:	1c58      	adds	r0, r3, #1
 8015182:	81f8      	strh	r0, [r7, #14]
 8015184:	4413      	add	r3, r2
 8015186:	b2ca      	uxtb	r2, r1
 8015188:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	681a      	ldr	r2, [r3, #0]
 801518e:	89fb      	ldrh	r3, [r7, #14]
 8015190:	18d0      	adds	r0, r2, r3
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	f103 0110 	add.w	r1, r3, #16
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	7b1b      	ldrb	r3, [r3, #12]
 801519c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80151a0:	b2db      	uxtb	r3, r3
 80151a2:	b29b      	uxth	r3, r3
 80151a4:	461a      	mov	r2, r3
 80151a6:	f003 fe76 	bl	8018e96 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	7b1b      	ldrb	r3, [r3, #12]
 80151ae:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80151b2:	b2db      	uxtb	r3, r3
 80151b4:	b29a      	uxth	r2, r3
 80151b6:	89fb      	ldrh	r3, [r7, #14]
 80151b8:	4413      	add	r3, r2
 80151ba:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	d009      	beq.n	80151da <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	681a      	ldr	r2, [r3, #0]
 80151ca:	89fb      	ldrh	r3, [r7, #14]
 80151cc:	1c59      	adds	r1, r3, #1
 80151ce:	81f9      	strh	r1, [r7, #14]
 80151d0:	4413      	add	r3, r2
 80151d2:	687a      	ldr	r2, [r7, #4]
 80151d4:	f892 2020 	ldrb.w	r2, [r2, #32]
 80151d8:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	681a      	ldr	r2, [r3, #0]
 80151de:	89fb      	ldrh	r3, [r7, #14]
 80151e0:	18d0      	adds	r0, r2, r3
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80151e6:	687b      	ldr	r3, [r7, #4]
 80151e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80151ec:	b29b      	uxth	r3, r3
 80151ee:	461a      	mov	r2, r3
 80151f0:	f003 fe51 	bl	8018e96 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80151fa:	b29a      	uxth	r2, r3
 80151fc:	89fb      	ldrh	r3, [r7, #14]
 80151fe:	4413      	add	r3, r2
 8015200:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	681a      	ldr	r2, [r3, #0]
 801520a:	89fb      	ldrh	r3, [r7, #14]
 801520c:	1c58      	adds	r0, r3, #1
 801520e:	81f8      	strh	r0, [r7, #14]
 8015210:	4413      	add	r3, r2
 8015212:	b2ca      	uxtb	r2, r1
 8015214:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801521a:	0a19      	lsrs	r1, r3, #8
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	681a      	ldr	r2, [r3, #0]
 8015220:	89fb      	ldrh	r3, [r7, #14]
 8015222:	1c58      	adds	r0, r3, #1
 8015224:	81f8      	strh	r0, [r7, #14]
 8015226:	4413      	add	r3, r2
 8015228:	b2ca      	uxtb	r2, r1
 801522a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015230:	0c19      	lsrs	r1, r3, #16
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	681a      	ldr	r2, [r3, #0]
 8015236:	89fb      	ldrh	r3, [r7, #14]
 8015238:	1c58      	adds	r0, r3, #1
 801523a:	81f8      	strh	r0, [r7, #14]
 801523c:	4413      	add	r3, r2
 801523e:	b2ca      	uxtb	r2, r1
 8015240:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8015242:	687b      	ldr	r3, [r7, #4]
 8015244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015246:	0e19      	lsrs	r1, r3, #24
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	681a      	ldr	r2, [r3, #0]
 801524c:	89fb      	ldrh	r3, [r7, #14]
 801524e:	1c58      	adds	r0, r3, #1
 8015250:	81f8      	strh	r0, [r7, #14]
 8015252:	4413      	add	r3, r2
 8015254:	b2ca      	uxtb	r2, r1
 8015256:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8015258:	89fb      	ldrh	r3, [r7, #14]
 801525a:	b2da      	uxtb	r2, r3
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8015260:	2300      	movs	r3, #0
}
 8015262:	4618      	mov	r0, r3
 8015264:	3710      	adds	r7, #16
 8015266:	46bd      	mov	sp, r7
 8015268:	bd80      	pop	{r7, pc}

0801526a <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 801526a:	b480      	push	{r7}
 801526c:	b083      	sub	sp, #12
 801526e:	af00      	add	r7, sp, #0
 8015270:	4603      	mov	r3, r0
 8015272:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015274:	79fb      	ldrb	r3, [r7, #7]
 8015276:	2b05      	cmp	r3, #5
 8015278:	d002      	beq.n	8015280 <RegionIsActive+0x16>
 801527a:	2b08      	cmp	r3, #8
 801527c:	d002      	beq.n	8015284 <RegionIsActive+0x1a>
 801527e:	e003      	b.n	8015288 <RegionIsActive+0x1e>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 8015280:	2301      	movs	r3, #1
 8015282:	e002      	b.n	801528a <RegionIsActive+0x20>
        KR920_IS_ACTIVE( );
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
 8015284:	2301      	movs	r3, #1
 8015286:	e000      	b.n	801528a <RegionIsActive+0x20>
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8015288:	2300      	movs	r3, #0
        }
    }
}
 801528a:	4618      	mov	r0, r3
 801528c:	370c      	adds	r7, #12
 801528e:	46bd      	mov	sp, r7
 8015290:	bc80      	pop	{r7}
 8015292:	4770      	bx	lr

08015294 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8015294:	b580      	push	{r7, lr}
 8015296:	b084      	sub	sp, #16
 8015298:	af00      	add	r7, sp, #0
 801529a:	4603      	mov	r3, r0
 801529c:	6039      	str	r1, [r7, #0]
 801529e:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 80152a0:	2300      	movs	r3, #0
 80152a2:	60bb      	str	r3, [r7, #8]
    switch( region )
 80152a4:	79fb      	ldrb	r3, [r7, #7]
 80152a6:	2b05      	cmp	r3, #5
 80152a8:	d002      	beq.n	80152b0 <RegionGetPhyParam+0x1c>
 80152aa:	2b08      	cmp	r3, #8
 80152ac:	d006      	beq.n	80152bc <RegionGetPhyParam+0x28>
 80152ae:	e00b      	b.n	80152c8 <RegionGetPhyParam+0x34>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 80152b0:	6838      	ldr	r0, [r7, #0]
 80152b2:	f001 fad1 	bl	8016858 <RegionEU868GetPhyParam>
 80152b6:	4603      	mov	r3, r0
 80152b8:	60fb      	str	r3, [r7, #12]
 80152ba:	e007      	b.n	80152cc <RegionGetPhyParam+0x38>
        KR920_GET_PHY_PARAM( );
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
 80152bc:	6838      	ldr	r0, [r7, #0]
 80152be:	f002 fc51 	bl	8017b64 <RegionUS915GetPhyParam>
 80152c2:	4603      	mov	r3, r0
 80152c4:	60fb      	str	r3, [r7, #12]
 80152c6:	e001      	b.n	80152cc <RegionGetPhyParam+0x38>
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 80152c8:	68bb      	ldr	r3, [r7, #8]
 80152ca:	60fb      	str	r3, [r7, #12]
        }
    }
}
 80152cc:	68fb      	ldr	r3, [r7, #12]
 80152ce:	4618      	mov	r0, r3
 80152d0:	3710      	adds	r7, #16
 80152d2:	46bd      	mov	sp, r7
 80152d4:	bd80      	pop	{r7, pc}

080152d6 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 80152d6:	b580      	push	{r7, lr}
 80152d8:	b082      	sub	sp, #8
 80152da:	af00      	add	r7, sp, #0
 80152dc:	4603      	mov	r3, r0
 80152de:	6039      	str	r1, [r7, #0]
 80152e0:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80152e2:	79fb      	ldrb	r3, [r7, #7]
 80152e4:	2b05      	cmp	r3, #5
 80152e6:	d002      	beq.n	80152ee <RegionSetBandTxDone+0x18>
 80152e8:	2b08      	cmp	r3, #8
 80152ea:	d004      	beq.n	80152f6 <RegionSetBandTxDone+0x20>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 80152ec:	e006      	b.n	80152fc <RegionSetBandTxDone+0x26>
        EU868_SET_BAND_TX_DONE( );
 80152ee:	6838      	ldr	r0, [r7, #0]
 80152f0:	f001 fbf8 	bl	8016ae4 <RegionEU868SetBandTxDone>
 80152f4:	e002      	b.n	80152fc <RegionSetBandTxDone+0x26>
        US915_SET_BAND_TX_DONE( );
 80152f6:	6838      	ldr	r0, [r7, #0]
 80152f8:	f002 fd90 	bl	8017e1c <RegionUS915SetBandTxDone>
        }
    }
}
 80152fc:	3708      	adds	r7, #8
 80152fe:	46bd      	mov	sp, r7
 8015300:	bd80      	pop	{r7, pc}

08015302 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8015302:	b580      	push	{r7, lr}
 8015304:	b082      	sub	sp, #8
 8015306:	af00      	add	r7, sp, #0
 8015308:	4603      	mov	r3, r0
 801530a:	6039      	str	r1, [r7, #0]
 801530c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801530e:	79fb      	ldrb	r3, [r7, #7]
 8015310:	2b05      	cmp	r3, #5
 8015312:	d002      	beq.n	801531a <RegionInitDefaults+0x18>
 8015314:	2b08      	cmp	r3, #8
 8015316:	d004      	beq.n	8015322 <RegionInitDefaults+0x20>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8015318:	e006      	b.n	8015328 <RegionInitDefaults+0x26>
        EU868_INIT_DEFAULTS( );
 801531a:	6838      	ldr	r0, [r7, #0]
 801531c:	f001 fc0e 	bl	8016b3c <RegionEU868InitDefaults>
 8015320:	e002      	b.n	8015328 <RegionInitDefaults+0x26>
        US915_INIT_DEFAULTS( );
 8015322:	6838      	ldr	r0, [r7, #0]
 8015324:	f002 fda6 	bl	8017e74 <RegionUS915InitDefaults>
        }
    }
}
 8015328:	bf00      	nop
 801532a:	3708      	adds	r7, #8
 801532c:	46bd      	mov	sp, r7
 801532e:	bd80      	pop	{r7, pc}

08015330 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8015330:	b580      	push	{r7, lr}
 8015332:	b082      	sub	sp, #8
 8015334:	af00      	add	r7, sp, #0
 8015336:	4603      	mov	r3, r0
 8015338:	6039      	str	r1, [r7, #0]
 801533a:	71fb      	strb	r3, [r7, #7]
 801533c:	4613      	mov	r3, r2
 801533e:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8015340:	79fb      	ldrb	r3, [r7, #7]
 8015342:	2b05      	cmp	r3, #5
 8015344:	d002      	beq.n	801534c <RegionVerify+0x1c>
 8015346:	2b08      	cmp	r3, #8
 8015348:	d007      	beq.n	801535a <RegionVerify+0x2a>
 801534a:	e00d      	b.n	8015368 <RegionVerify+0x38>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 801534c:	79bb      	ldrb	r3, [r7, #6]
 801534e:	4619      	mov	r1, r3
 8015350:	6838      	ldr	r0, [r7, #0]
 8015352:	f001 fc91 	bl	8016c78 <RegionEU868Verify>
 8015356:	4603      	mov	r3, r0
 8015358:	e007      	b.n	801536a <RegionVerify+0x3a>
        KR920_VERIFY( );
        IN865_VERIFY( );
        US915_VERIFY( );
 801535a:	79bb      	ldrb	r3, [r7, #6]
 801535c:	4619      	mov	r1, r3
 801535e:	6838      	ldr	r0, [r7, #0]
 8015360:	f002 feba 	bl	80180d8 <RegionUS915Verify>
 8015364:	4603      	mov	r3, r0
 8015366:	e000      	b.n	801536a <RegionVerify+0x3a>
        RU864_VERIFY( );
        default:
        {
            return false;
 8015368:	2300      	movs	r3, #0
        }
    }
}
 801536a:	4618      	mov	r0, r3
 801536c:	3708      	adds	r7, #8
 801536e:	46bd      	mov	sp, r7
 8015370:	bd80      	pop	{r7, pc}

08015372 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8015372:	b580      	push	{r7, lr}
 8015374:	b082      	sub	sp, #8
 8015376:	af00      	add	r7, sp, #0
 8015378:	4603      	mov	r3, r0
 801537a:	6039      	str	r1, [r7, #0]
 801537c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801537e:	79fb      	ldrb	r3, [r7, #7]
 8015380:	2b05      	cmp	r3, #5
 8015382:	d002      	beq.n	801538a <RegionApplyCFList+0x18>
 8015384:	2b08      	cmp	r3, #8
 8015386:	d004      	beq.n	8015392 <RegionApplyCFList+0x20>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8015388:	e006      	b.n	8015398 <RegionApplyCFList+0x26>
        EU868_APPLY_CF_LIST( );
 801538a:	6838      	ldr	r0, [r7, #0]
 801538c:	f001 fcf0 	bl	8016d70 <RegionEU868ApplyCFList>
 8015390:	e002      	b.n	8015398 <RegionApplyCFList+0x26>
        US915_APPLY_CF_LIST( );
 8015392:	6838      	ldr	r0, [r7, #0]
 8015394:	f002 ff16 	bl	80181c4 <RegionUS915ApplyCFList>
        }
    }
}
 8015398:	bf00      	nop
 801539a:	3708      	adds	r7, #8
 801539c:	46bd      	mov	sp, r7
 801539e:	bd80      	pop	{r7, pc}

080153a0 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 80153a0:	b580      	push	{r7, lr}
 80153a2:	b082      	sub	sp, #8
 80153a4:	af00      	add	r7, sp, #0
 80153a6:	4603      	mov	r3, r0
 80153a8:	6039      	str	r1, [r7, #0]
 80153aa:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80153ac:	79fb      	ldrb	r3, [r7, #7]
 80153ae:	2b05      	cmp	r3, #5
 80153b0:	d002      	beq.n	80153b8 <RegionChanMaskSet+0x18>
 80153b2:	2b08      	cmp	r3, #8
 80153b4:	d005      	beq.n	80153c2 <RegionChanMaskSet+0x22>
 80153b6:	e009      	b.n	80153cc <RegionChanMaskSet+0x2c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 80153b8:	6838      	ldr	r0, [r7, #0]
 80153ba:	f001 fd4d 	bl	8016e58 <RegionEU868ChanMaskSet>
 80153be:	4603      	mov	r3, r0
 80153c0:	e005      	b.n	80153ce <RegionChanMaskSet+0x2e>
        KR920_CHAN_MASK_SET( );
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
 80153c2:	6838      	ldr	r0, [r7, #0]
 80153c4:	f002 ff72 	bl	80182ac <RegionUS915ChanMaskSet>
 80153c8:	4603      	mov	r3, r0
 80153ca:	e000      	b.n	80153ce <RegionChanMaskSet+0x2e>
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 80153cc:	2300      	movs	r3, #0
        }
    }
}
 80153ce:	4618      	mov	r0, r3
 80153d0:	3708      	adds	r7, #8
 80153d2:	46bd      	mov	sp, r7
 80153d4:	bd80      	pop	{r7, pc}

080153d6 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80153d6:	b580      	push	{r7, lr}
 80153d8:	b082      	sub	sp, #8
 80153da:	af00      	add	r7, sp, #0
 80153dc:	603b      	str	r3, [r7, #0]
 80153de:	4603      	mov	r3, r0
 80153e0:	71fb      	strb	r3, [r7, #7]
 80153e2:	460b      	mov	r3, r1
 80153e4:	71bb      	strb	r3, [r7, #6]
 80153e6:	4613      	mov	r3, r2
 80153e8:	717b      	strb	r3, [r7, #5]
    switch( region )
 80153ea:	79fb      	ldrb	r3, [r7, #7]
 80153ec:	2b05      	cmp	r3, #5
 80153ee:	d002      	beq.n	80153f6 <RegionComputeRxWindowParameters+0x20>
 80153f0:	2b08      	cmp	r3, #8
 80153f2:	d008      	beq.n	8015406 <RegionComputeRxWindowParameters+0x30>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 80153f4:	e00e      	b.n	8015414 <RegionComputeRxWindowParameters+0x3e>
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 80153f6:	7979      	ldrb	r1, [r7, #5]
 80153f8:	f997 0006 	ldrsb.w	r0, [r7, #6]
 80153fc:	693b      	ldr	r3, [r7, #16]
 80153fe:	683a      	ldr	r2, [r7, #0]
 8015400:	f001 fd54 	bl	8016eac <RegionEU868ComputeRxWindowParameters>
 8015404:	e006      	b.n	8015414 <RegionComputeRxWindowParameters+0x3e>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 8015406:	7979      	ldrb	r1, [r7, #5]
 8015408:	f997 0006 	ldrsb.w	r0, [r7, #6]
 801540c:	693b      	ldr	r3, [r7, #16]
 801540e:	683a      	ldr	r2, [r7, #0]
 8015410:	f002 ffb4 	bl	801837c <RegionUS915ComputeRxWindowParameters>
        }
    }
}
 8015414:	bf00      	nop
 8015416:	3708      	adds	r7, #8
 8015418:	46bd      	mov	sp, r7
 801541a:	bd80      	pop	{r7, pc}

0801541c <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801541c:	b580      	push	{r7, lr}
 801541e:	b084      	sub	sp, #16
 8015420:	af00      	add	r7, sp, #0
 8015422:	4603      	mov	r3, r0
 8015424:	60b9      	str	r1, [r7, #8]
 8015426:	607a      	str	r2, [r7, #4]
 8015428:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801542a:	7bfb      	ldrb	r3, [r7, #15]
 801542c:	2b05      	cmp	r3, #5
 801542e:	d002      	beq.n	8015436 <RegionRxConfig+0x1a>
 8015430:	2b08      	cmp	r3, #8
 8015432:	d006      	beq.n	8015442 <RegionRxConfig+0x26>
 8015434:	e00b      	b.n	801544e <RegionRxConfig+0x32>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8015436:	6879      	ldr	r1, [r7, #4]
 8015438:	68b8      	ldr	r0, [r7, #8]
 801543a:	f001 fd91 	bl	8016f60 <RegionEU868RxConfig>
 801543e:	4603      	mov	r3, r0
 8015440:	e006      	b.n	8015450 <RegionRxConfig+0x34>
        KR920_RX_CONFIG( );
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
 8015442:	6879      	ldr	r1, [r7, #4]
 8015444:	68b8      	ldr	r0, [r7, #8]
 8015446:	f002 ffe3 	bl	8018410 <RegionUS915RxConfig>
 801544a:	4603      	mov	r3, r0
 801544c:	e000      	b.n	8015450 <RegionRxConfig+0x34>
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 801544e:	2300      	movs	r3, #0
        }
    }
}
 8015450:	4618      	mov	r0, r3
 8015452:	3710      	adds	r7, #16
 8015454:	46bd      	mov	sp, r7
 8015456:	bd80      	pop	{r7, pc}

08015458 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8015458:	b580      	push	{r7, lr}
 801545a:	b084      	sub	sp, #16
 801545c:	af00      	add	r7, sp, #0
 801545e:	60b9      	str	r1, [r7, #8]
 8015460:	607a      	str	r2, [r7, #4]
 8015462:	603b      	str	r3, [r7, #0]
 8015464:	4603      	mov	r3, r0
 8015466:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8015468:	7bfb      	ldrb	r3, [r7, #15]
 801546a:	2b05      	cmp	r3, #5
 801546c:	d002      	beq.n	8015474 <RegionTxConfig+0x1c>
 801546e:	2b08      	cmp	r3, #8
 8015470:	d007      	beq.n	8015482 <RegionTxConfig+0x2a>
 8015472:	e00d      	b.n	8015490 <RegionTxConfig+0x38>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8015474:	683a      	ldr	r2, [r7, #0]
 8015476:	6879      	ldr	r1, [r7, #4]
 8015478:	68b8      	ldr	r0, [r7, #8]
 801547a:	f001 fe41 	bl	8017100 <RegionEU868TxConfig>
 801547e:	4603      	mov	r3, r0
 8015480:	e007      	b.n	8015492 <RegionTxConfig+0x3a>
        KR920_TX_CONFIG( );
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
 8015482:	683a      	ldr	r2, [r7, #0]
 8015484:	6879      	ldr	r1, [r7, #4]
 8015486:	68b8      	ldr	r0, [r7, #8]
 8015488:	f003 f846 	bl	8018518 <RegionUS915TxConfig>
 801548c:	4603      	mov	r3, r0
 801548e:	e000      	b.n	8015492 <RegionTxConfig+0x3a>
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8015490:	2300      	movs	r3, #0
        }
    }
}
 8015492:	4618      	mov	r0, r3
 8015494:	3710      	adds	r7, #16
 8015496:	46bd      	mov	sp, r7
 8015498:	bd80      	pop	{r7, pc}

0801549a <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801549a:	b580      	push	{r7, lr}
 801549c:	b086      	sub	sp, #24
 801549e:	af02      	add	r7, sp, #8
 80154a0:	60b9      	str	r1, [r7, #8]
 80154a2:	607a      	str	r2, [r7, #4]
 80154a4:	603b      	str	r3, [r7, #0]
 80154a6:	4603      	mov	r3, r0
 80154a8:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80154aa:	7bfb      	ldrb	r3, [r7, #15]
 80154ac:	2b05      	cmp	r3, #5
 80154ae:	d002      	beq.n	80154b6 <RegionLinkAdrReq+0x1c>
 80154b0:	2b08      	cmp	r3, #8
 80154b2:	d00a      	beq.n	80154ca <RegionLinkAdrReq+0x30>
 80154b4:	e013      	b.n	80154de <RegionLinkAdrReq+0x44>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 80154b6:	69fb      	ldr	r3, [r7, #28]
 80154b8:	9300      	str	r3, [sp, #0]
 80154ba:	69bb      	ldr	r3, [r7, #24]
 80154bc:	683a      	ldr	r2, [r7, #0]
 80154be:	6879      	ldr	r1, [r7, #4]
 80154c0:	68b8      	ldr	r0, [r7, #8]
 80154c2:	f001 feed 	bl	80172a0 <RegionEU868LinkAdrReq>
 80154c6:	4603      	mov	r3, r0
 80154c8:	e00a      	b.n	80154e0 <RegionLinkAdrReq+0x46>
        KR920_LINK_ADR_REQ( );
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
 80154ca:	69fb      	ldr	r3, [r7, #28]
 80154cc:	9300      	str	r3, [sp, #0]
 80154ce:	69bb      	ldr	r3, [r7, #24]
 80154d0:	683a      	ldr	r2, [r7, #0]
 80154d2:	6879      	ldr	r1, [r7, #4]
 80154d4:	68b8      	ldr	r0, [r7, #8]
 80154d6:	f003 f8c9 	bl	801866c <RegionUS915LinkAdrReq>
 80154da:	4603      	mov	r3, r0
 80154dc:	e000      	b.n	80154e0 <RegionLinkAdrReq+0x46>
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 80154de:	2300      	movs	r3, #0
        }
    }
}
 80154e0:	4618      	mov	r0, r3
 80154e2:	3710      	adds	r7, #16
 80154e4:	46bd      	mov	sp, r7
 80154e6:	bd80      	pop	{r7, pc}

080154e8 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 80154e8:	b580      	push	{r7, lr}
 80154ea:	b082      	sub	sp, #8
 80154ec:	af00      	add	r7, sp, #0
 80154ee:	4603      	mov	r3, r0
 80154f0:	6039      	str	r1, [r7, #0]
 80154f2:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80154f4:	79fb      	ldrb	r3, [r7, #7]
 80154f6:	2b05      	cmp	r3, #5
 80154f8:	d002      	beq.n	8015500 <RegionRxParamSetupReq+0x18>
 80154fa:	2b08      	cmp	r3, #8
 80154fc:	d005      	beq.n	801550a <RegionRxParamSetupReq+0x22>
 80154fe:	e009      	b.n	8015514 <RegionRxParamSetupReq+0x2c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8015500:	6838      	ldr	r0, [r7, #0]
 8015502:	f001 ffef 	bl	80174e4 <RegionEU868RxParamSetupReq>
 8015506:	4603      	mov	r3, r0
 8015508:	e005      	b.n	8015516 <RegionRxParamSetupReq+0x2e>
        KR920_RX_PARAM_SETUP_REQ( );
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
 801550a:	6838      	ldr	r0, [r7, #0]
 801550c:	f003 fac8 	bl	8018aa0 <RegionUS915RxParamSetupReq>
 8015510:	4603      	mov	r3, r0
 8015512:	e000      	b.n	8015516 <RegionRxParamSetupReq+0x2e>
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8015514:	2300      	movs	r3, #0
        }
    }
}
 8015516:	4618      	mov	r0, r3
 8015518:	3708      	adds	r7, #8
 801551a:	46bd      	mov	sp, r7
 801551c:	bd80      	pop	{r7, pc}

0801551e <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 801551e:	b580      	push	{r7, lr}
 8015520:	b082      	sub	sp, #8
 8015522:	af00      	add	r7, sp, #0
 8015524:	4603      	mov	r3, r0
 8015526:	6039      	str	r1, [r7, #0]
 8015528:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801552a:	79fb      	ldrb	r3, [r7, #7]
 801552c:	2b05      	cmp	r3, #5
 801552e:	d002      	beq.n	8015536 <RegionNewChannelReq+0x18>
 8015530:	2b08      	cmp	r3, #8
 8015532:	d005      	beq.n	8015540 <RegionNewChannelReq+0x22>
 8015534:	e009      	b.n	801554a <RegionNewChannelReq+0x2c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 8015536:	6838      	ldr	r0, [r7, #0]
 8015538:	f002 f812 	bl	8017560 <RegionEU868NewChannelReq>
 801553c:	4603      	mov	r3, r0
 801553e:	e005      	b.n	801554c <RegionNewChannelReq+0x2e>
        KR920_NEW_CHANNEL_REQ( );
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
 8015540:	6838      	ldr	r0, [r7, #0]
 8015542:	f003 faf9 	bl	8018b38 <RegionUS915NewChannelReq>
 8015546:	4603      	mov	r3, r0
 8015548:	e000      	b.n	801554c <RegionNewChannelReq+0x2e>
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 801554a:	2300      	movs	r3, #0
        }
    }
}
 801554c:	4618      	mov	r0, r3
 801554e:	3708      	adds	r7, #8
 8015550:	46bd      	mov	sp, r7
 8015552:	bd80      	pop	{r7, pc}

08015554 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8015554:	b580      	push	{r7, lr}
 8015556:	b082      	sub	sp, #8
 8015558:	af00      	add	r7, sp, #0
 801555a:	4603      	mov	r3, r0
 801555c:	6039      	str	r1, [r7, #0]
 801555e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015560:	79fb      	ldrb	r3, [r7, #7]
 8015562:	2b05      	cmp	r3, #5
 8015564:	d002      	beq.n	801556c <RegionTxParamSetupReq+0x18>
 8015566:	2b08      	cmp	r3, #8
 8015568:	d005      	beq.n	8015576 <RegionTxParamSetupReq+0x22>
 801556a:	e009      	b.n	8015580 <RegionTxParamSetupReq+0x2c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 801556c:	6838      	ldr	r0, [r7, #0]
 801556e:	f002 f855 	bl	801761c <RegionEU868TxParamSetupReq>
 8015572:	4603      	mov	r3, r0
 8015574:	e005      	b.n	8015582 <RegionTxParamSetupReq+0x2e>
        KR920_TX_PARAM_SETUP_REQ( );
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
 8015576:	6838      	ldr	r0, [r7, #0]
 8015578:	f003 fae9 	bl	8018b4e <RegionUS915TxParamSetupReq>
 801557c:	4603      	mov	r3, r0
 801557e:	e000      	b.n	8015582 <RegionTxParamSetupReq+0x2e>
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8015580:	2300      	movs	r3, #0
        }
    }
}
 8015582:	4618      	mov	r0, r3
 8015584:	3708      	adds	r7, #8
 8015586:	46bd      	mov	sp, r7
 8015588:	bd80      	pop	{r7, pc}

0801558a <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 801558a:	b580      	push	{r7, lr}
 801558c:	b082      	sub	sp, #8
 801558e:	af00      	add	r7, sp, #0
 8015590:	4603      	mov	r3, r0
 8015592:	6039      	str	r1, [r7, #0]
 8015594:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015596:	79fb      	ldrb	r3, [r7, #7]
 8015598:	2b05      	cmp	r3, #5
 801559a:	d002      	beq.n	80155a2 <RegionDlChannelReq+0x18>
 801559c:	2b08      	cmp	r3, #8
 801559e:	d005      	beq.n	80155ac <RegionDlChannelReq+0x22>
 80155a0:	e009      	b.n	80155b6 <RegionDlChannelReq+0x2c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 80155a2:	6838      	ldr	r0, [r7, #0]
 80155a4:	f002 f846 	bl	8017634 <RegionEU868DlChannelReq>
 80155a8:	4603      	mov	r3, r0
 80155aa:	e005      	b.n	80155b8 <RegionDlChannelReq+0x2e>
        KR920_DL_CHANNEL_REQ( );
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
 80155ac:	6838      	ldr	r0, [r7, #0]
 80155ae:	f003 fad9 	bl	8018b64 <RegionUS915DlChannelReq>
 80155b2:	4603      	mov	r3, r0
 80155b4:	e000      	b.n	80155b8 <RegionDlChannelReq+0x2e>
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 80155b6:	2300      	movs	r3, #0
        }
    }
}
 80155b8:	4618      	mov	r0, r3
 80155ba:	3708      	adds	r7, #8
 80155bc:	46bd      	mov	sp, r7
 80155be:	bd80      	pop	{r7, pc}

080155c0 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 80155c0:	b580      	push	{r7, lr}
 80155c2:	b082      	sub	sp, #8
 80155c4:	af00      	add	r7, sp, #0
 80155c6:	4603      	mov	r3, r0
 80155c8:	71fb      	strb	r3, [r7, #7]
 80155ca:	460b      	mov	r3, r1
 80155cc:	71bb      	strb	r3, [r7, #6]
 80155ce:	4613      	mov	r3, r2
 80155d0:	717b      	strb	r3, [r7, #5]
    switch( region )
 80155d2:	79fb      	ldrb	r3, [r7, #7]
 80155d4:	2b05      	cmp	r3, #5
 80155d6:	d002      	beq.n	80155de <RegionAlternateDr+0x1e>
 80155d8:	2b08      	cmp	r3, #8
 80155da:	d009      	beq.n	80155f0 <RegionAlternateDr+0x30>
 80155dc:	e011      	b.n	8015602 <RegionAlternateDr+0x42>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 80155de:	797a      	ldrb	r2, [r7, #5]
 80155e0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80155e4:	4611      	mov	r1, r2
 80155e6:	4618      	mov	r0, r3
 80155e8:	f002 f86e 	bl	80176c8 <RegionEU868AlternateDr>
 80155ec:	4603      	mov	r3, r0
 80155ee:	e009      	b.n	8015604 <RegionAlternateDr+0x44>
        KR920_ALTERNATE_DR( );
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
 80155f0:	797a      	ldrb	r2, [r7, #5]
 80155f2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80155f6:	4611      	mov	r1, r2
 80155f8:	4618      	mov	r0, r3
 80155fa:	f003 fabf 	bl	8018b7c <RegionUS915AlternateDr>
 80155fe:	4603      	mov	r3, r0
 8015600:	e000      	b.n	8015604 <RegionAlternateDr+0x44>
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8015602:	2300      	movs	r3, #0
        }
    }
}
 8015604:	4618      	mov	r0, r3
 8015606:	3708      	adds	r7, #8
 8015608:	46bd      	mov	sp, r7
 801560a:	bd80      	pop	{r7, pc}

0801560c <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801560c:	b580      	push	{r7, lr}
 801560e:	b084      	sub	sp, #16
 8015610:	af00      	add	r7, sp, #0
 8015612:	60b9      	str	r1, [r7, #8]
 8015614:	607a      	str	r2, [r7, #4]
 8015616:	603b      	str	r3, [r7, #0]
 8015618:	4603      	mov	r3, r0
 801561a:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801561c:	7bfb      	ldrb	r3, [r7, #15]
 801561e:	2b05      	cmp	r3, #5
 8015620:	d002      	beq.n	8015628 <RegionNextChannel+0x1c>
 8015622:	2b08      	cmp	r3, #8
 8015624:	d008      	beq.n	8015638 <RegionNextChannel+0x2c>
 8015626:	e00f      	b.n	8015648 <RegionNextChannel+0x3c>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8015628:	69bb      	ldr	r3, [r7, #24]
 801562a:	683a      	ldr	r2, [r7, #0]
 801562c:	6879      	ldr	r1, [r7, #4]
 801562e:	68b8      	ldr	r0, [r7, #8]
 8015630:	f002 f85a 	bl	80176e8 <RegionEU868NextChannel>
 8015634:	4603      	mov	r3, r0
 8015636:	e008      	b.n	801564a <RegionNextChannel+0x3e>
        KR920_NEXT_CHANNEL( );
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
 8015638:	69bb      	ldr	r3, [r7, #24]
 801563a:	683a      	ldr	r2, [r7, #0]
 801563c:	6879      	ldr	r1, [r7, #4]
 801563e:	68b8      	ldr	r0, [r7, #8]
 8015640:	f003 fad2 	bl	8018be8 <RegionUS915NextChannel>
 8015644:	4603      	mov	r3, r0
 8015646:	e000      	b.n	801564a <RegionNextChannel+0x3e>
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8015648:	2309      	movs	r3, #9
        }
    }
}
 801564a:	4618      	mov	r0, r3
 801564c:	3710      	adds	r7, #16
 801564e:	46bd      	mov	sp, r7
 8015650:	bd80      	pop	{r7, pc}

08015652 <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8015652:	b590      	push	{r4, r7, lr}
 8015654:	b083      	sub	sp, #12
 8015656:	af00      	add	r7, sp, #0
 8015658:	4604      	mov	r4, r0
 801565a:	4608      	mov	r0, r1
 801565c:	4611      	mov	r1, r2
 801565e:	461a      	mov	r2, r3
 8015660:	4623      	mov	r3, r4
 8015662:	71fb      	strb	r3, [r7, #7]
 8015664:	4603      	mov	r3, r0
 8015666:	71bb      	strb	r3, [r7, #6]
 8015668:	460b      	mov	r3, r1
 801566a:	717b      	strb	r3, [r7, #5]
 801566c:	4613      	mov	r3, r2
 801566e:	713b      	strb	r3, [r7, #4]
    switch( region )
 8015670:	79fb      	ldrb	r3, [r7, #7]
 8015672:	2b05      	cmp	r3, #5
 8015674:	d002      	beq.n	801567c <RegionApplyDrOffset+0x2a>
 8015676:	2b08      	cmp	r3, #8
 8015678:	d00a      	beq.n	8015690 <RegionApplyDrOffset+0x3e>
 801567a:	e013      	b.n	80156a4 <RegionApplyDrOffset+0x52>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 801567c:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8015680:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8015684:	79bb      	ldrb	r3, [r7, #6]
 8015686:	4618      	mov	r0, r3
 8015688:	f002 f9a8 	bl	80179dc <RegionEU868ApplyDrOffset>
 801568c:	4603      	mov	r3, r0
 801568e:	e00a      	b.n	80156a6 <RegionApplyDrOffset+0x54>
        KR920_APPLY_DR_OFFSET( );
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
 8015690:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8015694:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8015698:	79bb      	ldrb	r3, [r7, #6]
 801569a:	4618      	mov	r0, r3
 801569c:	f003 fb92 	bl	8018dc4 <RegionUS915ApplyDrOffset>
 80156a0:	4603      	mov	r3, r0
 80156a2:	e000      	b.n	80156a6 <RegionApplyDrOffset+0x54>
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 80156a4:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 80156a6:	4618      	mov	r0, r3
 80156a8:	370c      	adds	r7, #12
 80156aa:	46bd      	mov	sp, r7
 80156ac:	bd90      	pop	{r4, r7, pc}
	...

080156b0 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 80156b0:	b480      	push	{r7}
 80156b2:	b083      	sub	sp, #12
 80156b4:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 80156b6:	4b04      	ldr	r3, [pc, #16]	; (80156c8 <RegionGetVersion+0x18>)
 80156b8:	607b      	str	r3, [r7, #4]

    return version;
 80156ba:	687b      	ldr	r3, [r7, #4]
}
 80156bc:	4618      	mov	r0, r3
 80156be:	370c      	adds	r7, #12
 80156c0:	46bd      	mov	sp, r7
 80156c2:	bc80      	pop	{r7}
 80156c4:	4770      	bx	lr
 80156c6:	bf00      	nop
 80156c8:	02010001 	.word	0x02010001

080156cc <FindAvailable125kHzChannels>:
 *
 * \retval Status
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
 80156cc:	b480      	push	{r7}
 80156ce:	b087      	sub	sp, #28
 80156d0:	af00      	add	r7, sp, #0
 80156d2:	4603      	mov	r3, r0
 80156d4:	60b9      	str	r1, [r7, #8]
 80156d6:	607a      	str	r2, [r7, #4]
 80156d8:	81fb      	strh	r3, [r7, #14]
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 80156da:	68bb      	ldr	r3, [r7, #8]
 80156dc:	2b00      	cmp	r3, #0
 80156de:	d002      	beq.n	80156e6 <FindAvailable125kHzChannels+0x1a>
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	d101      	bne.n	80156ea <FindAvailable125kHzChannels+0x1e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80156e6:	2303      	movs	r3, #3
 80156e8:	e021      	b.n	801572e <FindAvailable125kHzChannels+0x62>
    }

    // Initialize counter
    *availableChannels = 0;
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	2200      	movs	r2, #0
 80156ee:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 80156f0:	2300      	movs	r3, #0
 80156f2:	75fb      	strb	r3, [r7, #23]
 80156f4:	e017      	b.n	8015726 <FindAvailable125kHzChannels+0x5a>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 80156f6:	89fa      	ldrh	r2, [r7, #14]
 80156f8:	7dfb      	ldrb	r3, [r7, #23]
 80156fa:	fa42 f303 	asr.w	r3, r2, r3
 80156fe:	f003 0301 	and.w	r3, r3, #1
 8015702:	2b00      	cmp	r3, #0
 8015704:	d00c      	beq.n	8015720 <FindAvailable125kHzChannels+0x54>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	781b      	ldrb	r3, [r3, #0]
 801570a:	461a      	mov	r2, r3
 801570c:	68bb      	ldr	r3, [r7, #8]
 801570e:	4413      	add	r3, r2
 8015710:	7dfa      	ldrb	r2, [r7, #23]
 8015712:	701a      	strb	r2, [r3, #0]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	781b      	ldrb	r3, [r3, #0]
 8015718:	3301      	adds	r3, #1
 801571a:	b2da      	uxtb	r2, r3
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 8015720:	7dfb      	ldrb	r3, [r7, #23]
 8015722:	3301      	adds	r3, #1
 8015724:	75fb      	strb	r3, [r7, #23]
 8015726:	7dfb      	ldrb	r3, [r7, #23]
 8015728:	2b07      	cmp	r3, #7
 801572a:	d9e4      	bls.n	80156f6 <FindAvailable125kHzChannels+0x2a>
        }
    }

    return LORAMAC_STATUS_OK;
 801572c:	2300      	movs	r3, #0
}
 801572e:	4618      	mov	r0, r3
 8015730:	371c      	adds	r7, #28
 8015732:	46bd      	mov	sp, r7
 8015734:	bc80      	pop	{r7}
 8015736:	4770      	bx	lr

08015738 <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 8015738:	b590      	push	{r4, r7, lr}
 801573a:	b089      	sub	sp, #36	; 0x24
 801573c:	af00      	add	r7, sp, #0
 801573e:	60f8      	str	r0, [r7, #12]
 8015740:	60b9      	str	r1, [r7, #8]
 8015742:	607a      	str	r2, [r7, #4]
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 8015744:	2300      	movs	r3, #0
 8015746:	617b      	str	r3, [r7, #20]
 8015748:	2300      	movs	r3, #0
 801574a:	61bb      	str	r3, [r7, #24]
    uint8_t availableChannels = 0;
 801574c:	2300      	movs	r3, #0
 801574e:	74fb      	strb	r3, [r7, #19]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 8015750:	68fb      	ldr	r3, [r7, #12]
 8015752:	2b00      	cmp	r3, #0
 8015754:	d005      	beq.n	8015762 <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 8015756:	68bb      	ldr	r3, [r7, #8]
 8015758:	2b00      	cmp	r3, #0
 801575a:	d002      	beq.n	8015762 <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	2b00      	cmp	r3, #0
 8015760:	d101      	bne.n	8015766 <RegionBaseUSComputeNext125kHzJoinChannel+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8015762:	2303      	movs	r3, #3
 8015764:	e055      	b.n	8015812 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 8015766:	68bb      	ldr	r3, [r7, #8]
 8015768:	781b      	ldrb	r3, [r3, #0]
 801576a:	777b      	strb	r3, [r7, #29]

    do
    {
        // Current ChannelMaskRemaining, two groups per channel mask. For example Group 0 and 1 (8 bit) are ChannelMaskRemaining 0 (16 bit), etc.
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 801576c:	7f7b      	ldrb	r3, [r7, #29]
 801576e:	085b      	lsrs	r3, r3, #1
 8015770:	773b      	strb	r3, [r7, #28]

        // For even numbers we need the 8 LSBs and for uneven the 8 MSBs
        if( ( startIndex % 2 ) == 0 )
 8015772:	7f7b      	ldrb	r3, [r7, #29]
 8015774:	f003 0301 	and.w	r3, r3, #1
 8015778:	b2db      	uxtb	r3, r3
 801577a:	2b00      	cmp	r3, #0
 801577c:	d107      	bne.n	801578e <RegionBaseUSComputeNext125kHzJoinChannel+0x56>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 801577e:	7f3b      	ldrb	r3, [r7, #28]
 8015780:	005b      	lsls	r3, r3, #1
 8015782:	68fa      	ldr	r2, [r7, #12]
 8015784:	4413      	add	r3, r2
 8015786:	881b      	ldrh	r3, [r3, #0]
 8015788:	b2db      	uxtb	r3, r3
 801578a:	83fb      	strh	r3, [r7, #30]
 801578c:	e006      	b.n	801579c <RegionBaseUSComputeNext125kHzJoinChannel+0x64>
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 801578e:	7f3b      	ldrb	r3, [r7, #28]
 8015790:	005b      	lsls	r3, r3, #1
 8015792:	68fa      	ldr	r2, [r7, #12]
 8015794:	4413      	add	r3, r2
 8015796:	881b      	ldrh	r3, [r3, #0]
 8015798:	0a1b      	lsrs	r3, r3, #8
 801579a:	83fb      	strh	r3, [r7, #30]
        }

        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 801579c:	f107 0213 	add.w	r2, r7, #19
 80157a0:	f107 0114 	add.w	r1, r7, #20
 80157a4:	8bfb      	ldrh	r3, [r7, #30]
 80157a6:	4618      	mov	r0, r3
 80157a8:	f7ff ff90 	bl	80156cc <FindAvailable125kHzChannels>
 80157ac:	4603      	mov	r3, r0
 80157ae:	2b03      	cmp	r3, #3
 80157b0:	d101      	bne.n	80157b6 <RegionBaseUSComputeNext125kHzJoinChannel+0x7e>
        {
            return LORAMAC_STATUS_PARAMETER_INVALID;
 80157b2:	2303      	movs	r3, #3
 80157b4:	e02d      	b.n	8015812 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
        }

        if ( availableChannels > 0 )
 80157b6:	7cfb      	ldrb	r3, [r7, #19]
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	d011      	beq.n	80157e0 <RegionBaseUSComputeNext125kHzJoinChannel+0xa8>
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 80157bc:	7f7b      	ldrb	r3, [r7, #29]
 80157be:	00db      	lsls	r3, r3, #3
 80157c0:	b2dc      	uxtb	r4, r3
 80157c2:	7cfb      	ldrb	r3, [r7, #19]
 80157c4:	3b01      	subs	r3, #1
 80157c6:	4619      	mov	r1, r3
 80157c8:	2000      	movs	r0, #0
 80157ca:	f003 fb4d 	bl	8018e68 <randr>
 80157ce:	4603      	mov	r3, r0
 80157d0:	3320      	adds	r3, #32
 80157d2:	443b      	add	r3, r7
 80157d4:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80157d8:	4423      	add	r3, r4
 80157da:	b2da      	uxtb	r2, r3
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	701a      	strb	r2, [r3, #0]
        }

        // Increment start index
        startIndex++;
 80157e0:	7f7b      	ldrb	r3, [r7, #29]
 80157e2:	3301      	adds	r3, #1
 80157e4:	777b      	strb	r3, [r7, #29]
        if ( startIndex > 7 )
 80157e6:	7f7b      	ldrb	r3, [r7, #29]
 80157e8:	2b07      	cmp	r3, #7
 80157ea:	d901      	bls.n	80157f0 <RegionBaseUSComputeNext125kHzJoinChannel+0xb8>
        {
            startIndex = 0;
 80157ec:	2300      	movs	r3, #0
 80157ee:	777b      	strb	r3, [r7, #29]
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 80157f0:	7cfb      	ldrb	r3, [r7, #19]
 80157f2:	2b00      	cmp	r3, #0
 80157f4:	d104      	bne.n	8015800 <RegionBaseUSComputeNext125kHzJoinChannel+0xc8>
 80157f6:	68bb      	ldr	r3, [r7, #8]
 80157f8:	781b      	ldrb	r3, [r3, #0]
 80157fa:	7f7a      	ldrb	r2, [r7, #29]
 80157fc:	429a      	cmp	r2, r3
 80157fe:	d1b5      	bne.n	801576c <RegionBaseUSComputeNext125kHzJoinChannel+0x34>

    if ( availableChannels > 0 )
 8015800:	7cfb      	ldrb	r3, [r7, #19]
 8015802:	2b00      	cmp	r3, #0
 8015804:	d004      	beq.n	8015810 <RegionBaseUSComputeNext125kHzJoinChannel+0xd8>
    {
        *groupsCurrentIndex = startIndex;
 8015806:	68bb      	ldr	r3, [r7, #8]
 8015808:	7f7a      	ldrb	r2, [r7, #29]
 801580a:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 801580c:	2300      	movs	r3, #0
 801580e:	e000      	b.n	8015812 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 8015810:	2303      	movs	r3, #3
}
 8015812:	4618      	mov	r0, r3
 8015814:	3724      	adds	r7, #36	; 0x24
 8015816:	46bd      	mov	sp, r7
 8015818:	bd90      	pop	{r4, r7, pc}

0801581a <RegionBaseUSCalcDownlinkFrequency>:
    return true;
}

uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
 801581a:	b480      	push	{r7}
 801581c:	b085      	sub	sp, #20
 801581e:	af00      	add	r7, sp, #0
 8015820:	4603      	mov	r3, r0
 8015822:	60b9      	str	r1, [r7, #8]
 8015824:	607a      	str	r2, [r7, #4]
 8015826:	73fb      	strb	r3, [r7, #15]
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
 8015828:	7bfb      	ldrb	r3, [r7, #15]
 801582a:	687a      	ldr	r2, [r7, #4]
 801582c:	fb03 f202 	mul.w	r2, r3, r2
 8015830:	68bb      	ldr	r3, [r7, #8]
 8015832:	4413      	add	r3, r2
}
 8015834:	4618      	mov	r0, r3
 8015836:	3714      	adds	r7, #20
 8015838:	46bd      	mov	sp, r7
 801583a:	bc80      	pop	{r7}
 801583c:	4770      	bx	lr

0801583e <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 801583e:	b480      	push	{r7}
 8015840:	b087      	sub	sp, #28
 8015842:	af00      	add	r7, sp, #0
 8015844:	60f8      	str	r0, [r7, #12]
 8015846:	4608      	mov	r0, r1
 8015848:	4639      	mov	r1, r7
 801584a:	e881 000c 	stmia.w	r1, {r2, r3}
 801584e:	4603      	mov	r3, r0
 8015850:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8015852:	68fb      	ldr	r3, [r7, #12]
 8015854:	881b      	ldrh	r3, [r3, #0]
 8015856:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8015858:	7afb      	ldrb	r3, [r7, #11]
 801585a:	f083 0301 	eor.w	r3, r3, #1
 801585e:	b2db      	uxtb	r3, r3
 8015860:	2b00      	cmp	r3, #0
 8015862:	d01b      	beq.n	801589c <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8015864:	f242 7310 	movw	r3, #10000	; 0x2710
 8015868:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 801586a:	683b      	ldr	r3, [r7, #0]
 801586c:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8015870:	d202      	bcs.n	8015878 <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8015872:	2364      	movs	r3, #100	; 0x64
 8015874:	82bb      	strh	r3, [r7, #20]
 8015876:	e00b      	b.n	8015890 <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8015878:	683b      	ldr	r3, [r7, #0]
 801587a:	f649 22af 	movw	r2, #39599	; 0x9aaf
 801587e:	4293      	cmp	r3, r2
 8015880:	d803      	bhi.n	801588a <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8015882:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015886:	82bb      	strh	r3, [r7, #20]
 8015888:	e002      	b.n	8015890 <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 801588a:	f242 7310 	movw	r3, #10000	; 0x2710
 801588e:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8015890:	8aba      	ldrh	r2, [r7, #20]
 8015892:	8afb      	ldrh	r3, [r7, #22]
 8015894:	4293      	cmp	r3, r2
 8015896:	bf38      	it	cc
 8015898:	4613      	movcc	r3, r2
 801589a:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 801589c:	8afb      	ldrh	r3, [r7, #22]
 801589e:	2b00      	cmp	r3, #0
 80158a0:	d101      	bne.n	80158a6 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 80158a2:	2301      	movs	r3, #1
 80158a4:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 80158a6:	8afb      	ldrh	r3, [r7, #22]
}
 80158a8:	4618      	mov	r0, r3
 80158aa:	371c      	adds	r7, #28
 80158ac:	46bd      	mov	sp, r7
 80158ae:	bc80      	pop	{r7}
 80158b0:	4770      	bx	lr
	...

080158b4 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 80158b4:	b580      	push	{r7, lr}
 80158b6:	b08e      	sub	sp, #56	; 0x38
 80158b8:	af02      	add	r7, sp, #8
 80158ba:	60f8      	str	r0, [r7, #12]
 80158bc:	4608      	mov	r0, r1
 80158be:	4639      	mov	r1, r7
 80158c0:	e881 000c 	stmia.w	r1, {r2, r3}
 80158c4:	4603      	mov	r3, r0
 80158c6:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 80158c8:	68fb      	ldr	r3, [r7, #12]
 80158ca:	881b      	ldrh	r3, [r3, #0]
 80158cc:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80158ce:	4b4b      	ldr	r3, [pc, #300]	; (80159fc <SetMaxTimeCredits+0x148>)
 80158d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 80158d2:	463b      	mov	r3, r7
 80158d4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80158d8:	f006 ff68 	bl	801c7ac <SysTimeToMs>
 80158dc:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 80158de:	f107 0314 	add.w	r3, r7, #20
 80158e2:	2200      	movs	r2, #0
 80158e4:	601a      	str	r2, [r3, #0]
 80158e6:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80158e8:	7af9      	ldrb	r1, [r7, #11]
 80158ea:	463b      	mov	r3, r7
 80158ec:	cb0c      	ldmia	r3, {r2, r3}
 80158ee:	68f8      	ldr	r0, [r7, #12]
 80158f0:	f7ff ffa5 	bl	801583e <GetDutyCycle>
 80158f4:	4603      	mov	r3, r0
 80158f6:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 80158f8:	7afb      	ldrb	r3, [r7, #11]
 80158fa:	f083 0301 	eor.w	r3, r3, #1
 80158fe:	b2db      	uxtb	r3, r3
 8015900:	2b00      	cmp	r3, #0
 8015902:	d062      	beq.n	80159ca <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8015904:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015906:	2b64      	cmp	r3, #100	; 0x64
 8015908:	d105      	bne.n	8015916 <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 801590a:	4b3c      	ldr	r3, [pc, #240]	; (80159fc <SetMaxTimeCredits+0x148>)
 801590c:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 801590e:	68fb      	ldr	r3, [r7, #12]
 8015910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015912:	609a      	str	r2, [r3, #8]
 8015914:	e00b      	b.n	801592e <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8015916:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015918:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801591c:	d105      	bne.n	801592a <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 801591e:	4b38      	ldr	r3, [pc, #224]	; (8015a00 <SetMaxTimeCredits+0x14c>)
 8015920:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8015922:	68fb      	ldr	r3, [r7, #12]
 8015924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015926:	609a      	str	r2, [r3, #8]
 8015928:	e001      	b.n	801592e <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 801592a:	4b36      	ldr	r3, [pc, #216]	; (8015a04 <SetMaxTimeCredits+0x150>)
 801592c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 801592e:	68fb      	ldr	r3, [r7, #12]
 8015930:	689a      	ldr	r2, [r3, #8]
 8015932:	f107 031c 	add.w	r3, r7, #28
 8015936:	4611      	mov	r1, r2
 8015938:	4618      	mov	r0, r3
 801593a:	f006 ff5f 	bl	801c7fc <SysTimeFromMs>
 801593e:	f107 0014 	add.w	r0, r7, #20
 8015942:	6a3b      	ldr	r3, [r7, #32]
 8015944:	9300      	str	r3, [sp, #0]
 8015946:	69fb      	ldr	r3, [r7, #28]
 8015948:	463a      	mov	r2, r7
 801594a:	ca06      	ldmia	r2, {r1, r2}
 801594c:	f006 fe6f 	bl	801c62e <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8015950:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8015954:	f083 0301 	eor.w	r3, r3, #1
 8015958:	b2db      	uxtb	r3, r3
 801595a:	2b00      	cmp	r3, #0
 801595c:	d006      	beq.n	801596c <SetMaxTimeCredits+0xb8>
 801595e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8015962:	f083 0301 	eor.w	r3, r3, #1
 8015966:	b2db      	uxtb	r3, r3
 8015968:	2b00      	cmp	r3, #0
 801596a:	d108      	bne.n	801597e <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 801596c:	68fb      	ldr	r3, [r7, #12]
 801596e:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8015970:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015972:	429a      	cmp	r2, r3
 8015974:	d103      	bne.n	801597e <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 8015976:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8015978:	4a23      	ldr	r2, [pc, #140]	; (8015a08 <SetMaxTimeCredits+0x154>)
 801597a:	4293      	cmp	r3, r2
 801597c:	d92f      	bls.n	80159de <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 801597e:	68fb      	ldr	r3, [r7, #12]
 8015980:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015982:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8015984:	683b      	ldr	r3, [r7, #0]
 8015986:	4a21      	ldr	r2, [pc, #132]	; (8015a0c <SetMaxTimeCredits+0x158>)
 8015988:	4293      	cmp	r3, r2
 801598a:	d928      	bls.n	80159de <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 801598c:	683b      	ldr	r3, [r7, #0]
 801598e:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8015992:	3b30      	subs	r3, #48	; 0x30
 8015994:	4a1e      	ldr	r2, [pc, #120]	; (8015a10 <SetMaxTimeCredits+0x15c>)
 8015996:	fba2 2303 	umull	r2, r3, r2, r3
 801599a:	0c1b      	lsrs	r3, r3, #16
 801599c:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 801599e:	697b      	ldr	r3, [r7, #20]
 80159a0:	4a1c      	ldr	r2, [pc, #112]	; (8015a14 <SetMaxTimeCredits+0x160>)
 80159a2:	fb02 f303 	mul.w	r3, r2, r3
 80159a6:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 80159a8:	697b      	ldr	r3, [r7, #20]
 80159aa:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 80159ae:	3330      	adds	r3, #48	; 0x30
 80159b0:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 80159b2:	2300      	movs	r3, #0
 80159b4:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 80159b6:	f107 0314 	add.w	r3, r7, #20
 80159ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80159be:	f006 fef5 	bl	801c7ac <SysTimeToMs>
 80159c2:	4602      	mov	r2, r0
 80159c4:	68fb      	ldr	r3, [r7, #12]
 80159c6:	609a      	str	r2, [r3, #8]
 80159c8:	e009      	b.n	80159de <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 80159ca:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80159ce:	f083 0301 	eor.w	r3, r3, #1
 80159d2:	b2db      	uxtb	r3, r3
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	d002      	beq.n	80159de <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 80159d8:	68fb      	ldr	r3, [r7, #12]
 80159da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80159dc:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 80159de:	68fb      	ldr	r3, [r7, #12]
 80159e0:	685b      	ldr	r3, [r3, #4]
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	d102      	bne.n	80159ec <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 80159e6:	68fb      	ldr	r3, [r7, #12]
 80159e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80159ea:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 80159ec:	68fb      	ldr	r3, [r7, #12]
 80159ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80159f0:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 80159f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 80159f4:	4618      	mov	r0, r3
 80159f6:	3730      	adds	r7, #48	; 0x30
 80159f8:	46bd      	mov	sp, r7
 80159fa:	bd80      	pop	{r7, pc}
 80159fc:	001b7740 	.word	0x001b7740
 8015a00:	0112a880 	.word	0x0112a880
 8015a04:	02932e00 	.word	0x02932e00
 8015a08:	0001517f 	.word	0x0001517f
 8015a0c:	0001ec2f 	.word	0x0001ec2f
 8015a10:	c22e4507 	.word	0xc22e4507
 8015a14:	00015180 	.word	0x00015180

08015a18 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8015a18:	b580      	push	{r7, lr}
 8015a1a:	b086      	sub	sp, #24
 8015a1c:	af02      	add	r7, sp, #8
 8015a1e:	6078      	str	r0, [r7, #4]
 8015a20:	4608      	mov	r0, r1
 8015a22:	4611      	mov	r1, r2
 8015a24:	461a      	mov	r2, r3
 8015a26:	4603      	mov	r3, r0
 8015a28:	70fb      	strb	r3, [r7, #3]
 8015a2a:	460b      	mov	r3, r1
 8015a2c:	70bb      	strb	r3, [r7, #2]
 8015a2e:	4613      	mov	r3, r2
 8015a30:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8015a32:	78f9      	ldrb	r1, [r7, #3]
 8015a34:	787b      	ldrb	r3, [r7, #1]
 8015a36:	9301      	str	r3, [sp, #4]
 8015a38:	78bb      	ldrb	r3, [r7, #2]
 8015a3a:	9300      	str	r3, [sp, #0]
 8015a3c:	f107 0318 	add.w	r3, r7, #24
 8015a40:	cb0c      	ldmia	r3, {r2, r3}
 8015a42:	6878      	ldr	r0, [r7, #4]
 8015a44:	f7ff ff36 	bl	80158b4 <SetMaxTimeCredits>
 8015a48:	4603      	mov	r3, r0
 8015a4a:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8015a4c:	78fb      	ldrb	r3, [r7, #3]
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	d00a      	beq.n	8015a68 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	685b      	ldr	r3, [r3, #4]
 8015a56:	4618      	mov	r0, r3
 8015a58:	f007 fce4 	bl	801d424 <UTIL_TIMER_GetElapsedTime>
 8015a5c:	4602      	mov	r2, r0
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	68db      	ldr	r3, [r3, #12]
 8015a62:	441a      	add	r2, r3
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	68da      	ldr	r2, [r3, #12]
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	691b      	ldr	r3, [r3, #16]
 8015a70:	429a      	cmp	r2, r3
 8015a72:	d903      	bls.n	8015a7c <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	691a      	ldr	r2, [r3, #16]
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	6a3a      	ldr	r2, [r7, #32]
 8015a80:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 8015a82:	89fb      	ldrh	r3, [r7, #14]
}
 8015a84:	4618      	mov	r0, r3
 8015a86:	3710      	adds	r7, #16
 8015a88:	46bd      	mov	sp, r7
 8015a8a:	bd80      	pop	{r7, pc}

08015a8c <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8015a8c:	b480      	push	{r7}
 8015a8e:	b085      	sub	sp, #20
 8015a90:	af00      	add	r7, sp, #0
 8015a92:	4603      	mov	r3, r0
 8015a94:	460a      	mov	r2, r1
 8015a96:	80fb      	strh	r3, [r7, #6]
 8015a98:	4613      	mov	r3, r2
 8015a9a:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8015a9c:	2300      	movs	r3, #0
 8015a9e:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8015aa0:	2300      	movs	r3, #0
 8015aa2:	73bb      	strb	r3, [r7, #14]
 8015aa4:	e011      	b.n	8015aca <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8015aa6:	88fa      	ldrh	r2, [r7, #6]
 8015aa8:	7bbb      	ldrb	r3, [r7, #14]
 8015aaa:	2101      	movs	r1, #1
 8015aac:	fa01 f303 	lsl.w	r3, r1, r3
 8015ab0:	401a      	ands	r2, r3
 8015ab2:	7bbb      	ldrb	r3, [r7, #14]
 8015ab4:	2101      	movs	r1, #1
 8015ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8015aba:	429a      	cmp	r2, r3
 8015abc:	d102      	bne.n	8015ac4 <CountChannels+0x38>
        {
            nbActiveBits++;
 8015abe:	7bfb      	ldrb	r3, [r7, #15]
 8015ac0:	3301      	adds	r3, #1
 8015ac2:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8015ac4:	7bbb      	ldrb	r3, [r7, #14]
 8015ac6:	3301      	adds	r3, #1
 8015ac8:	73bb      	strb	r3, [r7, #14]
 8015aca:	7bba      	ldrb	r2, [r7, #14]
 8015acc:	797b      	ldrb	r3, [r7, #5]
 8015ace:	429a      	cmp	r2, r3
 8015ad0:	d3e9      	bcc.n	8015aa6 <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 8015ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8015ad4:	4618      	mov	r0, r3
 8015ad6:	3714      	adds	r7, #20
 8015ad8:	46bd      	mov	sp, r7
 8015ada:	bc80      	pop	{r7}
 8015adc:	4770      	bx	lr

08015ade <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8015ade:	b580      	push	{r7, lr}
 8015ae0:	b084      	sub	sp, #16
 8015ae2:	af00      	add	r7, sp, #0
 8015ae4:	6039      	str	r1, [r7, #0]
 8015ae6:	4611      	mov	r1, r2
 8015ae8:	461a      	mov	r2, r3
 8015aea:	4603      	mov	r3, r0
 8015aec:	71fb      	strb	r3, [r7, #7]
 8015aee:	460b      	mov	r3, r1
 8015af0:	71bb      	strb	r3, [r7, #6]
 8015af2:	4613      	mov	r3, r2
 8015af4:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8015af6:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8015afa:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8015afe:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015b02:	4618      	mov	r0, r3
 8015b04:	f000 f85d 	bl	8015bc2 <RegionCommonValueInRange>
 8015b08:	4603      	mov	r3, r0
 8015b0a:	2b00      	cmp	r3, #0
 8015b0c:	d101      	bne.n	8015b12 <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 8015b0e:	2300      	movs	r3, #0
 8015b10:	e053      	b.n	8015bba <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8015b12:	2300      	movs	r3, #0
 8015b14:	73fb      	strb	r3, [r7, #15]
 8015b16:	2300      	movs	r3, #0
 8015b18:	73bb      	strb	r3, [r7, #14]
 8015b1a:	e049      	b.n	8015bb0 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8015b1c:	2300      	movs	r3, #0
 8015b1e:	737b      	strb	r3, [r7, #13]
 8015b20:	e03d      	b.n	8015b9e <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8015b22:	7bbb      	ldrb	r3, [r7, #14]
 8015b24:	005b      	lsls	r3, r3, #1
 8015b26:	683a      	ldr	r2, [r7, #0]
 8015b28:	4413      	add	r3, r2
 8015b2a:	881b      	ldrh	r3, [r3, #0]
 8015b2c:	461a      	mov	r2, r3
 8015b2e:	7b7b      	ldrb	r3, [r7, #13]
 8015b30:	fa42 f303 	asr.w	r3, r2, r3
 8015b34:	f003 0301 	and.w	r3, r3, #1
 8015b38:	2b00      	cmp	r3, #0
 8015b3a:	d02d      	beq.n	8015b98 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8015b3c:	7bfa      	ldrb	r2, [r7, #15]
 8015b3e:	7b7b      	ldrb	r3, [r7, #13]
 8015b40:	4413      	add	r3, r2
 8015b42:	461a      	mov	r2, r3
 8015b44:	4613      	mov	r3, r2
 8015b46:	005b      	lsls	r3, r3, #1
 8015b48:	4413      	add	r3, r2
 8015b4a:	009b      	lsls	r3, r3, #2
 8015b4c:	461a      	mov	r2, r3
 8015b4e:	69fb      	ldr	r3, [r7, #28]
 8015b50:	4413      	add	r3, r2
 8015b52:	7a1b      	ldrb	r3, [r3, #8]
 8015b54:	f343 0303 	sbfx	r3, r3, #0, #4
 8015b58:	b25b      	sxtb	r3, r3
 8015b5a:	f003 030f 	and.w	r3, r3, #15
 8015b5e:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8015b60:	7bfa      	ldrb	r2, [r7, #15]
 8015b62:	7b7b      	ldrb	r3, [r7, #13]
 8015b64:	4413      	add	r3, r2
 8015b66:	461a      	mov	r2, r3
 8015b68:	4613      	mov	r3, r2
 8015b6a:	005b      	lsls	r3, r3, #1
 8015b6c:	4413      	add	r3, r2
 8015b6e:	009b      	lsls	r3, r3, #2
 8015b70:	461a      	mov	r2, r3
 8015b72:	69fb      	ldr	r3, [r7, #28]
 8015b74:	4413      	add	r3, r2
 8015b76:	7a1b      	ldrb	r3, [r3, #8]
 8015b78:	f343 1303 	sbfx	r3, r3, #4, #4
 8015b7c:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8015b7e:	f003 030f 	and.w	r3, r3, #15
 8015b82:	b25a      	sxtb	r2, r3
 8015b84:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015b88:	4618      	mov	r0, r3
 8015b8a:	f000 f81a 	bl	8015bc2 <RegionCommonValueInRange>
 8015b8e:	4603      	mov	r3, r0
 8015b90:	2b01      	cmp	r3, #1
 8015b92:	d101      	bne.n	8015b98 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8015b94:	2301      	movs	r3, #1
 8015b96:	e010      	b.n	8015bba <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8015b98:	7b7b      	ldrb	r3, [r7, #13]
 8015b9a:	3301      	adds	r3, #1
 8015b9c:	737b      	strb	r3, [r7, #13]
 8015b9e:	7b7b      	ldrb	r3, [r7, #13]
 8015ba0:	2b0f      	cmp	r3, #15
 8015ba2:	d9be      	bls.n	8015b22 <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8015ba4:	7bfb      	ldrb	r3, [r7, #15]
 8015ba6:	3310      	adds	r3, #16
 8015ba8:	73fb      	strb	r3, [r7, #15]
 8015baa:	7bbb      	ldrb	r3, [r7, #14]
 8015bac:	3301      	adds	r3, #1
 8015bae:	73bb      	strb	r3, [r7, #14]
 8015bb0:	7bfa      	ldrb	r2, [r7, #15]
 8015bb2:	79fb      	ldrb	r3, [r7, #7]
 8015bb4:	429a      	cmp	r2, r3
 8015bb6:	d3b1      	bcc.n	8015b1c <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8015bb8:	2300      	movs	r3, #0
}
 8015bba:	4618      	mov	r0, r3
 8015bbc:	3710      	adds	r7, #16
 8015bbe:	46bd      	mov	sp, r7
 8015bc0:	bd80      	pop	{r7, pc}

08015bc2 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8015bc2:	b480      	push	{r7}
 8015bc4:	b083      	sub	sp, #12
 8015bc6:	af00      	add	r7, sp, #0
 8015bc8:	4603      	mov	r3, r0
 8015bca:	71fb      	strb	r3, [r7, #7]
 8015bcc:	460b      	mov	r3, r1
 8015bce:	71bb      	strb	r3, [r7, #6]
 8015bd0:	4613      	mov	r3, r2
 8015bd2:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8015bd4:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8015bd8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015bdc:	429a      	cmp	r2, r3
 8015bde:	db07      	blt.n	8015bf0 <RegionCommonValueInRange+0x2e>
 8015be0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8015be4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8015be8:	429a      	cmp	r2, r3
 8015bea:	dc01      	bgt.n	8015bf0 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8015bec:	2301      	movs	r3, #1
 8015bee:	e000      	b.n	8015bf2 <RegionCommonValueInRange+0x30>
    }
    return 0;
 8015bf0:	2300      	movs	r3, #0
}
 8015bf2:	4618      	mov	r0, r3
 8015bf4:	370c      	adds	r7, #12
 8015bf6:	46bd      	mov	sp, r7
 8015bf8:	bc80      	pop	{r7}
 8015bfa:	4770      	bx	lr

08015bfc <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8015bfc:	b480      	push	{r7}
 8015bfe:	b085      	sub	sp, #20
 8015c00:	af00      	add	r7, sp, #0
 8015c02:	6078      	str	r0, [r7, #4]
 8015c04:	460b      	mov	r3, r1
 8015c06:	70fb      	strb	r3, [r7, #3]
 8015c08:	4613      	mov	r3, r2
 8015c0a:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8015c0c:	78fb      	ldrb	r3, [r7, #3]
 8015c0e:	091b      	lsrs	r3, r3, #4
 8015c10:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8015c12:	78bb      	ldrb	r3, [r7, #2]
 8015c14:	091b      	lsrs	r3, r3, #4
 8015c16:	b2db      	uxtb	r3, r3
 8015c18:	7bfa      	ldrb	r2, [r7, #15]
 8015c1a:	429a      	cmp	r2, r3
 8015c1c:	d803      	bhi.n	8015c26 <RegionCommonChanDisable+0x2a>
 8015c1e:	78fa      	ldrb	r2, [r7, #3]
 8015c20:	78bb      	ldrb	r3, [r7, #2]
 8015c22:	429a      	cmp	r2, r3
 8015c24:	d301      	bcc.n	8015c2a <RegionCommonChanDisable+0x2e>
    {
        return false;
 8015c26:	2300      	movs	r3, #0
 8015c28:	e017      	b.n	8015c5a <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8015c2a:	7bfb      	ldrb	r3, [r7, #15]
 8015c2c:	005b      	lsls	r3, r3, #1
 8015c2e:	687a      	ldr	r2, [r7, #4]
 8015c30:	4413      	add	r3, r2
 8015c32:	881b      	ldrh	r3, [r3, #0]
 8015c34:	b21a      	sxth	r2, r3
 8015c36:	78fb      	ldrb	r3, [r7, #3]
 8015c38:	f003 030f 	and.w	r3, r3, #15
 8015c3c:	2101      	movs	r1, #1
 8015c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8015c42:	b21b      	sxth	r3, r3
 8015c44:	43db      	mvns	r3, r3
 8015c46:	b21b      	sxth	r3, r3
 8015c48:	4013      	ands	r3, r2
 8015c4a:	b219      	sxth	r1, r3
 8015c4c:	7bfb      	ldrb	r3, [r7, #15]
 8015c4e:	005b      	lsls	r3, r3, #1
 8015c50:	687a      	ldr	r2, [r7, #4]
 8015c52:	4413      	add	r3, r2
 8015c54:	b28a      	uxth	r2, r1
 8015c56:	801a      	strh	r2, [r3, #0]

    return true;
 8015c58:	2301      	movs	r3, #1
}
 8015c5a:	4618      	mov	r0, r3
 8015c5c:	3714      	adds	r7, #20
 8015c5e:	46bd      	mov	sp, r7
 8015c60:	bc80      	pop	{r7}
 8015c62:	4770      	bx	lr

08015c64 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8015c64:	b580      	push	{r7, lr}
 8015c66:	b084      	sub	sp, #16
 8015c68:	af00      	add	r7, sp, #0
 8015c6a:	6078      	str	r0, [r7, #4]
 8015c6c:	460b      	mov	r3, r1
 8015c6e:	70fb      	strb	r3, [r7, #3]
 8015c70:	4613      	mov	r3, r2
 8015c72:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8015c74:	2300      	movs	r3, #0
 8015c76:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	2b00      	cmp	r3, #0
 8015c7c:	d101      	bne.n	8015c82 <RegionCommonCountChannels+0x1e>
    {
        return 0;
 8015c7e:	2300      	movs	r3, #0
 8015c80:	e018      	b.n	8015cb4 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8015c82:	78fb      	ldrb	r3, [r7, #3]
 8015c84:	73bb      	strb	r3, [r7, #14]
 8015c86:	e010      	b.n	8015caa <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8015c88:	7bbb      	ldrb	r3, [r7, #14]
 8015c8a:	005b      	lsls	r3, r3, #1
 8015c8c:	687a      	ldr	r2, [r7, #4]
 8015c8e:	4413      	add	r3, r2
 8015c90:	881b      	ldrh	r3, [r3, #0]
 8015c92:	2110      	movs	r1, #16
 8015c94:	4618      	mov	r0, r3
 8015c96:	f7ff fef9 	bl	8015a8c <CountChannels>
 8015c9a:	4603      	mov	r3, r0
 8015c9c:	461a      	mov	r2, r3
 8015c9e:	7bfb      	ldrb	r3, [r7, #15]
 8015ca0:	4413      	add	r3, r2
 8015ca2:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8015ca4:	7bbb      	ldrb	r3, [r7, #14]
 8015ca6:	3301      	adds	r3, #1
 8015ca8:	73bb      	strb	r3, [r7, #14]
 8015caa:	7bba      	ldrb	r2, [r7, #14]
 8015cac:	78bb      	ldrb	r3, [r7, #2]
 8015cae:	429a      	cmp	r2, r3
 8015cb0:	d3ea      	bcc.n	8015c88 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 8015cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8015cb4:	4618      	mov	r0, r3
 8015cb6:	3710      	adds	r7, #16
 8015cb8:	46bd      	mov	sp, r7
 8015cba:	bd80      	pop	{r7, pc}

08015cbc <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8015cbc:	b480      	push	{r7}
 8015cbe:	b087      	sub	sp, #28
 8015cc0:	af00      	add	r7, sp, #0
 8015cc2:	60f8      	str	r0, [r7, #12]
 8015cc4:	60b9      	str	r1, [r7, #8]
 8015cc6:	4613      	mov	r3, r2
 8015cc8:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8015cca:	68fb      	ldr	r3, [r7, #12]
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	d016      	beq.n	8015cfe <RegionCommonChanMaskCopy+0x42>
 8015cd0:	68bb      	ldr	r3, [r7, #8]
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	d013      	beq.n	8015cfe <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 8015cd6:	2300      	movs	r3, #0
 8015cd8:	75fb      	strb	r3, [r7, #23]
 8015cda:	e00c      	b.n	8015cf6 <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8015cdc:	7dfb      	ldrb	r3, [r7, #23]
 8015cde:	005b      	lsls	r3, r3, #1
 8015ce0:	68ba      	ldr	r2, [r7, #8]
 8015ce2:	441a      	add	r2, r3
 8015ce4:	7dfb      	ldrb	r3, [r7, #23]
 8015ce6:	005b      	lsls	r3, r3, #1
 8015ce8:	68f9      	ldr	r1, [r7, #12]
 8015cea:	440b      	add	r3, r1
 8015cec:	8812      	ldrh	r2, [r2, #0]
 8015cee:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8015cf0:	7dfb      	ldrb	r3, [r7, #23]
 8015cf2:	3301      	adds	r3, #1
 8015cf4:	75fb      	strb	r3, [r7, #23]
 8015cf6:	7dfa      	ldrb	r2, [r7, #23]
 8015cf8:	79fb      	ldrb	r3, [r7, #7]
 8015cfa:	429a      	cmp	r2, r3
 8015cfc:	d3ee      	bcc.n	8015cdc <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8015cfe:	bf00      	nop
 8015d00:	371c      	adds	r7, #28
 8015d02:	46bd      	mov	sp, r7
 8015d04:	bc80      	pop	{r7}
 8015d06:	4770      	bx	lr

08015d08 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8015d08:	b082      	sub	sp, #8
 8015d0a:	b580      	push	{r7, lr}
 8015d0c:	b086      	sub	sp, #24
 8015d0e:	af00      	add	r7, sp, #0
 8015d10:	60f8      	str	r0, [r7, #12]
 8015d12:	60b9      	str	r1, [r7, #8]
 8015d14:	627b      	str	r3, [r7, #36]	; 0x24
 8015d16:	4613      	mov	r3, r2
 8015d18:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8015d1a:	79f9      	ldrb	r1, [r7, #7]
 8015d1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015d20:	cb0c      	ldmia	r3, {r2, r3}
 8015d22:	68f8      	ldr	r0, [r7, #12]
 8015d24:	f7ff fd8b 	bl	801583e <GetDutyCycle>
 8015d28:	4603      	mov	r3, r0
 8015d2a:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8015d2c:	68fb      	ldr	r3, [r7, #12]
 8015d2e:	68da      	ldr	r2, [r3, #12]
 8015d30:	8afb      	ldrh	r3, [r7, #22]
 8015d32:	68b9      	ldr	r1, [r7, #8]
 8015d34:	fb01 f303 	mul.w	r3, r1, r3
 8015d38:	429a      	cmp	r2, r3
 8015d3a:	d909      	bls.n	8015d50 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8015d3c:	68fb      	ldr	r3, [r7, #12]
 8015d3e:	68da      	ldr	r2, [r3, #12]
 8015d40:	8afb      	ldrh	r3, [r7, #22]
 8015d42:	68b9      	ldr	r1, [r7, #8]
 8015d44:	fb01 f303 	mul.w	r3, r1, r3
 8015d48:	1ad2      	subs	r2, r2, r3
 8015d4a:	68fb      	ldr	r3, [r7, #12]
 8015d4c:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8015d4e:	e002      	b.n	8015d56 <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8015d50:	68fb      	ldr	r3, [r7, #12]
 8015d52:	2200      	movs	r2, #0
 8015d54:	60da      	str	r2, [r3, #12]
}
 8015d56:	bf00      	nop
 8015d58:	3718      	adds	r7, #24
 8015d5a:	46bd      	mov	sp, r7
 8015d5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015d60:	b002      	add	sp, #8
 8015d62:	4770      	bx	lr

08015d64 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8015d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d66:	b08f      	sub	sp, #60	; 0x3c
 8015d68:	af04      	add	r7, sp, #16
 8015d6a:	6039      	str	r1, [r7, #0]
 8015d6c:	4611      	mov	r1, r2
 8015d6e:	461a      	mov	r2, r3
 8015d70:	4603      	mov	r3, r0
 8015d72:	71fb      	strb	r3, [r7, #7]
 8015d74:	460b      	mov	r3, r1
 8015d76:	71bb      	strb	r3, [r7, #6]
 8015d78:	4613      	mov	r3, r2
 8015d7a:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8015d7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015d80:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8015d82:	f007 fb3d 	bl	801d400 <UTIL_TIMER_GetCurrentTime>
 8015d86:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8015d88:	2300      	movs	r3, #0
 8015d8a:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8015d8c:	2301      	movs	r3, #1
 8015d8e:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8015d90:	2300      	movs	r3, #0
 8015d92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8015d96:	2300      	movs	r3, #0
 8015d98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8015d9c:	e0ba      	b.n	8015f14 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8015d9e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015da2:	4613      	mov	r3, r2
 8015da4:	005b      	lsls	r3, r3, #1
 8015da6:	4413      	add	r3, r2
 8015da8:	00db      	lsls	r3, r3, #3
 8015daa:	461a      	mov	r2, r3
 8015dac:	683b      	ldr	r3, [r7, #0]
 8015dae:	189c      	adds	r4, r3, r2
 8015db0:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 8015db4:	797a      	ldrb	r2, [r7, #5]
 8015db6:	79fd      	ldrb	r5, [r7, #7]
 8015db8:	69fb      	ldr	r3, [r7, #28]
 8015dba:	9302      	str	r3, [sp, #8]
 8015dbc:	46ec      	mov	ip, sp
 8015dbe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015dc2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015dc6:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015dca:	4633      	mov	r3, r6
 8015dcc:	4629      	mov	r1, r5
 8015dce:	4620      	mov	r0, r4
 8015dd0:	f7ff fe22 	bl	8015a18 <UpdateTimeCredits>
 8015dd4:	4603      	mov	r3, r0
 8015dd6:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8015dd8:	8afa      	ldrh	r2, [r7, #22]
 8015dda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015ddc:	fb02 f303 	mul.w	r3, r2, r3
 8015de0:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 8015de2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015de6:	4613      	mov	r3, r2
 8015de8:	005b      	lsls	r3, r3, #1
 8015dea:	4413      	add	r3, r2
 8015dec:	00db      	lsls	r3, r3, #3
 8015dee:	461a      	mov	r2, r3
 8015df0:	683b      	ldr	r3, [r7, #0]
 8015df2:	4413      	add	r3, r2
 8015df4:	68db      	ldr	r3, [r3, #12]
 8015df6:	69ba      	ldr	r2, [r7, #24]
 8015df8:	429a      	cmp	r2, r3
 8015dfa:	d908      	bls.n	8015e0e <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8015dfc:	797b      	ldrb	r3, [r7, #5]
 8015dfe:	f083 0301 	eor.w	r3, r3, #1
 8015e02:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 8015e04:	2b00      	cmp	r3, #0
 8015e06:	d013      	beq.n	8015e30 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8015e08:	79fb      	ldrb	r3, [r7, #7]
 8015e0a:	2b00      	cmp	r3, #0
 8015e0c:	d010      	beq.n	8015e30 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 8015e0e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015e12:	4613      	mov	r3, r2
 8015e14:	005b      	lsls	r3, r3, #1
 8015e16:	4413      	add	r3, r2
 8015e18:	00db      	lsls	r3, r3, #3
 8015e1a:	461a      	mov	r2, r3
 8015e1c:	683b      	ldr	r3, [r7, #0]
 8015e1e:	4413      	add	r3, r2
 8015e20:	2201      	movs	r2, #1
 8015e22:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8015e24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015e28:	3301      	adds	r3, #1
 8015e2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8015e2e:	e06c      	b.n	8015f0a <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8015e30:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015e34:	4613      	mov	r3, r2
 8015e36:	005b      	lsls	r3, r3, #1
 8015e38:	4413      	add	r3, r2
 8015e3a:	00db      	lsls	r3, r3, #3
 8015e3c:	461a      	mov	r2, r3
 8015e3e:	683b      	ldr	r3, [r7, #0]
 8015e40:	4413      	add	r3, r2
 8015e42:	2200      	movs	r2, #0
 8015e44:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits >= creditCosts )
 8015e46:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015e4a:	4613      	mov	r3, r2
 8015e4c:	005b      	lsls	r3, r3, #1
 8015e4e:	4413      	add	r3, r2
 8015e50:	00db      	lsls	r3, r3, #3
 8015e52:	461a      	mov	r2, r3
 8015e54:	683b      	ldr	r3, [r7, #0]
 8015e56:	4413      	add	r3, r2
 8015e58:	691b      	ldr	r3, [r3, #16]
 8015e5a:	69ba      	ldr	r2, [r7, #24]
 8015e5c:	429a      	cmp	r2, r3
 8015e5e:	d815      	bhi.n	8015e8c <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8015e60:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015e64:	4613      	mov	r3, r2
 8015e66:	005b      	lsls	r3, r3, #1
 8015e68:	4413      	add	r3, r2
 8015e6a:	00db      	lsls	r3, r3, #3
 8015e6c:	461a      	mov	r2, r3
 8015e6e:	683b      	ldr	r3, [r7, #0]
 8015e70:	4413      	add	r3, r2
 8015e72:	68db      	ldr	r3, [r3, #12]
 8015e74:	69ba      	ldr	r2, [r7, #24]
 8015e76:	1ad3      	subs	r3, r2, r3
 8015e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015e7a:	4293      	cmp	r3, r2
 8015e7c:	bf28      	it	cs
 8015e7e:	4613      	movcs	r3, r2
 8015e80:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8015e82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015e86:	3301      	adds	r3, #1
 8015e88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8015e8c:	79fb      	ldrb	r3, [r7, #7]
 8015e8e:	f083 0301 	eor.w	r3, r3, #1
 8015e92:	b2db      	uxtb	r3, r3
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	d038      	beq.n	8015f0a <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8015e98:	2300      	movs	r3, #0
 8015e9a:	60fb      	str	r3, [r7, #12]
 8015e9c:	2300      	movs	r3, #0
 8015e9e:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8015ea0:	8afb      	ldrh	r3, [r7, #22]
 8015ea2:	2b64      	cmp	r3, #100	; 0x64
 8015ea4:	d103      	bne.n	8015eae <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8015ea6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8015eaa:	60fb      	str	r3, [r7, #12]
 8015eac:	e009      	b.n	8015ec2 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8015eae:	8afb      	ldrh	r3, [r7, #22]
 8015eb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015eb4:	d103      	bne.n	8015ebe <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8015eb6:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 8015eba:	60fb      	str	r3, [r7, #12]
 8015ebc:	e001      	b.n	8015ec2 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8015ebe:	4b1e      	ldr	r3, [pc, #120]	; (8015f38 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8015ec0:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8015ec2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015ec4:	4a1c      	ldr	r2, [pc, #112]	; (8015f38 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8015ec6:	4293      	cmp	r3, r2
 8015ec8:	d90e      	bls.n	8015ee8 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8015eca:	68fa      	ldr	r2, [r7, #12]
 8015ecc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015ece:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8015ed2:	3b30      	subs	r3, #48	; 0x30
 8015ed4:	4919      	ldr	r1, [pc, #100]	; (8015f3c <RegionCommonUpdateBandTimeOff+0x1d8>)
 8015ed6:	fba1 1303 	umull	r1, r3, r1, r3
 8015eda:	0c1b      	lsrs	r3, r3, #16
 8015edc:	3301      	adds	r3, #1
 8015ede:	4918      	ldr	r1, [pc, #96]	; (8015f40 <RegionCommonUpdateBandTimeOff+0x1dc>)
 8015ee0:	fb01 f303 	mul.w	r3, r1, r3
 8015ee4:	4413      	add	r3, r2
 8015ee6:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8015ee8:	f107 000c 	add.w	r0, r7, #12
 8015eec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015eee:	9300      	str	r3, [sp, #0]
 8015ef0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015ef2:	f107 020c 	add.w	r2, r7, #12
 8015ef6:	ca06      	ldmia	r2, {r1, r2}
 8015ef8:	f006 fb99 	bl	801c62e <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8015efc:	f107 030c 	add.w	r3, r7, #12
 8015f00:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015f04:	f006 fc52 	bl	801c7ac <SysTimeToMs>
 8015f08:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 8015f0a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015f0e:	3301      	adds	r3, #1
 8015f10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8015f14:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015f18:	79bb      	ldrb	r3, [r7, #6]
 8015f1a:	429a      	cmp	r2, r3
 8015f1c:	f4ff af3f 	bcc.w	8015d9e <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 8015f20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015f24:	2b00      	cmp	r3, #0
 8015f26:	d102      	bne.n	8015f2e <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8015f28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015f2c:	e000      	b.n	8015f30 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 8015f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015f30:	4618      	mov	r0, r3
 8015f32:	372c      	adds	r7, #44	; 0x2c
 8015f34:	46bd      	mov	sp, r7
 8015f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015f38:	0001ec30 	.word	0x0001ec30
 8015f3c:	c22e4507 	.word	0xc22e4507
 8015f40:	00015180 	.word	0x00015180

08015f44 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8015f44:	b480      	push	{r7}
 8015f46:	b085      	sub	sp, #20
 8015f48:	af00      	add	r7, sp, #0
 8015f4a:	6078      	str	r0, [r7, #4]
 8015f4c:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8015f4e:	2300      	movs	r3, #0
 8015f50:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8015f52:	687b      	ldr	r3, [r7, #4]
 8015f54:	781b      	ldrb	r3, [r3, #0]
 8015f56:	2b03      	cmp	r3, #3
 8015f58:	d13f      	bne.n	8015fda <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8015f5a:	687b      	ldr	r3, [r7, #4]
 8015f5c:	3301      	adds	r3, #1
 8015f5e:	781b      	ldrb	r3, [r3, #0]
 8015f60:	b25a      	sxtb	r2, r3
 8015f62:	683b      	ldr	r3, [r7, #0]
 8015f64:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8015f66:	683b      	ldr	r3, [r7, #0]
 8015f68:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015f6c:	f003 030f 	and.w	r3, r3, #15
 8015f70:	b25a      	sxtb	r2, r3
 8015f72:	683b      	ldr	r3, [r7, #0]
 8015f74:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8015f76:	683b      	ldr	r3, [r7, #0]
 8015f78:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015f7c:	b2db      	uxtb	r3, r3
 8015f7e:	091b      	lsrs	r3, r3, #4
 8015f80:	b2db      	uxtb	r3, r3
 8015f82:	b25a      	sxtb	r2, r3
 8015f84:	683b      	ldr	r3, [r7, #0]
 8015f86:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	3302      	adds	r3, #2
 8015f8c:	781b      	ldrb	r3, [r3, #0]
 8015f8e:	b29a      	uxth	r2, r3
 8015f90:	683b      	ldr	r3, [r7, #0]
 8015f92:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8015f94:	683b      	ldr	r3, [r7, #0]
 8015f96:	889b      	ldrh	r3, [r3, #4]
 8015f98:	b21a      	sxth	r2, r3
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	3303      	adds	r3, #3
 8015f9e:	781b      	ldrb	r3, [r3, #0]
 8015fa0:	021b      	lsls	r3, r3, #8
 8015fa2:	b21b      	sxth	r3, r3
 8015fa4:	4313      	orrs	r3, r2
 8015fa6:	b21b      	sxth	r3, r3
 8015fa8:	b29a      	uxth	r2, r3
 8015faa:	683b      	ldr	r3, [r7, #0]
 8015fac:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	791a      	ldrb	r2, [r3, #4]
 8015fb2:	683b      	ldr	r3, [r7, #0]
 8015fb4:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8015fb6:	683b      	ldr	r3, [r7, #0]
 8015fb8:	781b      	ldrb	r3, [r3, #0]
 8015fba:	091b      	lsrs	r3, r3, #4
 8015fbc:	b2db      	uxtb	r3, r3
 8015fbe:	f003 0307 	and.w	r3, r3, #7
 8015fc2:	b2da      	uxtb	r2, r3
 8015fc4:	683b      	ldr	r3, [r7, #0]
 8015fc6:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8015fc8:	683b      	ldr	r3, [r7, #0]
 8015fca:	781b      	ldrb	r3, [r3, #0]
 8015fcc:	f003 030f 	and.w	r3, r3, #15
 8015fd0:	b2da      	uxtb	r2, r3
 8015fd2:	683b      	ldr	r3, [r7, #0]
 8015fd4:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8015fd6:	2305      	movs	r3, #5
 8015fd8:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 8015fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8015fdc:	4618      	mov	r0, r3
 8015fde:	3714      	adds	r7, #20
 8015fe0:	46bd      	mov	sp, r7
 8015fe2:	bc80      	pop	{r7}
 8015fe4:	4770      	bx	lr

08015fe6 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8015fe6:	b5b0      	push	{r4, r5, r7, lr}
 8015fe8:	b088      	sub	sp, #32
 8015fea:	af02      	add	r7, sp, #8
 8015fec:	60f8      	str	r0, [r7, #12]
 8015fee:	60b9      	str	r1, [r7, #8]
 8015ff0:	607a      	str	r2, [r7, #4]
 8015ff2:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8015ff4:	68fb      	ldr	r3, [r7, #12]
 8015ff6:	791b      	ldrb	r3, [r3, #4]
 8015ff8:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 8015ffa:	68fb      	ldr	r3, [r7, #12]
 8015ffc:	799b      	ldrb	r3, [r3, #6]
 8015ffe:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8016000:	68fb      	ldr	r3, [r7, #12]
 8016002:	79db      	ldrb	r3, [r3, #7]
 8016004:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 8016006:	68fb      	ldr	r3, [r7, #12]
 8016008:	7a1b      	ldrb	r3, [r3, #8]
 801600a:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 801600c:	68fb      	ldr	r3, [r7, #12]
 801600e:	795b      	ldrb	r3, [r3, #5]
 8016010:	f083 0301 	eor.w	r3, r3, #1
 8016014:	b2db      	uxtb	r3, r3
 8016016:	2b00      	cmp	r3, #0
 8016018:	d008      	beq.n	801602c <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 801601a:	68fb      	ldr	r3, [r7, #12]
 801601c:	7adb      	ldrb	r3, [r3, #11]
 801601e:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 8016020:	68fb      	ldr	r3, [r7, #12]
 8016022:	7a5b      	ldrb	r3, [r3, #9]
 8016024:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 8016026:	68fb      	ldr	r3, [r7, #12]
 8016028:	7a9b      	ldrb	r3, [r3, #10]
 801602a:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 801602c:	7dfb      	ldrb	r3, [r7, #23]
 801602e:	2b00      	cmp	r3, #0
 8016030:	d04a      	beq.n	80160c8 <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 8016032:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8016036:	2b0f      	cmp	r3, #15
 8016038:	d103      	bne.n	8016042 <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 801603a:	68fb      	ldr	r3, [r7, #12]
 801603c:	7a5b      	ldrb	r3, [r3, #9]
 801603e:	75bb      	strb	r3, [r7, #22]
 8016040:	e01d      	b.n	801607e <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8016042:	68fb      	ldr	r3, [r7, #12]
 8016044:	7b18      	ldrb	r0, [r3, #12]
 8016046:	68fb      	ldr	r3, [r7, #12]
 8016048:	6919      	ldr	r1, [r3, #16]
 801604a:	68fb      	ldr	r3, [r7, #12]
 801604c:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8016050:	68fb      	ldr	r3, [r7, #12]
 8016052:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8016056:	68fa      	ldr	r2, [r7, #12]
 8016058:	6992      	ldr	r2, [r2, #24]
 801605a:	f997 4016 	ldrsb.w	r4, [r7, #22]
 801605e:	9201      	str	r2, [sp, #4]
 8016060:	9300      	str	r3, [sp, #0]
 8016062:	462b      	mov	r3, r5
 8016064:	4622      	mov	r2, r4
 8016066:	f7ff fd3a 	bl	8015ade <RegionCommonChanVerifyDr>
 801606a:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 801606c:	f083 0301 	eor.w	r3, r3, #1
 8016070:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8016072:	2b00      	cmp	r3, #0
 8016074:	d003      	beq.n	801607e <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 8016076:	7dfb      	ldrb	r3, [r7, #23]
 8016078:	f023 0302 	bic.w	r3, r3, #2
 801607c:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 801607e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8016082:	2b0f      	cmp	r3, #15
 8016084:	d103      	bne.n	801608e <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 8016086:	68fb      	ldr	r3, [r7, #12]
 8016088:	7a9b      	ldrb	r3, [r3, #10]
 801608a:	757b      	strb	r3, [r7, #21]
 801608c:	e01c      	b.n	80160c8 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 801608e:	68fb      	ldr	r3, [r7, #12]
 8016090:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8016094:	68fb      	ldr	r3, [r7, #12]
 8016096:	f993 201c 	ldrsb.w	r2, [r3, #28]
 801609a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 801609e:	4618      	mov	r0, r3
 80160a0:	f7ff fd8f 	bl	8015bc2 <RegionCommonValueInRange>
 80160a4:	4603      	mov	r3, r0
 80160a6:	2b00      	cmp	r3, #0
 80160a8:	d10e      	bne.n	80160c8 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 80160aa:	68fb      	ldr	r3, [r7, #12]
 80160ac:	f993 301d 	ldrsb.w	r3, [r3, #29]
 80160b0:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80160b4:	429a      	cmp	r2, r3
 80160b6:	da03      	bge.n	80160c0 <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 80160b8:	68fb      	ldr	r3, [r7, #12]
 80160ba:	7f5b      	ldrb	r3, [r3, #29]
 80160bc:	757b      	strb	r3, [r7, #21]
 80160be:	e003      	b.n	80160c8 <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 80160c0:	7dfb      	ldrb	r3, [r7, #23]
 80160c2:	f023 0304 	bic.w	r3, r3, #4
 80160c6:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 80160c8:	7dfb      	ldrb	r3, [r7, #23]
 80160ca:	2b07      	cmp	r3, #7
 80160cc:	d105      	bne.n	80160da <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 80160ce:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	d101      	bne.n	80160da <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 80160d6:	2301      	movs	r3, #1
 80160d8:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 80160da:	68bb      	ldr	r3, [r7, #8]
 80160dc:	7dba      	ldrb	r2, [r7, #22]
 80160de:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	7d7a      	ldrb	r2, [r7, #21]
 80160e4:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 80160e6:	7d3a      	ldrb	r2, [r7, #20]
 80160e8:	683b      	ldr	r3, [r7, #0]
 80160ea:	701a      	strb	r2, [r3, #0]

    return status;
 80160ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80160ee:	4618      	mov	r0, r3
 80160f0:	3718      	adds	r7, #24
 80160f2:	46bd      	mov	sp, r7
 80160f4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080160f8 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 80160f8:	b480      	push	{r7}
 80160fa:	b083      	sub	sp, #12
 80160fc:	af00      	add	r7, sp, #0
 80160fe:	4603      	mov	r3, r0
 8016100:	6039      	str	r1, [r7, #0]
 8016102:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8016104:	79fb      	ldrb	r3, [r7, #7]
 8016106:	4a06      	ldr	r2, [pc, #24]	; (8016120 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 8016108:	fa02 f303 	lsl.w	r3, r2, r3
 801610c:	461a      	mov	r2, r3
 801610e:	683b      	ldr	r3, [r7, #0]
 8016110:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8016114:	4618      	mov	r0, r3
 8016116:	370c      	adds	r7, #12
 8016118:	46bd      	mov	sp, r7
 801611a:	bc80      	pop	{r7}
 801611c:	4770      	bx	lr
 801611e:	bf00      	nop
 8016120:	000f4240 	.word	0x000f4240

08016124 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8016124:	b480      	push	{r7}
 8016126:	b083      	sub	sp, #12
 8016128:	af00      	add	r7, sp, #0
 801612a:	4603      	mov	r3, r0
 801612c:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 801612e:	79fb      	ldrb	r3, [r7, #7]
 8016130:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8016134:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8016138:	4618      	mov	r0, r3
 801613a:	370c      	adds	r7, #12
 801613c:	46bd      	mov	sp, r7
 801613e:	bc80      	pop	{r7}
 8016140:	4770      	bx	lr
	...

08016144 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8016144:	b480      	push	{r7}
 8016146:	b085      	sub	sp, #20
 8016148:	af00      	add	r7, sp, #0
 801614a:	60f8      	str	r0, [r7, #12]
 801614c:	607a      	str	r2, [r7, #4]
 801614e:	603b      	str	r3, [r7, #0]
 8016150:	460b      	mov	r3, r1
 8016152:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8016154:	7afa      	ldrb	r2, [r7, #11]
 8016156:	7afb      	ldrb	r3, [r7, #11]
 8016158:	3b04      	subs	r3, #4
 801615a:	4619      	mov	r1, r3
 801615c:	68fb      	ldr	r3, [r7, #12]
 801615e:	fb03 f101 	mul.w	r1, r3, r1
 8016162:	687b      	ldr	r3, [r7, #4]
 8016164:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8016168:	fb00 f303 	mul.w	r3, r0, r3
 801616c:	440b      	add	r3, r1
 801616e:	005b      	lsls	r3, r3, #1
 8016170:	2b00      	cmp	r3, #0
 8016172:	d013      	beq.n	801619c <RegionCommonComputeRxWindowParameters+0x58>
 8016174:	7afb      	ldrb	r3, [r7, #11]
 8016176:	3b04      	subs	r3, #4
 8016178:	4619      	mov	r1, r3
 801617a:	68fb      	ldr	r3, [r7, #12]
 801617c:	fb03 f101 	mul.w	r1, r3, r1
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8016186:	fb00 f303 	mul.w	r3, r0, r3
 801618a:	440b      	add	r3, r1
 801618c:	0059      	lsls	r1, r3, #1
 801618e:	68fb      	ldr	r3, [r7, #12]
 8016190:	440b      	add	r3, r1
 8016192:	1e59      	subs	r1, r3, #1
 8016194:	68fb      	ldr	r3, [r7, #12]
 8016196:	fbb1 f3f3 	udiv	r3, r1, r3
 801619a:	e00f      	b.n	80161bc <RegionCommonComputeRxWindowParameters+0x78>
 801619c:	7afb      	ldrb	r3, [r7, #11]
 801619e:	3b04      	subs	r3, #4
 80161a0:	4619      	mov	r1, r3
 80161a2:	68fb      	ldr	r3, [r7, #12]
 80161a4:	fb03 f101 	mul.w	r1, r3, r1
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80161ae:	fb00 f303 	mul.w	r3, r0, r3
 80161b2:	440b      	add	r3, r1
 80161b4:	0059      	lsls	r1, r3, #1
 80161b6:	68fb      	ldr	r3, [r7, #12]
 80161b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80161bc:	429a      	cmp	r2, r3
 80161be:	bf38      	it	cc
 80161c0:	461a      	movcc	r2, r3
 80161c2:	69bb      	ldr	r3, [r7, #24]
 80161c4:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 80161c6:	68fb      	ldr	r3, [r7, #12]
 80161c8:	009b      	lsls	r3, r3, #2
 80161ca:	4619      	mov	r1, r3
 80161cc:	69bb      	ldr	r3, [r7, #24]
 80161ce:	681b      	ldr	r3, [r3, #0]
 80161d0:	68fa      	ldr	r2, [r7, #12]
 80161d2:	fb02 f303 	mul.w	r3, r2, r3
 80161d6:	2b00      	cmp	r3, #0
 80161d8:	d007      	beq.n	80161ea <RegionCommonComputeRxWindowParameters+0xa6>
 80161da:	69bb      	ldr	r3, [r7, #24]
 80161dc:	681b      	ldr	r3, [r3, #0]
 80161de:	68fa      	ldr	r2, [r7, #12]
 80161e0:	fb02 f303 	mul.w	r3, r2, r3
 80161e4:	3301      	adds	r3, #1
 80161e6:	085b      	lsrs	r3, r3, #1
 80161e8:	e005      	b.n	80161f6 <RegionCommonComputeRxWindowParameters+0xb2>
 80161ea:	69bb      	ldr	r3, [r7, #24]
 80161ec:	681b      	ldr	r3, [r3, #0]
 80161ee:	68fa      	ldr	r2, [r7, #12]
 80161f0:	fb02 f303 	mul.w	r3, r2, r3
 80161f4:	085b      	lsrs	r3, r3, #1
 80161f6:	1acb      	subs	r3, r1, r3
 80161f8:	683a      	ldr	r2, [r7, #0]
 80161fa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80161fe:	fb01 f202 	mul.w	r2, r1, r2
 8016202:	1a9b      	subs	r3, r3, r2
 8016204:	2b00      	cmp	r3, #0
 8016206:	dd27      	ble.n	8016258 <RegionCommonComputeRxWindowParameters+0x114>
 8016208:	68fb      	ldr	r3, [r7, #12]
 801620a:	009b      	lsls	r3, r3, #2
 801620c:	4619      	mov	r1, r3
 801620e:	69bb      	ldr	r3, [r7, #24]
 8016210:	681b      	ldr	r3, [r3, #0]
 8016212:	68fa      	ldr	r2, [r7, #12]
 8016214:	fb02 f303 	mul.w	r3, r2, r3
 8016218:	2b00      	cmp	r3, #0
 801621a:	d007      	beq.n	801622c <RegionCommonComputeRxWindowParameters+0xe8>
 801621c:	69bb      	ldr	r3, [r7, #24]
 801621e:	681b      	ldr	r3, [r3, #0]
 8016220:	68fa      	ldr	r2, [r7, #12]
 8016222:	fb02 f303 	mul.w	r3, r2, r3
 8016226:	3301      	adds	r3, #1
 8016228:	085b      	lsrs	r3, r3, #1
 801622a:	e005      	b.n	8016238 <RegionCommonComputeRxWindowParameters+0xf4>
 801622c:	69bb      	ldr	r3, [r7, #24]
 801622e:	681b      	ldr	r3, [r3, #0]
 8016230:	68fa      	ldr	r2, [r7, #12]
 8016232:	fb02 f303 	mul.w	r3, r2, r3
 8016236:	085b      	lsrs	r3, r3, #1
 8016238:	1acb      	subs	r3, r1, r3
 801623a:	683a      	ldr	r2, [r7, #0]
 801623c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8016240:	fb01 f202 	mul.w	r2, r1, r2
 8016244:	1a9b      	subs	r3, r3, r2
 8016246:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 801624a:	4a19      	ldr	r2, [pc, #100]	; (80162b0 <RegionCommonComputeRxWindowParameters+0x16c>)
 801624c:	fb82 1203 	smull	r1, r2, r2, r3
 8016250:	1192      	asrs	r2, r2, #6
 8016252:	17db      	asrs	r3, r3, #31
 8016254:	1ad3      	subs	r3, r2, r3
 8016256:	e024      	b.n	80162a2 <RegionCommonComputeRxWindowParameters+0x15e>
 8016258:	68fb      	ldr	r3, [r7, #12]
 801625a:	009b      	lsls	r3, r3, #2
 801625c:	4619      	mov	r1, r3
 801625e:	69bb      	ldr	r3, [r7, #24]
 8016260:	681b      	ldr	r3, [r3, #0]
 8016262:	68fa      	ldr	r2, [r7, #12]
 8016264:	fb02 f303 	mul.w	r3, r2, r3
 8016268:	2b00      	cmp	r3, #0
 801626a:	d007      	beq.n	801627c <RegionCommonComputeRxWindowParameters+0x138>
 801626c:	69bb      	ldr	r3, [r7, #24]
 801626e:	681b      	ldr	r3, [r3, #0]
 8016270:	68fa      	ldr	r2, [r7, #12]
 8016272:	fb02 f303 	mul.w	r3, r2, r3
 8016276:	3301      	adds	r3, #1
 8016278:	085b      	lsrs	r3, r3, #1
 801627a:	e005      	b.n	8016288 <RegionCommonComputeRxWindowParameters+0x144>
 801627c:	69bb      	ldr	r3, [r7, #24]
 801627e:	681b      	ldr	r3, [r3, #0]
 8016280:	68fa      	ldr	r2, [r7, #12]
 8016282:	fb02 f303 	mul.w	r3, r2, r3
 8016286:	085b      	lsrs	r3, r3, #1
 8016288:	1acb      	subs	r3, r1, r3
 801628a:	683a      	ldr	r2, [r7, #0]
 801628c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8016290:	fb01 f202 	mul.w	r2, r1, r2
 8016294:	1a9b      	subs	r3, r3, r2
 8016296:	4a06      	ldr	r2, [pc, #24]	; (80162b0 <RegionCommonComputeRxWindowParameters+0x16c>)
 8016298:	fb82 1203 	smull	r1, r2, r2, r3
 801629c:	1192      	asrs	r2, r2, #6
 801629e:	17db      	asrs	r3, r3, #31
 80162a0:	1ad3      	subs	r3, r2, r3
 80162a2:	69fa      	ldr	r2, [r7, #28]
 80162a4:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 80162a6:	bf00      	nop
 80162a8:	3714      	adds	r7, #20
 80162aa:	46bd      	mov	sp, r7
 80162ac:	bc80      	pop	{r7}
 80162ae:	4770      	bx	lr
 80162b0:	10624dd3 	.word	0x10624dd3

080162b4 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 80162b4:	b580      	push	{r7, lr}
 80162b6:	b086      	sub	sp, #24
 80162b8:	af00      	add	r7, sp, #0
 80162ba:	4603      	mov	r3, r0
 80162bc:	60b9      	str	r1, [r7, #8]
 80162be:	607a      	str	r2, [r7, #4]
 80162c0:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 80162c2:	2300      	movs	r3, #0
 80162c4:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 80162c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80162ca:	005b      	lsls	r3, r3, #1
 80162cc:	4618      	mov	r0, r3
 80162ce:	f7ea fa7d 	bl	80007cc <__aeabi_ui2f>
 80162d2:	4603      	mov	r3, r0
 80162d4:	4619      	mov	r1, r3
 80162d6:	68b8      	ldr	r0, [r7, #8]
 80162d8:	f7ea f9c6 	bl	8000668 <__aeabi_fsub>
 80162dc:	4603      	mov	r3, r0
 80162de:	6879      	ldr	r1, [r7, #4]
 80162e0:	4618      	mov	r0, r3
 80162e2:	f7ea f9c1 	bl	8000668 <__aeabi_fsub>
 80162e6:	4603      	mov	r3, r0
 80162e8:	4618      	mov	r0, r3
 80162ea:	f7ea f8b1 	bl	8000450 <__aeabi_f2d>
 80162ee:	4602      	mov	r2, r0
 80162f0:	460b      	mov	r3, r1
 80162f2:	4610      	mov	r0, r2
 80162f4:	4619      	mov	r1, r3
 80162f6:	f007 fc17 	bl	801db28 <floor>
 80162fa:	4602      	mov	r2, r0
 80162fc:	460b      	mov	r3, r1
 80162fe:	4610      	mov	r0, r2
 8016300:	4619      	mov	r1, r3
 8016302:	f7ea f985 	bl	8000610 <__aeabi_d2iz>
 8016306:	4603      	mov	r3, r0
 8016308:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 801630a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801630e:	4618      	mov	r0, r3
 8016310:	3718      	adds	r7, #24
 8016312:	46bd      	mov	sp, r7
 8016314:	bd80      	pop	{r7, pc}

08016316 <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8016316:	b590      	push	{r4, r7, lr}
 8016318:	b087      	sub	sp, #28
 801631a:	af00      	add	r7, sp, #0
 801631c:	60f8      	str	r0, [r7, #12]
 801631e:	60b9      	str	r1, [r7, #8]
 8016320:	607a      	str	r2, [r7, #4]
 8016322:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8016324:	2300      	movs	r3, #0
 8016326:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8016328:	2300      	movs	r3, #0
 801632a:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 801632c:	2300      	movs	r3, #0
 801632e:	757b      	strb	r3, [r7, #21]
 8016330:	2300      	movs	r3, #0
 8016332:	753b      	strb	r3, [r7, #20]
 8016334:	e09c      	b.n	8016470 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8016336:	2300      	movs	r3, #0
 8016338:	74fb      	strb	r3, [r7, #19]
 801633a:	e08f      	b.n	801645c <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 801633c:	68fb      	ldr	r3, [r7, #12]
 801633e:	685a      	ldr	r2, [r3, #4]
 8016340:	7d3b      	ldrb	r3, [r7, #20]
 8016342:	005b      	lsls	r3, r3, #1
 8016344:	4413      	add	r3, r2
 8016346:	881b      	ldrh	r3, [r3, #0]
 8016348:	461a      	mov	r2, r3
 801634a:	7cfb      	ldrb	r3, [r7, #19]
 801634c:	fa42 f303 	asr.w	r3, r2, r3
 8016350:	f003 0301 	and.w	r3, r3, #1
 8016354:	2b00      	cmp	r3, #0
 8016356:	d07e      	beq.n	8016456 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8016358:	68fb      	ldr	r3, [r7, #12]
 801635a:	689a      	ldr	r2, [r3, #8]
 801635c:	7d79      	ldrb	r1, [r7, #21]
 801635e:	7cfb      	ldrb	r3, [r7, #19]
 8016360:	440b      	add	r3, r1
 8016362:	4619      	mov	r1, r3
 8016364:	460b      	mov	r3, r1
 8016366:	005b      	lsls	r3, r3, #1
 8016368:	440b      	add	r3, r1
 801636a:	009b      	lsls	r3, r3, #2
 801636c:	4413      	add	r3, r2
 801636e:	681b      	ldr	r3, [r3, #0]
 8016370:	2b00      	cmp	r3, #0
 8016372:	d06b      	beq.n	801644c <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8016374:	68fb      	ldr	r3, [r7, #12]
 8016376:	781b      	ldrb	r3, [r3, #0]
 8016378:	f083 0301 	eor.w	r3, r3, #1
 801637c:	b2db      	uxtb	r3, r3
 801637e:	2b00      	cmp	r3, #0
 8016380:	d011      	beq.n	80163a6 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8016382:	68fb      	ldr	r3, [r7, #12]
 8016384:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8016386:	2b00      	cmp	r3, #0
 8016388:	d00d      	beq.n	80163a6 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 801638a:	68fb      	ldr	r3, [r7, #12]
 801638c:	695a      	ldr	r2, [r3, #20]
 801638e:	7d3b      	ldrb	r3, [r7, #20]
 8016390:	005b      	lsls	r3, r3, #1
 8016392:	4413      	add	r3, r2
 8016394:	881b      	ldrh	r3, [r3, #0]
 8016396:	461a      	mov	r2, r3
 8016398:	7cfb      	ldrb	r3, [r7, #19]
 801639a:	fa42 f303 	asr.w	r3, r2, r3
 801639e:	f003 0301 	and.w	r3, r3, #1
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	d054      	beq.n	8016450 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80163a6:	68fb      	ldr	r3, [r7, #12]
 80163a8:	785b      	ldrb	r3, [r3, #1]
 80163aa:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 80163ac:	68fb      	ldr	r3, [r7, #12]
 80163ae:	689a      	ldr	r2, [r3, #8]
 80163b0:	7d79      	ldrb	r1, [r7, #21]
 80163b2:	7cfb      	ldrb	r3, [r7, #19]
 80163b4:	440b      	add	r3, r1
 80163b6:	4619      	mov	r1, r3
 80163b8:	460b      	mov	r3, r1
 80163ba:	005b      	lsls	r3, r3, #1
 80163bc:	440b      	add	r3, r1
 80163be:	009b      	lsls	r3, r3, #2
 80163c0:	4413      	add	r3, r2
 80163c2:	7a1b      	ldrb	r3, [r3, #8]
 80163c4:	f343 0303 	sbfx	r3, r3, #0, #4
 80163c8:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80163ca:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 80163cc:	68fb      	ldr	r3, [r7, #12]
 80163ce:	689a      	ldr	r2, [r3, #8]
 80163d0:	7d79      	ldrb	r1, [r7, #21]
 80163d2:	7cfb      	ldrb	r3, [r7, #19]
 80163d4:	440b      	add	r3, r1
 80163d6:	4619      	mov	r1, r3
 80163d8:	460b      	mov	r3, r1
 80163da:	005b      	lsls	r3, r3, #1
 80163dc:	440b      	add	r3, r1
 80163de:	009b      	lsls	r3, r3, #2
 80163e0:	4413      	add	r3, r2
 80163e2:	7a1b      	ldrb	r3, [r3, #8]
 80163e4:	f343 1303 	sbfx	r3, r3, #4, #4
 80163e8:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80163ea:	461a      	mov	r2, r3
 80163ec:	4621      	mov	r1, r4
 80163ee:	f7ff fbe8 	bl	8015bc2 <RegionCommonValueInRange>
 80163f2:	4603      	mov	r3, r0
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	d02d      	beq.n	8016454 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 80163f8:	68fb      	ldr	r3, [r7, #12]
 80163fa:	68da      	ldr	r2, [r3, #12]
 80163fc:	68fb      	ldr	r3, [r7, #12]
 80163fe:	6899      	ldr	r1, [r3, #8]
 8016400:	7d78      	ldrb	r0, [r7, #21]
 8016402:	7cfb      	ldrb	r3, [r7, #19]
 8016404:	4403      	add	r3, r0
 8016406:	4618      	mov	r0, r3
 8016408:	4603      	mov	r3, r0
 801640a:	005b      	lsls	r3, r3, #1
 801640c:	4403      	add	r3, r0
 801640e:	009b      	lsls	r3, r3, #2
 8016410:	440b      	add	r3, r1
 8016412:	7a5b      	ldrb	r3, [r3, #9]
 8016414:	4619      	mov	r1, r3
 8016416:	460b      	mov	r3, r1
 8016418:	005b      	lsls	r3, r3, #1
 801641a:	440b      	add	r3, r1
 801641c:	00db      	lsls	r3, r3, #3
 801641e:	4413      	add	r3, r2
 8016420:	7d1b      	ldrb	r3, [r3, #20]
 8016422:	f083 0301 	eor.w	r3, r3, #1
 8016426:	b2db      	uxtb	r3, r3
 8016428:	2b00      	cmp	r3, #0
 801642a:	d003      	beq.n	8016434 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 801642c:	7dbb      	ldrb	r3, [r7, #22]
 801642e:	3301      	adds	r3, #1
 8016430:	75bb      	strb	r3, [r7, #22]
                    continue;
 8016432:	e010      	b.n	8016456 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8016434:	7dfb      	ldrb	r3, [r7, #23]
 8016436:	1c5a      	adds	r2, r3, #1
 8016438:	75fa      	strb	r2, [r7, #23]
 801643a:	461a      	mov	r2, r3
 801643c:	68bb      	ldr	r3, [r7, #8]
 801643e:	4413      	add	r3, r2
 8016440:	7d79      	ldrb	r1, [r7, #21]
 8016442:	7cfa      	ldrb	r2, [r7, #19]
 8016444:	440a      	add	r2, r1
 8016446:	b2d2      	uxtb	r2, r2
 8016448:	701a      	strb	r2, [r3, #0]
 801644a:	e004      	b.n	8016456 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 801644c:	bf00      	nop
 801644e:	e002      	b.n	8016456 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8016450:	bf00      	nop
 8016452:	e000      	b.n	8016456 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8016454:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8016456:	7cfb      	ldrb	r3, [r7, #19]
 8016458:	3301      	adds	r3, #1
 801645a:	74fb      	strb	r3, [r7, #19]
 801645c:	7cfb      	ldrb	r3, [r7, #19]
 801645e:	2b0f      	cmp	r3, #15
 8016460:	f67f af6c 	bls.w	801633c <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8016464:	7d7b      	ldrb	r3, [r7, #21]
 8016466:	3310      	adds	r3, #16
 8016468:	757b      	strb	r3, [r7, #21]
 801646a:	7d3b      	ldrb	r3, [r7, #20]
 801646c:	3301      	adds	r3, #1
 801646e:	753b      	strb	r3, [r7, #20]
 8016470:	7d7b      	ldrb	r3, [r7, #21]
 8016472:	b29a      	uxth	r2, r3
 8016474:	68fb      	ldr	r3, [r7, #12]
 8016476:	8a1b      	ldrh	r3, [r3, #16]
 8016478:	429a      	cmp	r2, r3
 801647a:	f4ff af5c 	bcc.w	8016336 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 801647e:	687b      	ldr	r3, [r7, #4]
 8016480:	7dfa      	ldrb	r2, [r7, #23]
 8016482:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8016484:	683b      	ldr	r3, [r7, #0]
 8016486:	7dba      	ldrb	r2, [r7, #22]
 8016488:	701a      	strb	r2, [r3, #0]
}
 801648a:	bf00      	nop
 801648c:	371c      	adds	r7, #28
 801648e:	46bd      	mov	sp, r7
 8016490:	bd90      	pop	{r4, r7, pc}

08016492 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8016492:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016494:	b08b      	sub	sp, #44	; 0x2c
 8016496:	af04      	add	r7, sp, #16
 8016498:	60f8      	str	r0, [r7, #12]
 801649a:	60b9      	str	r1, [r7, #8]
 801649c:	607a      	str	r2, [r7, #4]
 801649e:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 80164a0:	68fb      	ldr	r3, [r7, #12]
 80164a2:	685b      	ldr	r3, [r3, #4]
 80164a4:	4618      	mov	r0, r3
 80164a6:	f006 ffbd 	bl	801d424 <UTIL_TIMER_GetElapsedTime>
 80164aa:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 80164ac:	68fb      	ldr	r3, [r7, #12]
 80164ae:	681a      	ldr	r2, [r3, #0]
 80164b0:	697b      	ldr	r3, [r7, #20]
 80164b2:	1ad2      	subs	r2, r2, r3
 80164b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80164b6:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 80164b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164ba:	2201      	movs	r2, #1
 80164bc:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 80164be:	683b      	ldr	r3, [r7, #0]
 80164c0:	2200      	movs	r2, #0
 80164c2:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 80164c4:	68fb      	ldr	r3, [r7, #12]
 80164c6:	685b      	ldr	r3, [r3, #4]
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	d004      	beq.n	80164d6 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 80164cc:	68fb      	ldr	r3, [r7, #12]
 80164ce:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 80164d0:	697a      	ldr	r2, [r7, #20]
 80164d2:	429a      	cmp	r2, r3
 80164d4:	d32b      	bcc.n	801652e <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 80164d6:	68bb      	ldr	r3, [r7, #8]
 80164d8:	2200      	movs	r2, #0
 80164da:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 80164dc:	68fb      	ldr	r3, [r7, #12]
 80164de:	69db      	ldr	r3, [r3, #28]
 80164e0:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 80164e2:	68fb      	ldr	r3, [r7, #12]
 80164e4:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 80164e6:	68dd      	ldr	r5, [r3, #12]
 80164e8:	68fb      	ldr	r3, [r7, #12]
 80164ea:	7a5e      	ldrb	r6, [r3, #9]
 80164ec:	68fb      	ldr	r3, [r7, #12]
 80164ee:	f893 c008 	ldrb.w	ip, [r3, #8]
 80164f2:	68fb      	ldr	r3, [r7, #12]
 80164f4:	7d1b      	ldrb	r3, [r3, #20]
 80164f6:	68fa      	ldr	r2, [r7, #12]
 80164f8:	6992      	ldr	r2, [r2, #24]
 80164fa:	9203      	str	r2, [sp, #12]
 80164fc:	68fa      	ldr	r2, [r7, #12]
 80164fe:	f10d 0e04 	add.w	lr, sp, #4
 8016502:	320c      	adds	r2, #12
 8016504:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016508:	e88e 0003 	stmia.w	lr, {r0, r1}
 801650c:	9300      	str	r3, [sp, #0]
 801650e:	4663      	mov	r3, ip
 8016510:	4632      	mov	r2, r6
 8016512:	4629      	mov	r1, r5
 8016514:	4620      	mov	r0, r4
 8016516:	f7ff fc25 	bl	8015d64 <RegionCommonUpdateBandTimeOff>
 801651a:	4602      	mov	r2, r0
 801651c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801651e:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8016520:	68fb      	ldr	r3, [r7, #12]
 8016522:	69d8      	ldr	r0, [r3, #28]
 8016524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016526:	683a      	ldr	r2, [r7, #0]
 8016528:	6879      	ldr	r1, [r7, #4]
 801652a:	f7ff fef4 	bl	8016316 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 801652e:	683b      	ldr	r3, [r7, #0]
 8016530:	781b      	ldrb	r3, [r3, #0]
 8016532:	2b00      	cmp	r3, #0
 8016534:	d004      	beq.n	8016540 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 8016536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016538:	2200      	movs	r2, #0
 801653a:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 801653c:	2300      	movs	r3, #0
 801653e:	e006      	b.n	801654e <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8016540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016542:	781b      	ldrb	r3, [r3, #0]
 8016544:	2b00      	cmp	r3, #0
 8016546:	d001      	beq.n	801654c <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8016548:	230b      	movs	r3, #11
 801654a:	e000      	b.n	801654e <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801654c:	230c      	movs	r3, #12
    }
}
 801654e:	4618      	mov	r0, r3
 8016550:	371c      	adds	r7, #28
 8016552:	46bd      	mov	sp, r7
 8016554:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016556 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8016556:	b5b0      	push	{r4, r5, r7, lr}
 8016558:	b086      	sub	sp, #24
 801655a:	af02      	add	r7, sp, #8
 801655c:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	781b      	ldrb	r3, [r3, #0]
 8016562:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	f993 2000 	ldrsb.w	r2, [r3]
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8016570:	429a      	cmp	r2, r3
 8016572:	d103      	bne.n	801657c <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801657a:	e026      	b.n	80165ca <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 801657c:	7bfb      	ldrb	r3, [r7, #15]
 801657e:	3b01      	subs	r3, #1
 8016580:	b2db      	uxtb	r3, r3
 8016582:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801658a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801658e:	429a      	cmp	r2, r3
 8016590:	d019      	beq.n	80165c6 <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8016592:	687b      	ldr	r3, [r7, #4]
 8016594:	78d8      	ldrb	r0, [r3, #3]
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	6859      	ldr	r1, [r3, #4]
 801659a:	687b      	ldr	r3, [r7, #4]
 801659c:	f993 5002 	ldrsb.w	r5, [r3, #2]
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80165a6:	687a      	ldr	r2, [r7, #4]
 80165a8:	6892      	ldr	r2, [r2, #8]
 80165aa:	f997 400f 	ldrsb.w	r4, [r7, #15]
 80165ae:	9201      	str	r2, [sp, #4]
 80165b0:	9300      	str	r3, [sp, #0]
 80165b2:	462b      	mov	r3, r5
 80165b4:	4622      	mov	r2, r4
 80165b6:	f7ff fa92 	bl	8015ade <RegionCommonChanVerifyDr>
 80165ba:	4603      	mov	r3, r0
 80165bc:	f083 0301 	eor.w	r3, r3, #1
 80165c0:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	d1da      	bne.n	801657c <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 80165c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 80165ca:	4618      	mov	r0, r3
 80165cc:	3710      	adds	r7, #16
 80165ce:	46bd      	mov	sp, r7
 80165d0:	bdb0      	pop	{r4, r5, r7, pc}

080165d2 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 80165d2:	b480      	push	{r7}
 80165d4:	b083      	sub	sp, #12
 80165d6:	af00      	add	r7, sp, #0
 80165d8:	4603      	mov	r3, r0
 80165da:	460a      	mov	r2, r1
 80165dc:	71fb      	strb	r3, [r7, #7]
 80165de:	4613      	mov	r3, r2
 80165e0:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 80165e2:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80165e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80165ea:	4293      	cmp	r3, r2
 80165ec:	bfb8      	it	lt
 80165ee:	4613      	movlt	r3, r2
 80165f0:	b25b      	sxtb	r3, r3
}
 80165f2:	4618      	mov	r0, r3
 80165f4:	370c      	adds	r7, #12
 80165f6:	46bd      	mov	sp, r7
 80165f8:	bc80      	pop	{r7}
 80165fa:	4770      	bx	lr

080165fc <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 80165fc:	b480      	push	{r7}
 80165fe:	b083      	sub	sp, #12
 8016600:	af00      	add	r7, sp, #0
 8016602:	6078      	str	r0, [r7, #4]
 8016604:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 8016606:	687b      	ldr	r3, [r7, #4]
 8016608:	009b      	lsls	r3, r3, #2
 801660a:	683a      	ldr	r2, [r7, #0]
 801660c:	4413      	add	r3, r2
 801660e:	681b      	ldr	r3, [r3, #0]
 8016610:	4a07      	ldr	r2, [pc, #28]	; (8016630 <RegionCommonGetBandwidth+0x34>)
 8016612:	4293      	cmp	r3, r2
 8016614:	d004      	beq.n	8016620 <RegionCommonGetBandwidth+0x24>
 8016616:	4a07      	ldr	r2, [pc, #28]	; (8016634 <RegionCommonGetBandwidth+0x38>)
 8016618:	4293      	cmp	r3, r2
 801661a:	d003      	beq.n	8016624 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 801661c:	2300      	movs	r3, #0
 801661e:	e002      	b.n	8016626 <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 8016620:	2301      	movs	r3, #1
 8016622:	e000      	b.n	8016626 <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8016624:	2302      	movs	r3, #2
    }
}
 8016626:	4618      	mov	r0, r3
 8016628:	370c      	adds	r7, #12
 801662a:	46bd      	mov	sp, r7
 801662c:	bc80      	pop	{r7}
 801662e:	4770      	bx	lr
 8016630:	0003d090 	.word	0x0003d090
 8016634:	0007a120 	.word	0x0007a120

08016638 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8016638:	b580      	push	{r7, lr}
 801663a:	b086      	sub	sp, #24
 801663c:	af04      	add	r7, sp, #16
 801663e:	4603      	mov	r3, r0
 8016640:	6039      	str	r1, [r7, #0]
 8016642:	71fb      	strb	r3, [r7, #7]
 8016644:	4613      	mov	r3, r2
 8016646:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 8016648:	79fb      	ldrb	r3, [r7, #7]
 801664a:	2b05      	cmp	r3, #5
 801664c:	d810      	bhi.n	8016670 <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 801664e:	79fb      	ldrb	r3, [r7, #7]
 8016650:	4a0f      	ldr	r2, [pc, #60]	; (8016690 <RegionCommonRxConfigPrint+0x58>)
 8016652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016656:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801665a:	9202      	str	r2, [sp, #8]
 801665c:	683a      	ldr	r2, [r7, #0]
 801665e:	9201      	str	r2, [sp, #4]
 8016660:	9300      	str	r3, [sp, #0]
 8016662:	4b0c      	ldr	r3, [pc, #48]	; (8016694 <RegionCommonRxConfigPrint+0x5c>)
 8016664:	2201      	movs	r2, #1
 8016666:	2100      	movs	r1, #0
 8016668:	2002      	movs	r0, #2
 801666a:	f006 ffb9 	bl	801d5e0 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 801666e:	e00a      	b.n	8016686 <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8016670:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016674:	9301      	str	r3, [sp, #4]
 8016676:	683b      	ldr	r3, [r7, #0]
 8016678:	9300      	str	r3, [sp, #0]
 801667a:	4b07      	ldr	r3, [pc, #28]	; (8016698 <RegionCommonRxConfigPrint+0x60>)
 801667c:	2201      	movs	r2, #1
 801667e:	2100      	movs	r1, #0
 8016680:	2002      	movs	r0, #2
 8016682:	f006 ffad 	bl	801d5e0 <UTIL_ADV_TRACE_COND_FSend>
}
 8016686:	bf00      	nop
 8016688:	3708      	adds	r7, #8
 801668a:	46bd      	mov	sp, r7
 801668c:	bd80      	pop	{r7, pc}
 801668e:	bf00      	nop
 8016690:	20000118 	.word	0x20000118
 8016694:	0801e380 	.word	0x0801e380
 8016698:	0801e3a0 	.word	0x0801e3a0

0801669c <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 801669c:	b580      	push	{r7, lr}
 801669e:	b084      	sub	sp, #16
 80166a0:	af02      	add	r7, sp, #8
 80166a2:	6078      	str	r0, [r7, #4]
 80166a4:	460b      	mov	r3, r1
 80166a6:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 80166a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80166ac:	9301      	str	r3, [sp, #4]
 80166ae:	687b      	ldr	r3, [r7, #4]
 80166b0:	9300      	str	r3, [sp, #0]
 80166b2:	4b05      	ldr	r3, [pc, #20]	; (80166c8 <RegionCommonTxConfigPrint+0x2c>)
 80166b4:	2201      	movs	r2, #1
 80166b6:	2100      	movs	r1, #0
 80166b8:	2002      	movs	r0, #2
 80166ba:	f006 ff91 	bl	801d5e0 <UTIL_ADV_TRACE_COND_FSend>
}
 80166be:	bf00      	nop
 80166c0:	3708      	adds	r7, #8
 80166c2:	46bd      	mov	sp, r7
 80166c4:	bd80      	pop	{r7, pc}
 80166c6:	bf00      	nop
 80166c8:	0801e3bc 	.word	0x0801e3bc

080166cc <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 80166cc:	b580      	push	{r7, lr}
 80166ce:	b082      	sub	sp, #8
 80166d0:	af00      	add	r7, sp, #0
 80166d2:	6078      	str	r0, [r7, #4]
 80166d4:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 80166d6:	4b2d      	ldr	r3, [pc, #180]	; (801678c <VerifyRfFreq+0xc0>)
 80166d8:	6a1b      	ldr	r3, [r3, #32]
 80166da:	6878      	ldr	r0, [r7, #4]
 80166dc:	4798      	blx	r3
 80166de:	4603      	mov	r3, r0
 80166e0:	f083 0301 	eor.w	r3, r3, #1
 80166e4:	b2db      	uxtb	r3, r3
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	d001      	beq.n	80166ee <VerifyRfFreq+0x22>
    {
        return false;
 80166ea:	2300      	movs	r3, #0
 80166ec:	e04a      	b.n	8016784 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	4a27      	ldr	r2, [pc, #156]	; (8016790 <VerifyRfFreq+0xc4>)
 80166f2:	4293      	cmp	r3, r2
 80166f4:	d307      	bcc.n	8016706 <VerifyRfFreq+0x3a>
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	4a26      	ldr	r2, [pc, #152]	; (8016794 <VerifyRfFreq+0xc8>)
 80166fa:	4293      	cmp	r3, r2
 80166fc:	d803      	bhi.n	8016706 <VerifyRfFreq+0x3a>
    {
        *band = 2;
 80166fe:	683b      	ldr	r3, [r7, #0]
 8016700:	2202      	movs	r2, #2
 8016702:	701a      	strb	r2, [r3, #0]
 8016704:	e03d      	b.n	8016782 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	4a22      	ldr	r2, [pc, #136]	; (8016794 <VerifyRfFreq+0xc8>)
 801670a:	4293      	cmp	r3, r2
 801670c:	d907      	bls.n	801671e <VerifyRfFreq+0x52>
 801670e:	687b      	ldr	r3, [r7, #4]
 8016710:	4a21      	ldr	r2, [pc, #132]	; (8016798 <VerifyRfFreq+0xcc>)
 8016712:	4293      	cmp	r3, r2
 8016714:	d803      	bhi.n	801671e <VerifyRfFreq+0x52>
    {
        *band = 0;
 8016716:	683b      	ldr	r3, [r7, #0]
 8016718:	2200      	movs	r2, #0
 801671a:	701a      	strb	r2, [r3, #0]
 801671c:	e031      	b.n	8016782 <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	4a1d      	ldr	r2, [pc, #116]	; (8016798 <VerifyRfFreq+0xcc>)
 8016722:	4293      	cmp	r3, r2
 8016724:	d907      	bls.n	8016736 <VerifyRfFreq+0x6a>
 8016726:	687b      	ldr	r3, [r7, #4]
 8016728:	4a1c      	ldr	r2, [pc, #112]	; (801679c <VerifyRfFreq+0xd0>)
 801672a:	4293      	cmp	r3, r2
 801672c:	d803      	bhi.n	8016736 <VerifyRfFreq+0x6a>
    {
        *band = 1;
 801672e:	683b      	ldr	r3, [r7, #0]
 8016730:	2201      	movs	r2, #1
 8016732:	701a      	strb	r2, [r3, #0]
 8016734:	e025      	b.n	8016782 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	4a19      	ldr	r2, [pc, #100]	; (80167a0 <VerifyRfFreq+0xd4>)
 801673a:	4293      	cmp	r3, r2
 801673c:	d907      	bls.n	801674e <VerifyRfFreq+0x82>
 801673e:	687b      	ldr	r3, [r7, #4]
 8016740:	4a18      	ldr	r2, [pc, #96]	; (80167a4 <VerifyRfFreq+0xd8>)
 8016742:	4293      	cmp	r3, r2
 8016744:	d803      	bhi.n	801674e <VerifyRfFreq+0x82>
    {
        *band = 5;
 8016746:	683b      	ldr	r3, [r7, #0]
 8016748:	2205      	movs	r2, #5
 801674a:	701a      	strb	r2, [r3, #0]
 801674c:	e019      	b.n	8016782 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	4a15      	ldr	r2, [pc, #84]	; (80167a8 <VerifyRfFreq+0xdc>)
 8016752:	4293      	cmp	r3, r2
 8016754:	d907      	bls.n	8016766 <VerifyRfFreq+0x9a>
 8016756:	687b      	ldr	r3, [r7, #4]
 8016758:	4a14      	ldr	r2, [pc, #80]	; (80167ac <VerifyRfFreq+0xe0>)
 801675a:	4293      	cmp	r3, r2
 801675c:	d803      	bhi.n	8016766 <VerifyRfFreq+0x9a>
    {
        *band = 3;
 801675e:	683b      	ldr	r3, [r7, #0]
 8016760:	2203      	movs	r2, #3
 8016762:	701a      	strb	r2, [r3, #0]
 8016764:	e00d      	b.n	8016782 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 8016766:	687b      	ldr	r3, [r7, #4]
 8016768:	4a11      	ldr	r2, [pc, #68]	; (80167b0 <VerifyRfFreq+0xe4>)
 801676a:	4293      	cmp	r3, r2
 801676c:	d307      	bcc.n	801677e <VerifyRfFreq+0xb2>
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	4a10      	ldr	r2, [pc, #64]	; (80167b4 <VerifyRfFreq+0xe8>)
 8016772:	4293      	cmp	r3, r2
 8016774:	d803      	bhi.n	801677e <VerifyRfFreq+0xb2>
    {
        *band = 4;
 8016776:	683b      	ldr	r3, [r7, #0]
 8016778:	2204      	movs	r2, #4
 801677a:	701a      	strb	r2, [r3, #0]
 801677c:	e001      	b.n	8016782 <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 801677e:	2300      	movs	r3, #0
 8016780:	e000      	b.n	8016784 <VerifyRfFreq+0xb8>
    }
    return true;
 8016782:	2301      	movs	r3, #1
}
 8016784:	4618      	mov	r0, r3
 8016786:	3708      	adds	r7, #8
 8016788:	46bd      	mov	sp, r7
 801678a:	bd80      	pop	{r7, pc}
 801678c:	0801ea64 	.word	0x0801ea64
 8016790:	337055c0 	.word	0x337055c0
 8016794:	338eda3f 	.word	0x338eda3f
 8016798:	33bca100 	.word	0x33bca100
 801679c:	33c5c8c0 	.word	0x33c5c8c0
 80167a0:	33c74f5f 	.word	0x33c74f5f
 80167a4:	33cef080 	.word	0x33cef080
 80167a8:	33d1fdbf 	.word	0x33d1fdbf
 80167ac:	33d5ce50 	.word	0x33d5ce50
 80167b0:	33d691a0 	.word	0x33d691a0
 80167b4:	33db2580 	.word	0x33db2580

080167b8 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 80167b8:	b590      	push	{r4, r7, lr}
 80167ba:	b08b      	sub	sp, #44	; 0x2c
 80167bc:	af04      	add	r7, sp, #16
 80167be:	4603      	mov	r3, r0
 80167c0:	460a      	mov	r2, r1
 80167c2:	71fb      	strb	r3, [r7, #7]
 80167c4:	4613      	mov	r3, r2
 80167c6:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 80167c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80167cc:	4a1f      	ldr	r2, [pc, #124]	; (801684c <GetTimeOnAir+0x94>)
 80167ce:	5cd3      	ldrb	r3, [r2, r3]
 80167d0:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 80167d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80167d6:	491e      	ldr	r1, [pc, #120]	; (8016850 <GetTimeOnAir+0x98>)
 80167d8:	4618      	mov	r0, r3
 80167da:	f7ff ff0f 	bl	80165fc <RegionCommonGetBandwidth>
 80167de:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 80167e0:	2300      	movs	r3, #0
 80167e2:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 80167e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80167e8:	2b07      	cmp	r3, #7
 80167ea:	d118      	bne.n	801681e <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 80167ec:	4b19      	ldr	r3, [pc, #100]	; (8016854 <GetTimeOnAir+0x9c>)
 80167ee:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80167f0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80167f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80167f8:	fb02 f303 	mul.w	r3, r2, r3
 80167fc:	4619      	mov	r1, r3
 80167fe:	88bb      	ldrh	r3, [r7, #4]
 8016800:	b2db      	uxtb	r3, r3
 8016802:	2201      	movs	r2, #1
 8016804:	9203      	str	r2, [sp, #12]
 8016806:	9302      	str	r3, [sp, #8]
 8016808:	2300      	movs	r3, #0
 801680a:	9301      	str	r3, [sp, #4]
 801680c:	2305      	movs	r3, #5
 801680e:	9300      	str	r3, [sp, #0]
 8016810:	2300      	movs	r3, #0
 8016812:	460a      	mov	r2, r1
 8016814:	68f9      	ldr	r1, [r7, #12]
 8016816:	2000      	movs	r0, #0
 8016818:	47a0      	blx	r4
 801681a:	6178      	str	r0, [r7, #20]
 801681c:	e011      	b.n	8016842 <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 801681e:	4b0d      	ldr	r3, [pc, #52]	; (8016854 <GetTimeOnAir+0x9c>)
 8016820:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8016822:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8016826:	88bb      	ldrh	r3, [r7, #4]
 8016828:	b2db      	uxtb	r3, r3
 801682a:	2101      	movs	r1, #1
 801682c:	9103      	str	r1, [sp, #12]
 801682e:	9302      	str	r3, [sp, #8]
 8016830:	2300      	movs	r3, #0
 8016832:	9301      	str	r3, [sp, #4]
 8016834:	2308      	movs	r3, #8
 8016836:	9300      	str	r3, [sp, #0]
 8016838:	2301      	movs	r3, #1
 801683a:	68f9      	ldr	r1, [r7, #12]
 801683c:	2001      	movs	r0, #1
 801683e:	47a0      	blx	r4
 8016840:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 8016842:	697b      	ldr	r3, [r7, #20]
}
 8016844:	4618      	mov	r0, r3
 8016846:	371c      	adds	r7, #28
 8016848:	46bd      	mov	sp, r7
 801684a:	bd90      	pop	{r4, r7, pc}
 801684c:	0801e9a8 	.word	0x0801e9a8
 8016850:	0801e9b0 	.word	0x0801e9b0
 8016854:	0801ea64 	.word	0x0801ea64

08016858 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8016858:	b580      	push	{r7, lr}
 801685a:	b088      	sub	sp, #32
 801685c:	af00      	add	r7, sp, #0
 801685e:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8016860:	2300      	movs	r3, #0
 8016862:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 8016864:	687b      	ldr	r3, [r7, #4]
 8016866:	781b      	ldrb	r3, [r3, #0]
 8016868:	3b01      	subs	r3, #1
 801686a:	2b37      	cmp	r3, #55	; 0x37
 801686c:	f200 8122 	bhi.w	8016ab4 <RegionEU868GetPhyParam+0x25c>
 8016870:	a201      	add	r2, pc, #4	; (adr r2, 8016878 <RegionEU868GetPhyParam+0x20>)
 8016872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016876:	bf00      	nop
 8016878:	08016959 	.word	0x08016959
 801687c:	0801695f 	.word	0x0801695f
 8016880:	08016ab5 	.word	0x08016ab5
 8016884:	08016ab5 	.word	0x08016ab5
 8016888:	08016ab5 	.word	0x08016ab5
 801688c:	08016965 	.word	0x08016965
 8016890:	08016ab5 	.word	0x08016ab5
 8016894:	0801699f 	.word	0x0801699f
 8016898:	08016ab5 	.word	0x08016ab5
 801689c:	080169a5 	.word	0x080169a5
 80168a0:	080169ab 	.word	0x080169ab
 80168a4:	080169b1 	.word	0x080169b1
 80168a8:	080169b7 	.word	0x080169b7
 80168ac:	080169c7 	.word	0x080169c7
 80168b0:	080169d7 	.word	0x080169d7
 80168b4:	080169dd 	.word	0x080169dd
 80168b8:	080169e5 	.word	0x080169e5
 80168bc:	080169ed 	.word	0x080169ed
 80168c0:	080169f5 	.word	0x080169f5
 80168c4:	080169fd 	.word	0x080169fd
 80168c8:	08016a05 	.word	0x08016a05
 80168cc:	08016a19 	.word	0x08016a19
 80168d0:	08016a1f 	.word	0x08016a1f
 80168d4:	08016a25 	.word	0x08016a25
 80168d8:	08016a2b 	.word	0x08016a2b
 80168dc:	08016a37 	.word	0x08016a37
 80168e0:	08016a43 	.word	0x08016a43
 80168e4:	08016a49 	.word	0x08016a49
 80168e8:	08016a51 	.word	0x08016a51
 80168ec:	08016a57 	.word	0x08016a57
 80168f0:	08016a5d 	.word	0x08016a5d
 80168f4:	08016a65 	.word	0x08016a65
 80168f8:	0801696b 	.word	0x0801696b
 80168fc:	08016ab5 	.word	0x08016ab5
 8016900:	08016ab5 	.word	0x08016ab5
 8016904:	08016ab5 	.word	0x08016ab5
 8016908:	08016ab5 	.word	0x08016ab5
 801690c:	08016ab5 	.word	0x08016ab5
 8016910:	08016ab5 	.word	0x08016ab5
 8016914:	08016ab5 	.word	0x08016ab5
 8016918:	08016ab5 	.word	0x08016ab5
 801691c:	08016ab5 	.word	0x08016ab5
 8016920:	08016ab5 	.word	0x08016ab5
 8016924:	08016ab5 	.word	0x08016ab5
 8016928:	08016ab5 	.word	0x08016ab5
 801692c:	08016ab5 	.word	0x08016ab5
 8016930:	08016a6b 	.word	0x08016a6b
 8016934:	08016a71 	.word	0x08016a71
 8016938:	08016a7f 	.word	0x08016a7f
 801693c:	08016ab5 	.word	0x08016ab5
 8016940:	08016ab5 	.word	0x08016ab5
 8016944:	08016a85 	.word	0x08016a85
 8016948:	08016a8b 	.word	0x08016a8b
 801694c:	08016ab5 	.word	0x08016ab5
 8016950:	08016a91 	.word	0x08016a91
 8016954:	08016aa1 	.word	0x08016aa1
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8016958:	2300      	movs	r3, #0
 801695a:	61bb      	str	r3, [r7, #24]
            break;
 801695c:	e0ab      	b.n	8016ab6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 801695e:	2300      	movs	r3, #0
 8016960:	61bb      	str	r3, [r7, #24]
            break;
 8016962:	e0a8      	b.n	8016ab6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8016964:	2300      	movs	r3, #0
 8016966:	61bb      	str	r3, [r7, #24]
            break;
 8016968:	e0a5      	b.n	8016ab6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8016970:	733b      	strb	r3, [r7, #12]
 8016972:	2307      	movs	r3, #7
 8016974:	737b      	strb	r3, [r7, #13]
 8016976:	2300      	movs	r3, #0
 8016978:	73bb      	strb	r3, [r7, #14]
 801697a:	2310      	movs	r3, #16
 801697c:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 801697e:	4b51      	ldr	r3, [pc, #324]	; (8016ac4 <RegionEU868GetPhyParam+0x26c>)
 8016980:	681b      	ldr	r3, [r3, #0]
 8016982:	f503 7358 	add.w	r3, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8016986:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8016988:	4b4e      	ldr	r3, [pc, #312]	; (8016ac4 <RegionEU868GetPhyParam+0x26c>)
 801698a:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801698c:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 801698e:	f107 030c 	add.w	r3, r7, #12
 8016992:	4618      	mov	r0, r3
 8016994:	f7ff fddf 	bl	8016556 <RegionCommonGetNextLowerTxDr>
 8016998:	4603      	mov	r3, r0
 801699a:	61bb      	str	r3, [r7, #24]
            break;
 801699c:	e08b      	b.n	8016ab6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 801699e:	2300      	movs	r3, #0
 80169a0:	61bb      	str	r3, [r7, #24]
            break;
 80169a2:	e088      	b.n	8016ab6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 80169a4:	2300      	movs	r3, #0
 80169a6:	61bb      	str	r3, [r7, #24]
            break;
 80169a8:	e085      	b.n	8016ab6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 80169aa:	2340      	movs	r3, #64	; 0x40
 80169ac:	61bb      	str	r3, [r7, #24]
            break;
 80169ae:	e082      	b.n	8016ab6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 80169b0:	2320      	movs	r3, #32
 80169b2:	61bb      	str	r3, [r7, #24]
            break;
 80169b4:	e07f      	b.n	8016ab6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80169bc:	461a      	mov	r2, r3
 80169be:	4b42      	ldr	r3, [pc, #264]	; (8016ac8 <RegionEU868GetPhyParam+0x270>)
 80169c0:	5c9b      	ldrb	r3, [r3, r2]
 80169c2:	61bb      	str	r3, [r7, #24]
            break;
 80169c4:	e077      	b.n	8016ab6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 80169c6:	687b      	ldr	r3, [r7, #4]
 80169c8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80169cc:	461a      	mov	r2, r3
 80169ce:	4b3f      	ldr	r3, [pc, #252]	; (8016acc <RegionEU868GetPhyParam+0x274>)
 80169d0:	5c9b      	ldrb	r3, [r3, r2]
 80169d2:	61bb      	str	r3, [r7, #24]
            break;
 80169d4:	e06f      	b.n	8016ab6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 80169d6:	2301      	movs	r3, #1
 80169d8:	61bb      	str	r3, [r7, #24]
            break;
 80169da:	e06c      	b.n	8016ab6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 80169dc:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80169e0:	61bb      	str	r3, [r7, #24]
            break;
 80169e2:	e068      	b.n	8016ab6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 80169e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80169e8:	61bb      	str	r3, [r7, #24]
            break;
 80169ea:	e064      	b.n	8016ab6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 80169ec:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80169f0:	61bb      	str	r3, [r7, #24]
            break;
 80169f2:	e060      	b.n	8016ab6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 80169f4:	f241 3388 	movw	r3, #5000	; 0x1388
 80169f8:	61bb      	str	r3, [r7, #24]
            break;
 80169fa:	e05c      	b.n	8016ab6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 80169fc:	f241 7370 	movw	r3, #6000	; 0x1770
 8016a00:	61bb      	str	r3, [r7, #24]
            break;
 8016a02:	e058      	b.n	8016ab6 <RegionEU868GetPhyParam+0x25e>
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))

        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 8016a04:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8016a08:	4831      	ldr	r0, [pc, #196]	; (8016ad0 <RegionEU868GetPhyParam+0x278>)
 8016a0a:	f002 fa2d 	bl	8018e68 <randr>
 8016a0e:	4603      	mov	r3, r0
 8016a10:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8016a14:	61bb      	str	r3, [r7, #24]
            break;
 8016a16:	e04e      	b.n	8016ab6 <RegionEU868GetPhyParam+0x25e>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8016a18:	2300      	movs	r3, #0
 8016a1a:	61bb      	str	r3, [r7, #24]
            break;
 8016a1c:	e04b      	b.n	8016ab6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8016a1e:	4b2d      	ldr	r3, [pc, #180]	; (8016ad4 <RegionEU868GetPhyParam+0x27c>)
 8016a20:	61bb      	str	r3, [r7, #24]
            break;
 8016a22:	e048      	b.n	8016ab6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8016a24:	2300      	movs	r3, #0
 8016a26:	61bb      	str	r3, [r7, #24]
            break;
 8016a28:	e045      	b.n	8016ab6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8016a2a:	4b26      	ldr	r3, [pc, #152]	; (8016ac4 <RegionEU868GetPhyParam+0x26c>)
 8016a2c:	681b      	ldr	r3, [r3, #0]
 8016a2e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8016a32:	61bb      	str	r3, [r7, #24]
            break;
 8016a34:	e03f      	b.n	8016ab6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8016a36:	4b23      	ldr	r3, [pc, #140]	; (8016ac4 <RegionEU868GetPhyParam+0x26c>)
 8016a38:	681b      	ldr	r3, [r3, #0]
 8016a3a:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8016a3e:	61bb      	str	r3, [r7, #24]
            break;
 8016a40:	e039      	b.n	8016ab6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8016a42:	2310      	movs	r3, #16
 8016a44:	61bb      	str	r3, [r7, #24]
            break;
 8016a46:	e036      	b.n	8016ab6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8016a48:	4b1e      	ldr	r3, [pc, #120]	; (8016ac4 <RegionEU868GetPhyParam+0x26c>)
 8016a4a:	681b      	ldr	r3, [r3, #0]
 8016a4c:	61bb      	str	r3, [r7, #24]
            break;
 8016a4e:	e032      	b.n	8016ab6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 8016a50:	2300      	movs	r3, #0
 8016a52:	61bb      	str	r3, [r7, #24]
            break;
 8016a54:	e02f      	b.n	8016ab6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8016a56:	2300      	movs	r3, #0
 8016a58:	61bb      	str	r3, [r7, #24]
            break;
 8016a5a:	e02c      	b.n	8016ab6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8016a5c:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8016a60:	61bb      	str	r3, [r7, #24]
            break;
 8016a62:	e028      	b.n	8016ab6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8016a64:	4b1c      	ldr	r3, [pc, #112]	; (8016ad8 <RegionEU868GetPhyParam+0x280>)
 8016a66:	61bb      	str	r3, [r7, #24]
            break;
 8016a68:	e025      	b.n	8016ab6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8016a6a:	4b1a      	ldr	r3, [pc, #104]	; (8016ad4 <RegionEU868GetPhyParam+0x27c>)
 8016a6c:	61bb      	str	r3, [r7, #24]
            break;
 8016a6e:	e022      	b.n	8016ab6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8016a70:	2311      	movs	r3, #17
 8016a72:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8016a74:	2301      	movs	r3, #1
 8016a76:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 8016a78:	2300      	movs	r3, #0
 8016a7a:	76bb      	strb	r3, [r7, #26]
            break;
 8016a7c:	e01b      	b.n	8016ab6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8016a7e:	2303      	movs	r3, #3
 8016a80:	61bb      	str	r3, [r7, #24]
            break;
 8016a82:	e018      	b.n	8016ab6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8016a84:	4b13      	ldr	r3, [pc, #76]	; (8016ad4 <RegionEU868GetPhyParam+0x27c>)
 8016a86:	61bb      	str	r3, [r7, #24]
            break;
 8016a88:	e015      	b.n	8016ab6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 8016a8a:	2303      	movs	r3, #3
 8016a8c:	61bb      	str	r3, [r7, #24]
            break;
 8016a8e:	e012      	b.n	8016ab6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016a96:	461a      	mov	r2, r3
 8016a98:	4b10      	ldr	r3, [pc, #64]	; (8016adc <RegionEU868GetPhyParam+0x284>)
 8016a9a:	5c9b      	ldrb	r3, [r3, r2]
 8016a9c:	61bb      	str	r3, [r7, #24]
            break;
 8016a9e:	e00a      	b.n	8016ab6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 8016aa0:	687b      	ldr	r3, [r7, #4]
 8016aa2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016aa6:	490e      	ldr	r1, [pc, #56]	; (8016ae0 <RegionEU868GetPhyParam+0x288>)
 8016aa8:	4618      	mov	r0, r3
 8016aaa:	f7ff fda7 	bl	80165fc <RegionCommonGetBandwidth>
 8016aae:	4603      	mov	r3, r0
 8016ab0:	61bb      	str	r3, [r7, #24]
            break;
 8016ab2:	e000      	b.n	8016ab6 <RegionEU868GetPhyParam+0x25e>
        }
        default:
        {
            break;
 8016ab4:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 8016ab6:	69bb      	ldr	r3, [r7, #24]
 8016ab8:	61fb      	str	r3, [r7, #28]
 8016aba:	69fb      	ldr	r3, [r7, #28]
}
 8016abc:	4618      	mov	r0, r3
 8016abe:	3720      	adds	r7, #32
 8016ac0:	46bd      	mov	sp, r7
 8016ac2:	bd80      	pop	{r7, pc}
 8016ac4:	20001ad0 	.word	0x20001ad0
 8016ac8:	0801e9d0 	.word	0x0801e9d0
 8016acc:	0801e9d8 	.word	0x0801e9d8
 8016ad0:	fffffc18 	.word	0xfffffc18
 8016ad4:	33d3e608 	.word	0x33d3e608
 8016ad8:	4009999a 	.word	0x4009999a
 8016adc:	0801e9a8 	.word	0x0801e9a8
 8016ae0:	0801e9b0 	.word	0x0801e9b0

08016ae4 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8016ae4:	b590      	push	{r4, r7, lr}
 8016ae6:	b085      	sub	sp, #20
 8016ae8:	af02      	add	r7, sp, #8
 8016aea:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8016aec:	4b11      	ldr	r3, [pc, #68]	; (8016b34 <RegionEU868SetBandTxDone+0x50>)
 8016aee:	681a      	ldr	r2, [r3, #0]
 8016af0:	4b11      	ldr	r3, [pc, #68]	; (8016b38 <RegionEU868SetBandTxDone+0x54>)
 8016af2:	6819      	ldr	r1, [r3, #0]
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	781b      	ldrb	r3, [r3, #0]
 8016af8:	4618      	mov	r0, r3
 8016afa:	4603      	mov	r3, r0
 8016afc:	005b      	lsls	r3, r3, #1
 8016afe:	4403      	add	r3, r0
 8016b00:	009b      	lsls	r3, r3, #2
 8016b02:	440b      	add	r3, r1
 8016b04:	3309      	adds	r3, #9
 8016b06:	781b      	ldrb	r3, [r3, #0]
 8016b08:	4619      	mov	r1, r3
 8016b0a:	460b      	mov	r3, r1
 8016b0c:	005b      	lsls	r3, r3, #1
 8016b0e:	440b      	add	r3, r1
 8016b10:	00db      	lsls	r3, r3, #3
 8016b12:	18d0      	adds	r0, r2, r3
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	6899      	ldr	r1, [r3, #8]
 8016b18:	687b      	ldr	r3, [r7, #4]
 8016b1a:	785c      	ldrb	r4, [r3, #1]
 8016b1c:	687b      	ldr	r3, [r7, #4]
 8016b1e:	691a      	ldr	r2, [r3, #16]
 8016b20:	9200      	str	r2, [sp, #0]
 8016b22:	68db      	ldr	r3, [r3, #12]
 8016b24:	4622      	mov	r2, r4
 8016b26:	f7ff f8ef 	bl	8015d08 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 8016b2a:	bf00      	nop
 8016b2c:	370c      	adds	r7, #12
 8016b2e:	46bd      	mov	sp, r7
 8016b30:	bd90      	pop	{r4, r7, pc}
 8016b32:	bf00      	nop
 8016b34:	20001ad4 	.word	0x20001ad4
 8016b38:	20001ad0 	.word	0x20001ad0

08016b3c <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8016b3c:	b580      	push	{r7, lr}
 8016b3e:	b0b0      	sub	sp, #192	; 0xc0
 8016b40:	af00      	add	r7, sp, #0
 8016b42:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 8016b44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016b48:	2290      	movs	r2, #144	; 0x90
 8016b4a:	2100      	movs	r1, #0
 8016b4c:	4618      	mov	r0, r3
 8016b4e:	f006 ffbf 	bl	801dad0 <memset>
 8016b52:	2364      	movs	r3, #100	; 0x64
 8016b54:	863b      	strh	r3, [r7, #48]	; 0x30
 8016b56:	2364      	movs	r3, #100	; 0x64
 8016b58:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8016b5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016b60:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8016b64:	230a      	movs	r3, #10
 8016b66:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8016b6a:	2364      	movs	r3, #100	; 0x64
 8016b6c:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8016b70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016b74:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8016b78:	687b      	ldr	r3, [r7, #4]
 8016b7a:	7b1b      	ldrb	r3, [r3, #12]
 8016b7c:	2b02      	cmp	r3, #2
 8016b7e:	d05d      	beq.n	8016c3c <RegionEU868InitDefaults+0x100>
 8016b80:	2b02      	cmp	r3, #2
 8016b82:	dc6a      	bgt.n	8016c5a <RegionEU868InitDefaults+0x11e>
 8016b84:	2b00      	cmp	r3, #0
 8016b86:	d002      	beq.n	8016b8e <RegionEU868InitDefaults+0x52>
 8016b88:	2b01      	cmp	r3, #1
 8016b8a:	d03e      	beq.n	8016c0a <RegionEU868InitDefaults+0xce>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8016b8c:	e065      	b.n	8016c5a <RegionEU868InitDefaults+0x11e>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	681b      	ldr	r3, [r3, #0]
 8016b92:	2b00      	cmp	r3, #0
 8016b94:	d062      	beq.n	8016c5c <RegionEU868InitDefaults+0x120>
 8016b96:	687b      	ldr	r3, [r7, #4]
 8016b98:	685b      	ldr	r3, [r3, #4]
 8016b9a:	2b00      	cmp	r3, #0
 8016b9c:	d05e      	beq.n	8016c5c <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8016b9e:	687b      	ldr	r3, [r7, #4]
 8016ba0:	685b      	ldr	r3, [r3, #4]
 8016ba2:	4a30      	ldr	r2, [pc, #192]	; (8016c64 <RegionEU868InitDefaults+0x128>)
 8016ba4:	6013      	str	r3, [r2, #0]
            RegionBands = (Band_t*) params->Bands;
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	689b      	ldr	r3, [r3, #8]
 8016baa:	4a2f      	ldr	r2, [pc, #188]	; (8016c68 <RegionEU868InitDefaults+0x12c>)
 8016bac:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8016bae:	4b2e      	ldr	r3, [pc, #184]	; (8016c68 <RegionEU868InitDefaults+0x12c>)
 8016bb0:	681b      	ldr	r3, [r3, #0]
 8016bb2:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8016bb6:	2290      	movs	r2, #144	; 0x90
 8016bb8:	4618      	mov	r0, r3
 8016bba:	f002 f96c 	bl	8018e96 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8016bbe:	4b29      	ldr	r3, [pc, #164]	; (8016c64 <RegionEU868InitDefaults+0x128>)
 8016bc0:	681b      	ldr	r3, [r3, #0]
 8016bc2:	4a2a      	ldr	r2, [pc, #168]	; (8016c6c <RegionEU868InitDefaults+0x130>)
 8016bc4:	ca07      	ldmia	r2, {r0, r1, r2}
 8016bc6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8016bca:	4b26      	ldr	r3, [pc, #152]	; (8016c64 <RegionEU868InitDefaults+0x128>)
 8016bcc:	681b      	ldr	r3, [r3, #0]
 8016bce:	4a28      	ldr	r2, [pc, #160]	; (8016c70 <RegionEU868InitDefaults+0x134>)
 8016bd0:	330c      	adds	r3, #12
 8016bd2:	ca07      	ldmia	r2, {r0, r1, r2}
 8016bd4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8016bd8:	4b22      	ldr	r3, [pc, #136]	; (8016c64 <RegionEU868InitDefaults+0x128>)
 8016bda:	681b      	ldr	r3, [r3, #0]
 8016bdc:	4a25      	ldr	r2, [pc, #148]	; (8016c74 <RegionEU868InitDefaults+0x138>)
 8016bde:	3318      	adds	r3, #24
 8016be0:	ca07      	ldmia	r2, {r0, r1, r2}
 8016be2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8016be6:	4b1f      	ldr	r3, [pc, #124]	; (8016c64 <RegionEU868InitDefaults+0x128>)
 8016be8:	681b      	ldr	r3, [r3, #0]
 8016bea:	2207      	movs	r2, #7
 8016bec:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8016bf0:	4b1c      	ldr	r3, [pc, #112]	; (8016c64 <RegionEU868InitDefaults+0x128>)
 8016bf2:	681b      	ldr	r3, [r3, #0]
 8016bf4:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8016bf8:	4b1a      	ldr	r3, [pc, #104]	; (8016c64 <RegionEU868InitDefaults+0x128>)
 8016bfa:	681b      	ldr	r3, [r3, #0]
 8016bfc:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8016c00:	2201      	movs	r2, #1
 8016c02:	4619      	mov	r1, r3
 8016c04:	f7ff f85a 	bl	8015cbc <RegionCommonChanMaskCopy>
 8016c08:	e028      	b.n	8016c5c <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8016c0a:	4b16      	ldr	r3, [pc, #88]	; (8016c64 <RegionEU868InitDefaults+0x128>)
 8016c0c:	681b      	ldr	r3, [r3, #0]
 8016c0e:	2200      	movs	r2, #0
 8016c10:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8016c12:	4b14      	ldr	r3, [pc, #80]	; (8016c64 <RegionEU868InitDefaults+0x128>)
 8016c14:	681b      	ldr	r3, [r3, #0]
 8016c16:	2200      	movs	r2, #0
 8016c18:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 8016c1a:	4b12      	ldr	r3, [pc, #72]	; (8016c64 <RegionEU868InitDefaults+0x128>)
 8016c1c:	681b      	ldr	r3, [r3, #0]
 8016c1e:	2200      	movs	r2, #0
 8016c20:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8016c22:	4b10      	ldr	r3, [pc, #64]	; (8016c64 <RegionEU868InitDefaults+0x128>)
 8016c24:	681b      	ldr	r3, [r3, #0]
 8016c26:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8016c2a:	4b0e      	ldr	r3, [pc, #56]	; (8016c64 <RegionEU868InitDefaults+0x128>)
 8016c2c:	681b      	ldr	r3, [r3, #0]
 8016c2e:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8016c32:	2201      	movs	r2, #1
 8016c34:	4619      	mov	r1, r3
 8016c36:	f7ff f841 	bl	8015cbc <RegionCommonChanMaskCopy>
            break;
 8016c3a:	e00f      	b.n	8016c5c <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8016c3c:	4b09      	ldr	r3, [pc, #36]	; (8016c64 <RegionEU868InitDefaults+0x128>)
 8016c3e:	681b      	ldr	r3, [r3, #0]
 8016c40:	f8b3 1360 	ldrh.w	r1, [r3, #864]	; 0x360
 8016c44:	4b07      	ldr	r3, [pc, #28]	; (8016c64 <RegionEU868InitDefaults+0x128>)
 8016c46:	681b      	ldr	r3, [r3, #0]
 8016c48:	f8b3 236c 	ldrh.w	r2, [r3, #876]	; 0x36c
 8016c4c:	4b05      	ldr	r3, [pc, #20]	; (8016c64 <RegionEU868InitDefaults+0x128>)
 8016c4e:	681b      	ldr	r3, [r3, #0]
 8016c50:	430a      	orrs	r2, r1
 8016c52:	b292      	uxth	r2, r2
 8016c54:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
            break;
 8016c58:	e000      	b.n	8016c5c <RegionEU868InitDefaults+0x120>
            break;
 8016c5a:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8016c5c:	37c0      	adds	r7, #192	; 0xc0
 8016c5e:	46bd      	mov	sp, r7
 8016c60:	bd80      	pop	{r7, pc}
 8016c62:	bf00      	nop
 8016c64:	20001ad0 	.word	0x20001ad0
 8016c68:	20001ad4 	.word	0x20001ad4
 8016c6c:	0801e3d8 	.word	0x0801e3d8
 8016c70:	0801e3e4 	.word	0x0801e3e4
 8016c74:	0801e3f0 	.word	0x0801e3f0

08016c78 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8016c78:	b580      	push	{r7, lr}
 8016c7a:	b084      	sub	sp, #16
 8016c7c:	af00      	add	r7, sp, #0
 8016c7e:	6078      	str	r0, [r7, #4]
 8016c80:	460b      	mov	r3, r1
 8016c82:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 8016c84:	78fb      	ldrb	r3, [r7, #3]
 8016c86:	2b0f      	cmp	r3, #15
 8016c88:	d86c      	bhi.n	8016d64 <RegionEU868Verify+0xec>
 8016c8a:	a201      	add	r2, pc, #4	; (adr r2, 8016c90 <RegionEU868Verify+0x18>)
 8016c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016c90:	08016cd1 	.word	0x08016cd1
 8016c94:	08016d65 	.word	0x08016d65
 8016c98:	08016d65 	.word	0x08016d65
 8016c9c:	08016d65 	.word	0x08016d65
 8016ca0:	08016d65 	.word	0x08016d65
 8016ca4:	08016ce9 	.word	0x08016ce9
 8016ca8:	08016d07 	.word	0x08016d07
 8016cac:	08016d25 	.word	0x08016d25
 8016cb0:	08016d65 	.word	0x08016d65
 8016cb4:	08016d43 	.word	0x08016d43
 8016cb8:	08016d43 	.word	0x08016d43
 8016cbc:	08016d65 	.word	0x08016d65
 8016cc0:	08016d65 	.word	0x08016d65
 8016cc4:	08016d65 	.word	0x08016d65
 8016cc8:	08016d65 	.word	0x08016d65
 8016ccc:	08016d61 	.word	0x08016d61
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8016cd0:	2300      	movs	r3, #0
 8016cd2:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	681b      	ldr	r3, [r3, #0]
 8016cd8:	f107 020f 	add.w	r2, r7, #15
 8016cdc:	4611      	mov	r1, r2
 8016cde:	4618      	mov	r0, r3
 8016ce0:	f7ff fcf4 	bl	80166cc <VerifyRfFreq>
 8016ce4:	4603      	mov	r3, r0
 8016ce6:	e03e      	b.n	8016d66 <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8016ce8:	687b      	ldr	r3, [r7, #4]
 8016cea:	f993 3000 	ldrsb.w	r3, [r3]
 8016cee:	2207      	movs	r2, #7
 8016cf0:	2100      	movs	r1, #0
 8016cf2:	4618      	mov	r0, r3
 8016cf4:	f7fe ff65 	bl	8015bc2 <RegionCommonValueInRange>
 8016cf8:	4603      	mov	r3, r0
 8016cfa:	2b00      	cmp	r3, #0
 8016cfc:	bf14      	ite	ne
 8016cfe:	2301      	movne	r3, #1
 8016d00:	2300      	moveq	r3, #0
 8016d02:	b2db      	uxtb	r3, r3
 8016d04:	e02f      	b.n	8016d66 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8016d06:	687b      	ldr	r3, [r7, #4]
 8016d08:	f993 3000 	ldrsb.w	r3, [r3]
 8016d0c:	2205      	movs	r2, #5
 8016d0e:	2100      	movs	r1, #0
 8016d10:	4618      	mov	r0, r3
 8016d12:	f7fe ff56 	bl	8015bc2 <RegionCommonValueInRange>
 8016d16:	4603      	mov	r3, r0
 8016d18:	2b00      	cmp	r3, #0
 8016d1a:	bf14      	ite	ne
 8016d1c:	2301      	movne	r3, #1
 8016d1e:	2300      	moveq	r3, #0
 8016d20:	b2db      	uxtb	r3, r3
 8016d22:	e020      	b.n	8016d66 <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8016d24:	687b      	ldr	r3, [r7, #4]
 8016d26:	f993 3000 	ldrsb.w	r3, [r3]
 8016d2a:	2207      	movs	r2, #7
 8016d2c:	2100      	movs	r1, #0
 8016d2e:	4618      	mov	r0, r3
 8016d30:	f7fe ff47 	bl	8015bc2 <RegionCommonValueInRange>
 8016d34:	4603      	mov	r3, r0
 8016d36:	2b00      	cmp	r3, #0
 8016d38:	bf14      	ite	ne
 8016d3a:	2301      	movne	r3, #1
 8016d3c:	2300      	moveq	r3, #0
 8016d3e:	b2db      	uxtb	r3, r3
 8016d40:	e011      	b.n	8016d66 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8016d42:	687b      	ldr	r3, [r7, #4]
 8016d44:	f993 3000 	ldrsb.w	r3, [r3]
 8016d48:	2207      	movs	r2, #7
 8016d4a:	2100      	movs	r1, #0
 8016d4c:	4618      	mov	r0, r3
 8016d4e:	f7fe ff38 	bl	8015bc2 <RegionCommonValueInRange>
 8016d52:	4603      	mov	r3, r0
 8016d54:	2b00      	cmp	r3, #0
 8016d56:	bf14      	ite	ne
 8016d58:	2301      	movne	r3, #1
 8016d5a:	2300      	moveq	r3, #0
 8016d5c:	b2db      	uxtb	r3, r3
 8016d5e:	e002      	b.n	8016d66 <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8016d60:	2301      	movs	r3, #1
 8016d62:	e000      	b.n	8016d66 <RegionEU868Verify+0xee>
        }
        default:
            return false;
 8016d64:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 8016d66:	4618      	mov	r0, r3
 8016d68:	3710      	adds	r7, #16
 8016d6a:	46bd      	mov	sp, r7
 8016d6c:	bd80      	pop	{r7, pc}
 8016d6e:	bf00      	nop

08016d70 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8016d70:	b580      	push	{r7, lr}
 8016d72:	b08a      	sub	sp, #40	; 0x28
 8016d74:	af00      	add	r7, sp, #0
 8016d76:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8016d78:	2350      	movs	r3, #80	; 0x50
 8016d7a:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8016d7e:	687b      	ldr	r3, [r7, #4]
 8016d80:	7a1b      	ldrb	r3, [r3, #8]
 8016d82:	2b10      	cmp	r3, #16
 8016d84:	d162      	bne.n	8016e4c <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8016d86:	687b      	ldr	r3, [r7, #4]
 8016d88:	685b      	ldr	r3, [r3, #4]
 8016d8a:	330f      	adds	r3, #15
 8016d8c:	781b      	ldrb	r3, [r3, #0]
 8016d8e:	2b00      	cmp	r3, #0
 8016d90:	d15e      	bne.n	8016e50 <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8016d92:	2300      	movs	r3, #0
 8016d94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016d98:	2303      	movs	r3, #3
 8016d9a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016d9e:	e050      	b.n	8016e42 <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8016da0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016da4:	2b07      	cmp	r3, #7
 8016da6:	d824      	bhi.n	8016df2 <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8016da8:	687b      	ldr	r3, [r7, #4]
 8016daa:	685a      	ldr	r2, [r3, #4]
 8016dac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016db0:	4413      	add	r3, r2
 8016db2:	781b      	ldrb	r3, [r3, #0]
 8016db4:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8016db6:	69ba      	ldr	r2, [r7, #24]
 8016db8:	687b      	ldr	r3, [r7, #4]
 8016dba:	6859      	ldr	r1, [r3, #4]
 8016dbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016dc0:	3301      	adds	r3, #1
 8016dc2:	440b      	add	r3, r1
 8016dc4:	781b      	ldrb	r3, [r3, #0]
 8016dc6:	021b      	lsls	r3, r3, #8
 8016dc8:	4313      	orrs	r3, r2
 8016dca:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8016dcc:	69ba      	ldr	r2, [r7, #24]
 8016dce:	687b      	ldr	r3, [r7, #4]
 8016dd0:	6859      	ldr	r1, [r3, #4]
 8016dd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016dd6:	3302      	adds	r3, #2
 8016dd8:	440b      	add	r3, r1
 8016dda:	781b      	ldrb	r3, [r3, #0]
 8016ddc:	041b      	lsls	r3, r3, #16
 8016dde:	4313      	orrs	r3, r2
 8016de0:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 8016de2:	69bb      	ldr	r3, [r7, #24]
 8016de4:	2264      	movs	r2, #100	; 0x64
 8016de6:	fb02 f303 	mul.w	r3, r2, r3
 8016dea:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8016dec:	2300      	movs	r3, #0
 8016dee:	61fb      	str	r3, [r7, #28]
 8016df0:	e006      	b.n	8016e00 <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 8016df2:	2300      	movs	r3, #0
 8016df4:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 8016df6:	2300      	movs	r3, #0
 8016df8:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8016dfc:	2300      	movs	r3, #0
 8016dfe:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8016e00:	69bb      	ldr	r3, [r7, #24]
 8016e02:	2b00      	cmp	r3, #0
 8016e04:	d00b      	beq.n	8016e1e <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 8016e06:	f107 0318 	add.w	r3, r7, #24
 8016e0a:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8016e0c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016e10:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 8016e12:	f107 0310 	add.w	r3, r7, #16
 8016e16:	4618      	mov	r0, r3
 8016e18:	f000 fd14 	bl	8017844 <RegionEU868ChannelAdd>
 8016e1c:	e007      	b.n	8016e2e <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8016e1e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016e22:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 8016e24:	f107 030c 	add.w	r3, r7, #12
 8016e28:	4618      	mov	r0, r3
 8016e2a:	f000 fdad 	bl	8017988 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8016e2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016e32:	3303      	adds	r3, #3
 8016e34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016e38:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016e3c:	3301      	adds	r3, #1
 8016e3e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016e42:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016e46:	2b0f      	cmp	r3, #15
 8016e48:	d9aa      	bls.n	8016da0 <RegionEU868ApplyCFList+0x30>
 8016e4a:	e002      	b.n	8016e52 <RegionEU868ApplyCFList+0xe2>
        return;
 8016e4c:	bf00      	nop
 8016e4e:	e000      	b.n	8016e52 <RegionEU868ApplyCFList+0xe2>
        return;
 8016e50:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8016e52:	3728      	adds	r7, #40	; 0x28
 8016e54:	46bd      	mov	sp, r7
 8016e56:	bd80      	pop	{r7, pc}

08016e58 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8016e58:	b580      	push	{r7, lr}
 8016e5a:	b082      	sub	sp, #8
 8016e5c:	af00      	add	r7, sp, #0
 8016e5e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 8016e60:	687b      	ldr	r3, [r7, #4]
 8016e62:	791b      	ldrb	r3, [r3, #4]
 8016e64:	2b00      	cmp	r3, #0
 8016e66:	d002      	beq.n	8016e6e <RegionEU868ChanMaskSet+0x16>
 8016e68:	2b01      	cmp	r3, #1
 8016e6a:	d00b      	beq.n	8016e84 <RegionEU868ChanMaskSet+0x2c>
 8016e6c:	e015      	b.n	8016e9a <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8016e6e:	4b0e      	ldr	r3, [pc, #56]	; (8016ea8 <RegionEU868ChanMaskSet+0x50>)
 8016e70:	681b      	ldr	r3, [r3, #0]
 8016e72:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8016e76:	687b      	ldr	r3, [r7, #4]
 8016e78:	681b      	ldr	r3, [r3, #0]
 8016e7a:	2201      	movs	r2, #1
 8016e7c:	4619      	mov	r1, r3
 8016e7e:	f7fe ff1d 	bl	8015cbc <RegionCommonChanMaskCopy>
            break;
 8016e82:	e00c      	b.n	8016e9e <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8016e84:	4b08      	ldr	r3, [pc, #32]	; (8016ea8 <RegionEU868ChanMaskSet+0x50>)
 8016e86:	681b      	ldr	r3, [r3, #0]
 8016e88:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 8016e8c:	687b      	ldr	r3, [r7, #4]
 8016e8e:	681b      	ldr	r3, [r3, #0]
 8016e90:	2201      	movs	r2, #1
 8016e92:	4619      	mov	r1, r3
 8016e94:	f7fe ff12 	bl	8015cbc <RegionCommonChanMaskCopy>
            break;
 8016e98:	e001      	b.n	8016e9e <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 8016e9a:	2300      	movs	r3, #0
 8016e9c:	e000      	b.n	8016ea0 <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 8016e9e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8016ea0:	4618      	mov	r0, r3
 8016ea2:	3708      	adds	r7, #8
 8016ea4:	46bd      	mov	sp, r7
 8016ea6:	bd80      	pop	{r7, pc}
 8016ea8:	20001ad0 	.word	0x20001ad0

08016eac <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8016eac:	b580      	push	{r7, lr}
 8016eae:	b088      	sub	sp, #32
 8016eb0:	af02      	add	r7, sp, #8
 8016eb2:	60ba      	str	r2, [r7, #8]
 8016eb4:	607b      	str	r3, [r7, #4]
 8016eb6:	4603      	mov	r3, r0
 8016eb8:	73fb      	strb	r3, [r7, #15]
 8016eba:	460b      	mov	r3, r1
 8016ebc:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 8016ebe:	2300      	movs	r3, #0
 8016ec0:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8016ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016ec6:	2b07      	cmp	r3, #7
 8016ec8:	bfa8      	it	ge
 8016eca:	2307      	movge	r3, #7
 8016ecc:	b25a      	sxtb	r2, r3
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016ed8:	491e      	ldr	r1, [pc, #120]	; (8016f54 <RegionEU868ComputeRxWindowParameters+0xa8>)
 8016eda:	4618      	mov	r0, r3
 8016edc:	f7ff fb8e 	bl	80165fc <RegionCommonGetBandwidth>
 8016ee0:	4603      	mov	r3, r0
 8016ee2:	b2da      	uxtb	r2, r3
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8016ee8:	687b      	ldr	r3, [r7, #4]
 8016eea:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016eee:	2b07      	cmp	r3, #7
 8016ef0:	d10a      	bne.n	8016f08 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 8016ef2:	687b      	ldr	r3, [r7, #4]
 8016ef4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016ef8:	461a      	mov	r2, r3
 8016efa:	4b17      	ldr	r3, [pc, #92]	; (8016f58 <RegionEU868ComputeRxWindowParameters+0xac>)
 8016efc:	5c9b      	ldrb	r3, [r3, r2]
 8016efe:	4618      	mov	r0, r3
 8016f00:	f7ff f910 	bl	8016124 <RegionCommonComputeSymbolTimeFsk>
 8016f04:	6178      	str	r0, [r7, #20]
 8016f06:	e011      	b.n	8016f2c <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016f0e:	461a      	mov	r2, r3
 8016f10:	4b11      	ldr	r3, [pc, #68]	; (8016f58 <RegionEU868ComputeRxWindowParameters+0xac>)
 8016f12:	5c9a      	ldrb	r2, [r3, r2]
 8016f14:	687b      	ldr	r3, [r7, #4]
 8016f16:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016f1a:	4619      	mov	r1, r3
 8016f1c:	4b0d      	ldr	r3, [pc, #52]	; (8016f54 <RegionEU868ComputeRxWindowParameters+0xa8>)
 8016f1e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016f22:	4619      	mov	r1, r3
 8016f24:	4610      	mov	r0, r2
 8016f26:	f7ff f8e7 	bl	80160f8 <RegionCommonComputeSymbolTimeLoRa>
 8016f2a:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8016f2c:	4b0b      	ldr	r3, [pc, #44]	; (8016f5c <RegionEU868ComputeRxWindowParameters+0xb0>)
 8016f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016f30:	4798      	blx	r3
 8016f32:	687b      	ldr	r3, [r7, #4]
 8016f34:	3308      	adds	r3, #8
 8016f36:	687a      	ldr	r2, [r7, #4]
 8016f38:	320c      	adds	r2, #12
 8016f3a:	7bb9      	ldrb	r1, [r7, #14]
 8016f3c:	9201      	str	r2, [sp, #4]
 8016f3e:	9300      	str	r3, [sp, #0]
 8016f40:	4603      	mov	r3, r0
 8016f42:	68ba      	ldr	r2, [r7, #8]
 8016f44:	6978      	ldr	r0, [r7, #20]
 8016f46:	f7ff f8fd 	bl	8016144 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 8016f4a:	bf00      	nop
 8016f4c:	3718      	adds	r7, #24
 8016f4e:	46bd      	mov	sp, r7
 8016f50:	bd80      	pop	{r7, pc}
 8016f52:	bf00      	nop
 8016f54:	0801e9b0 	.word	0x0801e9b0
 8016f58:	0801e9a8 	.word	0x0801e9a8
 8016f5c:	0801ea64 	.word	0x0801ea64

08016f60 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8016f60:	b5b0      	push	{r4, r5, r7, lr}
 8016f62:	b090      	sub	sp, #64	; 0x40
 8016f64:	af0a      	add	r7, sp, #40	; 0x28
 8016f66:	6078      	str	r0, [r7, #4]
 8016f68:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8016f6a:	687b      	ldr	r3, [r7, #4]
 8016f6c:	785b      	ldrb	r3, [r3, #1]
 8016f6e:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8016f70:	2300      	movs	r3, #0
 8016f72:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8016f74:	2300      	movs	r3, #0
 8016f76:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8016f78:	687b      	ldr	r3, [r7, #4]
 8016f7a:	685b      	ldr	r3, [r3, #4]
 8016f7c:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8016f7e:	4b5a      	ldr	r3, [pc, #360]	; (80170e8 <RegionEU868RxConfig+0x188>)
 8016f80:	685b      	ldr	r3, [r3, #4]
 8016f82:	4798      	blx	r3
 8016f84:	4603      	mov	r3, r0
 8016f86:	2b00      	cmp	r3, #0
 8016f88:	d001      	beq.n	8016f8e <RegionEU868RxConfig+0x2e>
    {
        return false;
 8016f8a:	2300      	movs	r3, #0
 8016f8c:	e0a8      	b.n	80170e0 <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8016f8e:	687b      	ldr	r3, [r7, #4]
 8016f90:	7cdb      	ldrb	r3, [r3, #19]
 8016f92:	2b00      	cmp	r3, #0
 8016f94:	d126      	bne.n	8016fe4 <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8016f96:	4b55      	ldr	r3, [pc, #340]	; (80170ec <RegionEU868RxConfig+0x18c>)
 8016f98:	681a      	ldr	r2, [r3, #0]
 8016f9a:	687b      	ldr	r3, [r7, #4]
 8016f9c:	781b      	ldrb	r3, [r3, #0]
 8016f9e:	4619      	mov	r1, r3
 8016fa0:	460b      	mov	r3, r1
 8016fa2:	005b      	lsls	r3, r3, #1
 8016fa4:	440b      	add	r3, r1
 8016fa6:	009b      	lsls	r3, r3, #2
 8016fa8:	4413      	add	r3, r2
 8016faa:	681b      	ldr	r3, [r3, #0]
 8016fac:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8016fae:	4b4f      	ldr	r3, [pc, #316]	; (80170ec <RegionEU868RxConfig+0x18c>)
 8016fb0:	681a      	ldr	r2, [r3, #0]
 8016fb2:	687b      	ldr	r3, [r7, #4]
 8016fb4:	781b      	ldrb	r3, [r3, #0]
 8016fb6:	4619      	mov	r1, r3
 8016fb8:	460b      	mov	r3, r1
 8016fba:	005b      	lsls	r3, r3, #1
 8016fbc:	440b      	add	r3, r1
 8016fbe:	009b      	lsls	r3, r3, #2
 8016fc0:	4413      	add	r3, r2
 8016fc2:	3304      	adds	r3, #4
 8016fc4:	681b      	ldr	r3, [r3, #0]
 8016fc6:	2b00      	cmp	r3, #0
 8016fc8:	d00c      	beq.n	8016fe4 <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 8016fca:	4b48      	ldr	r3, [pc, #288]	; (80170ec <RegionEU868RxConfig+0x18c>)
 8016fcc:	681a      	ldr	r2, [r3, #0]
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	781b      	ldrb	r3, [r3, #0]
 8016fd2:	4619      	mov	r1, r3
 8016fd4:	460b      	mov	r3, r1
 8016fd6:	005b      	lsls	r3, r3, #1
 8016fd8:	440b      	add	r3, r1
 8016fda:	009b      	lsls	r3, r3, #2
 8016fdc:	4413      	add	r3, r2
 8016fde:	3304      	adds	r3, #4
 8016fe0:	681b      	ldr	r3, [r3, #0]
 8016fe2:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8016fe4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016fe8:	4a41      	ldr	r2, [pc, #260]	; (80170f0 <RegionEU868RxConfig+0x190>)
 8016fea:	5cd3      	ldrb	r3, [r2, r3]
 8016fec:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8016fee:	4b3e      	ldr	r3, [pc, #248]	; (80170e8 <RegionEU868RxConfig+0x188>)
 8016ff0:	68db      	ldr	r3, [r3, #12]
 8016ff2:	6938      	ldr	r0, [r7, #16]
 8016ff4:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8016ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016ffa:	2b07      	cmp	r3, #7
 8016ffc:	d128      	bne.n	8017050 <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 8016ffe:	2300      	movs	r3, #0
 8017000:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8017002:	4b39      	ldr	r3, [pc, #228]	; (80170e8 <RegionEU868RxConfig+0x188>)
 8017004:	699c      	ldr	r4, [r3, #24]
 8017006:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801700a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801700e:	fb02 f303 	mul.w	r3, r2, r3
 8017012:	4619      	mov	r1, r3
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	689b      	ldr	r3, [r3, #8]
 8017018:	b29b      	uxth	r3, r3
 801701a:	687a      	ldr	r2, [r7, #4]
 801701c:	7c92      	ldrb	r2, [r2, #18]
 801701e:	7df8      	ldrb	r0, [r7, #23]
 8017020:	9209      	str	r2, [sp, #36]	; 0x24
 8017022:	2200      	movs	r2, #0
 8017024:	9208      	str	r2, [sp, #32]
 8017026:	2200      	movs	r2, #0
 8017028:	9207      	str	r2, [sp, #28]
 801702a:	2200      	movs	r2, #0
 801702c:	9206      	str	r2, [sp, #24]
 801702e:	2201      	movs	r2, #1
 8017030:	9205      	str	r2, [sp, #20]
 8017032:	2200      	movs	r2, #0
 8017034:	9204      	str	r2, [sp, #16]
 8017036:	2200      	movs	r2, #0
 8017038:	9203      	str	r2, [sp, #12]
 801703a:	9302      	str	r3, [sp, #8]
 801703c:	2305      	movs	r3, #5
 801703e:	9301      	str	r3, [sp, #4]
 8017040:	4b2c      	ldr	r3, [pc, #176]	; (80170f4 <RegionEU868RxConfig+0x194>)
 8017042:	9300      	str	r3, [sp, #0]
 8017044:	2300      	movs	r3, #0
 8017046:	460a      	mov	r2, r1
 8017048:	f24c 3150 	movw	r1, #50000	; 0xc350
 801704c:	47a0      	blx	r4
 801704e:	e024      	b.n	801709a <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 8017050:	2301      	movs	r3, #1
 8017052:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8017054:	4b24      	ldr	r3, [pc, #144]	; (80170e8 <RegionEU868RxConfig+0x188>)
 8017056:	699c      	ldr	r4, [r3, #24]
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	789b      	ldrb	r3, [r3, #2]
 801705c:	461d      	mov	r5, r3
 801705e:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8017062:	687b      	ldr	r3, [r7, #4]
 8017064:	689b      	ldr	r3, [r3, #8]
 8017066:	b29b      	uxth	r3, r3
 8017068:	687a      	ldr	r2, [r7, #4]
 801706a:	7c92      	ldrb	r2, [r2, #18]
 801706c:	7df8      	ldrb	r0, [r7, #23]
 801706e:	9209      	str	r2, [sp, #36]	; 0x24
 8017070:	2201      	movs	r2, #1
 8017072:	9208      	str	r2, [sp, #32]
 8017074:	2200      	movs	r2, #0
 8017076:	9207      	str	r2, [sp, #28]
 8017078:	2200      	movs	r2, #0
 801707a:	9206      	str	r2, [sp, #24]
 801707c:	2200      	movs	r2, #0
 801707e:	9205      	str	r2, [sp, #20]
 8017080:	2200      	movs	r2, #0
 8017082:	9204      	str	r2, [sp, #16]
 8017084:	2200      	movs	r2, #0
 8017086:	9203      	str	r2, [sp, #12]
 8017088:	9302      	str	r3, [sp, #8]
 801708a:	2308      	movs	r3, #8
 801708c:	9301      	str	r3, [sp, #4]
 801708e:	2300      	movs	r3, #0
 8017090:	9300      	str	r3, [sp, #0]
 8017092:	2301      	movs	r3, #1
 8017094:	460a      	mov	r2, r1
 8017096:	4629      	mov	r1, r5
 8017098:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 801709a:	687b      	ldr	r3, [r7, #4]
 801709c:	7c5b      	ldrb	r3, [r3, #17]
 801709e:	2b00      	cmp	r3, #0
 80170a0:	d005      	beq.n	80170ae <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 80170a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80170a6:	4a14      	ldr	r2, [pc, #80]	; (80170f8 <RegionEU868RxConfig+0x198>)
 80170a8:	5cd3      	ldrb	r3, [r2, r3]
 80170aa:	75bb      	strb	r3, [r7, #22]
 80170ac:	e004      	b.n	80170b8 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 80170ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80170b2:	4a12      	ldr	r2, [pc, #72]	; (80170fc <RegionEU868RxConfig+0x19c>)
 80170b4:	5cd3      	ldrb	r3, [r2, r3]
 80170b6:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 80170b8:	4b0b      	ldr	r3, [pc, #44]	; (80170e8 <RegionEU868RxConfig+0x188>)
 80170ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80170bc:	7dba      	ldrb	r2, [r7, #22]
 80170be:	320d      	adds	r2, #13
 80170c0:	b2d1      	uxtb	r1, r2
 80170c2:	7dfa      	ldrb	r2, [r7, #23]
 80170c4:	4610      	mov	r0, r2
 80170c6:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 80170c8:	687b      	ldr	r3, [r7, #4]
 80170ca:	7cdb      	ldrb	r3, [r3, #19]
 80170cc:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80170d0:	6939      	ldr	r1, [r7, #16]
 80170d2:	4618      	mov	r0, r3
 80170d4:	f7ff fab0 	bl	8016638 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 80170d8:	683b      	ldr	r3, [r7, #0]
 80170da:	7bfa      	ldrb	r2, [r7, #15]
 80170dc:	701a      	strb	r2, [r3, #0]
    return true;
 80170de:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 80170e0:	4618      	mov	r0, r3
 80170e2:	3718      	adds	r7, #24
 80170e4:	46bd      	mov	sp, r7
 80170e6:	bdb0      	pop	{r4, r5, r7, pc}
 80170e8:	0801ea64 	.word	0x0801ea64
 80170ec:	20001ad0 	.word	0x20001ad0
 80170f0:	0801e9a8 	.word	0x0801e9a8
 80170f4:	00014585 	.word	0x00014585
 80170f8:	0801e9d8 	.word	0x0801e9d8
 80170fc:	0801e9d0 	.word	0x0801e9d0

08017100 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8017100:	b590      	push	{r4, r7, lr}
 8017102:	b093      	sub	sp, #76	; 0x4c
 8017104:	af0a      	add	r7, sp, #40	; 0x28
 8017106:	60f8      	str	r0, [r7, #12]
 8017108:	60b9      	str	r1, [r7, #8]
 801710a:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 801710c:	68fb      	ldr	r3, [r7, #12]
 801710e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017112:	461a      	mov	r2, r3
 8017114:	4b5d      	ldr	r3, [pc, #372]	; (801728c <RegionEU868TxConfig+0x18c>)
 8017116:	5c9b      	ldrb	r3, [r3, r2]
 8017118:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 801711a:	68fb      	ldr	r3, [r7, #12]
 801711c:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8017120:	4b5b      	ldr	r3, [pc, #364]	; (8017290 <RegionEU868TxConfig+0x190>)
 8017122:	681a      	ldr	r2, [r3, #0]
 8017124:	4b5b      	ldr	r3, [pc, #364]	; (8017294 <RegionEU868TxConfig+0x194>)
 8017126:	6819      	ldr	r1, [r3, #0]
 8017128:	68fb      	ldr	r3, [r7, #12]
 801712a:	781b      	ldrb	r3, [r3, #0]
 801712c:	461c      	mov	r4, r3
 801712e:	4623      	mov	r3, r4
 8017130:	005b      	lsls	r3, r3, #1
 8017132:	4423      	add	r3, r4
 8017134:	009b      	lsls	r3, r3, #2
 8017136:	440b      	add	r3, r1
 8017138:	3309      	adds	r3, #9
 801713a:	781b      	ldrb	r3, [r3, #0]
 801713c:	4619      	mov	r1, r3
 801713e:	460b      	mov	r3, r1
 8017140:	005b      	lsls	r3, r3, #1
 8017142:	440b      	add	r3, r1
 8017144:	00db      	lsls	r3, r3, #3
 8017146:	4413      	add	r3, r2
 8017148:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801714c:	4619      	mov	r1, r3
 801714e:	f7ff fa40 	bl	80165d2 <RegionCommonLimitTxPower>
 8017152:	4603      	mov	r3, r0
 8017154:	777b      	strb	r3, [r7, #29]
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8017156:	68fb      	ldr	r3, [r7, #12]
 8017158:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801715c:	494e      	ldr	r1, [pc, #312]	; (8017298 <RegionEU868TxConfig+0x198>)
 801715e:	4618      	mov	r0, r3
 8017160:	f7ff fa4c 	bl	80165fc <RegionCommonGetBandwidth>
 8017164:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8017166:	2300      	movs	r3, #0
 8017168:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 801716a:	68fb      	ldr	r3, [r7, #12]
 801716c:	6859      	ldr	r1, [r3, #4]
 801716e:	68fb      	ldr	r3, [r7, #12]
 8017170:	689a      	ldr	r2, [r3, #8]
 8017172:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8017176:	4618      	mov	r0, r3
 8017178:	f7ff f89c 	bl	80162b4 <RegionCommonComputeTxPower>
 801717c:	4603      	mov	r3, r0
 801717e:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8017180:	4b46      	ldr	r3, [pc, #280]	; (801729c <RegionEU868TxConfig+0x19c>)
 8017182:	68da      	ldr	r2, [r3, #12]
 8017184:	4b43      	ldr	r3, [pc, #268]	; (8017294 <RegionEU868TxConfig+0x194>)
 8017186:	6819      	ldr	r1, [r3, #0]
 8017188:	68fb      	ldr	r3, [r7, #12]
 801718a:	781b      	ldrb	r3, [r3, #0]
 801718c:	4618      	mov	r0, r3
 801718e:	4603      	mov	r3, r0
 8017190:	005b      	lsls	r3, r3, #1
 8017192:	4403      	add	r3, r0
 8017194:	009b      	lsls	r3, r3, #2
 8017196:	440b      	add	r3, r1
 8017198:	681b      	ldr	r3, [r3, #0]
 801719a:	4618      	mov	r0, r3
 801719c:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 801719e:	68fb      	ldr	r3, [r7, #12]
 80171a0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80171a4:	2b07      	cmp	r3, #7
 80171a6:	d124      	bne.n	80171f2 <RegionEU868TxConfig+0xf2>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 80171a8:	2300      	movs	r3, #0
 80171aa:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 80171ac:	4b3b      	ldr	r3, [pc, #236]	; (801729c <RegionEU868TxConfig+0x19c>)
 80171ae:	69dc      	ldr	r4, [r3, #28]
 80171b0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80171b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80171b8:	fb02 f303 	mul.w	r3, r2, r3
 80171bc:	461a      	mov	r2, r3
 80171be:	f997 1017 	ldrsb.w	r1, [r7, #23]
 80171c2:	7ff8      	ldrb	r0, [r7, #31]
 80171c4:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80171c8:	9308      	str	r3, [sp, #32]
 80171ca:	2300      	movs	r3, #0
 80171cc:	9307      	str	r3, [sp, #28]
 80171ce:	2300      	movs	r3, #0
 80171d0:	9306      	str	r3, [sp, #24]
 80171d2:	2300      	movs	r3, #0
 80171d4:	9305      	str	r3, [sp, #20]
 80171d6:	2301      	movs	r3, #1
 80171d8:	9304      	str	r3, [sp, #16]
 80171da:	2300      	movs	r3, #0
 80171dc:	9303      	str	r3, [sp, #12]
 80171de:	2305      	movs	r3, #5
 80171e0:	9302      	str	r3, [sp, #8]
 80171e2:	2300      	movs	r3, #0
 80171e4:	9301      	str	r3, [sp, #4]
 80171e6:	9200      	str	r2, [sp, #0]
 80171e8:	69bb      	ldr	r3, [r7, #24]
 80171ea:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80171ee:	47a0      	blx	r4
 80171f0:	e01d      	b.n	801722e <RegionEU868TxConfig+0x12e>
    }
    else
    {
        modem = MODEM_LORA;
 80171f2:	2301      	movs	r3, #1
 80171f4:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 80171f6:	4b29      	ldr	r3, [pc, #164]	; (801729c <RegionEU868TxConfig+0x19c>)
 80171f8:	69dc      	ldr	r4, [r3, #28]
 80171fa:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80171fe:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8017202:	7ff8      	ldrb	r0, [r7, #31]
 8017204:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8017208:	9208      	str	r2, [sp, #32]
 801720a:	2200      	movs	r2, #0
 801720c:	9207      	str	r2, [sp, #28]
 801720e:	2200      	movs	r2, #0
 8017210:	9206      	str	r2, [sp, #24]
 8017212:	2200      	movs	r2, #0
 8017214:	9205      	str	r2, [sp, #20]
 8017216:	2201      	movs	r2, #1
 8017218:	9204      	str	r2, [sp, #16]
 801721a:	2200      	movs	r2, #0
 801721c:	9203      	str	r2, [sp, #12]
 801721e:	2208      	movs	r2, #8
 8017220:	9202      	str	r2, [sp, #8]
 8017222:	2201      	movs	r2, #1
 8017224:	9201      	str	r2, [sp, #4]
 8017226:	9300      	str	r3, [sp, #0]
 8017228:	69bb      	ldr	r3, [r7, #24]
 801722a:	2200      	movs	r2, #0
 801722c:	47a0      	blx	r4
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 801722e:	4b19      	ldr	r3, [pc, #100]	; (8017294 <RegionEU868TxConfig+0x194>)
 8017230:	681a      	ldr	r2, [r3, #0]
 8017232:	68fb      	ldr	r3, [r7, #12]
 8017234:	781b      	ldrb	r3, [r3, #0]
 8017236:	4619      	mov	r1, r3
 8017238:	460b      	mov	r3, r1
 801723a:	005b      	lsls	r3, r3, #1
 801723c:	440b      	add	r3, r1
 801723e:	009b      	lsls	r3, r3, #2
 8017240:	4413      	add	r3, r2
 8017242:	681a      	ldr	r2, [r3, #0]
 8017244:	68fb      	ldr	r3, [r7, #12]
 8017246:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801724a:	4619      	mov	r1, r3
 801724c:	4610      	mov	r0, r2
 801724e:	f7ff fa25 	bl	801669c <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8017252:	68fb      	ldr	r3, [r7, #12]
 8017254:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8017258:	68fb      	ldr	r3, [r7, #12]
 801725a:	899b      	ldrh	r3, [r3, #12]
 801725c:	4619      	mov	r1, r3
 801725e:	4610      	mov	r0, r2
 8017260:	f7ff faaa 	bl	80167b8 <GetTimeOnAir>
 8017264:	4602      	mov	r2, r0
 8017266:	687b      	ldr	r3, [r7, #4]
 8017268:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 801726a:	4b0c      	ldr	r3, [pc, #48]	; (801729c <RegionEU868TxConfig+0x19c>)
 801726c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801726e:	68fa      	ldr	r2, [r7, #12]
 8017270:	8992      	ldrh	r2, [r2, #12]
 8017272:	b2d1      	uxtb	r1, r2
 8017274:	7ffa      	ldrb	r2, [r7, #31]
 8017276:	4610      	mov	r0, r2
 8017278:	4798      	blx	r3

    *txPower = txPowerLimited;
 801727a:	68bb      	ldr	r3, [r7, #8]
 801727c:	7f7a      	ldrb	r2, [r7, #29]
 801727e:	701a      	strb	r2, [r3, #0]
    return true;
 8017280:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8017282:	4618      	mov	r0, r3
 8017284:	3724      	adds	r7, #36	; 0x24
 8017286:	46bd      	mov	sp, r7
 8017288:	bd90      	pop	{r4, r7, pc}
 801728a:	bf00      	nop
 801728c:	0801e9a8 	.word	0x0801e9a8
 8017290:	20001ad4 	.word	0x20001ad4
 8017294:	20001ad0 	.word	0x20001ad0
 8017298:	0801e9b0 	.word	0x0801e9b0
 801729c:	0801ea64 	.word	0x0801ea64

080172a0 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80172a0:	b590      	push	{r4, r7, lr}
 80172a2:	b093      	sub	sp, #76	; 0x4c
 80172a4:	af00      	add	r7, sp, #0
 80172a6:	60f8      	str	r0, [r7, #12]
 80172a8:	60b9      	str	r1, [r7, #8]
 80172aa:	607a      	str	r2, [r7, #4]
 80172ac:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 80172ae:	2307      	movs	r3, #7
 80172b0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 80172b4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80172b8:	2200      	movs	r2, #0
 80172ba:	601a      	str	r2, [r3, #0]
 80172bc:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 80172be:	2300      	movs	r3, #0
 80172c0:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t bytesProcessed = 0;
 80172c4:	2300      	movs	r3, #0
 80172c6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint16_t chMask = 0;
 80172ca:	2300      	movs	r3, #0
 80172cc:	877b      	strh	r3, [r7, #58]	; 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 80172ce:	e085      	b.n	80173dc <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 80172d0:	68fb      	ldr	r3, [r7, #12]
 80172d2:	685a      	ldr	r2, [r3, #4]
 80172d4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80172d8:	4413      	add	r3, r2
 80172da:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80172de:	4611      	mov	r1, r2
 80172e0:	4618      	mov	r0, r3
 80172e2:	f7fe fe2f 	bl	8015f44 <RegionCommonParseLinkAdrReq>
 80172e6:	4603      	mov	r3, r0
 80172e8:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

        if( nextIndex == 0 )
 80172ec:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80172f0:	2b00      	cmp	r3, #0
 80172f2:	d07b      	beq.n	80173ec <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 80172f4:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80172f8:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80172fc:	4413      	add	r3, r2
 80172fe:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8017302:	2307      	movs	r3, #7
 8017304:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8017308:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801730c:	877b      	strh	r3, [r7, #58]	; 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 801730e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8017312:	2b00      	cmp	r3, #0
 8017314:	d109      	bne.n	801732a <RegionEU868LinkAdrReq+0x8a>
 8017316:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017318:	2b00      	cmp	r3, #0
 801731a:	d106      	bne.n	801732a <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 801731c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8017320:	f023 0301 	bic.w	r3, r3, #1
 8017324:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8017328:	e058      	b.n	80173dc <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 801732a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801732e:	2b00      	cmp	r3, #0
 8017330:	d003      	beq.n	801733a <RegionEU868LinkAdrReq+0x9a>
 8017332:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8017336:	2b05      	cmp	r3, #5
 8017338:	d903      	bls.n	8017342 <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 801733a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 801733e:	2b06      	cmp	r3, #6
 8017340:	d906      	bls.n	8017350 <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8017342:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8017346:	f023 0301 	bic.w	r3, r3, #1
 801734a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801734e:	e045      	b.n	80173dc <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8017350:	2300      	movs	r3, #0
 8017352:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8017356:	e03d      	b.n	80173d4 <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8017358:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801735c:	2b06      	cmp	r3, #6
 801735e:	d118      	bne.n	8017392 <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8017360:	4b5f      	ldr	r3, [pc, #380]	; (80174e0 <RegionEU868LinkAdrReq+0x240>)
 8017362:	6819      	ldr	r1, [r3, #0]
 8017364:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8017368:	4613      	mov	r3, r2
 801736a:	005b      	lsls	r3, r3, #1
 801736c:	4413      	add	r3, r2
 801736e:	009b      	lsls	r3, r3, #2
 8017370:	440b      	add	r3, r1
 8017372:	681b      	ldr	r3, [r3, #0]
 8017374:	2b00      	cmp	r3, #0
 8017376:	d028      	beq.n	80173ca <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 8017378:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801737c:	2201      	movs	r2, #1
 801737e:	fa02 f303 	lsl.w	r3, r2, r3
 8017382:	b21a      	sxth	r2, r3
 8017384:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017386:	b21b      	sxth	r3, r3
 8017388:	4313      	orrs	r3, r2
 801738a:	b21b      	sxth	r3, r3
 801738c:	b29b      	uxth	r3, r3
 801738e:	877b      	strh	r3, [r7, #58]	; 0x3a
 8017390:	e01b      	b.n	80173ca <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8017392:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017394:	461a      	mov	r2, r3
 8017396:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801739a:	fa42 f303 	asr.w	r3, r2, r3
 801739e:	f003 0301 	and.w	r3, r3, #1
 80173a2:	2b00      	cmp	r3, #0
 80173a4:	d011      	beq.n	80173ca <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 80173a6:	4b4e      	ldr	r3, [pc, #312]	; (80174e0 <RegionEU868LinkAdrReq+0x240>)
 80173a8:	6819      	ldr	r1, [r3, #0]
 80173aa:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80173ae:	4613      	mov	r3, r2
 80173b0:	005b      	lsls	r3, r3, #1
 80173b2:	4413      	add	r3, r2
 80173b4:	009b      	lsls	r3, r3, #2
 80173b6:	440b      	add	r3, r1
 80173b8:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80173ba:	2b00      	cmp	r3, #0
 80173bc:	d105      	bne.n	80173ca <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 80173be:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80173c2:	f023 0301 	bic.w	r3, r3, #1
 80173c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 80173ca:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80173ce:	3301      	adds	r3, #1
 80173d0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80173d4:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80173d8:	2b0f      	cmp	r3, #15
 80173da:	d9bd      	bls.n	8017358 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 80173dc:	68fb      	ldr	r3, [r7, #12]
 80173de:	7a1b      	ldrb	r3, [r3, #8]
 80173e0:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80173e4:	429a      	cmp	r2, r3
 80173e6:	f4ff af73 	bcc.w	80172d0 <RegionEU868LinkAdrReq+0x30>
 80173ea:	e000      	b.n	80173ee <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 80173ec:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 80173ee:	2302      	movs	r3, #2
 80173f0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 80173f4:	68fb      	ldr	r3, [r7, #12]
 80173f6:	7a5b      	ldrb	r3, [r3, #9]
 80173f8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 80173fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8017400:	4618      	mov	r0, r3
 8017402:	f7ff fa29 	bl	8016858 <RegionEU868GetPhyParam>
 8017406:	4603      	mov	r3, r0
 8017408:	633b      	str	r3, [r7, #48]	; 0x30

    linkAdrVerifyParams.Status = status;
 801740a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801740e:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8017410:	68fb      	ldr	r3, [r7, #12]
 8017412:	7a9b      	ldrb	r3, [r3, #10]
 8017414:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8017416:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 801741a:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 801741c:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8017420:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8017422:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8017426:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8017428:	68fb      	ldr	r3, [r7, #12]
 801742a:	f993 300b 	ldrsb.w	r3, [r3, #11]
 801742e:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8017430:	68fb      	ldr	r3, [r7, #12]
 8017432:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8017436:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8017438:	68fb      	ldr	r3, [r7, #12]
 801743a:	7b5b      	ldrb	r3, [r3, #13]
 801743c:	b25b      	sxtb	r3, r3
 801743e:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8017440:	2310      	movs	r3, #16
 8017442:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8017444:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8017448:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 801744a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801744c:	b25b      	sxtb	r3, r3
 801744e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 8017452:	2307      	movs	r3, #7
 8017454:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8017458:	4b21      	ldr	r3, [pc, #132]	; (80174e0 <RegionEU868LinkAdrReq+0x240>)
 801745a:	681b      	ldr	r3, [r3, #0]
 801745c:	62bb      	str	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 801745e:	2307      	movs	r3, #7
 8017460:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8017464:	2300      	movs	r3, #0
 8017466:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 801746a:	68fb      	ldr	r3, [r7, #12]
 801746c:	681b      	ldr	r3, [r3, #0]
 801746e:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8017470:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8017474:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8017478:	1c9a      	adds	r2, r3, #2
 801747a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801747e:	1c59      	adds	r1, r3, #1
 8017480:	f107 0010 	add.w	r0, r7, #16
 8017484:	4623      	mov	r3, r4
 8017486:	f7fe fdae 	bl	8015fe6 <RegionCommonLinkAdrReqVerifyParams>
 801748a:	4603      	mov	r3, r0
 801748c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8017490:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8017494:	2b07      	cmp	r3, #7
 8017496:	d10d      	bne.n	80174b4 <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8017498:	4b11      	ldr	r3, [pc, #68]	; (80174e0 <RegionEU868LinkAdrReq+0x240>)
 801749a:	681b      	ldr	r3, [r3, #0]
 801749c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80174a0:	220c      	movs	r2, #12
 80174a2:	2100      	movs	r1, #0
 80174a4:	4618      	mov	r0, r3
 80174a6:	f001 fd31 	bl	8018f0c <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 80174aa:	4b0d      	ldr	r3, [pc, #52]	; (80174e0 <RegionEU868LinkAdrReq+0x240>)
 80174ac:	681b      	ldr	r3, [r3, #0]
 80174ae:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80174b0:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 80174b4:	f997 203d 	ldrsb.w	r2, [r7, #61]	; 0x3d
 80174b8:	68bb      	ldr	r3, [r7, #8]
 80174ba:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 80174bc:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 80174c0:	687b      	ldr	r3, [r7, #4]
 80174c2:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 80174c4:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80174c8:	683b      	ldr	r3, [r7, #0]
 80174ca:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 80174cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80174ce:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80174d2:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 80174d4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80174d8:	4618      	mov	r0, r3
 80174da:	374c      	adds	r7, #76	; 0x4c
 80174dc:	46bd      	mov	sp, r7
 80174de:	bd90      	pop	{r4, r7, pc}
 80174e0:	20001ad0 	.word	0x20001ad0

080174e4 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 80174e4:	b580      	push	{r7, lr}
 80174e6:	b084      	sub	sp, #16
 80174e8:	af00      	add	r7, sp, #0
 80174ea:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 80174ec:	2307      	movs	r3, #7
 80174ee:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 80174f0:	2300      	movs	r3, #0
 80174f2:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 80174f4:	687b      	ldr	r3, [r7, #4]
 80174f6:	685b      	ldr	r3, [r3, #4]
 80174f8:	f107 020e 	add.w	r2, r7, #14
 80174fc:	4611      	mov	r1, r2
 80174fe:	4618      	mov	r0, r3
 8017500:	f7ff f8e4 	bl	80166cc <VerifyRfFreq>
 8017504:	4603      	mov	r3, r0
 8017506:	f083 0301 	eor.w	r3, r3, #1
 801750a:	b2db      	uxtb	r3, r3
 801750c:	2b00      	cmp	r3, #0
 801750e:	d003      	beq.n	8017518 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 8017510:	7bfb      	ldrb	r3, [r7, #15]
 8017512:	f023 0301 	bic.w	r3, r3, #1
 8017516:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8017518:	687b      	ldr	r3, [r7, #4]
 801751a:	f993 3000 	ldrsb.w	r3, [r3]
 801751e:	2207      	movs	r2, #7
 8017520:	2100      	movs	r1, #0
 8017522:	4618      	mov	r0, r3
 8017524:	f7fe fb4d 	bl	8015bc2 <RegionCommonValueInRange>
 8017528:	4603      	mov	r3, r0
 801752a:	2b00      	cmp	r3, #0
 801752c:	d103      	bne.n	8017536 <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 801752e:	7bfb      	ldrb	r3, [r7, #15]
 8017530:	f023 0302 	bic.w	r3, r3, #2
 8017534:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8017536:	687b      	ldr	r3, [r7, #4]
 8017538:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801753c:	2205      	movs	r2, #5
 801753e:	2100      	movs	r1, #0
 8017540:	4618      	mov	r0, r3
 8017542:	f7fe fb3e 	bl	8015bc2 <RegionCommonValueInRange>
 8017546:	4603      	mov	r3, r0
 8017548:	2b00      	cmp	r3, #0
 801754a:	d103      	bne.n	8017554 <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 801754c:	7bfb      	ldrb	r3, [r7, #15]
 801754e:	f023 0304 	bic.w	r3, r3, #4
 8017552:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 8017554:	7bfb      	ldrb	r3, [r7, #15]
}
 8017556:	4618      	mov	r0, r3
 8017558:	3710      	adds	r7, #16
 801755a:	46bd      	mov	sp, r7
 801755c:	bd80      	pop	{r7, pc}
	...

08017560 <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8017560:	b580      	push	{r7, lr}
 8017562:	b086      	sub	sp, #24
 8017564:	af00      	add	r7, sp, #0
 8017566:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8017568:	2303      	movs	r3, #3
 801756a:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 801756c:	687b      	ldr	r3, [r7, #4]
 801756e:	681b      	ldr	r3, [r3, #0]
 8017570:	681b      	ldr	r3, [r3, #0]
 8017572:	2b00      	cmp	r3, #0
 8017574:	d114      	bne.n	80175a0 <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8017576:	687b      	ldr	r3, [r7, #4]
 8017578:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801757c:	b2db      	uxtb	r3, r3
 801757e:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8017580:	f107 0308 	add.w	r3, r7, #8
 8017584:	4618      	mov	r0, r3
 8017586:	f000 f9ff 	bl	8017988 <RegionEU868ChannelsRemove>
 801758a:	4603      	mov	r3, r0
 801758c:	f083 0301 	eor.w	r3, r3, #1
 8017590:	b2db      	uxtb	r3, r3
 8017592:	2b00      	cmp	r3, #0
 8017594:	d03b      	beq.n	801760e <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 8017596:	7dfb      	ldrb	r3, [r7, #23]
 8017598:	f023 0303 	bic.w	r3, r3, #3
 801759c:	75fb      	strb	r3, [r7, #23]
 801759e:	e036      	b.n	801760e <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	681b      	ldr	r3, [r3, #0]
 80175a4:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 80175a6:	687b      	ldr	r3, [r7, #4]
 80175a8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80175ac:	b2db      	uxtb	r3, r3
 80175ae:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 80175b0:	f107 030c 	add.w	r3, r7, #12
 80175b4:	4618      	mov	r0, r3
 80175b6:	f000 f945 	bl	8017844 <RegionEU868ChannelAdd>
 80175ba:	4603      	mov	r3, r0
 80175bc:	2b06      	cmp	r3, #6
 80175be:	d820      	bhi.n	8017602 <RegionEU868NewChannelReq+0xa2>
 80175c0:	a201      	add	r2, pc, #4	; (adr r2, 80175c8 <RegionEU868NewChannelReq+0x68>)
 80175c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80175c6:	bf00      	nop
 80175c8:	0801760d 	.word	0x0801760d
 80175cc:	08017603 	.word	0x08017603
 80175d0:	08017603 	.word	0x08017603
 80175d4:	08017603 	.word	0x08017603
 80175d8:	080175e5 	.word	0x080175e5
 80175dc:	080175ef 	.word	0x080175ef
 80175e0:	080175f9 	.word	0x080175f9
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 80175e4:	7dfb      	ldrb	r3, [r7, #23]
 80175e6:	f023 0301 	bic.w	r3, r3, #1
 80175ea:	75fb      	strb	r3, [r7, #23]
                break;
 80175ec:	e00f      	b.n	801760e <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 80175ee:	7dfb      	ldrb	r3, [r7, #23]
 80175f0:	f023 0302 	bic.w	r3, r3, #2
 80175f4:	75fb      	strb	r3, [r7, #23]
                break;
 80175f6:	e00a      	b.n	801760e <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 80175f8:	7dfb      	ldrb	r3, [r7, #23]
 80175fa:	f023 0303 	bic.w	r3, r3, #3
 80175fe:	75fb      	strb	r3, [r7, #23]
                break;
 8017600:	e005      	b.n	801760e <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 8017602:	7dfb      	ldrb	r3, [r7, #23]
 8017604:	f023 0303 	bic.w	r3, r3, #3
 8017608:	75fb      	strb	r3, [r7, #23]
                break;
 801760a:	e000      	b.n	801760e <RegionEU868NewChannelReq+0xae>
                break;
 801760c:	bf00      	nop
            }
        }
    }

    return status;
 801760e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017612:	4618      	mov	r0, r3
 8017614:	3718      	adds	r7, #24
 8017616:	46bd      	mov	sp, r7
 8017618:	bd80      	pop	{r7, pc}
 801761a:	bf00      	nop

0801761c <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 801761c:	b480      	push	{r7}
 801761e:	b083      	sub	sp, #12
 8017620:	af00      	add	r7, sp, #0
 8017622:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8017624:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8017628:	4618      	mov	r0, r3
 801762a:	370c      	adds	r7, #12
 801762c:	46bd      	mov	sp, r7
 801762e:	bc80      	pop	{r7}
 8017630:	4770      	bx	lr
	...

08017634 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8017634:	b580      	push	{r7, lr}
 8017636:	b084      	sub	sp, #16
 8017638:	af00      	add	r7, sp, #0
 801763a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 801763c:	2303      	movs	r3, #3
 801763e:	73fb      	strb	r3, [r7, #15]

#if defined( REGION_EU868 )
    uint8_t band = 0;
 8017640:	2300      	movs	r3, #0
 8017642:	73bb      	strb	r3, [r7, #14]

    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 8017644:	687b      	ldr	r3, [r7, #4]
 8017646:	781b      	ldrb	r3, [r3, #0]
 8017648:	2b0f      	cmp	r3, #15
 801764a:	d901      	bls.n	8017650 <RegionEU868DlChannelReq+0x1c>
    {
        return 0;
 801764c:	2300      	movs	r3, #0
 801764e:	e035      	b.n	80176bc <RegionEU868DlChannelReq+0x88>
    }

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8017650:	687b      	ldr	r3, [r7, #4]
 8017652:	685b      	ldr	r3, [r3, #4]
 8017654:	f107 020e 	add.w	r2, r7, #14
 8017658:	4611      	mov	r1, r2
 801765a:	4618      	mov	r0, r3
 801765c:	f7ff f836 	bl	80166cc <VerifyRfFreq>
 8017660:	4603      	mov	r3, r0
 8017662:	f083 0301 	eor.w	r3, r3, #1
 8017666:	b2db      	uxtb	r3, r3
 8017668:	2b00      	cmp	r3, #0
 801766a:	d003      	beq.n	8017674 <RegionEU868DlChannelReq+0x40>
    {
        status &= 0xFE;
 801766c:	7bfb      	ldrb	r3, [r7, #15]
 801766e:	f023 0301 	bic.w	r3, r3, #1
 8017672:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8017674:	4b13      	ldr	r3, [pc, #76]	; (80176c4 <RegionEU868DlChannelReq+0x90>)
 8017676:	681a      	ldr	r2, [r3, #0]
 8017678:	687b      	ldr	r3, [r7, #4]
 801767a:	781b      	ldrb	r3, [r3, #0]
 801767c:	4619      	mov	r1, r3
 801767e:	460b      	mov	r3, r1
 8017680:	005b      	lsls	r3, r3, #1
 8017682:	440b      	add	r3, r1
 8017684:	009b      	lsls	r3, r3, #2
 8017686:	4413      	add	r3, r2
 8017688:	681b      	ldr	r3, [r3, #0]
 801768a:	2b00      	cmp	r3, #0
 801768c:	d103      	bne.n	8017696 <RegionEU868DlChannelReq+0x62>
    {
        status &= 0xFD;
 801768e:	7bfb      	ldrb	r3, [r7, #15]
 8017690:	f023 0302 	bic.w	r3, r3, #2
 8017694:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8017696:	7bfb      	ldrb	r3, [r7, #15]
 8017698:	2b03      	cmp	r3, #3
 801769a:	d10d      	bne.n	80176b8 <RegionEU868DlChannelReq+0x84>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 801769c:	4b09      	ldr	r3, [pc, #36]	; (80176c4 <RegionEU868DlChannelReq+0x90>)
 801769e:	6819      	ldr	r1, [r3, #0]
 80176a0:	687b      	ldr	r3, [r7, #4]
 80176a2:	781b      	ldrb	r3, [r3, #0]
 80176a4:	4618      	mov	r0, r3
 80176a6:	687b      	ldr	r3, [r7, #4]
 80176a8:	685a      	ldr	r2, [r3, #4]
 80176aa:	4603      	mov	r3, r0
 80176ac:	005b      	lsls	r3, r3, #1
 80176ae:	4403      	add	r3, r0
 80176b0:	009b      	lsls	r3, r3, #2
 80176b2:	440b      	add	r3, r1
 80176b4:	3304      	adds	r3, #4
 80176b6:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 80176b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80176bc:	4618      	mov	r0, r3
 80176be:	3710      	adds	r7, #16
 80176c0:	46bd      	mov	sp, r7
 80176c2:	bd80      	pop	{r7, pc}
 80176c4:	20001ad0 	.word	0x20001ad0

080176c8 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 80176c8:	b480      	push	{r7}
 80176ca:	b083      	sub	sp, #12
 80176cc:	af00      	add	r7, sp, #0
 80176ce:	4603      	mov	r3, r0
 80176d0:	460a      	mov	r2, r1
 80176d2:	71fb      	strb	r3, [r7, #7]
 80176d4:	4613      	mov	r3, r2
 80176d6:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 80176d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 80176dc:	4618      	mov	r0, r3
 80176de:	370c      	adds	r7, #12
 80176e0:	46bd      	mov	sp, r7
 80176e2:	bc80      	pop	{r7}
 80176e4:	4770      	bx	lr
	...

080176e8 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80176e8:	b580      	push	{r7, lr}
 80176ea:	b09a      	sub	sp, #104	; 0x68
 80176ec:	af02      	add	r7, sp, #8
 80176ee:	60f8      	str	r0, [r7, #12]
 80176f0:	60b9      	str	r1, [r7, #8]
 80176f2:	607a      	str	r2, [r7, #4]
 80176f4:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 80176f6:	2300      	movs	r3, #0
 80176f8:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 80176fc:	2300      	movs	r3, #0
 80176fe:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8017702:	2300      	movs	r3, #0
 8017704:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017706:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801770a:	2200      	movs	r2, #0
 801770c:	601a      	str	r2, [r3, #0]
 801770e:	605a      	str	r2, [r3, #4]
 8017710:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8017712:	230c      	movs	r3, #12
 8017714:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 8017718:	2307      	movs	r3, #7
 801771a:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 801771c:	4b47      	ldr	r3, [pc, #284]	; (801783c <RegionEU868NextChannel+0x154>)
 801771e:	681b      	ldr	r3, [r3, #0]
 8017720:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8017724:	2201      	movs	r2, #1
 8017726:	2100      	movs	r1, #0
 8017728:	4618      	mov	r0, r3
 801772a:	f7fe fa9b 	bl	8015c64 <RegionCommonCountChannels>
 801772e:	4603      	mov	r3, r0
 8017730:	2b00      	cmp	r3, #0
 8017732:	d10a      	bne.n	801774a <RegionEU868NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8017734:	4b41      	ldr	r3, [pc, #260]	; (801783c <RegionEU868NextChannel+0x154>)
 8017736:	681b      	ldr	r3, [r3, #0]
 8017738:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 801773c:	4b3f      	ldr	r3, [pc, #252]	; (801783c <RegionEU868NextChannel+0x154>)
 801773e:	681b      	ldr	r3, [r3, #0]
 8017740:	f042 0207 	orr.w	r2, r2, #7
 8017744:	b292      	uxth	r2, r2
 8017746:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 801774a:	68fb      	ldr	r3, [r7, #12]
 801774c:	7a5b      	ldrb	r3, [r3, #9]
 801774e:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8017750:	68fb      	ldr	r3, [r7, #12]
 8017752:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8017756:	b2db      	uxtb	r3, r3
 8017758:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801775a:	4b38      	ldr	r3, [pc, #224]	; (801783c <RegionEU868NextChannel+0x154>)
 801775c:	681b      	ldr	r3, [r3, #0]
 801775e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8017762:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8017764:	4b35      	ldr	r3, [pc, #212]	; (801783c <RegionEU868NextChannel+0x154>)
 8017766:	681b      	ldr	r3, [r3, #0]
 8017768:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 801776a:	4b35      	ldr	r3, [pc, #212]	; (8017840 <RegionEU868NextChannel+0x158>)
 801776c:	681b      	ldr	r3, [r3, #0]
 801776e:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 8017770:	2310      	movs	r3, #16
 8017772:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 8017774:	f107 0312 	add.w	r3, r7, #18
 8017778:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 801777a:	68fb      	ldr	r3, [r7, #12]
 801777c:	681b      	ldr	r3, [r3, #0]
 801777e:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8017780:	68fb      	ldr	r3, [r7, #12]
 8017782:	685b      	ldr	r3, [r3, #4]
 8017784:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8017786:	68fb      	ldr	r3, [r7, #12]
 8017788:	7a9b      	ldrb	r3, [r3, #10]
 801778a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 801778e:	2306      	movs	r3, #6
 8017790:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8017794:	68fa      	ldr	r2, [r7, #12]
 8017796:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801779a:	320c      	adds	r2, #12
 801779c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80177a0:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 80177a4:	68fb      	ldr	r3, [r7, #12]
 80177a6:	7d1b      	ldrb	r3, [r3, #20]
 80177a8:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 80177ac:	68fb      	ldr	r3, [r7, #12]
 80177ae:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80177b2:	68fb      	ldr	r3, [r7, #12]
 80177b4:	8adb      	ldrh	r3, [r3, #22]
 80177b6:	4619      	mov	r1, r3
 80177b8:	4610      	mov	r0, r2
 80177ba:	f7fe fffd 	bl	80167b8 <GetTimeOnAir>
 80177be:	4603      	mov	r3, r0
 80177c0:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 80177c2:	f107 0314 	add.w	r3, r7, #20
 80177c6:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 80177c8:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 80177cc:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80177d0:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	9301      	str	r3, [sp, #4]
 80177d8:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 80177dc:	9300      	str	r3, [sp, #0]
 80177de:	460b      	mov	r3, r1
 80177e0:	6839      	ldr	r1, [r7, #0]
 80177e2:	f7fe fe56 	bl	8016492 <RegionCommonIdentifyChannels>
 80177e6:	4603      	mov	r3, r0
 80177e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 80177ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80177f0:	2b00      	cmp	r3, #0
 80177f2:	d10e      	bne.n	8017812 <RegionEU868NextChannel+0x12a>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 80177f4:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80177f8:	3b01      	subs	r3, #1
 80177fa:	4619      	mov	r1, r3
 80177fc:	2000      	movs	r0, #0
 80177fe:	f001 fb33 	bl	8018e68 <randr>
 8017802:	4603      	mov	r3, r0
 8017804:	3360      	adds	r3, #96	; 0x60
 8017806:	443b      	add	r3, r7
 8017808:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 801780c:	68bb      	ldr	r3, [r7, #8]
 801780e:	701a      	strb	r2, [r3, #0]
 8017810:	e00e      	b.n	8017830 <RegionEU868NextChannel+0x148>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8017812:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017816:	2b0c      	cmp	r3, #12
 8017818:	d10a      	bne.n	8017830 <RegionEU868NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 801781a:	4b08      	ldr	r3, [pc, #32]	; (801783c <RegionEU868NextChannel+0x154>)
 801781c:	681b      	ldr	r3, [r3, #0]
 801781e:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 8017822:	4b06      	ldr	r3, [pc, #24]	; (801783c <RegionEU868NextChannel+0x154>)
 8017824:	681b      	ldr	r3, [r3, #0]
 8017826:	f042 0207 	orr.w	r2, r2, #7
 801782a:	b292      	uxth	r2, r2
 801782c:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }
    return status;
 8017830:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8017834:	4618      	mov	r0, r3
 8017836:	3760      	adds	r7, #96	; 0x60
 8017838:	46bd      	mov	sp, r7
 801783a:	bd80      	pop	{r7, pc}
 801783c:	20001ad0 	.word	0x20001ad0
 8017840:	20001ad4 	.word	0x20001ad4

08017844 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8017844:	b580      	push	{r7, lr}
 8017846:	b084      	sub	sp, #16
 8017848:	af00      	add	r7, sp, #0
 801784a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 801784c:	2300      	movs	r3, #0
 801784e:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 8017850:	2300      	movs	r3, #0
 8017852:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 8017854:	2300      	movs	r3, #0
 8017856:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8017858:	687b      	ldr	r3, [r7, #4]
 801785a:	791b      	ldrb	r3, [r3, #4]
 801785c:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 801785e:	7b7b      	ldrb	r3, [r7, #13]
 8017860:	2b02      	cmp	r3, #2
 8017862:	d801      	bhi.n	8017868 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8017864:	2306      	movs	r3, #6
 8017866:	e089      	b.n	801797c <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8017868:	7b7b      	ldrb	r3, [r7, #13]
 801786a:	2b0f      	cmp	r3, #15
 801786c:	d901      	bls.n	8017872 <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801786e:	2303      	movs	r3, #3
 8017870:	e084      	b.n	801797c <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8017872:	687b      	ldr	r3, [r7, #4]
 8017874:	681b      	ldr	r3, [r3, #0]
 8017876:	7a1b      	ldrb	r3, [r3, #8]
 8017878:	f343 0303 	sbfx	r3, r3, #0, #4
 801787c:	b25b      	sxtb	r3, r3
 801787e:	2207      	movs	r2, #7
 8017880:	2100      	movs	r1, #0
 8017882:	4618      	mov	r0, r3
 8017884:	f7fe f99d 	bl	8015bc2 <RegionCommonValueInRange>
 8017888:	4603      	mov	r3, r0
 801788a:	2b00      	cmp	r3, #0
 801788c:	d101      	bne.n	8017892 <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 801788e:	2301      	movs	r3, #1
 8017890:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8017892:	687b      	ldr	r3, [r7, #4]
 8017894:	681b      	ldr	r3, [r3, #0]
 8017896:	7a1b      	ldrb	r3, [r3, #8]
 8017898:	f343 1303 	sbfx	r3, r3, #4, #4
 801789c:	b25b      	sxtb	r3, r3
 801789e:	2207      	movs	r2, #7
 80178a0:	2100      	movs	r1, #0
 80178a2:	4618      	mov	r0, r3
 80178a4:	f7fe f98d 	bl	8015bc2 <RegionCommonValueInRange>
 80178a8:	4603      	mov	r3, r0
 80178aa:	2b00      	cmp	r3, #0
 80178ac:	d101      	bne.n	80178b2 <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 80178ae:	2301      	movs	r3, #1
 80178b0:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 80178b2:	687b      	ldr	r3, [r7, #4]
 80178b4:	681b      	ldr	r3, [r3, #0]
 80178b6:	7a1b      	ldrb	r3, [r3, #8]
 80178b8:	f343 0303 	sbfx	r3, r3, #0, #4
 80178bc:	b25a      	sxtb	r2, r3
 80178be:	687b      	ldr	r3, [r7, #4]
 80178c0:	681b      	ldr	r3, [r3, #0]
 80178c2:	7a1b      	ldrb	r3, [r3, #8]
 80178c4:	f343 1303 	sbfx	r3, r3, #4, #4
 80178c8:	b25b      	sxtb	r3, r3
 80178ca:	429a      	cmp	r2, r3
 80178cc:	dd01      	ble.n	80178d2 <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 80178ce:	2301      	movs	r3, #1
 80178d0:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 80178d2:	7bbb      	ldrb	r3, [r7, #14]
 80178d4:	f083 0301 	eor.w	r3, r3, #1
 80178d8:	b2db      	uxtb	r3, r3
 80178da:	2b00      	cmp	r3, #0
 80178dc:	d010      	beq.n	8017900 <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	681b      	ldr	r3, [r3, #0]
 80178e2:	681b      	ldr	r3, [r3, #0]
 80178e4:	f107 020c 	add.w	r2, r7, #12
 80178e8:	4611      	mov	r1, r2
 80178ea:	4618      	mov	r0, r3
 80178ec:	f7fe feee 	bl	80166cc <VerifyRfFreq>
 80178f0:	4603      	mov	r3, r0
 80178f2:	f083 0301 	eor.w	r3, r3, #1
 80178f6:	b2db      	uxtb	r3, r3
 80178f8:	2b00      	cmp	r3, #0
 80178fa:	d001      	beq.n	8017900 <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 80178fc:	2301      	movs	r3, #1
 80178fe:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8017900:	7bfb      	ldrb	r3, [r7, #15]
 8017902:	2b00      	cmp	r3, #0
 8017904:	d004      	beq.n	8017910 <RegionEU868ChannelAdd+0xcc>
 8017906:	7bbb      	ldrb	r3, [r7, #14]
 8017908:	2b00      	cmp	r3, #0
 801790a:	d001      	beq.n	8017910 <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801790c:	2306      	movs	r3, #6
 801790e:	e035      	b.n	801797c <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 8017910:	7bfb      	ldrb	r3, [r7, #15]
 8017912:	2b00      	cmp	r3, #0
 8017914:	d001      	beq.n	801791a <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8017916:	2305      	movs	r3, #5
 8017918:	e030      	b.n	801797c <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 801791a:	7bbb      	ldrb	r3, [r7, #14]
 801791c:	2b00      	cmp	r3, #0
 801791e:	d001      	beq.n	8017924 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8017920:	2304      	movs	r3, #4
 8017922:	e02b      	b.n	801797c <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8017924:	4b17      	ldr	r3, [pc, #92]	; (8017984 <RegionEU868ChannelAdd+0x140>)
 8017926:	6819      	ldr	r1, [r3, #0]
 8017928:	7b7a      	ldrb	r2, [r7, #13]
 801792a:	4613      	mov	r3, r2
 801792c:	005b      	lsls	r3, r3, #1
 801792e:	4413      	add	r3, r2
 8017930:	009b      	lsls	r3, r3, #2
 8017932:	18c8      	adds	r0, r1, r3
 8017934:	687b      	ldr	r3, [r7, #4]
 8017936:	681b      	ldr	r3, [r3, #0]
 8017938:	220c      	movs	r2, #12
 801793a:	4619      	mov	r1, r3
 801793c:	f001 faab 	bl	8018e96 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 8017940:	4b10      	ldr	r3, [pc, #64]	; (8017984 <RegionEU868ChannelAdd+0x140>)
 8017942:	6819      	ldr	r1, [r3, #0]
 8017944:	7b7a      	ldrb	r2, [r7, #13]
 8017946:	7b38      	ldrb	r0, [r7, #12]
 8017948:	4613      	mov	r3, r2
 801794a:	005b      	lsls	r3, r3, #1
 801794c:	4413      	add	r3, r2
 801794e:	009b      	lsls	r3, r3, #2
 8017950:	440b      	add	r3, r1
 8017952:	3309      	adds	r3, #9
 8017954:	4602      	mov	r2, r0
 8017956:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8017958:	4b0a      	ldr	r3, [pc, #40]	; (8017984 <RegionEU868ChannelAdd+0x140>)
 801795a:	681b      	ldr	r3, [r3, #0]
 801795c:	f8b3 3360 	ldrh.w	r3, [r3, #864]	; 0x360
 8017960:	b21a      	sxth	r2, r3
 8017962:	7b7b      	ldrb	r3, [r7, #13]
 8017964:	2101      	movs	r1, #1
 8017966:	fa01 f303 	lsl.w	r3, r1, r3
 801796a:	b21b      	sxth	r3, r3
 801796c:	4313      	orrs	r3, r2
 801796e:	b21a      	sxth	r2, r3
 8017970:	4b04      	ldr	r3, [pc, #16]	; (8017984 <RegionEU868ChannelAdd+0x140>)
 8017972:	681b      	ldr	r3, [r3, #0]
 8017974:	b292      	uxth	r2, r2
 8017976:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    return LORAMAC_STATUS_OK;
 801797a:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 801797c:	4618      	mov	r0, r3
 801797e:	3710      	adds	r7, #16
 8017980:	46bd      	mov	sp, r7
 8017982:	bd80      	pop	{r7, pc}
 8017984:	20001ad0 	.word	0x20001ad0

08017988 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8017988:	b580      	push	{r7, lr}
 801798a:	b086      	sub	sp, #24
 801798c:	af00      	add	r7, sp, #0
 801798e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 8017990:	687b      	ldr	r3, [r7, #4]
 8017992:	781b      	ldrb	r3, [r3, #0]
 8017994:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8017996:	7dfb      	ldrb	r3, [r7, #23]
 8017998:	2b02      	cmp	r3, #2
 801799a:	d801      	bhi.n	80179a0 <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 801799c:	2300      	movs	r3, #0
 801799e:	e016      	b.n	80179ce <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 80179a0:	4b0d      	ldr	r3, [pc, #52]	; (80179d8 <RegionEU868ChannelsRemove+0x50>)
 80179a2:	6819      	ldr	r1, [r3, #0]
 80179a4:	7dfa      	ldrb	r2, [r7, #23]
 80179a6:	4613      	mov	r3, r2
 80179a8:	005b      	lsls	r3, r3, #1
 80179aa:	4413      	add	r3, r2
 80179ac:	009b      	lsls	r3, r3, #2
 80179ae:	440b      	add	r3, r1
 80179b0:	461a      	mov	r2, r3
 80179b2:	2300      	movs	r3, #0
 80179b4:	6013      	str	r3, [r2, #0]
 80179b6:	6053      	str	r3, [r2, #4]
 80179b8:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 80179ba:	4b07      	ldr	r3, [pc, #28]	; (80179d8 <RegionEU868ChannelsRemove+0x50>)
 80179bc:	681b      	ldr	r3, [r3, #0]
 80179be:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80179c2:	7df9      	ldrb	r1, [r7, #23]
 80179c4:	2210      	movs	r2, #16
 80179c6:	4618      	mov	r0, r3
 80179c8:	f7fe f918 	bl	8015bfc <RegionCommonChanDisable>
 80179cc:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 80179ce:	4618      	mov	r0, r3
 80179d0:	3718      	adds	r7, #24
 80179d2:	46bd      	mov	sp, r7
 80179d4:	bd80      	pop	{r7, pc}
 80179d6:	bf00      	nop
 80179d8:	20001ad0 	.word	0x20001ad0

080179dc <RegionEU868ApplyDrOffset>:
#endif /* REGION_EU868 */
}
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80179dc:	b480      	push	{r7}
 80179de:	b085      	sub	sp, #20
 80179e0:	af00      	add	r7, sp, #0
 80179e2:	4603      	mov	r3, r0
 80179e4:	71fb      	strb	r3, [r7, #7]
 80179e6:	460b      	mov	r3, r1
 80179e8:	71bb      	strb	r3, [r7, #6]
 80179ea:	4613      	mov	r3, r2
 80179ec:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 80179ee:	79ba      	ldrb	r2, [r7, #6]
 80179f0:	797b      	ldrb	r3, [r7, #5]
 80179f2:	1ad3      	subs	r3, r2, r3
 80179f4:	b2db      	uxtb	r3, r3
 80179f6:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 80179f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80179fc:	2b00      	cmp	r3, #0
 80179fe:	da01      	bge.n	8017a04 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 8017a00:	2300      	movs	r3, #0
 8017a02:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8017a04:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 8017a06:	4618      	mov	r0, r3
 8017a08:	3714      	adds	r7, #20
 8017a0a:	46bd      	mov	sp, r7
 8017a0c:	bc80      	pop	{r7}
 8017a0e:	4770      	bx	lr

08017a10 <LimitTxPower>:
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
static Band_t* RegionBands;
#endif /* REGION_VERSION */

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 8017a10:	b580      	push	{r7, lr}
 8017a12:	b084      	sub	sp, #16
 8017a14:	af00      	add	r7, sp, #0
 8017a16:	603b      	str	r3, [r7, #0]
 8017a18:	4603      	mov	r3, r0
 8017a1a:	71fb      	strb	r3, [r7, #7]
 8017a1c:	460b      	mov	r3, r1
 8017a1e:	71bb      	strb	r3, [r7, #6]
 8017a20:	4613      	mov	r3, r2
 8017a22:	717b      	strb	r3, [r7, #5]
    int8_t txPowerResult = txPower;
 8017a24:	79fb      	ldrb	r3, [r7, #7]
 8017a26:	73fb      	strb	r3, [r7, #15]

    // Limit tx power to the band max
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 8017a28:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8017a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017a30:	4611      	mov	r1, r2
 8017a32:	4618      	mov	r0, r3
 8017a34:	f7fe fdcd 	bl	80165d2 <RegionCommonLimitTxPower>
 8017a38:	4603      	mov	r3, r0
 8017a3a:	73fb      	strb	r3, [r7, #15]

    if( datarate == DR_4 )
 8017a3c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8017a40:	2b04      	cmp	r3, #4
 8017a42:	d106      	bne.n	8017a52 <LimitTxPower+0x42>
    {// Limit tx power to max 26dBm
        txPowerResult = MAX( txPower, TX_POWER_2 );
 8017a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017a48:	2b02      	cmp	r3, #2
 8017a4a:	bfb8      	it	lt
 8017a4c:	2302      	movlt	r3, #2
 8017a4e:	73fb      	strb	r3, [r7, #15]
 8017a50:	e00d      	b.n	8017a6e <LimitTxPower+0x5e>
    }
    else
    {
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 8017a52:	2204      	movs	r2, #4
 8017a54:	2100      	movs	r1, #0
 8017a56:	6838      	ldr	r0, [r7, #0]
 8017a58:	f7fe f904 	bl	8015c64 <RegionCommonCountChannels>
 8017a5c:	4603      	mov	r3, r0
 8017a5e:	2b31      	cmp	r3, #49	; 0x31
 8017a60:	d805      	bhi.n	8017a6e <LimitTxPower+0x5e>
        {// Limit tx power to max 21dBm
            txPowerResult = MAX( txPower, TX_POWER_5 );
 8017a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017a66:	2b05      	cmp	r3, #5
 8017a68:	bfb8      	it	lt
 8017a6a:	2305      	movlt	r3, #5
 8017a6c:	73fb      	strb	r3, [r7, #15]
        }
    }
    return txPowerResult;
 8017a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017a72:	4618      	mov	r0, r3
 8017a74:	3710      	adds	r7, #16
 8017a76:	46bd      	mov	sp, r7
 8017a78:	bd80      	pop	{r7, pc}
	...

08017a7c <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 8017a7c:	b580      	push	{r7, lr}
 8017a7e:	b082      	sub	sp, #8
 8017a80:	af00      	add	r7, sp, #0
 8017a82:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8017a84:	4b18      	ldr	r3, [pc, #96]	; (8017ae8 <VerifyRfFreq+0x6c>)
 8017a86:	6a1b      	ldr	r3, [r3, #32]
 8017a88:	6878      	ldr	r0, [r7, #4]
 8017a8a:	4798      	blx	r3
 8017a8c:	4603      	mov	r3, r0
 8017a8e:	f083 0301 	eor.w	r3, r3, #1
 8017a92:	b2db      	uxtb	r3, r3
 8017a94:	2b00      	cmp	r3, #0
 8017a96:	d001      	beq.n	8017a9c <VerifyRfFreq+0x20>
    {
        return false;
 8017a98:	2300      	movs	r3, #0
 8017a9a:	e021      	b.n	8017ae0 <VerifyRfFreq+0x64>
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 8017a9c:	687b      	ldr	r3, [r7, #4]
 8017a9e:	4a13      	ldr	r2, [pc, #76]	; (8017aec <VerifyRfFreq+0x70>)
 8017aa0:	4293      	cmp	r3, r2
 8017aa2:	d910      	bls.n	8017ac6 <VerifyRfFreq+0x4a>
 8017aa4:	687b      	ldr	r3, [r7, #4]
 8017aa6:	4a12      	ldr	r2, [pc, #72]	; (8017af0 <VerifyRfFreq+0x74>)
 8017aa8:	4293      	cmp	r3, r2
 8017aaa:	d80c      	bhi.n	8017ac6 <VerifyRfFreq+0x4a>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 8017aac:	687a      	ldr	r2, [r7, #4]
 8017aae:	4b11      	ldr	r3, [pc, #68]	; (8017af4 <VerifyRfFreq+0x78>)
 8017ab0:	4413      	add	r3, r2
 8017ab2:	4a11      	ldr	r2, [pc, #68]	; (8017af8 <VerifyRfFreq+0x7c>)
 8017ab4:	fba2 1203 	umull	r1, r2, r2, r3
 8017ab8:	0c92      	lsrs	r2, r2, #18
 8017aba:	4910      	ldr	r1, [pc, #64]	; (8017afc <VerifyRfFreq+0x80>)
 8017abc:	fb01 f202 	mul.w	r2, r1, r2
 8017ac0:	1a9a      	subs	r2, r3, r2
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 8017ac2:	2a00      	cmp	r2, #0
 8017ac4:	d001      	beq.n	8017aca <VerifyRfFreq+0x4e>
    {
        return false;
 8017ac6:	2300      	movs	r3, #0
 8017ac8:	e00a      	b.n	8017ae0 <VerifyRfFreq+0x64>
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 8017aca:	687b      	ldr	r3, [r7, #4]
 8017acc:	4a0c      	ldr	r2, [pc, #48]	; (8017b00 <VerifyRfFreq+0x84>)
 8017ace:	4293      	cmp	r3, r2
 8017ad0:	d903      	bls.n	8017ada <VerifyRfFreq+0x5e>
 8017ad2:	687b      	ldr	r3, [r7, #4]
 8017ad4:	4a06      	ldr	r2, [pc, #24]	; (8017af0 <VerifyRfFreq+0x74>)
 8017ad6:	4293      	cmp	r3, r2
 8017ad8:	d901      	bls.n	8017ade <VerifyRfFreq+0x62>
    {
        return false;
 8017ada:	2300      	movs	r3, #0
 8017adc:	e000      	b.n	8017ae0 <VerifyRfFreq+0x64>
    }
    return true;
 8017ade:	2301      	movs	r3, #1
}
 8017ae0:	4618      	mov	r0, r3
 8017ae2:	3708      	adds	r7, #8
 8017ae4:	46bd      	mov	sp, r7
 8017ae6:	bd80      	pop	{r7, pc}
 8017ae8:	0801ea64 	.word	0x0801ea64
 8017aec:	3708709f 	.word	0x3708709f
 8017af0:	374886e0 	.word	0x374886e0
 8017af4:	c8f78f60 	.word	0xc8f78f60
 8017af8:	6fd91d85 	.word	0x6fd91d85
 8017afc:	000927c0 	.word	0x000927c0
 8017b00:	35c8015f 	.word	0x35c8015f

08017b04 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8017b04:	b590      	push	{r4, r7, lr}
 8017b06:	b089      	sub	sp, #36	; 0x24
 8017b08:	af04      	add	r7, sp, #16
 8017b0a:	4603      	mov	r3, r0
 8017b0c:	460a      	mov	r2, r1
 8017b0e:	71fb      	strb	r3, [r7, #7]
 8017b10:	4613      	mov	r3, r2
 8017b12:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesUS915[datarate];
 8017b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017b18:	4a0f      	ldr	r2, [pc, #60]	; (8017b58 <GetTimeOnAir+0x54>)
 8017b1a:	5cd3      	ldrb	r3, [r2, r3]
 8017b1c:	73fb      	strb	r3, [r7, #15]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 8017b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017b22:	490e      	ldr	r1, [pc, #56]	; (8017b5c <GetTimeOnAir+0x58>)
 8017b24:	4618      	mov	r0, r3
 8017b26:	f7fe fd69 	bl	80165fc <RegionCommonGetBandwidth>
 8017b2a:	60b8      	str	r0, [r7, #8]

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8017b2c:	4b0c      	ldr	r3, [pc, #48]	; (8017b60 <GetTimeOnAir+0x5c>)
 8017b2e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8017b30:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8017b34:	88bb      	ldrh	r3, [r7, #4]
 8017b36:	b2db      	uxtb	r3, r3
 8017b38:	2101      	movs	r1, #1
 8017b3a:	9103      	str	r1, [sp, #12]
 8017b3c:	9302      	str	r3, [sp, #8]
 8017b3e:	2300      	movs	r3, #0
 8017b40:	9301      	str	r3, [sp, #4]
 8017b42:	2308      	movs	r3, #8
 8017b44:	9300      	str	r3, [sp, #0]
 8017b46:	2301      	movs	r3, #1
 8017b48:	68b9      	ldr	r1, [r7, #8]
 8017b4a:	2001      	movs	r0, #1
 8017b4c:	47a0      	blx	r4
 8017b4e:	4603      	mov	r3, r0
}
 8017b50:	4618      	mov	r0, r3
 8017b52:	3714      	adds	r7, #20
 8017b54:	46bd      	mov	sp, r7
 8017b56:	bd90      	pop	{r4, r7, pc}
 8017b58:	0801e9e0 	.word	0x0801e9e0
 8017b5c:	0801e9f0 	.word	0x0801e9f0
 8017b60:	0801ea64 	.word	0x0801ea64

08017b64 <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 8017b64:	b580      	push	{r7, lr}
 8017b66:	b088      	sub	sp, #32
 8017b68:	af00      	add	r7, sp, #0
 8017b6a:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8017b6c:	2300      	movs	r3, #0
 8017b6e:	61bb      	str	r3, [r7, #24]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 8017b70:	687b      	ldr	r3, [r7, #4]
 8017b72:	781b      	ldrb	r3, [r3, #0]
 8017b74:	3b01      	subs	r3, #1
 8017b76:	2b37      	cmp	r3, #55	; 0x37
 8017b78:	f200 8136 	bhi.w	8017de8 <RegionUS915GetPhyParam+0x284>
 8017b7c:	a201      	add	r2, pc, #4	; (adr r2, 8017b84 <RegionUS915GetPhyParam+0x20>)
 8017b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017b82:	bf00      	nop
 8017b84:	08017c65 	.word	0x08017c65
 8017b88:	08017c6b 	.word	0x08017c6b
 8017b8c:	08017de9 	.word	0x08017de9
 8017b90:	08017de9 	.word	0x08017de9
 8017b94:	08017de9 	.word	0x08017de9
 8017b98:	08017c71 	.word	0x08017c71
 8017b9c:	08017de9 	.word	0x08017de9
 8017ba0:	08017cab 	.word	0x08017cab
 8017ba4:	08017de9 	.word	0x08017de9
 8017ba8:	08017cb1 	.word	0x08017cb1
 8017bac:	08017cb7 	.word	0x08017cb7
 8017bb0:	08017cbd 	.word	0x08017cbd
 8017bb4:	08017cc3 	.word	0x08017cc3
 8017bb8:	08017cd3 	.word	0x08017cd3
 8017bbc:	08017ce3 	.word	0x08017ce3
 8017bc0:	08017ce9 	.word	0x08017ce9
 8017bc4:	08017cf1 	.word	0x08017cf1
 8017bc8:	08017cf9 	.word	0x08017cf9
 8017bcc:	08017d01 	.word	0x08017d01
 8017bd0:	08017d09 	.word	0x08017d09
 8017bd4:	08017d11 	.word	0x08017d11
 8017bd8:	08017d25 	.word	0x08017d25
 8017bdc:	08017d2b 	.word	0x08017d2b
 8017be0:	08017d31 	.word	0x08017d31
 8017be4:	08017d37 	.word	0x08017d37
 8017be8:	08017d43 	.word	0x08017d43
 8017bec:	08017d4f 	.word	0x08017d4f
 8017bf0:	08017d55 	.word	0x08017d55
 8017bf4:	08017d5d 	.word	0x08017d5d
 8017bf8:	08017d63 	.word	0x08017d63
 8017bfc:	08017d69 	.word	0x08017d69
 8017c00:	08017d6f 	.word	0x08017d6f
 8017c04:	08017c77 	.word	0x08017c77
 8017c08:	08017de9 	.word	0x08017de9
 8017c0c:	08017de9 	.word	0x08017de9
 8017c10:	08017de9 	.word	0x08017de9
 8017c14:	08017de9 	.word	0x08017de9
 8017c18:	08017de9 	.word	0x08017de9
 8017c1c:	08017de9 	.word	0x08017de9
 8017c20:	08017de9 	.word	0x08017de9
 8017c24:	08017de9 	.word	0x08017de9
 8017c28:	08017de9 	.word	0x08017de9
 8017c2c:	08017de9 	.word	0x08017de9
 8017c30:	08017de9 	.word	0x08017de9
 8017c34:	08017de9 	.word	0x08017de9
 8017c38:	08017de9 	.word	0x08017de9
 8017c3c:	08017d77 	.word	0x08017d77
 8017c40:	08017d8b 	.word	0x08017d8b
 8017c44:	08017d99 	.word	0x08017d99
 8017c48:	08017d9f 	.word	0x08017d9f
 8017c4c:	08017de9 	.word	0x08017de9
 8017c50:	08017da5 	.word	0x08017da5
 8017c54:	08017db9 	.word	0x08017db9
 8017c58:	08017dbf 	.word	0x08017dbf
 8017c5c:	08017dc5 	.word	0x08017dc5
 8017c60:	08017dd5 	.word	0x08017dd5
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 8017c64:	2308      	movs	r3, #8
 8017c66:	61bb      	str	r3, [r7, #24]
            break;
 8017c68:	e0bf      	b.n	8017dea <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = US915_TX_MIN_DATARATE;
 8017c6a:	2300      	movs	r3, #0
 8017c6c:	61bb      	str	r3, [r7, #24]
            break;
 8017c6e:	e0bc      	b.n	8017dea <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = US915_DEFAULT_DATARATE;
 8017c70:	2300      	movs	r3, #0
 8017c72:	61bb      	str	r3, [r7, #24]
            break;
 8017c74:	e0b9      	b.n	8017dea <RegionUS915GetPhyParam+0x286>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8017c76:	687b      	ldr	r3, [r7, #4]
 8017c78:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8017c7c:	733b      	strb	r3, [r7, #12]
 8017c7e:	2304      	movs	r3, #4
 8017c80:	737b      	strb	r3, [r7, #13]
 8017c82:	2300      	movs	r3, #0
 8017c84:	73bb      	strb	r3, [r7, #14]
 8017c86:	2348      	movs	r3, #72	; 0x48
 8017c88:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )US915_TX_MAX_DATARATE,
                .MinDr = ( int8_t )US915_TX_MIN_DATARATE,
                .NbChannels = US915_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8017c8a:	4b5b      	ldr	r3, [pc, #364]	; (8017df8 <RegionUS915GetPhyParam+0x294>)
 8017c8c:	681b      	ldr	r3, [r3, #0]
 8017c8e:	f503 7358 	add.w	r3, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8017c92:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8017c94:	4b58      	ldr	r3, [pc, #352]	; (8017df8 <RegionUS915GetPhyParam+0x294>)
 8017c96:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8017c98:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8017c9a:	f107 030c 	add.w	r3, r7, #12
 8017c9e:	4618      	mov	r0, r3
 8017ca0:	f7fe fc59 	bl	8016556 <RegionCommonGetNextLowerTxDr>
 8017ca4:	4603      	mov	r3, r0
 8017ca6:	61bb      	str	r3, [r7, #24]
            break;
 8017ca8:	e09f      	b.n	8017dea <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = US915_MAX_TX_POWER;
 8017caa:	2300      	movs	r3, #0
 8017cac:	61bb      	str	r3, [r7, #24]
            break;
 8017cae:	e09c      	b.n	8017dea <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = US915_DEFAULT_TX_POWER;
 8017cb0:	2300      	movs	r3, #0
 8017cb2:	61bb      	str	r3, [r7, #24]
            break;
 8017cb4:	e099      	b.n	8017dea <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8017cb6:	2340      	movs	r3, #64	; 0x40
 8017cb8:	61bb      	str	r3, [r7, #24]
            break;
 8017cba:	e096      	b.n	8017dea <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8017cbc:	2320      	movs	r3, #32
 8017cbe:	61bb      	str	r3, [r7, #24]
            break;
 8017cc0:	e093      	b.n	8017dea <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 8017cc2:	687b      	ldr	r3, [r7, #4]
 8017cc4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017cc8:	461a      	mov	r2, r3
 8017cca:	4b4c      	ldr	r3, [pc, #304]	; (8017dfc <RegionUS915GetPhyParam+0x298>)
 8017ccc:	5c9b      	ldrb	r3, [r3, r2]
 8017cce:	61bb      	str	r3, [r7, #24]
            break;
 8017cd0:	e08b      	b.n	8017dea <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 8017cd2:	687b      	ldr	r3, [r7, #4]
 8017cd4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017cd8:	461a      	mov	r2, r3
 8017cda:	4b49      	ldr	r3, [pc, #292]	; (8017e00 <RegionUS915GetPhyParam+0x29c>)
 8017cdc:	5c9b      	ldrb	r3, [r3, r2]
 8017cde:	61bb      	str	r3, [r7, #24]
            break;
 8017ce0:	e083      	b.n	8017dea <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = US915_DUTY_CYCLE_ENABLED;
 8017ce2:	2300      	movs	r3, #0
 8017ce4:	61bb      	str	r3, [r7, #24]
            break;
 8017ce6:	e080      	b.n	8017dea <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = US915_MAX_RX_WINDOW;
 8017ce8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8017cec:	61bb      	str	r3, [r7, #24]
            break;
 8017cee:	e07c      	b.n	8017dea <RegionUS915GetPhyParam+0x286>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8017cf0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017cf4:	61bb      	str	r3, [r7, #24]
            break;
 8017cf6:	e078      	b.n	8017dea <RegionUS915GetPhyParam+0x286>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8017cf8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8017cfc:	61bb      	str	r3, [r7, #24]
            break;
 8017cfe:	e074      	b.n	8017dea <RegionUS915GetPhyParam+0x286>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8017d00:	f241 3388 	movw	r3, #5000	; 0x1388
 8017d04:	61bb      	str	r3, [r7, #24]
            break;
 8017d06:	e070      	b.n	8017dea <RegionUS915GetPhyParam+0x286>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8017d08:	f241 7370 	movw	r3, #6000	; 0x1770
 8017d0c:	61bb      	str	r3, [r7, #24]
            break;
 8017d0e:	e06c      	b.n	8017dea <RegionUS915GetPhyParam+0x286>
            break;
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 8017d10:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8017d14:	483b      	ldr	r0, [pc, #236]	; (8017e04 <RegionUS915GetPhyParam+0x2a0>)
 8017d16:	f001 f8a7 	bl	8018e68 <randr>
 8017d1a:	4603      	mov	r3, r0
 8017d1c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8017d20:	61bb      	str	r3, [r7, #24]
            break;
 8017d22:	e062      	b.n	8017dea <RegionUS915GetPhyParam+0x286>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8017d24:	2300      	movs	r3, #0
 8017d26:	61bb      	str	r3, [r7, #24]
            break;
 8017d28:	e05f      	b.n	8017dea <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = US915_RX_WND_2_FREQ;
 8017d2a:	4b37      	ldr	r3, [pc, #220]	; (8017e08 <RegionUS915GetPhyParam+0x2a4>)
 8017d2c:	61bb      	str	r3, [r7, #24]
            break;
 8017d2e:	e05c      	b.n	8017dea <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = US915_RX_WND_2_DR;
 8017d30:	2308      	movs	r3, #8
 8017d32:	61bb      	str	r3, [r7, #24]
            break;
 8017d34:	e059      	b.n	8017dea <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8017d36:	4b30      	ldr	r3, [pc, #192]	; (8017df8 <RegionUS915GetPhyParam+0x294>)
 8017d38:	681b      	ldr	r3, [r3, #0]
 8017d3a:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8017d3e:	61bb      	str	r3, [r7, #24]
            break;
 8017d40:	e053      	b.n	8017dea <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8017d42:	4b2d      	ldr	r3, [pc, #180]	; (8017df8 <RegionUS915GetPhyParam+0x294>)
 8017d44:	681b      	ldr	r3, [r3, #0]
 8017d46:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8017d4a:	61bb      	str	r3, [r7, #24]
            break;
 8017d4c:	e04d      	b.n	8017dea <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = US915_MAX_NB_CHANNELS;
 8017d4e:	2348      	movs	r3, #72	; 0x48
 8017d50:	61bb      	str	r3, [r7, #24]
            break;
 8017d52:	e04a      	b.n	8017dea <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8017d54:	4b28      	ldr	r3, [pc, #160]	; (8017df8 <RegionUS915GetPhyParam+0x294>)
 8017d56:	681b      	ldr	r3, [r3, #0]
 8017d58:	61bb      	str	r3, [r7, #24]
            break;
 8017d5a:	e046      	b.n	8017dea <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = US915_DEFAULT_UPLINK_DWELL_TIME;
 8017d5c:	2300      	movs	r3, #0
 8017d5e:	61bb      	str	r3, [r7, #24]
            break;
 8017d60:	e043      	b.n	8017dea <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8017d62:	2300      	movs	r3, #0
 8017d64:	61bb      	str	r3, [r7, #24]
            break;
 8017d66:	e040      	b.n	8017dea <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 8017d68:	4b28      	ldr	r3, [pc, #160]	; (8017e0c <RegionUS915GetPhyParam+0x2a8>)
 8017d6a:	61bb      	str	r3, [r7, #24]
            break;
 8017d6c:	e03d      	b.n	8017dea <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = 0;
 8017d6e:	f04f 0300 	mov.w	r3, #0
 8017d72:	61bb      	str	r3, [r7, #24]
            break;
 8017d74:	e039      	b.n	8017dea <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 8017d76:	687b      	ldr	r3, [r7, #4]
 8017d78:	791b      	ldrb	r3, [r3, #4]
 8017d7a:	4a25      	ldr	r2, [pc, #148]	; (8017e10 <RegionUS915GetPhyParam+0x2ac>)
 8017d7c:	4922      	ldr	r1, [pc, #136]	; (8017e08 <RegionUS915GetPhyParam+0x2a4>)
 8017d7e:	4618      	mov	r0, r3
 8017d80:	f7fd fd4b 	bl	801581a <RegionBaseUSCalcDownlinkFrequency>
 8017d84:	4603      	mov	r3, r0
 8017d86:	61bb      	str	r3, [r7, #24]
                                                                US915_BEACON_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 8017d88:	e02f      	b.n	8017dea <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 8017d8a:	2317      	movs	r3, #23
 8017d8c:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 8017d8e:	2304      	movs	r3, #4
 8017d90:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 8017d92:	2303      	movs	r3, #3
 8017d94:	76bb      	strb	r3, [r7, #26]
            break;
 8017d96:	e028      	b.n	8017dea <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 8017d98:	2308      	movs	r3, #8
 8017d9a:	61bb      	str	r3, [r7, #24]
            break;
 8017d9c:	e025      	b.n	8017dea <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8017d9e:	2308      	movs	r3, #8
 8017da0:	61bb      	str	r3, [r7, #24]
            break;
 8017da2:	e022      	b.n	8017dea <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 8017da4:	687b      	ldr	r3, [r7, #4]
 8017da6:	791b      	ldrb	r3, [r3, #4]
 8017da8:	4a19      	ldr	r2, [pc, #100]	; (8017e10 <RegionUS915GetPhyParam+0x2ac>)
 8017daa:	4917      	ldr	r1, [pc, #92]	; (8017e08 <RegionUS915GetPhyParam+0x2a4>)
 8017dac:	4618      	mov	r0, r3
 8017dae:	f7fd fd34 	bl	801581a <RegionBaseUSCalcDownlinkFrequency>
 8017db2:	4603      	mov	r3, r0
 8017db4:	61bb      	str	r3, [r7, #24]
                                                                US915_PING_SLOT_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 8017db6:	e018      	b.n	8017dea <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 8017db8:	2308      	movs	r3, #8
 8017dba:	61bb      	str	r3, [r7, #24]
            break;
 8017dbc:	e015      	b.n	8017dea <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8017dbe:	2308      	movs	r3, #8
 8017dc0:	61bb      	str	r3, [r7, #24]
            break;
 8017dc2:	e012      	b.n	8017dea <RegionUS915GetPhyParam+0x286>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 8017dc4:	687b      	ldr	r3, [r7, #4]
 8017dc6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017dca:	461a      	mov	r2, r3
 8017dcc:	4b11      	ldr	r3, [pc, #68]	; (8017e14 <RegionUS915GetPhyParam+0x2b0>)
 8017dce:	5c9b      	ldrb	r3, [r3, r2]
 8017dd0:	61bb      	str	r3, [r7, #24]
            break;
 8017dd2:	e00a      	b.n	8017dea <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 8017dd4:	687b      	ldr	r3, [r7, #4]
 8017dd6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017dda:	490f      	ldr	r1, [pc, #60]	; (8017e18 <RegionUS915GetPhyParam+0x2b4>)
 8017ddc:	4618      	mov	r0, r3
 8017dde:	f7fe fc0d 	bl	80165fc <RegionCommonGetBandwidth>
 8017de2:	4603      	mov	r3, r0
 8017de4:	61bb      	str	r3, [r7, #24]
            break;
 8017de6:	e000      	b.n	8017dea <RegionUS915GetPhyParam+0x286>
        }
        default:
        {
            break;
 8017de8:	bf00      	nop
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 8017dea:	69bb      	ldr	r3, [r7, #24]
 8017dec:	61fb      	str	r3, [r7, #28]
 8017dee:	69fb      	ldr	r3, [r7, #28]
}
 8017df0:	4618      	mov	r0, r3
 8017df2:	3720      	adds	r7, #32
 8017df4:	46bd      	mov	sp, r7
 8017df6:	bd80      	pop	{r7, pc}
 8017df8:	20001adc 	.word	0x20001adc
 8017dfc:	0801ea44 	.word	0x0801ea44
 8017e00:	0801ea54 	.word	0x0801ea54
 8017e04:	fffffc18 	.word	0xfffffc18
 8017e08:	370870a0 	.word	0x370870a0
 8017e0c:	4200999a 	.word	0x4200999a
 8017e10:	000927c0 	.word	0x000927c0
 8017e14:	0801e9e0 	.word	0x0801e9e0
 8017e18:	0801e9f0 	.word	0x0801e9f0

08017e1c <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8017e1c:	b590      	push	{r4, r7, lr}
 8017e1e:	b085      	sub	sp, #20
 8017e20:	af02      	add	r7, sp, #8
 8017e22:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8017e24:	4b11      	ldr	r3, [pc, #68]	; (8017e6c <RegionUS915SetBandTxDone+0x50>)
 8017e26:	681a      	ldr	r2, [r3, #0]
 8017e28:	4b11      	ldr	r3, [pc, #68]	; (8017e70 <RegionUS915SetBandTxDone+0x54>)
 8017e2a:	6819      	ldr	r1, [r3, #0]
 8017e2c:	687b      	ldr	r3, [r7, #4]
 8017e2e:	781b      	ldrb	r3, [r3, #0]
 8017e30:	4618      	mov	r0, r3
 8017e32:	4603      	mov	r3, r0
 8017e34:	005b      	lsls	r3, r3, #1
 8017e36:	4403      	add	r3, r0
 8017e38:	009b      	lsls	r3, r3, #2
 8017e3a:	440b      	add	r3, r1
 8017e3c:	3309      	adds	r3, #9
 8017e3e:	781b      	ldrb	r3, [r3, #0]
 8017e40:	4619      	mov	r1, r3
 8017e42:	460b      	mov	r3, r1
 8017e44:	005b      	lsls	r3, r3, #1
 8017e46:	440b      	add	r3, r1
 8017e48:	00db      	lsls	r3, r3, #3
 8017e4a:	18d0      	adds	r0, r2, r3
 8017e4c:	687b      	ldr	r3, [r7, #4]
 8017e4e:	6899      	ldr	r1, [r3, #8]
 8017e50:	687b      	ldr	r3, [r7, #4]
 8017e52:	785c      	ldrb	r4, [r3, #1]
 8017e54:	687b      	ldr	r3, [r7, #4]
 8017e56:	691a      	ldr	r2, [r3, #16]
 8017e58:	9200      	str	r2, [sp, #0]
 8017e5a:	68db      	ldr	r3, [r3, #12]
 8017e5c:	4622      	mov	r2, r4
 8017e5e:	f7fd ff53 	bl	8015d08 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_US915 */
}
 8017e62:	bf00      	nop
 8017e64:	370c      	adds	r7, #12
 8017e66:	46bd      	mov	sp, r7
 8017e68:	bd90      	pop	{r4, r7, pc}
 8017e6a:	bf00      	nop
 8017e6c:	20001ae0 	.word	0x20001ae0
 8017e70:	20001adc 	.word	0x20001adc

08017e74 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 8017e74:	b580      	push	{r7, lr}
 8017e76:	b08a      	sub	sp, #40	; 0x28
 8017e78:	af00      	add	r7, sp, #0
 8017e7a:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 8017e7c:	2301      	movs	r3, #1
 8017e7e:	81bb      	strh	r3, [r7, #12]
 8017e80:	2300      	movs	r3, #0
 8017e82:	73bb      	strb	r3, [r7, #14]
 8017e84:	2300      	movs	r3, #0
 8017e86:	613b      	str	r3, [r7, #16]
 8017e88:	2300      	movs	r3, #0
 8017e8a:	617b      	str	r3, [r7, #20]
 8017e8c:	2300      	movs	r3, #0
 8017e8e:	61bb      	str	r3, [r7, #24]
 8017e90:	2300      	movs	r3, #0
 8017e92:	61fb      	str	r3, [r7, #28]
 8017e94:	2300      	movs	r3, #0
 8017e96:	f887 3020 	strb.w	r3, [r7, #32]
    {
       US915_BAND0
    };

    switch( params->Type )
 8017e9a:	687b      	ldr	r3, [r7, #4]
 8017e9c:	7b1b      	ldrb	r3, [r3, #12]
 8017e9e:	2b00      	cmp	r3, #0
 8017ea0:	d007      	beq.n	8017eb2 <RegionUS915InitDefaults+0x3e>
 8017ea2:	2b00      	cmp	r3, #0
 8017ea4:	f2c0 8104 	blt.w	80180b0 <RegionUS915InitDefaults+0x23c>
 8017ea8:	3b01      	subs	r3, #1
 8017eaa:	2b01      	cmp	r3, #1
 8017eac:	f200 8100 	bhi.w	80180b0 <RegionUS915InitDefaults+0x23c>
 8017eb0:	e0ce      	b.n	8018050 <RegionUS915InitDefaults+0x1dc>
    {
        case INIT_TYPE_DEFAULTS:
        {
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8017eb2:	687b      	ldr	r3, [r7, #4]
 8017eb4:	681b      	ldr	r3, [r3, #0]
 8017eb6:	2b00      	cmp	r3, #0
 8017eb8:	f000 80fc 	beq.w	80180b4 <RegionUS915InitDefaults+0x240>
 8017ebc:	687b      	ldr	r3, [r7, #4]
 8017ebe:	685b      	ldr	r3, [r3, #4]
 8017ec0:	2b00      	cmp	r3, #0
 8017ec2:	f000 80f7 	beq.w	80180b4 <RegionUS915InitDefaults+0x240>
            {
                return;
            }

            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 8017ec6:	687b      	ldr	r3, [r7, #4]
 8017ec8:	681b      	ldr	r3, [r3, #0]
 8017eca:	4a7c      	ldr	r2, [pc, #496]	; (80180bc <RegionUS915InitDefaults+0x248>)
 8017ecc:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8017ece:	687b      	ldr	r3, [r7, #4]
 8017ed0:	685b      	ldr	r3, [r3, #4]
 8017ed2:	4a7b      	ldr	r2, [pc, #492]	; (80180c0 <RegionUS915InitDefaults+0x24c>)
 8017ed4:	6013      	str	r3, [r2, #0]
            RegionNvmGroup1->JoinTrialsCounter = 0;

            // Default bands
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            RegionBands = (Band_t*) params->Bands;
 8017ed6:	687b      	ldr	r3, [r7, #4]
 8017ed8:	689b      	ldr	r3, [r3, #8]
 8017eda:	4a7a      	ldr	r2, [pc, #488]	; (80180c4 <RegionUS915InitDefaults+0x250>)
 8017edc:	6013      	str	r3, [r2, #0]

            // Initialize 8 bit channel groups index
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8017ede:	4b77      	ldr	r3, [pc, #476]	; (80180bc <RegionUS915InitDefaults+0x248>)
 8017ee0:	681b      	ldr	r3, [r3, #0]
 8017ee2:	2200      	movs	r2, #0
 8017ee4:	731a      	strb	r2, [r3, #12]

            // Initialize the join trials counter
            RegionNvmGroup1->JoinTrialsCounter = 0;
 8017ee6:	4b75      	ldr	r3, [pc, #468]	; (80180bc <RegionUS915InitDefaults+0x248>)
 8017ee8:	681b      	ldr	r3, [r3, #0]
 8017eea:	2200      	movs	r2, #0
 8017eec:	735a      	strb	r2, [r3, #13]

            // Default bands
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 8017eee:	4b75      	ldr	r3, [pc, #468]	; (80180c4 <RegionUS915InitDefaults+0x250>)
 8017ef0:	681b      	ldr	r3, [r3, #0]
 8017ef2:	f107 010c 	add.w	r1, r7, #12
 8017ef6:	2218      	movs	r2, #24
 8017ef8:	4618      	mov	r0, r3
 8017efa:	f000 ffcc 	bl	8018e96 <memcpy1>
#endif /* REGION_VERSION */

            // Default channels
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 8017efe:	2300      	movs	r3, #0
 8017f00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017f04:	e02e      	b.n	8017f64 <RegionUS915InitDefaults+0xf0>
            {
                // 125 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 8017f06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017f0a:	4a6f      	ldr	r2, [pc, #444]	; (80180c8 <RegionUS915InitDefaults+0x254>)
 8017f0c:	fb03 f202 	mul.w	r2, r3, r2
 8017f10:	4b6e      	ldr	r3, [pc, #440]	; (80180cc <RegionUS915InitDefaults+0x258>)
 8017f12:	4413      	add	r3, r2
 8017f14:	4a6a      	ldr	r2, [pc, #424]	; (80180c0 <RegionUS915InitDefaults+0x24c>)
 8017f16:	6811      	ldr	r1, [r2, #0]
 8017f18:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8017f1c:	4618      	mov	r0, r3
 8017f1e:	4613      	mov	r3, r2
 8017f20:	005b      	lsls	r3, r3, #1
 8017f22:	4413      	add	r3, r2
 8017f24:	009b      	lsls	r3, r3, #2
 8017f26:	440b      	add	r3, r1
 8017f28:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 8017f2a:	4b65      	ldr	r3, [pc, #404]	; (80180c0 <RegionUS915InitDefaults+0x24c>)
 8017f2c:	6819      	ldr	r1, [r3, #0]
 8017f2e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8017f32:	4613      	mov	r3, r2
 8017f34:	005b      	lsls	r3, r3, #1
 8017f36:	4413      	add	r3, r2
 8017f38:	009b      	lsls	r3, r3, #2
 8017f3a:	440b      	add	r3, r1
 8017f3c:	3308      	adds	r3, #8
 8017f3e:	2230      	movs	r2, #48	; 0x30
 8017f40:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 8017f42:	4b5f      	ldr	r3, [pc, #380]	; (80180c0 <RegionUS915InitDefaults+0x24c>)
 8017f44:	6819      	ldr	r1, [r3, #0]
 8017f46:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8017f4a:	4613      	mov	r3, r2
 8017f4c:	005b      	lsls	r3, r3, #1
 8017f4e:	4413      	add	r3, r2
 8017f50:	009b      	lsls	r3, r3, #2
 8017f52:	440b      	add	r3, r1
 8017f54:	3309      	adds	r3, #9
 8017f56:	2200      	movs	r2, #0
 8017f58:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 8017f5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017f5e:	3301      	adds	r3, #1
 8017f60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017f64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017f68:	2b3f      	cmp	r3, #63	; 0x3f
 8017f6a:	d9cc      	bls.n	8017f06 <RegionUS915InitDefaults+0x92>
            }
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 8017f6c:	2340      	movs	r3, #64	; 0x40
 8017f6e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8017f72:	e02f      	b.n	8017fd4 <RegionUS915InitDefaults+0x160>
            {
                // 500 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 8017f74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017f78:	3b40      	subs	r3, #64	; 0x40
 8017f7a:	4a55      	ldr	r2, [pc, #340]	; (80180d0 <RegionUS915InitDefaults+0x25c>)
 8017f7c:	fb03 f202 	mul.w	r2, r3, r2
 8017f80:	4b54      	ldr	r3, [pc, #336]	; (80180d4 <RegionUS915InitDefaults+0x260>)
 8017f82:	4413      	add	r3, r2
 8017f84:	4a4e      	ldr	r2, [pc, #312]	; (80180c0 <RegionUS915InitDefaults+0x24c>)
 8017f86:	6811      	ldr	r1, [r2, #0]
 8017f88:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8017f8c:	4618      	mov	r0, r3
 8017f8e:	4613      	mov	r3, r2
 8017f90:	005b      	lsls	r3, r3, #1
 8017f92:	4413      	add	r3, r2
 8017f94:	009b      	lsls	r3, r3, #2
 8017f96:	440b      	add	r3, r1
 8017f98:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 8017f9a:	4b49      	ldr	r3, [pc, #292]	; (80180c0 <RegionUS915InitDefaults+0x24c>)
 8017f9c:	6819      	ldr	r1, [r3, #0]
 8017f9e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8017fa2:	4613      	mov	r3, r2
 8017fa4:	005b      	lsls	r3, r3, #1
 8017fa6:	4413      	add	r3, r2
 8017fa8:	009b      	lsls	r3, r3, #2
 8017faa:	440b      	add	r3, r1
 8017fac:	3308      	adds	r3, #8
 8017fae:	2244      	movs	r2, #68	; 0x44
 8017fb0:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 8017fb2:	4b43      	ldr	r3, [pc, #268]	; (80180c0 <RegionUS915InitDefaults+0x24c>)
 8017fb4:	6819      	ldr	r1, [r3, #0]
 8017fb6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8017fba:	4613      	mov	r3, r2
 8017fbc:	005b      	lsls	r3, r3, #1
 8017fbe:	4413      	add	r3, r2
 8017fc0:	009b      	lsls	r3, r3, #2
 8017fc2:	440b      	add	r3, r1
 8017fc4:	3309      	adds	r3, #9
 8017fc6:	2200      	movs	r2, #0
 8017fc8:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 8017fca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017fce:	3301      	adds	r3, #1
 8017fd0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8017fd4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017fd8:	2b47      	cmp	r3, #71	; 0x47
 8017fda:	d9cb      	bls.n	8017f74 <RegionUS915InitDefaults+0x100>
            RegionNvmGroup2->ChannelsDefaultMask[2] = HYBRID_DEFAULT_MASK2;
            RegionNvmGroup2->ChannelsDefaultMask[3] = HYBRID_DEFAULT_MASK3;
            RegionNvmGroup2->ChannelsDefaultMask[4] = HYBRID_DEFAULT_MASK4;
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
#else
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 8017fdc:	4b38      	ldr	r3, [pc, #224]	; (80180c0 <RegionUS915InitDefaults+0x24c>)
 8017fde:	681b      	ldr	r3, [r3, #0]
 8017fe0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017fe4:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 8017fe8:	4b35      	ldr	r3, [pc, #212]	; (80180c0 <RegionUS915InitDefaults+0x24c>)
 8017fea:	681b      	ldr	r3, [r3, #0]
 8017fec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017ff0:	f8a3 236e 	strh.w	r2, [r3, #878]	; 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 8017ff4:	4b32      	ldr	r3, [pc, #200]	; (80180c0 <RegionUS915InitDefaults+0x24c>)
 8017ff6:	681b      	ldr	r3, [r3, #0]
 8017ff8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017ffc:	f8a3 2370 	strh.w	r2, [r3, #880]	; 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 8018000:	4b2f      	ldr	r3, [pc, #188]	; (80180c0 <RegionUS915InitDefaults+0x24c>)
 8018002:	681b      	ldr	r3, [r3, #0]
 8018004:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018008:	f8a3 2372 	strh.w	r2, [r3, #882]	; 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 801800c:	4b2c      	ldr	r3, [pc, #176]	; (80180c0 <RegionUS915InitDefaults+0x24c>)
 801800e:	681b      	ldr	r3, [r3, #0]
 8018010:	22ff      	movs	r2, #255	; 0xff
 8018012:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 8018016:	4b2a      	ldr	r3, [pc, #168]	; (80180c0 <RegionUS915InitDefaults+0x24c>)
 8018018:	681b      	ldr	r3, [r3, #0]
 801801a:	2200      	movs	r2, #0
 801801c:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376
#endif /* HYBRID_ENABLED == 1 */

            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8018020:	4b27      	ldr	r3, [pc, #156]	; (80180c0 <RegionUS915InitDefaults+0x24c>)
 8018022:	681b      	ldr	r3, [r3, #0]
 8018024:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8018028:	4b25      	ldr	r3, [pc, #148]	; (80180c0 <RegionUS915InitDefaults+0x24c>)
 801802a:	681b      	ldr	r3, [r3, #0]
 801802c:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8018030:	2206      	movs	r2, #6
 8018032:	4619      	mov	r1, r3
 8018034:	f7fd fe42 	bl	8015cbc <RegionCommonChanMaskCopy>

            // Copy into channels mask remaining
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 8018038:	4b20      	ldr	r3, [pc, #128]	; (80180bc <RegionUS915InitDefaults+0x248>)
 801803a:	681b      	ldr	r3, [r3, #0]
 801803c:	4618      	mov	r0, r3
 801803e:	4b20      	ldr	r3, [pc, #128]	; (80180c0 <RegionUS915InitDefaults+0x24c>)
 8018040:	681b      	ldr	r3, [r3, #0]
 8018042:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8018046:	2206      	movs	r2, #6
 8018048:	4619      	mov	r1, r3
 801804a:	f7fd fe37 	bl	8015cbc <RegionCommonChanMaskCopy>
            break;
 801804e:	e032      	b.n	80180b6 <RegionUS915InitDefaults+0x242>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8018050:	4b1b      	ldr	r3, [pc, #108]	; (80180c0 <RegionUS915InitDefaults+0x24c>)
 8018052:	681b      	ldr	r3, [r3, #0]
 8018054:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8018058:	4b19      	ldr	r3, [pc, #100]	; (80180c0 <RegionUS915InitDefaults+0x24c>)
 801805a:	681b      	ldr	r3, [r3, #0]
 801805c:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8018060:	2206      	movs	r2, #6
 8018062:	4619      	mov	r1, r3
 8018064:	f7fd fe2a 	bl	8015cbc <RegionCommonChanMaskCopy>

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            for( uint8_t i = 0; i < 6; i++ )
 8018068:	2300      	movs	r3, #0
 801806a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801806e:	e01a      	b.n	80180a6 <RegionUS915InitDefaults+0x232>
#endif /* REGION_VERSION */
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 8018070:	4b12      	ldr	r3, [pc, #72]	; (80180bc <RegionUS915InitDefaults+0x248>)
 8018072:	681b      	ldr	r3, [r3, #0]
 8018074:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8018078:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801807c:	4b10      	ldr	r3, [pc, #64]	; (80180c0 <RegionUS915InitDefaults+0x24c>)
 801807e:	681b      	ldr	r3, [r3, #0]
 8018080:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8018084:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8018088:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801808c:	4b0b      	ldr	r3, [pc, #44]	; (80180bc <RegionUS915InitDefaults+0x248>)
 801808e:	681b      	ldr	r3, [r3, #0]
 8018090:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8018094:	4001      	ands	r1, r0
 8018096:	b289      	uxth	r1, r1
 8018098:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < 6; i++ )
 801809c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80180a0:	3301      	adds	r3, #1
 80180a2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80180a6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80180aa:	2b05      	cmp	r3, #5
 80180ac:	d9e0      	bls.n	8018070 <RegionUS915InitDefaults+0x1fc>
            }
            break;
 80180ae:	e002      	b.n	80180b6 <RegionUS915InitDefaults+0x242>
        }
        default:
        {
            break;
 80180b0:	bf00      	nop
 80180b2:	e000      	b.n	80180b6 <RegionUS915InitDefaults+0x242>
                return;
 80180b4:	bf00      	nop
        }
    }
#endif /* REGION_US915 */
}
 80180b6:	3728      	adds	r7, #40	; 0x28
 80180b8:	46bd      	mov	sp, r7
 80180ba:	bd80      	pop	{r7, pc}
 80180bc:	20001ad8 	.word	0x20001ad8
 80180c0:	20001adc 	.word	0x20001adc
 80180c4:	20001ae0 	.word	0x20001ae0
 80180c8:	00030d40 	.word	0x00030d40
 80180cc:	35c80160 	.word	0x35c80160
 80180d0:	00186a00 	.word	0x00186a00
 80180d4:	35d2afc0 	.word	0x35d2afc0

080180d8 <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80180d8:	b580      	push	{r7, lr}
 80180da:	b082      	sub	sp, #8
 80180dc:	af00      	add	r7, sp, #0
 80180de:	6078      	str	r0, [r7, #4]
 80180e0:	460b      	mov	r3, r1
 80180e2:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_US915 )
    switch( phyAttribute )
 80180e4:	78fb      	ldrb	r3, [r7, #3]
 80180e6:	2b0f      	cmp	r3, #15
 80180e8:	d867      	bhi.n	80181ba <RegionUS915Verify+0xe2>
 80180ea:	a201      	add	r2, pc, #4	; (adr r2, 80180f0 <RegionUS915Verify+0x18>)
 80180ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80180f0:	08018131 	.word	0x08018131
 80180f4:	080181bb 	.word	0x080181bb
 80180f8:	080181bb 	.word	0x080181bb
 80180fc:	080181bb 	.word	0x080181bb
 8018100:	080181bb 	.word	0x080181bb
 8018104:	0801813f 	.word	0x0801813f
 8018108:	0801815d 	.word	0x0801815d
 801810c:	0801817b 	.word	0x0801817b
 8018110:	080181bb 	.word	0x080181bb
 8018114:	08018199 	.word	0x08018199
 8018118:	08018199 	.word	0x08018199
 801811c:	080181bb 	.word	0x080181bb
 8018120:	080181bb 	.word	0x080181bb
 8018124:	080181bb 	.word	0x080181bb
 8018128:	080181bb 	.word	0x080181bb
 801812c:	080181b7 	.word	0x080181b7
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 8018130:	687b      	ldr	r3, [r7, #4]
 8018132:	681b      	ldr	r3, [r3, #0]
 8018134:	4618      	mov	r0, r3
 8018136:	f7ff fca1 	bl	8017a7c <VerifyRfFreq>
 801813a:	4603      	mov	r3, r0
 801813c:	e03e      	b.n	80181bc <RegionUS915Verify+0xe4>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 801813e:	687b      	ldr	r3, [r7, #4]
 8018140:	f993 3000 	ldrsb.w	r3, [r3]
 8018144:	2204      	movs	r2, #4
 8018146:	2100      	movs	r1, #0
 8018148:	4618      	mov	r0, r3
 801814a:	f7fd fd3a 	bl	8015bc2 <RegionCommonValueInRange>
 801814e:	4603      	mov	r3, r0
 8018150:	2b00      	cmp	r3, #0
 8018152:	bf14      	ite	ne
 8018154:	2301      	movne	r3, #1
 8018156:	2300      	moveq	r3, #0
 8018158:	b2db      	uxtb	r3, r3
 801815a:	e02f      	b.n	80181bc <RegionUS915Verify+0xe4>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 801815c:	687b      	ldr	r3, [r7, #4]
 801815e:	f993 3000 	ldrsb.w	r3, [r3]
 8018162:	2205      	movs	r2, #5
 8018164:	2100      	movs	r1, #0
 8018166:	4618      	mov	r0, r3
 8018168:	f7fd fd2b 	bl	8015bc2 <RegionCommonValueInRange>
 801816c:	4603      	mov	r3, r0
 801816e:	2b00      	cmp	r3, #0
 8018170:	bf14      	ite	ne
 8018172:	2301      	movne	r3, #1
 8018174:	2300      	moveq	r3, #0
 8018176:	b2db      	uxtb	r3, r3
 8018178:	e020      	b.n	80181bc <RegionUS915Verify+0xe4>
        }
#endif /* REGION_VERSION */
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 801817a:	687b      	ldr	r3, [r7, #4]
 801817c:	f993 3000 	ldrsb.w	r3, [r3]
 8018180:	220d      	movs	r2, #13
 8018182:	2108      	movs	r1, #8
 8018184:	4618      	mov	r0, r3
 8018186:	f7fd fd1c 	bl	8015bc2 <RegionCommonValueInRange>
 801818a:	4603      	mov	r3, r0
 801818c:	2b00      	cmp	r3, #0
 801818e:	bf14      	ite	ne
 8018190:	2301      	movne	r3, #1
 8018192:	2300      	moveq	r3, #0
 8018194:	b2db      	uxtb	r3, r3
 8018196:	e011      	b.n	80181bc <RegionUS915Verify+0xe4>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 8018198:	687b      	ldr	r3, [r7, #4]
 801819a:	f993 3000 	ldrsb.w	r3, [r3]
 801819e:	220e      	movs	r2, #14
 80181a0:	2100      	movs	r1, #0
 80181a2:	4618      	mov	r0, r3
 80181a4:	f7fd fd0d 	bl	8015bc2 <RegionCommonValueInRange>
 80181a8:	4603      	mov	r3, r0
 80181aa:	2b00      	cmp	r3, #0
 80181ac:	bf14      	ite	ne
 80181ae:	2301      	movne	r3, #1
 80181b0:	2300      	moveq	r3, #0
 80181b2:	b2db      	uxtb	r3, r3
 80181b4:	e002      	b.n	80181bc <RegionUS915Verify+0xe4>
        }
        case PHY_DUTY_CYCLE:
        {
            return US915_DUTY_CYCLE_ENABLED;
 80181b6:	2300      	movs	r3, #0
 80181b8:	e000      	b.n	80181bc <RegionUS915Verify+0xe4>
        }
        default:
            return false;
 80181ba:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_US915 */
}
 80181bc:	4618      	mov	r0, r3
 80181be:	3708      	adds	r7, #8
 80181c0:	46bd      	mov	sp, r7
 80181c2:	bd80      	pop	{r7, pc}

080181c4 <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 80181c4:	b480      	push	{r7}
 80181c6:	b085      	sub	sp, #20
 80181c8:	af00      	add	r7, sp, #0
 80181ca:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 80181cc:	687b      	ldr	r3, [r7, #4]
 80181ce:	7a1b      	ldrb	r3, [r3, #8]
 80181d0:	2b10      	cmp	r3, #16
 80181d2:	d160      	bne.n	8018296 <RegionUS915ApplyCFList+0xd2>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 80181d4:	687b      	ldr	r3, [r7, #4]
 80181d6:	685b      	ldr	r3, [r3, #4]
 80181d8:	330f      	adds	r3, #15
 80181da:	781b      	ldrb	r3, [r3, #0]
 80181dc:	2b01      	cmp	r3, #1
 80181de:	d15c      	bne.n	801829a <RegionUS915ApplyCFList+0xd6>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 80181e0:	2300      	movs	r3, #0
 80181e2:	73fb      	strb	r3, [r7, #15]
 80181e4:	2300      	movs	r3, #0
 80181e6:	73bb      	strb	r3, [r7, #14]
 80181e8:	e051      	b.n	801828e <RegionUS915ApplyCFList+0xca>
    {
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 80181ea:	687b      	ldr	r3, [r7, #4]
 80181ec:	685a      	ldr	r2, [r3, #4]
 80181ee:	7bbb      	ldrb	r3, [r7, #14]
 80181f0:	4413      	add	r3, r2
 80181f2:	7819      	ldrb	r1, [r3, #0]
 80181f4:	4b2b      	ldr	r3, [pc, #172]	; (80182a4 <RegionUS915ApplyCFList+0xe0>)
 80181f6:	681b      	ldr	r3, [r3, #0]
 80181f8:	7bfa      	ldrb	r2, [r7, #15]
 80181fa:	b289      	uxth	r1, r1
 80181fc:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8018200:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 8018204:	4b27      	ldr	r3, [pc, #156]	; (80182a4 <RegionUS915ApplyCFList+0xe0>)
 8018206:	681b      	ldr	r3, [r3, #0]
 8018208:	7bfa      	ldrb	r2, [r7, #15]
 801820a:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801820e:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8018212:	687b      	ldr	r3, [r7, #4]
 8018214:	685a      	ldr	r2, [r3, #4]
 8018216:	7bbb      	ldrb	r3, [r7, #14]
 8018218:	3301      	adds	r3, #1
 801821a:	4413      	add	r3, r2
 801821c:	781b      	ldrb	r3, [r3, #0]
 801821e:	b29b      	uxth	r3, r3
 8018220:	021b      	lsls	r3, r3, #8
 8018222:	b299      	uxth	r1, r3
 8018224:	4b1f      	ldr	r3, [pc, #124]	; (80182a4 <RegionUS915ApplyCFList+0xe0>)
 8018226:	681b      	ldr	r3, [r3, #0]
 8018228:	7bfa      	ldrb	r2, [r7, #15]
 801822a:	4301      	orrs	r1, r0
 801822c:	b289      	uxth	r1, r1
 801822e:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8018232:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        if( chMaskItr == 4 )
 8018236:	7bfb      	ldrb	r3, [r7, #15]
 8018238:	2b04      	cmp	r3, #4
 801823a:	d10f      	bne.n	801825c <RegionUS915ApplyCFList+0x98>
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 801823c:	4b19      	ldr	r3, [pc, #100]	; (80182a4 <RegionUS915ApplyCFList+0xe0>)
 801823e:	681b      	ldr	r3, [r3, #0]
 8018240:	7bfa      	ldrb	r2, [r7, #15]
 8018242:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8018246:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801824a:	4b16      	ldr	r3, [pc, #88]	; (80182a4 <RegionUS915ApplyCFList+0xe0>)
 801824c:	681b      	ldr	r3, [r3, #0]
 801824e:	7bfa      	ldrb	r2, [r7, #15]
 8018250:	b2c9      	uxtb	r1, r1
 8018252:	b289      	uxth	r1, r1
 8018254:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8018258:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 801825c:	4b12      	ldr	r3, [pc, #72]	; (80182a8 <RegionUS915ApplyCFList+0xe4>)
 801825e:	681b      	ldr	r3, [r3, #0]
 8018260:	7bfa      	ldrb	r2, [r7, #15]
 8018262:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8018266:	4b0f      	ldr	r3, [pc, #60]	; (80182a4 <RegionUS915ApplyCFList+0xe0>)
 8018268:	681b      	ldr	r3, [r3, #0]
 801826a:	7bfa      	ldrb	r2, [r7, #15]
 801826c:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8018270:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8018274:	4b0c      	ldr	r3, [pc, #48]	; (80182a8 <RegionUS915ApplyCFList+0xe4>)
 8018276:	681b      	ldr	r3, [r3, #0]
 8018278:	7bfa      	ldrb	r2, [r7, #15]
 801827a:	4001      	ands	r1, r0
 801827c:	b289      	uxth	r1, r1
 801827e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 8018282:	7bfb      	ldrb	r3, [r7, #15]
 8018284:	3301      	adds	r3, #1
 8018286:	73fb      	strb	r3, [r7, #15]
 8018288:	7bbb      	ldrb	r3, [r7, #14]
 801828a:	3302      	adds	r3, #2
 801828c:	73bb      	strb	r3, [r7, #14]
 801828e:	7bfb      	ldrb	r3, [r7, #15]
 8018290:	2b04      	cmp	r3, #4
 8018292:	d9aa      	bls.n	80181ea <RegionUS915ApplyCFList+0x26>
 8018294:	e002      	b.n	801829c <RegionUS915ApplyCFList+0xd8>
        return;
 8018296:	bf00      	nop
 8018298:	e000      	b.n	801829c <RegionUS915ApplyCFList+0xd8>
        return;
 801829a:	bf00      	nop
    }
#endif /* REGION_US915 */
}
 801829c:	3714      	adds	r7, #20
 801829e:	46bd      	mov	sp, r7
 80182a0:	bc80      	pop	{r7}
 80182a2:	4770      	bx	lr
 80182a4:	20001adc 	.word	0x20001adc
 80182a8:	20001ad8 	.word	0x20001ad8

080182ac <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 80182ac:	b580      	push	{r7, lr}
 80182ae:	b084      	sub	sp, #16
 80182b0:	af00      	add	r7, sp, #0
 80182b2:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 80182b4:	687b      	ldr	r3, [r7, #4]
 80182b6:	681b      	ldr	r3, [r3, #0]
 80182b8:	2204      	movs	r2, #4
 80182ba:	2100      	movs	r1, #0
 80182bc:	4618      	mov	r0, r3
 80182be:	f7fd fcd1 	bl	8015c64 <RegionCommonCountChannels>
 80182c2:	4603      	mov	r3, r0
 80182c4:	73bb      	strb	r3, [r7, #14]

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 80182c6:	7bbb      	ldrb	r3, [r7, #14]
 80182c8:	2b01      	cmp	r3, #1
 80182ca:	d804      	bhi.n	80182d6 <RegionUS915ChanMaskSet+0x2a>
 80182cc:	7bbb      	ldrb	r3, [r7, #14]
 80182ce:	2b00      	cmp	r3, #0
 80182d0:	d001      	beq.n	80182d6 <RegionUS915ChanMaskSet+0x2a>
        ( nbChannels > 0 ) )
    {
        return false;
 80182d2:	2300      	movs	r3, #0
 80182d4:	e04a      	b.n	801836c <RegionUS915ChanMaskSet+0xc0>
    }

    switch( chanMaskSet->ChannelsMaskType )
 80182d6:	687b      	ldr	r3, [r7, #4]
 80182d8:	791b      	ldrb	r3, [r3, #4]
 80182da:	2b00      	cmp	r3, #0
 80182dc:	d002      	beq.n	80182e4 <RegionUS915ChanMaskSet+0x38>
 80182de:	2b01      	cmp	r3, #1
 80182e0:	d036      	beq.n	8018350 <RegionUS915ChanMaskSet+0xa4>
 80182e2:	e040      	b.n	8018366 <RegionUS915ChanMaskSet+0xba>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80182e4:	4b23      	ldr	r3, [pc, #140]	; (8018374 <RegionUS915ChanMaskSet+0xc8>)
 80182e6:	681b      	ldr	r3, [r3, #0]
 80182e8:	f503 7058 	add.w	r0, r3, #864	; 0x360
 80182ec:	687b      	ldr	r3, [r7, #4]
 80182ee:	681b      	ldr	r3, [r3, #0]
 80182f0:	2206      	movs	r2, #6
 80182f2:	4619      	mov	r1, r3
 80182f4:	f7fd fce2 	bl	8015cbc <RegionCommonChanMaskCopy>

            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 80182f8:	4b1e      	ldr	r3, [pc, #120]	; (8018374 <RegionUS915ChanMaskSet+0xc8>)
 80182fa:	681b      	ldr	r3, [r3, #0]
 80182fc:	f8b3 2374 	ldrh.w	r2, [r3, #884]	; 0x374
 8018300:	4b1c      	ldr	r3, [pc, #112]	; (8018374 <RegionUS915ChanMaskSet+0xc8>)
 8018302:	681b      	ldr	r3, [r3, #0]
 8018304:	b2d2      	uxtb	r2, r2
 8018306:	b292      	uxth	r2, r2
 8018308:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 801830c:	4b19      	ldr	r3, [pc, #100]	; (8018374 <RegionUS915ChanMaskSet+0xc8>)
 801830e:	681b      	ldr	r3, [r3, #0]
 8018310:	2200      	movs	r2, #0
 8018312:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8018316:	2300      	movs	r3, #0
 8018318:	73fb      	strb	r3, [r7, #15]
 801831a:	e015      	b.n	8018348 <RegionUS915ChanMaskSet+0x9c>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 801831c:	4b16      	ldr	r3, [pc, #88]	; (8018378 <RegionUS915ChanMaskSet+0xcc>)
 801831e:	681b      	ldr	r3, [r3, #0]
 8018320:	7bfa      	ldrb	r2, [r7, #15]
 8018322:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8018326:	4b13      	ldr	r3, [pc, #76]	; (8018374 <RegionUS915ChanMaskSet+0xc8>)
 8018328:	681b      	ldr	r3, [r3, #0]
 801832a:	7bfa      	ldrb	r2, [r7, #15]
 801832c:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8018330:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8018334:	4b10      	ldr	r3, [pc, #64]	; (8018378 <RegionUS915ChanMaskSet+0xcc>)
 8018336:	681b      	ldr	r3, [r3, #0]
 8018338:	7bfa      	ldrb	r2, [r7, #15]
 801833a:	4001      	ands	r1, r0
 801833c:	b289      	uxth	r1, r1
 801833e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8018342:	7bfb      	ldrb	r3, [r7, #15]
 8018344:	3301      	adds	r3, #1
 8018346:	73fb      	strb	r3, [r7, #15]
 8018348:	7bfb      	ldrb	r3, [r7, #15]
 801834a:	2b05      	cmp	r3, #5
 801834c:	d9e6      	bls.n	801831c <RegionUS915ChanMaskSet+0x70>
            }
            break;
 801834e:	e00c      	b.n	801836a <RegionUS915ChanMaskSet+0xbe>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8018350:	4b08      	ldr	r3, [pc, #32]	; (8018374 <RegionUS915ChanMaskSet+0xc8>)
 8018352:	681b      	ldr	r3, [r3, #0]
 8018354:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 8018358:	687b      	ldr	r3, [r7, #4]
 801835a:	681b      	ldr	r3, [r3, #0]
 801835c:	2206      	movs	r2, #6
 801835e:	4619      	mov	r1, r3
 8018360:	f7fd fcac 	bl	8015cbc <RegionCommonChanMaskCopy>
            break;
 8018364:	e001      	b.n	801836a <RegionUS915ChanMaskSet+0xbe>
        }
        default:
            return false;
 8018366:	2300      	movs	r3, #0
 8018368:	e000      	b.n	801836c <RegionUS915ChanMaskSet+0xc0>
    }
    return true;
 801836a:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 801836c:	4618      	mov	r0, r3
 801836e:	3710      	adds	r7, #16
 8018370:	46bd      	mov	sp, r7
 8018372:	bd80      	pop	{r7, pc}
 8018374:	20001adc 	.word	0x20001adc
 8018378:	20001ad8 	.word	0x20001ad8

0801837c <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 801837c:	b580      	push	{r7, lr}
 801837e:	b088      	sub	sp, #32
 8018380:	af02      	add	r7, sp, #8
 8018382:	60ba      	str	r2, [r7, #8]
 8018384:	607b      	str	r3, [r7, #4]
 8018386:	4603      	mov	r3, r0
 8018388:	73fb      	strb	r3, [r7, #15]
 801838a:	460b      	mov	r3, r1
 801838c:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;
 801838e:	2300      	movs	r3, #0
 8018390:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 8018392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018396:	2b0d      	cmp	r3, #13
 8018398:	bfa8      	it	ge
 801839a:	230d      	movge	r3, #13
 801839c:	b25a      	sxtb	r2, r3
 801839e:	687b      	ldr	r3, [r7, #4]
 80183a0:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 80183a2:	687b      	ldr	r3, [r7, #4]
 80183a4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80183a8:	4916      	ldr	r1, [pc, #88]	; (8018404 <RegionUS915ComputeRxWindowParameters+0x88>)
 80183aa:	4618      	mov	r0, r3
 80183ac:	f7fe f926 	bl	80165fc <RegionCommonGetBandwidth>
 80183b0:	4603      	mov	r3, r0
 80183b2:	b2da      	uxtb	r2, r3
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	709a      	strb	r2, [r3, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 80183b8:	687b      	ldr	r3, [r7, #4]
 80183ba:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80183be:	461a      	mov	r2, r3
 80183c0:	4b11      	ldr	r3, [pc, #68]	; (8018408 <RegionUS915ComputeRxWindowParameters+0x8c>)
 80183c2:	5c9a      	ldrb	r2, [r3, r2]
 80183c4:	687b      	ldr	r3, [r7, #4]
 80183c6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80183ca:	4619      	mov	r1, r3
 80183cc:	4b0d      	ldr	r3, [pc, #52]	; (8018404 <RegionUS915ComputeRxWindowParameters+0x88>)
 80183ce:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80183d2:	4619      	mov	r1, r3
 80183d4:	4610      	mov	r0, r2
 80183d6:	f7fd fe8f 	bl	80160f8 <RegionCommonComputeSymbolTimeLoRa>
 80183da:	6178      	str	r0, [r7, #20]

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 80183dc:	4b0b      	ldr	r3, [pc, #44]	; (801840c <RegionUS915ComputeRxWindowParameters+0x90>)
 80183de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80183e0:	4798      	blx	r3
 80183e2:	687b      	ldr	r3, [r7, #4]
 80183e4:	3308      	adds	r3, #8
 80183e6:	687a      	ldr	r2, [r7, #4]
 80183e8:	320c      	adds	r2, #12
 80183ea:	7bb9      	ldrb	r1, [r7, #14]
 80183ec:	9201      	str	r2, [sp, #4]
 80183ee:	9300      	str	r3, [sp, #0]
 80183f0:	4603      	mov	r3, r0
 80183f2:	68ba      	ldr	r2, [r7, #8]
 80183f4:	6978      	ldr	r0, [r7, #20]
 80183f6:	f7fd fea5 	bl	8016144 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 80183fa:	bf00      	nop
 80183fc:	3718      	adds	r7, #24
 80183fe:	46bd      	mov	sp, r7
 8018400:	bd80      	pop	{r7, pc}
 8018402:	bf00      	nop
 8018404:	0801e9f0 	.word	0x0801e9f0
 8018408:	0801e9e0 	.word	0x0801e9e0
 801840c:	0801ea64 	.word	0x0801ea64

08018410 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8018410:	b590      	push	{r4, r7, lr}
 8018412:	b091      	sub	sp, #68	; 0x44
 8018414:	af0a      	add	r7, sp, #40	; 0x28
 8018416:	6078      	str	r0, [r7, #4]
 8018418:	6039      	str	r1, [r7, #0]
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 801841a:	687b      	ldr	r3, [r7, #4]
 801841c:	785b      	ldrb	r3, [r3, #1]
 801841e:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8018420:	2300      	movs	r3, #0
 8018422:	75fb      	strb	r3, [r7, #23]
    int8_t phyDr = 0;
 8018424:	2300      	movs	r3, #0
 8018426:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8018428:	687b      	ldr	r3, [r7, #4]
 801842a:	685b      	ldr	r3, [r3, #4]
 801842c:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 801842e:	4b34      	ldr	r3, [pc, #208]	; (8018500 <RegionUS915RxConfig+0xf0>)
 8018430:	685b      	ldr	r3, [r3, #4]
 8018432:	4798      	blx	r3
 8018434:	4603      	mov	r3, r0
 8018436:	2b00      	cmp	r3, #0
 8018438:	d001      	beq.n	801843e <RegionUS915RxConfig+0x2e>
    {
        return false;
 801843a:	2300      	movs	r3, #0
 801843c:	e05c      	b.n	80184f8 <RegionUS915RxConfig+0xe8>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801843e:	687b      	ldr	r3, [r7, #4]
 8018440:	7cdb      	ldrb	r3, [r3, #19]
 8018442:	2b00      	cmp	r3, #0
 8018444:	d109      	bne.n	801845a <RegionUS915RxConfig+0x4a>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 8018446:	687b      	ldr	r3, [r7, #4]
 8018448:	781b      	ldrb	r3, [r3, #0]
 801844a:	f003 0307 	and.w	r3, r3, #7
 801844e:	4a2d      	ldr	r2, [pc, #180]	; (8018504 <RegionUS915RxConfig+0xf4>)
 8018450:	fb03 f202 	mul.w	r2, r3, r2
 8018454:	4b2c      	ldr	r3, [pc, #176]	; (8018508 <RegionUS915RxConfig+0xf8>)
 8018456:	4413      	add	r3, r2
 8018458:	613b      	str	r3, [r7, #16]
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 801845a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801845e:	4a2b      	ldr	r2, [pc, #172]	; (801850c <RegionUS915RxConfig+0xfc>)
 8018460:	5cd3      	ldrb	r3, [r2, r3]
 8018462:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8018464:	4b26      	ldr	r3, [pc, #152]	; (8018500 <RegionUS915RxConfig+0xf0>)
 8018466:	68db      	ldr	r3, [r3, #12]
 8018468:	6938      	ldr	r0, [r7, #16]
 801846a:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 801846c:	4b24      	ldr	r3, [pc, #144]	; (8018500 <RegionUS915RxConfig+0xf0>)
 801846e:	699c      	ldr	r4, [r3, #24]
 8018470:	687b      	ldr	r3, [r7, #4]
 8018472:	789b      	ldrb	r3, [r3, #2]
 8018474:	4618      	mov	r0, r3
 8018476:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801847a:	687b      	ldr	r3, [r7, #4]
 801847c:	689b      	ldr	r3, [r3, #8]
 801847e:	b29b      	uxth	r3, r3
 8018480:	687a      	ldr	r2, [r7, #4]
 8018482:	7c92      	ldrb	r2, [r2, #18]
 8018484:	9209      	str	r2, [sp, #36]	; 0x24
 8018486:	2201      	movs	r2, #1
 8018488:	9208      	str	r2, [sp, #32]
 801848a:	2200      	movs	r2, #0
 801848c:	9207      	str	r2, [sp, #28]
 801848e:	2200      	movs	r2, #0
 8018490:	9206      	str	r2, [sp, #24]
 8018492:	2200      	movs	r2, #0
 8018494:	9205      	str	r2, [sp, #20]
 8018496:	2200      	movs	r2, #0
 8018498:	9204      	str	r2, [sp, #16]
 801849a:	2200      	movs	r2, #0
 801849c:	9203      	str	r2, [sp, #12]
 801849e:	9302      	str	r3, [sp, #8]
 80184a0:	2308      	movs	r3, #8
 80184a2:	9301      	str	r3, [sp, #4]
 80184a4:	2300      	movs	r3, #0
 80184a6:	9300      	str	r3, [sp, #0]
 80184a8:	2301      	movs	r3, #1
 80184aa:	460a      	mov	r2, r1
 80184ac:	4601      	mov	r1, r0
 80184ae:	2001      	movs	r0, #1
 80184b0:	47a0      	blx	r4

    if( rxConfig->RepeaterSupport == true )
 80184b2:	687b      	ldr	r3, [r7, #4]
 80184b4:	7c5b      	ldrb	r3, [r3, #17]
 80184b6:	2b00      	cmp	r3, #0
 80184b8:	d005      	beq.n	80184c6 <RegionUS915RxConfig+0xb6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 80184ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80184be:	4a14      	ldr	r2, [pc, #80]	; (8018510 <RegionUS915RxConfig+0x100>)
 80184c0:	5cd3      	ldrb	r3, [r2, r3]
 80184c2:	75fb      	strb	r3, [r7, #23]
 80184c4:	e004      	b.n	80184d0 <RegionUS915RxConfig+0xc0>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 80184c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80184ca:	4a12      	ldr	r2, [pc, #72]	; (8018514 <RegionUS915RxConfig+0x104>)
 80184cc:	5cd3      	ldrb	r3, [r2, r3]
 80184ce:	75fb      	strb	r3, [r7, #23]
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 80184d0:	4b0b      	ldr	r3, [pc, #44]	; (8018500 <RegionUS915RxConfig+0xf0>)
 80184d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80184d4:	7dfa      	ldrb	r2, [r7, #23]
 80184d6:	320d      	adds	r2, #13
 80184d8:	b2d2      	uxtb	r2, r2
 80184da:	4611      	mov	r1, r2
 80184dc:	2001      	movs	r0, #1
 80184de:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 80184e0:	687b      	ldr	r3, [r7, #4]
 80184e2:	7cdb      	ldrb	r3, [r3, #19]
 80184e4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80184e8:	6939      	ldr	r1, [r7, #16]
 80184ea:	4618      	mov	r0, r3
 80184ec:	f7fe f8a4 	bl	8016638 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 80184f0:	683b      	ldr	r3, [r7, #0]
 80184f2:	7bfa      	ldrb	r2, [r7, #15]
 80184f4:	701a      	strb	r2, [r3, #0]
    return true;
 80184f6:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 80184f8:	4618      	mov	r0, r3
 80184fa:	371c      	adds	r7, #28
 80184fc:	46bd      	mov	sp, r7
 80184fe:	bd90      	pop	{r4, r7, pc}
 8018500:	0801ea64 	.word	0x0801ea64
 8018504:	000927c0 	.word	0x000927c0
 8018508:	370870a0 	.word	0x370870a0
 801850c:	0801e9e0 	.word	0x0801e9e0
 8018510:	0801ea54 	.word	0x0801ea54
 8018514:	0801ea44 	.word	0x0801ea44

08018518 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8018518:	b590      	push	{r4, r7, lr}
 801851a:	b093      	sub	sp, #76	; 0x4c
 801851c:	af0a      	add	r7, sp, #40	; 0x28
 801851e:	60f8      	str	r0, [r7, #12]
 8018520:	60b9      	str	r1, [r7, #8]
 8018522:	607a      	str	r2, [r7, #4]
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 8018524:	68fb      	ldr	r3, [r7, #12]
 8018526:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801852a:	461a      	mov	r2, r3
 801852c:	4b49      	ldr	r3, [pc, #292]	; (8018654 <RegionUS915TxConfig+0x13c>)
 801852e:	5c9b      	ldrb	r3, [r3, r2]
 8018530:	77fb      	strb	r3, [r7, #31]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 8018532:	68fb      	ldr	r3, [r7, #12]
 8018534:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8018538:	4b47      	ldr	r3, [pc, #284]	; (8018658 <RegionUS915TxConfig+0x140>)
 801853a:	681a      	ldr	r2, [r3, #0]
 801853c:	4b47      	ldr	r3, [pc, #284]	; (801865c <RegionUS915TxConfig+0x144>)
 801853e:	6819      	ldr	r1, [r3, #0]
 8018540:	68fb      	ldr	r3, [r7, #12]
 8018542:	781b      	ldrb	r3, [r3, #0]
 8018544:	461c      	mov	r4, r3
 8018546:	4623      	mov	r3, r4
 8018548:	005b      	lsls	r3, r3, #1
 801854a:	4423      	add	r3, r4
 801854c:	009b      	lsls	r3, r3, #2
 801854e:	440b      	add	r3, r1
 8018550:	3309      	adds	r3, #9
 8018552:	781b      	ldrb	r3, [r3, #0]
 8018554:	4619      	mov	r1, r3
 8018556:	460b      	mov	r3, r1
 8018558:	005b      	lsls	r3, r3, #1
 801855a:	440b      	add	r3, r1
 801855c:	00db      	lsls	r3, r3, #3
 801855e:	4413      	add	r3, r2
 8018560:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8018564:	68fb      	ldr	r3, [r7, #12]
 8018566:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801856a:	4b3c      	ldr	r3, [pc, #240]	; (801865c <RegionUS915TxConfig+0x144>)
 801856c:	681b      	ldr	r3, [r3, #0]
 801856e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8018572:	f7ff fa4d 	bl	8017a10 <LimitTxPower>
 8018576:	4603      	mov	r3, r0
 8018578:	77bb      	strb	r3, [r7, #30]
#endif /* REGION_VERSION */

    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 801857a:	68fb      	ldr	r3, [r7, #12]
 801857c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018580:	4937      	ldr	r1, [pc, #220]	; (8018660 <RegionUS915TxConfig+0x148>)
 8018582:	4618      	mov	r0, r3
 8018584:	f7fe f83a 	bl	80165fc <RegionCommonGetBandwidth>
 8018588:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 801858a:	2300      	movs	r3, #0
 801858c:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 801858e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8018592:	f04f 0200 	mov.w	r2, #0
 8018596:	4933      	ldr	r1, [pc, #204]	; (8018664 <RegionUS915TxConfig+0x14c>)
 8018598:	4618      	mov	r0, r3
 801859a:	f7fd fe8b 	bl	80162b4 <RegionCommonComputeTxPower>
 801859e:	4603      	mov	r3, r0
 80185a0:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 80185a2:	4b31      	ldr	r3, [pc, #196]	; (8018668 <RegionUS915TxConfig+0x150>)
 80185a4:	68da      	ldr	r2, [r3, #12]
 80185a6:	4b2d      	ldr	r3, [pc, #180]	; (801865c <RegionUS915TxConfig+0x144>)
 80185a8:	6819      	ldr	r1, [r3, #0]
 80185aa:	68fb      	ldr	r3, [r7, #12]
 80185ac:	781b      	ldrb	r3, [r3, #0]
 80185ae:	4618      	mov	r0, r3
 80185b0:	4603      	mov	r3, r0
 80185b2:	005b      	lsls	r3, r3, #1
 80185b4:	4403      	add	r3, r0
 80185b6:	009b      	lsls	r3, r3, #2
 80185b8:	440b      	add	r3, r1
 80185ba:	681b      	ldr	r3, [r3, #0]
 80185bc:	4618      	mov	r0, r3
 80185be:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 80185c0:	4b29      	ldr	r3, [pc, #164]	; (8018668 <RegionUS915TxConfig+0x150>)
 80185c2:	69dc      	ldr	r4, [r3, #28]
 80185c4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80185c8:	f997 1017 	ldrsb.w	r1, [r7, #23]
 80185cc:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80185d0:	9208      	str	r2, [sp, #32]
 80185d2:	2200      	movs	r2, #0
 80185d4:	9207      	str	r2, [sp, #28]
 80185d6:	2200      	movs	r2, #0
 80185d8:	9206      	str	r2, [sp, #24]
 80185da:	2200      	movs	r2, #0
 80185dc:	9205      	str	r2, [sp, #20]
 80185de:	2201      	movs	r2, #1
 80185e0:	9204      	str	r2, [sp, #16]
 80185e2:	2200      	movs	r2, #0
 80185e4:	9203      	str	r2, [sp, #12]
 80185e6:	2208      	movs	r2, #8
 80185e8:	9202      	str	r2, [sp, #8]
 80185ea:	2201      	movs	r2, #1
 80185ec:	9201      	str	r2, [sp, #4]
 80185ee:	9300      	str	r3, [sp, #0]
 80185f0:	69bb      	ldr	r3, [r7, #24]
 80185f2:	2200      	movs	r2, #0
 80185f4:	2001      	movs	r0, #1
 80185f6:	47a0      	blx	r4
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 80185f8:	4b18      	ldr	r3, [pc, #96]	; (801865c <RegionUS915TxConfig+0x144>)
 80185fa:	681a      	ldr	r2, [r3, #0]
 80185fc:	68fb      	ldr	r3, [r7, #12]
 80185fe:	781b      	ldrb	r3, [r3, #0]
 8018600:	4619      	mov	r1, r3
 8018602:	460b      	mov	r3, r1
 8018604:	005b      	lsls	r3, r3, #1
 8018606:	440b      	add	r3, r1
 8018608:	009b      	lsls	r3, r3, #2
 801860a:	4413      	add	r3, r2
 801860c:	681a      	ldr	r2, [r3, #0]
 801860e:	68fb      	ldr	r3, [r7, #12]
 8018610:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018614:	4619      	mov	r1, r3
 8018616:	4610      	mov	r0, r2
 8018618:	f7fe f840 	bl	801669c <RegionCommonTxConfigPrint>

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 801861c:	4b12      	ldr	r3, [pc, #72]	; (8018668 <RegionUS915TxConfig+0x150>)
 801861e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018620:	68fa      	ldr	r2, [r7, #12]
 8018622:	8992      	ldrh	r2, [r2, #12]
 8018624:	b2d2      	uxtb	r2, r2
 8018626:	4611      	mov	r1, r2
 8018628:	2001      	movs	r0, #1
 801862a:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 801862c:	68fb      	ldr	r3, [r7, #12]
 801862e:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8018632:	68fb      	ldr	r3, [r7, #12]
 8018634:	899b      	ldrh	r3, [r3, #12]
 8018636:	4619      	mov	r1, r3
 8018638:	4610      	mov	r0, r2
 801863a:	f7ff fa63 	bl	8017b04 <GetTimeOnAir>
 801863e:	4602      	mov	r2, r0
 8018640:	687b      	ldr	r3, [r7, #4]
 8018642:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 8018644:	68bb      	ldr	r3, [r7, #8]
 8018646:	7fba      	ldrb	r2, [r7, #30]
 8018648:	701a      	strb	r2, [r3, #0]
    return true;
 801864a:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 801864c:	4618      	mov	r0, r3
 801864e:	3724      	adds	r7, #36	; 0x24
 8018650:	46bd      	mov	sp, r7
 8018652:	bd90      	pop	{r4, r7, pc}
 8018654:	0801e9e0 	.word	0x0801e9e0
 8018658:	20001ae0 	.word	0x20001ae0
 801865c:	20001adc 	.word	0x20001adc
 8018660:	0801e9f0 	.word	0x0801e9f0
 8018664:	41f00000 	.word	0x41f00000
 8018668:	0801ea64 	.word	0x0801ea64

0801866c <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801866c:	b590      	push	{r4, r7, lr}
 801866e:	b097      	sub	sp, #92	; 0x5c
 8018670:	af00      	add	r7, sp, #0
 8018672:	60f8      	str	r0, [r7, #12]
 8018674:	60b9      	str	r1, [r7, #8]
 8018676:	607a      	str	r2, [r7, #4]
 8018678:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 801867a:	2307      	movs	r3, #7
 801867c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8018680:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8018684:	2200      	movs	r2, #0
 8018686:	601a      	str	r2, [r3, #0]
 8018688:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 801868a:	2300      	movs	r3, #0
 801868c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    uint8_t bytesProcessed = 0;
 8018690:	2300      	movs	r3, #0
 8018692:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 8018696:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801869a:	2200      	movs	r2, #0
 801869c:	601a      	str	r2, [r3, #0]
 801869e:	605a      	str	r2, [r3, #4]
 80186a0:	609a      	str	r2, [r3, #8]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 80186a2:	4b97      	ldr	r3, [pc, #604]	; (8018900 <RegionUS915LinkAdrReq+0x294>)
 80186a4:	681b      	ldr	r3, [r3, #0]
 80186a6:	f503 7158 	add.w	r1, r3, #864	; 0x360
 80186aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80186ae:	2206      	movs	r2, #6
 80186b0:	4618      	mov	r0, r3
 80186b2:	f7fd fb03 	bl	8015cbc <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 80186b6:	e11b      	b.n	80188f0 <RegionUS915LinkAdrReq+0x284>
    {
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 80186b8:	68fb      	ldr	r3, [r7, #12]
 80186ba:	685a      	ldr	r2, [r3, #4]
 80186bc:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80186c0:	4413      	add	r3, r2
 80186c2:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80186c6:	4611      	mov	r1, r2
 80186c8:	4618      	mov	r0, r3
 80186ca:	f7fd fc3b 	bl	8015f44 <RegionCommonParseLinkAdrReq>
 80186ce:	4603      	mov	r3, r0
 80186d0:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

        if( nextIndex == 0 )
 80186d4:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80186d8:	2b00      	cmp	r3, #0
 80186da:	f000 8113 	beq.w	8018904 <RegionUS915LinkAdrReq+0x298>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 80186de:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 80186e2:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80186e6:	4413      	add	r3, r2
 80186e8:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 80186ec:	2307      	movs	r3, #7
 80186ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

        if( linkAdrParams.ChMaskCtrl == 6 )
 80186f2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80186f6:	2b06      	cmp	r3, #6
 80186f8:	d116      	bne.n	8018728 <RegionUS915LinkAdrReq+0xbc>
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 80186fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80186fe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            channelsMask[1] = 0xFFFF;
 8018702:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018706:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            channelsMask[2] = 0xFFFF;
 801870a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801870e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            channelsMask[3] = 0xFFFF;
 8018712:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018716:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 801871a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 801871e:	b2db      	uxtb	r3, r3
 8018720:	b29b      	uxth	r3, r3
 8018722:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8018726:	e0e3      	b.n	80188f0 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 8018728:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801872c:	2b07      	cmp	r3, #7
 801872e:	d112      	bne.n	8018756 <RegionUS915LinkAdrReq+0xea>
        {
            // Disable all 125 kHz channels
            channelsMask[0] = 0x0000;
 8018730:	2300      	movs	r3, #0
 8018732:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            channelsMask[1] = 0x0000;
 8018736:	2300      	movs	r3, #0
 8018738:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            channelsMask[2] = 0x0000;
 801873c:	2300      	movs	r3, #0
 801873e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            channelsMask[3] = 0x0000;
 8018742:	2300      	movs	r3, #0
 8018744:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 8018748:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 801874c:	b2db      	uxtb	r3, r3
 801874e:	b29b      	uxth	r3, r3
 8018750:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8018754:	e0cc      	b.n	80188f0 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 8018756:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801875a:	2b05      	cmp	r3, #5
 801875c:	f040 80bf 	bne.w	80188de <RegionUS915LinkAdrReq+0x272>
        {
            // Start value for comparison
            uint8_t bitMask = 1;
 8018760:	2301      	movs	r3, #1
 8018762:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52

            // cntChannelMask for channelsMask[0] until channelsMask[3]
            uint8_t cntChannelMask = 0;
 8018766:	2300      	movs	r3, #0
 8018768:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

            // i will be 1, 2, 3, ..., 7
            for( uint8_t i = 0; i <= 7; i++ )
 801876c:	2300      	movs	r3, #0
 801876e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 8018772:	e0ae      	b.n	80188d2 <RegionUS915LinkAdrReq+0x266>
            {
                // 8 MSBs of ChMask are RFU
                // Checking if the ChMask is set, then true
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 8018774:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8018778:	b2da      	uxtb	r2, r3
 801877a:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801877e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8018782:	fa01 f303 	lsl.w	r3, r1, r3
 8018786:	4013      	ands	r3, r2
 8018788:	2b00      	cmp	r3, #0
 801878a:	d04d      	beq.n	8018828 <RegionUS915LinkAdrReq+0x1bc>
                {
                    if( ( i % 2 ) == 0 )
 801878c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8018790:	f003 0301 	and.w	r3, r3, #1
 8018794:	b2db      	uxtb	r3, r3
 8018796:	2b00      	cmp	r3, #0
 8018798:	d120      	bne.n	80187dc <RegionUS915LinkAdrReq+0x170>
                    {
                        // Enable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] |= 0x00FF;
 801879a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801879e:	005b      	lsls	r3, r3, #1
 80187a0:	3358      	adds	r3, #88	; 0x58
 80187a2:	443b      	add	r3, r7
 80187a4:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 80187a8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80187ac:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 80187b0:	b292      	uxth	r2, r2
 80187b2:	005b      	lsls	r3, r3, #1
 80187b4:	3358      	adds	r3, #88	; 0x58
 80187b6:	443b      	add	r3, r7
 80187b8:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 80187bc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80187c0:	b21a      	sxth	r2, r3
 80187c2:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 80187c6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80187ca:	fa01 f303 	lsl.w	r3, r1, r3
 80187ce:	b21b      	sxth	r3, r3
 80187d0:	4313      	orrs	r3, r2
 80187d2:	b21b      	sxth	r3, r3
 80187d4:	b29b      	uxth	r3, r3
 80187d6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80187da:	e075      	b.n	80188c8 <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] |= 0xFF00;
 80187dc:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80187e0:	005b      	lsls	r3, r3, #1
 80187e2:	3358      	adds	r3, #88	; 0x58
 80187e4:	443b      	add	r3, r7
 80187e6:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 80187ea:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80187ee:	f062 02ff 	orn	r2, r2, #255	; 0xff
 80187f2:	b292      	uxth	r2, r2
 80187f4:	005b      	lsls	r3, r3, #1
 80187f6:	3358      	adds	r3, #88	; 0x58
 80187f8:	443b      	add	r3, r7
 80187fa:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 80187fe:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8018802:	b21a      	sxth	r2, r3
 8018804:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 8018808:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801880c:	fa01 f303 	lsl.w	r3, r1, r3
 8018810:	b21b      	sxth	r3, r3
 8018812:	4313      	orrs	r3, r2
 8018814:	b21b      	sxth	r3, r3
 8018816:	b29b      	uxth	r3, r3
 8018818:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 801881c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8018820:	3301      	adds	r3, #1
 8018822:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 8018826:	e04f      	b.n	80188c8 <RegionUS915LinkAdrReq+0x25c>
                    }
                }
                // ChMask is not set
                else
                {
                    if( ( i % 2 ) == 0 )
 8018828:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801882c:	f003 0301 	and.w	r3, r3, #1
 8018830:	b2db      	uxtb	r3, r3
 8018832:	2b00      	cmp	r3, #0
 8018834:	d122      	bne.n	801887c <RegionUS915LinkAdrReq+0x210>
                    {
                        // Disable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] &= 0xFF00;
 8018836:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801883a:	005b      	lsls	r3, r3, #1
 801883c:	3358      	adds	r3, #88	; 0x58
 801883e:	443b      	add	r3, r7
 8018840:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8018844:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8018848:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 801884c:	b292      	uxth	r2, r2
 801884e:	005b      	lsls	r3, r3, #1
 8018850:	3358      	adds	r3, #88	; 0x58
 8018852:	443b      	add	r3, r7
 8018854:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 8018858:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801885c:	b21a      	sxth	r2, r3
 801885e:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 8018862:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8018866:	fa01 f303 	lsl.w	r3, r1, r3
 801886a:	b21b      	sxth	r3, r3
 801886c:	43db      	mvns	r3, r3
 801886e:	b21b      	sxth	r3, r3
 8018870:	4013      	ands	r3, r2
 8018872:	b21b      	sxth	r3, r3
 8018874:	b29b      	uxth	r3, r3
 8018876:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801887a:	e025      	b.n	80188c8 <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] &= 0x00FF;
 801887c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8018880:	005b      	lsls	r3, r3, #1
 8018882:	3358      	adds	r3, #88	; 0x58
 8018884:	443b      	add	r3, r7
 8018886:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801888a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801888e:	b2d2      	uxtb	r2, r2
 8018890:	b292      	uxth	r2, r2
 8018892:	005b      	lsls	r3, r3, #1
 8018894:	3358      	adds	r3, #88	; 0x58
 8018896:	443b      	add	r3, r7
 8018898:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 801889c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80188a0:	b21a      	sxth	r2, r3
 80188a2:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 80188a6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80188aa:	fa01 f303 	lsl.w	r3, r1, r3
 80188ae:	b21b      	sxth	r3, r3
 80188b0:	43db      	mvns	r3, r3
 80188b2:	b21b      	sxth	r3, r3
 80188b4:	4013      	ands	r3, r2
 80188b6:	b21b      	sxth	r3, r3
 80188b8:	b29b      	uxth	r3, r3
 80188ba:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 80188be:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80188c2:	3301      	adds	r3, #1
 80188c4:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
            for( uint8_t i = 0; i <= 7; i++ )
 80188c8:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80188cc:	3301      	adds	r3, #1
 80188ce:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 80188d2:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80188d6:	2b07      	cmp	r3, #7
 80188d8:	f67f af4c 	bls.w	8018774 <RegionUS915LinkAdrReq+0x108>
 80188dc:	e008      	b.n	80188f0 <RegionUS915LinkAdrReq+0x284>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 80188de:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80188e2:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80188e6:	005b      	lsls	r3, r3, #1
 80188e8:	3358      	adds	r3, #88	; 0x58
 80188ea:	443b      	add	r3, r7
 80188ec:	f823 2c18 	strh.w	r2, [r3, #-24]
    while( bytesProcessed < linkAdrReq->PayloadSize )
 80188f0:	68fb      	ldr	r3, [r7, #12]
 80188f2:	7a1b      	ldrb	r3, [r3, #8]
 80188f4:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 80188f8:	429a      	cmp	r2, r3
 80188fa:	f4ff aedd 	bcc.w	80186b8 <RegionUS915LinkAdrReq+0x4c>
 80188fe:	e002      	b.n	8018906 <RegionUS915LinkAdrReq+0x29a>
 8018900:	20001adc 	.word	0x20001adc
            break; // break loop, since no more request has been found
 8018904:	bf00      	nop
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 8018906:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 801890a:	2b03      	cmp	r3, #3
 801890c:	dc0f      	bgt.n	801892e <RegionUS915LinkAdrReq+0x2c2>
 801890e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018912:	2204      	movs	r2, #4
 8018914:	2100      	movs	r1, #0
 8018916:	4618      	mov	r0, r3
 8018918:	f7fd f9a4 	bl	8015c64 <RegionCommonCountChannels>
 801891c:	4603      	mov	r3, r0
 801891e:	2b01      	cmp	r3, #1
 8018920:	d805      	bhi.n	801892e <RegionUS915LinkAdrReq+0x2c2>
    {
        status &= 0xFE; // Channel mask KO
 8018922:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018926:	f023 0301 	bic.w	r3, r3, #1
 801892a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801892e:	2302      	movs	r3, #2
 8018930:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8018934:	68fb      	ldr	r3, [r7, #12]
 8018936:	7a5b      	ldrb	r3, [r3, #9]
 8018938:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
    phyParam = RegionUS915GetPhyParam( &getPhy );
 801893c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8018940:	4618      	mov	r0, r3
 8018942:	f7ff f90f 	bl	8017b64 <RegionUS915GetPhyParam>
 8018946:	4603      	mov	r3, r0
 8018948:	637b      	str	r3, [r7, #52]	; 0x34

    linkAdrVerifyParams.Status = status;
 801894a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801894e:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8018950:	68fb      	ldr	r3, [r7, #12]
 8018952:	7a9b      	ldrb	r3, [r3, #10]
 8018954:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8018956:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 801895a:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 801895c:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8018960:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8018962:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8018966:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8018968:	68fb      	ldr	r3, [r7, #12]
 801896a:	f993 300b 	ldrsb.w	r3, [r3, #11]
 801896e:	777b      	strb	r3, [r7, #29]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8018970:	68fb      	ldr	r3, [r7, #12]
 8018972:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8018976:	77bb      	strb	r3, [r7, #30]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8018978:	68fb      	ldr	r3, [r7, #12]
 801897a:	7b5b      	ldrb	r3, [r3, #13]
 801897c:	b25b      	sxtb	r3, r3
 801897e:	77fb      	strb	r3, [r7, #31]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 8018980:	2348      	movs	r3, #72	; 0x48
 8018982:	f887 3020 	strb.w	r3, [r7, #32]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 8018986:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801898a:	627b      	str	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 801898c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801898e:	b25b      	sxtb	r3, r3
 8018990:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 8018994:	2304      	movs	r3, #4
 8018996:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 801899a:	4b3f      	ldr	r3, [pc, #252]	; (8018a98 <RegionUS915LinkAdrReq+0x42c>)
 801899c:	681b      	ldr	r3, [r3, #0]
 801899e:	62fb      	str	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 80189a0:	230e      	movs	r3, #14
 80189a2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 80189a6:	2300      	movs	r3, #0
 80189a8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 80189ac:	68fb      	ldr	r3, [r7, #12]
 80189ae:	681b      	ldr	r3, [r3, #0]
 80189b0:	617b      	str	r3, [r7, #20]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 80189b2:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80189b6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80189ba:	1c9a      	adds	r2, r3, #2
 80189bc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80189c0:	1c59      	adds	r1, r3, #1
 80189c2:	f107 0014 	add.w	r0, r7, #20
 80189c6:	4623      	mov	r3, r4
 80189c8:	f7fd fb0d 	bl	8015fe6 <RegionCommonLinkAdrReqVerifyParams>
 80189cc:	4603      	mov	r3, r0
 80189ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 80189d2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80189d6:	2b07      	cmp	r3, #7
 80189d8:	d147      	bne.n	8018a6a <RegionUS915LinkAdrReq+0x3fe>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 80189da:	4b2f      	ldr	r3, [pc, #188]	; (8018a98 <RegionUS915LinkAdrReq+0x42c>)
 80189dc:	681b      	ldr	r3, [r3, #0]
 80189de:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80189e2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80189e6:	2206      	movs	r2, #6
 80189e8:	4618      	mov	r0, r3
 80189ea:	f7fd f967 	bl	8015cbc <RegionCommonChanMaskCopy>

        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 80189ee:	4b2b      	ldr	r3, [pc, #172]	; (8018a9c <RegionUS915LinkAdrReq+0x430>)
 80189f0:	681b      	ldr	r3, [r3, #0]
 80189f2:	8819      	ldrh	r1, [r3, #0]
 80189f4:	4b28      	ldr	r3, [pc, #160]	; (8018a98 <RegionUS915LinkAdrReq+0x42c>)
 80189f6:	681b      	ldr	r3, [r3, #0]
 80189f8:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 80189fc:	4b27      	ldr	r3, [pc, #156]	; (8018a9c <RegionUS915LinkAdrReq+0x430>)
 80189fe:	681b      	ldr	r3, [r3, #0]
 8018a00:	400a      	ands	r2, r1
 8018a02:	b292      	uxth	r2, r2
 8018a04:	801a      	strh	r2, [r3, #0]
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 8018a06:	4b25      	ldr	r3, [pc, #148]	; (8018a9c <RegionUS915LinkAdrReq+0x430>)
 8018a08:	681b      	ldr	r3, [r3, #0]
 8018a0a:	8859      	ldrh	r1, [r3, #2]
 8018a0c:	4b22      	ldr	r3, [pc, #136]	; (8018a98 <RegionUS915LinkAdrReq+0x42c>)
 8018a0e:	681b      	ldr	r3, [r3, #0]
 8018a10:	f8b3 2362 	ldrh.w	r2, [r3, #866]	; 0x362
 8018a14:	4b21      	ldr	r3, [pc, #132]	; (8018a9c <RegionUS915LinkAdrReq+0x430>)
 8018a16:	681b      	ldr	r3, [r3, #0]
 8018a18:	400a      	ands	r2, r1
 8018a1a:	b292      	uxth	r2, r2
 8018a1c:	805a      	strh	r2, [r3, #2]
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 8018a1e:	4b1f      	ldr	r3, [pc, #124]	; (8018a9c <RegionUS915LinkAdrReq+0x430>)
 8018a20:	681b      	ldr	r3, [r3, #0]
 8018a22:	8899      	ldrh	r1, [r3, #4]
 8018a24:	4b1c      	ldr	r3, [pc, #112]	; (8018a98 <RegionUS915LinkAdrReq+0x42c>)
 8018a26:	681b      	ldr	r3, [r3, #0]
 8018a28:	f8b3 2364 	ldrh.w	r2, [r3, #868]	; 0x364
 8018a2c:	4b1b      	ldr	r3, [pc, #108]	; (8018a9c <RegionUS915LinkAdrReq+0x430>)
 8018a2e:	681b      	ldr	r3, [r3, #0]
 8018a30:	400a      	ands	r2, r1
 8018a32:	b292      	uxth	r2, r2
 8018a34:	809a      	strh	r2, [r3, #4]
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 8018a36:	4b19      	ldr	r3, [pc, #100]	; (8018a9c <RegionUS915LinkAdrReq+0x430>)
 8018a38:	681b      	ldr	r3, [r3, #0]
 8018a3a:	88d9      	ldrh	r1, [r3, #6]
 8018a3c:	4b16      	ldr	r3, [pc, #88]	; (8018a98 <RegionUS915LinkAdrReq+0x42c>)
 8018a3e:	681b      	ldr	r3, [r3, #0]
 8018a40:	f8b3 2366 	ldrh.w	r2, [r3, #870]	; 0x366
 8018a44:	4b15      	ldr	r3, [pc, #84]	; (8018a9c <RegionUS915LinkAdrReq+0x430>)
 8018a46:	681b      	ldr	r3, [r3, #0]
 8018a48:	400a      	ands	r2, r1
 8018a4a:	b292      	uxth	r2, r2
 8018a4c:	80da      	strh	r2, [r3, #6]
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8018a4e:	4b12      	ldr	r3, [pc, #72]	; (8018a98 <RegionUS915LinkAdrReq+0x42c>)
 8018a50:	681a      	ldr	r2, [r3, #0]
 8018a52:	4b12      	ldr	r3, [pc, #72]	; (8018a9c <RegionUS915LinkAdrReq+0x430>)
 8018a54:	681b      	ldr	r3, [r3, #0]
 8018a56:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 8018a5a:	811a      	strh	r2, [r3, #8]
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 8018a5c:	4b0e      	ldr	r3, [pc, #56]	; (8018a98 <RegionUS915LinkAdrReq+0x42c>)
 8018a5e:	681a      	ldr	r2, [r3, #0]
 8018a60:	4b0e      	ldr	r3, [pc, #56]	; (8018a9c <RegionUS915LinkAdrReq+0x430>)
 8018a62:	681b      	ldr	r3, [r3, #0]
 8018a64:	f8b2 236a 	ldrh.w	r2, [r2, #874]	; 0x36a
 8018a68:	815a      	strh	r2, [r3, #10]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8018a6a:	f997 204d 	ldrsb.w	r2, [r7, #77]	; 0x4d
 8018a6e:	68bb      	ldr	r3, [r7, #8]
 8018a70:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8018a72:	f997 204e 	ldrsb.w	r2, [r7, #78]	; 0x4e
 8018a76:	687b      	ldr	r3, [r7, #4]
 8018a78:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8018a7a:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8018a7e:	683b      	ldr	r3, [r7, #0]
 8018a80:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8018a82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018a84:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8018a88:	701a      	strb	r2, [r3, #0]

#endif /* REGION_US915 */
    return status;
 8018a8a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8018a8e:	4618      	mov	r0, r3
 8018a90:	375c      	adds	r7, #92	; 0x5c
 8018a92:	46bd      	mov	sp, r7
 8018a94:	bd90      	pop	{r4, r7, pc}
 8018a96:	bf00      	nop
 8018a98:	20001adc 	.word	0x20001adc
 8018a9c:	20001ad8 	.word	0x20001ad8

08018aa0 <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8018aa0:	b580      	push	{r7, lr}
 8018aa2:	b084      	sub	sp, #16
 8018aa4:	af00      	add	r7, sp, #0
 8018aa6:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8018aa8:	2307      	movs	r3, #7
 8018aaa:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8018aac:	687b      	ldr	r3, [r7, #4]
 8018aae:	685b      	ldr	r3, [r3, #4]
 8018ab0:	4618      	mov	r0, r3
 8018ab2:	f7fe ffe3 	bl	8017a7c <VerifyRfFreq>
 8018ab6:	4603      	mov	r3, r0
 8018ab8:	f083 0301 	eor.w	r3, r3, #1
 8018abc:	b2db      	uxtb	r3, r3
 8018abe:	2b00      	cmp	r3, #0
 8018ac0:	d003      	beq.n	8018aca <RegionUS915RxParamSetupReq+0x2a>
    {
        status &= 0xFE; // Channel frequency KO
 8018ac2:	7bfb      	ldrb	r3, [r7, #15]
 8018ac4:	f023 0301 	bic.w	r3, r3, #1
 8018ac8:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 8018aca:	687b      	ldr	r3, [r7, #4]
 8018acc:	f993 3000 	ldrsb.w	r3, [r3]
 8018ad0:	220d      	movs	r2, #13
 8018ad2:	2108      	movs	r1, #8
 8018ad4:	4618      	mov	r0, r3
 8018ad6:	f7fd f874 	bl	8015bc2 <RegionCommonValueInRange>
 8018ada:	4603      	mov	r3, r0
 8018adc:	2b00      	cmp	r3, #0
 8018ade:	d103      	bne.n	8018ae8 <RegionUS915RxParamSetupReq+0x48>
    {
        status &= 0xFD; // Datarate KO
 8018ae0:	7bfb      	ldrb	r3, [r7, #15]
 8018ae2:	f023 0302 	bic.w	r3, r3, #2
 8018ae6:	73fb      	strb	r3, [r7, #15]
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8018ae8:	687b      	ldr	r3, [r7, #4]
 8018aea:	f993 3000 	ldrsb.w	r3, [r3]
 8018aee:	2207      	movs	r2, #7
 8018af0:	2105      	movs	r1, #5
 8018af2:	4618      	mov	r0, r3
 8018af4:	f7fd f865 	bl	8015bc2 <RegionCommonValueInRange>
 8018af8:	4603      	mov	r3, r0
 8018afa:	2b01      	cmp	r3, #1
 8018afc:	d004      	beq.n	8018b08 <RegionUS915RxParamSetupReq+0x68>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 8018afe:	687b      	ldr	r3, [r7, #4]
 8018b00:	f993 3000 	ldrsb.w	r3, [r3]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8018b04:	2b0d      	cmp	r3, #13
 8018b06:	dd03      	ble.n	8018b10 <RegionUS915RxParamSetupReq+0x70>
    {
        status &= 0xFD; // Datarate KO
 8018b08:	7bfb      	ldrb	r3, [r7, #15]
 8018b0a:	f023 0302 	bic.w	r3, r3, #2
 8018b0e:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 8018b10:	687b      	ldr	r3, [r7, #4]
 8018b12:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018b16:	2203      	movs	r2, #3
 8018b18:	2100      	movs	r1, #0
 8018b1a:	4618      	mov	r0, r3
 8018b1c:	f7fd f851 	bl	8015bc2 <RegionCommonValueInRange>
 8018b20:	4603      	mov	r3, r0
 8018b22:	2b00      	cmp	r3, #0
 8018b24:	d103      	bne.n	8018b2e <RegionUS915RxParamSetupReq+0x8e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8018b26:	7bfb      	ldrb	r3, [r7, #15]
 8018b28:	f023 0304 	bic.w	r3, r3, #4
 8018b2c:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_US915 */
    return status;
 8018b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8018b30:	4618      	mov	r0, r3
 8018b32:	3710      	adds	r7, #16
 8018b34:	46bd      	mov	sp, r7
 8018b36:	bd80      	pop	{r7, pc}

08018b38 <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8018b38:	b480      	push	{r7}
 8018b3a:	b083      	sub	sp, #12
 8018b3c:	af00      	add	r7, sp, #0
 8018b3e:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8018b40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8018b44:	4618      	mov	r0, r3
 8018b46:	370c      	adds	r7, #12
 8018b48:	46bd      	mov	sp, r7
 8018b4a:	bc80      	pop	{r7}
 8018b4c:	4770      	bx	lr

08018b4e <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8018b4e:	b480      	push	{r7}
 8018b50:	b083      	sub	sp, #12
 8018b52:	af00      	add	r7, sp, #0
 8018b54:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8018b56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8018b5a:	4618      	mov	r0, r3
 8018b5c:	370c      	adds	r7, #12
 8018b5e:	46bd      	mov	sp, r7
 8018b60:	bc80      	pop	{r7}
 8018b62:	4770      	bx	lr

08018b64 <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8018b64:	b480      	push	{r7}
 8018b66:	b083      	sub	sp, #12
 8018b68:	af00      	add	r7, sp, #0
 8018b6a:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8018b6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8018b70:	4618      	mov	r0, r3
 8018b72:	370c      	adds	r7, #12
 8018b74:	46bd      	mov	sp, r7
 8018b76:	bc80      	pop	{r7}
 8018b78:	4770      	bx	lr
	...

08018b7c <RegionUS915AlternateDr>:

int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8018b7c:	b480      	push	{r7}
 8018b7e:	b083      	sub	sp, #12
 8018b80:	af00      	add	r7, sp, #0
 8018b82:	4603      	mov	r3, r0
 8018b84:	460a      	mov	r2, r1
 8018b86:	71fb      	strb	r3, [r7, #7]
 8018b88:	4613      	mov	r3, r2
 8018b8a:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 8018b8c:	79bb      	ldrb	r3, [r7, #6]
 8018b8e:	2b00      	cmp	r3, #0
 8018b90:	d106      	bne.n	8018ba0 <RegionUS915AlternateDr+0x24>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 8018b92:	4b13      	ldr	r3, [pc, #76]	; (8018be0 <RegionUS915AlternateDr+0x64>)
 8018b94:	681b      	ldr	r3, [r3, #0]
 8018b96:	7b5a      	ldrb	r2, [r3, #13]
 8018b98:	3201      	adds	r2, #1
 8018b9a:	b2d2      	uxtb	r2, r2
 8018b9c:	735a      	strb	r2, [r3, #13]
 8018b9e:	e005      	b.n	8018bac <RegionUS915AlternateDr+0x30>
    }
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
 8018ba0:	4b0f      	ldr	r3, [pc, #60]	; (8018be0 <RegionUS915AlternateDr+0x64>)
 8018ba2:	681b      	ldr	r3, [r3, #0]
 8018ba4:	7b5a      	ldrb	r2, [r3, #13]
 8018ba6:	3a01      	subs	r2, #1
 8018ba8:	b2d2      	uxtb	r2, r2
 8018baa:	735a      	strb	r2, [r3, #13]
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 8018bac:	4b0c      	ldr	r3, [pc, #48]	; (8018be0 <RegionUS915AlternateDr+0x64>)
 8018bae:	681b      	ldr	r3, [r3, #0]
 8018bb0:	7b5a      	ldrb	r2, [r3, #13]
 8018bb2:	4b0c      	ldr	r3, [pc, #48]	; (8018be4 <RegionUS915AlternateDr+0x68>)
 8018bb4:	fba3 1302 	umull	r1, r3, r3, r2
 8018bb8:	0859      	lsrs	r1, r3, #1
 8018bba:	460b      	mov	r3, r1
 8018bbc:	00db      	lsls	r3, r3, #3
 8018bbe:	440b      	add	r3, r1
 8018bc0:	1ad3      	subs	r3, r2, r3
 8018bc2:	b2db      	uxtb	r3, r3
 8018bc4:	2b00      	cmp	r3, #0
 8018bc6:	d102      	bne.n	8018bce <RegionUS915AlternateDr+0x52>
    {
        // Use DR_4 every 9th times.
        currentDr = DR_4;
 8018bc8:	2304      	movs	r3, #4
 8018bca:	71fb      	strb	r3, [r7, #7]
 8018bcc:	e001      	b.n	8018bd2 <RegionUS915AlternateDr+0x56>
    }
    else
    {
        currentDr = DR_0;
 8018bce:	2300      	movs	r3, #0
 8018bd0:	71fb      	strb	r3, [r7, #7]
    }
    return currentDr;
 8018bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_US915 */
}
 8018bd6:	4618      	mov	r0, r3
 8018bd8:	370c      	adds	r7, #12
 8018bda:	46bd      	mov	sp, r7
 8018bdc:	bc80      	pop	{r7}
 8018bde:	4770      	bx	lr
 8018be0:	20001ad8 	.word	0x20001ad8
 8018be4:	38e38e39 	.word	0x38e38e39

08018be8 <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8018be8:	b580      	push	{r7, lr}
 8018bea:	b0a8      	sub	sp, #160	; 0xa0
 8018bec:	af02      	add	r7, sp, #8
 8018bee:	60f8      	str	r0, [r7, #12]
 8018bf0:	60b9      	str	r1, [r7, #8]
 8018bf2:	607a      	str	r2, [r7, #4]
 8018bf4:	603b      	str	r3, [r7, #0]
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 8018bf6:	2300      	movs	r3, #0
 8018bf8:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
    uint8_t nbRestrictedChannels = 0;
 8018bfc:	2300      	movs	r3, #0
 8018bfe:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 8018c02:	2300      	movs	r3, #0
 8018c04:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018c06:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8018c0a:	2244      	movs	r2, #68	; 0x44
 8018c0c:	2100      	movs	r1, #0
 8018c0e:	4618      	mov	r0, r3
 8018c10:	f004 ff5e 	bl	801dad0 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8018c14:	230c      	movs	r3, #12
 8018c16:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 8018c1a:	4b67      	ldr	r3, [pc, #412]	; (8018db8 <RegionUS915NextChannel+0x1d0>)
 8018c1c:	681b      	ldr	r3, [r3, #0]
 8018c1e:	2204      	movs	r2, #4
 8018c20:	2100      	movs	r1, #0
 8018c22:	4618      	mov	r0, r3
 8018c24:	f7fd f81e 	bl	8015c64 <RegionCommonCountChannels>
 8018c28:	4603      	mov	r3, r0
 8018c2a:	2b00      	cmp	r3, #0
 8018c2c:	d10e      	bne.n	8018c4c <RegionUS915NextChannel+0x64>
    { // Reactivate default channels
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 8018c2e:	4b62      	ldr	r3, [pc, #392]	; (8018db8 <RegionUS915NextChannel+0x1d0>)
 8018c30:	681b      	ldr	r3, [r3, #0]
 8018c32:	4618      	mov	r0, r3
 8018c34:	4b61      	ldr	r3, [pc, #388]	; (8018dbc <RegionUS915NextChannel+0x1d4>)
 8018c36:	681b      	ldr	r3, [r3, #0]
 8018c38:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8018c3c:	2204      	movs	r2, #4
 8018c3e:	4619      	mov	r1, r3
 8018c40:	f7fd f83c 	bl	8015cbc <RegionCommonChanMaskCopy>

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8018c44:	4b5c      	ldr	r3, [pc, #368]	; (8018db8 <RegionUS915NextChannel+0x1d0>)
 8018c46:	681b      	ldr	r3, [r3, #0]
 8018c48:	2200      	movs	r2, #0
 8018c4a:	731a      	strb	r2, [r3, #12]
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 8018c4c:	68fb      	ldr	r3, [r7, #12]
 8018c4e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018c52:	2b03      	cmp	r3, #3
 8018c54:	dd0c      	ble.n	8018c70 <RegionUS915NextChannel+0x88>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 8018c56:	4b58      	ldr	r3, [pc, #352]	; (8018db8 <RegionUS915NextChannel+0x1d0>)
 8018c58:	681b      	ldr	r3, [r3, #0]
 8018c5a:	891b      	ldrh	r3, [r3, #8]
 8018c5c:	b2db      	uxtb	r3, r3
 8018c5e:	2b00      	cmp	r3, #0
 8018c60:	d106      	bne.n	8018c70 <RegionUS915NextChannel+0x88>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8018c62:	4b56      	ldr	r3, [pc, #344]	; (8018dbc <RegionUS915NextChannel+0x1d4>)
 8018c64:	681a      	ldr	r2, [r3, #0]
 8018c66:	4b54      	ldr	r3, [pc, #336]	; (8018db8 <RegionUS915NextChannel+0x1d0>)
 8018c68:	681b      	ldr	r3, [r3, #0]
 8018c6a:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 8018c6e:	811a      	strh	r2, [r3, #8]
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8018c70:	68fb      	ldr	r3, [r7, #12]
 8018c72:	7a5b      	ldrb	r3, [r3, #9]
 8018c74:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8018c76:	68fb      	ldr	r3, [r7, #12]
 8018c78:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018c7c:	b2db      	uxtb	r3, r3
 8018c7e:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 8018c80:	4b4d      	ldr	r3, [pc, #308]	; (8018db8 <RegionUS915NextChannel+0x1d0>)
 8018c82:	681b      	ldr	r3, [r3, #0]
 8018c84:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8018c86:	4b4d      	ldr	r3, [pc, #308]	; (8018dbc <RegionUS915NextChannel+0x1d4>)
 8018c88:	681b      	ldr	r3, [r3, #0]
 8018c8a:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 8018c8c:	4b4c      	ldr	r3, [pc, #304]	; (8018dc0 <RegionUS915NextChannel+0x1d8>)
 8018c8e:	681b      	ldr	r3, [r3, #0]
 8018c90:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 8018c92:	2348      	movs	r3, #72	; 0x48
 8018c94:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = NULL;
 8018c96:	2300      	movs	r3, #0
 8018c98:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8018c9a:	68fb      	ldr	r3, [r7, #12]
 8018c9c:	681b      	ldr	r3, [r3, #0]
 8018c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8018ca0:	68fb      	ldr	r3, [r7, #12]
 8018ca2:	685b      	ldr	r3, [r3, #4]
 8018ca4:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8018ca6:	68fb      	ldr	r3, [r7, #12]
 8018ca8:	7a9b      	ldrb	r3, [r3, #10]
 8018caa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 8018cae:	2301      	movs	r3, #1
 8018cb0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8018cb4:	f107 0314 	add.w	r3, r7, #20
 8018cb8:	64bb      	str	r3, [r7, #72]	; 0x48

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8018cba:	68fa      	ldr	r2, [r7, #12]
 8018cbc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8018cc0:	320c      	adds	r2, #12
 8018cc2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018cc6:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8018cca:	68fb      	ldr	r3, [r7, #12]
 8018ccc:	7d1b      	ldrb	r3, [r3, #20]
 8018cce:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8018cd2:	68fb      	ldr	r3, [r7, #12]
 8018cd4:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8018cd8:	68fb      	ldr	r3, [r7, #12]
 8018cda:	8adb      	ldrh	r3, [r3, #22]
 8018cdc:	4619      	mov	r1, r3
 8018cde:	4610      	mov	r0, r2
 8018ce0:	f7fe ff10 	bl	8017b04 <GetTimeOnAir>
 8018ce4:	4603      	mov	r3, r0
 8018ce6:	647b      	str	r3, [r7, #68]	; 0x44
#endif /* REGION_VERSION */

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8018ce8:	f107 0195 	add.w	r1, r7, #149	; 0x95
 8018cec:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8018cf0:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8018cf4:	687b      	ldr	r3, [r7, #4]
 8018cf6:	9301      	str	r3, [sp, #4]
 8018cf8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8018cfc:	9300      	str	r3, [sp, #0]
 8018cfe:	460b      	mov	r3, r1
 8018d00:	6839      	ldr	r1, [r7, #0]
 8018d02:	f7fd fbc6 	bl	8016492 <RegionCommonIdentifyChannels>
 8018d06:	4603      	mov	r3, r0
 8018d08:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8018d0c:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8018d10:	2b00      	cmp	r3, #0
 8018d12:	d14a      	bne.n	8018daa <RegionUS915NextChannel+0x1c2>
    {
        if( nextChanParams->Joined == true )
 8018d14:	68fb      	ldr	r3, [r7, #12]
 8018d16:	7a5b      	ldrb	r3, [r3, #9]
 8018d18:	2b00      	cmp	r3, #0
 8018d1a:	d00e      	beq.n	8018d3a <RegionUS915NextChannel+0x152>
        {
            // Choose randomly on of the remaining channels
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8018d1c:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8018d20:	3b01      	subs	r3, #1
 8018d22:	4619      	mov	r1, r3
 8018d24:	2000      	movs	r0, #0
 8018d26:	f000 f89f 	bl	8018e68 <randr>
 8018d2a:	4603      	mov	r3, r0
 8018d2c:	3398      	adds	r3, #152	; 0x98
 8018d2e:	443b      	add	r3, r7
 8018d30:	f813 2c4c 	ldrb.w	r2, [r3, #-76]
 8018d34:	68bb      	ldr	r3, [r7, #8]
 8018d36:	701a      	strb	r2, [r3, #0]
 8018d38:	e02e      	b.n	8018d98 <RegionUS915NextChannel+0x1b0>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 8018d3a:	68fb      	ldr	r3, [r7, #12]
 8018d3c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018d40:	2b00      	cmp	r3, #0
 8018d42:	d10e      	bne.n	8018d62 <RegionUS915NextChannel+0x17a>
            {
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 8018d44:	4b1c      	ldr	r3, [pc, #112]	; (8018db8 <RegionUS915NextChannel+0x1d0>)
 8018d46:	681b      	ldr	r3, [r3, #0]
 8018d48:	4618      	mov	r0, r3
                    &RegionNvmGroup1->JoinChannelGroupsCurrentIndex, channel ) == LORAMAC_STATUS_PARAMETER_INVALID )
 8018d4a:	4b1b      	ldr	r3, [pc, #108]	; (8018db8 <RegionUS915NextChannel+0x1d0>)
 8018d4c:	681b      	ldr	r3, [r3, #0]
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 8018d4e:	330c      	adds	r3, #12
 8018d50:	68ba      	ldr	r2, [r7, #8]
 8018d52:	4619      	mov	r1, r3
 8018d54:	f7fc fcf0 	bl	8015738 <RegionBaseUSComputeNext125kHzJoinChannel>
 8018d58:	4603      	mov	r3, r0
 8018d5a:	2b03      	cmp	r3, #3
 8018d5c:	d11c      	bne.n	8018d98 <RegionUS915NextChannel+0x1b0>
                {
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 8018d5e:	2303      	movs	r3, #3
 8018d60:	e025      	b.n	8018dae <RegionUS915NextChannel+0x1c6>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 8018d62:	2300      	movs	r3, #0
 8018d64:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 8018d68:	e004      	b.n	8018d74 <RegionUS915NextChannel+0x18c>
                {
                    i++;
 8018d6a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8018d6e:	3301      	adds	r3, #1
 8018d70:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 8018d74:	4b10      	ldr	r3, [pc, #64]	; (8018db8 <RegionUS915NextChannel+0x1d0>)
 8018d76:	681b      	ldr	r3, [r3, #0]
 8018d78:	891b      	ldrh	r3, [r3, #8]
 8018d7a:	b2da      	uxtb	r2, r3
 8018d7c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8018d80:	fa42 f303 	asr.w	r3, r2, r3
 8018d84:	f003 0301 	and.w	r3, r3, #1
 8018d88:	2b00      	cmp	r3, #0
 8018d8a:	d0ee      	beq.n	8018d6a <RegionUS915NextChannel+0x182>
                }
                *channel = 64 + i;
 8018d8c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8018d90:	3340      	adds	r3, #64	; 0x40
 8018d92:	b2da      	uxtb	r2, r3
 8018d94:	68bb      	ldr	r3, [r7, #8]
 8018d96:	701a      	strb	r2, [r3, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 8018d98:	4b07      	ldr	r3, [pc, #28]	; (8018db8 <RegionUS915NextChannel+0x1d0>)
 8018d9a:	681b      	ldr	r3, [r3, #0]
 8018d9c:	4618      	mov	r0, r3
 8018d9e:	68bb      	ldr	r3, [r7, #8]
 8018da0:	781b      	ldrb	r3, [r3, #0]
 8018da2:	2248      	movs	r2, #72	; 0x48
 8018da4:	4619      	mov	r1, r3
 8018da6:	f7fc ff29 	bl	8015bfc <RegionCommonChanDisable>
    }
    return status;
 8018daa:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 8018dae:	4618      	mov	r0, r3
 8018db0:	3798      	adds	r7, #152	; 0x98
 8018db2:	46bd      	mov	sp, r7
 8018db4:	bd80      	pop	{r7, pc}
 8018db6:	bf00      	nop
 8018db8:	20001ad8 	.word	0x20001ad8
 8018dbc:	20001adc 	.word	0x20001adc
 8018dc0:	20001ae0 	.word	0x20001ae0

08018dc4 <RegionUS915ApplyDrOffset>:
#endif /* REGION_US915 */
}
#endif /* REGION_VERSION */

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8018dc4:	b480      	push	{r7}
 8018dc6:	b085      	sub	sp, #20
 8018dc8:	af00      	add	r7, sp, #0
 8018dca:	4603      	mov	r3, r0
 8018dcc:	71fb      	strb	r3, [r7, #7]
 8018dce:	460b      	mov	r3, r1
 8018dd0:	71bb      	strb	r3, [r7, #6]
 8018dd2:	4613      	mov	r3, r2
 8018dd4:	717b      	strb	r3, [r7, #5]
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 8018dd6:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8018dda:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8018dde:	4909      	ldr	r1, [pc, #36]	; (8018e04 <RegionUS915ApplyDrOffset+0x40>)
 8018de0:	0092      	lsls	r2, r2, #2
 8018de2:	440a      	add	r2, r1
 8018de4:	4413      	add	r3, r2
 8018de6:	781b      	ldrb	r3, [r3, #0]
 8018de8:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8018dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018dee:	2b00      	cmp	r3, #0
 8018df0:	da01      	bge.n	8018df6 <RegionUS915ApplyDrOffset+0x32>
    {
        datarate = DR_0;
 8018df2:	2300      	movs	r3, #0
 8018df4:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8018df6:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_US915 */
}
 8018df8:	4618      	mov	r0, r3
 8018dfa:	3714      	adds	r7, #20
 8018dfc:	46bd      	mov	sp, r7
 8018dfe:	bc80      	pop	{r7}
 8018e00:	4770      	bx	lr
 8018e02:	bf00      	nop
 8018e04:	0801ea30 	.word	0x0801ea30

08018e08 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8018e08:	b480      	push	{r7}
 8018e0a:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8018e0c:	4b0d      	ldr	r3, [pc, #52]	; (8018e44 <rand1+0x3c>)
 8018e0e:	681b      	ldr	r3, [r3, #0]
 8018e10:	4a0d      	ldr	r2, [pc, #52]	; (8018e48 <rand1+0x40>)
 8018e12:	fb02 f303 	mul.w	r3, r2, r3
 8018e16:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8018e1a:	3339      	adds	r3, #57	; 0x39
 8018e1c:	4a09      	ldr	r2, [pc, #36]	; (8018e44 <rand1+0x3c>)
 8018e1e:	6013      	str	r3, [r2, #0]
 8018e20:	4b08      	ldr	r3, [pc, #32]	; (8018e44 <rand1+0x3c>)
 8018e22:	681a      	ldr	r2, [r3, #0]
 8018e24:	2303      	movs	r3, #3
 8018e26:	fba3 1302 	umull	r1, r3, r3, r2
 8018e2a:	1ad1      	subs	r1, r2, r3
 8018e2c:	0849      	lsrs	r1, r1, #1
 8018e2e:	440b      	add	r3, r1
 8018e30:	0f99      	lsrs	r1, r3, #30
 8018e32:	460b      	mov	r3, r1
 8018e34:	07db      	lsls	r3, r3, #31
 8018e36:	1a5b      	subs	r3, r3, r1
 8018e38:	1ad1      	subs	r1, r2, r3
 8018e3a:	460b      	mov	r3, r1
}
 8018e3c:	4618      	mov	r0, r3
 8018e3e:	46bd      	mov	sp, r7
 8018e40:	bc80      	pop	{r7}
 8018e42:	4770      	bx	lr
 8018e44:	20000130 	.word	0x20000130
 8018e48:	41c64e6d 	.word	0x41c64e6d

08018e4c <srand1>:

void srand1( uint32_t seed )
{
 8018e4c:	b480      	push	{r7}
 8018e4e:	b083      	sub	sp, #12
 8018e50:	af00      	add	r7, sp, #0
 8018e52:	6078      	str	r0, [r7, #4]
    next = seed;
 8018e54:	4a03      	ldr	r2, [pc, #12]	; (8018e64 <srand1+0x18>)
 8018e56:	687b      	ldr	r3, [r7, #4]
 8018e58:	6013      	str	r3, [r2, #0]
}
 8018e5a:	bf00      	nop
 8018e5c:	370c      	adds	r7, #12
 8018e5e:	46bd      	mov	sp, r7
 8018e60:	bc80      	pop	{r7}
 8018e62:	4770      	bx	lr
 8018e64:	20000130 	.word	0x20000130

08018e68 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8018e68:	b580      	push	{r7, lr}
 8018e6a:	b082      	sub	sp, #8
 8018e6c:	af00      	add	r7, sp, #0
 8018e6e:	6078      	str	r0, [r7, #4]
 8018e70:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8018e72:	f7ff ffc9 	bl	8018e08 <rand1>
 8018e76:	4602      	mov	r2, r0
 8018e78:	6839      	ldr	r1, [r7, #0]
 8018e7a:	687b      	ldr	r3, [r7, #4]
 8018e7c:	1acb      	subs	r3, r1, r3
 8018e7e:	3301      	adds	r3, #1
 8018e80:	fb92 f1f3 	sdiv	r1, r2, r3
 8018e84:	fb01 f303 	mul.w	r3, r1, r3
 8018e88:	1ad2      	subs	r2, r2, r3
 8018e8a:	687b      	ldr	r3, [r7, #4]
 8018e8c:	4413      	add	r3, r2
}
 8018e8e:	4618      	mov	r0, r3
 8018e90:	3708      	adds	r7, #8
 8018e92:	46bd      	mov	sp, r7
 8018e94:	bd80      	pop	{r7, pc}

08018e96 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8018e96:	b480      	push	{r7}
 8018e98:	b085      	sub	sp, #20
 8018e9a:	af00      	add	r7, sp, #0
 8018e9c:	60f8      	str	r0, [r7, #12]
 8018e9e:	60b9      	str	r1, [r7, #8]
 8018ea0:	4613      	mov	r3, r2
 8018ea2:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8018ea4:	e007      	b.n	8018eb6 <memcpy1+0x20>
    {
        *dst++ = *src++;
 8018ea6:	68ba      	ldr	r2, [r7, #8]
 8018ea8:	1c53      	adds	r3, r2, #1
 8018eaa:	60bb      	str	r3, [r7, #8]
 8018eac:	68fb      	ldr	r3, [r7, #12]
 8018eae:	1c59      	adds	r1, r3, #1
 8018eb0:	60f9      	str	r1, [r7, #12]
 8018eb2:	7812      	ldrb	r2, [r2, #0]
 8018eb4:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8018eb6:	88fb      	ldrh	r3, [r7, #6]
 8018eb8:	1e5a      	subs	r2, r3, #1
 8018eba:	80fa      	strh	r2, [r7, #6]
 8018ebc:	2b00      	cmp	r3, #0
 8018ebe:	d1f2      	bne.n	8018ea6 <memcpy1+0x10>
    }
}
 8018ec0:	bf00      	nop
 8018ec2:	bf00      	nop
 8018ec4:	3714      	adds	r7, #20
 8018ec6:	46bd      	mov	sp, r7
 8018ec8:	bc80      	pop	{r7}
 8018eca:	4770      	bx	lr

08018ecc <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8018ecc:	b480      	push	{r7}
 8018ece:	b085      	sub	sp, #20
 8018ed0:	af00      	add	r7, sp, #0
 8018ed2:	60f8      	str	r0, [r7, #12]
 8018ed4:	60b9      	str	r1, [r7, #8]
 8018ed6:	4613      	mov	r3, r2
 8018ed8:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 8018eda:	88fb      	ldrh	r3, [r7, #6]
 8018edc:	3b01      	subs	r3, #1
 8018ede:	68fa      	ldr	r2, [r7, #12]
 8018ee0:	4413      	add	r3, r2
 8018ee2:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8018ee4:	e007      	b.n	8018ef6 <memcpyr+0x2a>
    {
        *dst-- = *src++;
 8018ee6:	68ba      	ldr	r2, [r7, #8]
 8018ee8:	1c53      	adds	r3, r2, #1
 8018eea:	60bb      	str	r3, [r7, #8]
 8018eec:	68fb      	ldr	r3, [r7, #12]
 8018eee:	1e59      	subs	r1, r3, #1
 8018ef0:	60f9      	str	r1, [r7, #12]
 8018ef2:	7812      	ldrb	r2, [r2, #0]
 8018ef4:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8018ef6:	88fb      	ldrh	r3, [r7, #6]
 8018ef8:	1e5a      	subs	r2, r3, #1
 8018efa:	80fa      	strh	r2, [r7, #6]
 8018efc:	2b00      	cmp	r3, #0
 8018efe:	d1f2      	bne.n	8018ee6 <memcpyr+0x1a>
    }
}
 8018f00:	bf00      	nop
 8018f02:	bf00      	nop
 8018f04:	3714      	adds	r7, #20
 8018f06:	46bd      	mov	sp, r7
 8018f08:	bc80      	pop	{r7}
 8018f0a:	4770      	bx	lr

08018f0c <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8018f0c:	b480      	push	{r7}
 8018f0e:	b083      	sub	sp, #12
 8018f10:	af00      	add	r7, sp, #0
 8018f12:	6078      	str	r0, [r7, #4]
 8018f14:	460b      	mov	r3, r1
 8018f16:	70fb      	strb	r3, [r7, #3]
 8018f18:	4613      	mov	r3, r2
 8018f1a:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8018f1c:	e004      	b.n	8018f28 <memset1+0x1c>
    {
        *dst++ = value;
 8018f1e:	687b      	ldr	r3, [r7, #4]
 8018f20:	1c5a      	adds	r2, r3, #1
 8018f22:	607a      	str	r2, [r7, #4]
 8018f24:	78fa      	ldrb	r2, [r7, #3]
 8018f26:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8018f28:	883b      	ldrh	r3, [r7, #0]
 8018f2a:	1e5a      	subs	r2, r3, #1
 8018f2c:	803a      	strh	r2, [r7, #0]
 8018f2e:	2b00      	cmp	r3, #0
 8018f30:	d1f5      	bne.n	8018f1e <memset1+0x12>
    }
}
 8018f32:	bf00      	nop
 8018f34:	bf00      	nop
 8018f36:	370c      	adds	r7, #12
 8018f38:	46bd      	mov	sp, r7
 8018f3a:	bc80      	pop	{r7}
 8018f3c:	4770      	bx	lr
	...

08018f40 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8018f40:	b480      	push	{r7}
 8018f42:	b085      	sub	sp, #20
 8018f44:	af00      	add	r7, sp, #0
 8018f46:	6078      	str	r0, [r7, #4]
 8018f48:	460b      	mov	r3, r1
 8018f4a:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 8018f4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018f50:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 8018f52:	687b      	ldr	r3, [r7, #4]
 8018f54:	2b00      	cmp	r3, #0
 8018f56:	d101      	bne.n	8018f5c <Crc32+0x1c>
    {
        return 0;
 8018f58:	2300      	movs	r3, #0
 8018f5a:	e026      	b.n	8018faa <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 8018f5c:	2300      	movs	r3, #0
 8018f5e:	817b      	strh	r3, [r7, #10]
 8018f60:	e01d      	b.n	8018f9e <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 8018f62:	897b      	ldrh	r3, [r7, #10]
 8018f64:	687a      	ldr	r2, [r7, #4]
 8018f66:	4413      	add	r3, r2
 8018f68:	781b      	ldrb	r3, [r3, #0]
 8018f6a:	461a      	mov	r2, r3
 8018f6c:	68fb      	ldr	r3, [r7, #12]
 8018f6e:	4053      	eors	r3, r2
 8018f70:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8018f72:	2300      	movs	r3, #0
 8018f74:	813b      	strh	r3, [r7, #8]
 8018f76:	e00c      	b.n	8018f92 <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8018f78:	68fb      	ldr	r3, [r7, #12]
 8018f7a:	085a      	lsrs	r2, r3, #1
 8018f7c:	68fb      	ldr	r3, [r7, #12]
 8018f7e:	f003 0301 	and.w	r3, r3, #1
 8018f82:	425b      	negs	r3, r3
 8018f84:	490b      	ldr	r1, [pc, #44]	; (8018fb4 <Crc32+0x74>)
 8018f86:	400b      	ands	r3, r1
 8018f88:	4053      	eors	r3, r2
 8018f8a:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8018f8c:	893b      	ldrh	r3, [r7, #8]
 8018f8e:	3301      	adds	r3, #1
 8018f90:	813b      	strh	r3, [r7, #8]
 8018f92:	893b      	ldrh	r3, [r7, #8]
 8018f94:	2b07      	cmp	r3, #7
 8018f96:	d9ef      	bls.n	8018f78 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 8018f98:	897b      	ldrh	r3, [r7, #10]
 8018f9a:	3301      	adds	r3, #1
 8018f9c:	817b      	strh	r3, [r7, #10]
 8018f9e:	897a      	ldrh	r2, [r7, #10]
 8018fa0:	887b      	ldrh	r3, [r7, #2]
 8018fa2:	429a      	cmp	r2, r3
 8018fa4:	d3dd      	bcc.n	8018f62 <Crc32+0x22>
        }
    }

    return ~crc;
 8018fa6:	68fb      	ldr	r3, [r7, #12]
 8018fa8:	43db      	mvns	r3, r3
}
 8018faa:	4618      	mov	r0, r3
 8018fac:	3714      	adds	r7, #20
 8018fae:	46bd      	mov	sp, r7
 8018fb0:	bc80      	pop	{r7}
 8018fb2:	4770      	bx	lr
 8018fb4:	edb88320 	.word	0xedb88320

08018fb8 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8018fb8:	b580      	push	{r7, lr}
 8018fba:	b084      	sub	sp, #16
 8018fbc:	af02      	add	r7, sp, #8
 8018fbe:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8018fc0:	4a24      	ldr	r2, [pc, #144]	; (8019054 <RadioInit+0x9c>)
 8018fc2:	687b      	ldr	r3, [r7, #4]
 8018fc4:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8018fc6:	4b24      	ldr	r3, [pc, #144]	; (8019058 <RadioInit+0xa0>)
 8018fc8:	2200      	movs	r2, #0
 8018fca:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8018fcc:	4b22      	ldr	r3, [pc, #136]	; (8019058 <RadioInit+0xa0>)
 8018fce:	2200      	movs	r2, #0
 8018fd0:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8018fd2:	4b21      	ldr	r3, [pc, #132]	; (8019058 <RadioInit+0xa0>)
 8018fd4:	2200      	movs	r2, #0
 8018fd6:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8018fd8:	4b1f      	ldr	r3, [pc, #124]	; (8019058 <RadioInit+0xa0>)
 8018fda:	2200      	movs	r2, #0
 8018fdc:	659a      	str	r2, [r3, #88]	; 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 8018fde:	481f      	ldr	r0, [pc, #124]	; (801905c <RadioInit+0xa4>)
 8018fe0:	f001 ffc2 	bl	801af68 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8018fe4:	4b1c      	ldr	r3, [pc, #112]	; (8019058 <RadioInit+0xa0>)
 8018fe6:	2200      	movs	r2, #0
 8018fe8:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8018fea:	4b1b      	ldr	r3, [pc, #108]	; (8019058 <RadioInit+0xa0>)
 8018fec:	2200      	movs	r2, #0
 8018fee:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8018ff0:	f002 fa56 	bl	801b4a0 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8018ff4:	2100      	movs	r1, #0
 8018ff6:	2000      	movs	r0, #0
 8018ff8:	f002 fe22 	bl	801bc40 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8018ffc:	2204      	movs	r2, #4
 8018ffe:	2100      	movs	r1, #0
 8019000:	2001      	movs	r0, #1
 8019002:	f002 fbdf 	bl	801b7c4 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8019006:	2300      	movs	r3, #0
 8019008:	2200      	movs	r2, #0
 801900a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801900e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8019012:	f002 fb0f 	bl	801b634 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 8019016:	f000 fe99 	bl	8019d4c <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 801901a:	2300      	movs	r3, #0
 801901c:	9300      	str	r3, [sp, #0]
 801901e:	4b10      	ldr	r3, [pc, #64]	; (8019060 <RadioInit+0xa8>)
 8019020:	2200      	movs	r2, #0
 8019022:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8019026:	480f      	ldr	r0, [pc, #60]	; (8019064 <RadioInit+0xac>)
 8019028:	f004 f82c 	bl	801d084 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 801902c:	2300      	movs	r3, #0
 801902e:	9300      	str	r3, [sp, #0]
 8019030:	4b0d      	ldr	r3, [pc, #52]	; (8019068 <RadioInit+0xb0>)
 8019032:	2200      	movs	r2, #0
 8019034:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8019038:	480c      	ldr	r0, [pc, #48]	; (801906c <RadioInit+0xb4>)
 801903a:	f004 f823 	bl	801d084 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 801903e:	4809      	ldr	r0, [pc, #36]	; (8019064 <RadioInit+0xac>)
 8019040:	f004 f8c4 	bl	801d1cc <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8019044:	4809      	ldr	r0, [pc, #36]	; (801906c <RadioInit+0xb4>)
 8019046:	f004 f8c1 	bl	801d1cc <UTIL_TIMER_Stop>
}
 801904a:	bf00      	nop
 801904c:	3708      	adds	r7, #8
 801904e:	46bd      	mov	sp, r7
 8019050:	bd80      	pop	{r7, pc}
 8019052:	bf00      	nop
 8019054:	20001be4 	.word	0x20001be4
 8019058:	20001be8 	.word	0x20001be8
 801905c:	0801a145 	.word	0x0801a145
 8019060:	0801a0cd 	.word	0x0801a0cd
 8019064:	20001c44 	.word	0x20001c44
 8019068:	0801a0e1 	.word	0x0801a0e1
 801906c:	20001c5c 	.word	0x20001c5c

08019070 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8019070:	b580      	push	{r7, lr}
 8019072:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8019074:	f001 ffc0 	bl	801aff8 <SUBGRF_GetOperatingMode>
 8019078:	4603      	mov	r3, r0
 801907a:	2b07      	cmp	r3, #7
 801907c:	d00a      	beq.n	8019094 <RadioGetStatus+0x24>
 801907e:	2b07      	cmp	r3, #7
 8019080:	dc0a      	bgt.n	8019098 <RadioGetStatus+0x28>
 8019082:	2b04      	cmp	r3, #4
 8019084:	d002      	beq.n	801908c <RadioGetStatus+0x1c>
 8019086:	2b05      	cmp	r3, #5
 8019088:	d002      	beq.n	8019090 <RadioGetStatus+0x20>
 801908a:	e005      	b.n	8019098 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 801908c:	2302      	movs	r3, #2
 801908e:	e004      	b.n	801909a <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8019090:	2301      	movs	r3, #1
 8019092:	e002      	b.n	801909a <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8019094:	2303      	movs	r3, #3
 8019096:	e000      	b.n	801909a <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8019098:	2300      	movs	r3, #0
    }
}
 801909a:	4618      	mov	r0, r3
 801909c:	bd80      	pop	{r7, pc}
	...

080190a0 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 80190a0:	b580      	push	{r7, lr}
 80190a2:	b082      	sub	sp, #8
 80190a4:	af00      	add	r7, sp, #0
 80190a6:	4603      	mov	r3, r0
 80190a8:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 80190aa:	4a2a      	ldr	r2, [pc, #168]	; (8019154 <RadioSetModem+0xb4>)
 80190ac:	79fb      	ldrb	r3, [r7, #7]
 80190ae:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 80190b0:	79fb      	ldrb	r3, [r7, #7]
 80190b2:	4618      	mov	r0, r3
 80190b4:	f003 f997 	bl	801c3e6 <RFW_SetRadioModem>
    switch( modem )
 80190b8:	79fb      	ldrb	r3, [r7, #7]
 80190ba:	2b05      	cmp	r3, #5
 80190bc:	d80e      	bhi.n	80190dc <RadioSetModem+0x3c>
 80190be:	a201      	add	r2, pc, #4	; (adr r2, 80190c4 <RadioSetModem+0x24>)
 80190c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80190c4:	080190eb 	.word	0x080190eb
 80190c8:	080190f9 	.word	0x080190f9
 80190cc:	080190dd 	.word	0x080190dd
 80190d0:	0801911f 	.word	0x0801911f
 80190d4:	0801912d 	.word	0x0801912d
 80190d8:	0801913b 	.word	0x0801913b
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 80190dc:	2003      	movs	r0, #3
 80190de:	f002 fb4b 	bl	801b778 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80190e2:	4b1c      	ldr	r3, [pc, #112]	; (8019154 <RadioSetModem+0xb4>)
 80190e4:	2200      	movs	r2, #0
 80190e6:	735a      	strb	r2, [r3, #13]
        break;
 80190e8:	e02f      	b.n	801914a <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80190ea:	2000      	movs	r0, #0
 80190ec:	f002 fb44 	bl	801b778 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80190f0:	4b18      	ldr	r3, [pc, #96]	; (8019154 <RadioSetModem+0xb4>)
 80190f2:	2200      	movs	r2, #0
 80190f4:	735a      	strb	r2, [r3, #13]
        break;
 80190f6:	e028      	b.n	801914a <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 80190f8:	2001      	movs	r0, #1
 80190fa:	f002 fb3d 	bl	801b778 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 80190fe:	4b15      	ldr	r3, [pc, #84]	; (8019154 <RadioSetModem+0xb4>)
 8019100:	7b5a      	ldrb	r2, [r3, #13]
 8019102:	4b14      	ldr	r3, [pc, #80]	; (8019154 <RadioSetModem+0xb4>)
 8019104:	7b1b      	ldrb	r3, [r3, #12]
 8019106:	429a      	cmp	r2, r3
 8019108:	d01e      	beq.n	8019148 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 801910a:	4b12      	ldr	r3, [pc, #72]	; (8019154 <RadioSetModem+0xb4>)
 801910c:	7b1a      	ldrb	r2, [r3, #12]
 801910e:	4b11      	ldr	r3, [pc, #68]	; (8019154 <RadioSetModem+0xb4>)
 8019110:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8019112:	4b10      	ldr	r3, [pc, #64]	; (8019154 <RadioSetModem+0xb4>)
 8019114:	7b5b      	ldrb	r3, [r3, #13]
 8019116:	4618      	mov	r0, r3
 8019118:	f000 ffa2 	bl	801a060 <RadioSetPublicNetwork>
        }
        break;
 801911c:	e014      	b.n	8019148 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801911e:	2002      	movs	r0, #2
 8019120:	f002 fb2a 	bl	801b778 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8019124:	4b0b      	ldr	r3, [pc, #44]	; (8019154 <RadioSetModem+0xb4>)
 8019126:	2200      	movs	r2, #0
 8019128:	735a      	strb	r2, [r3, #13]
        break;
 801912a:	e00e      	b.n	801914a <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801912c:	2002      	movs	r0, #2
 801912e:	f002 fb23 	bl	801b778 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8019132:	4b08      	ldr	r3, [pc, #32]	; (8019154 <RadioSetModem+0xb4>)
 8019134:	2200      	movs	r2, #0
 8019136:	735a      	strb	r2, [r3, #13]
        break;
 8019138:	e007      	b.n	801914a <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801913a:	2000      	movs	r0, #0
 801913c:	f002 fb1c 	bl	801b778 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8019140:	4b04      	ldr	r3, [pc, #16]	; (8019154 <RadioSetModem+0xb4>)
 8019142:	2200      	movs	r2, #0
 8019144:	735a      	strb	r2, [r3, #13]
        break;
 8019146:	e000      	b.n	801914a <RadioSetModem+0xaa>
        break;
 8019148:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 801914a:	bf00      	nop
 801914c:	3708      	adds	r7, #8
 801914e:	46bd      	mov	sp, r7
 8019150:	bd80      	pop	{r7, pc}
 8019152:	bf00      	nop
 8019154:	20001be8 	.word	0x20001be8

08019158 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8019158:	b580      	push	{r7, lr}
 801915a:	b082      	sub	sp, #8
 801915c:	af00      	add	r7, sp, #0
 801915e:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8019160:	6878      	ldr	r0, [r7, #4]
 8019162:	f002 fac3 	bl	801b6ec <SUBGRF_SetRfFrequency>
}
 8019166:	bf00      	nop
 8019168:	3708      	adds	r7, #8
 801916a:	46bd      	mov	sp, r7
 801916c:	bd80      	pop	{r7, pc}

0801916e <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 801916e:	b580      	push	{r7, lr}
 8019170:	b090      	sub	sp, #64	; 0x40
 8019172:	af0a      	add	r7, sp, #40	; 0x28
 8019174:	60f8      	str	r0, [r7, #12]
 8019176:	60b9      	str	r1, [r7, #8]
 8019178:	603b      	str	r3, [r7, #0]
 801917a:	4613      	mov	r3, r2
 801917c:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 801917e:	2301      	movs	r3, #1
 8019180:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8019182:	2300      	movs	r3, #0
 8019184:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8019186:	2300      	movs	r3, #0
 8019188:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 801918a:	f000 fdf2 	bl	8019d72 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 801918e:	2000      	movs	r0, #0
 8019190:	f7ff ff86 	bl	80190a0 <RadioSetModem>

    RadioSetChannel( freq );
 8019194:	68f8      	ldr	r0, [r7, #12]
 8019196:	f7ff ffdf 	bl	8019158 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 801919a:	2301      	movs	r3, #1
 801919c:	9309      	str	r3, [sp, #36]	; 0x24
 801919e:	2300      	movs	r3, #0
 80191a0:	9308      	str	r3, [sp, #32]
 80191a2:	2300      	movs	r3, #0
 80191a4:	9307      	str	r3, [sp, #28]
 80191a6:	2300      	movs	r3, #0
 80191a8:	9306      	str	r3, [sp, #24]
 80191aa:	2300      	movs	r3, #0
 80191ac:	9305      	str	r3, [sp, #20]
 80191ae:	2300      	movs	r3, #0
 80191b0:	9304      	str	r3, [sp, #16]
 80191b2:	2300      	movs	r3, #0
 80191b4:	9303      	str	r3, [sp, #12]
 80191b6:	2300      	movs	r3, #0
 80191b8:	9302      	str	r3, [sp, #8]
 80191ba:	2303      	movs	r3, #3
 80191bc:	9301      	str	r3, [sp, #4]
 80191be:	68bb      	ldr	r3, [r7, #8]
 80191c0:	9300      	str	r3, [sp, #0]
 80191c2:	2300      	movs	r3, #0
 80191c4:	f44f 7216 	mov.w	r2, #600	; 0x258
 80191c8:	68b9      	ldr	r1, [r7, #8]
 80191ca:	2000      	movs	r0, #0
 80191cc:	f000 f83c 	bl	8019248 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 80191d0:	2000      	movs	r0, #0
 80191d2:	f000 fdd5 	bl	8019d80 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 80191d6:	f000 ff71 	bl	801a0bc <RadioGetWakeupTime>
 80191da:	4603      	mov	r3, r0
 80191dc:	4618      	mov	r0, r3
 80191de:	f7e9 f82f 	bl	8002240 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 80191e2:	f004 f90d 	bl	801d400 <UTIL_TIMER_GetCurrentTime>
 80191e6:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80191e8:	e00d      	b.n	8019206 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 80191ea:	2000      	movs	r0, #0
 80191ec:	f000 feb6 	bl	8019f5c <RadioRssi>
 80191f0:	4603      	mov	r3, r0
 80191f2:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 80191f4:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80191f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80191fc:	429a      	cmp	r2, r3
 80191fe:	dd02      	ble.n	8019206 <RadioIsChannelFree+0x98>
        {
            status = false;
 8019200:	2300      	movs	r3, #0
 8019202:	75fb      	strb	r3, [r7, #23]
            break;
 8019204:	e006      	b.n	8019214 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8019206:	6938      	ldr	r0, [r7, #16]
 8019208:	f004 f90c 	bl	801d424 <UTIL_TIMER_GetElapsedTime>
 801920c:	4602      	mov	r2, r0
 801920e:	683b      	ldr	r3, [r7, #0]
 8019210:	4293      	cmp	r3, r2
 8019212:	d8ea      	bhi.n	80191ea <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 8019214:	f000 fdad 	bl	8019d72 <RadioStandby>

    return status;
 8019218:	7dfb      	ldrb	r3, [r7, #23]
}
 801921a:	4618      	mov	r0, r3
 801921c:	3718      	adds	r7, #24
 801921e:	46bd      	mov	sp, r7
 8019220:	bd80      	pop	{r7, pc}

08019222 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8019222:	b580      	push	{r7, lr}
 8019224:	b082      	sub	sp, #8
 8019226:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8019228:	2300      	movs	r3, #0
 801922a:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801922c:	2300      	movs	r3, #0
 801922e:	2200      	movs	r2, #0
 8019230:	2100      	movs	r1, #0
 8019232:	2000      	movs	r0, #0
 8019234:	f002 f9fe 	bl	801b634 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8019238:	f001 ffaf 	bl	801b19a <SUBGRF_GetRandom>
 801923c:	6078      	str	r0, [r7, #4]

    return rnd;
 801923e:	687b      	ldr	r3, [r7, #4]
}
 8019240:	4618      	mov	r0, r3
 8019242:	3708      	adds	r7, #8
 8019244:	46bd      	mov	sp, r7
 8019246:	bd80      	pop	{r7, pc}

08019248 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8019248:	b580      	push	{r7, lr}
 801924a:	b08a      	sub	sp, #40	; 0x28
 801924c:	af00      	add	r7, sp, #0
 801924e:	60b9      	str	r1, [r7, #8]
 8019250:	607a      	str	r2, [r7, #4]
 8019252:	461a      	mov	r2, r3
 8019254:	4603      	mov	r3, r0
 8019256:	73fb      	strb	r3, [r7, #15]
 8019258:	4613      	mov	r3, r2
 801925a:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 801925c:	4ab9      	ldr	r2, [pc, #740]	; (8019544 <RadioSetRxConfig+0x2fc>)
 801925e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8019262:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 8019264:	f003 f87d 	bl	801c362 <RFW_DeInit>
    if( rxContinuous == true )
 8019268:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801926c:	2b00      	cmp	r3, #0
 801926e:	d001      	beq.n	8019274 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8019270:	2300      	movs	r3, #0
 8019272:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8019274:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8019278:	2b00      	cmp	r3, #0
 801927a:	d004      	beq.n	8019286 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 801927c:	4ab2      	ldr	r2, [pc, #712]	; (8019548 <RadioSetRxConfig+0x300>)
 801927e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8019282:	7013      	strb	r3, [r2, #0]
 8019284:	e002      	b.n	801928c <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8019286:	4bb0      	ldr	r3, [pc, #704]	; (8019548 <RadioSetRxConfig+0x300>)
 8019288:	22ff      	movs	r2, #255	; 0xff
 801928a:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 801928c:	7bfb      	ldrb	r3, [r7, #15]
 801928e:	2b05      	cmp	r3, #5
 8019290:	d009      	beq.n	80192a6 <RadioSetRxConfig+0x5e>
 8019292:	2b05      	cmp	r3, #5
 8019294:	f300 81d7 	bgt.w	8019646 <RadioSetRxConfig+0x3fe>
 8019298:	2b00      	cmp	r3, #0
 801929a:	f000 80bf 	beq.w	801941c <RadioSetRxConfig+0x1d4>
 801929e:	2b01      	cmp	r3, #1
 80192a0:	f000 8124 	beq.w	80194ec <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 80192a4:	e1cf      	b.n	8019646 <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 80192a6:	2001      	movs	r0, #1
 80192a8:	f002 f8bc 	bl	801b424 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80192ac:	4ba5      	ldr	r3, [pc, #660]	; (8019544 <RadioSetRxConfig+0x2fc>)
 80192ae:	2200      	movs	r2, #0
 80192b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80192b4:	4aa3      	ldr	r2, [pc, #652]	; (8019544 <RadioSetRxConfig+0x2fc>)
 80192b6:	687b      	ldr	r3, [r7, #4]
 80192b8:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 80192ba:	4ba2      	ldr	r3, [pc, #648]	; (8019544 <RadioSetRxConfig+0x2fc>)
 80192bc:	2209      	movs	r2, #9
 80192be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 80192c2:	4ba0      	ldr	r3, [pc, #640]	; (8019544 <RadioSetRxConfig+0x2fc>)
 80192c4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80192c8:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80192ca:	68b8      	ldr	r0, [r7, #8]
 80192cc:	f002 ff7c 	bl	801c1c8 <SUBGRF_GetFskBandwidthRegValue>
 80192d0:	4603      	mov	r3, r0
 80192d2:	461a      	mov	r2, r3
 80192d4:	4b9b      	ldr	r3, [pc, #620]	; (8019544 <RadioSetRxConfig+0x2fc>)
 80192d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80192da:	4b9a      	ldr	r3, [pc, #616]	; (8019544 <RadioSetRxConfig+0x2fc>)
 80192dc:	2200      	movs	r2, #0
 80192de:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80192e0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80192e2:	00db      	lsls	r3, r3, #3
 80192e4:	b29a      	uxth	r2, r3
 80192e6:	4b97      	ldr	r3, [pc, #604]	; (8019544 <RadioSetRxConfig+0x2fc>)
 80192e8:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 80192ea:	4b96      	ldr	r3, [pc, #600]	; (8019544 <RadioSetRxConfig+0x2fc>)
 80192ec:	2200      	movs	r2, #0
 80192ee:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 80192f0:	4b94      	ldr	r3, [pc, #592]	; (8019544 <RadioSetRxConfig+0x2fc>)
 80192f2:	2210      	movs	r2, #16
 80192f4:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80192f6:	4b93      	ldr	r3, [pc, #588]	; (8019544 <RadioSetRxConfig+0x2fc>)
 80192f8:	2200      	movs	r2, #0
 80192fa:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 80192fc:	4b91      	ldr	r3, [pc, #580]	; (8019544 <RadioSetRxConfig+0x2fc>)
 80192fe:	2200      	movs	r2, #0
 8019300:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8019302:	4b91      	ldr	r3, [pc, #580]	; (8019548 <RadioSetRxConfig+0x300>)
 8019304:	781a      	ldrb	r2, [r3, #0]
 8019306:	4b8f      	ldr	r3, [pc, #572]	; (8019544 <RadioSetRxConfig+0x2fc>)
 8019308:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801930a:	4b8e      	ldr	r3, [pc, #568]	; (8019544 <RadioSetRxConfig+0x2fc>)
 801930c:	2201      	movs	r2, #1
 801930e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8019310:	4b8c      	ldr	r3, [pc, #560]	; (8019544 <RadioSetRxConfig+0x2fc>)
 8019312:	2200      	movs	r2, #0
 8019314:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8019316:	2005      	movs	r0, #5
 8019318:	f7ff fec2 	bl	80190a0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801931c:	488b      	ldr	r0, [pc, #556]	; (801954c <RadioSetRxConfig+0x304>)
 801931e:	f002 fb1f 	bl	801b960 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019322:	488b      	ldr	r0, [pc, #556]	; (8019550 <RadioSetRxConfig+0x308>)
 8019324:	f002 fbee 	bl	801bb04 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8019328:	4a8a      	ldr	r2, [pc, #552]	; (8019554 <RadioSetRxConfig+0x30c>)
 801932a:	f107 031c 	add.w	r3, r7, #28
 801932e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019332:	e883 0003 	stmia.w	r3, {r0, r1}
 8019336:	f107 031c 	add.w	r3, r7, #28
 801933a:	4618      	mov	r0, r3
 801933c:	f001 feab 	bl	801b096 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8019340:	f240 10ff 	movw	r0, #511	; 0x1ff
 8019344:	f001 fef6 	bl	801b134 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8019348:	f640 00b8 	movw	r0, #2232	; 0x8b8
 801934c:	f000 fe25 	bl	8019f9a <RadioRead>
 8019350:	4603      	mov	r3, r0
 8019352:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 8019356:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801935a:	f023 0310 	bic.w	r3, r3, #16
 801935e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8019362:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019366:	4619      	mov	r1, r3
 8019368:	f640 00b8 	movw	r0, #2232	; 0x8b8
 801936c:	f000 fe03 	bl	8019f76 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8019370:	2104      	movs	r1, #4
 8019372:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8019376:	f000 fdfe 	bl	8019f76 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 801937a:	f640 009b 	movw	r0, #2203	; 0x89b
 801937e:	f000 fe0c 	bl	8019f9a <RadioRead>
 8019382:	4603      	mov	r3, r0
 8019384:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8019388:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801938c:	f023 031c 	bic.w	r3, r3, #28
 8019390:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8019394:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019398:	f043 0308 	orr.w	r3, r3, #8
 801939c:	b2db      	uxtb	r3, r3
 801939e:	4619      	mov	r1, r3
 80193a0:	f640 009b 	movw	r0, #2203	; 0x89b
 80193a4:	f000 fde7 	bl	8019f76 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 80193a8:	f240 60d1 	movw	r0, #1745	; 0x6d1
 80193ac:	f000 fdf5 	bl	8019f9a <RadioRead>
 80193b0:	4603      	mov	r3, r0
 80193b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80193b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80193ba:	f023 0318 	bic.w	r3, r3, #24
 80193be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 80193c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80193c6:	f043 0318 	orr.w	r3, r3, #24
 80193ca:	b2db      	uxtb	r3, r3
 80193cc:	4619      	mov	r1, r3
 80193ce:	f240 60d1 	movw	r0, #1745	; 0x6d1
 80193d2:	f000 fdd0 	bl	8019f76 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 80193d6:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80193da:	f000 fdde 	bl	8019f9a <RadioRead>
 80193de:	4603      	mov	r3, r0
 80193e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 80193e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80193e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80193ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 80193f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80193f4:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80193f8:	b2db      	uxtb	r3, r3
 80193fa:	4619      	mov	r1, r3
 80193fc:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8019400:	f000 fdb9 	bl	8019f76 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8019404:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8019406:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801940a:	fb02 f303 	mul.w	r3, r2, r3
 801940e:	461a      	mov	r2, r3
 8019410:	687b      	ldr	r3, [r7, #4]
 8019412:	fbb2 f3f3 	udiv	r3, r2, r3
 8019416:	4a4b      	ldr	r2, [pc, #300]	; (8019544 <RadioSetRxConfig+0x2fc>)
 8019418:	6093      	str	r3, [r2, #8]
            break;
 801941a:	e115      	b.n	8019648 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801941c:	2000      	movs	r0, #0
 801941e:	f002 f801 	bl	801b424 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8019422:	4b48      	ldr	r3, [pc, #288]	; (8019544 <RadioSetRxConfig+0x2fc>)
 8019424:	2200      	movs	r2, #0
 8019426:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801942a:	4a46      	ldr	r2, [pc, #280]	; (8019544 <RadioSetRxConfig+0x2fc>)
 801942c:	687b      	ldr	r3, [r7, #4]
 801942e:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8019430:	4b44      	ldr	r3, [pc, #272]	; (8019544 <RadioSetRxConfig+0x2fc>)
 8019432:	220b      	movs	r2, #11
 8019434:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8019438:	68b8      	ldr	r0, [r7, #8]
 801943a:	f002 fec5 	bl	801c1c8 <SUBGRF_GetFskBandwidthRegValue>
 801943e:	4603      	mov	r3, r0
 8019440:	461a      	mov	r2, r3
 8019442:	4b40      	ldr	r3, [pc, #256]	; (8019544 <RadioSetRxConfig+0x2fc>)
 8019444:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8019448:	4b3e      	ldr	r3, [pc, #248]	; (8019544 <RadioSetRxConfig+0x2fc>)
 801944a:	2200      	movs	r2, #0
 801944c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801944e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019450:	00db      	lsls	r3, r3, #3
 8019452:	b29a      	uxth	r2, r3
 8019454:	4b3b      	ldr	r3, [pc, #236]	; (8019544 <RadioSetRxConfig+0x2fc>)
 8019456:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8019458:	4b3a      	ldr	r3, [pc, #232]	; (8019544 <RadioSetRxConfig+0x2fc>)
 801945a:	2204      	movs	r2, #4
 801945c:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 801945e:	4b39      	ldr	r3, [pc, #228]	; (8019544 <RadioSetRxConfig+0x2fc>)
 8019460:	2218      	movs	r2, #24
 8019462:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8019464:	4b37      	ldr	r3, [pc, #220]	; (8019544 <RadioSetRxConfig+0x2fc>)
 8019466:	2200      	movs	r2, #0
 8019468:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801946a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801946e:	f083 0301 	eor.w	r3, r3, #1
 8019472:	b2db      	uxtb	r3, r3
 8019474:	461a      	mov	r2, r3
 8019476:	4b33      	ldr	r3, [pc, #204]	; (8019544 <RadioSetRxConfig+0x2fc>)
 8019478:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801947a:	4b33      	ldr	r3, [pc, #204]	; (8019548 <RadioSetRxConfig+0x300>)
 801947c:	781a      	ldrb	r2, [r3, #0]
 801947e:	4b31      	ldr	r3, [pc, #196]	; (8019544 <RadioSetRxConfig+0x2fc>)
 8019480:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8019482:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8019486:	2b00      	cmp	r3, #0
 8019488:	d003      	beq.n	8019492 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801948a:	4b2e      	ldr	r3, [pc, #184]	; (8019544 <RadioSetRxConfig+0x2fc>)
 801948c:	22f2      	movs	r2, #242	; 0xf2
 801948e:	75da      	strb	r2, [r3, #23]
 8019490:	e002      	b.n	8019498 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8019492:	4b2c      	ldr	r3, [pc, #176]	; (8019544 <RadioSetRxConfig+0x2fc>)
 8019494:	2201      	movs	r2, #1
 8019496:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8019498:	4b2a      	ldr	r3, [pc, #168]	; (8019544 <RadioSetRxConfig+0x2fc>)
 801949a:	2201      	movs	r2, #1
 801949c:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801949e:	f000 fc68 	bl	8019d72 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 80194a2:	2000      	movs	r0, #0
 80194a4:	f7ff fdfc 	bl	80190a0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80194a8:	4828      	ldr	r0, [pc, #160]	; (801954c <RadioSetRxConfig+0x304>)
 80194aa:	f002 fa59 	bl	801b960 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80194ae:	4828      	ldr	r0, [pc, #160]	; (8019550 <RadioSetRxConfig+0x308>)
 80194b0:	f002 fb28 	bl	801bb04 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80194b4:	4a28      	ldr	r2, [pc, #160]	; (8019558 <RadioSetRxConfig+0x310>)
 80194b6:	f107 0314 	add.w	r3, r7, #20
 80194ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80194be:	e883 0003 	stmia.w	r3, {r0, r1}
 80194c2:	f107 0314 	add.w	r3, r7, #20
 80194c6:	4618      	mov	r0, r3
 80194c8:	f001 fde5 	bl	801b096 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80194cc:	f240 10ff 	movw	r0, #511	; 0x1ff
 80194d0:	f001 fe30 	bl	801b134 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80194d4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80194d6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80194da:	fb02 f303 	mul.w	r3, r2, r3
 80194de:	461a      	mov	r2, r3
 80194e0:	687b      	ldr	r3, [r7, #4]
 80194e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80194e6:	4a17      	ldr	r2, [pc, #92]	; (8019544 <RadioSetRxConfig+0x2fc>)
 80194e8:	6093      	str	r3, [r2, #8]
            break;
 80194ea:	e0ad      	b.n	8019648 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80194ec:	2000      	movs	r0, #0
 80194ee:	f001 ff99 	bl	801b424 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80194f2:	4b14      	ldr	r3, [pc, #80]	; (8019544 <RadioSetRxConfig+0x2fc>)
 80194f4:	2201      	movs	r2, #1
 80194f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 80194fa:	687b      	ldr	r3, [r7, #4]
 80194fc:	b2da      	uxtb	r2, r3
 80194fe:	4b11      	ldr	r3, [pc, #68]	; (8019544 <RadioSetRxConfig+0x2fc>)
 8019500:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8019504:	4a15      	ldr	r2, [pc, #84]	; (801955c <RadioSetRxConfig+0x314>)
 8019506:	68bb      	ldr	r3, [r7, #8]
 8019508:	4413      	add	r3, r2
 801950a:	781a      	ldrb	r2, [r3, #0]
 801950c:	4b0d      	ldr	r3, [pc, #52]	; (8019544 <RadioSetRxConfig+0x2fc>)
 801950e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8019512:	4a0c      	ldr	r2, [pc, #48]	; (8019544 <RadioSetRxConfig+0x2fc>)
 8019514:	7bbb      	ldrb	r3, [r7, #14]
 8019516:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801951a:	68bb      	ldr	r3, [r7, #8]
 801951c:	2b00      	cmp	r3, #0
 801951e:	d105      	bne.n	801952c <RadioSetRxConfig+0x2e4>
 8019520:	687b      	ldr	r3, [r7, #4]
 8019522:	2b0b      	cmp	r3, #11
 8019524:	d008      	beq.n	8019538 <RadioSetRxConfig+0x2f0>
 8019526:	687b      	ldr	r3, [r7, #4]
 8019528:	2b0c      	cmp	r3, #12
 801952a:	d005      	beq.n	8019538 <RadioSetRxConfig+0x2f0>
 801952c:	68bb      	ldr	r3, [r7, #8]
 801952e:	2b01      	cmp	r3, #1
 8019530:	d116      	bne.n	8019560 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8019532:	687b      	ldr	r3, [r7, #4]
 8019534:	2b0c      	cmp	r3, #12
 8019536:	d113      	bne.n	8019560 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8019538:	4b02      	ldr	r3, [pc, #8]	; (8019544 <RadioSetRxConfig+0x2fc>)
 801953a:	2201      	movs	r2, #1
 801953c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8019540:	e012      	b.n	8019568 <RadioSetRxConfig+0x320>
 8019542:	bf00      	nop
 8019544:	20001be8 	.word	0x20001be8
 8019548:	20000134 	.word	0x20000134
 801954c:	20001c20 	.word	0x20001c20
 8019550:	20001bf6 	.word	0x20001bf6
 8019554:	0801e3fc 	.word	0x0801e3fc
 8019558:	0801e404 	.word	0x0801e404
 801955c:	0801eaf0 	.word	0x0801eaf0
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8019560:	4b3b      	ldr	r3, [pc, #236]	; (8019650 <RadioSetRxConfig+0x408>)
 8019562:	2200      	movs	r2, #0
 8019564:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8019568:	4b39      	ldr	r3, [pc, #228]	; (8019650 <RadioSetRxConfig+0x408>)
 801956a:	2201      	movs	r2, #1
 801956c:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801956e:	4b38      	ldr	r3, [pc, #224]	; (8019650 <RadioSetRxConfig+0x408>)
 8019570:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8019574:	2b05      	cmp	r3, #5
 8019576:	d004      	beq.n	8019582 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8019578:	4b35      	ldr	r3, [pc, #212]	; (8019650 <RadioSetRxConfig+0x408>)
 801957a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801957e:	2b06      	cmp	r3, #6
 8019580:	d10a      	bne.n	8019598 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 8019582:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019584:	2b0b      	cmp	r3, #11
 8019586:	d803      	bhi.n	8019590 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8019588:	4b31      	ldr	r3, [pc, #196]	; (8019650 <RadioSetRxConfig+0x408>)
 801958a:	220c      	movs	r2, #12
 801958c:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801958e:	e006      	b.n	801959e <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8019590:	4a2f      	ldr	r2, [pc, #188]	; (8019650 <RadioSetRxConfig+0x408>)
 8019592:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019594:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8019596:	e002      	b.n	801959e <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8019598:	4a2d      	ldr	r2, [pc, #180]	; (8019650 <RadioSetRxConfig+0x408>)
 801959a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801959c:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801959e:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80195a2:	4b2b      	ldr	r3, [pc, #172]	; (8019650 <RadioSetRxConfig+0x408>)
 80195a4:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80195a6:	4b2b      	ldr	r3, [pc, #172]	; (8019654 <RadioSetRxConfig+0x40c>)
 80195a8:	781a      	ldrb	r2, [r3, #0]
 80195aa:	4b29      	ldr	r3, [pc, #164]	; (8019650 <RadioSetRxConfig+0x408>)
 80195ac:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80195ae:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 80195b2:	4b27      	ldr	r3, [pc, #156]	; (8019650 <RadioSetRxConfig+0x408>)
 80195b4:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80195b8:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80195bc:	4b24      	ldr	r3, [pc, #144]	; (8019650 <RadioSetRxConfig+0x408>)
 80195be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 80195c2:	f000 fbd6 	bl	8019d72 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80195c6:	2001      	movs	r0, #1
 80195c8:	f7ff fd6a 	bl	80190a0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80195cc:	4822      	ldr	r0, [pc, #136]	; (8019658 <RadioSetRxConfig+0x410>)
 80195ce:	f002 f9c7 	bl	801b960 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80195d2:	4822      	ldr	r0, [pc, #136]	; (801965c <RadioSetRxConfig+0x414>)
 80195d4:	f002 fa96 	bl	801bb04 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80195d8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80195da:	b2db      	uxtb	r3, r3
 80195dc:	4618      	mov	r0, r3
 80195de:	f001 ff30 	bl	801b442 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 80195e2:	f640 00a3 	movw	r0, #2211	; 0x8a3
 80195e6:	f002 fbe9 	bl	801bdbc <SUBGRF_ReadRegister>
 80195ea:	4603      	mov	r3, r0
 80195ec:	f003 0301 	and.w	r3, r3, #1
 80195f0:	b2db      	uxtb	r3, r3
 80195f2:	4619      	mov	r1, r3
 80195f4:	f640 00a3 	movw	r0, #2211	; 0x8a3
 80195f8:	f002 fbcc 	bl	801bd94 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80195fc:	4b14      	ldr	r3, [pc, #80]	; (8019650 <RadioSetRxConfig+0x408>)
 80195fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8019602:	2b01      	cmp	r3, #1
 8019604:	d10d      	bne.n	8019622 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8019606:	f240 7036 	movw	r0, #1846	; 0x736
 801960a:	f002 fbd7 	bl	801bdbc <SUBGRF_ReadRegister>
 801960e:	4603      	mov	r3, r0
 8019610:	f023 0304 	bic.w	r3, r3, #4
 8019614:	b2db      	uxtb	r3, r3
 8019616:	4619      	mov	r1, r3
 8019618:	f240 7036 	movw	r0, #1846	; 0x736
 801961c:	f002 fbba 	bl	801bd94 <SUBGRF_WriteRegister>
 8019620:	e00c      	b.n	801963c <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8019622:	f240 7036 	movw	r0, #1846	; 0x736
 8019626:	f002 fbc9 	bl	801bdbc <SUBGRF_ReadRegister>
 801962a:	4603      	mov	r3, r0
 801962c:	f043 0304 	orr.w	r3, r3, #4
 8019630:	b2db      	uxtb	r3, r3
 8019632:	4619      	mov	r1, r3
 8019634:	f240 7036 	movw	r0, #1846	; 0x736
 8019638:	f002 fbac 	bl	801bd94 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 801963c:	4b04      	ldr	r3, [pc, #16]	; (8019650 <RadioSetRxConfig+0x408>)
 801963e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019642:	609a      	str	r2, [r3, #8]
            break;
 8019644:	e000      	b.n	8019648 <RadioSetRxConfig+0x400>
            break;
 8019646:	bf00      	nop
    }
}
 8019648:	bf00      	nop
 801964a:	3728      	adds	r7, #40	; 0x28
 801964c:	46bd      	mov	sp, r7
 801964e:	bd80      	pop	{r7, pc}
 8019650:	20001be8 	.word	0x20001be8
 8019654:	20000134 	.word	0x20000134
 8019658:	20001c20 	.word	0x20001c20
 801965c:	20001bf6 	.word	0x20001bf6

08019660 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8019660:	b580      	push	{r7, lr}
 8019662:	b086      	sub	sp, #24
 8019664:	af00      	add	r7, sp, #0
 8019666:	60ba      	str	r2, [r7, #8]
 8019668:	607b      	str	r3, [r7, #4]
 801966a:	4603      	mov	r3, r0
 801966c:	73fb      	strb	r3, [r7, #15]
 801966e:	460b      	mov	r3, r1
 8019670:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 8019672:	f002 fe76 	bl	801c362 <RFW_DeInit>
    switch( modem )
 8019676:	7bfb      	ldrb	r3, [r7, #15]
 8019678:	2b04      	cmp	r3, #4
 801967a:	f000 80c7 	beq.w	801980c <RadioSetTxConfig+0x1ac>
 801967e:	2b04      	cmp	r3, #4
 8019680:	f300 80d6 	bgt.w	8019830 <RadioSetTxConfig+0x1d0>
 8019684:	2b00      	cmp	r3, #0
 8019686:	d002      	beq.n	801968e <RadioSetTxConfig+0x2e>
 8019688:	2b01      	cmp	r3, #1
 801968a:	d059      	beq.n	8019740 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801968c:	e0d0      	b.n	8019830 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801968e:	4b77      	ldr	r3, [pc, #476]	; (801986c <RadioSetTxConfig+0x20c>)
 8019690:	2200      	movs	r2, #0
 8019692:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8019696:	4a75      	ldr	r2, [pc, #468]	; (801986c <RadioSetTxConfig+0x20c>)
 8019698:	6a3b      	ldr	r3, [r7, #32]
 801969a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801969c:	4b73      	ldr	r3, [pc, #460]	; (801986c <RadioSetTxConfig+0x20c>)
 801969e:	220b      	movs	r2, #11
 80196a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80196a4:	6878      	ldr	r0, [r7, #4]
 80196a6:	f002 fd8f 	bl	801c1c8 <SUBGRF_GetFskBandwidthRegValue>
 80196aa:	4603      	mov	r3, r0
 80196ac:	461a      	mov	r2, r3
 80196ae:	4b6f      	ldr	r3, [pc, #444]	; (801986c <RadioSetTxConfig+0x20c>)
 80196b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 80196b4:	4a6d      	ldr	r2, [pc, #436]	; (801986c <RadioSetTxConfig+0x20c>)
 80196b6:	68bb      	ldr	r3, [r7, #8]
 80196b8:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80196ba:	4b6c      	ldr	r3, [pc, #432]	; (801986c <RadioSetTxConfig+0x20c>)
 80196bc:	2200      	movs	r2, #0
 80196be:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80196c0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80196c2:	00db      	lsls	r3, r3, #3
 80196c4:	b29a      	uxth	r2, r3
 80196c6:	4b69      	ldr	r3, [pc, #420]	; (801986c <RadioSetTxConfig+0x20c>)
 80196c8:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80196ca:	4b68      	ldr	r3, [pc, #416]	; (801986c <RadioSetTxConfig+0x20c>)
 80196cc:	2204      	movs	r2, #4
 80196ce:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 80196d0:	4b66      	ldr	r3, [pc, #408]	; (801986c <RadioSetTxConfig+0x20c>)
 80196d2:	2218      	movs	r2, #24
 80196d4:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80196d6:	4b65      	ldr	r3, [pc, #404]	; (801986c <RadioSetTxConfig+0x20c>)
 80196d8:	2200      	movs	r2, #0
 80196da:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80196dc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80196e0:	f083 0301 	eor.w	r3, r3, #1
 80196e4:	b2db      	uxtb	r3, r3
 80196e6:	461a      	mov	r2, r3
 80196e8:	4b60      	ldr	r3, [pc, #384]	; (801986c <RadioSetTxConfig+0x20c>)
 80196ea:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 80196ec:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80196f0:	2b00      	cmp	r3, #0
 80196f2:	d003      	beq.n	80196fc <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80196f4:	4b5d      	ldr	r3, [pc, #372]	; (801986c <RadioSetTxConfig+0x20c>)
 80196f6:	22f2      	movs	r2, #242	; 0xf2
 80196f8:	75da      	strb	r2, [r3, #23]
 80196fa:	e002      	b.n	8019702 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80196fc:	4b5b      	ldr	r3, [pc, #364]	; (801986c <RadioSetTxConfig+0x20c>)
 80196fe:	2201      	movs	r2, #1
 8019700:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8019702:	4b5a      	ldr	r3, [pc, #360]	; (801986c <RadioSetTxConfig+0x20c>)
 8019704:	2201      	movs	r2, #1
 8019706:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8019708:	f000 fb33 	bl	8019d72 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 801970c:	2000      	movs	r0, #0
 801970e:	f7ff fcc7 	bl	80190a0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019712:	4857      	ldr	r0, [pc, #348]	; (8019870 <RadioSetTxConfig+0x210>)
 8019714:	f002 f924 	bl	801b960 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019718:	4856      	ldr	r0, [pc, #344]	; (8019874 <RadioSetTxConfig+0x214>)
 801971a:	f002 f9f3 	bl	801bb04 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801971e:	4a56      	ldr	r2, [pc, #344]	; (8019878 <RadioSetTxConfig+0x218>)
 8019720:	f107 0310 	add.w	r3, r7, #16
 8019724:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019728:	e883 0003 	stmia.w	r3, {r0, r1}
 801972c:	f107 0310 	add.w	r3, r7, #16
 8019730:	4618      	mov	r0, r3
 8019732:	f001 fcb0 	bl	801b096 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8019736:	f240 10ff 	movw	r0, #511	; 0x1ff
 801973a:	f001 fcfb 	bl	801b134 <SUBGRF_SetWhiteningSeed>
            break;
 801973e:	e078      	b.n	8019832 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8019740:	4b4a      	ldr	r3, [pc, #296]	; (801986c <RadioSetTxConfig+0x20c>)
 8019742:	2201      	movs	r2, #1
 8019744:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8019748:	6a3b      	ldr	r3, [r7, #32]
 801974a:	b2da      	uxtb	r2, r3
 801974c:	4b47      	ldr	r3, [pc, #284]	; (801986c <RadioSetTxConfig+0x20c>)
 801974e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8019752:	4a4a      	ldr	r2, [pc, #296]	; (801987c <RadioSetTxConfig+0x21c>)
 8019754:	687b      	ldr	r3, [r7, #4]
 8019756:	4413      	add	r3, r2
 8019758:	781a      	ldrb	r2, [r3, #0]
 801975a:	4b44      	ldr	r3, [pc, #272]	; (801986c <RadioSetTxConfig+0x20c>)
 801975c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8019760:	4a42      	ldr	r2, [pc, #264]	; (801986c <RadioSetTxConfig+0x20c>)
 8019762:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019766:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801976a:	687b      	ldr	r3, [r7, #4]
 801976c:	2b00      	cmp	r3, #0
 801976e:	d105      	bne.n	801977c <RadioSetTxConfig+0x11c>
 8019770:	6a3b      	ldr	r3, [r7, #32]
 8019772:	2b0b      	cmp	r3, #11
 8019774:	d008      	beq.n	8019788 <RadioSetTxConfig+0x128>
 8019776:	6a3b      	ldr	r3, [r7, #32]
 8019778:	2b0c      	cmp	r3, #12
 801977a:	d005      	beq.n	8019788 <RadioSetTxConfig+0x128>
 801977c:	687b      	ldr	r3, [r7, #4]
 801977e:	2b01      	cmp	r3, #1
 8019780:	d107      	bne.n	8019792 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8019782:	6a3b      	ldr	r3, [r7, #32]
 8019784:	2b0c      	cmp	r3, #12
 8019786:	d104      	bne.n	8019792 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8019788:	4b38      	ldr	r3, [pc, #224]	; (801986c <RadioSetTxConfig+0x20c>)
 801978a:	2201      	movs	r2, #1
 801978c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8019790:	e003      	b.n	801979a <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8019792:	4b36      	ldr	r3, [pc, #216]	; (801986c <RadioSetTxConfig+0x20c>)
 8019794:	2200      	movs	r2, #0
 8019796:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801979a:	4b34      	ldr	r3, [pc, #208]	; (801986c <RadioSetTxConfig+0x20c>)
 801979c:	2201      	movs	r2, #1
 801979e:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80197a0:	4b32      	ldr	r3, [pc, #200]	; (801986c <RadioSetTxConfig+0x20c>)
 80197a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80197a6:	2b05      	cmp	r3, #5
 80197a8:	d004      	beq.n	80197b4 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80197aa:	4b30      	ldr	r3, [pc, #192]	; (801986c <RadioSetTxConfig+0x20c>)
 80197ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80197b0:	2b06      	cmp	r3, #6
 80197b2:	d10a      	bne.n	80197ca <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 80197b4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80197b6:	2b0b      	cmp	r3, #11
 80197b8:	d803      	bhi.n	80197c2 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80197ba:	4b2c      	ldr	r3, [pc, #176]	; (801986c <RadioSetTxConfig+0x20c>)
 80197bc:	220c      	movs	r2, #12
 80197be:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80197c0:	e006      	b.n	80197d0 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80197c2:	4a2a      	ldr	r2, [pc, #168]	; (801986c <RadioSetTxConfig+0x20c>)
 80197c4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80197c6:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80197c8:	e002      	b.n	80197d0 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80197ca:	4a28      	ldr	r2, [pc, #160]	; (801986c <RadioSetTxConfig+0x20c>)
 80197cc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80197ce:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80197d0:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80197d4:	4b25      	ldr	r3, [pc, #148]	; (801986c <RadioSetTxConfig+0x20c>)
 80197d6:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80197d8:	4b29      	ldr	r3, [pc, #164]	; (8019880 <RadioSetTxConfig+0x220>)
 80197da:	781a      	ldrb	r2, [r3, #0]
 80197dc:	4b23      	ldr	r3, [pc, #140]	; (801986c <RadioSetTxConfig+0x20c>)
 80197de:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80197e0:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80197e4:	4b21      	ldr	r3, [pc, #132]	; (801986c <RadioSetTxConfig+0x20c>)
 80197e6:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80197ea:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80197ee:	4b1f      	ldr	r3, [pc, #124]	; (801986c <RadioSetTxConfig+0x20c>)
 80197f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 80197f4:	f000 fabd 	bl	8019d72 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80197f8:	2001      	movs	r0, #1
 80197fa:	f7ff fc51 	bl	80190a0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80197fe:	481c      	ldr	r0, [pc, #112]	; (8019870 <RadioSetTxConfig+0x210>)
 8019800:	f002 f8ae 	bl	801b960 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019804:	481b      	ldr	r0, [pc, #108]	; (8019874 <RadioSetTxConfig+0x214>)
 8019806:	f002 f97d 	bl	801bb04 <SUBGRF_SetPacketParams>
            break;
 801980a:	e012      	b.n	8019832 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 801980c:	2004      	movs	r0, #4
 801980e:	f7ff fc47 	bl	80190a0 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8019812:	4b16      	ldr	r3, [pc, #88]	; (801986c <RadioSetTxConfig+0x20c>)
 8019814:	2202      	movs	r2, #2
 8019816:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 801981a:	4a14      	ldr	r2, [pc, #80]	; (801986c <RadioSetTxConfig+0x20c>)
 801981c:	6a3b      	ldr	r3, [r7, #32]
 801981e:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8019820:	4b12      	ldr	r3, [pc, #72]	; (801986c <RadioSetTxConfig+0x20c>)
 8019822:	2216      	movs	r2, #22
 8019824:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019828:	4811      	ldr	r0, [pc, #68]	; (8019870 <RadioSetTxConfig+0x210>)
 801982a:	f002 f899 	bl	801b960 <SUBGRF_SetModulationParams>
            break;
 801982e:	e000      	b.n	8019832 <RadioSetTxConfig+0x1d2>
            break;
 8019830:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8019832:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8019836:	4618      	mov	r0, r3
 8019838:	f002 fbc8 	bl	801bfcc <SUBGRF_SetRfTxPower>
 801983c:	4603      	mov	r3, r0
 801983e:	461a      	mov	r2, r3
 8019840:	4b0a      	ldr	r3, [pc, #40]	; (801986c <RadioSetTxConfig+0x20c>)
 8019842:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8019846:	210e      	movs	r1, #14
 8019848:	f640 101f 	movw	r0, #2335	; 0x91f
 801984c:	f002 faa2 	bl	801bd94 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8019850:	4b06      	ldr	r3, [pc, #24]	; (801986c <RadioSetTxConfig+0x20c>)
 8019852:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019856:	4618      	mov	r0, r3
 8019858:	f002 fd97 	bl	801c38a <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801985c:	4a03      	ldr	r2, [pc, #12]	; (801986c <RadioSetTxConfig+0x20c>)
 801985e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019860:	6053      	str	r3, [r2, #4]
}
 8019862:	bf00      	nop
 8019864:	3718      	adds	r7, #24
 8019866:	46bd      	mov	sp, r7
 8019868:	bd80      	pop	{r7, pc}
 801986a:	bf00      	nop
 801986c:	20001be8 	.word	0x20001be8
 8019870:	20001c20 	.word	0x20001c20
 8019874:	20001bf6 	.word	0x20001bf6
 8019878:	0801e404 	.word	0x0801e404
 801987c:	0801eaf0 	.word	0x0801eaf0
 8019880:	20000134 	.word	0x20000134

08019884 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8019884:	b480      	push	{r7}
 8019886:	b083      	sub	sp, #12
 8019888:	af00      	add	r7, sp, #0
 801988a:	6078      	str	r0, [r7, #4]
    return true;
 801988c:	2301      	movs	r3, #1
}
 801988e:	4618      	mov	r0, r3
 8019890:	370c      	adds	r7, #12
 8019892:	46bd      	mov	sp, r7
 8019894:	bc80      	pop	{r7}
 8019896:	4770      	bx	lr

08019898 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8019898:	b480      	push	{r7}
 801989a:	b085      	sub	sp, #20
 801989c:	af00      	add	r7, sp, #0
 801989e:	4603      	mov	r3, r0
 80198a0:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 80198a2:	2300      	movs	r3, #0
 80198a4:	60fb      	str	r3, [r7, #12]

    switch( bw )
 80198a6:	79fb      	ldrb	r3, [r7, #7]
 80198a8:	2b0a      	cmp	r3, #10
 80198aa:	d83e      	bhi.n	801992a <RadioGetLoRaBandwidthInHz+0x92>
 80198ac:	a201      	add	r2, pc, #4	; (adr r2, 80198b4 <RadioGetLoRaBandwidthInHz+0x1c>)
 80198ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80198b2:	bf00      	nop
 80198b4:	080198e1 	.word	0x080198e1
 80198b8:	080198f1 	.word	0x080198f1
 80198bc:	08019901 	.word	0x08019901
 80198c0:	08019911 	.word	0x08019911
 80198c4:	08019919 	.word	0x08019919
 80198c8:	0801991f 	.word	0x0801991f
 80198cc:	08019925 	.word	0x08019925
 80198d0:	0801992b 	.word	0x0801992b
 80198d4:	080198e9 	.word	0x080198e9
 80198d8:	080198f9 	.word	0x080198f9
 80198dc:	08019909 	.word	0x08019909
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 80198e0:	f641 6384 	movw	r3, #7812	; 0x1e84
 80198e4:	60fb      	str	r3, [r7, #12]
        break;
 80198e6:	e020      	b.n	801992a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 80198e8:	f642 03b1 	movw	r3, #10417	; 0x28b1
 80198ec:	60fb      	str	r3, [r7, #12]
        break;
 80198ee:	e01c      	b.n	801992a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 80198f0:	f643 5309 	movw	r3, #15625	; 0x3d09
 80198f4:	60fb      	str	r3, [r7, #12]
        break;
 80198f6:	e018      	b.n	801992a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 80198f8:	f245 1361 	movw	r3, #20833	; 0x5161
 80198fc:	60fb      	str	r3, [r7, #12]
        break;
 80198fe:	e014      	b.n	801992a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8019900:	f647 2312 	movw	r3, #31250	; 0x7a12
 8019904:	60fb      	str	r3, [r7, #12]
        break;
 8019906:	e010      	b.n	801992a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8019908:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 801990c:	60fb      	str	r3, [r7, #12]
        break;
 801990e:	e00c      	b.n	801992a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8019910:	f24f 4324 	movw	r3, #62500	; 0xf424
 8019914:	60fb      	str	r3, [r7, #12]
        break;
 8019916:	e008      	b.n	801992a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8019918:	4b07      	ldr	r3, [pc, #28]	; (8019938 <RadioGetLoRaBandwidthInHz+0xa0>)
 801991a:	60fb      	str	r3, [r7, #12]
        break;
 801991c:	e005      	b.n	801992a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 801991e:	4b07      	ldr	r3, [pc, #28]	; (801993c <RadioGetLoRaBandwidthInHz+0xa4>)
 8019920:	60fb      	str	r3, [r7, #12]
        break;
 8019922:	e002      	b.n	801992a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8019924:	4b06      	ldr	r3, [pc, #24]	; (8019940 <RadioGetLoRaBandwidthInHz+0xa8>)
 8019926:	60fb      	str	r3, [r7, #12]
        break;
 8019928:	bf00      	nop
    }

    return bandwidthInHz;
 801992a:	68fb      	ldr	r3, [r7, #12]
}
 801992c:	4618      	mov	r0, r3
 801992e:	3714      	adds	r7, #20
 8019930:	46bd      	mov	sp, r7
 8019932:	bc80      	pop	{r7}
 8019934:	4770      	bx	lr
 8019936:	bf00      	nop
 8019938:	0001e848 	.word	0x0001e848
 801993c:	0003d090 	.word	0x0003d090
 8019940:	0007a120 	.word	0x0007a120

08019944 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8019944:	b480      	push	{r7}
 8019946:	b083      	sub	sp, #12
 8019948:	af00      	add	r7, sp, #0
 801994a:	6078      	str	r0, [r7, #4]
 801994c:	4608      	mov	r0, r1
 801994e:	4611      	mov	r1, r2
 8019950:	461a      	mov	r2, r3
 8019952:	4603      	mov	r3, r0
 8019954:	70fb      	strb	r3, [r7, #3]
 8019956:	460b      	mov	r3, r1
 8019958:	803b      	strh	r3, [r7, #0]
 801995a:	4613      	mov	r3, r2
 801995c:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 801995e:	883b      	ldrh	r3, [r7, #0]
 8019960:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8019962:	78ba      	ldrb	r2, [r7, #2]
 8019964:	f082 0201 	eor.w	r2, r2, #1
 8019968:	b2d2      	uxtb	r2, r2
 801996a:	2a00      	cmp	r2, #0
 801996c:	d001      	beq.n	8019972 <RadioGetGfskTimeOnAirNumerator+0x2e>
 801996e:	2208      	movs	r2, #8
 8019970:	e000      	b.n	8019974 <RadioGetGfskTimeOnAirNumerator+0x30>
 8019972:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8019974:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8019976:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 801997a:	7c3b      	ldrb	r3, [r7, #16]
 801997c:	7d39      	ldrb	r1, [r7, #20]
 801997e:	2900      	cmp	r1, #0
 8019980:	d001      	beq.n	8019986 <RadioGetGfskTimeOnAirNumerator+0x42>
 8019982:	2102      	movs	r1, #2
 8019984:	e000      	b.n	8019988 <RadioGetGfskTimeOnAirNumerator+0x44>
 8019986:	2100      	movs	r1, #0
 8019988:	440b      	add	r3, r1
 801998a:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801998c:	4413      	add	r3, r2
}
 801998e:	4618      	mov	r0, r3
 8019990:	370c      	adds	r7, #12
 8019992:	46bd      	mov	sp, r7
 8019994:	bc80      	pop	{r7}
 8019996:	4770      	bx	lr

08019998 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8019998:	b480      	push	{r7}
 801999a:	b08b      	sub	sp, #44	; 0x2c
 801999c:	af00      	add	r7, sp, #0
 801999e:	60f8      	str	r0, [r7, #12]
 80199a0:	60b9      	str	r1, [r7, #8]
 80199a2:	4611      	mov	r1, r2
 80199a4:	461a      	mov	r2, r3
 80199a6:	460b      	mov	r3, r1
 80199a8:	71fb      	strb	r3, [r7, #7]
 80199aa:	4613      	mov	r3, r2
 80199ac:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 80199ae:	79fb      	ldrb	r3, [r7, #7]
 80199b0:	3304      	adds	r3, #4
 80199b2:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 80199b4:	2300      	movs	r3, #0
 80199b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 80199ba:	68bb      	ldr	r3, [r7, #8]
 80199bc:	2b05      	cmp	r3, #5
 80199be:	d002      	beq.n	80199c6 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 80199c0:	68bb      	ldr	r3, [r7, #8]
 80199c2:	2b06      	cmp	r3, #6
 80199c4:	d104      	bne.n	80199d0 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 80199c6:	88bb      	ldrh	r3, [r7, #4]
 80199c8:	2b0b      	cmp	r3, #11
 80199ca:	d801      	bhi.n	80199d0 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 80199cc:	230c      	movs	r3, #12
 80199ce:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80199d0:	68fb      	ldr	r3, [r7, #12]
 80199d2:	2b00      	cmp	r3, #0
 80199d4:	d105      	bne.n	80199e2 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 80199d6:	68bb      	ldr	r3, [r7, #8]
 80199d8:	2b0b      	cmp	r3, #11
 80199da:	d008      	beq.n	80199ee <RadioGetLoRaTimeOnAirNumerator+0x56>
 80199dc:	68bb      	ldr	r3, [r7, #8]
 80199de:	2b0c      	cmp	r3, #12
 80199e0:	d005      	beq.n	80199ee <RadioGetLoRaTimeOnAirNumerator+0x56>
 80199e2:	68fb      	ldr	r3, [r7, #12]
 80199e4:	2b01      	cmp	r3, #1
 80199e6:	d105      	bne.n	80199f4 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80199e8:	68bb      	ldr	r3, [r7, #8]
 80199ea:	2b0c      	cmp	r3, #12
 80199ec:	d102      	bne.n	80199f4 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 80199ee:	2301      	movs	r3, #1
 80199f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80199f4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80199f8:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 80199fa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80199fe:	2a00      	cmp	r2, #0
 8019a00:	d001      	beq.n	8019a06 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8019a02:	2210      	movs	r2, #16
 8019a04:	e000      	b.n	8019a08 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8019a06:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8019a08:	4413      	add	r3, r2
 8019a0a:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8019a0c:	68bb      	ldr	r3, [r7, #8]
 8019a0e:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8019a10:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8019a12:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8019a16:	2a00      	cmp	r2, #0
 8019a18:	d001      	beq.n	8019a1e <RadioGetLoRaTimeOnAirNumerator+0x86>
 8019a1a:	2200      	movs	r2, #0
 8019a1c:	e000      	b.n	8019a20 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8019a1e:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8019a20:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8019a22:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8019a24:	68bb      	ldr	r3, [r7, #8]
 8019a26:	2b06      	cmp	r3, #6
 8019a28:	d803      	bhi.n	8019a32 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8019a2a:	68bb      	ldr	r3, [r7, #8]
 8019a2c:	009b      	lsls	r3, r3, #2
 8019a2e:	623b      	str	r3, [r7, #32]
 8019a30:	e00e      	b.n	8019a50 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8019a32:	69fb      	ldr	r3, [r7, #28]
 8019a34:	3308      	adds	r3, #8
 8019a36:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8019a38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019a3c:	2b00      	cmp	r3, #0
 8019a3e:	d004      	beq.n	8019a4a <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8019a40:	68bb      	ldr	r3, [r7, #8]
 8019a42:	3b02      	subs	r3, #2
 8019a44:	009b      	lsls	r3, r3, #2
 8019a46:	623b      	str	r3, [r7, #32]
 8019a48:	e002      	b.n	8019a50 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8019a4a:	68bb      	ldr	r3, [r7, #8]
 8019a4c:	009b      	lsls	r3, r3, #2
 8019a4e:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8019a50:	69fb      	ldr	r3, [r7, #28]
 8019a52:	2b00      	cmp	r3, #0
 8019a54:	da01      	bge.n	8019a5a <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8019a56:	2300      	movs	r3, #0
 8019a58:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8019a5a:	69fa      	ldr	r2, [r7, #28]
 8019a5c:	6a3b      	ldr	r3, [r7, #32]
 8019a5e:	4413      	add	r3, r2
 8019a60:	1e5a      	subs	r2, r3, #1
 8019a62:	6a3b      	ldr	r3, [r7, #32]
 8019a64:	fb92 f3f3 	sdiv	r3, r2, r3
 8019a68:	697a      	ldr	r2, [r7, #20]
 8019a6a:	fb03 f202 	mul.w	r2, r3, r2
 8019a6e:	88bb      	ldrh	r3, [r7, #4]
 8019a70:	4413      	add	r3, r2
    int32_t intermediate =
 8019a72:	330c      	adds	r3, #12
 8019a74:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8019a76:	68bb      	ldr	r3, [r7, #8]
 8019a78:	2b06      	cmp	r3, #6
 8019a7a:	d802      	bhi.n	8019a82 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8019a7c:	69bb      	ldr	r3, [r7, #24]
 8019a7e:	3302      	adds	r3, #2
 8019a80:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8019a82:	69bb      	ldr	r3, [r7, #24]
 8019a84:	009b      	lsls	r3, r3, #2
 8019a86:	1c5a      	adds	r2, r3, #1
 8019a88:	68bb      	ldr	r3, [r7, #8]
 8019a8a:	3b02      	subs	r3, #2
 8019a8c:	fa02 f303 	lsl.w	r3, r2, r3
}
 8019a90:	4618      	mov	r0, r3
 8019a92:	372c      	adds	r7, #44	; 0x2c
 8019a94:	46bd      	mov	sp, r7
 8019a96:	bc80      	pop	{r7}
 8019a98:	4770      	bx	lr
	...

08019a9c <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8019a9c:	b580      	push	{r7, lr}
 8019a9e:	b08a      	sub	sp, #40	; 0x28
 8019aa0:	af04      	add	r7, sp, #16
 8019aa2:	60b9      	str	r1, [r7, #8]
 8019aa4:	607a      	str	r2, [r7, #4]
 8019aa6:	461a      	mov	r2, r3
 8019aa8:	4603      	mov	r3, r0
 8019aaa:	73fb      	strb	r3, [r7, #15]
 8019aac:	4613      	mov	r3, r2
 8019aae:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8019ab0:	2300      	movs	r3, #0
 8019ab2:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8019ab4:	2301      	movs	r3, #1
 8019ab6:	613b      	str	r3, [r7, #16]

    switch( modem )
 8019ab8:	7bfb      	ldrb	r3, [r7, #15]
 8019aba:	2b00      	cmp	r3, #0
 8019abc:	d002      	beq.n	8019ac4 <RadioTimeOnAir+0x28>
 8019abe:	2b01      	cmp	r3, #1
 8019ac0:	d017      	beq.n	8019af2 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8019ac2:	e035      	b.n	8019b30 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8019ac4:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8019ac8:	8c3a      	ldrh	r2, [r7, #32]
 8019aca:	7bb9      	ldrb	r1, [r7, #14]
 8019acc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8019ad0:	9301      	str	r3, [sp, #4]
 8019ad2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8019ad6:	9300      	str	r3, [sp, #0]
 8019ad8:	4603      	mov	r3, r0
 8019ada:	6878      	ldr	r0, [r7, #4]
 8019adc:	f7ff ff32 	bl	8019944 <RadioGetGfskTimeOnAirNumerator>
 8019ae0:	4603      	mov	r3, r0
 8019ae2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019ae6:	fb02 f303 	mul.w	r3, r2, r3
 8019aea:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8019aec:	687b      	ldr	r3, [r7, #4]
 8019aee:	613b      	str	r3, [r7, #16]
        break;
 8019af0:	e01e      	b.n	8019b30 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8019af2:	8c39      	ldrh	r1, [r7, #32]
 8019af4:	7bba      	ldrb	r2, [r7, #14]
 8019af6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8019afa:	9302      	str	r3, [sp, #8]
 8019afc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8019b00:	9301      	str	r3, [sp, #4]
 8019b02:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019b06:	9300      	str	r3, [sp, #0]
 8019b08:	460b      	mov	r3, r1
 8019b0a:	6879      	ldr	r1, [r7, #4]
 8019b0c:	68b8      	ldr	r0, [r7, #8]
 8019b0e:	f7ff ff43 	bl	8019998 <RadioGetLoRaTimeOnAirNumerator>
 8019b12:	4603      	mov	r3, r0
 8019b14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019b18:	fb02 f303 	mul.w	r3, r2, r3
 8019b1c:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8019b1e:	4a0a      	ldr	r2, [pc, #40]	; (8019b48 <RadioTimeOnAir+0xac>)
 8019b20:	68bb      	ldr	r3, [r7, #8]
 8019b22:	4413      	add	r3, r2
 8019b24:	781b      	ldrb	r3, [r3, #0]
 8019b26:	4618      	mov	r0, r3
 8019b28:	f7ff feb6 	bl	8019898 <RadioGetLoRaBandwidthInHz>
 8019b2c:	6138      	str	r0, [r7, #16]
        break;
 8019b2e:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8019b30:	697a      	ldr	r2, [r7, #20]
 8019b32:	693b      	ldr	r3, [r7, #16]
 8019b34:	4413      	add	r3, r2
 8019b36:	1e5a      	subs	r2, r3, #1
 8019b38:	693b      	ldr	r3, [r7, #16]
 8019b3a:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8019b3e:	4618      	mov	r0, r3
 8019b40:	3718      	adds	r7, #24
 8019b42:	46bd      	mov	sp, r7
 8019b44:	bd80      	pop	{r7, pc}
 8019b46:	bf00      	nop
 8019b48:	0801eaf0 	.word	0x0801eaf0

08019b4c <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 8019b4c:	b580      	push	{r7, lr}
 8019b4e:	b084      	sub	sp, #16
 8019b50:	af00      	add	r7, sp, #0
 8019b52:	6078      	str	r0, [r7, #4]
 8019b54:	460b      	mov	r3, r1
 8019b56:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8019b58:	2300      	movs	r3, #0
 8019b5a:	2200      	movs	r2, #0
 8019b5c:	f240 2101 	movw	r1, #513	; 0x201
 8019b60:	f240 2001 	movw	r0, #513	; 0x201
 8019b64:	f001 fd66 	bl	801b634 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8019b68:	4b73      	ldr	r3, [pc, #460]	; (8019d38 <RadioSend+0x1ec>)
 8019b6a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019b6e:	2101      	movs	r1, #1
 8019b70:	4618      	mov	r0, r3
 8019b72:	f002 fa03 	bl	801bf7c <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8019b76:	4b70      	ldr	r3, [pc, #448]	; (8019d38 <RadioSend+0x1ec>)
 8019b78:	781b      	ldrb	r3, [r3, #0]
 8019b7a:	2b01      	cmp	r3, #1
 8019b7c:	d112      	bne.n	8019ba4 <RadioSend+0x58>
 8019b7e:	4b6e      	ldr	r3, [pc, #440]	; (8019d38 <RadioSend+0x1ec>)
 8019b80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8019b84:	2b06      	cmp	r3, #6
 8019b86:	d10d      	bne.n	8019ba4 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8019b88:	f640 0089 	movw	r0, #2185	; 0x889
 8019b8c:	f002 f916 	bl	801bdbc <SUBGRF_ReadRegister>
 8019b90:	4603      	mov	r3, r0
 8019b92:	f023 0304 	bic.w	r3, r3, #4
 8019b96:	b2db      	uxtb	r3, r3
 8019b98:	4619      	mov	r1, r3
 8019b9a:	f640 0089 	movw	r0, #2185	; 0x889
 8019b9e:	f002 f8f9 	bl	801bd94 <SUBGRF_WriteRegister>
 8019ba2:	e00c      	b.n	8019bbe <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8019ba4:	f640 0089 	movw	r0, #2185	; 0x889
 8019ba8:	f002 f908 	bl	801bdbc <SUBGRF_ReadRegister>
 8019bac:	4603      	mov	r3, r0
 8019bae:	f043 0304 	orr.w	r3, r3, #4
 8019bb2:	b2db      	uxtb	r3, r3
 8019bb4:	4619      	mov	r1, r3
 8019bb6:	f640 0089 	movw	r0, #2185	; 0x889
 8019bba:	f002 f8eb 	bl	801bd94 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 8019bbe:	4b5e      	ldr	r3, [pc, #376]	; (8019d38 <RadioSend+0x1ec>)
 8019bc0:	781b      	ldrb	r3, [r3, #0]
 8019bc2:	2b04      	cmp	r3, #4
 8019bc4:	f200 80a8 	bhi.w	8019d18 <RadioSend+0x1cc>
 8019bc8:	a201      	add	r2, pc, #4	; (adr r2, 8019bd0 <RadioSend+0x84>)
 8019bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019bce:	bf00      	nop
 8019bd0:	08019bff 	.word	0x08019bff
 8019bd4:	08019be5 	.word	0x08019be5
 8019bd8:	08019bff 	.word	0x08019bff
 8019bdc:	08019c61 	.word	0x08019c61
 8019be0:	08019c81 	.word	0x08019c81
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8019be4:	4a54      	ldr	r2, [pc, #336]	; (8019d38 <RadioSend+0x1ec>)
 8019be6:	78fb      	ldrb	r3, [r7, #3]
 8019be8:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019bea:	4854      	ldr	r0, [pc, #336]	; (8019d3c <RadioSend+0x1f0>)
 8019bec:	f001 ff8a 	bl	801bb04 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8019bf0:	78fb      	ldrb	r3, [r7, #3]
 8019bf2:	2200      	movs	r2, #0
 8019bf4:	4619      	mov	r1, r3
 8019bf6:	6878      	ldr	r0, [r7, #4]
 8019bf8:	f001 fa3a 	bl	801b070 <SUBGRF_SendPayload>
            break;
 8019bfc:	e08d      	b.n	8019d1a <RadioSend+0x1ce>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8019bfe:	f002 fbb6 	bl	801c36e <RFW_Is_Init>
 8019c02:	4603      	mov	r3, r0
 8019c04:	2b01      	cmp	r3, #1
 8019c06:	d11e      	bne.n	8019c46 <RadioSend+0xfa>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8019c08:	f107 020d 	add.w	r2, r7, #13
 8019c0c:	78fb      	ldrb	r3, [r7, #3]
 8019c0e:	4619      	mov	r1, r3
 8019c10:	6878      	ldr	r0, [r7, #4]
 8019c12:	f002 fbc4 	bl	801c39e <RFW_TransmitInit>
 8019c16:	4603      	mov	r3, r0
 8019c18:	2b00      	cmp	r3, #0
 8019c1a:	d10c      	bne.n	8019c36 <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8019c1c:	7b7a      	ldrb	r2, [r7, #13]
 8019c1e:	4b46      	ldr	r3, [pc, #280]	; (8019d38 <RadioSend+0x1ec>)
 8019c20:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019c22:	4846      	ldr	r0, [pc, #280]	; (8019d3c <RadioSend+0x1f0>)
 8019c24:	f001 ff6e 	bl	801bb04 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 8019c28:	7b7b      	ldrb	r3, [r7, #13]
 8019c2a:	2200      	movs	r2, #0
 8019c2c:	4619      	mov	r1, r3
 8019c2e:	6878      	ldr	r0, [r7, #4]
 8019c30:	f001 fa1e 	bl	801b070 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8019c34:	e071      	b.n	8019d1a <RadioSend+0x1ce>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 8019c36:	4b42      	ldr	r3, [pc, #264]	; (8019d40 <RadioSend+0x1f4>)
 8019c38:	2201      	movs	r2, #1
 8019c3a:	2100      	movs	r1, #0
 8019c3c:	2002      	movs	r0, #2
 8019c3e:	f003 fccf 	bl	801d5e0 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 8019c42:	2303      	movs	r3, #3
 8019c44:	e073      	b.n	8019d2e <RadioSend+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8019c46:	4a3c      	ldr	r2, [pc, #240]	; (8019d38 <RadioSend+0x1ec>)
 8019c48:	78fb      	ldrb	r3, [r7, #3]
 8019c4a:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019c4c:	483b      	ldr	r0, [pc, #236]	; (8019d3c <RadioSend+0x1f0>)
 8019c4e:	f001 ff59 	bl	801bb04 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 8019c52:	78fb      	ldrb	r3, [r7, #3]
 8019c54:	2200      	movs	r2, #0
 8019c56:	4619      	mov	r1, r3
 8019c58:	6878      	ldr	r0, [r7, #4]
 8019c5a:	f001 fa09 	bl	801b070 <SUBGRF_SendPayload>
            break;
 8019c5e:	e05c      	b.n	8019d1a <RadioSend+0x1ce>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8019c60:	4b35      	ldr	r3, [pc, #212]	; (8019d38 <RadioSend+0x1ec>)
 8019c62:	2202      	movs	r2, #2
 8019c64:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8019c66:	4a34      	ldr	r2, [pc, #208]	; (8019d38 <RadioSend+0x1ec>)
 8019c68:	78fb      	ldrb	r3, [r7, #3]
 8019c6a:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019c6c:	4833      	ldr	r0, [pc, #204]	; (8019d3c <RadioSend+0x1f0>)
 8019c6e:	f001 ff49 	bl	801bb04 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8019c72:	78fb      	ldrb	r3, [r7, #3]
 8019c74:	2200      	movs	r2, #0
 8019c76:	4619      	mov	r1, r3
 8019c78:	6878      	ldr	r0, [r7, #4]
 8019c7a:	f001 f9f9 	bl	801b070 <SUBGRF_SendPayload>
            break;
 8019c7e:	e04c      	b.n	8019d1a <RadioSend+0x1ce>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8019c80:	78fb      	ldrb	r3, [r7, #3]
 8019c82:	461a      	mov	r2, r3
 8019c84:	6879      	ldr	r1, [r7, #4]
 8019c86:	482f      	ldr	r0, [pc, #188]	; (8019d44 <RadioSend+0x1f8>)
 8019c88:	f000 fccc 	bl	801a624 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8019c8c:	4b2a      	ldr	r3, [pc, #168]	; (8019d38 <RadioSend+0x1ec>)
 8019c8e:	2202      	movs	r2, #2
 8019c90:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8019c92:	78fb      	ldrb	r3, [r7, #3]
 8019c94:	3301      	adds	r3, #1
 8019c96:	b2da      	uxtb	r2, r3
 8019c98:	4b27      	ldr	r3, [pc, #156]	; (8019d38 <RadioSend+0x1ec>)
 8019c9a:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019c9c:	4827      	ldr	r0, [pc, #156]	; (8019d3c <RadioSend+0x1f0>)
 8019c9e:	f001 ff31 	bl	801bb04 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8019ca2:	2100      	movs	r1, #0
 8019ca4:	20f1      	movs	r0, #241	; 0xf1
 8019ca6:	f000 f966 	bl	8019f76 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8019caa:	2100      	movs	r1, #0
 8019cac:	20f0      	movs	r0, #240	; 0xf0
 8019cae:	f000 f962 	bl	8019f76 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8019cb2:	4b21      	ldr	r3, [pc, #132]	; (8019d38 <RadioSend+0x1ec>)
 8019cb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019cb6:	2b64      	cmp	r3, #100	; 0x64
 8019cb8:	d108      	bne.n	8019ccc <RadioSend+0x180>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8019cba:	2170      	movs	r1, #112	; 0x70
 8019cbc:	20f3      	movs	r0, #243	; 0xf3
 8019cbe:	f000 f95a 	bl	8019f76 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8019cc2:	211d      	movs	r1, #29
 8019cc4:	20f2      	movs	r0, #242	; 0xf2
 8019cc6:	f000 f956 	bl	8019f76 <RadioWrite>
 8019cca:	e007      	b.n	8019cdc <RadioSend+0x190>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8019ccc:	21e1      	movs	r1, #225	; 0xe1
 8019cce:	20f3      	movs	r0, #243	; 0xf3
 8019cd0:	f000 f951 	bl	8019f76 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8019cd4:	2104      	movs	r1, #4
 8019cd6:	20f2      	movs	r0, #242	; 0xf2
 8019cd8:	f000 f94d 	bl	8019f76 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8019cdc:	78fb      	ldrb	r3, [r7, #3]
 8019cde:	b29b      	uxth	r3, r3
 8019ce0:	00db      	lsls	r3, r3, #3
 8019ce2:	b29b      	uxth	r3, r3
 8019ce4:	3302      	adds	r3, #2
 8019ce6:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8019ce8:	89fb      	ldrh	r3, [r7, #14]
 8019cea:	0a1b      	lsrs	r3, r3, #8
 8019cec:	b29b      	uxth	r3, r3
 8019cee:	b2db      	uxtb	r3, r3
 8019cf0:	4619      	mov	r1, r3
 8019cf2:	20f4      	movs	r0, #244	; 0xf4
 8019cf4:	f000 f93f 	bl	8019f76 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8019cf8:	89fb      	ldrh	r3, [r7, #14]
 8019cfa:	b2db      	uxtb	r3, r3
 8019cfc:	4619      	mov	r1, r3
 8019cfe:	20f5      	movs	r0, #245	; 0xf5
 8019d00:	f000 f939 	bl	8019f76 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 8019d04:	78fb      	ldrb	r3, [r7, #3]
 8019d06:	3301      	adds	r3, #1
 8019d08:	b2db      	uxtb	r3, r3
 8019d0a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8019d0e:	4619      	mov	r1, r3
 8019d10:	480c      	ldr	r0, [pc, #48]	; (8019d44 <RadioSend+0x1f8>)
 8019d12:	f001 f9ad 	bl	801b070 <SUBGRF_SendPayload>
            break;
 8019d16:	e000      	b.n	8019d1a <RadioSend+0x1ce>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8019d18:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8019d1a:	4b07      	ldr	r3, [pc, #28]	; (8019d38 <RadioSend+0x1ec>)
 8019d1c:	685b      	ldr	r3, [r3, #4]
 8019d1e:	4619      	mov	r1, r3
 8019d20:	4809      	ldr	r0, [pc, #36]	; (8019d48 <RadioSend+0x1fc>)
 8019d22:	f003 fac3 	bl	801d2ac <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 8019d26:	4808      	ldr	r0, [pc, #32]	; (8019d48 <RadioSend+0x1fc>)
 8019d28:	f003 f9e2 	bl	801d0f0 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 8019d2c:	2300      	movs	r3, #0
}
 8019d2e:	4618      	mov	r0, r3
 8019d30:	3710      	adds	r7, #16
 8019d32:	46bd      	mov	sp, r7
 8019d34:	bd80      	pop	{r7, pc}
 8019d36:	bf00      	nop
 8019d38:	20001be8 	.word	0x20001be8
 8019d3c:	20001bf6 	.word	0x20001bf6
 8019d40:	0801e40c 	.word	0x0801e40c
 8019d44:	20001ae4 	.word	0x20001ae4
 8019d48:	20001c44 	.word	0x20001c44

08019d4c <RadioSleep>:

static void RadioSleep( void )
{
 8019d4c:	b580      	push	{r7, lr}
 8019d4e:	b082      	sub	sp, #8
 8019d50:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8019d52:	2300      	movs	r3, #0
 8019d54:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8019d56:	793b      	ldrb	r3, [r7, #4]
 8019d58:	f043 0304 	orr.w	r3, r3, #4
 8019d5c:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8019d5e:	7938      	ldrb	r0, [r7, #4]
 8019d60:	f001 fa62 	bl	801b228 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8019d64:	2002      	movs	r0, #2
 8019d66:	f7e8 fa6b 	bl	8002240 <HAL_Delay>
}
 8019d6a:	bf00      	nop
 8019d6c:	3708      	adds	r7, #8
 8019d6e:	46bd      	mov	sp, r7
 8019d70:	bd80      	pop	{r7, pc}

08019d72 <RadioStandby>:

static void RadioStandby( void )
{
 8019d72:	b580      	push	{r7, lr}
 8019d74:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8019d76:	2000      	movs	r0, #0
 8019d78:	f001 fa88 	bl	801b28c <SUBGRF_SetStandby>
}
 8019d7c:	bf00      	nop
 8019d7e:	bd80      	pop	{r7, pc}

08019d80 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8019d80:	b580      	push	{r7, lr}
 8019d82:	b082      	sub	sp, #8
 8019d84:	af00      	add	r7, sp, #0
 8019d86:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 8019d88:	f002 faf1 	bl	801c36e <RFW_Is_Init>
 8019d8c:	4603      	mov	r3, r0
 8019d8e:	2b01      	cmp	r3, #1
 8019d90:	d102      	bne.n	8019d98 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 8019d92:	f002 fb14 	bl	801c3be <RFW_ReceiveInit>
 8019d96:	e007      	b.n	8019da8 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8019d98:	2300      	movs	r3, #0
 8019d9a:	2200      	movs	r2, #0
 8019d9c:	f240 2162 	movw	r1, #610	; 0x262
 8019da0:	f240 2062 	movw	r0, #610	; 0x262
 8019da4:	f001 fc46 	bl	801b634 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8019da8:	687b      	ldr	r3, [r7, #4]
 8019daa:	2b00      	cmp	r3, #0
 8019dac:	d006      	beq.n	8019dbc <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8019dae:	6879      	ldr	r1, [r7, #4]
 8019db0:	4811      	ldr	r0, [pc, #68]	; (8019df8 <RadioRx+0x78>)
 8019db2:	f003 fa7b 	bl	801d2ac <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8019db6:	4810      	ldr	r0, [pc, #64]	; (8019df8 <RadioRx+0x78>)
 8019db8:	f003 f99a 	bl	801d0f0 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8019dbc:	4b0f      	ldr	r3, [pc, #60]	; (8019dfc <RadioRx+0x7c>)
 8019dbe:	2200      	movs	r2, #0
 8019dc0:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8019dc2:	4b0e      	ldr	r3, [pc, #56]	; (8019dfc <RadioRx+0x7c>)
 8019dc4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019dc8:	2100      	movs	r1, #0
 8019dca:	4618      	mov	r0, r3
 8019dcc:	f002 f8d6 	bl	801bf7c <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8019dd0:	4b0a      	ldr	r3, [pc, #40]	; (8019dfc <RadioRx+0x7c>)
 8019dd2:	785b      	ldrb	r3, [r3, #1]
 8019dd4:	2b00      	cmp	r3, #0
 8019dd6:	d004      	beq.n	8019de2 <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8019dd8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8019ddc:	f001 fa92 	bl	801b304 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8019de0:	e005      	b.n	8019dee <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8019de2:	4b06      	ldr	r3, [pc, #24]	; (8019dfc <RadioRx+0x7c>)
 8019de4:	689b      	ldr	r3, [r3, #8]
 8019de6:	019b      	lsls	r3, r3, #6
 8019de8:	4618      	mov	r0, r3
 8019dea:	f001 fa8b 	bl	801b304 <SUBGRF_SetRx>
}
 8019dee:	bf00      	nop
 8019df0:	3708      	adds	r7, #8
 8019df2:	46bd      	mov	sp, r7
 8019df4:	bd80      	pop	{r7, pc}
 8019df6:	bf00      	nop
 8019df8:	20001c5c 	.word	0x20001c5c
 8019dfc:	20001be8 	.word	0x20001be8

08019e00 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8019e00:	b580      	push	{r7, lr}
 8019e02:	b082      	sub	sp, #8
 8019e04:	af00      	add	r7, sp, #0
 8019e06:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 8019e08:	f002 fab1 	bl	801c36e <RFW_Is_Init>
 8019e0c:	4603      	mov	r3, r0
 8019e0e:	2b01      	cmp	r3, #1
 8019e10:	d102      	bne.n	8019e18 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 8019e12:	f002 fad4 	bl	801c3be <RFW_ReceiveInit>
 8019e16:	e007      	b.n	8019e28 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8019e18:	2300      	movs	r3, #0
 8019e1a:	2200      	movs	r2, #0
 8019e1c:	f240 2162 	movw	r1, #610	; 0x262
 8019e20:	f240 2062 	movw	r0, #610	; 0x262
 8019e24:	f001 fc06 	bl	801b634 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8019e28:	687b      	ldr	r3, [r7, #4]
 8019e2a:	2b00      	cmp	r3, #0
 8019e2c:	d006      	beq.n	8019e3c <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8019e2e:	6879      	ldr	r1, [r7, #4]
 8019e30:	4811      	ldr	r0, [pc, #68]	; (8019e78 <RadioRxBoosted+0x78>)
 8019e32:	f003 fa3b 	bl	801d2ac <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8019e36:	4810      	ldr	r0, [pc, #64]	; (8019e78 <RadioRxBoosted+0x78>)
 8019e38:	f003 f95a 	bl	801d0f0 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8019e3c:	4b0f      	ldr	r3, [pc, #60]	; (8019e7c <RadioRxBoosted+0x7c>)
 8019e3e:	2200      	movs	r2, #0
 8019e40:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8019e42:	4b0e      	ldr	r3, [pc, #56]	; (8019e7c <RadioRxBoosted+0x7c>)
 8019e44:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019e48:	2100      	movs	r1, #0
 8019e4a:	4618      	mov	r0, r3
 8019e4c:	f002 f896 	bl	801bf7c <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8019e50:	4b0a      	ldr	r3, [pc, #40]	; (8019e7c <RadioRxBoosted+0x7c>)
 8019e52:	785b      	ldrb	r3, [r3, #1]
 8019e54:	2b00      	cmp	r3, #0
 8019e56:	d004      	beq.n	8019e62 <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8019e58:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8019e5c:	f001 fa72 	bl	801b344 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8019e60:	e005      	b.n	8019e6e <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8019e62:	4b06      	ldr	r3, [pc, #24]	; (8019e7c <RadioRxBoosted+0x7c>)
 8019e64:	689b      	ldr	r3, [r3, #8]
 8019e66:	019b      	lsls	r3, r3, #6
 8019e68:	4618      	mov	r0, r3
 8019e6a:	f001 fa6b 	bl	801b344 <SUBGRF_SetRxBoosted>
}
 8019e6e:	bf00      	nop
 8019e70:	3708      	adds	r7, #8
 8019e72:	46bd      	mov	sp, r7
 8019e74:	bd80      	pop	{r7, pc}
 8019e76:	bf00      	nop
 8019e78:	20001c5c 	.word	0x20001c5c
 8019e7c:	20001be8 	.word	0x20001be8

08019e80 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8019e80:	b580      	push	{r7, lr}
 8019e82:	b082      	sub	sp, #8
 8019e84:	af00      	add	r7, sp, #0
 8019e86:	6078      	str	r0, [r7, #4]
 8019e88:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8019e8a:	687b      	ldr	r3, [r7, #4]
 8019e8c:	005a      	lsls	r2, r3, #1
 8019e8e:	683b      	ldr	r3, [r7, #0]
 8019e90:	4413      	add	r3, r2
 8019e92:	4a0c      	ldr	r2, [pc, #48]	; (8019ec4 <RadioSetRxDutyCycle+0x44>)
 8019e94:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8019e96:	2300      	movs	r3, #0
 8019e98:	2200      	movs	r2, #0
 8019e9a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8019e9e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8019ea2:	f001 fbc7 	bl	801b634 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8019ea6:	4b07      	ldr	r3, [pc, #28]	; (8019ec4 <RadioSetRxDutyCycle+0x44>)
 8019ea8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019eac:	2100      	movs	r1, #0
 8019eae:	4618      	mov	r0, r3
 8019eb0:	f002 f864 	bl	801bf7c <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8019eb4:	6839      	ldr	r1, [r7, #0]
 8019eb6:	6878      	ldr	r0, [r7, #4]
 8019eb8:	f001 fa68 	bl	801b38c <SUBGRF_SetRxDutyCycle>
}
 8019ebc:	bf00      	nop
 8019ebe:	3708      	adds	r7, #8
 8019ec0:	46bd      	mov	sp, r7
 8019ec2:	bd80      	pop	{r7, pc}
 8019ec4:	20001be8 	.word	0x20001be8

08019ec8 <RadioStartCad>:

static void RadioStartCad( void )
{
 8019ec8:	b580      	push	{r7, lr}
 8019eca:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8019ecc:	4b09      	ldr	r3, [pc, #36]	; (8019ef4 <RadioStartCad+0x2c>)
 8019ece:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019ed2:	2100      	movs	r1, #0
 8019ed4:	4618      	mov	r0, r3
 8019ed6:	f002 f851 	bl	801bf7c <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8019eda:	2300      	movs	r3, #0
 8019edc:	2200      	movs	r2, #0
 8019ede:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8019ee2:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8019ee6:	f001 fba5 	bl	801b634 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8019eea:	f001 fa7b 	bl	801b3e4 <SUBGRF_SetCad>
}
 8019eee:	bf00      	nop
 8019ef0:	bd80      	pop	{r7, pc}
 8019ef2:	bf00      	nop
 8019ef4:	20001be8 	.word	0x20001be8

08019ef8 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8019ef8:	b580      	push	{r7, lr}
 8019efa:	b084      	sub	sp, #16
 8019efc:	af00      	add	r7, sp, #0
 8019efe:	6078      	str	r0, [r7, #4]
 8019f00:	460b      	mov	r3, r1
 8019f02:	70fb      	strb	r3, [r7, #3]
 8019f04:	4613      	mov	r3, r2
 8019f06:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 8019f08:	883b      	ldrh	r3, [r7, #0]
 8019f0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019f0e:	fb02 f303 	mul.w	r3, r2, r3
 8019f12:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8019f14:	6878      	ldr	r0, [r7, #4]
 8019f16:	f001 fbe9 	bl	801b6ec <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8019f1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019f1e:	4618      	mov	r0, r3
 8019f20:	f002 f854 	bl	801bfcc <SUBGRF_SetRfTxPower>
 8019f24:	4603      	mov	r3, r0
 8019f26:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8019f28:	210e      	movs	r1, #14
 8019f2a:	f640 101f 	movw	r0, #2335	; 0x91f
 8019f2e:	f001 ff31 	bl	801bd94 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8019f32:	7afb      	ldrb	r3, [r7, #11]
 8019f34:	2101      	movs	r1, #1
 8019f36:	4618      	mov	r0, r3
 8019f38:	f002 f820 	bl	801bf7c <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8019f3c:	f001 fa60 	bl	801b400 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8019f40:	68f9      	ldr	r1, [r7, #12]
 8019f42:	4805      	ldr	r0, [pc, #20]	; (8019f58 <RadioSetTxContinuousWave+0x60>)
 8019f44:	f003 f9b2 	bl	801d2ac <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8019f48:	4803      	ldr	r0, [pc, #12]	; (8019f58 <RadioSetTxContinuousWave+0x60>)
 8019f4a:	f003 f8d1 	bl	801d0f0 <UTIL_TIMER_Start>
}
 8019f4e:	bf00      	nop
 8019f50:	3710      	adds	r7, #16
 8019f52:	46bd      	mov	sp, r7
 8019f54:	bd80      	pop	{r7, pc}
 8019f56:	bf00      	nop
 8019f58:	20001c44 	.word	0x20001c44

08019f5c <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8019f5c:	b580      	push	{r7, lr}
 8019f5e:	b082      	sub	sp, #8
 8019f60:	af00      	add	r7, sp, #0
 8019f62:	4603      	mov	r3, r0
 8019f64:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8019f66:	f001 fe82 	bl	801bc6e <SUBGRF_GetRssiInst>
 8019f6a:	4603      	mov	r3, r0
 8019f6c:	b21b      	sxth	r3, r3
}
 8019f6e:	4618      	mov	r0, r3
 8019f70:	3708      	adds	r7, #8
 8019f72:	46bd      	mov	sp, r7
 8019f74:	bd80      	pop	{r7, pc}

08019f76 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8019f76:	b580      	push	{r7, lr}
 8019f78:	b082      	sub	sp, #8
 8019f7a:	af00      	add	r7, sp, #0
 8019f7c:	4603      	mov	r3, r0
 8019f7e:	460a      	mov	r2, r1
 8019f80:	80fb      	strh	r3, [r7, #6]
 8019f82:	4613      	mov	r3, r2
 8019f84:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8019f86:	797a      	ldrb	r2, [r7, #5]
 8019f88:	88fb      	ldrh	r3, [r7, #6]
 8019f8a:	4611      	mov	r1, r2
 8019f8c:	4618      	mov	r0, r3
 8019f8e:	f001 ff01 	bl	801bd94 <SUBGRF_WriteRegister>
}
 8019f92:	bf00      	nop
 8019f94:	3708      	adds	r7, #8
 8019f96:	46bd      	mov	sp, r7
 8019f98:	bd80      	pop	{r7, pc}

08019f9a <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8019f9a:	b580      	push	{r7, lr}
 8019f9c:	b082      	sub	sp, #8
 8019f9e:	af00      	add	r7, sp, #0
 8019fa0:	4603      	mov	r3, r0
 8019fa2:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8019fa4:	88fb      	ldrh	r3, [r7, #6]
 8019fa6:	4618      	mov	r0, r3
 8019fa8:	f001 ff08 	bl	801bdbc <SUBGRF_ReadRegister>
 8019fac:	4603      	mov	r3, r0
}
 8019fae:	4618      	mov	r0, r3
 8019fb0:	3708      	adds	r7, #8
 8019fb2:	46bd      	mov	sp, r7
 8019fb4:	bd80      	pop	{r7, pc}

08019fb6 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8019fb6:	b580      	push	{r7, lr}
 8019fb8:	b082      	sub	sp, #8
 8019fba:	af00      	add	r7, sp, #0
 8019fbc:	4603      	mov	r3, r0
 8019fbe:	6039      	str	r1, [r7, #0]
 8019fc0:	80fb      	strh	r3, [r7, #6]
 8019fc2:	4613      	mov	r3, r2
 8019fc4:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8019fc6:	797b      	ldrb	r3, [r7, #5]
 8019fc8:	b29a      	uxth	r2, r3
 8019fca:	88fb      	ldrh	r3, [r7, #6]
 8019fcc:	6839      	ldr	r1, [r7, #0]
 8019fce:	4618      	mov	r0, r3
 8019fd0:	f001 ff08 	bl	801bde4 <SUBGRF_WriteRegisters>
}
 8019fd4:	bf00      	nop
 8019fd6:	3708      	adds	r7, #8
 8019fd8:	46bd      	mov	sp, r7
 8019fda:	bd80      	pop	{r7, pc}

08019fdc <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8019fdc:	b580      	push	{r7, lr}
 8019fde:	b082      	sub	sp, #8
 8019fe0:	af00      	add	r7, sp, #0
 8019fe2:	4603      	mov	r3, r0
 8019fe4:	6039      	str	r1, [r7, #0]
 8019fe6:	80fb      	strh	r3, [r7, #6]
 8019fe8:	4613      	mov	r3, r2
 8019fea:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8019fec:	797b      	ldrb	r3, [r7, #5]
 8019fee:	b29a      	uxth	r2, r3
 8019ff0:	88fb      	ldrh	r3, [r7, #6]
 8019ff2:	6839      	ldr	r1, [r7, #0]
 8019ff4:	4618      	mov	r0, r3
 8019ff6:	f001 ff17 	bl	801be28 <SUBGRF_ReadRegisters>
}
 8019ffa:	bf00      	nop
 8019ffc:	3708      	adds	r7, #8
 8019ffe:	46bd      	mov	sp, r7
 801a000:	bd80      	pop	{r7, pc}
	...

0801a004 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 801a004:	b580      	push	{r7, lr}
 801a006:	b082      	sub	sp, #8
 801a008:	af00      	add	r7, sp, #0
 801a00a:	4603      	mov	r3, r0
 801a00c:	460a      	mov	r2, r1
 801a00e:	71fb      	strb	r3, [r7, #7]
 801a010:	4613      	mov	r3, r2
 801a012:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 801a014:	79fb      	ldrb	r3, [r7, #7]
 801a016:	2b01      	cmp	r3, #1
 801a018:	d10a      	bne.n	801a030 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 801a01a:	4a0e      	ldr	r2, [pc, #56]	; (801a054 <RadioSetMaxPayloadLength+0x50>)
 801a01c:	79bb      	ldrb	r3, [r7, #6]
 801a01e:	7013      	strb	r3, [r2, #0]
 801a020:	4b0c      	ldr	r3, [pc, #48]	; (801a054 <RadioSetMaxPayloadLength+0x50>)
 801a022:	781a      	ldrb	r2, [r3, #0]
 801a024:	4b0c      	ldr	r3, [pc, #48]	; (801a058 <RadioSetMaxPayloadLength+0x54>)
 801a026:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a028:	480c      	ldr	r0, [pc, #48]	; (801a05c <RadioSetMaxPayloadLength+0x58>)
 801a02a:	f001 fd6b 	bl	801bb04 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 801a02e:	e00d      	b.n	801a04c <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 801a030:	4b09      	ldr	r3, [pc, #36]	; (801a058 <RadioSetMaxPayloadLength+0x54>)
 801a032:	7d5b      	ldrb	r3, [r3, #21]
 801a034:	2b01      	cmp	r3, #1
 801a036:	d109      	bne.n	801a04c <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 801a038:	4a06      	ldr	r2, [pc, #24]	; (801a054 <RadioSetMaxPayloadLength+0x50>)
 801a03a:	79bb      	ldrb	r3, [r7, #6]
 801a03c:	7013      	strb	r3, [r2, #0]
 801a03e:	4b05      	ldr	r3, [pc, #20]	; (801a054 <RadioSetMaxPayloadLength+0x50>)
 801a040:	781a      	ldrb	r2, [r3, #0]
 801a042:	4b05      	ldr	r3, [pc, #20]	; (801a058 <RadioSetMaxPayloadLength+0x54>)
 801a044:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a046:	4805      	ldr	r0, [pc, #20]	; (801a05c <RadioSetMaxPayloadLength+0x58>)
 801a048:	f001 fd5c 	bl	801bb04 <SUBGRF_SetPacketParams>
}
 801a04c:	bf00      	nop
 801a04e:	3708      	adds	r7, #8
 801a050:	46bd      	mov	sp, r7
 801a052:	bd80      	pop	{r7, pc}
 801a054:	20000134 	.word	0x20000134
 801a058:	20001be8 	.word	0x20001be8
 801a05c:	20001bf6 	.word	0x20001bf6

0801a060 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 801a060:	b580      	push	{r7, lr}
 801a062:	b082      	sub	sp, #8
 801a064:	af00      	add	r7, sp, #0
 801a066:	4603      	mov	r3, r0
 801a068:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 801a06a:	4a13      	ldr	r2, [pc, #76]	; (801a0b8 <RadioSetPublicNetwork+0x58>)
 801a06c:	79fb      	ldrb	r3, [r7, #7]
 801a06e:	7313      	strb	r3, [r2, #12]
 801a070:	4b11      	ldr	r3, [pc, #68]	; (801a0b8 <RadioSetPublicNetwork+0x58>)
 801a072:	7b1a      	ldrb	r2, [r3, #12]
 801a074:	4b10      	ldr	r3, [pc, #64]	; (801a0b8 <RadioSetPublicNetwork+0x58>)
 801a076:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 801a078:	2001      	movs	r0, #1
 801a07a:	f7ff f811 	bl	80190a0 <RadioSetModem>
    if( enable == true )
 801a07e:	79fb      	ldrb	r3, [r7, #7]
 801a080:	2b00      	cmp	r3, #0
 801a082:	d00a      	beq.n	801a09a <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 801a084:	2134      	movs	r1, #52	; 0x34
 801a086:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801a08a:	f001 fe83 	bl	801bd94 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 801a08e:	2144      	movs	r1, #68	; 0x44
 801a090:	f240 7041 	movw	r0, #1857	; 0x741
 801a094:	f001 fe7e 	bl	801bd94 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 801a098:	e009      	b.n	801a0ae <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 801a09a:	2114      	movs	r1, #20
 801a09c:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801a0a0:	f001 fe78 	bl	801bd94 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 801a0a4:	2124      	movs	r1, #36	; 0x24
 801a0a6:	f240 7041 	movw	r0, #1857	; 0x741
 801a0aa:	f001 fe73 	bl	801bd94 <SUBGRF_WriteRegister>
}
 801a0ae:	bf00      	nop
 801a0b0:	3708      	adds	r7, #8
 801a0b2:	46bd      	mov	sp, r7
 801a0b4:	bd80      	pop	{r7, pc}
 801a0b6:	bf00      	nop
 801a0b8:	20001be8 	.word	0x20001be8

0801a0bc <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 801a0bc:	b580      	push	{r7, lr}
 801a0be:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 801a0c0:	f001 ffb8 	bl	801c034 <SUBGRF_GetRadioWakeUpTime>
 801a0c4:	4603      	mov	r3, r0
 801a0c6:	3303      	adds	r3, #3
}
 801a0c8:	4618      	mov	r0, r3
 801a0ca:	bd80      	pop	{r7, pc}

0801a0cc <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 801a0cc:	b580      	push	{r7, lr}
 801a0ce:	b082      	sub	sp, #8
 801a0d0:	af00      	add	r7, sp, #0
 801a0d2:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 801a0d4:	f000 f80e 	bl	801a0f4 <RadioOnTxTimeoutProcess>
}
 801a0d8:	bf00      	nop
 801a0da:	3708      	adds	r7, #8
 801a0dc:	46bd      	mov	sp, r7
 801a0de:	bd80      	pop	{r7, pc}

0801a0e0 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 801a0e0:	b580      	push	{r7, lr}
 801a0e2:	b082      	sub	sp, #8
 801a0e4:	af00      	add	r7, sp, #0
 801a0e6:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 801a0e8:	f000 f818 	bl	801a11c <RadioOnRxTimeoutProcess>
}
 801a0ec:	bf00      	nop
 801a0ee:	3708      	adds	r7, #8
 801a0f0:	46bd      	mov	sp, r7
 801a0f2:	bd80      	pop	{r7, pc}

0801a0f4 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 801a0f4:	b580      	push	{r7, lr}
 801a0f6:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801a0f8:	4b07      	ldr	r3, [pc, #28]	; (801a118 <RadioOnTxTimeoutProcess+0x24>)
 801a0fa:	681b      	ldr	r3, [r3, #0]
 801a0fc:	2b00      	cmp	r3, #0
 801a0fe:	d008      	beq.n	801a112 <RadioOnTxTimeoutProcess+0x1e>
 801a100:	4b05      	ldr	r3, [pc, #20]	; (801a118 <RadioOnTxTimeoutProcess+0x24>)
 801a102:	681b      	ldr	r3, [r3, #0]
 801a104:	685b      	ldr	r3, [r3, #4]
 801a106:	2b00      	cmp	r3, #0
 801a108:	d003      	beq.n	801a112 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 801a10a:	4b03      	ldr	r3, [pc, #12]	; (801a118 <RadioOnTxTimeoutProcess+0x24>)
 801a10c:	681b      	ldr	r3, [r3, #0]
 801a10e:	685b      	ldr	r3, [r3, #4]
 801a110:	4798      	blx	r3
    }
}
 801a112:	bf00      	nop
 801a114:	bd80      	pop	{r7, pc}
 801a116:	bf00      	nop
 801a118:	20001be4 	.word	0x20001be4

0801a11c <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 801a11c:	b580      	push	{r7, lr}
 801a11e:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801a120:	4b07      	ldr	r3, [pc, #28]	; (801a140 <RadioOnRxTimeoutProcess+0x24>)
 801a122:	681b      	ldr	r3, [r3, #0]
 801a124:	2b00      	cmp	r3, #0
 801a126:	d008      	beq.n	801a13a <RadioOnRxTimeoutProcess+0x1e>
 801a128:	4b05      	ldr	r3, [pc, #20]	; (801a140 <RadioOnRxTimeoutProcess+0x24>)
 801a12a:	681b      	ldr	r3, [r3, #0]
 801a12c:	68db      	ldr	r3, [r3, #12]
 801a12e:	2b00      	cmp	r3, #0
 801a130:	d003      	beq.n	801a13a <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 801a132:	4b03      	ldr	r3, [pc, #12]	; (801a140 <RadioOnRxTimeoutProcess+0x24>)
 801a134:	681b      	ldr	r3, [r3, #0]
 801a136:	68db      	ldr	r3, [r3, #12]
 801a138:	4798      	blx	r3
    }
}
 801a13a:	bf00      	nop
 801a13c:	bd80      	pop	{r7, pc}
 801a13e:	bf00      	nop
 801a140:	20001be4 	.word	0x20001be4

0801a144 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 801a144:	b580      	push	{r7, lr}
 801a146:	b082      	sub	sp, #8
 801a148:	af00      	add	r7, sp, #0
 801a14a:	4603      	mov	r3, r0
 801a14c:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 801a14e:	4a05      	ldr	r2, [pc, #20]	; (801a164 <RadioOnDioIrq+0x20>)
 801a150:	88fb      	ldrh	r3, [r7, #6]
 801a152:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 801a156:	f000 f807 	bl	801a168 <RadioIrqProcess>
}
 801a15a:	bf00      	nop
 801a15c:	3708      	adds	r7, #8
 801a15e:	46bd      	mov	sp, r7
 801a160:	bd80      	pop	{r7, pc}
 801a162:	bf00      	nop
 801a164:	20001be8 	.word	0x20001be8

0801a168 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 801a168:	b5b0      	push	{r4, r5, r7, lr}
 801a16a:	b082      	sub	sp, #8
 801a16c:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 801a16e:	2300      	movs	r3, #0
 801a170:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 801a172:	2300      	movs	r3, #0
 801a174:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 801a176:	4ba8      	ldr	r3, [pc, #672]	; (801a418 <RadioIrqProcess+0x2b0>)
 801a178:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801a17c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a180:	f000 810d 	beq.w	801a39e <RadioIrqProcess+0x236>
 801a184:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a188:	f300 81e8 	bgt.w	801a55c <RadioIrqProcess+0x3f4>
 801a18c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a190:	f000 80f1 	beq.w	801a376 <RadioIrqProcess+0x20e>
 801a194:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a198:	f300 81e0 	bgt.w	801a55c <RadioIrqProcess+0x3f4>
 801a19c:	2b80      	cmp	r3, #128	; 0x80
 801a19e:	f000 80d6 	beq.w	801a34e <RadioIrqProcess+0x1e6>
 801a1a2:	2b80      	cmp	r3, #128	; 0x80
 801a1a4:	f300 81da 	bgt.w	801a55c <RadioIrqProcess+0x3f4>
 801a1a8:	2b20      	cmp	r3, #32
 801a1aa:	dc49      	bgt.n	801a240 <RadioIrqProcess+0xd8>
 801a1ac:	2b00      	cmp	r3, #0
 801a1ae:	f340 81d5 	ble.w	801a55c <RadioIrqProcess+0x3f4>
 801a1b2:	3b01      	subs	r3, #1
 801a1b4:	2b1f      	cmp	r3, #31
 801a1b6:	f200 81d1 	bhi.w	801a55c <RadioIrqProcess+0x3f4>
 801a1ba:	a201      	add	r2, pc, #4	; (adr r2, 801a1c0 <RadioIrqProcess+0x58>)
 801a1bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a1c0:	0801a249 	.word	0x0801a249
 801a1c4:	0801a283 	.word	0x0801a283
 801a1c8:	0801a55d 	.word	0x0801a55d
 801a1cc:	0801a439 	.word	0x0801a439
 801a1d0:	0801a55d 	.word	0x0801a55d
 801a1d4:	0801a55d 	.word	0x0801a55d
 801a1d8:	0801a55d 	.word	0x0801a55d
 801a1dc:	0801a4b5 	.word	0x0801a4b5
 801a1e0:	0801a55d 	.word	0x0801a55d
 801a1e4:	0801a55d 	.word	0x0801a55d
 801a1e8:	0801a55d 	.word	0x0801a55d
 801a1ec:	0801a55d 	.word	0x0801a55d
 801a1f0:	0801a55d 	.word	0x0801a55d
 801a1f4:	0801a55d 	.word	0x0801a55d
 801a1f8:	0801a55d 	.word	0x0801a55d
 801a1fc:	0801a4d1 	.word	0x0801a4d1
 801a200:	0801a55d 	.word	0x0801a55d
 801a204:	0801a55d 	.word	0x0801a55d
 801a208:	0801a55d 	.word	0x0801a55d
 801a20c:	0801a55d 	.word	0x0801a55d
 801a210:	0801a55d 	.word	0x0801a55d
 801a214:	0801a55d 	.word	0x0801a55d
 801a218:	0801a55d 	.word	0x0801a55d
 801a21c:	0801a55d 	.word	0x0801a55d
 801a220:	0801a55d 	.word	0x0801a55d
 801a224:	0801a55d 	.word	0x0801a55d
 801a228:	0801a55d 	.word	0x0801a55d
 801a22c:	0801a55d 	.word	0x0801a55d
 801a230:	0801a55d 	.word	0x0801a55d
 801a234:	0801a55d 	.word	0x0801a55d
 801a238:	0801a55d 	.word	0x0801a55d
 801a23c:	0801a4df 	.word	0x0801a4df
 801a240:	2b40      	cmp	r3, #64	; 0x40
 801a242:	f000 816d 	beq.w	801a520 <RadioIrqProcess+0x3b8>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 801a246:	e189      	b.n	801a55c <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 801a248:	4874      	ldr	r0, [pc, #464]	; (801a41c <RadioIrqProcess+0x2b4>)
 801a24a:	f002 ffbf 	bl	801d1cc <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 801a24e:	2000      	movs	r0, #0
 801a250:	f001 f81c 	bl	801b28c <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 801a254:	f002 f892 	bl	801c37c <RFW_Is_LongPacketModeEnabled>
 801a258:	4603      	mov	r3, r0
 801a25a:	2b01      	cmp	r3, #1
 801a25c:	d101      	bne.n	801a262 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 801a25e:	f002 f8b6 	bl	801c3ce <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801a262:	4b6f      	ldr	r3, [pc, #444]	; (801a420 <RadioIrqProcess+0x2b8>)
 801a264:	681b      	ldr	r3, [r3, #0]
 801a266:	2b00      	cmp	r3, #0
 801a268:	f000 817a 	beq.w	801a560 <RadioIrqProcess+0x3f8>
 801a26c:	4b6c      	ldr	r3, [pc, #432]	; (801a420 <RadioIrqProcess+0x2b8>)
 801a26e:	681b      	ldr	r3, [r3, #0]
 801a270:	681b      	ldr	r3, [r3, #0]
 801a272:	2b00      	cmp	r3, #0
 801a274:	f000 8174 	beq.w	801a560 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 801a278:	4b69      	ldr	r3, [pc, #420]	; (801a420 <RadioIrqProcess+0x2b8>)
 801a27a:	681b      	ldr	r3, [r3, #0]
 801a27c:	681b      	ldr	r3, [r3, #0]
 801a27e:	4798      	blx	r3
        break;
 801a280:	e16e      	b.n	801a560 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 801a282:	4868      	ldr	r0, [pc, #416]	; (801a424 <RadioIrqProcess+0x2bc>)
 801a284:	f002 ffa2 	bl	801d1cc <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801a288:	4b63      	ldr	r3, [pc, #396]	; (801a418 <RadioIrqProcess+0x2b0>)
 801a28a:	785b      	ldrb	r3, [r3, #1]
 801a28c:	f083 0301 	eor.w	r3, r3, #1
 801a290:	b2db      	uxtb	r3, r3
 801a292:	2b00      	cmp	r3, #0
 801a294:	d014      	beq.n	801a2c0 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 801a296:	2000      	movs	r0, #0
 801a298:	f000 fff8 	bl	801b28c <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 801a29c:	2100      	movs	r1, #0
 801a29e:	f640 1002 	movw	r0, #2306	; 0x902
 801a2a2:	f001 fd77 	bl	801bd94 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 801a2a6:	f640 1044 	movw	r0, #2372	; 0x944
 801a2aa:	f001 fd87 	bl	801bdbc <SUBGRF_ReadRegister>
 801a2ae:	4603      	mov	r3, r0
 801a2b0:	f043 0302 	orr.w	r3, r3, #2
 801a2b4:	b2db      	uxtb	r3, r3
 801a2b6:	4619      	mov	r1, r3
 801a2b8:	f640 1044 	movw	r0, #2372	; 0x944
 801a2bc:	f001 fd6a 	bl	801bd94 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 801a2c0:	1dfb      	adds	r3, r7, #7
 801a2c2:	22ff      	movs	r2, #255	; 0xff
 801a2c4:	4619      	mov	r1, r3
 801a2c6:	4858      	ldr	r0, [pc, #352]	; (801a428 <RadioIrqProcess+0x2c0>)
 801a2c8:	f000 feb0 	bl	801b02c <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 801a2cc:	4857      	ldr	r0, [pc, #348]	; (801a42c <RadioIrqProcess+0x2c4>)
 801a2ce:	f001 fd0f 	bl	801bcf0 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801a2d2:	4b53      	ldr	r3, [pc, #332]	; (801a420 <RadioIrqProcess+0x2b8>)
 801a2d4:	681b      	ldr	r3, [r3, #0]
 801a2d6:	2b00      	cmp	r3, #0
 801a2d8:	f000 8144 	beq.w	801a564 <RadioIrqProcess+0x3fc>
 801a2dc:	4b50      	ldr	r3, [pc, #320]	; (801a420 <RadioIrqProcess+0x2b8>)
 801a2de:	681b      	ldr	r3, [r3, #0]
 801a2e0:	689b      	ldr	r3, [r3, #8]
 801a2e2:	2b00      	cmp	r3, #0
 801a2e4:	f000 813e 	beq.w	801a564 <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 801a2e8:	4b4b      	ldr	r3, [pc, #300]	; (801a418 <RadioIrqProcess+0x2b0>)
 801a2ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801a2ee:	2b01      	cmp	r3, #1
 801a2f0:	d10e      	bne.n	801a310 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 801a2f2:	4b4b      	ldr	r3, [pc, #300]	; (801a420 <RadioIrqProcess+0x2b8>)
 801a2f4:	681b      	ldr	r3, [r3, #0]
 801a2f6:	689c      	ldr	r4, [r3, #8]
 801a2f8:	79fb      	ldrb	r3, [r7, #7]
 801a2fa:	b299      	uxth	r1, r3
 801a2fc:	4b46      	ldr	r3, [pc, #280]	; (801a418 <RadioIrqProcess+0x2b0>)
 801a2fe:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 801a302:	b21a      	sxth	r2, r3
 801a304:	4b44      	ldr	r3, [pc, #272]	; (801a418 <RadioIrqProcess+0x2b0>)
 801a306:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 801a30a:	4847      	ldr	r0, [pc, #284]	; (801a428 <RadioIrqProcess+0x2c0>)
 801a30c:	47a0      	blx	r4
                break;
 801a30e:	e01d      	b.n	801a34c <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 801a310:	4b41      	ldr	r3, [pc, #260]	; (801a418 <RadioIrqProcess+0x2b0>)
 801a312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a314:	463a      	mov	r2, r7
 801a316:	4611      	mov	r1, r2
 801a318:	4618      	mov	r0, r3
 801a31a:	f001 ff7d 	bl	801c218 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 801a31e:	4b40      	ldr	r3, [pc, #256]	; (801a420 <RadioIrqProcess+0x2b8>)
 801a320:	681b      	ldr	r3, [r3, #0]
 801a322:	689c      	ldr	r4, [r3, #8]
 801a324:	79fb      	ldrb	r3, [r7, #7]
 801a326:	b299      	uxth	r1, r3
 801a328:	4b3b      	ldr	r3, [pc, #236]	; (801a418 <RadioIrqProcess+0x2b0>)
 801a32a:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 801a32e:	b218      	sxth	r0, r3
 801a330:	683b      	ldr	r3, [r7, #0]
 801a332:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 801a336:	4a3e      	ldr	r2, [pc, #248]	; (801a430 <RadioIrqProcess+0x2c8>)
 801a338:	fb82 5203 	smull	r5, r2, r2, r3
 801a33c:	1192      	asrs	r2, r2, #6
 801a33e:	17db      	asrs	r3, r3, #31
 801a340:	1ad3      	subs	r3, r2, r3
 801a342:	b25b      	sxtb	r3, r3
 801a344:	4602      	mov	r2, r0
 801a346:	4838      	ldr	r0, [pc, #224]	; (801a428 <RadioIrqProcess+0x2c0>)
 801a348:	47a0      	blx	r4
                break;
 801a34a:	bf00      	nop
        break;
 801a34c:	e10a      	b.n	801a564 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 801a34e:	2000      	movs	r0, #0
 801a350:	f000 ff9c 	bl	801b28c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801a354:	4b32      	ldr	r3, [pc, #200]	; (801a420 <RadioIrqProcess+0x2b8>)
 801a356:	681b      	ldr	r3, [r3, #0]
 801a358:	2b00      	cmp	r3, #0
 801a35a:	f000 8105 	beq.w	801a568 <RadioIrqProcess+0x400>
 801a35e:	4b30      	ldr	r3, [pc, #192]	; (801a420 <RadioIrqProcess+0x2b8>)
 801a360:	681b      	ldr	r3, [r3, #0]
 801a362:	699b      	ldr	r3, [r3, #24]
 801a364:	2b00      	cmp	r3, #0
 801a366:	f000 80ff 	beq.w	801a568 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 801a36a:	4b2d      	ldr	r3, [pc, #180]	; (801a420 <RadioIrqProcess+0x2b8>)
 801a36c:	681b      	ldr	r3, [r3, #0]
 801a36e:	699b      	ldr	r3, [r3, #24]
 801a370:	2000      	movs	r0, #0
 801a372:	4798      	blx	r3
        break;
 801a374:	e0f8      	b.n	801a568 <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 801a376:	2000      	movs	r0, #0
 801a378:	f000 ff88 	bl	801b28c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801a37c:	4b28      	ldr	r3, [pc, #160]	; (801a420 <RadioIrqProcess+0x2b8>)
 801a37e:	681b      	ldr	r3, [r3, #0]
 801a380:	2b00      	cmp	r3, #0
 801a382:	f000 80f3 	beq.w	801a56c <RadioIrqProcess+0x404>
 801a386:	4b26      	ldr	r3, [pc, #152]	; (801a420 <RadioIrqProcess+0x2b8>)
 801a388:	681b      	ldr	r3, [r3, #0]
 801a38a:	699b      	ldr	r3, [r3, #24]
 801a38c:	2b00      	cmp	r3, #0
 801a38e:	f000 80ed 	beq.w	801a56c <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 801a392:	4b23      	ldr	r3, [pc, #140]	; (801a420 <RadioIrqProcess+0x2b8>)
 801a394:	681b      	ldr	r3, [r3, #0]
 801a396:	699b      	ldr	r3, [r3, #24]
 801a398:	2001      	movs	r0, #1
 801a39a:	4798      	blx	r3
        break;
 801a39c:	e0e6      	b.n	801a56c <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 801a39e:	4b25      	ldr	r3, [pc, #148]	; (801a434 <RadioIrqProcess+0x2cc>)
 801a3a0:	2201      	movs	r2, #1
 801a3a2:	2100      	movs	r1, #0
 801a3a4:	2002      	movs	r0, #2
 801a3a6:	f003 f91b 	bl	801d5e0 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 801a3aa:	f000 fe25 	bl	801aff8 <SUBGRF_GetOperatingMode>
 801a3ae:	4603      	mov	r3, r0
 801a3b0:	2b04      	cmp	r3, #4
 801a3b2:	d115      	bne.n	801a3e0 <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 801a3b4:	4819      	ldr	r0, [pc, #100]	; (801a41c <RadioIrqProcess+0x2b4>)
 801a3b6:	f002 ff09 	bl	801d1cc <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801a3ba:	2000      	movs	r0, #0
 801a3bc:	f000 ff66 	bl	801b28c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801a3c0:	4b17      	ldr	r3, [pc, #92]	; (801a420 <RadioIrqProcess+0x2b8>)
 801a3c2:	681b      	ldr	r3, [r3, #0]
 801a3c4:	2b00      	cmp	r3, #0
 801a3c6:	f000 80d3 	beq.w	801a570 <RadioIrqProcess+0x408>
 801a3ca:	4b15      	ldr	r3, [pc, #84]	; (801a420 <RadioIrqProcess+0x2b8>)
 801a3cc:	681b      	ldr	r3, [r3, #0]
 801a3ce:	685b      	ldr	r3, [r3, #4]
 801a3d0:	2b00      	cmp	r3, #0
 801a3d2:	f000 80cd 	beq.w	801a570 <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 801a3d6:	4b12      	ldr	r3, [pc, #72]	; (801a420 <RadioIrqProcess+0x2b8>)
 801a3d8:	681b      	ldr	r3, [r3, #0]
 801a3da:	685b      	ldr	r3, [r3, #4]
 801a3dc:	4798      	blx	r3
        break;
 801a3de:	e0c7      	b.n	801a570 <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 801a3e0:	f000 fe0a 	bl	801aff8 <SUBGRF_GetOperatingMode>
 801a3e4:	4603      	mov	r3, r0
 801a3e6:	2b05      	cmp	r3, #5
 801a3e8:	f040 80c2 	bne.w	801a570 <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 801a3ec:	480d      	ldr	r0, [pc, #52]	; (801a424 <RadioIrqProcess+0x2bc>)
 801a3ee:	f002 feed 	bl	801d1cc <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801a3f2:	2000      	movs	r0, #0
 801a3f4:	f000 ff4a 	bl	801b28c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801a3f8:	4b09      	ldr	r3, [pc, #36]	; (801a420 <RadioIrqProcess+0x2b8>)
 801a3fa:	681b      	ldr	r3, [r3, #0]
 801a3fc:	2b00      	cmp	r3, #0
 801a3fe:	f000 80b7 	beq.w	801a570 <RadioIrqProcess+0x408>
 801a402:	4b07      	ldr	r3, [pc, #28]	; (801a420 <RadioIrqProcess+0x2b8>)
 801a404:	681b      	ldr	r3, [r3, #0]
 801a406:	68db      	ldr	r3, [r3, #12]
 801a408:	2b00      	cmp	r3, #0
 801a40a:	f000 80b1 	beq.w	801a570 <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 801a40e:	4b04      	ldr	r3, [pc, #16]	; (801a420 <RadioIrqProcess+0x2b8>)
 801a410:	681b      	ldr	r3, [r3, #0]
 801a412:	68db      	ldr	r3, [r3, #12]
 801a414:	4798      	blx	r3
        break;
 801a416:	e0ab      	b.n	801a570 <RadioIrqProcess+0x408>
 801a418:	20001be8 	.word	0x20001be8
 801a41c:	20001c44 	.word	0x20001c44
 801a420:	20001be4 	.word	0x20001be4
 801a424:	20001c5c 	.word	0x20001c5c
 801a428:	20001ae4 	.word	0x20001ae4
 801a42c:	20001c0c 	.word	0x20001c0c
 801a430:	10624dd3 	.word	0x10624dd3
 801a434:	0801e424 	.word	0x0801e424
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 801a438:	4b54      	ldr	r3, [pc, #336]	; (801a58c <RadioIrqProcess+0x424>)
 801a43a:	2201      	movs	r2, #1
 801a43c:	2100      	movs	r1, #0
 801a43e:	2002      	movs	r0, #2
 801a440:	f003 f8ce 	bl	801d5e0 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 801a444:	4b52      	ldr	r3, [pc, #328]	; (801a590 <RadioIrqProcess+0x428>)
 801a446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a448:	2b00      	cmp	r3, #0
 801a44a:	f000 8093 	beq.w	801a574 <RadioIrqProcess+0x40c>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 801a44e:	4a51      	ldr	r2, [pc, #324]	; (801a594 <RadioIrqProcess+0x42c>)
 801a450:	4b4f      	ldr	r3, [pc, #316]	; (801a590 <RadioIrqProcess+0x428>)
 801a452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a454:	0c1b      	lsrs	r3, r3, #16
 801a456:	b2db      	uxtb	r3, r3
 801a458:	4619      	mov	r1, r3
 801a45a:	f640 1003 	movw	r0, #2307	; 0x903
 801a45e:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 801a460:	4a4c      	ldr	r2, [pc, #304]	; (801a594 <RadioIrqProcess+0x42c>)
 801a462:	4b4b      	ldr	r3, [pc, #300]	; (801a590 <RadioIrqProcess+0x428>)
 801a464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a466:	0a1b      	lsrs	r3, r3, #8
 801a468:	b2db      	uxtb	r3, r3
 801a46a:	4619      	mov	r1, r3
 801a46c:	f640 1004 	movw	r0, #2308	; 0x904
 801a470:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 801a472:	4a48      	ldr	r2, [pc, #288]	; (801a594 <RadioIrqProcess+0x42c>)
 801a474:	4b46      	ldr	r3, [pc, #280]	; (801a590 <RadioIrqProcess+0x428>)
 801a476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a478:	b2db      	uxtb	r3, r3
 801a47a:	4619      	mov	r1, r3
 801a47c:	f640 1005 	movw	r0, #2309	; 0x905
 801a480:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 801a482:	4c44      	ldr	r4, [pc, #272]	; (801a594 <RadioIrqProcess+0x42c>)
 801a484:	4b44      	ldr	r3, [pc, #272]	; (801a598 <RadioIrqProcess+0x430>)
 801a486:	f640 1002 	movw	r0, #2306	; 0x902
 801a48a:	4798      	blx	r3
 801a48c:	4603      	mov	r3, r0
 801a48e:	f043 0301 	orr.w	r3, r3, #1
 801a492:	b2db      	uxtb	r3, r3
 801a494:	4619      	mov	r1, r3
 801a496:	f640 1002 	movw	r0, #2306	; 0x902
 801a49a:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 801a49c:	4b3c      	ldr	r3, [pc, #240]	; (801a590 <RadioIrqProcess+0x428>)
 801a49e:	2200      	movs	r2, #0
 801a4a0:	659a      	str	r2, [r3, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801a4a2:	2300      	movs	r3, #0
 801a4a4:	2200      	movs	r2, #0
 801a4a6:	f240 2162 	movw	r1, #610	; 0x262
 801a4aa:	f240 2062 	movw	r0, #610	; 0x262
 801a4ae:	f001 f8c1 	bl	801b634 <SUBGRF_SetDioIrqParams>
        break;
 801a4b2:	e05f      	b.n	801a574 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 801a4b4:	4b39      	ldr	r3, [pc, #228]	; (801a59c <RadioIrqProcess+0x434>)
 801a4b6:	2201      	movs	r2, #1
 801a4b8:	2100      	movs	r1, #0
 801a4ba:	2002      	movs	r0, #2
 801a4bc:	f003 f890 	bl	801d5e0 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 801a4c0:	f001 ff55 	bl	801c36e <RFW_Is_Init>
 801a4c4:	4603      	mov	r3, r0
 801a4c6:	2b01      	cmp	r3, #1
 801a4c8:	d156      	bne.n	801a578 <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 801a4ca:	f001 ff86 	bl	801c3da <RFW_ReceivePayload>
        break;
 801a4ce:	e053      	b.n	801a578 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 801a4d0:	4b33      	ldr	r3, [pc, #204]	; (801a5a0 <RadioIrqProcess+0x438>)
 801a4d2:	2201      	movs	r2, #1
 801a4d4:	2100      	movs	r1, #0
 801a4d6:	2002      	movs	r0, #2
 801a4d8:	f003 f882 	bl	801d5e0 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801a4dc:	e051      	b.n	801a582 <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 801a4de:	4831      	ldr	r0, [pc, #196]	; (801a5a4 <RadioIrqProcess+0x43c>)
 801a4e0:	f002 fe74 	bl	801d1cc <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801a4e4:	4b2a      	ldr	r3, [pc, #168]	; (801a590 <RadioIrqProcess+0x428>)
 801a4e6:	785b      	ldrb	r3, [r3, #1]
 801a4e8:	f083 0301 	eor.w	r3, r3, #1
 801a4ec:	b2db      	uxtb	r3, r3
 801a4ee:	2b00      	cmp	r3, #0
 801a4f0:	d002      	beq.n	801a4f8 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 801a4f2:	2000      	movs	r0, #0
 801a4f4:	f000 feca 	bl	801b28c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801a4f8:	4b2b      	ldr	r3, [pc, #172]	; (801a5a8 <RadioIrqProcess+0x440>)
 801a4fa:	681b      	ldr	r3, [r3, #0]
 801a4fc:	2b00      	cmp	r3, #0
 801a4fe:	d03d      	beq.n	801a57c <RadioIrqProcess+0x414>
 801a500:	4b29      	ldr	r3, [pc, #164]	; (801a5a8 <RadioIrqProcess+0x440>)
 801a502:	681b      	ldr	r3, [r3, #0]
 801a504:	68db      	ldr	r3, [r3, #12]
 801a506:	2b00      	cmp	r3, #0
 801a508:	d038      	beq.n	801a57c <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 801a50a:	4b27      	ldr	r3, [pc, #156]	; (801a5a8 <RadioIrqProcess+0x440>)
 801a50c:	681b      	ldr	r3, [r3, #0]
 801a50e:	68db      	ldr	r3, [r3, #12]
 801a510:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 801a512:	4b26      	ldr	r3, [pc, #152]	; (801a5ac <RadioIrqProcess+0x444>)
 801a514:	2201      	movs	r2, #1
 801a516:	2100      	movs	r1, #0
 801a518:	2002      	movs	r0, #2
 801a51a:	f003 f861 	bl	801d5e0 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801a51e:	e02d      	b.n	801a57c <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 801a520:	4b23      	ldr	r3, [pc, #140]	; (801a5b0 <RadioIrqProcess+0x448>)
 801a522:	2201      	movs	r2, #1
 801a524:	2100      	movs	r1, #0
 801a526:	2002      	movs	r0, #2
 801a528:	f003 f85a 	bl	801d5e0 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 801a52c:	4b18      	ldr	r3, [pc, #96]	; (801a590 <RadioIrqProcess+0x428>)
 801a52e:	785b      	ldrb	r3, [r3, #1]
 801a530:	f083 0301 	eor.w	r3, r3, #1
 801a534:	b2db      	uxtb	r3, r3
 801a536:	2b00      	cmp	r3, #0
 801a538:	d002      	beq.n	801a540 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 801a53a:	2000      	movs	r0, #0
 801a53c:	f000 fea6 	bl	801b28c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 801a540:	4b19      	ldr	r3, [pc, #100]	; (801a5a8 <RadioIrqProcess+0x440>)
 801a542:	681b      	ldr	r3, [r3, #0]
 801a544:	2b00      	cmp	r3, #0
 801a546:	d01b      	beq.n	801a580 <RadioIrqProcess+0x418>
 801a548:	4b17      	ldr	r3, [pc, #92]	; (801a5a8 <RadioIrqProcess+0x440>)
 801a54a:	681b      	ldr	r3, [r3, #0]
 801a54c:	691b      	ldr	r3, [r3, #16]
 801a54e:	2b00      	cmp	r3, #0
 801a550:	d016      	beq.n	801a580 <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 801a552:	4b15      	ldr	r3, [pc, #84]	; (801a5a8 <RadioIrqProcess+0x440>)
 801a554:	681b      	ldr	r3, [r3, #0]
 801a556:	691b      	ldr	r3, [r3, #16]
 801a558:	4798      	blx	r3
        break;
 801a55a:	e011      	b.n	801a580 <RadioIrqProcess+0x418>
        break;
 801a55c:	bf00      	nop
 801a55e:	e010      	b.n	801a582 <RadioIrqProcess+0x41a>
        break;
 801a560:	bf00      	nop
 801a562:	e00e      	b.n	801a582 <RadioIrqProcess+0x41a>
        break;
 801a564:	bf00      	nop
 801a566:	e00c      	b.n	801a582 <RadioIrqProcess+0x41a>
        break;
 801a568:	bf00      	nop
 801a56a:	e00a      	b.n	801a582 <RadioIrqProcess+0x41a>
        break;
 801a56c:	bf00      	nop
 801a56e:	e008      	b.n	801a582 <RadioIrqProcess+0x41a>
        break;
 801a570:	bf00      	nop
 801a572:	e006      	b.n	801a582 <RadioIrqProcess+0x41a>
        break;
 801a574:	bf00      	nop
 801a576:	e004      	b.n	801a582 <RadioIrqProcess+0x41a>
        break;
 801a578:	bf00      	nop
 801a57a:	e002      	b.n	801a582 <RadioIrqProcess+0x41a>
        break;
 801a57c:	bf00      	nop
 801a57e:	e000      	b.n	801a582 <RadioIrqProcess+0x41a>
        break;
 801a580:	bf00      	nop
    }
}
 801a582:	bf00      	nop
 801a584:	3708      	adds	r7, #8
 801a586:	46bd      	mov	sp, r7
 801a588:	bdb0      	pop	{r4, r5, r7, pc}
 801a58a:	bf00      	nop
 801a58c:	0801e438 	.word	0x0801e438
 801a590:	20001be8 	.word	0x20001be8
 801a594:	08019f77 	.word	0x08019f77
 801a598:	08019f9b 	.word	0x08019f9b
 801a59c:	0801e444 	.word	0x0801e444
 801a5a0:	0801e450 	.word	0x0801e450
 801a5a4:	20001c5c 	.word	0x20001c5c
 801a5a8:	20001be4 	.word	0x20001be4
 801a5ac:	0801e45c 	.word	0x0801e45c
 801a5b0:	0801e468 	.word	0x0801e468

0801a5b4 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 801a5b4:	b580      	push	{r7, lr}
 801a5b6:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801a5b8:	4b09      	ldr	r3, [pc, #36]	; (801a5e0 <RadioTxPrbs+0x2c>)
 801a5ba:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a5be:	2101      	movs	r1, #1
 801a5c0:	4618      	mov	r0, r3
 801a5c2:	f001 fcdb 	bl	801bf7c <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 801a5c6:	4b07      	ldr	r3, [pc, #28]	; (801a5e4 <RadioTxPrbs+0x30>)
 801a5c8:	212d      	movs	r1, #45	; 0x2d
 801a5ca:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801a5ce:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 801a5d0:	f000 ff1f 	bl	801b412 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 801a5d4:	4804      	ldr	r0, [pc, #16]	; (801a5e8 <RadioTxPrbs+0x34>)
 801a5d6:	f000 fe75 	bl	801b2c4 <SUBGRF_SetTx>
}
 801a5da:	bf00      	nop
 801a5dc:	bd80      	pop	{r7, pc}
 801a5de:	bf00      	nop
 801a5e0:	20001be8 	.word	0x20001be8
 801a5e4:	08019f77 	.word	0x08019f77
 801a5e8:	000fffff 	.word	0x000fffff

0801a5ec <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 801a5ec:	b580      	push	{r7, lr}
 801a5ee:	b084      	sub	sp, #16
 801a5f0:	af00      	add	r7, sp, #0
 801a5f2:	4603      	mov	r3, r0
 801a5f4:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 801a5f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a5fa:	4618      	mov	r0, r3
 801a5fc:	f001 fce6 	bl	801bfcc <SUBGRF_SetRfTxPower>
 801a600:	4603      	mov	r3, r0
 801a602:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801a604:	210e      	movs	r1, #14
 801a606:	f640 101f 	movw	r0, #2335	; 0x91f
 801a60a:	f001 fbc3 	bl	801bd94 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 801a60e:	7bfb      	ldrb	r3, [r7, #15]
 801a610:	2101      	movs	r1, #1
 801a612:	4618      	mov	r0, r3
 801a614:	f001 fcb2 	bl	801bf7c <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 801a618:	f000 fef2 	bl	801b400 <SUBGRF_SetTxContinuousWave>
}
 801a61c:	bf00      	nop
 801a61e:	3710      	adds	r7, #16
 801a620:	46bd      	mov	sp, r7
 801a622:	bd80      	pop	{r7, pc}

0801a624 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 801a624:	b480      	push	{r7}
 801a626:	b089      	sub	sp, #36	; 0x24
 801a628:	af00      	add	r7, sp, #0
 801a62a:	60f8      	str	r0, [r7, #12]
 801a62c:	60b9      	str	r1, [r7, #8]
 801a62e:	4613      	mov	r3, r2
 801a630:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 801a632:	2300      	movs	r3, #0
 801a634:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 801a636:	2300      	movs	r3, #0
 801a638:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 801a63a:	2300      	movs	r3, #0
 801a63c:	61bb      	str	r3, [r7, #24]
 801a63e:	e011      	b.n	801a664 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 801a640:	69bb      	ldr	r3, [r7, #24]
 801a642:	68ba      	ldr	r2, [r7, #8]
 801a644:	4413      	add	r3, r2
 801a646:	781a      	ldrb	r2, [r3, #0]
 801a648:	69bb      	ldr	r3, [r7, #24]
 801a64a:	68b9      	ldr	r1, [r7, #8]
 801a64c:	440b      	add	r3, r1
 801a64e:	43d2      	mvns	r2, r2
 801a650:	b2d2      	uxtb	r2, r2
 801a652:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 801a654:	69bb      	ldr	r3, [r7, #24]
 801a656:	68fa      	ldr	r2, [r7, #12]
 801a658:	4413      	add	r3, r2
 801a65a:	2200      	movs	r2, #0
 801a65c:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 801a65e:	69bb      	ldr	r3, [r7, #24]
 801a660:	3301      	adds	r3, #1
 801a662:	61bb      	str	r3, [r7, #24]
 801a664:	79fb      	ldrb	r3, [r7, #7]
 801a666:	69ba      	ldr	r2, [r7, #24]
 801a668:	429a      	cmp	r2, r3
 801a66a:	dbe9      	blt.n	801a640 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 801a66c:	2300      	movs	r3, #0
 801a66e:	61bb      	str	r3, [r7, #24]
 801a670:	e049      	b.n	801a706 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 801a672:	69bb      	ldr	r3, [r7, #24]
 801a674:	425a      	negs	r2, r3
 801a676:	f003 0307 	and.w	r3, r3, #7
 801a67a:	f002 0207 	and.w	r2, r2, #7
 801a67e:	bf58      	it	pl
 801a680:	4253      	negpl	r3, r2
 801a682:	b2db      	uxtb	r3, r3
 801a684:	f1c3 0307 	rsb	r3, r3, #7
 801a688:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 801a68a:	69bb      	ldr	r3, [r7, #24]
 801a68c:	2b00      	cmp	r3, #0
 801a68e:	da00      	bge.n	801a692 <payload_integration+0x6e>
 801a690:	3307      	adds	r3, #7
 801a692:	10db      	asrs	r3, r3, #3
 801a694:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 801a696:	69bb      	ldr	r3, [r7, #24]
 801a698:	3301      	adds	r3, #1
 801a69a:	425a      	negs	r2, r3
 801a69c:	f003 0307 	and.w	r3, r3, #7
 801a6a0:	f002 0207 	and.w	r2, r2, #7
 801a6a4:	bf58      	it	pl
 801a6a6:	4253      	negpl	r3, r2
 801a6a8:	b2db      	uxtb	r3, r3
 801a6aa:	f1c3 0307 	rsb	r3, r3, #7
 801a6ae:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 801a6b0:	69bb      	ldr	r3, [r7, #24]
 801a6b2:	3301      	adds	r3, #1
 801a6b4:	2b00      	cmp	r3, #0
 801a6b6:	da00      	bge.n	801a6ba <payload_integration+0x96>
 801a6b8:	3307      	adds	r3, #7
 801a6ba:	10db      	asrs	r3, r3, #3
 801a6bc:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 801a6be:	7dbb      	ldrb	r3, [r7, #22]
 801a6c0:	68ba      	ldr	r2, [r7, #8]
 801a6c2:	4413      	add	r3, r2
 801a6c4:	781b      	ldrb	r3, [r3, #0]
 801a6c6:	461a      	mov	r2, r3
 801a6c8:	7dfb      	ldrb	r3, [r7, #23]
 801a6ca:	fa42 f303 	asr.w	r3, r2, r3
 801a6ce:	b2db      	uxtb	r3, r3
 801a6d0:	f003 0301 	and.w	r3, r3, #1
 801a6d4:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 801a6d6:	7ffa      	ldrb	r2, [r7, #31]
 801a6d8:	7cfb      	ldrb	r3, [r7, #19]
 801a6da:	4053      	eors	r3, r2
 801a6dc:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 801a6de:	7d3b      	ldrb	r3, [r7, #20]
 801a6e0:	68fa      	ldr	r2, [r7, #12]
 801a6e2:	4413      	add	r3, r2
 801a6e4:	781b      	ldrb	r3, [r3, #0]
 801a6e6:	b25a      	sxtb	r2, r3
 801a6e8:	7ff9      	ldrb	r1, [r7, #31]
 801a6ea:	7d7b      	ldrb	r3, [r7, #21]
 801a6ec:	fa01 f303 	lsl.w	r3, r1, r3
 801a6f0:	b25b      	sxtb	r3, r3
 801a6f2:	4313      	orrs	r3, r2
 801a6f4:	b259      	sxtb	r1, r3
 801a6f6:	7d3b      	ldrb	r3, [r7, #20]
 801a6f8:	68fa      	ldr	r2, [r7, #12]
 801a6fa:	4413      	add	r3, r2
 801a6fc:	b2ca      	uxtb	r2, r1
 801a6fe:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 801a700:	69bb      	ldr	r3, [r7, #24]
 801a702:	3301      	adds	r3, #1
 801a704:	61bb      	str	r3, [r7, #24]
 801a706:	79fb      	ldrb	r3, [r7, #7]
 801a708:	00db      	lsls	r3, r3, #3
 801a70a:	69ba      	ldr	r2, [r7, #24]
 801a70c:	429a      	cmp	r2, r3
 801a70e:	dbb0      	blt.n	801a672 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 801a710:	7ffb      	ldrb	r3, [r7, #31]
 801a712:	01db      	lsls	r3, r3, #7
 801a714:	b25a      	sxtb	r2, r3
 801a716:	7ffb      	ldrb	r3, [r7, #31]
 801a718:	019b      	lsls	r3, r3, #6
 801a71a:	b25b      	sxtb	r3, r3
 801a71c:	4313      	orrs	r3, r2
 801a71e:	b25b      	sxtb	r3, r3
 801a720:	7ffa      	ldrb	r2, [r7, #31]
 801a722:	2a00      	cmp	r2, #0
 801a724:	d101      	bne.n	801a72a <payload_integration+0x106>
 801a726:	2220      	movs	r2, #32
 801a728:	e000      	b.n	801a72c <payload_integration+0x108>
 801a72a:	2200      	movs	r2, #0
 801a72c:	4313      	orrs	r3, r2
 801a72e:	b259      	sxtb	r1, r3
 801a730:	79fb      	ldrb	r3, [r7, #7]
 801a732:	68fa      	ldr	r2, [r7, #12]
 801a734:	4413      	add	r3, r2
 801a736:	b2ca      	uxtb	r2, r1
 801a738:	701a      	strb	r2, [r3, #0]
}
 801a73a:	bf00      	nop
 801a73c:	3724      	adds	r7, #36	; 0x24
 801a73e:	46bd      	mov	sp, r7
 801a740:	bc80      	pop	{r7}
 801a742:	4770      	bx	lr

0801a744 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 801a744:	b580      	push	{r7, lr}
 801a746:	b08c      	sub	sp, #48	; 0x30
 801a748:	af00      	add	r7, sp, #0
 801a74a:	60b9      	str	r1, [r7, #8]
 801a74c:	607a      	str	r2, [r7, #4]
 801a74e:	603b      	str	r3, [r7, #0]
 801a750:	4603      	mov	r3, r0
 801a752:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 801a754:	2300      	movs	r3, #0
 801a756:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 801a758:	2300      	movs	r3, #0
 801a75a:	623b      	str	r3, [r7, #32]
 801a75c:	2300      	movs	r3, #0
 801a75e:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801a760:	f001 fdff 	bl	801c362 <RFW_DeInit>

    if( rxContinuous != 0 )
 801a764:	687b      	ldr	r3, [r7, #4]
 801a766:	2b00      	cmp	r3, #0
 801a768:	d001      	beq.n	801a76e <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 801a76a:	2300      	movs	r3, #0
 801a76c:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 801a76e:	687b      	ldr	r3, [r7, #4]
 801a770:	2b00      	cmp	r3, #0
 801a772:	bf14      	ite	ne
 801a774:	2301      	movne	r3, #1
 801a776:	2300      	moveq	r3, #0
 801a778:	b2da      	uxtb	r2, r3
 801a77a:	4ba3      	ldr	r3, [pc, #652]	; (801aa08 <RadioSetRxGenericConfig+0x2c4>)
 801a77c:	705a      	strb	r2, [r3, #1]

    switch( modem )
 801a77e:	7bfb      	ldrb	r3, [r7, #15]
 801a780:	2b00      	cmp	r3, #0
 801a782:	d003      	beq.n	801a78c <RadioSetRxGenericConfig+0x48>
 801a784:	2b01      	cmp	r3, #1
 801a786:	f000 80dc 	beq.w	801a942 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 801a78a:	e194      	b.n	801aab6 <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 801a78c:	68bb      	ldr	r3, [r7, #8]
 801a78e:	689b      	ldr	r3, [r3, #8]
 801a790:	2b00      	cmp	r3, #0
 801a792:	d003      	beq.n	801a79c <RadioSetRxGenericConfig+0x58>
 801a794:	68bb      	ldr	r3, [r7, #8]
 801a796:	68db      	ldr	r3, [r3, #12]
 801a798:	2b00      	cmp	r3, #0
 801a79a:	d102      	bne.n	801a7a2 <RadioSetRxGenericConfig+0x5e>
            return -1;
 801a79c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a7a0:	e18a      	b.n	801aab8 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 801a7a2:	68bb      	ldr	r3, [r7, #8]
 801a7a4:	7f9b      	ldrb	r3, [r3, #30]
 801a7a6:	2b08      	cmp	r3, #8
 801a7a8:	d902      	bls.n	801a7b0 <RadioSetRxGenericConfig+0x6c>
            return -1;
 801a7aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a7ae:	e183      	b.n	801aab8 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801a7b0:	68bb      	ldr	r3, [r7, #8]
 801a7b2:	6919      	ldr	r1, [r3, #16]
 801a7b4:	68bb      	ldr	r3, [r7, #8]
 801a7b6:	7f9b      	ldrb	r3, [r3, #30]
 801a7b8:	b29a      	uxth	r2, r3
 801a7ba:	f107 0320 	add.w	r3, r7, #32
 801a7be:	4618      	mov	r0, r3
 801a7c0:	f001 fec2 	bl	801c548 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801a7c4:	68bb      	ldr	r3, [r7, #8]
 801a7c6:	681b      	ldr	r3, [r3, #0]
 801a7c8:	2b00      	cmp	r3, #0
 801a7ca:	bf14      	ite	ne
 801a7cc:	2301      	movne	r3, #1
 801a7ce:	2300      	moveq	r3, #0
 801a7d0:	b2db      	uxtb	r3, r3
 801a7d2:	4618      	mov	r0, r3
 801a7d4:	f000 fe26 	bl	801b424 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a7d8:	4b8b      	ldr	r3, [pc, #556]	; (801aa08 <RadioSetRxGenericConfig+0x2c4>)
 801a7da:	2200      	movs	r2, #0
 801a7dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801a7e0:	68bb      	ldr	r3, [r7, #8]
 801a7e2:	689b      	ldr	r3, [r3, #8]
 801a7e4:	4a88      	ldr	r2, [pc, #544]	; (801aa08 <RadioSetRxGenericConfig+0x2c4>)
 801a7e6:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801a7e8:	68bb      	ldr	r3, [r7, #8]
 801a7ea:	f893 2020 	ldrb.w	r2, [r3, #32]
 801a7ee:	4b86      	ldr	r3, [pc, #536]	; (801aa08 <RadioSetRxGenericConfig+0x2c4>)
 801a7f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 801a7f4:	68bb      	ldr	r3, [r7, #8]
 801a7f6:	685b      	ldr	r3, [r3, #4]
 801a7f8:	4618      	mov	r0, r3
 801a7fa:	f001 fce5 	bl	801c1c8 <SUBGRF_GetFskBandwidthRegValue>
 801a7fe:	4603      	mov	r3, r0
 801a800:	461a      	mov	r2, r3
 801a802:	4b81      	ldr	r3, [pc, #516]	; (801aa08 <RadioSetRxGenericConfig+0x2c4>)
 801a804:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a808:	4b7f      	ldr	r3, [pc, #508]	; (801aa08 <RadioSetRxGenericConfig+0x2c4>)
 801a80a:	2200      	movs	r2, #0
 801a80c:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 801a80e:	68bb      	ldr	r3, [r7, #8]
 801a810:	68db      	ldr	r3, [r3, #12]
 801a812:	b29b      	uxth	r3, r3
 801a814:	00db      	lsls	r3, r3, #3
 801a816:	b29a      	uxth	r2, r3
 801a818:	4b7b      	ldr	r3, [pc, #492]	; (801aa08 <RadioSetRxGenericConfig+0x2c4>)
 801a81a:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 801a81c:	68bb      	ldr	r3, [r7, #8]
 801a81e:	7fda      	ldrb	r2, [r3, #31]
 801a820:	4b79      	ldr	r3, [pc, #484]	; (801aa08 <RadioSetRxGenericConfig+0x2c4>)
 801a822:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801a824:	68bb      	ldr	r3, [r7, #8]
 801a826:	7f9b      	ldrb	r3, [r3, #30]
 801a828:	00db      	lsls	r3, r3, #3
 801a82a:	b2da      	uxtb	r2, r3
 801a82c:	4b76      	ldr	r3, [pc, #472]	; (801aa08 <RadioSetRxGenericConfig+0x2c4>)
 801a82e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 801a830:	68bb      	ldr	r3, [r7, #8]
 801a832:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 801a836:	4b74      	ldr	r3, [pc, #464]	; (801aa08 <RadioSetRxGenericConfig+0x2c4>)
 801a838:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 801a83a:	68bb      	ldr	r3, [r7, #8]
 801a83c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801a840:	2b00      	cmp	r3, #0
 801a842:	d105      	bne.n	801a850 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 801a844:	68bb      	ldr	r3, [r7, #8]
 801a846:	695b      	ldr	r3, [r3, #20]
 801a848:	b2da      	uxtb	r2, r3
 801a84a:	4b6f      	ldr	r3, [pc, #444]	; (801aa08 <RadioSetRxGenericConfig+0x2c4>)
 801a84c:	759a      	strb	r2, [r3, #22]
 801a84e:	e00b      	b.n	801a868 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 801a850:	68bb      	ldr	r3, [r7, #8]
 801a852:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801a856:	2b02      	cmp	r3, #2
 801a858:	d103      	bne.n	801a862 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801a85a:	4b6b      	ldr	r3, [pc, #428]	; (801aa08 <RadioSetRxGenericConfig+0x2c4>)
 801a85c:	22ff      	movs	r2, #255	; 0xff
 801a85e:	759a      	strb	r2, [r3, #22]
 801a860:	e002      	b.n	801a868 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801a862:	4b69      	ldr	r3, [pc, #420]	; (801aa08 <RadioSetRxGenericConfig+0x2c4>)
 801a864:	22ff      	movs	r2, #255	; 0xff
 801a866:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801a868:	68bb      	ldr	r3, [r7, #8]
 801a86a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801a86e:	2b02      	cmp	r3, #2
 801a870:	d004      	beq.n	801a87c <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801a872:	68bb      	ldr	r3, [r7, #8]
 801a874:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801a878:	2b02      	cmp	r3, #2
 801a87a:	d12d      	bne.n	801a8d8 <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801a87c:	68bb      	ldr	r3, [r7, #8]
 801a87e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801a882:	2bf1      	cmp	r3, #241	; 0xf1
 801a884:	d00c      	beq.n	801a8a0 <RadioSetRxGenericConfig+0x15c>
 801a886:	68bb      	ldr	r3, [r7, #8]
 801a888:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801a88c:	2bf2      	cmp	r3, #242	; 0xf2
 801a88e:	d007      	beq.n	801a8a0 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801a890:	68bb      	ldr	r3, [r7, #8]
 801a892:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801a896:	2b01      	cmp	r3, #1
 801a898:	d002      	beq.n	801a8a0 <RadioSetRxGenericConfig+0x15c>
                return -1;
 801a89a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a89e:	e10b      	b.n	801aab8 <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 801a8a0:	2300      	movs	r3, #0
 801a8a2:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 801a8a4:	68bb      	ldr	r3, [r7, #8]
 801a8a6:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 801a8a8:	4b58      	ldr	r3, [pc, #352]	; (801aa0c <RadioSetRxGenericConfig+0x2c8>)
 801a8aa:	6819      	ldr	r1, [r3, #0]
 801a8ac:	f107 0314 	add.w	r3, r7, #20
 801a8b0:	4a57      	ldr	r2, [pc, #348]	; (801aa10 <RadioSetRxGenericConfig+0x2cc>)
 801a8b2:	4618      	mov	r0, r3
 801a8b4:	f001 fd48 	bl	801c348 <RFW_Init>
 801a8b8:	4603      	mov	r3, r0
 801a8ba:	2b00      	cmp	r3, #0
 801a8bc:	d002      	beq.n	801a8c4 <RadioSetRxGenericConfig+0x180>
                return -1;
 801a8be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a8c2:	e0f9      	b.n	801aab8 <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801a8c4:	4b50      	ldr	r3, [pc, #320]	; (801aa08 <RadioSetRxGenericConfig+0x2c4>)
 801a8c6:	2200      	movs	r2, #0
 801a8c8:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801a8ca:	4b4f      	ldr	r3, [pc, #316]	; (801aa08 <RadioSetRxGenericConfig+0x2c4>)
 801a8cc:	2201      	movs	r2, #1
 801a8ce:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801a8d0:	4b4d      	ldr	r3, [pc, #308]	; (801aa08 <RadioSetRxGenericConfig+0x2c4>)
 801a8d2:	2200      	movs	r2, #0
 801a8d4:	755a      	strb	r2, [r3, #21]
        {
 801a8d6:	e00e      	b.n	801a8f6 <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801a8d8:	68bb      	ldr	r3, [r7, #8]
 801a8da:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 801a8de:	4b4a      	ldr	r3, [pc, #296]	; (801aa08 <RadioSetRxGenericConfig+0x2c4>)
 801a8e0:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801a8e2:	68bb      	ldr	r3, [r7, #8]
 801a8e4:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801a8e8:	4b47      	ldr	r3, [pc, #284]	; (801aa08 <RadioSetRxGenericConfig+0x2c4>)
 801a8ea:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 801a8ec:	68bb      	ldr	r3, [r7, #8]
 801a8ee:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 801a8f2:	4b45      	ldr	r3, [pc, #276]	; (801aa08 <RadioSetRxGenericConfig+0x2c4>)
 801a8f4:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801a8f6:	f7ff fa3c 	bl	8019d72 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801a8fa:	2000      	movs	r0, #0
 801a8fc:	f7fe fbd0 	bl	80190a0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a900:	4844      	ldr	r0, [pc, #272]	; (801aa14 <RadioSetRxGenericConfig+0x2d0>)
 801a902:	f001 f82d 	bl	801b960 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a906:	4844      	ldr	r0, [pc, #272]	; (801aa18 <RadioSetRxGenericConfig+0x2d4>)
 801a908:	f001 f8fc 	bl	801bb04 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801a90c:	f107 0320 	add.w	r3, r7, #32
 801a910:	4618      	mov	r0, r3
 801a912:	f000 fbc0 	bl	801b096 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801a916:	68bb      	ldr	r3, [r7, #8]
 801a918:	8b9b      	ldrh	r3, [r3, #28]
 801a91a:	4618      	mov	r0, r3
 801a91c:	f000 fc0a 	bl	801b134 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801a920:	68bb      	ldr	r3, [r7, #8]
 801a922:	8b1b      	ldrh	r3, [r3, #24]
 801a924:	4618      	mov	r0, r3
 801a926:	f000 fbe5 	bl	801b0f4 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 801a92a:	683b      	ldr	r3, [r7, #0]
 801a92c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801a930:	fb03 f202 	mul.w	r2, r3, r2
 801a934:	68bb      	ldr	r3, [r7, #8]
 801a936:	689b      	ldr	r3, [r3, #8]
 801a938:	fbb2 f3f3 	udiv	r3, r2, r3
 801a93c:	4a32      	ldr	r2, [pc, #200]	; (801aa08 <RadioSetRxGenericConfig+0x2c4>)
 801a93e:	6093      	str	r3, [r2, #8]
        break;
 801a940:	e0b9      	b.n	801aab6 <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 801a942:	68bb      	ldr	r3, [r7, #8]
 801a944:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801a946:	2b00      	cmp	r3, #0
 801a948:	d102      	bne.n	801a950 <RadioSetRxGenericConfig+0x20c>
            return -1;
 801a94a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a94e:	e0b3      	b.n	801aab8 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 801a950:	68bb      	ldr	r3, [r7, #8]
 801a952:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801a956:	2b01      	cmp	r3, #1
 801a958:	d104      	bne.n	801a964 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 801a95a:	68bb      	ldr	r3, [r7, #8]
 801a95c:	695b      	ldr	r3, [r3, #20]
 801a95e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801a962:	e002      	b.n	801a96a <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 801a964:	23ff      	movs	r3, #255	; 0xff
 801a966:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801a96a:	68bb      	ldr	r3, [r7, #8]
 801a96c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a96e:	2b00      	cmp	r3, #0
 801a970:	bf14      	ite	ne
 801a972:	2301      	movne	r3, #1
 801a974:	2300      	moveq	r3, #0
 801a976:	b2db      	uxtb	r3, r3
 801a978:	4618      	mov	r0, r3
 801a97a:	f000 fd53 	bl	801b424 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801a97e:	683b      	ldr	r3, [r7, #0]
 801a980:	b2db      	uxtb	r3, r3
 801a982:	4618      	mov	r0, r3
 801a984:	f000 fd5d 	bl	801b442 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801a988:	4b1f      	ldr	r3, [pc, #124]	; (801aa08 <RadioSetRxGenericConfig+0x2c4>)
 801a98a:	2201      	movs	r2, #1
 801a98c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801a990:	68bb      	ldr	r3, [r7, #8]
 801a992:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 801a996:	4b1c      	ldr	r3, [pc, #112]	; (801aa08 <RadioSetRxGenericConfig+0x2c4>)
 801a998:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801a99c:	68bb      	ldr	r3, [r7, #8]
 801a99e:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 801a9a2:	4b19      	ldr	r3, [pc, #100]	; (801aa08 <RadioSetRxGenericConfig+0x2c4>)
 801a9a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801a9a8:	68bb      	ldr	r3, [r7, #8]
 801a9aa:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801a9ae:	4b16      	ldr	r3, [pc, #88]	; (801aa08 <RadioSetRxGenericConfig+0x2c4>)
 801a9b0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801a9b4:	68bb      	ldr	r3, [r7, #8]
 801a9b6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801a9ba:	2b02      	cmp	r3, #2
 801a9bc:	d010      	beq.n	801a9e0 <RadioSetRxGenericConfig+0x29c>
 801a9be:	2b02      	cmp	r3, #2
 801a9c0:	dc2c      	bgt.n	801aa1c <RadioSetRxGenericConfig+0x2d8>
 801a9c2:	2b00      	cmp	r3, #0
 801a9c4:	d002      	beq.n	801a9cc <RadioSetRxGenericConfig+0x288>
 801a9c6:	2b01      	cmp	r3, #1
 801a9c8:	d005      	beq.n	801a9d6 <RadioSetRxGenericConfig+0x292>
            break;
 801a9ca:	e027      	b.n	801aa1c <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801a9cc:	4b0e      	ldr	r3, [pc, #56]	; (801aa08 <RadioSetRxGenericConfig+0x2c4>)
 801a9ce:	2200      	movs	r2, #0
 801a9d0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a9d4:	e023      	b.n	801aa1e <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801a9d6:	4b0c      	ldr	r3, [pc, #48]	; (801aa08 <RadioSetRxGenericConfig+0x2c4>)
 801a9d8:	2201      	movs	r2, #1
 801a9da:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a9de:	e01e      	b.n	801aa1e <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801a9e0:	68bb      	ldr	r3, [r7, #8]
 801a9e2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801a9e6:	2b0b      	cmp	r3, #11
 801a9e8:	d004      	beq.n	801a9f4 <RadioSetRxGenericConfig+0x2b0>
 801a9ea:	68bb      	ldr	r3, [r7, #8]
 801a9ec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801a9f0:	2b0c      	cmp	r3, #12
 801a9f2:	d104      	bne.n	801a9fe <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801a9f4:	4b04      	ldr	r3, [pc, #16]	; (801aa08 <RadioSetRxGenericConfig+0x2c4>)
 801a9f6:	2201      	movs	r2, #1
 801a9f8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a9fc:	e00f      	b.n	801aa1e <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801a9fe:	4b02      	ldr	r3, [pc, #8]	; (801aa08 <RadioSetRxGenericConfig+0x2c4>)
 801aa00:	2200      	movs	r2, #0
 801aa02:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801aa06:	e00a      	b.n	801aa1e <RadioSetRxGenericConfig+0x2da>
 801aa08:	20001be8 	.word	0x20001be8
 801aa0c:	20001be4 	.word	0x20001be4
 801aa10:	20001c5c 	.word	0x20001c5c
 801aa14:	20001c20 	.word	0x20001c20
 801aa18:	20001bf6 	.word	0x20001bf6
            break;
 801aa1c:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801aa1e:	4b28      	ldr	r3, [pc, #160]	; (801aac0 <RadioSetRxGenericConfig+0x37c>)
 801aa20:	2201      	movs	r2, #1
 801aa22:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801aa24:	68bb      	ldr	r3, [r7, #8]
 801aa26:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 801aa28:	4b25      	ldr	r3, [pc, #148]	; (801aac0 <RadioSetRxGenericConfig+0x37c>)
 801aa2a:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801aa2c:	68bb      	ldr	r3, [r7, #8]
 801aa2e:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 801aa32:	4b23      	ldr	r3, [pc, #140]	; (801aac0 <RadioSetRxGenericConfig+0x37c>)
 801aa34:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801aa36:	4a22      	ldr	r2, [pc, #136]	; (801aac0 <RadioSetRxGenericConfig+0x37c>)
 801aa38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801aa3c:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801aa3e:	68bb      	ldr	r3, [r7, #8]
 801aa40:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 801aa44:	4b1e      	ldr	r3, [pc, #120]	; (801aac0 <RadioSetRxGenericConfig+0x37c>)
 801aa46:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801aa4a:	68bb      	ldr	r3, [r7, #8]
 801aa4c:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 801aa50:	4b1b      	ldr	r3, [pc, #108]	; (801aac0 <RadioSetRxGenericConfig+0x37c>)
 801aa52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 801aa56:	f7ff f98c 	bl	8019d72 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801aa5a:	2001      	movs	r0, #1
 801aa5c:	f7fe fb20 	bl	80190a0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801aa60:	4818      	ldr	r0, [pc, #96]	; (801aac4 <RadioSetRxGenericConfig+0x380>)
 801aa62:	f000 ff7d 	bl	801b960 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801aa66:	4818      	ldr	r0, [pc, #96]	; (801aac8 <RadioSetRxGenericConfig+0x384>)
 801aa68:	f001 f84c 	bl	801bb04 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801aa6c:	4b14      	ldr	r3, [pc, #80]	; (801aac0 <RadioSetRxGenericConfig+0x37c>)
 801aa6e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801aa72:	2b01      	cmp	r3, #1
 801aa74:	d10d      	bne.n	801aa92 <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801aa76:	f240 7036 	movw	r0, #1846	; 0x736
 801aa7a:	f001 f99f 	bl	801bdbc <SUBGRF_ReadRegister>
 801aa7e:	4603      	mov	r3, r0
 801aa80:	f023 0304 	bic.w	r3, r3, #4
 801aa84:	b2db      	uxtb	r3, r3
 801aa86:	4619      	mov	r1, r3
 801aa88:	f240 7036 	movw	r0, #1846	; 0x736
 801aa8c:	f001 f982 	bl	801bd94 <SUBGRF_WriteRegister>
 801aa90:	e00c      	b.n	801aaac <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801aa92:	f240 7036 	movw	r0, #1846	; 0x736
 801aa96:	f001 f991 	bl	801bdbc <SUBGRF_ReadRegister>
 801aa9a:	4603      	mov	r3, r0
 801aa9c:	f043 0304 	orr.w	r3, r3, #4
 801aaa0:	b2db      	uxtb	r3, r3
 801aaa2:	4619      	mov	r1, r3
 801aaa4:	f240 7036 	movw	r0, #1846	; 0x736
 801aaa8:	f001 f974 	bl	801bd94 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 801aaac:	4b04      	ldr	r3, [pc, #16]	; (801aac0 <RadioSetRxGenericConfig+0x37c>)
 801aaae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801aab2:	609a      	str	r2, [r3, #8]
        break;
 801aab4:	bf00      	nop
    }
    return status;
 801aab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801aab8:	4618      	mov	r0, r3
 801aaba:	3730      	adds	r7, #48	; 0x30
 801aabc:	46bd      	mov	sp, r7
 801aabe:	bd80      	pop	{r7, pc}
 801aac0:	20001be8 	.word	0x20001be8
 801aac4:	20001c20 	.word	0x20001c20
 801aac8:	20001bf6 	.word	0x20001bf6

0801aacc <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 801aacc:	b580      	push	{r7, lr}
 801aace:	b08e      	sub	sp, #56	; 0x38
 801aad0:	af00      	add	r7, sp, #0
 801aad2:	60b9      	str	r1, [r7, #8]
 801aad4:	607b      	str	r3, [r7, #4]
 801aad6:	4603      	mov	r3, r0
 801aad8:	73fb      	strb	r3, [r7, #15]
 801aada:	4613      	mov	r3, r2
 801aadc:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 801aade:	2300      	movs	r3, #0
 801aae0:	62fb      	str	r3, [r7, #44]	; 0x2c
 801aae2:	2300      	movs	r3, #0
 801aae4:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801aae6:	f001 fc3c 	bl	801c362 <RFW_DeInit>
    switch( modem )
 801aaea:	7bfb      	ldrb	r3, [r7, #15]
 801aaec:	2b03      	cmp	r3, #3
 801aaee:	f200 8204 	bhi.w	801aefa <RadioSetTxGenericConfig+0x42e>
 801aaf2:	a201      	add	r2, pc, #4	; (adr r2, 801aaf8 <RadioSetTxGenericConfig+0x2c>)
 801aaf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801aaf8:	0801ac7d 	.word	0x0801ac7d
 801aafc:	0801adc5 	.word	0x0801adc5
 801ab00:	0801aebd 	.word	0x0801aebd
 801ab04:	0801ab09 	.word	0x0801ab09
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 801ab08:	68bb      	ldr	r3, [r7, #8]
 801ab0a:	7c9b      	ldrb	r3, [r3, #18]
 801ab0c:	2b08      	cmp	r3, #8
 801ab0e:	d902      	bls.n	801ab16 <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 801ab10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ab14:	e206      	b.n	801af24 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 801ab16:	68bb      	ldr	r3, [r7, #8]
 801ab18:	6899      	ldr	r1, [r3, #8]
 801ab1a:	68bb      	ldr	r3, [r7, #8]
 801ab1c:	7c9b      	ldrb	r3, [r3, #18]
 801ab1e:	b29a      	uxth	r2, r3
 801ab20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801ab24:	4618      	mov	r0, r3
 801ab26:	f001 fd0f 	bl	801c548 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 801ab2a:	68bb      	ldr	r3, [r7, #8]
 801ab2c:	681b      	ldr	r3, [r3, #0]
 801ab2e:	2b00      	cmp	r3, #0
 801ab30:	d102      	bne.n	801ab38 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 801ab32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ab36:	e1f5      	b.n	801af24 <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 801ab38:	68bb      	ldr	r3, [r7, #8]
 801ab3a:	681b      	ldr	r3, [r3, #0]
 801ab3c:	f242 7210 	movw	r2, #10000	; 0x2710
 801ab40:	4293      	cmp	r3, r2
 801ab42:	d813      	bhi.n	801ab6c <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 801ab44:	2302      	movs	r3, #2
 801ab46:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 801ab4a:	4b99      	ldr	r3, [pc, #612]	; (801adb0 <RadioSetTxGenericConfig+0x2e4>)
 801ab4c:	2203      	movs	r2, #3
 801ab4e:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 801ab50:	4b97      	ldr	r3, [pc, #604]	; (801adb0 <RadioSetTxGenericConfig+0x2e4>)
 801ab52:	2203      	movs	r2, #3
 801ab54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801ab58:	68bb      	ldr	r3, [r7, #8]
 801ab5a:	681b      	ldr	r3, [r3, #0]
 801ab5c:	4a94      	ldr	r2, [pc, #592]	; (801adb0 <RadioSetTxGenericConfig+0x2e4>)
 801ab5e:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801ab60:	68bb      	ldr	r3, [r7, #8]
 801ab62:	7cda      	ldrb	r2, [r3, #19]
 801ab64:	4b92      	ldr	r3, [pc, #584]	; (801adb0 <RadioSetTxGenericConfig+0x2e4>)
 801ab66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801ab6a:	e017      	b.n	801ab9c <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 801ab6c:	2300      	movs	r3, #0
 801ab6e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801ab72:	4b8f      	ldr	r3, [pc, #572]	; (801adb0 <RadioSetTxGenericConfig+0x2e4>)
 801ab74:	2200      	movs	r2, #0
 801ab76:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801ab78:	4b8d      	ldr	r3, [pc, #564]	; (801adb0 <RadioSetTxGenericConfig+0x2e4>)
 801ab7a:	2200      	movs	r2, #0
 801ab7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801ab80:	68bb      	ldr	r3, [r7, #8]
 801ab82:	681b      	ldr	r3, [r3, #0]
 801ab84:	4a8a      	ldr	r2, [pc, #552]	; (801adb0 <RadioSetTxGenericConfig+0x2e4>)
 801ab86:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801ab88:	68bb      	ldr	r3, [r7, #8]
 801ab8a:	7cda      	ldrb	r2, [r3, #19]
 801ab8c:	4b88      	ldr	r3, [pc, #544]	; (801adb0 <RadioSetTxGenericConfig+0x2e4>)
 801ab8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 801ab92:	68bb      	ldr	r3, [r7, #8]
 801ab94:	681b      	ldr	r3, [r3, #0]
 801ab96:	089b      	lsrs	r3, r3, #2
 801ab98:	4a85      	ldr	r2, [pc, #532]	; (801adb0 <RadioSetTxGenericConfig+0x2e4>)
 801ab9a:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 801ab9c:	68bb      	ldr	r3, [r7, #8]
 801ab9e:	685b      	ldr	r3, [r3, #4]
 801aba0:	b29b      	uxth	r3, r3
 801aba2:	00db      	lsls	r3, r3, #3
 801aba4:	b29a      	uxth	r2, r3
 801aba6:	4b82      	ldr	r3, [pc, #520]	; (801adb0 <RadioSetTxGenericConfig+0x2e4>)
 801aba8:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801abaa:	4b81      	ldr	r3, [pc, #516]	; (801adb0 <RadioSetTxGenericConfig+0x2e4>)
 801abac:	2204      	movs	r2, #4
 801abae:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 801abb0:	68bb      	ldr	r3, [r7, #8]
 801abb2:	7c9b      	ldrb	r3, [r3, #18]
 801abb4:	00db      	lsls	r3, r3, #3
 801abb6:	b2da      	uxtb	r2, r3
 801abb8:	4b7d      	ldr	r3, [pc, #500]	; (801adb0 <RadioSetTxGenericConfig+0x2e4>)
 801abba:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801abbc:	4b7c      	ldr	r3, [pc, #496]	; (801adb0 <RadioSetTxGenericConfig+0x2e4>)
 801abbe:	2200      	movs	r2, #0
 801abc0:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801abc2:	68bb      	ldr	r3, [r7, #8]
 801abc4:	7d9b      	ldrb	r3, [r3, #22]
 801abc6:	2b02      	cmp	r3, #2
 801abc8:	d003      	beq.n	801abd2 <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801abca:	68bb      	ldr	r3, [r7, #8]
 801abcc:	7d1b      	ldrb	r3, [r3, #20]
 801abce:	2b02      	cmp	r3, #2
 801abd0:	d12b      	bne.n	801ac2a <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801abd2:	68bb      	ldr	r3, [r7, #8]
 801abd4:	7d5b      	ldrb	r3, [r3, #21]
 801abd6:	2bf1      	cmp	r3, #241	; 0xf1
 801abd8:	d00a      	beq.n	801abf0 <RadioSetTxGenericConfig+0x124>
 801abda:	68bb      	ldr	r3, [r7, #8]
 801abdc:	7d5b      	ldrb	r3, [r3, #21]
 801abde:	2bf2      	cmp	r3, #242	; 0xf2
 801abe0:	d006      	beq.n	801abf0 <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801abe2:	68bb      	ldr	r3, [r7, #8]
 801abe4:	7d5b      	ldrb	r3, [r3, #21]
 801abe6:	2b01      	cmp	r3, #1
 801abe8:	d002      	beq.n	801abf0 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 801abea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801abee:	e199      	b.n	801af24 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 801abf0:	68bb      	ldr	r3, [r7, #8]
 801abf2:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 801abf4:	2301      	movs	r3, #1
 801abf6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801abfa:	4b6e      	ldr	r3, [pc, #440]	; (801adb4 <RadioSetTxGenericConfig+0x2e8>)
 801abfc:	6819      	ldr	r1, [r3, #0]
 801abfe:	f107 0320 	add.w	r3, r7, #32
 801ac02:	4a6d      	ldr	r2, [pc, #436]	; (801adb8 <RadioSetTxGenericConfig+0x2ec>)
 801ac04:	4618      	mov	r0, r3
 801ac06:	f001 fb9f 	bl	801c348 <RFW_Init>
 801ac0a:	4603      	mov	r3, r0
 801ac0c:	2b00      	cmp	r3, #0
 801ac0e:	d002      	beq.n	801ac16 <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 801ac10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ac14:	e186      	b.n	801af24 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801ac16:	4b66      	ldr	r3, [pc, #408]	; (801adb0 <RadioSetTxGenericConfig+0x2e4>)
 801ac18:	2200      	movs	r2, #0
 801ac1a:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801ac1c:	4b64      	ldr	r3, [pc, #400]	; (801adb0 <RadioSetTxGenericConfig+0x2e4>)
 801ac1e:	2201      	movs	r2, #1
 801ac20:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801ac22:	4b63      	ldr	r3, [pc, #396]	; (801adb0 <RadioSetTxGenericConfig+0x2e4>)
 801ac24:	2200      	movs	r2, #0
 801ac26:	755a      	strb	r2, [r3, #21]
        {
 801ac28:	e00b      	b.n	801ac42 <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 801ac2a:	68bb      	ldr	r3, [r7, #8]
 801ac2c:	7d5a      	ldrb	r2, [r3, #21]
 801ac2e:	4b60      	ldr	r3, [pc, #384]	; (801adb0 <RadioSetTxGenericConfig+0x2e4>)
 801ac30:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 801ac32:	68bb      	ldr	r3, [r7, #8]
 801ac34:	7d9a      	ldrb	r2, [r3, #22]
 801ac36:	4b5e      	ldr	r3, [pc, #376]	; (801adb0 <RadioSetTxGenericConfig+0x2e4>)
 801ac38:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 801ac3a:	68bb      	ldr	r3, [r7, #8]
 801ac3c:	7d1a      	ldrb	r2, [r3, #20]
 801ac3e:	4b5c      	ldr	r3, [pc, #368]	; (801adb0 <RadioSetTxGenericConfig+0x2e4>)
 801ac40:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801ac42:	f7ff f896 	bl	8019d72 <RadioStandby>
        RadioSetModem( radio_modem );
 801ac46:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801ac4a:	4618      	mov	r0, r3
 801ac4c:	f7fe fa28 	bl	80190a0 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801ac50:	485a      	ldr	r0, [pc, #360]	; (801adbc <RadioSetTxGenericConfig+0x2f0>)
 801ac52:	f000 fe85 	bl	801b960 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ac56:	485a      	ldr	r0, [pc, #360]	; (801adc0 <RadioSetTxGenericConfig+0x2f4>)
 801ac58:	f000 ff54 	bl	801bb04 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801ac5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801ac60:	4618      	mov	r0, r3
 801ac62:	f000 fa18 	bl	801b096 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 801ac66:	68bb      	ldr	r3, [r7, #8]
 801ac68:	8a1b      	ldrh	r3, [r3, #16]
 801ac6a:	4618      	mov	r0, r3
 801ac6c:	f000 fa62 	bl	801b134 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 801ac70:	68bb      	ldr	r3, [r7, #8]
 801ac72:	899b      	ldrh	r3, [r3, #12]
 801ac74:	4618      	mov	r0, r3
 801ac76:	f000 fa3d 	bl	801b0f4 <SUBGRF_SetCrcPolynomial>
        break;
 801ac7a:	e13f      	b.n	801aefc <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 801ac7c:	68bb      	ldr	r3, [r7, #8]
 801ac7e:	681b      	ldr	r3, [r3, #0]
 801ac80:	2b00      	cmp	r3, #0
 801ac82:	d102      	bne.n	801ac8a <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 801ac84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ac88:	e14c      	b.n	801af24 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 801ac8a:	68bb      	ldr	r3, [r7, #8]
 801ac8c:	7c9b      	ldrb	r3, [r3, #18]
 801ac8e:	2b08      	cmp	r3, #8
 801ac90:	d902      	bls.n	801ac98 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 801ac92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ac96:	e145      	b.n	801af24 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801ac98:	68bb      	ldr	r3, [r7, #8]
 801ac9a:	6899      	ldr	r1, [r3, #8]
 801ac9c:	68bb      	ldr	r3, [r7, #8]
 801ac9e:	7c9b      	ldrb	r3, [r3, #18]
 801aca0:	b29a      	uxth	r2, r3
 801aca2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801aca6:	4618      	mov	r0, r3
 801aca8:	f001 fc4e 	bl	801c548 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801acac:	4b40      	ldr	r3, [pc, #256]	; (801adb0 <RadioSetTxGenericConfig+0x2e4>)
 801acae:	2200      	movs	r2, #0
 801acb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801acb4:	68bb      	ldr	r3, [r7, #8]
 801acb6:	681b      	ldr	r3, [r3, #0]
 801acb8:	4a3d      	ldr	r2, [pc, #244]	; (801adb0 <RadioSetTxGenericConfig+0x2e4>)
 801acba:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801acbc:	68bb      	ldr	r3, [r7, #8]
 801acbe:	7cda      	ldrb	r2, [r3, #19]
 801acc0:	4b3b      	ldr	r3, [pc, #236]	; (801adb0 <RadioSetTxGenericConfig+0x2e4>)
 801acc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801acc6:	68bb      	ldr	r3, [r7, #8]
 801acc8:	699b      	ldr	r3, [r3, #24]
 801acca:	4a39      	ldr	r2, [pc, #228]	; (801adb0 <RadioSetTxGenericConfig+0x2e4>)
 801accc:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801acce:	4b38      	ldr	r3, [pc, #224]	; (801adb0 <RadioSetTxGenericConfig+0x2e4>)
 801acd0:	2200      	movs	r2, #0
 801acd2:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 801acd4:	68bb      	ldr	r3, [r7, #8]
 801acd6:	685b      	ldr	r3, [r3, #4]
 801acd8:	b29b      	uxth	r3, r3
 801acda:	00db      	lsls	r3, r3, #3
 801acdc:	b29a      	uxth	r2, r3
 801acde:	4b34      	ldr	r3, [pc, #208]	; (801adb0 <RadioSetTxGenericConfig+0x2e4>)
 801ace0:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801ace2:	4b33      	ldr	r3, [pc, #204]	; (801adb0 <RadioSetTxGenericConfig+0x2e4>)
 801ace4:	2204      	movs	r2, #4
 801ace6:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801ace8:	68bb      	ldr	r3, [r7, #8]
 801acea:	7c9b      	ldrb	r3, [r3, #18]
 801acec:	00db      	lsls	r3, r3, #3
 801acee:	b2da      	uxtb	r2, r3
 801acf0:	4b2f      	ldr	r3, [pc, #188]	; (801adb0 <RadioSetTxGenericConfig+0x2e4>)
 801acf2:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801acf4:	4b2e      	ldr	r3, [pc, #184]	; (801adb0 <RadioSetTxGenericConfig+0x2e4>)
 801acf6:	2200      	movs	r2, #0
 801acf8:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801acfa:	68bb      	ldr	r3, [r7, #8]
 801acfc:	7d9b      	ldrb	r3, [r3, #22]
 801acfe:	2b02      	cmp	r3, #2
 801ad00:	d003      	beq.n	801ad0a <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801ad02:	68bb      	ldr	r3, [r7, #8]
 801ad04:	7d1b      	ldrb	r3, [r3, #20]
 801ad06:	2b02      	cmp	r3, #2
 801ad08:	d12a      	bne.n	801ad60 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801ad0a:	68bb      	ldr	r3, [r7, #8]
 801ad0c:	7d5b      	ldrb	r3, [r3, #21]
 801ad0e:	2bf1      	cmp	r3, #241	; 0xf1
 801ad10:	d00a      	beq.n	801ad28 <RadioSetTxGenericConfig+0x25c>
 801ad12:	68bb      	ldr	r3, [r7, #8]
 801ad14:	7d5b      	ldrb	r3, [r3, #21]
 801ad16:	2bf2      	cmp	r3, #242	; 0xf2
 801ad18:	d006      	beq.n	801ad28 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801ad1a:	68bb      	ldr	r3, [r7, #8]
 801ad1c:	7d5b      	ldrb	r3, [r3, #21]
 801ad1e:	2b01      	cmp	r3, #1
 801ad20:	d002      	beq.n	801ad28 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 801ad22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ad26:	e0fd      	b.n	801af24 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 801ad28:	2301      	movs	r3, #1
 801ad2a:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 801ad2c:	68bb      	ldr	r3, [r7, #8]
 801ad2e:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801ad30:	4b20      	ldr	r3, [pc, #128]	; (801adb4 <RadioSetTxGenericConfig+0x2e8>)
 801ad32:	6819      	ldr	r1, [r3, #0]
 801ad34:	f107 0314 	add.w	r3, r7, #20
 801ad38:	4a1f      	ldr	r2, [pc, #124]	; (801adb8 <RadioSetTxGenericConfig+0x2ec>)
 801ad3a:	4618      	mov	r0, r3
 801ad3c:	f001 fb04 	bl	801c348 <RFW_Init>
 801ad40:	4603      	mov	r3, r0
 801ad42:	2b00      	cmp	r3, #0
 801ad44:	d002      	beq.n	801ad4c <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 801ad46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ad4a:	e0eb      	b.n	801af24 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801ad4c:	4b18      	ldr	r3, [pc, #96]	; (801adb0 <RadioSetTxGenericConfig+0x2e4>)
 801ad4e:	2200      	movs	r2, #0
 801ad50:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801ad52:	4b17      	ldr	r3, [pc, #92]	; (801adb0 <RadioSetTxGenericConfig+0x2e4>)
 801ad54:	2201      	movs	r2, #1
 801ad56:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801ad58:	4b15      	ldr	r3, [pc, #84]	; (801adb0 <RadioSetTxGenericConfig+0x2e4>)
 801ad5a:	2200      	movs	r2, #0
 801ad5c:	755a      	strb	r2, [r3, #21]
        {
 801ad5e:	e00b      	b.n	801ad78 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801ad60:	68bb      	ldr	r3, [r7, #8]
 801ad62:	7d5a      	ldrb	r2, [r3, #21]
 801ad64:	4b12      	ldr	r3, [pc, #72]	; (801adb0 <RadioSetTxGenericConfig+0x2e4>)
 801ad66:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801ad68:	68bb      	ldr	r3, [r7, #8]
 801ad6a:	7d9a      	ldrb	r2, [r3, #22]
 801ad6c:	4b10      	ldr	r3, [pc, #64]	; (801adb0 <RadioSetTxGenericConfig+0x2e4>)
 801ad6e:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 801ad70:	68bb      	ldr	r3, [r7, #8]
 801ad72:	7d1a      	ldrb	r2, [r3, #20]
 801ad74:	4b0e      	ldr	r3, [pc, #56]	; (801adb0 <RadioSetTxGenericConfig+0x2e4>)
 801ad76:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801ad78:	f7fe fffb 	bl	8019d72 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801ad7c:	2000      	movs	r0, #0
 801ad7e:	f7fe f98f 	bl	80190a0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801ad82:	480e      	ldr	r0, [pc, #56]	; (801adbc <RadioSetTxGenericConfig+0x2f0>)
 801ad84:	f000 fdec 	bl	801b960 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ad88:	480d      	ldr	r0, [pc, #52]	; (801adc0 <RadioSetTxGenericConfig+0x2f4>)
 801ad8a:	f000 febb 	bl	801bb04 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801ad8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801ad92:	4618      	mov	r0, r3
 801ad94:	f000 f97f 	bl	801b096 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801ad98:	68bb      	ldr	r3, [r7, #8]
 801ad9a:	8a1b      	ldrh	r3, [r3, #16]
 801ad9c:	4618      	mov	r0, r3
 801ad9e:	f000 f9c9 	bl	801b134 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801ada2:	68bb      	ldr	r3, [r7, #8]
 801ada4:	899b      	ldrh	r3, [r3, #12]
 801ada6:	4618      	mov	r0, r3
 801ada8:	f000 f9a4 	bl	801b0f4 <SUBGRF_SetCrcPolynomial>
        break;
 801adac:	e0a6      	b.n	801aefc <RadioSetTxGenericConfig+0x430>
 801adae:	bf00      	nop
 801adb0:	20001be8 	.word	0x20001be8
 801adb4:	20001be4 	.word	0x20001be4
 801adb8:	20001c44 	.word	0x20001c44
 801adbc:	20001c20 	.word	0x20001c20
 801adc0:	20001bf6 	.word	0x20001bf6
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801adc4:	4b59      	ldr	r3, [pc, #356]	; (801af2c <RadioSetTxGenericConfig+0x460>)
 801adc6:	2201      	movs	r2, #1
 801adc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801adcc:	68bb      	ldr	r3, [r7, #8]
 801adce:	781a      	ldrb	r2, [r3, #0]
 801add0:	4b56      	ldr	r3, [pc, #344]	; (801af2c <RadioSetTxGenericConfig+0x460>)
 801add2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801add6:	68bb      	ldr	r3, [r7, #8]
 801add8:	785a      	ldrb	r2, [r3, #1]
 801adda:	4b54      	ldr	r3, [pc, #336]	; (801af2c <RadioSetTxGenericConfig+0x460>)
 801addc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801ade0:	68bb      	ldr	r3, [r7, #8]
 801ade2:	789a      	ldrb	r2, [r3, #2]
 801ade4:	4b51      	ldr	r3, [pc, #324]	; (801af2c <RadioSetTxGenericConfig+0x460>)
 801ade6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801adea:	68bb      	ldr	r3, [r7, #8]
 801adec:	78db      	ldrb	r3, [r3, #3]
 801adee:	2b02      	cmp	r3, #2
 801adf0:	d010      	beq.n	801ae14 <RadioSetTxGenericConfig+0x348>
 801adf2:	2b02      	cmp	r3, #2
 801adf4:	dc20      	bgt.n	801ae38 <RadioSetTxGenericConfig+0x36c>
 801adf6:	2b00      	cmp	r3, #0
 801adf8:	d002      	beq.n	801ae00 <RadioSetTxGenericConfig+0x334>
 801adfa:	2b01      	cmp	r3, #1
 801adfc:	d005      	beq.n	801ae0a <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 801adfe:	e01b      	b.n	801ae38 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801ae00:	4b4a      	ldr	r3, [pc, #296]	; (801af2c <RadioSetTxGenericConfig+0x460>)
 801ae02:	2200      	movs	r2, #0
 801ae04:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801ae08:	e017      	b.n	801ae3a <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801ae0a:	4b48      	ldr	r3, [pc, #288]	; (801af2c <RadioSetTxGenericConfig+0x460>)
 801ae0c:	2201      	movs	r2, #1
 801ae0e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801ae12:	e012      	b.n	801ae3a <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801ae14:	68bb      	ldr	r3, [r7, #8]
 801ae16:	781b      	ldrb	r3, [r3, #0]
 801ae18:	2b0b      	cmp	r3, #11
 801ae1a:	d003      	beq.n	801ae24 <RadioSetTxGenericConfig+0x358>
 801ae1c:	68bb      	ldr	r3, [r7, #8]
 801ae1e:	781b      	ldrb	r3, [r3, #0]
 801ae20:	2b0c      	cmp	r3, #12
 801ae22:	d104      	bne.n	801ae2e <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801ae24:	4b41      	ldr	r3, [pc, #260]	; (801af2c <RadioSetTxGenericConfig+0x460>)
 801ae26:	2201      	movs	r2, #1
 801ae28:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801ae2c:	e005      	b.n	801ae3a <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801ae2e:	4b3f      	ldr	r3, [pc, #252]	; (801af2c <RadioSetTxGenericConfig+0x460>)
 801ae30:	2200      	movs	r2, #0
 801ae32:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801ae36:	e000      	b.n	801ae3a <RadioSetTxGenericConfig+0x36e>
            break;
 801ae38:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801ae3a:	4b3c      	ldr	r3, [pc, #240]	; (801af2c <RadioSetTxGenericConfig+0x460>)
 801ae3c:	2201      	movs	r2, #1
 801ae3e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801ae40:	68bb      	ldr	r3, [r7, #8]
 801ae42:	889a      	ldrh	r2, [r3, #4]
 801ae44:	4b39      	ldr	r3, [pc, #228]	; (801af2c <RadioSetTxGenericConfig+0x460>)
 801ae46:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801ae48:	68bb      	ldr	r3, [r7, #8]
 801ae4a:	799a      	ldrb	r2, [r3, #6]
 801ae4c:	4b37      	ldr	r3, [pc, #220]	; (801af2c <RadioSetTxGenericConfig+0x460>)
 801ae4e:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801ae50:	68bb      	ldr	r3, [r7, #8]
 801ae52:	79da      	ldrb	r2, [r3, #7]
 801ae54:	4b35      	ldr	r3, [pc, #212]	; (801af2c <RadioSetTxGenericConfig+0x460>)
 801ae56:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801ae5a:	68bb      	ldr	r3, [r7, #8]
 801ae5c:	7a1a      	ldrb	r2, [r3, #8]
 801ae5e:	4b33      	ldr	r3, [pc, #204]	; (801af2c <RadioSetTxGenericConfig+0x460>)
 801ae60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 801ae64:	f7fe ff85 	bl	8019d72 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801ae68:	2001      	movs	r0, #1
 801ae6a:	f7fe f919 	bl	80190a0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801ae6e:	4830      	ldr	r0, [pc, #192]	; (801af30 <RadioSetTxGenericConfig+0x464>)
 801ae70:	f000 fd76 	bl	801b960 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ae74:	482f      	ldr	r0, [pc, #188]	; (801af34 <RadioSetTxGenericConfig+0x468>)
 801ae76:	f000 fe45 	bl	801bb04 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801ae7a:	4b2c      	ldr	r3, [pc, #176]	; (801af2c <RadioSetTxGenericConfig+0x460>)
 801ae7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801ae80:	2b06      	cmp	r3, #6
 801ae82:	d10d      	bne.n	801aea0 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801ae84:	f640 0089 	movw	r0, #2185	; 0x889
 801ae88:	f000 ff98 	bl	801bdbc <SUBGRF_ReadRegister>
 801ae8c:	4603      	mov	r3, r0
 801ae8e:	f023 0304 	bic.w	r3, r3, #4
 801ae92:	b2db      	uxtb	r3, r3
 801ae94:	4619      	mov	r1, r3
 801ae96:	f640 0089 	movw	r0, #2185	; 0x889
 801ae9a:	f000 ff7b 	bl	801bd94 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 801ae9e:	e02d      	b.n	801aefc <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801aea0:	f640 0089 	movw	r0, #2185	; 0x889
 801aea4:	f000 ff8a 	bl	801bdbc <SUBGRF_ReadRegister>
 801aea8:	4603      	mov	r3, r0
 801aeaa:	f043 0304 	orr.w	r3, r3, #4
 801aeae:	b2db      	uxtb	r3, r3
 801aeb0:	4619      	mov	r1, r3
 801aeb2:	f640 0089 	movw	r0, #2185	; 0x889
 801aeb6:	f000 ff6d 	bl	801bd94 <SUBGRF_WriteRegister>
        break;
 801aeba:	e01f      	b.n	801aefc <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801aebc:	68bb      	ldr	r3, [r7, #8]
 801aebe:	681b      	ldr	r3, [r3, #0]
 801aec0:	2b00      	cmp	r3, #0
 801aec2:	d004      	beq.n	801aece <RadioSetTxGenericConfig+0x402>
 801aec4:	68bb      	ldr	r3, [r7, #8]
 801aec6:	681b      	ldr	r3, [r3, #0]
 801aec8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801aecc:	d902      	bls.n	801aed4 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 801aece:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801aed2:	e027      	b.n	801af24 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 801aed4:	2003      	movs	r0, #3
 801aed6:	f7fe f8e3 	bl	80190a0 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801aeda:	4b14      	ldr	r3, [pc, #80]	; (801af2c <RadioSetTxGenericConfig+0x460>)
 801aedc:	2202      	movs	r2, #2
 801aede:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 801aee2:	68bb      	ldr	r3, [r7, #8]
 801aee4:	681b      	ldr	r3, [r3, #0]
 801aee6:	4a11      	ldr	r2, [pc, #68]	; (801af2c <RadioSetTxGenericConfig+0x460>)
 801aee8:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801aeea:	4b10      	ldr	r3, [pc, #64]	; (801af2c <RadioSetTxGenericConfig+0x460>)
 801aeec:	2216      	movs	r2, #22
 801aeee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801aef2:	480f      	ldr	r0, [pc, #60]	; (801af30 <RadioSetTxGenericConfig+0x464>)
 801aef4:	f000 fd34 	bl	801b960 <SUBGRF_SetModulationParams>
        break;
 801aef8:	e000      	b.n	801aefc <RadioSetTxGenericConfig+0x430>
    default:
        break;
 801aefa:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801aefc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801af00:	4618      	mov	r0, r3
 801af02:	f001 f863 	bl	801bfcc <SUBGRF_SetRfTxPower>
 801af06:	4603      	mov	r3, r0
 801af08:	461a      	mov	r2, r3
 801af0a:	4b08      	ldr	r3, [pc, #32]	; (801af2c <RadioSetTxGenericConfig+0x460>)
 801af0c:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801af10:	4b06      	ldr	r3, [pc, #24]	; (801af2c <RadioSetTxGenericConfig+0x460>)
 801af12:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801af16:	4618      	mov	r0, r3
 801af18:	f001 fa37 	bl	801c38a <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801af1c:	4a03      	ldr	r2, [pc, #12]	; (801af2c <RadioSetTxGenericConfig+0x460>)
 801af1e:	687b      	ldr	r3, [r7, #4]
 801af20:	6053      	str	r3, [r2, #4]
    return 0;
 801af22:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801af24:	4618      	mov	r0, r3
 801af26:	3738      	adds	r7, #56	; 0x38
 801af28:	46bd      	mov	sp, r7
 801af2a:	bd80      	pop	{r7, pc}
 801af2c:	20001be8 	.word	0x20001be8
 801af30:	20001c20 	.word	0x20001c20
 801af34:	20001bf6 	.word	0x20001bf6

0801af38 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 801af38:	b480      	push	{r7}
 801af3a:	b085      	sub	sp, #20
 801af3c:	af00      	add	r7, sp, #0
 801af3e:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 801af40:	2301      	movs	r3, #1
 801af42:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 801af44:	7bfb      	ldrb	r3, [r7, #15]
}
 801af46:	4618      	mov	r0, r3
 801af48:	3714      	adds	r7, #20
 801af4a:	46bd      	mov	sp, r7
 801af4c:	bc80      	pop	{r7}
 801af4e:	4770      	bx	lr

0801af50 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 801af50:	b480      	push	{r7}
 801af52:	b083      	sub	sp, #12
 801af54:	af00      	add	r7, sp, #0
 801af56:	6078      	str	r0, [r7, #4]
 801af58:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 801af5a:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 801af5c:	4618      	mov	r0, r3
 801af5e:	370c      	adds	r7, #12
 801af60:	46bd      	mov	sp, r7
 801af62:	bc80      	pop	{r7}
 801af64:	4770      	bx	lr
	...

0801af68 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 801af68:	b580      	push	{r7, lr}
 801af6a:	b084      	sub	sp, #16
 801af6c:	af00      	add	r7, sp, #0
 801af6e:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 801af70:	687b      	ldr	r3, [r7, #4]
 801af72:	2b00      	cmp	r3, #0
 801af74:	d002      	beq.n	801af7c <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801af76:	4a1d      	ldr	r2, [pc, #116]	; (801afec <SUBGRF_Init+0x84>)
 801af78:	687b      	ldr	r3, [r7, #4]
 801af7a:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 801af7c:	f7e6 ff92 	bl	8001ea4 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801af80:	2002      	movs	r0, #2
 801af82:	f001 f8ff 	bl	801c184 <Radio_SMPS_Set>

    ImageCalibrated = false;
 801af86:	4b1a      	ldr	r3, [pc, #104]	; (801aff0 <SUBGRF_Init+0x88>)
 801af88:	2200      	movs	r2, #0
 801af8a:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 801af8c:	2000      	movs	r0, #0
 801af8e:	f000 f97d 	bl	801b28c <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801af92:	f7ef ff73 	bl	800ae7c <RBI_IsTCXO>
 801af96:	4603      	mov	r3, r0
 801af98:	2b01      	cmp	r3, #1
 801af9a:	d10e      	bne.n	801afba <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801af9c:	2140      	movs	r1, #64	; 0x40
 801af9e:	2001      	movs	r0, #1
 801afa0:	f000 fb82 	bl	801b6a8 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801afa4:	2100      	movs	r1, #0
 801afa6:	f640 1011 	movw	r0, #2321	; 0x911
 801afaa:	f000 fef3 	bl	801bd94 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801afae:	237f      	movs	r3, #127	; 0x7f
 801afb0:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801afb2:	7b38      	ldrb	r0, [r7, #12]
 801afb4:	f000 fa8b 	bl	801b4ce <SUBGRF_Calibrate>
 801afb8:	e009      	b.n	801afce <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801afba:	2120      	movs	r1, #32
 801afbc:	f640 1011 	movw	r0, #2321	; 0x911
 801afc0:	f000 fee8 	bl	801bd94 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801afc4:	2120      	movs	r1, #32
 801afc6:	f640 1012 	movw	r0, #2322	; 0x912
 801afca:	f000 fee3 	bl	801bd94 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801afce:	210e      	movs	r1, #14
 801afd0:	f640 101f 	movw	r0, #2335	; 0x91f
 801afd4:	f000 fede 	bl	801bd94 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 801afd8:	f7ef ff34 	bl	800ae44 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801afdc:	4b05      	ldr	r3, [pc, #20]	; (801aff4 <SUBGRF_Init+0x8c>)
 801afde:	2201      	movs	r2, #1
 801afe0:	701a      	strb	r2, [r3, #0]
}
 801afe2:	bf00      	nop
 801afe4:	3710      	adds	r7, #16
 801afe6:	46bd      	mov	sp, r7
 801afe8:	bd80      	pop	{r7, pc}
 801afea:	bf00      	nop
 801afec:	20001c80 	.word	0x20001c80
 801aff0:	20001c7c 	.word	0x20001c7c
 801aff4:	20001c74 	.word	0x20001c74

0801aff8 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801aff8:	b480      	push	{r7}
 801affa:	af00      	add	r7, sp, #0
    return OperatingMode;
 801affc:	4b02      	ldr	r3, [pc, #8]	; (801b008 <SUBGRF_GetOperatingMode+0x10>)
 801affe:	781b      	ldrb	r3, [r3, #0]
}
 801b000:	4618      	mov	r0, r3
 801b002:	46bd      	mov	sp, r7
 801b004:	bc80      	pop	{r7}
 801b006:	4770      	bx	lr
 801b008:	20001c74 	.word	0x20001c74

0801b00c <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 801b00c:	b580      	push	{r7, lr}
 801b00e:	b082      	sub	sp, #8
 801b010:	af00      	add	r7, sp, #0
 801b012:	6078      	str	r0, [r7, #4]
 801b014:	460b      	mov	r3, r1
 801b016:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801b018:	78fb      	ldrb	r3, [r7, #3]
 801b01a:	461a      	mov	r2, r3
 801b01c:	6879      	ldr	r1, [r7, #4]
 801b01e:	2000      	movs	r0, #0
 801b020:	f000 ff24 	bl	801be6c <SUBGRF_WriteBuffer>
}
 801b024:	bf00      	nop
 801b026:	3708      	adds	r7, #8
 801b028:	46bd      	mov	sp, r7
 801b02a:	bd80      	pop	{r7, pc}

0801b02c <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 801b02c:	b580      	push	{r7, lr}
 801b02e:	b086      	sub	sp, #24
 801b030:	af00      	add	r7, sp, #0
 801b032:	60f8      	str	r0, [r7, #12]
 801b034:	60b9      	str	r1, [r7, #8]
 801b036:	4613      	mov	r3, r2
 801b038:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801b03a:	2300      	movs	r3, #0
 801b03c:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801b03e:	f107 0317 	add.w	r3, r7, #23
 801b042:	4619      	mov	r1, r3
 801b044:	68b8      	ldr	r0, [r7, #8]
 801b046:	f000 fe27 	bl	801bc98 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801b04a:	68bb      	ldr	r3, [r7, #8]
 801b04c:	781b      	ldrb	r3, [r3, #0]
 801b04e:	79fa      	ldrb	r2, [r7, #7]
 801b050:	429a      	cmp	r2, r3
 801b052:	d201      	bcs.n	801b058 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801b054:	2301      	movs	r3, #1
 801b056:	e007      	b.n	801b068 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801b058:	7df8      	ldrb	r0, [r7, #23]
 801b05a:	68bb      	ldr	r3, [r7, #8]
 801b05c:	781b      	ldrb	r3, [r3, #0]
 801b05e:	461a      	mov	r2, r3
 801b060:	68f9      	ldr	r1, [r7, #12]
 801b062:	f000 ff25 	bl	801beb0 <SUBGRF_ReadBuffer>

    return 0;
 801b066:	2300      	movs	r3, #0
}
 801b068:	4618      	mov	r0, r3
 801b06a:	3718      	adds	r7, #24
 801b06c:	46bd      	mov	sp, r7
 801b06e:	bd80      	pop	{r7, pc}

0801b070 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 801b070:	b580      	push	{r7, lr}
 801b072:	b084      	sub	sp, #16
 801b074:	af00      	add	r7, sp, #0
 801b076:	60f8      	str	r0, [r7, #12]
 801b078:	460b      	mov	r3, r1
 801b07a:	607a      	str	r2, [r7, #4]
 801b07c:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801b07e:	7afb      	ldrb	r3, [r7, #11]
 801b080:	4619      	mov	r1, r3
 801b082:	68f8      	ldr	r0, [r7, #12]
 801b084:	f7ff ffc2 	bl	801b00c <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801b088:	6878      	ldr	r0, [r7, #4]
 801b08a:	f000 f91b 	bl	801b2c4 <SUBGRF_SetTx>
}
 801b08e:	bf00      	nop
 801b090:	3710      	adds	r7, #16
 801b092:	46bd      	mov	sp, r7
 801b094:	bd80      	pop	{r7, pc}

0801b096 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801b096:	b580      	push	{r7, lr}
 801b098:	b082      	sub	sp, #8
 801b09a:	af00      	add	r7, sp, #0
 801b09c:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801b09e:	2208      	movs	r2, #8
 801b0a0:	6879      	ldr	r1, [r7, #4]
 801b0a2:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 801b0a6:	f000 fe9d 	bl	801bde4 <SUBGRF_WriteRegisters>
    return 0;
 801b0aa:	2300      	movs	r3, #0
}
 801b0ac:	4618      	mov	r0, r3
 801b0ae:	3708      	adds	r7, #8
 801b0b0:	46bd      	mov	sp, r7
 801b0b2:	bd80      	pop	{r7, pc}

0801b0b4 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 801b0b4:	b580      	push	{r7, lr}
 801b0b6:	b084      	sub	sp, #16
 801b0b8:	af00      	add	r7, sp, #0
 801b0ba:	4603      	mov	r3, r0
 801b0bc:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801b0be:	88fb      	ldrh	r3, [r7, #6]
 801b0c0:	0a1b      	lsrs	r3, r3, #8
 801b0c2:	b29b      	uxth	r3, r3
 801b0c4:	b2db      	uxtb	r3, r3
 801b0c6:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801b0c8:	88fb      	ldrh	r3, [r7, #6]
 801b0ca:	b2db      	uxtb	r3, r3
 801b0cc:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801b0ce:	f000 fb6f 	bl	801b7b0 <SUBGRF_GetPacketType>
 801b0d2:	4603      	mov	r3, r0
 801b0d4:	2b00      	cmp	r3, #0
 801b0d6:	d108      	bne.n	801b0ea <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801b0d8:	f107 030c 	add.w	r3, r7, #12
 801b0dc:	2202      	movs	r2, #2
 801b0de:	4619      	mov	r1, r3
 801b0e0:	f240 60bc 	movw	r0, #1724	; 0x6bc
 801b0e4:	f000 fe7e 	bl	801bde4 <SUBGRF_WriteRegisters>
            break;
 801b0e8:	e000      	b.n	801b0ec <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801b0ea:	bf00      	nop
    }
}
 801b0ec:	bf00      	nop
 801b0ee:	3710      	adds	r7, #16
 801b0f0:	46bd      	mov	sp, r7
 801b0f2:	bd80      	pop	{r7, pc}

0801b0f4 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 801b0f4:	b580      	push	{r7, lr}
 801b0f6:	b084      	sub	sp, #16
 801b0f8:	af00      	add	r7, sp, #0
 801b0fa:	4603      	mov	r3, r0
 801b0fc:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801b0fe:	88fb      	ldrh	r3, [r7, #6]
 801b100:	0a1b      	lsrs	r3, r3, #8
 801b102:	b29b      	uxth	r3, r3
 801b104:	b2db      	uxtb	r3, r3
 801b106:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801b108:	88fb      	ldrh	r3, [r7, #6]
 801b10a:	b2db      	uxtb	r3, r3
 801b10c:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801b10e:	f000 fb4f 	bl	801b7b0 <SUBGRF_GetPacketType>
 801b112:	4603      	mov	r3, r0
 801b114:	2b00      	cmp	r3, #0
 801b116:	d108      	bne.n	801b12a <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801b118:	f107 030c 	add.w	r3, r7, #12
 801b11c:	2202      	movs	r2, #2
 801b11e:	4619      	mov	r1, r3
 801b120:	f240 60be 	movw	r0, #1726	; 0x6be
 801b124:	f000 fe5e 	bl	801bde4 <SUBGRF_WriteRegisters>
            break;
 801b128:	e000      	b.n	801b12c <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 801b12a:	bf00      	nop
    }
}
 801b12c:	bf00      	nop
 801b12e:	3710      	adds	r7, #16
 801b130:	46bd      	mov	sp, r7
 801b132:	bd80      	pop	{r7, pc}

0801b134 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 801b134:	b580      	push	{r7, lr}
 801b136:	b084      	sub	sp, #16
 801b138:	af00      	add	r7, sp, #0
 801b13a:	4603      	mov	r3, r0
 801b13c:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801b13e:	2300      	movs	r3, #0
 801b140:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801b142:	f000 fb35 	bl	801b7b0 <SUBGRF_GetPacketType>
 801b146:	4603      	mov	r3, r0
 801b148:	2b00      	cmp	r3, #0
 801b14a:	d121      	bne.n	801b190 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801b14c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801b150:	f000 fe34 	bl	801bdbc <SUBGRF_ReadRegister>
 801b154:	4603      	mov	r3, r0
 801b156:	f023 0301 	bic.w	r3, r3, #1
 801b15a:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801b15c:	88fb      	ldrh	r3, [r7, #6]
 801b15e:	0a1b      	lsrs	r3, r3, #8
 801b160:	b29b      	uxth	r3, r3
 801b162:	b25b      	sxtb	r3, r3
 801b164:	f003 0301 	and.w	r3, r3, #1
 801b168:	b25a      	sxtb	r2, r3
 801b16a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b16e:	4313      	orrs	r3, r2
 801b170:	b25b      	sxtb	r3, r3
 801b172:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801b174:	7bfb      	ldrb	r3, [r7, #15]
 801b176:	4619      	mov	r1, r3
 801b178:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801b17c:	f000 fe0a 	bl	801bd94 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801b180:	88fb      	ldrh	r3, [r7, #6]
 801b182:	b2db      	uxtb	r3, r3
 801b184:	4619      	mov	r1, r3
 801b186:	f240 60b9 	movw	r0, #1721	; 0x6b9
 801b18a:	f000 fe03 	bl	801bd94 <SUBGRF_WriteRegister>
            break;
 801b18e:	e000      	b.n	801b192 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801b190:	bf00      	nop
    }
}
 801b192:	bf00      	nop
 801b194:	3710      	adds	r7, #16
 801b196:	46bd      	mov	sp, r7
 801b198:	bd80      	pop	{r7, pc}

0801b19a <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801b19a:	b580      	push	{r7, lr}
 801b19c:	b082      	sub	sp, #8
 801b19e:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801b1a0:	2300      	movs	r3, #0
 801b1a2:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 801b1a4:	2300      	movs	r3, #0
 801b1a6:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801b1a8:	2300      	movs	r3, #0
 801b1aa:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801b1ac:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801b1b0:	f000 fe04 	bl	801bdbc <SUBGRF_ReadRegister>
 801b1b4:	4603      	mov	r3, r0
 801b1b6:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801b1b8:	79fb      	ldrb	r3, [r7, #7]
 801b1ba:	f023 0301 	bic.w	r3, r3, #1
 801b1be:	b2db      	uxtb	r3, r3
 801b1c0:	4619      	mov	r1, r3
 801b1c2:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801b1c6:	f000 fde5 	bl	801bd94 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801b1ca:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801b1ce:	f000 fdf5 	bl	801bdbc <SUBGRF_ReadRegister>
 801b1d2:	4603      	mov	r3, r0
 801b1d4:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801b1d6:	79bb      	ldrb	r3, [r7, #6]
 801b1d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801b1dc:	b2db      	uxtb	r3, r3
 801b1de:	4619      	mov	r1, r3
 801b1e0:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801b1e4:	f000 fdd6 	bl	801bd94 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801b1e8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801b1ec:	f000 f88a 	bl	801b304 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801b1f0:	463b      	mov	r3, r7
 801b1f2:	2204      	movs	r2, #4
 801b1f4:	4619      	mov	r1, r3
 801b1f6:	f640 0019 	movw	r0, #2073	; 0x819
 801b1fa:	f000 fe15 	bl	801be28 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801b1fe:	2000      	movs	r0, #0
 801b200:	f000 f844 	bl	801b28c <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801b204:	79fb      	ldrb	r3, [r7, #7]
 801b206:	4619      	mov	r1, r3
 801b208:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801b20c:	f000 fdc2 	bl	801bd94 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801b210:	79bb      	ldrb	r3, [r7, #6]
 801b212:	4619      	mov	r1, r3
 801b214:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801b218:	f000 fdbc 	bl	801bd94 <SUBGRF_WriteRegister>

    return number;
 801b21c:	683b      	ldr	r3, [r7, #0]
}
 801b21e:	4618      	mov	r0, r3
 801b220:	3708      	adds	r7, #8
 801b222:	46bd      	mov	sp, r7
 801b224:	bd80      	pop	{r7, pc}
	...

0801b228 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 801b228:	b580      	push	{r7, lr}
 801b22a:	b084      	sub	sp, #16
 801b22c:	af00      	add	r7, sp, #0
 801b22e:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801b230:	2000      	movs	r0, #0
 801b232:	f7ef fe0e 	bl	800ae52 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801b236:	2002      	movs	r0, #2
 801b238:	f000 ffa4 	bl	801c184 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801b23c:	793b      	ldrb	r3, [r7, #4]
 801b23e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801b242:	b2db      	uxtb	r3, r3
 801b244:	009b      	lsls	r3, r3, #2
 801b246:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801b248:	793b      	ldrb	r3, [r7, #4]
 801b24a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801b24e:	b2db      	uxtb	r3, r3
 801b250:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801b252:	b25b      	sxtb	r3, r3
 801b254:	4313      	orrs	r3, r2
 801b256:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801b258:	793b      	ldrb	r3, [r7, #4]
 801b25a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801b25e:	b2db      	uxtb	r3, r3
 801b260:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801b262:	4313      	orrs	r3, r2
 801b264:	b25b      	sxtb	r3, r3
 801b266:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801b268:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801b26a:	f107 030f 	add.w	r3, r7, #15
 801b26e:	2201      	movs	r2, #1
 801b270:	4619      	mov	r1, r3
 801b272:	2084      	movs	r0, #132	; 0x84
 801b274:	f000 fe3e 	bl	801bef4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801b278:	4b03      	ldr	r3, [pc, #12]	; (801b288 <SUBGRF_SetSleep+0x60>)
 801b27a:	2200      	movs	r2, #0
 801b27c:	701a      	strb	r2, [r3, #0]
}
 801b27e:	bf00      	nop
 801b280:	3710      	adds	r7, #16
 801b282:	46bd      	mov	sp, r7
 801b284:	bd80      	pop	{r7, pc}
 801b286:	bf00      	nop
 801b288:	20001c74 	.word	0x20001c74

0801b28c <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801b28c:	b580      	push	{r7, lr}
 801b28e:	b082      	sub	sp, #8
 801b290:	af00      	add	r7, sp, #0
 801b292:	4603      	mov	r3, r0
 801b294:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801b296:	1dfb      	adds	r3, r7, #7
 801b298:	2201      	movs	r2, #1
 801b29a:	4619      	mov	r1, r3
 801b29c:	2080      	movs	r0, #128	; 0x80
 801b29e:	f000 fe29 	bl	801bef4 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801b2a2:	79fb      	ldrb	r3, [r7, #7]
 801b2a4:	2b00      	cmp	r3, #0
 801b2a6:	d103      	bne.n	801b2b0 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 801b2a8:	4b05      	ldr	r3, [pc, #20]	; (801b2c0 <SUBGRF_SetStandby+0x34>)
 801b2aa:	2201      	movs	r2, #1
 801b2ac:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801b2ae:	e002      	b.n	801b2b6 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 801b2b0:	4b03      	ldr	r3, [pc, #12]	; (801b2c0 <SUBGRF_SetStandby+0x34>)
 801b2b2:	2202      	movs	r2, #2
 801b2b4:	701a      	strb	r2, [r3, #0]
}
 801b2b6:	bf00      	nop
 801b2b8:	3708      	adds	r7, #8
 801b2ba:	46bd      	mov	sp, r7
 801b2bc:	bd80      	pop	{r7, pc}
 801b2be:	bf00      	nop
 801b2c0:	20001c74 	.word	0x20001c74

0801b2c4 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 801b2c4:	b580      	push	{r7, lr}
 801b2c6:	b084      	sub	sp, #16
 801b2c8:	af00      	add	r7, sp, #0
 801b2ca:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 801b2cc:	4b0c      	ldr	r3, [pc, #48]	; (801b300 <SUBGRF_SetTx+0x3c>)
 801b2ce:	2204      	movs	r2, #4
 801b2d0:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801b2d2:	687b      	ldr	r3, [r7, #4]
 801b2d4:	0c1b      	lsrs	r3, r3, #16
 801b2d6:	b2db      	uxtb	r3, r3
 801b2d8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801b2da:	687b      	ldr	r3, [r7, #4]
 801b2dc:	0a1b      	lsrs	r3, r3, #8
 801b2de:	b2db      	uxtb	r3, r3
 801b2e0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801b2e2:	687b      	ldr	r3, [r7, #4]
 801b2e4:	b2db      	uxtb	r3, r3
 801b2e6:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801b2e8:	f107 030c 	add.w	r3, r7, #12
 801b2ec:	2203      	movs	r2, #3
 801b2ee:	4619      	mov	r1, r3
 801b2f0:	2083      	movs	r0, #131	; 0x83
 801b2f2:	f000 fdff 	bl	801bef4 <SUBGRF_WriteCommand>
}
 801b2f6:	bf00      	nop
 801b2f8:	3710      	adds	r7, #16
 801b2fa:	46bd      	mov	sp, r7
 801b2fc:	bd80      	pop	{r7, pc}
 801b2fe:	bf00      	nop
 801b300:	20001c74 	.word	0x20001c74

0801b304 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801b304:	b580      	push	{r7, lr}
 801b306:	b084      	sub	sp, #16
 801b308:	af00      	add	r7, sp, #0
 801b30a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801b30c:	4b0c      	ldr	r3, [pc, #48]	; (801b340 <SUBGRF_SetRx+0x3c>)
 801b30e:	2205      	movs	r2, #5
 801b310:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801b312:	687b      	ldr	r3, [r7, #4]
 801b314:	0c1b      	lsrs	r3, r3, #16
 801b316:	b2db      	uxtb	r3, r3
 801b318:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801b31a:	687b      	ldr	r3, [r7, #4]
 801b31c:	0a1b      	lsrs	r3, r3, #8
 801b31e:	b2db      	uxtb	r3, r3
 801b320:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801b322:	687b      	ldr	r3, [r7, #4]
 801b324:	b2db      	uxtb	r3, r3
 801b326:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801b328:	f107 030c 	add.w	r3, r7, #12
 801b32c:	2203      	movs	r2, #3
 801b32e:	4619      	mov	r1, r3
 801b330:	2082      	movs	r0, #130	; 0x82
 801b332:	f000 fddf 	bl	801bef4 <SUBGRF_WriteCommand>
}
 801b336:	bf00      	nop
 801b338:	3710      	adds	r7, #16
 801b33a:	46bd      	mov	sp, r7
 801b33c:	bd80      	pop	{r7, pc}
 801b33e:	bf00      	nop
 801b340:	20001c74 	.word	0x20001c74

0801b344 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 801b344:	b580      	push	{r7, lr}
 801b346:	b084      	sub	sp, #16
 801b348:	af00      	add	r7, sp, #0
 801b34a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801b34c:	4b0e      	ldr	r3, [pc, #56]	; (801b388 <SUBGRF_SetRxBoosted+0x44>)
 801b34e:	2205      	movs	r2, #5
 801b350:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801b352:	2197      	movs	r1, #151	; 0x97
 801b354:	f640 00ac 	movw	r0, #2220	; 0x8ac
 801b358:	f000 fd1c 	bl	801bd94 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801b35c:	687b      	ldr	r3, [r7, #4]
 801b35e:	0c1b      	lsrs	r3, r3, #16
 801b360:	b2db      	uxtb	r3, r3
 801b362:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801b364:	687b      	ldr	r3, [r7, #4]
 801b366:	0a1b      	lsrs	r3, r3, #8
 801b368:	b2db      	uxtb	r3, r3
 801b36a:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801b36c:	687b      	ldr	r3, [r7, #4]
 801b36e:	b2db      	uxtb	r3, r3
 801b370:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801b372:	f107 030c 	add.w	r3, r7, #12
 801b376:	2203      	movs	r2, #3
 801b378:	4619      	mov	r1, r3
 801b37a:	2082      	movs	r0, #130	; 0x82
 801b37c:	f000 fdba 	bl	801bef4 <SUBGRF_WriteCommand>
}
 801b380:	bf00      	nop
 801b382:	3710      	adds	r7, #16
 801b384:	46bd      	mov	sp, r7
 801b386:	bd80      	pop	{r7, pc}
 801b388:	20001c74 	.word	0x20001c74

0801b38c <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801b38c:	b580      	push	{r7, lr}
 801b38e:	b084      	sub	sp, #16
 801b390:	af00      	add	r7, sp, #0
 801b392:	6078      	str	r0, [r7, #4]
 801b394:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801b396:	687b      	ldr	r3, [r7, #4]
 801b398:	0c1b      	lsrs	r3, r3, #16
 801b39a:	b2db      	uxtb	r3, r3
 801b39c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801b39e:	687b      	ldr	r3, [r7, #4]
 801b3a0:	0a1b      	lsrs	r3, r3, #8
 801b3a2:	b2db      	uxtb	r3, r3
 801b3a4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801b3a6:	687b      	ldr	r3, [r7, #4]
 801b3a8:	b2db      	uxtb	r3, r3
 801b3aa:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801b3ac:	683b      	ldr	r3, [r7, #0]
 801b3ae:	0c1b      	lsrs	r3, r3, #16
 801b3b0:	b2db      	uxtb	r3, r3
 801b3b2:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801b3b4:	683b      	ldr	r3, [r7, #0]
 801b3b6:	0a1b      	lsrs	r3, r3, #8
 801b3b8:	b2db      	uxtb	r3, r3
 801b3ba:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801b3bc:	683b      	ldr	r3, [r7, #0]
 801b3be:	b2db      	uxtb	r3, r3
 801b3c0:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801b3c2:	f107 0308 	add.w	r3, r7, #8
 801b3c6:	2206      	movs	r2, #6
 801b3c8:	4619      	mov	r1, r3
 801b3ca:	2094      	movs	r0, #148	; 0x94
 801b3cc:	f000 fd92 	bl	801bef4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801b3d0:	4b03      	ldr	r3, [pc, #12]	; (801b3e0 <SUBGRF_SetRxDutyCycle+0x54>)
 801b3d2:	2206      	movs	r2, #6
 801b3d4:	701a      	strb	r2, [r3, #0]
}
 801b3d6:	bf00      	nop
 801b3d8:	3710      	adds	r7, #16
 801b3da:	46bd      	mov	sp, r7
 801b3dc:	bd80      	pop	{r7, pc}
 801b3de:	bf00      	nop
 801b3e0:	20001c74 	.word	0x20001c74

0801b3e4 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801b3e4:	b580      	push	{r7, lr}
 801b3e6:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801b3e8:	2200      	movs	r2, #0
 801b3ea:	2100      	movs	r1, #0
 801b3ec:	20c5      	movs	r0, #197	; 0xc5
 801b3ee:	f000 fd81 	bl	801bef4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801b3f2:	4b02      	ldr	r3, [pc, #8]	; (801b3fc <SUBGRF_SetCad+0x18>)
 801b3f4:	2207      	movs	r2, #7
 801b3f6:	701a      	strb	r2, [r3, #0]
}
 801b3f8:	bf00      	nop
 801b3fa:	bd80      	pop	{r7, pc}
 801b3fc:	20001c74 	.word	0x20001c74

0801b400 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801b400:	b580      	push	{r7, lr}
 801b402:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801b404:	2200      	movs	r2, #0
 801b406:	2100      	movs	r1, #0
 801b408:	20d1      	movs	r0, #209	; 0xd1
 801b40a:	f000 fd73 	bl	801bef4 <SUBGRF_WriteCommand>
}
 801b40e:	bf00      	nop
 801b410:	bd80      	pop	{r7, pc}

0801b412 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801b412:	b580      	push	{r7, lr}
 801b414:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801b416:	2200      	movs	r2, #0
 801b418:	2100      	movs	r1, #0
 801b41a:	20d2      	movs	r0, #210	; 0xd2
 801b41c:	f000 fd6a 	bl	801bef4 <SUBGRF_WriteCommand>
}
 801b420:	bf00      	nop
 801b422:	bd80      	pop	{r7, pc}

0801b424 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 801b424:	b580      	push	{r7, lr}
 801b426:	b082      	sub	sp, #8
 801b428:	af00      	add	r7, sp, #0
 801b42a:	4603      	mov	r3, r0
 801b42c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801b42e:	1dfb      	adds	r3, r7, #7
 801b430:	2201      	movs	r2, #1
 801b432:	4619      	mov	r1, r3
 801b434:	209f      	movs	r0, #159	; 0x9f
 801b436:	f000 fd5d 	bl	801bef4 <SUBGRF_WriteCommand>
}
 801b43a:	bf00      	nop
 801b43c:	3708      	adds	r7, #8
 801b43e:	46bd      	mov	sp, r7
 801b440:	bd80      	pop	{r7, pc}

0801b442 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801b442:	b580      	push	{r7, lr}
 801b444:	b084      	sub	sp, #16
 801b446:	af00      	add	r7, sp, #0
 801b448:	4603      	mov	r3, r0
 801b44a:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801b44c:	1dfb      	adds	r3, r7, #7
 801b44e:	2201      	movs	r2, #1
 801b450:	4619      	mov	r1, r3
 801b452:	20a0      	movs	r0, #160	; 0xa0
 801b454:	f000 fd4e 	bl	801bef4 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 801b458:	79fb      	ldrb	r3, [r7, #7]
 801b45a:	2b3f      	cmp	r3, #63	; 0x3f
 801b45c:	d91c      	bls.n	801b498 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801b45e:	79fb      	ldrb	r3, [r7, #7]
 801b460:	085b      	lsrs	r3, r3, #1
 801b462:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 801b464:	2300      	movs	r3, #0
 801b466:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 801b468:	2300      	movs	r3, #0
 801b46a:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801b46c:	e005      	b.n	801b47a <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801b46e:	7bfb      	ldrb	r3, [r7, #15]
 801b470:	089b      	lsrs	r3, r3, #2
 801b472:	73fb      	strb	r3, [r7, #15]
            exp++;
 801b474:	7bbb      	ldrb	r3, [r7, #14]
 801b476:	3301      	adds	r3, #1
 801b478:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801b47a:	7bfb      	ldrb	r3, [r7, #15]
 801b47c:	2b1f      	cmp	r3, #31
 801b47e:	d8f6      	bhi.n	801b46e <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801b480:	7bfb      	ldrb	r3, [r7, #15]
 801b482:	00db      	lsls	r3, r3, #3
 801b484:	b2da      	uxtb	r2, r3
 801b486:	7bbb      	ldrb	r3, [r7, #14]
 801b488:	4413      	add	r3, r2
 801b48a:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801b48c:	7b7b      	ldrb	r3, [r7, #13]
 801b48e:	4619      	mov	r1, r3
 801b490:	f240 7006 	movw	r0, #1798	; 0x706
 801b494:	f000 fc7e 	bl	801bd94 <SUBGRF_WriteRegister>
    }
}
 801b498:	bf00      	nop
 801b49a:	3710      	adds	r7, #16
 801b49c:	46bd      	mov	sp, r7
 801b49e:	bd80      	pop	{r7, pc}

0801b4a0 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801b4a0:	b580      	push	{r7, lr}
 801b4a2:	b082      	sub	sp, #8
 801b4a4:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801b4a6:	f7ef fcf0 	bl	800ae8a <RBI_IsDCDC>
 801b4aa:	4603      	mov	r3, r0
 801b4ac:	2b01      	cmp	r3, #1
 801b4ae:	d102      	bne.n	801b4b6 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801b4b0:	2301      	movs	r3, #1
 801b4b2:	71fb      	strb	r3, [r7, #7]
 801b4b4:	e001      	b.n	801b4ba <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801b4b6:	2300      	movs	r3, #0
 801b4b8:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801b4ba:	1dfb      	adds	r3, r7, #7
 801b4bc:	2201      	movs	r2, #1
 801b4be:	4619      	mov	r1, r3
 801b4c0:	2096      	movs	r0, #150	; 0x96
 801b4c2:	f000 fd17 	bl	801bef4 <SUBGRF_WriteCommand>
}
 801b4c6:	bf00      	nop
 801b4c8:	3708      	adds	r7, #8
 801b4ca:	46bd      	mov	sp, r7
 801b4cc:	bd80      	pop	{r7, pc}

0801b4ce <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801b4ce:	b580      	push	{r7, lr}
 801b4d0:	b084      	sub	sp, #16
 801b4d2:	af00      	add	r7, sp, #0
 801b4d4:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801b4d6:	793b      	ldrb	r3, [r7, #4]
 801b4d8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801b4dc:	b2db      	uxtb	r3, r3
 801b4de:	019b      	lsls	r3, r3, #6
 801b4e0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801b4e2:	793b      	ldrb	r3, [r7, #4]
 801b4e4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801b4e8:	b2db      	uxtb	r3, r3
 801b4ea:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801b4ec:	b25b      	sxtb	r3, r3
 801b4ee:	4313      	orrs	r3, r2
 801b4f0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801b4f2:	793b      	ldrb	r3, [r7, #4]
 801b4f4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801b4f8:	b2db      	uxtb	r3, r3
 801b4fa:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801b4fc:	b25b      	sxtb	r3, r3
 801b4fe:	4313      	orrs	r3, r2
 801b500:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801b502:	793b      	ldrb	r3, [r7, #4]
 801b504:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801b508:	b2db      	uxtb	r3, r3
 801b50a:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801b50c:	b25b      	sxtb	r3, r3
 801b50e:	4313      	orrs	r3, r2
 801b510:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801b512:	793b      	ldrb	r3, [r7, #4]
 801b514:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801b518:	b2db      	uxtb	r3, r3
 801b51a:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801b51c:	b25b      	sxtb	r3, r3
 801b51e:	4313      	orrs	r3, r2
 801b520:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801b522:	793b      	ldrb	r3, [r7, #4]
 801b524:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801b528:	b2db      	uxtb	r3, r3
 801b52a:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801b52c:	b25b      	sxtb	r3, r3
 801b52e:	4313      	orrs	r3, r2
 801b530:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801b532:	793b      	ldrb	r3, [r7, #4]
 801b534:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801b538:	b2db      	uxtb	r3, r3
 801b53a:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801b53c:	4313      	orrs	r3, r2
 801b53e:	b25b      	sxtb	r3, r3
 801b540:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801b542:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801b544:	f107 030f 	add.w	r3, r7, #15
 801b548:	2201      	movs	r2, #1
 801b54a:	4619      	mov	r1, r3
 801b54c:	2089      	movs	r0, #137	; 0x89
 801b54e:	f000 fcd1 	bl	801bef4 <SUBGRF_WriteCommand>
}
 801b552:	bf00      	nop
 801b554:	3710      	adds	r7, #16
 801b556:	46bd      	mov	sp, r7
 801b558:	bd80      	pop	{r7, pc}
	...

0801b55c <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 801b55c:	b580      	push	{r7, lr}
 801b55e:	b084      	sub	sp, #16
 801b560:	af00      	add	r7, sp, #0
 801b562:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801b564:	687b      	ldr	r3, [r7, #4]
 801b566:	4a1d      	ldr	r2, [pc, #116]	; (801b5dc <SUBGRF_CalibrateImage+0x80>)
 801b568:	4293      	cmp	r3, r2
 801b56a:	d904      	bls.n	801b576 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 801b56c:	23e1      	movs	r3, #225	; 0xe1
 801b56e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801b570:	23e9      	movs	r3, #233	; 0xe9
 801b572:	737b      	strb	r3, [r7, #13]
 801b574:	e027      	b.n	801b5c6 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 801b576:	687b      	ldr	r3, [r7, #4]
 801b578:	4a19      	ldr	r2, [pc, #100]	; (801b5e0 <SUBGRF_CalibrateImage+0x84>)
 801b57a:	4293      	cmp	r3, r2
 801b57c:	d904      	bls.n	801b588 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801b57e:	23d7      	movs	r3, #215	; 0xd7
 801b580:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801b582:	23db      	movs	r3, #219	; 0xdb
 801b584:	737b      	strb	r3, [r7, #13]
 801b586:	e01e      	b.n	801b5c6 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 801b588:	687b      	ldr	r3, [r7, #4]
 801b58a:	4a16      	ldr	r2, [pc, #88]	; (801b5e4 <SUBGRF_CalibrateImage+0x88>)
 801b58c:	4293      	cmp	r3, r2
 801b58e:	d904      	bls.n	801b59a <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801b590:	23c1      	movs	r3, #193	; 0xc1
 801b592:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 801b594:	23c5      	movs	r3, #197	; 0xc5
 801b596:	737b      	strb	r3, [r7, #13]
 801b598:	e015      	b.n	801b5c6 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 801b59a:	687b      	ldr	r3, [r7, #4]
 801b59c:	4a12      	ldr	r2, [pc, #72]	; (801b5e8 <SUBGRF_CalibrateImage+0x8c>)
 801b59e:	4293      	cmp	r3, r2
 801b5a0:	d904      	bls.n	801b5ac <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801b5a2:	2375      	movs	r3, #117	; 0x75
 801b5a4:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801b5a6:	2381      	movs	r3, #129	; 0x81
 801b5a8:	737b      	strb	r3, [r7, #13]
 801b5aa:	e00c      	b.n	801b5c6 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 801b5ac:	687b      	ldr	r3, [r7, #4]
 801b5ae:	4a0f      	ldr	r2, [pc, #60]	; (801b5ec <SUBGRF_CalibrateImage+0x90>)
 801b5b0:	4293      	cmp	r3, r2
 801b5b2:	d904      	bls.n	801b5be <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 801b5b4:	236b      	movs	r3, #107	; 0x6b
 801b5b6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801b5b8:	236f      	movs	r3, #111	; 0x6f
 801b5ba:	737b      	strb	r3, [r7, #13]
 801b5bc:	e003      	b.n	801b5c6 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 801b5be:	2329      	movs	r3, #41	; 0x29
 801b5c0:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 801b5c2:	232b      	movs	r3, #43	; 0x2b
 801b5c4:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801b5c6:	f107 030c 	add.w	r3, r7, #12
 801b5ca:	2202      	movs	r2, #2
 801b5cc:	4619      	mov	r1, r3
 801b5ce:	2098      	movs	r0, #152	; 0x98
 801b5d0:	f000 fc90 	bl	801bef4 <SUBGRF_WriteCommand>
}
 801b5d4:	bf00      	nop
 801b5d6:	3710      	adds	r7, #16
 801b5d8:	46bd      	mov	sp, r7
 801b5da:	bd80      	pop	{r7, pc}
 801b5dc:	35a4e900 	.word	0x35a4e900
 801b5e0:	32a9f880 	.word	0x32a9f880
 801b5e4:	2de54480 	.word	0x2de54480
 801b5e8:	1b6b0b00 	.word	0x1b6b0b00
 801b5ec:	1954fc40 	.word	0x1954fc40

0801b5f0 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801b5f0:	b590      	push	{r4, r7, lr}
 801b5f2:	b085      	sub	sp, #20
 801b5f4:	af00      	add	r7, sp, #0
 801b5f6:	4604      	mov	r4, r0
 801b5f8:	4608      	mov	r0, r1
 801b5fa:	4611      	mov	r1, r2
 801b5fc:	461a      	mov	r2, r3
 801b5fe:	4623      	mov	r3, r4
 801b600:	71fb      	strb	r3, [r7, #7]
 801b602:	4603      	mov	r3, r0
 801b604:	71bb      	strb	r3, [r7, #6]
 801b606:	460b      	mov	r3, r1
 801b608:	717b      	strb	r3, [r7, #5]
 801b60a:	4613      	mov	r3, r2
 801b60c:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801b60e:	79fb      	ldrb	r3, [r7, #7]
 801b610:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801b612:	79bb      	ldrb	r3, [r7, #6]
 801b614:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801b616:	797b      	ldrb	r3, [r7, #5]
 801b618:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801b61a:	793b      	ldrb	r3, [r7, #4]
 801b61c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801b61e:	f107 030c 	add.w	r3, r7, #12
 801b622:	2204      	movs	r2, #4
 801b624:	4619      	mov	r1, r3
 801b626:	2095      	movs	r0, #149	; 0x95
 801b628:	f000 fc64 	bl	801bef4 <SUBGRF_WriteCommand>
}
 801b62c:	bf00      	nop
 801b62e:	3714      	adds	r7, #20
 801b630:	46bd      	mov	sp, r7
 801b632:	bd90      	pop	{r4, r7, pc}

0801b634 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801b634:	b590      	push	{r4, r7, lr}
 801b636:	b085      	sub	sp, #20
 801b638:	af00      	add	r7, sp, #0
 801b63a:	4604      	mov	r4, r0
 801b63c:	4608      	mov	r0, r1
 801b63e:	4611      	mov	r1, r2
 801b640:	461a      	mov	r2, r3
 801b642:	4623      	mov	r3, r4
 801b644:	80fb      	strh	r3, [r7, #6]
 801b646:	4603      	mov	r3, r0
 801b648:	80bb      	strh	r3, [r7, #4]
 801b64a:	460b      	mov	r3, r1
 801b64c:	807b      	strh	r3, [r7, #2]
 801b64e:	4613      	mov	r3, r2
 801b650:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801b652:	88fb      	ldrh	r3, [r7, #6]
 801b654:	0a1b      	lsrs	r3, r3, #8
 801b656:	b29b      	uxth	r3, r3
 801b658:	b2db      	uxtb	r3, r3
 801b65a:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801b65c:	88fb      	ldrh	r3, [r7, #6]
 801b65e:	b2db      	uxtb	r3, r3
 801b660:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801b662:	88bb      	ldrh	r3, [r7, #4]
 801b664:	0a1b      	lsrs	r3, r3, #8
 801b666:	b29b      	uxth	r3, r3
 801b668:	b2db      	uxtb	r3, r3
 801b66a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801b66c:	88bb      	ldrh	r3, [r7, #4]
 801b66e:	b2db      	uxtb	r3, r3
 801b670:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801b672:	887b      	ldrh	r3, [r7, #2]
 801b674:	0a1b      	lsrs	r3, r3, #8
 801b676:	b29b      	uxth	r3, r3
 801b678:	b2db      	uxtb	r3, r3
 801b67a:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801b67c:	887b      	ldrh	r3, [r7, #2]
 801b67e:	b2db      	uxtb	r3, r3
 801b680:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801b682:	883b      	ldrh	r3, [r7, #0]
 801b684:	0a1b      	lsrs	r3, r3, #8
 801b686:	b29b      	uxth	r3, r3
 801b688:	b2db      	uxtb	r3, r3
 801b68a:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801b68c:	883b      	ldrh	r3, [r7, #0]
 801b68e:	b2db      	uxtb	r3, r3
 801b690:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801b692:	f107 0308 	add.w	r3, r7, #8
 801b696:	2208      	movs	r2, #8
 801b698:	4619      	mov	r1, r3
 801b69a:	2008      	movs	r0, #8
 801b69c:	f000 fc2a 	bl	801bef4 <SUBGRF_WriteCommand>
}
 801b6a0:	bf00      	nop
 801b6a2:	3714      	adds	r7, #20
 801b6a4:	46bd      	mov	sp, r7
 801b6a6:	bd90      	pop	{r4, r7, pc}

0801b6a8 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801b6a8:	b580      	push	{r7, lr}
 801b6aa:	b084      	sub	sp, #16
 801b6ac:	af00      	add	r7, sp, #0
 801b6ae:	4603      	mov	r3, r0
 801b6b0:	6039      	str	r1, [r7, #0]
 801b6b2:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 801b6b4:	79fb      	ldrb	r3, [r7, #7]
 801b6b6:	f003 0307 	and.w	r3, r3, #7
 801b6ba:	b2db      	uxtb	r3, r3
 801b6bc:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801b6be:	683b      	ldr	r3, [r7, #0]
 801b6c0:	0c1b      	lsrs	r3, r3, #16
 801b6c2:	b2db      	uxtb	r3, r3
 801b6c4:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801b6c6:	683b      	ldr	r3, [r7, #0]
 801b6c8:	0a1b      	lsrs	r3, r3, #8
 801b6ca:	b2db      	uxtb	r3, r3
 801b6cc:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801b6ce:	683b      	ldr	r3, [r7, #0]
 801b6d0:	b2db      	uxtb	r3, r3
 801b6d2:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801b6d4:	f107 030c 	add.w	r3, r7, #12
 801b6d8:	2204      	movs	r2, #4
 801b6da:	4619      	mov	r1, r3
 801b6dc:	2097      	movs	r0, #151	; 0x97
 801b6de:	f000 fc09 	bl	801bef4 <SUBGRF_WriteCommand>
}
 801b6e2:	bf00      	nop
 801b6e4:	3710      	adds	r7, #16
 801b6e6:	46bd      	mov	sp, r7
 801b6e8:	bd80      	pop	{r7, pc}
	...

0801b6ec <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801b6ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801b6f0:	b084      	sub	sp, #16
 801b6f2:	af00      	add	r7, sp, #0
 801b6f4:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801b6f6:	2300      	movs	r3, #0
 801b6f8:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801b6fa:	4b1d      	ldr	r3, [pc, #116]	; (801b770 <SUBGRF_SetRfFrequency+0x84>)
 801b6fc:	781b      	ldrb	r3, [r3, #0]
 801b6fe:	f083 0301 	eor.w	r3, r3, #1
 801b702:	b2db      	uxtb	r3, r3
 801b704:	2b00      	cmp	r3, #0
 801b706:	d005      	beq.n	801b714 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801b708:	6878      	ldr	r0, [r7, #4]
 801b70a:	f7ff ff27 	bl	801b55c <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801b70e:	4b18      	ldr	r3, [pc, #96]	; (801b770 <SUBGRF_SetRfFrequency+0x84>)
 801b710:	2201      	movs	r2, #1
 801b712:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801b714:	687b      	ldr	r3, [r7, #4]
 801b716:	2200      	movs	r2, #0
 801b718:	461c      	mov	r4, r3
 801b71a:	4615      	mov	r5, r2
 801b71c:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801b720:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801b724:	4a13      	ldr	r2, [pc, #76]	; (801b774 <SUBGRF_SetRfFrequency+0x88>)
 801b726:	f04f 0300 	mov.w	r3, #0
 801b72a:	4640      	mov	r0, r8
 801b72c:	4649      	mov	r1, r9
 801b72e:	f7e5 fa3b 	bl	8000ba8 <__aeabi_uldivmod>
 801b732:	4602      	mov	r2, r0
 801b734:	460b      	mov	r3, r1
 801b736:	4613      	mov	r3, r2
 801b738:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801b73a:	68fb      	ldr	r3, [r7, #12]
 801b73c:	0e1b      	lsrs	r3, r3, #24
 801b73e:	b2db      	uxtb	r3, r3
 801b740:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801b742:	68fb      	ldr	r3, [r7, #12]
 801b744:	0c1b      	lsrs	r3, r3, #16
 801b746:	b2db      	uxtb	r3, r3
 801b748:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801b74a:	68fb      	ldr	r3, [r7, #12]
 801b74c:	0a1b      	lsrs	r3, r3, #8
 801b74e:	b2db      	uxtb	r3, r3
 801b750:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801b752:	68fb      	ldr	r3, [r7, #12]
 801b754:	b2db      	uxtb	r3, r3
 801b756:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801b758:	f107 0308 	add.w	r3, r7, #8
 801b75c:	2204      	movs	r2, #4
 801b75e:	4619      	mov	r1, r3
 801b760:	2086      	movs	r0, #134	; 0x86
 801b762:	f000 fbc7 	bl	801bef4 <SUBGRF_WriteCommand>
}
 801b766:	bf00      	nop
 801b768:	3710      	adds	r7, #16
 801b76a:	46bd      	mov	sp, r7
 801b76c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801b770:	20001c7c 	.word	0x20001c7c
 801b774:	01e84800 	.word	0x01e84800

0801b778 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801b778:	b580      	push	{r7, lr}
 801b77a:	b082      	sub	sp, #8
 801b77c:	af00      	add	r7, sp, #0
 801b77e:	4603      	mov	r3, r0
 801b780:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801b782:	79fa      	ldrb	r2, [r7, #7]
 801b784:	4b09      	ldr	r3, [pc, #36]	; (801b7ac <SUBGRF_SetPacketType+0x34>)
 801b786:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801b788:	79fb      	ldrb	r3, [r7, #7]
 801b78a:	2b00      	cmp	r3, #0
 801b78c:	d104      	bne.n	801b798 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801b78e:	2100      	movs	r1, #0
 801b790:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801b794:	f000 fafe 	bl	801bd94 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801b798:	1dfb      	adds	r3, r7, #7
 801b79a:	2201      	movs	r2, #1
 801b79c:	4619      	mov	r1, r3
 801b79e:	208a      	movs	r0, #138	; 0x8a
 801b7a0:	f000 fba8 	bl	801bef4 <SUBGRF_WriteCommand>
}
 801b7a4:	bf00      	nop
 801b7a6:	3708      	adds	r7, #8
 801b7a8:	46bd      	mov	sp, r7
 801b7aa:	bd80      	pop	{r7, pc}
 801b7ac:	20001c75 	.word	0x20001c75

0801b7b0 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801b7b0:	b480      	push	{r7}
 801b7b2:	af00      	add	r7, sp, #0
    return PacketType;
 801b7b4:	4b02      	ldr	r3, [pc, #8]	; (801b7c0 <SUBGRF_GetPacketType+0x10>)
 801b7b6:	781b      	ldrb	r3, [r3, #0]
}
 801b7b8:	4618      	mov	r0, r3
 801b7ba:	46bd      	mov	sp, r7
 801b7bc:	bc80      	pop	{r7}
 801b7be:	4770      	bx	lr
 801b7c0:	20001c75 	.word	0x20001c75

0801b7c4 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 801b7c4:	b580      	push	{r7, lr}
 801b7c6:	b084      	sub	sp, #16
 801b7c8:	af00      	add	r7, sp, #0
 801b7ca:	4603      	mov	r3, r0
 801b7cc:	71fb      	strb	r3, [r7, #7]
 801b7ce:	460b      	mov	r3, r1
 801b7d0:	71bb      	strb	r3, [r7, #6]
 801b7d2:	4613      	mov	r3, r2
 801b7d4:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 801b7d6:	79fb      	ldrb	r3, [r7, #7]
 801b7d8:	2b01      	cmp	r3, #1
 801b7da:	d149      	bne.n	801b870 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801b7dc:	2000      	movs	r0, #0
 801b7de:	f7ef fb5b 	bl	800ae98 <RBI_GetRFOMaxPowerConfig>
 801b7e2:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 801b7e4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b7e8:	68fa      	ldr	r2, [r7, #12]
 801b7ea:	429a      	cmp	r2, r3
 801b7ec:	da01      	bge.n	801b7f2 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801b7ee:	68fb      	ldr	r3, [r7, #12]
 801b7f0:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 801b7f2:	68fb      	ldr	r3, [r7, #12]
 801b7f4:	2b0e      	cmp	r3, #14
 801b7f6:	d10e      	bne.n	801b816 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801b7f8:	2301      	movs	r3, #1
 801b7fa:	2201      	movs	r2, #1
 801b7fc:	2100      	movs	r1, #0
 801b7fe:	2004      	movs	r0, #4
 801b800:	f7ff fef6 	bl	801b5f0 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801b804:	79ba      	ldrb	r2, [r7, #6]
 801b806:	68fb      	ldr	r3, [r7, #12]
 801b808:	b2db      	uxtb	r3, r3
 801b80a:	1ad3      	subs	r3, r2, r3
 801b80c:	b2db      	uxtb	r3, r3
 801b80e:	330e      	adds	r3, #14
 801b810:	b2db      	uxtb	r3, r3
 801b812:	71bb      	strb	r3, [r7, #6]
 801b814:	e01f      	b.n	801b856 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 801b816:	68fb      	ldr	r3, [r7, #12]
 801b818:	2b0a      	cmp	r3, #10
 801b81a:	d10e      	bne.n	801b83a <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801b81c:	2301      	movs	r3, #1
 801b81e:	2201      	movs	r2, #1
 801b820:	2100      	movs	r1, #0
 801b822:	2001      	movs	r0, #1
 801b824:	f7ff fee4 	bl	801b5f0 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801b828:	79ba      	ldrb	r2, [r7, #6]
 801b82a:	68fb      	ldr	r3, [r7, #12]
 801b82c:	b2db      	uxtb	r3, r3
 801b82e:	1ad3      	subs	r3, r2, r3
 801b830:	b2db      	uxtb	r3, r3
 801b832:	330d      	adds	r3, #13
 801b834:	b2db      	uxtb	r3, r3
 801b836:	71bb      	strb	r3, [r7, #6]
 801b838:	e00d      	b.n	801b856 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 801b83a:	2301      	movs	r3, #1
 801b83c:	2201      	movs	r2, #1
 801b83e:	2100      	movs	r1, #0
 801b840:	2007      	movs	r0, #7
 801b842:	f7ff fed5 	bl	801b5f0 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801b846:	79ba      	ldrb	r2, [r7, #6]
 801b848:	68fb      	ldr	r3, [r7, #12]
 801b84a:	b2db      	uxtb	r3, r3
 801b84c:	1ad3      	subs	r3, r2, r3
 801b84e:	b2db      	uxtb	r3, r3
 801b850:	330e      	adds	r3, #14
 801b852:	b2db      	uxtb	r3, r3
 801b854:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801b856:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b85a:	f113 0f11 	cmn.w	r3, #17
 801b85e:	da01      	bge.n	801b864 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 801b860:	23ef      	movs	r3, #239	; 0xef
 801b862:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801b864:	2118      	movs	r1, #24
 801b866:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801b86a:	f000 fa93 	bl	801bd94 <SUBGRF_WriteRegister>
 801b86e:	e067      	b.n	801b940 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801b870:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801b874:	f000 faa2 	bl	801bdbc <SUBGRF_ReadRegister>
 801b878:	4603      	mov	r3, r0
 801b87a:	f043 031e 	orr.w	r3, r3, #30
 801b87e:	b2db      	uxtb	r3, r3
 801b880:	4619      	mov	r1, r3
 801b882:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801b886:	f000 fa85 	bl	801bd94 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801b88a:	2001      	movs	r0, #1
 801b88c:	f7ef fb04 	bl	800ae98 <RBI_GetRFOMaxPowerConfig>
 801b890:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801b892:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b896:	68fa      	ldr	r2, [r7, #12]
 801b898:	429a      	cmp	r2, r3
 801b89a:	da01      	bge.n	801b8a0 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 801b89c:	68fb      	ldr	r3, [r7, #12]
 801b89e:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801b8a0:	68fb      	ldr	r3, [r7, #12]
 801b8a2:	2b14      	cmp	r3, #20
 801b8a4:	d10e      	bne.n	801b8c4 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801b8a6:	2301      	movs	r3, #1
 801b8a8:	2200      	movs	r2, #0
 801b8aa:	2105      	movs	r1, #5
 801b8ac:	2003      	movs	r0, #3
 801b8ae:	f7ff fe9f 	bl	801b5f0 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801b8b2:	79ba      	ldrb	r2, [r7, #6]
 801b8b4:	68fb      	ldr	r3, [r7, #12]
 801b8b6:	b2db      	uxtb	r3, r3
 801b8b8:	1ad3      	subs	r3, r2, r3
 801b8ba:	b2db      	uxtb	r3, r3
 801b8bc:	3316      	adds	r3, #22
 801b8be:	b2db      	uxtb	r3, r3
 801b8c0:	71bb      	strb	r3, [r7, #6]
 801b8c2:	e031      	b.n	801b928 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 801b8c4:	68fb      	ldr	r3, [r7, #12]
 801b8c6:	2b11      	cmp	r3, #17
 801b8c8:	d10e      	bne.n	801b8e8 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801b8ca:	2301      	movs	r3, #1
 801b8cc:	2200      	movs	r2, #0
 801b8ce:	2103      	movs	r1, #3
 801b8d0:	2002      	movs	r0, #2
 801b8d2:	f7ff fe8d 	bl	801b5f0 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801b8d6:	79ba      	ldrb	r2, [r7, #6]
 801b8d8:	68fb      	ldr	r3, [r7, #12]
 801b8da:	b2db      	uxtb	r3, r3
 801b8dc:	1ad3      	subs	r3, r2, r3
 801b8de:	b2db      	uxtb	r3, r3
 801b8e0:	3316      	adds	r3, #22
 801b8e2:	b2db      	uxtb	r3, r3
 801b8e4:	71bb      	strb	r3, [r7, #6]
 801b8e6:	e01f      	b.n	801b928 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 801b8e8:	68fb      	ldr	r3, [r7, #12]
 801b8ea:	2b0e      	cmp	r3, #14
 801b8ec:	d10e      	bne.n	801b90c <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801b8ee:	2301      	movs	r3, #1
 801b8f0:	2200      	movs	r2, #0
 801b8f2:	2102      	movs	r1, #2
 801b8f4:	2002      	movs	r0, #2
 801b8f6:	f7ff fe7b 	bl	801b5f0 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801b8fa:	79ba      	ldrb	r2, [r7, #6]
 801b8fc:	68fb      	ldr	r3, [r7, #12]
 801b8fe:	b2db      	uxtb	r3, r3
 801b900:	1ad3      	subs	r3, r2, r3
 801b902:	b2db      	uxtb	r3, r3
 801b904:	330e      	adds	r3, #14
 801b906:	b2db      	uxtb	r3, r3
 801b908:	71bb      	strb	r3, [r7, #6]
 801b90a:	e00d      	b.n	801b928 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801b90c:	2301      	movs	r3, #1
 801b90e:	2200      	movs	r2, #0
 801b910:	2107      	movs	r1, #7
 801b912:	2004      	movs	r0, #4
 801b914:	f7ff fe6c 	bl	801b5f0 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801b918:	79ba      	ldrb	r2, [r7, #6]
 801b91a:	68fb      	ldr	r3, [r7, #12]
 801b91c:	b2db      	uxtb	r3, r3
 801b91e:	1ad3      	subs	r3, r2, r3
 801b920:	b2db      	uxtb	r3, r3
 801b922:	3316      	adds	r3, #22
 801b924:	b2db      	uxtb	r3, r3
 801b926:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 801b928:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b92c:	f113 0f09 	cmn.w	r3, #9
 801b930:	da01      	bge.n	801b936 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 801b932:	23f7      	movs	r3, #247	; 0xf7
 801b934:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801b936:	2138      	movs	r1, #56	; 0x38
 801b938:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801b93c:	f000 fa2a 	bl	801bd94 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801b940:	79bb      	ldrb	r3, [r7, #6]
 801b942:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 801b944:	797b      	ldrb	r3, [r7, #5]
 801b946:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801b948:	f107 0308 	add.w	r3, r7, #8
 801b94c:	2202      	movs	r2, #2
 801b94e:	4619      	mov	r1, r3
 801b950:	208e      	movs	r0, #142	; 0x8e
 801b952:	f000 facf 	bl	801bef4 <SUBGRF_WriteCommand>
}
 801b956:	bf00      	nop
 801b958:	3710      	adds	r7, #16
 801b95a:	46bd      	mov	sp, r7
 801b95c:	bd80      	pop	{r7, pc}
	...

0801b960 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801b960:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801b964:	b086      	sub	sp, #24
 801b966:	af00      	add	r7, sp, #0
 801b968:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801b96a:	2300      	movs	r3, #0
 801b96c:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801b96e:	4a61      	ldr	r2, [pc, #388]	; (801baf4 <SUBGRF_SetModulationParams+0x194>)
 801b970:	f107 0308 	add.w	r3, r7, #8
 801b974:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b978:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801b97c:	687b      	ldr	r3, [r7, #4]
 801b97e:	781a      	ldrb	r2, [r3, #0]
 801b980:	4b5d      	ldr	r3, [pc, #372]	; (801baf8 <SUBGRF_SetModulationParams+0x198>)
 801b982:	781b      	ldrb	r3, [r3, #0]
 801b984:	429a      	cmp	r2, r3
 801b986:	d004      	beq.n	801b992 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801b988:	687b      	ldr	r3, [r7, #4]
 801b98a:	781b      	ldrb	r3, [r3, #0]
 801b98c:	4618      	mov	r0, r3
 801b98e:	f7ff fef3 	bl	801b778 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801b992:	687b      	ldr	r3, [r7, #4]
 801b994:	781b      	ldrb	r3, [r3, #0]
 801b996:	2b03      	cmp	r3, #3
 801b998:	f200 80a5 	bhi.w	801bae6 <SUBGRF_SetModulationParams+0x186>
 801b99c:	a201      	add	r2, pc, #4	; (adr r2, 801b9a4 <SUBGRF_SetModulationParams+0x44>)
 801b99e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b9a2:	bf00      	nop
 801b9a4:	0801b9b5 	.word	0x0801b9b5
 801b9a8:	0801ba75 	.word	0x0801ba75
 801b9ac:	0801ba37 	.word	0x0801ba37
 801b9b0:	0801baa3 	.word	0x0801baa3
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801b9b4:	2308      	movs	r3, #8
 801b9b6:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801b9b8:	687b      	ldr	r3, [r7, #4]
 801b9ba:	685b      	ldr	r3, [r3, #4]
 801b9bc:	4a4f      	ldr	r2, [pc, #316]	; (801bafc <SUBGRF_SetModulationParams+0x19c>)
 801b9be:	fbb2 f3f3 	udiv	r3, r2, r3
 801b9c2:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801b9c4:	697b      	ldr	r3, [r7, #20]
 801b9c6:	0c1b      	lsrs	r3, r3, #16
 801b9c8:	b2db      	uxtb	r3, r3
 801b9ca:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801b9cc:	697b      	ldr	r3, [r7, #20]
 801b9ce:	0a1b      	lsrs	r3, r3, #8
 801b9d0:	b2db      	uxtb	r3, r3
 801b9d2:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801b9d4:	697b      	ldr	r3, [r7, #20]
 801b9d6:	b2db      	uxtb	r3, r3
 801b9d8:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801b9da:	687b      	ldr	r3, [r7, #4]
 801b9dc:	7b1b      	ldrb	r3, [r3, #12]
 801b9de:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801b9e0:	687b      	ldr	r3, [r7, #4]
 801b9e2:	7b5b      	ldrb	r3, [r3, #13]
 801b9e4:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801b9e6:	687b      	ldr	r3, [r7, #4]
 801b9e8:	689b      	ldr	r3, [r3, #8]
 801b9ea:	2200      	movs	r2, #0
 801b9ec:	461c      	mov	r4, r3
 801b9ee:	4615      	mov	r5, r2
 801b9f0:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801b9f4:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801b9f8:	4a41      	ldr	r2, [pc, #260]	; (801bb00 <SUBGRF_SetModulationParams+0x1a0>)
 801b9fa:	f04f 0300 	mov.w	r3, #0
 801b9fe:	4640      	mov	r0, r8
 801ba00:	4649      	mov	r1, r9
 801ba02:	f7e5 f8d1 	bl	8000ba8 <__aeabi_uldivmod>
 801ba06:	4602      	mov	r2, r0
 801ba08:	460b      	mov	r3, r1
 801ba0a:	4613      	mov	r3, r2
 801ba0c:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801ba0e:	697b      	ldr	r3, [r7, #20]
 801ba10:	0c1b      	lsrs	r3, r3, #16
 801ba12:	b2db      	uxtb	r3, r3
 801ba14:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801ba16:	697b      	ldr	r3, [r7, #20]
 801ba18:	0a1b      	lsrs	r3, r3, #8
 801ba1a:	b2db      	uxtb	r3, r3
 801ba1c:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801ba1e:	697b      	ldr	r3, [r7, #20]
 801ba20:	b2db      	uxtb	r3, r3
 801ba22:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801ba24:	7cfb      	ldrb	r3, [r7, #19]
 801ba26:	b29a      	uxth	r2, r3
 801ba28:	f107 0308 	add.w	r3, r7, #8
 801ba2c:	4619      	mov	r1, r3
 801ba2e:	208b      	movs	r0, #139	; 0x8b
 801ba30:	f000 fa60 	bl	801bef4 <SUBGRF_WriteCommand>
        break;
 801ba34:	e058      	b.n	801bae8 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 801ba36:	2304      	movs	r3, #4
 801ba38:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801ba3a:	687b      	ldr	r3, [r7, #4]
 801ba3c:	691b      	ldr	r3, [r3, #16]
 801ba3e:	4a2f      	ldr	r2, [pc, #188]	; (801bafc <SUBGRF_SetModulationParams+0x19c>)
 801ba40:	fbb2 f3f3 	udiv	r3, r2, r3
 801ba44:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801ba46:	697b      	ldr	r3, [r7, #20]
 801ba48:	0c1b      	lsrs	r3, r3, #16
 801ba4a:	b2db      	uxtb	r3, r3
 801ba4c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801ba4e:	697b      	ldr	r3, [r7, #20]
 801ba50:	0a1b      	lsrs	r3, r3, #8
 801ba52:	b2db      	uxtb	r3, r3
 801ba54:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801ba56:	697b      	ldr	r3, [r7, #20]
 801ba58:	b2db      	uxtb	r3, r3
 801ba5a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801ba5c:	687b      	ldr	r3, [r7, #4]
 801ba5e:	7d1b      	ldrb	r3, [r3, #20]
 801ba60:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801ba62:	7cfb      	ldrb	r3, [r7, #19]
 801ba64:	b29a      	uxth	r2, r3
 801ba66:	f107 0308 	add.w	r3, r7, #8
 801ba6a:	4619      	mov	r1, r3
 801ba6c:	208b      	movs	r0, #139	; 0x8b
 801ba6e:	f000 fa41 	bl	801bef4 <SUBGRF_WriteCommand>
        break;
 801ba72:	e039      	b.n	801bae8 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 801ba74:	2304      	movs	r3, #4
 801ba76:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801ba78:	687b      	ldr	r3, [r7, #4]
 801ba7a:	7e1b      	ldrb	r3, [r3, #24]
 801ba7c:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801ba7e:	687b      	ldr	r3, [r7, #4]
 801ba80:	7e5b      	ldrb	r3, [r3, #25]
 801ba82:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801ba84:	687b      	ldr	r3, [r7, #4]
 801ba86:	7e9b      	ldrb	r3, [r3, #26]
 801ba88:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801ba8a:	687b      	ldr	r3, [r7, #4]
 801ba8c:	7edb      	ldrb	r3, [r3, #27]
 801ba8e:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801ba90:	7cfb      	ldrb	r3, [r7, #19]
 801ba92:	b29a      	uxth	r2, r3
 801ba94:	f107 0308 	add.w	r3, r7, #8
 801ba98:	4619      	mov	r1, r3
 801ba9a:	208b      	movs	r0, #139	; 0x8b
 801ba9c:	f000 fa2a 	bl	801bef4 <SUBGRF_WriteCommand>

        break;
 801baa0:	e022      	b.n	801bae8 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 801baa2:	2305      	movs	r3, #5
 801baa4:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801baa6:	687b      	ldr	r3, [r7, #4]
 801baa8:	685b      	ldr	r3, [r3, #4]
 801baaa:	4a14      	ldr	r2, [pc, #80]	; (801bafc <SUBGRF_SetModulationParams+0x19c>)
 801baac:	fbb2 f3f3 	udiv	r3, r2, r3
 801bab0:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801bab2:	697b      	ldr	r3, [r7, #20]
 801bab4:	0c1b      	lsrs	r3, r3, #16
 801bab6:	b2db      	uxtb	r3, r3
 801bab8:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801baba:	697b      	ldr	r3, [r7, #20]
 801babc:	0a1b      	lsrs	r3, r3, #8
 801babe:	b2db      	uxtb	r3, r3
 801bac0:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801bac2:	697b      	ldr	r3, [r7, #20]
 801bac4:	b2db      	uxtb	r3, r3
 801bac6:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801bac8:	687b      	ldr	r3, [r7, #4]
 801baca:	7b1b      	ldrb	r3, [r3, #12]
 801bacc:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801bace:	687b      	ldr	r3, [r7, #4]
 801bad0:	7b5b      	ldrb	r3, [r3, #13]
 801bad2:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801bad4:	7cfb      	ldrb	r3, [r7, #19]
 801bad6:	b29a      	uxth	r2, r3
 801bad8:	f107 0308 	add.w	r3, r7, #8
 801badc:	4619      	mov	r1, r3
 801bade:	208b      	movs	r0, #139	; 0x8b
 801bae0:	f000 fa08 	bl	801bef4 <SUBGRF_WriteCommand>
        break;
 801bae4:	e000      	b.n	801bae8 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 801bae6:	bf00      	nop
    }
}
 801bae8:	bf00      	nop
 801baea:	3718      	adds	r7, #24
 801baec:	46bd      	mov	sp, r7
 801baee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801baf2:	bf00      	nop
 801baf4:	0801e478 	.word	0x0801e478
 801baf8:	20001c75 	.word	0x20001c75
 801bafc:	3d090000 	.word	0x3d090000
 801bb00:	01e84800 	.word	0x01e84800

0801bb04 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801bb04:	b580      	push	{r7, lr}
 801bb06:	b086      	sub	sp, #24
 801bb08:	af00      	add	r7, sp, #0
 801bb0a:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801bb0c:	2300      	movs	r3, #0
 801bb0e:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801bb10:	4a48      	ldr	r2, [pc, #288]	; (801bc34 <SUBGRF_SetPacketParams+0x130>)
 801bb12:	f107 030c 	add.w	r3, r7, #12
 801bb16:	ca07      	ldmia	r2, {r0, r1, r2}
 801bb18:	c303      	stmia	r3!, {r0, r1}
 801bb1a:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801bb1c:	687b      	ldr	r3, [r7, #4]
 801bb1e:	781a      	ldrb	r2, [r3, #0]
 801bb20:	4b45      	ldr	r3, [pc, #276]	; (801bc38 <SUBGRF_SetPacketParams+0x134>)
 801bb22:	781b      	ldrb	r3, [r3, #0]
 801bb24:	429a      	cmp	r2, r3
 801bb26:	d004      	beq.n	801bb32 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801bb28:	687b      	ldr	r3, [r7, #4]
 801bb2a:	781b      	ldrb	r3, [r3, #0]
 801bb2c:	4618      	mov	r0, r3
 801bb2e:	f7ff fe23 	bl	801b778 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801bb32:	687b      	ldr	r3, [r7, #4]
 801bb34:	781b      	ldrb	r3, [r3, #0]
 801bb36:	2b03      	cmp	r3, #3
 801bb38:	d878      	bhi.n	801bc2c <SUBGRF_SetPacketParams+0x128>
 801bb3a:	a201      	add	r2, pc, #4	; (adr r2, 801bb40 <SUBGRF_SetPacketParams+0x3c>)
 801bb3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bb40:	0801bb51 	.word	0x0801bb51
 801bb44:	0801bbe1 	.word	0x0801bbe1
 801bb48:	0801bbd5 	.word	0x0801bbd5
 801bb4c:	0801bb51 	.word	0x0801bb51
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801bb50:	687b      	ldr	r3, [r7, #4]
 801bb52:	7a5b      	ldrb	r3, [r3, #9]
 801bb54:	2bf1      	cmp	r3, #241	; 0xf1
 801bb56:	d10a      	bne.n	801bb6e <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801bb58:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801bb5c:	f7ff faaa 	bl	801b0b4 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801bb60:	f248 0005 	movw	r0, #32773	; 0x8005
 801bb64:	f7ff fac6 	bl	801b0f4 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801bb68:	2302      	movs	r3, #2
 801bb6a:	75bb      	strb	r3, [r7, #22]
 801bb6c:	e011      	b.n	801bb92 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801bb6e:	687b      	ldr	r3, [r7, #4]
 801bb70:	7a5b      	ldrb	r3, [r3, #9]
 801bb72:	2bf2      	cmp	r3, #242	; 0xf2
 801bb74:	d10a      	bne.n	801bb8c <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801bb76:	f641 500f 	movw	r0, #7439	; 0x1d0f
 801bb7a:	f7ff fa9b 	bl	801b0b4 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801bb7e:	f241 0021 	movw	r0, #4129	; 0x1021
 801bb82:	f7ff fab7 	bl	801b0f4 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801bb86:	2306      	movs	r3, #6
 801bb88:	75bb      	strb	r3, [r7, #22]
 801bb8a:	e002      	b.n	801bb92 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801bb8c:	687b      	ldr	r3, [r7, #4]
 801bb8e:	7a5b      	ldrb	r3, [r3, #9]
 801bb90:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801bb92:	2309      	movs	r3, #9
 801bb94:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801bb96:	687b      	ldr	r3, [r7, #4]
 801bb98:	885b      	ldrh	r3, [r3, #2]
 801bb9a:	0a1b      	lsrs	r3, r3, #8
 801bb9c:	b29b      	uxth	r3, r3
 801bb9e:	b2db      	uxtb	r3, r3
 801bba0:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801bba2:	687b      	ldr	r3, [r7, #4]
 801bba4:	885b      	ldrh	r3, [r3, #2]
 801bba6:	b2db      	uxtb	r3, r3
 801bba8:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801bbaa:	687b      	ldr	r3, [r7, #4]
 801bbac:	791b      	ldrb	r3, [r3, #4]
 801bbae:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801bbb0:	687b      	ldr	r3, [r7, #4]
 801bbb2:	795b      	ldrb	r3, [r3, #5]
 801bbb4:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801bbb6:	687b      	ldr	r3, [r7, #4]
 801bbb8:	799b      	ldrb	r3, [r3, #6]
 801bbba:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801bbbc:	687b      	ldr	r3, [r7, #4]
 801bbbe:	79db      	ldrb	r3, [r3, #7]
 801bbc0:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801bbc2:	687b      	ldr	r3, [r7, #4]
 801bbc4:	7a1b      	ldrb	r3, [r3, #8]
 801bbc6:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801bbc8:	7dbb      	ldrb	r3, [r7, #22]
 801bbca:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801bbcc:	687b      	ldr	r3, [r7, #4]
 801bbce:	7a9b      	ldrb	r3, [r3, #10]
 801bbd0:	753b      	strb	r3, [r7, #20]
        break;
 801bbd2:	e022      	b.n	801bc1a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801bbd4:	2301      	movs	r3, #1
 801bbd6:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801bbd8:	687b      	ldr	r3, [r7, #4]
 801bbda:	7b1b      	ldrb	r3, [r3, #12]
 801bbdc:	733b      	strb	r3, [r7, #12]
        break;
 801bbde:	e01c      	b.n	801bc1a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801bbe0:	2306      	movs	r3, #6
 801bbe2:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801bbe4:	687b      	ldr	r3, [r7, #4]
 801bbe6:	89db      	ldrh	r3, [r3, #14]
 801bbe8:	0a1b      	lsrs	r3, r3, #8
 801bbea:	b29b      	uxth	r3, r3
 801bbec:	b2db      	uxtb	r3, r3
 801bbee:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801bbf0:	687b      	ldr	r3, [r7, #4]
 801bbf2:	89db      	ldrh	r3, [r3, #14]
 801bbf4:	b2db      	uxtb	r3, r3
 801bbf6:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801bbf8:	687b      	ldr	r3, [r7, #4]
 801bbfa:	7c1a      	ldrb	r2, [r3, #16]
 801bbfc:	4b0f      	ldr	r3, [pc, #60]	; (801bc3c <SUBGRF_SetPacketParams+0x138>)
 801bbfe:	4611      	mov	r1, r2
 801bc00:	7019      	strb	r1, [r3, #0]
 801bc02:	4613      	mov	r3, r2
 801bc04:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801bc06:	687b      	ldr	r3, [r7, #4]
 801bc08:	7c5b      	ldrb	r3, [r3, #17]
 801bc0a:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801bc0c:	687b      	ldr	r3, [r7, #4]
 801bc0e:	7c9b      	ldrb	r3, [r3, #18]
 801bc10:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801bc12:	687b      	ldr	r3, [r7, #4]
 801bc14:	7cdb      	ldrb	r3, [r3, #19]
 801bc16:	747b      	strb	r3, [r7, #17]
        break;
 801bc18:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801bc1a:	7dfb      	ldrb	r3, [r7, #23]
 801bc1c:	b29a      	uxth	r2, r3
 801bc1e:	f107 030c 	add.w	r3, r7, #12
 801bc22:	4619      	mov	r1, r3
 801bc24:	208c      	movs	r0, #140	; 0x8c
 801bc26:	f000 f965 	bl	801bef4 <SUBGRF_WriteCommand>
 801bc2a:	e000      	b.n	801bc2e <SUBGRF_SetPacketParams+0x12a>
        return;
 801bc2c:	bf00      	nop
}
 801bc2e:	3718      	adds	r7, #24
 801bc30:	46bd      	mov	sp, r7
 801bc32:	bd80      	pop	{r7, pc}
 801bc34:	0801e480 	.word	0x0801e480
 801bc38:	20001c75 	.word	0x20001c75
 801bc3c:	20001c76 	.word	0x20001c76

0801bc40 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801bc40:	b580      	push	{r7, lr}
 801bc42:	b084      	sub	sp, #16
 801bc44:	af00      	add	r7, sp, #0
 801bc46:	4603      	mov	r3, r0
 801bc48:	460a      	mov	r2, r1
 801bc4a:	71fb      	strb	r3, [r7, #7]
 801bc4c:	4613      	mov	r3, r2
 801bc4e:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801bc50:	79fb      	ldrb	r3, [r7, #7]
 801bc52:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801bc54:	79bb      	ldrb	r3, [r7, #6]
 801bc56:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801bc58:	f107 030c 	add.w	r3, r7, #12
 801bc5c:	2202      	movs	r2, #2
 801bc5e:	4619      	mov	r1, r3
 801bc60:	208f      	movs	r0, #143	; 0x8f
 801bc62:	f000 f947 	bl	801bef4 <SUBGRF_WriteCommand>
}
 801bc66:	bf00      	nop
 801bc68:	3710      	adds	r7, #16
 801bc6a:	46bd      	mov	sp, r7
 801bc6c:	bd80      	pop	{r7, pc}

0801bc6e <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801bc6e:	b580      	push	{r7, lr}
 801bc70:	b082      	sub	sp, #8
 801bc72:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801bc74:	2300      	movs	r3, #0
 801bc76:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801bc78:	1d3b      	adds	r3, r7, #4
 801bc7a:	2201      	movs	r2, #1
 801bc7c:	4619      	mov	r1, r3
 801bc7e:	2015      	movs	r0, #21
 801bc80:	f000 f95a 	bl	801bf38 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801bc84:	793b      	ldrb	r3, [r7, #4]
 801bc86:	425b      	negs	r3, r3
 801bc88:	105b      	asrs	r3, r3, #1
 801bc8a:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801bc8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801bc90:	4618      	mov	r0, r3
 801bc92:	3708      	adds	r7, #8
 801bc94:	46bd      	mov	sp, r7
 801bc96:	bd80      	pop	{r7, pc}

0801bc98 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801bc98:	b580      	push	{r7, lr}
 801bc9a:	b084      	sub	sp, #16
 801bc9c:	af00      	add	r7, sp, #0
 801bc9e:	6078      	str	r0, [r7, #4]
 801bca0:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801bca2:	f107 030c 	add.w	r3, r7, #12
 801bca6:	2202      	movs	r2, #2
 801bca8:	4619      	mov	r1, r3
 801bcaa:	2013      	movs	r0, #19
 801bcac:	f000 f944 	bl	801bf38 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801bcb0:	f7ff fd7e 	bl	801b7b0 <SUBGRF_GetPacketType>
 801bcb4:	4603      	mov	r3, r0
 801bcb6:	2b01      	cmp	r3, #1
 801bcb8:	d10d      	bne.n	801bcd6 <SUBGRF_GetRxBufferStatus+0x3e>
 801bcba:	4b0c      	ldr	r3, [pc, #48]	; (801bcec <SUBGRF_GetRxBufferStatus+0x54>)
 801bcbc:	781b      	ldrb	r3, [r3, #0]
 801bcbe:	b2db      	uxtb	r3, r3
 801bcc0:	2b01      	cmp	r3, #1
 801bcc2:	d108      	bne.n	801bcd6 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801bcc4:	f240 7002 	movw	r0, #1794	; 0x702
 801bcc8:	f000 f878 	bl	801bdbc <SUBGRF_ReadRegister>
 801bccc:	4603      	mov	r3, r0
 801bcce:	461a      	mov	r2, r3
 801bcd0:	687b      	ldr	r3, [r7, #4]
 801bcd2:	701a      	strb	r2, [r3, #0]
 801bcd4:	e002      	b.n	801bcdc <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801bcd6:	7b3a      	ldrb	r2, [r7, #12]
 801bcd8:	687b      	ldr	r3, [r7, #4]
 801bcda:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801bcdc:	7b7a      	ldrb	r2, [r7, #13]
 801bcde:	683b      	ldr	r3, [r7, #0]
 801bce0:	701a      	strb	r2, [r3, #0]
}
 801bce2:	bf00      	nop
 801bce4:	3710      	adds	r7, #16
 801bce6:	46bd      	mov	sp, r7
 801bce8:	bd80      	pop	{r7, pc}
 801bcea:	bf00      	nop
 801bcec:	20001c76 	.word	0x20001c76

0801bcf0 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801bcf0:	b580      	push	{r7, lr}
 801bcf2:	b084      	sub	sp, #16
 801bcf4:	af00      	add	r7, sp, #0
 801bcf6:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801bcf8:	f107 030c 	add.w	r3, r7, #12
 801bcfc:	2203      	movs	r2, #3
 801bcfe:	4619      	mov	r1, r3
 801bd00:	2014      	movs	r0, #20
 801bd02:	f000 f919 	bl	801bf38 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801bd06:	f7ff fd53 	bl	801b7b0 <SUBGRF_GetPacketType>
 801bd0a:	4603      	mov	r3, r0
 801bd0c:	461a      	mov	r2, r3
 801bd0e:	687b      	ldr	r3, [r7, #4]
 801bd10:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801bd12:	687b      	ldr	r3, [r7, #4]
 801bd14:	781b      	ldrb	r3, [r3, #0]
 801bd16:	2b00      	cmp	r3, #0
 801bd18:	d002      	beq.n	801bd20 <SUBGRF_GetPacketStatus+0x30>
 801bd1a:	2b01      	cmp	r3, #1
 801bd1c:	d013      	beq.n	801bd46 <SUBGRF_GetPacketStatus+0x56>
 801bd1e:	e02a      	b.n	801bd76 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801bd20:	7b3a      	ldrb	r2, [r7, #12]
 801bd22:	687b      	ldr	r3, [r7, #4]
 801bd24:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801bd26:	7b7b      	ldrb	r3, [r7, #13]
 801bd28:	425b      	negs	r3, r3
 801bd2a:	105b      	asrs	r3, r3, #1
 801bd2c:	b25a      	sxtb	r2, r3
 801bd2e:	687b      	ldr	r3, [r7, #4]
 801bd30:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801bd32:	7bbb      	ldrb	r3, [r7, #14]
 801bd34:	425b      	negs	r3, r3
 801bd36:	105b      	asrs	r3, r3, #1
 801bd38:	b25a      	sxtb	r2, r3
 801bd3a:	687b      	ldr	r3, [r7, #4]
 801bd3c:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801bd3e:	687b      	ldr	r3, [r7, #4]
 801bd40:	2200      	movs	r2, #0
 801bd42:	609a      	str	r2, [r3, #8]
            break;
 801bd44:	e020      	b.n	801bd88 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801bd46:	7b3b      	ldrb	r3, [r7, #12]
 801bd48:	425b      	negs	r3, r3
 801bd4a:	105b      	asrs	r3, r3, #1
 801bd4c:	b25a      	sxtb	r2, r3
 801bd4e:	687b      	ldr	r3, [r7, #4]
 801bd50:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801bd52:	7b7b      	ldrb	r3, [r7, #13]
 801bd54:	b25b      	sxtb	r3, r3
 801bd56:	3302      	adds	r3, #2
 801bd58:	109b      	asrs	r3, r3, #2
 801bd5a:	b25a      	sxtb	r2, r3
 801bd5c:	687b      	ldr	r3, [r7, #4]
 801bd5e:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801bd60:	7bbb      	ldrb	r3, [r7, #14]
 801bd62:	425b      	negs	r3, r3
 801bd64:	105b      	asrs	r3, r3, #1
 801bd66:	b25a      	sxtb	r2, r3
 801bd68:	687b      	ldr	r3, [r7, #4]
 801bd6a:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801bd6c:	4b08      	ldr	r3, [pc, #32]	; (801bd90 <SUBGRF_GetPacketStatus+0xa0>)
 801bd6e:	681a      	ldr	r2, [r3, #0]
 801bd70:	687b      	ldr	r3, [r7, #4]
 801bd72:	611a      	str	r2, [r3, #16]
            break;
 801bd74:	e008      	b.n	801bd88 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801bd76:	2214      	movs	r2, #20
 801bd78:	2100      	movs	r1, #0
 801bd7a:	6878      	ldr	r0, [r7, #4]
 801bd7c:	f000 fc03 	bl	801c586 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801bd80:	687b      	ldr	r3, [r7, #4]
 801bd82:	220f      	movs	r2, #15
 801bd84:	701a      	strb	r2, [r3, #0]
            break;
 801bd86:	bf00      	nop
    }
}
 801bd88:	bf00      	nop
 801bd8a:	3710      	adds	r7, #16
 801bd8c:	46bd      	mov	sp, r7
 801bd8e:	bd80      	pop	{r7, pc}
 801bd90:	20001c78 	.word	0x20001c78

0801bd94 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801bd94:	b580      	push	{r7, lr}
 801bd96:	b082      	sub	sp, #8
 801bd98:	af00      	add	r7, sp, #0
 801bd9a:	4603      	mov	r3, r0
 801bd9c:	460a      	mov	r2, r1
 801bd9e:	80fb      	strh	r3, [r7, #6]
 801bda0:	4613      	mov	r3, r2
 801bda2:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801bda4:	1d7a      	adds	r2, r7, #5
 801bda6:	88f9      	ldrh	r1, [r7, #6]
 801bda8:	2301      	movs	r3, #1
 801bdaa:	4803      	ldr	r0, [pc, #12]	; (801bdb8 <SUBGRF_WriteRegister+0x24>)
 801bdac:	f7eb fc48 	bl	8007640 <HAL_SUBGHZ_WriteRegisters>
}
 801bdb0:	bf00      	nop
 801bdb2:	3708      	adds	r7, #8
 801bdb4:	46bd      	mov	sp, r7
 801bdb6:	bd80      	pop	{r7, pc}
 801bdb8:	200002bc 	.word	0x200002bc

0801bdbc <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801bdbc:	b580      	push	{r7, lr}
 801bdbe:	b084      	sub	sp, #16
 801bdc0:	af00      	add	r7, sp, #0
 801bdc2:	4603      	mov	r3, r0
 801bdc4:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801bdc6:	f107 020f 	add.w	r2, r7, #15
 801bdca:	88f9      	ldrh	r1, [r7, #6]
 801bdcc:	2301      	movs	r3, #1
 801bdce:	4804      	ldr	r0, [pc, #16]	; (801bde0 <SUBGRF_ReadRegister+0x24>)
 801bdd0:	f7eb fc95 	bl	80076fe <HAL_SUBGHZ_ReadRegisters>
    return data;
 801bdd4:	7bfb      	ldrb	r3, [r7, #15]
}
 801bdd6:	4618      	mov	r0, r3
 801bdd8:	3710      	adds	r7, #16
 801bdda:	46bd      	mov	sp, r7
 801bddc:	bd80      	pop	{r7, pc}
 801bdde:	bf00      	nop
 801bde0:	200002bc 	.word	0x200002bc

0801bde4 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801bde4:	b580      	push	{r7, lr}
 801bde6:	b086      	sub	sp, #24
 801bde8:	af00      	add	r7, sp, #0
 801bdea:	4603      	mov	r3, r0
 801bdec:	6039      	str	r1, [r7, #0]
 801bdee:	80fb      	strh	r3, [r7, #6]
 801bdf0:	4613      	mov	r3, r2
 801bdf2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bdf4:	f3ef 8310 	mrs	r3, PRIMASK
 801bdf8:	60fb      	str	r3, [r7, #12]
  return(result);
 801bdfa:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801bdfc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bdfe:	b672      	cpsid	i
}
 801be00:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801be02:	88bb      	ldrh	r3, [r7, #4]
 801be04:	88f9      	ldrh	r1, [r7, #6]
 801be06:	683a      	ldr	r2, [r7, #0]
 801be08:	4806      	ldr	r0, [pc, #24]	; (801be24 <SUBGRF_WriteRegisters+0x40>)
 801be0a:	f7eb fc19 	bl	8007640 <HAL_SUBGHZ_WriteRegisters>
 801be0e:	697b      	ldr	r3, [r7, #20]
 801be10:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801be12:	693b      	ldr	r3, [r7, #16]
 801be14:	f383 8810 	msr	PRIMASK, r3
}
 801be18:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801be1a:	bf00      	nop
 801be1c:	3718      	adds	r7, #24
 801be1e:	46bd      	mov	sp, r7
 801be20:	bd80      	pop	{r7, pc}
 801be22:	bf00      	nop
 801be24:	200002bc 	.word	0x200002bc

0801be28 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801be28:	b580      	push	{r7, lr}
 801be2a:	b086      	sub	sp, #24
 801be2c:	af00      	add	r7, sp, #0
 801be2e:	4603      	mov	r3, r0
 801be30:	6039      	str	r1, [r7, #0]
 801be32:	80fb      	strh	r3, [r7, #6]
 801be34:	4613      	mov	r3, r2
 801be36:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801be38:	f3ef 8310 	mrs	r3, PRIMASK
 801be3c:	60fb      	str	r3, [r7, #12]
  return(result);
 801be3e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801be40:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801be42:	b672      	cpsid	i
}
 801be44:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801be46:	88bb      	ldrh	r3, [r7, #4]
 801be48:	88f9      	ldrh	r1, [r7, #6]
 801be4a:	683a      	ldr	r2, [r7, #0]
 801be4c:	4806      	ldr	r0, [pc, #24]	; (801be68 <SUBGRF_ReadRegisters+0x40>)
 801be4e:	f7eb fc56 	bl	80076fe <HAL_SUBGHZ_ReadRegisters>
 801be52:	697b      	ldr	r3, [r7, #20]
 801be54:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801be56:	693b      	ldr	r3, [r7, #16]
 801be58:	f383 8810 	msr	PRIMASK, r3
}
 801be5c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801be5e:	bf00      	nop
 801be60:	3718      	adds	r7, #24
 801be62:	46bd      	mov	sp, r7
 801be64:	bd80      	pop	{r7, pc}
 801be66:	bf00      	nop
 801be68:	200002bc 	.word	0x200002bc

0801be6c <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801be6c:	b580      	push	{r7, lr}
 801be6e:	b086      	sub	sp, #24
 801be70:	af00      	add	r7, sp, #0
 801be72:	4603      	mov	r3, r0
 801be74:	6039      	str	r1, [r7, #0]
 801be76:	71fb      	strb	r3, [r7, #7]
 801be78:	4613      	mov	r3, r2
 801be7a:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801be7c:	f3ef 8310 	mrs	r3, PRIMASK
 801be80:	60fb      	str	r3, [r7, #12]
  return(result);
 801be82:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801be84:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801be86:	b672      	cpsid	i
}
 801be88:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801be8a:	79bb      	ldrb	r3, [r7, #6]
 801be8c:	b29b      	uxth	r3, r3
 801be8e:	79f9      	ldrb	r1, [r7, #7]
 801be90:	683a      	ldr	r2, [r7, #0]
 801be92:	4806      	ldr	r0, [pc, #24]	; (801beac <SUBGRF_WriteBuffer+0x40>)
 801be94:	f7eb fd47 	bl	8007926 <HAL_SUBGHZ_WriteBuffer>
 801be98:	697b      	ldr	r3, [r7, #20]
 801be9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801be9c:	693b      	ldr	r3, [r7, #16]
 801be9e:	f383 8810 	msr	PRIMASK, r3
}
 801bea2:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801bea4:	bf00      	nop
 801bea6:	3718      	adds	r7, #24
 801bea8:	46bd      	mov	sp, r7
 801beaa:	bd80      	pop	{r7, pc}
 801beac:	200002bc 	.word	0x200002bc

0801beb0 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801beb0:	b580      	push	{r7, lr}
 801beb2:	b086      	sub	sp, #24
 801beb4:	af00      	add	r7, sp, #0
 801beb6:	4603      	mov	r3, r0
 801beb8:	6039      	str	r1, [r7, #0]
 801beba:	71fb      	strb	r3, [r7, #7]
 801bebc:	4613      	mov	r3, r2
 801bebe:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bec0:	f3ef 8310 	mrs	r3, PRIMASK
 801bec4:	60fb      	str	r3, [r7, #12]
  return(result);
 801bec6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801bec8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801beca:	b672      	cpsid	i
}
 801becc:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801bece:	79bb      	ldrb	r3, [r7, #6]
 801bed0:	b29b      	uxth	r3, r3
 801bed2:	79f9      	ldrb	r1, [r7, #7]
 801bed4:	683a      	ldr	r2, [r7, #0]
 801bed6:	4806      	ldr	r0, [pc, #24]	; (801bef0 <SUBGRF_ReadBuffer+0x40>)
 801bed8:	f7eb fd78 	bl	80079cc <HAL_SUBGHZ_ReadBuffer>
 801bedc:	697b      	ldr	r3, [r7, #20]
 801bede:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bee0:	693b      	ldr	r3, [r7, #16]
 801bee2:	f383 8810 	msr	PRIMASK, r3
}
 801bee6:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801bee8:	bf00      	nop
 801beea:	3718      	adds	r7, #24
 801beec:	46bd      	mov	sp, r7
 801beee:	bd80      	pop	{r7, pc}
 801bef0:	200002bc 	.word	0x200002bc

0801bef4 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801bef4:	b580      	push	{r7, lr}
 801bef6:	b086      	sub	sp, #24
 801bef8:	af00      	add	r7, sp, #0
 801befa:	4603      	mov	r3, r0
 801befc:	6039      	str	r1, [r7, #0]
 801befe:	71fb      	strb	r3, [r7, #7]
 801bf00:	4613      	mov	r3, r2
 801bf02:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bf04:	f3ef 8310 	mrs	r3, PRIMASK
 801bf08:	60fb      	str	r3, [r7, #12]
  return(result);
 801bf0a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801bf0c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bf0e:	b672      	cpsid	i
}
 801bf10:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801bf12:	88bb      	ldrh	r3, [r7, #4]
 801bf14:	79f9      	ldrb	r1, [r7, #7]
 801bf16:	683a      	ldr	r2, [r7, #0]
 801bf18:	4806      	ldr	r0, [pc, #24]	; (801bf34 <SUBGRF_WriteCommand+0x40>)
 801bf1a:	f7eb fc51 	bl	80077c0 <HAL_SUBGHZ_ExecSetCmd>
 801bf1e:	697b      	ldr	r3, [r7, #20]
 801bf20:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bf22:	693b      	ldr	r3, [r7, #16]
 801bf24:	f383 8810 	msr	PRIMASK, r3
}
 801bf28:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801bf2a:	bf00      	nop
 801bf2c:	3718      	adds	r7, #24
 801bf2e:	46bd      	mov	sp, r7
 801bf30:	bd80      	pop	{r7, pc}
 801bf32:	bf00      	nop
 801bf34:	200002bc 	.word	0x200002bc

0801bf38 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801bf38:	b580      	push	{r7, lr}
 801bf3a:	b086      	sub	sp, #24
 801bf3c:	af00      	add	r7, sp, #0
 801bf3e:	4603      	mov	r3, r0
 801bf40:	6039      	str	r1, [r7, #0]
 801bf42:	71fb      	strb	r3, [r7, #7]
 801bf44:	4613      	mov	r3, r2
 801bf46:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bf48:	f3ef 8310 	mrs	r3, PRIMASK
 801bf4c:	60fb      	str	r3, [r7, #12]
  return(result);
 801bf4e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801bf50:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bf52:	b672      	cpsid	i
}
 801bf54:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801bf56:	88bb      	ldrh	r3, [r7, #4]
 801bf58:	79f9      	ldrb	r1, [r7, #7]
 801bf5a:	683a      	ldr	r2, [r7, #0]
 801bf5c:	4806      	ldr	r0, [pc, #24]	; (801bf78 <SUBGRF_ReadCommand+0x40>)
 801bf5e:	f7eb fc8e 	bl	800787e <HAL_SUBGHZ_ExecGetCmd>
 801bf62:	697b      	ldr	r3, [r7, #20]
 801bf64:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bf66:	693b      	ldr	r3, [r7, #16]
 801bf68:	f383 8810 	msr	PRIMASK, r3
}
 801bf6c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801bf6e:	bf00      	nop
 801bf70:	3718      	adds	r7, #24
 801bf72:	46bd      	mov	sp, r7
 801bf74:	bd80      	pop	{r7, pc}
 801bf76:	bf00      	nop
 801bf78:	200002bc 	.word	0x200002bc

0801bf7c <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801bf7c:	b580      	push	{r7, lr}
 801bf7e:	b084      	sub	sp, #16
 801bf80:	af00      	add	r7, sp, #0
 801bf82:	4603      	mov	r3, r0
 801bf84:	460a      	mov	r2, r1
 801bf86:	71fb      	strb	r3, [r7, #7]
 801bf88:	4613      	mov	r3, r2
 801bf8a:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801bf8c:	2301      	movs	r3, #1
 801bf8e:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801bf90:	79bb      	ldrb	r3, [r7, #6]
 801bf92:	2b01      	cmp	r3, #1
 801bf94:	d10d      	bne.n	801bfb2 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801bf96:	79fb      	ldrb	r3, [r7, #7]
 801bf98:	2b01      	cmp	r3, #1
 801bf9a:	d104      	bne.n	801bfa6 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801bf9c:	2302      	movs	r3, #2
 801bf9e:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801bfa0:	2004      	movs	r0, #4
 801bfa2:	f000 f8ef 	bl	801c184 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801bfa6:	79fb      	ldrb	r3, [r7, #7]
 801bfa8:	2b02      	cmp	r3, #2
 801bfaa:	d107      	bne.n	801bfbc <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801bfac:	2303      	movs	r3, #3
 801bfae:	73fb      	strb	r3, [r7, #15]
 801bfb0:	e004      	b.n	801bfbc <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801bfb2:	79bb      	ldrb	r3, [r7, #6]
 801bfb4:	2b00      	cmp	r3, #0
 801bfb6:	d101      	bne.n	801bfbc <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801bfb8:	2301      	movs	r3, #1
 801bfba:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801bfbc:	7bfb      	ldrb	r3, [r7, #15]
 801bfbe:	4618      	mov	r0, r3
 801bfc0:	f7ee ff47 	bl	800ae52 <RBI_ConfigRFSwitch>
}
 801bfc4:	bf00      	nop
 801bfc6:	3710      	adds	r7, #16
 801bfc8:	46bd      	mov	sp, r7
 801bfca:	bd80      	pop	{r7, pc}

0801bfcc <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801bfcc:	b580      	push	{r7, lr}
 801bfce:	b084      	sub	sp, #16
 801bfd0:	af00      	add	r7, sp, #0
 801bfd2:	4603      	mov	r3, r0
 801bfd4:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801bfd6:	2301      	movs	r3, #1
 801bfd8:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801bfda:	f7ee ff48 	bl	800ae6e <RBI_GetTxConfig>
 801bfde:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801bfe0:	68bb      	ldr	r3, [r7, #8]
 801bfe2:	2b02      	cmp	r3, #2
 801bfe4:	d016      	beq.n	801c014 <SUBGRF_SetRfTxPower+0x48>
 801bfe6:	68bb      	ldr	r3, [r7, #8]
 801bfe8:	2b02      	cmp	r3, #2
 801bfea:	dc16      	bgt.n	801c01a <SUBGRF_SetRfTxPower+0x4e>
 801bfec:	68bb      	ldr	r3, [r7, #8]
 801bfee:	2b00      	cmp	r3, #0
 801bff0:	d003      	beq.n	801bffa <SUBGRF_SetRfTxPower+0x2e>
 801bff2:	68bb      	ldr	r3, [r7, #8]
 801bff4:	2b01      	cmp	r3, #1
 801bff6:	d00a      	beq.n	801c00e <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801bff8:	e00f      	b.n	801c01a <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801bffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bffe:	2b0f      	cmp	r3, #15
 801c000:	dd02      	ble.n	801c008 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801c002:	2302      	movs	r3, #2
 801c004:	73fb      	strb	r3, [r7, #15]
            break;
 801c006:	e009      	b.n	801c01c <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801c008:	2301      	movs	r3, #1
 801c00a:	73fb      	strb	r3, [r7, #15]
            break;
 801c00c:	e006      	b.n	801c01c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801c00e:	2301      	movs	r3, #1
 801c010:	73fb      	strb	r3, [r7, #15]
            break;
 801c012:	e003      	b.n	801c01c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801c014:	2302      	movs	r3, #2
 801c016:	73fb      	strb	r3, [r7, #15]
            break;
 801c018:	e000      	b.n	801c01c <SUBGRF_SetRfTxPower+0x50>
            break;
 801c01a:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801c01c:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801c020:	7bfb      	ldrb	r3, [r7, #15]
 801c022:	2202      	movs	r2, #2
 801c024:	4618      	mov	r0, r3
 801c026:	f7ff fbcd 	bl	801b7c4 <SUBGRF_SetTxParams>

    return paSelect;
 801c02a:	7bfb      	ldrb	r3, [r7, #15]
}
 801c02c:	4618      	mov	r0, r3
 801c02e:	3710      	adds	r7, #16
 801c030:	46bd      	mov	sp, r7
 801c032:	bd80      	pop	{r7, pc}

0801c034 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801c034:	b480      	push	{r7}
 801c036:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801c038:	2301      	movs	r3, #1
}
 801c03a:	4618      	mov	r0, r3
 801c03c:	46bd      	mov	sp, r7
 801c03e:	bc80      	pop	{r7}
 801c040:	4770      	bx	lr
	...

0801c044 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c044:	b580      	push	{r7, lr}
 801c046:	b082      	sub	sp, #8
 801c048:	af00      	add	r7, sp, #0
 801c04a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801c04c:	4b03      	ldr	r3, [pc, #12]	; (801c05c <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801c04e:	681b      	ldr	r3, [r3, #0]
 801c050:	2001      	movs	r0, #1
 801c052:	4798      	blx	r3
}
 801c054:	bf00      	nop
 801c056:	3708      	adds	r7, #8
 801c058:	46bd      	mov	sp, r7
 801c05a:	bd80      	pop	{r7, pc}
 801c05c:	20001c80 	.word	0x20001c80

0801c060 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c060:	b580      	push	{r7, lr}
 801c062:	b082      	sub	sp, #8
 801c064:	af00      	add	r7, sp, #0
 801c066:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801c068:	4b03      	ldr	r3, [pc, #12]	; (801c078 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801c06a:	681b      	ldr	r3, [r3, #0]
 801c06c:	2002      	movs	r0, #2
 801c06e:	4798      	blx	r3
}
 801c070:	bf00      	nop
 801c072:	3708      	adds	r7, #8
 801c074:	46bd      	mov	sp, r7
 801c076:	bd80      	pop	{r7, pc}
 801c078:	20001c80 	.word	0x20001c80

0801c07c <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801c07c:	b580      	push	{r7, lr}
 801c07e:	b082      	sub	sp, #8
 801c080:	af00      	add	r7, sp, #0
 801c082:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801c084:	4b03      	ldr	r3, [pc, #12]	; (801c094 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801c086:	681b      	ldr	r3, [r3, #0]
 801c088:	2040      	movs	r0, #64	; 0x40
 801c08a:	4798      	blx	r3
}
 801c08c:	bf00      	nop
 801c08e:	3708      	adds	r7, #8
 801c090:	46bd      	mov	sp, r7
 801c092:	bd80      	pop	{r7, pc}
 801c094:	20001c80 	.word	0x20001c80

0801c098 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801c098:	b580      	push	{r7, lr}
 801c09a:	b082      	sub	sp, #8
 801c09c:	af00      	add	r7, sp, #0
 801c09e:	6078      	str	r0, [r7, #4]
 801c0a0:	460b      	mov	r3, r1
 801c0a2:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801c0a4:	78fb      	ldrb	r3, [r7, #3]
 801c0a6:	2b00      	cmp	r3, #0
 801c0a8:	d002      	beq.n	801c0b0 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801c0aa:	2b01      	cmp	r3, #1
 801c0ac:	d005      	beq.n	801c0ba <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801c0ae:	e00a      	b.n	801c0c6 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801c0b0:	4b07      	ldr	r3, [pc, #28]	; (801c0d0 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801c0b2:	681b      	ldr	r3, [r3, #0]
 801c0b4:	2080      	movs	r0, #128	; 0x80
 801c0b6:	4798      	blx	r3
            break;
 801c0b8:	e005      	b.n	801c0c6 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801c0ba:	4b05      	ldr	r3, [pc, #20]	; (801c0d0 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801c0bc:	681b      	ldr	r3, [r3, #0]
 801c0be:	f44f 7080 	mov.w	r0, #256	; 0x100
 801c0c2:	4798      	blx	r3
            break;
 801c0c4:	bf00      	nop
    }
}
 801c0c6:	bf00      	nop
 801c0c8:	3708      	adds	r7, #8
 801c0ca:	46bd      	mov	sp, r7
 801c0cc:	bd80      	pop	{r7, pc}
 801c0ce:	bf00      	nop
 801c0d0:	20001c80 	.word	0x20001c80

0801c0d4 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c0d4:	b580      	push	{r7, lr}
 801c0d6:	b082      	sub	sp, #8
 801c0d8:	af00      	add	r7, sp, #0
 801c0da:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801c0dc:	4b04      	ldr	r3, [pc, #16]	; (801c0f0 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801c0de:	681b      	ldr	r3, [r3, #0]
 801c0e0:	f44f 7000 	mov.w	r0, #512	; 0x200
 801c0e4:	4798      	blx	r3
}
 801c0e6:	bf00      	nop
 801c0e8:	3708      	adds	r7, #8
 801c0ea:	46bd      	mov	sp, r7
 801c0ec:	bd80      	pop	{r7, pc}
 801c0ee:	bf00      	nop
 801c0f0:	20001c80 	.word	0x20001c80

0801c0f4 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c0f4:	b580      	push	{r7, lr}
 801c0f6:	b082      	sub	sp, #8
 801c0f8:	af00      	add	r7, sp, #0
 801c0fa:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801c0fc:	4b03      	ldr	r3, [pc, #12]	; (801c10c <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801c0fe:	681b      	ldr	r3, [r3, #0]
 801c100:	2020      	movs	r0, #32
 801c102:	4798      	blx	r3
}
 801c104:	bf00      	nop
 801c106:	3708      	adds	r7, #8
 801c108:	46bd      	mov	sp, r7
 801c10a:	bd80      	pop	{r7, pc}
 801c10c:	20001c80 	.word	0x20001c80

0801c110 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c110:	b580      	push	{r7, lr}
 801c112:	b082      	sub	sp, #8
 801c114:	af00      	add	r7, sp, #0
 801c116:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801c118:	4b03      	ldr	r3, [pc, #12]	; (801c128 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801c11a:	681b      	ldr	r3, [r3, #0]
 801c11c:	2004      	movs	r0, #4
 801c11e:	4798      	blx	r3
}
 801c120:	bf00      	nop
 801c122:	3708      	adds	r7, #8
 801c124:	46bd      	mov	sp, r7
 801c126:	bd80      	pop	{r7, pc}
 801c128:	20001c80 	.word	0x20001c80

0801c12c <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c12c:	b580      	push	{r7, lr}
 801c12e:	b082      	sub	sp, #8
 801c130:	af00      	add	r7, sp, #0
 801c132:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801c134:	4b03      	ldr	r3, [pc, #12]	; (801c144 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801c136:	681b      	ldr	r3, [r3, #0]
 801c138:	2008      	movs	r0, #8
 801c13a:	4798      	blx	r3
}
 801c13c:	bf00      	nop
 801c13e:	3708      	adds	r7, #8
 801c140:	46bd      	mov	sp, r7
 801c142:	bd80      	pop	{r7, pc}
 801c144:	20001c80 	.word	0x20001c80

0801c148 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c148:	b580      	push	{r7, lr}
 801c14a:	b082      	sub	sp, #8
 801c14c:	af00      	add	r7, sp, #0
 801c14e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801c150:	4b03      	ldr	r3, [pc, #12]	; (801c160 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801c152:	681b      	ldr	r3, [r3, #0]
 801c154:	2010      	movs	r0, #16
 801c156:	4798      	blx	r3
}
 801c158:	bf00      	nop
 801c15a:	3708      	adds	r7, #8
 801c15c:	46bd      	mov	sp, r7
 801c15e:	bd80      	pop	{r7, pc}
 801c160:	20001c80 	.word	0x20001c80

0801c164 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c164:	b580      	push	{r7, lr}
 801c166:	b082      	sub	sp, #8
 801c168:	af00      	add	r7, sp, #0
 801c16a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 801c16c:	4b04      	ldr	r3, [pc, #16]	; (801c180 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 801c16e:	681b      	ldr	r3, [r3, #0]
 801c170:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 801c174:	4798      	blx	r3
}
 801c176:	bf00      	nop
 801c178:	3708      	adds	r7, #8
 801c17a:	46bd      	mov	sp, r7
 801c17c:	bd80      	pop	{r7, pc}
 801c17e:	bf00      	nop
 801c180:	20001c80 	.word	0x20001c80

0801c184 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801c184:	b580      	push	{r7, lr}
 801c186:	b084      	sub	sp, #16
 801c188:	af00      	add	r7, sp, #0
 801c18a:	4603      	mov	r3, r0
 801c18c:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801c18e:	f7ee fe7c 	bl	800ae8a <RBI_IsDCDC>
 801c192:	4603      	mov	r3, r0
 801c194:	2b01      	cmp	r3, #1
 801c196:	d112      	bne.n	801c1be <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801c198:	f640 1023 	movw	r0, #2339	; 0x923
 801c19c:	f7ff fe0e 	bl	801bdbc <SUBGRF_ReadRegister>
 801c1a0:	4603      	mov	r3, r0
 801c1a2:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801c1a4:	7bfb      	ldrb	r3, [r7, #15]
 801c1a6:	f023 0306 	bic.w	r3, r3, #6
 801c1aa:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801c1ac:	7bfa      	ldrb	r2, [r7, #15]
 801c1ae:	79fb      	ldrb	r3, [r7, #7]
 801c1b0:	4313      	orrs	r3, r2
 801c1b2:	b2db      	uxtb	r3, r3
 801c1b4:	4619      	mov	r1, r3
 801c1b6:	f640 1023 	movw	r0, #2339	; 0x923
 801c1ba:	f7ff fdeb 	bl	801bd94 <SUBGRF_WriteRegister>
  }
}
 801c1be:	bf00      	nop
 801c1c0:	3710      	adds	r7, #16
 801c1c2:	46bd      	mov	sp, r7
 801c1c4:	bd80      	pop	{r7, pc}
	...

0801c1c8 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801c1c8:	b480      	push	{r7}
 801c1ca:	b085      	sub	sp, #20
 801c1cc:	af00      	add	r7, sp, #0
 801c1ce:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801c1d0:	687b      	ldr	r3, [r7, #4]
 801c1d2:	2b00      	cmp	r3, #0
 801c1d4:	d101      	bne.n	801c1da <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801c1d6:	231f      	movs	r3, #31
 801c1d8:	e016      	b.n	801c208 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801c1da:	2300      	movs	r3, #0
 801c1dc:	73fb      	strb	r3, [r7, #15]
 801c1de:	e00f      	b.n	801c200 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801c1e0:	7bfb      	ldrb	r3, [r7, #15]
 801c1e2:	4a0c      	ldr	r2, [pc, #48]	; (801c214 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801c1e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801c1e8:	687a      	ldr	r2, [r7, #4]
 801c1ea:	429a      	cmp	r2, r3
 801c1ec:	d205      	bcs.n	801c1fa <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801c1ee:	7bfb      	ldrb	r3, [r7, #15]
 801c1f0:	4a08      	ldr	r2, [pc, #32]	; (801c214 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801c1f2:	00db      	lsls	r3, r3, #3
 801c1f4:	4413      	add	r3, r2
 801c1f6:	791b      	ldrb	r3, [r3, #4]
 801c1f8:	e006      	b.n	801c208 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801c1fa:	7bfb      	ldrb	r3, [r7, #15]
 801c1fc:	3301      	adds	r3, #1
 801c1fe:	73fb      	strb	r3, [r7, #15]
 801c200:	7bfb      	ldrb	r3, [r7, #15]
 801c202:	2b15      	cmp	r3, #21
 801c204:	d9ec      	bls.n	801c1e0 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 801c206:	e7fe      	b.n	801c206 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801c208:	4618      	mov	r0, r3
 801c20a:	3714      	adds	r7, #20
 801c20c:	46bd      	mov	sp, r7
 801c20e:	bc80      	pop	{r7}
 801c210:	4770      	bx	lr
 801c212:	bf00      	nop
 801c214:	0801eaf4 	.word	0x0801eaf4

0801c218 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801c218:	b580      	push	{r7, lr}
 801c21a:	b08a      	sub	sp, #40	; 0x28
 801c21c:	af00      	add	r7, sp, #0
 801c21e:	6078      	str	r0, [r7, #4]
 801c220:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801c222:	4b35      	ldr	r3, [pc, #212]	; (801c2f8 <SUBGRF_GetCFO+0xe0>)
 801c224:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801c226:	f640 0007 	movw	r0, #2055	; 0x807
 801c22a:	f7ff fdc7 	bl	801bdbc <SUBGRF_ReadRegister>
 801c22e:	4603      	mov	r3, r0
 801c230:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801c232:	7ffb      	ldrb	r3, [r7, #31]
 801c234:	08db      	lsrs	r3, r3, #3
 801c236:	b2db      	uxtb	r3, r3
 801c238:	f003 0303 	and.w	r3, r3, #3
 801c23c:	3328      	adds	r3, #40	; 0x28
 801c23e:	443b      	add	r3, r7
 801c240:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801c244:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801c246:	7ffb      	ldrb	r3, [r7, #31]
 801c248:	f003 0307 	and.w	r3, r3, #7
 801c24c:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 801c24e:	7fba      	ldrb	r2, [r7, #30]
 801c250:	7f7b      	ldrb	r3, [r7, #29]
 801c252:	3301      	adds	r3, #1
 801c254:	fa02 f303 	lsl.w	r3, r2, r3
 801c258:	461a      	mov	r2, r3
 801c25a:	4b28      	ldr	r3, [pc, #160]	; (801c2fc <SUBGRF_GetCFO+0xe4>)
 801c25c:	fbb3 f3f2 	udiv	r3, r3, r2
 801c260:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801c262:	69ba      	ldr	r2, [r7, #24]
 801c264:	687b      	ldr	r3, [r7, #4]
 801c266:	fbb2 f3f3 	udiv	r3, r2, r3
 801c26a:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801c26c:	2301      	movs	r3, #1
 801c26e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801c272:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c276:	697a      	ldr	r2, [r7, #20]
 801c278:	fb02 f303 	mul.w	r3, r2, r3
 801c27c:	2b07      	cmp	r3, #7
 801c27e:	d802      	bhi.n	801c286 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801c280:	2302      	movs	r3, #2
 801c282:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 801c286:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c28a:	697a      	ldr	r2, [r7, #20]
 801c28c:	fb02 f303 	mul.w	r3, r2, r3
 801c290:	2b03      	cmp	r3, #3
 801c292:	d802      	bhi.n	801c29a <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801c294:	2304      	movs	r3, #4
 801c296:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801c29a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801c29e:	69bb      	ldr	r3, [r7, #24]
 801c2a0:	fb02 f303 	mul.w	r3, r2, r3
 801c2a4:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801c2a6:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 801c2aa:	f7ff fd87 	bl	801bdbc <SUBGRF_ReadRegister>
 801c2ae:	4603      	mov	r3, r0
 801c2b0:	021b      	lsls	r3, r3, #8
 801c2b2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801c2b6:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801c2b8:	f240 60b1 	movw	r0, #1713	; 0x6b1
 801c2bc:	f7ff fd7e 	bl	801bdbc <SUBGRF_ReadRegister>
 801c2c0:	4603      	mov	r3, r0
 801c2c2:	461a      	mov	r2, r3
 801c2c4:	6a3b      	ldr	r3, [r7, #32]
 801c2c6:	4313      	orrs	r3, r2
 801c2c8:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801c2ca:	6a3b      	ldr	r3, [r7, #32]
 801c2cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801c2d0:	2b00      	cmp	r3, #0
 801c2d2:	d005      	beq.n	801c2e0 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801c2d4:	6a3b      	ldr	r3, [r7, #32]
 801c2d6:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801c2da:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801c2de:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801c2e0:	693b      	ldr	r3, [r7, #16]
 801c2e2:	095b      	lsrs	r3, r3, #5
 801c2e4:	6a3a      	ldr	r2, [r7, #32]
 801c2e6:	fb02 f303 	mul.w	r3, r2, r3
 801c2ea:	11da      	asrs	r2, r3, #7
 801c2ec:	683b      	ldr	r3, [r7, #0]
 801c2ee:	601a      	str	r2, [r3, #0]
}
 801c2f0:	bf00      	nop
 801c2f2:	3728      	adds	r7, #40	; 0x28
 801c2f4:	46bd      	mov	sp, r7
 801c2f6:	bd80      	pop	{r7, pc}
 801c2f8:	0c0a0804 	.word	0x0c0a0804
 801c2fc:	01e84800 	.word	0x01e84800

0801c300 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 801c300:	b480      	push	{r7}
 801c302:	b087      	sub	sp, #28
 801c304:	af00      	add	r7, sp, #0
 801c306:	4603      	mov	r3, r0
 801c308:	60b9      	str	r1, [r7, #8]
 801c30a:	607a      	str	r2, [r7, #4]
 801c30c:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 801c30e:	2300      	movs	r3, #0
 801c310:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 801c312:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c316:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801c318:	697b      	ldr	r3, [r7, #20]
}
 801c31a:	4618      	mov	r0, r3
 801c31c:	371c      	adds	r7, #28
 801c31e:	46bd      	mov	sp, r7
 801c320:	bc80      	pop	{r7}
 801c322:	4770      	bx	lr

0801c324 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 801c324:	b480      	push	{r7}
 801c326:	b087      	sub	sp, #28
 801c328:	af00      	add	r7, sp, #0
 801c32a:	4603      	mov	r3, r0
 801c32c:	60b9      	str	r1, [r7, #8]
 801c32e:	607a      	str	r2, [r7, #4]
 801c330:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 801c332:	2300      	movs	r3, #0
 801c334:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 801c336:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c33a:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801c33c:	697b      	ldr	r3, [r7, #20]
}
 801c33e:	4618      	mov	r0, r3
 801c340:	371c      	adds	r7, #28
 801c342:	46bd      	mov	sp, r7
 801c344:	bc80      	pop	{r7}
 801c346:	4770      	bx	lr

0801c348 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 801c348:	b480      	push	{r7}
 801c34a:	b085      	sub	sp, #20
 801c34c:	af00      	add	r7, sp, #0
 801c34e:	60f8      	str	r0, [r7, #12]
 801c350:	60b9      	str	r1, [r7, #8]
 801c352:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 801c354:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 801c358:	4618      	mov	r0, r3
 801c35a:	3714      	adds	r7, #20
 801c35c:	46bd      	mov	sp, r7
 801c35e:	bc80      	pop	{r7}
 801c360:	4770      	bx	lr

0801c362 <RFW_DeInit>:

void RFW_DeInit( void )
{
 801c362:	b480      	push	{r7}
 801c364:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 801c366:	bf00      	nop
 801c368:	46bd      	mov	sp, r7
 801c36a:	bc80      	pop	{r7}
 801c36c:	4770      	bx	lr

0801c36e <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 801c36e:	b480      	push	{r7}
 801c370:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 801c372:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801c374:	4618      	mov	r0, r3
 801c376:	46bd      	mov	sp, r7
 801c378:	bc80      	pop	{r7}
 801c37a:	4770      	bx	lr

0801c37c <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 801c37c:	b480      	push	{r7}
 801c37e:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 801c380:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801c382:	4618      	mov	r0, r3
 801c384:	46bd      	mov	sp, r7
 801c386:	bc80      	pop	{r7}
 801c388:	4770      	bx	lr

0801c38a <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 801c38a:	b480      	push	{r7}
 801c38c:	b083      	sub	sp, #12
 801c38e:	af00      	add	r7, sp, #0
 801c390:	4603      	mov	r3, r0
 801c392:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 801c394:	bf00      	nop
 801c396:	370c      	adds	r7, #12
 801c398:	46bd      	mov	sp, r7
 801c39a:	bc80      	pop	{r7}
 801c39c:	4770      	bx	lr

0801c39e <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 801c39e:	b480      	push	{r7}
 801c3a0:	b087      	sub	sp, #28
 801c3a2:	af00      	add	r7, sp, #0
 801c3a4:	60f8      	str	r0, [r7, #12]
 801c3a6:	460b      	mov	r3, r1
 801c3a8:	607a      	str	r2, [r7, #4]
 801c3aa:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 801c3ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c3b0:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 801c3b2:	697b      	ldr	r3, [r7, #20]
}
 801c3b4:	4618      	mov	r0, r3
 801c3b6:	371c      	adds	r7, #28
 801c3b8:	46bd      	mov	sp, r7
 801c3ba:	bc80      	pop	{r7}
 801c3bc:	4770      	bx	lr

0801c3be <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801c3be:	b480      	push	{r7}
 801c3c0:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 801c3c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 801c3c6:	4618      	mov	r0, r3
 801c3c8:	46bd      	mov	sp, r7
 801c3ca:	bc80      	pop	{r7}
 801c3cc:	4770      	bx	lr

0801c3ce <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 801c3ce:	b480      	push	{r7}
 801c3d0:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 801c3d2:	bf00      	nop
 801c3d4:	46bd      	mov	sp, r7
 801c3d6:	bc80      	pop	{r7}
 801c3d8:	4770      	bx	lr

0801c3da <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801c3da:	b480      	push	{r7}
 801c3dc:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 801c3de:	bf00      	nop
 801c3e0:	46bd      	mov	sp, r7
 801c3e2:	bc80      	pop	{r7}
 801c3e4:	4770      	bx	lr

0801c3e6 <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 801c3e6:	b480      	push	{r7}
 801c3e8:	b083      	sub	sp, #12
 801c3ea:	af00      	add	r7, sp, #0
 801c3ec:	4603      	mov	r3, r0
 801c3ee:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 801c3f0:	bf00      	nop
 801c3f2:	370c      	adds	r7, #12
 801c3f4:	46bd      	mov	sp, r7
 801c3f6:	bc80      	pop	{r7}
 801c3f8:	4770      	bx	lr
	...

0801c3fc <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801c3fc:	b480      	push	{r7}
 801c3fe:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801c400:	4b04      	ldr	r3, [pc, #16]	; (801c414 <UTIL_LPM_Init+0x18>)
 801c402:	2200      	movs	r2, #0
 801c404:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801c406:	4b04      	ldr	r3, [pc, #16]	; (801c418 <UTIL_LPM_Init+0x1c>)
 801c408:	2200      	movs	r2, #0
 801c40a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801c40c:	bf00      	nop
 801c40e:	46bd      	mov	sp, r7
 801c410:	bc80      	pop	{r7}
 801c412:	4770      	bx	lr
 801c414:	20001c84 	.word	0x20001c84
 801c418:	20001c88 	.word	0x20001c88

0801c41c <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801c41c:	b480      	push	{r7}
 801c41e:	b087      	sub	sp, #28
 801c420:	af00      	add	r7, sp, #0
 801c422:	6078      	str	r0, [r7, #4]
 801c424:	460b      	mov	r3, r1
 801c426:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c428:	f3ef 8310 	mrs	r3, PRIMASK
 801c42c:	613b      	str	r3, [r7, #16]
  return(result);
 801c42e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801c430:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c432:	b672      	cpsid	i
}
 801c434:	bf00      	nop
  
  switch( state )
 801c436:	78fb      	ldrb	r3, [r7, #3]
 801c438:	2b00      	cmp	r3, #0
 801c43a:	d008      	beq.n	801c44e <UTIL_LPM_SetStopMode+0x32>
 801c43c:	2b01      	cmp	r3, #1
 801c43e:	d10e      	bne.n	801c45e <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801c440:	4b0d      	ldr	r3, [pc, #52]	; (801c478 <UTIL_LPM_SetStopMode+0x5c>)
 801c442:	681a      	ldr	r2, [r3, #0]
 801c444:	687b      	ldr	r3, [r7, #4]
 801c446:	4313      	orrs	r3, r2
 801c448:	4a0b      	ldr	r2, [pc, #44]	; (801c478 <UTIL_LPM_SetStopMode+0x5c>)
 801c44a:	6013      	str	r3, [r2, #0]
      break;
 801c44c:	e008      	b.n	801c460 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801c44e:	687b      	ldr	r3, [r7, #4]
 801c450:	43da      	mvns	r2, r3
 801c452:	4b09      	ldr	r3, [pc, #36]	; (801c478 <UTIL_LPM_SetStopMode+0x5c>)
 801c454:	681b      	ldr	r3, [r3, #0]
 801c456:	4013      	ands	r3, r2
 801c458:	4a07      	ldr	r2, [pc, #28]	; (801c478 <UTIL_LPM_SetStopMode+0x5c>)
 801c45a:	6013      	str	r3, [r2, #0]
      break;
 801c45c:	e000      	b.n	801c460 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801c45e:	bf00      	nop
 801c460:	697b      	ldr	r3, [r7, #20]
 801c462:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c464:	68fb      	ldr	r3, [r7, #12]
 801c466:	f383 8810 	msr	PRIMASK, r3
}
 801c46a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801c46c:	bf00      	nop
 801c46e:	371c      	adds	r7, #28
 801c470:	46bd      	mov	sp, r7
 801c472:	bc80      	pop	{r7}
 801c474:	4770      	bx	lr
 801c476:	bf00      	nop
 801c478:	20001c84 	.word	0x20001c84

0801c47c <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801c47c:	b480      	push	{r7}
 801c47e:	b087      	sub	sp, #28
 801c480:	af00      	add	r7, sp, #0
 801c482:	6078      	str	r0, [r7, #4]
 801c484:	460b      	mov	r3, r1
 801c486:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c488:	f3ef 8310 	mrs	r3, PRIMASK
 801c48c:	613b      	str	r3, [r7, #16]
  return(result);
 801c48e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801c490:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c492:	b672      	cpsid	i
}
 801c494:	bf00      	nop
  
  switch(state)
 801c496:	78fb      	ldrb	r3, [r7, #3]
 801c498:	2b00      	cmp	r3, #0
 801c49a:	d008      	beq.n	801c4ae <UTIL_LPM_SetOffMode+0x32>
 801c49c:	2b01      	cmp	r3, #1
 801c49e:	d10e      	bne.n	801c4be <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801c4a0:	4b0d      	ldr	r3, [pc, #52]	; (801c4d8 <UTIL_LPM_SetOffMode+0x5c>)
 801c4a2:	681a      	ldr	r2, [r3, #0]
 801c4a4:	687b      	ldr	r3, [r7, #4]
 801c4a6:	4313      	orrs	r3, r2
 801c4a8:	4a0b      	ldr	r2, [pc, #44]	; (801c4d8 <UTIL_LPM_SetOffMode+0x5c>)
 801c4aa:	6013      	str	r3, [r2, #0]
      break;
 801c4ac:	e008      	b.n	801c4c0 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801c4ae:	687b      	ldr	r3, [r7, #4]
 801c4b0:	43da      	mvns	r2, r3
 801c4b2:	4b09      	ldr	r3, [pc, #36]	; (801c4d8 <UTIL_LPM_SetOffMode+0x5c>)
 801c4b4:	681b      	ldr	r3, [r3, #0]
 801c4b6:	4013      	ands	r3, r2
 801c4b8:	4a07      	ldr	r2, [pc, #28]	; (801c4d8 <UTIL_LPM_SetOffMode+0x5c>)
 801c4ba:	6013      	str	r3, [r2, #0]
      break;
 801c4bc:	e000      	b.n	801c4c0 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801c4be:	bf00      	nop
 801c4c0:	697b      	ldr	r3, [r7, #20]
 801c4c2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c4c4:	68fb      	ldr	r3, [r7, #12]
 801c4c6:	f383 8810 	msr	PRIMASK, r3
}
 801c4ca:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801c4cc:	bf00      	nop
 801c4ce:	371c      	adds	r7, #28
 801c4d0:	46bd      	mov	sp, r7
 801c4d2:	bc80      	pop	{r7}
 801c4d4:	4770      	bx	lr
 801c4d6:	bf00      	nop
 801c4d8:	20001c88 	.word	0x20001c88

0801c4dc <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801c4dc:	b580      	push	{r7, lr}
 801c4de:	b084      	sub	sp, #16
 801c4e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c4e2:	f3ef 8310 	mrs	r3, PRIMASK
 801c4e6:	60bb      	str	r3, [r7, #8]
  return(result);
 801c4e8:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801c4ea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801c4ec:	b672      	cpsid	i
}
 801c4ee:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801c4f0:	4b12      	ldr	r3, [pc, #72]	; (801c53c <UTIL_LPM_EnterLowPower+0x60>)
 801c4f2:	681b      	ldr	r3, [r3, #0]
 801c4f4:	2b00      	cmp	r3, #0
 801c4f6:	d006      	beq.n	801c506 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801c4f8:	4b11      	ldr	r3, [pc, #68]	; (801c540 <UTIL_LPM_EnterLowPower+0x64>)
 801c4fa:	681b      	ldr	r3, [r3, #0]
 801c4fc:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801c4fe:	4b10      	ldr	r3, [pc, #64]	; (801c540 <UTIL_LPM_EnterLowPower+0x64>)
 801c500:	685b      	ldr	r3, [r3, #4]
 801c502:	4798      	blx	r3
 801c504:	e010      	b.n	801c528 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801c506:	4b0f      	ldr	r3, [pc, #60]	; (801c544 <UTIL_LPM_EnterLowPower+0x68>)
 801c508:	681b      	ldr	r3, [r3, #0]
 801c50a:	2b00      	cmp	r3, #0
 801c50c:	d006      	beq.n	801c51c <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801c50e:	4b0c      	ldr	r3, [pc, #48]	; (801c540 <UTIL_LPM_EnterLowPower+0x64>)
 801c510:	689b      	ldr	r3, [r3, #8]
 801c512:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801c514:	4b0a      	ldr	r3, [pc, #40]	; (801c540 <UTIL_LPM_EnterLowPower+0x64>)
 801c516:	68db      	ldr	r3, [r3, #12]
 801c518:	4798      	blx	r3
 801c51a:	e005      	b.n	801c528 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801c51c:	4b08      	ldr	r3, [pc, #32]	; (801c540 <UTIL_LPM_EnterLowPower+0x64>)
 801c51e:	691b      	ldr	r3, [r3, #16]
 801c520:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801c522:	4b07      	ldr	r3, [pc, #28]	; (801c540 <UTIL_LPM_EnterLowPower+0x64>)
 801c524:	695b      	ldr	r3, [r3, #20]
 801c526:	4798      	blx	r3
 801c528:	68fb      	ldr	r3, [r7, #12]
 801c52a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c52c:	687b      	ldr	r3, [r7, #4]
 801c52e:	f383 8810 	msr	PRIMASK, r3
}
 801c532:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801c534:	bf00      	nop
 801c536:	3710      	adds	r7, #16
 801c538:	46bd      	mov	sp, r7
 801c53a:	bd80      	pop	{r7, pc}
 801c53c:	20001c84 	.word	0x20001c84
 801c540:	0801e4e4 	.word	0x0801e4e4
 801c544:	20001c88 	.word	0x20001c88

0801c548 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801c548:	b480      	push	{r7}
 801c54a:	b087      	sub	sp, #28
 801c54c:	af00      	add	r7, sp, #0
 801c54e:	60f8      	str	r0, [r7, #12]
 801c550:	60b9      	str	r1, [r7, #8]
 801c552:	4613      	mov	r3, r2
 801c554:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801c556:	68fb      	ldr	r3, [r7, #12]
 801c558:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801c55a:	68bb      	ldr	r3, [r7, #8]
 801c55c:	613b      	str	r3, [r7, #16]

  while( size-- )
 801c55e:	e007      	b.n	801c570 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801c560:	693a      	ldr	r2, [r7, #16]
 801c562:	1c53      	adds	r3, r2, #1
 801c564:	613b      	str	r3, [r7, #16]
 801c566:	697b      	ldr	r3, [r7, #20]
 801c568:	1c59      	adds	r1, r3, #1
 801c56a:	6179      	str	r1, [r7, #20]
 801c56c:	7812      	ldrb	r2, [r2, #0]
 801c56e:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801c570:	88fb      	ldrh	r3, [r7, #6]
 801c572:	1e5a      	subs	r2, r3, #1
 801c574:	80fa      	strh	r2, [r7, #6]
 801c576:	2b00      	cmp	r3, #0
 801c578:	d1f2      	bne.n	801c560 <UTIL_MEM_cpy_8+0x18>
    }
}
 801c57a:	bf00      	nop
 801c57c:	bf00      	nop
 801c57e:	371c      	adds	r7, #28
 801c580:	46bd      	mov	sp, r7
 801c582:	bc80      	pop	{r7}
 801c584:	4770      	bx	lr

0801c586 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801c586:	b480      	push	{r7}
 801c588:	b085      	sub	sp, #20
 801c58a:	af00      	add	r7, sp, #0
 801c58c:	6078      	str	r0, [r7, #4]
 801c58e:	460b      	mov	r3, r1
 801c590:	70fb      	strb	r3, [r7, #3]
 801c592:	4613      	mov	r3, r2
 801c594:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801c596:	687b      	ldr	r3, [r7, #4]
 801c598:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801c59a:	e004      	b.n	801c5a6 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801c59c:	68fb      	ldr	r3, [r7, #12]
 801c59e:	1c5a      	adds	r2, r3, #1
 801c5a0:	60fa      	str	r2, [r7, #12]
 801c5a2:	78fa      	ldrb	r2, [r7, #3]
 801c5a4:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801c5a6:	883b      	ldrh	r3, [r7, #0]
 801c5a8:	1e5a      	subs	r2, r3, #1
 801c5aa:	803a      	strh	r2, [r7, #0]
 801c5ac:	2b00      	cmp	r3, #0
 801c5ae:	d1f5      	bne.n	801c59c <UTIL_MEM_set_8+0x16>
  }
}
 801c5b0:	bf00      	nop
 801c5b2:	bf00      	nop
 801c5b4:	3714      	adds	r7, #20
 801c5b6:	46bd      	mov	sp, r7
 801c5b8:	bc80      	pop	{r7}
 801c5ba:	4770      	bx	lr

0801c5bc <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801c5bc:	b082      	sub	sp, #8
 801c5be:	b480      	push	{r7}
 801c5c0:	b087      	sub	sp, #28
 801c5c2:	af00      	add	r7, sp, #0
 801c5c4:	60f8      	str	r0, [r7, #12]
 801c5c6:	1d38      	adds	r0, r7, #4
 801c5c8:	e880 0006 	stmia.w	r0, {r1, r2}
 801c5cc:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801c5ce:	2300      	movs	r3, #0
 801c5d0:	613b      	str	r3, [r7, #16]
 801c5d2:	2300      	movs	r3, #0
 801c5d4:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801c5d6:	687a      	ldr	r2, [r7, #4]
 801c5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c5da:	4413      	add	r3, r2
 801c5dc:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801c5de:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801c5e2:	b29a      	uxth	r2, r3
 801c5e4:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801c5e8:	b29b      	uxth	r3, r3
 801c5ea:	4413      	add	r3, r2
 801c5ec:	b29b      	uxth	r3, r3
 801c5ee:	b21b      	sxth	r3, r3
 801c5f0:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801c5f2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801c5f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801c5fa:	db0a      	blt.n	801c612 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801c5fc:	693b      	ldr	r3, [r7, #16]
 801c5fe:	3301      	adds	r3, #1
 801c600:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801c602:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801c606:	b29b      	uxth	r3, r3
 801c608:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 801c60c:	b29b      	uxth	r3, r3
 801c60e:	b21b      	sxth	r3, r3
 801c610:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801c612:	68fb      	ldr	r3, [r7, #12]
 801c614:	461a      	mov	r2, r3
 801c616:	f107 0310 	add.w	r3, r7, #16
 801c61a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c61e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801c622:	68f8      	ldr	r0, [r7, #12]
 801c624:	371c      	adds	r7, #28
 801c626:	46bd      	mov	sp, r7
 801c628:	bc80      	pop	{r7}
 801c62a:	b002      	add	sp, #8
 801c62c:	4770      	bx	lr

0801c62e <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801c62e:	b082      	sub	sp, #8
 801c630:	b480      	push	{r7}
 801c632:	b087      	sub	sp, #28
 801c634:	af00      	add	r7, sp, #0
 801c636:	60f8      	str	r0, [r7, #12]
 801c638:	1d38      	adds	r0, r7, #4
 801c63a:	e880 0006 	stmia.w	r0, {r1, r2}
 801c63e:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801c640:	2300      	movs	r3, #0
 801c642:	613b      	str	r3, [r7, #16]
 801c644:	2300      	movs	r3, #0
 801c646:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801c648:	687a      	ldr	r2, [r7, #4]
 801c64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c64c:	1ad3      	subs	r3, r2, r3
 801c64e:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801c650:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801c654:	b29a      	uxth	r2, r3
 801c656:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801c65a:	b29b      	uxth	r3, r3
 801c65c:	1ad3      	subs	r3, r2, r3
 801c65e:	b29b      	uxth	r3, r3
 801c660:	b21b      	sxth	r3, r3
 801c662:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801c664:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801c668:	2b00      	cmp	r3, #0
 801c66a:	da0a      	bge.n	801c682 <SysTimeSub+0x54>
  {
    c.Seconds--;
 801c66c:	693b      	ldr	r3, [r7, #16]
 801c66e:	3b01      	subs	r3, #1
 801c670:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801c672:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801c676:	b29b      	uxth	r3, r3
 801c678:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801c67c:	b29b      	uxth	r3, r3
 801c67e:	b21b      	sxth	r3, r3
 801c680:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801c682:	68fb      	ldr	r3, [r7, #12]
 801c684:	461a      	mov	r2, r3
 801c686:	f107 0310 	add.w	r3, r7, #16
 801c68a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c68e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801c692:	68f8      	ldr	r0, [r7, #12]
 801c694:	371c      	adds	r7, #28
 801c696:	46bd      	mov	sp, r7
 801c698:	bc80      	pop	{r7}
 801c69a:	b002      	add	sp, #8
 801c69c:	4770      	bx	lr
	...

0801c6a0 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801c6a0:	b580      	push	{r7, lr}
 801c6a2:	b088      	sub	sp, #32
 801c6a4:	af02      	add	r7, sp, #8
 801c6a6:	463b      	mov	r3, r7
 801c6a8:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801c6ac:	2300      	movs	r3, #0
 801c6ae:	60bb      	str	r3, [r7, #8]
 801c6b0:	2300      	movs	r3, #0
 801c6b2:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801c6b4:	4b10      	ldr	r3, [pc, #64]	; (801c6f8 <SysTimeSet+0x58>)
 801c6b6:	691b      	ldr	r3, [r3, #16]
 801c6b8:	f107 0208 	add.w	r2, r7, #8
 801c6bc:	3204      	adds	r2, #4
 801c6be:	4610      	mov	r0, r2
 801c6c0:	4798      	blx	r3
 801c6c2:	4603      	mov	r3, r0
 801c6c4:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801c6c6:	f107 0010 	add.w	r0, r7, #16
 801c6ca:	68fb      	ldr	r3, [r7, #12]
 801c6cc:	9300      	str	r3, [sp, #0]
 801c6ce:	68bb      	ldr	r3, [r7, #8]
 801c6d0:	463a      	mov	r2, r7
 801c6d2:	ca06      	ldmia	r2, {r1, r2}
 801c6d4:	f7ff ffab 	bl	801c62e <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801c6d8:	4b07      	ldr	r3, [pc, #28]	; (801c6f8 <SysTimeSet+0x58>)
 801c6da:	681b      	ldr	r3, [r3, #0]
 801c6dc:	693a      	ldr	r2, [r7, #16]
 801c6de:	4610      	mov	r0, r2
 801c6e0:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801c6e2:	4b05      	ldr	r3, [pc, #20]	; (801c6f8 <SysTimeSet+0x58>)
 801c6e4:	689b      	ldr	r3, [r3, #8]
 801c6e6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801c6ea:	4610      	mov	r0, r2
 801c6ec:	4798      	blx	r3
}
 801c6ee:	bf00      	nop
 801c6f0:	3718      	adds	r7, #24
 801c6f2:	46bd      	mov	sp, r7
 801c6f4:	bd80      	pop	{r7, pc}
 801c6f6:	bf00      	nop
 801c6f8:	0801e5c8 	.word	0x0801e5c8

0801c6fc <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801c6fc:	b580      	push	{r7, lr}
 801c6fe:	b08a      	sub	sp, #40	; 0x28
 801c700:	af02      	add	r7, sp, #8
 801c702:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801c704:	2300      	movs	r3, #0
 801c706:	61bb      	str	r3, [r7, #24]
 801c708:	2300      	movs	r3, #0
 801c70a:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801c70c:	2300      	movs	r3, #0
 801c70e:	613b      	str	r3, [r7, #16]
 801c710:	2300      	movs	r3, #0
 801c712:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801c714:	4b14      	ldr	r3, [pc, #80]	; (801c768 <SysTimeGet+0x6c>)
 801c716:	691b      	ldr	r3, [r3, #16]
 801c718:	f107 0218 	add.w	r2, r7, #24
 801c71c:	3204      	adds	r2, #4
 801c71e:	4610      	mov	r0, r2
 801c720:	4798      	blx	r3
 801c722:	4603      	mov	r3, r0
 801c724:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801c726:	4b10      	ldr	r3, [pc, #64]	; (801c768 <SysTimeGet+0x6c>)
 801c728:	68db      	ldr	r3, [r3, #12]
 801c72a:	4798      	blx	r3
 801c72c:	4603      	mov	r3, r0
 801c72e:	b21b      	sxth	r3, r3
 801c730:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801c732:	4b0d      	ldr	r3, [pc, #52]	; (801c768 <SysTimeGet+0x6c>)
 801c734:	685b      	ldr	r3, [r3, #4]
 801c736:	4798      	blx	r3
 801c738:	4603      	mov	r3, r0
 801c73a:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801c73c:	f107 0010 	add.w	r0, r7, #16
 801c740:	69fb      	ldr	r3, [r7, #28]
 801c742:	9300      	str	r3, [sp, #0]
 801c744:	69bb      	ldr	r3, [r7, #24]
 801c746:	f107 0208 	add.w	r2, r7, #8
 801c74a:	ca06      	ldmia	r2, {r1, r2}
 801c74c:	f7ff ff36 	bl	801c5bc <SysTimeAdd>

  return sysTime;
 801c750:	687b      	ldr	r3, [r7, #4]
 801c752:	461a      	mov	r2, r3
 801c754:	f107 0310 	add.w	r3, r7, #16
 801c758:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c75c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801c760:	6878      	ldr	r0, [r7, #4]
 801c762:	3720      	adds	r7, #32
 801c764:	46bd      	mov	sp, r7
 801c766:	bd80      	pop	{r7, pc}
 801c768:	0801e5c8 	.word	0x0801e5c8

0801c76c <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801c76c:	b580      	push	{r7, lr}
 801c76e:	b084      	sub	sp, #16
 801c770:	af00      	add	r7, sp, #0
 801c772:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801c774:	2300      	movs	r3, #0
 801c776:	60bb      	str	r3, [r7, #8]
 801c778:	2300      	movs	r3, #0
 801c77a:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801c77c:	4b0a      	ldr	r3, [pc, #40]	; (801c7a8 <SysTimeGetMcuTime+0x3c>)
 801c77e:	691b      	ldr	r3, [r3, #16]
 801c780:	f107 0208 	add.w	r2, r7, #8
 801c784:	3204      	adds	r2, #4
 801c786:	4610      	mov	r0, r2
 801c788:	4798      	blx	r3
 801c78a:	4603      	mov	r3, r0
 801c78c:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801c78e:	687b      	ldr	r3, [r7, #4]
 801c790:	461a      	mov	r2, r3
 801c792:	f107 0308 	add.w	r3, r7, #8
 801c796:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c79a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801c79e:	6878      	ldr	r0, [r7, #4]
 801c7a0:	3710      	adds	r7, #16
 801c7a2:	46bd      	mov	sp, r7
 801c7a4:	bd80      	pop	{r7, pc}
 801c7a6:	bf00      	nop
 801c7a8:	0801e5c8 	.word	0x0801e5c8

0801c7ac <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801c7ac:	b580      	push	{r7, lr}
 801c7ae:	b088      	sub	sp, #32
 801c7b0:	af02      	add	r7, sp, #8
 801c7b2:	463b      	mov	r3, r7
 801c7b4:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801c7b8:	4b0f      	ldr	r3, [pc, #60]	; (801c7f8 <SysTimeToMs+0x4c>)
 801c7ba:	68db      	ldr	r3, [r3, #12]
 801c7bc:	4798      	blx	r3
 801c7be:	4603      	mov	r3, r0
 801c7c0:	b21b      	sxth	r3, r3
 801c7c2:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801c7c4:	4b0c      	ldr	r3, [pc, #48]	; (801c7f8 <SysTimeToMs+0x4c>)
 801c7c6:	685b      	ldr	r3, [r3, #4]
 801c7c8:	4798      	blx	r3
 801c7ca:	4603      	mov	r3, r0
 801c7cc:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801c7ce:	f107 0008 	add.w	r0, r7, #8
 801c7d2:	697b      	ldr	r3, [r7, #20]
 801c7d4:	9300      	str	r3, [sp, #0]
 801c7d6:	693b      	ldr	r3, [r7, #16]
 801c7d8:	463a      	mov	r2, r7
 801c7da:	ca06      	ldmia	r2, {r1, r2}
 801c7dc:	f7ff ff27 	bl	801c62e <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801c7e0:	68bb      	ldr	r3, [r7, #8]
 801c7e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801c7e6:	fb02 f303 	mul.w	r3, r2, r3
 801c7ea:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801c7ee:	4413      	add	r3, r2
}
 801c7f0:	4618      	mov	r0, r3
 801c7f2:	3718      	adds	r7, #24
 801c7f4:	46bd      	mov	sp, r7
 801c7f6:	bd80      	pop	{r7, pc}
 801c7f8:	0801e5c8 	.word	0x0801e5c8

0801c7fc <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801c7fc:	b580      	push	{r7, lr}
 801c7fe:	b08a      	sub	sp, #40	; 0x28
 801c800:	af02      	add	r7, sp, #8
 801c802:	6078      	str	r0, [r7, #4]
 801c804:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801c806:	683b      	ldr	r3, [r7, #0]
 801c808:	4a19      	ldr	r2, [pc, #100]	; (801c870 <SysTimeFromMs+0x74>)
 801c80a:	fba2 2303 	umull	r2, r3, r2, r3
 801c80e:	099b      	lsrs	r3, r3, #6
 801c810:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801c812:	69fb      	ldr	r3, [r7, #28]
 801c814:	617b      	str	r3, [r7, #20]
 801c816:	683b      	ldr	r3, [r7, #0]
 801c818:	b29a      	uxth	r2, r3
 801c81a:	69fb      	ldr	r3, [r7, #28]
 801c81c:	b29b      	uxth	r3, r3
 801c81e:	4619      	mov	r1, r3
 801c820:	0149      	lsls	r1, r1, #5
 801c822:	1ac9      	subs	r1, r1, r3
 801c824:	0089      	lsls	r1, r1, #2
 801c826:	440b      	add	r3, r1
 801c828:	00db      	lsls	r3, r3, #3
 801c82a:	b29b      	uxth	r3, r3
 801c82c:	1ad3      	subs	r3, r2, r3
 801c82e:	b29b      	uxth	r3, r3
 801c830:	b21b      	sxth	r3, r3
 801c832:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801c834:	f107 030c 	add.w	r3, r7, #12
 801c838:	2200      	movs	r2, #0
 801c83a:	601a      	str	r2, [r3, #0]
 801c83c:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801c83e:	4b0d      	ldr	r3, [pc, #52]	; (801c874 <SysTimeFromMs+0x78>)
 801c840:	68db      	ldr	r3, [r3, #12]
 801c842:	4798      	blx	r3
 801c844:	4603      	mov	r3, r0
 801c846:	b21b      	sxth	r3, r3
 801c848:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801c84a:	4b0a      	ldr	r3, [pc, #40]	; (801c874 <SysTimeFromMs+0x78>)
 801c84c:	685b      	ldr	r3, [r3, #4]
 801c84e:	4798      	blx	r3
 801c850:	4603      	mov	r3, r0
 801c852:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801c854:	6878      	ldr	r0, [r7, #4]
 801c856:	693b      	ldr	r3, [r7, #16]
 801c858:	9300      	str	r3, [sp, #0]
 801c85a:	68fb      	ldr	r3, [r7, #12]
 801c85c:	f107 0214 	add.w	r2, r7, #20
 801c860:	ca06      	ldmia	r2, {r1, r2}
 801c862:	f7ff feab 	bl	801c5bc <SysTimeAdd>
}
 801c866:	6878      	ldr	r0, [r7, #4]
 801c868:	3720      	adds	r7, #32
 801c86a:	46bd      	mov	sp, r7
 801c86c:	bd80      	pop	{r7, pc}
 801c86e:	bf00      	nop
 801c870:	10624dd3 	.word	0x10624dd3
 801c874:	0801e5c8 	.word	0x0801e5c8

0801c878 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801c878:	b480      	push	{r7}
 801c87a:	b085      	sub	sp, #20
 801c87c:	af00      	add	r7, sp, #0
 801c87e:	6078      	str	r0, [r7, #4]
  int i = 0;
 801c880:	2300      	movs	r3, #0
 801c882:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801c884:	e00e      	b.n	801c8a4 <ee_skip_atoi+0x2c>
 801c886:	68fa      	ldr	r2, [r7, #12]
 801c888:	4613      	mov	r3, r2
 801c88a:	009b      	lsls	r3, r3, #2
 801c88c:	4413      	add	r3, r2
 801c88e:	005b      	lsls	r3, r3, #1
 801c890:	4618      	mov	r0, r3
 801c892:	687b      	ldr	r3, [r7, #4]
 801c894:	681b      	ldr	r3, [r3, #0]
 801c896:	1c59      	adds	r1, r3, #1
 801c898:	687a      	ldr	r2, [r7, #4]
 801c89a:	6011      	str	r1, [r2, #0]
 801c89c:	781b      	ldrb	r3, [r3, #0]
 801c89e:	4403      	add	r3, r0
 801c8a0:	3b30      	subs	r3, #48	; 0x30
 801c8a2:	60fb      	str	r3, [r7, #12]
 801c8a4:	687b      	ldr	r3, [r7, #4]
 801c8a6:	681b      	ldr	r3, [r3, #0]
 801c8a8:	781b      	ldrb	r3, [r3, #0]
 801c8aa:	2b2f      	cmp	r3, #47	; 0x2f
 801c8ac:	d904      	bls.n	801c8b8 <ee_skip_atoi+0x40>
 801c8ae:	687b      	ldr	r3, [r7, #4]
 801c8b0:	681b      	ldr	r3, [r3, #0]
 801c8b2:	781b      	ldrb	r3, [r3, #0]
 801c8b4:	2b39      	cmp	r3, #57	; 0x39
 801c8b6:	d9e6      	bls.n	801c886 <ee_skip_atoi+0xe>
  return i;
 801c8b8:	68fb      	ldr	r3, [r7, #12]
}
 801c8ba:	4618      	mov	r0, r3
 801c8bc:	3714      	adds	r7, #20
 801c8be:	46bd      	mov	sp, r7
 801c8c0:	bc80      	pop	{r7}
 801c8c2:	4770      	bx	lr

0801c8c4 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801c8c4:	b480      	push	{r7}
 801c8c6:	b099      	sub	sp, #100	; 0x64
 801c8c8:	af00      	add	r7, sp, #0
 801c8ca:	60f8      	str	r0, [r7, #12]
 801c8cc:	60b9      	str	r1, [r7, #8]
 801c8ce:	607a      	str	r2, [r7, #4]
 801c8d0:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801c8d2:	4b71      	ldr	r3, [pc, #452]	; (801ca98 <ee_number+0x1d4>)
 801c8d4:	681b      	ldr	r3, [r3, #0]
 801c8d6:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801c8d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c8da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c8de:	2b00      	cmp	r3, #0
 801c8e0:	d002      	beq.n	801c8e8 <ee_number+0x24>
 801c8e2:	4b6e      	ldr	r3, [pc, #440]	; (801ca9c <ee_number+0x1d8>)
 801c8e4:	681b      	ldr	r3, [r3, #0]
 801c8e6:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801c8e8:	683b      	ldr	r3, [r7, #0]
 801c8ea:	2b01      	cmp	r3, #1
 801c8ec:	dd02      	ble.n	801c8f4 <ee_number+0x30>
 801c8ee:	683b      	ldr	r3, [r7, #0]
 801c8f0:	2b24      	cmp	r3, #36	; 0x24
 801c8f2:	dd01      	ble.n	801c8f8 <ee_number+0x34>
 801c8f4:	2300      	movs	r3, #0
 801c8f6:	e0ca      	b.n	801ca8e <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801c8f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c8fa:	f003 0301 	and.w	r3, r3, #1
 801c8fe:	2b00      	cmp	r3, #0
 801c900:	d001      	beq.n	801c906 <ee_number+0x42>
 801c902:	2330      	movs	r3, #48	; 0x30
 801c904:	e000      	b.n	801c908 <ee_number+0x44>
 801c906:	2320      	movs	r3, #32
 801c908:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 801c90c:	2300      	movs	r3, #0
 801c90e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 801c912:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c914:	f003 0302 	and.w	r3, r3, #2
 801c918:	2b00      	cmp	r3, #0
 801c91a:	d00b      	beq.n	801c934 <ee_number+0x70>
  {
    if (num < 0)
 801c91c:	687b      	ldr	r3, [r7, #4]
 801c91e:	2b00      	cmp	r3, #0
 801c920:	da08      	bge.n	801c934 <ee_number+0x70>
    {
      sign = '-';
 801c922:	232d      	movs	r3, #45	; 0x2d
 801c924:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 801c928:	687b      	ldr	r3, [r7, #4]
 801c92a:	425b      	negs	r3, r3
 801c92c:	607b      	str	r3, [r7, #4]
      size--;
 801c92e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c930:	3b01      	subs	r3, #1
 801c932:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801c934:	2300      	movs	r3, #0
 801c936:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 801c938:	687b      	ldr	r3, [r7, #4]
 801c93a:	2b00      	cmp	r3, #0
 801c93c:	d11e      	bne.n	801c97c <ee_number+0xb8>
    tmp[i++] = '0';
 801c93e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c940:	1c5a      	adds	r2, r3, #1
 801c942:	657a      	str	r2, [r7, #84]	; 0x54
 801c944:	3360      	adds	r3, #96	; 0x60
 801c946:	443b      	add	r3, r7
 801c948:	2230      	movs	r2, #48	; 0x30
 801c94a:	f803 2c50 	strb.w	r2, [r3, #-80]
 801c94e:	e018      	b.n	801c982 <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801c950:	687b      	ldr	r3, [r7, #4]
 801c952:	683a      	ldr	r2, [r7, #0]
 801c954:	fbb3 f1f2 	udiv	r1, r3, r2
 801c958:	fb01 f202 	mul.w	r2, r1, r2
 801c95c:	1a9b      	subs	r3, r3, r2
 801c95e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801c960:	441a      	add	r2, r3
 801c962:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c964:	1c59      	adds	r1, r3, #1
 801c966:	6579      	str	r1, [r7, #84]	; 0x54
 801c968:	7812      	ldrb	r2, [r2, #0]
 801c96a:	3360      	adds	r3, #96	; 0x60
 801c96c:	443b      	add	r3, r7
 801c96e:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801c972:	687a      	ldr	r2, [r7, #4]
 801c974:	683b      	ldr	r3, [r7, #0]
 801c976:	fbb2 f3f3 	udiv	r3, r2, r3
 801c97a:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801c97c:	687b      	ldr	r3, [r7, #4]
 801c97e:	2b00      	cmp	r3, #0
 801c980:	d1e6      	bne.n	801c950 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801c982:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801c984:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c986:	429a      	cmp	r2, r3
 801c988:	dd01      	ble.n	801c98e <ee_number+0xca>
 801c98a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c98c:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 801c98e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801c990:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c992:	1ad3      	subs	r3, r2, r3
 801c994:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801c996:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c998:	f003 0301 	and.w	r3, r3, #1
 801c99c:	2b00      	cmp	r3, #0
 801c99e:	d112      	bne.n	801c9c6 <ee_number+0x102>
 801c9a0:	e00c      	b.n	801c9bc <ee_number+0xf8>
 801c9a2:	68fb      	ldr	r3, [r7, #12]
 801c9a4:	1c5a      	adds	r2, r3, #1
 801c9a6:	60fa      	str	r2, [r7, #12]
 801c9a8:	2220      	movs	r2, #32
 801c9aa:	701a      	strb	r2, [r3, #0]
 801c9ac:	68bb      	ldr	r3, [r7, #8]
 801c9ae:	3b01      	subs	r3, #1
 801c9b0:	60bb      	str	r3, [r7, #8]
 801c9b2:	68bb      	ldr	r3, [r7, #8]
 801c9b4:	2b00      	cmp	r3, #0
 801c9b6:	d101      	bne.n	801c9bc <ee_number+0xf8>
 801c9b8:	68fb      	ldr	r3, [r7, #12]
 801c9ba:	e068      	b.n	801ca8e <ee_number+0x1ca>
 801c9bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c9be:	1e5a      	subs	r2, r3, #1
 801c9c0:	66ba      	str	r2, [r7, #104]	; 0x68
 801c9c2:	2b00      	cmp	r3, #0
 801c9c4:	dced      	bgt.n	801c9a2 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801c9c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801c9ca:	2b00      	cmp	r3, #0
 801c9cc:	d01b      	beq.n	801ca06 <ee_number+0x142>
 801c9ce:	68fb      	ldr	r3, [r7, #12]
 801c9d0:	1c5a      	adds	r2, r3, #1
 801c9d2:	60fa      	str	r2, [r7, #12]
 801c9d4:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801c9d8:	701a      	strb	r2, [r3, #0]
 801c9da:	68bb      	ldr	r3, [r7, #8]
 801c9dc:	3b01      	subs	r3, #1
 801c9de:	60bb      	str	r3, [r7, #8]
 801c9e0:	68bb      	ldr	r3, [r7, #8]
 801c9e2:	2b00      	cmp	r3, #0
 801c9e4:	d10f      	bne.n	801ca06 <ee_number+0x142>
 801c9e6:	68fb      	ldr	r3, [r7, #12]
 801c9e8:	e051      	b.n	801ca8e <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801c9ea:	68fb      	ldr	r3, [r7, #12]
 801c9ec:	1c5a      	adds	r2, r3, #1
 801c9ee:	60fa      	str	r2, [r7, #12]
 801c9f0:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 801c9f4:	701a      	strb	r2, [r3, #0]
 801c9f6:	68bb      	ldr	r3, [r7, #8]
 801c9f8:	3b01      	subs	r3, #1
 801c9fa:	60bb      	str	r3, [r7, #8]
 801c9fc:	68bb      	ldr	r3, [r7, #8]
 801c9fe:	2b00      	cmp	r3, #0
 801ca00:	d101      	bne.n	801ca06 <ee_number+0x142>
 801ca02:	68fb      	ldr	r3, [r7, #12]
 801ca04:	e043      	b.n	801ca8e <ee_number+0x1ca>
 801ca06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801ca08:	1e5a      	subs	r2, r3, #1
 801ca0a:	66ba      	str	r2, [r7, #104]	; 0x68
 801ca0c:	2b00      	cmp	r3, #0
 801ca0e:	dcec      	bgt.n	801c9ea <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801ca10:	e00c      	b.n	801ca2c <ee_number+0x168>
 801ca12:	68fb      	ldr	r3, [r7, #12]
 801ca14:	1c5a      	adds	r2, r3, #1
 801ca16:	60fa      	str	r2, [r7, #12]
 801ca18:	2230      	movs	r2, #48	; 0x30
 801ca1a:	701a      	strb	r2, [r3, #0]
 801ca1c:	68bb      	ldr	r3, [r7, #8]
 801ca1e:	3b01      	subs	r3, #1
 801ca20:	60bb      	str	r3, [r7, #8]
 801ca22:	68bb      	ldr	r3, [r7, #8]
 801ca24:	2b00      	cmp	r3, #0
 801ca26:	d101      	bne.n	801ca2c <ee_number+0x168>
 801ca28:	68fb      	ldr	r3, [r7, #12]
 801ca2a:	e030      	b.n	801ca8e <ee_number+0x1ca>
 801ca2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ca2e:	1e5a      	subs	r2, r3, #1
 801ca30:	66fa      	str	r2, [r7, #108]	; 0x6c
 801ca32:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801ca34:	429a      	cmp	r2, r3
 801ca36:	dbec      	blt.n	801ca12 <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801ca38:	e010      	b.n	801ca5c <ee_number+0x198>
 801ca3a:	68fb      	ldr	r3, [r7, #12]
 801ca3c:	1c5a      	adds	r2, r3, #1
 801ca3e:	60fa      	str	r2, [r7, #12]
 801ca40:	f107 0110 	add.w	r1, r7, #16
 801ca44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801ca46:	440a      	add	r2, r1
 801ca48:	7812      	ldrb	r2, [r2, #0]
 801ca4a:	701a      	strb	r2, [r3, #0]
 801ca4c:	68bb      	ldr	r3, [r7, #8]
 801ca4e:	3b01      	subs	r3, #1
 801ca50:	60bb      	str	r3, [r7, #8]
 801ca52:	68bb      	ldr	r3, [r7, #8]
 801ca54:	2b00      	cmp	r3, #0
 801ca56:	d101      	bne.n	801ca5c <ee_number+0x198>
 801ca58:	68fb      	ldr	r3, [r7, #12]
 801ca5a:	e018      	b.n	801ca8e <ee_number+0x1ca>
 801ca5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ca5e:	1e5a      	subs	r2, r3, #1
 801ca60:	657a      	str	r2, [r7, #84]	; 0x54
 801ca62:	2b00      	cmp	r3, #0
 801ca64:	dce9      	bgt.n	801ca3a <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801ca66:	e00c      	b.n	801ca82 <ee_number+0x1be>
 801ca68:	68fb      	ldr	r3, [r7, #12]
 801ca6a:	1c5a      	adds	r2, r3, #1
 801ca6c:	60fa      	str	r2, [r7, #12]
 801ca6e:	2220      	movs	r2, #32
 801ca70:	701a      	strb	r2, [r3, #0]
 801ca72:	68bb      	ldr	r3, [r7, #8]
 801ca74:	3b01      	subs	r3, #1
 801ca76:	60bb      	str	r3, [r7, #8]
 801ca78:	68bb      	ldr	r3, [r7, #8]
 801ca7a:	2b00      	cmp	r3, #0
 801ca7c:	d101      	bne.n	801ca82 <ee_number+0x1be>
 801ca7e:	68fb      	ldr	r3, [r7, #12]
 801ca80:	e005      	b.n	801ca8e <ee_number+0x1ca>
 801ca82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801ca84:	1e5a      	subs	r2, r3, #1
 801ca86:	66ba      	str	r2, [r7, #104]	; 0x68
 801ca88:	2b00      	cmp	r3, #0
 801ca8a:	dced      	bgt.n	801ca68 <ee_number+0x1a4>

  return str;
 801ca8c:	68fb      	ldr	r3, [r7, #12]
}
 801ca8e:	4618      	mov	r0, r3
 801ca90:	3764      	adds	r7, #100	; 0x64
 801ca92:	46bd      	mov	sp, r7
 801ca94:	bc80      	pop	{r7}
 801ca96:	4770      	bx	lr
 801ca98:	20000138 	.word	0x20000138
 801ca9c:	2000013c 	.word	0x2000013c

0801caa0 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801caa0:	b580      	push	{r7, lr}
 801caa2:	b092      	sub	sp, #72	; 0x48
 801caa4:	af04      	add	r7, sp, #16
 801caa6:	60f8      	str	r0, [r7, #12]
 801caa8:	60b9      	str	r1, [r7, #8]
 801caaa:	607a      	str	r2, [r7, #4]
 801caac:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801caae:	68bb      	ldr	r3, [r7, #8]
 801cab0:	2b00      	cmp	r3, #0
 801cab2:	dc01      	bgt.n	801cab8 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801cab4:	2300      	movs	r3, #0
 801cab6:	e13e      	b.n	801cd36 <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801cab8:	68fb      	ldr	r3, [r7, #12]
 801caba:	62fb      	str	r3, [r7, #44]	; 0x2c
 801cabc:	e128      	b.n	801cd10 <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 801cabe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cac0:	68fb      	ldr	r3, [r7, #12]
 801cac2:	1ad2      	subs	r2, r2, r3
 801cac4:	68bb      	ldr	r3, [r7, #8]
 801cac6:	3b01      	subs	r3, #1
 801cac8:	429a      	cmp	r2, r3
 801caca:	f280 812e 	bge.w	801cd2a <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 801cace:	687b      	ldr	r3, [r7, #4]
 801cad0:	781b      	ldrb	r3, [r3, #0]
 801cad2:	2b25      	cmp	r3, #37	; 0x25
 801cad4:	d006      	beq.n	801cae4 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801cad6:	687a      	ldr	r2, [r7, #4]
 801cad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cada:	1c59      	adds	r1, r3, #1
 801cadc:	62f9      	str	r1, [r7, #44]	; 0x2c
 801cade:	7812      	ldrb	r2, [r2, #0]
 801cae0:	701a      	strb	r2, [r3, #0]
      continue;
 801cae2:	e112      	b.n	801cd0a <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 801cae4:	2300      	movs	r3, #0
 801cae6:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801cae8:	687b      	ldr	r3, [r7, #4]
 801caea:	3301      	adds	r3, #1
 801caec:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801caee:	687b      	ldr	r3, [r7, #4]
 801caf0:	781b      	ldrb	r3, [r3, #0]
 801caf2:	2b30      	cmp	r3, #48	; 0x30
 801caf4:	d103      	bne.n	801cafe <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801caf6:	6a3b      	ldr	r3, [r7, #32]
 801caf8:	f043 0301 	orr.w	r3, r3, #1
 801cafc:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801cafe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801cb02:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801cb04:	687b      	ldr	r3, [r7, #4]
 801cb06:	781b      	ldrb	r3, [r3, #0]
 801cb08:	2b2f      	cmp	r3, #47	; 0x2f
 801cb0a:	d908      	bls.n	801cb1e <tiny_vsnprintf_like+0x7e>
 801cb0c:	687b      	ldr	r3, [r7, #4]
 801cb0e:	781b      	ldrb	r3, [r3, #0]
 801cb10:	2b39      	cmp	r3, #57	; 0x39
 801cb12:	d804      	bhi.n	801cb1e <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801cb14:	1d3b      	adds	r3, r7, #4
 801cb16:	4618      	mov	r0, r3
 801cb18:	f7ff feae 	bl	801c878 <ee_skip_atoi>
 801cb1c:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801cb1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801cb22:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801cb24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801cb28:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801cb2a:	230a      	movs	r3, #10
 801cb2c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801cb2e:	687b      	ldr	r3, [r7, #4]
 801cb30:	781b      	ldrb	r3, [r3, #0]
 801cb32:	3b58      	subs	r3, #88	; 0x58
 801cb34:	2b20      	cmp	r3, #32
 801cb36:	f200 8094 	bhi.w	801cc62 <tiny_vsnprintf_like+0x1c2>
 801cb3a:	a201      	add	r2, pc, #4	; (adr r2, 801cb40 <tiny_vsnprintf_like+0xa0>)
 801cb3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cb40:	0801cc4b 	.word	0x0801cc4b
 801cb44:	0801cc63 	.word	0x0801cc63
 801cb48:	0801cc63 	.word	0x0801cc63
 801cb4c:	0801cc63 	.word	0x0801cc63
 801cb50:	0801cc63 	.word	0x0801cc63
 801cb54:	0801cc63 	.word	0x0801cc63
 801cb58:	0801cc63 	.word	0x0801cc63
 801cb5c:	0801cc63 	.word	0x0801cc63
 801cb60:	0801cc63 	.word	0x0801cc63
 801cb64:	0801cc63 	.word	0x0801cc63
 801cb68:	0801cc63 	.word	0x0801cc63
 801cb6c:	0801cbcf 	.word	0x0801cbcf
 801cb70:	0801cc59 	.word	0x0801cc59
 801cb74:	0801cc63 	.word	0x0801cc63
 801cb78:	0801cc63 	.word	0x0801cc63
 801cb7c:	0801cc63 	.word	0x0801cc63
 801cb80:	0801cc63 	.word	0x0801cc63
 801cb84:	0801cc59 	.word	0x0801cc59
 801cb88:	0801cc63 	.word	0x0801cc63
 801cb8c:	0801cc63 	.word	0x0801cc63
 801cb90:	0801cc63 	.word	0x0801cc63
 801cb94:	0801cc63 	.word	0x0801cc63
 801cb98:	0801cc63 	.word	0x0801cc63
 801cb9c:	0801cc63 	.word	0x0801cc63
 801cba0:	0801cc63 	.word	0x0801cc63
 801cba4:	0801cc63 	.word	0x0801cc63
 801cba8:	0801cc63 	.word	0x0801cc63
 801cbac:	0801cbef 	.word	0x0801cbef
 801cbb0:	0801cc63 	.word	0x0801cc63
 801cbb4:	0801ccaf 	.word	0x0801ccaf
 801cbb8:	0801cc63 	.word	0x0801cc63
 801cbbc:	0801cc63 	.word	0x0801cc63
 801cbc0:	0801cc53 	.word	0x0801cc53
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801cbc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cbc6:	1c5a      	adds	r2, r3, #1
 801cbc8:	62fa      	str	r2, [r7, #44]	; 0x2c
 801cbca:	2220      	movs	r2, #32
 801cbcc:	701a      	strb	r2, [r3, #0]
 801cbce:	69fb      	ldr	r3, [r7, #28]
 801cbd0:	3b01      	subs	r3, #1
 801cbd2:	61fb      	str	r3, [r7, #28]
 801cbd4:	69fb      	ldr	r3, [r7, #28]
 801cbd6:	2b00      	cmp	r3, #0
 801cbd8:	dcf4      	bgt.n	801cbc4 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801cbda:	683b      	ldr	r3, [r7, #0]
 801cbdc:	1d1a      	adds	r2, r3, #4
 801cbde:	603a      	str	r2, [r7, #0]
 801cbe0:	6819      	ldr	r1, [r3, #0]
 801cbe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cbe4:	1c5a      	adds	r2, r3, #1
 801cbe6:	62fa      	str	r2, [r7, #44]	; 0x2c
 801cbe8:	b2ca      	uxtb	r2, r1
 801cbea:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801cbec:	e08d      	b.n	801cd0a <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 801cbee:	683b      	ldr	r3, [r7, #0]
 801cbf0:	1d1a      	adds	r2, r3, #4
 801cbf2:	603a      	str	r2, [r7, #0]
 801cbf4:	681b      	ldr	r3, [r3, #0]
 801cbf6:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801cbf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cbfa:	2b00      	cmp	r3, #0
 801cbfc:	d101      	bne.n	801cc02 <tiny_vsnprintf_like+0x162>
 801cbfe:	4b50      	ldr	r3, [pc, #320]	; (801cd40 <tiny_vsnprintf_like+0x2a0>)
 801cc00:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801cc02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801cc04:	f7e3 fab8 	bl	8000178 <strlen>
 801cc08:	4603      	mov	r3, r0
 801cc0a:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801cc0c:	e004      	b.n	801cc18 <tiny_vsnprintf_like+0x178>
 801cc0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cc10:	1c5a      	adds	r2, r3, #1
 801cc12:	62fa      	str	r2, [r7, #44]	; 0x2c
 801cc14:	2220      	movs	r2, #32
 801cc16:	701a      	strb	r2, [r3, #0]
 801cc18:	69fb      	ldr	r3, [r7, #28]
 801cc1a:	1e5a      	subs	r2, r3, #1
 801cc1c:	61fa      	str	r2, [r7, #28]
 801cc1e:	693a      	ldr	r2, [r7, #16]
 801cc20:	429a      	cmp	r2, r3
 801cc22:	dbf4      	blt.n	801cc0e <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801cc24:	2300      	movs	r3, #0
 801cc26:	62bb      	str	r3, [r7, #40]	; 0x28
 801cc28:	e00a      	b.n	801cc40 <tiny_vsnprintf_like+0x1a0>
 801cc2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cc2c:	1c53      	adds	r3, r2, #1
 801cc2e:	627b      	str	r3, [r7, #36]	; 0x24
 801cc30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cc32:	1c59      	adds	r1, r3, #1
 801cc34:	62f9      	str	r1, [r7, #44]	; 0x2c
 801cc36:	7812      	ldrb	r2, [r2, #0]
 801cc38:	701a      	strb	r2, [r3, #0]
 801cc3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cc3c:	3301      	adds	r3, #1
 801cc3e:	62bb      	str	r3, [r7, #40]	; 0x28
 801cc40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801cc42:	693b      	ldr	r3, [r7, #16]
 801cc44:	429a      	cmp	r2, r3
 801cc46:	dbf0      	blt.n	801cc2a <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801cc48:	e05f      	b.n	801cd0a <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801cc4a:	6a3b      	ldr	r3, [r7, #32]
 801cc4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cc50:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801cc52:	2310      	movs	r3, #16
 801cc54:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801cc56:	e02b      	b.n	801ccb0 <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 801cc58:	6a3b      	ldr	r3, [r7, #32]
 801cc5a:	f043 0302 	orr.w	r3, r3, #2
 801cc5e:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801cc60:	e025      	b.n	801ccae <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801cc62:	687b      	ldr	r3, [r7, #4]
 801cc64:	781b      	ldrb	r3, [r3, #0]
 801cc66:	2b25      	cmp	r3, #37	; 0x25
 801cc68:	d004      	beq.n	801cc74 <tiny_vsnprintf_like+0x1d4>
 801cc6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cc6c:	1c5a      	adds	r2, r3, #1
 801cc6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 801cc70:	2225      	movs	r2, #37	; 0x25
 801cc72:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801cc74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cc76:	68fb      	ldr	r3, [r7, #12]
 801cc78:	1ad2      	subs	r2, r2, r3
 801cc7a:	68bb      	ldr	r3, [r7, #8]
 801cc7c:	3b01      	subs	r3, #1
 801cc7e:	429a      	cmp	r2, r3
 801cc80:	da16      	bge.n	801ccb0 <tiny_vsnprintf_like+0x210>
        if (*fmt)
 801cc82:	687b      	ldr	r3, [r7, #4]
 801cc84:	781b      	ldrb	r3, [r3, #0]
 801cc86:	2b00      	cmp	r3, #0
 801cc88:	d006      	beq.n	801cc98 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801cc8a:	687a      	ldr	r2, [r7, #4]
 801cc8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cc8e:	1c59      	adds	r1, r3, #1
 801cc90:	62f9      	str	r1, [r7, #44]	; 0x2c
 801cc92:	7812      	ldrb	r2, [r2, #0]
 801cc94:	701a      	strb	r2, [r3, #0]
 801cc96:	e002      	b.n	801cc9e <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801cc98:	687b      	ldr	r3, [r7, #4]
 801cc9a:	3b01      	subs	r3, #1
 801cc9c:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801cc9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cca0:	68fb      	ldr	r3, [r7, #12]
 801cca2:	1ad2      	subs	r2, r2, r3
 801cca4:	68bb      	ldr	r3, [r7, #8]
 801cca6:	3b01      	subs	r3, #1
 801cca8:	429a      	cmp	r2, r3
 801ccaa:	db2d      	blt.n	801cd08 <tiny_vsnprintf_like+0x268>
 801ccac:	e000      	b.n	801ccb0 <tiny_vsnprintf_like+0x210>
        break;
 801ccae:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801ccb0:	697b      	ldr	r3, [r7, #20]
 801ccb2:	2b6c      	cmp	r3, #108	; 0x6c
 801ccb4:	d105      	bne.n	801ccc2 <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 801ccb6:	683b      	ldr	r3, [r7, #0]
 801ccb8:	1d1a      	adds	r2, r3, #4
 801ccba:	603a      	str	r2, [r7, #0]
 801ccbc:	681b      	ldr	r3, [r3, #0]
 801ccbe:	637b      	str	r3, [r7, #52]	; 0x34
 801ccc0:	e00f      	b.n	801cce2 <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 801ccc2:	6a3b      	ldr	r3, [r7, #32]
 801ccc4:	f003 0302 	and.w	r3, r3, #2
 801ccc8:	2b00      	cmp	r3, #0
 801ccca:	d005      	beq.n	801ccd8 <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 801cccc:	683b      	ldr	r3, [r7, #0]
 801ccce:	1d1a      	adds	r2, r3, #4
 801ccd0:	603a      	str	r2, [r7, #0]
 801ccd2:	681b      	ldr	r3, [r3, #0]
 801ccd4:	637b      	str	r3, [r7, #52]	; 0x34
 801ccd6:	e004      	b.n	801cce2 <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 801ccd8:	683b      	ldr	r3, [r7, #0]
 801ccda:	1d1a      	adds	r2, r3, #4
 801ccdc:	603a      	str	r2, [r7, #0]
 801ccde:	681b      	ldr	r3, [r3, #0]
 801cce0:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801cce2:	68bb      	ldr	r3, [r7, #8]
 801cce4:	1e5a      	subs	r2, r3, #1
 801cce6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801cce8:	68fb      	ldr	r3, [r7, #12]
 801ccea:	1acb      	subs	r3, r1, r3
 801ccec:	1ad1      	subs	r1, r2, r3
 801ccee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ccf0:	6a3b      	ldr	r3, [r7, #32]
 801ccf2:	9302      	str	r3, [sp, #8]
 801ccf4:	69bb      	ldr	r3, [r7, #24]
 801ccf6:	9301      	str	r3, [sp, #4]
 801ccf8:	69fb      	ldr	r3, [r7, #28]
 801ccfa:	9300      	str	r3, [sp, #0]
 801ccfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ccfe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801cd00:	f7ff fde0 	bl	801c8c4 <ee_number>
 801cd04:	62f8      	str	r0, [r7, #44]	; 0x2c
 801cd06:	e000      	b.n	801cd0a <tiny_vsnprintf_like+0x26a>
        continue;
 801cd08:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801cd0a:	687b      	ldr	r3, [r7, #4]
 801cd0c:	3301      	adds	r3, #1
 801cd0e:	607b      	str	r3, [r7, #4]
 801cd10:	687b      	ldr	r3, [r7, #4]
 801cd12:	781b      	ldrb	r3, [r3, #0]
 801cd14:	2b00      	cmp	r3, #0
 801cd16:	f47f aed2 	bne.w	801cabe <tiny_vsnprintf_like+0x1e>
 801cd1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cd1c:	68fb      	ldr	r3, [r7, #12]
 801cd1e:	1ad2      	subs	r2, r2, r3
 801cd20:	68bb      	ldr	r3, [r7, #8]
 801cd22:	3b01      	subs	r3, #1
 801cd24:	429a      	cmp	r2, r3
 801cd26:	f6bf aeca 	bge.w	801cabe <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 801cd2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cd2c:	2200      	movs	r2, #0
 801cd2e:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801cd30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cd32:	68fb      	ldr	r3, [r7, #12]
 801cd34:	1ad3      	subs	r3, r2, r3
}
 801cd36:	4618      	mov	r0, r3
 801cd38:	3738      	adds	r7, #56	; 0x38
 801cd3a:	46bd      	mov	sp, r7
 801cd3c:	bd80      	pop	{r7, pc}
 801cd3e:	bf00      	nop
 801cd40:	0801e4dc 	.word	0x0801e4dc

0801cd44 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801cd44:	b580      	push	{r7, lr}
 801cd46:	b090      	sub	sp, #64	; 0x40
 801cd48:	af00      	add	r7, sp, #0
 801cd4a:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801cd4c:	4b73      	ldr	r3, [pc, #460]	; (801cf1c <UTIL_SEQ_Run+0x1d8>)
 801cd4e:	681b      	ldr	r3, [r3, #0]
 801cd50:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801cd52:	4b72      	ldr	r3, [pc, #456]	; (801cf1c <UTIL_SEQ_Run+0x1d8>)
 801cd54:	681a      	ldr	r2, [r3, #0]
 801cd56:	687b      	ldr	r3, [r7, #4]
 801cd58:	4013      	ands	r3, r2
 801cd5a:	4a70      	ldr	r2, [pc, #448]	; (801cf1c <UTIL_SEQ_Run+0x1d8>)
 801cd5c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801cd5e:	4b70      	ldr	r3, [pc, #448]	; (801cf20 <UTIL_SEQ_Run+0x1dc>)
 801cd60:	681b      	ldr	r3, [r3, #0]
 801cd62:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801cd64:	4b6f      	ldr	r3, [pc, #444]	; (801cf24 <UTIL_SEQ_Run+0x1e0>)
 801cd66:	681b      	ldr	r3, [r3, #0]
 801cd68:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801cd6a:	4b6f      	ldr	r3, [pc, #444]	; (801cf28 <UTIL_SEQ_Run+0x1e4>)
 801cd6c:	681b      	ldr	r3, [r3, #0]
 801cd6e:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 801cd70:	4b6e      	ldr	r3, [pc, #440]	; (801cf2c <UTIL_SEQ_Run+0x1e8>)
 801cd72:	681b      	ldr	r3, [r3, #0]
 801cd74:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801cd76:	e08d      	b.n	801ce94 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801cd78:	2300      	movs	r3, #0
 801cd7a:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801cd7c:	e002      	b.n	801cd84 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801cd7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cd80:	3301      	adds	r3, #1
 801cd82:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801cd84:	4a6a      	ldr	r2, [pc, #424]	; (801cf30 <UTIL_SEQ_Run+0x1ec>)
 801cd86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cd88:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801cd8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cd8e:	401a      	ands	r2, r3
 801cd90:	4b62      	ldr	r3, [pc, #392]	; (801cf1c <UTIL_SEQ_Run+0x1d8>)
 801cd92:	681b      	ldr	r3, [r3, #0]
 801cd94:	4013      	ands	r3, r2
 801cd96:	2b00      	cmp	r3, #0
 801cd98:	d0f1      	beq.n	801cd7e <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801cd9a:	4a65      	ldr	r2, [pc, #404]	; (801cf30 <UTIL_SEQ_Run+0x1ec>)
 801cd9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cd9e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801cda2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cda4:	401a      	ands	r2, r3
 801cda6:	4b5d      	ldr	r3, [pc, #372]	; (801cf1c <UTIL_SEQ_Run+0x1d8>)
 801cda8:	681b      	ldr	r3, [r3, #0]
 801cdaa:	4013      	ands	r3, r2
 801cdac:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801cdae:	4a60      	ldr	r2, [pc, #384]	; (801cf30 <UTIL_SEQ_Run+0x1ec>)
 801cdb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cdb2:	00db      	lsls	r3, r3, #3
 801cdb4:	4413      	add	r3, r2
 801cdb6:	685a      	ldr	r2, [r3, #4]
 801cdb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cdba:	4013      	ands	r3, r2
 801cdbc:	2b00      	cmp	r3, #0
 801cdbe:	d106      	bne.n	801cdce <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801cdc0:	4a5b      	ldr	r2, [pc, #364]	; (801cf30 <UTIL_SEQ_Run+0x1ec>)
 801cdc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cdc4:	00db      	lsls	r3, r3, #3
 801cdc6:	4413      	add	r3, r2
 801cdc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801cdcc:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801cdce:	4a58      	ldr	r2, [pc, #352]	; (801cf30 <UTIL_SEQ_Run+0x1ec>)
 801cdd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cdd2:	00db      	lsls	r3, r3, #3
 801cdd4:	4413      	add	r3, r2
 801cdd6:	685a      	ldr	r2, [r3, #4]
 801cdd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cdda:	4013      	ands	r3, r2
 801cddc:	4618      	mov	r0, r3
 801cdde:	f000 f907 	bl	801cff0 <SEQ_BitPosition>
 801cde2:	4603      	mov	r3, r0
 801cde4:	461a      	mov	r2, r3
 801cde6:	4b53      	ldr	r3, [pc, #332]	; (801cf34 <UTIL_SEQ_Run+0x1f0>)
 801cde8:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801cdea:	4a51      	ldr	r2, [pc, #324]	; (801cf30 <UTIL_SEQ_Run+0x1ec>)
 801cdec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cdee:	00db      	lsls	r3, r3, #3
 801cdf0:	4413      	add	r3, r2
 801cdf2:	685a      	ldr	r2, [r3, #4]
 801cdf4:	4b4f      	ldr	r3, [pc, #316]	; (801cf34 <UTIL_SEQ_Run+0x1f0>)
 801cdf6:	681b      	ldr	r3, [r3, #0]
 801cdf8:	2101      	movs	r1, #1
 801cdfa:	fa01 f303 	lsl.w	r3, r1, r3
 801cdfe:	43db      	mvns	r3, r3
 801ce00:	401a      	ands	r2, r3
 801ce02:	494b      	ldr	r1, [pc, #300]	; (801cf30 <UTIL_SEQ_Run+0x1ec>)
 801ce04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ce06:	00db      	lsls	r3, r3, #3
 801ce08:	440b      	add	r3, r1
 801ce0a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ce0c:	f3ef 8310 	mrs	r3, PRIMASK
 801ce10:	61bb      	str	r3, [r7, #24]
  return(result);
 801ce12:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801ce14:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801ce16:	b672      	cpsid	i
}
 801ce18:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801ce1a:	4b46      	ldr	r3, [pc, #280]	; (801cf34 <UTIL_SEQ_Run+0x1f0>)
 801ce1c:	681b      	ldr	r3, [r3, #0]
 801ce1e:	2201      	movs	r2, #1
 801ce20:	fa02 f303 	lsl.w	r3, r2, r3
 801ce24:	43da      	mvns	r2, r3
 801ce26:	4b3e      	ldr	r3, [pc, #248]	; (801cf20 <UTIL_SEQ_Run+0x1dc>)
 801ce28:	681b      	ldr	r3, [r3, #0]
 801ce2a:	4013      	ands	r3, r2
 801ce2c:	4a3c      	ldr	r2, [pc, #240]	; (801cf20 <UTIL_SEQ_Run+0x1dc>)
 801ce2e:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801ce30:	2301      	movs	r3, #1
 801ce32:	63fb      	str	r3, [r7, #60]	; 0x3c
 801ce34:	e013      	b.n	801ce5e <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801ce36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ce38:	3b01      	subs	r3, #1
 801ce3a:	4a3d      	ldr	r2, [pc, #244]	; (801cf30 <UTIL_SEQ_Run+0x1ec>)
 801ce3c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801ce40:	4b3c      	ldr	r3, [pc, #240]	; (801cf34 <UTIL_SEQ_Run+0x1f0>)
 801ce42:	681b      	ldr	r3, [r3, #0]
 801ce44:	2201      	movs	r2, #1
 801ce46:	fa02 f303 	lsl.w	r3, r2, r3
 801ce4a:	43da      	mvns	r2, r3
 801ce4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ce4e:	3b01      	subs	r3, #1
 801ce50:	400a      	ands	r2, r1
 801ce52:	4937      	ldr	r1, [pc, #220]	; (801cf30 <UTIL_SEQ_Run+0x1ec>)
 801ce54:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801ce58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ce5a:	3b01      	subs	r3, #1
 801ce5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801ce5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ce60:	2b00      	cmp	r3, #0
 801ce62:	d1e8      	bne.n	801ce36 <UTIL_SEQ_Run+0xf2>
 801ce64:	6a3b      	ldr	r3, [r7, #32]
 801ce66:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ce68:	697b      	ldr	r3, [r7, #20]
 801ce6a:	f383 8810 	msr	PRIMASK, r3
}
 801ce6e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801ce70:	4b30      	ldr	r3, [pc, #192]	; (801cf34 <UTIL_SEQ_Run+0x1f0>)
 801ce72:	681b      	ldr	r3, [r3, #0]
 801ce74:	4a30      	ldr	r2, [pc, #192]	; (801cf38 <UTIL_SEQ_Run+0x1f4>)
 801ce76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ce7a:	4798      	blx	r3

    local_taskset = TaskSet;
 801ce7c:	4b28      	ldr	r3, [pc, #160]	; (801cf20 <UTIL_SEQ_Run+0x1dc>)
 801ce7e:	681b      	ldr	r3, [r3, #0]
 801ce80:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 801ce82:	4b28      	ldr	r3, [pc, #160]	; (801cf24 <UTIL_SEQ_Run+0x1e0>)
 801ce84:	681b      	ldr	r3, [r3, #0]
 801ce86:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 801ce88:	4b27      	ldr	r3, [pc, #156]	; (801cf28 <UTIL_SEQ_Run+0x1e4>)
 801ce8a:	681b      	ldr	r3, [r3, #0]
 801ce8c:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 801ce8e:	4b27      	ldr	r3, [pc, #156]	; (801cf2c <UTIL_SEQ_Run+0x1e8>)
 801ce90:	681b      	ldr	r3, [r3, #0]
 801ce92:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801ce94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ce96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ce98:	401a      	ands	r2, r3
 801ce9a:	4b20      	ldr	r3, [pc, #128]	; (801cf1c <UTIL_SEQ_Run+0x1d8>)
 801ce9c:	681b      	ldr	r3, [r3, #0]
 801ce9e:	4013      	ands	r3, r2
 801cea0:	2b00      	cmp	r3, #0
 801cea2:	d005      	beq.n	801ceb0 <UTIL_SEQ_Run+0x16c>
 801cea4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801cea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cea8:	4013      	ands	r3, r2
 801ceaa:	2b00      	cmp	r3, #0
 801ceac:	f43f af64 	beq.w	801cd78 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801ceb0:	4b20      	ldr	r3, [pc, #128]	; (801cf34 <UTIL_SEQ_Run+0x1f0>)
 801ceb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801ceb6:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801ceb8:	f000 f88e 	bl	801cfd8 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cebc:	f3ef 8310 	mrs	r3, PRIMASK
 801cec0:	613b      	str	r3, [r7, #16]
  return(result);
 801cec2:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801cec4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801cec6:	b672      	cpsid	i
}
 801cec8:	bf00      	nop
  local_taskset = TaskSet;
 801ceca:	4b15      	ldr	r3, [pc, #84]	; (801cf20 <UTIL_SEQ_Run+0x1dc>)
 801cecc:	681b      	ldr	r3, [r3, #0]
 801cece:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801ced0:	4b14      	ldr	r3, [pc, #80]	; (801cf24 <UTIL_SEQ_Run+0x1e0>)
 801ced2:	681b      	ldr	r3, [r3, #0]
 801ced4:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801ced6:	4b14      	ldr	r3, [pc, #80]	; (801cf28 <UTIL_SEQ_Run+0x1e4>)
 801ced8:	681b      	ldr	r3, [r3, #0]
 801ceda:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801cedc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801cede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cee0:	401a      	ands	r2, r3
 801cee2:	4b0e      	ldr	r3, [pc, #56]	; (801cf1c <UTIL_SEQ_Run+0x1d8>)
 801cee4:	681b      	ldr	r3, [r3, #0]
 801cee6:	4013      	ands	r3, r2
 801cee8:	2b00      	cmp	r3, #0
 801ceea:	d107      	bne.n	801cefc <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801ceec:	4b0f      	ldr	r3, [pc, #60]	; (801cf2c <UTIL_SEQ_Run+0x1e8>)
 801ceee:	681a      	ldr	r2, [r3, #0]
 801cef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cef2:	4013      	ands	r3, r2
 801cef4:	2b00      	cmp	r3, #0
 801cef6:	d101      	bne.n	801cefc <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801cef8:	f7e5 f858 	bl	8001fac <UTIL_SEQ_Idle>
 801cefc:	69fb      	ldr	r3, [r7, #28]
 801cefe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cf00:	68fb      	ldr	r3, [r7, #12]
 801cf02:	f383 8810 	msr	PRIMASK, r3
}
 801cf06:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801cf08:	f000 f86c 	bl	801cfe4 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801cf0c:	4a03      	ldr	r2, [pc, #12]	; (801cf1c <UTIL_SEQ_Run+0x1d8>)
 801cf0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cf10:	6013      	str	r3, [r2, #0]

  return;
 801cf12:	bf00      	nop
}
 801cf14:	3740      	adds	r7, #64	; 0x40
 801cf16:	46bd      	mov	sp, r7
 801cf18:	bd80      	pop	{r7, pc}
 801cf1a:	bf00      	nop
 801cf1c:	20000144 	.word	0x20000144
 801cf20:	20001c8c 	.word	0x20001c8c
 801cf24:	20001c90 	.word	0x20001c90
 801cf28:	20000140 	.word	0x20000140
 801cf2c:	20001c94 	.word	0x20001c94
 801cf30:	20001cac 	.word	0x20001cac
 801cf34:	20001c98 	.word	0x20001c98
 801cf38:	20001c9c 	.word	0x20001c9c

0801cf3c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801cf3c:	b580      	push	{r7, lr}
 801cf3e:	b088      	sub	sp, #32
 801cf40:	af00      	add	r7, sp, #0
 801cf42:	60f8      	str	r0, [r7, #12]
 801cf44:	60b9      	str	r1, [r7, #8]
 801cf46:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cf48:	f3ef 8310 	mrs	r3, PRIMASK
 801cf4c:	617b      	str	r3, [r7, #20]
  return(result);
 801cf4e:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801cf50:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801cf52:	b672      	cpsid	i
}
 801cf54:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801cf56:	68f8      	ldr	r0, [r7, #12]
 801cf58:	f000 f84a 	bl	801cff0 <SEQ_BitPosition>
 801cf5c:	4603      	mov	r3, r0
 801cf5e:	4619      	mov	r1, r3
 801cf60:	4a06      	ldr	r2, [pc, #24]	; (801cf7c <UTIL_SEQ_RegTask+0x40>)
 801cf62:	687b      	ldr	r3, [r7, #4]
 801cf64:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801cf68:	69fb      	ldr	r3, [r7, #28]
 801cf6a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cf6c:	69bb      	ldr	r3, [r7, #24]
 801cf6e:	f383 8810 	msr	PRIMASK, r3
}
 801cf72:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801cf74:	bf00      	nop
}
 801cf76:	3720      	adds	r7, #32
 801cf78:	46bd      	mov	sp, r7
 801cf7a:	bd80      	pop	{r7, pc}
 801cf7c:	20001c9c 	.word	0x20001c9c

0801cf80 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801cf80:	b480      	push	{r7}
 801cf82:	b087      	sub	sp, #28
 801cf84:	af00      	add	r7, sp, #0
 801cf86:	6078      	str	r0, [r7, #4]
 801cf88:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cf8a:	f3ef 8310 	mrs	r3, PRIMASK
 801cf8e:	60fb      	str	r3, [r7, #12]
  return(result);
 801cf90:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801cf92:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801cf94:	b672      	cpsid	i
}
 801cf96:	bf00      	nop

  TaskSet |= TaskId_bm;
 801cf98:	4b0d      	ldr	r3, [pc, #52]	; (801cfd0 <UTIL_SEQ_SetTask+0x50>)
 801cf9a:	681a      	ldr	r2, [r3, #0]
 801cf9c:	687b      	ldr	r3, [r7, #4]
 801cf9e:	4313      	orrs	r3, r2
 801cfa0:	4a0b      	ldr	r2, [pc, #44]	; (801cfd0 <UTIL_SEQ_SetTask+0x50>)
 801cfa2:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801cfa4:	4a0b      	ldr	r2, [pc, #44]	; (801cfd4 <UTIL_SEQ_SetTask+0x54>)
 801cfa6:	683b      	ldr	r3, [r7, #0]
 801cfa8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801cfac:	687b      	ldr	r3, [r7, #4]
 801cfae:	431a      	orrs	r2, r3
 801cfb0:	4908      	ldr	r1, [pc, #32]	; (801cfd4 <UTIL_SEQ_SetTask+0x54>)
 801cfb2:	683b      	ldr	r3, [r7, #0]
 801cfb4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801cfb8:	697b      	ldr	r3, [r7, #20]
 801cfba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cfbc:	693b      	ldr	r3, [r7, #16]
 801cfbe:	f383 8810 	msr	PRIMASK, r3
}
 801cfc2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801cfc4:	bf00      	nop
}
 801cfc6:	371c      	adds	r7, #28
 801cfc8:	46bd      	mov	sp, r7
 801cfca:	bc80      	pop	{r7}
 801cfcc:	4770      	bx	lr
 801cfce:	bf00      	nop
 801cfd0:	20001c8c 	.word	0x20001c8c
 801cfd4:	20001cac 	.word	0x20001cac

0801cfd8 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801cfd8:	b480      	push	{r7}
 801cfda:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801cfdc:	bf00      	nop
}
 801cfde:	46bd      	mov	sp, r7
 801cfe0:	bc80      	pop	{r7}
 801cfe2:	4770      	bx	lr

0801cfe4 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801cfe4:	b480      	push	{r7}
 801cfe6:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801cfe8:	bf00      	nop
}
 801cfea:	46bd      	mov	sp, r7
 801cfec:	bc80      	pop	{r7}
 801cfee:	4770      	bx	lr

0801cff0 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801cff0:	b480      	push	{r7}
 801cff2:	b085      	sub	sp, #20
 801cff4:	af00      	add	r7, sp, #0
 801cff6:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801cff8:	2300      	movs	r3, #0
 801cffa:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801cffc:	687b      	ldr	r3, [r7, #4]
 801cffe:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801d000:	68bb      	ldr	r3, [r7, #8]
 801d002:	0c1b      	lsrs	r3, r3, #16
 801d004:	041b      	lsls	r3, r3, #16
 801d006:	2b00      	cmp	r3, #0
 801d008:	d104      	bne.n	801d014 <SEQ_BitPosition+0x24>
 801d00a:	2310      	movs	r3, #16
 801d00c:	73fb      	strb	r3, [r7, #15]
 801d00e:	68bb      	ldr	r3, [r7, #8]
 801d010:	041b      	lsls	r3, r3, #16
 801d012:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801d014:	68bb      	ldr	r3, [r7, #8]
 801d016:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801d01a:	2b00      	cmp	r3, #0
 801d01c:	d105      	bne.n	801d02a <SEQ_BitPosition+0x3a>
 801d01e:	7bfb      	ldrb	r3, [r7, #15]
 801d020:	3308      	adds	r3, #8
 801d022:	73fb      	strb	r3, [r7, #15]
 801d024:	68bb      	ldr	r3, [r7, #8]
 801d026:	021b      	lsls	r3, r3, #8
 801d028:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801d02a:	68bb      	ldr	r3, [r7, #8]
 801d02c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801d030:	2b00      	cmp	r3, #0
 801d032:	d105      	bne.n	801d040 <SEQ_BitPosition+0x50>
 801d034:	7bfb      	ldrb	r3, [r7, #15]
 801d036:	3304      	adds	r3, #4
 801d038:	73fb      	strb	r3, [r7, #15]
 801d03a:	68bb      	ldr	r3, [r7, #8]
 801d03c:	011b      	lsls	r3, r3, #4
 801d03e:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801d040:	68bb      	ldr	r3, [r7, #8]
 801d042:	0f1b      	lsrs	r3, r3, #28
 801d044:	4a06      	ldr	r2, [pc, #24]	; (801d060 <SEQ_BitPosition+0x70>)
 801d046:	5cd2      	ldrb	r2, [r2, r3]
 801d048:	7bfb      	ldrb	r3, [r7, #15]
 801d04a:	4413      	add	r3, r2
 801d04c:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801d04e:	7bfb      	ldrb	r3, [r7, #15]
 801d050:	f1c3 031f 	rsb	r3, r3, #31
 801d054:	b2db      	uxtb	r3, r3
}
 801d056:	4618      	mov	r0, r3
 801d058:	3714      	adds	r7, #20
 801d05a:	46bd      	mov	sp, r7
 801d05c:	bc80      	pop	{r7}
 801d05e:	4770      	bx	lr
 801d060:	0801eba4 	.word	0x0801eba4

0801d064 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801d064:	b580      	push	{r7, lr}
 801d066:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801d068:	4b04      	ldr	r3, [pc, #16]	; (801d07c <UTIL_TIMER_Init+0x18>)
 801d06a:	2200      	movs	r2, #0
 801d06c:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801d06e:	4b04      	ldr	r3, [pc, #16]	; (801d080 <UTIL_TIMER_Init+0x1c>)
 801d070:	681b      	ldr	r3, [r3, #0]
 801d072:	4798      	blx	r3
 801d074:	4603      	mov	r3, r0
}
 801d076:	4618      	mov	r0, r3
 801d078:	bd80      	pop	{r7, pc}
 801d07a:	bf00      	nop
 801d07c:	20001cb4 	.word	0x20001cb4
 801d080:	0801e59c 	.word	0x0801e59c

0801d084 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801d084:	b580      	push	{r7, lr}
 801d086:	b084      	sub	sp, #16
 801d088:	af00      	add	r7, sp, #0
 801d08a:	60f8      	str	r0, [r7, #12]
 801d08c:	60b9      	str	r1, [r7, #8]
 801d08e:	603b      	str	r3, [r7, #0]
 801d090:	4613      	mov	r3, r2
 801d092:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801d094:	68fb      	ldr	r3, [r7, #12]
 801d096:	2b00      	cmp	r3, #0
 801d098:	d023      	beq.n	801d0e2 <UTIL_TIMER_Create+0x5e>
 801d09a:	683b      	ldr	r3, [r7, #0]
 801d09c:	2b00      	cmp	r3, #0
 801d09e:	d020      	beq.n	801d0e2 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801d0a0:	68fb      	ldr	r3, [r7, #12]
 801d0a2:	2200      	movs	r2, #0
 801d0a4:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801d0a6:	4b11      	ldr	r3, [pc, #68]	; (801d0ec <UTIL_TIMER_Create+0x68>)
 801d0a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d0aa:	68b8      	ldr	r0, [r7, #8]
 801d0ac:	4798      	blx	r3
 801d0ae:	4602      	mov	r2, r0
 801d0b0:	68fb      	ldr	r3, [r7, #12]
 801d0b2:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801d0b4:	68fb      	ldr	r3, [r7, #12]
 801d0b6:	2200      	movs	r2, #0
 801d0b8:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801d0ba:	68fb      	ldr	r3, [r7, #12]
 801d0bc:	2200      	movs	r2, #0
 801d0be:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801d0c0:	68fb      	ldr	r3, [r7, #12]
 801d0c2:	2200      	movs	r2, #0
 801d0c4:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801d0c6:	68fb      	ldr	r3, [r7, #12]
 801d0c8:	683a      	ldr	r2, [r7, #0]
 801d0ca:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801d0cc:	68fb      	ldr	r3, [r7, #12]
 801d0ce:	69ba      	ldr	r2, [r7, #24]
 801d0d0:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801d0d2:	68fb      	ldr	r3, [r7, #12]
 801d0d4:	79fa      	ldrb	r2, [r7, #7]
 801d0d6:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801d0d8:	68fb      	ldr	r3, [r7, #12]
 801d0da:	2200      	movs	r2, #0
 801d0dc:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801d0de:	2300      	movs	r3, #0
 801d0e0:	e000      	b.n	801d0e4 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801d0e2:	2301      	movs	r3, #1
  }
}
 801d0e4:	4618      	mov	r0, r3
 801d0e6:	3710      	adds	r7, #16
 801d0e8:	46bd      	mov	sp, r7
 801d0ea:	bd80      	pop	{r7, pc}
 801d0ec:	0801e59c 	.word	0x0801e59c

0801d0f0 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801d0f0:	b580      	push	{r7, lr}
 801d0f2:	b08a      	sub	sp, #40	; 0x28
 801d0f4:	af00      	add	r7, sp, #0
 801d0f6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801d0f8:	2300      	movs	r3, #0
 801d0fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801d0fe:	687b      	ldr	r3, [r7, #4]
 801d100:	2b00      	cmp	r3, #0
 801d102:	d056      	beq.n	801d1b2 <UTIL_TIMER_Start+0xc2>
 801d104:	6878      	ldr	r0, [r7, #4]
 801d106:	f000 f9a9 	bl	801d45c <TimerExists>
 801d10a:	4603      	mov	r3, r0
 801d10c:	f083 0301 	eor.w	r3, r3, #1
 801d110:	b2db      	uxtb	r3, r3
 801d112:	2b00      	cmp	r3, #0
 801d114:	d04d      	beq.n	801d1b2 <UTIL_TIMER_Start+0xc2>
 801d116:	687b      	ldr	r3, [r7, #4]
 801d118:	7a5b      	ldrb	r3, [r3, #9]
 801d11a:	2b00      	cmp	r3, #0
 801d11c:	d149      	bne.n	801d1b2 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d11e:	f3ef 8310 	mrs	r3, PRIMASK
 801d122:	613b      	str	r3, [r7, #16]
  return(result);
 801d124:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801d126:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801d128:	b672      	cpsid	i
}
 801d12a:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801d12c:	687b      	ldr	r3, [r7, #4]
 801d12e:	685b      	ldr	r3, [r3, #4]
 801d130:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801d132:	4b24      	ldr	r3, [pc, #144]	; (801d1c4 <UTIL_TIMER_Start+0xd4>)
 801d134:	6a1b      	ldr	r3, [r3, #32]
 801d136:	4798      	blx	r3
 801d138:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801d13a:	6a3a      	ldr	r2, [r7, #32]
 801d13c:	69bb      	ldr	r3, [r7, #24]
 801d13e:	429a      	cmp	r2, r3
 801d140:	d201      	bcs.n	801d146 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801d142:	69bb      	ldr	r3, [r7, #24]
 801d144:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801d146:	687b      	ldr	r3, [r7, #4]
 801d148:	6a3a      	ldr	r2, [r7, #32]
 801d14a:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801d14c:	687b      	ldr	r3, [r7, #4]
 801d14e:	2200      	movs	r2, #0
 801d150:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801d152:	687b      	ldr	r3, [r7, #4]
 801d154:	2201      	movs	r2, #1
 801d156:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801d158:	687b      	ldr	r3, [r7, #4]
 801d15a:	2200      	movs	r2, #0
 801d15c:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801d15e:	4b1a      	ldr	r3, [pc, #104]	; (801d1c8 <UTIL_TIMER_Start+0xd8>)
 801d160:	681b      	ldr	r3, [r3, #0]
 801d162:	2b00      	cmp	r3, #0
 801d164:	d106      	bne.n	801d174 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801d166:	4b17      	ldr	r3, [pc, #92]	; (801d1c4 <UTIL_TIMER_Start+0xd4>)
 801d168:	691b      	ldr	r3, [r3, #16]
 801d16a:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801d16c:	6878      	ldr	r0, [r7, #4]
 801d16e:	f000 f9eb 	bl	801d548 <TimerInsertNewHeadTimer>
 801d172:	e017      	b.n	801d1a4 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801d174:	4b13      	ldr	r3, [pc, #76]	; (801d1c4 <UTIL_TIMER_Start+0xd4>)
 801d176:	699b      	ldr	r3, [r3, #24]
 801d178:	4798      	blx	r3
 801d17a:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801d17c:	687b      	ldr	r3, [r7, #4]
 801d17e:	681a      	ldr	r2, [r3, #0]
 801d180:	697b      	ldr	r3, [r7, #20]
 801d182:	441a      	add	r2, r3
 801d184:	687b      	ldr	r3, [r7, #4]
 801d186:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801d188:	687b      	ldr	r3, [r7, #4]
 801d18a:	681a      	ldr	r2, [r3, #0]
 801d18c:	4b0e      	ldr	r3, [pc, #56]	; (801d1c8 <UTIL_TIMER_Start+0xd8>)
 801d18e:	681b      	ldr	r3, [r3, #0]
 801d190:	681b      	ldr	r3, [r3, #0]
 801d192:	429a      	cmp	r2, r3
 801d194:	d203      	bcs.n	801d19e <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801d196:	6878      	ldr	r0, [r7, #4]
 801d198:	f000 f9d6 	bl	801d548 <TimerInsertNewHeadTimer>
 801d19c:	e002      	b.n	801d1a4 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801d19e:	6878      	ldr	r0, [r7, #4]
 801d1a0:	f000 f9a2 	bl	801d4e8 <TimerInsertTimer>
 801d1a4:	69fb      	ldr	r3, [r7, #28]
 801d1a6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d1a8:	68fb      	ldr	r3, [r7, #12]
 801d1aa:	f383 8810 	msr	PRIMASK, r3
}
 801d1ae:	bf00      	nop
  {
 801d1b0:	e002      	b.n	801d1b8 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801d1b2:	2301      	movs	r3, #1
 801d1b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 801d1b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801d1bc:	4618      	mov	r0, r3
 801d1be:	3728      	adds	r7, #40	; 0x28
 801d1c0:	46bd      	mov	sp, r7
 801d1c2:	bd80      	pop	{r7, pc}
 801d1c4:	0801e59c 	.word	0x0801e59c
 801d1c8:	20001cb4 	.word	0x20001cb4

0801d1cc <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801d1cc:	b580      	push	{r7, lr}
 801d1ce:	b088      	sub	sp, #32
 801d1d0:	af00      	add	r7, sp, #0
 801d1d2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801d1d4:	2300      	movs	r3, #0
 801d1d6:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801d1d8:	687b      	ldr	r3, [r7, #4]
 801d1da:	2b00      	cmp	r3, #0
 801d1dc:	d05b      	beq.n	801d296 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d1de:	f3ef 8310 	mrs	r3, PRIMASK
 801d1e2:	60fb      	str	r3, [r7, #12]
  return(result);
 801d1e4:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801d1e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801d1e8:	b672      	cpsid	i
}
 801d1ea:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801d1ec:	4b2d      	ldr	r3, [pc, #180]	; (801d2a4 <UTIL_TIMER_Stop+0xd8>)
 801d1ee:	681b      	ldr	r3, [r3, #0]
 801d1f0:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801d1f2:	4b2c      	ldr	r3, [pc, #176]	; (801d2a4 <UTIL_TIMER_Stop+0xd8>)
 801d1f4:	681b      	ldr	r3, [r3, #0]
 801d1f6:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801d1f8:	687b      	ldr	r3, [r7, #4]
 801d1fa:	2201      	movs	r2, #1
 801d1fc:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801d1fe:	4b29      	ldr	r3, [pc, #164]	; (801d2a4 <UTIL_TIMER_Stop+0xd8>)
 801d200:	681b      	ldr	r3, [r3, #0]
 801d202:	2b00      	cmp	r3, #0
 801d204:	d041      	beq.n	801d28a <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801d206:	687b      	ldr	r3, [r7, #4]
 801d208:	2200      	movs	r2, #0
 801d20a:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801d20c:	4b25      	ldr	r3, [pc, #148]	; (801d2a4 <UTIL_TIMER_Stop+0xd8>)
 801d20e:	681b      	ldr	r3, [r3, #0]
 801d210:	687a      	ldr	r2, [r7, #4]
 801d212:	429a      	cmp	r2, r3
 801d214:	d134      	bne.n	801d280 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801d216:	4b23      	ldr	r3, [pc, #140]	; (801d2a4 <UTIL_TIMER_Stop+0xd8>)
 801d218:	681b      	ldr	r3, [r3, #0]
 801d21a:	2200      	movs	r2, #0
 801d21c:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801d21e:	4b21      	ldr	r3, [pc, #132]	; (801d2a4 <UTIL_TIMER_Stop+0xd8>)
 801d220:	681b      	ldr	r3, [r3, #0]
 801d222:	695b      	ldr	r3, [r3, #20]
 801d224:	2b00      	cmp	r3, #0
 801d226:	d00a      	beq.n	801d23e <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801d228:	4b1e      	ldr	r3, [pc, #120]	; (801d2a4 <UTIL_TIMER_Stop+0xd8>)
 801d22a:	681b      	ldr	r3, [r3, #0]
 801d22c:	695b      	ldr	r3, [r3, #20]
 801d22e:	4a1d      	ldr	r2, [pc, #116]	; (801d2a4 <UTIL_TIMER_Stop+0xd8>)
 801d230:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801d232:	4b1c      	ldr	r3, [pc, #112]	; (801d2a4 <UTIL_TIMER_Stop+0xd8>)
 801d234:	681b      	ldr	r3, [r3, #0]
 801d236:	4618      	mov	r0, r3
 801d238:	f000 f92c 	bl	801d494 <TimerSetTimeout>
 801d23c:	e023      	b.n	801d286 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801d23e:	4b1a      	ldr	r3, [pc, #104]	; (801d2a8 <UTIL_TIMER_Stop+0xdc>)
 801d240:	68db      	ldr	r3, [r3, #12]
 801d242:	4798      	blx	r3
            TimerListHead = NULL;
 801d244:	4b17      	ldr	r3, [pc, #92]	; (801d2a4 <UTIL_TIMER_Stop+0xd8>)
 801d246:	2200      	movs	r2, #0
 801d248:	601a      	str	r2, [r3, #0]
 801d24a:	e01c      	b.n	801d286 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801d24c:	697a      	ldr	r2, [r7, #20]
 801d24e:	687b      	ldr	r3, [r7, #4]
 801d250:	429a      	cmp	r2, r3
 801d252:	d110      	bne.n	801d276 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801d254:	697b      	ldr	r3, [r7, #20]
 801d256:	695b      	ldr	r3, [r3, #20]
 801d258:	2b00      	cmp	r3, #0
 801d25a:	d006      	beq.n	801d26a <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801d25c:	697b      	ldr	r3, [r7, #20]
 801d25e:	695b      	ldr	r3, [r3, #20]
 801d260:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801d262:	69bb      	ldr	r3, [r7, #24]
 801d264:	697a      	ldr	r2, [r7, #20]
 801d266:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801d268:	e00d      	b.n	801d286 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801d26a:	2300      	movs	r3, #0
 801d26c:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801d26e:	69bb      	ldr	r3, [r7, #24]
 801d270:	697a      	ldr	r2, [r7, #20]
 801d272:	615a      	str	r2, [r3, #20]
            break;
 801d274:	e007      	b.n	801d286 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801d276:	697b      	ldr	r3, [r7, #20]
 801d278:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801d27a:	697b      	ldr	r3, [r7, #20]
 801d27c:	695b      	ldr	r3, [r3, #20]
 801d27e:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801d280:	697b      	ldr	r3, [r7, #20]
 801d282:	2b00      	cmp	r3, #0
 801d284:	d1e2      	bne.n	801d24c <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801d286:	2300      	movs	r3, #0
 801d288:	77fb      	strb	r3, [r7, #31]
 801d28a:	693b      	ldr	r3, [r7, #16]
 801d28c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d28e:	68bb      	ldr	r3, [r7, #8]
 801d290:	f383 8810 	msr	PRIMASK, r3
}
 801d294:	e001      	b.n	801d29a <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801d296:	2301      	movs	r3, #1
 801d298:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801d29a:	7ffb      	ldrb	r3, [r7, #31]
}
 801d29c:	4618      	mov	r0, r3
 801d29e:	3720      	adds	r7, #32
 801d2a0:	46bd      	mov	sp, r7
 801d2a2:	bd80      	pop	{r7, pc}
 801d2a4:	20001cb4 	.word	0x20001cb4
 801d2a8:	0801e59c 	.word	0x0801e59c

0801d2ac <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801d2ac:	b580      	push	{r7, lr}
 801d2ae:	b084      	sub	sp, #16
 801d2b0:	af00      	add	r7, sp, #0
 801d2b2:	6078      	str	r0, [r7, #4]
 801d2b4:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801d2b6:	2300      	movs	r3, #0
 801d2b8:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801d2ba:	687b      	ldr	r3, [r7, #4]
 801d2bc:	2b00      	cmp	r3, #0
 801d2be:	d102      	bne.n	801d2c6 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801d2c0:	2301      	movs	r3, #1
 801d2c2:	73fb      	strb	r3, [r7, #15]
 801d2c4:	e014      	b.n	801d2f0 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801d2c6:	4b0d      	ldr	r3, [pc, #52]	; (801d2fc <UTIL_TIMER_SetPeriod+0x50>)
 801d2c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d2ca:	6838      	ldr	r0, [r7, #0]
 801d2cc:	4798      	blx	r3
 801d2ce:	4602      	mov	r2, r0
 801d2d0:	687b      	ldr	r3, [r7, #4]
 801d2d2:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801d2d4:	6878      	ldr	r0, [r7, #4]
 801d2d6:	f000 f8c1 	bl	801d45c <TimerExists>
 801d2da:	4603      	mov	r3, r0
 801d2dc:	2b00      	cmp	r3, #0
 801d2de:	d007      	beq.n	801d2f0 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801d2e0:	6878      	ldr	r0, [r7, #4]
 801d2e2:	f7ff ff73 	bl	801d1cc <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801d2e6:	6878      	ldr	r0, [r7, #4]
 801d2e8:	f7ff ff02 	bl	801d0f0 <UTIL_TIMER_Start>
 801d2ec:	4603      	mov	r3, r0
 801d2ee:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801d2f0:	7bfb      	ldrb	r3, [r7, #15]
}
 801d2f2:	4618      	mov	r0, r3
 801d2f4:	3710      	adds	r7, #16
 801d2f6:	46bd      	mov	sp, r7
 801d2f8:	bd80      	pop	{r7, pc}
 801d2fa:	bf00      	nop
 801d2fc:	0801e59c 	.word	0x0801e59c

0801d300 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801d300:	b590      	push	{r4, r7, lr}
 801d302:	b089      	sub	sp, #36	; 0x24
 801d304:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d306:	f3ef 8310 	mrs	r3, PRIMASK
 801d30a:	60bb      	str	r3, [r7, #8]
  return(result);
 801d30c:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801d30e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801d310:	b672      	cpsid	i
}
 801d312:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801d314:	4b38      	ldr	r3, [pc, #224]	; (801d3f8 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801d316:	695b      	ldr	r3, [r3, #20]
 801d318:	4798      	blx	r3
 801d31a:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801d31c:	4b36      	ldr	r3, [pc, #216]	; (801d3f8 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801d31e:	691b      	ldr	r3, [r3, #16]
 801d320:	4798      	blx	r3
 801d322:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801d324:	693a      	ldr	r2, [r7, #16]
 801d326:	697b      	ldr	r3, [r7, #20]
 801d328:	1ad3      	subs	r3, r2, r3
 801d32a:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801d32c:	4b33      	ldr	r3, [pc, #204]	; (801d3fc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d32e:	681b      	ldr	r3, [r3, #0]
 801d330:	2b00      	cmp	r3, #0
 801d332:	d037      	beq.n	801d3a4 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801d334:	4b31      	ldr	r3, [pc, #196]	; (801d3fc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d336:	681b      	ldr	r3, [r3, #0]
 801d338:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801d33a:	69fb      	ldr	r3, [r7, #28]
 801d33c:	681b      	ldr	r3, [r3, #0]
 801d33e:	68fa      	ldr	r2, [r7, #12]
 801d340:	429a      	cmp	r2, r3
 801d342:	d206      	bcs.n	801d352 <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801d344:	69fb      	ldr	r3, [r7, #28]
 801d346:	681a      	ldr	r2, [r3, #0]
 801d348:	68fb      	ldr	r3, [r7, #12]
 801d34a:	1ad2      	subs	r2, r2, r3
 801d34c:	69fb      	ldr	r3, [r7, #28]
 801d34e:	601a      	str	r2, [r3, #0]
 801d350:	e002      	b.n	801d358 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801d352:	69fb      	ldr	r3, [r7, #28]
 801d354:	2200      	movs	r2, #0
 801d356:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801d358:	69fb      	ldr	r3, [r7, #28]
 801d35a:	695b      	ldr	r3, [r3, #20]
 801d35c:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801d35e:	69fb      	ldr	r3, [r7, #28]
 801d360:	2b00      	cmp	r3, #0
 801d362:	d1ea      	bne.n	801d33a <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801d364:	e01e      	b.n	801d3a4 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801d366:	4b25      	ldr	r3, [pc, #148]	; (801d3fc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d368:	681b      	ldr	r3, [r3, #0]
 801d36a:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801d36c:	4b23      	ldr	r3, [pc, #140]	; (801d3fc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d36e:	681b      	ldr	r3, [r3, #0]
 801d370:	695b      	ldr	r3, [r3, #20]
 801d372:	4a22      	ldr	r2, [pc, #136]	; (801d3fc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d374:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801d376:	69fb      	ldr	r3, [r7, #28]
 801d378:	2200      	movs	r2, #0
 801d37a:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801d37c:	69fb      	ldr	r3, [r7, #28]
 801d37e:	2200      	movs	r2, #0
 801d380:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801d382:	69fb      	ldr	r3, [r7, #28]
 801d384:	68db      	ldr	r3, [r3, #12]
 801d386:	69fa      	ldr	r2, [r7, #28]
 801d388:	6912      	ldr	r2, [r2, #16]
 801d38a:	4610      	mov	r0, r2
 801d38c:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801d38e:	69fb      	ldr	r3, [r7, #28]
 801d390:	7adb      	ldrb	r3, [r3, #11]
 801d392:	2b01      	cmp	r3, #1
 801d394:	d106      	bne.n	801d3a4 <UTIL_TIMER_IRQ_Handler+0xa4>
 801d396:	69fb      	ldr	r3, [r7, #28]
 801d398:	7a9b      	ldrb	r3, [r3, #10]
 801d39a:	2b00      	cmp	r3, #0
 801d39c:	d102      	bne.n	801d3a4 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801d39e:	69f8      	ldr	r0, [r7, #28]
 801d3a0:	f7ff fea6 	bl	801d0f0 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801d3a4:	4b15      	ldr	r3, [pc, #84]	; (801d3fc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d3a6:	681b      	ldr	r3, [r3, #0]
 801d3a8:	2b00      	cmp	r3, #0
 801d3aa:	d00d      	beq.n	801d3c8 <UTIL_TIMER_IRQ_Handler+0xc8>
 801d3ac:	4b13      	ldr	r3, [pc, #76]	; (801d3fc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d3ae:	681b      	ldr	r3, [r3, #0]
 801d3b0:	681b      	ldr	r3, [r3, #0]
 801d3b2:	2b00      	cmp	r3, #0
 801d3b4:	d0d7      	beq.n	801d366 <UTIL_TIMER_IRQ_Handler+0x66>
 801d3b6:	4b11      	ldr	r3, [pc, #68]	; (801d3fc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d3b8:	681b      	ldr	r3, [r3, #0]
 801d3ba:	681c      	ldr	r4, [r3, #0]
 801d3bc:	4b0e      	ldr	r3, [pc, #56]	; (801d3f8 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801d3be:	699b      	ldr	r3, [r3, #24]
 801d3c0:	4798      	blx	r3
 801d3c2:	4603      	mov	r3, r0
 801d3c4:	429c      	cmp	r4, r3
 801d3c6:	d3ce      	bcc.n	801d366 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801d3c8:	4b0c      	ldr	r3, [pc, #48]	; (801d3fc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d3ca:	681b      	ldr	r3, [r3, #0]
 801d3cc:	2b00      	cmp	r3, #0
 801d3ce:	d009      	beq.n	801d3e4 <UTIL_TIMER_IRQ_Handler+0xe4>
 801d3d0:	4b0a      	ldr	r3, [pc, #40]	; (801d3fc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d3d2:	681b      	ldr	r3, [r3, #0]
 801d3d4:	7a1b      	ldrb	r3, [r3, #8]
 801d3d6:	2b00      	cmp	r3, #0
 801d3d8:	d104      	bne.n	801d3e4 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801d3da:	4b08      	ldr	r3, [pc, #32]	; (801d3fc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d3dc:	681b      	ldr	r3, [r3, #0]
 801d3de:	4618      	mov	r0, r3
 801d3e0:	f000 f858 	bl	801d494 <TimerSetTimeout>
 801d3e4:	69bb      	ldr	r3, [r7, #24]
 801d3e6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d3e8:	687b      	ldr	r3, [r7, #4]
 801d3ea:	f383 8810 	msr	PRIMASK, r3
}
 801d3ee:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801d3f0:	bf00      	nop
 801d3f2:	3724      	adds	r7, #36	; 0x24
 801d3f4:	46bd      	mov	sp, r7
 801d3f6:	bd90      	pop	{r4, r7, pc}
 801d3f8:	0801e59c 	.word	0x0801e59c
 801d3fc:	20001cb4 	.word	0x20001cb4

0801d400 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801d400:	b580      	push	{r7, lr}
 801d402:	b082      	sub	sp, #8
 801d404:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801d406:	4b06      	ldr	r3, [pc, #24]	; (801d420 <UTIL_TIMER_GetCurrentTime+0x20>)
 801d408:	69db      	ldr	r3, [r3, #28]
 801d40a:	4798      	blx	r3
 801d40c:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801d40e:	4b04      	ldr	r3, [pc, #16]	; (801d420 <UTIL_TIMER_GetCurrentTime+0x20>)
 801d410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d412:	6878      	ldr	r0, [r7, #4]
 801d414:	4798      	blx	r3
 801d416:	4603      	mov	r3, r0
}
 801d418:	4618      	mov	r0, r3
 801d41a:	3708      	adds	r7, #8
 801d41c:	46bd      	mov	sp, r7
 801d41e:	bd80      	pop	{r7, pc}
 801d420:	0801e59c 	.word	0x0801e59c

0801d424 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801d424:	b580      	push	{r7, lr}
 801d426:	b084      	sub	sp, #16
 801d428:	af00      	add	r7, sp, #0
 801d42a:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801d42c:	4b0a      	ldr	r3, [pc, #40]	; (801d458 <UTIL_TIMER_GetElapsedTime+0x34>)
 801d42e:	69db      	ldr	r3, [r3, #28]
 801d430:	4798      	blx	r3
 801d432:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801d434:	4b08      	ldr	r3, [pc, #32]	; (801d458 <UTIL_TIMER_GetElapsedTime+0x34>)
 801d436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d438:	6878      	ldr	r0, [r7, #4]
 801d43a:	4798      	blx	r3
 801d43c:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801d43e:	4b06      	ldr	r3, [pc, #24]	; (801d458 <UTIL_TIMER_GetElapsedTime+0x34>)
 801d440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d442:	68f9      	ldr	r1, [r7, #12]
 801d444:	68ba      	ldr	r2, [r7, #8]
 801d446:	1a8a      	subs	r2, r1, r2
 801d448:	4610      	mov	r0, r2
 801d44a:	4798      	blx	r3
 801d44c:	4603      	mov	r3, r0
}
 801d44e:	4618      	mov	r0, r3
 801d450:	3710      	adds	r7, #16
 801d452:	46bd      	mov	sp, r7
 801d454:	bd80      	pop	{r7, pc}
 801d456:	bf00      	nop
 801d458:	0801e59c 	.word	0x0801e59c

0801d45c <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801d45c:	b480      	push	{r7}
 801d45e:	b085      	sub	sp, #20
 801d460:	af00      	add	r7, sp, #0
 801d462:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801d464:	4b0a      	ldr	r3, [pc, #40]	; (801d490 <TimerExists+0x34>)
 801d466:	681b      	ldr	r3, [r3, #0]
 801d468:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801d46a:	e008      	b.n	801d47e <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801d46c:	68fa      	ldr	r2, [r7, #12]
 801d46e:	687b      	ldr	r3, [r7, #4]
 801d470:	429a      	cmp	r2, r3
 801d472:	d101      	bne.n	801d478 <TimerExists+0x1c>
    {
      return true;
 801d474:	2301      	movs	r3, #1
 801d476:	e006      	b.n	801d486 <TimerExists+0x2a>
    }
    cur = cur->Next;
 801d478:	68fb      	ldr	r3, [r7, #12]
 801d47a:	695b      	ldr	r3, [r3, #20]
 801d47c:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801d47e:	68fb      	ldr	r3, [r7, #12]
 801d480:	2b00      	cmp	r3, #0
 801d482:	d1f3      	bne.n	801d46c <TimerExists+0x10>
  }
  return false;
 801d484:	2300      	movs	r3, #0
}
 801d486:	4618      	mov	r0, r3
 801d488:	3714      	adds	r7, #20
 801d48a:	46bd      	mov	sp, r7
 801d48c:	bc80      	pop	{r7}
 801d48e:	4770      	bx	lr
 801d490:	20001cb4 	.word	0x20001cb4

0801d494 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801d494:	b590      	push	{r4, r7, lr}
 801d496:	b085      	sub	sp, #20
 801d498:	af00      	add	r7, sp, #0
 801d49a:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801d49c:	4b11      	ldr	r3, [pc, #68]	; (801d4e4 <TimerSetTimeout+0x50>)
 801d49e:	6a1b      	ldr	r3, [r3, #32]
 801d4a0:	4798      	blx	r3
 801d4a2:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801d4a4:	687b      	ldr	r3, [r7, #4]
 801d4a6:	2201      	movs	r2, #1
 801d4a8:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801d4aa:	687b      	ldr	r3, [r7, #4]
 801d4ac:	681c      	ldr	r4, [r3, #0]
 801d4ae:	4b0d      	ldr	r3, [pc, #52]	; (801d4e4 <TimerSetTimeout+0x50>)
 801d4b0:	699b      	ldr	r3, [r3, #24]
 801d4b2:	4798      	blx	r3
 801d4b4:	4602      	mov	r2, r0
 801d4b6:	68fb      	ldr	r3, [r7, #12]
 801d4b8:	4413      	add	r3, r2
 801d4ba:	429c      	cmp	r4, r3
 801d4bc:	d207      	bcs.n	801d4ce <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801d4be:	4b09      	ldr	r3, [pc, #36]	; (801d4e4 <TimerSetTimeout+0x50>)
 801d4c0:	699b      	ldr	r3, [r3, #24]
 801d4c2:	4798      	blx	r3
 801d4c4:	4602      	mov	r2, r0
 801d4c6:	68fb      	ldr	r3, [r7, #12]
 801d4c8:	441a      	add	r2, r3
 801d4ca:	687b      	ldr	r3, [r7, #4]
 801d4cc:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801d4ce:	4b05      	ldr	r3, [pc, #20]	; (801d4e4 <TimerSetTimeout+0x50>)
 801d4d0:	689b      	ldr	r3, [r3, #8]
 801d4d2:	687a      	ldr	r2, [r7, #4]
 801d4d4:	6812      	ldr	r2, [r2, #0]
 801d4d6:	4610      	mov	r0, r2
 801d4d8:	4798      	blx	r3
}
 801d4da:	bf00      	nop
 801d4dc:	3714      	adds	r7, #20
 801d4de:	46bd      	mov	sp, r7
 801d4e0:	bd90      	pop	{r4, r7, pc}
 801d4e2:	bf00      	nop
 801d4e4:	0801e59c 	.word	0x0801e59c

0801d4e8 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801d4e8:	b480      	push	{r7}
 801d4ea:	b085      	sub	sp, #20
 801d4ec:	af00      	add	r7, sp, #0
 801d4ee:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801d4f0:	4b14      	ldr	r3, [pc, #80]	; (801d544 <TimerInsertTimer+0x5c>)
 801d4f2:	681b      	ldr	r3, [r3, #0]
 801d4f4:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801d4f6:	4b13      	ldr	r3, [pc, #76]	; (801d544 <TimerInsertTimer+0x5c>)
 801d4f8:	681b      	ldr	r3, [r3, #0]
 801d4fa:	695b      	ldr	r3, [r3, #20]
 801d4fc:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801d4fe:	e012      	b.n	801d526 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801d500:	687b      	ldr	r3, [r7, #4]
 801d502:	681a      	ldr	r2, [r3, #0]
 801d504:	68bb      	ldr	r3, [r7, #8]
 801d506:	681b      	ldr	r3, [r3, #0]
 801d508:	429a      	cmp	r2, r3
 801d50a:	d905      	bls.n	801d518 <TimerInsertTimer+0x30>
    {
        cur = next;
 801d50c:	68bb      	ldr	r3, [r7, #8]
 801d50e:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801d510:	68bb      	ldr	r3, [r7, #8]
 801d512:	695b      	ldr	r3, [r3, #20]
 801d514:	60bb      	str	r3, [r7, #8]
 801d516:	e006      	b.n	801d526 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801d518:	68fb      	ldr	r3, [r7, #12]
 801d51a:	687a      	ldr	r2, [r7, #4]
 801d51c:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801d51e:	687b      	ldr	r3, [r7, #4]
 801d520:	68ba      	ldr	r2, [r7, #8]
 801d522:	615a      	str	r2, [r3, #20]
        return;
 801d524:	e009      	b.n	801d53a <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801d526:	68fb      	ldr	r3, [r7, #12]
 801d528:	695b      	ldr	r3, [r3, #20]
 801d52a:	2b00      	cmp	r3, #0
 801d52c:	d1e8      	bne.n	801d500 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801d52e:	68fb      	ldr	r3, [r7, #12]
 801d530:	687a      	ldr	r2, [r7, #4]
 801d532:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801d534:	687b      	ldr	r3, [r7, #4]
 801d536:	2200      	movs	r2, #0
 801d538:	615a      	str	r2, [r3, #20]
}
 801d53a:	3714      	adds	r7, #20
 801d53c:	46bd      	mov	sp, r7
 801d53e:	bc80      	pop	{r7}
 801d540:	4770      	bx	lr
 801d542:	bf00      	nop
 801d544:	20001cb4 	.word	0x20001cb4

0801d548 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801d548:	b580      	push	{r7, lr}
 801d54a:	b084      	sub	sp, #16
 801d54c:	af00      	add	r7, sp, #0
 801d54e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801d550:	4b0b      	ldr	r3, [pc, #44]	; (801d580 <TimerInsertNewHeadTimer+0x38>)
 801d552:	681b      	ldr	r3, [r3, #0]
 801d554:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801d556:	68fb      	ldr	r3, [r7, #12]
 801d558:	2b00      	cmp	r3, #0
 801d55a:	d002      	beq.n	801d562 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801d55c:	68fb      	ldr	r3, [r7, #12]
 801d55e:	2200      	movs	r2, #0
 801d560:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801d562:	687b      	ldr	r3, [r7, #4]
 801d564:	68fa      	ldr	r2, [r7, #12]
 801d566:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801d568:	4a05      	ldr	r2, [pc, #20]	; (801d580 <TimerInsertNewHeadTimer+0x38>)
 801d56a:	687b      	ldr	r3, [r7, #4]
 801d56c:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801d56e:	4b04      	ldr	r3, [pc, #16]	; (801d580 <TimerInsertNewHeadTimer+0x38>)
 801d570:	681b      	ldr	r3, [r3, #0]
 801d572:	4618      	mov	r0, r3
 801d574:	f7ff ff8e 	bl	801d494 <TimerSetTimeout>
}
 801d578:	bf00      	nop
 801d57a:	3710      	adds	r7, #16
 801d57c:	46bd      	mov	sp, r7
 801d57e:	bd80      	pop	{r7, pc}
 801d580:	20001cb4 	.word	0x20001cb4

0801d584 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801d584:	b580      	push	{r7, lr}
 801d586:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801d588:	2218      	movs	r2, #24
 801d58a:	2100      	movs	r1, #0
 801d58c:	4807      	ldr	r0, [pc, #28]	; (801d5ac <UTIL_ADV_TRACE_Init+0x28>)
 801d58e:	f7fe fffa 	bl	801c586 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801d592:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801d596:	2100      	movs	r1, #0
 801d598:	4805      	ldr	r0, [pc, #20]	; (801d5b0 <UTIL_ADV_TRACE_Init+0x2c>)
 801d59a:	f7fe fff4 	bl	801c586 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801d59e:	4b05      	ldr	r3, [pc, #20]	; (801d5b4 <UTIL_ADV_TRACE_Init+0x30>)
 801d5a0:	681b      	ldr	r3, [r3, #0]
 801d5a2:	4805      	ldr	r0, [pc, #20]	; (801d5b8 <UTIL_ADV_TRACE_Init+0x34>)
 801d5a4:	4798      	blx	r3
 801d5a6:	4603      	mov	r3, r0
}
 801d5a8:	4618      	mov	r0, r3
 801d5aa:	bd80      	pop	{r7, pc}
 801d5ac:	20001cb8 	.word	0x20001cb8
 801d5b0:	20001cd0 	.word	0x20001cd0
 801d5b4:	0801e5dc 	.word	0x0801e5dc
 801d5b8:	0801d825 	.word	0x0801d825

0801d5bc <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801d5bc:	b480      	push	{r7}
 801d5be:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801d5c0:	4b06      	ldr	r3, [pc, #24]	; (801d5dc <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801d5c2:	8a5a      	ldrh	r2, [r3, #18]
 801d5c4:	4b05      	ldr	r3, [pc, #20]	; (801d5dc <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801d5c6:	8a1b      	ldrh	r3, [r3, #16]
 801d5c8:	429a      	cmp	r2, r3
 801d5ca:	d101      	bne.n	801d5d0 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801d5cc:	2301      	movs	r3, #1
 801d5ce:	e000      	b.n	801d5d2 <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801d5d0:	2300      	movs	r3, #0
}
 801d5d2:	4618      	mov	r0, r3
 801d5d4:	46bd      	mov	sp, r7
 801d5d6:	bc80      	pop	{r7}
 801d5d8:	4770      	bx	lr
 801d5da:	bf00      	nop
 801d5dc:	20001cb8 	.word	0x20001cb8

0801d5e0 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801d5e0:	b408      	push	{r3}
 801d5e2:	b580      	push	{r7, lr}
 801d5e4:	b08d      	sub	sp, #52	; 0x34
 801d5e6:	af00      	add	r7, sp, #0
 801d5e8:	60f8      	str	r0, [r7, #12]
 801d5ea:	60b9      	str	r1, [r7, #8]
 801d5ec:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801d5ee:	2300      	movs	r3, #0
 801d5f0:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801d5f2:	2300      	movs	r3, #0
 801d5f4:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801d5f6:	4b37      	ldr	r3, [pc, #220]	; (801d6d4 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801d5f8:	7a1b      	ldrb	r3, [r3, #8]
 801d5fa:	461a      	mov	r2, r3
 801d5fc:	68fb      	ldr	r3, [r7, #12]
 801d5fe:	4293      	cmp	r3, r2
 801d600:	d902      	bls.n	801d608 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801d602:	f06f 0304 	mvn.w	r3, #4
 801d606:	e05e      	b.n	801d6c6 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801d608:	4b32      	ldr	r3, [pc, #200]	; (801d6d4 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801d60a:	68da      	ldr	r2, [r3, #12]
 801d60c:	68bb      	ldr	r3, [r7, #8]
 801d60e:	4013      	ands	r3, r2
 801d610:	68ba      	ldr	r2, [r7, #8]
 801d612:	429a      	cmp	r2, r3
 801d614:	d002      	beq.n	801d61c <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801d616:	f06f 0305 	mvn.w	r3, #5
 801d61a:	e054      	b.n	801d6c6 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801d61c:	4b2d      	ldr	r3, [pc, #180]	; (801d6d4 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801d61e:	685b      	ldr	r3, [r3, #4]
 801d620:	2b00      	cmp	r3, #0
 801d622:	d00a      	beq.n	801d63a <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801d624:	687b      	ldr	r3, [r7, #4]
 801d626:	2b00      	cmp	r3, #0
 801d628:	d007      	beq.n	801d63a <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801d62a:	4b2a      	ldr	r3, [pc, #168]	; (801d6d4 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801d62c:	685b      	ldr	r3, [r3, #4]
 801d62e:	f107 0116 	add.w	r1, r7, #22
 801d632:	f107 0218 	add.w	r2, r7, #24
 801d636:	4610      	mov	r0, r2
 801d638:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801d63a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d63e:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801d640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d642:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801d644:	f44f 7100 	mov.w	r1, #512	; 0x200
 801d648:	4823      	ldr	r0, [pc, #140]	; (801d6d8 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801d64a:	f7ff fa29 	bl	801caa0 <tiny_vsnprintf_like>
 801d64e:	4603      	mov	r3, r0
 801d650:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 801d652:	f000 f9f1 	bl	801da38 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801d656:	8afa      	ldrh	r2, [r7, #22]
 801d658:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801d65a:	4413      	add	r3, r2
 801d65c:	b29b      	uxth	r3, r3
 801d65e:	f107 0214 	add.w	r2, r7, #20
 801d662:	4611      	mov	r1, r2
 801d664:	4618      	mov	r0, r3
 801d666:	f000 f969 	bl	801d93c <TRACE_AllocateBufer>
 801d66a:	4603      	mov	r3, r0
 801d66c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801d670:	d025      	beq.n	801d6be <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801d672:	2300      	movs	r3, #0
 801d674:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801d676:	e00e      	b.n	801d696 <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801d678:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801d67a:	8aba      	ldrh	r2, [r7, #20]
 801d67c:	3330      	adds	r3, #48	; 0x30
 801d67e:	443b      	add	r3, r7
 801d680:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801d684:	4b15      	ldr	r3, [pc, #84]	; (801d6dc <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801d686:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801d688:	8abb      	ldrh	r3, [r7, #20]
 801d68a:	3301      	adds	r3, #1
 801d68c:	b29b      	uxth	r3, r3
 801d68e:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801d690:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801d692:	3301      	adds	r3, #1
 801d694:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801d696:	8afb      	ldrh	r3, [r7, #22]
 801d698:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801d69a:	429a      	cmp	r2, r3
 801d69c:	d3ec      	bcc.n	801d678 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801d69e:	8abb      	ldrh	r3, [r7, #20]
 801d6a0:	461a      	mov	r2, r3
 801d6a2:	4b0e      	ldr	r3, [pc, #56]	; (801d6dc <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801d6a4:	18d0      	adds	r0, r2, r3
 801d6a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d6a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801d6aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 801d6ae:	f7ff f9f7 	bl	801caa0 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801d6b2:	f000 f9df 	bl	801da74 <TRACE_UnLock>

    return TRACE_Send();
 801d6b6:	f000 f831 	bl	801d71c <TRACE_Send>
 801d6ba:	4603      	mov	r3, r0
 801d6bc:	e003      	b.n	801d6c6 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801d6be:	f000 f9d9 	bl	801da74 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801d6c2:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801d6c6:	4618      	mov	r0, r3
 801d6c8:	3734      	adds	r7, #52	; 0x34
 801d6ca:	46bd      	mov	sp, r7
 801d6cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801d6d0:	b001      	add	sp, #4
 801d6d2:	4770      	bx	lr
 801d6d4:	20001cb8 	.word	0x20001cb8
 801d6d8:	200020d0 	.word	0x200020d0
 801d6dc:	20001cd0 	.word	0x20001cd0

0801d6e0 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801d6e0:	b480      	push	{r7}
 801d6e2:	b083      	sub	sp, #12
 801d6e4:	af00      	add	r7, sp, #0
 801d6e6:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801d6e8:	4a03      	ldr	r2, [pc, #12]	; (801d6f8 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801d6ea:	687b      	ldr	r3, [r7, #4]
 801d6ec:	6053      	str	r3, [r2, #4]
}
 801d6ee:	bf00      	nop
 801d6f0:	370c      	adds	r7, #12
 801d6f2:	46bd      	mov	sp, r7
 801d6f4:	bc80      	pop	{r7}
 801d6f6:	4770      	bx	lr
 801d6f8:	20001cb8 	.word	0x20001cb8

0801d6fc <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801d6fc:	b480      	push	{r7}
 801d6fe:	b083      	sub	sp, #12
 801d700:	af00      	add	r7, sp, #0
 801d702:	4603      	mov	r3, r0
 801d704:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801d706:	4a04      	ldr	r2, [pc, #16]	; (801d718 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801d708:	79fb      	ldrb	r3, [r7, #7]
 801d70a:	7213      	strb	r3, [r2, #8]
}
 801d70c:	bf00      	nop
 801d70e:	370c      	adds	r7, #12
 801d710:	46bd      	mov	sp, r7
 801d712:	bc80      	pop	{r7}
 801d714:	4770      	bx	lr
 801d716:	bf00      	nop
 801d718:	20001cb8 	.word	0x20001cb8

0801d71c <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801d71c:	b580      	push	{r7, lr}
 801d71e:	b088      	sub	sp, #32
 801d720:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801d722:	2300      	movs	r3, #0
 801d724:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801d726:	2300      	movs	r3, #0
 801d728:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d72a:	f3ef 8310 	mrs	r3, PRIMASK
 801d72e:	613b      	str	r3, [r7, #16]
  return(result);
 801d730:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801d732:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d734:	b672      	cpsid	i
}
 801d736:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801d738:	f000 f9ba 	bl	801dab0 <TRACE_IsLocked>
 801d73c:	4603      	mov	r3, r0
 801d73e:	2b00      	cmp	r3, #0
 801d740:	d15d      	bne.n	801d7fe <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801d742:	f000 f979 	bl	801da38 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801d746:	4b34      	ldr	r3, [pc, #208]	; (801d818 <TRACE_Send+0xfc>)
 801d748:	8a1a      	ldrh	r2, [r3, #16]
 801d74a:	4b33      	ldr	r3, [pc, #204]	; (801d818 <TRACE_Send+0xfc>)
 801d74c:	8a5b      	ldrh	r3, [r3, #18]
 801d74e:	429a      	cmp	r2, r3
 801d750:	d04d      	beq.n	801d7ee <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801d752:	4b31      	ldr	r3, [pc, #196]	; (801d818 <TRACE_Send+0xfc>)
 801d754:	789b      	ldrb	r3, [r3, #2]
 801d756:	2b01      	cmp	r3, #1
 801d758:	d117      	bne.n	801d78a <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801d75a:	4b2f      	ldr	r3, [pc, #188]	; (801d818 <TRACE_Send+0xfc>)
 801d75c:	881a      	ldrh	r2, [r3, #0]
 801d75e:	4b2e      	ldr	r3, [pc, #184]	; (801d818 <TRACE_Send+0xfc>)
 801d760:	8a1b      	ldrh	r3, [r3, #16]
 801d762:	1ad3      	subs	r3, r2, r3
 801d764:	b29a      	uxth	r2, r3
 801d766:	4b2c      	ldr	r3, [pc, #176]	; (801d818 <TRACE_Send+0xfc>)
 801d768:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801d76a:	4b2b      	ldr	r3, [pc, #172]	; (801d818 <TRACE_Send+0xfc>)
 801d76c:	2202      	movs	r2, #2
 801d76e:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801d770:	4b29      	ldr	r3, [pc, #164]	; (801d818 <TRACE_Send+0xfc>)
 801d772:	2200      	movs	r2, #0
 801d774:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801d776:	4b28      	ldr	r3, [pc, #160]	; (801d818 <TRACE_Send+0xfc>)
 801d778:	8a9b      	ldrh	r3, [r3, #20]
 801d77a:	2b00      	cmp	r3, #0
 801d77c:	d105      	bne.n	801d78a <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801d77e:	4b26      	ldr	r3, [pc, #152]	; (801d818 <TRACE_Send+0xfc>)
 801d780:	2200      	movs	r2, #0
 801d782:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801d784:	4b24      	ldr	r3, [pc, #144]	; (801d818 <TRACE_Send+0xfc>)
 801d786:	2200      	movs	r2, #0
 801d788:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801d78a:	4b23      	ldr	r3, [pc, #140]	; (801d818 <TRACE_Send+0xfc>)
 801d78c:	789b      	ldrb	r3, [r3, #2]
 801d78e:	2b00      	cmp	r3, #0
 801d790:	d115      	bne.n	801d7be <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801d792:	4b21      	ldr	r3, [pc, #132]	; (801d818 <TRACE_Send+0xfc>)
 801d794:	8a5a      	ldrh	r2, [r3, #18]
 801d796:	4b20      	ldr	r3, [pc, #128]	; (801d818 <TRACE_Send+0xfc>)
 801d798:	8a1b      	ldrh	r3, [r3, #16]
 801d79a:	429a      	cmp	r2, r3
 801d79c:	d908      	bls.n	801d7b0 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801d79e:	4b1e      	ldr	r3, [pc, #120]	; (801d818 <TRACE_Send+0xfc>)
 801d7a0:	8a5a      	ldrh	r2, [r3, #18]
 801d7a2:	4b1d      	ldr	r3, [pc, #116]	; (801d818 <TRACE_Send+0xfc>)
 801d7a4:	8a1b      	ldrh	r3, [r3, #16]
 801d7a6:	1ad3      	subs	r3, r2, r3
 801d7a8:	b29a      	uxth	r2, r3
 801d7aa:	4b1b      	ldr	r3, [pc, #108]	; (801d818 <TRACE_Send+0xfc>)
 801d7ac:	829a      	strh	r2, [r3, #20]
 801d7ae:	e006      	b.n	801d7be <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801d7b0:	4b19      	ldr	r3, [pc, #100]	; (801d818 <TRACE_Send+0xfc>)
 801d7b2:	8a1b      	ldrh	r3, [r3, #16]
 801d7b4:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801d7b8:	b29a      	uxth	r2, r3
 801d7ba:	4b17      	ldr	r3, [pc, #92]	; (801d818 <TRACE_Send+0xfc>)
 801d7bc:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801d7be:	4b16      	ldr	r3, [pc, #88]	; (801d818 <TRACE_Send+0xfc>)
 801d7c0:	8a1b      	ldrh	r3, [r3, #16]
 801d7c2:	461a      	mov	r2, r3
 801d7c4:	4b15      	ldr	r3, [pc, #84]	; (801d81c <TRACE_Send+0x100>)
 801d7c6:	4413      	add	r3, r2
 801d7c8:	61bb      	str	r3, [r7, #24]
 801d7ca:	697b      	ldr	r3, [r7, #20]
 801d7cc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d7ce:	68fb      	ldr	r3, [r7, #12]
 801d7d0:	f383 8810 	msr	PRIMASK, r3
}
 801d7d4:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801d7d6:	f7e4 fcef 	bl	80021b8 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801d7da:	4b11      	ldr	r3, [pc, #68]	; (801d820 <TRACE_Send+0x104>)
 801d7dc:	68db      	ldr	r3, [r3, #12]
 801d7de:	4a0e      	ldr	r2, [pc, #56]	; (801d818 <TRACE_Send+0xfc>)
 801d7e0:	8a92      	ldrh	r2, [r2, #20]
 801d7e2:	4611      	mov	r1, r2
 801d7e4:	69b8      	ldr	r0, [r7, #24]
 801d7e6:	4798      	blx	r3
 801d7e8:	4603      	mov	r3, r0
 801d7ea:	77fb      	strb	r3, [r7, #31]
 801d7ec:	e00d      	b.n	801d80a <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801d7ee:	f000 f941 	bl	801da74 <TRACE_UnLock>
 801d7f2:	697b      	ldr	r3, [r7, #20]
 801d7f4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d7f6:	68bb      	ldr	r3, [r7, #8]
 801d7f8:	f383 8810 	msr	PRIMASK, r3
}
 801d7fc:	e005      	b.n	801d80a <TRACE_Send+0xee>
 801d7fe:	697b      	ldr	r3, [r7, #20]
 801d800:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d802:	687b      	ldr	r3, [r7, #4]
 801d804:	f383 8810 	msr	PRIMASK, r3
}
 801d808:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801d80a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801d80e:	4618      	mov	r0, r3
 801d810:	3720      	adds	r7, #32
 801d812:	46bd      	mov	sp, r7
 801d814:	bd80      	pop	{r7, pc}
 801d816:	bf00      	nop
 801d818:	20001cb8 	.word	0x20001cb8
 801d81c:	20001cd0 	.word	0x20001cd0
 801d820:	0801e5dc 	.word	0x0801e5dc

0801d824 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801d824:	b580      	push	{r7, lr}
 801d826:	b088      	sub	sp, #32
 801d828:	af00      	add	r7, sp, #0
 801d82a:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801d82c:	2300      	movs	r3, #0
 801d82e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d830:	f3ef 8310 	mrs	r3, PRIMASK
 801d834:	617b      	str	r3, [r7, #20]
  return(result);
 801d836:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801d838:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801d83a:	b672      	cpsid	i
}
 801d83c:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801d83e:	4b3c      	ldr	r3, [pc, #240]	; (801d930 <TRACE_TxCpltCallback+0x10c>)
 801d840:	789b      	ldrb	r3, [r3, #2]
 801d842:	2b02      	cmp	r3, #2
 801d844:	d106      	bne.n	801d854 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801d846:	4b3a      	ldr	r3, [pc, #232]	; (801d930 <TRACE_TxCpltCallback+0x10c>)
 801d848:	2200      	movs	r2, #0
 801d84a:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801d84c:	4b38      	ldr	r3, [pc, #224]	; (801d930 <TRACE_TxCpltCallback+0x10c>)
 801d84e:	2200      	movs	r2, #0
 801d850:	821a      	strh	r2, [r3, #16]
 801d852:	e00a      	b.n	801d86a <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801d854:	4b36      	ldr	r3, [pc, #216]	; (801d930 <TRACE_TxCpltCallback+0x10c>)
 801d856:	8a1a      	ldrh	r2, [r3, #16]
 801d858:	4b35      	ldr	r3, [pc, #212]	; (801d930 <TRACE_TxCpltCallback+0x10c>)
 801d85a:	8a9b      	ldrh	r3, [r3, #20]
 801d85c:	4413      	add	r3, r2
 801d85e:	b29b      	uxth	r3, r3
 801d860:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801d864:	b29a      	uxth	r2, r3
 801d866:	4b32      	ldr	r3, [pc, #200]	; (801d930 <TRACE_TxCpltCallback+0x10c>)
 801d868:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801d86a:	4b31      	ldr	r3, [pc, #196]	; (801d930 <TRACE_TxCpltCallback+0x10c>)
 801d86c:	8a1a      	ldrh	r2, [r3, #16]
 801d86e:	4b30      	ldr	r3, [pc, #192]	; (801d930 <TRACE_TxCpltCallback+0x10c>)
 801d870:	8a5b      	ldrh	r3, [r3, #18]
 801d872:	429a      	cmp	r2, r3
 801d874:	d04d      	beq.n	801d912 <TRACE_TxCpltCallback+0xee>
 801d876:	4b2e      	ldr	r3, [pc, #184]	; (801d930 <TRACE_TxCpltCallback+0x10c>)
 801d878:	8adb      	ldrh	r3, [r3, #22]
 801d87a:	2b01      	cmp	r3, #1
 801d87c:	d149      	bne.n	801d912 <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801d87e:	4b2c      	ldr	r3, [pc, #176]	; (801d930 <TRACE_TxCpltCallback+0x10c>)
 801d880:	789b      	ldrb	r3, [r3, #2]
 801d882:	2b01      	cmp	r3, #1
 801d884:	d117      	bne.n	801d8b6 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801d886:	4b2a      	ldr	r3, [pc, #168]	; (801d930 <TRACE_TxCpltCallback+0x10c>)
 801d888:	881a      	ldrh	r2, [r3, #0]
 801d88a:	4b29      	ldr	r3, [pc, #164]	; (801d930 <TRACE_TxCpltCallback+0x10c>)
 801d88c:	8a1b      	ldrh	r3, [r3, #16]
 801d88e:	1ad3      	subs	r3, r2, r3
 801d890:	b29a      	uxth	r2, r3
 801d892:	4b27      	ldr	r3, [pc, #156]	; (801d930 <TRACE_TxCpltCallback+0x10c>)
 801d894:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801d896:	4b26      	ldr	r3, [pc, #152]	; (801d930 <TRACE_TxCpltCallback+0x10c>)
 801d898:	2202      	movs	r2, #2
 801d89a:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801d89c:	4b24      	ldr	r3, [pc, #144]	; (801d930 <TRACE_TxCpltCallback+0x10c>)
 801d89e:	2200      	movs	r2, #0
 801d8a0:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801d8a2:	4b23      	ldr	r3, [pc, #140]	; (801d930 <TRACE_TxCpltCallback+0x10c>)
 801d8a4:	8a9b      	ldrh	r3, [r3, #20]
 801d8a6:	2b00      	cmp	r3, #0
 801d8a8:	d105      	bne.n	801d8b6 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801d8aa:	4b21      	ldr	r3, [pc, #132]	; (801d930 <TRACE_TxCpltCallback+0x10c>)
 801d8ac:	2200      	movs	r2, #0
 801d8ae:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801d8b0:	4b1f      	ldr	r3, [pc, #124]	; (801d930 <TRACE_TxCpltCallback+0x10c>)
 801d8b2:	2200      	movs	r2, #0
 801d8b4:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801d8b6:	4b1e      	ldr	r3, [pc, #120]	; (801d930 <TRACE_TxCpltCallback+0x10c>)
 801d8b8:	789b      	ldrb	r3, [r3, #2]
 801d8ba:	2b00      	cmp	r3, #0
 801d8bc:	d115      	bne.n	801d8ea <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801d8be:	4b1c      	ldr	r3, [pc, #112]	; (801d930 <TRACE_TxCpltCallback+0x10c>)
 801d8c0:	8a5a      	ldrh	r2, [r3, #18]
 801d8c2:	4b1b      	ldr	r3, [pc, #108]	; (801d930 <TRACE_TxCpltCallback+0x10c>)
 801d8c4:	8a1b      	ldrh	r3, [r3, #16]
 801d8c6:	429a      	cmp	r2, r3
 801d8c8:	d908      	bls.n	801d8dc <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801d8ca:	4b19      	ldr	r3, [pc, #100]	; (801d930 <TRACE_TxCpltCallback+0x10c>)
 801d8cc:	8a5a      	ldrh	r2, [r3, #18]
 801d8ce:	4b18      	ldr	r3, [pc, #96]	; (801d930 <TRACE_TxCpltCallback+0x10c>)
 801d8d0:	8a1b      	ldrh	r3, [r3, #16]
 801d8d2:	1ad3      	subs	r3, r2, r3
 801d8d4:	b29a      	uxth	r2, r3
 801d8d6:	4b16      	ldr	r3, [pc, #88]	; (801d930 <TRACE_TxCpltCallback+0x10c>)
 801d8d8:	829a      	strh	r2, [r3, #20]
 801d8da:	e006      	b.n	801d8ea <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801d8dc:	4b14      	ldr	r3, [pc, #80]	; (801d930 <TRACE_TxCpltCallback+0x10c>)
 801d8de:	8a1b      	ldrh	r3, [r3, #16]
 801d8e0:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801d8e4:	b29a      	uxth	r2, r3
 801d8e6:	4b12      	ldr	r3, [pc, #72]	; (801d930 <TRACE_TxCpltCallback+0x10c>)
 801d8e8:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801d8ea:	4b11      	ldr	r3, [pc, #68]	; (801d930 <TRACE_TxCpltCallback+0x10c>)
 801d8ec:	8a1b      	ldrh	r3, [r3, #16]
 801d8ee:	461a      	mov	r2, r3
 801d8f0:	4b10      	ldr	r3, [pc, #64]	; (801d934 <TRACE_TxCpltCallback+0x110>)
 801d8f2:	4413      	add	r3, r2
 801d8f4:	61fb      	str	r3, [r7, #28]
 801d8f6:	69bb      	ldr	r3, [r7, #24]
 801d8f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d8fa:	693b      	ldr	r3, [r7, #16]
 801d8fc:	f383 8810 	msr	PRIMASK, r3
}
 801d900:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801d902:	4b0d      	ldr	r3, [pc, #52]	; (801d938 <TRACE_TxCpltCallback+0x114>)
 801d904:	68db      	ldr	r3, [r3, #12]
 801d906:	4a0a      	ldr	r2, [pc, #40]	; (801d930 <TRACE_TxCpltCallback+0x10c>)
 801d908:	8a92      	ldrh	r2, [r2, #20]
 801d90a:	4611      	mov	r1, r2
 801d90c:	69f8      	ldr	r0, [r7, #28]
 801d90e:	4798      	blx	r3
 801d910:	e00a      	b.n	801d928 <TRACE_TxCpltCallback+0x104>
 801d912:	69bb      	ldr	r3, [r7, #24]
 801d914:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d916:	68fb      	ldr	r3, [r7, #12]
 801d918:	f383 8810 	msr	PRIMASK, r3
}
 801d91c:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801d91e:	f7e4 fc53 	bl	80021c8 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801d922:	f000 f8a7 	bl	801da74 <TRACE_UnLock>
  }
}
 801d926:	bf00      	nop
 801d928:	bf00      	nop
 801d92a:	3720      	adds	r7, #32
 801d92c:	46bd      	mov	sp, r7
 801d92e:	bd80      	pop	{r7, pc}
 801d930:	20001cb8 	.word	0x20001cb8
 801d934:	20001cd0 	.word	0x20001cd0
 801d938:	0801e5dc 	.word	0x0801e5dc

0801d93c <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801d93c:	b480      	push	{r7}
 801d93e:	b087      	sub	sp, #28
 801d940:	af00      	add	r7, sp, #0
 801d942:	4603      	mov	r3, r0
 801d944:	6039      	str	r1, [r7, #0]
 801d946:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801d948:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d94c:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d94e:	f3ef 8310 	mrs	r3, PRIMASK
 801d952:	60fb      	str	r3, [r7, #12]
  return(result);
 801d954:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801d956:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801d958:	b672      	cpsid	i
}
 801d95a:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801d95c:	4b35      	ldr	r3, [pc, #212]	; (801da34 <TRACE_AllocateBufer+0xf8>)
 801d95e:	8a5a      	ldrh	r2, [r3, #18]
 801d960:	4b34      	ldr	r3, [pc, #208]	; (801da34 <TRACE_AllocateBufer+0xf8>)
 801d962:	8a1b      	ldrh	r3, [r3, #16]
 801d964:	429a      	cmp	r2, r3
 801d966:	d11b      	bne.n	801d9a0 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801d968:	4b32      	ldr	r3, [pc, #200]	; (801da34 <TRACE_AllocateBufer+0xf8>)
 801d96a:	8a5b      	ldrh	r3, [r3, #18]
 801d96c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801d970:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801d972:	88fa      	ldrh	r2, [r7, #6]
 801d974:	8afb      	ldrh	r3, [r7, #22]
 801d976:	429a      	cmp	r2, r3
 801d978:	d33a      	bcc.n	801d9f0 <TRACE_AllocateBufer+0xb4>
 801d97a:	4b2e      	ldr	r3, [pc, #184]	; (801da34 <TRACE_AllocateBufer+0xf8>)
 801d97c:	8a1b      	ldrh	r3, [r3, #16]
 801d97e:	88fa      	ldrh	r2, [r7, #6]
 801d980:	429a      	cmp	r2, r3
 801d982:	d235      	bcs.n	801d9f0 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801d984:	4b2b      	ldr	r3, [pc, #172]	; (801da34 <TRACE_AllocateBufer+0xf8>)
 801d986:	2201      	movs	r2, #1
 801d988:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801d98a:	4b2a      	ldr	r3, [pc, #168]	; (801da34 <TRACE_AllocateBufer+0xf8>)
 801d98c:	8a5a      	ldrh	r2, [r3, #18]
 801d98e:	4b29      	ldr	r3, [pc, #164]	; (801da34 <TRACE_AllocateBufer+0xf8>)
 801d990:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801d992:	4b28      	ldr	r3, [pc, #160]	; (801da34 <TRACE_AllocateBufer+0xf8>)
 801d994:	8a1b      	ldrh	r3, [r3, #16]
 801d996:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801d998:	4b26      	ldr	r3, [pc, #152]	; (801da34 <TRACE_AllocateBufer+0xf8>)
 801d99a:	2200      	movs	r2, #0
 801d99c:	825a      	strh	r2, [r3, #18]
 801d99e:	e027      	b.n	801d9f0 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801d9a0:	4b24      	ldr	r3, [pc, #144]	; (801da34 <TRACE_AllocateBufer+0xf8>)
 801d9a2:	8a5a      	ldrh	r2, [r3, #18]
 801d9a4:	4b23      	ldr	r3, [pc, #140]	; (801da34 <TRACE_AllocateBufer+0xf8>)
 801d9a6:	8a1b      	ldrh	r3, [r3, #16]
 801d9a8:	429a      	cmp	r2, r3
 801d9aa:	d91b      	bls.n	801d9e4 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801d9ac:	4b21      	ldr	r3, [pc, #132]	; (801da34 <TRACE_AllocateBufer+0xf8>)
 801d9ae:	8a5b      	ldrh	r3, [r3, #18]
 801d9b0:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801d9b4:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801d9b6:	88fa      	ldrh	r2, [r7, #6]
 801d9b8:	8afb      	ldrh	r3, [r7, #22]
 801d9ba:	429a      	cmp	r2, r3
 801d9bc:	d318      	bcc.n	801d9f0 <TRACE_AllocateBufer+0xb4>
 801d9be:	4b1d      	ldr	r3, [pc, #116]	; (801da34 <TRACE_AllocateBufer+0xf8>)
 801d9c0:	8a1b      	ldrh	r3, [r3, #16]
 801d9c2:	88fa      	ldrh	r2, [r7, #6]
 801d9c4:	429a      	cmp	r2, r3
 801d9c6:	d213      	bcs.n	801d9f0 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801d9c8:	4b1a      	ldr	r3, [pc, #104]	; (801da34 <TRACE_AllocateBufer+0xf8>)
 801d9ca:	2201      	movs	r2, #1
 801d9cc:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801d9ce:	4b19      	ldr	r3, [pc, #100]	; (801da34 <TRACE_AllocateBufer+0xf8>)
 801d9d0:	8a5a      	ldrh	r2, [r3, #18]
 801d9d2:	4b18      	ldr	r3, [pc, #96]	; (801da34 <TRACE_AllocateBufer+0xf8>)
 801d9d4:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801d9d6:	4b17      	ldr	r3, [pc, #92]	; (801da34 <TRACE_AllocateBufer+0xf8>)
 801d9d8:	8a1b      	ldrh	r3, [r3, #16]
 801d9da:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801d9dc:	4b15      	ldr	r3, [pc, #84]	; (801da34 <TRACE_AllocateBufer+0xf8>)
 801d9de:	2200      	movs	r2, #0
 801d9e0:	825a      	strh	r2, [r3, #18]
 801d9e2:	e005      	b.n	801d9f0 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801d9e4:	4b13      	ldr	r3, [pc, #76]	; (801da34 <TRACE_AllocateBufer+0xf8>)
 801d9e6:	8a1a      	ldrh	r2, [r3, #16]
 801d9e8:	4b12      	ldr	r3, [pc, #72]	; (801da34 <TRACE_AllocateBufer+0xf8>)
 801d9ea:	8a5b      	ldrh	r3, [r3, #18]
 801d9ec:	1ad3      	subs	r3, r2, r3
 801d9ee:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801d9f0:	8afa      	ldrh	r2, [r7, #22]
 801d9f2:	88fb      	ldrh	r3, [r7, #6]
 801d9f4:	429a      	cmp	r2, r3
 801d9f6:	d90f      	bls.n	801da18 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801d9f8:	4b0e      	ldr	r3, [pc, #56]	; (801da34 <TRACE_AllocateBufer+0xf8>)
 801d9fa:	8a5a      	ldrh	r2, [r3, #18]
 801d9fc:	683b      	ldr	r3, [r7, #0]
 801d9fe:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801da00:	4b0c      	ldr	r3, [pc, #48]	; (801da34 <TRACE_AllocateBufer+0xf8>)
 801da02:	8a5a      	ldrh	r2, [r3, #18]
 801da04:	88fb      	ldrh	r3, [r7, #6]
 801da06:	4413      	add	r3, r2
 801da08:	b29b      	uxth	r3, r3
 801da0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801da0e:	b29a      	uxth	r2, r3
 801da10:	4b08      	ldr	r3, [pc, #32]	; (801da34 <TRACE_AllocateBufer+0xf8>)
 801da12:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801da14:	2300      	movs	r3, #0
 801da16:	82bb      	strh	r3, [r7, #20]
 801da18:	693b      	ldr	r3, [r7, #16]
 801da1a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801da1c:	68bb      	ldr	r3, [r7, #8]
 801da1e:	f383 8810 	msr	PRIMASK, r3
}
 801da22:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801da24:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801da28:	4618      	mov	r0, r3
 801da2a:	371c      	adds	r7, #28
 801da2c:	46bd      	mov	sp, r7
 801da2e:	bc80      	pop	{r7}
 801da30:	4770      	bx	lr
 801da32:	bf00      	nop
 801da34:	20001cb8 	.word	0x20001cb8

0801da38 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801da38:	b480      	push	{r7}
 801da3a:	b085      	sub	sp, #20
 801da3c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801da3e:	f3ef 8310 	mrs	r3, PRIMASK
 801da42:	607b      	str	r3, [r7, #4]
  return(result);
 801da44:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801da46:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801da48:	b672      	cpsid	i
}
 801da4a:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801da4c:	4b08      	ldr	r3, [pc, #32]	; (801da70 <TRACE_Lock+0x38>)
 801da4e:	8adb      	ldrh	r3, [r3, #22]
 801da50:	3301      	adds	r3, #1
 801da52:	b29a      	uxth	r2, r3
 801da54:	4b06      	ldr	r3, [pc, #24]	; (801da70 <TRACE_Lock+0x38>)
 801da56:	82da      	strh	r2, [r3, #22]
 801da58:	68fb      	ldr	r3, [r7, #12]
 801da5a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801da5c:	68bb      	ldr	r3, [r7, #8]
 801da5e:	f383 8810 	msr	PRIMASK, r3
}
 801da62:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801da64:	bf00      	nop
 801da66:	3714      	adds	r7, #20
 801da68:	46bd      	mov	sp, r7
 801da6a:	bc80      	pop	{r7}
 801da6c:	4770      	bx	lr
 801da6e:	bf00      	nop
 801da70:	20001cb8 	.word	0x20001cb8

0801da74 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801da74:	b480      	push	{r7}
 801da76:	b085      	sub	sp, #20
 801da78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801da7a:	f3ef 8310 	mrs	r3, PRIMASK
 801da7e:	607b      	str	r3, [r7, #4]
  return(result);
 801da80:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801da82:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801da84:	b672      	cpsid	i
}
 801da86:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801da88:	4b08      	ldr	r3, [pc, #32]	; (801daac <TRACE_UnLock+0x38>)
 801da8a:	8adb      	ldrh	r3, [r3, #22]
 801da8c:	3b01      	subs	r3, #1
 801da8e:	b29a      	uxth	r2, r3
 801da90:	4b06      	ldr	r3, [pc, #24]	; (801daac <TRACE_UnLock+0x38>)
 801da92:	82da      	strh	r2, [r3, #22]
 801da94:	68fb      	ldr	r3, [r7, #12]
 801da96:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801da98:	68bb      	ldr	r3, [r7, #8]
 801da9a:	f383 8810 	msr	PRIMASK, r3
}
 801da9e:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801daa0:	bf00      	nop
 801daa2:	3714      	adds	r7, #20
 801daa4:	46bd      	mov	sp, r7
 801daa6:	bc80      	pop	{r7}
 801daa8:	4770      	bx	lr
 801daaa:	bf00      	nop
 801daac:	20001cb8 	.word	0x20001cb8

0801dab0 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801dab0:	b480      	push	{r7}
 801dab2:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801dab4:	4b05      	ldr	r3, [pc, #20]	; (801dacc <TRACE_IsLocked+0x1c>)
 801dab6:	8adb      	ldrh	r3, [r3, #22]
 801dab8:	2b00      	cmp	r3, #0
 801daba:	bf14      	ite	ne
 801dabc:	2301      	movne	r3, #1
 801dabe:	2300      	moveq	r3, #0
 801dac0:	b2db      	uxtb	r3, r3
}
 801dac2:	4618      	mov	r0, r3
 801dac4:	46bd      	mov	sp, r7
 801dac6:	bc80      	pop	{r7}
 801dac8:	4770      	bx	lr
 801daca:	bf00      	nop
 801dacc:	20001cb8 	.word	0x20001cb8

0801dad0 <memset>:
 801dad0:	4402      	add	r2, r0
 801dad2:	4603      	mov	r3, r0
 801dad4:	4293      	cmp	r3, r2
 801dad6:	d100      	bne.n	801dada <memset+0xa>
 801dad8:	4770      	bx	lr
 801dada:	f803 1b01 	strb.w	r1, [r3], #1
 801dade:	e7f9      	b.n	801dad4 <memset+0x4>

0801dae0 <__libc_init_array>:
 801dae0:	b570      	push	{r4, r5, r6, lr}
 801dae2:	4d0d      	ldr	r5, [pc, #52]	; (801db18 <__libc_init_array+0x38>)
 801dae4:	4c0d      	ldr	r4, [pc, #52]	; (801db1c <__libc_init_array+0x3c>)
 801dae6:	1b64      	subs	r4, r4, r5
 801dae8:	10a4      	asrs	r4, r4, #2
 801daea:	2600      	movs	r6, #0
 801daec:	42a6      	cmp	r6, r4
 801daee:	d109      	bne.n	801db04 <__libc_init_array+0x24>
 801daf0:	4d0b      	ldr	r5, [pc, #44]	; (801db20 <__libc_init_array+0x40>)
 801daf2:	4c0c      	ldr	r4, [pc, #48]	; (801db24 <__libc_init_array+0x44>)
 801daf4:	f000 f898 	bl	801dc28 <_init>
 801daf8:	1b64      	subs	r4, r4, r5
 801dafa:	10a4      	asrs	r4, r4, #2
 801dafc:	2600      	movs	r6, #0
 801dafe:	42a6      	cmp	r6, r4
 801db00:	d105      	bne.n	801db0e <__libc_init_array+0x2e>
 801db02:	bd70      	pop	{r4, r5, r6, pc}
 801db04:	f855 3b04 	ldr.w	r3, [r5], #4
 801db08:	4798      	blx	r3
 801db0a:	3601      	adds	r6, #1
 801db0c:	e7ee      	b.n	801daec <__libc_init_array+0xc>
 801db0e:	f855 3b04 	ldr.w	r3, [r5], #4
 801db12:	4798      	blx	r3
 801db14:	3601      	adds	r6, #1
 801db16:	e7f2      	b.n	801dafe <__libc_init_array+0x1e>
 801db18:	0801ec94 	.word	0x0801ec94
 801db1c:	0801ec94 	.word	0x0801ec94
 801db20:	0801ec94 	.word	0x0801ec94
 801db24:	0801ec98 	.word	0x0801ec98

0801db28 <floor>:
 801db28:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801db2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801db30:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801db34:	2e13      	cmp	r6, #19
 801db36:	460b      	mov	r3, r1
 801db38:	4607      	mov	r7, r0
 801db3a:	460c      	mov	r4, r1
 801db3c:	4605      	mov	r5, r0
 801db3e:	dc32      	bgt.n	801dba6 <floor+0x7e>
 801db40:	2e00      	cmp	r6, #0
 801db42:	da14      	bge.n	801db6e <floor+0x46>
 801db44:	a334      	add	r3, pc, #208	; (adr r3, 801dc18 <floor+0xf0>)
 801db46:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db4a:	f7e2 fb23 	bl	8000194 <__adddf3>
 801db4e:	2200      	movs	r2, #0
 801db50:	2300      	movs	r3, #0
 801db52:	f7e2 fd53 	bl	80005fc <__aeabi_dcmpgt>
 801db56:	b138      	cbz	r0, 801db68 <floor+0x40>
 801db58:	2c00      	cmp	r4, #0
 801db5a:	da56      	bge.n	801dc0a <floor+0xe2>
 801db5c:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801db60:	4325      	orrs	r5, r4
 801db62:	d055      	beq.n	801dc10 <floor+0xe8>
 801db64:	4c2e      	ldr	r4, [pc, #184]	; (801dc20 <floor+0xf8>)
 801db66:	2500      	movs	r5, #0
 801db68:	4623      	mov	r3, r4
 801db6a:	462f      	mov	r7, r5
 801db6c:	e025      	b.n	801dbba <floor+0x92>
 801db6e:	4a2d      	ldr	r2, [pc, #180]	; (801dc24 <floor+0xfc>)
 801db70:	fa42 f806 	asr.w	r8, r2, r6
 801db74:	ea01 0208 	and.w	r2, r1, r8
 801db78:	4302      	orrs	r2, r0
 801db7a:	d01e      	beq.n	801dbba <floor+0x92>
 801db7c:	a326      	add	r3, pc, #152	; (adr r3, 801dc18 <floor+0xf0>)
 801db7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db82:	f7e2 fb07 	bl	8000194 <__adddf3>
 801db86:	2200      	movs	r2, #0
 801db88:	2300      	movs	r3, #0
 801db8a:	f7e2 fd37 	bl	80005fc <__aeabi_dcmpgt>
 801db8e:	2800      	cmp	r0, #0
 801db90:	d0ea      	beq.n	801db68 <floor+0x40>
 801db92:	2c00      	cmp	r4, #0
 801db94:	bfbe      	ittt	lt
 801db96:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801db9a:	4133      	asrlt	r3, r6
 801db9c:	18e4      	addlt	r4, r4, r3
 801db9e:	ea24 0408 	bic.w	r4, r4, r8
 801dba2:	2500      	movs	r5, #0
 801dba4:	e7e0      	b.n	801db68 <floor+0x40>
 801dba6:	2e33      	cmp	r6, #51	; 0x33
 801dba8:	dd0b      	ble.n	801dbc2 <floor+0x9a>
 801dbaa:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801dbae:	d104      	bne.n	801dbba <floor+0x92>
 801dbb0:	4602      	mov	r2, r0
 801dbb2:	f7e2 faef 	bl	8000194 <__adddf3>
 801dbb6:	4607      	mov	r7, r0
 801dbb8:	460b      	mov	r3, r1
 801dbba:	4638      	mov	r0, r7
 801dbbc:	4619      	mov	r1, r3
 801dbbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dbc2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801dbc6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801dbca:	fa28 f802 	lsr.w	r8, r8, r2
 801dbce:	ea10 0f08 	tst.w	r0, r8
 801dbd2:	d0f2      	beq.n	801dbba <floor+0x92>
 801dbd4:	a310      	add	r3, pc, #64	; (adr r3, 801dc18 <floor+0xf0>)
 801dbd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dbda:	f7e2 fadb 	bl	8000194 <__adddf3>
 801dbde:	2200      	movs	r2, #0
 801dbe0:	2300      	movs	r3, #0
 801dbe2:	f7e2 fd0b 	bl	80005fc <__aeabi_dcmpgt>
 801dbe6:	2800      	cmp	r0, #0
 801dbe8:	d0be      	beq.n	801db68 <floor+0x40>
 801dbea:	2c00      	cmp	r4, #0
 801dbec:	da0a      	bge.n	801dc04 <floor+0xdc>
 801dbee:	2e14      	cmp	r6, #20
 801dbf0:	d101      	bne.n	801dbf6 <floor+0xce>
 801dbf2:	3401      	adds	r4, #1
 801dbf4:	e006      	b.n	801dc04 <floor+0xdc>
 801dbf6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801dbfa:	2301      	movs	r3, #1
 801dbfc:	40b3      	lsls	r3, r6
 801dbfe:	441d      	add	r5, r3
 801dc00:	42af      	cmp	r7, r5
 801dc02:	d8f6      	bhi.n	801dbf2 <floor+0xca>
 801dc04:	ea25 0508 	bic.w	r5, r5, r8
 801dc08:	e7ae      	b.n	801db68 <floor+0x40>
 801dc0a:	2500      	movs	r5, #0
 801dc0c:	462c      	mov	r4, r5
 801dc0e:	e7ab      	b.n	801db68 <floor+0x40>
 801dc10:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801dc14:	e7a8      	b.n	801db68 <floor+0x40>
 801dc16:	bf00      	nop
 801dc18:	8800759c 	.word	0x8800759c
 801dc1c:	7e37e43c 	.word	0x7e37e43c
 801dc20:	bff00000 	.word	0xbff00000
 801dc24:	000fffff 	.word	0x000fffff

0801dc28 <_init>:
 801dc28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dc2a:	bf00      	nop
 801dc2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801dc2e:	bc08      	pop	{r3}
 801dc30:	469e      	mov	lr, r3
 801dc32:	4770      	bx	lr

0801dc34 <_fini>:
 801dc34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dc36:	bf00      	nop
 801dc38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801dc3a:	bc08      	pop	{r3}
 801dc3c:	469e      	mov	lr, r3
 801dc3e:	4770      	bx	lr
