
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001dbc0  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fc8  0801dcf8  0801dcf8  0002dcf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000d8  0801ecc0  0801ecc0  0002ecc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801ed98  0801ed98  00030148  2**0
                  CONTENTS
  5 .ARM          00000008  0801ed98  0801ed98  0002ed98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801eda0  0801eda0  00030148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0801eda0  0801eda0  0002eda0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801eda4  0801eda4  0002eda4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000148  20000000  0801eda8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00002188  20000148  0801eef0  00030148  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200022d0  0801eef0  000322d0  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00030148  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030172  2**0
                  CONTENTS, READONLY
 14 .debug_info   000486c8  00000000  00000000  000301b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000b24d  00000000  00000000  0007887d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003930  00000000  00000000  00083ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002b81  00000000  00000000  00087400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002afdb  00000000  00000000  00089f81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004665b  00000000  00000000  000b4f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d18c0  00000000  00000000  000fb5b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000ec18  00000000  00000000  001cce78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  001dba90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000148 	.word	0x20000148
 8000154:	00000000 	.word	0x00000000
 8000158:	0801dce0 	.word	0x0801dce0

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	2000014c 	.word	0x2000014c
 8000174:	0801dce0 	.word	0x0801dce0

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__gedf2>:
 8000500:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000504:	e006      	b.n	8000514 <__cmpdf2+0x4>
 8000506:	bf00      	nop

08000508 <__ledf2>:
 8000508:	f04f 0c01 	mov.w	ip, #1
 800050c:	e002      	b.n	8000514 <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__cmpdf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000518:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800051c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000520:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000524:	bf18      	it	ne
 8000526:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800052a:	d01b      	beq.n	8000564 <__cmpdf2+0x54>
 800052c:	b001      	add	sp, #4
 800052e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000532:	bf0c      	ite	eq
 8000534:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000538:	ea91 0f03 	teqne	r1, r3
 800053c:	bf02      	ittt	eq
 800053e:	ea90 0f02 	teqeq	r0, r2
 8000542:	2000      	moveq	r0, #0
 8000544:	4770      	bxeq	lr
 8000546:	f110 0f00 	cmn.w	r0, #0
 800054a:	ea91 0f03 	teq	r1, r3
 800054e:	bf58      	it	pl
 8000550:	4299      	cmppl	r1, r3
 8000552:	bf08      	it	eq
 8000554:	4290      	cmpeq	r0, r2
 8000556:	bf2c      	ite	cs
 8000558:	17d8      	asrcs	r0, r3, #31
 800055a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800055e:	f040 0001 	orr.w	r0, r0, #1
 8000562:	4770      	bx	lr
 8000564:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800056c:	d102      	bne.n	8000574 <__cmpdf2+0x64>
 800056e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000572:	d107      	bne.n	8000584 <__cmpdf2+0x74>
 8000574:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800057c:	d1d6      	bne.n	800052c <__cmpdf2+0x1c>
 800057e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000582:	d0d3      	beq.n	800052c <__cmpdf2+0x1c>
 8000584:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <__aeabi_cdrcmple>:
 800058c:	4684      	mov	ip, r0
 800058e:	4610      	mov	r0, r2
 8000590:	4662      	mov	r2, ip
 8000592:	468c      	mov	ip, r1
 8000594:	4619      	mov	r1, r3
 8000596:	4663      	mov	r3, ip
 8000598:	e000      	b.n	800059c <__aeabi_cdcmpeq>
 800059a:	bf00      	nop

0800059c <__aeabi_cdcmpeq>:
 800059c:	b501      	push	{r0, lr}
 800059e:	f7ff ffb7 	bl	8000510 <__cmpdf2>
 80005a2:	2800      	cmp	r0, #0
 80005a4:	bf48      	it	mi
 80005a6:	f110 0f00 	cmnmi.w	r0, #0
 80005aa:	bd01      	pop	{r0, pc}

080005ac <__aeabi_dcmpeq>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff fff4 	bl	800059c <__aeabi_cdcmpeq>
 80005b4:	bf0c      	ite	eq
 80005b6:	2001      	moveq	r0, #1
 80005b8:	2000      	movne	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmplt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffea 	bl	800059c <__aeabi_cdcmpeq>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmple>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffe0 	bl	800059c <__aeabi_cdcmpeq>
 80005dc:	bf94      	ite	ls
 80005de:	2001      	movls	r0, #1
 80005e0:	2000      	movhi	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_dcmpge>:
 80005e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ec:	f7ff ffce 	bl	800058c <__aeabi_cdrcmple>
 80005f0:	bf94      	ite	ls
 80005f2:	2001      	movls	r0, #1
 80005f4:	2000      	movhi	r0, #0
 80005f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fa:	bf00      	nop

080005fc <__aeabi_dcmpgt>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff ffc4 	bl	800058c <__aeabi_cdrcmple>
 8000604:	bf34      	ite	cc
 8000606:	2001      	movcc	r0, #1
 8000608:	2000      	movcs	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_d2iz>:
 8000610:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000614:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000618:	d215      	bcs.n	8000646 <__aeabi_d2iz+0x36>
 800061a:	d511      	bpl.n	8000640 <__aeabi_d2iz+0x30>
 800061c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000620:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000624:	d912      	bls.n	800064c <__aeabi_d2iz+0x3c>
 8000626:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800062a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800062e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000632:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000636:	fa23 f002 	lsr.w	r0, r3, r2
 800063a:	bf18      	it	ne
 800063c:	4240      	negne	r0, r0
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d105      	bne.n	8000658 <__aeabi_d2iz+0x48>
 800064c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000650:	bf08      	it	eq
 8000652:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000656:	4770      	bx	lr
 8000658:	f04f 0000 	mov.w	r0, #0
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <__aeabi_frsub>:
 8000660:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000664:	e002      	b.n	800066c <__addsf3>
 8000666:	bf00      	nop

08000668 <__aeabi_fsub>:
 8000668:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800066c <__addsf3>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	bf1f      	itttt	ne
 8000670:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000674:	ea92 0f03 	teqne	r2, r3
 8000678:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800067c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000680:	d06a      	beq.n	8000758 <__addsf3+0xec>
 8000682:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000686:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800068a:	bfc1      	itttt	gt
 800068c:	18d2      	addgt	r2, r2, r3
 800068e:	4041      	eorgt	r1, r0
 8000690:	4048      	eorgt	r0, r1
 8000692:	4041      	eorgt	r1, r0
 8000694:	bfb8      	it	lt
 8000696:	425b      	neglt	r3, r3
 8000698:	2b19      	cmp	r3, #25
 800069a:	bf88      	it	hi
 800069c:	4770      	bxhi	lr
 800069e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006aa:	bf18      	it	ne
 80006ac:	4240      	negne	r0, r0
 80006ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006ba:	bf18      	it	ne
 80006bc:	4249      	negne	r1, r1
 80006be:	ea92 0f03 	teq	r2, r3
 80006c2:	d03f      	beq.n	8000744 <__addsf3+0xd8>
 80006c4:	f1a2 0201 	sub.w	r2, r2, #1
 80006c8:	fa41 fc03 	asr.w	ip, r1, r3
 80006cc:	eb10 000c 	adds.w	r0, r0, ip
 80006d0:	f1c3 0320 	rsb	r3, r3, #32
 80006d4:	fa01 f103 	lsl.w	r1, r1, r3
 80006d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006dc:	d502      	bpl.n	80006e4 <__addsf3+0x78>
 80006de:	4249      	negs	r1, r1
 80006e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006e8:	d313      	bcc.n	8000712 <__addsf3+0xa6>
 80006ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ee:	d306      	bcc.n	80006fe <__addsf3+0x92>
 80006f0:	0840      	lsrs	r0, r0, #1
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	f102 0201 	add.w	r2, r2, #1
 80006fa:	2afe      	cmp	r2, #254	; 0xfe
 80006fc:	d251      	bcs.n	80007a2 <__addsf3+0x136>
 80006fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000702:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000706:	bf08      	it	eq
 8000708:	f020 0001 	biceq.w	r0, r0, #1
 800070c:	ea40 0003 	orr.w	r0, r0, r3
 8000710:	4770      	bx	lr
 8000712:	0049      	lsls	r1, r1, #1
 8000714:	eb40 0000 	adc.w	r0, r0, r0
 8000718:	3a01      	subs	r2, #1
 800071a:	bf28      	it	cs
 800071c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000720:	d2ed      	bcs.n	80006fe <__addsf3+0x92>
 8000722:	fab0 fc80 	clz	ip, r0
 8000726:	f1ac 0c08 	sub.w	ip, ip, #8
 800072a:	ebb2 020c 	subs.w	r2, r2, ip
 800072e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000732:	bfaa      	itet	ge
 8000734:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000738:	4252      	neglt	r2, r2
 800073a:	4318      	orrge	r0, r3
 800073c:	bfbc      	itt	lt
 800073e:	40d0      	lsrlt	r0, r2
 8000740:	4318      	orrlt	r0, r3
 8000742:	4770      	bx	lr
 8000744:	f092 0f00 	teq	r2, #0
 8000748:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800074c:	bf06      	itte	eq
 800074e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000752:	3201      	addeq	r2, #1
 8000754:	3b01      	subne	r3, #1
 8000756:	e7b5      	b.n	80006c4 <__addsf3+0x58>
 8000758:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800075c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000760:	bf18      	it	ne
 8000762:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000766:	d021      	beq.n	80007ac <__addsf3+0x140>
 8000768:	ea92 0f03 	teq	r2, r3
 800076c:	d004      	beq.n	8000778 <__addsf3+0x10c>
 800076e:	f092 0f00 	teq	r2, #0
 8000772:	bf08      	it	eq
 8000774:	4608      	moveq	r0, r1
 8000776:	4770      	bx	lr
 8000778:	ea90 0f01 	teq	r0, r1
 800077c:	bf1c      	itt	ne
 800077e:	2000      	movne	r0, #0
 8000780:	4770      	bxne	lr
 8000782:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000786:	d104      	bne.n	8000792 <__addsf3+0x126>
 8000788:	0040      	lsls	r0, r0, #1
 800078a:	bf28      	it	cs
 800078c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000790:	4770      	bx	lr
 8000792:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000796:	bf3c      	itt	cc
 8000798:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800079c:	4770      	bxcc	lr
 800079e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007aa:	4770      	bx	lr
 80007ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b0:	bf16      	itet	ne
 80007b2:	4608      	movne	r0, r1
 80007b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007b8:	4601      	movne	r1, r0
 80007ba:	0242      	lsls	r2, r0, #9
 80007bc:	bf06      	itte	eq
 80007be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007c2:	ea90 0f01 	teqeq	r0, r1
 80007c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007ca:	4770      	bx	lr

080007cc <__aeabi_ui2f>:
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	e004      	b.n	80007dc <__aeabi_i2f+0x8>
 80007d2:	bf00      	nop

080007d4 <__aeabi_i2f>:
 80007d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007d8:	bf48      	it	mi
 80007da:	4240      	negmi	r0, r0
 80007dc:	ea5f 0c00 	movs.w	ip, r0
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007e8:	4601      	mov	r1, r0
 80007ea:	f04f 0000 	mov.w	r0, #0
 80007ee:	e01c      	b.n	800082a <__aeabi_l2f+0x2a>

080007f0 <__aeabi_ul2f>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e00a      	b.n	8000814 <__aeabi_l2f+0x14>
 80007fe:	bf00      	nop

08000800 <__aeabi_l2f>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800080c:	d502      	bpl.n	8000814 <__aeabi_l2f+0x14>
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	ea5f 0c01 	movs.w	ip, r1
 8000818:	bf02      	ittt	eq
 800081a:	4684      	moveq	ip, r0
 800081c:	4601      	moveq	r1, r0
 800081e:	2000      	moveq	r0, #0
 8000820:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000824:	bf08      	it	eq
 8000826:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800082a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800082e:	fabc f28c 	clz	r2, ip
 8000832:	3a08      	subs	r2, #8
 8000834:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000838:	db10      	blt.n	800085c <__aeabi_l2f+0x5c>
 800083a:	fa01 fc02 	lsl.w	ip, r1, r2
 800083e:	4463      	add	r3, ip
 8000840:	fa00 fc02 	lsl.w	ip, r0, r2
 8000844:	f1c2 0220 	rsb	r2, r2, #32
 8000848:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800084c:	fa20 f202 	lsr.w	r2, r0, r2
 8000850:	eb43 0002 	adc.w	r0, r3, r2
 8000854:	bf08      	it	eq
 8000856:	f020 0001 	biceq.w	r0, r0, #1
 800085a:	4770      	bx	lr
 800085c:	f102 0220 	add.w	r2, r2, #32
 8000860:	fa01 fc02 	lsl.w	ip, r1, r2
 8000864:	f1c2 0220 	rsb	r2, r2, #32
 8000868:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800086c:	fa21 f202 	lsr.w	r2, r1, r2
 8000870:	eb43 0002 	adc.w	r0, r3, r2
 8000874:	bf08      	it	eq
 8000876:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800087a:	4770      	bx	lr

0800087c <__aeabi_fmul>:
 800087c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000880:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000884:	bf1e      	ittt	ne
 8000886:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800088a:	ea92 0f0c 	teqne	r2, ip
 800088e:	ea93 0f0c 	teqne	r3, ip
 8000892:	d06f      	beq.n	8000974 <__aeabi_fmul+0xf8>
 8000894:	441a      	add	r2, r3
 8000896:	ea80 0c01 	eor.w	ip, r0, r1
 800089a:	0240      	lsls	r0, r0, #9
 800089c:	bf18      	it	ne
 800089e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008a2:	d01e      	beq.n	80008e2 <__aeabi_fmul+0x66>
 80008a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008b0:	fba0 3101 	umull	r3, r1, r0, r1
 80008b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80008b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80008bc:	bf3e      	ittt	cc
 80008be:	0049      	lslcc	r1, r1, #1
 80008c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008c4:	005b      	lslcc	r3, r3, #1
 80008c6:	ea40 0001 	orr.w	r0, r0, r1
 80008ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80008ce:	2afd      	cmp	r2, #253	; 0xfd
 80008d0:	d81d      	bhi.n	800090e <__aeabi_fmul+0x92>
 80008d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80008d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008da:	bf08      	it	eq
 80008dc:	f020 0001 	biceq.w	r0, r0, #1
 80008e0:	4770      	bx	lr
 80008e2:	f090 0f00 	teq	r0, #0
 80008e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008ea:	bf08      	it	eq
 80008ec:	0249      	lsleq	r1, r1, #9
 80008ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008f6:	3a7f      	subs	r2, #127	; 0x7f
 80008f8:	bfc2      	ittt	gt
 80008fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80008fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000902:	4770      	bxgt	lr
 8000904:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000908:	f04f 0300 	mov.w	r3, #0
 800090c:	3a01      	subs	r2, #1
 800090e:	dc5d      	bgt.n	80009cc <__aeabi_fmul+0x150>
 8000910:	f112 0f19 	cmn.w	r2, #25
 8000914:	bfdc      	itt	le
 8000916:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800091a:	4770      	bxle	lr
 800091c:	f1c2 0200 	rsb	r2, r2, #0
 8000920:	0041      	lsls	r1, r0, #1
 8000922:	fa21 f102 	lsr.w	r1, r1, r2
 8000926:	f1c2 0220 	rsb	r2, r2, #32
 800092a:	fa00 fc02 	lsl.w	ip, r0, r2
 800092e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000932:	f140 0000 	adc.w	r0, r0, #0
 8000936:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800093a:	bf08      	it	eq
 800093c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000940:	4770      	bx	lr
 8000942:	f092 0f00 	teq	r2, #0
 8000946:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800094a:	bf02      	ittt	eq
 800094c:	0040      	lsleq	r0, r0, #1
 800094e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000952:	3a01      	subeq	r2, #1
 8000954:	d0f9      	beq.n	800094a <__aeabi_fmul+0xce>
 8000956:	ea40 000c 	orr.w	r0, r0, ip
 800095a:	f093 0f00 	teq	r3, #0
 800095e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000962:	bf02      	ittt	eq
 8000964:	0049      	lsleq	r1, r1, #1
 8000966:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800096a:	3b01      	subeq	r3, #1
 800096c:	d0f9      	beq.n	8000962 <__aeabi_fmul+0xe6>
 800096e:	ea41 010c 	orr.w	r1, r1, ip
 8000972:	e78f      	b.n	8000894 <__aeabi_fmul+0x18>
 8000974:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000978:	ea92 0f0c 	teq	r2, ip
 800097c:	bf18      	it	ne
 800097e:	ea93 0f0c 	teqne	r3, ip
 8000982:	d00a      	beq.n	800099a <__aeabi_fmul+0x11e>
 8000984:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000988:	bf18      	it	ne
 800098a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800098e:	d1d8      	bne.n	8000942 <__aeabi_fmul+0xc6>
 8000990:	ea80 0001 	eor.w	r0, r0, r1
 8000994:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000998:	4770      	bx	lr
 800099a:	f090 0f00 	teq	r0, #0
 800099e:	bf17      	itett	ne
 80009a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80009a4:	4608      	moveq	r0, r1
 80009a6:	f091 0f00 	teqne	r1, #0
 80009aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80009ae:	d014      	beq.n	80009da <__aeabi_fmul+0x15e>
 80009b0:	ea92 0f0c 	teq	r2, ip
 80009b4:	d101      	bne.n	80009ba <__aeabi_fmul+0x13e>
 80009b6:	0242      	lsls	r2, r0, #9
 80009b8:	d10f      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009ba:	ea93 0f0c 	teq	r3, ip
 80009be:	d103      	bne.n	80009c8 <__aeabi_fmul+0x14c>
 80009c0:	024b      	lsls	r3, r1, #9
 80009c2:	bf18      	it	ne
 80009c4:	4608      	movne	r0, r1
 80009c6:	d108      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009c8:	ea80 0001 	eor.w	r0, r0, r1
 80009cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d8:	4770      	bx	lr
 80009da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_fdiv>:
 80009e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009ec:	bf1e      	ittt	ne
 80009ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009f2:	ea92 0f0c 	teqne	r2, ip
 80009f6:	ea93 0f0c 	teqne	r3, ip
 80009fa:	d069      	beq.n	8000ad0 <__aeabi_fdiv+0xec>
 80009fc:	eba2 0203 	sub.w	r2, r2, r3
 8000a00:	ea80 0c01 	eor.w	ip, r0, r1
 8000a04:	0249      	lsls	r1, r1, #9
 8000a06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a0a:	d037      	beq.n	8000a7c <__aeabi_fdiv+0x98>
 8000a0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	bf38      	it	cc
 8000a20:	005b      	lslcc	r3, r3, #1
 8000a22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000a26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	bf24      	itt	cs
 8000a2e:	1a5b      	subcs	r3, r3, r1
 8000a30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a38:	bf24      	itt	cs
 8000a3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a46:	bf24      	itt	cs
 8000a48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a54:	bf24      	itt	cs
 8000a56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a5e:	011b      	lsls	r3, r3, #4
 8000a60:	bf18      	it	ne
 8000a62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a66:	d1e0      	bne.n	8000a2a <__aeabi_fdiv+0x46>
 8000a68:	2afd      	cmp	r2, #253	; 0xfd
 8000a6a:	f63f af50 	bhi.w	800090e <__aeabi_fmul+0x92>
 8000a6e:	428b      	cmp	r3, r1
 8000a70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a84:	327f      	adds	r2, #127	; 0x7f
 8000a86:	bfc2      	ittt	gt
 8000a88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a90:	4770      	bxgt	lr
 8000a92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a96:	f04f 0300 	mov.w	r3, #0
 8000a9a:	3a01      	subs	r2, #1
 8000a9c:	e737      	b.n	800090e <__aeabi_fmul+0x92>
 8000a9e:	f092 0f00 	teq	r2, #0
 8000aa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0040      	lsleq	r0, r0, #1
 8000aaa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000aae:	3a01      	subeq	r2, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fdiv+0xc2>
 8000ab2:	ea40 000c 	orr.w	r0, r0, ip
 8000ab6:	f093 0f00 	teq	r3, #0
 8000aba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0049      	lsleq	r1, r1, #1
 8000ac2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ac6:	3b01      	subeq	r3, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fdiv+0xda>
 8000aca:	ea41 010c 	orr.w	r1, r1, ip
 8000ace:	e795      	b.n	80009fc <__aeabi_fdiv+0x18>
 8000ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad4:	ea92 0f0c 	teq	r2, ip
 8000ad8:	d108      	bne.n	8000aec <__aeabi_fdiv+0x108>
 8000ada:	0242      	lsls	r2, r0, #9
 8000adc:	f47f af7d 	bne.w	80009da <__aeabi_fmul+0x15e>
 8000ae0:	ea93 0f0c 	teq	r3, ip
 8000ae4:	f47f af70 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000ae8:	4608      	mov	r0, r1
 8000aea:	e776      	b.n	80009da <__aeabi_fmul+0x15e>
 8000aec:	ea93 0f0c 	teq	r3, ip
 8000af0:	d104      	bne.n	8000afc <__aeabi_fdiv+0x118>
 8000af2:	024b      	lsls	r3, r1, #9
 8000af4:	f43f af4c 	beq.w	8000990 <__aeabi_fmul+0x114>
 8000af8:	4608      	mov	r0, r1
 8000afa:	e76e      	b.n	80009da <__aeabi_fmul+0x15e>
 8000afc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b00:	bf18      	it	ne
 8000b02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b06:	d1ca      	bne.n	8000a9e <__aeabi_fdiv+0xba>
 8000b08:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000b0c:	f47f af5c 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000b10:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000b14:	f47f af3c 	bne.w	8000990 <__aeabi_fmul+0x114>
 8000b18:	e75f      	b.n	80009da <__aeabi_fmul+0x15e>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_f2iz>:
 8000b1c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b20:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b24:	d30f      	bcc.n	8000b46 <__aeabi_f2iz+0x2a>
 8000b26:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b2a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b2e:	d90d      	bls.n	8000b4c <__aeabi_f2iz+0x30>
 8000b30:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b38:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b3c:	fa23 f002 	lsr.w	r0, r3, r2
 8000b40:	bf18      	it	ne
 8000b42:	4240      	negne	r0, r0
 8000b44:	4770      	bx	lr
 8000b46:	f04f 0000 	mov.w	r0, #0
 8000b4a:	4770      	bx	lr
 8000b4c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b50:	d101      	bne.n	8000b56 <__aeabi_f2iz+0x3a>
 8000b52:	0242      	lsls	r2, r0, #9
 8000b54:	d105      	bne.n	8000b62 <__aeabi_f2iz+0x46>
 8000b56:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000b5a:	bf08      	it	eq
 8000b5c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0000 	mov.w	r0, #0
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_f2uiz>:
 8000b68:	0042      	lsls	r2, r0, #1
 8000b6a:	d20e      	bcs.n	8000b8a <__aeabi_f2uiz+0x22>
 8000b6c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b70:	d30b      	bcc.n	8000b8a <__aeabi_f2uiz+0x22>
 8000b72:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b76:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b7a:	d409      	bmi.n	8000b90 <__aeabi_f2uiz+0x28>
 8000b7c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b84:	fa23 f002 	lsr.w	r0, r3, r2
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0000 	mov.w	r0, #0
 8000b8e:	4770      	bx	lr
 8000b90:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b94:	d101      	bne.n	8000b9a <__aeabi_f2uiz+0x32>
 8000b96:	0242      	lsls	r2, r0, #9
 8000b98:	d102      	bne.n	8000ba0 <__aeabi_f2uiz+0x38>
 8000b9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c2c:	f080 811b 	bcs.w	8000e66 <__udivmoddi4+0x28e>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8118 	bls.w	8000e66 <__udivmoddi4+0x28e>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c5a:	f080 8106 	bcs.w	8000e6a <__udivmoddi4+0x292>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8103 	bls.w	8000e6a <__udivmoddi4+0x292>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ec 	beq.w	8000e60 <__udivmoddi4+0x288>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f7 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 808f 	bne.w	8000de6 <__udivmoddi4+0x20e>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80ca 	bhi.w	8000e8e <__udivmoddi4+0x2b6>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80ba 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	4323      	orrs	r3, r4
 8000d4a:	fa00 f901 	lsl.w	r9, r0, r1
 8000d4e:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fbb5 f8f0 	udiv	r8, r5, r0
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	fb00 5518 	mls	r5, r0, r8, r5
 8000d60:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d64:	fb08 f50e 	mul.w	r5, r8, lr
 8000d68:	42a5      	cmp	r5, r4
 8000d6a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d78:	f080 8087 	bcs.w	8000e8a <__udivmoddi4+0x2b2>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8084 	bls.w	8000e8a <__udivmoddi4+0x2b2>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d90:	fb00 4413 	mls	r4, r0, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8000da8:	d26b      	bcs.n	8000e82 <__udivmoddi4+0x2aa>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d969      	bls.n	8000e82 <__udivmoddi4+0x2aa>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000db6:	fba0 8302 	umull	r8, r3, r0, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	429c      	cmp	r4, r3
 8000dc0:	46c6      	mov	lr, r8
 8000dc2:	461d      	mov	r5, r3
 8000dc4:	d355      	bcc.n	8000e72 <__udivmoddi4+0x29a>
 8000dc6:	d052      	beq.n	8000e6e <__udivmoddi4+0x296>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb9 030e 	subs.w	r3, r9, lr
 8000dce:	eb64 0405 	sbc.w	r4, r4, r5
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40cb      	lsrs	r3, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	431f      	orrs	r7, r3
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	2100      	movs	r1, #0
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	f1c3 0120 	rsb	r1, r3, #32
 8000dea:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dee:	fa20 f201 	lsr.w	r2, r0, r1
 8000df2:	fa25 f101 	lsr.w	r1, r5, r1
 8000df6:	409d      	lsls	r5, r3
 8000df8:	432a      	orrs	r2, r5
 8000dfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dfe:	fa1f fe8c 	uxth.w	lr, ip
 8000e02:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e06:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0a:	0c11      	lsrs	r1, r2, #16
 8000e0c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e10:	fb00 f50e 	mul.w	r5, r0, lr
 8000e14:	428d      	cmp	r5, r1
 8000e16:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x256>
 8000e1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e20:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e24:	d22f      	bcs.n	8000e86 <__udivmoddi4+0x2ae>
 8000e26:	428d      	cmp	r5, r1
 8000e28:	d92d      	bls.n	8000e86 <__udivmoddi4+0x2ae>
 8000e2a:	3802      	subs	r0, #2
 8000e2c:	4461      	add	r1, ip
 8000e2e:	1b49      	subs	r1, r1, r5
 8000e30:	b292      	uxth	r2, r2
 8000e32:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e36:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e3e:	fb05 f10e 	mul.w	r1, r5, lr
 8000e42:	4291      	cmp	r1, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x280>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e4e:	d216      	bcs.n	8000e7e <__udivmoddi4+0x2a6>
 8000e50:	4291      	cmp	r1, r2
 8000e52:	d914      	bls.n	8000e7e <__udivmoddi4+0x2a6>
 8000e54:	3d02      	subs	r5, #2
 8000e56:	4462      	add	r2, ip
 8000e58:	1a52      	subs	r2, r2, r1
 8000e5a:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e5e:	e739      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e60:	4631      	mov	r1, r6
 8000e62:	4630      	mov	r0, r6
 8000e64:	e709      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e66:	4639      	mov	r1, r7
 8000e68:	e6e7      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6a:	4610      	mov	r0, r2
 8000e6c:	e6fc      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e6e:	45c1      	cmp	r9, r8
 8000e70:	d2aa      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e72:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e76:	eb63 050c 	sbc.w	r5, r3, ip
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a4      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e7e:	4645      	mov	r5, r8
 8000e80:	e7ea      	b.n	8000e58 <__udivmoddi4+0x280>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e795      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e86:	4640      	mov	r0, r8
 8000e88:	e7d1      	b.n	8000e2e <__udivmoddi4+0x256>
 8000e8a:	46d0      	mov	r8, sl
 8000e8c:	e77c      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e8e:	3d02      	subs	r5, #2
 8000e90:	4462      	add	r2, ip
 8000e92:	e733      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e94:	4608      	mov	r0, r1
 8000e96:	e70b      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e98:	4464      	add	r4, ip
 8000e9a:	3802      	subs	r0, #2
 8000e9c:	e743      	b.n	8000d26 <__udivmoddi4+0x14e>
 8000e9e:	bf00      	nop

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000eac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eb0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000eb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ec0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
}
 8000eca:	bf00      	nop
 8000ecc:	3714      	adds	r7, #20
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr

08000ed4 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ee0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ee2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000eec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ef0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
}
 8000efa:	bf00      	nop
 8000efc:	3714      	adds	r7, #20
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr

08000f04 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000f0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f10:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	43db      	mvns	r3, r3
 8000f16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	660b      	str	r3, [r1, #96]	; 0x60
}
 8000f1e:	bf00      	nop
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr

08000f28 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000f2c:	4b23      	ldr	r3, [pc, #140]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f2e:	4a24      	ldr	r2, [pc, #144]	; (8000fc0 <MX_ADC_Init+0x98>)
 8000f30:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f32:	4b22      	ldr	r3, [pc, #136]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f34:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000f38:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000f3a:	4b20      	ldr	r3, [pc, #128]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f40:	4b1e      	ldr	r3, [pc, #120]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f46:	4b1d      	ldr	r3, [pc, #116]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f4c:	4b1b      	ldr	r3, [pc, #108]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f4e:	2204      	movs	r2, #4
 8000f50:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000f52:	4b1a      	ldr	r3, [pc, #104]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000f58:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000f5e:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8000f64:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000f6a:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f72:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f78:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000f7e:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f86:	4b0d      	ldr	r3, [pc, #52]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f8c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000f8e:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f90:	2207      	movs	r2, #7
 8000f92:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000f94:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f96:	2207      	movs	r2, #7
 8000f98:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000f9a:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000fa2:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <MX_ADC_Init+0x94>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000fa8:	4804      	ldr	r0, [pc, #16]	; (8000fbc <MX_ADC_Init+0x94>)
 8000faa:	f002 f91d 	bl	80031e8 <HAL_ADC_Init>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8000fb4:	f000 fd1e 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000164 	.word	0x20000164
 8000fc0:	40012400 	.word	0x40012400

08000fc4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b088      	sub	sp, #32
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f107 030c 	add.w	r3, r7, #12
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a0d      	ldr	r2, [pc, #52]	; (8001018 <HAL_ADC_MspInit+0x54>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d113      	bne.n	800100e <HAL_ADC_MspInit+0x4a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000fe6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fea:	f7ff ff73 	bl	8000ed4 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fee:	2002      	movs	r0, #2
 8000ff0:	f7ff ff58 	bl	8000ea4 <LL_AHB2_GRP1_EnableClock>
    /**ADC GPIO Configuration
    PB3     ------> ADC_IN2
    PB4     ------> ADC_IN3
    PB13     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = SiPM_temp_ADC_Pin|GPIO_PIN_4|Battery_Monitor_ADC_Pin;
 8000ff4:	f242 0318 	movw	r3, #8216	; 0x2018
 8000ff8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001002:	f107 030c 	add.w	r3, r7, #12
 8001006:	4619      	mov	r1, r3
 8001008:	4804      	ldr	r0, [pc, #16]	; (800101c <HAL_ADC_MspInit+0x58>)
 800100a:	f003 feed 	bl	8004de8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 800100e:	bf00      	nop
 8001010:	3720      	adds	r7, #32
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40012400 	.word	0x40012400
 800101c:	48000400 	.word	0x48000400

08001020 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a07      	ldr	r2, [pc, #28]	; (800104c <HAL_ADC_MspDeInit+0x2c>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d108      	bne.n	8001044 <HAL_ADC_MspDeInit+0x24>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8001032:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001036:	f7ff ff65 	bl	8000f04 <LL_APB2_GRP1_DisableClock>
    /**ADC GPIO Configuration
    PB3     ------> ADC_IN2
    PB4     ------> ADC_IN3
    PB13     ------> ADC_IN0
    */
    HAL_GPIO_DeInit(GPIOB, SiPM_temp_ADC_Pin|GPIO_PIN_4|Battery_Monitor_ADC_Pin);
 800103a:	f242 0118 	movw	r1, #8216	; 0x2018
 800103e:	4804      	ldr	r0, [pc, #16]	; (8001050 <HAL_ADC_MspDeInit+0x30>)
 8001040:	f004 f832 	bl	80050a8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8001044:	bf00      	nop
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40012400 	.word	0x40012400
 8001050:	48000400 	.word	0x48000400

08001054 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 8001058:	4b03      	ldr	r3, [pc, #12]	; (8001068 <SYS_InitMeasurement+0x14>)
 800105a:	4a04      	ldr	r2, [pc, #16]	; (800106c <SYS_InitMeasurement+0x18>)
 800105c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 800105e:	bf00      	nop
 8001060:	46bd      	mov	sp, r7
 8001062:	bc80      	pop	{r7}
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	20000164 	.word	0x20000164
 800106c:	40012400 	.word	0x40012400

08001070 <SYS_GetBatteryLevel>:

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}

uint16_t SYS_GetBatteryLevel(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 800107e:	4813      	ldr	r0, [pc, #76]	; (80010cc <SYS_GetBatteryLevel+0x5c>)
 8001080:	f000 f82a 	bl	80010d8 <ADC_ReadChannels>
 8001084:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d102      	bne.n	8001092 <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	80fb      	strh	r3, [r7, #6]
 8001090:	e016      	b.n	80010c0 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8001092:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <SYS_GetBatteryLevel+0x60>)
 8001094:	881b      	ldrh	r3, [r3, #0]
 8001096:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800109a:	4293      	cmp	r3, r2
 800109c:	d00b      	beq.n	80010b6 <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 800109e:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <SYS_GetBatteryLevel+0x60>)
 80010a0:	881b      	ldrh	r3, [r3, #0]
 80010a2:	461a      	mov	r2, r3
 80010a4:	f640 43e4 	movw	r3, #3300	; 0xce4
 80010a8:	fb03 f202 	mul.w	r2, r3, r2
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b2:	80fb      	strh	r3, [r7, #6]
 80010b4:	e004      	b.n	80010c0 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 80010b6:	4a07      	ldr	r2, [pc, #28]	; (80010d4 <SYS_GetBatteryLevel+0x64>)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80010be:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 80010c0:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	b4002000 	.word	0xb4002000
 80010d0:	1fff75aa 	.word	0x1fff75aa
 80010d4:	004c08d8 	.word	0x004c08d8

080010d8 <ADC_ReadChannels>:
/* Private Functions Definition -----------------------------------------------*/
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

uint32_t ADC_ReadChannels(uint32_t channel){
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
	return ADC_ReadChannel(channel, 0);
 80010e0:	2100      	movs	r1, #0
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f000 f806 	bl	80010f4 <ADC_ReadChannel>
 80010e8:	4603      	mov	r3, r0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
	...

080010f4 <ADC_ReadChannel>:

uint32_t ADC_ReadChannel(uint32_t channel, uint32_t samplingTime)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001102:	f107 0308 	add.w	r3, r7, #8
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 800110e:	f7ff ff0b 	bl	8000f28 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8001112:	481d      	ldr	r0, [pc, #116]	; (8001188 <ADC_ReadChannel+0x94>)
 8001114:	f002 fe87 	bl	8003e26 <HAL_ADCEx_Calibration_Start>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <ADC_ReadChannel+0x2e>
  {
    Error_Handler();
 800111e:	f000 fc69 	bl	80019f4 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]

  if (samplingTime > 0) {sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;}
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d002      	beq.n	8001136 <ADC_ReadChannel+0x42>
 8001130:	2300      	movs	r3, #0
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	e001      	b.n	800113a <ADC_ReadChannel+0x46>
  else {sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;}
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]

  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800113a:	f107 0308 	add.w	r3, r7, #8
 800113e:	4619      	mov	r1, r3
 8001140:	4811      	ldr	r0, [pc, #68]	; (8001188 <ADC_ReadChannel+0x94>)
 8001142:	f002 fb8d 	bl	8003860 <HAL_ADC_ConfigChannel>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <ADC_ReadChannel+0x5c>
  {
    Error_Handler();
 800114c:	f000 fc52 	bl	80019f4 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8001150:	480d      	ldr	r0, [pc, #52]	; (8001188 <ADC_ReadChannel+0x94>)
 8001152:	f002 fa69 	bl	8003628 <HAL_ADC_Start>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <ADC_ReadChannel+0x6c>
  {
    /* Start Error */
    Error_Handler();
 800115c:	f000 fc4a 	bl	80019f4 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8001160:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001164:	4808      	ldr	r0, [pc, #32]	; (8001188 <ADC_ReadChannel+0x94>)
 8001166:	f002 fad7 	bl	8003718 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 800116a:	4807      	ldr	r0, [pc, #28]	; (8001188 <ADC_ReadChannel+0x94>)
 800116c:	f002 faa2 	bl	80036b4 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8001170:	4805      	ldr	r0, [pc, #20]	; (8001188 <ADC_ReadChannel+0x94>)
 8001172:	f002 fb68 	bl	8003846 <HAL_ADC_GetValue>
 8001176:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 8001178:	4803      	ldr	r0, [pc, #12]	; (8001188 <ADC_ReadChannel+0x94>)
 800117a:	f002 f9c9 	bl	8003510 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 800117e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8001180:	4618      	mov	r0, r3
 8001182:	3718      	adds	r7, #24
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20000164 	.word	0x20000164

0800118c <LL_AHB1_GRP1_EnableClock>:
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001198:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800119a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80011a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4013      	ands	r3, r2
 80011ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011b0:	68fb      	ldr	r3, [r7, #12]
}
 80011b2:	bf00      	nop
 80011b4:	3714      	adds	r7, #20
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc80      	pop	{r7}
 80011ba:	4770      	bx	lr

080011bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80011c0:	2004      	movs	r0, #4
 80011c2:	f7ff ffe3 	bl	800118c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011c6:	2001      	movs	r0, #1
 80011c8:	f7ff ffe0 	bl	800118c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 80011cc:	2200      	movs	r2, #0
 80011ce:	2102      	movs	r1, #2
 80011d0:	200b      	movs	r0, #11
 80011d2:	f002 ffce 	bl	8004172 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80011d6:	200b      	movs	r0, #11
 80011d8:	f002 ffe5 	bl	80041a6 <HAL_NVIC_EnableIRQ>

}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}

080011e0 <FLASH_IF_Write>:
  /* USER CODE END FLASH_IF_DeInit_2 */
  return ret_status;
}

FLASH_IF_StatusTypedef FLASH_IF_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80011ec:	23ff      	movs	r3, #255	; 0xff
 80011ee:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80011f6:	d311      	bcc.n	800121c <FLASH_IF_Write+0x3c>
 80011f8:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <FLASH_IF_Write+0x48>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	029a      	lsls	r2, r3, #10
 80011fe:	4b0b      	ldr	r3, [pc, #44]	; (800122c <FLASH_IF_Write+0x4c>)
 8001200:	4013      	ands	r3, r2
 8001202:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001206:	3b01      	subs	r3, #1
 8001208:	68fa      	ldr	r2, [r7, #12]
 800120a:	4293      	cmp	r3, r2
 800120c:	d306      	bcc.n	800121c <FLASH_IF_Write+0x3c>
  {
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	68b9      	ldr	r1, [r7, #8]
 8001212:	68f8      	ldr	r0, [r7, #12]
 8001214:	f000 f85a 	bl	80012cc <FLASH_IF_INT_Write>
 8001218:	4603      	mov	r3, r0
 800121a:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
  return ret_status;
 800121c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001220:	4618      	mov	r0, r3
 8001222:	3718      	adds	r7, #24
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	1fff75e0 	.word	0x1fff75e0
 800122c:	03fffc00 	.word	0x03fffc00

08001230 <FLASH_IF_Read>:

FLASH_IF_StatusTypedef FLASH_IF_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 800123c:	23ff      	movs	r3, #255	; 0xff
 800123e:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Read_1 */

  /* USER CODE END FLASH_IF_Read_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001246:	d311      	bcc.n	800126c <FLASH_IF_Read+0x3c>
 8001248:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <FLASH_IF_Read+0x48>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	029a      	lsls	r2, r3, #10
 800124e:	4b0b      	ldr	r3, [pc, #44]	; (800127c <FLASH_IF_Read+0x4c>)
 8001250:	4013      	ands	r3, r2
 8001252:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001256:	3b01      	subs	r3, #1
 8001258:	68ba      	ldr	r2, [r7, #8]
 800125a:	4293      	cmp	r3, r2
 800125c:	d306      	bcc.n	800126c <FLASH_IF_Read+0x3c>
  {
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	68b9      	ldr	r1, [r7, #8]
 8001262:	68f8      	ldr	r0, [r7, #12]
 8001264:	f000 f93a 	bl	80014dc <FLASH_IF_INT_Read>
 8001268:	4603      	mov	r3, r0
 800126a:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Read_2 */

  /* USER CODE END FLASH_IF_Read_2 */
  return ret_status;
 800126c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001270:	4618      	mov	r0, r3
 8001272:	3718      	adds	r7, #24
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	1fff75e0 	.word	0x1fff75e0
 800127c:	03fffc00 	.word	0x03fffc00

08001280 <FLASH_IF_Erase>:

FLASH_IF_StatusTypedef FLASH_IF_Erase(void *pStart, uint32_t uLength)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 800128a:	23ff      	movs	r3, #255	; 0xff
 800128c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN FLASH_IF_Erase_1 */

  /* USER CODE END FLASH_IF_Erase_1 */
  /* Check Flash start address */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001294:	d310      	bcc.n	80012b8 <FLASH_IF_Erase+0x38>
 8001296:	4b0b      	ldr	r3, [pc, #44]	; (80012c4 <FLASH_IF_Erase+0x44>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	029a      	lsls	r2, r3, #10
 800129c:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <FLASH_IF_Erase+0x48>)
 800129e:	4013      	ands	r3, r2
 80012a0:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80012a4:	3b01      	subs	r3, #1
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d305      	bcc.n	80012b8 <FLASH_IF_Erase+0x38>
  {
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 80012ac:	6839      	ldr	r1, [r7, #0]
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f000 f932 	bl	8001518 <FLASH_IF_INT_Erase>
 80012b4:	4603      	mov	r3, r0
 80012b6:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE BEGIN FLASH_IF_Erase_2 */

  /* USER CODE END FLASH_IF_Erase_2 */
  return ret_status;
 80012b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3710      	adds	r7, #16
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	1fff75e0 	.word	0x1fff75e0
 80012c8:	03fffc00 	.word	0x03fffc00

080012cc <FLASH_IF_INT_Write>:

/* Private Functions Definition -----------------------------------------------*/

/* Private Functions : internal flash -----------------------------------------*/
static FLASH_IF_StatusTypedef FLASH_IF_INT_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b090      	sub	sp, #64	; 0x40
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 80012d8:	2300      	movs	r3, #0
 80012da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  /* USER CODE BEGIN FLASH_IF_INT_Write_1 */

  /* USER CODE END FLASH_IF_INT_Write_1 */
  uint32_t uDest = (uint32_t)pDestination;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t uSource = (uint32_t)pSource;
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t length = uLength;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t number_pages;
  uint32_t current_dest;
  uint32_t current_source;
  uint32_t current_length;

  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d00c      	beq.n	800130a <FLASH_IF_INT_Write+0x3e>
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d009      	beq.n	800130a <FLASH_IF_INT_Write+0x3e>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f003 0307 	and.w	r3, r3, #7
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d104      	bne.n	800130a <FLASH_IF_INT_Write+0x3e>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	2b00      	cmp	r3, #0
 8001308:	d002      	beq.n	8001310 <FLASH_IF_INT_Write+0x44>
  {
    return FLASH_IF_PARAM_ERROR;
 800130a:	f06f 0305 	mvn.w	r3, #5
 800130e:	e0da      	b.n	80014c6 <FLASH_IF_INT_Write+0x1fa>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 8001310:	f000 f992 	bl	8001638 <FLASH_IF_INT_Clear_Error>
 8001314:	4603      	mov	r3, r0
 8001316:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (ret_status == FLASH_IF_OK)
 800131a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800131e:	2b00      	cmp	r3, #0
 8001320:	f040 80cf 	bne.w	80014c2 <FLASH_IF_INT_Write+0x1f6>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001324:	f003 fb8a 	bl	8004a3c <HAL_FLASH_Unlock>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	f040 80c6 	bne.w	80014bc <FLASH_IF_INT_Write+0x1f0>
    {
      start_page_index = PAGE_INDEX(uDest);
 8001330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001332:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 8001336:	4b66      	ldr	r3, [pc, #408]	; (80014d0 <FLASH_IF_INT_Write+0x204>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	0299      	lsls	r1, r3, #10
 800133c:	4b65      	ldr	r3, [pc, #404]	; (80014d4 <FLASH_IF_INT_Write+0x208>)
 800133e:	400b      	ands	r3, r1
 8001340:	fbb2 f1f3 	udiv	r1, r2, r3
 8001344:	fb01 f303 	mul.w	r3, r1, r3
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	0adb      	lsrs	r3, r3, #11
 800134c:	61bb      	str	r3, [r7, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 800134e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4413      	add	r3, r2
 8001354:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001358:	3b01      	subs	r3, #1
 800135a:	4a5d      	ldr	r2, [pc, #372]	; (80014d0 <FLASH_IF_INT_Write+0x204>)
 800135c:	6812      	ldr	r2, [r2, #0]
 800135e:	0291      	lsls	r1, r2, #10
 8001360:	4a5c      	ldr	r2, [pc, #368]	; (80014d4 <FLASH_IF_INT_Write+0x208>)
 8001362:	400a      	ands	r2, r1
 8001364:	fbb3 f1f2 	udiv	r1, r3, r2
 8001368:	fb01 f202 	mul.w	r2, r1, r2
 800136c:	1a9b      	subs	r3, r3, r2
 800136e:	0ada      	lsrs	r2, r3, #11
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	3301      	adds	r3, #1
 8001376:	617b      	str	r3, [r7, #20]

      if (number_pages > 1)
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d905      	bls.n	800138a <FLASH_IF_INT_Write+0xbe>
      {
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 800137e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001380:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001384:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001388:	633b      	str	r3, [r7, #48]	; 0x30
      }

      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800138e:	e089      	b.n	80014a4 <FLASH_IF_INT_Write+0x1d8>
      {
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 8001390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001392:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001396:	02db      	lsls	r3, r3, #11
 8001398:	613b      	str	r3, [r7, #16]
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 800139a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800139c:	68f8      	ldr	r0, [r7, #12]
 800139e:	f000 f925 	bl	80015ec <FLASH_IF_INT_IsEmpty>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d031      	beq.n	800140c <FLASH_IF_INT_Write+0x140>
        {
          if (pAllocatedBuffer == NULL)
 80013a8:	4b4b      	ldr	r3, [pc, #300]	; (80014d8 <FLASH_IF_INT_Write+0x20c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d103      	bne.n	80013b8 <FLASH_IF_INT_Write+0xec>
          {
            ret_status = FLASH_IF_PARAM_ERROR;
 80013b0:	23fa      	movs	r3, #250	; 0xfa
 80013b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break; /* exit for loop */
 80013b6:	e07e      	b.n	80014b6 <FLASH_IF_INT_Write+0x1ea>
          }

          /* backup initial Flash page data in RAM area */
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 80013b8:	4b47      	ldr	r3, [pc, #284]	; (80014d8 <FLASH_IF_INT_Write+0x20c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	6939      	ldr	r1, [r7, #16]
 80013be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013c2:	4618      	mov	r0, r3
 80013c4:	f000 f88a 	bl	80014dc <FLASH_IF_INT_Read>
          /* copy fragment into RAM area */
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 80013c8:	4b43      	ldr	r3, [pc, #268]	; (80014d8 <FLASH_IF_INT_Write+0x20c>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013d2:	4413      	add	r3, r2
 80013d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80013d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013d8:	b292      	uxth	r2, r2
 80013da:	4618      	mov	r0, r3
 80013dc:	f01b f90e 	bl	801c5fc <UTIL_MEM_cpy_8>

          /*  erase the Flash sector, to avoid writing twice in RAM */
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013e6:	4618      	mov	r0, r3
 80013e8:	f000 f896 	bl	8001518 <FLASH_IF_INT_Erase>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d003      	beq.n	80013fa <FLASH_IF_INT_Write+0x12e>
          {
            ret_status = FLASH_IF_ERASE_ERROR;
 80013f2:	23fe      	movs	r3, #254	; 0xfe
 80013f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break; /* exit for loop */
 80013f8:	e05d      	b.n	80014b6 <FLASH_IF_INT_Write+0x1ea>
          }

          /* copy the whole flash sector including fragment from RAM to Flash */
          current_dest = page_address;
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	627b      	str	r3, [r7, #36]	; 0x24
          current_source = (uint32_t)pAllocatedBuffer;
 80013fe:	4b36      	ldr	r3, [pc, #216]	; (80014d8 <FLASH_IF_INT_Write+0x20c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	623b      	str	r3, [r7, #32]
          current_length = FLASH_PAGE_SIZE;
 8001404:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001408:	61fb      	str	r3, [r7, #28]
 800140a:	e005      	b.n	8001418 <FLASH_IF_INT_Write+0x14c>
        }
        else
        {
          /* write a part of flash page from selected source data */
          current_dest = uDest;
 800140c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800140e:	627b      	str	r3, [r7, #36]	; 0x24
          current_source = uSource;
 8001410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001412:	623b      	str	r3, [r7, #32]
          current_length = length;
 8001414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001416:	61fb      	str	r3, [r7, #28]
        }

        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8001418:	2300      	movs	r3, #0
 800141a:	62bb      	str	r3, [r7, #40]	; 0x28
 800141c:	e026      	b.n	800146c <FLASH_IF_INT_Write+0x1a0>
        {
          /* Device voltage range supposed to be [2.7V to 3.6V], the operation will be done by word */
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 800141e:	6a3a      	ldr	r2, [r7, #32]
 8001420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001422:	4413      	add	r3, r2
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 8001424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001428:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800142a:	2001      	movs	r0, #1
 800142c:	f003 fac2 	bl	80049b4 <HAL_FLASH_Program>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d113      	bne.n	800145e <FLASH_IF_INT_Write+0x192>
          {
            /* Check the written value */
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 8001436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001438:	e9d3 0100 	ldrd	r0, r1, [r3]
 800143c:	6a3a      	ldr	r2, [r7, #32]
 800143e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001440:	4413      	add	r3, r2
 8001442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001446:	4299      	cmp	r1, r3
 8001448:	bf08      	it	eq
 800144a:	4290      	cmpeq	r0, r2
 800144c:	d003      	beq.n	8001456 <FLASH_IF_INT_Write+0x18a>
            {
              /* Flash content doesn't match SRAM content */
              ret_status = FLASH_IF_WRITE_ERROR;
 800144e:	23fc      	movs	r3, #252	; 0xfc
 8001450:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              break;
 8001454:	e00e      	b.n	8001474 <FLASH_IF_INT_Write+0x1a8>
            }
            /* Increment FLASH Destination address */
            current_dest = current_dest + 8U;
 8001456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001458:	3308      	adds	r3, #8
 800145a:	627b      	str	r3, [r7, #36]	; 0x24
 800145c:	e003      	b.n	8001466 <FLASH_IF_INT_Write+0x19a>
          }
          else
          {
            /* Error occurred while writing data in Flash memory */
            ret_status = FLASH_IF_WRITE_ERROR;
 800145e:	23fc      	movs	r3, #252	; 0xfc
 8001460:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break;
 8001464:	e006      	b.n	8001474 <FLASH_IF_INT_Write+0x1a8>
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8001466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001468:	3308      	adds	r3, #8
 800146a:	62bb      	str	r3, [r7, #40]	; 0x28
 800146c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	429a      	cmp	r2, r3
 8001472:	d3d4      	bcc.n	800141e <FLASH_IF_INT_Write+0x152>
          }
        }

        if (ret_status != FLASH_IF_OK)
 8001474:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001478:	2b00      	cmp	r3, #0
 800147a:	d11b      	bne.n	80014b4 <FLASH_IF_INT_Write+0x1e8>
          /* Error occurred while writing data in Flash memory */
          break;
        }

        /* Increment FLASH destination address, source address, and decrease remaining length */
        uDest += length;
 800147c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800147e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001480:	4413      	add	r3, r2
 8001482:	63bb      	str	r3, [r7, #56]	; 0x38
        uSource += length;
 8001484:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001488:	4413      	add	r3, r2
 800148a:	637b      	str	r3, [r7, #52]	; 0x34
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001496:	bf28      	it	cs
 8001498:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 800149c:	633b      	str	r3, [r7, #48]	; 0x30
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 800149e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014a0:	3301      	adds	r3, #1
 80014a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	4413      	add	r3, r2
 80014aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014ac:	429a      	cmp	r2, r3
 80014ae:	f4ff af6f 	bcc.w	8001390 <FLASH_IF_INT_Write+0xc4>
 80014b2:	e000      	b.n	80014b6 <FLASH_IF_INT_Write+0x1ea>
          break;
 80014b4:	bf00      	nop
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 80014b6:	f003 fae3 	bl	8004a80 <HAL_FLASH_Lock>
 80014ba:	e002      	b.n	80014c2 <FLASH_IF_INT_Write+0x1f6>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 80014bc:	23fb      	movs	r3, #251	; 0xfb
 80014be:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Write_2 */

  /* USER CODE END FLASH_IF_INT_Write_2 */
  return ret_status;
 80014c2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3740      	adds	r7, #64	; 0x40
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	1fff75e0 	.word	0x1fff75e0
 80014d4:	03fffc00 	.word	0x03fffc00
 80014d8:	200001c8 	.word	0x200001c8

080014dc <FLASH_IF_INT_Read>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 80014e8:	2300      	movs	r3, #0
 80014ea:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_INT_Read_1 */

  /* USER CODE END FLASH_IF_INT_Read_1 */
  if ((pDestination == NULL) || (pSource == NULL))
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d002      	beq.n	80014f8 <FLASH_IF_INT_Read+0x1c>
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d102      	bne.n	80014fe <FLASH_IF_INT_Read+0x22>
  {
    return FLASH_IF_PARAM_ERROR;
 80014f8:	f06f 0305 	mvn.w	r3, #5
 80014fc:	e008      	b.n	8001510 <FLASH_IF_INT_Read+0x34>
  }

  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	b29b      	uxth	r3, r3
 8001502:	461a      	mov	r2, r3
 8001504:	68b9      	ldr	r1, [r7, #8]
 8001506:	68f8      	ldr	r0, [r7, #12]
 8001508:	f01b f878 	bl	801c5fc <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN FLASH_IF_INT_Read_2 */

  /* USER CODE END FLASH_IF_INT_Read_2 */
  return ret_status;
 800150c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001510:	4618      	mov	r0, r3
 8001512:	3718      	adds	r7, #24
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <FLASH_IF_INT_Erase>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Erase(void *pStart, uint32_t uLength)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b088      	sub	sp, #32
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001522:	2300      	movs	r3, #0
 8001524:	77fb      	strb	r3, [r7, #31]
  /* USER CODE BEGIN FLASH_IF_INT_Erase_1 */

  /* USER CODE END FLASH_IF_INT_Erase_1 */
  HAL_StatusTypeDef hal_status = HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	77bb      	strb	r3, [r7, #30]
  uint32_t page_error = 0U;
 800152a:	2300      	movs	r3, #0
 800152c:	617b      	str	r3, [r7, #20]
  uint32_t uStart = (uint32_t)pStart;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef erase_init;

  if (pStart == NULL)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d102      	bne.n	800153e <FLASH_IF_INT_Erase+0x26>
  {
    return FLASH_IF_PARAM_ERROR;
 8001538:	f06f 0305 	mvn.w	r3, #5
 800153c:	e04e      	b.n	80015dc <FLASH_IF_INT_Erase+0xc4>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 800153e:	f000 f87b 	bl	8001638 <FLASH_IF_INT_Clear_Error>
 8001542:	4603      	mov	r3, r0
 8001544:	77fb      	strb	r3, [r7, #31]

  if (ret_status == FLASH_IF_OK)
 8001546:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d144      	bne.n	80015d8 <FLASH_IF_INT_Erase+0xc0>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 800154e:	f003 fa75 	bl	8004a3c <HAL_FLASH_Unlock>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d13d      	bne.n	80015d4 <FLASH_IF_INT_Erase+0xbc>
    {
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8001558:	2302      	movs	r3, #2
 800155a:	60bb      	str	r3, [r7, #8]
      erase_init.Page = PAGE_INDEX(uStart);
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 8001562:	4b20      	ldr	r3, [pc, #128]	; (80015e4 <FLASH_IF_INT_Erase+0xcc>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	0299      	lsls	r1, r3, #10
 8001568:	4b1f      	ldr	r3, [pc, #124]	; (80015e8 <FLASH_IF_INT_Erase+0xd0>)
 800156a:	400b      	ands	r3, r1
 800156c:	fbb2 f1f3 	udiv	r1, r2, r3
 8001570:	fb01 f303 	mul.w	r3, r1, r3
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	0adb      	lsrs	r3, r3, #11
 8001578:	60fb      	str	r3, [r7, #12]
      /* Get the number of pages to erase from 1st page */
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	4413      	add	r3, r2
 8001580:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001584:	3b01      	subs	r3, #1
 8001586:	4a17      	ldr	r2, [pc, #92]	; (80015e4 <FLASH_IF_INT_Erase+0xcc>)
 8001588:	6812      	ldr	r2, [r2, #0]
 800158a:	0291      	lsls	r1, r2, #10
 800158c:	4a16      	ldr	r2, [pc, #88]	; (80015e8 <FLASH_IF_INT_Erase+0xd0>)
 800158e:	400a      	ands	r2, r1
 8001590:	fbb3 f1f2 	udiv	r1, r3, r2
 8001594:	fb01 f202 	mul.w	r2, r1, r2
 8001598:	1a9b      	subs	r3, r3, r2
 800159a:	0ada      	lsrs	r2, r3, #11
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	3301      	adds	r3, #1
 80015a2:	613b      	str	r3, [r7, #16]

      /* Erase the Page */
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 80015a4:	f107 0214 	add.w	r2, r7, #20
 80015a8:	f107 0308 	add.w	r3, r7, #8
 80015ac:	4611      	mov	r1, r2
 80015ae:	4618      	mov	r0, r3
 80015b0:	f003 fb46 	bl	8004c40 <HAL_FLASHEx_Erase>
 80015b4:	4603      	mov	r3, r0
 80015b6:	77bb      	strb	r3, [r7, #30]

      if (hal_status != HAL_OK)
 80015b8:	7fbb      	ldrb	r3, [r7, #30]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d007      	beq.n	80015ce <FLASH_IF_INT_Erase+0xb6>
      {
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 80015be:	7fbb      	ldrb	r3, [r7, #30]
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d101      	bne.n	80015c8 <FLASH_IF_INT_Erase+0xb0>
 80015c4:	2301      	movs	r3, #1
 80015c6:	e001      	b.n	80015cc <FLASH_IF_INT_Erase+0xb4>
 80015c8:	f06f 0301 	mvn.w	r3, #1
 80015cc:	77fb      	strb	r3, [r7, #31]
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 80015ce:	f003 fa57 	bl	8004a80 <HAL_FLASH_Lock>
 80015d2:	e001      	b.n	80015d8 <FLASH_IF_INT_Erase+0xc0>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 80015d4:	23fb      	movs	r3, #251	; 0xfb
 80015d6:	77fb      	strb	r3, [r7, #31]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Erase_2 */

  /* USER CODE END FLASH_IF_INT_Erase_2 */
  return ret_status;
 80015d8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3720      	adds	r7, #32
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	1fff75e0 	.word	0x1fff75e0
 80015e8:	03fffc00 	.word	0x03fffc00

080015ec <FLASH_IF_INT_IsEmpty>:

static int32_t FLASH_IF_INT_IsEmpty(void *pStart, uint32_t uLength)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
  int32_t status = FLASH_IF_MEM_EMPTY;
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 80015fa:	2300      	movs	r3, #0
 80015fc:	60bb      	str	r3, [r7, #8]
 80015fe:	e011      	b.n	8001624 <FLASH_IF_INT_IsEmpty+0x38>
  {
    if (*(uint64_t *)pStart != UINT64_MAX)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001606:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800160a:	bf08      	it	eq
 800160c:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 8001610:	d002      	beq.n	8001618 <FLASH_IF_INT_IsEmpty+0x2c>
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
 8001612:	2301      	movs	r3, #1
 8001614:	60fb      	str	r3, [r7, #12]
      break;
 8001616:	e009      	b.n	800162c <FLASH_IF_INT_IsEmpty+0x40>
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3308      	adds	r3, #8
 800161c:	607b      	str	r3, [r7, #4]
  for (index = 0; index < uLength; index += 8)
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	3308      	adds	r3, #8
 8001622:	60bb      	str	r3, [r7, #8]
 8001624:	68ba      	ldr	r2, [r7, #8]
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	429a      	cmp	r2, r3
 800162a:	d3e9      	bcc.n	8001600 <FLASH_IF_INT_IsEmpty+0x14>
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
 800162c:	68fb      	ldr	r3, [r7, #12]
}
 800162e:	4618      	mov	r0, r3
 8001630:	3714      	adds	r7, #20
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr

08001638 <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 800163e:	23fb      	movs	r3, #251	; 0xfb
 8001640:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 8001642:	f003 f9fb 	bl	8004a3c <HAL_FLASH_Unlock>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d110      	bne.n	800166e <FLASH_IF_INT_Clear_Error+0x36>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 800164c:	4b0b      	ldr	r3, [pc, #44]	; (800167c <FLASH_IF_INT_Clear_Error+0x44>)
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	4a0a      	ldr	r2, [pc, #40]	; (800167c <FLASH_IF_INT_Clear_Error+0x44>)
 8001652:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001656:	6193      	str	r3, [r2, #24]
 8001658:	4b08      	ldr	r3, [pc, #32]	; (800167c <FLASH_IF_INT_Clear_Error+0x44>)
 800165a:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 800165e:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 8001660:	f003 fa0e 	bl	8004a80 <HAL_FLASH_Lock>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d101      	bne.n	800166e <FLASH_IF_INT_Clear_Error+0x36>
    {
      ret_status = FLASH_IF_OK;
 800166a:	2300      	movs	r3, #0
 800166c:	71fb      	strb	r3, [r7, #7]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
 800166e:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001672:	4618      	mov	r0, r3
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	58004000 	.word	0x58004000

08001680 <LL_AHB2_GRP1_EnableClock>:
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001688:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800168c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800168e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4313      	orrs	r3, r2
 8001696:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001698:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800169c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4013      	ands	r3, r2
 80016a2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016a4:	68fb      	ldr	r3, [r7, #12]
}
 80016a6:	bf00      	nop
 80016a8:	3714      	adds	r7, #20
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr

080016b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b6:	1d3b      	adds	r3, r7, #4
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c4:	2001      	movs	r0, #1
 80016c6:	f7ff ffdb 	bl	8001680 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ca:	2002      	movs	r0, #2
 80016cc:	f7ff ffd8 	bl	8001680 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d0:	2004      	movs	r0, #4
 80016d2:	f7ff ffd5 	bl	8001680 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Memory_CS_Pin|Status_LED_Pin, GPIO_PIN_RESET);
 80016d6:	2200      	movs	r2, #0
 80016d8:	f44f 7108 	mov.w	r1, #544	; 0x220
 80016dc:	481c      	ldr	r0, [pc, #112]	; (8001750 <MX_GPIO_Init+0xa0>)
 80016de:	f003 fdb1 	bl	8005244 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Bias_CS_Pin|Anneal_Enable_Pin|Bias_Enable_Pin|Stim_Enable_Pin
 80016e2:	2200      	movs	r2, #0
 80016e4:	f240 413d 	movw	r1, #1085	; 0x43d
 80016e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ec:	f003 fdaa 	bl	8005244 <HAL_GPIO_WritePin>
                          |RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Memory_CS_Pin|Status_LED_Pin;
 80016f0:	f44f 7308 	mov.w	r3, #544	; 0x220
 80016f4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f6:	2301      	movs	r3, #1
 80016f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fe:	2300      	movs	r3, #0
 8001700:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001702:	1d3b      	adds	r3, r7, #4
 8001704:	4619      	mov	r1, r3
 8001706:	4812      	ldr	r0, [pc, #72]	; (8001750 <MX_GPIO_Init+0xa0>)
 8001708:	f003 fb6e 	bl	8004de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Bias_CS_Pin|Anneal_Enable_Pin|Bias_Enable_Pin|Stim_Enable_Pin;
 800170c:	f240 430d 	movw	r3, #1037	; 0x40d
 8001710:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001712:	2301      	movs	r3, #1
 8001714:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171e:	1d3b      	adds	r3, r7, #4
 8001720:	4619      	mov	r1, r3
 8001722:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001726:	f003 fb5f 	bl	8004de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RF_CTRL1_Pin|RF_CTRL2_Pin;
 800172a:	2330      	movs	r3, #48	; 0x30
 800172c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172e:	2301      	movs	r3, #1
 8001730:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001736:	2303      	movs	r3, #3
 8001738:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173a:	1d3b      	adds	r3, r7, #4
 800173c:	4619      	mov	r1, r3
 800173e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001742:	f003 fb51 	bl	8004de8 <HAL_GPIO_Init>

}
 8001746:	bf00      	nop
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	48000400 	.word	0x48000400

08001754 <LL_AHB2_GRP1_EnableClock>:
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800175c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001760:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001762:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4313      	orrs	r3, r2
 800176a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800176c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001770:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4013      	ands	r3, r2
 8001776:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001778:	68fb      	ldr	r3, [r7, #12]
}
 800177a:	bf00      	nop
 800177c:	3714      	adds	r7, #20
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr

08001784 <LL_APB1_GRP1_EnableClock>:
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800178c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001790:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001792:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4313      	orrs	r3, r2
 800179a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800179c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4013      	ands	r3, r2
 80017a6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017a8:	68fb      	ldr	r3, [r7, #12]
}
 80017aa:	bf00      	nop
 80017ac:	3714      	adds	r7, #20
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr

080017b4 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80017b8:	4b1b      	ldr	r3, [pc, #108]	; (8001828 <MX_I2C2_Init+0x74>)
 80017ba:	4a1c      	ldr	r2, [pc, #112]	; (800182c <MX_I2C2_Init+0x78>)
 80017bc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 80017be:	4b1a      	ldr	r3, [pc, #104]	; (8001828 <MX_I2C2_Init+0x74>)
 80017c0:	4a1b      	ldr	r2, [pc, #108]	; (8001830 <MX_I2C2_Init+0x7c>)
 80017c2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80017c4:	4b18      	ldr	r3, [pc, #96]	; (8001828 <MX_I2C2_Init+0x74>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017ca:	4b17      	ldr	r3, [pc, #92]	; (8001828 <MX_I2C2_Init+0x74>)
 80017cc:	2201      	movs	r2, #1
 80017ce:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017d0:	4b15      	ldr	r3, [pc, #84]	; (8001828 <MX_I2C2_Init+0x74>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80017d6:	4b14      	ldr	r3, [pc, #80]	; (8001828 <MX_I2C2_Init+0x74>)
 80017d8:	2200      	movs	r2, #0
 80017da:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017dc:	4b12      	ldr	r3, [pc, #72]	; (8001828 <MX_I2C2_Init+0x74>)
 80017de:	2200      	movs	r2, #0
 80017e0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017e2:	4b11      	ldr	r3, [pc, #68]	; (8001828 <MX_I2C2_Init+0x74>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017e8:	4b0f      	ldr	r3, [pc, #60]	; (8001828 <MX_I2C2_Init+0x74>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80017ee:	480e      	ldr	r0, [pc, #56]	; (8001828 <MX_I2C2_Init+0x74>)
 80017f0:	f003 fd3f 	bl	8005272 <HAL_I2C_Init>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80017fa:	f000 f8fb 	bl	80019f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017fe:	2100      	movs	r1, #0
 8001800:	4809      	ldr	r0, [pc, #36]	; (8001828 <MX_I2C2_Init+0x74>)
 8001802:	f003 fdc5 	bl	8005390 <HAL_I2CEx_ConfigAnalogFilter>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800180c:	f000 f8f2 	bl	80019f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001810:	2100      	movs	r1, #0
 8001812:	4805      	ldr	r0, [pc, #20]	; (8001828 <MX_I2C2_Init+0x74>)
 8001814:	f003 fe06 	bl	8005424 <HAL_I2CEx_ConfigDigitalFilter>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800181e:	f000 f8e9 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	200001cc 	.word	0x200001cc
 800182c:	40005800 	.word	0x40005800
 8001830:	20303e5d 	.word	0x20303e5d

08001834 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b096      	sub	sp, #88	; 0x58
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800184c:	f107 030c 	add.w	r3, r7, #12
 8001850:	2238      	movs	r2, #56	; 0x38
 8001852:	2100      	movs	r1, #0
 8001854:	4618      	mov	r0, r3
 8001856:	f01c f995 	bl	801db84 <memset>
  if(i2cHandle->Instance==I2C2)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a21      	ldr	r2, [pc, #132]	; (80018e4 <HAL_I2C_MspInit+0xb0>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d13b      	bne.n	80018dc <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001864:	2380      	movs	r3, #128	; 0x80
 8001866:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001868:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800186c:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800186e:	f107 030c 	add.w	r3, r7, #12
 8001872:	4618      	mov	r0, r3
 8001874:	f005 f892 	bl	800699c <HAL_RCCEx_PeriphCLKConfig>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800187e:	f000 f8b9 	bl	80019f4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001882:	2001      	movs	r0, #1
 8001884:	f7ff ff66 	bl	8001754 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001888:	2002      	movs	r0, #2
 800188a:	f7ff ff63 	bl	8001754 <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800188e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001892:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001894:	2312      	movs	r3, #18
 8001896:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	2300      	movs	r3, #0
 800189a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189c:	2300      	movs	r3, #0
 800189e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80018a0:	2304      	movs	r3, #4
 80018a2:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80018a8:	4619      	mov	r1, r3
 80018aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ae:	f003 fa9b 	bl	8004de8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80018b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018b6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018b8:	2312      	movs	r3, #18
 80018ba:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c0:	2300      	movs	r3, #0
 80018c2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80018c4:	2304      	movs	r3, #4
 80018c6:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80018cc:	4619      	mov	r1, r3
 80018ce:	4806      	ldr	r0, [pc, #24]	; (80018e8 <HAL_I2C_MspInit+0xb4>)
 80018d0:	f003 fa8a 	bl	8004de8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80018d4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80018d8:	f7ff ff54 	bl	8001784 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80018dc:	bf00      	nop
 80018de:	3758      	adds	r7, #88	; 0x58
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40005800 	.word	0x40005800
 80018e8:	48000400 	.word	0x48000400

080018ec <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80018f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018fc:	f023 0218 	bic.w	r2, r3, #24
 8001900:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4313      	orrs	r3, r2
 8001908:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	bc80      	pop	{r7}
 8001914:	4770      	bx	lr

08001916 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800191a:	f001 fa77 	bl	8002e0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800191e:	f000 f80b 	bl	8001938 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001922:	f7ff fec5 	bl	80016b0 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 8001926:	f008 fca5 	bl	800a274 <MX_LoRaWAN_Init>
  MX_I2C2_Init();
 800192a:	f7ff ff43 	bl	80017b4 <MX_I2C2_Init>
  MX_SPI2_Init();
 800192e:	f000 f94d 	bl	8001bcc <MX_SPI2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 8001932:	f008 fca7 	bl	800a284 <MX_LoRaWAN_Process>
 8001936:	e7fc      	b.n	8001932 <main+0x1c>

08001938 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b09a      	sub	sp, #104	; 0x68
 800193c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800193e:	f107 0320 	add.w	r3, r7, #32
 8001942:	2248      	movs	r2, #72	; 0x48
 8001944:	2100      	movs	r1, #0
 8001946:	4618      	mov	r0, r3
 8001948:	f01c f91c 	bl	801db84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800194c:	f107 0308 	add.w	r3, r7, #8
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	605a      	str	r2, [r3, #4]
 8001956:	609a      	str	r2, [r3, #8]
 8001958:	60da      	str	r2, [r3, #12]
 800195a:	611a      	str	r2, [r3, #16]
 800195c:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800195e:	f003 fdad 	bl	80054bc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001962:	2000      	movs	r0, #0
 8001964:	f7ff ffc2 	bl	80018ec <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001968:	4b21      	ldr	r3, [pc, #132]	; (80019f0 <SystemClock_Config+0xb8>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001970:	4a1f      	ldr	r2, [pc, #124]	; (80019f0 <SystemClock_Config+0xb8>)
 8001972:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001976:	6013      	str	r3, [r2, #0]
 8001978:	4b1d      	ldr	r3, [pc, #116]	; (80019f0 <SystemClock_Config+0xb8>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001980:	607b      	str	r3, [r7, #4]
 8001982:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8001984:	2326      	movs	r3, #38	; 0x26
 8001986:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001988:	2381      	movs	r3, #129	; 0x81
 800198a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800198c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001990:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001992:	2301      	movs	r3, #1
 8001994:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001996:	2340      	movs	r3, #64	; 0x40
 8001998:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800199a:	2300      	movs	r3, #0
 800199c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 800199e:	23b0      	movs	r3, #176	; 0xb0
 80019a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80019a2:	2300      	movs	r3, #0
 80019a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019a6:	f107 0320 	add.w	r3, r7, #32
 80019aa:	4618      	mov	r0, r3
 80019ac:	f004 f8d2 	bl	8005b54 <HAL_RCC_OscConfig>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <SystemClock_Config+0x82>
  {
    Error_Handler();
 80019b6:	f000 f81d 	bl	80019f4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80019ba:	234f      	movs	r3, #79	; 0x4f
 80019bc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80019be:	2300      	movs	r3, #0
 80019c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019c2:	2300      	movs	r3, #0
 80019c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019c6:	2300      	movs	r3, #0
 80019c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019ca:	2300      	movs	r3, #0
 80019cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80019ce:	2300      	movs	r3, #0
 80019d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019d2:	f107 0308 	add.w	r3, r7, #8
 80019d6:	2102      	movs	r1, #2
 80019d8:	4618      	mov	r0, r3
 80019da:	f004 fc3d 	bl	8006258 <HAL_RCC_ClockConfig>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80019e4:	f000 f806 	bl	80019f4 <Error_Handler>
  }
}
 80019e8:	bf00      	nop
 80019ea:	3768      	adds	r7, #104	; 0x68
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	58000400 	.word	0x58000400

080019f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019f8:	b672      	cpsid	i
}
 80019fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019fc:	e7fe      	b.n	80019fc <Error_Handler+0x8>

080019fe <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80019fe:	b480      	push	{r7}
 8001a00:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001a02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001a16:	bf00      	nop
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bc80      	pop	{r7}
 8001a1c:	4770      	bx	lr

08001a1e <LL_APB1_GRP1_EnableClock>:
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b085      	sub	sp, #20
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001a26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a2a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001a36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a3a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a42:	68fb      	ldr	r3, [r7, #12]
}
 8001a44:	bf00      	nop
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc80      	pop	{r7}
 8001a4c:	4770      	bx	lr
	...

08001a50 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08c      	sub	sp, #48	; 0x30
 8001a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001a56:	1d3b      	adds	r3, r7, #4
 8001a58:	222c      	movs	r2, #44	; 0x2c
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f01c f891 	bl	801db84 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001a62:	4b22      	ldr	r3, [pc, #136]	; (8001aec <MX_RTC_Init+0x9c>)
 8001a64:	4a22      	ldr	r2, [pc, #136]	; (8001af0 <MX_RTC_Init+0xa0>)
 8001a66:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001a68:	4b20      	ldr	r3, [pc, #128]	; (8001aec <MX_RTC_Init+0x9c>)
 8001a6a:	221f      	movs	r2, #31
 8001a6c:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a6e:	4b1f      	ldr	r3, [pc, #124]	; (8001aec <MX_RTC_Init+0x9c>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001a74:	4b1d      	ldr	r3, [pc, #116]	; (8001aec <MX_RTC_Init+0x9c>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a7a:	4b1c      	ldr	r3, [pc, #112]	; (8001aec <MX_RTC_Init+0x9c>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a80:	4b1a      	ldr	r3, [pc, #104]	; (8001aec <MX_RTC_Init+0x9c>)
 8001a82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a86:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001a88:	4b18      	ldr	r3, [pc, #96]	; (8001aec <MX_RTC_Init+0x9c>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001a8e:	4b17      	ldr	r3, [pc, #92]	; (8001aec <MX_RTC_Init+0x9c>)
 8001a90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a94:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a96:	4815      	ldr	r0, [pc, #84]	; (8001aec <MX_RTC_Init+0x9c>)
 8001a98:	f005 f89a 	bl	8006bd0 <HAL_RTC_Init>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8001aa2:	f7ff ffa7 	bl	80019f4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001aa6:	4811      	ldr	r0, [pc, #68]	; (8001aec <MX_RTC_Init+0x9c>)
 8001aa8:	f005 fb90 	bl	80071cc <HAL_RTCEx_SetSSRU_IT>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001ab2:	f7ff ff9f 	bl	80019f4 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001aba:	2300      	movs	r3, #0
 8001abc:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001ac2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001ac6:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001ac8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001acc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001ace:	1d3b      	adds	r3, r7, #4
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4805      	ldr	r0, [pc, #20]	; (8001aec <MX_RTC_Init+0x9c>)
 8001ad6:	f005 f8fd 	bl	8006cd4 <HAL_RTC_SetAlarm_IT>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001ae0:	f7ff ff88 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001ae4:	bf00      	nop
 8001ae6:	3730      	adds	r7, #48	; 0x30
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	20000220 	.word	0x20000220
 8001af0:	40002800 	.word	0x40002800

08001af4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b090      	sub	sp, #64	; 0x40
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001afc:	f107 0308 	add.w	r3, r7, #8
 8001b00:	2238      	movs	r2, #56	; 0x38
 8001b02:	2100      	movs	r1, #0
 8001b04:	4618      	mov	r0, r3
 8001b06:	f01c f83d 	bl	801db84 <memset>
  if(rtcHandle->Instance==RTC)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a16      	ldr	r2, [pc, #88]	; (8001b68 <HAL_RTC_MspInit+0x74>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d125      	bne.n	8001b60 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001b14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b18:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001b1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b1e:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b20:	f107 0308 	add.w	r3, r7, #8
 8001b24:	4618      	mov	r0, r3
 8001b26:	f004 ff39 	bl	800699c <HAL_RCCEx_PeriphCLKConfig>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001b30:	f7ff ff60 	bl	80019f4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001b34:	f7ff ff63 	bl	80019fe <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001b38:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001b3c:	f7ff ff6f 	bl	8001a1e <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001b40:	2200      	movs	r2, #0
 8001b42:	2100      	movs	r1, #0
 8001b44:	2002      	movs	r0, #2
 8001b46:	f002 fb14 	bl	8004172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001b4a:	2002      	movs	r0, #2
 8001b4c:	f002 fb2b 	bl	80041a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001b50:	2200      	movs	r2, #0
 8001b52:	2100      	movs	r1, #0
 8001b54:	202a      	movs	r0, #42	; 0x2a
 8001b56:	f002 fb0c 	bl	8004172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001b5a:	202a      	movs	r0, #42	; 0x2a
 8001b5c:	f002 fb23 	bl	80041a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001b60:	bf00      	nop
 8001b62:	3740      	adds	r7, #64	; 0x40
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40002800 	.word	0x40002800

08001b6c <LL_AHB2_GRP1_EnableClock>:
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001b74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001b84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b90:	68fb      	ldr	r3, [r7, #12]
}
 8001b92:	bf00      	nop
 8001b94:	3714      	adds	r7, #20
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr

08001b9c <LL_APB1_GRP1_EnableClock>:
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001ba4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ba8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001baa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001bb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bb8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
}
 8001bc2:	bf00      	nop
 8001bc4:	3714      	adds	r7, #20
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bc80      	pop	{r7}
 8001bca:	4770      	bx	lr

08001bcc <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001bd0:	4b1b      	ldr	r3, [pc, #108]	; (8001c40 <MX_SPI2_Init+0x74>)
 8001bd2:	4a1c      	ldr	r2, [pc, #112]	; (8001c44 <MX_SPI2_Init+0x78>)
 8001bd4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001bd6:	4b1a      	ldr	r3, [pc, #104]	; (8001c40 <MX_SPI2_Init+0x74>)
 8001bd8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bdc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001bde:	4b18      	ldr	r3, [pc, #96]	; (8001c40 <MX_SPI2_Init+0x74>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001be4:	4b16      	ldr	r3, [pc, #88]	; (8001c40 <MX_SPI2_Init+0x74>)
 8001be6:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001bea:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bec:	4b14      	ldr	r3, [pc, #80]	; (8001c40 <MX_SPI2_Init+0x74>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bf2:	4b13      	ldr	r3, [pc, #76]	; (8001c40 <MX_SPI2_Init+0x74>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001bf8:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <MX_SPI2_Init+0x74>)
 8001bfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bfe:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c00:	4b0f      	ldr	r3, [pc, #60]	; (8001c40 <MX_SPI2_Init+0x74>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c06:	4b0e      	ldr	r3, [pc, #56]	; (8001c40 <MX_SPI2_Init+0x74>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c0c:	4b0c      	ldr	r3, [pc, #48]	; (8001c40 <MX_SPI2_Init+0x74>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c12:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <MX_SPI2_Init+0x74>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001c18:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <MX_SPI2_Init+0x74>)
 8001c1a:	2207      	movs	r2, #7
 8001c1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c1e:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <MX_SPI2_Init+0x74>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001c24:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <MX_SPI2_Init+0x74>)
 8001c26:	2208      	movs	r2, #8
 8001c28:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001c2a:	4805      	ldr	r0, [pc, #20]	; (8001c40 <MX_SPI2_Init+0x74>)
 8001c2c:	f005 fb5c 	bl	80072e8 <HAL_SPI_Init>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001c36:	f7ff fedd 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20000258 	.word	0x20000258
 8001c44:	40003800 	.word	0x40003800

08001c48 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b096      	sub	sp, #88	; 0x58
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c50:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	60da      	str	r2, [r3, #12]
 8001c5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c60:	f107 030c 	add.w	r3, r7, #12
 8001c64:	2238      	movs	r2, #56	; 0x38
 8001c66:	2100      	movs	r1, #0
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f01b ff8b 	bl	801db84 <memset>
  if(spiHandle->Instance==SPI2)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a2b      	ldr	r2, [pc, #172]	; (8001d20 <HAL_SPI_MspInit+0xd8>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d14e      	bne.n	8001d16 <HAL_SPI_MspInit+0xce>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S2;
 8001c78:	2310      	movs	r3, #16
 8001c7a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2s2ClockSelection = RCC_I2S2CLKSOURCE_HSI;
 8001c7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c80:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c82:	f107 030c 	add.w	r3, r7, #12
 8001c86:	4618      	mov	r0, r3
 8001c88:	f004 fe88 	bl	800699c <HAL_RCCEx_PeriphCLKConfig>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001c92:	f7ff feaf 	bl	80019f4 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001c96:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001c9a:	f7ff ff7f 	bl	8001b9c <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c9e:	2002      	movs	r0, #2
 8001ca0:	f7ff ff64 	bl	8001b6c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca4:	2001      	movs	r0, #1
 8001ca6:	f7ff ff61 	bl	8001b6c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001caa:	2004      	movs	r0, #4
 8001cac:	f7ff ff5e 	bl	8001b6c <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PB14     ------> SPI2_MISO
    PA9     ------> SPI2_SCK
    PC1     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001cb0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001cb4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001cc2:	2305      	movs	r3, #5
 8001cc4:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4815      	ldr	r0, [pc, #84]	; (8001d24 <HAL_SPI_MspInit+0xdc>)
 8001cce:	f003 f88b 	bl	8004de8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001cd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cd6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ce4:	2305      	movs	r3, #5
 8001ce6:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001cec:	4619      	mov	r1, r3
 8001cee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cf2:	f003 f879 	bl	8004de8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d02:	2300      	movs	r3, #0
 8001d04:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 8001d06:	2303      	movs	r3, #3
 8001d08:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d0a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4805      	ldr	r0, [pc, #20]	; (8001d28 <HAL_SPI_MspInit+0xe0>)
 8001d12:	f003 f869 	bl	8004de8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001d16:	bf00      	nop
 8001d18:	3758      	adds	r7, #88	; 0x58
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40003800 	.word	0x40003800
 8001d24:	48000400 	.word	0x48000400
 8001d28:	48000800 	.word	0x48000800

08001d2c <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001d30:	4b03      	ldr	r3, [pc, #12]	; (8001d40 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8001d32:	2201      	movs	r2, #1
 8001d34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8001d38:	bf00      	nop
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr
 8001d40:	58000400 	.word	0x58000400

08001d44 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001d48:	bf00      	nop
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr

08001d50 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr

08001d5c <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001d60:	f001 f874 	bl	8002e4c <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8001d64:	f7ff ffe2 	bl	8001d2c <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001d68:	2001      	movs	r0, #1
 8001d6a:	f003 fc39 	bl	80055e0 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 8001d76:	f001 f877 	bl	8002e68 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8001d7a:	f000 fec7 	bl	8002b0c <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 8001d86:	f001 f861 	bl	8002e4c <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	2000      	movs	r0, #0
 8001d8e:	f003 fba3 	bl	80054d8 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8001d9a:	f001 f865 	bl	8002e68 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001da2:	b480      	push	{r7}
 8001da4:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001da6:	bf00      	nop
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bc80      	pop	{r7}
 8001dac:	4770      	bx	lr

08001dae <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dae:	b480      	push	{r7}
 8001db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001db2:	e7fe      	b.n	8001db2 <NMI_Handler+0x4>

08001db4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001db8:	e7fe      	b.n	8001db8 <HardFault_Handler+0x4>

08001dba <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dbe:	e7fe      	b.n	8001dbe <MemManage_Handler+0x4>

08001dc0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dc4:	e7fe      	b.n	8001dc4 <BusFault_Handler+0x4>

08001dc6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dca:	e7fe      	b.n	8001dca <UsageFault_Handler+0x4>

08001dcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dd0:	bf00      	nop
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr

08001dd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ddc:	bf00      	nop
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bc80      	pop	{r7}
 8001de2:	4770      	bx	lr

08001de4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr

08001df0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001df4:	bf00      	nop
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bc80      	pop	{r7}
 8001dfa:	4770      	bx	lr

08001dfc <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001e00:	4802      	ldr	r0, [pc, #8]	; (8001e0c <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8001e02:	f005 fa1f 	bl	8007244 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20000220 	.word	0x20000220

08001e10 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001e14:	4802      	ldr	r0, [pc, #8]	; (8001e20 <DMA1_Channel1_IRQHandler+0x10>)
 8001e16:	f002 fc5d 	bl	80046d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000364 	.word	0x20000364

08001e24 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e28:	4802      	ldr	r0, [pc, #8]	; (8001e34 <USART1_IRQHandler+0x10>)
 8001e2a:	f006 f929 	bl	8008080 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	200002d0 	.word	0x200002d0

08001e38 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001e3c:	4802      	ldr	r0, [pc, #8]	; (8001e48 <RTC_Alarm_IRQHandler+0x10>)
 8001e3e:	f005 f8b1 	bl	8006fa4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20000220 	.word	0x20000220

08001e4c <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001e50:	4802      	ldr	r0, [pc, #8]	; (8001e5c <SUBGHZ_Radio_IRQHandler+0x10>)
 8001e52:	f005 fe39 	bl	8007ac8 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	200002bc 	.word	0x200002bc

08001e60 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001e68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e6c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001e6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001e78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e7c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4013      	ands	r3, r2
 8001e82:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e84:	68fb      	ldr	r3, [r7, #12]
}
 8001e86:	bf00      	nop
 8001e88:	3714      	adds	r7, #20
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr

08001e90 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001e94:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <MX_SUBGHZ_Init+0x20>)
 8001e96:	2208      	movs	r2, #8
 8001e98:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001e9a:	4805      	ldr	r0, [pc, #20]	; (8001eb0 <MX_SUBGHZ_Init+0x20>)
 8001e9c:	f005 fb92 	bl	80075c4 <HAL_SUBGHZ_Init>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8001ea6:	f7ff fda5 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	200002bc 	.word	0x200002bc

08001eb4 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001ebc:	2001      	movs	r0, #1
 8001ebe:	f7ff ffcf 	bl	8001e60 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	2032      	movs	r0, #50	; 0x32
 8001ec8:	f002 f953 	bl	8004172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001ecc:	2032      	movs	r0, #50	; 0x32
 8001ece:	f002 f96a 	bl	80041a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <LL_RCC_SetClkAfterWakeFromStop>:
{
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001ee2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001eec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	608b      	str	r3, [r1, #8]
}
 8001ef6:	bf00      	nop
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr

08001f00 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001f04:	4b02      	ldr	r3, [pc, #8]	; (8001f10 <LL_FLASH_GetUDN+0x10>)
 8001f06:	681b      	ldr	r3, [r3, #0]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bc80      	pop	{r7}
 8001f0e:	4770      	bx	lr
 8001f10:	1fff7580 	.word	0x1fff7580

08001f14 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001f18:	4b03      	ldr	r3, [pc, #12]	; (8001f28 <LL_FLASH_GetDeviceID+0x14>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	b2db      	uxtb	r3, r3
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bc80      	pop	{r7}
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	1fff7584 	.word	0x1fff7584

08001f2c <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001f30:	4b03      	ldr	r3, [pc, #12]	; (8001f40 <LL_FLASH_GetSTCompanyID+0x14>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	0a1b      	lsrs	r3, r3, #8
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bc80      	pop	{r7}
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	1fff7584 	.word	0x1fff7584

08001f44 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8001f48:	2000      	movs	r0, #0
 8001f4a:	f7ff ffc6 	bl	8001eda <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8001f4e:	f01b f8e3 	bl	801d118 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8001f52:	4b0e      	ldr	r3, [pc, #56]	; (8001f8c <SystemApp_Init+0x48>)
 8001f54:	2201      	movs	r2, #1
 8001f56:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8001f58:	f000 f974 	bl	8002244 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8001f5c:	f01b fb6c 	bl	801d638 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001f60:	480b      	ldr	r0, [pc, #44]	; (8001f90 <SystemApp_Init+0x4c>)
 8001f62:	f01b fc17 	bl	801d794 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001f66:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <SystemApp_Init+0x50>)
 8001f68:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001f6c:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001f6e:	2002      	movs	r0, #2
 8001f70:	f01b fc1e 	bl	801d7b0 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8001f74:	f7ff f86e 	bl	8001054 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8001f78:	f000 f998 	bl	80022ac <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8001f7c:	f01a fa98 	bl	801c4b0 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001f80:	2101      	movs	r1, #1
 8001f82:	2001      	movs	r0, #1
 8001f84:	f01a fad4 	bl	801c530 <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8001f88:	bf00      	nop
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	200002c8 	.word	0x200002c8
 8001f90:	08002165 	.word	0x08002165
 8001f94:	58004000 	.word	0x58004000

08001f98 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8001f9c:	f01a faf8 	bl	801c590 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8001fa0:	bf00      	nop
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 8001faa:	2300      	movs	r3, #0
 8001fac:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8001fae:	f7ff f85f 	bl	8001070 <SYS_GetBatteryLevel>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8001fb6:	88bb      	ldrh	r3, [r7, #4]
 8001fb8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d902      	bls.n	8001fc6 <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8001fc0:	23fe      	movs	r3, #254	; 0xfe
 8001fc2:	71fb      	strb	r3, [r7, #7]
 8001fc4:	e014      	b.n	8001ff0 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 8001fc6:	88bb      	ldrh	r3, [r7, #4]
 8001fc8:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8001fcc:	d202      	bcs.n	8001fd4 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	71fb      	strb	r3, [r7, #7]
 8001fd2:	e00d      	b.n	8001ff0 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001fd4:	88bb      	ldrh	r3, [r7, #4]
 8001fd6:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8001fda:	461a      	mov	r2, r3
 8001fdc:	4613      	mov	r3, r2
 8001fde:	01db      	lsls	r3, r3, #7
 8001fe0:	1a9b      	subs	r3, r3, r2
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	4b05      	ldr	r3, [pc, #20]	; (8001ffc <GetBatteryLevel+0x58>)
 8001fe8:	fba3 2302 	umull	r2, r3, r3, r2
 8001fec:	09db      	lsrs	r3, r3, #7
 8001fee:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8001ff0:	79fb      	ldrb	r3, [r7, #7]
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	1b4e81b5 	.word	0x1b4e81b5

08002000 <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b088      	sub	sp, #32
 8002004:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 8002006:	2300      	movs	r3, #0
 8002008:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 800200a:	1d3b      	adds	r3, r7, #4
 800200c:	4618      	mov	r0, r3
 800200e:	f000 f923 	bl	8002258 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	4618      	mov	r0, r3
 8002016:	f7fe fd81 	bl	8000b1c <__aeabi_f2iz>
 800201a:	4603      	mov	r3, r0
 800201c:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 800201e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8002022:	4618      	mov	r0, r3
 8002024:	3720      	adds	r7, #32
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 800202a:	b590      	push	{r4, r7, lr}
 800202c:	b087      	sub	sp, #28
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8002032:	2300      	movs	r3, #0
 8002034:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8002036:	f7ff ff63 	bl	8001f00 <LL_FLASH_GetUDN>
 800203a:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002042:	d138      	bne.n	80020b6 <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8002044:	f000 ff1e 	bl	8002e84 <HAL_GetUIDw0>
 8002048:	4604      	mov	r4, r0
 800204a:	f000 ff2f 	bl	8002eac <HAL_GetUIDw2>
 800204e:	4603      	mov	r3, r0
 8002050:	4423      	add	r3, r4
 8002052:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8002054:	f000 ff20 	bl	8002e98 <HAL_GetUIDw1>
 8002058:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	0e1a      	lsrs	r2, r3, #24
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	3307      	adds	r3, #7
 8002062:	b2d2      	uxtb	r2, r2
 8002064:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	0c1a      	lsrs	r2, r3, #16
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	3306      	adds	r3, #6
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	0a1a      	lsrs	r2, r3, #8
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	3305      	adds	r3, #5
 800207a:	b2d2      	uxtb	r2, r2
 800207c:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	3304      	adds	r3, #4
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	b2d2      	uxtb	r2, r2
 8002086:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	0e1a      	lsrs	r2, r3, #24
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3303      	adds	r3, #3
 8002090:	b2d2      	uxtb	r2, r2
 8002092:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	0c1a      	lsrs	r2, r3, #16
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3302      	adds	r3, #2
 800209c:	b2d2      	uxtb	r2, r2
 800209e:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	0a1a      	lsrs	r2, r3, #8
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3301      	adds	r3, #1
 80020a8:	b2d2      	uxtb	r2, r2
 80020aa:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	b2da      	uxtb	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 80020b4:	e031      	b.n	800211a <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	3307      	adds	r3, #7
 80020ba:	697a      	ldr	r2, [r7, #20]
 80020bc:	b2d2      	uxtb	r2, r2
 80020be:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	0a1a      	lsrs	r2, r3, #8
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3306      	adds	r3, #6
 80020c8:	b2d2      	uxtb	r2, r2
 80020ca:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	0c1a      	lsrs	r2, r3, #16
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3305      	adds	r3, #5
 80020d4:	b2d2      	uxtb	r2, r2
 80020d6:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	0e1a      	lsrs	r2, r3, #24
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3304      	adds	r3, #4
 80020e0:	b2d2      	uxtb	r2, r2
 80020e2:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 80020e4:	f7ff ff16 	bl	8001f14 <LL_FLASH_GetDeviceID>
 80020e8:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	3303      	adds	r3, #3
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	b2d2      	uxtb	r2, r2
 80020f2:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 80020f4:	f7ff ff1a 	bl	8001f2c <LL_FLASH_GetSTCompanyID>
 80020f8:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	3302      	adds	r3, #2
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	b2d2      	uxtb	r2, r2
 8002102:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	0a1a      	lsrs	r2, r3, #8
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	3301      	adds	r3, #1
 800210c:	b2d2      	uxtb	r2, r2
 800210e:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	0c1b      	lsrs	r3, r3, #16
 8002114:	b2da      	uxtb	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	701a      	strb	r2, [r3, #0]
}
 800211a:	bf00      	nop
 800211c:	371c      	adds	r7, #28
 800211e:	46bd      	mov	sp, r7
 8002120:	bd90      	pop	{r4, r7, pc}

08002122 <GetDevAddr>:

void GetDevAddr(uint32_t *devAddr)
{
 8002122:	b590      	push	{r4, r7, lr}
 8002124:	b083      	sub	sp, #12
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  *devAddr = LL_FLASH_GetUDN();
 800212a:	f7ff fee9 	bl	8001f00 <LL_FLASH_GetUDN>
 800212e:	4602      	mov	r2, r0
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	601a      	str	r2, [r3, #0]
  if (*devAddr == 0xFFFFFFFF)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800213c:	d10d      	bne.n	800215a <GetDevAddr+0x38>
  {
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 800213e:	f000 fea1 	bl	8002e84 <HAL_GetUIDw0>
 8002142:	4604      	mov	r4, r0
 8002144:	f000 fea8 	bl	8002e98 <HAL_GetUIDw1>
 8002148:	4603      	mov	r3, r0
 800214a:	405c      	eors	r4, r3
 800214c:	f000 feae 	bl	8002eac <HAL_GetUIDw2>
 8002150:	4603      	mov	r3, r0
 8002152:	ea84 0203 	eor.w	r2, r4, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
}
 800215a:	bf00      	nop
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	bd90      	pop	{r4, r7, pc}
	...

08002164 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af02      	add	r7, sp, #8
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 800216e:	f107 0308 	add.w	r3, r7, #8
 8002172:	4618      	mov	r0, r3
 8002174:	f01a fb1c 	bl	801c7b0 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800217e:	9200      	str	r2, [sp, #0]
 8002180:	4a07      	ldr	r2, [pc, #28]	; (80021a0 <TimestampNow+0x3c>)
 8002182:	2110      	movs	r1, #16
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f000 f81d 	bl	80021c4 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7fd fff4 	bl	8000178 <strlen>
 8002190:	4603      	mov	r3, r0
 8002192:	b29a      	uxth	r2, r3
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8002198:	bf00      	nop
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	0801dcf8 	.word	0x0801dcf8

080021a4 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 80021a8:	2101      	movs	r1, #1
 80021aa:	2002      	movs	r0, #2
 80021ac:	f01a f990 	bl	801c4d0 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 80021b0:	bf00      	nop
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 80021b8:	2100      	movs	r1, #0
 80021ba:	2002      	movs	r0, #2
 80021bc:	f01a f988 	bl	801c4d0 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 80021c0:	bf00      	nop
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 80021c4:	b40c      	push	{r2, r3}
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b084      	sub	sp, #16
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
 80021ce:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 80021d0:	f107 031c 	add.w	r3, r7, #28
 80021d4:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80021d6:	6839      	ldr	r1, [r7, #0]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f01a fcb9 	bl	801cb54 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 80021e2:	bf00      	nop
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80021ec:	b002      	add	sp, #8
 80021ee:	4770      	bx	lr

080021f0 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr

08002204 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800220a:	2300      	movs	r3, #0
 800220c:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 800220e:	4b06      	ldr	r3, [pc, #24]	; (8002228 <HAL_GetTick+0x24>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d002      	beq.n	800221c <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8002216:	f000 f915 	bl	8002444 <TIMER_IF_GetTimerValue>
 800221a:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 800221c:	687b      	ldr	r3, [r7, #4]
}
 800221e:	4618      	mov	r0, r3
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	200002c8 	.word	0x200002c8

0800222c <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4618      	mov	r0, r3
 8002238:	f000 f98b 	bl	8002552 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 800223c:	bf00      	nop
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 8002248:	f000 fe3a 	bl	8002ec0 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 800224c:	f000 fe3e 	bl	8002ecc <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8002250:	f000 fe42 	bl	8002ed8 <HAL_DBGMCU_DisableDBGStandbyMode>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8002254:	bf00      	nop
 8002256:	bd80      	pop	{r7, pc}

08002258 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8002258:	b480      	push	{r7}
 800225a:	b087      	sub	sp, #28
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8002260:	4b0d      	ldr	r3, [pc, #52]	; (8002298 <EnvSensors_Read+0x40>)
 8002262:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8002264:	4b0d      	ldr	r3, [pc, #52]	; (800229c <EnvSensors_Read+0x44>)
 8002266:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8002268:	4b0d      	ldr	r3, [pc, #52]	; (80022a0 <EnvSensors_Read+0x48>)
 800226a:	60fb      	str	r3, [r7, #12]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	697a      	ldr	r2, [r7, #20]
 8002270:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a08      	ldr	r2, [pc, #32]	; (80022a4 <EnvSensors_Read+0x4c>)
 8002282:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a08      	ldr	r2, [pc, #32]	; (80022a8 <EnvSensors_Read+0x50>)
 8002288:	611a      	str	r2, [r3, #16]

  return 0;
 800228a:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 800228c:	4618      	mov	r0, r3
 800228e:	371c      	adds	r7, #28
 8002290:	46bd      	mov	sp, r7
 8002292:	bc80      	pop	{r7}
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	42480000 	.word	0x42480000
 800229c:	41900000 	.word	0x41900000
 80022a0:	447a0000 	.word	0x447a0000
 80022a4:	003e090d 	.word	0x003e090d
 80022a8:	000503ab 	.word	0x000503ab

080022ac <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
  int32_t ret = 0;
 80022b2:	2300      	movs	r3, #0
 80022b4:	607b      	str	r3, [r7, #4]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 80022b6:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	bc80      	pop	{r7}
 80022c0:	4770      	bx	lr

080022c2 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022c2:	b480      	push	{r7}
 80022c4:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80022c6:	bf00      	nop
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bc80      	pop	{r7}
 80022cc:	4770      	bx	lr

080022ce <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	689b      	ldr	r3, [r3, #8]
}
 80022da:	4618      	mov	r0, r3
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	bc80      	pop	{r7}
 80022e2:	4770      	bx	lr

080022e4 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80022ea:	2300      	movs	r3, #0
 80022ec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 80022ee:	4b14      	ldr	r3, [pc, #80]	; (8002340 <TIMER_IF_Init+0x5c>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	f083 0301 	eor.w	r3, r3, #1
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d01b      	beq.n	8002334 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80022fc:	4b11      	ldr	r3, [pc, #68]	; (8002344 <TIMER_IF_Init+0x60>)
 80022fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002302:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8002304:	f7ff fba4 	bl	8001a50 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8002308:	f000 f856 	bl	80023b8 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 800230c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002310:	480c      	ldr	r0, [pc, #48]	; (8002344 <TIMER_IF_Init+0x60>)
 8002312:	f004 fdeb 	bl	8006eec <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002316:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <TIMER_IF_Init+0x60>)
 8002318:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800231c:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 800231e:	4809      	ldr	r0, [pc, #36]	; (8002344 <TIMER_IF_Init+0x60>)
 8002320:	f004 ff22 	bl	8007168 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8002324:	2000      	movs	r0, #0
 8002326:	f000 f9d3 	bl	80026d0 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 800232a:	f000 f85f 	bl	80023ec <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 800232e:	4b04      	ldr	r3, [pc, #16]	; (8002340 <TIMER_IF_Init+0x5c>)
 8002330:	2201      	movs	r2, #1
 8002332:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8002334:	79fb      	ldrb	r3, [r7, #7]
}
 8002336:	4618      	mov	r0, r3
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	200002c9 	.word	0x200002c9
 8002344:	20000220 	.word	0x20000220

08002348 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b08e      	sub	sp, #56	; 0x38
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002350:	2300      	movs	r3, #0
 8002352:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8002356:	f107 0308 	add.w	r3, r7, #8
 800235a:	222c      	movs	r2, #44	; 0x2c
 800235c:	2100      	movs	r1, #0
 800235e:	4618      	mov	r0, r3
 8002360:	f01b fc10 	bl	801db84 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8002364:	f000 f828 	bl	80023b8 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8002368:	4b11      	ldr	r3, [pc, #68]	; (80023b0 <TIMER_IF_StartTimer+0x68>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	4413      	add	r3, r2
 8002370:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8002372:	2300      	movs	r3, #0
 8002374:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	43db      	mvns	r3, r3
 800237a:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800237c:	2300      	movs	r3, #0
 800237e:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002380:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002384:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002386:	f44f 7380 	mov.w	r3, #256	; 0x100
 800238a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800238c:	f107 0308 	add.w	r3, r7, #8
 8002390:	2201      	movs	r2, #1
 8002392:	4619      	mov	r1, r3
 8002394:	4807      	ldr	r0, [pc, #28]	; (80023b4 <TIMER_IF_StartTimer+0x6c>)
 8002396:	f004 fc9d 	bl	8006cd4 <HAL_RTC_SetAlarm_IT>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 80023a0:	f7ff fb28 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 80023a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3738      	adds	r7, #56	; 0x38
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	200002cc 	.word	0x200002cc
 80023b4:	20000220 	.word	0x20000220

080023b8 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80023be:	2300      	movs	r3, #0
 80023c0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 80023c2:	4b08      	ldr	r3, [pc, #32]	; (80023e4 <TIMER_IF_StopTimer+0x2c>)
 80023c4:	2201      	movs	r2, #1
 80023c6:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80023c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023cc:	4806      	ldr	r0, [pc, #24]	; (80023e8 <TIMER_IF_StopTimer+0x30>)
 80023ce:	f004 fd8d 	bl	8006eec <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80023d2:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <TIMER_IF_StopTimer+0x30>)
 80023d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023d8:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 80023da:	79fb      	ldrb	r3, [r7, #7]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3708      	adds	r7, #8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40002800 	.word	0x40002800
 80023e8:	20000220 	.word	0x20000220

080023ec <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 80023f0:	f000 f98e 	bl	8002710 <GetTimerTicks>
 80023f4:	4603      	mov	r3, r0
 80023f6:	4a03      	ldr	r2, [pc, #12]	; (8002404 <TIMER_IF_SetTimerContext+0x18>)
 80023f8:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 80023fa:	4b02      	ldr	r3, [pc, #8]	; (8002404 <TIMER_IF_SetTimerContext+0x18>)
 80023fc:	681b      	ldr	r3, [r3, #0]
}
 80023fe:	4618      	mov	r0, r3
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	200002cc 	.word	0x200002cc

08002408 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 800240c:	4b02      	ldr	r3, [pc, #8]	; (8002418 <TIMER_IF_GetTimerContext+0x10>)
 800240e:	681b      	ldr	r3, [r3, #0]
}
 8002410:	4618      	mov	r0, r3
 8002412:	46bd      	mov	sp, r7
 8002414:	bc80      	pop	{r7}
 8002416:	4770      	bx	lr
 8002418:	200002cc 	.word	0x200002cc

0800241c <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002422:	2300      	movs	r3, #0
 8002424:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8002426:	f000 f973 	bl	8002710 <GetTimerTicks>
 800242a:	4602      	mov	r2, r0
 800242c:	4b04      	ldr	r3, [pc, #16]	; (8002440 <TIMER_IF_GetTimerElapsedTime+0x24>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8002434:	687b      	ldr	r3, [r7, #4]
}
 8002436:	4618      	mov	r0, r3
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	200002cc 	.word	0x200002cc

08002444 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800244a:	2300      	movs	r3, #0
 800244c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 800244e:	4b06      	ldr	r3, [pc, #24]	; (8002468 <TIMER_IF_GetTimerValue+0x24>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d002      	beq.n	800245c <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8002456:	f000 f95b 	bl	8002710 <GetTimerTicks>
 800245a:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 800245c:	687b      	ldr	r3, [r7, #4]
}
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	200002c9 	.word	0x200002c9

0800246c <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002472:	2300      	movs	r3, #0
 8002474:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8002476:	2303      	movs	r3, #3
 8002478:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 800247a:	687b      	ldr	r3, [r7, #4]
}
 800247c:	4618      	mov	r0, r3
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	bc80      	pop	{r7}
 8002484:	4770      	bx	lr

08002486 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8002486:	b5b0      	push	{r4, r5, r7, lr}
 8002488:	b084      	sub	sp, #16
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 800248e:	2100      	movs	r1, #0
 8002490:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8002492:	6879      	ldr	r1, [r7, #4]
 8002494:	2000      	movs	r0, #0
 8002496:	460a      	mov	r2, r1
 8002498:	4603      	mov	r3, r0
 800249a:	0d95      	lsrs	r5, r2, #22
 800249c:	0294      	lsls	r4, r2, #10
 800249e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80024a2:	f04f 0300 	mov.w	r3, #0
 80024a6:	4620      	mov	r0, r4
 80024a8:	4629      	mov	r1, r5
 80024aa:	f7fe fb7d 	bl	8000ba8 <__aeabi_uldivmod>
 80024ae:	4602      	mov	r2, r0
 80024b0:	460b      	mov	r3, r1
 80024b2:	4613      	mov	r3, r2
 80024b4:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 80024b6:	68fb      	ldr	r3, [r7, #12]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3710      	adds	r7, #16
 80024bc:	46bd      	mov	sp, r7
 80024be:	bdb0      	pop	{r4, r5, r7, pc}

080024c0 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 80024c0:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80024c4:	b085      	sub	sp, #20
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80024ca:	2100      	movs	r1, #0
 80024cc:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 80024ce:	6879      	ldr	r1, [r7, #4]
 80024d0:	2000      	movs	r0, #0
 80024d2:	460c      	mov	r4, r1
 80024d4:	4605      	mov	r5, r0
 80024d6:	4620      	mov	r0, r4
 80024d8:	4629      	mov	r1, r5
 80024da:	f04f 0a00 	mov.w	sl, #0
 80024de:	f04f 0b00 	mov.w	fp, #0
 80024e2:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 80024e6:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 80024ea:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 80024ee:	4650      	mov	r0, sl
 80024f0:	4659      	mov	r1, fp
 80024f2:	1b02      	subs	r2, r0, r4
 80024f4:	eb61 0305 	sbc.w	r3, r1, r5
 80024f8:	f04f 0000 	mov.w	r0, #0
 80024fc:	f04f 0100 	mov.w	r1, #0
 8002500:	0099      	lsls	r1, r3, #2
 8002502:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002506:	0090      	lsls	r0, r2, #2
 8002508:	4602      	mov	r2, r0
 800250a:	460b      	mov	r3, r1
 800250c:	eb12 0804 	adds.w	r8, r2, r4
 8002510:	eb43 0905 	adc.w	r9, r3, r5
 8002514:	f04f 0200 	mov.w	r2, #0
 8002518:	f04f 0300 	mov.w	r3, #0
 800251c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002520:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002524:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002528:	4690      	mov	r8, r2
 800252a:	4699      	mov	r9, r3
 800252c:	4640      	mov	r0, r8
 800252e:	4649      	mov	r1, r9
 8002530:	f04f 0200 	mov.w	r2, #0
 8002534:	f04f 0300 	mov.w	r3, #0
 8002538:	0a82      	lsrs	r2, r0, #10
 800253a:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 800253e:	0a8b      	lsrs	r3, r1, #10
 8002540:	4613      	mov	r3, r2
 8002542:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8002544:	68fb      	ldr	r3, [r7, #12]
}
 8002546:	4618      	mov	r0, r3
 8002548:	3714      	adds	r7, #20
 800254a:	46bd      	mov	sp, r7
 800254c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002550:	4770      	bx	lr

08002552 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b084      	sub	sp, #16
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f7ff ff93 	bl	8002486 <TIMER_IF_Convert_ms2Tick>
 8002560:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8002562:	f000 f8d5 	bl	8002710 <GetTimerTicks>
 8002566:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002568:	e000      	b.n	800256c <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 800256a:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 800256c:	f000 f8d0 	bl	8002710 <GetTimerTicks>
 8002570:	4602      	mov	r2, r0
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	429a      	cmp	r2, r3
 800257a:	d8f6      	bhi.n	800256a <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 800257c:	bf00      	nop
 800257e:	bf00      	nop
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b082      	sub	sp, #8
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 800258e:	f01a ff11 	bl	801d3b4 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8002592:	bf00      	nop
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b084      	sub	sp, #16
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 80025a2:	f000 f8a5 	bl	80026f0 <TIMER_IF_BkUp_Read_MSBticks>
 80025a6:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	3301      	adds	r3, #1
 80025ac:	4618      	mov	r0, r3
 80025ae:	f000 f88f 	bl	80026d0 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 80025b2:	bf00      	nop
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 80025ba:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025be:	b08c      	sub	sp, #48	; 0x30
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 80025c4:	2300      	movs	r3, #0
 80025c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 80025c8:	f000 f8a2 	bl	8002710 <GetTimerTicks>
 80025cc:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 80025ce:	f000 f88f 	bl	80026f0 <TIMER_IF_BkUp_Read_MSBticks>
 80025d2:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 80025d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d6:	2200      	movs	r2, #0
 80025d8:	60bb      	str	r3, [r7, #8]
 80025da:	60fa      	str	r2, [r7, #12]
 80025dc:	f04f 0200 	mov.w	r2, #0
 80025e0:	f04f 0300 	mov.w	r3, #0
 80025e4:	68b9      	ldr	r1, [r7, #8]
 80025e6:	000b      	movs	r3, r1
 80025e8:	2200      	movs	r2, #0
 80025ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025ec:	2000      	movs	r0, #0
 80025ee:	460c      	mov	r4, r1
 80025f0:	4605      	mov	r5, r0
 80025f2:	eb12 0804 	adds.w	r8, r2, r4
 80025f6:	eb43 0905 	adc.w	r9, r3, r5
 80025fa:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 80025fe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002602:	f04f 0200 	mov.w	r2, #0
 8002606:	f04f 0300 	mov.w	r3, #0
 800260a:	0a82      	lsrs	r2, r0, #10
 800260c:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002610:	0a8b      	lsrs	r3, r1, #10
 8002612:	4613      	mov	r3, r2
 8002614:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	2200      	movs	r2, #0
 800261a:	603b      	str	r3, [r7, #0]
 800261c:	607a      	str	r2, [r7, #4]
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8002624:	f04f 0b00 	mov.w	fp, #0
 8002628:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	4618      	mov	r0, r3
 8002630:	f7ff ff46 	bl	80024c0 <TIMER_IF_Convert_Tick2ms>
 8002634:	4603      	mov	r3, r0
 8002636:	b29a      	uxth	r2, r3
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 800263c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800263e:	4618      	mov	r0, r3
 8002640:	3730      	adds	r7, #48	; 0x30
 8002642:	46bd      	mov	sp, r7
 8002644:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002648 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	2100      	movs	r1, #0
 8002654:	4803      	ldr	r0, [pc, #12]	; (8002664 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8002656:	f004 fe19 	bl	800728c <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 800265a:	bf00      	nop
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	20000220 	.word	0x20000220

08002668 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	2101      	movs	r1, #1
 8002674:	4803      	ldr	r0, [pc, #12]	; (8002684 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8002676:	f004 fe09 	bl	800728c <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 800267a:	bf00      	nop
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	20000220 	.word	0x20000220

08002688 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800268e:	2300      	movs	r3, #0
 8002690:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002692:	2100      	movs	r1, #0
 8002694:	4804      	ldr	r0, [pc, #16]	; (80026a8 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8002696:	f004 fe11 	bl	80072bc <HAL_RTCEx_BKUPRead>
 800269a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 800269c:	687b      	ldr	r3, [r7, #4]
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	20000220 	.word	0x20000220

080026ac <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80026b2:	2300      	movs	r3, #0
 80026b4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 80026b6:	2101      	movs	r1, #1
 80026b8:	4804      	ldr	r0, [pc, #16]	; (80026cc <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 80026ba:	f004 fdff 	bl	80072bc <HAL_RTCEx_BKUPRead>
 80026be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 80026c0:	687b      	ldr	r3, [r7, #4]
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	20000220 	.word	0x20000220

080026d0 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	2102      	movs	r1, #2
 80026dc:	4803      	ldr	r0, [pc, #12]	; (80026ec <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 80026de:	f004 fdd5 	bl	800728c <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 80026e2:	bf00      	nop
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	20000220 	.word	0x20000220

080026f0 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 80026f6:	2102      	movs	r1, #2
 80026f8:	4804      	ldr	r0, [pc, #16]	; (800270c <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 80026fa:	f004 fddf 	bl	80072bc <HAL_RTCEx_BKUPRead>
 80026fe:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8002700:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8002702:	4618      	mov	r0, r3
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	20000220 	.word	0x20000220

08002710 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002716:	480b      	ldr	r0, [pc, #44]	; (8002744 <GetTimerTicks+0x34>)
 8002718:	f7ff fdd9 	bl	80022ce <LL_RTC_TIME_GetSubSecond>
 800271c:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800271e:	e003      	b.n	8002728 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002720:	4808      	ldr	r0, [pc, #32]	; (8002744 <GetTimerTicks+0x34>)
 8002722:	f7ff fdd4 	bl	80022ce <LL_RTC_TIME_GetSubSecond>
 8002726:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002728:	4806      	ldr	r0, [pc, #24]	; (8002744 <GetTimerTicks+0x34>)
 800272a:	f7ff fdd0 	bl	80022ce <LL_RTC_TIME_GetSubSecond>
 800272e:	4602      	mov	r2, r0
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4293      	cmp	r3, r2
 8002734:	d1f4      	bne.n	8002720 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 800273a:	4618      	mov	r0, r3
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	40002800 	.word	0x40002800

08002748 <LL_AHB2_GRP1_EnableClock>:
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002750:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002754:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002756:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4313      	orrs	r3, r2
 800275e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002764:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4013      	ands	r3, r2
 800276a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800276c:	68fb      	ldr	r3, [r7, #12]
}
 800276e:	bf00      	nop
 8002770:	3714      	adds	r7, #20
 8002772:	46bd      	mov	sp, r7
 8002774:	bc80      	pop	{r7}
 8002776:	4770      	bx	lr

08002778 <LL_APB2_GRP1_EnableClock>:
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002780:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002784:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002786:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4313      	orrs	r3, r2
 800278e:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002790:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002794:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4013      	ands	r3, r2
 800279a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800279c:	68fb      	ldr	r3, [r7, #12]
}
 800279e:	bf00      	nop
 80027a0:	3714      	adds	r7, #20
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bc80      	pop	{r7}
 80027a6:	4770      	bx	lr

080027a8 <LL_APB2_GRP1_DisableClock>:
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80027b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	43db      	mvns	r3, r3
 80027ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027be:	4013      	ands	r3, r2
 80027c0:	660b      	str	r3, [r1, #96]	; 0x60
}
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bc80      	pop	{r7}
 80027ca:	4770      	bx	lr

080027cc <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80027d0:	4b22      	ldr	r3, [pc, #136]	; (800285c <MX_USART1_UART_Init+0x90>)
 80027d2:	4a23      	ldr	r2, [pc, #140]	; (8002860 <MX_USART1_UART_Init+0x94>)
 80027d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80027d6:	4b21      	ldr	r3, [pc, #132]	; (800285c <MX_USART1_UART_Init+0x90>)
 80027d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027de:	4b1f      	ldr	r3, [pc, #124]	; (800285c <MX_USART1_UART_Init+0x90>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80027e4:	4b1d      	ldr	r3, [pc, #116]	; (800285c <MX_USART1_UART_Init+0x90>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80027ea:	4b1c      	ldr	r3, [pc, #112]	; (800285c <MX_USART1_UART_Init+0x90>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027f0:	4b1a      	ldr	r3, [pc, #104]	; (800285c <MX_USART1_UART_Init+0x90>)
 80027f2:	220c      	movs	r2, #12
 80027f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027f6:	4b19      	ldr	r3, [pc, #100]	; (800285c <MX_USART1_UART_Init+0x90>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80027fc:	4b17      	ldr	r3, [pc, #92]	; (800285c <MX_USART1_UART_Init+0x90>)
 80027fe:	2200      	movs	r2, #0
 8002800:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002802:	4b16      	ldr	r3, [pc, #88]	; (800285c <MX_USART1_UART_Init+0x90>)
 8002804:	2200      	movs	r2, #0
 8002806:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002808:	4b14      	ldr	r3, [pc, #80]	; (800285c <MX_USART1_UART_Init+0x90>)
 800280a:	2200      	movs	r2, #0
 800280c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800280e:	4b13      	ldr	r3, [pc, #76]	; (800285c <MX_USART1_UART_Init+0x90>)
 8002810:	2200      	movs	r2, #0
 8002812:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002814:	4811      	ldr	r0, [pc, #68]	; (800285c <MX_USART1_UART_Init+0x90>)
 8002816:	f005 fb16 	bl	8007e46 <HAL_UART_Init>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002820:	f7ff f8e8 	bl	80019f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002824:	2100      	movs	r1, #0
 8002826:	480d      	ldr	r0, [pc, #52]	; (800285c <MX_USART1_UART_Init+0x90>)
 8002828:	f007 fc39 	bl	800a09e <HAL_UARTEx_SetTxFifoThreshold>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002832:	f7ff f8df 	bl	80019f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002836:	2100      	movs	r1, #0
 8002838:	4808      	ldr	r0, [pc, #32]	; (800285c <MX_USART1_UART_Init+0x90>)
 800283a:	f007 fc6e 	bl	800a11a <HAL_UARTEx_SetRxFifoThreshold>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002844:	f7ff f8d6 	bl	80019f4 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8002848:	4804      	ldr	r0, [pc, #16]	; (800285c <MX_USART1_UART_Init+0x90>)
 800284a:	f007 fbed 	bl	800a028 <HAL_UARTEx_EnableFifoMode>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002854:	f7ff f8ce 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002858:	bf00      	nop
 800285a:	bd80      	pop	{r7, pc}
 800285c:	200002d0 	.word	0x200002d0
 8002860:	40013800 	.word	0x40013800

08002864 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b096      	sub	sp, #88	; 0x58
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800286c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	605a      	str	r2, [r3, #4]
 8002876:	609a      	str	r2, [r3, #8]
 8002878:	60da      	str	r2, [r3, #12]
 800287a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800287c:	f107 030c 	add.w	r3, r7, #12
 8002880:	2238      	movs	r2, #56	; 0x38
 8002882:	2100      	movs	r1, #0
 8002884:	4618      	mov	r0, r3
 8002886:	f01b f97d 	bl	801db84 <memset>
  if(uartHandle->Instance==USART1)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a2f      	ldr	r2, [pc, #188]	; (800294c <HAL_UART_MspInit+0xe8>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d156      	bne.n	8002942 <HAL_UART_MspInit+0xde>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002894:	2301      	movs	r3, #1
 8002896:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002898:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800289c:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800289e:	f107 030c 	add.w	r3, r7, #12
 80028a2:	4618      	mov	r0, r3
 80028a4:	f004 f87a 	bl	800699c <HAL_RCCEx_PeriphCLKConfig>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80028ae:	f7ff f8a1 	bl	80019f4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80028b2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80028b6:	f7ff ff5f 	bl	8002778 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ba:	2002      	movs	r0, #2
 80028bc:	f7ff ff44 	bl	8002748 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 80028c0:	23c0      	movs	r3, #192	; 0xc0
 80028c2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c4:	2302      	movs	r3, #2
 80028c6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c8:	2300      	movs	r3, #0
 80028ca:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028cc:	2303      	movs	r3, #3
 80028ce:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028d0:	2307      	movs	r3, #7
 80028d2:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028d4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80028d8:	4619      	mov	r1, r3
 80028da:	481d      	ldr	r0, [pc, #116]	; (8002950 <HAL_UART_MspInit+0xec>)
 80028dc:	f002 fa84 	bl	8004de8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 80028e0:	4b1c      	ldr	r3, [pc, #112]	; (8002954 <HAL_UART_MspInit+0xf0>)
 80028e2:	4a1d      	ldr	r2, [pc, #116]	; (8002958 <HAL_UART_MspInit+0xf4>)
 80028e4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80028e6:	4b1b      	ldr	r3, [pc, #108]	; (8002954 <HAL_UART_MspInit+0xf0>)
 80028e8:	2212      	movs	r2, #18
 80028ea:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028ec:	4b19      	ldr	r3, [pc, #100]	; (8002954 <HAL_UART_MspInit+0xf0>)
 80028ee:	2210      	movs	r2, #16
 80028f0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028f2:	4b18      	ldr	r3, [pc, #96]	; (8002954 <HAL_UART_MspInit+0xf0>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80028f8:	4b16      	ldr	r3, [pc, #88]	; (8002954 <HAL_UART_MspInit+0xf0>)
 80028fa:	2280      	movs	r2, #128	; 0x80
 80028fc:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028fe:	4b15      	ldr	r3, [pc, #84]	; (8002954 <HAL_UART_MspInit+0xf0>)
 8002900:	2200      	movs	r2, #0
 8002902:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002904:	4b13      	ldr	r3, [pc, #76]	; (8002954 <HAL_UART_MspInit+0xf0>)
 8002906:	2200      	movs	r2, #0
 8002908:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800290a:	4b12      	ldr	r3, [pc, #72]	; (8002954 <HAL_UART_MspInit+0xf0>)
 800290c:	2200      	movs	r2, #0
 800290e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002910:	4b10      	ldr	r3, [pc, #64]	; (8002954 <HAL_UART_MspInit+0xf0>)
 8002912:	2200      	movs	r2, #0
 8002914:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002916:	480f      	ldr	r0, [pc, #60]	; (8002954 <HAL_UART_MspInit+0xf0>)
 8002918:	f001 fc62 	bl	80041e0 <HAL_DMA_Init>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8002922:	f7ff f867 	bl	80019f4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a0a      	ldr	r2, [pc, #40]	; (8002954 <HAL_UART_MspInit+0xf0>)
 800292a:	67da      	str	r2, [r3, #124]	; 0x7c
 800292c:	4a09      	ldr	r2, [pc, #36]	; (8002954 <HAL_UART_MspInit+0xf0>)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8002932:	2200      	movs	r2, #0
 8002934:	2102      	movs	r1, #2
 8002936:	2024      	movs	r0, #36	; 0x24
 8002938:	f001 fc1b 	bl	8004172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800293c:	2024      	movs	r0, #36	; 0x24
 800293e:	f001 fc32 	bl	80041a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002942:	bf00      	nop
 8002944:	3758      	adds	r7, #88	; 0x58
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	40013800 	.word	0x40013800
 8002950:	48000400 	.word	0x48000400
 8002954:	20000364 	.word	0x20000364
 8002958:	40020008 	.word	0x40020008

0800295c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a0b      	ldr	r2, [pc, #44]	; (8002998 <HAL_UART_MspDeInit+0x3c>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d10f      	bne.n	800298e <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800296e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002972:	f7ff ff19 	bl	80027a8 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 8002976:	21c0      	movs	r1, #192	; 0xc0
 8002978:	4808      	ldr	r0, [pc, #32]	; (800299c <HAL_UART_MspDeInit+0x40>)
 800297a:	f002 fb95 	bl	80050a8 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002982:	4618      	mov	r0, r3
 8002984:	f001 fcd4 	bl	8004330 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002988:	2024      	movs	r0, #36	; 0x24
 800298a:	f001 fc1a 	bl	80041c2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 800298e:	bf00      	nop
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	40013800 	.word	0x40013800
 800299c:	48000400 	.word	0x48000400

080029a0 <LL_APB2_GRP1_ForceReset>:
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 80029a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	640b      	str	r3, [r1, #64]	; 0x40
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	bc80      	pop	{r7}
 80029c0:	4770      	bx	lr

080029c2 <LL_APB2_GRP1_ReleaseReset>:
{
 80029c2:	b480      	push	{r7}
 80029c4:	b083      	sub	sp, #12
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 80029ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	43db      	mvns	r3, r3
 80029d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029d8:	4013      	ands	r3, r2
 80029da:	640b      	str	r3, [r1, #64]	; 0x40
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bc80      	pop	{r7}
 80029e4:	4770      	bx	lr
	...

080029e8 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80029f0:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <LL_EXTI_EnableIT_0_31+0x24>)
 80029f2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80029f6:	4905      	ldr	r1, [pc, #20]	; (8002a0c <LL_EXTI_EnableIT_0_31+0x24>)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bc80      	pop	{r7}
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	58000800 	.word	0x58000800

08002a10 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8002a18:	4a07      	ldr	r2, [pc, #28]	; (8002a38 <vcom_Init+0x28>)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 8002a1e:	f7fe fbcd 	bl	80011bc <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002a22:	f7ff fed3 	bl	80027cc <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 8002a26:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002a2a:	f7ff ffdd 	bl	80029e8 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8002a2e:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	200003c8 	.word	0x200003c8

08002a3c <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 8002a40:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002a44:	f7ff ffac 	bl	80029a0 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 8002a48:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002a4c:	f7ff ffb9 	bl	80029c2 <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8002a50:	4804      	ldr	r0, [pc, #16]	; (8002a64 <vcom_DeInit+0x28>)
 8002a52:	f7ff ff83 	bl	800295c <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8002a56:	200f      	movs	r0, #15
 8002a58:	f001 fbb3 	bl	80041c2 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8002a5c:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	200002d0 	.word	0x200002d0

08002a68 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	460b      	mov	r3, r1
 8002a72:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8002a74:	887b      	ldrh	r3, [r7, #2]
 8002a76:	461a      	mov	r2, r3
 8002a78:	6879      	ldr	r1, [r7, #4]
 8002a7a:	4804      	ldr	r0, [pc, #16]	; (8002a8c <vcom_Trace_DMA+0x24>)
 8002a7c:	f005 fa80 	bl	8007f80 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8002a80:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	200002d0 	.word	0x200002d0

08002a90 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002a98:	4a19      	ldr	r2, [pc, #100]	; (8002b00 <vcom_ReceiveInit+0x70>)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002a9e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002aa2:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8002aa4:	f107 0308 	add.w	r3, r7, #8
 8002aa8:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002aac:	4815      	ldr	r0, [pc, #84]	; (8002b04 <vcom_ReceiveInit+0x74>)
 8002aae:	f007 fa2e 	bl	8009f0e <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8002ab2:	bf00      	nop
 8002ab4:	4b13      	ldr	r3, [pc, #76]	; (8002b04 <vcom_ReceiveInit+0x74>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002abe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ac2:	d0f7      	beq.n	8002ab4 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8002ac4:	bf00      	nop
 8002ac6:	4b0f      	ldr	r3, [pc, #60]	; (8002b04 <vcom_ReceiveInit+0x74>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	69db      	ldr	r3, [r3, #28]
 8002acc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ad0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ad4:	d1f7      	bne.n	8002ac6 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8002ad6:	4b0b      	ldr	r3, [pc, #44]	; (8002b04 <vcom_ReceiveInit+0x74>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	4b09      	ldr	r3, [pc, #36]	; (8002b04 <vcom_ReceiveInit+0x74>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002ae4:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 8002ae6:	4807      	ldr	r0, [pc, #28]	; (8002b04 <vcom_ReceiveInit+0x74>)
 8002ae8:	f007 fa6c 	bl	8009fc4 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 8002aec:	2201      	movs	r2, #1
 8002aee:	4906      	ldr	r1, [pc, #24]	; (8002b08 <vcom_ReceiveInit+0x78>)
 8002af0:	4804      	ldr	r0, [pc, #16]	; (8002b04 <vcom_ReceiveInit+0x74>)
 8002af2:	f005 f9f9 	bl	8007ee8 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8002af6:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3710      	adds	r7, #16
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	200003cc 	.word	0x200003cc
 8002b04:	200002d0 	.word	0x200002d0
 8002b08:	200003c4 	.word	0x200003c4

08002b0c <vcom_Resume>:

void vcom_Resume(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b10:	4808      	ldr	r0, [pc, #32]	; (8002b34 <vcom_Resume+0x28>)
 8002b12:	f005 f998 	bl	8007e46 <HAL_UART_Init>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <vcom_Resume+0x14>
  {
    Error_Handler();
 8002b1c:	f7fe ff6a 	bl	80019f4 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002b20:	4805      	ldr	r0, [pc, #20]	; (8002b38 <vcom_Resume+0x2c>)
 8002b22:	f001 fb5d 	bl	80041e0 <HAL_DMA_Init>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <vcom_Resume+0x24>
  {
    Error_Handler();
 8002b2c:	f7fe ff62 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8002b30:	bf00      	nop
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	200002d0 	.word	0x200002d0
 8002b38:	20000364 	.word	0x20000364

08002b3c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a05      	ldr	r2, [pc, #20]	; (8002b60 <HAL_UART_TxCpltCallback+0x24>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d103      	bne.n	8002b56 <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 8002b4e:	4b05      	ldr	r3, [pc, #20]	; (8002b64 <HAL_UART_TxCpltCallback+0x28>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2000      	movs	r0, #0
 8002b54:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002b56:	bf00      	nop
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	40013800 	.word	0x40013800
 8002b64:	200003c8 	.word	0x200003c8

08002b68 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a0d      	ldr	r2, [pc, #52]	; (8002bac <HAL_UART_RxCpltCallback+0x44>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d113      	bne.n	8002ba2 <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8002b7a:	4b0d      	ldr	r3, [pc, #52]	; (8002bb0 <HAL_UART_RxCpltCallback+0x48>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00a      	beq.n	8002b98 <HAL_UART_RxCpltCallback+0x30>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d105      	bne.n	8002b98 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 8002b8c:	4b08      	ldr	r3, [pc, #32]	; (8002bb0 <HAL_UART_RxCpltCallback+0x48>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2200      	movs	r2, #0
 8002b92:	2101      	movs	r1, #1
 8002b94:	4807      	ldr	r0, [pc, #28]	; (8002bb4 <HAL_UART_RxCpltCallback+0x4c>)
 8002b96:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8002b98:	2201      	movs	r2, #1
 8002b9a:	4906      	ldr	r1, [pc, #24]	; (8002bb4 <HAL_UART_RxCpltCallback+0x4c>)
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f005 f9a3 	bl	8007ee8 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8002ba2:	bf00      	nop
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	40013800 	.word	0x40013800
 8002bb0:	200003cc 	.word	0x200003cc
 8002bb4:	200003c4 	.word	0x200003c4

08002bb8 <Reset_Handler>:
 8002bb8:	480d      	ldr	r0, [pc, #52]	; (8002bf0 <LoopForever+0x2>)
 8002bba:	4685      	mov	sp, r0
 8002bbc:	f7ff fb81 	bl	80022c2 <SystemInit>
 8002bc0:	480c      	ldr	r0, [pc, #48]	; (8002bf4 <LoopForever+0x6>)
 8002bc2:	490d      	ldr	r1, [pc, #52]	; (8002bf8 <LoopForever+0xa>)
 8002bc4:	4a0d      	ldr	r2, [pc, #52]	; (8002bfc <LoopForever+0xe>)
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	e002      	b.n	8002bd0 <LoopCopyDataInit>

08002bca <CopyDataInit>:
 8002bca:	58d4      	ldr	r4, [r2, r3]
 8002bcc:	50c4      	str	r4, [r0, r3]
 8002bce:	3304      	adds	r3, #4

08002bd0 <LoopCopyDataInit>:
 8002bd0:	18c4      	adds	r4, r0, r3
 8002bd2:	428c      	cmp	r4, r1
 8002bd4:	d3f9      	bcc.n	8002bca <CopyDataInit>
 8002bd6:	4a0a      	ldr	r2, [pc, #40]	; (8002c00 <LoopForever+0x12>)
 8002bd8:	4c0a      	ldr	r4, [pc, #40]	; (8002c04 <LoopForever+0x16>)
 8002bda:	2300      	movs	r3, #0
 8002bdc:	e001      	b.n	8002be2 <LoopFillZerobss>

08002bde <FillZerobss>:
 8002bde:	6013      	str	r3, [r2, #0]
 8002be0:	3204      	adds	r2, #4

08002be2 <LoopFillZerobss>:
 8002be2:	42a2      	cmp	r2, r4
 8002be4:	d3fb      	bcc.n	8002bde <FillZerobss>
 8002be6:	f01a ffd5 	bl	801db94 <__libc_init_array>
 8002bea:	f7fe fe94 	bl	8001916 <main>

08002bee <LoopForever>:
 8002bee:	e7fe      	b.n	8002bee <LoopForever>
 8002bf0:	20010000 	.word	0x20010000
 8002bf4:	20000000 	.word	0x20000000
 8002bf8:	20000148 	.word	0x20000148
 8002bfc:	0801eda8 	.word	0x0801eda8
 8002c00:	20000148 	.word	0x20000148
 8002c04:	200022d0 	.word	0x200022d0

08002c08 <ADC_IRQHandler>:
 8002c08:	e7fe      	b.n	8002c08 <ADC_IRQHandler>

08002c0a <Enable_Bias_CS>:
void Disable_Memory_CS(void) {
	HAL_GPIO_WritePin(Memory_CS_GPIO_Port, Memory_CS_Pin, GPIO_PIN_RESET);
}

// Bias_CS
void Enable_Bias_CS(void) {
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Bias_CS_GPIO_Port, Bias_CS_Pin, GPIO_PIN_SET);
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c18:	f002 fb14 	bl	8005244 <HAL_GPIO_WritePin>
}
 8002c1c:	bf00      	nop
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <Disable_Bias_CS>:

void Disable_Bias_CS(void) {
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Bias_CS_GPIO_Port, Bias_CS_Pin, GPIO_PIN_RESET);
 8002c24:	2200      	movs	r2, #0
 8002c26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c2e:	f002 fb09 	bl	8005244 <HAL_GPIO_WritePin>
}
 8002c32:	bf00      	nop
 8002c34:	bd80      	pop	{r7, pc}
	...

08002c38 <Status_LED_Off>:

// Staus LED
void Status_LED_Off(void) {
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Status_LED_GPIO_Port, Status_LED_Pin, GPIO_PIN_SET);
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	2120      	movs	r1, #32
 8002c40:	4802      	ldr	r0, [pc, #8]	; (8002c4c <Status_LED_Off+0x14>)
 8002c42:	f002 faff 	bl	8005244 <HAL_GPIO_WritePin>
}
 8002c46:	bf00      	nop
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	48000400 	.word	0x48000400

08002c50 <Status_LED_On>:

void Status_LED_On(void) {
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Status_LED_GPIO_Port, Status_LED_Pin, GPIO_PIN_RESET);
 8002c54:	2200      	movs	r2, #0
 8002c56:	2120      	movs	r1, #32
 8002c58:	4802      	ldr	r0, [pc, #8]	; (8002c64 <Status_LED_On+0x14>)
 8002c5a:	f002 faf3 	bl	8005244 <HAL_GPIO_WritePin>
}
 8002c5e:	bf00      	nop
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	48000400 	.word	0x48000400

08002c68 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b086      	sub	sp, #24
 8002c6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002c6e:	1d3b      	adds	r3, r7, #4
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	605a      	str	r2, [r3, #4]
 8002c76:	609a      	str	r2, [r3, #8]
 8002c78:	60da      	str	r2, [r3, #12]
 8002c7a:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8002c7c:	2310      	movs	r3, #16
 8002c7e:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002c80:	2301      	movs	r3, #1
 8002c82:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8002c84:	2300      	movs	r3, #0
 8002c86:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8002c8c:	1d3b      	adds	r3, r7, #4
 8002c8e:	4619      	mov	r1, r3
 8002c90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c94:	f002 f8a8 	bl	8004de8 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8002c98:	2320      	movs	r3, #32
 8002c9a:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8002c9c:	1d3b      	adds	r3, r7, #4
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ca4:	f002 f8a0 	bl	8004de8 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002ca8:	2200      	movs	r2, #0
 8002caa:	2120      	movs	r1, #32
 8002cac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cb0:	f002 fac8 	bl	8005244 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	2110      	movs	r1, #16
 8002cb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cbc:	f002 fac2 	bl	8005244 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3718      	adds	r7, #24
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
	...

08002ccc <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8002cd6:	79fb      	ldrb	r3, [r7, #7]
 8002cd8:	2b03      	cmp	r3, #3
 8002cda:	d83f      	bhi.n	8002d5c <BSP_RADIO_ConfigRFSwitch+0x90>
 8002cdc:	a201      	add	r2, pc, #4	; (adr r2, 8002ce4 <BSP_RADIO_ConfigRFSwitch+0x18>)
 8002cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce2:	bf00      	nop
 8002ce4:	08002cf5 	.word	0x08002cf5
 8002ce8:	08002d0f 	.word	0x08002d0f
 8002cec:	08002d29 	.word	0x08002d29
 8002cf0:	08002d43 	.word	0x08002d43
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	2110      	movs	r1, #16
 8002cf8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cfc:	f002 faa2 	bl	8005244 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002d00:	2200      	movs	r2, #0
 8002d02:	2120      	movs	r1, #32
 8002d04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d08:	f002 fa9c 	bl	8005244 <HAL_GPIO_WritePin>
      break;      
 8002d0c:	e027      	b.n	8002d5e <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002d0e:	2201      	movs	r2, #1
 8002d10:	2110      	movs	r1, #16
 8002d12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d16:	f002 fa95 	bl	8005244 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	2120      	movs	r1, #32
 8002d1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d22:	f002 fa8f 	bl	8005244 <HAL_GPIO_WritePin>
      break;
 8002d26:	e01a      	b.n	8002d5e <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002d28:	2201      	movs	r2, #1
 8002d2a:	2110      	movs	r1, #16
 8002d2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d30:	f002 fa88 	bl	8005244 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002d34:	2201      	movs	r2, #1
 8002d36:	2120      	movs	r1, #32
 8002d38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d3c:	f002 fa82 	bl	8005244 <HAL_GPIO_WritePin>
      break;
 8002d40:	e00d      	b.n	8002d5e <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002d42:	2200      	movs	r2, #0
 8002d44:	2110      	movs	r1, #16
 8002d46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d4a:	f002 fa7b 	bl	8005244 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002d4e:	2201      	movs	r2, #1
 8002d50:	2120      	movs	r1, #32
 8002d52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d56:	f002 fa75 	bl	8005244 <HAL_GPIO_WritePin>
      break;
 8002d5a:	e000      	b.n	8002d5e <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 8002d5c:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3708      	adds	r7, #8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 8002d6c:	2302      	movs	r3, #2
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bc80      	pop	{r7}
 8002d74:	4770      	bx	lr

08002d76 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8002d76:	b480      	push	{r7}
 8002d78:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8002d7a:	2301      	movs	r3, #1
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bc80      	pop	{r7}
 8002d82:	4770      	bx	lr

08002d84 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8002d88:	2301      	movs	r3, #1
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bc80      	pop	{r7}
 8002d90:	4770      	bx	lr

08002d92 <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b085      	sub	sp, #20
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	4603      	mov	r3, r0
 8002d9a:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8002d9c:	79fb      	ldrb	r3, [r7, #7]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d102      	bne.n	8002da8 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8002da2:	230f      	movs	r3, #15
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	e001      	b.n	8002dac <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8002da8:	2316      	movs	r3, #22
 8002daa:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002dac:	68fb      	ldr	r3, [r7, #12]
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3714      	adds	r7, #20
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bc80      	pop	{r7}
 8002db6:	4770      	bx	lr

08002db8 <LL_DBGMCU_DisableDBGSleepMode>:
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002dbc:	4b04      	ldr	r3, [pc, #16]	; (8002dd0 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	4a03      	ldr	r2, [pc, #12]	; (8002dd0 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8002dc2:	f023 0301 	bic.w	r3, r3, #1
 8002dc6:	6053      	str	r3, [r2, #4]
}
 8002dc8:	bf00      	nop
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bc80      	pop	{r7}
 8002dce:	4770      	bx	lr
 8002dd0:	e0042000 	.word	0xe0042000

08002dd4 <LL_DBGMCU_DisableDBGStopMode>:
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002dd8:	4b04      	ldr	r3, [pc, #16]	; (8002dec <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	4a03      	ldr	r2, [pc, #12]	; (8002dec <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002dde:	f023 0302 	bic.w	r3, r3, #2
 8002de2:	6053      	str	r3, [r2, #4]
}
 8002de4:	bf00      	nop
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc80      	pop	{r7}
 8002dea:	4770      	bx	lr
 8002dec:	e0042000 	.word	0xe0042000

08002df0 <LL_DBGMCU_DisableDBGStandbyMode>:
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002df4:	4b04      	ldr	r3, [pc, #16]	; (8002e08 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	4a03      	ldr	r2, [pc, #12]	; (8002e08 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002dfa:	f023 0304 	bic.w	r3, r3, #4
 8002dfe:	6053      	str	r3, [r2, #4]
}
 8002e00:	bf00      	nop
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bc80      	pop	{r7}
 8002e06:	4770      	bx	lr
 8002e08:	e0042000 	.word	0xe0042000

08002e0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e12:	2300      	movs	r3, #0
 8002e14:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e16:	2003      	movs	r0, #3
 8002e18:	f001 f9a0 	bl	800415c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002e1c:	f003 fbe0 	bl	80065e0 <HAL_RCC_GetHCLKFreq>
 8002e20:	4603      	mov	r3, r0
 8002e22:	4a09      	ldr	r2, [pc, #36]	; (8002e48 <HAL_Init+0x3c>)
 8002e24:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e26:	200f      	movs	r0, #15
 8002e28:	f7ff f9e2 	bl	80021f0 <HAL_InitTick>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d002      	beq.n	8002e38 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	71fb      	strb	r3, [r7, #7]
 8002e36:	e001      	b.n	8002e3c <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002e38:	f7fe ffb3 	bl	8001da2 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e3c:	79fb      	ldrb	r3, [r7, #7]
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	20000000 	.word	0x20000000

08002e4c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002e50:	4b04      	ldr	r3, [pc, #16]	; (8002e64 <HAL_SuspendTick+0x18>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a03      	ldr	r2, [pc, #12]	; (8002e64 <HAL_SuspendTick+0x18>)
 8002e56:	f023 0302 	bic.w	r3, r3, #2
 8002e5a:	6013      	str	r3, [r2, #0]
}
 8002e5c:	bf00      	nop
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bc80      	pop	{r7}
 8002e62:	4770      	bx	lr
 8002e64:	e000e010 	.word	0xe000e010

08002e68 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002e6c:	4b04      	ldr	r3, [pc, #16]	; (8002e80 <HAL_ResumeTick+0x18>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a03      	ldr	r2, [pc, #12]	; (8002e80 <HAL_ResumeTick+0x18>)
 8002e72:	f043 0302 	orr.w	r3, r3, #2
 8002e76:	6013      	str	r3, [r2, #0]
}
 8002e78:	bf00      	nop
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bc80      	pop	{r7}
 8002e7e:	4770      	bx	lr
 8002e80:	e000e010 	.word	0xe000e010

08002e84 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8002e88:	4b02      	ldr	r3, [pc, #8]	; (8002e94 <HAL_GetUIDw0+0x10>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bc80      	pop	{r7}
 8002e92:	4770      	bx	lr
 8002e94:	1fff7590 	.word	0x1fff7590

08002e98 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8002e9c:	4b02      	ldr	r3, [pc, #8]	; (8002ea8 <HAL_GetUIDw1+0x10>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bc80      	pop	{r7}
 8002ea6:	4770      	bx	lr
 8002ea8:	1fff7594 	.word	0x1fff7594

08002eac <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002eb0:	4b02      	ldr	r3, [pc, #8]	; (8002ebc <HAL_GetUIDw2+0x10>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bc80      	pop	{r7}
 8002eba:	4770      	bx	lr
 8002ebc:	1fff7598 	.word	0x1fff7598

08002ec0 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 8002ec4:	f7ff ff78 	bl	8002db8 <LL_DBGMCU_DisableDBGSleepMode>
}
 8002ec8:	bf00      	nop
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 8002ed0:	f7ff ff80 	bl	8002dd4 <LL_DBGMCU_DisableDBGStopMode>
}
 8002ed4:	bf00      	nop
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 8002edc:	f7ff ff88 	bl	8002df0 <LL_DBGMCU_DisableDBGStandbyMode>
}
 8002ee0:	bf00      	nop
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	431a      	orrs	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	601a      	str	r2, [r3, #0]
}
 8002efe:	bf00      	nop
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bc80      	pop	{r7}
 8002f06:	4770      	bx	lr

08002f08 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bc80      	pop	{r7}
 8002f20:	4770      	bx	lr

08002f22 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002f22:	b480      	push	{r7}
 8002f24:	b085      	sub	sp, #20
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	60f8      	str	r0, [r7, #12]
 8002f2a:	60b9      	str	r1, [r7, #8]
 8002f2c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	695a      	ldr	r2, [r3, #20]
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	f003 0304 	and.w	r3, r3, #4
 8002f38:	2107      	movs	r1, #7
 8002f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f3e:	43db      	mvns	r3, r3
 8002f40:	401a      	ands	r2, r3
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	6879      	ldr	r1, [r7, #4]
 8002f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002f54:	bf00      	nop
 8002f56:	3714      	adds	r7, #20
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bc80      	pop	{r7}
 8002f5c:	4770      	bx	lr

08002f5e <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b083      	sub	sp, #12
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
 8002f66:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	695a      	ldr	r2, [r3, #20]
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	f003 0304 	and.w	r3, r3, #4
 8002f72:	2107      	movs	r1, #7
 8002f74:	fa01 f303 	lsl.w	r3, r1, r3
 8002f78:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002f80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bc80      	pop	{r7}
 8002f8c:	4770      	bx	lr

08002f8e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	b083      	sub	sp, #12
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e000      	b.n	8002fa8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bc80      	pop	{r7}
 8002fb0:	4770      	bx	lr

08002fb2 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	b085      	sub	sp, #20
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	60f8      	str	r0, [r7, #12]
 8002fba:	60b9      	str	r1, [r7, #8]
 8002fbc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	f003 031f 	and.w	r3, r3, #31
 8002fc8:	210f      	movs	r1, #15
 8002fca:	fa01 f303 	lsl.w	r3, r1, r3
 8002fce:	43db      	mvns	r3, r3
 8002fd0:	401a      	ands	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	0e9b      	lsrs	r3, r3, #26
 8002fd6:	f003 010f 	and.w	r1, r3, #15
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	f003 031f 	and.w	r3, r3, #31
 8002fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002fea:	bf00      	nop
 8002fec:	3714      	adds	r7, #20
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bc80      	pop	{r7}
 8002ff2:	4770      	bx	lr

08002ff4 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003008:	431a      	orrs	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800300e:	bf00      	nop
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	bc80      	pop	{r7}
 8003016:	4770      	bx	lr

08003018 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800302c:	43db      	mvns	r3, r3
 800302e:	401a      	ands	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	bc80      	pop	{r7}
 800303c:	4770      	bx	lr

0800303e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800303e:	b480      	push	{r7}
 8003040:	b085      	sub	sp, #20
 8003042:	af00      	add	r7, sp, #0
 8003044:	60f8      	str	r0, [r7, #12]
 8003046:	60b9      	str	r1, [r7, #8]
 8003048:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	695a      	ldr	r2, [r3, #20]
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	021b      	lsls	r3, r3, #8
 8003052:	43db      	mvns	r3, r3
 8003054:	401a      	ands	r2, r3
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	0219      	lsls	r1, r3, #8
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	400b      	ands	r3, r1
 800305e:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8003062:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003066:	431a      	orrs	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800306c:	bf00      	nop
 800306e:	3714      	adds	r7, #20
 8003070:	46bd      	mov	sp, r7
 8003072:	bc80      	pop	{r7}
 8003074:	4770      	bx	lr

08003076 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003076:	b480      	push	{r7}
 8003078:	b083      	sub	sp, #12
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003086:	f023 0317 	bic.w	r3, r3, #23
 800308a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003092:	bf00      	nop
 8003094:	370c      	adds	r7, #12
 8003096:	46bd      	mov	sp, r7
 8003098:	bc80      	pop	{r7}
 800309a:	4770      	bx	lr

0800309c <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80030ac:	f023 0317 	bic.w	r3, r3, #23
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6093      	str	r3, [r2, #8]
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bc80      	pop	{r7}
 80030bc:	4770      	bx	lr

080030be <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80030be:	b480      	push	{r7}
 80030c0:	b083      	sub	sp, #12
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030d2:	d101      	bne.n	80030d8 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80030d4:	2301      	movs	r3, #1
 80030d6:	e000      	b.n	80030da <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	bc80      	pop	{r7}
 80030e2:	4770      	bx	lr

080030e4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80030f4:	f023 0317 	bic.w	r3, r3, #23
 80030f8:	f043 0201 	orr.w	r2, r3, #1
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	bc80      	pop	{r7}
 8003108:	4770      	bx	lr

0800310a <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800310a:	b480      	push	{r7}
 800310c:	b083      	sub	sp, #12
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800311a:	f023 0317 	bic.w	r3, r3, #23
 800311e:	f043 0202 	orr.w	r2, r3, #2
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003126:	bf00      	nop
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	bc80      	pop	{r7}
 800312e:	4770      	bx	lr

08003130 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	2b01      	cmp	r3, #1
 8003142:	d101      	bne.n	8003148 <LL_ADC_IsEnabled+0x18>
 8003144:	2301      	movs	r3, #1
 8003146:	e000      	b.n	800314a <LL_ADC_IsEnabled+0x1a>
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	bc80      	pop	{r7}
 8003152:	4770      	bx	lr

08003154 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f003 0302 	and.w	r3, r3, #2
 8003164:	2b02      	cmp	r3, #2
 8003166:	d101      	bne.n	800316c <LL_ADC_IsDisableOngoing+0x18>
 8003168:	2301      	movs	r3, #1
 800316a:	e000      	b.n	800316e <LL_ADC_IsDisableOngoing+0x1a>
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	bc80      	pop	{r7}
 8003176:	4770      	bx	lr

08003178 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003188:	f023 0317 	bic.w	r3, r3, #23
 800318c:	f043 0204 	orr.w	r2, r3, #4
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	bc80      	pop	{r7}
 800319c:	4770      	bx	lr

0800319e <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800319e:	b480      	push	{r7}
 80031a0:	b083      	sub	sp, #12
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80031ae:	f023 0317 	bic.w	r3, r3, #23
 80031b2:	f043 0210 	orr.w	r2, r3, #16
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80031ba:	bf00      	nop
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	bc80      	pop	{r7}
 80031c2:	4770      	bx	lr

080031c4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f003 0304 	and.w	r3, r3, #4
 80031d4:	2b04      	cmp	r3, #4
 80031d6:	d101      	bne.n	80031dc <LL_ADC_REG_IsConversionOngoing+0x18>
 80031d8:	2301      	movs	r3, #1
 80031da:	e000      	b.n	80031de <LL_ADC_REG_IsConversionOngoing+0x1a>
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bc80      	pop	{r7}
 80031e6:	4770      	bx	lr

080031e8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b088      	sub	sp, #32
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031f0:	2300      	movs	r3, #0
 80031f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 80031f4:	2300      	movs	r3, #0
 80031f6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80031f8:	2300      	movs	r3, #0
 80031fa:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80031fc:	2300      	movs	r3, #0
 80031fe:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e17e      	b.n	8003508 <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003214:	2b00      	cmp	r3, #0
 8003216:	d109      	bne.n	800322c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f7fd fed3 	bl	8000fc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff ff44 	bl	80030be <LL_ADC_IsInternalRegulatorEnabled>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d115      	bne.n	8003268 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4618      	mov	r0, r3
 8003242:	f7ff ff18 	bl	8003076 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003246:	4b9e      	ldr	r3, [pc, #632]	; (80034c0 <HAL_ADC_Init+0x2d8>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	099b      	lsrs	r3, r3, #6
 800324c:	4a9d      	ldr	r2, [pc, #628]	; (80034c4 <HAL_ADC_Init+0x2dc>)
 800324e:	fba2 2303 	umull	r2, r3, r2, r3
 8003252:	099b      	lsrs	r3, r3, #6
 8003254:	3301      	adds	r3, #1
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800325a:	e002      	b.n	8003262 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	3b01      	subs	r3, #1
 8003260:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1f9      	bne.n	800325c <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff ff26 	bl	80030be <LL_ADC_IsInternalRegulatorEnabled>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d10d      	bne.n	8003294 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800327c:	f043 0210 	orr.w	r2, r3, #16
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003288:	f043 0201 	orr.w	r2, r3, #1
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4618      	mov	r0, r3
 800329a:	f7ff ff93 	bl	80031c4 <LL_ADC_REG_IsConversionOngoing>
 800329e:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a4:	f003 0310 	and.w	r3, r3, #16
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	f040 8124 	bne.w	80034f6 <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f040 8120 	bne.w	80034f6 <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ba:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80032be:	f043 0202 	orr.w	r2, r3, #2
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7ff ff30 	bl	8003130 <LL_ADC_IsEnabled>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f040 80a7 	bne.w	8003426 <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	7e1b      	ldrb	r3, [r3, #24]
 80032e0:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80032e2:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	7e5b      	ldrb	r3, [r3, #25]
 80032e8:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80032ea:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	7e9b      	ldrb	r3, [r3, #26]
 80032f0:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80032f2:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80032f8:	2a00      	cmp	r2, #0
 80032fa:	d002      	beq.n	8003302 <HAL_ADC_Init+0x11a>
 80032fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003300:	e000      	b.n	8003304 <HAL_ADC_Init+0x11c>
 8003302:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003304:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800330a:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	2b00      	cmp	r3, #0
 8003312:	da04      	bge.n	800331e <HAL_ADC_Init+0x136>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800331c:	e001      	b.n	8003322 <HAL_ADC_Init+0x13a>
 800331e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 8003322:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800332a:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800332c:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800332e:	69ba      	ldr	r2, [r7, #24]
 8003330:	4313      	orrs	r3, r2
 8003332:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f893 3020 	ldrb.w	r3, [r3, #32]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d114      	bne.n	8003368 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	7e9b      	ldrb	r3, [r3, #26]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d104      	bne.n	8003350 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800334c:	61bb      	str	r3, [r7, #24]
 800334e:	e00b      	b.n	8003368 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003354:	f043 0220 	orr.w	r2, r3, #32
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003360:	f043 0201 	orr.w	r2, r3, #1
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336c:	2b00      	cmp	r3, #0
 800336e:	d009      	beq.n	8003384 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003374:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800337c:	4313      	orrs	r3, r2
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	4313      	orrs	r3, r2
 8003382:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 800338e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	6812      	ldr	r2, [r2, #0]
 8003396:	69b9      	ldr	r1, [r7, #24]
 8003398:	430b      	orrs	r3, r1
 800339a:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80033a8:	4313      	orrs	r3, r2
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d111      	bne.n	80033de <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80033c6:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80033cc:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80033d2:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	f043 0301 	orr.w	r3, r3, #1
 80033dc:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	691a      	ldr	r2, [r3, #16]
 80033e4:	4b38      	ldr	r3, [pc, #224]	; (80034c8 <HAL_ADC_Init+0x2e0>)
 80033e6:	4013      	ands	r3, r2
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	6812      	ldr	r2, [r2, #0]
 80033ec:	6979      	ldr	r1, [r7, #20]
 80033ee:	430b      	orrs	r3, r1
 80033f0:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80033fa:	d014      	beq.n	8003426 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003400:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003404:	d00f      	beq.n	8003426 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800340a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800340e:	d00a      	beq.n	8003426 <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8003410:	4b2e      	ldr	r3, [pc, #184]	; (80034cc <HAL_ADC_Init+0x2e4>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003420:	492a      	ldr	r1, [pc, #168]	; (80034cc <HAL_ADC_Init+0x2e4>)
 8003422:	4313      	orrs	r3, r2
 8003424:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6818      	ldr	r0, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800342e:	461a      	mov	r2, r3
 8003430:	2100      	movs	r1, #0
 8003432:	f7ff fd76 	bl	8002f22 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6818      	ldr	r0, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343e:	461a      	mov	r2, r3
 8003440:	4923      	ldr	r1, [pc, #140]	; (80034d0 <HAL_ADC_Init+0x2e8>)
 8003442:	f7ff fd6e 	bl	8002f22 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d108      	bne.n	8003460 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f062 020f 	orn	r2, r2, #15
 800345c:	629a      	str	r2, [r3, #40]	; 0x28
 800345e:	e017      	b.n	8003490 <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003468:	d112      	bne.n	8003490 <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	69db      	ldr	r3, [r3, #28]
 8003474:	3b01      	subs	r3, #1
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	f003 031c 	and.w	r3, r3, #28
 800347c:	f06f 020f 	mvn.w	r2, #15
 8003480:	fa02 f103 	lsl.w	r1, r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	430a      	orrs	r2, r1
 800348e:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2100      	movs	r1, #0
 8003496:	4618      	mov	r0, r3
 8003498:	f7ff fd61 	bl	8002f5e <LL_ADC_GetSamplingTimeCommonChannels>
 800349c:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d116      	bne.n	80034d4 <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b0:	f023 0303 	bic.w	r3, r3, #3
 80034b4:	f043 0201 	orr.w	r2, r3, #1
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80034bc:	e023      	b.n	8003506 <HAL_ADC_Init+0x31e>
 80034be:	bf00      	nop
 80034c0:	20000000 	.word	0x20000000
 80034c4:	053e2d63 	.word	0x053e2d63
 80034c8:	1ffffc02 	.word	0x1ffffc02
 80034cc:	40012708 	.word	0x40012708
 80034d0:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d8:	f023 0312 	bic.w	r3, r3, #18
 80034dc:	f043 0210 	orr.w	r2, r3, #16
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e8:	f043 0201 	orr.w	r2, r3, #1
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80034f4:	e007      	b.n	8003506 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034fa:	f043 0210 	orr.w	r2, r3, #16
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8003506:	7ffb      	ldrb	r3, [r7, #31]
}
 8003508:	4618      	mov	r0, r3
 800350a:	3720      	adds	r7, #32
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e07a      	b.n	8003618 <HAL_ADC_DeInit+0x108>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003526:	f043 0202 	orr.w	r2, r3, #2
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 face 	bl	8003ad0 <ADC_ConversionStop>
 8003534:	4603      	mov	r3, r0
 8003536:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003538:	7bfb      	ldrb	r3, [r7, #15]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10f      	bne.n	800355e <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 fb92 	bl	8003c68 <ADC_Disable>
 8003544:	4603      	mov	r3, r0
 8003546:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003548:	7bfb      	ldrb	r3, [r7, #15]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d102      	bne.n	8003554 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2201      	movs	r2, #1
 8003552:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4618      	mov	r0, r3
 800355a:	f7ff fd9f 	bl	800309c <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	6812      	ldr	r2, [r2, #0]
 8003568:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 800356c:	f023 0303 	bic.w	r3, r3, #3
 8003570:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f240 329f 	movw	r2, #927	; 0x39f
 800357a:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68d9      	ldr	r1, [r3, #12]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	4b26      	ldr	r3, [pc, #152]	; (8003620 <HAL_ADC_DeInit+0x110>)
 8003588:	400b      	ands	r3, r1
 800358a:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	691a      	ldr	r2, [r3, #16]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 800359a:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	695a      	ldr	r2, [r3, #20]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f022 0207 	bic.w	r2, r2, #7
 80035aa:	615a      	str	r2, [r3, #20]

  /* Reset registers AWDxTR */
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6a1a      	ldr	r2, [r3, #32]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 80035ba:	621a      	str	r2, [r3, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 80035ca:	625a      	str	r2, [r3, #36]	; 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 80035da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2200      	movs	r2, #0
 80035e8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 80035ea:	4b0e      	ldr	r3, [pc, #56]	; (8003624 <HAL_ADC_DeInit+0x114>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a0d      	ldr	r2, [pc, #52]	; (8003624 <HAL_ADC_DeInit+0x114>)
 80035f0:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 80035f4:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f7fd fd12 	bl	8001020 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003616:	7bfb      	ldrb	r3, [r7, #15]
}
 8003618:	4618      	mov	r0, r3
 800361a:	3710      	adds	r7, #16
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	833e0200 	.word	0x833e0200
 8003624:	40012708 	.word	0x40012708

08003628 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4618      	mov	r0, r3
 8003636:	f7ff fdc5 	bl	80031c4 <LL_ADC_REG_IsConversionOngoing>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d132      	bne.n	80036a6 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003646:	2b01      	cmp	r3, #1
 8003648:	d101      	bne.n	800364e <HAL_ADC_Start+0x26>
 800364a:	2302      	movs	r3, #2
 800364c:	e02e      	b.n	80036ac <HAL_ADC_Start+0x84>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 fa80 	bl	8003b5c <ADC_Enable>
 800365c:	4603      	mov	r3, r0
 800365e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003660:	7bfb      	ldrb	r3, [r7, #15]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d11a      	bne.n	800369c <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800366a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800366e:	f023 0301 	bic.w	r3, r3, #1
 8003672:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	221c      	movs	r2, #28
 8003686:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4618      	mov	r0, r3
 8003696:	f7ff fd6f 	bl	8003178 <LL_ADC_REG_StartConversion>
 800369a:	e006      	b.n	80036aa <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80036a4:	e001      	b.n	80036aa <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80036a6:	2302      	movs	r3, #2
 80036a8:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 80036aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d101      	bne.n	80036ca <HAL_ADC_Stop+0x16>
 80036c6:	2302      	movs	r3, #2
 80036c8:	e022      	b.n	8003710 <HAL_ADC_Stop+0x5c>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 f9fc 	bl	8003ad0 <ADC_ConversionStop>
 80036d8:	4603      	mov	r3, r0
 80036da:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80036dc:	7bfb      	ldrb	r3, [r7, #15]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d111      	bne.n	8003706 <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 fac0 	bl	8003c68 <ADC_Disable>
 80036e8:	4603      	mov	r3, r0
 80036ea:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80036ec:	7bfb      	ldrb	r3, [r7, #15]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d109      	bne.n	8003706 <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036fa:	f023 0301 	bic.w	r3, r3, #1
 80036fe:	f043 0201 	orr.w	r2, r3, #1
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800370e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003710:	4618      	mov	r0, r3
 8003712:	3710      	adds	r7, #16
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	2b08      	cmp	r3, #8
 8003728:	d102      	bne.n	8003730 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800372a:	2308      	movs	r3, #8
 800372c:	60fb      	str	r3, [r7, #12]
 800372e:	e010      	b.n	8003752 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d007      	beq.n	800374e <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003742:	f043 0220 	orr.w	r2, r3, #32
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e077      	b.n	800383e <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800374e:	2304      	movs	r3, #4
 8003750:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003752:	f7fe fd57 	bl	8002204 <HAL_GetTick>
 8003756:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003758:	e021      	b.n	800379e <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003760:	d01d      	beq.n	800379e <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003762:	f7fe fd4f 	bl	8002204 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	429a      	cmp	r2, r3
 8003770:	d302      	bcc.n	8003778 <HAL_ADC_PollForConversion+0x60>
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d112      	bne.n	800379e <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	4013      	ands	r3, r2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10b      	bne.n	800379e <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800378a:	f043 0204 	orr.w	r2, r3, #4
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e04f      	b.n	800383e <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	4013      	ands	r3, r2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d0d6      	beq.n	800375a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4618      	mov	r0, r3
 80037be:	f7ff fbe6 	bl	8002f8e <LL_ADC_REG_IsTriggerSourceSWStart>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d031      	beq.n	800382c <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	7e9b      	ldrb	r3, [r3, #26]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d12d      	bne.n	800382c <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0308 	and.w	r3, r3, #8
 80037da:	2b08      	cmp	r3, #8
 80037dc:	d126      	bne.n	800382c <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7ff fcee 	bl	80031c4 <LL_ADC_REG_IsConversionOngoing>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d112      	bne.n	8003814 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 020c 	bic.w	r2, r2, #12
 80037fc:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003802:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003806:	f023 0301 	bic.w	r3, r3, #1
 800380a:	f043 0201 	orr.w	r2, r3, #1
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	659a      	str	r2, [r3, #88]	; 0x58
 8003812:	e00b      	b.n	800382c <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003818:	f043 0220 	orr.w	r2, r3, #32
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003824:	f043 0201 	orr.w	r2, r3, #1
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	7e1b      	ldrb	r3, [r3, #24]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d103      	bne.n	800383c <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	220c      	movs	r2, #12
 800383a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003846:	b480      	push	{r7}
 8003848:	b083      	sub	sp, #12
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003854:	4618      	mov	r0, r3
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	bc80      	pop	{r7}
 800385c:	4770      	bx	lr
	...

08003860 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b088      	sub	sp, #32
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800386a:	2300      	movs	r3, #0
 800386c:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800386e:	2300      	movs	r3, #0
 8003870:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003880:	2b01      	cmp	r3, #1
 8003882:	d101      	bne.n	8003888 <HAL_ADC_ConfigChannel+0x28>
 8003884:	2302      	movs	r3, #2
 8003886:	e110      	b.n	8003aaa <HAL_ADC_ConfigChannel+0x24a>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4618      	mov	r0, r3
 8003896:	f7ff fc95 	bl	80031c4 <LL_ADC_REG_IsConversionOngoing>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	f040 80f7 	bne.w	8003a90 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	f000 80b1 	beq.w	8003a0e <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038b4:	d004      	beq.n	80038c0 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80038ba:	4a7e      	ldr	r2, [pc, #504]	; (8003ab4 <HAL_ADC_ConfigChannel+0x254>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d108      	bne.n	80038d2 <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4619      	mov	r1, r3
 80038ca:	4610      	mov	r0, r2
 80038cc:	f7ff fb92 	bl	8002ff4 <LL_ADC_REG_SetSequencerChAdd>
 80038d0:	e041      	b.n	8003956 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f003 031f 	and.w	r3, r3, #31
 80038de:	210f      	movs	r1, #15
 80038e0:	fa01 f303 	lsl.w	r3, r1, r3
 80038e4:	43db      	mvns	r3, r3
 80038e6:	401a      	ands	r2, r3
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d105      	bne.n	8003900 <HAL_ADC_ConfigChannel+0xa0>
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	0e9b      	lsrs	r3, r3, #26
 80038fa:	f003 031f 	and.w	r3, r3, #31
 80038fe:	e011      	b.n	8003924 <HAL_ADC_ConfigChannel+0xc4>
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	fa93 f3a3 	rbit	r3, r3
 800390c:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d101      	bne.n	800391c <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8003918:	2320      	movs	r3, #32
 800391a:	e003      	b.n	8003924 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	fab3 f383 	clz	r3, r3
 8003922:	b2db      	uxtb	r3, r3
 8003924:	6839      	ldr	r1, [r7, #0]
 8003926:	6849      	ldr	r1, [r1, #4]
 8003928:	f001 011f 	and.w	r1, r1, #31
 800392c:	408b      	lsls	r3, r1
 800392e:	431a      	orrs	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	089b      	lsrs	r3, r3, #2
 800393a:	1c5a      	adds	r2, r3, #1
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	69db      	ldr	r3, [r3, #28]
 8003940:	429a      	cmp	r2, r3
 8003942:	d808      	bhi.n	8003956 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6818      	ldr	r0, [r3, #0]
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	6859      	ldr	r1, [r3, #4]
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	461a      	mov	r2, r3
 8003952:	f7ff fb2e 	bl	8002fb2 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6818      	ldr	r0, [r3, #0]
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	6819      	ldr	r1, [r3, #0]
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	461a      	mov	r2, r3
 8003964:	f7ff fb6b 	bl	800303e <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	f280 8097 	bge.w	8003aa0 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003972:	4851      	ldr	r0, [pc, #324]	; (8003ab8 <HAL_ADC_ConfigChannel+0x258>)
 8003974:	f7ff fac8 	bl	8002f08 <LL_ADC_GetCommonPathInternalCh>
 8003978:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a4f      	ldr	r2, [pc, #316]	; (8003abc <HAL_ADC_ConfigChannel+0x25c>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d120      	bne.n	80039c6 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800398a:	2b00      	cmp	r3, #0
 800398c:	d11b      	bne.n	80039c6 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003994:	4619      	mov	r1, r3
 8003996:	4848      	ldr	r0, [pc, #288]	; (8003ab8 <HAL_ADC_ConfigChannel+0x258>)
 8003998:	f7ff faa4 	bl	8002ee4 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800399c:	4b48      	ldr	r3, [pc, #288]	; (8003ac0 <HAL_ADC_ConfigChannel+0x260>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	099b      	lsrs	r3, r3, #6
 80039a2:	4a48      	ldr	r2, [pc, #288]	; (8003ac4 <HAL_ADC_ConfigChannel+0x264>)
 80039a4:	fba2 2303 	umull	r2, r3, r2, r3
 80039a8:	099b      	lsrs	r3, r3, #6
 80039aa:	1c5a      	adds	r2, r3, #1
 80039ac:	4613      	mov	r3, r2
 80039ae:	005b      	lsls	r3, r3, #1
 80039b0:	4413      	add	r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80039b6:	e002      	b.n	80039be <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	3b01      	subs	r3, #1
 80039bc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d1f9      	bne.n	80039b8 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80039c4:	e06c      	b.n	8003aa0 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a3f      	ldr	r2, [pc, #252]	; (8003ac8 <HAL_ADC_ConfigChannel+0x268>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d10c      	bne.n	80039ea <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d107      	bne.n	80039ea <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039e0:	4619      	mov	r1, r3
 80039e2:	4835      	ldr	r0, [pc, #212]	; (8003ab8 <HAL_ADC_ConfigChannel+0x258>)
 80039e4:	f7ff fa7e 	bl	8002ee4 <LL_ADC_SetCommonPathInternalCh>
 80039e8:	e05a      	b.n	8003aa0 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a37      	ldr	r2, [pc, #220]	; (8003acc <HAL_ADC_ConfigChannel+0x26c>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d155      	bne.n	8003aa0 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d150      	bne.n	8003aa0 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a04:	4619      	mov	r1, r3
 8003a06:	482c      	ldr	r0, [pc, #176]	; (8003ab8 <HAL_ADC_ConfigChannel+0x258>)
 8003a08:	f7ff fa6c 	bl	8002ee4 <LL_ADC_SetCommonPathInternalCh>
 8003a0c:	e048      	b.n	8003aa0 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a16:	d004      	beq.n	8003a22 <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003a1c:	4a25      	ldr	r2, [pc, #148]	; (8003ab4 <HAL_ADC_ConfigChannel+0x254>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d107      	bne.n	8003a32 <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	4610      	mov	r0, r2
 8003a2e:	f7ff faf3 	bl	8003018 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	da32      	bge.n	8003aa0 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a3a:	481f      	ldr	r0, [pc, #124]	; (8003ab8 <HAL_ADC_ConfigChannel+0x258>)
 8003a3c:	f7ff fa64 	bl	8002f08 <LL_ADC_GetCommonPathInternalCh>
 8003a40:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a1d      	ldr	r2, [pc, #116]	; (8003abc <HAL_ADC_ConfigChannel+0x25c>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d107      	bne.n	8003a5c <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003a52:	4619      	mov	r1, r3
 8003a54:	4818      	ldr	r0, [pc, #96]	; (8003ab8 <HAL_ADC_ConfigChannel+0x258>)
 8003a56:	f7ff fa45 	bl	8002ee4 <LL_ADC_SetCommonPathInternalCh>
 8003a5a:	e021      	b.n	8003aa0 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a19      	ldr	r2, [pc, #100]	; (8003ac8 <HAL_ADC_ConfigChannel+0x268>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d107      	bne.n	8003a76 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	4812      	ldr	r0, [pc, #72]	; (8003ab8 <HAL_ADC_ConfigChannel+0x258>)
 8003a70:	f7ff fa38 	bl	8002ee4 <LL_ADC_SetCommonPathInternalCh>
 8003a74:	e014      	b.n	8003aa0 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a14      	ldr	r2, [pc, #80]	; (8003acc <HAL_ADC_ConfigChannel+0x26c>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d10f      	bne.n	8003aa0 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003a86:	4619      	mov	r1, r3
 8003a88:	480b      	ldr	r0, [pc, #44]	; (8003ab8 <HAL_ADC_ConfigChannel+0x258>)
 8003a8a:	f7ff fa2b 	bl	8002ee4 <LL_ADC_SetCommonPathInternalCh>
 8003a8e:	e007      	b.n	8003aa0 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a94:	f043 0220 	orr.w	r2, r3, #32
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003aa8:	7ffb      	ldrb	r3, [r7, #31]
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3720      	adds	r7, #32
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	80000004 	.word	0x80000004
 8003ab8:	40012708 	.word	0x40012708
 8003abc:	b0001000 	.word	0xb0001000
 8003ac0:	20000000 	.word	0x20000000
 8003ac4:	053e2d63 	.word	0x053e2d63
 8003ac8:	b8004000 	.word	0xb8004000
 8003acc:	b4002000 	.word	0xb4002000

08003ad0 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7ff fb71 	bl	80031c4 <LL_ADC_REG_IsConversionOngoing>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d033      	beq.n	8003b50 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7ff fb31 	bl	8003154 <LL_ADC_IsDisableOngoing>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d104      	bne.n	8003b02 <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7ff fb4e 	bl	800319e <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b02:	f7fe fb7f 	bl	8002204 <HAL_GetTick>
 8003b06:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003b08:	e01b      	b.n	8003b42 <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003b0a:	f7fe fb7b 	bl	8002204 <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d914      	bls.n	8003b42 <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f003 0304 	and.w	r3, r3, #4
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00d      	beq.n	8003b42 <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b2a:	f043 0210 	orr.w	r2, r3, #16
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b36:	f043 0201 	orr.w	r2, r3, #1
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e007      	b.n	8003b52 <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f003 0304 	and.w	r3, r3, #4
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1dc      	bne.n	8003b0a <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
	...

08003b5c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003b64:	2300      	movs	r3, #0
 8003b66:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7ff fadf 	bl	8003130 <LL_ADC_IsEnabled>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d169      	bne.n	8003c4c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	689a      	ldr	r2, [r3, #8]
 8003b7e:	4b36      	ldr	r3, [pc, #216]	; (8003c58 <ADC_Enable+0xfc>)
 8003b80:	4013      	ands	r3, r2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00d      	beq.n	8003ba2 <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b8a:	f043 0210 	orr.w	r2, r3, #16
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b96:	f043 0201 	orr.w	r2, r3, #1
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e055      	b.n	8003c4e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7ff fa9c 	bl	80030e4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8003bac:	482b      	ldr	r0, [pc, #172]	; (8003c5c <ADC_Enable+0x100>)
 8003bae:	f7ff f9ab 	bl	8002f08 <LL_ADC_GetCommonPathInternalCh>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00f      	beq.n	8003bdc <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003bbc:	4b28      	ldr	r3, [pc, #160]	; (8003c60 <ADC_Enable+0x104>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	099b      	lsrs	r3, r3, #6
 8003bc2:	4a28      	ldr	r2, [pc, #160]	; (8003c64 <ADC_Enable+0x108>)
 8003bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc8:	099b      	lsrs	r3, r3, #6
 8003bca:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8003bcc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003bce:	e002      	b.n	8003bd6 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1f9      	bne.n	8003bd0 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	7e5b      	ldrb	r3, [r3, #25]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d033      	beq.n	8003c4c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003be4:	f7fe fb0e 	bl	8002204 <HAL_GetTick>
 8003be8:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003bea:	e028      	b.n	8003c3e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7ff fa9d 	bl	8003130 <LL_ADC_IsEnabled>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d104      	bne.n	8003c06 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7ff fa6f 	bl	80030e4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003c06:	f7fe fafd 	bl	8002204 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d914      	bls.n	8003c3e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0301 	and.w	r3, r3, #1
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d00d      	beq.n	8003c3e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c26:	f043 0210 	orr.w	r2, r3, #16
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c32:	f043 0201 	orr.w	r2, r3, #1
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e007      	b.n	8003c4e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0301 	and.w	r3, r3, #1
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d1cf      	bne.n	8003bec <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	80000017 	.word	0x80000017
 8003c5c:	40012708 	.word	0x40012708
 8003c60:	20000000 	.word	0x20000000
 8003c64:	053e2d63 	.word	0x053e2d63

08003c68 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7ff fa6d 	bl	8003154 <LL_ADC_IsDisableOngoing>
 8003c7a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7ff fa55 	bl	8003130 <LL_ADC_IsEnabled>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d047      	beq.n	8003d1c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d144      	bne.n	8003d1c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f003 0305 	and.w	r3, r3, #5
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d10c      	bne.n	8003cba <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7ff fa30 	bl	800310a <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2203      	movs	r2, #3
 8003cb0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003cb2:	f7fe faa7 	bl	8002204 <HAL_GetTick>
 8003cb6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003cb8:	e029      	b.n	8003d0e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cbe:	f043 0210 	orr.w	r2, r3, #16
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cca:	f043 0201 	orr.w	r2, r3, #1
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e023      	b.n	8003d1e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003cd6:	f7fe fa95 	bl	8002204 <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d914      	bls.n	8003d0e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00d      	beq.n	8003d0e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf6:	f043 0210 	orr.w	r2, r3, #16
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d02:	f043 0201 	orr.w	r2, r3, #1
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e007      	b.n	8003d1e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1dc      	bne.n	8003cd6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <LL_ADC_SetCalibrationFactor>:
{
 8003d26:	b480      	push	{r7}
 8003d28:	b083      	sub	sp, #12
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
 8003d2e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d36:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	431a      	orrs	r2, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bc80      	pop	{r7}
 8003d4c:	4770      	bx	lr

08003d4e <LL_ADC_GetCalibrationFactor>:
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b083      	sub	sp, #12
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bc80      	pop	{r7}
 8003d68:	4770      	bx	lr

08003d6a <LL_ADC_Enable>:
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b083      	sub	sp, #12
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d7a:	f023 0317 	bic.w	r3, r3, #23
 8003d7e:	f043 0201 	orr.w	r2, r3, #1
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	609a      	str	r2, [r3, #8]
}
 8003d86:	bf00      	nop
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bc80      	pop	{r7}
 8003d8e:	4770      	bx	lr

08003d90 <LL_ADC_Disable>:
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003da0:	f023 0317 	bic.w	r3, r3, #23
 8003da4:	f043 0202 	orr.w	r2, r3, #2
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	609a      	str	r2, [r3, #8]
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bc80      	pop	{r7}
 8003db4:	4770      	bx	lr

08003db6 <LL_ADC_IsEnabled>:
{
 8003db6:	b480      	push	{r7}
 8003db8:	b083      	sub	sp, #12
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d101      	bne.n	8003dce <LL_ADC_IsEnabled+0x18>
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e000      	b.n	8003dd0 <LL_ADC_IsEnabled+0x1a>
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bc80      	pop	{r7}
 8003dd8:	4770      	bx	lr

08003dda <LL_ADC_StartCalibration>:
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b083      	sub	sp, #12
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003dea:	f023 0317 	bic.w	r3, r3, #23
 8003dee:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	609a      	str	r2, [r3, #8]
}
 8003df6:	bf00      	nop
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bc80      	pop	{r7}
 8003dfe:	4770      	bx	lr

08003e00 <LL_ADC_IsCalibrationOnGoing>:
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e14:	d101      	bne.n	8003e1a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003e16:	2301      	movs	r3, #1
 8003e18:	e000      	b.n	8003e1c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bc80      	pop	{r7}
 8003e24:	4770      	bx	lr

08003e26 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b088      	sub	sp, #32
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8003e32:	2300      	movs	r3, #0
 8003e34:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d101      	bne.n	8003e44 <HAL_ADCEx_Calibration_Start+0x1e>
 8003e40:	2302      	movs	r3, #2
 8003e42:	e0b9      	b.n	8003fb8 <HAL_ADCEx_Calibration_Start+0x192>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f7ff ff0b 	bl	8003c68 <ADC_Disable>
 8003e52:	4603      	mov	r3, r0
 8003e54:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7ff ffab 	bl	8003db6 <LL_ADC_IsEnabled>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f040 809d 	bne.w	8003fa2 <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e6c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003e70:	f043 0202 	orr.w	r2, r3, #2
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68da      	ldr	r2, [r3, #12]
 8003e7e:	f248 0303 	movw	r3, #32771	; 0x8003
 8003e82:	4013      	ands	r3, r2
 8003e84:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6812      	ldr	r2, [r2, #0]
 8003e90:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003e94:	f023 0303 	bic.w	r3, r3, #3
 8003e98:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	61fb      	str	r3, [r7, #28]
 8003e9e:	e02e      	b.n	8003efe <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f7ff ff98 	bl	8003dda <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003eaa:	e014      	b.n	8003ed6 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	3301      	adds	r3, #1
 8003eb0:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8003eb8:	d30d      	bcc.n	8003ed6 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ebe:	f023 0312 	bic.w	r3, r3, #18
 8003ec2:	f043 0210 	orr.w	r2, r3, #16
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e070      	b.n	8003fb8 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7ff ff90 	bl	8003e00 <LL_ADC_IsCalibrationOnGoing>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1e2      	bne.n	8003eac <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7ff ff2f 	bl	8003d4e <LL_ADC_GetCalibrationFactor>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	3301      	adds	r3, #1
 8003efc:	61fb      	str	r3, [r7, #28]
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	2b07      	cmp	r3, #7
 8003f02:	d9cd      	bls.n	8003ea0 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f0c:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7ff ff29 	bl	8003d6a <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	69b9      	ldr	r1, [r7, #24]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7ff ff01 	bl	8003d26 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7ff ff31 	bl	8003d90 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003f2e:	f7fe f969 	bl	8002204 <HAL_GetTick>
 8003f32:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003f34:	e01c      	b.n	8003f70 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003f36:	f7fe f965 	bl	8002204 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d915      	bls.n	8003f70 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7ff ff34 	bl	8003db6 <LL_ADC_IsEnabled>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00d      	beq.n	8003f70 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f58:	f043 0210 	orr.w	r2, r3, #16
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f64:	f043 0201 	orr.w	r2, r3, #1
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e023      	b.n	8003fb8 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7ff ff1e 	bl	8003db6 <LL_ADC_IsEnabled>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1da      	bne.n	8003f36 <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68d9      	ldr	r1, [r3, #12]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f94:	f023 0303 	bic.w	r3, r3, #3
 8003f98:	f043 0201 	orr.w	r2, r3, #1
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	659a      	str	r2, [r3, #88]	; 0x58
 8003fa0:	e005      	b.n	8003fae <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa6:	f043 0210 	orr.w	r2, r3, #16
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003fb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3720      	adds	r7, #32
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b085      	sub	sp, #20
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f003 0307 	and.w	r3, r3, #7
 8003fce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fd0:	4b0c      	ldr	r3, [pc, #48]	; (8004004 <__NVIC_SetPriorityGrouping+0x44>)
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fd6:	68ba      	ldr	r2, [r7, #8]
 8003fd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003fdc:	4013      	ands	r3, r2
 8003fde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003fe8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003fec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ff0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ff2:	4a04      	ldr	r2, [pc, #16]	; (8004004 <__NVIC_SetPriorityGrouping+0x44>)
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	60d3      	str	r3, [r2, #12]
}
 8003ff8:	bf00      	nop
 8003ffa:	3714      	adds	r7, #20
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bc80      	pop	{r7}
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	e000ed00 	.word	0xe000ed00

08004008 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004008:	b480      	push	{r7}
 800400a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800400c:	4b04      	ldr	r3, [pc, #16]	; (8004020 <__NVIC_GetPriorityGrouping+0x18>)
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	0a1b      	lsrs	r3, r3, #8
 8004012:	f003 0307 	and.w	r3, r3, #7
}
 8004016:	4618      	mov	r0, r3
 8004018:	46bd      	mov	sp, r7
 800401a:	bc80      	pop	{r7}
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	e000ed00 	.word	0xe000ed00

08004024 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	4603      	mov	r3, r0
 800402c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800402e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004032:	2b00      	cmp	r3, #0
 8004034:	db0b      	blt.n	800404e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004036:	79fb      	ldrb	r3, [r7, #7]
 8004038:	f003 021f 	and.w	r2, r3, #31
 800403c:	4906      	ldr	r1, [pc, #24]	; (8004058 <__NVIC_EnableIRQ+0x34>)
 800403e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004042:	095b      	lsrs	r3, r3, #5
 8004044:	2001      	movs	r0, #1
 8004046:	fa00 f202 	lsl.w	r2, r0, r2
 800404a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800404e:	bf00      	nop
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	bc80      	pop	{r7}
 8004056:	4770      	bx	lr
 8004058:	e000e100 	.word	0xe000e100

0800405c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	4603      	mov	r3, r0
 8004064:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800406a:	2b00      	cmp	r3, #0
 800406c:	db12      	blt.n	8004094 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800406e:	79fb      	ldrb	r3, [r7, #7]
 8004070:	f003 021f 	and.w	r2, r3, #31
 8004074:	490a      	ldr	r1, [pc, #40]	; (80040a0 <__NVIC_DisableIRQ+0x44>)
 8004076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800407a:	095b      	lsrs	r3, r3, #5
 800407c:	2001      	movs	r0, #1
 800407e:	fa00 f202 	lsl.w	r2, r0, r2
 8004082:	3320      	adds	r3, #32
 8004084:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004088:	f3bf 8f4f 	dsb	sy
}
 800408c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800408e:	f3bf 8f6f 	isb	sy
}
 8004092:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	bc80      	pop	{r7}
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	e000e100 	.word	0xe000e100

080040a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	4603      	mov	r3, r0
 80040ac:	6039      	str	r1, [r7, #0]
 80040ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	db0a      	blt.n	80040ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	b2da      	uxtb	r2, r3
 80040bc:	490c      	ldr	r1, [pc, #48]	; (80040f0 <__NVIC_SetPriority+0x4c>)
 80040be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040c2:	0112      	lsls	r2, r2, #4
 80040c4:	b2d2      	uxtb	r2, r2
 80040c6:	440b      	add	r3, r1
 80040c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040cc:	e00a      	b.n	80040e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	b2da      	uxtb	r2, r3
 80040d2:	4908      	ldr	r1, [pc, #32]	; (80040f4 <__NVIC_SetPriority+0x50>)
 80040d4:	79fb      	ldrb	r3, [r7, #7]
 80040d6:	f003 030f 	and.w	r3, r3, #15
 80040da:	3b04      	subs	r3, #4
 80040dc:	0112      	lsls	r2, r2, #4
 80040de:	b2d2      	uxtb	r2, r2
 80040e0:	440b      	add	r3, r1
 80040e2:	761a      	strb	r2, [r3, #24]
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bc80      	pop	{r7}
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	e000e100 	.word	0xe000e100
 80040f4:	e000ed00 	.word	0xe000ed00

080040f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b089      	sub	sp, #36	; 0x24
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f003 0307 	and.w	r3, r3, #7
 800410a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	f1c3 0307 	rsb	r3, r3, #7
 8004112:	2b04      	cmp	r3, #4
 8004114:	bf28      	it	cs
 8004116:	2304      	movcs	r3, #4
 8004118:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	3304      	adds	r3, #4
 800411e:	2b06      	cmp	r3, #6
 8004120:	d902      	bls.n	8004128 <NVIC_EncodePriority+0x30>
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	3b03      	subs	r3, #3
 8004126:	e000      	b.n	800412a <NVIC_EncodePriority+0x32>
 8004128:	2300      	movs	r3, #0
 800412a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800412c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	fa02 f303 	lsl.w	r3, r2, r3
 8004136:	43da      	mvns	r2, r3
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	401a      	ands	r2, r3
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004140:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	fa01 f303 	lsl.w	r3, r1, r3
 800414a:	43d9      	mvns	r1, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004150:	4313      	orrs	r3, r2
         );
}
 8004152:	4618      	mov	r0, r3
 8004154:	3724      	adds	r7, #36	; 0x24
 8004156:	46bd      	mov	sp, r7
 8004158:	bc80      	pop	{r7}
 800415a:	4770      	bx	lr

0800415c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f7ff ff2b 	bl	8003fc0 <__NVIC_SetPriorityGrouping>
}
 800416a:	bf00      	nop
 800416c:	3708      	adds	r7, #8
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004172:	b580      	push	{r7, lr}
 8004174:	b086      	sub	sp, #24
 8004176:	af00      	add	r7, sp, #0
 8004178:	4603      	mov	r3, r0
 800417a:	60b9      	str	r1, [r7, #8]
 800417c:	607a      	str	r2, [r7, #4]
 800417e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004180:	f7ff ff42 	bl	8004008 <__NVIC_GetPriorityGrouping>
 8004184:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	68b9      	ldr	r1, [r7, #8]
 800418a:	6978      	ldr	r0, [r7, #20]
 800418c:	f7ff ffb4 	bl	80040f8 <NVIC_EncodePriority>
 8004190:	4602      	mov	r2, r0
 8004192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004196:	4611      	mov	r1, r2
 8004198:	4618      	mov	r0, r3
 800419a:	f7ff ff83 	bl	80040a4 <__NVIC_SetPriority>
}
 800419e:	bf00      	nop
 80041a0:	3718      	adds	r7, #24
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041a6:	b580      	push	{r7, lr}
 80041a8:	b082      	sub	sp, #8
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	4603      	mov	r3, r0
 80041ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7ff ff35 	bl	8004024 <__NVIC_EnableIRQ>
}
 80041ba:	bf00      	nop
 80041bc:	3708      	adds	r7, #8
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b082      	sub	sp, #8
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	4603      	mov	r3, r0
 80041ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80041cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7ff ff43 	bl	800405c <__NVIC_DisableIRQ>
}
 80041d6:	bf00      	nop
 80041d8:	3708      	adds	r7, #8
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
	...

080041e0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e08e      	b.n	8004310 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	461a      	mov	r2, r3
 80041f8:	4b47      	ldr	r3, [pc, #284]	; (8004318 <HAL_DMA_Init+0x138>)
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d80f      	bhi.n	800421e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	461a      	mov	r2, r3
 8004204:	4b45      	ldr	r3, [pc, #276]	; (800431c <HAL_DMA_Init+0x13c>)
 8004206:	4413      	add	r3, r2
 8004208:	4a45      	ldr	r2, [pc, #276]	; (8004320 <HAL_DMA_Init+0x140>)
 800420a:	fba2 2303 	umull	r2, r3, r2, r3
 800420e:	091b      	lsrs	r3, r3, #4
 8004210:	009a      	lsls	r2, r3, #2
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a42      	ldr	r2, [pc, #264]	; (8004324 <HAL_DMA_Init+0x144>)
 800421a:	641a      	str	r2, [r3, #64]	; 0x40
 800421c:	e00e      	b.n	800423c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	461a      	mov	r2, r3
 8004224:	4b40      	ldr	r3, [pc, #256]	; (8004328 <HAL_DMA_Init+0x148>)
 8004226:	4413      	add	r3, r2
 8004228:	4a3d      	ldr	r2, [pc, #244]	; (8004320 <HAL_DMA_Init+0x140>)
 800422a:	fba2 2303 	umull	r2, r3, r2, r3
 800422e:	091b      	lsrs	r3, r3, #4
 8004230:	009a      	lsls	r2, r3, #2
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a3c      	ldr	r2, [pc, #240]	; (800432c <HAL_DMA_Init+0x14c>)
 800423a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2202      	movs	r2, #2
 8004240:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	6812      	ldr	r2, [r2, #0]
 800424e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004256:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	6819      	ldr	r1, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	689a      	ldr	r2, [r3, #8]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	431a      	orrs	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	431a      	orrs	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	431a      	orrs	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	431a      	orrs	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	431a      	orrs	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a1b      	ldr	r3, [r3, #32]
 8004284:	431a      	orrs	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	430a      	orrs	r2, r1
 800428c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 fb24 	bl	80048dc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800429c:	d102      	bne.n	80042a4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685a      	ldr	r2, [r3, #4]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80042b0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80042ba:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d010      	beq.n	80042e6 <HAL_DMA_Init+0x106>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	2b04      	cmp	r3, #4
 80042ca:	d80c      	bhi.n	80042e6 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 fb4d 	bl	800496c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d6:	2200      	movs	r2, #0
 80042d8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80042e2:	605a      	str	r2, [r3, #4]
 80042e4:	e008      	b.n	80042f8 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2201      	movs	r2, #1
 8004302:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	3708      	adds	r7, #8
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	40020407 	.word	0x40020407
 800431c:	bffdfff8 	.word	0xbffdfff8
 8004320:	cccccccd 	.word	0xcccccccd
 8004324:	40020000 	.word	0x40020000
 8004328:	bffdfbf8 	.word	0xbffdfbf8
 800432c:	40020400 	.word	0x40020400

08004330 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d101      	bne.n	8004342 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e07b      	b.n	800443a <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 0201 	bic.w	r2, r2, #1
 8004350:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	461a      	mov	r2, r3
 8004358:	4b3a      	ldr	r3, [pc, #232]	; (8004444 <HAL_DMA_DeInit+0x114>)
 800435a:	429a      	cmp	r2, r3
 800435c:	d80f      	bhi.n	800437e <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	461a      	mov	r2, r3
 8004364:	4b38      	ldr	r3, [pc, #224]	; (8004448 <HAL_DMA_DeInit+0x118>)
 8004366:	4413      	add	r3, r2
 8004368:	4a38      	ldr	r2, [pc, #224]	; (800444c <HAL_DMA_DeInit+0x11c>)
 800436a:	fba2 2303 	umull	r2, r3, r2, r3
 800436e:	091b      	lsrs	r3, r3, #4
 8004370:	009a      	lsls	r2, r3, #2
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a35      	ldr	r2, [pc, #212]	; (8004450 <HAL_DMA_DeInit+0x120>)
 800437a:	641a      	str	r2, [r3, #64]	; 0x40
 800437c:	e00e      	b.n	800439c <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	461a      	mov	r2, r3
 8004384:	4b33      	ldr	r3, [pc, #204]	; (8004454 <HAL_DMA_DeInit+0x124>)
 8004386:	4413      	add	r3, r2
 8004388:	4a30      	ldr	r2, [pc, #192]	; (800444c <HAL_DMA_DeInit+0x11c>)
 800438a:	fba2 2303 	umull	r2, r3, r2, r3
 800438e:	091b      	lsrs	r3, r3, #4
 8004390:	009a      	lsls	r2, r3, #2
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a2f      	ldr	r2, [pc, #188]	; (8004458 <HAL_DMA_DeInit+0x128>)
 800439a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2200      	movs	r2, #0
 80043a2:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a8:	f003 021c 	and.w	r2, r3, #28
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b0:	2101      	movs	r1, #1
 80043b2:	fa01 f202 	lsl.w	r2, r1, r2
 80043b6:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f000 fa8f 	bl	80048dc <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043c2:	2200      	movs	r2, #0
 80043c4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80043ce:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00f      	beq.n	80043f8 <HAL_DMA_DeInit+0xc8>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	2b04      	cmp	r3, #4
 80043de:	d80b      	bhi.n	80043f8 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 fac3 	bl	800496c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ea:	2200      	movs	r2, #0
 80043ec:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80043f6:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3708      	adds	r7, #8
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	40020407 	.word	0x40020407
 8004448:	bffdfff8 	.word	0xbffdfff8
 800444c:	cccccccd 	.word	0xcccccccd
 8004450:	40020000 	.word	0x40020000
 8004454:	bffdfbf8 	.word	0xbffdfbf8
 8004458:	40020400 	.word	0x40020400

0800445c <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b086      	sub	sp, #24
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	607a      	str	r2, [r7, #4]
 8004468:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800446a:	2300      	movs	r3, #0
 800446c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004474:	2b01      	cmp	r3, #1
 8004476:	d101      	bne.n	800447c <HAL_DMA_Start_IT+0x20>
 8004478:	2302      	movs	r3, #2
 800447a:	e069      	b.n	8004550 <HAL_DMA_Start_IT+0xf4>
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800448a:	b2db      	uxtb	r3, r3
 800448c:	2b01      	cmp	r3, #1
 800448e:	d155      	bne.n	800453c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2202      	movs	r2, #2
 8004494:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f022 0201 	bic.w	r2, r2, #1
 80044ac:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	68b9      	ldr	r1, [r7, #8]
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f000 f9d3 	bl	8004860 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d008      	beq.n	80044d4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f042 020e 	orr.w	r2, r2, #14
 80044d0:	601a      	str	r2, [r3, #0]
 80044d2:	e00f      	b.n	80044f4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f022 0204 	bic.w	r2, r2, #4
 80044e2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f042 020a 	orr.w	r2, r2, #10
 80044f2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d007      	beq.n	8004512 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800450c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004510:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004516:	2b00      	cmp	r3, #0
 8004518:	d007      	beq.n	800452a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004524:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004528:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f042 0201 	orr.w	r2, r2, #1
 8004538:	601a      	str	r2, [r3, #0]
 800453a:	e008      	b.n	800454e <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2280      	movs	r2, #128	; 0x80
 8004540:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800454e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004550:	4618      	mov	r0, r3
 8004552:	3718      	adds	r7, #24
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d101      	bne.n	800456a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e04f      	b.n	800460a <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b02      	cmp	r3, #2
 8004574:	d008      	beq.n	8004588 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2204      	movs	r2, #4
 800457a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e040      	b.n	800460a <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f022 020e 	bic.w	r2, r2, #14
 8004596:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f022 0201 	bic.w	r2, r2, #1
 80045b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045bc:	f003 021c 	and.w	r2, r3, #28
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c4:	2101      	movs	r1, #1
 80045c6:	fa01 f202 	lsl.w	r2, r1, r2
 80045ca:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80045d4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00c      	beq.n	80045f8 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045ec:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80045f6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	370c      	adds	r7, #12
 800460e:	46bd      	mov	sp, r7
 8004610:	bc80      	pop	{r7}
 8004612:	4770      	bx	lr

08004614 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800461c:	2300      	movs	r3, #0
 800461e:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004626:	b2db      	uxtb	r3, r3
 8004628:	2b02      	cmp	r3, #2
 800462a:	d005      	beq.n	8004638 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2204      	movs	r2, #4
 8004630:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	73fb      	strb	r3, [r7, #15]
 8004636:	e047      	b.n	80046c8 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f022 020e 	bic.w	r2, r2, #14
 8004646:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f022 0201 	bic.w	r2, r2, #1
 8004656:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004662:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004666:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800466c:	f003 021c 	and.w	r2, r3, #28
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004674:	2101      	movs	r1, #1
 8004676:	fa01 f202 	lsl.w	r2, r1, r2
 800467a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004684:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00c      	beq.n	80046a8 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004698:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800469c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80046a6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d003      	beq.n	80046c8 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	4798      	blx	r3
    }
  }
  return status;
 80046c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
	...

080046d4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f0:	f003 031c 	and.w	r3, r3, #28
 80046f4:	2204      	movs	r2, #4
 80046f6:	409a      	lsls	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	4013      	ands	r3, r2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d027      	beq.n	8004750 <HAL_DMA_IRQHandler+0x7c>
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	f003 0304 	and.w	r3, r3, #4
 8004706:	2b00      	cmp	r3, #0
 8004708:	d022      	beq.n	8004750 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0320 	and.w	r3, r3, #32
 8004714:	2b00      	cmp	r3, #0
 8004716:	d107      	bne.n	8004728 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f022 0204 	bic.w	r2, r2, #4
 8004726:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800472c:	f003 021c 	and.w	r2, r3, #28
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004734:	2104      	movs	r1, #4
 8004736:	fa01 f202 	lsl.w	r2, r1, r2
 800473a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004740:	2b00      	cmp	r3, #0
 8004742:	f000 8081 	beq.w	8004848 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800474e:	e07b      	b.n	8004848 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004754:	f003 031c 	and.w	r3, r3, #28
 8004758:	2202      	movs	r2, #2
 800475a:	409a      	lsls	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	4013      	ands	r3, r2
 8004760:	2b00      	cmp	r3, #0
 8004762:	d03d      	beq.n	80047e0 <HAL_DMA_IRQHandler+0x10c>
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d038      	beq.n	80047e0 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0320 	and.w	r3, r3, #32
 8004778:	2b00      	cmp	r3, #0
 800477a:	d10b      	bne.n	8004794 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f022 020a 	bic.w	r2, r2, #10
 800478a:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	461a      	mov	r2, r3
 800479a:	4b2e      	ldr	r3, [pc, #184]	; (8004854 <HAL_DMA_IRQHandler+0x180>)
 800479c:	429a      	cmp	r2, r3
 800479e:	d909      	bls.n	80047b4 <HAL_DMA_IRQHandler+0xe0>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a4:	f003 031c 	and.w	r3, r3, #28
 80047a8:	4a2b      	ldr	r2, [pc, #172]	; (8004858 <HAL_DMA_IRQHandler+0x184>)
 80047aa:	2102      	movs	r1, #2
 80047ac:	fa01 f303 	lsl.w	r3, r1, r3
 80047b0:	6053      	str	r3, [r2, #4]
 80047b2:	e008      	b.n	80047c6 <HAL_DMA_IRQHandler+0xf2>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b8:	f003 031c 	and.w	r3, r3, #28
 80047bc:	4a27      	ldr	r2, [pc, #156]	; (800485c <HAL_DMA_IRQHandler+0x188>)
 80047be:	2102      	movs	r1, #2
 80047c0:	fa01 f303 	lsl.w	r3, r1, r3
 80047c4:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d038      	beq.n	8004848 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80047de:	e033      	b.n	8004848 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e4:	f003 031c 	and.w	r3, r3, #28
 80047e8:	2208      	movs	r2, #8
 80047ea:	409a      	lsls	r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	4013      	ands	r3, r2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d02a      	beq.n	800484a <HAL_DMA_IRQHandler+0x176>
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	f003 0308 	and.w	r3, r3, #8
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d025      	beq.n	800484a <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f022 020e 	bic.w	r2, r2, #14
 800480c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004812:	f003 021c 	and.w	r2, r3, #28
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481a:	2101      	movs	r1, #1
 800481c:	fa01 f202 	lsl.w	r2, r1, r2
 8004820:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2201      	movs	r2, #1
 8004826:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800483c:	2b00      	cmp	r3, #0
 800483e:	d004      	beq.n	800484a <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004848:	bf00      	nop
 800484a:	bf00      	nop
}
 800484c:	3710      	adds	r7, #16
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	40020080 	.word	0x40020080
 8004858:	40020400 	.word	0x40020400
 800485c:	40020000 	.word	0x40020000

08004860 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]
 800486c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004876:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800487c:	2b00      	cmp	r3, #0
 800487e:	d004      	beq.n	800488a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004888:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800488e:	f003 021c 	and.w	r2, r3, #28
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004896:	2101      	movs	r1, #1
 8004898:	fa01 f202 	lsl.w	r2, r1, r2
 800489c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	683a      	ldr	r2, [r7, #0]
 80048a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	2b10      	cmp	r3, #16
 80048ac:	d108      	bne.n	80048c0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68ba      	ldr	r2, [r7, #8]
 80048bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80048be:	e007      	b.n	80048d0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68ba      	ldr	r2, [r7, #8]
 80048c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	60da      	str	r2, [r3, #12]
}
 80048d0:	bf00      	nop
 80048d2:	3714      	adds	r7, #20
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bc80      	pop	{r7}
 80048d8:	4770      	bx	lr
	...

080048dc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	461a      	mov	r2, r3
 80048ea:	4b1c      	ldr	r3, [pc, #112]	; (800495c <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d813      	bhi.n	8004918 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f4:	089b      	lsrs	r3, r3, #2
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80048fc:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	b2db      	uxtb	r3, r3
 800490a:	3b08      	subs	r3, #8
 800490c:	4a14      	ldr	r2, [pc, #80]	; (8004960 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800490e:	fba2 2303 	umull	r2, r3, r2, r3
 8004912:	091b      	lsrs	r3, r3, #4
 8004914:	60fb      	str	r3, [r7, #12]
 8004916:	e011      	b.n	800493c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800491c:	089b      	lsrs	r3, r3, #2
 800491e:	009a      	lsls	r2, r3, #2
 8004920:	4b10      	ldr	r3, [pc, #64]	; (8004964 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8004922:	4413      	add	r3, r2
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	b2db      	uxtb	r3, r3
 800492e:	3b08      	subs	r3, #8
 8004930:	4a0b      	ldr	r2, [pc, #44]	; (8004960 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004932:	fba2 2303 	umull	r2, r3, r2, r3
 8004936:	091b      	lsrs	r3, r3, #4
 8004938:	3307      	adds	r3, #7
 800493a:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a0a      	ldr	r2, [pc, #40]	; (8004968 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8004940:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f003 031f 	and.w	r3, r3, #31
 8004948:	2201      	movs	r2, #1
 800494a:	409a      	lsls	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004950:	bf00      	nop
 8004952:	3714      	adds	r7, #20
 8004954:	46bd      	mov	sp, r7
 8004956:	bc80      	pop	{r7}
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	40020407 	.word	0x40020407
 8004960:	cccccccd 	.word	0xcccccccd
 8004964:	4002081c 	.word	0x4002081c
 8004968:	40020880 	.word	0x40020880

0800496c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800496c:	b480      	push	{r7}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800497c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	4b0a      	ldr	r3, [pc, #40]	; (80049ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004982:	4413      	add	r3, r2
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	461a      	mov	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a08      	ldr	r2, [pc, #32]	; (80049b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004990:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	3b01      	subs	r3, #1
 8004996:	f003 0303 	and.w	r3, r3, #3
 800499a:	2201      	movs	r2, #1
 800499c:	409a      	lsls	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80049a2:	bf00      	nop
 80049a4:	3714      	adds	r7, #20
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bc80      	pop	{r7}
 80049aa:	4770      	bx	lr
 80049ac:	1000823f 	.word	0x1000823f
 80049b0:	40020940 	.word	0x40020940

080049b4 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b086      	sub	sp, #24
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80049c2:	4b1c      	ldr	r3, [pc, #112]	; (8004a34 <HAL_FLASH_Program+0x80>)
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d101      	bne.n	80049ce <HAL_FLASH_Program+0x1a>
 80049ca:	2302      	movs	r3, #2
 80049cc:	e02d      	b.n	8004a2a <HAL_FLASH_Program+0x76>
 80049ce:	4b19      	ldr	r3, [pc, #100]	; (8004a34 <HAL_FLASH_Program+0x80>)
 80049d0:	2201      	movs	r2, #1
 80049d2:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80049d4:	4b17      	ldr	r3, [pc, #92]	; (8004a34 <HAL_FLASH_Program+0x80>)
 80049d6:	2200      	movs	r2, #0
 80049d8:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80049da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80049de:	f000 f869 	bl	8004ab4 <FLASH_WaitForLastOperation>
 80049e2:	4603      	mov	r3, r0
 80049e4:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80049e6:	7dfb      	ldrb	r3, [r7, #23]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d11a      	bne.n	8004a22 <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d105      	bne.n	80049fe <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80049f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049f6:	68b8      	ldr	r0, [r7, #8]
 80049f8:	f000 f8be 	bl	8004b78 <FLASH_Program_DoubleWord>
 80049fc:	e004      	b.n	8004a08 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	4619      	mov	r1, r3
 8004a02:	68b8      	ldr	r0, [r7, #8]
 8004a04:	f000 f8de 	bl	8004bc4 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004a08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004a0c:	f000 f852 	bl	8004ab4 <FLASH_WaitForLastOperation>
 8004a10:	4603      	mov	r3, r0
 8004a12:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8004a14:	4b08      	ldr	r3, [pc, #32]	; (8004a38 <HAL_FLASH_Program+0x84>)
 8004a16:	695a      	ldr	r2, [r3, #20]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	43db      	mvns	r3, r3
 8004a1c:	4906      	ldr	r1, [pc, #24]	; (8004a38 <HAL_FLASH_Program+0x84>)
 8004a1e:	4013      	ands	r3, r2
 8004a20:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004a22:	4b04      	ldr	r3, [pc, #16]	; (8004a34 <HAL_FLASH_Program+0x80>)
 8004a24:	2200      	movs	r2, #0
 8004a26:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8004a28:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3718      	adds	r7, #24
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	200003d0 	.word	0x200003d0
 8004a38:	58004000 	.word	0x58004000

08004a3c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004a42:	2300      	movs	r3, #0
 8004a44:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004a46:	4b0b      	ldr	r3, [pc, #44]	; (8004a74 <HAL_FLASH_Unlock+0x38>)
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	da0b      	bge.n	8004a66 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004a4e:	4b09      	ldr	r3, [pc, #36]	; (8004a74 <HAL_FLASH_Unlock+0x38>)
 8004a50:	4a09      	ldr	r2, [pc, #36]	; (8004a78 <HAL_FLASH_Unlock+0x3c>)
 8004a52:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004a54:	4b07      	ldr	r3, [pc, #28]	; (8004a74 <HAL_FLASH_Unlock+0x38>)
 8004a56:	4a09      	ldr	r2, [pc, #36]	; (8004a7c <HAL_FLASH_Unlock+0x40>)
 8004a58:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004a5a:	4b06      	ldr	r3, [pc, #24]	; (8004a74 <HAL_FLASH_Unlock+0x38>)
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	da01      	bge.n	8004a66 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004a66:	79fb      	ldrb	r3, [r7, #7]
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bc80      	pop	{r7}
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	58004000 	.word	0x58004000
 8004a78:	45670123 	.word	0x45670123
 8004a7c:	cdef89ab 	.word	0xcdef89ab

08004a80 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004a86:	2300      	movs	r3, #0
 8004a88:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004a8a:	4b09      	ldr	r3, [pc, #36]	; (8004ab0 <HAL_FLASH_Lock+0x30>)
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	4a08      	ldr	r2, [pc, #32]	; (8004ab0 <HAL_FLASH_Lock+0x30>)
 8004a90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a94:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8004a96:	4b06      	ldr	r3, [pc, #24]	; (8004ab0 <HAL_FLASH_Lock+0x30>)
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	db01      	blt.n	8004aa2 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8004aa2:	79fb      	ldrb	r3, [r7, #7]
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bc80      	pop	{r7}
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	58004000 	.word	0x58004000

08004ab4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8004abc:	f7fd fba2 	bl	8002204 <HAL_GetTick>
 8004ac0:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004ac2:	e009      	b.n	8004ad8 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004ac4:	f7fd fb9e 	bl	8002204 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d801      	bhi.n	8004ad8 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e047      	b.n	8004b68 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004ad8:	4b25      	ldr	r3, [pc, #148]	; (8004b70 <FLASH_WaitForLastOperation+0xbc>)
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ae4:	d0ee      	beq.n	8004ac4 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 8004ae6:	4b22      	ldr	r3, [pc, #136]	; (8004b70 <FLASH_WaitForLastOperation+0xbc>)
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	f003 0301 	and.w	r3, r3, #1
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d002      	beq.n	8004afc <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004af6:	4b1e      	ldr	r3, [pc, #120]	; (8004b70 <FLASH_WaitForLastOperation+0xbc>)
 8004af8:	2201      	movs	r2, #1
 8004afa:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8004afc:	68ba      	ldr	r2, [r7, #8]
 8004afe:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8004b02:	4013      	ands	r3, r2
 8004b04:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d007      	beq.n	8004b20 <FLASH_WaitForLastOperation+0x6c>
 8004b10:	4b17      	ldr	r3, [pc, #92]	; (8004b70 <FLASH_WaitForLastOperation+0xbc>)
 8004b12:	699a      	ldr	r2, [r3, #24]
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004b1a:	4915      	ldr	r1, [pc, #84]	; (8004b70 <FLASH_WaitForLastOperation+0xbc>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	618b      	str	r3, [r1, #24]
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d004      	beq.n	8004b34 <FLASH_WaitForLastOperation+0x80>
 8004b2a:	4a11      	ldr	r2, [pc, #68]	; (8004b70 <FLASH_WaitForLastOperation+0xbc>)
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004b32:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00e      	beq.n	8004b58 <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8004b3a:	4a0e      	ldr	r2, [pc, #56]	; (8004b74 <FLASH_WaitForLastOperation+0xc0>)
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e011      	b.n	8004b68 <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004b44:	f7fd fb5e 	bl	8002204 <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d801      	bhi.n	8004b58 <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e007      	b.n	8004b68 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8004b58:	4b05      	ldr	r3, [pc, #20]	; (8004b70 <FLASH_WaitForLastOperation+0xbc>)
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b60:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b64:	d0ee      	beq.n	8004b44 <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3710      	adds	r7, #16
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	58004000 	.word	0x58004000
 8004b74:	200003d0 	.word	0x200003d0

08004b78 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004b84:	4b0e      	ldr	r3, [pc, #56]	; (8004bc0 <FLASH_Program_DoubleWord+0x48>)
 8004b86:	695b      	ldr	r3, [r3, #20]
 8004b88:	4a0d      	ldr	r2, [pc, #52]	; (8004bc0 <FLASH_Program_DoubleWord+0x48>)
 8004b8a:	f043 0301 	orr.w	r3, r3, #1
 8004b8e:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	683a      	ldr	r2, [r7, #0]
 8004b94:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004b96:	f3bf 8f6f 	isb	sy
}
 8004b9a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8004b9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ba0:	f04f 0200 	mov.w	r2, #0
 8004ba4:	f04f 0300 	mov.w	r3, #0
 8004ba8:	000a      	movs	r2, r1
 8004baa:	2300      	movs	r3, #0
 8004bac:	68f9      	ldr	r1, [r7, #12]
 8004bae:	3104      	adds	r1, #4
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	600b      	str	r3, [r1, #0]
}
 8004bb4:	bf00      	nop
 8004bb6:	3714      	adds	r7, #20
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bc80      	pop	{r7}
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	58004000 	.word	0x58004000

08004bc4 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b089      	sub	sp, #36	; 0x24
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8004bce:	2340      	movs	r3, #64	; 0x40
 8004bd0:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8004bda:	4b18      	ldr	r3, [pc, #96]	; (8004c3c <FLASH_Program_Fast+0x78>)
 8004bdc:	695b      	ldr	r3, [r3, #20]
 8004bde:	4a17      	ldr	r2, [pc, #92]	; (8004c3c <FLASH_Program_Fast+0x78>)
 8004be0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004be4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004be6:	f3ef 8310 	mrs	r3, PRIMASK
 8004bea:	60fb      	str	r3, [r7, #12]
  return(result);
 8004bec:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 8004bee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004bf0:	b672      	cpsid	i
}
 8004bf2:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	3304      	adds	r3, #4
 8004c00:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	3304      	adds	r3, #4
 8004c06:	617b      	str	r3, [r7, #20]
    row_index--;
 8004c08:	7ffb      	ldrb	r3, [r7, #31]
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8004c0e:	7ffb      	ldrb	r3, [r7, #31]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d1ef      	bne.n	8004bf4 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8004c14:	bf00      	nop
 8004c16:	4b09      	ldr	r3, [pc, #36]	; (8004c3c <FLASH_Program_Fast+0x78>)
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c22:	d0f8      	beq.n	8004c16 <FLASH_Program_Fast+0x52>
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	f383 8810 	msr	PRIMASK, r3
}
 8004c2e:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8004c30:	bf00      	nop
 8004c32:	3724      	adds	r7, #36	; 0x24
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bc80      	pop	{r7}
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	58004000 	.word	0x58004000

08004c40 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004c4a:	4b28      	ldr	r3, [pc, #160]	; (8004cec <HAL_FLASHEx_Erase+0xac>)
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d101      	bne.n	8004c56 <HAL_FLASHEx_Erase+0x16>
 8004c52:	2302      	movs	r3, #2
 8004c54:	e046      	b.n	8004ce4 <HAL_FLASHEx_Erase+0xa4>
 8004c56:	4b25      	ldr	r3, [pc, #148]	; (8004cec <HAL_FLASHEx_Erase+0xac>)
 8004c58:	2201      	movs	r2, #1
 8004c5a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004c5c:	4b23      	ldr	r3, [pc, #140]	; (8004cec <HAL_FLASHEx_Erase+0xac>)
 8004c5e:	2200      	movs	r2, #0
 8004c60:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004c62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c66:	f7ff ff25 	bl	8004ab4 <FLASH_WaitForLastOperation>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004c6e:	7bfb      	ldrb	r3, [r7, #15]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d133      	bne.n	8004cdc <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2b04      	cmp	r3, #4
 8004c7a:	d108      	bne.n	8004c8e <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8004c7c:	f000 f838 	bl	8004cf0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004c80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c84:	f7ff ff16 	bl	8004ab4 <FLASH_WaitForLastOperation>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	73fb      	strb	r3, [r7, #15]
 8004c8c:	e024      	b.n	8004cd8 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c94:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	60bb      	str	r3, [r7, #8]
 8004c9c:	e012      	b.n	8004cc4 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8004c9e:	68b8      	ldr	r0, [r7, #8]
 8004ca0:	f000 f836 	bl	8004d10 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004ca4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004ca8:	f7ff ff04 	bl	8004ab4 <FLASH_WaitForLastOperation>
 8004cac:	4603      	mov	r3, r0
 8004cae:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8004cb0:	7bfb      	ldrb	r3, [r7, #15]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d003      	beq.n	8004cbe <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	68ba      	ldr	r2, [r7, #8]
 8004cba:	601a      	str	r2, [r3, #0]
          break;
 8004cbc:	e00a      	b.n	8004cd4 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	60bb      	str	r3, [r7, #8]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685a      	ldr	r2, [r3, #4]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	4413      	add	r3, r2
 8004cce:	68ba      	ldr	r2, [r7, #8]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d3e4      	bcc.n	8004c9e <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8004cd4:	f000 f878 	bl	8004dc8 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004cd8:	f000 f832 	bl	8004d40 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004cdc:	4b03      	ldr	r3, [pc, #12]	; (8004cec <HAL_FLASHEx_Erase+0xac>)
 8004cde:	2200      	movs	r2, #0
 8004ce0:	701a      	strb	r2, [r3, #0]

  return status;
 8004ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3710      	adds	r7, #16
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	200003d0 	.word	0x200003d0

08004cf0 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8004cf4:	4b05      	ldr	r3, [pc, #20]	; (8004d0c <FLASH_MassErase+0x1c>)
 8004cf6:	695b      	ldr	r3, [r3, #20]
 8004cf8:	4a04      	ldr	r2, [pc, #16]	; (8004d0c <FLASH_MassErase+0x1c>)
 8004cfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cfe:	f043 0304 	orr.w	r3, r3, #4
 8004d02:	6153      	str	r3, [r2, #20]
#endif
}
 8004d04:	bf00      	nop
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bc80      	pop	{r7}
 8004d0a:	4770      	bx	lr
 8004d0c:	58004000 	.word	0x58004000

08004d10 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8004d18:	4b08      	ldr	r3, [pc, #32]	; (8004d3c <FLASH_PageErase+0x2c>)
 8004d1a:	695b      	ldr	r3, [r3, #20]
 8004d1c:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	00db      	lsls	r3, r3, #3
 8004d24:	4313      	orrs	r3, r2
 8004d26:	4a05      	ldr	r2, [pc, #20]	; (8004d3c <FLASH_PageErase+0x2c>)
 8004d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d2c:	f043 0302 	orr.w	r3, r3, #2
 8004d30:	6153      	str	r3, [r2, #20]
#endif
}
 8004d32:	bf00      	nop
 8004d34:	370c      	adds	r7, #12
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bc80      	pop	{r7}
 8004d3a:	4770      	bx	lr
 8004d3c:	58004000 	.word	0x58004000

08004d40 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004d40:	b480      	push	{r7}
 8004d42:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8004d44:	4b1f      	ldr	r3, [pc, #124]	; (8004dc4 <FLASH_FlushCaches+0x84>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d117      	bne.n	8004d80 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004d50:	4b1c      	ldr	r3, [pc, #112]	; (8004dc4 <FLASH_FlushCaches+0x84>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a1b      	ldr	r2, [pc, #108]	; (8004dc4 <FLASH_FlushCaches+0x84>)
 8004d56:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d5a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004d5c:	4b19      	ldr	r3, [pc, #100]	; (8004dc4 <FLASH_FlushCaches+0x84>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a18      	ldr	r2, [pc, #96]	; (8004dc4 <FLASH_FlushCaches+0x84>)
 8004d62:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004d66:	6013      	str	r3, [r2, #0]
 8004d68:	4b16      	ldr	r3, [pc, #88]	; (8004dc4 <FLASH_FlushCaches+0x84>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a15      	ldr	r2, [pc, #84]	; (8004dc4 <FLASH_FlushCaches+0x84>)
 8004d6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d72:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004d74:	4b13      	ldr	r3, [pc, #76]	; (8004dc4 <FLASH_FlushCaches+0x84>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a12      	ldr	r2, [pc, #72]	; (8004dc4 <FLASH_FlushCaches+0x84>)
 8004d7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d7e:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8004d80:	4b10      	ldr	r3, [pc, #64]	; (8004dc4 <FLASH_FlushCaches+0x84>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d117      	bne.n	8004dbc <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004d8c:	4b0d      	ldr	r3, [pc, #52]	; (8004dc4 <FLASH_FlushCaches+0x84>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a0c      	ldr	r2, [pc, #48]	; (8004dc4 <FLASH_FlushCaches+0x84>)
 8004d92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d96:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004d98:	4b0a      	ldr	r3, [pc, #40]	; (8004dc4 <FLASH_FlushCaches+0x84>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a09      	ldr	r2, [pc, #36]	; (8004dc4 <FLASH_FlushCaches+0x84>)
 8004d9e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004da2:	6013      	str	r3, [r2, #0]
 8004da4:	4b07      	ldr	r3, [pc, #28]	; (8004dc4 <FLASH_FlushCaches+0x84>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a06      	ldr	r2, [pc, #24]	; (8004dc4 <FLASH_FlushCaches+0x84>)
 8004daa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004dae:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004db0:	4b04      	ldr	r3, [pc, #16]	; (8004dc4 <FLASH_FlushCaches+0x84>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a03      	ldr	r2, [pc, #12]	; (8004dc4 <FLASH_FlushCaches+0x84>)
 8004db6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004dba:	6013      	str	r3, [r2, #0]
  }
#endif
}
 8004dbc:	bf00      	nop
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bc80      	pop	{r7}
 8004dc2:	4770      	bx	lr
 8004dc4:	58004000 	.word	0x58004000

08004dc8 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8004dcc:	4b05      	ldr	r3, [pc, #20]	; (8004de4 <FLASH_AcknowledgePageErase+0x1c>)
 8004dce:	695b      	ldr	r3, [r3, #20]
 8004dd0:	4a04      	ldr	r2, [pc, #16]	; (8004de4 <FLASH_AcknowledgePageErase+0x1c>)
 8004dd2:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8004dd6:	f023 0302 	bic.w	r3, r3, #2
 8004dda:	6153      	str	r3, [r2, #20]
#endif
}
 8004ddc:	bf00      	nop
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bc80      	pop	{r7}
 8004de2:	4770      	bx	lr
 8004de4:	58004000 	.word	0x58004000

08004de8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b087      	sub	sp, #28
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004df2:	2300      	movs	r3, #0
 8004df4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004df6:	e140      	b.n	800507a <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	2101      	movs	r1, #1
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	fa01 f303 	lsl.w	r3, r1, r3
 8004e04:	4013      	ands	r3, r2
 8004e06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	f000 8132 	beq.w	8005074 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	f003 0303 	and.w	r3, r3, #3
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d005      	beq.n	8004e28 <HAL_GPIO_Init+0x40>
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	f003 0303 	and.w	r3, r3, #3
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d130      	bne.n	8004e8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	005b      	lsls	r3, r3, #1
 8004e32:	2203      	movs	r2, #3
 8004e34:	fa02 f303 	lsl.w	r3, r2, r3
 8004e38:	43db      	mvns	r3, r3
 8004e3a:	693a      	ldr	r2, [r7, #16]
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	68da      	ldr	r2, [r3, #12]
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	005b      	lsls	r3, r3, #1
 8004e48:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e5e:	2201      	movs	r2, #1
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	fa02 f303 	lsl.w	r3, r2, r3
 8004e66:	43db      	mvns	r3, r3
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	091b      	lsrs	r3, r3, #4
 8004e74:	f003 0201 	and.w	r2, r3, #1
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	f003 0303 	and.w	r3, r3, #3
 8004e92:	2b03      	cmp	r3, #3
 8004e94:	d017      	beq.n	8004ec6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	005b      	lsls	r3, r3, #1
 8004ea0:	2203      	movs	r2, #3
 8004ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea6:	43db      	mvns	r3, r3
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	4013      	ands	r3, r2
 8004eac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	689a      	ldr	r2, [r3, #8]
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	005b      	lsls	r3, r3, #1
 8004eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eba:	693a      	ldr	r2, [r7, #16]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	693a      	ldr	r2, [r7, #16]
 8004ec4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f003 0303 	and.w	r3, r3, #3
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d123      	bne.n	8004f1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	08da      	lsrs	r2, r3, #3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	3208      	adds	r2, #8
 8004eda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ede:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	f003 0307 	and.w	r3, r3, #7
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	220f      	movs	r2, #15
 8004eea:	fa02 f303 	lsl.w	r3, r2, r3
 8004eee:	43db      	mvns	r3, r3
 8004ef0:	693a      	ldr	r2, [r7, #16]
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	691a      	ldr	r2, [r3, #16]
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	f003 0307 	and.w	r3, r3, #7
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	fa02 f303 	lsl.w	r3, r2, r3
 8004f06:	693a      	ldr	r2, [r7, #16]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	08da      	lsrs	r2, r3, #3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	3208      	adds	r2, #8
 8004f14:	6939      	ldr	r1, [r7, #16]
 8004f16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	005b      	lsls	r3, r3, #1
 8004f24:	2203      	movs	r2, #3
 8004f26:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2a:	43db      	mvns	r3, r3
 8004f2c:	693a      	ldr	r2, [r7, #16]
 8004f2e:	4013      	ands	r3, r2
 8004f30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	f003 0203 	and.w	r2, r3, #3
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	005b      	lsls	r3, r3, #1
 8004f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f42:	693a      	ldr	r2, [r7, #16]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	693a      	ldr	r2, [r7, #16]
 8004f4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	f000 808c 	beq.w	8005074 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004f5c:	4a4e      	ldr	r2, [pc, #312]	; (8005098 <HAL_GPIO_Init+0x2b0>)
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	089b      	lsrs	r3, r3, #2
 8004f62:	3302      	adds	r3, #2
 8004f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	f003 0303 	and.w	r3, r3, #3
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	2207      	movs	r2, #7
 8004f74:	fa02 f303 	lsl.w	r3, r2, r3
 8004f78:	43db      	mvns	r3, r3
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004f86:	d00d      	beq.n	8004fa4 <HAL_GPIO_Init+0x1bc>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a44      	ldr	r2, [pc, #272]	; (800509c <HAL_GPIO_Init+0x2b4>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d007      	beq.n	8004fa0 <HAL_GPIO_Init+0x1b8>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a43      	ldr	r2, [pc, #268]	; (80050a0 <HAL_GPIO_Init+0x2b8>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d101      	bne.n	8004f9c <HAL_GPIO_Init+0x1b4>
 8004f98:	2302      	movs	r3, #2
 8004f9a:	e004      	b.n	8004fa6 <HAL_GPIO_Init+0x1be>
 8004f9c:	2307      	movs	r3, #7
 8004f9e:	e002      	b.n	8004fa6 <HAL_GPIO_Init+0x1be>
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e000      	b.n	8004fa6 <HAL_GPIO_Init+0x1be>
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	697a      	ldr	r2, [r7, #20]
 8004fa8:	f002 0203 	and.w	r2, r2, #3
 8004fac:	0092      	lsls	r2, r2, #2
 8004fae:	4093      	lsls	r3, r2
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004fb6:	4938      	ldr	r1, [pc, #224]	; (8005098 <HAL_GPIO_Init+0x2b0>)
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	089b      	lsrs	r3, r3, #2
 8004fbc:	3302      	adds	r3, #2
 8004fbe:	693a      	ldr	r2, [r7, #16]
 8004fc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004fc4:	4b37      	ldr	r3, [pc, #220]	; (80050a4 <HAL_GPIO_Init+0x2bc>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	43db      	mvns	r3, r3
 8004fce:	693a      	ldr	r2, [r7, #16]
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d003      	beq.n	8004fe8 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8004fe0:	693a      	ldr	r2, [r7, #16]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004fe8:	4a2e      	ldr	r2, [pc, #184]	; (80050a4 <HAL_GPIO_Init+0x2bc>)
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004fee:	4b2d      	ldr	r3, [pc, #180]	; (80050a4 <HAL_GPIO_Init+0x2bc>)
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	43db      	mvns	r3, r3
 8004ff8:	693a      	ldr	r2, [r7, #16]
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d003      	beq.n	8005012 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 800500a:	693a      	ldr	r2, [r7, #16]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	4313      	orrs	r3, r2
 8005010:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005012:	4a24      	ldr	r2, [pc, #144]	; (80050a4 <HAL_GPIO_Init+0x2bc>)
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8005018:	4b22      	ldr	r3, [pc, #136]	; (80050a4 <HAL_GPIO_Init+0x2bc>)
 800501a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800501e:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	43db      	mvns	r3, r3
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	4013      	ands	r3, r2
 8005028:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d003      	beq.n	800503e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8005036:	693a      	ldr	r2, [r7, #16]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	4313      	orrs	r3, r2
 800503c:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800503e:	4a19      	ldr	r2, [pc, #100]	; (80050a4 <HAL_GPIO_Init+0x2bc>)
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8005046:	4b17      	ldr	r3, [pc, #92]	; (80050a4 <HAL_GPIO_Init+0x2bc>)
 8005048:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800504c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	43db      	mvns	r3, r3
 8005052:	693a      	ldr	r2, [r7, #16]
 8005054:	4013      	ands	r3, r2
 8005056:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d003      	beq.n	800506c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005064:	693a      	ldr	r2, [r7, #16]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	4313      	orrs	r3, r2
 800506a:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 800506c:	4a0d      	ldr	r2, [pc, #52]	; (80050a4 <HAL_GPIO_Init+0x2bc>)
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	3301      	adds	r3, #1
 8005078:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	fa22 f303 	lsr.w	r3, r2, r3
 8005084:	2b00      	cmp	r3, #0
 8005086:	f47f aeb7 	bne.w	8004df8 <HAL_GPIO_Init+0x10>
  }
}
 800508a:	bf00      	nop
 800508c:	bf00      	nop
 800508e:	371c      	adds	r7, #28
 8005090:	46bd      	mov	sp, r7
 8005092:	bc80      	pop	{r7}
 8005094:	4770      	bx	lr
 8005096:	bf00      	nop
 8005098:	40010000 	.word	0x40010000
 800509c:	48000400 	.word	0x48000400
 80050a0:	48000800 	.word	0x48000800
 80050a4:	58000800 	.word	0x58000800

080050a8 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b087      	sub	sp, #28
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80050b2:	2300      	movs	r3, #0
 80050b4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80050b6:	e0af      	b.n	8005218 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80050b8:	2201      	movs	r2, #1
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	fa02 f303 	lsl.w	r3, r2, r3
 80050c0:	683a      	ldr	r2, [r7, #0]
 80050c2:	4013      	ands	r3, r2
 80050c4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	f000 80a2 	beq.w	8005212 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80050ce:	4a59      	ldr	r2, [pc, #356]	; (8005234 <HAL_GPIO_DeInit+0x18c>)
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	089b      	lsrs	r3, r3, #2
 80050d4:	3302      	adds	r3, #2
 80050d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050da:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	f003 0303 	and.w	r3, r3, #3
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	2207      	movs	r2, #7
 80050e6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	4013      	ands	r3, r2
 80050ee:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80050f6:	d00d      	beq.n	8005114 <HAL_GPIO_DeInit+0x6c>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a4f      	ldr	r2, [pc, #316]	; (8005238 <HAL_GPIO_DeInit+0x190>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d007      	beq.n	8005110 <HAL_GPIO_DeInit+0x68>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a4e      	ldr	r2, [pc, #312]	; (800523c <HAL_GPIO_DeInit+0x194>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d101      	bne.n	800510c <HAL_GPIO_DeInit+0x64>
 8005108:	2302      	movs	r3, #2
 800510a:	e004      	b.n	8005116 <HAL_GPIO_DeInit+0x6e>
 800510c:	2307      	movs	r3, #7
 800510e:	e002      	b.n	8005116 <HAL_GPIO_DeInit+0x6e>
 8005110:	2301      	movs	r3, #1
 8005112:	e000      	b.n	8005116 <HAL_GPIO_DeInit+0x6e>
 8005114:	2300      	movs	r3, #0
 8005116:	697a      	ldr	r2, [r7, #20]
 8005118:	f002 0203 	and.w	r2, r2, #3
 800511c:	0092      	lsls	r2, r2, #2
 800511e:	4093      	lsls	r3, r2
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	429a      	cmp	r2, r3
 8005124:	d136      	bne.n	8005194 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8005126:	4b46      	ldr	r3, [pc, #280]	; (8005240 <HAL_GPIO_DeInit+0x198>)
 8005128:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	43db      	mvns	r3, r3
 8005130:	4943      	ldr	r1, [pc, #268]	; (8005240 <HAL_GPIO_DeInit+0x198>)
 8005132:	4013      	ands	r3, r2
 8005134:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8005138:	4b41      	ldr	r3, [pc, #260]	; (8005240 <HAL_GPIO_DeInit+0x198>)
 800513a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	43db      	mvns	r3, r3
 8005142:	493f      	ldr	r1, [pc, #252]	; (8005240 <HAL_GPIO_DeInit+0x198>)
 8005144:	4013      	ands	r3, r2
 8005146:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800514a:	4b3d      	ldr	r3, [pc, #244]	; (8005240 <HAL_GPIO_DeInit+0x198>)
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	43db      	mvns	r3, r3
 8005152:	493b      	ldr	r1, [pc, #236]	; (8005240 <HAL_GPIO_DeInit+0x198>)
 8005154:	4013      	ands	r3, r2
 8005156:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8005158:	4b39      	ldr	r3, [pc, #228]	; (8005240 <HAL_GPIO_DeInit+0x198>)
 800515a:	685a      	ldr	r2, [r3, #4]
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	43db      	mvns	r3, r3
 8005160:	4937      	ldr	r1, [pc, #220]	; (8005240 <HAL_GPIO_DeInit+0x198>)
 8005162:	4013      	ands	r3, r2
 8005164:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f003 0303 	and.w	r3, r3, #3
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	2207      	movs	r2, #7
 8005170:	fa02 f303 	lsl.w	r3, r2, r3
 8005174:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005176:	4a2f      	ldr	r2, [pc, #188]	; (8005234 <HAL_GPIO_DeInit+0x18c>)
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	089b      	lsrs	r3, r3, #2
 800517c:	3302      	adds	r3, #2
 800517e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	43da      	mvns	r2, r3
 8005186:	482b      	ldr	r0, [pc, #172]	; (8005234 <HAL_GPIO_DeInit+0x18c>)
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	089b      	lsrs	r3, r3, #2
 800518c:	400a      	ands	r2, r1
 800518e:	3302      	adds	r3, #2
 8005190:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	005b      	lsls	r3, r3, #1
 800519c:	2103      	movs	r1, #3
 800519e:	fa01 f303 	lsl.w	r3, r1, r3
 80051a2:	431a      	orrs	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	08da      	lsrs	r2, r3, #3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	3208      	adds	r2, #8
 80051b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	f003 0307 	and.w	r3, r3, #7
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	220f      	movs	r2, #15
 80051be:	fa02 f303 	lsl.w	r3, r2, r3
 80051c2:	43db      	mvns	r3, r3
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	08d2      	lsrs	r2, r2, #3
 80051c8:	4019      	ands	r1, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	3208      	adds	r2, #8
 80051ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	689a      	ldr	r2, [r3, #8]
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	005b      	lsls	r3, r3, #1
 80051da:	2103      	movs	r1, #3
 80051dc:	fa01 f303 	lsl.w	r3, r1, r3
 80051e0:	43db      	mvns	r3, r3
 80051e2:	401a      	ands	r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685a      	ldr	r2, [r3, #4]
 80051ec:	2101      	movs	r1, #1
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	fa01 f303 	lsl.w	r3, r1, r3
 80051f4:	43db      	mvns	r3, r3
 80051f6:	401a      	ands	r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	68da      	ldr	r2, [r3, #12]
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	005b      	lsls	r3, r3, #1
 8005204:	2103      	movs	r1, #3
 8005206:	fa01 f303 	lsl.w	r3, r1, r3
 800520a:	43db      	mvns	r3, r3
 800520c:	401a      	ands	r2, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	60da      	str	r2, [r3, #12]
    }

    position++;
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	3301      	adds	r3, #1
 8005216:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005218:	683a      	ldr	r2, [r7, #0]
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	fa22 f303 	lsr.w	r3, r2, r3
 8005220:	2b00      	cmp	r3, #0
 8005222:	f47f af49 	bne.w	80050b8 <HAL_GPIO_DeInit+0x10>
  }
}
 8005226:	bf00      	nop
 8005228:	bf00      	nop
 800522a:	371c      	adds	r7, #28
 800522c:	46bd      	mov	sp, r7
 800522e:	bc80      	pop	{r7}
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	40010000 	.word	0x40010000
 8005238:	48000400 	.word	0x48000400
 800523c:	48000800 	.word	0x48000800
 8005240:	58000800 	.word	0x58000800

08005244 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	460b      	mov	r3, r1
 800524e:	807b      	strh	r3, [r7, #2]
 8005250:	4613      	mov	r3, r2
 8005252:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005254:	787b      	ldrb	r3, [r7, #1]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d003      	beq.n	8005262 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800525a:	887a      	ldrh	r2, [r7, #2]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005260:	e002      	b.n	8005268 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005262:	887a      	ldrh	r2, [r7, #2]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005268:	bf00      	nop
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	bc80      	pop	{r7}
 8005270:	4770      	bx	lr

08005272 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005272:	b580      	push	{r7, lr}
 8005274:	b082      	sub	sp, #8
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d101      	bne.n	8005284 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e081      	b.n	8005388 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800528a:	b2db      	uxtb	r3, r3
 800528c:	2b00      	cmp	r3, #0
 800528e:	d106      	bne.n	800529e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f7fc facb 	bl	8001834 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2224      	movs	r2, #36	; 0x24
 80052a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f022 0201 	bic.w	r2, r2, #1
 80052b4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	685a      	ldr	r2, [r3, #4]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80052c2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	689a      	ldr	r2, [r3, #8]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80052d2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d107      	bne.n	80052ec <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	689a      	ldr	r2, [r3, #8]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052e8:	609a      	str	r2, [r3, #8]
 80052ea:	e006      	b.n	80052fa <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	689a      	ldr	r2, [r3, #8]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80052f8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d104      	bne.n	800530c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800530a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	6812      	ldr	r2, [r2, #0]
 8005316:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800531a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800531e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68da      	ldr	r2, [r3, #12]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800532e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	691a      	ldr	r2, [r3, #16]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	695b      	ldr	r3, [r3, #20]
 8005338:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	699b      	ldr	r3, [r3, #24]
 8005340:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	430a      	orrs	r2, r1
 8005348:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	69d9      	ldr	r1, [r3, #28]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a1a      	ldr	r2, [r3, #32]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	430a      	orrs	r2, r1
 8005358:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f042 0201 	orr.w	r2, r2, #1
 8005368:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2220      	movs	r2, #32
 8005374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005386:	2300      	movs	r3, #0
}
 8005388:	4618      	mov	r0, r3
 800538a:	3708      	adds	r7, #8
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	2b20      	cmp	r3, #32
 80053a4:	d138      	bne.n	8005418 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d101      	bne.n	80053b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80053b0:	2302      	movs	r3, #2
 80053b2:	e032      	b.n	800541a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2224      	movs	r2, #36	; 0x24
 80053c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f022 0201 	bic.w	r2, r2, #1
 80053d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80053e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6819      	ldr	r1, [r3, #0]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	683a      	ldr	r2, [r7, #0]
 80053f0:	430a      	orrs	r2, r1
 80053f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f042 0201 	orr.w	r2, r2, #1
 8005402:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2220      	movs	r2, #32
 8005408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005414:	2300      	movs	r3, #0
 8005416:	e000      	b.n	800541a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005418:	2302      	movs	r3, #2
  }
}
 800541a:	4618      	mov	r0, r3
 800541c:	370c      	adds	r7, #12
 800541e:	46bd      	mov	sp, r7
 8005420:	bc80      	pop	{r7}
 8005422:	4770      	bx	lr

08005424 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005434:	b2db      	uxtb	r3, r3
 8005436:	2b20      	cmp	r3, #32
 8005438:	d139      	bne.n	80054ae <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005440:	2b01      	cmp	r3, #1
 8005442:	d101      	bne.n	8005448 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005444:	2302      	movs	r3, #2
 8005446:	e033      	b.n	80054b0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2224      	movs	r2, #36	; 0x24
 8005454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f022 0201 	bic.w	r2, r2, #1
 8005466:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005476:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	021b      	lsls	r3, r3, #8
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	4313      	orrs	r3, r2
 8005480:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f042 0201 	orr.w	r2, r2, #1
 8005498:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2220      	movs	r2, #32
 800549e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80054aa:	2300      	movs	r3, #0
 80054ac:	e000      	b.n	80054b0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80054ae:	2302      	movs	r3, #2
  }
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3714      	adds	r7, #20
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bc80      	pop	{r7}
 80054b8:	4770      	bx	lr
	...

080054bc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80054bc:	b480      	push	{r7}
 80054be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054c0:	4b04      	ldr	r3, [pc, #16]	; (80054d4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a03      	ldr	r2, [pc, #12]	; (80054d4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80054c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054ca:	6013      	str	r3, [r2, #0]
}
 80054cc:	bf00      	nop
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bc80      	pop	{r7}
 80054d2:	4770      	bx	lr
 80054d4:	58000400 	.word	0x58000400

080054d8 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	460b      	mov	r3, r1
 80054e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d10c      	bne.n	8005504 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80054ea:	4b13      	ldr	r3, [pc, #76]	; (8005538 <HAL_PWR_EnterSLEEPMode+0x60>)
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054f6:	d10d      	bne.n	8005514 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 80054f8:	f000 f83c 	bl	8005574 <HAL_PWREx_DisableLowPowerRunMode>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d008      	beq.n	8005514 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8005502:	e015      	b.n	8005530 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8005504:	4b0c      	ldr	r3, [pc, #48]	; (8005538 <HAL_PWR_EnterSLEEPMode+0x60>)
 8005506:	695b      	ldr	r3, [r3, #20]
 8005508:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800550c:	2b00      	cmp	r3, #0
 800550e:	d101      	bne.n	8005514 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8005510:	f000 f822 	bl	8005558 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005514:	4b09      	ldr	r3, [pc, #36]	; (800553c <HAL_PWR_EnterSLEEPMode+0x64>)
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	4a08      	ldr	r2, [pc, #32]	; (800553c <HAL_PWR_EnterSLEEPMode+0x64>)
 800551a:	f023 0304 	bic.w	r3, r3, #4
 800551e:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8005520:	78fb      	ldrb	r3, [r7, #3]
 8005522:	2b01      	cmp	r3, #1
 8005524:	d101      	bne.n	800552a <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005526:	bf30      	wfi
 8005528:	e002      	b.n	8005530 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800552a:	bf40      	sev
    __WFE();
 800552c:	bf20      	wfe
    __WFE();
 800552e:	bf20      	wfe
  }
}
 8005530:	3708      	adds	r7, #8
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	58000400 	.word	0x58000400
 800553c:	e000ed00 	.word	0xe000ed00

08005540 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005540:	b480      	push	{r7}
 8005542:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8005544:	4b03      	ldr	r3, [pc, #12]	; (8005554 <HAL_PWREx_GetVoltageRange+0x14>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800554c:	4618      	mov	r0, r3
 800554e:	46bd      	mov	sp, r7
 8005550:	bc80      	pop	{r7}
 8005552:	4770      	bx	lr
 8005554:	58000400 	.word	0x58000400

08005558 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8005558:	b480      	push	{r7}
 800555a:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 800555c:	4b04      	ldr	r3, [pc, #16]	; (8005570 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a03      	ldr	r2, [pc, #12]	; (8005570 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8005562:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005566:	6013      	str	r3, [r2, #0]
}
 8005568:	bf00      	nop
 800556a:	46bd      	mov	sp, r7
 800556c:	bc80      	pop	{r7}
 800556e:	4770      	bx	lr
 8005570:	58000400 	.word	0x58000400

08005574 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800557a:	4b16      	ldr	r3, [pc, #88]	; (80055d4 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a15      	ldr	r2, [pc, #84]	; (80055d4 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005580:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005584:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8005586:	4b14      	ldr	r3, [pc, #80]	; (80055d8 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2232      	movs	r2, #50	; 0x32
 800558c:	fb02 f303 	mul.w	r3, r2, r3
 8005590:	4a12      	ldr	r2, [pc, #72]	; (80055dc <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8005592:	fba2 2303 	umull	r2, r3, r2, r3
 8005596:	0c9b      	lsrs	r3, r3, #18
 8005598:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800559a:	e002      	b.n	80055a2 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	3b01      	subs	r3, #1
 80055a0:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80055a2:	4b0c      	ldr	r3, [pc, #48]	; (80055d4 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055ae:	d102      	bne.n	80055b6 <HAL_PWREx_DisableLowPowerRunMode+0x42>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d1f2      	bne.n	800559c <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80055b6:	4b07      	ldr	r3, [pc, #28]	; (80055d4 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80055b8:	695b      	ldr	r3, [r3, #20]
 80055ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055c2:	d101      	bne.n	80055c8 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 80055c4:	2303      	movs	r3, #3
 80055c6:	e000      	b.n	80055ca <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	370c      	adds	r7, #12
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bc80      	pop	{r7}
 80055d2:	4770      	bx	lr
 80055d4:	58000400 	.word	0x58000400
 80055d8:	20000000 	.word	0x20000000
 80055dc:	431bde83 	.word	0x431bde83

080055e0 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	4603      	mov	r3, r0
 80055e8:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 80055ea:	4b10      	ldr	r3, [pc, #64]	; (800562c <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f023 0307 	bic.w	r3, r3, #7
 80055f2:	4a0e      	ldr	r2, [pc, #56]	; (800562c <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80055f4:	f043 0302 	orr.w	r3, r3, #2
 80055f8:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80055fa:	4b0d      	ldr	r3, [pc, #52]	; (8005630 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	4a0c      	ldr	r2, [pc, #48]	; (8005630 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005600:	f043 0304 	orr.w	r3, r3, #4
 8005604:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8005606:	79fb      	ldrb	r3, [r7, #7]
 8005608:	2b01      	cmp	r3, #1
 800560a:	d101      	bne.n	8005610 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800560c:	bf30      	wfi
 800560e:	e002      	b.n	8005616 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005610:	bf40      	sev
    __WFE();
 8005612:	bf20      	wfe
    __WFE();
 8005614:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005616:	4b06      	ldr	r3, [pc, #24]	; (8005630 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	4a05      	ldr	r2, [pc, #20]	; (8005630 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800561c:	f023 0304 	bic.w	r3, r3, #4
 8005620:	6113      	str	r3, [r2, #16]
}
 8005622:	bf00      	nop
 8005624:	370c      	adds	r7, #12
 8005626:	46bd      	mov	sp, r7
 8005628:	bc80      	pop	{r7}
 800562a:	4770      	bx	lr
 800562c:	58000400 	.word	0x58000400
 8005630:	e000ed00 	.word	0xe000ed00

08005634 <LL_PWR_IsEnabledBkUpAccess>:
{
 8005634:	b480      	push	{r7}
 8005636:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8005638:	4b06      	ldr	r3, [pc, #24]	; (8005654 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005640:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005644:	d101      	bne.n	800564a <LL_PWR_IsEnabledBkUpAccess+0x16>
 8005646:	2301      	movs	r3, #1
 8005648:	e000      	b.n	800564c <LL_PWR_IsEnabledBkUpAccess+0x18>
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	46bd      	mov	sp, r7
 8005650:	bc80      	pop	{r7}
 8005652:	4770      	bx	lr
 8005654:	58000400 	.word	0x58000400

08005658 <LL_RCC_HSE_EnableTcxo>:
{
 8005658:	b480      	push	{r7}
 800565a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800565c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005666:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800566a:	6013      	str	r3, [r2, #0]
}
 800566c:	bf00      	nop
 800566e:	46bd      	mov	sp, r7
 8005670:	bc80      	pop	{r7}
 8005672:	4770      	bx	lr

08005674 <LL_RCC_HSE_DisableTcxo>:
{
 8005674:	b480      	push	{r7}
 8005676:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005678:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005682:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005686:	6013      	str	r3, [r2, #0]
}
 8005688:	bf00      	nop
 800568a:	46bd      	mov	sp, r7
 800568c:	bc80      	pop	{r7}
 800568e:	4770      	bx	lr

08005690 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005690:	b480      	push	{r7}
 8005692:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005694:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800569e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056a2:	d101      	bne.n	80056a8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80056a4:	2301      	movs	r3, #1
 80056a6:	e000      	b.n	80056aa <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bc80      	pop	{r7}
 80056b0:	4770      	bx	lr

080056b2 <LL_RCC_HSE_Enable>:
{
 80056b2:	b480      	push	{r7}
 80056b4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80056b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056c4:	6013      	str	r3, [r2, #0]
}
 80056c6:	bf00      	nop
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bc80      	pop	{r7}
 80056cc:	4770      	bx	lr

080056ce <LL_RCC_HSE_Disable>:
{
 80056ce:	b480      	push	{r7}
 80056d0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80056d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056e0:	6013      	str	r3, [r2, #0]
}
 80056e2:	bf00      	nop
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bc80      	pop	{r7}
 80056e8:	4770      	bx	lr

080056ea <LL_RCC_HSE_IsReady>:
{
 80056ea:	b480      	push	{r7}
 80056ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80056ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056fc:	d101      	bne.n	8005702 <LL_RCC_HSE_IsReady+0x18>
 80056fe:	2301      	movs	r3, #1
 8005700:	e000      	b.n	8005704 <LL_RCC_HSE_IsReady+0x1a>
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	46bd      	mov	sp, r7
 8005708:	bc80      	pop	{r7}
 800570a:	4770      	bx	lr

0800570c <LL_RCC_HSI_Enable>:
{
 800570c:	b480      	push	{r7}
 800570e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005710:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800571a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800571e:	6013      	str	r3, [r2, #0]
}
 8005720:	bf00      	nop
 8005722:	46bd      	mov	sp, r7
 8005724:	bc80      	pop	{r7}
 8005726:	4770      	bx	lr

08005728 <LL_RCC_HSI_Disable>:
{
 8005728:	b480      	push	{r7}
 800572a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800572c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005736:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800573a:	6013      	str	r3, [r2, #0]
}
 800573c:	bf00      	nop
 800573e:	46bd      	mov	sp, r7
 8005740:	bc80      	pop	{r7}
 8005742:	4770      	bx	lr

08005744 <LL_RCC_HSI_IsReady>:
{
 8005744:	b480      	push	{r7}
 8005746:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005748:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005756:	d101      	bne.n	800575c <LL_RCC_HSI_IsReady+0x18>
 8005758:	2301      	movs	r3, #1
 800575a:	e000      	b.n	800575e <LL_RCC_HSI_IsReady+0x1a>
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	46bd      	mov	sp, r7
 8005762:	bc80      	pop	{r7}
 8005764:	4770      	bx	lr

08005766 <LL_RCC_HSI_SetCalibTrimming>:
{
 8005766:	b480      	push	{r7}
 8005768:	b083      	sub	sp, #12
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800576e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	061b      	lsls	r3, r3, #24
 800577c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005780:	4313      	orrs	r3, r2
 8005782:	604b      	str	r3, [r1, #4]
}
 8005784:	bf00      	nop
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	bc80      	pop	{r7}
 800578c:	4770      	bx	lr

0800578e <LL_RCC_LSE_IsReady>:
{
 800578e:	b480      	push	{r7}
 8005790:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005792:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800579a:	f003 0302 	and.w	r3, r3, #2
 800579e:	2b02      	cmp	r3, #2
 80057a0:	d101      	bne.n	80057a6 <LL_RCC_LSE_IsReady+0x18>
 80057a2:	2301      	movs	r3, #1
 80057a4:	e000      	b.n	80057a8 <LL_RCC_LSE_IsReady+0x1a>
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bc80      	pop	{r7}
 80057ae:	4770      	bx	lr

080057b0 <LL_RCC_LSI_Enable>:
{
 80057b0:	b480      	push	{r7}
 80057b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80057b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057c0:	f043 0301 	orr.w	r3, r3, #1
 80057c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80057c8:	bf00      	nop
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bc80      	pop	{r7}
 80057ce:	4770      	bx	lr

080057d0 <LL_RCC_LSI_Disable>:
{
 80057d0:	b480      	push	{r7}
 80057d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80057d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057e0:	f023 0301 	bic.w	r3, r3, #1
 80057e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80057e8:	bf00      	nop
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bc80      	pop	{r7}
 80057ee:	4770      	bx	lr

080057f0 <LL_RCC_LSI_IsReady>:
{
 80057f0:	b480      	push	{r7}
 80057f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80057f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057fc:	f003 0302 	and.w	r3, r3, #2
 8005800:	2b02      	cmp	r3, #2
 8005802:	d101      	bne.n	8005808 <LL_RCC_LSI_IsReady+0x18>
 8005804:	2301      	movs	r3, #1
 8005806:	e000      	b.n	800580a <LL_RCC_LSI_IsReady+0x1a>
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	46bd      	mov	sp, r7
 800580e:	bc80      	pop	{r7}
 8005810:	4770      	bx	lr

08005812 <LL_RCC_MSI_Enable>:
{
 8005812:	b480      	push	{r7}
 8005814:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005816:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005820:	f043 0301 	orr.w	r3, r3, #1
 8005824:	6013      	str	r3, [r2, #0]
}
 8005826:	bf00      	nop
 8005828:	46bd      	mov	sp, r7
 800582a:	bc80      	pop	{r7}
 800582c:	4770      	bx	lr

0800582e <LL_RCC_MSI_Disable>:
{
 800582e:	b480      	push	{r7}
 8005830:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005832:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800583c:	f023 0301 	bic.w	r3, r3, #1
 8005840:	6013      	str	r3, [r2, #0]
}
 8005842:	bf00      	nop
 8005844:	46bd      	mov	sp, r7
 8005846:	bc80      	pop	{r7}
 8005848:	4770      	bx	lr

0800584a <LL_RCC_MSI_IsReady>:
{
 800584a:	b480      	push	{r7}
 800584c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800584e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0302 	and.w	r3, r3, #2
 8005858:	2b02      	cmp	r3, #2
 800585a:	d101      	bne.n	8005860 <LL_RCC_MSI_IsReady+0x16>
 800585c:	2301      	movs	r3, #1
 800585e:	e000      	b.n	8005862 <LL_RCC_MSI_IsReady+0x18>
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	46bd      	mov	sp, r7
 8005866:	bc80      	pop	{r7}
 8005868:	4770      	bx	lr

0800586a <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 800586a:	b480      	push	{r7}
 800586c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800586e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0308 	and.w	r3, r3, #8
 8005878:	2b08      	cmp	r3, #8
 800587a:	d101      	bne.n	8005880 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 800587c:	2301      	movs	r3, #1
 800587e:	e000      	b.n	8005882 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	46bd      	mov	sp, r7
 8005886:	bc80      	pop	{r7}
 8005888:	4770      	bx	lr

0800588a <LL_RCC_MSI_GetRange>:
{
 800588a:	b480      	push	{r7}
 800588c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800588e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005898:	4618      	mov	r0, r3
 800589a:	46bd      	mov	sp, r7
 800589c:	bc80      	pop	{r7}
 800589e:	4770      	bx	lr

080058a0 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 80058a0:	b480      	push	{r7}
 80058a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80058a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058ac:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bc80      	pop	{r7}
 80058b6:	4770      	bx	lr

080058b8 <LL_RCC_MSI_SetCalibTrimming>:
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80058c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	021b      	lsls	r3, r3, #8
 80058ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058d2:	4313      	orrs	r3, r2
 80058d4:	604b      	str	r3, [r1, #4]
}
 80058d6:	bf00      	nop
 80058d8:	370c      	adds	r7, #12
 80058da:	46bd      	mov	sp, r7
 80058dc:	bc80      	pop	{r7}
 80058de:	4770      	bx	lr

080058e0 <LL_RCC_SetSysClkSource>:
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80058e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	f023 0203 	bic.w	r2, r3, #3
 80058f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	608b      	str	r3, [r1, #8]
}
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	bc80      	pop	{r7}
 8005904:	4770      	bx	lr

08005906 <LL_RCC_GetSysClkSource>:
{
 8005906:	b480      	push	{r7}
 8005908:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800590a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	f003 030c 	and.w	r3, r3, #12
}
 8005914:	4618      	mov	r0, r3
 8005916:	46bd      	mov	sp, r7
 8005918:	bc80      	pop	{r7}
 800591a:	4770      	bx	lr

0800591c <LL_RCC_SetAHBPrescaler>:
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005924:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800592e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4313      	orrs	r3, r2
 8005936:	608b      	str	r3, [r1, #8]
}
 8005938:	bf00      	nop
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	bc80      	pop	{r7}
 8005940:	4770      	bx	lr

08005942 <LL_RCC_SetAHB3Prescaler>:
{
 8005942:	b480      	push	{r7}
 8005944:	b083      	sub	sp, #12
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800594a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800594e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005952:	f023 020f 	bic.w	r2, r3, #15
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	091b      	lsrs	r3, r3, #4
 800595a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800595e:	4313      	orrs	r3, r2
 8005960:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005964:	bf00      	nop
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	bc80      	pop	{r7}
 800596c:	4770      	bx	lr

0800596e <LL_RCC_SetAPB1Prescaler>:
{
 800596e:	b480      	push	{r7}
 8005970:	b083      	sub	sp, #12
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005976:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005980:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4313      	orrs	r3, r2
 8005988:	608b      	str	r3, [r1, #8]
}
 800598a:	bf00      	nop
 800598c:	370c      	adds	r7, #12
 800598e:	46bd      	mov	sp, r7
 8005990:	bc80      	pop	{r7}
 8005992:	4770      	bx	lr

08005994 <LL_RCC_SetAPB2Prescaler>:
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800599c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80059a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	608b      	str	r3, [r1, #8]
}
 80059b0:	bf00      	nop
 80059b2:	370c      	adds	r7, #12
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bc80      	pop	{r7}
 80059b8:	4770      	bx	lr

080059ba <LL_RCC_GetAHBPrescaler>:
{
 80059ba:	b480      	push	{r7}
 80059bc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80059be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bc80      	pop	{r7}
 80059ce:	4770      	bx	lr

080059d0 <LL_RCC_GetAHB3Prescaler>:
{
 80059d0:	b480      	push	{r7}
 80059d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80059d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059d8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80059dc:	011b      	lsls	r3, r3, #4
 80059de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bc80      	pop	{r7}
 80059e8:	4770      	bx	lr

080059ea <LL_RCC_GetAPB1Prescaler>:
{
 80059ea:	b480      	push	{r7}
 80059ec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80059ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bc80      	pop	{r7}
 80059fe:	4770      	bx	lr

08005a00 <LL_RCC_GetAPB2Prescaler>:
{
 8005a00:	b480      	push	{r7}
 8005a02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005a04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bc80      	pop	{r7}
 8005a14:	4770      	bx	lr

08005a16 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005a16:	b480      	push	{r7}
 8005a18:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a28:	6013      	str	r3, [r2, #0]
}
 8005a2a:	bf00      	nop
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bc80      	pop	{r7}
 8005a30:	4770      	bx	lr

08005a32 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005a32:	b480      	push	{r7}
 8005a34:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005a36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a44:	6013      	str	r3, [r2, #0]
}
 8005a46:	bf00      	nop
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bc80      	pop	{r7}
 8005a4c:	4770      	bx	lr

08005a4e <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005a4e:	b480      	push	{r7}
 8005a50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005a52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a60:	d101      	bne.n	8005a66 <LL_RCC_PLL_IsReady+0x18>
 8005a62:	2301      	movs	r3, #1
 8005a64:	e000      	b.n	8005a68 <LL_RCC_PLL_IsReady+0x1a>
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bc80      	pop	{r7}
 8005a6e:	4770      	bx	lr

08005a70 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005a70:	b480      	push	{r7}
 8005a72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005a74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	0a1b      	lsrs	r3, r3, #8
 8005a7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bc80      	pop	{r7}
 8005a86:	4770      	bx	lr

08005a88 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005a8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bc80      	pop	{r7}
 8005a9c:	4770      	bx	lr

08005a9e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005a9e:	b480      	push	{r7}
 8005aa0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005aa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bc80      	pop	{r7}
 8005ab2:	4770      	bx	lr

08005ab4 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005ab8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	f003 0303 	and.w	r3, r3, #3
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bc80      	pop	{r7}
 8005ac8:	4770      	bx	lr

08005aca <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005aca:	b480      	push	{r7}
 8005acc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005ace:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ad8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005adc:	d101      	bne.n	8005ae2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e000      	b.n	8005ae4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bc80      	pop	{r7}
 8005aea:	4770      	bx	lr

08005aec <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005aec:	b480      	push	{r7}
 8005aee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005af0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005af4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005af8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005afc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b00:	d101      	bne.n	8005b06 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005b02:	2301      	movs	r3, #1
 8005b04:	e000      	b.n	8005b08 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bc80      	pop	{r7}
 8005b0e:	4770      	bx	lr

08005b10 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005b10:	b480      	push	{r7}
 8005b12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005b14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b22:	d101      	bne.n	8005b28 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005b24:	2301      	movs	r3, #1
 8005b26:	e000      	b.n	8005b2a <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bc80      	pop	{r7}
 8005b30:	4770      	bx	lr

08005b32 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8005b32:	b480      	push	{r7}
 8005b34:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005b36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b40:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b44:	d101      	bne.n	8005b4a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005b46:	2301      	movs	r3, #1
 8005b48:	e000      	b.n	8005b4c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bc80      	pop	{r7}
 8005b52:	4770      	bx	lr

08005b54 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b088      	sub	sp, #32
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d101      	bne.n	8005b66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e36f      	b.n	8006246 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b66:	f7ff fece 	bl	8005906 <LL_RCC_GetSysClkSource>
 8005b6a:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b6c:	f7ff ffa2 	bl	8005ab4 <LL_RCC_PLL_GetMainSource>
 8005b70:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 0320 	and.w	r3, r3, #32
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	f000 80c4 	beq.w	8005d08 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d005      	beq.n	8005b92 <HAL_RCC_OscConfig+0x3e>
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	2b0c      	cmp	r3, #12
 8005b8a:	d176      	bne.n	8005c7a <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d173      	bne.n	8005c7a <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a1b      	ldr	r3, [r3, #32]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d101      	bne.n	8005b9e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e353      	b.n	8006246 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0308 	and.w	r3, r3, #8
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d005      	beq.n	8005bbc <HAL_RCC_OscConfig+0x68>
 8005bb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bba:	e006      	b.n	8005bca <HAL_RCC_OscConfig+0x76>
 8005bbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bc4:	091b      	lsrs	r3, r3, #4
 8005bc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d222      	bcs.n	8005c14 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f000 fd3c 	bl	8006650 <RCC_SetFlashLatencyFromMSIRange>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d001      	beq.n	8005be2 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e331      	b.n	8006246 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005be2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bec:	f043 0308 	orr.w	r3, r3, #8
 8005bf0:	6013      	str	r3, [r2, #0]
 8005bf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c04:	4313      	orrs	r3, r2
 8005c06:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f7ff fe53 	bl	80058b8 <LL_RCC_MSI_SetCalibTrimming>
 8005c12:	e021      	b.n	8005c58 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005c14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c1e:	f043 0308 	orr.w	r3, r3, #8
 8005c22:	6013      	str	r3, [r2, #0]
 8005c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c36:	4313      	orrs	r3, r2
 8005c38:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f7ff fe3a 	bl	80058b8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f000 fd01 	bl	8006650 <RCC_SetFlashLatencyFromMSIRange>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d001      	beq.n	8005c58 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e2f6      	b.n	8006246 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005c58:	f000 fcc2 	bl	80065e0 <HAL_RCC_GetHCLKFreq>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	4aa7      	ldr	r2, [pc, #668]	; (8005efc <HAL_RCC_OscConfig+0x3a8>)
 8005c60:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8005c62:	4ba7      	ldr	r3, [pc, #668]	; (8005f00 <HAL_RCC_OscConfig+0x3ac>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4618      	mov	r0, r3
 8005c68:	f7fc fac2 	bl	80021f0 <HAL_InitTick>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8005c70:	7cfb      	ldrb	r3, [r7, #19]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d047      	beq.n	8005d06 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8005c76:	7cfb      	ldrb	r3, [r7, #19]
 8005c78:	e2e5      	b.n	8006246 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a1b      	ldr	r3, [r3, #32]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d02c      	beq.n	8005cdc <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005c82:	f7ff fdc6 	bl	8005812 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005c86:	f7fc fabd 	bl	8002204 <HAL_GetTick>
 8005c8a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005c8c:	e008      	b.n	8005ca0 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005c8e:	f7fc fab9 	bl	8002204 <HAL_GetTick>
 8005c92:	4602      	mov	r2, r0
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	1ad3      	subs	r3, r2, r3
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d901      	bls.n	8005ca0 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e2d2      	b.n	8006246 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005ca0:	f7ff fdd3 	bl	800584a <LL_RCC_MSI_IsReady>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d0f1      	beq.n	8005c8e <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cb4:	f043 0308 	orr.w	r3, r3, #8
 8005cb8:	6013      	str	r3, [r2, #0]
 8005cba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f7ff fdef 	bl	80058b8 <LL_RCC_MSI_SetCalibTrimming>
 8005cda:	e015      	b.n	8005d08 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005cdc:	f7ff fda7 	bl	800582e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005ce0:	f7fc fa90 	bl	8002204 <HAL_GetTick>
 8005ce4:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005ce6:	e008      	b.n	8005cfa <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005ce8:	f7fc fa8c 	bl	8002204 <HAL_GetTick>
 8005cec:	4602      	mov	r2, r0
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d901      	bls.n	8005cfa <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e2a5      	b.n	8006246 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005cfa:	f7ff fda6 	bl	800584a <LL_RCC_MSI_IsReady>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d1f1      	bne.n	8005ce8 <HAL_RCC_OscConfig+0x194>
 8005d04:	e000      	b.n	8005d08 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005d06:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0301 	and.w	r3, r3, #1
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d058      	beq.n	8005dc6 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005d14:	69fb      	ldr	r3, [r7, #28]
 8005d16:	2b08      	cmp	r3, #8
 8005d18:	d005      	beq.n	8005d26 <HAL_RCC_OscConfig+0x1d2>
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	2b0c      	cmp	r3, #12
 8005d1e:	d108      	bne.n	8005d32 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	2b03      	cmp	r3, #3
 8005d24:	d105      	bne.n	8005d32 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d14b      	bne.n	8005dc6 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e289      	b.n	8006246 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8005d32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d44:	4313      	orrs	r3, r2
 8005d46:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d50:	d102      	bne.n	8005d58 <HAL_RCC_OscConfig+0x204>
 8005d52:	f7ff fcae 	bl	80056b2 <LL_RCC_HSE_Enable>
 8005d56:	e00d      	b.n	8005d74 <HAL_RCC_OscConfig+0x220>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8005d60:	d104      	bne.n	8005d6c <HAL_RCC_OscConfig+0x218>
 8005d62:	f7ff fc79 	bl	8005658 <LL_RCC_HSE_EnableTcxo>
 8005d66:	f7ff fca4 	bl	80056b2 <LL_RCC_HSE_Enable>
 8005d6a:	e003      	b.n	8005d74 <HAL_RCC_OscConfig+0x220>
 8005d6c:	f7ff fcaf 	bl	80056ce <LL_RCC_HSE_Disable>
 8005d70:	f7ff fc80 	bl	8005674 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d012      	beq.n	8005da2 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d7c:	f7fc fa42 	bl	8002204 <HAL_GetTick>
 8005d80:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005d82:	e008      	b.n	8005d96 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d84:	f7fc fa3e 	bl	8002204 <HAL_GetTick>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	1ad3      	subs	r3, r2, r3
 8005d8e:	2b64      	cmp	r3, #100	; 0x64
 8005d90:	d901      	bls.n	8005d96 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8005d92:	2303      	movs	r3, #3
 8005d94:	e257      	b.n	8006246 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005d96:	f7ff fca8 	bl	80056ea <LL_RCC_HSE_IsReady>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d0f1      	beq.n	8005d84 <HAL_RCC_OscConfig+0x230>
 8005da0:	e011      	b.n	8005dc6 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005da2:	f7fc fa2f 	bl	8002204 <HAL_GetTick>
 8005da6:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005da8:	e008      	b.n	8005dbc <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005daa:	f7fc fa2b 	bl	8002204 <HAL_GetTick>
 8005dae:	4602      	mov	r2, r0
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	1ad3      	subs	r3, r2, r3
 8005db4:	2b64      	cmp	r3, #100	; 0x64
 8005db6:	d901      	bls.n	8005dbc <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8005db8:	2303      	movs	r3, #3
 8005dba:	e244      	b.n	8006246 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005dbc:	f7ff fc95 	bl	80056ea <LL_RCC_HSE_IsReady>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d1f1      	bne.n	8005daa <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 0302 	and.w	r3, r3, #2
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d046      	beq.n	8005e60 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	2b04      	cmp	r3, #4
 8005dd6:	d005      	beq.n	8005de4 <HAL_RCC_OscConfig+0x290>
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	2b0c      	cmp	r3, #12
 8005ddc:	d10e      	bne.n	8005dfc <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	2b02      	cmp	r3, #2
 8005de2:	d10b      	bne.n	8005dfc <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d101      	bne.n	8005df0 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	e22a      	b.n	8006246 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	695b      	ldr	r3, [r3, #20]
 8005df4:	4618      	mov	r0, r3
 8005df6:	f7ff fcb6 	bl	8005766 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005dfa:	e031      	b.n	8005e60 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d019      	beq.n	8005e38 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e04:	f7ff fc82 	bl	800570c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e08:	f7fc f9fc 	bl	8002204 <HAL_GetTick>
 8005e0c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005e0e:	e008      	b.n	8005e22 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e10:	f7fc f9f8 	bl	8002204 <HAL_GetTick>
 8005e14:	4602      	mov	r2, r0
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	1ad3      	subs	r3, r2, r3
 8005e1a:	2b02      	cmp	r3, #2
 8005e1c:	d901      	bls.n	8005e22 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e211      	b.n	8006246 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005e22:	f7ff fc8f 	bl	8005744 <LL_RCC_HSI_IsReady>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d0f1      	beq.n	8005e10 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	695b      	ldr	r3, [r3, #20]
 8005e30:	4618      	mov	r0, r3
 8005e32:	f7ff fc98 	bl	8005766 <LL_RCC_HSI_SetCalibTrimming>
 8005e36:	e013      	b.n	8005e60 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e38:	f7ff fc76 	bl	8005728 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e3c:	f7fc f9e2 	bl	8002204 <HAL_GetTick>
 8005e40:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005e42:	e008      	b.n	8005e56 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e44:	f7fc f9de 	bl	8002204 <HAL_GetTick>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	1ad3      	subs	r3, r2, r3
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d901      	bls.n	8005e56 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8005e52:	2303      	movs	r3, #3
 8005e54:	e1f7      	b.n	8006246 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005e56:	f7ff fc75 	bl	8005744 <LL_RCC_HSI_IsReady>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d1f1      	bne.n	8005e44 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 0308 	and.w	r3, r3, #8
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d06e      	beq.n	8005f4a <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	699b      	ldr	r3, [r3, #24]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d056      	beq.n	8005f22 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8005e74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e7c:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	69da      	ldr	r2, [r3, #28]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f003 0310 	and.w	r3, r3, #16
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d031      	beq.n	8005ef0 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f003 0302 	and.w	r3, r3, #2
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d006      	beq.n	8005ea4 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d101      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e1d0      	b.n	8006246 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f003 0301 	and.w	r3, r3, #1
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d013      	beq.n	8005ed6 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8005eae:	f7ff fc8f 	bl	80057d0 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005eb2:	f7fc f9a7 	bl	8002204 <HAL_GetTick>
 8005eb6:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8005eb8:	e008      	b.n	8005ecc <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005eba:	f7fc f9a3 	bl	8002204 <HAL_GetTick>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	1ad3      	subs	r3, r2, r3
 8005ec4:	2b11      	cmp	r3, #17
 8005ec6:	d901      	bls.n	8005ecc <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8005ec8:	2303      	movs	r3, #3
 8005eca:	e1bc      	b.n	8006246 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8005ecc:	f7ff fc90 	bl	80057f0 <LL_RCC_LSI_IsReady>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d1f1      	bne.n	8005eba <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8005ed6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ede:	f023 0210 	bic.w	r2, r3, #16
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	69db      	ldr	r3, [r3, #28]
 8005ee6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005eea:	4313      	orrs	r3, r2
 8005eec:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ef0:	f7ff fc5e 	bl	80057b0 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ef4:	f7fc f986 	bl	8002204 <HAL_GetTick>
 8005ef8:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8005efa:	e00c      	b.n	8005f16 <HAL_RCC_OscConfig+0x3c2>
 8005efc:	20000000 	.word	0x20000000
 8005f00:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f04:	f7fc f97e 	bl	8002204 <HAL_GetTick>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	2b11      	cmp	r3, #17
 8005f10:	d901      	bls.n	8005f16 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e197      	b.n	8006246 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8005f16:	f7ff fc6b 	bl	80057f0 <LL_RCC_LSI_IsReady>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d0f1      	beq.n	8005f04 <HAL_RCC_OscConfig+0x3b0>
 8005f20:	e013      	b.n	8005f4a <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f22:	f7ff fc55 	bl	80057d0 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f26:	f7fc f96d 	bl	8002204 <HAL_GetTick>
 8005f2a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8005f2c:	e008      	b.n	8005f40 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f2e:	f7fc f969 	bl	8002204 <HAL_GetTick>
 8005f32:	4602      	mov	r2, r0
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	2b11      	cmp	r3, #17
 8005f3a:	d901      	bls.n	8005f40 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	e182      	b.n	8006246 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8005f40:	f7ff fc56 	bl	80057f0 <LL_RCC_LSI_IsReady>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d1f1      	bne.n	8005f2e <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 0304 	and.w	r3, r3, #4
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	f000 80d8 	beq.w	8006108 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005f58:	f7ff fb6c 	bl	8005634 <LL_PWR_IsEnabledBkUpAccess>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d113      	bne.n	8005f8a <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005f62:	f7ff faab 	bl	80054bc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f66:	f7fc f94d 	bl	8002204 <HAL_GetTick>
 8005f6a:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005f6c:	e008      	b.n	8005f80 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f6e:	f7fc f949 	bl	8002204 <HAL_GetTick>
 8005f72:	4602      	mov	r2, r0
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	d901      	bls.n	8005f80 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	e162      	b.n	8006246 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005f80:	f7ff fb58 	bl	8005634 <LL_PWR_IsEnabledBkUpAccess>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d0f1      	beq.n	8005f6e <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d07b      	beq.n	800608a <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	2b85      	cmp	r3, #133	; 0x85
 8005f98:	d003      	beq.n	8005fa2 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	2b05      	cmp	r3, #5
 8005fa0:	d109      	bne.n	8005fb6 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005fa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005faa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fae:	f043 0304 	orr.w	r3, r3, #4
 8005fb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fb6:	f7fc f925 	bl	8002204 <HAL_GetTick>
 8005fba:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fc8:	f043 0301 	orr.w	r3, r3, #1
 8005fcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005fd0:	e00a      	b.n	8005fe8 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fd2:	f7fc f917 	bl	8002204 <HAL_GetTick>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d901      	bls.n	8005fe8 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e12e      	b.n	8006246 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005fe8:	f7ff fbd1 	bl	800578e <LL_RCC_LSE_IsReady>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d0ef      	beq.n	8005fd2 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	2b81      	cmp	r3, #129	; 0x81
 8005ff8:	d003      	beq.n	8006002 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	2b85      	cmp	r3, #133	; 0x85
 8006000:	d121      	bne.n	8006046 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006002:	f7fc f8ff 	bl	8002204 <HAL_GetTick>
 8006006:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006008:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800600c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006010:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006018:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800601c:	e00a      	b.n	8006034 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800601e:	f7fc f8f1 	bl	8002204 <HAL_GetTick>
 8006022:	4602      	mov	r2, r0
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	1ad3      	subs	r3, r2, r3
 8006028:	f241 3288 	movw	r2, #5000	; 0x1388
 800602c:	4293      	cmp	r3, r2
 800602e:	d901      	bls.n	8006034 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8006030:	2303      	movs	r3, #3
 8006032:	e108      	b.n	8006246 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006034:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800603c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006040:	2b00      	cmp	r3, #0
 8006042:	d0ec      	beq.n	800601e <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8006044:	e060      	b.n	8006108 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006046:	f7fc f8dd 	bl	8002204 <HAL_GetTick>
 800604a:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800604c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006054:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006058:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800605c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006060:	e00a      	b.n	8006078 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006062:	f7fc f8cf 	bl	8002204 <HAL_GetTick>
 8006066:	4602      	mov	r2, r0
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	1ad3      	subs	r3, r2, r3
 800606c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006070:	4293      	cmp	r3, r2
 8006072:	d901      	bls.n	8006078 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8006074:	2303      	movs	r3, #3
 8006076:	e0e6      	b.n	8006246 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006078:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800607c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006080:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006084:	2b00      	cmp	r3, #0
 8006086:	d1ec      	bne.n	8006062 <HAL_RCC_OscConfig+0x50e>
 8006088:	e03e      	b.n	8006108 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800608a:	f7fc f8bb 	bl	8002204 <HAL_GetTick>
 800608e:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006090:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006098:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800609c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80060a4:	e00a      	b.n	80060bc <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060a6:	f7fc f8ad 	bl	8002204 <HAL_GetTick>
 80060aa:	4602      	mov	r2, r0
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d901      	bls.n	80060bc <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80060b8:	2303      	movs	r3, #3
 80060ba:	e0c4      	b.n	8006246 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80060bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d1ec      	bne.n	80060a6 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060cc:	f7fc f89a 	bl	8002204 <HAL_GetTick>
 80060d0:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80060d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060de:	f023 0301 	bic.w	r3, r3, #1
 80060e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80060e6:	e00a      	b.n	80060fe <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060e8:	f7fc f88c 	bl	8002204 <HAL_GetTick>
 80060ec:	4602      	mov	r2, r0
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d901      	bls.n	80060fe <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	e0a3      	b.n	8006246 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 80060fe:	f7ff fb46 	bl	800578e <LL_RCC_LSE_IsReady>
 8006102:	4603      	mov	r3, r0
 8006104:	2b00      	cmp	r3, #0
 8006106:	d1ef      	bne.n	80060e8 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800610c:	2b00      	cmp	r3, #0
 800610e:	f000 8099 	beq.w	8006244 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	2b0c      	cmp	r3, #12
 8006116:	d06c      	beq.n	80061f2 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800611c:	2b02      	cmp	r3, #2
 800611e:	d14b      	bne.n	80061b8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006120:	f7ff fc87 	bl	8005a32 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006124:	f7fc f86e 	bl	8002204 <HAL_GetTick>
 8006128:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800612a:	e008      	b.n	800613e <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800612c:	f7fc f86a 	bl	8002204 <HAL_GetTick>
 8006130:	4602      	mov	r2, r0
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	2b0a      	cmp	r3, #10
 8006138:	d901      	bls.n	800613e <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800613a:	2303      	movs	r3, #3
 800613c:	e083      	b.n	8006246 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800613e:	f7ff fc86 	bl	8005a4e <LL_RCC_PLL_IsReady>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d1f1      	bne.n	800612c <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006148:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800614c:	68da      	ldr	r2, [r3, #12]
 800614e:	4b40      	ldr	r3, [pc, #256]	; (8006250 <HAL_RCC_OscConfig+0x6fc>)
 8006150:	4013      	ands	r3, r2
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800615a:	4311      	orrs	r1, r2
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006160:	0212      	lsls	r2, r2, #8
 8006162:	4311      	orrs	r1, r2
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006168:	4311      	orrs	r1, r2
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800616e:	4311      	orrs	r1, r2
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006174:	430a      	orrs	r2, r1
 8006176:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800617a:	4313      	orrs	r3, r2
 800617c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800617e:	f7ff fc4a 	bl	8005a16 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006182:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800618c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006190:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006192:	f7fc f837 	bl	8002204 <HAL_GetTick>
 8006196:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8006198:	e008      	b.n	80061ac <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800619a:	f7fc f833 	bl	8002204 <HAL_GetTick>
 800619e:	4602      	mov	r2, r0
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	2b0a      	cmp	r3, #10
 80061a6:	d901      	bls.n	80061ac <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80061a8:	2303      	movs	r3, #3
 80061aa:	e04c      	b.n	8006246 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80061ac:	f7ff fc4f 	bl	8005a4e <LL_RCC_PLL_IsReady>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d0f1      	beq.n	800619a <HAL_RCC_OscConfig+0x646>
 80061b6:	e045      	b.n	8006244 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061b8:	f7ff fc3b 	bl	8005a32 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061bc:	f7fc f822 	bl	8002204 <HAL_GetTick>
 80061c0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80061c2:	e008      	b.n	80061d6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061c4:	f7fc f81e 	bl	8002204 <HAL_GetTick>
 80061c8:	4602      	mov	r2, r0
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	2b0a      	cmp	r3, #10
 80061d0:	d901      	bls.n	80061d6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80061d2:	2303      	movs	r3, #3
 80061d4:	e037      	b.n	8006246 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80061d6:	f7ff fc3a 	bl	8005a4e <LL_RCC_PLL_IsReady>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d1f1      	bne.n	80061c4 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80061e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061e4:	68da      	ldr	r2, [r3, #12]
 80061e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061ea:	4b1a      	ldr	r3, [pc, #104]	; (8006254 <HAL_RCC_OscConfig+0x700>)
 80061ec:	4013      	ands	r3, r2
 80061ee:	60cb      	str	r3, [r1, #12]
 80061f0:	e028      	b.n	8006244 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d101      	bne.n	80061fe <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e023      	b.n	8006246 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80061fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	f003 0203 	and.w	r2, r3, #3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006210:	429a      	cmp	r2, r3
 8006212:	d115      	bne.n	8006240 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800621e:	429a      	cmp	r2, r3
 8006220:	d10e      	bne.n	8006240 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800622c:	021b      	lsls	r3, r3, #8
 800622e:	429a      	cmp	r2, r3
 8006230:	d106      	bne.n	8006240 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800623c:	429a      	cmp	r2, r3
 800623e:	d001      	beq.n	8006244 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	e000      	b.n	8006246 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	3720      	adds	r7, #32
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	11c1808c 	.word	0x11c1808c
 8006254:	eefefffc 	.word	0xeefefffc

08006258 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d101      	bne.n	800626c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	e10f      	b.n	800648c <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800626c:	4b89      	ldr	r3, [pc, #548]	; (8006494 <HAL_RCC_ClockConfig+0x23c>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 0307 	and.w	r3, r3, #7
 8006274:	683a      	ldr	r2, [r7, #0]
 8006276:	429a      	cmp	r2, r3
 8006278:	d91b      	bls.n	80062b2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800627a:	4b86      	ldr	r3, [pc, #536]	; (8006494 <HAL_RCC_ClockConfig+0x23c>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f023 0207 	bic.w	r2, r3, #7
 8006282:	4984      	ldr	r1, [pc, #528]	; (8006494 <HAL_RCC_ClockConfig+0x23c>)
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	4313      	orrs	r3, r2
 8006288:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800628a:	f7fb ffbb 	bl	8002204 <HAL_GetTick>
 800628e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006290:	e008      	b.n	80062a4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006292:	f7fb ffb7 	bl	8002204 <HAL_GetTick>
 8006296:	4602      	mov	r2, r0
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	1ad3      	subs	r3, r2, r3
 800629c:	2b02      	cmp	r3, #2
 800629e:	d901      	bls.n	80062a4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80062a0:	2303      	movs	r3, #3
 80062a2:	e0f3      	b.n	800648c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062a4:	4b7b      	ldr	r3, [pc, #492]	; (8006494 <HAL_RCC_ClockConfig+0x23c>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 0307 	and.w	r3, r3, #7
 80062ac:	683a      	ldr	r2, [r7, #0]
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d1ef      	bne.n	8006292 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 0302 	and.w	r3, r3, #2
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d016      	beq.n	80062ec <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	4618      	mov	r0, r3
 80062c4:	f7ff fb2a 	bl	800591c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80062c8:	f7fb ff9c 	bl	8002204 <HAL_GetTick>
 80062cc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80062ce:	e008      	b.n	80062e2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80062d0:	f7fb ff98 	bl	8002204 <HAL_GetTick>
 80062d4:	4602      	mov	r2, r0
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	1ad3      	subs	r3, r2, r3
 80062da:	2b02      	cmp	r3, #2
 80062dc:	d901      	bls.n	80062e2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80062de:	2303      	movs	r3, #3
 80062e0:	e0d4      	b.n	800648c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80062e2:	f7ff fbf2 	bl	8005aca <LL_RCC_IsActiveFlag_HPRE>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d0f1      	beq.n	80062d0 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d016      	beq.n	8006326 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	695b      	ldr	r3, [r3, #20]
 80062fc:	4618      	mov	r0, r3
 80062fe:	f7ff fb20 	bl	8005942 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006302:	f7fb ff7f 	bl	8002204 <HAL_GetTick>
 8006306:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006308:	e008      	b.n	800631c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800630a:	f7fb ff7b 	bl	8002204 <HAL_GetTick>
 800630e:	4602      	mov	r2, r0
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	1ad3      	subs	r3, r2, r3
 8006314:	2b02      	cmp	r3, #2
 8006316:	d901      	bls.n	800631c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006318:	2303      	movs	r3, #3
 800631a:	e0b7      	b.n	800648c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800631c:	f7ff fbe6 	bl	8005aec <LL_RCC_IsActiveFlag_SHDHPRE>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d0f1      	beq.n	800630a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 0304 	and.w	r3, r3, #4
 800632e:	2b00      	cmp	r3, #0
 8006330:	d016      	beq.n	8006360 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	4618      	mov	r0, r3
 8006338:	f7ff fb19 	bl	800596e <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800633c:	f7fb ff62 	bl	8002204 <HAL_GetTick>
 8006340:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006342:	e008      	b.n	8006356 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006344:	f7fb ff5e 	bl	8002204 <HAL_GetTick>
 8006348:	4602      	mov	r2, r0
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	2b02      	cmp	r3, #2
 8006350:	d901      	bls.n	8006356 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8006352:	2303      	movs	r3, #3
 8006354:	e09a      	b.n	800648c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006356:	f7ff fbdb 	bl	8005b10 <LL_RCC_IsActiveFlag_PPRE1>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d0f1      	beq.n	8006344 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 0308 	and.w	r3, r3, #8
 8006368:	2b00      	cmp	r3, #0
 800636a:	d017      	beq.n	800639c <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	00db      	lsls	r3, r3, #3
 8006372:	4618      	mov	r0, r3
 8006374:	f7ff fb0e 	bl	8005994 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006378:	f7fb ff44 	bl	8002204 <HAL_GetTick>
 800637c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800637e:	e008      	b.n	8006392 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006380:	f7fb ff40 	bl	8002204 <HAL_GetTick>
 8006384:	4602      	mov	r2, r0
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	2b02      	cmp	r3, #2
 800638c:	d901      	bls.n	8006392 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	e07c      	b.n	800648c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006392:	f7ff fbce 	bl	8005b32 <LL_RCC_IsActiveFlag_PPRE2>
 8006396:	4603      	mov	r3, r0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d0f1      	beq.n	8006380 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 0301 	and.w	r3, r3, #1
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d043      	beq.n	8006430 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	d106      	bne.n	80063be <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80063b0:	f7ff f99b 	bl	80056ea <LL_RCC_HSE_IsReady>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d11e      	bne.n	80063f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	e066      	b.n	800648c <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	2b03      	cmp	r3, #3
 80063c4:	d106      	bne.n	80063d4 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80063c6:	f7ff fb42 	bl	8005a4e <LL_RCC_PLL_IsReady>
 80063ca:	4603      	mov	r3, r0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d113      	bne.n	80063f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	e05b      	b.n	800648c <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d106      	bne.n	80063ea <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80063dc:	f7ff fa35 	bl	800584a <LL_RCC_MSI_IsReady>
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d108      	bne.n	80063f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e050      	b.n	800648c <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80063ea:	f7ff f9ab 	bl	8005744 <LL_RCC_HSI_IsReady>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d101      	bne.n	80063f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e049      	b.n	800648c <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	4618      	mov	r0, r3
 80063fe:	f7ff fa6f 	bl	80058e0 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006402:	f7fb feff 	bl	8002204 <HAL_GetTick>
 8006406:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006408:	e00a      	b.n	8006420 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800640a:	f7fb fefb 	bl	8002204 <HAL_GetTick>
 800640e:	4602      	mov	r2, r0
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	1ad3      	subs	r3, r2, r3
 8006414:	f241 3288 	movw	r2, #5000	; 0x1388
 8006418:	4293      	cmp	r3, r2
 800641a:	d901      	bls.n	8006420 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 800641c:	2303      	movs	r3, #3
 800641e:	e035      	b.n	800648c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006420:	f7ff fa71 	bl	8005906 <LL_RCC_GetSysClkSource>
 8006424:	4602      	mov	r2, r0
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	429a      	cmp	r2, r3
 800642e:	d1ec      	bne.n	800640a <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006430:	4b18      	ldr	r3, [pc, #96]	; (8006494 <HAL_RCC_ClockConfig+0x23c>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f003 0307 	and.w	r3, r3, #7
 8006438:	683a      	ldr	r2, [r7, #0]
 800643a:	429a      	cmp	r2, r3
 800643c:	d21b      	bcs.n	8006476 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800643e:	4b15      	ldr	r3, [pc, #84]	; (8006494 <HAL_RCC_ClockConfig+0x23c>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f023 0207 	bic.w	r2, r3, #7
 8006446:	4913      	ldr	r1, [pc, #76]	; (8006494 <HAL_RCC_ClockConfig+0x23c>)
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	4313      	orrs	r3, r2
 800644c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800644e:	f7fb fed9 	bl	8002204 <HAL_GetTick>
 8006452:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006454:	e008      	b.n	8006468 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006456:	f7fb fed5 	bl	8002204 <HAL_GetTick>
 800645a:	4602      	mov	r2, r0
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	1ad3      	subs	r3, r2, r3
 8006460:	2b02      	cmp	r3, #2
 8006462:	d901      	bls.n	8006468 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8006464:	2303      	movs	r3, #3
 8006466:	e011      	b.n	800648c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006468:	4b0a      	ldr	r3, [pc, #40]	; (8006494 <HAL_RCC_ClockConfig+0x23c>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 0307 	and.w	r3, r3, #7
 8006470:	683a      	ldr	r2, [r7, #0]
 8006472:	429a      	cmp	r2, r3
 8006474:	d1ef      	bne.n	8006456 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006476:	f000 f8b3 	bl	80065e0 <HAL_RCC_GetHCLKFreq>
 800647a:	4603      	mov	r3, r0
 800647c:	4a06      	ldr	r2, [pc, #24]	; (8006498 <HAL_RCC_ClockConfig+0x240>)
 800647e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8006480:	4b06      	ldr	r3, [pc, #24]	; (800649c <HAL_RCC_ClockConfig+0x244>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4618      	mov	r0, r3
 8006486:	f7fb feb3 	bl	80021f0 <HAL_InitTick>
 800648a:	4603      	mov	r3, r0
}
 800648c:	4618      	mov	r0, r3
 800648e:	3710      	adds	r7, #16
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}
 8006494:	58004000 	.word	0x58004000
 8006498:	20000000 	.word	0x20000000
 800649c:	20000004 	.word	0x20000004

080064a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064a0:	b590      	push	{r4, r7, lr}
 80064a2:	b087      	sub	sp, #28
 80064a4:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80064a6:	2300      	movs	r3, #0
 80064a8:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80064aa:	2300      	movs	r3, #0
 80064ac:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064ae:	f7ff fa2a 	bl	8005906 <LL_RCC_GetSysClkSource>
 80064b2:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80064b4:	f7ff fafe 	bl	8005ab4 <LL_RCC_PLL_GetMainSource>
 80064b8:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d005      	beq.n	80064cc <HAL_RCC_GetSysClockFreq+0x2c>
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	2b0c      	cmp	r3, #12
 80064c4:	d139      	bne.n	800653a <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d136      	bne.n	800653a <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80064cc:	f7ff f9cd 	bl	800586a <LL_RCC_MSI_IsEnabledRangeSelect>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d115      	bne.n	8006502 <HAL_RCC_GetSysClockFreq+0x62>
 80064d6:	f7ff f9c8 	bl	800586a <LL_RCC_MSI_IsEnabledRangeSelect>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d106      	bne.n	80064ee <HAL_RCC_GetSysClockFreq+0x4e>
 80064e0:	f7ff f9d3 	bl	800588a <LL_RCC_MSI_GetRange>
 80064e4:	4603      	mov	r3, r0
 80064e6:	0a1b      	lsrs	r3, r3, #8
 80064e8:	f003 030f 	and.w	r3, r3, #15
 80064ec:	e005      	b.n	80064fa <HAL_RCC_GetSysClockFreq+0x5a>
 80064ee:	f7ff f9d7 	bl	80058a0 <LL_RCC_MSI_GetRangeAfterStandby>
 80064f2:	4603      	mov	r3, r0
 80064f4:	0a1b      	lsrs	r3, r3, #8
 80064f6:	f003 030f 	and.w	r3, r3, #15
 80064fa:	4a36      	ldr	r2, [pc, #216]	; (80065d4 <HAL_RCC_GetSysClockFreq+0x134>)
 80064fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006500:	e014      	b.n	800652c <HAL_RCC_GetSysClockFreq+0x8c>
 8006502:	f7ff f9b2 	bl	800586a <LL_RCC_MSI_IsEnabledRangeSelect>
 8006506:	4603      	mov	r3, r0
 8006508:	2b01      	cmp	r3, #1
 800650a:	d106      	bne.n	800651a <HAL_RCC_GetSysClockFreq+0x7a>
 800650c:	f7ff f9bd 	bl	800588a <LL_RCC_MSI_GetRange>
 8006510:	4603      	mov	r3, r0
 8006512:	091b      	lsrs	r3, r3, #4
 8006514:	f003 030f 	and.w	r3, r3, #15
 8006518:	e005      	b.n	8006526 <HAL_RCC_GetSysClockFreq+0x86>
 800651a:	f7ff f9c1 	bl	80058a0 <LL_RCC_MSI_GetRangeAfterStandby>
 800651e:	4603      	mov	r3, r0
 8006520:	091b      	lsrs	r3, r3, #4
 8006522:	f003 030f 	and.w	r3, r3, #15
 8006526:	4a2b      	ldr	r2, [pc, #172]	; (80065d4 <HAL_RCC_GetSysClockFreq+0x134>)
 8006528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800652c:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d115      	bne.n	8006560 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006538:	e012      	b.n	8006560 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	2b04      	cmp	r3, #4
 800653e:	d102      	bne.n	8006546 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006540:	4b25      	ldr	r3, [pc, #148]	; (80065d8 <HAL_RCC_GetSysClockFreq+0x138>)
 8006542:	617b      	str	r3, [r7, #20]
 8006544:	e00c      	b.n	8006560 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	2b08      	cmp	r3, #8
 800654a:	d109      	bne.n	8006560 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800654c:	f7ff f8a0 	bl	8005690 <LL_RCC_HSE_IsEnabledDiv2>
 8006550:	4603      	mov	r3, r0
 8006552:	2b01      	cmp	r3, #1
 8006554:	d102      	bne.n	800655c <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006556:	4b20      	ldr	r3, [pc, #128]	; (80065d8 <HAL_RCC_GetSysClockFreq+0x138>)
 8006558:	617b      	str	r3, [r7, #20]
 800655a:	e001      	b.n	8006560 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800655c:	4b1f      	ldr	r3, [pc, #124]	; (80065dc <HAL_RCC_GetSysClockFreq+0x13c>)
 800655e:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006560:	f7ff f9d1 	bl	8005906 <LL_RCC_GetSysClkSource>
 8006564:	4603      	mov	r3, r0
 8006566:	2b0c      	cmp	r3, #12
 8006568:	d12f      	bne.n	80065ca <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800656a:	f7ff faa3 	bl	8005ab4 <LL_RCC_PLL_GetMainSource>
 800656e:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2b02      	cmp	r3, #2
 8006574:	d003      	beq.n	800657e <HAL_RCC_GetSysClockFreq+0xde>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2b03      	cmp	r3, #3
 800657a:	d003      	beq.n	8006584 <HAL_RCC_GetSysClockFreq+0xe4>
 800657c:	e00d      	b.n	800659a <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800657e:	4b16      	ldr	r3, [pc, #88]	; (80065d8 <HAL_RCC_GetSysClockFreq+0x138>)
 8006580:	60fb      	str	r3, [r7, #12]
        break;
 8006582:	e00d      	b.n	80065a0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006584:	f7ff f884 	bl	8005690 <LL_RCC_HSE_IsEnabledDiv2>
 8006588:	4603      	mov	r3, r0
 800658a:	2b01      	cmp	r3, #1
 800658c:	d102      	bne.n	8006594 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800658e:	4b12      	ldr	r3, [pc, #72]	; (80065d8 <HAL_RCC_GetSysClockFreq+0x138>)
 8006590:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006592:	e005      	b.n	80065a0 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8006594:	4b11      	ldr	r3, [pc, #68]	; (80065dc <HAL_RCC_GetSysClockFreq+0x13c>)
 8006596:	60fb      	str	r3, [r7, #12]
        break;
 8006598:	e002      	b.n	80065a0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	60fb      	str	r3, [r7, #12]
        break;
 800659e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80065a0:	f7ff fa66 	bl	8005a70 <LL_RCC_PLL_GetN>
 80065a4:	4602      	mov	r2, r0
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	fb03 f402 	mul.w	r4, r3, r2
 80065ac:	f7ff fa77 	bl	8005a9e <LL_RCC_PLL_GetDivider>
 80065b0:	4603      	mov	r3, r0
 80065b2:	091b      	lsrs	r3, r3, #4
 80065b4:	3301      	adds	r3, #1
 80065b6:	fbb4 f4f3 	udiv	r4, r4, r3
 80065ba:	f7ff fa65 	bl	8005a88 <LL_RCC_PLL_GetR>
 80065be:	4603      	mov	r3, r0
 80065c0:	0f5b      	lsrs	r3, r3, #29
 80065c2:	3301      	adds	r3, #1
 80065c4:	fbb4 f3f3 	udiv	r3, r4, r3
 80065c8:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80065ca:	697b      	ldr	r3, [r7, #20]
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	371c      	adds	r7, #28
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd90      	pop	{r4, r7, pc}
 80065d4:	0801e668 	.word	0x0801e668
 80065d8:	00f42400 	.word	0x00f42400
 80065dc:	01e84800 	.word	0x01e84800

080065e0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065e0:	b598      	push	{r3, r4, r7, lr}
 80065e2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80065e4:	f7ff ff5c 	bl	80064a0 <HAL_RCC_GetSysClockFreq>
 80065e8:	4604      	mov	r4, r0
 80065ea:	f7ff f9e6 	bl	80059ba <LL_RCC_GetAHBPrescaler>
 80065ee:	4603      	mov	r3, r0
 80065f0:	091b      	lsrs	r3, r3, #4
 80065f2:	f003 030f 	and.w	r3, r3, #15
 80065f6:	4a03      	ldr	r2, [pc, #12]	; (8006604 <HAL_RCC_GetHCLKFreq+0x24>)
 80065f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065fc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006600:	4618      	mov	r0, r3
 8006602:	bd98      	pop	{r3, r4, r7, pc}
 8006604:	0801e608 	.word	0x0801e608

08006608 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006608:	b598      	push	{r3, r4, r7, lr}
 800660a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800660c:	f7ff ffe8 	bl	80065e0 <HAL_RCC_GetHCLKFreq>
 8006610:	4604      	mov	r4, r0
 8006612:	f7ff f9ea 	bl	80059ea <LL_RCC_GetAPB1Prescaler>
 8006616:	4603      	mov	r3, r0
 8006618:	0a1b      	lsrs	r3, r3, #8
 800661a:	4a03      	ldr	r2, [pc, #12]	; (8006628 <HAL_RCC_GetPCLK1Freq+0x20>)
 800661c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006620:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006624:	4618      	mov	r0, r3
 8006626:	bd98      	pop	{r3, r4, r7, pc}
 8006628:	0801e648 	.word	0x0801e648

0800662c <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800662c:	b598      	push	{r3, r4, r7, lr}
 800662e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006630:	f7ff ffd6 	bl	80065e0 <HAL_RCC_GetHCLKFreq>
 8006634:	4604      	mov	r4, r0
 8006636:	f7ff f9e3 	bl	8005a00 <LL_RCC_GetAPB2Prescaler>
 800663a:	4603      	mov	r3, r0
 800663c:	0adb      	lsrs	r3, r3, #11
 800663e:	4a03      	ldr	r2, [pc, #12]	; (800664c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006644:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006648:	4618      	mov	r0, r3
 800664a:	bd98      	pop	{r3, r4, r7, pc}
 800664c:	0801e648 	.word	0x0801e648

08006650 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006650:	b590      	push	{r4, r7, lr}
 8006652:	b085      	sub	sp, #20
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	091b      	lsrs	r3, r3, #4
 800665c:	f003 030f 	and.w	r3, r3, #15
 8006660:	4a10      	ldr	r2, [pc, #64]	; (80066a4 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8006662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006666:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8006668:	f7ff f9b2 	bl	80059d0 <LL_RCC_GetAHB3Prescaler>
 800666c:	4603      	mov	r3, r0
 800666e:	091b      	lsrs	r3, r3, #4
 8006670:	f003 030f 	and.w	r3, r3, #15
 8006674:	4a0c      	ldr	r2, [pc, #48]	; (80066a8 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8006676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800667a:	68fa      	ldr	r2, [r7, #12]
 800667c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006680:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	4a09      	ldr	r2, [pc, #36]	; (80066ac <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8006686:	fba2 2303 	umull	r2, r3, r2, r3
 800668a:	0c9c      	lsrs	r4, r3, #18
 800668c:	f7fe ff58 	bl	8005540 <HAL_PWREx_GetVoltageRange>
 8006690:	4603      	mov	r3, r0
 8006692:	4619      	mov	r1, r3
 8006694:	4620      	mov	r0, r4
 8006696:	f000 f80b 	bl	80066b0 <RCC_SetFlashLatency>
 800669a:	4603      	mov	r3, r0
}
 800669c:	4618      	mov	r0, r3
 800669e:	3714      	adds	r7, #20
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd90      	pop	{r4, r7, pc}
 80066a4:	0801e668 	.word	0x0801e668
 80066a8:	0801e608 	.word	0x0801e608
 80066ac:	431bde83 	.word	0x431bde83

080066b0 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b08e      	sub	sp, #56	; 0x38
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80066ba:	4a3a      	ldr	r2, [pc, #232]	; (80067a4 <RCC_SetFlashLatency+0xf4>)
 80066bc:	f107 0320 	add.w	r3, r7, #32
 80066c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80066c4:	6018      	str	r0, [r3, #0]
 80066c6:	3304      	adds	r3, #4
 80066c8:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80066ca:	4a37      	ldr	r2, [pc, #220]	; (80067a8 <RCC_SetFlashLatency+0xf8>)
 80066cc:	f107 0318 	add.w	r3, r7, #24
 80066d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80066d4:	6018      	str	r0, [r3, #0]
 80066d6:	3304      	adds	r3, #4
 80066d8:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80066da:	4a34      	ldr	r2, [pc, #208]	; (80067ac <RCC_SetFlashLatency+0xfc>)
 80066dc:	f107 030c 	add.w	r3, r7, #12
 80066e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80066e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80066e6:	2300      	movs	r3, #0
 80066e8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066f0:	d11b      	bne.n	800672a <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80066f2:	2300      	movs	r3, #0
 80066f4:	633b      	str	r3, [r7, #48]	; 0x30
 80066f6:	e014      	b.n	8006722 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80066f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066fa:	005b      	lsls	r3, r3, #1
 80066fc:	3338      	adds	r3, #56	; 0x38
 80066fe:	443b      	add	r3, r7
 8006700:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8006704:	461a      	mov	r2, r3
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4293      	cmp	r3, r2
 800670a:	d807      	bhi.n	800671c <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800670c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	3338      	adds	r3, #56	; 0x38
 8006712:	443b      	add	r3, r7
 8006714:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006718:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800671a:	e021      	b.n	8006760 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800671c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800671e:	3301      	adds	r3, #1
 8006720:	633b      	str	r3, [r7, #48]	; 0x30
 8006722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006724:	2b02      	cmp	r3, #2
 8006726:	d9e7      	bls.n	80066f8 <RCC_SetFlashLatency+0x48>
 8006728:	e01a      	b.n	8006760 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800672a:	2300      	movs	r3, #0
 800672c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800672e:	e014      	b.n	800675a <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006732:	005b      	lsls	r3, r3, #1
 8006734:	3338      	adds	r3, #56	; 0x38
 8006736:	443b      	add	r3, r7
 8006738:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 800673c:	461a      	mov	r2, r3
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4293      	cmp	r3, r2
 8006742:	d807      	bhi.n	8006754 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	3338      	adds	r3, #56	; 0x38
 800674a:	443b      	add	r3, r7
 800674c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006750:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006752:	e005      	b.n	8006760 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006756:	3301      	adds	r3, #1
 8006758:	62fb      	str	r3, [r7, #44]	; 0x2c
 800675a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800675c:	2b02      	cmp	r3, #2
 800675e:	d9e7      	bls.n	8006730 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006760:	4b13      	ldr	r3, [pc, #76]	; (80067b0 <RCC_SetFlashLatency+0x100>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f023 0207 	bic.w	r2, r3, #7
 8006768:	4911      	ldr	r1, [pc, #68]	; (80067b0 <RCC_SetFlashLatency+0x100>)
 800676a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800676c:	4313      	orrs	r3, r2
 800676e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006770:	f7fb fd48 	bl	8002204 <HAL_GetTick>
 8006774:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006776:	e008      	b.n	800678a <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006778:	f7fb fd44 	bl	8002204 <HAL_GetTick>
 800677c:	4602      	mov	r2, r0
 800677e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	2b02      	cmp	r3, #2
 8006784:	d901      	bls.n	800678a <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8006786:	2303      	movs	r3, #3
 8006788:	e007      	b.n	800679a <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800678a:	4b09      	ldr	r3, [pc, #36]	; (80067b0 <RCC_SetFlashLatency+0x100>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 0307 	and.w	r3, r3, #7
 8006792:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006794:	429a      	cmp	r2, r3
 8006796:	d1ef      	bne.n	8006778 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3738      	adds	r7, #56	; 0x38
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	0801dd04 	.word	0x0801dd04
 80067a8:	0801dd0c 	.word	0x0801dd0c
 80067ac:	0801dd14 	.word	0x0801dd14
 80067b0:	58004000 	.word	0x58004000

080067b4 <LL_RCC_LSE_IsReady>:
{
 80067b4:	b480      	push	{r7}
 80067b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80067b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067c0:	f003 0302 	and.w	r3, r3, #2
 80067c4:	2b02      	cmp	r3, #2
 80067c6:	d101      	bne.n	80067cc <LL_RCC_LSE_IsReady+0x18>
 80067c8:	2301      	movs	r3, #1
 80067ca:	e000      	b.n	80067ce <LL_RCC_LSE_IsReady+0x1a>
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bc80      	pop	{r7}
 80067d4:	4770      	bx	lr

080067d6 <LL_RCC_SetUSARTClockSource>:
{
 80067d6:	b480      	push	{r7}
 80067d8:	b083      	sub	sp, #12
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80067de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067e2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	0c1b      	lsrs	r3, r3, #16
 80067ea:	43db      	mvns	r3, r3
 80067ec:	401a      	ands	r2, r3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067f6:	4313      	orrs	r3, r2
 80067f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80067fc:	bf00      	nop
 80067fe:	370c      	adds	r7, #12
 8006800:	46bd      	mov	sp, r7
 8006802:	bc80      	pop	{r7}
 8006804:	4770      	bx	lr

08006806 <LL_RCC_SetI2SClockSource>:
{
 8006806:	b480      	push	{r7}
 8006808:	b083      	sub	sp, #12
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800680e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006816:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800681a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4313      	orrs	r3, r2
 8006822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006826:	bf00      	nop
 8006828:	370c      	adds	r7, #12
 800682a:	46bd      	mov	sp, r7
 800682c:	bc80      	pop	{r7}
 800682e:	4770      	bx	lr

08006830 <LL_RCC_SetLPUARTClockSource>:
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006838:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800683c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006840:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006844:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4313      	orrs	r3, r2
 800684c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006850:	bf00      	nop
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	bc80      	pop	{r7}
 8006858:	4770      	bx	lr

0800685a <LL_RCC_SetI2CClockSource>:
{
 800685a:	b480      	push	{r7}
 800685c:	b083      	sub	sp, #12
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006862:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006866:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	091b      	lsrs	r3, r3, #4
 800686e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006872:	43db      	mvns	r3, r3
 8006874:	401a      	ands	r2, r3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	011b      	lsls	r3, r3, #4
 800687a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800687e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006882:	4313      	orrs	r3, r2
 8006884:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006888:	bf00      	nop
 800688a:	370c      	adds	r7, #12
 800688c:	46bd      	mov	sp, r7
 800688e:	bc80      	pop	{r7}
 8006890:	4770      	bx	lr

08006892 <LL_RCC_SetLPTIMClockSource>:
{
 8006892:	b480      	push	{r7}
 8006894:	b083      	sub	sp, #12
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800689a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800689e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	0c1b      	lsrs	r3, r3, #16
 80068a6:	041b      	lsls	r3, r3, #16
 80068a8:	43db      	mvns	r3, r3
 80068aa:	401a      	ands	r2, r3
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	041b      	lsls	r3, r3, #16
 80068b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80068b4:	4313      	orrs	r3, r2
 80068b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80068ba:	bf00      	nop
 80068bc:	370c      	adds	r7, #12
 80068be:	46bd      	mov	sp, r7
 80068c0:	bc80      	pop	{r7}
 80068c2:	4770      	bx	lr

080068c4 <LL_RCC_SetRNGClockSource>:
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80068cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068d4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80068d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4313      	orrs	r3, r2
 80068e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80068e4:	bf00      	nop
 80068e6:	370c      	adds	r7, #12
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bc80      	pop	{r7}
 80068ec:	4770      	bx	lr

080068ee <LL_RCC_SetADCClockSource>:
{
 80068ee:	b480      	push	{r7}
 80068f0:	b083      	sub	sp, #12
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80068f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006902:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4313      	orrs	r3, r2
 800690a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800690e:	bf00      	nop
 8006910:	370c      	adds	r7, #12
 8006912:	46bd      	mov	sp, r7
 8006914:	bc80      	pop	{r7}
 8006916:	4770      	bx	lr

08006918 <LL_RCC_SetRTCClockSource>:
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006928:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800692c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4313      	orrs	r3, r2
 8006934:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006938:	bf00      	nop
 800693a:	370c      	adds	r7, #12
 800693c:	46bd      	mov	sp, r7
 800693e:	bc80      	pop	{r7}
 8006940:	4770      	bx	lr

08006942 <LL_RCC_GetRTCClockSource>:
{
 8006942:	b480      	push	{r7}
 8006944:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006946:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800694a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800694e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006952:	4618      	mov	r0, r3
 8006954:	46bd      	mov	sp, r7
 8006956:	bc80      	pop	{r7}
 8006958:	4770      	bx	lr

0800695a <LL_RCC_ForceBackupDomainReset>:
{
 800695a:	b480      	push	{r7}
 800695c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800695e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006966:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800696a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800696e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006972:	bf00      	nop
 8006974:	46bd      	mov	sp, r7
 8006976:	bc80      	pop	{r7}
 8006978:	4770      	bx	lr

0800697a <LL_RCC_ReleaseBackupDomainReset>:
{
 800697a:	b480      	push	{r7}
 800697c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800697e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006986:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800698a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800698e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006992:	bf00      	nop
 8006994:	46bd      	mov	sp, r7
 8006996:	bc80      	pop	{r7}
 8006998:	4770      	bx	lr
	...

0800699c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b086      	sub	sp, #24
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80069a4:	2300      	movs	r3, #0
 80069a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80069a8:	2300      	movs	r3, #0
 80069aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80069ac:	2300      	movs	r3, #0
 80069ae:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d058      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80069bc:	f7fe fd7e 	bl	80054bc <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80069c0:	f7fb fc20 	bl	8002204 <HAL_GetTick>
 80069c4:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80069c6:	e009      	b.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069c8:	f7fb fc1c 	bl	8002204 <HAL_GetTick>
 80069cc:	4602      	mov	r2, r0
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	2b02      	cmp	r3, #2
 80069d4:	d902      	bls.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80069d6:	2303      	movs	r3, #3
 80069d8:	74fb      	strb	r3, [r7, #19]
        break;
 80069da:	e006      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80069dc:	4b7b      	ldr	r3, [pc, #492]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069e8:	d1ee      	bne.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80069ea:	7cfb      	ldrb	r3, [r7, #19]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d13c      	bne.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80069f0:	f7ff ffa7 	bl	8006942 <LL_RCC_GetRTCClockSource>
 80069f4:	4602      	mov	r2, r0
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d00f      	beq.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80069fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a0a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006a0c:	f7ff ffa5 	bl	800695a <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006a10:	f7ff ffb3 	bl	800697a <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006a14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	f003 0302 	and.w	r3, r3, #2
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d014      	beq.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a28:	f7fb fbec 	bl	8002204 <HAL_GetTick>
 8006a2c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8006a2e:	e00b      	b.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a30:	f7fb fbe8 	bl	8002204 <HAL_GetTick>
 8006a34:	4602      	mov	r2, r0
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	1ad3      	subs	r3, r2, r3
 8006a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d902      	bls.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8006a42:	2303      	movs	r3, #3
 8006a44:	74fb      	strb	r3, [r7, #19]
            break;
 8006a46:	e004      	b.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8006a48:	f7ff feb4 	bl	80067b4 <LL_RCC_LSE_IsReady>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d1ee      	bne.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8006a52:	7cfb      	ldrb	r3, [r7, #19]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d105      	bne.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f7ff ff5b 	bl	8006918 <LL_RCC_SetRTCClockSource>
 8006a62:	e004      	b.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006a64:	7cfb      	ldrb	r3, [r7, #19]
 8006a66:	74bb      	strb	r3, [r7, #18]
 8006a68:	e001      	b.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a6a:	7cfb      	ldrb	r3, [r7, #19]
 8006a6c:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f003 0301 	and.w	r3, r3, #1
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d004      	beq.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f7ff fea9 	bl	80067d6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f003 0302 	and.w	r3, r3, #2
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d004      	beq.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	4618      	mov	r0, r3
 8006a96:	f7ff fe9e 	bl	80067d6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f003 0320 	and.w	r3, r3, #32
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d004      	beq.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f7ff fec0 	bl	8006830 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d004      	beq.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6a1b      	ldr	r3, [r3, #32]
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f7ff fee6 	bl	8006892 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d004      	beq.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f7ff fedb 	bl	8006892 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d004      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aec:	4618      	mov	r0, r3
 8006aee:	f7ff fed0 	bl	8006892 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d004      	beq.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	695b      	ldr	r3, [r3, #20]
 8006b02:	4618      	mov	r0, r3
 8006b04:	f7ff fea9 	bl	800685a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d004      	beq.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	699b      	ldr	r3, [r3, #24]
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f7ff fe9e 	bl	800685a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d004      	beq.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	69db      	ldr	r3, [r3, #28]
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f7ff fe93 	bl	800685a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 0310 	and.w	r3, r3, #16
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d011      	beq.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	4618      	mov	r0, r3
 8006b46:	f7ff fe5e 	bl	8006806 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b52:	d107      	bne.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8006b54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b62:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d010      	beq.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b74:	4618      	mov	r0, r3
 8006b76:	f7ff fea5 	bl	80068c4 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d107      	bne.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006b82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b86:	68db      	ldr	r3, [r3, #12]
 8006b88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b90:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d011      	beq.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f7ff fea3 	bl	80068ee <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bb0:	d107      	bne.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006bb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bc0:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8006bc2:	7cbb      	ldrb	r3, [r7, #18]
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3718      	adds	r7, #24
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}
 8006bcc:	58000400 	.word	0x58000400

08006bd0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b084      	sub	sp, #16
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d071      	beq.n	8006cc6 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d106      	bne.n	8006bfc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f7fa ff7c 	bl	8001af4 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2202      	movs	r2, #2
 8006c00:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006c04:	4b32      	ldr	r3, [pc, #200]	; (8006cd0 <HAL_RTC_Init+0x100>)
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	f003 0310 	and.w	r3, r3, #16
 8006c0c:	2b10      	cmp	r3, #16
 8006c0e:	d051      	beq.n	8006cb4 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c10:	4b2f      	ldr	r3, [pc, #188]	; (8006cd0 <HAL_RTC_Init+0x100>)
 8006c12:	22ca      	movs	r2, #202	; 0xca
 8006c14:	625a      	str	r2, [r3, #36]	; 0x24
 8006c16:	4b2e      	ldr	r3, [pc, #184]	; (8006cd0 <HAL_RTC_Init+0x100>)
 8006c18:	2253      	movs	r2, #83	; 0x53
 8006c1a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 fa11 	bl	8007044 <RTC_EnterInitMode>
 8006c22:	4603      	mov	r3, r0
 8006c24:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8006c26:	7bfb      	ldrb	r3, [r7, #15]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d13f      	bne.n	8006cac <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006c2c:	4b28      	ldr	r3, [pc, #160]	; (8006cd0 <HAL_RTC_Init+0x100>)
 8006c2e:	699b      	ldr	r3, [r3, #24]
 8006c30:	4a27      	ldr	r2, [pc, #156]	; (8006cd0 <HAL_RTC_Init+0x100>)
 8006c32:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8006c36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c3a:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006c3c:	4b24      	ldr	r3, [pc, #144]	; (8006cd0 <HAL_RTC_Init+0x100>)
 8006c3e:	699a      	ldr	r2, [r3, #24]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6859      	ldr	r1, [r3, #4]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	691b      	ldr	r3, [r3, #16]
 8006c48:	4319      	orrs	r1, r3
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	699b      	ldr	r3, [r3, #24]
 8006c4e:	430b      	orrs	r3, r1
 8006c50:	491f      	ldr	r1, [pc, #124]	; (8006cd0 <HAL_RTC_Init+0x100>)
 8006c52:	4313      	orrs	r3, r2
 8006c54:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	68da      	ldr	r2, [r3, #12]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	041b      	lsls	r3, r3, #16
 8006c60:	491b      	ldr	r1, [pc, #108]	; (8006cd0 <HAL_RTC_Init+0x100>)
 8006c62:	4313      	orrs	r3, r2
 8006c64:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8006c66:	4b1a      	ldr	r3, [pc, #104]	; (8006cd0 <HAL_RTC_Init+0x100>)
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c76:	430b      	orrs	r3, r1
 8006c78:	4915      	ldr	r1, [pc, #84]	; (8006cd0 <HAL_RTC_Init+0x100>)
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 fa14 	bl	80070ac <RTC_ExitInitMode>
 8006c84:	4603      	mov	r3, r0
 8006c86:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8006c88:	7bfb      	ldrb	r3, [r7, #15]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d10e      	bne.n	8006cac <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8006c8e:	4b10      	ldr	r3, [pc, #64]	; (8006cd0 <HAL_RTC_Init+0x100>)
 8006c90:	699b      	ldr	r3, [r3, #24]
 8006c92:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a19      	ldr	r1, [r3, #32]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	69db      	ldr	r3, [r3, #28]
 8006c9e:	4319      	orrs	r1, r3
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	695b      	ldr	r3, [r3, #20]
 8006ca4:	430b      	orrs	r3, r1
 8006ca6:	490a      	ldr	r1, [pc, #40]	; (8006cd0 <HAL_RTC_Init+0x100>)
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006cac:	4b08      	ldr	r3, [pc, #32]	; (8006cd0 <HAL_RTC_Init+0x100>)
 8006cae:	22ff      	movs	r2, #255	; 0xff
 8006cb0:	625a      	str	r2, [r3, #36]	; 0x24
 8006cb2:	e001      	b.n	8006cb8 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006cb8:	7bfb      	ldrb	r3, [r7, #15]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d103      	bne.n	8006cc6 <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8006cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3710      	adds	r7, #16
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}
 8006cd0:	40002800 	.word	0x40002800

08006cd4 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006cd4:	b590      	push	{r4, r7, lr}
 8006cd6:	b087      	sub	sp, #28
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d101      	bne.n	8006cf2 <HAL_RTC_SetAlarm_IT+0x1e>
 8006cee:	2302      	movs	r3, #2
 8006cf0:	e0f3      	b.n	8006eda <HAL_RTC_SetAlarm_IT+0x206>
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2202      	movs	r2, #2
 8006cfe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8006d02:	4b78      	ldr	r3, [pc, #480]	; (8006ee4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d0a:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d12:	d06a      	beq.n	8006dea <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d13a      	bne.n	8006d90 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006d1a:	4b72      	ldr	r3, [pc, #456]	; (8006ee4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006d1c:	699b      	ldr	r3, [r3, #24]
 8006d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d102      	bne.n	8006d2c <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	695b      	ldr	r3, [r3, #20]
 8006d30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f000 f9f5 	bl	8007128 <RTC_ByteToBcd2>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	785b      	ldrb	r3, [r3, #1]
 8006d46:	4618      	mov	r0, r3
 8006d48:	f000 f9ee 	bl	8007128 <RTC_ByteToBcd2>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006d50:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	789b      	ldrb	r3, [r3, #2]
 8006d56:	4618      	mov	r0, r3
 8006d58:	f000 f9e6 	bl	8007128 <RTC_ByteToBcd2>
 8006d5c:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006d5e:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	78db      	ldrb	r3, [r3, #3]
 8006d66:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006d68:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006d72:	4618      	mov	r0, r3
 8006d74:	f000 f9d8 	bl	8007128 <RTC_ByteToBcd2>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006d7c:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006d84:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	617b      	str	r3, [r7, #20]
 8006d8e:	e02c      	b.n	8006dea <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	695b      	ldr	r3, [r3, #20]
 8006d94:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8006d98:	d00d      	beq.n	8006db6 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	695b      	ldr	r3, [r3, #20]
 8006d9e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006da2:	d008      	beq.n	8006db6 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006da4:	4b4f      	ldr	r3, [pc, #316]	; (8006ee4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006da6:	699b      	ldr	r3, [r3, #24]
 8006da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d102      	bne.n	8006db6 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	2200      	movs	r2, #0
 8006db4:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	785b      	ldrb	r3, [r3, #1]
 8006dc0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006dc2:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006dc4:	68ba      	ldr	r2, [r7, #8]
 8006dc6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006dc8:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	78db      	ldrb	r3, [r3, #3]
 8006dce:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006dd0:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006dd8:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006dda:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006de0:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006de6:	4313      	orrs	r3, r2
 8006de8:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006dea:	4b3e      	ldr	r3, [pc, #248]	; (8006ee4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006dec:	22ca      	movs	r2, #202	; 0xca
 8006dee:	625a      	str	r2, [r3, #36]	; 0x24
 8006df0:	4b3c      	ldr	r3, [pc, #240]	; (8006ee4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006df2:	2253      	movs	r2, #83	; 0x53
 8006df4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dfe:	d12c      	bne.n	8006e5a <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006e00:	4b38      	ldr	r3, [pc, #224]	; (8006ee4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006e02:	699b      	ldr	r3, [r3, #24]
 8006e04:	4a37      	ldr	r2, [pc, #220]	; (8006ee4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006e06:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006e0a:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006e0c:	4b35      	ldr	r3, [pc, #212]	; (8006ee4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006e0e:	2201      	movs	r2, #1
 8006e10:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e18:	d107      	bne.n	8006e2a <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	699a      	ldr	r2, [r3, #24]
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	69db      	ldr	r3, [r3, #28]
 8006e22:	4930      	ldr	r1, [pc, #192]	; (8006ee4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006e24:	4313      	orrs	r3, r2
 8006e26:	644b      	str	r3, [r1, #68]	; 0x44
 8006e28:	e006      	b.n	8006e38 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8006e2a:	4a2e      	ldr	r2, [pc, #184]	; (8006ee4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8006e30:	4a2c      	ldr	r2, [pc, #176]	; (8006ee4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	699b      	ldr	r3, [r3, #24]
 8006e36:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8006e38:	4a2a      	ldr	r2, [pc, #168]	; (8006ee4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e44:	f043 0201 	orr.w	r2, r3, #1
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006e4c:	4b25      	ldr	r3, [pc, #148]	; (8006ee4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006e4e:	699b      	ldr	r3, [r3, #24]
 8006e50:	4a24      	ldr	r2, [pc, #144]	; (8006ee4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006e52:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8006e56:	6193      	str	r3, [r2, #24]
 8006e58:	e02b      	b.n	8006eb2 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006e5a:	4b22      	ldr	r3, [pc, #136]	; (8006ee4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006e5c:	699b      	ldr	r3, [r3, #24]
 8006e5e:	4a21      	ldr	r2, [pc, #132]	; (8006ee4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006e60:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8006e64:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006e66:	4b1f      	ldr	r3, [pc, #124]	; (8006ee4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006e68:	2202      	movs	r2, #2
 8006e6a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e72:	d107      	bne.n	8006e84 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	699a      	ldr	r2, [r3, #24]
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	69db      	ldr	r3, [r3, #28]
 8006e7c:	4919      	ldr	r1, [pc, #100]	; (8006ee4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006e82:	e006      	b.n	8006e92 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8006e84:	4a17      	ldr	r2, [pc, #92]	; (8006ee4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8006e8a:	4a16      	ldr	r2, [pc, #88]	; (8006ee4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	699b      	ldr	r3, [r3, #24]
 8006e90:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8006e92:	4a14      	ldr	r2, [pc, #80]	; (8006ee4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e9e:	f043 0202 	orr.w	r2, r3, #2
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006ea6:	4b0f      	ldr	r3, [pc, #60]	; (8006ee4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006ea8:	699b      	ldr	r3, [r3, #24]
 8006eaa:	4a0e      	ldr	r2, [pc, #56]	; (8006ee4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006eac:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8006eb0:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006eb2:	4b0d      	ldr	r3, [pc, #52]	; (8006ee8 <HAL_RTC_SetAlarm_IT+0x214>)
 8006eb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006eb8:	4a0b      	ldr	r2, [pc, #44]	; (8006ee8 <HAL_RTC_SetAlarm_IT+0x214>)
 8006eba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ebe:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ec2:	4b08      	ldr	r3, [pc, #32]	; (8006ee4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006ec4:	22ff      	movs	r2, #255	; 0xff
 8006ec6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006ed8:	2300      	movs	r3, #0
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	371c      	adds	r7, #28
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd90      	pop	{r4, r7, pc}
 8006ee2:	bf00      	nop
 8006ee4:	40002800 	.word	0x40002800
 8006ee8:	58000800 	.word	0x58000800

08006eec <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d101      	bne.n	8006f04 <HAL_RTC_DeactivateAlarm+0x18>
 8006f00:	2302      	movs	r3, #2
 8006f02:	e048      	b.n	8006f96 <HAL_RTC_DeactivateAlarm+0xaa>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2202      	movs	r2, #2
 8006f10:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006f14:	4b22      	ldr	r3, [pc, #136]	; (8006fa0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006f16:	22ca      	movs	r2, #202	; 0xca
 8006f18:	625a      	str	r2, [r3, #36]	; 0x24
 8006f1a:	4b21      	ldr	r3, [pc, #132]	; (8006fa0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006f1c:	2253      	movs	r2, #83	; 0x53
 8006f1e:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f26:	d115      	bne.n	8006f54 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006f28:	4b1d      	ldr	r3, [pc, #116]	; (8006fa0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006f2a:	699b      	ldr	r3, [r3, #24]
 8006f2c:	4a1c      	ldr	r2, [pc, #112]	; (8006fa0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006f2e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006f32:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8006f34:	4b1a      	ldr	r3, [pc, #104]	; (8006fa0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f38:	4a19      	ldr	r2, [pc, #100]	; (8006fa0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006f3a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f3e:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f44:	f023 0201 	bic.w	r2, r3, #1
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006f4c:	4b14      	ldr	r3, [pc, #80]	; (8006fa0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006f4e:	2201      	movs	r2, #1
 8006f50:	65da      	str	r2, [r3, #92]	; 0x5c
 8006f52:	e014      	b.n	8006f7e <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006f54:	4b12      	ldr	r3, [pc, #72]	; (8006fa0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006f56:	699b      	ldr	r3, [r3, #24]
 8006f58:	4a11      	ldr	r2, [pc, #68]	; (8006fa0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006f5a:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8006f5e:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8006f60:	4b0f      	ldr	r3, [pc, #60]	; (8006fa0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006f62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f64:	4a0e      	ldr	r2, [pc, #56]	; (8006fa0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006f66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f6a:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f70:	f023 0202 	bic.w	r2, r3, #2
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006f78:	4b09      	ldr	r3, [pc, #36]	; (8006fa0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006f7a:	2202      	movs	r2, #2
 8006f7c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f7e:	4b08      	ldr	r3, [pc, #32]	; (8006fa0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006f80:	22ff      	movs	r2, #255	; 0xff
 8006f82:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	370c      	adds	r7, #12
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bc80      	pop	{r7}
 8006f9e:	4770      	bx	lr
 8006fa0:	40002800 	.word	0x40002800

08006fa4 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8006fac:	4b11      	ldr	r3, [pc, #68]	; (8006ff4 <HAL_RTC_AlarmIRQHandler+0x50>)
 8006fae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb4:	4013      	ands	r3, r2
 8006fb6:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f003 0301 	and.w	r3, r3, #1
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d005      	beq.n	8006fce <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006fc2:	4b0c      	ldr	r3, [pc, #48]	; (8006ff4 <HAL_RTC_AlarmIRQHandler+0x50>)
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f7fb fadc 	bl	8002586 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f003 0302 	and.w	r3, r3, #2
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d005      	beq.n	8006fe4 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006fd8:	4b06      	ldr	r3, [pc, #24]	; (8006ff4 <HAL_RTC_AlarmIRQHandler+0x50>)
 8006fda:	2202      	movs	r2, #2
 8006fdc:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 f94a 	bl	8007278 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8006fec:	bf00      	nop
 8006fee:	3710      	adds	r7, #16
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}
 8006ff4:	40002800 	.word	0x40002800

08006ff8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b084      	sub	sp, #16
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8007000:	4b0f      	ldr	r3, [pc, #60]	; (8007040 <HAL_RTC_WaitForSynchro+0x48>)
 8007002:	68db      	ldr	r3, [r3, #12]
 8007004:	4a0e      	ldr	r2, [pc, #56]	; (8007040 <HAL_RTC_WaitForSynchro+0x48>)
 8007006:	f023 0320 	bic.w	r3, r3, #32
 800700a:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800700c:	f7fb f8fa 	bl	8002204 <HAL_GetTick>
 8007010:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8007012:	e009      	b.n	8007028 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007014:	f7fb f8f6 	bl	8002204 <HAL_GetTick>
 8007018:	4602      	mov	r2, r0
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	1ad3      	subs	r3, r2, r3
 800701e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007022:	d901      	bls.n	8007028 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8007024:	2303      	movs	r3, #3
 8007026:	e006      	b.n	8007036 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8007028:	4b05      	ldr	r3, [pc, #20]	; (8007040 <HAL_RTC_WaitForSynchro+0x48>)
 800702a:	68db      	ldr	r3, [r3, #12]
 800702c:	f003 0320 	and.w	r3, r3, #32
 8007030:	2b00      	cmp	r3, #0
 8007032:	d0ef      	beq.n	8007014 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8007034:	2300      	movs	r3, #0
}
 8007036:	4618      	mov	r0, r3
 8007038:	3710      	adds	r7, #16
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	40002800 	.word	0x40002800

08007044 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800704c:	2300      	movs	r3, #0
 800704e:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8007050:	4b15      	ldr	r3, [pc, #84]	; (80070a8 <RTC_EnterInitMode+0x64>)
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007058:	2b00      	cmp	r3, #0
 800705a:	d120      	bne.n	800709e <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800705c:	4b12      	ldr	r3, [pc, #72]	; (80070a8 <RTC_EnterInitMode+0x64>)
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	4a11      	ldr	r2, [pc, #68]	; (80070a8 <RTC_EnterInitMode+0x64>)
 8007062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007066:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8007068:	f7fb f8cc 	bl	8002204 <HAL_GetTick>
 800706c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800706e:	e00d      	b.n	800708c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007070:	f7fb f8c8 	bl	8002204 <HAL_GetTick>
 8007074:	4602      	mov	r2, r0
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	1ad3      	subs	r3, r2, r3
 800707a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800707e:	d905      	bls.n	800708c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007080:	2303      	movs	r3, #3
 8007082:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2203      	movs	r2, #3
 8007088:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800708c:	4b06      	ldr	r3, [pc, #24]	; (80070a8 <RTC_EnterInitMode+0x64>)
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007094:	2b00      	cmp	r3, #0
 8007096:	d102      	bne.n	800709e <RTC_EnterInitMode+0x5a>
 8007098:	7bfb      	ldrb	r3, [r7, #15]
 800709a:	2b03      	cmp	r3, #3
 800709c:	d1e8      	bne.n	8007070 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800709e:	7bfb      	ldrb	r3, [r7, #15]
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3710      	adds	r7, #16
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	40002800 	.word	0x40002800

080070ac <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070b4:	2300      	movs	r3, #0
 80070b6:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80070b8:	4b1a      	ldr	r3, [pc, #104]	; (8007124 <RTC_ExitInitMode+0x78>)
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	4a19      	ldr	r2, [pc, #100]	; (8007124 <RTC_ExitInitMode+0x78>)
 80070be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070c2:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80070c4:	4b17      	ldr	r3, [pc, #92]	; (8007124 <RTC_ExitInitMode+0x78>)
 80070c6:	699b      	ldr	r3, [r3, #24]
 80070c8:	f003 0320 	and.w	r3, r3, #32
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d10c      	bne.n	80070ea <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f7ff ff91 	bl	8006ff8 <HAL_RTC_WaitForSynchro>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d01e      	beq.n	800711a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2203      	movs	r2, #3
 80070e0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80070e4:	2303      	movs	r3, #3
 80070e6:	73fb      	strb	r3, [r7, #15]
 80070e8:	e017      	b.n	800711a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80070ea:	4b0e      	ldr	r3, [pc, #56]	; (8007124 <RTC_ExitInitMode+0x78>)
 80070ec:	699b      	ldr	r3, [r3, #24]
 80070ee:	4a0d      	ldr	r2, [pc, #52]	; (8007124 <RTC_ExitInitMode+0x78>)
 80070f0:	f023 0320 	bic.w	r3, r3, #32
 80070f4:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f7ff ff7e 	bl	8006ff8 <HAL_RTC_WaitForSynchro>
 80070fc:	4603      	mov	r3, r0
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d005      	beq.n	800710e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2203      	movs	r2, #3
 8007106:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800710a:	2303      	movs	r3, #3
 800710c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800710e:	4b05      	ldr	r3, [pc, #20]	; (8007124 <RTC_ExitInitMode+0x78>)
 8007110:	699b      	ldr	r3, [r3, #24]
 8007112:	4a04      	ldr	r2, [pc, #16]	; (8007124 <RTC_ExitInitMode+0x78>)
 8007114:	f043 0320 	orr.w	r3, r3, #32
 8007118:	6193      	str	r3, [r2, #24]
  }

  return status;
 800711a:	7bfb      	ldrb	r3, [r7, #15]
}
 800711c:	4618      	mov	r0, r3
 800711e:	3710      	adds	r7, #16
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}
 8007124:	40002800 	.word	0x40002800

08007128 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007128:	b480      	push	{r7}
 800712a:	b085      	sub	sp, #20
 800712c:	af00      	add	r7, sp, #0
 800712e:	4603      	mov	r3, r0
 8007130:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007132:	2300      	movs	r3, #0
 8007134:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8007136:	79fb      	ldrb	r3, [r7, #7]
 8007138:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800713a:	e005      	b.n	8007148 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	3301      	adds	r3, #1
 8007140:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8007142:	7afb      	ldrb	r3, [r7, #11]
 8007144:	3b0a      	subs	r3, #10
 8007146:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8007148:	7afb      	ldrb	r3, [r7, #11]
 800714a:	2b09      	cmp	r3, #9
 800714c:	d8f6      	bhi.n	800713c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	b2db      	uxtb	r3, r3
 8007152:	011b      	lsls	r3, r3, #4
 8007154:	b2da      	uxtb	r2, r3
 8007156:	7afb      	ldrb	r3, [r7, #11]
 8007158:	4313      	orrs	r3, r2
 800715a:	b2db      	uxtb	r3, r3
}
 800715c:	4618      	mov	r0, r3
 800715e:	3714      	adds	r7, #20
 8007160:	46bd      	mov	sp, r7
 8007162:	bc80      	pop	{r7}
 8007164:	4770      	bx	lr
	...

08007168 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8007168:	b480      	push	{r7}
 800716a:	b083      	sub	sp, #12
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007176:	2b01      	cmp	r3, #1
 8007178:	d101      	bne.n	800717e <HAL_RTCEx_EnableBypassShadow+0x16>
 800717a:	2302      	movs	r3, #2
 800717c:	e01f      	b.n	80071be <HAL_RTCEx_EnableBypassShadow+0x56>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2201      	movs	r2, #1
 8007182:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2202      	movs	r2, #2
 800718a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800718e:	4b0e      	ldr	r3, [pc, #56]	; (80071c8 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007190:	22ca      	movs	r2, #202	; 0xca
 8007192:	625a      	str	r2, [r3, #36]	; 0x24
 8007194:	4b0c      	ldr	r3, [pc, #48]	; (80071c8 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007196:	2253      	movs	r2, #83	; 0x53
 8007198:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800719a:	4b0b      	ldr	r3, [pc, #44]	; (80071c8 <HAL_RTCEx_EnableBypassShadow+0x60>)
 800719c:	699b      	ldr	r3, [r3, #24]
 800719e:	4a0a      	ldr	r2, [pc, #40]	; (80071c8 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80071a0:	f043 0320 	orr.w	r3, r3, #32
 80071a4:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071a6:	4b08      	ldr	r3, [pc, #32]	; (80071c8 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80071a8:	22ff      	movs	r2, #255	; 0xff
 80071aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2201      	movs	r2, #1
 80071b0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80071bc:	2300      	movs	r3, #0
}
 80071be:	4618      	mov	r0, r3
 80071c0:	370c      	adds	r7, #12
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bc80      	pop	{r7}
 80071c6:	4770      	bx	lr
 80071c8:	40002800 	.word	0x40002800

080071cc <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d101      	bne.n	80071e2 <HAL_RTCEx_SetSSRU_IT+0x16>
 80071de:	2302      	movs	r3, #2
 80071e0:	e027      	b.n	8007232 <HAL_RTCEx_SetSSRU_IT+0x66>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2201      	movs	r2, #1
 80071e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2202      	movs	r2, #2
 80071ee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80071f2:	4b12      	ldr	r3, [pc, #72]	; (800723c <HAL_RTCEx_SetSSRU_IT+0x70>)
 80071f4:	22ca      	movs	r2, #202	; 0xca
 80071f6:	625a      	str	r2, [r3, #36]	; 0x24
 80071f8:	4b10      	ldr	r3, [pc, #64]	; (800723c <HAL_RTCEx_SetSSRU_IT+0x70>)
 80071fa:	2253      	movs	r2, #83	; 0x53
 80071fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 80071fe:	4b0f      	ldr	r3, [pc, #60]	; (800723c <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007200:	699b      	ldr	r3, [r3, #24]
 8007202:	4a0e      	ldr	r2, [pc, #56]	; (800723c <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007208:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 800720a:	4b0d      	ldr	r3, [pc, #52]	; (8007240 <HAL_RTCEx_SetSSRU_IT+0x74>)
 800720c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007210:	4a0b      	ldr	r2, [pc, #44]	; (8007240 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8007212:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007216:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800721a:	4b08      	ldr	r3, [pc, #32]	; (800723c <HAL_RTCEx_SetSSRU_IT+0x70>)
 800721c:	22ff      	movs	r2, #255	; 0xff
 800721e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2201      	movs	r2, #1
 8007224:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007230:	2300      	movs	r3, #0
}
 8007232:	4618      	mov	r0, r3
 8007234:	370c      	adds	r7, #12
 8007236:	46bd      	mov	sp, r7
 8007238:	bc80      	pop	{r7}
 800723a:	4770      	bx	lr
 800723c:	40002800 	.word	0x40002800
 8007240:	58000800 	.word	0x58000800

08007244 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b082      	sub	sp, #8
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 800724c:	4b09      	ldr	r3, [pc, #36]	; (8007274 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800724e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007254:	2b00      	cmp	r3, #0
 8007256:	d005      	beq.n	8007264 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8007258:	4b06      	ldr	r3, [pc, #24]	; (8007274 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800725a:	2240      	movs	r2, #64	; 0x40
 800725c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f7fb f99b 	bl	800259a <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2201      	movs	r2, #1
 8007268:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 800726c:	bf00      	nop
 800726e:	3708      	adds	r7, #8
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}
 8007274:	40002800 	.word	0x40002800

08007278 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8007278:	b480      	push	{r7}
 800727a:	b083      	sub	sp, #12
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8007280:	bf00      	nop
 8007282:	370c      	adds	r7, #12
 8007284:	46bd      	mov	sp, r7
 8007286:	bc80      	pop	{r7}
 8007288:	4770      	bx	lr
	...

0800728c <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800728c:	b480      	push	{r7}
 800728e:	b087      	sub	sp, #28
 8007290:	af00      	add	r7, sp, #0
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	60b9      	str	r1, [r7, #8]
 8007296:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8007298:	4b07      	ldr	r3, [pc, #28]	; (80072b8 <HAL_RTCEx_BKUPWrite+0x2c>)
 800729a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	697a      	ldr	r2, [r7, #20]
 80072a2:	4413      	add	r3, r2
 80072a4:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	601a      	str	r2, [r3, #0]
}
 80072ac:	bf00      	nop
 80072ae:	371c      	adds	r7, #28
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bc80      	pop	{r7}
 80072b4:	4770      	bx	lr
 80072b6:	bf00      	nop
 80072b8:	4000b100 	.word	0x4000b100

080072bc <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80072bc:	b480      	push	{r7}
 80072be:	b085      	sub	sp, #20
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80072c6:	4b07      	ldr	r3, [pc, #28]	; (80072e4 <HAL_RTCEx_BKUPRead+0x28>)
 80072c8:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	68fa      	ldr	r2, [r7, #12]
 80072d0:	4413      	add	r3, r2
 80072d2:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3714      	adds	r7, #20
 80072dc:	46bd      	mov	sp, r7
 80072de:	bc80      	pop	{r7}
 80072e0:	4770      	bx	lr
 80072e2:	bf00      	nop
 80072e4:	4000b100 	.word	0x4000b100

080072e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b084      	sub	sp, #16
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d101      	bne.n	80072fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	e0c6      	b.n	8007488 <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d108      	bne.n	8007314 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800730a:	d009      	beq.n	8007320 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	61da      	str	r2, [r3, #28]
 8007312:	e005      	b.n	8007320 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007326:	b2db      	uxtb	r3, r3
 8007328:	2b00      	cmp	r3, #0
 800732a:	d106      	bne.n	800733a <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2200      	movs	r2, #0
 8007330:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f7fa fc87 	bl	8001c48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2202      	movs	r2, #2
 800733e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007350:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800735a:	d902      	bls.n	8007362 <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800735c:	2300      	movs	r3, #0
 800735e:	60fb      	str	r3, [r7, #12]
 8007360:	e002      	b.n	8007368 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007362:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007366:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	68db      	ldr	r3, [r3, #12]
 800736c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007370:	d007      	beq.n	8007382 <HAL_SPI_Init+0x9a>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	68db      	ldr	r3, [r3, #12]
 8007376:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800737a:	d002      	beq.n	8007382 <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007392:	431a      	orrs	r2, r3
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	691b      	ldr	r3, [r3, #16]
 8007398:	f003 0302 	and.w	r3, r3, #2
 800739c:	431a      	orrs	r2, r3
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	695b      	ldr	r3, [r3, #20]
 80073a2:	f003 0301 	and.w	r3, r3, #1
 80073a6:	431a      	orrs	r2, r3
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	699b      	ldr	r3, [r3, #24]
 80073ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073b0:	431a      	orrs	r2, r3
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	69db      	ldr	r3, [r3, #28]
 80073b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80073ba:	431a      	orrs	r2, r3
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6a1b      	ldr	r3, [r3, #32]
 80073c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073c4:	ea42 0103 	orr.w	r1, r2, r3
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073cc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	430a      	orrs	r2, r1
 80073d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073e0:	d11b      	bne.n	800741a <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d10b      	bne.n	8007402 <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80073f2:	d903      	bls.n	80073fc <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2202      	movs	r2, #2
 80073f8:	631a      	str	r2, [r3, #48]	; 0x30
 80073fa:	e002      	b.n	8007402 <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2201      	movs	r2, #1
 8007400:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007406:	2b02      	cmp	r3, #2
 8007408:	d107      	bne.n	800741a <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007418:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	699b      	ldr	r3, [r3, #24]
 800741e:	0c1b      	lsrs	r3, r3, #16
 8007420:	f003 0204 	and.w	r2, r3, #4
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007428:	f003 0310 	and.w	r3, r3, #16
 800742c:	431a      	orrs	r2, r3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007432:	f003 0308 	and.w	r3, r3, #8
 8007436:	431a      	orrs	r2, r3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007440:	ea42 0103 	orr.w	r1, r2, r3
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	430a      	orrs	r2, r1
 8007450:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007456:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800745a:	d105      	bne.n	8007468 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	b292      	uxth	r2, r2
 8007466:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	69da      	ldr	r2, [r3, #28]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007476:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2201      	movs	r2, #1
 8007482:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007486:	2300      	movs	r3, #0
}
 8007488:	4618      	mov	r0, r3
 800748a:	3710      	adds	r7, #16
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}

08007490 <LL_PWR_SetRadioBusyTrigger>:
{
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8007498:	4b06      	ldr	r3, [pc, #24]	; (80074b4 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80074a0:	4904      	ldr	r1, [pc, #16]	; (80074b4 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	4313      	orrs	r3, r2
 80074a6:	608b      	str	r3, [r1, #8]
}
 80074a8:	bf00      	nop
 80074aa:	370c      	adds	r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bc80      	pop	{r7}
 80074b0:	4770      	bx	lr
 80074b2:	bf00      	nop
 80074b4:	58000400 	.word	0x58000400

080074b8 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 80074b8:	b480      	push	{r7}
 80074ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80074bc:	4b05      	ldr	r3, [pc, #20]	; (80074d4 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80074be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074c2:	4a04      	ldr	r2, [pc, #16]	; (80074d4 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80074c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80074cc:	bf00      	nop
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bc80      	pop	{r7}
 80074d2:	4770      	bx	lr
 80074d4:	58000400 	.word	0x58000400

080074d8 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 80074d8:	b480      	push	{r7}
 80074da:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80074dc:	4b05      	ldr	r3, [pc, #20]	; (80074f4 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80074de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074e2:	4a04      	ldr	r2, [pc, #16]	; (80074f4 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80074e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80074e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80074ec:	bf00      	nop
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bc80      	pop	{r7}
 80074f2:	4770      	bx	lr
 80074f4:	58000400 	.word	0x58000400

080074f8 <LL_PWR_ClearFlag_RFBUSY>:
{
 80074f8:	b480      	push	{r7}
 80074fa:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80074fc:	4b03      	ldr	r3, [pc, #12]	; (800750c <LL_PWR_ClearFlag_RFBUSY+0x14>)
 80074fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007502:	619a      	str	r2, [r3, #24]
}
 8007504:	bf00      	nop
 8007506:	46bd      	mov	sp, r7
 8007508:	bc80      	pop	{r7}
 800750a:	4770      	bx	lr
 800750c:	58000400 	.word	0x58000400

08007510 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8007510:	b480      	push	{r7}
 8007512:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8007514:	4b06      	ldr	r3, [pc, #24]	; (8007530 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8007516:	695b      	ldr	r3, [r3, #20]
 8007518:	f003 0302 	and.w	r3, r3, #2
 800751c:	2b02      	cmp	r3, #2
 800751e:	d101      	bne.n	8007524 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8007520:	2301      	movs	r3, #1
 8007522:	e000      	b.n	8007526 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8007524:	2300      	movs	r3, #0
}
 8007526:	4618      	mov	r0, r3
 8007528:	46bd      	mov	sp, r7
 800752a:	bc80      	pop	{r7}
 800752c:	4770      	bx	lr
 800752e:	bf00      	nop
 8007530:	58000400 	.word	0x58000400

08007534 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8007534:	b480      	push	{r7}
 8007536:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8007538:	4b06      	ldr	r3, [pc, #24]	; (8007554 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 800753a:	695b      	ldr	r3, [r3, #20]
 800753c:	f003 0304 	and.w	r3, r3, #4
 8007540:	2b04      	cmp	r3, #4
 8007542:	d101      	bne.n	8007548 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8007544:	2301      	movs	r3, #1
 8007546:	e000      	b.n	800754a <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	46bd      	mov	sp, r7
 800754e:	bc80      	pop	{r7}
 8007550:	4770      	bx	lr
 8007552:	bf00      	nop
 8007554:	58000400 	.word	0x58000400

08007558 <LL_RCC_RF_DisableReset>:
{
 8007558:	b480      	push	{r7}
 800755a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 800755c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007560:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007564:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007568:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800756c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007570:	bf00      	nop
 8007572:	46bd      	mov	sp, r7
 8007574:	bc80      	pop	{r7}
 8007576:	4770      	bx	lr

08007578 <LL_RCC_IsRFUnderReset>:
{
 8007578:	b480      	push	{r7}
 800757a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 800757c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007580:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007584:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007588:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800758c:	d101      	bne.n	8007592 <LL_RCC_IsRFUnderReset+0x1a>
 800758e:	2301      	movs	r3, #1
 8007590:	e000      	b.n	8007594 <LL_RCC_IsRFUnderReset+0x1c>
 8007592:	2300      	movs	r3, #0
}
 8007594:	4618      	mov	r0, r3
 8007596:	46bd      	mov	sp, r7
 8007598:	bc80      	pop	{r7}
 800759a:	4770      	bx	lr

0800759c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80075a4:	4b06      	ldr	r3, [pc, #24]	; (80075c0 <LL_EXTI_EnableIT_32_63+0x24>)
 80075a6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80075aa:	4905      	ldr	r1, [pc, #20]	; (80075c0 <LL_EXTI_EnableIT_32_63+0x24>)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80075b4:	bf00      	nop
 80075b6:	370c      	adds	r7, #12
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bc80      	pop	{r7}
 80075bc:	4770      	bx	lr
 80075be:	bf00      	nop
 80075c0:	58000800 	.word	0x58000800

080075c4 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d103      	bne.n	80075da <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	73fb      	strb	r3, [r7, #15]
    return status;
 80075d6:	7bfb      	ldrb	r3, [r7, #15]
 80075d8:	e052      	b.n	8007680 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 80075da:	2300      	movs	r3, #0
 80075dc:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	799b      	ldrb	r3, [r3, #6]
 80075e2:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 80075e4:	7bbb      	ldrb	r3, [r7, #14]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d002      	beq.n	80075f0 <HAL_SUBGHZ_Init+0x2c>
 80075ea:	7bbb      	ldrb	r3, [r7, #14]
 80075ec:	2b03      	cmp	r3, #3
 80075ee:	d109      	bne.n	8007604 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f7fa fc5c 	bl	8001eb4 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 80075fc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007600:	f7ff ffcc 	bl	800759c <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8007604:	7bbb      	ldrb	r3, [r7, #14]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d126      	bne.n	8007658 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2202      	movs	r2, #2
 800760e:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8007610:	f7ff ffa2 	bl	8007558 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007614:	4b1c      	ldr	r3, [pc, #112]	; (8007688 <HAL_SUBGHZ_Init+0xc4>)
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	4613      	mov	r3, r2
 800761a:	00db      	lsls	r3, r3, #3
 800761c:	1a9b      	subs	r3, r3, r2
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	0cdb      	lsrs	r3, r3, #19
 8007622:	2264      	movs	r2, #100	; 0x64
 8007624:	fb02 f303 	mul.w	r3, r2, r3
 8007628:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d105      	bne.n	800763c <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8007630:	2301      	movs	r3, #1
 8007632:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	609a      	str	r2, [r3, #8]
        break;
 800763a:	e007      	b.n	800764c <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	3b01      	subs	r3, #1
 8007640:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8007642:	f7ff ff99 	bl	8007578 <LL_RCC_IsRFUnderReset>
 8007646:	4603      	mov	r3, r0
 8007648:	2b00      	cmp	r3, #0
 800764a:	d1ee      	bne.n	800762a <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800764c:	f7ff ff34 	bl	80074b8 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8007650:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007654:	f7ff ff1c 	bl	8007490 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8007658:	f7ff ff4e 	bl	80074f8 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 800765c:	7bfb      	ldrb	r3, [r7, #15]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d10a      	bne.n	8007678 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4618      	mov	r0, r3
 8007668:	f000 faac 	bl	8007bc4 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2201      	movs	r2, #1
 8007670:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2201      	movs	r2, #1
 800767c:	719a      	strb	r2, [r3, #6]

  return status;
 800767e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007680:	4618      	mov	r0, r3
 8007682:	3710      	adds	r7, #16
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}
 8007688:	20000000 	.word	0x20000000

0800768c <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b086      	sub	sp, #24
 8007690:	af00      	add	r7, sp, #0
 8007692:	60f8      	str	r0, [r7, #12]
 8007694:	607a      	str	r2, [r7, #4]
 8007696:	461a      	mov	r2, r3
 8007698:	460b      	mov	r3, r1
 800769a:	817b      	strh	r3, [r7, #10]
 800769c:	4613      	mov	r3, r2
 800769e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	799b      	ldrb	r3, [r3, #6]
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d14a      	bne.n	8007740 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	795b      	ldrb	r3, [r3, #5]
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d101      	bne.n	80076b6 <HAL_SUBGHZ_WriteRegisters+0x2a>
 80076b2:	2302      	movs	r3, #2
 80076b4:	e045      	b.n	8007742 <HAL_SUBGHZ_WriteRegisters+0xb6>
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2201      	movs	r2, #1
 80076ba:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2202      	movs	r2, #2
 80076c0:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80076c2:	68f8      	ldr	r0, [r7, #12]
 80076c4:	f000 fb4c 	bl	8007d60 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80076c8:	f7ff ff06 	bl	80074d8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80076cc:	210d      	movs	r1, #13
 80076ce:	68f8      	ldr	r0, [r7, #12]
 80076d0:	f000 fa98 	bl	8007c04 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80076d4:	897b      	ldrh	r3, [r7, #10]
 80076d6:	0a1b      	lsrs	r3, r3, #8
 80076d8:	b29b      	uxth	r3, r3
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	4619      	mov	r1, r3
 80076de:	68f8      	ldr	r0, [r7, #12]
 80076e0:	f000 fa90 	bl	8007c04 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80076e4:	897b      	ldrh	r3, [r7, #10]
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	4619      	mov	r1, r3
 80076ea:	68f8      	ldr	r0, [r7, #12]
 80076ec:	f000 fa8a 	bl	8007c04 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80076f0:	2300      	movs	r3, #0
 80076f2:	82bb      	strh	r3, [r7, #20]
 80076f4:	e00a      	b.n	800770c <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80076f6:	8abb      	ldrh	r3, [r7, #20]
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	4413      	add	r3, r2
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	4619      	mov	r1, r3
 8007700:	68f8      	ldr	r0, [r7, #12]
 8007702:	f000 fa7f 	bl	8007c04 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007706:	8abb      	ldrh	r3, [r7, #20]
 8007708:	3301      	adds	r3, #1
 800770a:	82bb      	strh	r3, [r7, #20]
 800770c:	8aba      	ldrh	r2, [r7, #20]
 800770e:	893b      	ldrh	r3, [r7, #8]
 8007710:	429a      	cmp	r2, r3
 8007712:	d3f0      	bcc.n	80076f6 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007714:	f7ff fed0 	bl	80074b8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007718:	68f8      	ldr	r0, [r7, #12]
 800771a:	f000 fb45 	bl	8007da8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d002      	beq.n	800772c <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	75fb      	strb	r3, [r7, #23]
 800772a:	e001      	b.n	8007730 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 800772c:	2300      	movs	r3, #0
 800772e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2201      	movs	r2, #1
 8007734:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2200      	movs	r2, #0
 800773a:	715a      	strb	r2, [r3, #5]

    return status;
 800773c:	7dfb      	ldrb	r3, [r7, #23]
 800773e:	e000      	b.n	8007742 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007740:	2302      	movs	r3, #2
  }
}
 8007742:	4618      	mov	r0, r3
 8007744:	3718      	adds	r7, #24
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}

0800774a <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 800774a:	b580      	push	{r7, lr}
 800774c:	b088      	sub	sp, #32
 800774e:	af00      	add	r7, sp, #0
 8007750:	60f8      	str	r0, [r7, #12]
 8007752:	607a      	str	r2, [r7, #4]
 8007754:	461a      	mov	r2, r3
 8007756:	460b      	mov	r3, r1
 8007758:	817b      	strh	r3, [r7, #10]
 800775a:	4613      	mov	r3, r2
 800775c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	799b      	ldrb	r3, [r3, #6]
 8007766:	b2db      	uxtb	r3, r3
 8007768:	2b01      	cmp	r3, #1
 800776a:	d14a      	bne.n	8007802 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	795b      	ldrb	r3, [r3, #5]
 8007770:	2b01      	cmp	r3, #1
 8007772:	d101      	bne.n	8007778 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8007774:	2302      	movs	r3, #2
 8007776:	e045      	b.n	8007804 <HAL_SUBGHZ_ReadRegisters+0xba>
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2201      	movs	r2, #1
 800777c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800777e:	68f8      	ldr	r0, [r7, #12]
 8007780:	f000 faee 	bl	8007d60 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007784:	f7ff fea8 	bl	80074d8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8007788:	211d      	movs	r1, #29
 800778a:	68f8      	ldr	r0, [r7, #12]
 800778c:	f000 fa3a 	bl	8007c04 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8007790:	897b      	ldrh	r3, [r7, #10]
 8007792:	0a1b      	lsrs	r3, r3, #8
 8007794:	b29b      	uxth	r3, r3
 8007796:	b2db      	uxtb	r3, r3
 8007798:	4619      	mov	r1, r3
 800779a:	68f8      	ldr	r0, [r7, #12]
 800779c:	f000 fa32 	bl	8007c04 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80077a0:	897b      	ldrh	r3, [r7, #10]
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	4619      	mov	r1, r3
 80077a6:	68f8      	ldr	r0, [r7, #12]
 80077a8:	f000 fa2c 	bl	8007c04 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80077ac:	2100      	movs	r1, #0
 80077ae:	68f8      	ldr	r0, [r7, #12]
 80077b0:	f000 fa28 	bl	8007c04 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80077b4:	2300      	movs	r3, #0
 80077b6:	82fb      	strh	r3, [r7, #22]
 80077b8:	e009      	b.n	80077ce <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80077ba:	69b9      	ldr	r1, [r7, #24]
 80077bc:	68f8      	ldr	r0, [r7, #12]
 80077be:	f000 fa77 	bl	8007cb0 <SUBGHZSPI_Receive>
      pData++;
 80077c2:	69bb      	ldr	r3, [r7, #24]
 80077c4:	3301      	adds	r3, #1
 80077c6:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80077c8:	8afb      	ldrh	r3, [r7, #22]
 80077ca:	3301      	adds	r3, #1
 80077cc:	82fb      	strh	r3, [r7, #22]
 80077ce:	8afa      	ldrh	r2, [r7, #22]
 80077d0:	893b      	ldrh	r3, [r7, #8]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d3f1      	bcc.n	80077ba <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80077d6:	f7ff fe6f 	bl	80074b8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80077da:	68f8      	ldr	r0, [r7, #12]
 80077dc:	f000 fae4 	bl	8007da8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d002      	beq.n	80077ee <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	77fb      	strb	r3, [r7, #31]
 80077ec:	e001      	b.n	80077f2 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 80077ee:	2300      	movs	r3, #0
 80077f0:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2201      	movs	r2, #1
 80077f6:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2200      	movs	r2, #0
 80077fc:	715a      	strb	r2, [r3, #5]

    return status;
 80077fe:	7ffb      	ldrb	r3, [r7, #31]
 8007800:	e000      	b.n	8007804 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8007802:	2302      	movs	r3, #2
  }
}
 8007804:	4618      	mov	r0, r3
 8007806:	3720      	adds	r7, #32
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b086      	sub	sp, #24
 8007810:	af00      	add	r7, sp, #0
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	607a      	str	r2, [r7, #4]
 8007816:	461a      	mov	r2, r3
 8007818:	460b      	mov	r3, r1
 800781a:	72fb      	strb	r3, [r7, #11]
 800781c:	4613      	mov	r3, r2
 800781e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	799b      	ldrb	r3, [r3, #6]
 8007824:	b2db      	uxtb	r3, r3
 8007826:	2b01      	cmp	r3, #1
 8007828:	d14a      	bne.n	80078c0 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	795b      	ldrb	r3, [r3, #5]
 800782e:	2b01      	cmp	r3, #1
 8007830:	d101      	bne.n	8007836 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8007832:	2302      	movs	r3, #2
 8007834:	e045      	b.n	80078c2 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2201      	movs	r2, #1
 800783a:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800783c:	68f8      	ldr	r0, [r7, #12]
 800783e:	f000 fa8f 	bl	8007d60 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8007842:	7afb      	ldrb	r3, [r7, #11]
 8007844:	2b84      	cmp	r3, #132	; 0x84
 8007846:	d002      	beq.n	800784e <HAL_SUBGHZ_ExecSetCmd+0x42>
 8007848:	7afb      	ldrb	r3, [r7, #11]
 800784a:	2b94      	cmp	r3, #148	; 0x94
 800784c:	d103      	bne.n	8007856 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2201      	movs	r2, #1
 8007852:	711a      	strb	r2, [r3, #4]
 8007854:	e002      	b.n	800785c <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2200      	movs	r2, #0
 800785a:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800785c:	f7ff fe3c 	bl	80074d8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007860:	7afb      	ldrb	r3, [r7, #11]
 8007862:	4619      	mov	r1, r3
 8007864:	68f8      	ldr	r0, [r7, #12]
 8007866:	f000 f9cd 	bl	8007c04 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800786a:	2300      	movs	r3, #0
 800786c:	82bb      	strh	r3, [r7, #20]
 800786e:	e00a      	b.n	8007886 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007870:	8abb      	ldrh	r3, [r7, #20]
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	4413      	add	r3, r2
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	4619      	mov	r1, r3
 800787a:	68f8      	ldr	r0, [r7, #12]
 800787c:	f000 f9c2 	bl	8007c04 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007880:	8abb      	ldrh	r3, [r7, #20]
 8007882:	3301      	adds	r3, #1
 8007884:	82bb      	strh	r3, [r7, #20]
 8007886:	8aba      	ldrh	r2, [r7, #20]
 8007888:	893b      	ldrh	r3, [r7, #8]
 800788a:	429a      	cmp	r2, r3
 800788c:	d3f0      	bcc.n	8007870 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800788e:	f7ff fe13 	bl	80074b8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8007892:	7afb      	ldrb	r3, [r7, #11]
 8007894:	2b84      	cmp	r3, #132	; 0x84
 8007896:	d002      	beq.n	800789e <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007898:	68f8      	ldr	r0, [r7, #12]
 800789a:	f000 fa85 	bl	8007da8 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d002      	beq.n	80078ac <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	75fb      	strb	r3, [r7, #23]
 80078aa:	e001      	b.n	80078b0 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 80078ac:	2300      	movs	r3, #0
 80078ae:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2201      	movs	r2, #1
 80078b4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2200      	movs	r2, #0
 80078ba:	715a      	strb	r2, [r3, #5]

    return status;
 80078bc:	7dfb      	ldrb	r3, [r7, #23]
 80078be:	e000      	b.n	80078c2 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80078c0:	2302      	movs	r3, #2
  }
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3718      	adds	r7, #24
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}

080078ca <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80078ca:	b580      	push	{r7, lr}
 80078cc:	b088      	sub	sp, #32
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	60f8      	str	r0, [r7, #12]
 80078d2:	607a      	str	r2, [r7, #4]
 80078d4:	461a      	mov	r2, r3
 80078d6:	460b      	mov	r3, r1
 80078d8:	72fb      	strb	r3, [r7, #11]
 80078da:	4613      	mov	r3, r2
 80078dc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	799b      	ldrb	r3, [r3, #6]
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	d13d      	bne.n	8007968 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	795b      	ldrb	r3, [r3, #5]
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d101      	bne.n	80078f8 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 80078f4:	2302      	movs	r3, #2
 80078f6:	e038      	b.n	800796a <HAL_SUBGHZ_ExecGetCmd+0xa0>
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2201      	movs	r2, #1
 80078fc:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80078fe:	68f8      	ldr	r0, [r7, #12]
 8007900:	f000 fa2e 	bl	8007d60 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007904:	f7ff fde8 	bl	80074d8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007908:	7afb      	ldrb	r3, [r7, #11]
 800790a:	4619      	mov	r1, r3
 800790c:	68f8      	ldr	r0, [r7, #12]
 800790e:	f000 f979 	bl	8007c04 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007912:	2100      	movs	r1, #0
 8007914:	68f8      	ldr	r0, [r7, #12]
 8007916:	f000 f975 	bl	8007c04 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800791a:	2300      	movs	r3, #0
 800791c:	82fb      	strh	r3, [r7, #22]
 800791e:	e009      	b.n	8007934 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007920:	69b9      	ldr	r1, [r7, #24]
 8007922:	68f8      	ldr	r0, [r7, #12]
 8007924:	f000 f9c4 	bl	8007cb0 <SUBGHZSPI_Receive>
      pData++;
 8007928:	69bb      	ldr	r3, [r7, #24]
 800792a:	3301      	adds	r3, #1
 800792c:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800792e:	8afb      	ldrh	r3, [r7, #22]
 8007930:	3301      	adds	r3, #1
 8007932:	82fb      	strh	r3, [r7, #22]
 8007934:	8afa      	ldrh	r2, [r7, #22]
 8007936:	893b      	ldrh	r3, [r7, #8]
 8007938:	429a      	cmp	r2, r3
 800793a:	d3f1      	bcc.n	8007920 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800793c:	f7ff fdbc 	bl	80074b8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007940:	68f8      	ldr	r0, [r7, #12]
 8007942:	f000 fa31 	bl	8007da8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d002      	beq.n	8007954 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	77fb      	strb	r3, [r7, #31]
 8007952:	e001      	b.n	8007958 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8007954:	2300      	movs	r3, #0
 8007956:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2201      	movs	r2, #1
 800795c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2200      	movs	r2, #0
 8007962:	715a      	strb	r2, [r3, #5]

    return status;
 8007964:	7ffb      	ldrb	r3, [r7, #31]
 8007966:	e000      	b.n	800796a <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007968:	2302      	movs	r3, #2
  }
}
 800796a:	4618      	mov	r0, r3
 800796c:	3720      	adds	r7, #32
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}

08007972 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8007972:	b580      	push	{r7, lr}
 8007974:	b086      	sub	sp, #24
 8007976:	af00      	add	r7, sp, #0
 8007978:	60f8      	str	r0, [r7, #12]
 800797a:	607a      	str	r2, [r7, #4]
 800797c:	461a      	mov	r2, r3
 800797e:	460b      	mov	r3, r1
 8007980:	72fb      	strb	r3, [r7, #11]
 8007982:	4613      	mov	r3, r2
 8007984:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	799b      	ldrb	r3, [r3, #6]
 800798a:	b2db      	uxtb	r3, r3
 800798c:	2b01      	cmp	r3, #1
 800798e:	d13e      	bne.n	8007a0e <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	795b      	ldrb	r3, [r3, #5]
 8007994:	2b01      	cmp	r3, #1
 8007996:	d101      	bne.n	800799c <HAL_SUBGHZ_WriteBuffer+0x2a>
 8007998:	2302      	movs	r3, #2
 800799a:	e039      	b.n	8007a10 <HAL_SUBGHZ_WriteBuffer+0x9e>
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2201      	movs	r2, #1
 80079a0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80079a2:	68f8      	ldr	r0, [r7, #12]
 80079a4:	f000 f9dc 	bl	8007d60 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80079a8:	f7ff fd96 	bl	80074d8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 80079ac:	210e      	movs	r1, #14
 80079ae:	68f8      	ldr	r0, [r7, #12]
 80079b0:	f000 f928 	bl	8007c04 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80079b4:	7afb      	ldrb	r3, [r7, #11]
 80079b6:	4619      	mov	r1, r3
 80079b8:	68f8      	ldr	r0, [r7, #12]
 80079ba:	f000 f923 	bl	8007c04 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80079be:	2300      	movs	r3, #0
 80079c0:	82bb      	strh	r3, [r7, #20]
 80079c2:	e00a      	b.n	80079da <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80079c4:	8abb      	ldrh	r3, [r7, #20]
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	4413      	add	r3, r2
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	4619      	mov	r1, r3
 80079ce:	68f8      	ldr	r0, [r7, #12]
 80079d0:	f000 f918 	bl	8007c04 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80079d4:	8abb      	ldrh	r3, [r7, #20]
 80079d6:	3301      	adds	r3, #1
 80079d8:	82bb      	strh	r3, [r7, #20]
 80079da:	8aba      	ldrh	r2, [r7, #20]
 80079dc:	893b      	ldrh	r3, [r7, #8]
 80079de:	429a      	cmp	r2, r3
 80079e0:	d3f0      	bcc.n	80079c4 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80079e2:	f7ff fd69 	bl	80074b8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80079e6:	68f8      	ldr	r0, [r7, #12]
 80079e8:	f000 f9de 	bl	8007da8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d002      	beq.n	80079fa <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	75fb      	strb	r3, [r7, #23]
 80079f8:	e001      	b.n	80079fe <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 80079fa:	2300      	movs	r3, #0
 80079fc:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2201      	movs	r2, #1
 8007a02:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2200      	movs	r2, #0
 8007a08:	715a      	strb	r2, [r3, #5]

    return status;
 8007a0a:	7dfb      	ldrb	r3, [r7, #23]
 8007a0c:	e000      	b.n	8007a10 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8007a0e:	2302      	movs	r3, #2
  }
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3718      	adds	r7, #24
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b088      	sub	sp, #32
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	607a      	str	r2, [r7, #4]
 8007a22:	461a      	mov	r2, r3
 8007a24:	460b      	mov	r3, r1
 8007a26:	72fb      	strb	r3, [r7, #11]
 8007a28:	4613      	mov	r3, r2
 8007a2a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	799b      	ldrb	r3, [r3, #6]
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	d141      	bne.n	8007abe <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	795b      	ldrb	r3, [r3, #5]
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	d101      	bne.n	8007a46 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8007a42:	2302      	movs	r3, #2
 8007a44:	e03c      	b.n	8007ac0 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007a4c:	68f8      	ldr	r0, [r7, #12]
 8007a4e:	f000 f987 	bl	8007d60 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007a52:	f7ff fd41 	bl	80074d8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8007a56:	211e      	movs	r1, #30
 8007a58:	68f8      	ldr	r0, [r7, #12]
 8007a5a:	f000 f8d3 	bl	8007c04 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007a5e:	7afb      	ldrb	r3, [r7, #11]
 8007a60:	4619      	mov	r1, r3
 8007a62:	68f8      	ldr	r0, [r7, #12]
 8007a64:	f000 f8ce 	bl	8007c04 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007a68:	2100      	movs	r1, #0
 8007a6a:	68f8      	ldr	r0, [r7, #12]
 8007a6c:	f000 f8ca 	bl	8007c04 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007a70:	2300      	movs	r3, #0
 8007a72:	82fb      	strh	r3, [r7, #22]
 8007a74:	e009      	b.n	8007a8a <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007a76:	69b9      	ldr	r1, [r7, #24]
 8007a78:	68f8      	ldr	r0, [r7, #12]
 8007a7a:	f000 f919 	bl	8007cb0 <SUBGHZSPI_Receive>
      pData++;
 8007a7e:	69bb      	ldr	r3, [r7, #24]
 8007a80:	3301      	adds	r3, #1
 8007a82:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007a84:	8afb      	ldrh	r3, [r7, #22]
 8007a86:	3301      	adds	r3, #1
 8007a88:	82fb      	strh	r3, [r7, #22]
 8007a8a:	8afa      	ldrh	r2, [r7, #22]
 8007a8c:	893b      	ldrh	r3, [r7, #8]
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d3f1      	bcc.n	8007a76 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007a92:	f7ff fd11 	bl	80074b8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007a96:	68f8      	ldr	r0, [r7, #12]
 8007a98:	f000 f986 	bl	8007da8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d002      	beq.n	8007aaa <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	77fb      	strb	r3, [r7, #31]
 8007aa8:	e001      	b.n	8007aae <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	715a      	strb	r2, [r3, #5]

    return status;
 8007aba:	7ffb      	ldrb	r3, [r7, #31]
 8007abc:	e000      	b.n	8007ac0 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8007abe:	2302      	movs	r3, #2
  }
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3720      	adds	r7, #32
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8007ad4:	f107 020c 	add.w	r2, r7, #12
 8007ad8:	2302      	movs	r3, #2
 8007ada:	2112      	movs	r1, #18
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f7ff fef4 	bl	80078ca <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8007ae2:	7b3b      	ldrb	r3, [r7, #12]
 8007ae4:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8007ae6:	89fb      	ldrh	r3, [r7, #14]
 8007ae8:	021b      	lsls	r3, r3, #8
 8007aea:	b21a      	sxth	r2, r3
 8007aec:	7b7b      	ldrb	r3, [r7, #13]
 8007aee:	b21b      	sxth	r3, r3
 8007af0:	4313      	orrs	r3, r2
 8007af2:	b21b      	sxth	r3, r3
 8007af4:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8007af6:	f107 020c 	add.w	r2, r7, #12
 8007afa:	2302      	movs	r3, #2
 8007afc:	2102      	movs	r1, #2
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f7ff fe84 	bl	800780c <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8007b04:	89fb      	ldrh	r3, [r7, #14]
 8007b06:	f003 0301 	and.w	r3, r3, #1
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d002      	beq.n	8007b14 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f014 faf2 	bl	801c0f8 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8007b14:	89fb      	ldrh	r3, [r7, #14]
 8007b16:	f003 0302 	and.w	r3, r3, #2
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d002      	beq.n	8007b24 <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f014 faf8 	bl	801c114 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8007b24:	89fb      	ldrh	r3, [r7, #14]
 8007b26:	f003 0304 	and.w	r3, r3, #4
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d002      	beq.n	8007b34 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f014 fb48 	bl	801c1c4 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8007b34:	89fb      	ldrh	r3, [r7, #14]
 8007b36:	f003 0308 	and.w	r3, r3, #8
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d002      	beq.n	8007b44 <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f014 fb4e 	bl	801c1e0 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8007b44:	89fb      	ldrh	r3, [r7, #14]
 8007b46:	f003 0310 	and.w	r3, r3, #16
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d002      	beq.n	8007b54 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f014 fb54 	bl	801c1fc <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8007b54:	89fb      	ldrh	r3, [r7, #14]
 8007b56:	f003 0320 	and.w	r3, r3, #32
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d002      	beq.n	8007b64 <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f014 fb22 	bl	801c1a8 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8007b64:	89fb      	ldrh	r3, [r7, #14]
 8007b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d002      	beq.n	8007b74 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f014 fade 	bl	801c130 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8007b74:	89fb      	ldrh	r3, [r7, #14]
 8007b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00d      	beq.n	8007b9a <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8007b7e:	89fb      	ldrh	r3, [r7, #14]
 8007b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d004      	beq.n	8007b92 <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8007b88:	2101      	movs	r1, #1
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f014 fade 	bl	801c14c <HAL_SUBGHZ_CADStatusCallback>
 8007b90:	e003      	b.n	8007b9a <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8007b92:	2100      	movs	r1, #0
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f014 fad9 	bl	801c14c <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8007b9a:	89fb      	ldrh	r3, [r7, #14]
 8007b9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d002      	beq.n	8007baa <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f014 faef 	bl	801c188 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8007baa:	89fb      	ldrh	r3, [r7, #14]
 8007bac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d002      	beq.n	8007bba <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f014 fb2f 	bl	801c218 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8007bba:	bf00      	nop
 8007bbc:	3710      	adds	r7, #16
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}
	...

08007bc4 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007bcc:	4b0c      	ldr	r3, [pc, #48]	; (8007c00 <SUBGHZSPI_Init+0x3c>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a0b      	ldr	r2, [pc, #44]	; (8007c00 <SUBGHZSPI_Init+0x3c>)
 8007bd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bd6:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8007bd8:	4a09      	ldr	r2, [pc, #36]	; (8007c00 <SUBGHZSPI_Init+0x3c>)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8007be0:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8007be2:	4b07      	ldr	r3, [pc, #28]	; (8007c00 <SUBGHZSPI_Init+0x3c>)
 8007be4:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8007be8:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007bea:	4b05      	ldr	r3, [pc, #20]	; (8007c00 <SUBGHZSPI_Init+0x3c>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a04      	ldr	r2, [pc, #16]	; (8007c00 <SUBGHZSPI_Init+0x3c>)
 8007bf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bf4:	6013      	str	r3, [r2, #0]
}
 8007bf6:	bf00      	nop
 8007bf8:	370c      	adds	r7, #12
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bc80      	pop	{r7}
 8007bfe:	4770      	bx	lr
 8007c00:	58010000 	.word	0x58010000

08007c04 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b087      	sub	sp, #28
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	460b      	mov	r3, r1
 8007c0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8007c10:	2300      	movs	r3, #0
 8007c12:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007c14:	4b23      	ldr	r3, [pc, #140]	; (8007ca4 <SUBGHZSPI_Transmit+0xa0>)
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	4613      	mov	r3, r2
 8007c1a:	00db      	lsls	r3, r3, #3
 8007c1c:	1a9b      	subs	r3, r3, r2
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	0cdb      	lsrs	r3, r3, #19
 8007c22:	2264      	movs	r2, #100	; 0x64
 8007c24:	fb02 f303 	mul.w	r3, r2, r3
 8007c28:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d105      	bne.n	8007c3c <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8007c30:	2301      	movs	r3, #1
 8007c32:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2201      	movs	r2, #1
 8007c38:	609a      	str	r2, [r3, #8]
      break;
 8007c3a:	e008      	b.n	8007c4e <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	3b01      	subs	r3, #1
 8007c40:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007c42:	4b19      	ldr	r3, [pc, #100]	; (8007ca8 <SUBGHZSPI_Transmit+0xa4>)
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	f003 0302 	and.w	r3, r3, #2
 8007c4a:	2b02      	cmp	r3, #2
 8007c4c:	d1ed      	bne.n	8007c2a <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007c4e:	4b17      	ldr	r3, [pc, #92]	; (8007cac <SUBGHZSPI_Transmit+0xa8>)
 8007c50:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	78fa      	ldrb	r2, [r7, #3]
 8007c56:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007c58:	4b12      	ldr	r3, [pc, #72]	; (8007ca4 <SUBGHZSPI_Transmit+0xa0>)
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	4613      	mov	r3, r2
 8007c5e:	00db      	lsls	r3, r3, #3
 8007c60:	1a9b      	subs	r3, r3, r2
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	0cdb      	lsrs	r3, r3, #19
 8007c66:	2264      	movs	r2, #100	; 0x64
 8007c68:	fb02 f303 	mul.w	r3, r2, r3
 8007c6c:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d105      	bne.n	8007c80 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8007c74:	2301      	movs	r3, #1
 8007c76:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	609a      	str	r2, [r3, #8]
      break;
 8007c7e:	e008      	b.n	8007c92 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	3b01      	subs	r3, #1
 8007c84:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007c86:	4b08      	ldr	r3, [pc, #32]	; (8007ca8 <SUBGHZSPI_Transmit+0xa4>)
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	f003 0301 	and.w	r3, r3, #1
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d1ed      	bne.n	8007c6e <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8007c92:	4b05      	ldr	r3, [pc, #20]	; (8007ca8 <SUBGHZSPI_Transmit+0xa4>)
 8007c94:	68db      	ldr	r3, [r3, #12]

  return status;
 8007c96:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	371c      	adds	r7, #28
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bc80      	pop	{r7}
 8007ca0:	4770      	bx	lr
 8007ca2:	bf00      	nop
 8007ca4:	20000000 	.word	0x20000000
 8007ca8:	58010000 	.word	0x58010000
 8007cac:	5801000c 	.word	0x5801000c

08007cb0 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b087      	sub	sp, #28
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007cbe:	4b25      	ldr	r3, [pc, #148]	; (8007d54 <SUBGHZSPI_Receive+0xa4>)
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	4613      	mov	r3, r2
 8007cc4:	00db      	lsls	r3, r3, #3
 8007cc6:	1a9b      	subs	r3, r3, r2
 8007cc8:	009b      	lsls	r3, r3, #2
 8007cca:	0cdb      	lsrs	r3, r3, #19
 8007ccc:	2264      	movs	r2, #100	; 0x64
 8007cce:	fb02 f303 	mul.w	r3, r2, r3
 8007cd2:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d105      	bne.n	8007ce6 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	609a      	str	r2, [r3, #8]
      break;
 8007ce4:	e008      	b.n	8007cf8 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	3b01      	subs	r3, #1
 8007cea:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007cec:	4b1a      	ldr	r3, [pc, #104]	; (8007d58 <SUBGHZSPI_Receive+0xa8>)
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	f003 0302 	and.w	r3, r3, #2
 8007cf4:	2b02      	cmp	r3, #2
 8007cf6:	d1ed      	bne.n	8007cd4 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007cf8:	4b18      	ldr	r3, [pc, #96]	; (8007d5c <SUBGHZSPI_Receive+0xac>)
 8007cfa:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	22ff      	movs	r2, #255	; 0xff
 8007d00:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007d02:	4b14      	ldr	r3, [pc, #80]	; (8007d54 <SUBGHZSPI_Receive+0xa4>)
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	4613      	mov	r3, r2
 8007d08:	00db      	lsls	r3, r3, #3
 8007d0a:	1a9b      	subs	r3, r3, r2
 8007d0c:	009b      	lsls	r3, r3, #2
 8007d0e:	0cdb      	lsrs	r3, r3, #19
 8007d10:	2264      	movs	r2, #100	; 0x64
 8007d12:	fb02 f303 	mul.w	r3, r2, r3
 8007d16:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d105      	bne.n	8007d2a <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2201      	movs	r2, #1
 8007d26:	609a      	str	r2, [r3, #8]
      break;
 8007d28:	e008      	b.n	8007d3c <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	3b01      	subs	r3, #1
 8007d2e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007d30:	4b09      	ldr	r3, [pc, #36]	; (8007d58 <SUBGHZSPI_Receive+0xa8>)
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	f003 0301 	and.w	r3, r3, #1
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d1ed      	bne.n	8007d18 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8007d3c:	4b06      	ldr	r3, [pc, #24]	; (8007d58 <SUBGHZSPI_Receive+0xa8>)
 8007d3e:	68db      	ldr	r3, [r3, #12]
 8007d40:	b2da      	uxtb	r2, r3
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	701a      	strb	r2, [r3, #0]

  return status;
 8007d46:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	371c      	adds	r7, #28
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bc80      	pop	{r7}
 8007d50:	4770      	bx	lr
 8007d52:	bf00      	nop
 8007d54:	20000000 	.word	0x20000000
 8007d58:	58010000 	.word	0x58010000
 8007d5c:	5801000c 	.word	0x5801000c

08007d60 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b084      	sub	sp, #16
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	791b      	ldrb	r3, [r3, #4]
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d111      	bne.n	8007d94 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8007d70:	4b0c      	ldr	r3, [pc, #48]	; (8007da4 <SUBGHZ_CheckDeviceReady+0x44>)
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	4613      	mov	r3, r2
 8007d76:	005b      	lsls	r3, r3, #1
 8007d78:	4413      	add	r3, r2
 8007d7a:	00db      	lsls	r3, r3, #3
 8007d7c:	0c1b      	lsrs	r3, r3, #16
 8007d7e:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007d80:	f7ff fbaa 	bl	80074d8 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	3b01      	subs	r3, #1
 8007d88:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d1f9      	bne.n	8007d84 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007d90:	f7ff fb92 	bl	80074b8 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 f807 	bl	8007da8 <SUBGHZ_WaitOnBusy>
 8007d9a:	4603      	mov	r3, r0
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3710      	adds	r7, #16
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}
 8007da4:	20000000 	.word	0x20000000

08007da8 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b086      	sub	sp, #24
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8007db0:	2300      	movs	r3, #0
 8007db2:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8007db4:	4b12      	ldr	r3, [pc, #72]	; (8007e00 <SUBGHZ_WaitOnBusy+0x58>)
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	4613      	mov	r3, r2
 8007dba:	005b      	lsls	r3, r3, #1
 8007dbc:	4413      	add	r3, r2
 8007dbe:	00db      	lsls	r3, r3, #3
 8007dc0:	0d1b      	lsrs	r3, r3, #20
 8007dc2:	2264      	movs	r2, #100	; 0x64
 8007dc4:	fb02 f303 	mul.w	r3, r2, r3
 8007dc8:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8007dca:	f7ff fbb3 	bl	8007534 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8007dce:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d105      	bne.n	8007de2 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2202      	movs	r2, #2
 8007dde:	609a      	str	r2, [r3, #8]
      break;
 8007de0:	e009      	b.n	8007df6 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	3b01      	subs	r3, #1
 8007de6:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8007de8:	f7ff fb92 	bl	8007510 <LL_PWR_IsActiveFlag_RFBUSYS>
 8007dec:	4602      	mov	r2, r0
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	4013      	ands	r3, r2
 8007df2:	2b01      	cmp	r3, #1
 8007df4:	d0e9      	beq.n	8007dca <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8007df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3718      	adds	r7, #24
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}
 8007e00:	20000000 	.word	0x20000000

08007e04 <LL_RCC_GetUSARTClockSource>:
{
 8007e04:	b480      	push	{r7}
 8007e06:	b083      	sub	sp, #12
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8007e0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e10:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	401a      	ands	r2, r3
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	041b      	lsls	r3, r3, #16
 8007e1c:	4313      	orrs	r3, r2
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	370c      	adds	r7, #12
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bc80      	pop	{r7}
 8007e26:	4770      	bx	lr

08007e28 <LL_RCC_GetLPUARTClockSource>:
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b083      	sub	sp, #12
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007e30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e34:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	4013      	ands	r3, r2
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	370c      	adds	r7, #12
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bc80      	pop	{r7}
 8007e44:	4770      	bx	lr

08007e46 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e46:	b580      	push	{r7, lr}
 8007e48:	b082      	sub	sp, #8
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d101      	bne.n	8007e58 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e54:	2301      	movs	r3, #1
 8007e56:	e042      	b.n	8007ede <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d106      	bne.n	8007e70 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2200      	movs	r2, #0
 8007e66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f7fa fcfa 	bl	8002864 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2224      	movs	r2, #36	; 0x24
 8007e74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	681a      	ldr	r2, [r3, #0]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f022 0201 	bic.w	r2, r2, #1
 8007e86:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f000 fc3b 	bl	8008704 <UART_SetConfig>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d101      	bne.n	8007e98 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007e94:	2301      	movs	r3, #1
 8007e96:	e022      	b.n	8007ede <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d002      	beq.n	8007ea6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f000 fea3 	bl	8008bec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	685a      	ldr	r2, [r3, #4]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007eb4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	689a      	ldr	r2, [r3, #8]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ec4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f042 0201 	orr.w	r2, r2, #1
 8007ed4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 ff29 	bl	8008d2e <UART_CheckIdleState>
 8007edc:	4603      	mov	r3, r0
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3708      	adds	r7, #8
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
	...

08007ee8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b08a      	sub	sp, #40	; 0x28
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	60f8      	str	r0, [r7, #12]
 8007ef0:	60b9      	str	r1, [r7, #8]
 8007ef2:	4613      	mov	r3, r2
 8007ef4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007efc:	2b20      	cmp	r3, #32
 8007efe:	d137      	bne.n	8007f70 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d002      	beq.n	8007f0c <HAL_UART_Receive_IT+0x24>
 8007f06:	88fb      	ldrh	r3, [r7, #6]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d101      	bne.n	8007f10 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e030      	b.n	8007f72 <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	2200      	movs	r2, #0
 8007f14:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a18      	ldr	r2, [pc, #96]	; (8007f7c <HAL_UART_Receive_IT+0x94>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d01f      	beq.n	8007f60 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d018      	beq.n	8007f60 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	e853 3f00 	ldrex	r3, [r3]
 8007f3a:	613b      	str	r3, [r7, #16]
   return(result);
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007f42:	627b      	str	r3, [r7, #36]	; 0x24
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	461a      	mov	r2, r3
 8007f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4c:	623b      	str	r3, [r7, #32]
 8007f4e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f50:	69f9      	ldr	r1, [r7, #28]
 8007f52:	6a3a      	ldr	r2, [r7, #32]
 8007f54:	e841 2300 	strex	r3, r2, [r1]
 8007f58:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f5a:	69bb      	ldr	r3, [r7, #24]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d1e6      	bne.n	8007f2e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007f60:	88fb      	ldrh	r3, [r7, #6]
 8007f62:	461a      	mov	r2, r3
 8007f64:	68b9      	ldr	r1, [r7, #8]
 8007f66:	68f8      	ldr	r0, [r7, #12]
 8007f68:	f000 fff8 	bl	8008f5c <UART_Start_Receive_IT>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	e000      	b.n	8007f72 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007f70:	2302      	movs	r3, #2
  }
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3728      	adds	r7, #40	; 0x28
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	40008000 	.word	0x40008000

08007f80 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b08a      	sub	sp, #40	; 0x28
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	60f8      	str	r0, [r7, #12]
 8007f88:	60b9      	str	r1, [r7, #8]
 8007f8a:	4613      	mov	r3, r2
 8007f8c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f94:	2b20      	cmp	r3, #32
 8007f96:	d167      	bne.n	8008068 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d002      	beq.n	8007fa4 <HAL_UART_Transmit_DMA+0x24>
 8007f9e:	88fb      	ldrh	r3, [r7, #6]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d101      	bne.n	8007fa8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	e060      	b.n	800806a <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	68ba      	ldr	r2, [r7, #8]
 8007fac:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	88fa      	ldrh	r2, [r7, #6]
 8007fb2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	88fa      	ldrh	r2, [r7, #6]
 8007fba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2221      	movs	r2, #33	; 0x21
 8007fca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d028      	beq.n	8008028 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fda:	4a26      	ldr	r2, [pc, #152]	; (8008074 <HAL_UART_Transmit_DMA+0xf4>)
 8007fdc:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fe2:	4a25      	ldr	r2, [pc, #148]	; (8008078 <HAL_UART_Transmit_DMA+0xf8>)
 8007fe4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fea:	4a24      	ldr	r2, [pc, #144]	; (800807c <HAL_UART_Transmit_DMA+0xfc>)
 8007fec:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ffe:	4619      	mov	r1, r3
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	3328      	adds	r3, #40	; 0x28
 8008006:	461a      	mov	r2, r3
 8008008:	88fb      	ldrh	r3, [r7, #6]
 800800a:	f7fc fa27 	bl	800445c <HAL_DMA_Start_IT>
 800800e:	4603      	mov	r3, r0
 8008010:	2b00      	cmp	r3, #0
 8008012:	d009      	beq.n	8008028 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2210      	movs	r2, #16
 8008018:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2220      	movs	r2, #32
 8008020:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8008024:	2301      	movs	r3, #1
 8008026:	e020      	b.n	800806a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	2240      	movs	r2, #64	; 0x40
 800802e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	3308      	adds	r3, #8
 8008036:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	e853 3f00 	ldrex	r3, [r3]
 800803e:	613b      	str	r3, [r7, #16]
   return(result);
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008046:	627b      	str	r3, [r7, #36]	; 0x24
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	3308      	adds	r3, #8
 800804e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008050:	623a      	str	r2, [r7, #32]
 8008052:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008054:	69f9      	ldr	r1, [r7, #28]
 8008056:	6a3a      	ldr	r2, [r7, #32]
 8008058:	e841 2300 	strex	r3, r2, [r1]
 800805c:	61bb      	str	r3, [r7, #24]
   return(result);
 800805e:	69bb      	ldr	r3, [r7, #24]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d1e5      	bne.n	8008030 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008064:	2300      	movs	r3, #0
 8008066:	e000      	b.n	800806a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008068:	2302      	movs	r3, #2
  }
}
 800806a:	4618      	mov	r0, r3
 800806c:	3728      	adds	r7, #40	; 0x28
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}
 8008072:	bf00      	nop
 8008074:	080092e7 	.word	0x080092e7
 8008078:	08009381 	.word	0x08009381
 800807c:	0800939d 	.word	0x0800939d

08008080 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b0ba      	sub	sp, #232	; 0xe8
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	69db      	ldr	r3, [r3, #28]
 800808e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80080a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80080aa:	f640 030f 	movw	r3, #2063	; 0x80f
 80080ae:	4013      	ands	r3, r2
 80080b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80080b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d11b      	bne.n	80080f4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80080bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080c0:	f003 0320 	and.w	r3, r3, #32
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d015      	beq.n	80080f4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80080c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080cc:	f003 0320 	and.w	r3, r3, #32
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d105      	bne.n	80080e0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80080d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d009      	beq.n	80080f4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	f000 82e3 	beq.w	80086b0 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	4798      	blx	r3
      }
      return;
 80080f2:	e2dd      	b.n	80086b0 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80080f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	f000 8123 	beq.w	8008344 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80080fe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008102:	4b8d      	ldr	r3, [pc, #564]	; (8008338 <HAL_UART_IRQHandler+0x2b8>)
 8008104:	4013      	ands	r3, r2
 8008106:	2b00      	cmp	r3, #0
 8008108:	d106      	bne.n	8008118 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800810a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800810e:	4b8b      	ldr	r3, [pc, #556]	; (800833c <HAL_UART_IRQHandler+0x2bc>)
 8008110:	4013      	ands	r3, r2
 8008112:	2b00      	cmp	r3, #0
 8008114:	f000 8116 	beq.w	8008344 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800811c:	f003 0301 	and.w	r3, r3, #1
 8008120:	2b00      	cmp	r3, #0
 8008122:	d011      	beq.n	8008148 <HAL_UART_IRQHandler+0xc8>
 8008124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800812c:	2b00      	cmp	r3, #0
 800812e:	d00b      	beq.n	8008148 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	2201      	movs	r2, #1
 8008136:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800813e:	f043 0201 	orr.w	r2, r3, #1
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800814c:	f003 0302 	and.w	r3, r3, #2
 8008150:	2b00      	cmp	r3, #0
 8008152:	d011      	beq.n	8008178 <HAL_UART_IRQHandler+0xf8>
 8008154:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008158:	f003 0301 	and.w	r3, r3, #1
 800815c:	2b00      	cmp	r3, #0
 800815e:	d00b      	beq.n	8008178 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	2202      	movs	r2, #2
 8008166:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800816e:	f043 0204 	orr.w	r2, r3, #4
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800817c:	f003 0304 	and.w	r3, r3, #4
 8008180:	2b00      	cmp	r3, #0
 8008182:	d011      	beq.n	80081a8 <HAL_UART_IRQHandler+0x128>
 8008184:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008188:	f003 0301 	and.w	r3, r3, #1
 800818c:	2b00      	cmp	r3, #0
 800818e:	d00b      	beq.n	80081a8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	2204      	movs	r2, #4
 8008196:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800819e:	f043 0202 	orr.w	r2, r3, #2
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80081a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081ac:	f003 0308 	and.w	r3, r3, #8
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d017      	beq.n	80081e4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80081b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081b8:	f003 0320 	and.w	r3, r3, #32
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d105      	bne.n	80081cc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80081c0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80081c4:	4b5c      	ldr	r3, [pc, #368]	; (8008338 <HAL_UART_IRQHandler+0x2b8>)
 80081c6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d00b      	beq.n	80081e4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	2208      	movs	r2, #8
 80081d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081da:	f043 0208 	orr.w	r2, r3, #8
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80081e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d012      	beq.n	8008216 <HAL_UART_IRQHandler+0x196>
 80081f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d00c      	beq.n	8008216 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008204:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800820c:	f043 0220 	orr.w	r2, r3, #32
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800821c:	2b00      	cmp	r3, #0
 800821e:	f000 8249 	beq.w	80086b4 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008226:	f003 0320 	and.w	r3, r3, #32
 800822a:	2b00      	cmp	r3, #0
 800822c:	d013      	beq.n	8008256 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800822e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008232:	f003 0320 	and.w	r3, r3, #32
 8008236:	2b00      	cmp	r3, #0
 8008238:	d105      	bne.n	8008246 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800823a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800823e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008242:	2b00      	cmp	r3, #0
 8008244:	d007      	beq.n	8008256 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800824a:	2b00      	cmp	r3, #0
 800824c:	d003      	beq.n	8008256 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800825c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	689b      	ldr	r3, [r3, #8]
 8008266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800826a:	2b40      	cmp	r3, #64	; 0x40
 800826c:	d005      	beq.n	800827a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800826e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008272:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008276:	2b00      	cmp	r3, #0
 8008278:	d054      	beq.n	8008324 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 ffce 	bl	800921c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	689b      	ldr	r3, [r3, #8]
 8008286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800828a:	2b40      	cmp	r3, #64	; 0x40
 800828c:	d146      	bne.n	800831c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	3308      	adds	r3, #8
 8008294:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008298:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800829c:	e853 3f00 	ldrex	r3, [r3]
 80082a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80082a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80082a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	3308      	adds	r3, #8
 80082b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80082ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80082be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80082c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80082ca:	e841 2300 	strex	r3, r2, [r1]
 80082ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80082d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d1d9      	bne.n	800828e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d017      	beq.n	8008314 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082ea:	4a15      	ldr	r2, [pc, #84]	; (8008340 <HAL_UART_IRQHandler+0x2c0>)
 80082ec:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082f4:	4618      	mov	r0, r3
 80082f6:	f7fc f98d 	bl	8004614 <HAL_DMA_Abort_IT>
 80082fa:	4603      	mov	r3, r0
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d019      	beq.n	8008334 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800830e:	4610      	mov	r0, r2
 8008310:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008312:	e00f      	b.n	8008334 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 f9e0 	bl	80086da <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800831a:	e00b      	b.n	8008334 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f000 f9dc 	bl	80086da <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008322:	e007      	b.n	8008334 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 f9d8 	bl	80086da <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8008332:	e1bf      	b.n	80086b4 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008334:	bf00      	nop
    return;
 8008336:	e1bd      	b.n	80086b4 <HAL_UART_IRQHandler+0x634>
 8008338:	10000001 	.word	0x10000001
 800833c:	04000120 	.word	0x04000120
 8008340:	0800941d 	.word	0x0800941d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008348:	2b01      	cmp	r3, #1
 800834a:	f040 8153 	bne.w	80085f4 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800834e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008352:	f003 0310 	and.w	r3, r3, #16
 8008356:	2b00      	cmp	r3, #0
 8008358:	f000 814c 	beq.w	80085f4 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800835c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008360:	f003 0310 	and.w	r3, r3, #16
 8008364:	2b00      	cmp	r3, #0
 8008366:	f000 8145 	beq.w	80085f4 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	2210      	movs	r2, #16
 8008370:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	689b      	ldr	r3, [r3, #8]
 8008378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800837c:	2b40      	cmp	r3, #64	; 0x40
 800837e:	f040 80bb 	bne.w	80084f8 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008390:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008394:	2b00      	cmp	r3, #0
 8008396:	f000 818f 	beq.w	80086b8 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80083a0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80083a4:	429a      	cmp	r2, r3
 80083a6:	f080 8187 	bcs.w	80086b8 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80083b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f003 0320 	and.w	r3, r3, #32
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	f040 8087 	bne.w	80084d6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80083d4:	e853 3f00 	ldrex	r3, [r3]
 80083d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80083dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80083e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	461a      	mov	r2, r3
 80083ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80083f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80083f6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80083fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008402:	e841 2300 	strex	r3, r2, [r1]
 8008406:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800840a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800840e:	2b00      	cmp	r3, #0
 8008410:	d1da      	bne.n	80083c8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	3308      	adds	r3, #8
 8008418:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800841a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800841c:	e853 3f00 	ldrex	r3, [r3]
 8008420:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008422:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008424:	f023 0301 	bic.w	r3, r3, #1
 8008428:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	3308      	adds	r3, #8
 8008432:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008436:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800843a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800843c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800843e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008442:	e841 2300 	strex	r3, r2, [r1]
 8008446:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008448:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800844a:	2b00      	cmp	r3, #0
 800844c:	d1e1      	bne.n	8008412 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	3308      	adds	r3, #8
 8008454:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008456:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008458:	e853 3f00 	ldrex	r3, [r3]
 800845c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800845e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008460:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008464:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	3308      	adds	r3, #8
 800846e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008472:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008474:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008476:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008478:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800847a:	e841 2300 	strex	r3, r2, [r1]
 800847e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008480:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008482:	2b00      	cmp	r3, #0
 8008484:	d1e3      	bne.n	800844e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2220      	movs	r2, #32
 800848a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2200      	movs	r2, #0
 8008492:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800849a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800849c:	e853 3f00 	ldrex	r3, [r3]
 80084a0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80084a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084a4:	f023 0310 	bic.w	r3, r3, #16
 80084a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	461a      	mov	r2, r3
 80084b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80084b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80084b8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80084bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80084be:	e841 2300 	strex	r3, r2, [r1]
 80084c2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80084c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d1e4      	bne.n	8008494 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084d0:	4618      	mov	r0, r3
 80084d2:	f7fc f841 	bl	8004558 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2202      	movs	r2, #2
 80084da:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	1ad3      	subs	r3, r2, r3
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	4619      	mov	r1, r3
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 f8fb 	bl	80086ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80084f6:	e0df      	b.n	80086b8 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008504:	b29b      	uxth	r3, r3
 8008506:	1ad3      	subs	r3, r2, r3
 8008508:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008512:	b29b      	uxth	r3, r3
 8008514:	2b00      	cmp	r3, #0
 8008516:	f000 80d1 	beq.w	80086bc <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800851a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800851e:	2b00      	cmp	r3, #0
 8008520:	f000 80cc 	beq.w	80086bc <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800852a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800852c:	e853 3f00 	ldrex	r3, [r3]
 8008530:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008534:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008538:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	461a      	mov	r2, r3
 8008542:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008546:	647b      	str	r3, [r7, #68]	; 0x44
 8008548:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800854a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800854c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800854e:	e841 2300 	strex	r3, r2, [r1]
 8008552:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008556:	2b00      	cmp	r3, #0
 8008558:	d1e4      	bne.n	8008524 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	3308      	adds	r3, #8
 8008560:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008564:	e853 3f00 	ldrex	r3, [r3]
 8008568:	623b      	str	r3, [r7, #32]
   return(result);
 800856a:	6a3b      	ldr	r3, [r7, #32]
 800856c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008570:	f023 0301 	bic.w	r3, r3, #1
 8008574:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	3308      	adds	r3, #8
 800857e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008582:	633a      	str	r2, [r7, #48]	; 0x30
 8008584:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008586:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008588:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800858a:	e841 2300 	strex	r3, r2, [r1]
 800858e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008592:	2b00      	cmp	r3, #0
 8008594:	d1e1      	bne.n	800855a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2220      	movs	r2, #32
 800859a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2200      	movs	r2, #0
 80085a8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	e853 3f00 	ldrex	r3, [r3]
 80085b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f023 0310 	bic.w	r3, r3, #16
 80085be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	461a      	mov	r2, r3
 80085c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80085cc:	61fb      	str	r3, [r7, #28]
 80085ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d0:	69b9      	ldr	r1, [r7, #24]
 80085d2:	69fa      	ldr	r2, [r7, #28]
 80085d4:	e841 2300 	strex	r3, r2, [r1]
 80085d8:	617b      	str	r3, [r7, #20]
   return(result);
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d1e4      	bne.n	80085aa <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2202      	movs	r2, #2
 80085e4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80085e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80085ea:	4619      	mov	r1, r3
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f000 f87d 	bl	80086ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80085f2:	e063      	b.n	80086bc <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80085f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d00e      	beq.n	800861e <HAL_UART_IRQHandler+0x59e>
 8008600:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008604:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008608:	2b00      	cmp	r3, #0
 800860a:	d008      	beq.n	800861e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008614:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f001 fc5e 	bl	8009ed8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800861c:	e051      	b.n	80086c2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800861e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008626:	2b00      	cmp	r3, #0
 8008628:	d014      	beq.n	8008654 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800862a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800862e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008632:	2b00      	cmp	r3, #0
 8008634:	d105      	bne.n	8008642 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008636:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800863a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800863e:	2b00      	cmp	r3, #0
 8008640:	d008      	beq.n	8008654 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008646:	2b00      	cmp	r3, #0
 8008648:	d03a      	beq.n	80086c0 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	4798      	blx	r3
    }
    return;
 8008652:	e035      	b.n	80086c0 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800865c:	2b00      	cmp	r3, #0
 800865e:	d009      	beq.n	8008674 <HAL_UART_IRQHandler+0x5f4>
 8008660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008668:	2b00      	cmp	r3, #0
 800866a:	d003      	beq.n	8008674 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f000 feeb 	bl	8009448 <UART_EndTransmit_IT>
    return;
 8008672:	e026      	b.n	80086c2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008678:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800867c:	2b00      	cmp	r3, #0
 800867e:	d009      	beq.n	8008694 <HAL_UART_IRQHandler+0x614>
 8008680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008684:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008688:	2b00      	cmp	r3, #0
 800868a:	d003      	beq.n	8008694 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f001 fc35 	bl	8009efc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008692:	e016      	b.n	80086c2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008698:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800869c:	2b00      	cmp	r3, #0
 800869e:	d010      	beq.n	80086c2 <HAL_UART_IRQHandler+0x642>
 80086a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	da0c      	bge.n	80086c2 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f001 fc1e 	bl	8009eea <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80086ae:	e008      	b.n	80086c2 <HAL_UART_IRQHandler+0x642>
      return;
 80086b0:	bf00      	nop
 80086b2:	e006      	b.n	80086c2 <HAL_UART_IRQHandler+0x642>
    return;
 80086b4:	bf00      	nop
 80086b6:	e004      	b.n	80086c2 <HAL_UART_IRQHandler+0x642>
      return;
 80086b8:	bf00      	nop
 80086ba:	e002      	b.n	80086c2 <HAL_UART_IRQHandler+0x642>
      return;
 80086bc:	bf00      	nop
 80086be:	e000      	b.n	80086c2 <HAL_UART_IRQHandler+0x642>
    return;
 80086c0:	bf00      	nop
  }
}
 80086c2:	37e8      	adds	r7, #232	; 0xe8
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}

080086c8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b083      	sub	sp, #12
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80086d0:	bf00      	nop
 80086d2:	370c      	adds	r7, #12
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bc80      	pop	{r7}
 80086d8:	4770      	bx	lr

080086da <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80086da:	b480      	push	{r7}
 80086dc:	b083      	sub	sp, #12
 80086de:	af00      	add	r7, sp, #0
 80086e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80086e2:	bf00      	nop
 80086e4:	370c      	adds	r7, #12
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bc80      	pop	{r7}
 80086ea:	4770      	bx	lr

080086ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b083      	sub	sp, #12
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	460b      	mov	r3, r1
 80086f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80086f8:	bf00      	nop
 80086fa:	370c      	adds	r7, #12
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bc80      	pop	{r7}
 8008700:	4770      	bx	lr
	...

08008704 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008704:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008708:	b08c      	sub	sp, #48	; 0x30
 800870a:	af00      	add	r7, sp, #0
 800870c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800870e:	2300      	movs	r3, #0
 8008710:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	689a      	ldr	r2, [r3, #8]
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	691b      	ldr	r3, [r3, #16]
 800871c:	431a      	orrs	r2, r3
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	695b      	ldr	r3, [r3, #20]
 8008722:	431a      	orrs	r2, r3
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	69db      	ldr	r3, [r3, #28]
 8008728:	4313      	orrs	r3, r2
 800872a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	681a      	ldr	r2, [r3, #0]
 8008732:	4b94      	ldr	r3, [pc, #592]	; (8008984 <UART_SetConfig+0x280>)
 8008734:	4013      	ands	r3, r2
 8008736:	697a      	ldr	r2, [r7, #20]
 8008738:	6812      	ldr	r2, [r2, #0]
 800873a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800873c:	430b      	orrs	r3, r1
 800873e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	68da      	ldr	r2, [r3, #12]
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	430a      	orrs	r2, r1
 8008754:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	699b      	ldr	r3, [r3, #24]
 800875a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a89      	ldr	r2, [pc, #548]	; (8008988 <UART_SetConfig+0x284>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d004      	beq.n	8008770 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	6a1b      	ldr	r3, [r3, #32]
 800876a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800876c:	4313      	orrs	r3, r2
 800876e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	689b      	ldr	r3, [r3, #8]
 8008776:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800877a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800877e:	697a      	ldr	r2, [r7, #20]
 8008780:	6812      	ldr	r2, [r2, #0]
 8008782:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008784:	430b      	orrs	r3, r1
 8008786:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800878e:	f023 010f 	bic.w	r1, r3, #15
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	430a      	orrs	r2, r1
 800879c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a7a      	ldr	r2, [pc, #488]	; (800898c <UART_SetConfig+0x288>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d127      	bne.n	80087f8 <UART_SetConfig+0xf4>
 80087a8:	2003      	movs	r0, #3
 80087aa:	f7ff fb2b 	bl	8007e04 <LL_RCC_GetUSARTClockSource>
 80087ae:	4603      	mov	r3, r0
 80087b0:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80087b4:	2b03      	cmp	r3, #3
 80087b6:	d81b      	bhi.n	80087f0 <UART_SetConfig+0xec>
 80087b8:	a201      	add	r2, pc, #4	; (adr r2, 80087c0 <UART_SetConfig+0xbc>)
 80087ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087be:	bf00      	nop
 80087c0:	080087d1 	.word	0x080087d1
 80087c4:	080087e1 	.word	0x080087e1
 80087c8:	080087d9 	.word	0x080087d9
 80087cc:	080087e9 	.word	0x080087e9
 80087d0:	2301      	movs	r3, #1
 80087d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087d6:	e080      	b.n	80088da <UART_SetConfig+0x1d6>
 80087d8:	2302      	movs	r3, #2
 80087da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087de:	e07c      	b.n	80088da <UART_SetConfig+0x1d6>
 80087e0:	2304      	movs	r3, #4
 80087e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087e6:	e078      	b.n	80088da <UART_SetConfig+0x1d6>
 80087e8:	2308      	movs	r3, #8
 80087ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087ee:	e074      	b.n	80088da <UART_SetConfig+0x1d6>
 80087f0:	2310      	movs	r3, #16
 80087f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087f6:	e070      	b.n	80088da <UART_SetConfig+0x1d6>
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a64      	ldr	r2, [pc, #400]	; (8008990 <UART_SetConfig+0x28c>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d138      	bne.n	8008874 <UART_SetConfig+0x170>
 8008802:	200c      	movs	r0, #12
 8008804:	f7ff fafe 	bl	8007e04 <LL_RCC_GetUSARTClockSource>
 8008808:	4603      	mov	r3, r0
 800880a:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800880e:	2b0c      	cmp	r3, #12
 8008810:	d82c      	bhi.n	800886c <UART_SetConfig+0x168>
 8008812:	a201      	add	r2, pc, #4	; (adr r2, 8008818 <UART_SetConfig+0x114>)
 8008814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008818:	0800884d 	.word	0x0800884d
 800881c:	0800886d 	.word	0x0800886d
 8008820:	0800886d 	.word	0x0800886d
 8008824:	0800886d 	.word	0x0800886d
 8008828:	0800885d 	.word	0x0800885d
 800882c:	0800886d 	.word	0x0800886d
 8008830:	0800886d 	.word	0x0800886d
 8008834:	0800886d 	.word	0x0800886d
 8008838:	08008855 	.word	0x08008855
 800883c:	0800886d 	.word	0x0800886d
 8008840:	0800886d 	.word	0x0800886d
 8008844:	0800886d 	.word	0x0800886d
 8008848:	08008865 	.word	0x08008865
 800884c:	2300      	movs	r3, #0
 800884e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008852:	e042      	b.n	80088da <UART_SetConfig+0x1d6>
 8008854:	2302      	movs	r3, #2
 8008856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800885a:	e03e      	b.n	80088da <UART_SetConfig+0x1d6>
 800885c:	2304      	movs	r3, #4
 800885e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008862:	e03a      	b.n	80088da <UART_SetConfig+0x1d6>
 8008864:	2308      	movs	r3, #8
 8008866:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800886a:	e036      	b.n	80088da <UART_SetConfig+0x1d6>
 800886c:	2310      	movs	r3, #16
 800886e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008872:	e032      	b.n	80088da <UART_SetConfig+0x1d6>
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a43      	ldr	r2, [pc, #268]	; (8008988 <UART_SetConfig+0x284>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d12a      	bne.n	80088d4 <UART_SetConfig+0x1d0>
 800887e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008882:	f7ff fad1 	bl	8007e28 <LL_RCC_GetLPUARTClockSource>
 8008886:	4603      	mov	r3, r0
 8008888:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800888c:	d01a      	beq.n	80088c4 <UART_SetConfig+0x1c0>
 800888e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008892:	d81b      	bhi.n	80088cc <UART_SetConfig+0x1c8>
 8008894:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008898:	d00c      	beq.n	80088b4 <UART_SetConfig+0x1b0>
 800889a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800889e:	d815      	bhi.n	80088cc <UART_SetConfig+0x1c8>
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d003      	beq.n	80088ac <UART_SetConfig+0x1a8>
 80088a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088a8:	d008      	beq.n	80088bc <UART_SetConfig+0x1b8>
 80088aa:	e00f      	b.n	80088cc <UART_SetConfig+0x1c8>
 80088ac:	2300      	movs	r3, #0
 80088ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088b2:	e012      	b.n	80088da <UART_SetConfig+0x1d6>
 80088b4:	2302      	movs	r3, #2
 80088b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088ba:	e00e      	b.n	80088da <UART_SetConfig+0x1d6>
 80088bc:	2304      	movs	r3, #4
 80088be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088c2:	e00a      	b.n	80088da <UART_SetConfig+0x1d6>
 80088c4:	2308      	movs	r3, #8
 80088c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088ca:	e006      	b.n	80088da <UART_SetConfig+0x1d6>
 80088cc:	2310      	movs	r3, #16
 80088ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088d2:	e002      	b.n	80088da <UART_SetConfig+0x1d6>
 80088d4:	2310      	movs	r3, #16
 80088d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a2a      	ldr	r2, [pc, #168]	; (8008988 <UART_SetConfig+0x284>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	f040 80a4 	bne.w	8008a2e <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80088e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80088ea:	2b08      	cmp	r3, #8
 80088ec:	d823      	bhi.n	8008936 <UART_SetConfig+0x232>
 80088ee:	a201      	add	r2, pc, #4	; (adr r2, 80088f4 <UART_SetConfig+0x1f0>)
 80088f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088f4:	08008919 	.word	0x08008919
 80088f8:	08008937 	.word	0x08008937
 80088fc:	08008921 	.word	0x08008921
 8008900:	08008937 	.word	0x08008937
 8008904:	08008927 	.word	0x08008927
 8008908:	08008937 	.word	0x08008937
 800890c:	08008937 	.word	0x08008937
 8008910:	08008937 	.word	0x08008937
 8008914:	0800892f 	.word	0x0800892f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008918:	f7fd fe76 	bl	8006608 <HAL_RCC_GetPCLK1Freq>
 800891c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800891e:	e010      	b.n	8008942 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008920:	4b1c      	ldr	r3, [pc, #112]	; (8008994 <UART_SetConfig+0x290>)
 8008922:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008924:	e00d      	b.n	8008942 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008926:	f7fd fdbb 	bl	80064a0 <HAL_RCC_GetSysClockFreq>
 800892a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800892c:	e009      	b.n	8008942 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800892e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008932:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008934:	e005      	b.n	8008942 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8008936:	2300      	movs	r3, #0
 8008938:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800893a:	2301      	movs	r3, #1
 800893c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008940:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008944:	2b00      	cmp	r3, #0
 8008946:	f000 8137 	beq.w	8008bb8 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800894e:	4a12      	ldr	r2, [pc, #72]	; (8008998 <UART_SetConfig+0x294>)
 8008950:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008954:	461a      	mov	r2, r3
 8008956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008958:	fbb3 f3f2 	udiv	r3, r3, r2
 800895c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	685a      	ldr	r2, [r3, #4]
 8008962:	4613      	mov	r3, r2
 8008964:	005b      	lsls	r3, r3, #1
 8008966:	4413      	add	r3, r2
 8008968:	69ba      	ldr	r2, [r7, #24]
 800896a:	429a      	cmp	r2, r3
 800896c:	d305      	bcc.n	800897a <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008974:	69ba      	ldr	r2, [r7, #24]
 8008976:	429a      	cmp	r2, r3
 8008978:	d910      	bls.n	800899c <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800897a:	2301      	movs	r3, #1
 800897c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008980:	e11a      	b.n	8008bb8 <UART_SetConfig+0x4b4>
 8008982:	bf00      	nop
 8008984:	cfff69f3 	.word	0xcfff69f3
 8008988:	40008000 	.word	0x40008000
 800898c:	40013800 	.word	0x40013800
 8008990:	40004400 	.word	0x40004400
 8008994:	00f42400 	.word	0x00f42400
 8008998:	0801e6f8 	.word	0x0801e6f8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800899c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899e:	2200      	movs	r2, #0
 80089a0:	60bb      	str	r3, [r7, #8]
 80089a2:	60fa      	str	r2, [r7, #12]
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a8:	4a8e      	ldr	r2, [pc, #568]	; (8008be4 <UART_SetConfig+0x4e0>)
 80089aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	2200      	movs	r2, #0
 80089b2:	603b      	str	r3, [r7, #0]
 80089b4:	607a      	str	r2, [r7, #4]
 80089b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80089be:	f7f8 f8f3 	bl	8000ba8 <__aeabi_uldivmod>
 80089c2:	4602      	mov	r2, r0
 80089c4:	460b      	mov	r3, r1
 80089c6:	4610      	mov	r0, r2
 80089c8:	4619      	mov	r1, r3
 80089ca:	f04f 0200 	mov.w	r2, #0
 80089ce:	f04f 0300 	mov.w	r3, #0
 80089d2:	020b      	lsls	r3, r1, #8
 80089d4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80089d8:	0202      	lsls	r2, r0, #8
 80089da:	6979      	ldr	r1, [r7, #20]
 80089dc:	6849      	ldr	r1, [r1, #4]
 80089de:	0849      	lsrs	r1, r1, #1
 80089e0:	2000      	movs	r0, #0
 80089e2:	460c      	mov	r4, r1
 80089e4:	4605      	mov	r5, r0
 80089e6:	eb12 0804 	adds.w	r8, r2, r4
 80089ea:	eb43 0905 	adc.w	r9, r3, r5
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	2200      	movs	r2, #0
 80089f4:	469a      	mov	sl, r3
 80089f6:	4693      	mov	fp, r2
 80089f8:	4652      	mov	r2, sl
 80089fa:	465b      	mov	r3, fp
 80089fc:	4640      	mov	r0, r8
 80089fe:	4649      	mov	r1, r9
 8008a00:	f7f8 f8d2 	bl	8000ba8 <__aeabi_uldivmod>
 8008a04:	4602      	mov	r2, r0
 8008a06:	460b      	mov	r3, r1
 8008a08:	4613      	mov	r3, r2
 8008a0a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008a0c:	6a3b      	ldr	r3, [r7, #32]
 8008a0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a12:	d308      	bcc.n	8008a26 <UART_SetConfig+0x322>
 8008a14:	6a3b      	ldr	r3, [r7, #32]
 8008a16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a1a:	d204      	bcs.n	8008a26 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	6a3a      	ldr	r2, [r7, #32]
 8008a22:	60da      	str	r2, [r3, #12]
 8008a24:	e0c8      	b.n	8008bb8 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8008a26:	2301      	movs	r3, #1
 8008a28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008a2c:	e0c4      	b.n	8008bb8 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	69db      	ldr	r3, [r3, #28]
 8008a32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a36:	d167      	bne.n	8008b08 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8008a38:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008a3c:	2b08      	cmp	r3, #8
 8008a3e:	d828      	bhi.n	8008a92 <UART_SetConfig+0x38e>
 8008a40:	a201      	add	r2, pc, #4	; (adr r2, 8008a48 <UART_SetConfig+0x344>)
 8008a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a46:	bf00      	nop
 8008a48:	08008a6d 	.word	0x08008a6d
 8008a4c:	08008a75 	.word	0x08008a75
 8008a50:	08008a7d 	.word	0x08008a7d
 8008a54:	08008a93 	.word	0x08008a93
 8008a58:	08008a83 	.word	0x08008a83
 8008a5c:	08008a93 	.word	0x08008a93
 8008a60:	08008a93 	.word	0x08008a93
 8008a64:	08008a93 	.word	0x08008a93
 8008a68:	08008a8b 	.word	0x08008a8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a6c:	f7fd fdcc 	bl	8006608 <HAL_RCC_GetPCLK1Freq>
 8008a70:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a72:	e014      	b.n	8008a9e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a74:	f7fd fdda 	bl	800662c <HAL_RCC_GetPCLK2Freq>
 8008a78:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a7a:	e010      	b.n	8008a9e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a7c:	4b5a      	ldr	r3, [pc, #360]	; (8008be8 <UART_SetConfig+0x4e4>)
 8008a7e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008a80:	e00d      	b.n	8008a9e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a82:	f7fd fd0d 	bl	80064a0 <HAL_RCC_GetSysClockFreq>
 8008a86:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a88:	e009      	b.n	8008a9e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a8e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008a90:	e005      	b.n	8008a9e <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8008a92:	2300      	movs	r3, #0
 8008a94:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008a96:	2301      	movs	r3, #1
 8008a98:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008a9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	f000 8089 	beq.w	8008bb8 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aaa:	4a4e      	ldr	r2, [pc, #312]	; (8008be4 <UART_SetConfig+0x4e0>)
 8008aac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ab0:	461a      	mov	r2, r3
 8008ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ab8:	005a      	lsls	r2, r3, #1
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	085b      	lsrs	r3, r3, #1
 8008ac0:	441a      	add	r2, r3
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	685b      	ldr	r3, [r3, #4]
 8008ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008aca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008acc:	6a3b      	ldr	r3, [r7, #32]
 8008ace:	2b0f      	cmp	r3, #15
 8008ad0:	d916      	bls.n	8008b00 <UART_SetConfig+0x3fc>
 8008ad2:	6a3b      	ldr	r3, [r7, #32]
 8008ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ad8:	d212      	bcs.n	8008b00 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008ada:	6a3b      	ldr	r3, [r7, #32]
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	f023 030f 	bic.w	r3, r3, #15
 8008ae2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008ae4:	6a3b      	ldr	r3, [r7, #32]
 8008ae6:	085b      	lsrs	r3, r3, #1
 8008ae8:	b29b      	uxth	r3, r3
 8008aea:	f003 0307 	and.w	r3, r3, #7
 8008aee:	b29a      	uxth	r2, r3
 8008af0:	8bfb      	ldrh	r3, [r7, #30]
 8008af2:	4313      	orrs	r3, r2
 8008af4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	8bfa      	ldrh	r2, [r7, #30]
 8008afc:	60da      	str	r2, [r3, #12]
 8008afe:	e05b      	b.n	8008bb8 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8008b00:	2301      	movs	r3, #1
 8008b02:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008b06:	e057      	b.n	8008bb8 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008b08:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008b0c:	2b08      	cmp	r3, #8
 8008b0e:	d828      	bhi.n	8008b62 <UART_SetConfig+0x45e>
 8008b10:	a201      	add	r2, pc, #4	; (adr r2, 8008b18 <UART_SetConfig+0x414>)
 8008b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b16:	bf00      	nop
 8008b18:	08008b3d 	.word	0x08008b3d
 8008b1c:	08008b45 	.word	0x08008b45
 8008b20:	08008b4d 	.word	0x08008b4d
 8008b24:	08008b63 	.word	0x08008b63
 8008b28:	08008b53 	.word	0x08008b53
 8008b2c:	08008b63 	.word	0x08008b63
 8008b30:	08008b63 	.word	0x08008b63
 8008b34:	08008b63 	.word	0x08008b63
 8008b38:	08008b5b 	.word	0x08008b5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b3c:	f7fd fd64 	bl	8006608 <HAL_RCC_GetPCLK1Freq>
 8008b40:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008b42:	e014      	b.n	8008b6e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b44:	f7fd fd72 	bl	800662c <HAL_RCC_GetPCLK2Freq>
 8008b48:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008b4a:	e010      	b.n	8008b6e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b4c:	4b26      	ldr	r3, [pc, #152]	; (8008be8 <UART_SetConfig+0x4e4>)
 8008b4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008b50:	e00d      	b.n	8008b6e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b52:	f7fd fca5 	bl	80064a0 <HAL_RCC_GetSysClockFreq>
 8008b56:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008b58:	e009      	b.n	8008b6e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008b60:	e005      	b.n	8008b6e <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8008b62:	2300      	movs	r3, #0
 8008b64:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008b66:	2301      	movs	r3, #1
 8008b68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008b6c:	bf00      	nop
    }

    if (pclk != 0U)
 8008b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d021      	beq.n	8008bb8 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b78:	4a1a      	ldr	r2, [pc, #104]	; (8008be4 <UART_SetConfig+0x4e0>)
 8008b7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b7e:	461a      	mov	r2, r3
 8008b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b82:	fbb3 f2f2 	udiv	r2, r3, r2
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	085b      	lsrs	r3, r3, #1
 8008b8c:	441a      	add	r2, r3
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	685b      	ldr	r3, [r3, #4]
 8008b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b96:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b98:	6a3b      	ldr	r3, [r7, #32]
 8008b9a:	2b0f      	cmp	r3, #15
 8008b9c:	d909      	bls.n	8008bb2 <UART_SetConfig+0x4ae>
 8008b9e:	6a3b      	ldr	r3, [r7, #32]
 8008ba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ba4:	d205      	bcs.n	8008bb2 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008ba6:	6a3b      	ldr	r3, [r7, #32]
 8008ba8:	b29a      	uxth	r2, r3
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	60da      	str	r2, [r3, #12]
 8008bb0:	e002      	b.n	8008bb8 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	2201      	movs	r2, #1
 8008bbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008bd4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3730      	adds	r7, #48	; 0x30
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008be2:	bf00      	nop
 8008be4:	0801e6f8 	.word	0x0801e6f8
 8008be8:	00f42400 	.word	0x00f42400

08008bec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b083      	sub	sp, #12
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bf8:	f003 0301 	and.w	r3, r3, #1
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d00a      	beq.n	8008c16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	430a      	orrs	r2, r1
 8008c14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c1a:	f003 0302 	and.w	r3, r3, #2
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d00a      	beq.n	8008c38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	430a      	orrs	r2, r1
 8008c36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c3c:	f003 0304 	and.w	r3, r3, #4
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d00a      	beq.n	8008c5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	685b      	ldr	r3, [r3, #4]
 8008c4a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	430a      	orrs	r2, r1
 8008c58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c5e:	f003 0308 	and.w	r3, r3, #8
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d00a      	beq.n	8008c7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	430a      	orrs	r2, r1
 8008c7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c80:	f003 0310 	and.w	r3, r3, #16
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d00a      	beq.n	8008c9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	689b      	ldr	r3, [r3, #8]
 8008c8e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	430a      	orrs	r2, r1
 8008c9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ca2:	f003 0320 	and.w	r3, r3, #32
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d00a      	beq.n	8008cc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	689b      	ldr	r3, [r3, #8]
 8008cb0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	430a      	orrs	r2, r1
 8008cbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d01a      	beq.n	8008d02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	430a      	orrs	r2, r1
 8008ce0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ce6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008cea:	d10a      	bne.n	8008d02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	685b      	ldr	r3, [r3, #4]
 8008cf2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	430a      	orrs	r2, r1
 8008d00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d00a      	beq.n	8008d24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	430a      	orrs	r2, r1
 8008d22:	605a      	str	r2, [r3, #4]
  }
}
 8008d24:	bf00      	nop
 8008d26:	370c      	adds	r7, #12
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bc80      	pop	{r7}
 8008d2c:	4770      	bx	lr

08008d2e <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008d2e:	b580      	push	{r7, lr}
 8008d30:	b086      	sub	sp, #24
 8008d32:	af02      	add	r7, sp, #8
 8008d34:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008d3e:	f7f9 fa61 	bl	8002204 <HAL_GetTick>
 8008d42:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f003 0308 	and.w	r3, r3, #8
 8008d4e:	2b08      	cmp	r3, #8
 8008d50:	d10e      	bne.n	8008d70 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d52:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d56:	9300      	str	r3, [sp, #0]
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f000 f832 	bl	8008dca <UART_WaitOnFlagUntilTimeout>
 8008d66:	4603      	mov	r3, r0
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d001      	beq.n	8008d70 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d6c:	2303      	movs	r3, #3
 8008d6e:	e028      	b.n	8008dc2 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f003 0304 	and.w	r3, r3, #4
 8008d7a:	2b04      	cmp	r3, #4
 8008d7c:	d10e      	bne.n	8008d9c <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d7e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d82:	9300      	str	r3, [sp, #0]
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2200      	movs	r2, #0
 8008d88:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f000 f81c 	bl	8008dca <UART_WaitOnFlagUntilTimeout>
 8008d92:	4603      	mov	r3, r0
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d001      	beq.n	8008d9c <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d98:	2303      	movs	r3, #3
 8008d9a:	e012      	b.n	8008dc2 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2220      	movs	r2, #32
 8008da0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2220      	movs	r2, #32
 8008da8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2200      	movs	r2, #0
 8008db0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2200      	movs	r2, #0
 8008db6:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008dc0:	2300      	movs	r3, #0
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3710      	adds	r7, #16
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}

08008dca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008dca:	b580      	push	{r7, lr}
 8008dcc:	b09c      	sub	sp, #112	; 0x70
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	60f8      	str	r0, [r7, #12]
 8008dd2:	60b9      	str	r1, [r7, #8]
 8008dd4:	603b      	str	r3, [r7, #0]
 8008dd6:	4613      	mov	r3, r2
 8008dd8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008dda:	e0a9      	b.n	8008f30 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ddc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008dde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008de2:	f000 80a5 	beq.w	8008f30 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008de6:	f7f9 fa0d 	bl	8002204 <HAL_GetTick>
 8008dea:	4602      	mov	r2, r0
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	1ad3      	subs	r3, r2, r3
 8008df0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008df2:	429a      	cmp	r2, r3
 8008df4:	d302      	bcc.n	8008dfc <UART_WaitOnFlagUntilTimeout+0x32>
 8008df6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d140      	bne.n	8008e7e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e04:	e853 3f00 	ldrex	r3, [r3]
 8008e08:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008e0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008e10:	667b      	str	r3, [r7, #100]	; 0x64
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	461a      	mov	r2, r3
 8008e18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e1c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e1e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008e20:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008e22:	e841 2300 	strex	r3, r2, [r1]
 8008e26:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008e28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d1e6      	bne.n	8008dfc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	3308      	adds	r3, #8
 8008e34:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e38:	e853 3f00 	ldrex	r3, [r3]
 8008e3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e40:	f023 0301 	bic.w	r3, r3, #1
 8008e44:	663b      	str	r3, [r7, #96]	; 0x60
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	3308      	adds	r3, #8
 8008e4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008e4e:	64ba      	str	r2, [r7, #72]	; 0x48
 8008e50:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e52:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008e54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e56:	e841 2300 	strex	r3, r2, [r1]
 8008e5a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008e5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d1e5      	bne.n	8008e2e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2220      	movs	r2, #32
 8008e66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2220      	movs	r2, #32
 8008e6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2200      	movs	r2, #0
 8008e76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8008e7a:	2303      	movs	r3, #3
 8008e7c:	e069      	b.n	8008f52 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f003 0304 	and.w	r3, r3, #4
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d051      	beq.n	8008f30 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	69db      	ldr	r3, [r3, #28]
 8008e92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e9a:	d149      	bne.n	8008f30 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ea4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eae:	e853 3f00 	ldrex	r3, [r3]
 8008eb2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008eba:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ec4:	637b      	str	r3, [r7, #52]	; 0x34
 8008ec6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008eca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ecc:	e841 2300 	strex	r3, r2, [r1]
 8008ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d1e6      	bne.n	8008ea6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	3308      	adds	r3, #8
 8008ede:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	e853 3f00 	ldrex	r3, [r3]
 8008ee6:	613b      	str	r3, [r7, #16]
   return(result);
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	f023 0301 	bic.w	r3, r3, #1
 8008eee:	66bb      	str	r3, [r7, #104]	; 0x68
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	3308      	adds	r3, #8
 8008ef6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008ef8:	623a      	str	r2, [r7, #32]
 8008efa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008efc:	69f9      	ldr	r1, [r7, #28]
 8008efe:	6a3a      	ldr	r2, [r7, #32]
 8008f00:	e841 2300 	strex	r3, r2, [r1]
 8008f04:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f06:	69bb      	ldr	r3, [r7, #24]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d1e5      	bne.n	8008ed8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2220      	movs	r2, #32
 8008f10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2220      	movs	r2, #32
 8008f18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2220      	movs	r2, #32
 8008f20:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	2200      	movs	r2, #0
 8008f28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008f2c:	2303      	movs	r3, #3
 8008f2e:	e010      	b.n	8008f52 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	69da      	ldr	r2, [r3, #28]
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	4013      	ands	r3, r2
 8008f3a:	68ba      	ldr	r2, [r7, #8]
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	bf0c      	ite	eq
 8008f40:	2301      	moveq	r3, #1
 8008f42:	2300      	movne	r3, #0
 8008f44:	b2db      	uxtb	r3, r3
 8008f46:	461a      	mov	r2, r3
 8008f48:	79fb      	ldrb	r3, [r7, #7]
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	f43f af46 	beq.w	8008ddc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008f50:	2300      	movs	r3, #0
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3770      	adds	r7, #112	; 0x70
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}
	...

08008f5c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b0a3      	sub	sp, #140	; 0x8c
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	60f8      	str	r0, [r7, #12]
 8008f64:	60b9      	str	r1, [r7, #8]
 8008f66:	4613      	mov	r3, r2
 8008f68:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	68ba      	ldr	r2, [r7, #8]
 8008f6e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	88fa      	ldrh	r2, [r7, #6]
 8008f74:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	88fa      	ldrh	r2, [r7, #6]
 8008f7c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	2200      	movs	r2, #0
 8008f84:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	689b      	ldr	r3, [r3, #8]
 8008f8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f8e:	d10e      	bne.n	8008fae <UART_Start_Receive_IT+0x52>
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	691b      	ldr	r3, [r3, #16]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d105      	bne.n	8008fa4 <UART_Start_Receive_IT+0x48>
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008f9e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008fa2:	e02d      	b.n	8009000 <UART_Start_Receive_IT+0xa4>
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	22ff      	movs	r2, #255	; 0xff
 8008fa8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008fac:	e028      	b.n	8009000 <UART_Start_Receive_IT+0xa4>
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	689b      	ldr	r3, [r3, #8]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d10d      	bne.n	8008fd2 <UART_Start_Receive_IT+0x76>
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	691b      	ldr	r3, [r3, #16]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d104      	bne.n	8008fc8 <UART_Start_Receive_IT+0x6c>
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	22ff      	movs	r2, #255	; 0xff
 8008fc2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008fc6:	e01b      	b.n	8009000 <UART_Start_Receive_IT+0xa4>
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	227f      	movs	r2, #127	; 0x7f
 8008fcc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008fd0:	e016      	b.n	8009000 <UART_Start_Receive_IT+0xa4>
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	689b      	ldr	r3, [r3, #8]
 8008fd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008fda:	d10d      	bne.n	8008ff8 <UART_Start_Receive_IT+0x9c>
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	691b      	ldr	r3, [r3, #16]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d104      	bne.n	8008fee <UART_Start_Receive_IT+0x92>
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	227f      	movs	r2, #127	; 0x7f
 8008fe8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008fec:	e008      	b.n	8009000 <UART_Start_Receive_IT+0xa4>
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	223f      	movs	r2, #63	; 0x3f
 8008ff2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008ff6:	e003      	b.n	8009000 <UART_Start_Receive_IT+0xa4>
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2200      	movs	r2, #0
 8009004:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2222      	movs	r2, #34	; 0x22
 800900c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	3308      	adds	r3, #8
 8009016:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009018:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800901a:	e853 3f00 	ldrex	r3, [r3]
 800901e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009020:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009022:	f043 0301 	orr.w	r3, r3, #1
 8009026:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	3308      	adds	r3, #8
 8009030:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009034:	673a      	str	r2, [r7, #112]	; 0x70
 8009036:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009038:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800903a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800903c:	e841 2300 	strex	r3, r2, [r1]
 8009040:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8009042:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009044:	2b00      	cmp	r3, #0
 8009046:	d1e3      	bne.n	8009010 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800904c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009050:	d14f      	bne.n	80090f2 <UART_Start_Receive_IT+0x196>
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009058:	88fa      	ldrh	r2, [r7, #6]
 800905a:	429a      	cmp	r2, r3
 800905c:	d349      	bcc.n	80090f2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	689b      	ldr	r3, [r3, #8]
 8009062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009066:	d107      	bne.n	8009078 <UART_Start_Receive_IT+0x11c>
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	691b      	ldr	r3, [r3, #16]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d103      	bne.n	8009078 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	4a46      	ldr	r2, [pc, #280]	; (800918c <UART_Start_Receive_IT+0x230>)
 8009074:	675a      	str	r2, [r3, #116]	; 0x74
 8009076:	e002      	b.n	800907e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	4a45      	ldr	r2, [pc, #276]	; (8009190 <UART_Start_Receive_IT+0x234>)
 800907c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	691b      	ldr	r3, [r3, #16]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d01a      	beq.n	80090bc <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800908c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800908e:	e853 3f00 	ldrex	r3, [r3]
 8009092:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009094:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009096:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800909a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	461a      	mov	r2, r3
 80090a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80090a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80090aa:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80090ae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80090b0:	e841 2300 	strex	r3, r2, [r1]
 80090b4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80090b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d1e4      	bne.n	8009086 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	3308      	adds	r3, #8
 80090c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090c6:	e853 3f00 	ldrex	r3, [r3]
 80090ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80090cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	3308      	adds	r3, #8
 80090da:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80090dc:	64ba      	str	r2, [r7, #72]	; 0x48
 80090de:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80090e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80090e4:	e841 2300 	strex	r3, r2, [r1]
 80090e8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80090ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d1e5      	bne.n	80090bc <UART_Start_Receive_IT+0x160>
 80090f0:	e046      	b.n	8009180 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	689b      	ldr	r3, [r3, #8]
 80090f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090fa:	d107      	bne.n	800910c <UART_Start_Receive_IT+0x1b0>
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	691b      	ldr	r3, [r3, #16]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d103      	bne.n	800910c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	4a23      	ldr	r2, [pc, #140]	; (8009194 <UART_Start_Receive_IT+0x238>)
 8009108:	675a      	str	r2, [r3, #116]	; 0x74
 800910a:	e002      	b.n	8009112 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	4a22      	ldr	r2, [pc, #136]	; (8009198 <UART_Start_Receive_IT+0x23c>)
 8009110:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	691b      	ldr	r3, [r3, #16]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d019      	beq.n	800914e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009122:	e853 3f00 	ldrex	r3, [r3]
 8009126:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800912a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800912e:	677b      	str	r3, [r7, #116]	; 0x74
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	461a      	mov	r2, r3
 8009136:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009138:	637b      	str	r3, [r7, #52]	; 0x34
 800913a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800913c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800913e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009140:	e841 2300 	strex	r3, r2, [r1]
 8009144:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009148:	2b00      	cmp	r3, #0
 800914a:	d1e6      	bne.n	800911a <UART_Start_Receive_IT+0x1be>
 800914c:	e018      	b.n	8009180 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	e853 3f00 	ldrex	r3, [r3]
 800915a:	613b      	str	r3, [r7, #16]
   return(result);
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	f043 0320 	orr.w	r3, r3, #32
 8009162:	67bb      	str	r3, [r7, #120]	; 0x78
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	461a      	mov	r2, r3
 800916a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800916c:	623b      	str	r3, [r7, #32]
 800916e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009170:	69f9      	ldr	r1, [r7, #28]
 8009172:	6a3a      	ldr	r2, [r7, #32]
 8009174:	e841 2300 	strex	r3, r2, [r1]
 8009178:	61bb      	str	r3, [r7, #24]
   return(result);
 800917a:	69bb      	ldr	r3, [r7, #24]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d1e6      	bne.n	800914e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8009180:	2300      	movs	r3, #0
}
 8009182:	4618      	mov	r0, r3
 8009184:	378c      	adds	r7, #140	; 0x8c
 8009186:	46bd      	mov	sp, r7
 8009188:	bc80      	pop	{r7}
 800918a:	4770      	bx	lr
 800918c:	08009b71 	.word	0x08009b71
 8009190:	08009811 	.word	0x08009811
 8009194:	08009659 	.word	0x08009659
 8009198:	080094a1 	.word	0x080094a1

0800919c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800919c:	b480      	push	{r7}
 800919e:	b08f      	sub	sp, #60	; 0x3c
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091aa:	6a3b      	ldr	r3, [r7, #32]
 80091ac:	e853 3f00 	ldrex	r3, [r3]
 80091b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80091b2:	69fb      	ldr	r3, [r7, #28]
 80091b4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80091b8:	637b      	str	r3, [r7, #52]	; 0x34
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	461a      	mov	r2, r3
 80091c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80091c4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80091c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091ca:	e841 2300 	strex	r3, r2, [r1]
 80091ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80091d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d1e6      	bne.n	80091a4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	3308      	adds	r3, #8
 80091dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	e853 3f00 	ldrex	r3, [r3]
 80091e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80091ec:	633b      	str	r3, [r7, #48]	; 0x30
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	3308      	adds	r3, #8
 80091f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091f6:	61ba      	str	r2, [r7, #24]
 80091f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091fa:	6979      	ldr	r1, [r7, #20]
 80091fc:	69ba      	ldr	r2, [r7, #24]
 80091fe:	e841 2300 	strex	r3, r2, [r1]
 8009202:	613b      	str	r3, [r7, #16]
   return(result);
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d1e5      	bne.n	80091d6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2220      	movs	r2, #32
 800920e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8009212:	bf00      	nop
 8009214:	373c      	adds	r7, #60	; 0x3c
 8009216:	46bd      	mov	sp, r7
 8009218:	bc80      	pop	{r7}
 800921a:	4770      	bx	lr

0800921c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800921c:	b480      	push	{r7}
 800921e:	b095      	sub	sp, #84	; 0x54
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800922a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800922c:	e853 3f00 	ldrex	r3, [r3]
 8009230:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009234:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009238:	64fb      	str	r3, [r7, #76]	; 0x4c
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	461a      	mov	r2, r3
 8009240:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009242:	643b      	str	r3, [r7, #64]	; 0x40
 8009244:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009246:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009248:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800924a:	e841 2300 	strex	r3, r2, [r1]
 800924e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009252:	2b00      	cmp	r3, #0
 8009254:	d1e6      	bne.n	8009224 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	3308      	adds	r3, #8
 800925c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800925e:	6a3b      	ldr	r3, [r7, #32]
 8009260:	e853 3f00 	ldrex	r3, [r3]
 8009264:	61fb      	str	r3, [r7, #28]
   return(result);
 8009266:	69fb      	ldr	r3, [r7, #28]
 8009268:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800926c:	f023 0301 	bic.w	r3, r3, #1
 8009270:	64bb      	str	r3, [r7, #72]	; 0x48
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	3308      	adds	r3, #8
 8009278:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800927a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800927c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800927e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009280:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009282:	e841 2300 	strex	r3, r2, [r1]
 8009286:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800928a:	2b00      	cmp	r3, #0
 800928c:	d1e3      	bne.n	8009256 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009292:	2b01      	cmp	r3, #1
 8009294:	d118      	bne.n	80092c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	e853 3f00 	ldrex	r3, [r3]
 80092a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	f023 0310 	bic.w	r3, r3, #16
 80092aa:	647b      	str	r3, [r7, #68]	; 0x44
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	461a      	mov	r2, r3
 80092b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092b4:	61bb      	str	r3, [r7, #24]
 80092b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b8:	6979      	ldr	r1, [r7, #20]
 80092ba:	69ba      	ldr	r2, [r7, #24]
 80092bc:	e841 2300 	strex	r3, r2, [r1]
 80092c0:	613b      	str	r3, [r7, #16]
   return(result);
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d1e6      	bne.n	8009296 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2220      	movs	r2, #32
 80092cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2200      	movs	r2, #0
 80092d4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2200      	movs	r2, #0
 80092da:	675a      	str	r2, [r3, #116]	; 0x74
}
 80092dc:	bf00      	nop
 80092de:	3754      	adds	r7, #84	; 0x54
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bc80      	pop	{r7}
 80092e4:	4770      	bx	lr

080092e6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80092e6:	b580      	push	{r7, lr}
 80092e8:	b090      	sub	sp, #64	; 0x40
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092f2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f003 0320 	and.w	r3, r3, #32
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d137      	bne.n	8009372 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8009302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009304:	2200      	movs	r2, #0
 8009306:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800930a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	3308      	adds	r3, #8
 8009310:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009314:	e853 3f00 	ldrex	r3, [r3]
 8009318:	623b      	str	r3, [r7, #32]
   return(result);
 800931a:	6a3b      	ldr	r3, [r7, #32]
 800931c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009320:	63bb      	str	r3, [r7, #56]	; 0x38
 8009322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	3308      	adds	r3, #8
 8009328:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800932a:	633a      	str	r2, [r7, #48]	; 0x30
 800932c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800932e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009330:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009332:	e841 2300 	strex	r3, r2, [r1]
 8009336:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800933a:	2b00      	cmp	r3, #0
 800933c:	d1e5      	bne.n	800930a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800933e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	e853 3f00 	ldrex	r3, [r3]
 800934a:	60fb      	str	r3, [r7, #12]
   return(result);
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009352:	637b      	str	r3, [r7, #52]	; 0x34
 8009354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	461a      	mov	r2, r3
 800935a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800935c:	61fb      	str	r3, [r7, #28]
 800935e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009360:	69b9      	ldr	r1, [r7, #24]
 8009362:	69fa      	ldr	r2, [r7, #28]
 8009364:	e841 2300 	strex	r3, r2, [r1]
 8009368:	617b      	str	r3, [r7, #20]
   return(result);
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d1e6      	bne.n	800933e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009370:	e002      	b.n	8009378 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009372:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009374:	f7f9 fbe2 	bl	8002b3c <HAL_UART_TxCpltCallback>
}
 8009378:	bf00      	nop
 800937a:	3740      	adds	r7, #64	; 0x40
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}

08009380 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b084      	sub	sp, #16
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800938c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800938e:	68f8      	ldr	r0, [r7, #12]
 8009390:	f7ff f99a 	bl	80086c8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009394:	bf00      	nop
 8009396:	3710      	adds	r7, #16
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}

0800939c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b086      	sub	sp, #24
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093a8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093b0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093b8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	689b      	ldr	r3, [r3, #8]
 80093c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093c4:	2b80      	cmp	r3, #128	; 0x80
 80093c6:	d109      	bne.n	80093dc <UART_DMAError+0x40>
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	2b21      	cmp	r3, #33	; 0x21
 80093cc:	d106      	bne.n	80093dc <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80093ce:	697b      	ldr	r3, [r7, #20]
 80093d0:	2200      	movs	r2, #0
 80093d2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80093d6:	6978      	ldr	r0, [r7, #20]
 80093d8:	f7ff fee0 	bl	800919c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	689b      	ldr	r3, [r3, #8]
 80093e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093e6:	2b40      	cmp	r3, #64	; 0x40
 80093e8:	d109      	bne.n	80093fe <UART_DMAError+0x62>
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2b22      	cmp	r3, #34	; 0x22
 80093ee:	d106      	bne.n	80093fe <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	2200      	movs	r2, #0
 80093f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80093f8:	6978      	ldr	r0, [r7, #20]
 80093fa:	f7ff ff0f 	bl	800921c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009404:	f043 0210 	orr.w	r2, r3, #16
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800940e:	6978      	ldr	r0, [r7, #20]
 8009410:	f7ff f963 	bl	80086da <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009414:	bf00      	nop
 8009416:	3718      	adds	r7, #24
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}

0800941c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b084      	sub	sp, #16
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009428:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2200      	movs	r2, #0
 800942e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	2200      	movs	r2, #0
 8009436:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800943a:	68f8      	ldr	r0, [r7, #12]
 800943c:	f7ff f94d 	bl	80086da <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009440:	bf00      	nop
 8009442:	3710      	adds	r7, #16
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}

08009448 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b088      	sub	sp, #32
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	e853 3f00 	ldrex	r3, [r3]
 800945c:	60bb      	str	r3, [r7, #8]
   return(result);
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009464:	61fb      	str	r3, [r7, #28]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	461a      	mov	r2, r3
 800946c:	69fb      	ldr	r3, [r7, #28]
 800946e:	61bb      	str	r3, [r7, #24]
 8009470:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009472:	6979      	ldr	r1, [r7, #20]
 8009474:	69ba      	ldr	r2, [r7, #24]
 8009476:	e841 2300 	strex	r3, r2, [r1]
 800947a:	613b      	str	r3, [r7, #16]
   return(result);
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d1e6      	bne.n	8009450 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2220      	movs	r2, #32
 8009486:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2200      	movs	r2, #0
 800948e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f7f9 fb53 	bl	8002b3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009496:	bf00      	nop
 8009498:	3720      	adds	r7, #32
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}
	...

080094a0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b09c      	sub	sp, #112	; 0x70
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80094ae:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094b8:	2b22      	cmp	r3, #34	; 0x22
 80094ba:	f040 80be 	bne.w	800963a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80094c8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80094cc:	b2d9      	uxtb	r1, r3
 80094ce:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80094d2:	b2da      	uxtb	r2, r3
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094d8:	400a      	ands	r2, r1
 80094da:	b2d2      	uxtb	r2, r2
 80094dc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094e2:	1c5a      	adds	r2, r3, #1
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80094ee:	b29b      	uxth	r3, r3
 80094f0:	3b01      	subs	r3, #1
 80094f2:	b29a      	uxth	r2, r3
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009500:	b29b      	uxth	r3, r3
 8009502:	2b00      	cmp	r3, #0
 8009504:	f040 80a1 	bne.w	800964a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800950e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009510:	e853 3f00 	ldrex	r3, [r3]
 8009514:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009516:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009518:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800951c:	66bb      	str	r3, [r7, #104]	; 0x68
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	461a      	mov	r2, r3
 8009524:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009526:	65bb      	str	r3, [r7, #88]	; 0x58
 8009528:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800952a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800952c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800952e:	e841 2300 	strex	r3, r2, [r1]
 8009532:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009534:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009536:	2b00      	cmp	r3, #0
 8009538:	d1e6      	bne.n	8009508 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	3308      	adds	r3, #8
 8009540:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009544:	e853 3f00 	ldrex	r3, [r3]
 8009548:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800954a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800954c:	f023 0301 	bic.w	r3, r3, #1
 8009550:	667b      	str	r3, [r7, #100]	; 0x64
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	3308      	adds	r3, #8
 8009558:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800955a:	647a      	str	r2, [r7, #68]	; 0x44
 800955c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800955e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009560:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009562:	e841 2300 	strex	r3, r2, [r1]
 8009566:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800956a:	2b00      	cmp	r3, #0
 800956c:	d1e5      	bne.n	800953a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2220      	movs	r2, #32
 8009572:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2200      	movs	r2, #0
 800957a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2200      	movs	r2, #0
 8009580:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4a33      	ldr	r2, [pc, #204]	; (8009654 <UART_RxISR_8BIT+0x1b4>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d01f      	beq.n	80095cc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	685b      	ldr	r3, [r3, #4]
 8009592:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009596:	2b00      	cmp	r3, #0
 8009598:	d018      	beq.n	80095cc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a2:	e853 3f00 	ldrex	r3, [r3]
 80095a6:	623b      	str	r3, [r7, #32]
   return(result);
 80095a8:	6a3b      	ldr	r3, [r7, #32]
 80095aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80095ae:	663b      	str	r3, [r7, #96]	; 0x60
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	461a      	mov	r2, r3
 80095b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80095b8:	633b      	str	r3, [r7, #48]	; 0x30
 80095ba:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80095be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095c0:	e841 2300 	strex	r3, r2, [r1]
 80095c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80095c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d1e6      	bne.n	800959a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d12e      	bne.n	8009632 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2200      	movs	r2, #0
 80095d8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095e0:	693b      	ldr	r3, [r7, #16]
 80095e2:	e853 3f00 	ldrex	r3, [r3]
 80095e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f023 0310 	bic.w	r3, r3, #16
 80095ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	461a      	mov	r2, r3
 80095f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80095f8:	61fb      	str	r3, [r7, #28]
 80095fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095fc:	69b9      	ldr	r1, [r7, #24]
 80095fe:	69fa      	ldr	r2, [r7, #28]
 8009600:	e841 2300 	strex	r3, r2, [r1]
 8009604:	617b      	str	r3, [r7, #20]
   return(result);
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d1e6      	bne.n	80095da <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	69db      	ldr	r3, [r3, #28]
 8009612:	f003 0310 	and.w	r3, r3, #16
 8009616:	2b10      	cmp	r3, #16
 8009618:	d103      	bne.n	8009622 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	2210      	movs	r2, #16
 8009620:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009628:	4619      	mov	r1, r3
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f7ff f85e 	bl	80086ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009630:	e00b      	b.n	800964a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f7f9 fa98 	bl	8002b68 <HAL_UART_RxCpltCallback>
}
 8009638:	e007      	b.n	800964a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	699a      	ldr	r2, [r3, #24]
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f042 0208 	orr.w	r2, r2, #8
 8009648:	619a      	str	r2, [r3, #24]
}
 800964a:	bf00      	nop
 800964c:	3770      	adds	r7, #112	; 0x70
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}
 8009652:	bf00      	nop
 8009654:	40008000 	.word	0x40008000

08009658 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b09c      	sub	sp, #112	; 0x70
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009666:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009670:	2b22      	cmp	r3, #34	; 0x22
 8009672:	f040 80be 	bne.w	80097f2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800967c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009684:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009686:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800968a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800968e:	4013      	ands	r3, r2
 8009690:	b29a      	uxth	r2, r3
 8009692:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009694:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800969a:	1c9a      	adds	r2, r3, #2
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80096a6:	b29b      	uxth	r3, r3
 80096a8:	3b01      	subs	r3, #1
 80096aa:	b29a      	uxth	r2, r3
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80096b8:	b29b      	uxth	r3, r3
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	f040 80a1 	bne.w	8009802 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096c8:	e853 3f00 	ldrex	r3, [r3]
 80096cc:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80096ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80096d4:	667b      	str	r3, [r7, #100]	; 0x64
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	461a      	mov	r2, r3
 80096dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80096de:	657b      	str	r3, [r7, #84]	; 0x54
 80096e0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096e2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80096e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80096e6:	e841 2300 	strex	r3, r2, [r1]
 80096ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80096ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d1e6      	bne.n	80096c0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	3308      	adds	r3, #8
 80096f8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096fc:	e853 3f00 	ldrex	r3, [r3]
 8009700:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009704:	f023 0301 	bic.w	r3, r3, #1
 8009708:	663b      	str	r3, [r7, #96]	; 0x60
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	3308      	adds	r3, #8
 8009710:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009712:	643a      	str	r2, [r7, #64]	; 0x40
 8009714:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009716:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009718:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800971a:	e841 2300 	strex	r3, r2, [r1]
 800971e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009722:	2b00      	cmp	r3, #0
 8009724:	d1e5      	bne.n	80096f2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2220      	movs	r2, #32
 800972a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2200      	movs	r2, #0
 8009732:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2200      	movs	r2, #0
 8009738:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	4a33      	ldr	r2, [pc, #204]	; (800980c <UART_RxISR_16BIT+0x1b4>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d01f      	beq.n	8009784 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	685b      	ldr	r3, [r3, #4]
 800974a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800974e:	2b00      	cmp	r3, #0
 8009750:	d018      	beq.n	8009784 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009758:	6a3b      	ldr	r3, [r7, #32]
 800975a:	e853 3f00 	ldrex	r3, [r3]
 800975e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009760:	69fb      	ldr	r3, [r7, #28]
 8009762:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009766:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	461a      	mov	r2, r3
 800976e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009770:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009772:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009774:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009776:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009778:	e841 2300 	strex	r3, r2, [r1]
 800977c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800977e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009780:	2b00      	cmp	r3, #0
 8009782:	d1e6      	bne.n	8009752 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009788:	2b01      	cmp	r3, #1
 800978a:	d12e      	bne.n	80097ea <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2200      	movs	r2, #0
 8009790:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	e853 3f00 	ldrex	r3, [r3]
 800979e:	60bb      	str	r3, [r7, #8]
   return(result);
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	f023 0310 	bic.w	r3, r3, #16
 80097a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	461a      	mov	r2, r3
 80097ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80097b0:	61bb      	str	r3, [r7, #24]
 80097b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097b4:	6979      	ldr	r1, [r7, #20]
 80097b6:	69ba      	ldr	r2, [r7, #24]
 80097b8:	e841 2300 	strex	r3, r2, [r1]
 80097bc:	613b      	str	r3, [r7, #16]
   return(result);
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d1e6      	bne.n	8009792 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	69db      	ldr	r3, [r3, #28]
 80097ca:	f003 0310 	and.w	r3, r3, #16
 80097ce:	2b10      	cmp	r3, #16
 80097d0:	d103      	bne.n	80097da <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	2210      	movs	r2, #16
 80097d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80097e0:	4619      	mov	r1, r3
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f7fe ff82 	bl	80086ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80097e8:	e00b      	b.n	8009802 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f7f9 f9bc 	bl	8002b68 <HAL_UART_RxCpltCallback>
}
 80097f0:	e007      	b.n	8009802 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	699a      	ldr	r2, [r3, #24]
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f042 0208 	orr.w	r2, r2, #8
 8009800:	619a      	str	r2, [r3, #24]
}
 8009802:	bf00      	nop
 8009804:	3770      	adds	r7, #112	; 0x70
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}
 800980a:	bf00      	nop
 800980c:	40008000 	.word	0x40008000

08009810 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b0ac      	sub	sp, #176	; 0xb0
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800981e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	69db      	ldr	r3, [r3, #28]
 8009828:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	689b      	ldr	r3, [r3, #8]
 800983c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009846:	2b22      	cmp	r3, #34	; 0x22
 8009848:	f040 8182 	bne.w	8009b50 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009852:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009856:	e125      	b.n	8009aa4 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800985e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009862:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8009866:	b2d9      	uxtb	r1, r3
 8009868:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800986c:	b2da      	uxtb	r2, r3
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009872:	400a      	ands	r2, r1
 8009874:	b2d2      	uxtb	r2, r2
 8009876:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800987c:	1c5a      	adds	r2, r3, #1
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009888:	b29b      	uxth	r3, r3
 800988a:	3b01      	subs	r3, #1
 800988c:	b29a      	uxth	r2, r3
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	69db      	ldr	r3, [r3, #28]
 800989a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800989e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80098a2:	f003 0307 	and.w	r3, r3, #7
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d053      	beq.n	8009952 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80098aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80098ae:	f003 0301 	and.w	r3, r3, #1
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d011      	beq.n	80098da <UART_RxISR_8BIT_FIFOEN+0xca>
 80098b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80098ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d00b      	beq.n	80098da <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	2201      	movs	r2, #1
 80098c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098d0:	f043 0201 	orr.w	r2, r3, #1
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80098da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80098de:	f003 0302 	and.w	r3, r3, #2
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d011      	beq.n	800990a <UART_RxISR_8BIT_FIFOEN+0xfa>
 80098e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80098ea:	f003 0301 	and.w	r3, r3, #1
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d00b      	beq.n	800990a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	2202      	movs	r2, #2
 80098f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009900:	f043 0204 	orr.w	r2, r3, #4
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800990a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800990e:	f003 0304 	and.w	r3, r3, #4
 8009912:	2b00      	cmp	r3, #0
 8009914:	d011      	beq.n	800993a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009916:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800991a:	f003 0301 	and.w	r3, r3, #1
 800991e:	2b00      	cmp	r3, #0
 8009920:	d00b      	beq.n	800993a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	2204      	movs	r2, #4
 8009928:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009930:	f043 0202 	orr.w	r2, r3, #2
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009940:	2b00      	cmp	r3, #0
 8009942:	d006      	beq.n	8009952 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f7fe fec8 	bl	80086da <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2200      	movs	r2, #0
 800994e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009958:	b29b      	uxth	r3, r3
 800995a:	2b00      	cmp	r3, #0
 800995c:	f040 80a2 	bne.w	8009aa4 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009966:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009968:	e853 3f00 	ldrex	r3, [r3]
 800996c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800996e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009970:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009974:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	461a      	mov	r2, r3
 800997e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009982:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009984:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009986:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8009988:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800998a:	e841 2300 	strex	r3, r2, [r1]
 800998e:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8009990:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009992:	2b00      	cmp	r3, #0
 8009994:	d1e4      	bne.n	8009960 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	3308      	adds	r3, #8
 800999c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800999e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80099a0:	e853 3f00 	ldrex	r3, [r3]
 80099a4:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80099a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80099a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80099ac:	f023 0301 	bic.w	r3, r3, #1
 80099b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	3308      	adds	r3, #8
 80099ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80099be:	66ba      	str	r2, [r7, #104]	; 0x68
 80099c0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80099c4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80099c6:	e841 2300 	strex	r3, r2, [r1]
 80099ca:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80099cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d1e1      	bne.n	8009996 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2220      	movs	r2, #32
 80099d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2200      	movs	r2, #0
 80099de:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2200      	movs	r2, #0
 80099e4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4a5f      	ldr	r2, [pc, #380]	; (8009b68 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d021      	beq.n	8009a34 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	685b      	ldr	r3, [r3, #4]
 80099f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d01a      	beq.n	8009a34 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a06:	e853 3f00 	ldrex	r3, [r3]
 8009a0a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009a0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a0e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009a12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009a20:	657b      	str	r3, [r7, #84]	; 0x54
 8009a22:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a24:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009a26:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009a28:	e841 2300 	strex	r3, r2, [r1]
 8009a2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009a2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d1e4      	bne.n	80099fe <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	d130      	bne.n	8009a9e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a4a:	e853 3f00 	ldrex	r3, [r3]
 8009a4e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a52:	f023 0310 	bic.w	r3, r3, #16
 8009a56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	461a      	mov	r2, r3
 8009a60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009a64:	643b      	str	r3, [r7, #64]	; 0x40
 8009a66:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a68:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009a6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a6c:	e841 2300 	strex	r3, r2, [r1]
 8009a70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d1e4      	bne.n	8009a42 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	69db      	ldr	r3, [r3, #28]
 8009a7e:	f003 0310 	and.w	r3, r3, #16
 8009a82:	2b10      	cmp	r3, #16
 8009a84:	d103      	bne.n	8009a8e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	2210      	movs	r2, #16
 8009a8c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009a94:	4619      	mov	r1, r3
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f7fe fe28 	bl	80086ec <HAL_UARTEx_RxEventCallback>
 8009a9c:	e002      	b.n	8009aa4 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f7f9 f862 	bl	8002b68 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009aa4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d006      	beq.n	8009aba <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8009aac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009ab0:	f003 0320 	and.w	r3, r3, #32
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	f47f aecf 	bne.w	8009858 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009ac0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009ac4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d049      	beq.n	8009b60 <UART_RxISR_8BIT_FIFOEN+0x350>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009ad2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8009ad6:	429a      	cmp	r2, r3
 8009ad8:	d242      	bcs.n	8009b60 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	3308      	adds	r3, #8
 8009ae0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ae2:	6a3b      	ldr	r3, [r7, #32]
 8009ae4:	e853 3f00 	ldrex	r3, [r3]
 8009ae8:	61fb      	str	r3, [r7, #28]
   return(result);
 8009aea:	69fb      	ldr	r3, [r7, #28]
 8009aec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009af0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	3308      	adds	r3, #8
 8009afa:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009afe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009b00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b06:	e841 2300 	strex	r3, r2, [r1]
 8009b0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d1e3      	bne.n	8009ada <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	4a15      	ldr	r2, [pc, #84]	; (8009b6c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009b16:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	e853 3f00 	ldrex	r3, [r3]
 8009b24:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	f043 0320 	orr.w	r3, r3, #32
 8009b2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	461a      	mov	r2, r3
 8009b36:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009b3a:	61bb      	str	r3, [r7, #24]
 8009b3c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b3e:	6979      	ldr	r1, [r7, #20]
 8009b40:	69ba      	ldr	r2, [r7, #24]
 8009b42:	e841 2300 	strex	r3, r2, [r1]
 8009b46:	613b      	str	r3, [r7, #16]
   return(result);
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d1e4      	bne.n	8009b18 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009b4e:	e007      	b.n	8009b60 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	699a      	ldr	r2, [r3, #24]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f042 0208 	orr.w	r2, r2, #8
 8009b5e:	619a      	str	r2, [r3, #24]
}
 8009b60:	bf00      	nop
 8009b62:	37b0      	adds	r7, #176	; 0xb0
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}
 8009b68:	40008000 	.word	0x40008000
 8009b6c:	080094a1 	.word	0x080094a1

08009b70 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b0ae      	sub	sp, #184	; 0xb8
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009b7e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	69db      	ldr	r3, [r3, #28]
 8009b88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	689b      	ldr	r3, [r3, #8]
 8009b9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ba6:	2b22      	cmp	r3, #34	; 0x22
 8009ba8:	f040 8186 	bne.w	8009eb8 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009bb2:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009bb6:	e129      	b.n	8009e0c <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bbe:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009bca:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8009bce:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8009bd2:	4013      	ands	r3, r2
 8009bd4:	b29a      	uxth	r2, r3
 8009bd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009bda:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009be0:	1c9a      	adds	r2, r3, #2
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009bec:	b29b      	uxth	r3, r3
 8009bee:	3b01      	subs	r3, #1
 8009bf0:	b29a      	uxth	r2, r3
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	69db      	ldr	r3, [r3, #28]
 8009bfe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009c02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009c06:	f003 0307 	and.w	r3, r3, #7
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d053      	beq.n	8009cb6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009c0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009c12:	f003 0301 	and.w	r3, r3, #1
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d011      	beq.n	8009c3e <UART_RxISR_16BIT_FIFOEN+0xce>
 8009c1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d00b      	beq.n	8009c3e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	2201      	movs	r2, #1
 8009c2c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c34:	f043 0201 	orr.w	r2, r3, #1
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009c42:	f003 0302 	and.w	r3, r3, #2
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d011      	beq.n	8009c6e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009c4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009c4e:	f003 0301 	and.w	r3, r3, #1
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d00b      	beq.n	8009c6e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	2202      	movs	r2, #2
 8009c5c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c64:	f043 0204 	orr.w	r2, r3, #4
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009c72:	f003 0304 	and.w	r3, r3, #4
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d011      	beq.n	8009c9e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009c7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009c7e:	f003 0301 	and.w	r3, r3, #1
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d00b      	beq.n	8009c9e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	2204      	movs	r2, #4
 8009c8c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c94:	f043 0202 	orr.w	r2, r3, #2
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d006      	beq.n	8009cb6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f7fe fd16 	bl	80086da <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009cbc:	b29b      	uxth	r3, r3
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	f040 80a4 	bne.w	8009e0c <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ccc:	e853 3f00 	ldrex	r3, [r3]
 8009cd0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009cd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009cd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009cd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009ce6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009cea:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009cee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009cf2:	e841 2300 	strex	r3, r2, [r1]
 8009cf6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009cf8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d1e2      	bne.n	8009cc4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	3308      	adds	r3, #8
 8009d04:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d08:	e853 3f00 	ldrex	r3, [r3]
 8009d0c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009d0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009d14:	f023 0301 	bic.w	r3, r3, #1
 8009d18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	3308      	adds	r3, #8
 8009d22:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009d26:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009d28:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d2a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009d2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009d2e:	e841 2300 	strex	r3, r2, [r1]
 8009d32:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009d34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d1e1      	bne.n	8009cfe <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2220      	movs	r2, #32
 8009d3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2200      	movs	r2, #0
 8009d46:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	4a5f      	ldr	r2, [pc, #380]	; (8009ed0 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d021      	beq.n	8009d9c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	685b      	ldr	r3, [r3, #4]
 8009d5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d01a      	beq.n	8009d9c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d6e:	e853 3f00 	ldrex	r3, [r3]
 8009d72:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009d74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d76:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009d7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	461a      	mov	r2, r3
 8009d84:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009d88:	65bb      	str	r3, [r7, #88]	; 0x58
 8009d8a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d8c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009d8e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009d90:	e841 2300 	strex	r3, r2, [r1]
 8009d94:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009d96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d1e4      	bne.n	8009d66 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009da0:	2b01      	cmp	r3, #1
 8009da2:	d130      	bne.n	8009e06 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2200      	movs	r2, #0
 8009da8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009db2:	e853 3f00 	ldrex	r3, [r3]
 8009db6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dba:	f023 0310 	bic.w	r3, r3, #16
 8009dbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	461a      	mov	r2, r3
 8009dc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009dcc:	647b      	str	r3, [r7, #68]	; 0x44
 8009dce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dd0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009dd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009dd4:	e841 2300 	strex	r3, r2, [r1]
 8009dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d1e4      	bne.n	8009daa <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	69db      	ldr	r3, [r3, #28]
 8009de6:	f003 0310 	and.w	r3, r3, #16
 8009dea:	2b10      	cmp	r3, #16
 8009dec:	d103      	bne.n	8009df6 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	2210      	movs	r2, #16
 8009df4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009dfc:	4619      	mov	r1, r3
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f7fe fc74 	bl	80086ec <HAL_UARTEx_RxEventCallback>
 8009e04:	e002      	b.n	8009e0c <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f7f8 feae 	bl	8002b68 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009e0c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d006      	beq.n	8009e22 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8009e14:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009e18:	f003 0320 	and.w	r3, r3, #32
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	f47f aecb 	bne.w	8009bb8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009e28:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009e2c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d049      	beq.n	8009ec8 <UART_RxISR_16BIT_FIFOEN+0x358>
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009e3a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8009e3e:	429a      	cmp	r2, r3
 8009e40:	d242      	bcs.n	8009ec8 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	3308      	adds	r3, #8
 8009e48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e4c:	e853 3f00 	ldrex	r3, [r3]
 8009e50:	623b      	str	r3, [r7, #32]
   return(result);
 8009e52:	6a3b      	ldr	r3, [r7, #32]
 8009e54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009e58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	3308      	adds	r3, #8
 8009e62:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009e66:	633a      	str	r2, [r7, #48]	; 0x30
 8009e68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e6e:	e841 2300 	strex	r3, r2, [r1]
 8009e72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d1e3      	bne.n	8009e42 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	4a15      	ldr	r2, [pc, #84]	; (8009ed4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009e7e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e86:	693b      	ldr	r3, [r7, #16]
 8009e88:	e853 3f00 	ldrex	r3, [r3]
 8009e8c:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	f043 0320 	orr.w	r3, r3, #32
 8009e94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	461a      	mov	r2, r3
 8009e9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009ea2:	61fb      	str	r3, [r7, #28]
 8009ea4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ea6:	69b9      	ldr	r1, [r7, #24]
 8009ea8:	69fa      	ldr	r2, [r7, #28]
 8009eaa:	e841 2300 	strex	r3, r2, [r1]
 8009eae:	617b      	str	r3, [r7, #20]
   return(result);
 8009eb0:	697b      	ldr	r3, [r7, #20]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d1e4      	bne.n	8009e80 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009eb6:	e007      	b.n	8009ec8 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	699a      	ldr	r2, [r3, #24]
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f042 0208 	orr.w	r2, r2, #8
 8009ec6:	619a      	str	r2, [r3, #24]
}
 8009ec8:	bf00      	nop
 8009eca:	37b8      	adds	r7, #184	; 0xb8
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}
 8009ed0:	40008000 	.word	0x40008000
 8009ed4:	08009659 	.word	0x08009659

08009ed8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b083      	sub	sp, #12
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009ee0:	bf00      	nop
 8009ee2:	370c      	adds	r7, #12
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bc80      	pop	{r7}
 8009ee8:	4770      	bx	lr

08009eea <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009eea:	b480      	push	{r7}
 8009eec:	b083      	sub	sp, #12
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009ef2:	bf00      	nop
 8009ef4:	370c      	adds	r7, #12
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bc80      	pop	{r7}
 8009efa:	4770      	bx	lr

08009efc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b083      	sub	sp, #12
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009f04:	bf00      	nop
 8009f06:	370c      	adds	r7, #12
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bc80      	pop	{r7}
 8009f0c:	4770      	bx	lr

08009f0e <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8009f0e:	b580      	push	{r7, lr}
 8009f10:	b088      	sub	sp, #32
 8009f12:	af02      	add	r7, sp, #8
 8009f14:	60f8      	str	r0, [r7, #12]
 8009f16:	1d3b      	adds	r3, r7, #4
 8009f18:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009f26:	2b01      	cmp	r3, #1
 8009f28:	d101      	bne.n	8009f2e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 8009f2a:	2302      	movs	r3, #2
 8009f2c:	e046      	b.n	8009fbc <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2201      	movs	r2, #1
 8009f32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	2224      	movs	r2, #36	; 0x24
 8009f3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	681a      	ldr	r2, [r3, #0]
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f022 0201 	bic.w	r2, r2, #1
 8009f4c:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	689b      	ldr	r3, [r3, #8]
 8009f54:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009f58:	687a      	ldr	r2, [r7, #4]
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	430a      	orrs	r2, r1
 8009f60:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d105      	bne.n	8009f74 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8009f68:	1d3b      	adds	r3, r7, #4
 8009f6a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009f6e:	68f8      	ldr	r0, [r7, #12]
 8009f70:	f000 f911 	bl	800a196 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	681a      	ldr	r2, [r3, #0]
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f042 0201 	orr.w	r2, r2, #1
 8009f82:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009f84:	f7f8 f93e 	bl	8002204 <HAL_GetTick>
 8009f88:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f8a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009f8e:	9300      	str	r3, [sp, #0]
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	2200      	movs	r2, #0
 8009f94:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009f98:	68f8      	ldr	r0, [r7, #12]
 8009f9a:	f7fe ff16 	bl	8008dca <UART_WaitOnFlagUntilTimeout>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d002      	beq.n	8009faa <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 8009fa4:	2303      	movs	r3, #3
 8009fa6:	75fb      	strb	r3, [r7, #23]
 8009fa8:	e003      	b.n	8009fb2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	2220      	movs	r2, #32
 8009fae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return status;
 8009fba:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3718      	adds	r7, #24
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}

08009fc4 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b089      	sub	sp, #36	; 0x24
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009fd2:	2b01      	cmp	r3, #1
 8009fd4:	d101      	bne.n	8009fda <HAL_UARTEx_EnableStopMode+0x16>
 8009fd6:	2302      	movs	r3, #2
 8009fd8:	e021      	b.n	800a01e <HAL_UARTEx_EnableStopMode+0x5a>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2201      	movs	r2, #1
 8009fde:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	e853 3f00 	ldrex	r3, [r3]
 8009fee:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	f043 0302 	orr.w	r3, r3, #2
 8009ff6:	61fb      	str	r3, [r7, #28]
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	461a      	mov	r2, r3
 8009ffe:	69fb      	ldr	r3, [r7, #28]
 800a000:	61bb      	str	r3, [r7, #24]
 800a002:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a004:	6979      	ldr	r1, [r7, #20]
 800a006:	69ba      	ldr	r2, [r7, #24]
 800a008:	e841 2300 	strex	r3, r2, [r1]
 800a00c:	613b      	str	r3, [r7, #16]
   return(result);
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d1e6      	bne.n	8009fe2 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2200      	movs	r2, #0
 800a018:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a01c:	2300      	movs	r3, #0
}
 800a01e:	4618      	mov	r0, r3
 800a020:	3724      	adds	r7, #36	; 0x24
 800a022:	46bd      	mov	sp, r7
 800a024:	bc80      	pop	{r7}
 800a026:	4770      	bx	lr

0800a028 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b084      	sub	sp, #16
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a036:	2b01      	cmp	r3, #1
 800a038:	d101      	bne.n	800a03e <HAL_UARTEx_EnableFifoMode+0x16>
 800a03a:	2302      	movs	r3, #2
 800a03c:	e02b      	b.n	800a096 <HAL_UARTEx_EnableFifoMode+0x6e>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2201      	movs	r2, #1
 800a042:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2224      	movs	r2, #36	; 0x24
 800a04a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	681a      	ldr	r2, [r3, #0]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f022 0201 	bic.w	r2, r2, #1
 800a064:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a06c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800a074:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	68fa      	ldr	r2, [r7, #12]
 800a07c:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f000 f8ac 	bl	800a1dc <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2220      	movs	r2, #32
 800a088:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2200      	movs	r2, #0
 800a090:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a094:	2300      	movs	r3, #0
}
 800a096:	4618      	mov	r0, r3
 800a098:	3710      	adds	r7, #16
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}

0800a09e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a09e:	b580      	push	{r7, lr}
 800a0a0:	b084      	sub	sp, #16
 800a0a2:	af00      	add	r7, sp, #0
 800a0a4:	6078      	str	r0, [r7, #4]
 800a0a6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a0ae:	2b01      	cmp	r3, #1
 800a0b0:	d101      	bne.n	800a0b6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a0b2:	2302      	movs	r3, #2
 800a0b4:	e02d      	b.n	800a112 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2201      	movs	r2, #1
 800a0ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2224      	movs	r2, #36	; 0x24
 800a0c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	681a      	ldr	r2, [r3, #0]
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f022 0201 	bic.w	r2, r2, #1
 800a0dc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	689b      	ldr	r3, [r3, #8]
 800a0e4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	683a      	ldr	r2, [r7, #0]
 800a0ee:	430a      	orrs	r2, r1
 800a0f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f000 f872 	bl	800a1dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	68fa      	ldr	r2, [r7, #12]
 800a0fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2220      	movs	r2, #32
 800a104:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2200      	movs	r2, #0
 800a10c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a110:	2300      	movs	r3, #0
}
 800a112:	4618      	mov	r0, r3
 800a114:	3710      	adds	r7, #16
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}

0800a11a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a11a:	b580      	push	{r7, lr}
 800a11c:	b084      	sub	sp, #16
 800a11e:	af00      	add	r7, sp, #0
 800a120:	6078      	str	r0, [r7, #4]
 800a122:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a12a:	2b01      	cmp	r3, #1
 800a12c:	d101      	bne.n	800a132 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a12e:	2302      	movs	r3, #2
 800a130:	e02d      	b.n	800a18e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2201      	movs	r2, #1
 800a136:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2224      	movs	r2, #36	; 0x24
 800a13e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	681a      	ldr	r2, [r3, #0]
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f022 0201 	bic.w	r2, r2, #1
 800a158:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	689b      	ldr	r3, [r3, #8]
 800a160:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	683a      	ldr	r2, [r7, #0]
 800a16a:	430a      	orrs	r2, r1
 800a16c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f000 f834 	bl	800a1dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	68fa      	ldr	r2, [r7, #12]
 800a17a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2220      	movs	r2, #32
 800a180:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2200      	movs	r2, #0
 800a188:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a18c:	2300      	movs	r3, #0
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3710      	adds	r7, #16
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}

0800a196 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800a196:	b480      	push	{r7}
 800a198:	b085      	sub	sp, #20
 800a19a:	af00      	add	r7, sp, #0
 800a19c:	60f8      	str	r0, [r7, #12]
 800a19e:	1d3b      	adds	r3, r7, #4
 800a1a0:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	685b      	ldr	r3, [r3, #4]
 800a1aa:	f023 0210 	bic.w	r2, r3, #16
 800a1ae:	893b      	ldrh	r3, [r7, #8]
 800a1b0:	4619      	mov	r1, r3
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	430a      	orrs	r2, r1
 800a1b8:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	685b      	ldr	r3, [r3, #4]
 800a1c0:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800a1c4:	7abb      	ldrb	r3, [r7, #10]
 800a1c6:	061a      	lsls	r2, r3, #24
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	430a      	orrs	r2, r1
 800a1ce:	605a      	str	r2, [r3, #4]
}
 800a1d0:	bf00      	nop
 800a1d2:	3714      	adds	r7, #20
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bc80      	pop	{r7}
 800a1d8:	4770      	bx	lr
	...

0800a1dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b085      	sub	sp, #20
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d108      	bne.n	800a1fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2201      	movs	r2, #1
 800a1f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a1fc:	e031      	b.n	800a262 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a1fe:	2308      	movs	r3, #8
 800a200:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a202:	2308      	movs	r3, #8
 800a204:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	689b      	ldr	r3, [r3, #8]
 800a20c:	0e5b      	lsrs	r3, r3, #25
 800a20e:	b2db      	uxtb	r3, r3
 800a210:	f003 0307 	and.w	r3, r3, #7
 800a214:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	689b      	ldr	r3, [r3, #8]
 800a21c:	0f5b      	lsrs	r3, r3, #29
 800a21e:	b2db      	uxtb	r3, r3
 800a220:	f003 0307 	and.w	r3, r3, #7
 800a224:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a226:	7bbb      	ldrb	r3, [r7, #14]
 800a228:	7b3a      	ldrb	r2, [r7, #12]
 800a22a:	4910      	ldr	r1, [pc, #64]	; (800a26c <UARTEx_SetNbDataToProcess+0x90>)
 800a22c:	5c8a      	ldrb	r2, [r1, r2]
 800a22e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a232:	7b3a      	ldrb	r2, [r7, #12]
 800a234:	490e      	ldr	r1, [pc, #56]	; (800a270 <UARTEx_SetNbDataToProcess+0x94>)
 800a236:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a238:	fb93 f3f2 	sdiv	r3, r3, r2
 800a23c:	b29a      	uxth	r2, r3
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a244:	7bfb      	ldrb	r3, [r7, #15]
 800a246:	7b7a      	ldrb	r2, [r7, #13]
 800a248:	4908      	ldr	r1, [pc, #32]	; (800a26c <UARTEx_SetNbDataToProcess+0x90>)
 800a24a:	5c8a      	ldrb	r2, [r1, r2]
 800a24c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a250:	7b7a      	ldrb	r2, [r7, #13]
 800a252:	4907      	ldr	r1, [pc, #28]	; (800a270 <UARTEx_SetNbDataToProcess+0x94>)
 800a254:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a256:	fb93 f3f2 	sdiv	r3, r3, r2
 800a25a:	b29a      	uxth	r2, r3
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a262:	bf00      	nop
 800a264:	3714      	adds	r7, #20
 800a266:	46bd      	mov	sp, r7
 800a268:	bc80      	pop	{r7}
 800a26a:	4770      	bx	lr
 800a26c:	0801e710 	.word	0x0801e710
 800a270:	0801e718 	.word	0x0801e718

0800a274 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800a278:	f7f7 fe64 	bl	8001f44 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800a27c:	f000 f85e 	bl	800a33c <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800a280:	bf00      	nop
 800a282:	bd80      	pop	{r7, pc}

0800a284 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b084      	sub	sp, #16
 800a288:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800a28a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a28e:	f012 fdb3 	bl	801cdf8 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  //testGPIO();
  uint32_t adcVal = 0;
 800a292:	2300      	movs	r3, #0
 800a294:	607b      	str	r3, [r7, #4]
  Enable_Bias_CS();
 800a296:	f7f8 fcb8 	bl	8002c0a <Enable_Bias_CS>
  adcVal = ADC_ReadChannel(Battery_Monitor_ADC_Channel, 1);
 800a29a:	2101      	movs	r1, #1
 800a29c:	2001      	movs	r0, #1
 800a29e:	f7f6 ff29 	bl	80010f4 <ADC_ReadChannel>
 800a2a2:	6078      	str	r0, [r7, #4]
  Disable_Bias_CS();
 800a2a4:	f7f8 fcbc 	bl	8002c20 <Disable_Bias_CS>
  APP_LOG(TS_OFF, VLEVEL_M,"== Battery Monitor ADC: %i \r\n", adcVal);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	9300      	str	r3, [sp, #0]
 800a2ac:	4b13      	ldr	r3, [pc, #76]	; (800a2fc <MX_LoRaWAN_Process+0x78>)
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	2100      	movs	r1, #0
 800a2b2:	2002      	movs	r0, #2
 800a2b4:	f013 f9ee 	bl	801d694 <UTIL_ADV_TRACE_COND_FSend>
  adcVal = ADC_ReadChannel(SiPM_Temp_ADC_Channel, 1);
 800a2b8:	2101      	movs	r1, #1
 800a2ba:	4811      	ldr	r0, [pc, #68]	; (800a300 <MX_LoRaWAN_Process+0x7c>)
 800a2bc:	f7f6 ff1a 	bl	80010f4 <ADC_ReadChannel>
 800a2c0:	6078      	str	r0, [r7, #4]
  APP_LOG(TS_OFF, VLEVEL_M,"== SiPM Temp ADC: %i \r\n", adcVal);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	9300      	str	r3, [sp, #0]
 800a2c6:	4b0f      	ldr	r3, [pc, #60]	; (800a304 <MX_LoRaWAN_Process+0x80>)
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	2100      	movs	r1, #0
 800a2cc:	2002      	movs	r0, #2
 800a2ce:	f013 f9e1 	bl	801d694 <UTIL_ADV_TRACE_COND_FSend>
  adcVal = ADC_ReadChannel(SiPM_Signal_ADC_Channel, 1);
 800a2d2:	2101      	movs	r1, #1
 800a2d4:	480c      	ldr	r0, [pc, #48]	; (800a308 <MX_LoRaWAN_Process+0x84>)
 800a2d6:	f7f6 ff0d 	bl	80010f4 <ADC_ReadChannel>
 800a2da:	6078      	str	r0, [r7, #4]
  APP_LOG(TS_OFF, VLEVEL_M,"== SiPM Signal ADC: %i \r\n", adcVal);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	9300      	str	r3, [sp, #0]
 800a2e0:	4b0a      	ldr	r3, [pc, #40]	; (800a30c <MX_LoRaWAN_Process+0x88>)
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	2100      	movs	r1, #0
 800a2e6:	2002      	movs	r0, #2
 800a2e8:	f013 f9d4 	bl	801d694 <UTIL_ADV_TRACE_COND_FSend>
  HAL_Delay(500);
 800a2ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a2f0:	f7f7 ff9c 	bl	800222c <HAL_Delay>

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800a2f4:	bf00      	nop
 800a2f6:	3708      	adds	r7, #8
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd80      	pop	{r7, pc}
 800a2fc:	0801dd20 	.word	0x0801dd20
 800a300:	08000004 	.word	0x08000004
 800a304:	0801dd40 	.word	0x0801dd40
 800a308:	0c000008 	.word	0x0c000008
 800a30c:	0801dd58 	.word	0x0801dd58

0800a310 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800a310:	b480      	push	{r7}
 800a312:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800a314:	f3bf 8f4f 	dsb	sy
}
 800a318:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800a31a:	4b06      	ldr	r3, [pc, #24]	; (800a334 <__NVIC_SystemReset+0x24>)
 800a31c:	68db      	ldr	r3, [r3, #12]
 800a31e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800a322:	4904      	ldr	r1, [pc, #16]	; (800a334 <__NVIC_SystemReset+0x24>)
 800a324:	4b04      	ldr	r3, [pc, #16]	; (800a338 <__NVIC_SystemReset+0x28>)
 800a326:	4313      	orrs	r3, r2
 800a328:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800a32a:	f3bf 8f4f 	dsb	sy
}
 800a32e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800a330:	bf00      	nop
 800a332:	e7fd      	b.n	800a330 <__NVIC_SystemReset+0x20>
 800a334:	e000ed00 	.word	0xe000ed00
 800a338:	05fa0004 	.word	0x05fa0004

0800a33c <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b086      	sub	sp, #24
 800a340:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 800a342:	2300      	movs	r3, #0
 800a344:	607b      	str	r3, [r7, #4]
  /* USER CODE END LoRaWAN_Init_LV */

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* Get LoRaWAN APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800a346:	2300      	movs	r3, #0
 800a348:	9302      	str	r3, [sp, #8]
 800a34a:	2303      	movs	r3, #3
 800a34c:	9301      	str	r3, [sp, #4]
 800a34e:	2301      	movs	r3, #1
 800a350:	9300      	str	r3, [sp, #0]
 800a352:	4b59      	ldr	r3, [pc, #356]	; (800a4b8 <LoRaWAN_Init+0x17c>)
 800a354:	2200      	movs	r2, #0
 800a356:	2100      	movs	r1, #0
 800a358:	2002      	movs	r0, #2
 800a35a:	f013 f99b 	bl	801d694 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW LoRaWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 800a35e:	2300      	movs	r3, #0
 800a360:	9302      	str	r3, [sp, #8]
 800a362:	2305      	movs	r3, #5
 800a364:	9301      	str	r3, [sp, #4]
 800a366:	2302      	movs	r3, #2
 800a368:	9300      	str	r3, [sp, #0]
 800a36a:	4b54      	ldr	r3, [pc, #336]	; (800a4bc <LoRaWAN_Init+0x180>)
 800a36c:	2200      	movs	r2, #0
 800a36e:	2100      	movs	r1, #0
 800a370:	2002      	movs	r0, #2
 800a372:	f013 f98f 	bl	801d694 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(LORAWAN_VERSION_MAIN),
          (uint8_t)(LORAWAN_VERSION_SUB1),
          (uint8_t)(LORAWAN_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 800a376:	2300      	movs	r3, #0
 800a378:	9302      	str	r3, [sp, #8]
 800a37a:	2303      	movs	r3, #3
 800a37c:	9301      	str	r3, [sp, #4]
 800a37e:	2301      	movs	r3, #1
 800a380:	9300      	str	r3, [sp, #0]
 800a382:	4b4f      	ldr	r3, [pc, #316]	; (800a4c0 <LoRaWAN_Init+0x184>)
 800a384:	2200      	movs	r2, #0
 800a386:	2100      	movs	r1, #0
 800a388:	2002      	movs	r0, #2
 800a38a:	f013 f983 	bl	801d694 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 800a38e:	1d3b      	adds	r3, r7, #4
 800a390:	4619      	mov	r1, r3
 800a392:	2000      	movs	r0, #0
 800a394:	f003 fa16 	bl	800d7c4 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	0e1b      	lsrs	r3, r3, #24
 800a39c:	b2db      	uxtb	r3, r3
 800a39e:	461a      	mov	r2, r3
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	0c1b      	lsrs	r3, r3, #16
 800a3a4:	b2db      	uxtb	r3, r3
 800a3a6:	4619      	mov	r1, r3
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	0a1b      	lsrs	r3, r3, #8
 800a3ac:	b2db      	uxtb	r3, r3
 800a3ae:	9302      	str	r3, [sp, #8]
 800a3b0:	9101      	str	r1, [sp, #4]
 800a3b2:	9200      	str	r2, [sp, #0]
 800a3b4:	4b43      	ldr	r3, [pc, #268]	; (800a4c4 <LoRaWAN_Init+0x188>)
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	2100      	movs	r1, #0
 800a3ba:	2002      	movs	r0, #2
 800a3bc:	f013 f96a 	bl	801d694 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800a3c0:	1d3b      	adds	r3, r7, #4
 800a3c2:	4619      	mov	r1, r3
 800a3c4:	2001      	movs	r0, #1
 800a3c6:	f003 f9fd 	bl	800d7c4 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	0e1b      	lsrs	r3, r3, #24
 800a3ce:	b2db      	uxtb	r3, r3
 800a3d0:	461a      	mov	r2, r3
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	0c1b      	lsrs	r3, r3, #16
 800a3d6:	b2db      	uxtb	r3, r3
 800a3d8:	4619      	mov	r1, r3
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	0a1b      	lsrs	r3, r3, #8
 800a3de:	b2db      	uxtb	r3, r3
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	b2c0      	uxtb	r0, r0
 800a3e4:	9003      	str	r0, [sp, #12]
 800a3e6:	9302      	str	r3, [sp, #8]
 800a3e8:	9101      	str	r1, [sp, #4]
 800a3ea:	9200      	str	r2, [sp, #0]
 800a3ec:	4b36      	ldr	r3, [pc, #216]	; (800a4c8 <LoRaWAN_Init+0x18c>)
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	2100      	movs	r1, #0
 800a3f2:	2002      	movs	r0, #2
 800a3f4:	f013 f94e 	bl	801d694 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	9300      	str	r3, [sp, #0]
 800a3fc:	4b33      	ldr	r3, [pc, #204]	; (800a4cc <LoRaWAN_Init+0x190>)
 800a3fe:	2200      	movs	r2, #0
 800a400:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a404:	4832      	ldr	r0, [pc, #200]	; (800a4d0 <LoRaWAN_Init+0x194>)
 800a406:	f012 fe97 	bl	801d138 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800a40a:	2300      	movs	r3, #0
 800a40c:	9300      	str	r3, [sp, #0]
 800a40e:	4b31      	ldr	r3, [pc, #196]	; (800a4d4 <LoRaWAN_Init+0x198>)
 800a410:	2200      	movs	r2, #0
 800a412:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a416:	4830      	ldr	r0, [pc, #192]	; (800a4d8 <LoRaWAN_Init+0x19c>)
 800a418:	f012 fe8e 	bl	801d138 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800a41c:	2300      	movs	r3, #0
 800a41e:	9300      	str	r3, [sp, #0]
 800a420:	4b2e      	ldr	r3, [pc, #184]	; (800a4dc <LoRaWAN_Init+0x1a0>)
 800a422:	2201      	movs	r2, #1
 800a424:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a428:	482d      	ldr	r0, [pc, #180]	; (800a4e0 <LoRaWAN_Init+0x1a4>)
 800a42a:	f012 fe85 	bl	801d138 <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800a42e:	2300      	movs	r3, #0
 800a430:	9300      	str	r3, [sp, #0]
 800a432:	4b2c      	ldr	r3, [pc, #176]	; (800a4e4 <LoRaWAN_Init+0x1a8>)
 800a434:	2200      	movs	r2, #0
 800a436:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800a43a:	482b      	ldr	r0, [pc, #172]	; (800a4e8 <LoRaWAN_Init+0x1ac>)
 800a43c:	f012 fe7c 	bl	801d138 <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800a440:	4a2a      	ldr	r2, [pc, #168]	; (800a4ec <LoRaWAN_Init+0x1b0>)
 800a442:	2100      	movs	r1, #0
 800a444:	2001      	movs	r0, #1
 800a446:	f012 fdd3 	bl	801cff0 <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800a44a:	4a29      	ldr	r2, [pc, #164]	; (800a4f0 <LoRaWAN_Init+0x1b4>)
 800a44c:	2100      	movs	r1, #0
 800a44e:	2002      	movs	r0, #2
 800a450:	f012 fdce 	bl	801cff0 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 800a454:	4a27      	ldr	r2, [pc, #156]	; (800a4f4 <LoRaWAN_Init+0x1b8>)
 800a456:	2100      	movs	r1, #0
 800a458:	2004      	movs	r0, #4
 800a45a:	f012 fdc9 	bl	801cff0 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 800a45e:	4a26      	ldr	r2, [pc, #152]	; (800a4f8 <LoRaWAN_Init+0x1bc>)
 800a460:	2100      	movs	r1, #0
 800a462:	2008      	movs	r0, #8
 800a464:	f012 fdc4 	bl	801cff0 <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800a468:	f000 fd04 	bl	800ae74 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800a46c:	4923      	ldr	r1, [pc, #140]	; (800a4fc <LoRaWAN_Init+0x1c0>)
 800a46e:	4824      	ldr	r0, [pc, #144]	; (800a500 <LoRaWAN_Init+0x1c4>)
 800a470:	f002 fa1a 	bl	800c8a8 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800a474:	4823      	ldr	r0, [pc, #140]	; (800a504 <LoRaWAN_Init+0x1c8>)
 800a476:	f002 fa85 	bl	800c984 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800a47a:	4819      	ldr	r0, [pc, #100]	; (800a4e0 <LoRaWAN_Init+0x1a4>)
 800a47c:	f012 fe92 	bl	801d1a4 <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 800a480:	4b21      	ldr	r3, [pc, #132]	; (800a508 <LoRaWAN_Init+0x1cc>)
 800a482:	781b      	ldrb	r3, [r3, #0]
 800a484:	4a21      	ldr	r2, [pc, #132]	; (800a50c <LoRaWAN_Init+0x1d0>)
 800a486:	7812      	ldrb	r2, [r2, #0]
 800a488:	4611      	mov	r1, r2
 800a48a:	4618      	mov	r0, r3
 800a48c:	f002 fbd2 	bl	800cc34 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800a490:	4b1f      	ldr	r3, [pc, #124]	; (800a510 <LoRaWAN_Init+0x1d4>)
 800a492:	781b      	ldrb	r3, [r3, #0]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d10b      	bne.n	800a4b0 <LoRaWAN_Init+0x174>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800a498:	4b1e      	ldr	r3, [pc, #120]	; (800a514 <LoRaWAN_Init+0x1d8>)
 800a49a:	6819      	ldr	r1, [r3, #0]
 800a49c:	2300      	movs	r3, #0
 800a49e:	9300      	str	r3, [sp, #0]
 800a4a0:	4b1d      	ldr	r3, [pc, #116]	; (800a518 <LoRaWAN_Init+0x1dc>)
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	481d      	ldr	r0, [pc, #116]	; (800a51c <LoRaWAN_Init+0x1e0>)
 800a4a6:	f012 fe47 	bl	801d138 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800a4aa:	481c      	ldr	r0, [pc, #112]	; (800a51c <LoRaWAN_Init+0x1e0>)
 800a4ac:	f012 fe7a 	bl	801d1a4 <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800a4b0:	bf00      	nop
 800a4b2:	3708      	adds	r7, #8
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bd80      	pop	{r7, pc}
 800a4b8:	0801dd94 	.word	0x0801dd94
 800a4bc:	0801ddb8 	.word	0x0801ddb8
 800a4c0:	0801dddc 	.word	0x0801dddc
 800a4c4:	0801de00 	.word	0x0801de00
 800a4c8:	0801de24 	.word	0x0801de24
 800a4cc:	0800a995 	.word	0x0800a995
 800a4d0:	20000510 	.word	0x20000510
 800a4d4:	0800a9a7 	.word	0x0800a9a7
 800a4d8:	20000528 	.word	0x20000528
 800a4dc:	0800a9b9 	.word	0x0800a9b9
 800a4e0:	20000540 	.word	0x20000540
 800a4e4:	0800ad75 	.word	0x0800ad75
 800a4e8:	20000404 	.word	0x20000404
 800a4ec:	0800cbc9 	.word	0x0800cbc9
 800a4f0:	0800a655 	.word	0x0800a655
 800a4f4:	0800ad99 	.word	0x0800ad99
 800a4f8:	0800acf5 	.word	0x0800acf5
 800a4fc:	01030000 	.word	0x01030000
 800a500:	20000024 	.word	0x20000024
 800a504:	20000070 	.word	0x20000070
 800a508:	20000020 	.word	0x20000020
 800a50c:	20000021 	.word	0x20000021
 800a510:	200003e8 	.word	0x200003e8
 800a514:	20000088 	.word	0x20000088
 800a518:	0800a971 	.word	0x0800a971
 800a51c:	200003ec 	.word	0x200003ec

0800a520 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800a520:	b5b0      	push	{r4, r5, r7, lr}
 800a522:	b08a      	sub	sp, #40	; 0x28
 800a524:	af06      	add	r7, sp, #24
 800a526:	6078      	str	r0, [r7, #4]
 800a528:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  uint8_t RxPort = 0;
 800a52a:	2300      	movs	r3, #0
 800a52c:	73fb      	strb	r3, [r7, #15]

  if (params != NULL)
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d07f      	beq.n	800a634 <OnRxData+0x114>
  {
#if 0   // XXX:
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
#endif

    UTIL_TIMER_Start(&RxLedTimer);
 800a534:	4841      	ldr	r0, [pc, #260]	; (800a63c <OnRxData+0x11c>)
 800a536:	f012 fe35 	bl	801d1a4 <UTIL_TIMER_Start>

    if (params->IsMcpsIndication)
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	781b      	ldrb	r3, [r3, #0]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d054      	beq.n	800a5ec <OnRxData+0xcc>
    {
      if (appData != NULL)
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d051      	beq.n	800a5ec <OnRxData+0xcc>
      {
        RxPort = appData->Port;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	781b      	ldrb	r3, [r3, #0]
 800a54c:	73fb      	strb	r3, [r7, #15]
        if (appData->Buffer != NULL)
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	685b      	ldr	r3, [r3, #4]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d04a      	beq.n	800a5ec <OnRxData+0xcc>
        {
          switch (appData->Port)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	781b      	ldrb	r3, [r3, #0]
 800a55a:	2b02      	cmp	r3, #2
 800a55c:	d01f      	beq.n	800a59e <OnRxData+0x7e>
 800a55e:	2b03      	cmp	r3, #3
 800a560:	d13f      	bne.n	800a5e2 <OnRxData+0xc2>
          {
            case LORAWAN_SWITCH_CLASS_PORT:
              /*this port switches the class*/
              if (appData->BufferSize == 1)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	785b      	ldrb	r3, [r3, #1]
 800a566:	2b01      	cmp	r3, #1
 800a568:	d13d      	bne.n	800a5e6 <OnRxData+0xc6>
              {
                switch (appData->Buffer[0])
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	685b      	ldr	r3, [r3, #4]
 800a56e:	781b      	ldrb	r3, [r3, #0]
 800a570:	2b02      	cmp	r3, #2
 800a572:	d00e      	beq.n	800a592 <OnRxData+0x72>
 800a574:	2b02      	cmp	r3, #2
 800a576:	dc10      	bgt.n	800a59a <OnRxData+0x7a>
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d002      	beq.n	800a582 <OnRxData+0x62>
 800a57c:	2b01      	cmp	r3, #1
 800a57e:	d004      	beq.n	800a58a <OnRxData+0x6a>
                  {
                    LmHandlerRequestClass(CLASS_C);
                    break;
                  }
                  default:
                    break;
 800a580:	e00b      	b.n	800a59a <OnRxData+0x7a>
                    LmHandlerRequestClass(CLASS_A);
 800a582:	2000      	movs	r0, #0
 800a584:	f002 fd0a 	bl	800cf9c <LmHandlerRequestClass>
                    break;
 800a588:	e008      	b.n	800a59c <OnRxData+0x7c>
                    LmHandlerRequestClass(CLASS_B);
 800a58a:	2001      	movs	r0, #1
 800a58c:	f002 fd06 	bl	800cf9c <LmHandlerRequestClass>
                    break;
 800a590:	e004      	b.n	800a59c <OnRxData+0x7c>
                    LmHandlerRequestClass(CLASS_C);
 800a592:	2002      	movs	r0, #2
 800a594:	f002 fd02 	bl	800cf9c <LmHandlerRequestClass>
                    break;
 800a598:	e000      	b.n	800a59c <OnRxData+0x7c>
                    break;
 800a59a:	bf00      	nop
                }
              }
              break;
 800a59c:	e023      	b.n	800a5e6 <OnRxData+0xc6>
            case LORAWAN_USER_APP_PORT:
              if (appData->BufferSize == 1)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	785b      	ldrb	r3, [r3, #1]
 800a5a2:	2b01      	cmp	r3, #1
 800a5a4:	d121      	bne.n	800a5ea <OnRxData+0xca>
              {
                AppLedStateOn = appData->Buffer[0] & 0x01;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	685b      	ldr	r3, [r3, #4]
 800a5aa:	781b      	ldrb	r3, [r3, #0]
 800a5ac:	f003 0301 	and.w	r3, r3, #1
 800a5b0:	b2da      	uxtb	r2, r3
 800a5b2:	4b23      	ldr	r3, [pc, #140]	; (800a640 <OnRxData+0x120>)
 800a5b4:	701a      	strb	r2, [r3, #0]
                if (AppLedStateOn == RESET)
 800a5b6:	4b22      	ldr	r3, [pc, #136]	; (800a640 <OnRxData+0x120>)
 800a5b8:	781b      	ldrb	r3, [r3, #0]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d108      	bne.n	800a5d0 <OnRxData+0xb0>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 800a5be:	4b21      	ldr	r3, [pc, #132]	; (800a644 <OnRxData+0x124>)
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	2100      	movs	r1, #0
 800a5c4:	2003      	movs	r0, #3
 800a5c6:	f013 f865 	bl	801d694 <UTIL_ADV_TRACE_COND_FSend>
                  Status_LED_Off();
 800a5ca:	f7f8 fb35 	bl	8002c38 <Status_LED_Off>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
                  Status_LED_On();
                }
              }
              break;
 800a5ce:	e00c      	b.n	800a5ea <OnRxData+0xca>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800a5d0:	4b1d      	ldr	r3, [pc, #116]	; (800a648 <OnRxData+0x128>)
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	2100      	movs	r1, #0
 800a5d6:	2003      	movs	r0, #3
 800a5d8:	f013 f85c 	bl	801d694 <UTIL_ADV_TRACE_COND_FSend>
                  Status_LED_On();
 800a5dc:	f7f8 fb38 	bl	8002c50 <Status_LED_On>
              break;
 800a5e0:	e003      	b.n	800a5ea <OnRxData+0xca>

            default:

              break;
 800a5e2:	bf00      	nop
 800a5e4:	e002      	b.n	800a5ec <OnRxData+0xcc>
              break;
 800a5e6:	bf00      	nop
 800a5e8:	e000      	b.n	800a5ec <OnRxData+0xcc>
              break;
 800a5ea:	bf00      	nop
          }
        }
      }
    }
    if (params->RxSlot < RX_SLOT_NONE)
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	7c1b      	ldrb	r3, [r3, #16]
 800a5f0:	2b05      	cmp	r3, #5
 800a5f2:	d81f      	bhi.n	800a634 <OnRxData+0x114>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	68db      	ldr	r3, [r3, #12]
 800a5f8:	7bfa      	ldrb	r2, [r7, #15]
 800a5fa:	6839      	ldr	r1, [r7, #0]
 800a5fc:	f991 1008 	ldrsb.w	r1, [r1, #8]
 800a600:	460c      	mov	r4, r1
 800a602:	6839      	ldr	r1, [r7, #0]
 800a604:	7c09      	ldrb	r1, [r1, #16]
 800a606:	4608      	mov	r0, r1
 800a608:	4910      	ldr	r1, [pc, #64]	; (800a64c <OnRxData+0x12c>)
 800a60a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800a60e:	6838      	ldr	r0, [r7, #0]
 800a610:	f990 0009 	ldrsb.w	r0, [r0, #9]
 800a614:	4605      	mov	r5, r0
 800a616:	6838      	ldr	r0, [r7, #0]
 800a618:	f990 000a 	ldrsb.w	r0, [r0, #10]
 800a61c:	9005      	str	r0, [sp, #20]
 800a61e:	9504      	str	r5, [sp, #16]
 800a620:	9103      	str	r1, [sp, #12]
 800a622:	9402      	str	r4, [sp, #8]
 800a624:	9201      	str	r2, [sp, #4]
 800a626:	9300      	str	r3, [sp, #0]
 800a628:	4b09      	ldr	r3, [pc, #36]	; (800a650 <OnRxData+0x130>)
 800a62a:	2200      	movs	r2, #0
 800a62c:	2100      	movs	r1, #0
 800a62e:	2003      	movs	r0, #3
 800a630:	f013 f830 	bl	801d694 <UTIL_ADV_TRACE_COND_FSend>
              params->DownlinkCounter, RxPort, params->Datarate, slotStrings[params->RxSlot], params->Rssi, params->Snr);
    }
  }
  /* USER CODE END OnRxData_1 */
}
 800a634:	bf00      	nop
 800a636:	3710      	adds	r7, #16
 800a638:	46bd      	mov	sp, r7
 800a63a:	bdb0      	pop	{r4, r5, r7, pc}
 800a63c:	20000528 	.word	0x20000528
 800a640:	2000050e 	.word	0x2000050e
 800a644:	0801de48 	.word	0x0801de48
 800a648:	0801de54 	.word	0x0801de54
 800a64c:	20000008 	.word	0x20000008
 800a650:	0801de60 	.word	0x0801de60

0800a654 <SendTxData>:

static void SendTxData(void)
{
 800a654:	b590      	push	{r4, r7, lr}
 800a656:	b091      	sub	sp, #68	; 0x44
 800a658:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800a65a:	23ff      	movs	r3, #255	; 0xff
 800a65c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t batteryLevel = GetBatteryLevel();
 800a660:	f7f7 fca0 	bl	8001fa4 <GetBatteryLevel>
 800a664:	4603      	mov	r3, r0
 800a666:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800a66a:	2300      	movs	r3, #0
 800a66c:	637b      	str	r3, [r7, #52]	; 0x34

#ifdef CAYENNE_LPP
  uint8_t channel = 0;
#else
  uint16_t pressure = 0;
 800a66e:	2300      	movs	r3, #0
 800a670:	85bb      	strh	r3, [r7, #44]	; 0x2c
  int16_t temperature = 0;
 800a672:	2300      	movs	r3, #0
 800a674:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t humidity = 0;
 800a676:	2300      	movs	r3, #0
 800a678:	853b      	strh	r3, [r7, #40]	; 0x28
  uint32_t i = 0;
 800a67a:	2300      	movs	r3, #0
 800a67c:	633b      	str	r3, [r7, #48]	; 0x30
  int32_t latitude = 0;
 800a67e:	2300      	movs	r3, #0
 800a680:	627b      	str	r3, [r7, #36]	; 0x24
  int32_t longitude = 0;
 800a682:	2300      	movs	r3, #0
 800a684:	623b      	str	r3, [r7, #32]
  uint16_t altitudeGps = 0;
 800a686:	2300      	movs	r3, #0
 800a688:	83fb      	strh	r3, [r7, #30]
#endif /* CAYENNE_LPP */

  EnvSensors_Read(&sensor_data);
 800a68a:	1d3b      	adds	r3, r7, #4
 800a68c:	4618      	mov	r0, r3
 800a68e:	f7f7 fde3 	bl	8002258 <EnvSensors_Read>

  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 800a692:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a696:	9300      	str	r3, [sp, #0]
 800a698:	4b8f      	ldr	r3, [pc, #572]	; (800a8d8 <SendTxData+0x284>)
 800a69a:	2201      	movs	r2, #1
 800a69c:	2100      	movs	r1, #0
 800a69e:	2002      	movs	r0, #2
 800a6a0:	f012 fff8 	bl	801d694 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f7f6 fa38 	bl	8000b1c <__aeabi_f2iz>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	b21b      	sxth	r3, r3
 800a6b0:	9300      	str	r3, [sp, #0]
 800a6b2:	4b8a      	ldr	r3, [pc, #552]	; (800a8dc <SendTxData+0x288>)
 800a6b4:	2201      	movs	r2, #1
 800a6b6:	2100      	movs	r1, #0
 800a6b8:	2002      	movs	r0, #2
 800a6ba:	f012 ffeb 	bl	801d694 <UTIL_ADV_TRACE_COND_FSend>

  AppData.Port = LORAWAN_USER_APP_PORT;
 800a6be:	4b88      	ldr	r3, [pc, #544]	; (800a8e0 <SendTxData+0x28c>)
 800a6c0:	2202      	movs	r2, #2
 800a6c2:	701a      	strb	r2, [r3, #0]
  }

  CayenneLppCopy(AppData.Buffer);
  AppData.BufferSize = CayenneLppGetSize();
#else  /* not CAYENNE_LPP */
  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	4987      	ldr	r1, [pc, #540]	; (800a8e4 <SendTxData+0x290>)
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f7f6 f8d7 	bl	800087c <__aeabi_fmul>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f7f6 fa49 	bl	8000b68 <__aeabi_f2uiz>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	853b      	strh	r3, [r7, #40]	; 0x28
  temperature = (int16_t)(sensor_data.temperature);
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f7f6 fa1d 	bl	8000b1c <__aeabi_f2iz>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	857b      	strh	r3, [r7, #42]	; 0x2a
  pressure = (uint16_t)(sensor_data.pressure * 100 / 10); /* in hPa / 10 */
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	497f      	ldr	r1, [pc, #508]	; (800a8e8 <SendTxData+0x294>)
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f7f6 f8c6 	bl	800087c <__aeabi_fmul>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	497c      	ldr	r1, [pc, #496]	; (800a8e4 <SendTxData+0x290>)
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f7f6 f975 	bl	80009e4 <__aeabi_fdiv>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f7f6 fa33 	bl	8000b68 <__aeabi_f2uiz>
 800a702:	4603      	mov	r3, r0
 800a704:	85bb      	strh	r3, [r7, #44]	; 0x2c

  AppData.Buffer[i++] = AppLedStateOn;
 800a706:	4b76      	ldr	r3, [pc, #472]	; (800a8e0 <SendTxData+0x28c>)
 800a708:	685a      	ldr	r2, [r3, #4]
 800a70a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a70c:	1c59      	adds	r1, r3, #1
 800a70e:	6339      	str	r1, [r7, #48]	; 0x30
 800a710:	4413      	add	r3, r2
 800a712:	4a76      	ldr	r2, [pc, #472]	; (800a8ec <SendTxData+0x298>)
 800a714:	7812      	ldrb	r2, [r2, #0]
 800a716:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 800a718:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a71a:	0a1b      	lsrs	r3, r3, #8
 800a71c:	b298      	uxth	r0, r3
 800a71e:	4b70      	ldr	r3, [pc, #448]	; (800a8e0 <SendTxData+0x28c>)
 800a720:	685a      	ldr	r2, [r3, #4]
 800a722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a724:	1c59      	adds	r1, r3, #1
 800a726:	6339      	str	r1, [r7, #48]	; 0x30
 800a728:	4413      	add	r3, r2
 800a72a:	b2c2      	uxtb	r2, r0
 800a72c:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 800a72e:	4b6c      	ldr	r3, [pc, #432]	; (800a8e0 <SendTxData+0x28c>)
 800a730:	685a      	ldr	r2, [r3, #4]
 800a732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a734:	1c59      	adds	r1, r3, #1
 800a736:	6339      	str	r1, [r7, #48]	; 0x30
 800a738:	4413      	add	r3, r2
 800a73a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800a73c:	b2d2      	uxtb	r2, r2
 800a73e:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 800a740:	4b67      	ldr	r3, [pc, #412]	; (800a8e0 <SendTxData+0x28c>)
 800a742:	685a      	ldr	r2, [r3, #4]
 800a744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a746:	1c59      	adds	r1, r3, #1
 800a748:	6339      	str	r1, [r7, #48]	; 0x30
 800a74a:	4413      	add	r3, r2
 800a74c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800a74e:	b2d2      	uxtb	r2, r2
 800a750:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 800a752:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a754:	0a1b      	lsrs	r3, r3, #8
 800a756:	b298      	uxth	r0, r3
 800a758:	4b61      	ldr	r3, [pc, #388]	; (800a8e0 <SendTxData+0x28c>)
 800a75a:	685a      	ldr	r2, [r3, #4]
 800a75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a75e:	1c59      	adds	r1, r3, #1
 800a760:	6339      	str	r1, [r7, #48]	; 0x30
 800a762:	4413      	add	r3, r2
 800a764:	b2c2      	uxtb	r2, r0
 800a766:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 800a768:	4b5d      	ldr	r3, [pc, #372]	; (800a8e0 <SendTxData+0x28c>)
 800a76a:	685a      	ldr	r2, [r3, #4]
 800a76c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a76e:	1c59      	adds	r1, r3, #1
 800a770:	6339      	str	r1, [r7, #48]	; 0x30
 800a772:	4413      	add	r3, r2
 800a774:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800a776:	b2d2      	uxtb	r2, r2
 800a778:	701a      	strb	r2, [r3, #0]

  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 800a77a:	4b5d      	ldr	r3, [pc, #372]	; (800a8f0 <SendTxData+0x29c>)
 800a77c:	781b      	ldrb	r3, [r3, #0]
 800a77e:	2b08      	cmp	r3, #8
 800a780:	d007      	beq.n	800a792 <SendTxData+0x13e>
 800a782:	4b5b      	ldr	r3, [pc, #364]	; (800a8f0 <SendTxData+0x29c>)
 800a784:	781b      	ldrb	r3, [r3, #0]
 800a786:	2b01      	cmp	r3, #1
 800a788:	d003      	beq.n	800a792 <SendTxData+0x13e>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 800a78a:	4b59      	ldr	r3, [pc, #356]	; (800a8f0 <SendTxData+0x29c>)
 800a78c:	781b      	ldrb	r3, [r3, #0]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d120      	bne.n	800a7d4 <SendTxData+0x180>
  {
    AppData.Buffer[i++] = 0;
 800a792:	4b53      	ldr	r3, [pc, #332]	; (800a8e0 <SendTxData+0x28c>)
 800a794:	685a      	ldr	r2, [r3, #4]
 800a796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a798:	1c59      	adds	r1, r3, #1
 800a79a:	6339      	str	r1, [r7, #48]	; 0x30
 800a79c:	4413      	add	r3, r2
 800a79e:	2200      	movs	r2, #0
 800a7a0:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800a7a2:	4b4f      	ldr	r3, [pc, #316]	; (800a8e0 <SendTxData+0x28c>)
 800a7a4:	685a      	ldr	r2, [r3, #4]
 800a7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a8:	1c59      	adds	r1, r3, #1
 800a7aa:	6339      	str	r1, [r7, #48]	; 0x30
 800a7ac:	4413      	add	r3, r2
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800a7b2:	4b4b      	ldr	r3, [pc, #300]	; (800a8e0 <SendTxData+0x28c>)
 800a7b4:	685a      	ldr	r2, [r3, #4]
 800a7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b8:	1c59      	adds	r1, r3, #1
 800a7ba:	6339      	str	r1, [r7, #48]	; 0x30
 800a7bc:	4413      	add	r3, r2
 800a7be:	2200      	movs	r2, #0
 800a7c0:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800a7c2:	4b47      	ldr	r3, [pc, #284]	; (800a8e0 <SendTxData+0x28c>)
 800a7c4:	685a      	ldr	r2, [r3, #4]
 800a7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c8:	1c59      	adds	r1, r3, #1
 800a7ca:	6339      	str	r1, [r7, #48]	; 0x30
 800a7cc:	4413      	add	r3, r2
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	701a      	strb	r2, [r3, #0]
 800a7d2:	e05b      	b.n	800a88c <SendTxData+0x238>
  }
  else
  {
    latitude = sensor_data.latitude;
 800a7d4:	693b      	ldr	r3, [r7, #16]
 800a7d6:	627b      	str	r3, [r7, #36]	; 0x24
    longitude = sensor_data.longitude;
 800a7d8:	697b      	ldr	r3, [r7, #20]
 800a7da:	623b      	str	r3, [r7, #32]

    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 800a7dc:	4b40      	ldr	r3, [pc, #256]	; (800a8e0 <SendTxData+0x28c>)
 800a7de:	685a      	ldr	r2, [r3, #4]
 800a7e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e2:	1c59      	adds	r1, r3, #1
 800a7e4:	6339      	str	r1, [r7, #48]	; 0x30
 800a7e6:	18d4      	adds	r4, r2, r3
 800a7e8:	f7f7 fbdc 	bl	8001fa4 <GetBatteryLevel>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	7023      	strb	r3, [r4, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 800a7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f2:	1418      	asrs	r0, r3, #16
 800a7f4:	4b3a      	ldr	r3, [pc, #232]	; (800a8e0 <SendTxData+0x28c>)
 800a7f6:	685a      	ldr	r2, [r3, #4]
 800a7f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7fa:	1c59      	adds	r1, r3, #1
 800a7fc:	6339      	str	r1, [r7, #48]	; 0x30
 800a7fe:	4413      	add	r3, r2
 800a800:	b2c2      	uxtb	r2, r0
 800a802:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 800a804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a806:	1218      	asrs	r0, r3, #8
 800a808:	4b35      	ldr	r3, [pc, #212]	; (800a8e0 <SendTxData+0x28c>)
 800a80a:	685a      	ldr	r2, [r3, #4]
 800a80c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a80e:	1c59      	adds	r1, r3, #1
 800a810:	6339      	str	r1, [r7, #48]	; 0x30
 800a812:	4413      	add	r3, r2
 800a814:	b2c2      	uxtb	r2, r0
 800a816:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 800a818:	4b31      	ldr	r3, [pc, #196]	; (800a8e0 <SendTxData+0x28c>)
 800a81a:	685a      	ldr	r2, [r3, #4]
 800a81c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a81e:	1c59      	adds	r1, r3, #1
 800a820:	6339      	str	r1, [r7, #48]	; 0x30
 800a822:	4413      	add	r3, r2
 800a824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a826:	b2d2      	uxtb	r2, r2
 800a828:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 800a82a:	6a3b      	ldr	r3, [r7, #32]
 800a82c:	1418      	asrs	r0, r3, #16
 800a82e:	4b2c      	ldr	r3, [pc, #176]	; (800a8e0 <SendTxData+0x28c>)
 800a830:	685a      	ldr	r2, [r3, #4]
 800a832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a834:	1c59      	adds	r1, r3, #1
 800a836:	6339      	str	r1, [r7, #48]	; 0x30
 800a838:	4413      	add	r3, r2
 800a83a:	b2c2      	uxtb	r2, r0
 800a83c:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 800a83e:	6a3b      	ldr	r3, [r7, #32]
 800a840:	1218      	asrs	r0, r3, #8
 800a842:	4b27      	ldr	r3, [pc, #156]	; (800a8e0 <SendTxData+0x28c>)
 800a844:	685a      	ldr	r2, [r3, #4]
 800a846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a848:	1c59      	adds	r1, r3, #1
 800a84a:	6339      	str	r1, [r7, #48]	; 0x30
 800a84c:	4413      	add	r3, r2
 800a84e:	b2c2      	uxtb	r2, r0
 800a850:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 800a852:	4b23      	ldr	r3, [pc, #140]	; (800a8e0 <SendTxData+0x28c>)
 800a854:	685a      	ldr	r2, [r3, #4]
 800a856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a858:	1c59      	adds	r1, r3, #1
 800a85a:	6339      	str	r1, [r7, #48]	; 0x30
 800a85c:	4413      	add	r3, r2
 800a85e:	6a3a      	ldr	r2, [r7, #32]
 800a860:	b2d2      	uxtb	r2, r2
 800a862:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 800a864:	8bfb      	ldrh	r3, [r7, #30]
 800a866:	0a1b      	lsrs	r3, r3, #8
 800a868:	b298      	uxth	r0, r3
 800a86a:	4b1d      	ldr	r3, [pc, #116]	; (800a8e0 <SendTxData+0x28c>)
 800a86c:	685a      	ldr	r2, [r3, #4]
 800a86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a870:	1c59      	adds	r1, r3, #1
 800a872:	6339      	str	r1, [r7, #48]	; 0x30
 800a874:	4413      	add	r3, r2
 800a876:	b2c2      	uxtb	r2, r0
 800a878:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 800a87a:	4b19      	ldr	r3, [pc, #100]	; (800a8e0 <SendTxData+0x28c>)
 800a87c:	685a      	ldr	r2, [r3, #4]
 800a87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a880:	1c59      	adds	r1, r3, #1
 800a882:	6339      	str	r1, [r7, #48]	; 0x30
 800a884:	4413      	add	r3, r2
 800a886:	8bfa      	ldrh	r2, [r7, #30]
 800a888:	b2d2      	uxtb	r2, r2
 800a88a:	701a      	strb	r2, [r3, #0]
  }

  AppData.BufferSize = i;
 800a88c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a88e:	b2da      	uxtb	r2, r3
 800a890:	4b13      	ldr	r3, [pc, #76]	; (800a8e0 <SendTxData+0x28c>)
 800a892:	705a      	strb	r2, [r3, #1]
#endif /* CAYENNE_LPP */

  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800a894:	4b17      	ldr	r3, [pc, #92]	; (800a8f4 <SendTxData+0x2a0>)
 800a896:	7a5b      	ldrb	r3, [r3, #9]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d007      	beq.n	800a8ac <SendTxData+0x258>
 800a89c:	f002 fa6c 	bl	800cd78 <LmHandlerJoinStatus>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	2b01      	cmp	r3, #1
 800a8a4:	d102      	bne.n	800a8ac <SendTxData+0x258>
  {
    UTIL_TIMER_Stop(&JoinLedTimer);
 800a8a6:	4813      	ldr	r0, [pc, #76]	; (800a8f4 <SendTxData+0x2a0>)
 800a8a8:	f012 fcea 	bl	801d280 <UTIL_TIMER_Stop>
#if 0   // XXX:
    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif
  }

  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800a8ac:	4b10      	ldr	r3, [pc, #64]	; (800a8f0 <SendTxData+0x29c>)
 800a8ae:	78db      	ldrb	r3, [r3, #3]
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	4619      	mov	r1, r3
 800a8b4:	480a      	ldr	r0, [pc, #40]	; (800a8e0 <SendTxData+0x28c>)
 800a8b6:	f002 fa7b 	bl	800cdb0 <LmHandlerSend>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (LORAMAC_HANDLER_SUCCESS == status)
 800a8c0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d119      	bne.n	800a8fc <SendTxData+0x2a8>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800a8c8:	4b0b      	ldr	r3, [pc, #44]	; (800a8f8 <SendTxData+0x2a4>)
 800a8ca:	2201      	movs	r2, #1
 800a8cc:	2100      	movs	r1, #0
 800a8ce:	2001      	movs	r0, #1
 800a8d0:	f012 fee0 	bl	801d694 <UTIL_ADV_TRACE_COND_FSend>
 800a8d4:	e029      	b.n	800a92a <SendTxData+0x2d6>
 800a8d6:	bf00      	nop
 800a8d8:	0801dea8 	.word	0x0801dea8
 800a8dc:	0801deb4 	.word	0x0801deb4
 800a8e0:	2000008c 	.word	0x2000008c
 800a8e4:	41200000 	.word	0x41200000
 800a8e8:	42c80000 	.word	0x42c80000
 800a8ec:	2000050e 	.word	0x2000050e
 800a8f0:	20000070 	.word	0x20000070
 800a8f4:	20000540 	.word	0x20000540
 800a8f8:	0801dec0 	.word	0x0801dec0
  }
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800a8fc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a900:	f113 0f06 	cmn.w	r3, #6
 800a904:	d111      	bne.n	800a92a <SendTxData+0x2d6>
  {
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800a906:	f002 f98b 	bl	800cc20 <LmHandlerGetDutyCycleWaitTime>
 800a90a:	6378      	str	r0, [r7, #52]	; 0x34
    if (nextTxIn > 0)
 800a90c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d00b      	beq.n	800a92a <SendTxData+0x2d6>
    {
      APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800a912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a914:	4a11      	ldr	r2, [pc, #68]	; (800a95c <SendTxData+0x308>)
 800a916:	fba2 2303 	umull	r2, r3, r2, r3
 800a91a:	099b      	lsrs	r3, r3, #6
 800a91c:	9300      	str	r3, [sp, #0]
 800a91e:	4b10      	ldr	r3, [pc, #64]	; (800a960 <SendTxData+0x30c>)
 800a920:	2201      	movs	r2, #1
 800a922:	2100      	movs	r1, #0
 800a924:	2001      	movs	r0, #1
 800a926:	f012 feb5 	bl	801d694 <UTIL_ADV_TRACE_COND_FSend>
    }
  }

  if (EventType == TX_ON_TIMER)
 800a92a:	4b0e      	ldr	r3, [pc, #56]	; (800a964 <SendTxData+0x310>)
 800a92c:	781b      	ldrb	r3, [r3, #0]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d10f      	bne.n	800a952 <SendTxData+0x2fe>
  {
    UTIL_TIMER_Stop(&TxTimer);
 800a932:	480d      	ldr	r0, [pc, #52]	; (800a968 <SendTxData+0x314>)
 800a934:	f012 fca4 	bl	801d280 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 800a938:	4b0c      	ldr	r3, [pc, #48]	; (800a96c <SendTxData+0x318>)
 800a93a:	681a      	ldr	r2, [r3, #0]
 800a93c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a93e:	4293      	cmp	r3, r2
 800a940:	bf38      	it	cc
 800a942:	4613      	movcc	r3, r2
 800a944:	4619      	mov	r1, r3
 800a946:	4808      	ldr	r0, [pc, #32]	; (800a968 <SendTxData+0x314>)
 800a948:	f012 fd0a 	bl	801d360 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800a94c:	4806      	ldr	r0, [pc, #24]	; (800a968 <SendTxData+0x314>)
 800a94e:	f012 fc29 	bl	801d1a4 <UTIL_TIMER_Start>
  }

  /* USER CODE END SendTxData_1 */
}
 800a952:	bf00      	nop
 800a954:	373c      	adds	r7, #60	; 0x3c
 800a956:	46bd      	mov	sp, r7
 800a958:	bd90      	pop	{r4, r7, pc}
 800a95a:	bf00      	nop
 800a95c:	10624dd3 	.word	0x10624dd3
 800a960:	0801ded0 	.word	0x0801ded0
 800a964:	200003e8 	.word	0x200003e8
 800a968:	200003ec 	.word	0x200003ec
 800a96c:	20000088 	.word	0x20000088

0800a970 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b082      	sub	sp, #8
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800a978:	2100      	movs	r1, #0
 800a97a:	2002      	movs	r0, #2
 800a97c:	f012 fb5a 	bl	801d034 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800a980:	4803      	ldr	r0, [pc, #12]	; (800a990 <OnTxTimerEvent+0x20>)
 800a982:	f012 fc0f 	bl	801d1a4 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800a986:	bf00      	nop
 800a988:	3708      	adds	r7, #8
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}
 800a98e:	bf00      	nop
 800a990:	200003ec 	.word	0x200003ec

0800a994 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800a994:	b480      	push	{r7}
 800a996:	b083      	sub	sp, #12
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
#if 0	// XXX: No LED available
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
}
 800a99c:	bf00      	nop
 800a99e:	370c      	adds	r7, #12
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bc80      	pop	{r7}
 800a9a4:	4770      	bx	lr

0800a9a6 <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800a9a6:	b480      	push	{r7}
 800a9a8:	b083      	sub	sp, #12
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
#endif
}
 800a9ae:	bf00      	nop
 800a9b0:	370c      	adds	r7, #12
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bc80      	pop	{r7}
 800a9b6:	4770      	bx	lr

0800a9b8 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b083      	sub	sp, #12
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
#endif
}
 800a9c0:	bf00      	nop
 800a9c2:	370c      	adds	r7, #12
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bc80      	pop	{r7}
 800a9c8:	4770      	bx	lr
	...

0800a9cc <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b086      	sub	sp, #24
 800a9d0:	af04      	add	r7, sp, #16
 800a9d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d041      	beq.n	800aa5e <OnTxData+0x92>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	781b      	ldrb	r3, [r3, #0]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d03d      	beq.n	800aa5e <OnTxData+0x92>
    {
#if 0	// XXX: No LED available
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif
      UTIL_TIMER_Start(&TxLedTimer);
 800a9e2:	4821      	ldr	r0, [pc, #132]	; (800aa68 <OnTxData+0x9c>)
 800a9e4:	f012 fbde 	bl	801d1a4 <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800a9e8:	4b20      	ldr	r3, [pc, #128]	; (800aa6c <OnTxData+0xa0>)
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	2100      	movs	r1, #0
 800a9ee:	2002      	movs	r0, #2
 800a9f0:	f012 fe50 	bl	801d694 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	68db      	ldr	r3, [r3, #12]
 800a9f8:	687a      	ldr	r2, [r7, #4]
 800a9fa:	7c12      	ldrb	r2, [r2, #16]
 800a9fc:	4611      	mov	r1, r2
 800a9fe:	687a      	ldr	r2, [r7, #4]
 800aa00:	f992 200a 	ldrsb.w	r2, [r2, #10]
 800aa04:	4610      	mov	r0, r2
 800aa06:	687a      	ldr	r2, [r7, #4]
 800aa08:	f992 2018 	ldrsb.w	r2, [r2, #24]
 800aa0c:	9203      	str	r2, [sp, #12]
 800aa0e:	9002      	str	r0, [sp, #8]
 800aa10:	9101      	str	r1, [sp, #4]
 800aa12:	9300      	str	r3, [sp, #0]
 800aa14:	4b16      	ldr	r3, [pc, #88]	; (800aa70 <OnTxData+0xa4>)
 800aa16:	2200      	movs	r2, #0
 800aa18:	2100      	movs	r1, #0
 800aa1a:	2003      	movs	r0, #3
 800aa1c:	f012 fe3a 	bl	801d694 <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800aa20:	4b14      	ldr	r3, [pc, #80]	; (800aa74 <OnTxData+0xa8>)
 800aa22:	2200      	movs	r2, #0
 800aa24:	2100      	movs	r1, #0
 800aa26:	2003      	movs	r0, #3
 800aa28:	f012 fe34 	bl	801d694 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	7a1b      	ldrb	r3, [r3, #8]
 800aa30:	2b01      	cmp	r3, #1
 800aa32:	d10e      	bne.n	800aa52 <OnTxData+0x86>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	7a5b      	ldrb	r3, [r3, #9]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d001      	beq.n	800aa40 <OnTxData+0x74>
 800aa3c:	4b0e      	ldr	r3, [pc, #56]	; (800aa78 <OnTxData+0xac>)
 800aa3e:	e000      	b.n	800aa42 <OnTxData+0x76>
 800aa40:	4b0e      	ldr	r3, [pc, #56]	; (800aa7c <OnTxData+0xb0>)
 800aa42:	9300      	str	r3, [sp, #0]
 800aa44:	4b0e      	ldr	r3, [pc, #56]	; (800aa80 <OnTxData+0xb4>)
 800aa46:	2200      	movs	r2, #0
 800aa48:	2100      	movs	r1, #0
 800aa4a:	2003      	movs	r0, #3
 800aa4c:	f012 fe22 	bl	801d694 <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800aa50:	e005      	b.n	800aa5e <OnTxData+0x92>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800aa52:	4b0c      	ldr	r3, [pc, #48]	; (800aa84 <OnTxData+0xb8>)
 800aa54:	2200      	movs	r2, #0
 800aa56:	2100      	movs	r1, #0
 800aa58:	2003      	movs	r0, #3
 800aa5a:	f012 fe1b 	bl	801d694 <UTIL_ADV_TRACE_COND_FSend>
}
 800aa5e:	bf00      	nop
 800aa60:	3708      	adds	r7, #8
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}
 800aa66:	bf00      	nop
 800aa68:	20000510 	.word	0x20000510
 800aa6c:	0801def0 	.word	0x0801def0
 800aa70:	0801df24 	.word	0x0801df24
 800aa74:	0801df58 	.word	0x0801df58
 800aa78:	0801df68 	.word	0x0801df68
 800aa7c:	0801df6c 	.word	0x0801df6c
 800aa80:	0801df74 	.word	0x0801df74
 800aa84:	0801df88 	.word	0x0801df88

0800aa88 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b082      	sub	sp, #8
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d039      	beq.n	800ab0a <OnJoinRequest+0x82>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d11e      	bne.n	800aade <OnJoinRequest+0x56>
    {
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), CFG_SEQ_Prio_0);
 800aaa0:	2100      	movs	r1, #0
 800aaa2:	2004      	movs	r0, #4
 800aaa4:	f012 fac6 	bl	801d034 <UTIL_SEQ_SetTask>

      UTIL_TIMER_Stop(&JoinLedTimer);
 800aaa8:	481a      	ldr	r0, [pc, #104]	; (800ab14 <OnJoinRequest+0x8c>)
 800aaaa:	f012 fbe9 	bl	801d280 <UTIL_TIMER_Stop>
#if 0   // XXX:
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800aaae:	4b1a      	ldr	r3, [pc, #104]	; (800ab18 <OnJoinRequest+0x90>)
 800aab0:	2200      	movs	r2, #0
 800aab2:	2100      	movs	r1, #0
 800aab4:	2002      	movs	r0, #2
 800aab6:	f012 fded 	bl	801d694 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	79db      	ldrb	r3, [r3, #7]
 800aabe:	2b01      	cmp	r3, #1
 800aac0:	d106      	bne.n	800aad0 <OnJoinRequest+0x48>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800aac2:	4b16      	ldr	r3, [pc, #88]	; (800ab1c <OnJoinRequest+0x94>)
 800aac4:	2200      	movs	r2, #0
 800aac6:	2100      	movs	r1, #0
 800aac8:	2002      	movs	r0, #2
 800aaca:	f012 fde3 	bl	801d694 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
      }
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800aace:	e01c      	b.n	800ab0a <OnJoinRequest+0x82>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800aad0:	4b13      	ldr	r3, [pc, #76]	; (800ab20 <OnJoinRequest+0x98>)
 800aad2:	2200      	movs	r2, #0
 800aad4:	2100      	movs	r1, #0
 800aad6:	2002      	movs	r0, #2
 800aad8:	f012 fddc 	bl	801d694 <UTIL_ADV_TRACE_COND_FSend>
}
 800aadc:	e015      	b.n	800ab0a <OnJoinRequest+0x82>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800aade:	4b11      	ldr	r3, [pc, #68]	; (800ab24 <OnJoinRequest+0x9c>)
 800aae0:	2200      	movs	r2, #0
 800aae2:	2100      	movs	r1, #0
 800aae4:	2002      	movs	r0, #2
 800aae6:	f012 fdd5 	bl	801d694 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA) {
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	79db      	ldrb	r3, [r3, #7]
 800aaee:	2b02      	cmp	r3, #2
 800aaf0:	d10b      	bne.n	800ab0a <OnJoinRequest+0x82>
          APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = RE-TRYING OTAA JOIN\r\n");
 800aaf2:	4b0d      	ldr	r3, [pc, #52]	; (800ab28 <OnJoinRequest+0xa0>)
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	2100      	movs	r1, #0
 800aaf8:	2002      	movs	r0, #2
 800aafa:	f012 fdcb 	bl	801d694 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 800aafe:	4b0b      	ldr	r3, [pc, #44]	; (800ab2c <OnJoinRequest+0xa4>)
 800ab00:	781b      	ldrb	r3, [r3, #0]
 800ab02:	2101      	movs	r1, #1
 800ab04:	4618      	mov	r0, r3
 800ab06:	f002 f895 	bl	800cc34 <LmHandlerJoin>
}
 800ab0a:	bf00      	nop
 800ab0c:	3708      	adds	r7, #8
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}
 800ab12:	bf00      	nop
 800ab14:	20000540 	.word	0x20000540
 800ab18:	0801df98 	.word	0x0801df98
 800ab1c:	0801dfb0 	.word	0x0801dfb0
 800ab20:	0801dfd0 	.word	0x0801dfd0
 800ab24:	0801dff0 	.word	0x0801dff0
 800ab28:	0801e00c 	.word	0x0801e00c
 800ab2c:	20000020 	.word	0x20000020

0800ab30 <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800ab30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab32:	b093      	sub	sp, #76	; 0x4c
 800ab34:	af0c      	add	r7, sp, #48	; 0x30
 800ab36:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800ab38:	697b      	ldr	r3, [r7, #20]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d056      	beq.n	800abec <OnBeaconStatusChange+0xbc>
  {
    switch (params->State)
 800ab3e:	697b      	ldr	r3, [r7, #20]
 800ab40:	785b      	ldrb	r3, [r3, #1]
 800ab42:	2b02      	cmp	r3, #2
 800ab44:	d008      	beq.n	800ab58 <OnBeaconStatusChange+0x28>
 800ab46:	2b03      	cmp	r3, #3
 800ab48:	d049      	beq.n	800abde <OnBeaconStatusChange+0xae>
    {
      default:
      case LORAMAC_HANDLER_BEACON_LOST:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800ab4a:	4b2a      	ldr	r3, [pc, #168]	; (800abf4 <OnBeaconStatusChange+0xc4>)
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	2100      	movs	r1, #0
 800ab50:	2002      	movs	r0, #2
 800ab52:	f012 fd9f 	bl	801d694 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800ab56:	e049      	b.n	800abec <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_RX:
      {
        APP_LOG(TS_OFF, VLEVEL_M,
 800ab58:	697b      	ldr	r3, [r7, #20]
 800ab5a:	7c1b      	ldrb	r3, [r3, #16]
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	697b      	ldr	r3, [r7, #20]
 800ab60:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800ab64:	461c      	mov	r4, r3
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800ab6c:	461d      	mov	r5, r3
 800ab6e:	697b      	ldr	r3, [r7, #20]
 800ab70:	68db      	ldr	r3, [r3, #12]
 800ab72:	697a      	ldr	r2, [r7, #20]
 800ab74:	6852      	ldr	r2, [r2, #4]
 800ab76:	6979      	ldr	r1, [r7, #20]
 800ab78:	7d89      	ldrb	r1, [r1, #22]
 800ab7a:	460e      	mov	r6, r1
 800ab7c:	6979      	ldr	r1, [r7, #20]
 800ab7e:	7dc9      	ldrb	r1, [r1, #23]
 800ab80:	6139      	str	r1, [r7, #16]
 800ab82:	6979      	ldr	r1, [r7, #20]
 800ab84:	7e09      	ldrb	r1, [r1, #24]
 800ab86:	60f9      	str	r1, [r7, #12]
 800ab88:	6979      	ldr	r1, [r7, #20]
 800ab8a:	7e49      	ldrb	r1, [r1, #25]
 800ab8c:	60b9      	str	r1, [r7, #8]
 800ab8e:	6979      	ldr	r1, [r7, #20]
 800ab90:	7e89      	ldrb	r1, [r1, #26]
 800ab92:	6079      	str	r1, [r7, #4]
 800ab94:	6979      	ldr	r1, [r7, #20]
 800ab96:	7ec9      	ldrb	r1, [r1, #27]
 800ab98:	6039      	str	r1, [r7, #0]
 800ab9a:	6979      	ldr	r1, [r7, #20]
 800ab9c:	7f09      	ldrb	r1, [r1, #28]
 800ab9e:	910b      	str	r1, [sp, #44]	; 0x2c
 800aba0:	f8d7 c000 	ldr.w	ip, [r7]
 800aba4:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800aba8:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800abac:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800abb0:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800abb4:	f8cd c020 	str.w	ip, [sp, #32]
 800abb8:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800abbc:	f8cd c01c 	str.w	ip, [sp, #28]
 800abc0:	6939      	ldr	r1, [r7, #16]
 800abc2:	9106      	str	r1, [sp, #24]
 800abc4:	9605      	str	r6, [sp, #20]
 800abc6:	9204      	str	r2, [sp, #16]
 800abc8:	9303      	str	r3, [sp, #12]
 800abca:	9502      	str	r5, [sp, #8]
 800abcc:	9401      	str	r4, [sp, #4]
 800abce:	9000      	str	r0, [sp, #0]
 800abd0:	4b09      	ldr	r3, [pc, #36]	; (800abf8 <OnBeaconStatusChange+0xc8>)
 800abd2:	2200      	movs	r2, #0
 800abd4:	2100      	movs	r1, #0
 800abd6:	2002      	movs	r0, #2
 800abd8:	f012 fd5c 	bl	801d694 <UTIL_ADV_TRACE_COND_FSend>
                params->Info.Datarate, params->Info.Rssi, params->Info.Snr, params->Info.Frequency,
                params->Info.Time.Seconds, params->Info.GwSpecific.InfoDesc,
                params->Info.GwSpecific.Info[0], params->Info.GwSpecific.Info[1],
                params->Info.GwSpecific.Info[2], params->Info.GwSpecific.Info[3],
                params->Info.GwSpecific.Info[4], params->Info.GwSpecific.Info[5]);
        break;
 800abdc:	e006      	b.n	800abec <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800abde:	4b07      	ldr	r3, [pc, #28]	; (800abfc <OnBeaconStatusChange+0xcc>)
 800abe0:	2200      	movs	r2, #0
 800abe2:	2100      	movs	r1, #0
 800abe4:	2002      	movs	r0, #2
 800abe6:	f012 fd55 	bl	801d694 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800abea:	bf00      	nop
      }
    }
  }
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800abec:	bf00      	nop
 800abee:	371c      	adds	r7, #28
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abf4:	0801e030 	.word	0x0801e030
 800abf8:	0801e048 	.word	0x0801e048
 800abfc:	0801e0bc 	.word	0x0801e0bc

0800ac00 <OnSysTimeUpdate>:

static void OnSysTimeUpdate(void)
{
 800ac00:	b480      	push	{r7}
 800ac02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 800ac04:	bf00      	nop
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bc80      	pop	{r7}
 800ac0a:	4770      	bx	lr

0800ac0c <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b084      	sub	sp, #16
 800ac10:	af02      	add	r7, sp, #8
 800ac12:	4603      	mov	r3, r0
 800ac14:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800ac16:	79fb      	ldrb	r3, [r7, #7]
 800ac18:	4a06      	ldr	r2, [pc, #24]	; (800ac34 <OnClassChange+0x28>)
 800ac1a:	5cd3      	ldrb	r3, [r2, r3]
 800ac1c:	9300      	str	r3, [sp, #0]
 800ac1e:	4b06      	ldr	r3, [pc, #24]	; (800ac38 <OnClassChange+0x2c>)
 800ac20:	2200      	movs	r2, #0
 800ac22:	2100      	movs	r1, #0
 800ac24:	2002      	movs	r0, #2
 800ac26:	f012 fd35 	bl	801d694 <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END OnClassChange_1 */
}
 800ac2a:	bf00      	nop
 800ac2c:	3708      	adds	r7, #8
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}
 800ac32:	bf00      	nop
 800ac34:	0801e0f8 	.word	0x0801e0f8
 800ac38:	0801e0dc 	.word	0x0801e0dc

0800ac3c <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800ac40:	2100      	movs	r1, #0
 800ac42:	2001      	movs	r0, #1
 800ac44:	f012 f9f6 	bl	801d034 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800ac48:	bf00      	nop
 800ac4a:	bd80      	pop	{r7, pc}

0800ac4c <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b082      	sub	sp, #8
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800ac54:	4a0d      	ldr	r2, [pc, #52]	; (800ac8c <OnTxPeriodicityChanged+0x40>)
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800ac5a:	4b0c      	ldr	r3, [pc, #48]	; (800ac8c <OnTxPeriodicityChanged+0x40>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d103      	bne.n	800ac6a <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800ac62:	4b0a      	ldr	r3, [pc, #40]	; (800ac8c <OnTxPeriodicityChanged+0x40>)
 800ac64:	f242 7210 	movw	r2, #10000	; 0x2710
 800ac68:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800ac6a:	4809      	ldr	r0, [pc, #36]	; (800ac90 <OnTxPeriodicityChanged+0x44>)
 800ac6c:	f012 fb08 	bl	801d280 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800ac70:	4b06      	ldr	r3, [pc, #24]	; (800ac8c <OnTxPeriodicityChanged+0x40>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	4619      	mov	r1, r3
 800ac76:	4806      	ldr	r0, [pc, #24]	; (800ac90 <OnTxPeriodicityChanged+0x44>)
 800ac78:	f012 fb72 	bl	801d360 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800ac7c:	4804      	ldr	r0, [pc, #16]	; (800ac90 <OnTxPeriodicityChanged+0x44>)
 800ac7e:	f012 fa91 	bl	801d1a4 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800ac82:	bf00      	nop
 800ac84:	3708      	adds	r7, #8
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}
 800ac8a:	bf00      	nop
 800ac8c:	20000088 	.word	0x20000088
 800ac90:	200003ec 	.word	0x200003ec

0800ac94 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b083      	sub	sp, #12
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800ac9e:	4a04      	ldr	r2, [pc, #16]	; (800acb0 <OnTxFrameCtrlChanged+0x1c>)
 800aca0:	79fb      	ldrb	r3, [r7, #7]
 800aca2:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800aca4:	bf00      	nop
 800aca6:	370c      	adds	r7, #12
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bc80      	pop	{r7}
 800acac:	4770      	bx	lr
 800acae:	bf00      	nop
 800acb0:	20000070 	.word	0x20000070

0800acb4 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800acb4:	b480      	push	{r7}
 800acb6:	b083      	sub	sp, #12
 800acb8:	af00      	add	r7, sp, #0
 800acba:	4603      	mov	r3, r0
 800acbc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800acbe:	4a04      	ldr	r2, [pc, #16]	; (800acd0 <OnPingSlotPeriodicityChanged+0x1c>)
 800acc0:	79fb      	ldrb	r3, [r7, #7]
 800acc2:	7413      	strb	r3, [r2, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800acc4:	bf00      	nop
 800acc6:	370c      	adds	r7, #12
 800acc8:	46bd      	mov	sp, r7
 800acca:	bc80      	pop	{r7}
 800accc:	4770      	bx	lr
 800acce:	bf00      	nop
 800acd0:	20000070 	.word	0x20000070

0800acd4 <OnSystemReset>:

static void OnSystemReset(void)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800acd8:	f002 fda5 	bl	800d826 <LmHandlerHalt>
 800acdc:	4603      	mov	r3, r0
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d106      	bne.n	800acf0 <OnSystemReset+0x1c>
 800ace2:	f002 f849 	bl	800cd78 <LmHandlerJoinStatus>
 800ace6:	4603      	mov	r3, r0
 800ace8:	2b01      	cmp	r3, #1
 800acea:	d101      	bne.n	800acf0 <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800acec:	f7ff fb10 	bl	800a310 <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800acf0:	bf00      	nop
 800acf2:	bd80      	pop	{r7, pc}

0800acf4 <StopJoin>:

static void StopJoin(void)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800acf8:	4817      	ldr	r0, [pc, #92]	; (800ad58 <StopJoin+0x64>)
 800acfa:	f012 fac1 	bl	801d280 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800acfe:	f002 fd85 	bl	800d80c <LmHandlerStop>
 800ad02:	4603      	mov	r3, r0
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d006      	beq.n	800ad16 <StopJoin+0x22>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800ad08:	4b14      	ldr	r3, [pc, #80]	; (800ad5c <StopJoin+0x68>)
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	2100      	movs	r1, #0
 800ad0e:	2002      	movs	r0, #2
 800ad10:	f012 fcc0 	bl	801d694 <UTIL_ADV_TRACE_COND_FSend>
 800ad14:	e01a      	b.n	800ad4c <StopJoin+0x58>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800ad16:	4b12      	ldr	r3, [pc, #72]	; (800ad60 <StopJoin+0x6c>)
 800ad18:	2200      	movs	r2, #0
 800ad1a:	2100      	movs	r1, #0
 800ad1c:	2002      	movs	r0, #2
 800ad1e:	f012 fcb9 	bl	801d694 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800ad22:	4b10      	ldr	r3, [pc, #64]	; (800ad64 <StopJoin+0x70>)
 800ad24:	2201      	movs	r2, #1
 800ad26:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800ad28:	4b0f      	ldr	r3, [pc, #60]	; (800ad68 <StopJoin+0x74>)
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	2100      	movs	r1, #0
 800ad2e:	2002      	movs	r0, #2
 800ad30:	f012 fcb0 	bl	801d694 <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 800ad34:	480d      	ldr	r0, [pc, #52]	; (800ad6c <StopJoin+0x78>)
 800ad36:	f001 fe25 	bl	800c984 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800ad3a:	4b0a      	ldr	r3, [pc, #40]	; (800ad64 <StopJoin+0x70>)
 800ad3c:	781b      	ldrb	r3, [r3, #0]
 800ad3e:	2101      	movs	r1, #1
 800ad40:	4618      	mov	r0, r3
 800ad42:	f001 ff77 	bl	800cc34 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800ad46:	4804      	ldr	r0, [pc, #16]	; (800ad58 <StopJoin+0x64>)
 800ad48:	f012 fa2c 	bl	801d1a4 <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800ad4c:	4808      	ldr	r0, [pc, #32]	; (800ad70 <StopJoin+0x7c>)
 800ad4e:	f012 fa29 	bl	801d1a4 <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800ad52:	bf00      	nop
 800ad54:	bd80      	pop	{r7, pc}
 800ad56:	bf00      	nop
 800ad58:	200003ec 	.word	0x200003ec
 800ad5c:	0801e0fc 	.word	0x0801e0fc
 800ad60:	0801e11c 	.word	0x0801e11c
 800ad64:	20000020 	.word	0x20000020
 800ad68:	0801e130 	.word	0x0801e130
 800ad6c:	20000070 	.word	0x20000070
 800ad70:	20000404 	.word	0x20000404

0800ad74 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b082      	sub	sp, #8
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800ad7c:	4b05      	ldr	r3, [pc, #20]	; (800ad94 <OnStopJoinTimerEvent+0x20>)
 800ad7e:	781b      	ldrb	r3, [r3, #0]
 800ad80:	2b02      	cmp	r3, #2
 800ad82:	d103      	bne.n	800ad8c <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800ad84:	2100      	movs	r1, #0
 800ad86:	2008      	movs	r0, #8
 800ad88:	f012 f954 	bl	801d034 <UTIL_SEQ_SetTask>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800ad8c:	bf00      	nop
 800ad8e:	3708      	adds	r7, #8
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}
 800ad94:	20000020 	.word	0x20000020

0800ad98 <StoreContext>:

static void StoreContext(void)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b082      	sub	sp, #8
 800ad9c:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800ad9e:	23ff      	movs	r3, #255	; 0xff
 800ada0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800ada2:	f002 fd75 	bl	800d890 <LmHandlerNvmDataStore>
 800ada6:	4603      	mov	r3, r0
 800ada8:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800adaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800adae:	f113 0f08 	cmn.w	r3, #8
 800adb2:	d106      	bne.n	800adc2 <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800adb4:	4b0a      	ldr	r3, [pc, #40]	; (800ade0 <StoreContext+0x48>)
 800adb6:	2200      	movs	r2, #0
 800adb8:	2100      	movs	r1, #0
 800adba:	2002      	movs	r0, #2
 800adbc:	f012 fc6a 	bl	801d694 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800adc0:	e00a      	b.n	800add8 <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 800adc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800adc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800adca:	d105      	bne.n	800add8 <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800adcc:	4b05      	ldr	r3, [pc, #20]	; (800ade4 <StoreContext+0x4c>)
 800adce:	2200      	movs	r2, #0
 800add0:	2100      	movs	r1, #0
 800add2:	2002      	movs	r0, #2
 800add4:	f012 fc5e 	bl	801d694 <UTIL_ADV_TRACE_COND_FSend>
}
 800add8:	bf00      	nop
 800adda:	3708      	adds	r7, #8
 800addc:	46bd      	mov	sp, r7
 800adde:	bd80      	pop	{r7, pc}
 800ade0:	0801e150 	.word	0x0801e150
 800ade4:	0801e168 	.word	0x0801e168

0800ade8 <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b082      	sub	sp, #8
 800adec:	af00      	add	r7, sp, #0
 800adee:	4603      	mov	r3, r0
 800adf0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800adf2:	79fb      	ldrb	r3, [r7, #7]
 800adf4:	2b01      	cmp	r3, #1
 800adf6:	d106      	bne.n	800ae06 <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800adf8:	4b08      	ldr	r3, [pc, #32]	; (800ae1c <OnNvmDataChange+0x34>)
 800adfa:	2200      	movs	r2, #0
 800adfc:	2100      	movs	r1, #0
 800adfe:	2002      	movs	r0, #2
 800ae00:	f012 fc48 	bl	801d694 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800ae04:	e005      	b.n	800ae12 <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800ae06:	4b06      	ldr	r3, [pc, #24]	; (800ae20 <OnNvmDataChange+0x38>)
 800ae08:	2200      	movs	r2, #0
 800ae0a:	2100      	movs	r1, #0
 800ae0c:	2002      	movs	r0, #2
 800ae0e:	f012 fc41 	bl	801d694 <UTIL_ADV_TRACE_COND_FSend>
}
 800ae12:	bf00      	nop
 800ae14:	3708      	adds	r7, #8
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}
 800ae1a:	bf00      	nop
 800ae1c:	0801e180 	.word	0x0801e180
 800ae20:	0801e194 	.word	0x0801e194

0800ae24 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b082      	sub	sp, #8
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
 800ae2c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 800ae2e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ae32:	4807      	ldr	r0, [pc, #28]	; (800ae50 <OnStoreContextRequest+0x2c>)
 800ae34:	f7f6 fa24 	bl	8001280 <FLASH_IF_Erase>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d104      	bne.n	800ae48 <OnStoreContextRequest+0x24>
  {
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 800ae3e:	683a      	ldr	r2, [r7, #0]
 800ae40:	6879      	ldr	r1, [r7, #4]
 800ae42:	4803      	ldr	r0, [pc, #12]	; (800ae50 <OnStoreContextRequest+0x2c>)
 800ae44:	f7f6 f9cc 	bl	80011e0 <FLASH_IF_Write>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800ae48:	bf00      	nop
 800ae4a:	3708      	adds	r7, #8
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}
 800ae50:	0803f000 	.word	0x0803f000

0800ae54 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b082      	sub	sp, #8
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
 800ae5c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800ae5e:	683a      	ldr	r2, [r7, #0]
 800ae60:	4903      	ldr	r1, [pc, #12]	; (800ae70 <OnRestoreContextRequest+0x1c>)
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	f7f6 f9e4 	bl	8001230 <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800ae68:	bf00      	nop
 800ae6a:	3708      	adds	r7, #8
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}
 800ae70:	0803f000 	.word	0x0803f000

0800ae74 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	af00      	add	r7, sp, #0
  loraInfo.ContextManagement = 0;
 800ae78:	4b18      	ldr	r3, [pc, #96]	; (800aedc <LoraInfo_Init+0x68>)
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800ae7e:	4b17      	ldr	r3, [pc, #92]	; (800aedc <LoraInfo_Init+0x68>)
 800ae80:	2200      	movs	r2, #0
 800ae82:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800ae84:	4b15      	ldr	r3, [pc, #84]	; (800aedc <LoraInfo_Init+0x68>)
 800ae86:	2200      	movs	r2, #0
 800ae88:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800ae8a:	4b14      	ldr	r3, [pc, #80]	; (800aedc <LoraInfo_Init+0x68>)
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 800ae90:	4b12      	ldr	r3, [pc, #72]	; (800aedc <LoraInfo_Init+0x68>)
 800ae92:	685b      	ldr	r3, [r3, #4]
 800ae94:	f043 0320 	orr.w	r3, r3, #32
 800ae98:	4a10      	ldr	r2, [pc, #64]	; (800aedc <LoraInfo_Init+0x68>)
 800ae9a:	6053      	str	r3, [r2, #4]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865);
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915);
 800ae9c:	4b0f      	ldr	r3, [pc, #60]	; (800aedc <LoraInfo_Init+0x68>)
 800ae9e:	685b      	ldr	r3, [r3, #4]
 800aea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aea4:	4a0d      	ldr	r2, [pc, #52]	; (800aedc <LoraInfo_Init+0x68>)
 800aea6:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800aea8:	4b0c      	ldr	r3, [pc, #48]	; (800aedc <LoraInfo_Init+0x68>)
 800aeaa:	685b      	ldr	r3, [r3, #4]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d10c      	bne.n	800aeca <LoraInfo_Init+0x56>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800aeb0:	4b0b      	ldr	r3, [pc, #44]	; (800aee0 <LoraInfo_Init+0x6c>)
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	2100      	movs	r1, #0
 800aeb6:	2000      	movs	r0, #0
 800aeb8:	f012 fbec 	bl	801d694 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800aebc:	bf00      	nop
 800aebe:	f012 fbd7 	bl	801d670 <UTIL_ADV_TRACE_IsBufferEmpty>
 800aec2:	4603      	mov	r3, r0
 800aec4:	2b01      	cmp	r3, #1
 800aec6:	d1fa      	bne.n	800aebe <LoraInfo_Init+0x4a>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800aec8:	e7fe      	b.n	800aec8 <LoraInfo_Init+0x54>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800aeca:	4b04      	ldr	r3, [pc, #16]	; (800aedc <LoraInfo_Init+0x68>)
 800aecc:	2200      	movs	r2, #0
 800aece:	60da      	str	r2, [r3, #12]
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
#else /* CONTEXT_MANAGEMENT_ENABLED == 1 */
  loraInfo.ContextManagement = 1;
 800aed0:	4b02      	ldr	r3, [pc, #8]	; (800aedc <LoraInfo_Init+0x68>)
 800aed2:	2201      	movs	r2, #1
 800aed4:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800aed6:	bf00      	nop
 800aed8:	bd80      	pop	{r7, pc}
 800aeda:	bf00      	nop
 800aedc:	20000558 	.word	0x20000558
 800aee0:	0801e1a8 	.word	0x0801e1a8

0800aee4 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800aee4:	b480      	push	{r7}
 800aee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800aee8:	4b02      	ldr	r3, [pc, #8]	; (800aef4 <LoraInfo_GetPtr+0x10>)
}
 800aeea:	4618      	mov	r0, r3
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bc80      	pop	{r7}
 800aef0:	4770      	bx	lr
 800aef2:	bf00      	nop
 800aef4:	20000558 	.word	0x20000558

0800aef8 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800aefc:	f7f7 feb4 	bl	8002c68 <BSP_RADIO_Init>
 800af00:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800af02:	4618      	mov	r0, r3
 800af04:	bd80      	pop	{r7, pc}

0800af06 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800af06:	b580      	push	{r7, lr}
 800af08:	b082      	sub	sp, #8
 800af0a:	af00      	add	r7, sp, #0
 800af0c:	4603      	mov	r3, r0
 800af0e:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800af10:	79fb      	ldrb	r3, [r7, #7]
 800af12:	4618      	mov	r0, r3
 800af14:	f7f7 feda 	bl	8002ccc <BSP_RADIO_ConfigRFSwitch>
 800af18:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3708      	adds	r7, #8
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}

0800af22 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800af22:	b580      	push	{r7, lr}
 800af24:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800af26:	f7f7 ff1f 	bl	8002d68 <BSP_RADIO_GetTxConfig>
 800af2a:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	bd80      	pop	{r7, pc}

0800af30 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800af34:	f7f7 ff1f 	bl	8002d76 <BSP_RADIO_IsTCXO>
 800af38:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	bd80      	pop	{r7, pc}

0800af3e <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800af3e:	b580      	push	{r7, lr}
 800af40:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800af42:	f7f7 ff1f 	bl	8002d84 <BSP_RADIO_IsDCDC>
 800af46:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800af48:	4618      	mov	r0, r3
 800af4a:	bd80      	pop	{r7, pc}

0800af4c <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b082      	sub	sp, #8
 800af50:	af00      	add	r7, sp, #0
 800af52:	4603      	mov	r3, r0
 800af54:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800af56:	79fb      	ldrb	r3, [r7, #7]
 800af58:	4618      	mov	r0, r3
 800af5a:	f7f7 ff1a 	bl	8002d92 <BSP_RADIO_GetRFOMaxPowerConfig>
 800af5e:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800af60:	4618      	mov	r0, r3
 800af62:	3708      	adds	r7, #8
 800af64:	46bd      	mov	sp, r7
 800af66:	bd80      	pop	{r7, pc}

0800af68 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b082      	sub	sp, #8
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	33f1      	adds	r3, #241	; 0xf1
 800af74:	2210      	movs	r2, #16
 800af76:	2100      	movs	r1, #0
 800af78:	4618      	mov	r0, r3
 800af7a:	f00e f821 	bl	8018fc0 <memset1>
    ctx->M_n = 0;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2200      	movs	r2, #0
 800af82:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	22f0      	movs	r2, #240	; 0xf0
 800af8a:	2100      	movs	r1, #0
 800af8c:	4618      	mov	r0, r3
 800af8e:	f00e f817 	bl	8018fc0 <memset1>
}
 800af92:	bf00      	nop
 800af94:	3708      	adds	r7, #8
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}

0800af9a <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800af9a:	b580      	push	{r7, lr}
 800af9c:	b082      	sub	sp, #8
 800af9e:	af00      	add	r7, sp, #0
 800afa0:	6078      	str	r0, [r7, #4]
 800afa2:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	461a      	mov	r2, r3
 800afa8:	2110      	movs	r1, #16
 800afaa:	6838      	ldr	r0, [r7, #0]
 800afac:	f000 fe5c 	bl	800bc68 <lorawan_aes_set_key>
}
 800afb0:	bf00      	nop
 800afb2:	3708      	adds	r7, #8
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}

0800afb8 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b08c      	sub	sp, #48	; 0x30
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	60f8      	str	r0, [r7, #12]
 800afc0:	60b9      	str	r1, [r7, #8]
 800afc2:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800afca:	2b00      	cmp	r3, #0
 800afcc:	f000 80a1 	beq.w	800b112 <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800afd6:	f1c3 0310 	rsb	r3, r3, #16
 800afda:	687a      	ldr	r2, [r7, #4]
 800afdc:	4293      	cmp	r3, r2
 800afde:	bf28      	it	cs
 800afe0:	4613      	movcs	r3, r2
 800afe2:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	f203 1201 	addw	r2, r3, #257	; 0x101
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800aff0:	4413      	add	r3, r2
 800aff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aff4:	b292      	uxth	r2, r2
 800aff6:	68b9      	ldr	r1, [r7, #8]
 800aff8:	4618      	mov	r0, r3
 800affa:	f00d ffa6 	bl	8018f4a <memcpy1>
        ctx->M_n += mlen;
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800b004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b006:	441a      	add	r2, r3
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b014:	2b0f      	cmp	r3, #15
 800b016:	f240 808d 	bls.w	800b134 <AES_CMAC_Update+0x17c>
 800b01a:	687a      	ldr	r2, [r7, #4]
 800b01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b01e:	429a      	cmp	r2, r3
 800b020:	f000 8088 	beq.w	800b134 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800b024:	2300      	movs	r3, #0
 800b026:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b028:	e015      	b.n	800b056 <AES_CMAC_Update+0x9e>
 800b02a:	68fa      	ldr	r2, [r7, #12]
 800b02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b02e:	4413      	add	r3, r2
 800b030:	33f1      	adds	r3, #241	; 0xf1
 800b032:	781a      	ldrb	r2, [r3, #0]
 800b034:	68f9      	ldr	r1, [r7, #12]
 800b036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b038:	440b      	add	r3, r1
 800b03a:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b03e:	781b      	ldrb	r3, [r3, #0]
 800b040:	4053      	eors	r3, r2
 800b042:	b2d9      	uxtb	r1, r3
 800b044:	68fa      	ldr	r2, [r7, #12]
 800b046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b048:	4413      	add	r3, r2
 800b04a:	33f1      	adds	r3, #241	; 0xf1
 800b04c:	460a      	mov	r2, r1
 800b04e:	701a      	strb	r2, [r3, #0]
 800b050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b052:	3301      	adds	r3, #1
 800b054:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b058:	2b0f      	cmp	r3, #15
 800b05a:	dde6      	ble.n	800b02a <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800b062:	f107 0314 	add.w	r3, r7, #20
 800b066:	2210      	movs	r2, #16
 800b068:	4618      	mov	r0, r3
 800b06a:	f00d ff6e 	bl	8018f4a <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800b06e:	68fa      	ldr	r2, [r7, #12]
 800b070:	f107 0114 	add.w	r1, r7, #20
 800b074:	f107 0314 	add.w	r3, r7, #20
 800b078:	4618      	mov	r0, r3
 800b07a:	f000 fed3 	bl	800be24 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	33f1      	adds	r3, #241	; 0xf1
 800b082:	f107 0114 	add.w	r1, r7, #20
 800b086:	2210      	movs	r2, #16
 800b088:	4618      	mov	r0, r3
 800b08a:	f00d ff5e 	bl	8018f4a <memcpy1>

        data += mlen;
 800b08e:	68ba      	ldr	r2, [r7, #8]
 800b090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b092:	4413      	add	r3, r2
 800b094:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800b096:	687a      	ldr	r2, [r7, #4]
 800b098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b09a:	1ad3      	subs	r3, r2, r3
 800b09c:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800b09e:	e038      	b.n	800b112 <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	62bb      	str	r3, [r7, #40]	; 0x28
 800b0a4:	e013      	b.n	800b0ce <AES_CMAC_Update+0x116>
 800b0a6:	68fa      	ldr	r2, [r7, #12]
 800b0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0aa:	4413      	add	r3, r2
 800b0ac:	33f1      	adds	r3, #241	; 0xf1
 800b0ae:	781a      	ldrb	r2, [r3, #0]
 800b0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0b2:	68b9      	ldr	r1, [r7, #8]
 800b0b4:	440b      	add	r3, r1
 800b0b6:	781b      	ldrb	r3, [r3, #0]
 800b0b8:	4053      	eors	r3, r2
 800b0ba:	b2d9      	uxtb	r1, r3
 800b0bc:	68fa      	ldr	r2, [r7, #12]
 800b0be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0c0:	4413      	add	r3, r2
 800b0c2:	33f1      	adds	r3, #241	; 0xf1
 800b0c4:	460a      	mov	r2, r1
 800b0c6:	701a      	strb	r2, [r3, #0]
 800b0c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ca:	3301      	adds	r3, #1
 800b0cc:	62bb      	str	r3, [r7, #40]	; 0x28
 800b0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0d0:	2b0f      	cmp	r3, #15
 800b0d2:	dde8      	ble.n	800b0a6 <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800b0da:	f107 0314 	add.w	r3, r7, #20
 800b0de:	2210      	movs	r2, #16
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f00d ff32 	bl	8018f4a <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800b0e6:	68fa      	ldr	r2, [r7, #12]
 800b0e8:	f107 0114 	add.w	r1, r7, #20
 800b0ec:	f107 0314 	add.w	r3, r7, #20
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f000 fe97 	bl	800be24 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	33f1      	adds	r3, #241	; 0xf1
 800b0fa:	f107 0114 	add.w	r1, r7, #20
 800b0fe:	2210      	movs	r2, #16
 800b100:	4618      	mov	r0, r3
 800b102:	f00d ff22 	bl	8018f4a <memcpy1>

        data += 16;
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	3310      	adds	r3, #16
 800b10a:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	3b10      	subs	r3, #16
 800b110:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2b10      	cmp	r3, #16
 800b116:	d8c3      	bhi.n	800b0a0 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b11e:	687a      	ldr	r2, [r7, #4]
 800b120:	b292      	uxth	r2, r2
 800b122:	68b9      	ldr	r1, [r7, #8]
 800b124:	4618      	mov	r0, r3
 800b126:	f00d ff10 	bl	8018f4a <memcpy1>
    ctx->M_n = len;
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	687a      	ldr	r2, [r7, #4]
 800b12e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800b132:	e000      	b.n	800b136 <AES_CMAC_Update+0x17e>
            return;
 800b134:	bf00      	nop
}
 800b136:	3730      	adds	r7, #48	; 0x30
 800b138:	46bd      	mov	sp, r7
 800b13a:	bd80      	pop	{r7, pc}

0800b13c <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b092      	sub	sp, #72	; 0x48
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
 800b144:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800b146:	f107 031c 	add.w	r3, r7, #28
 800b14a:	2210      	movs	r2, #16
 800b14c:	2100      	movs	r1, #0
 800b14e:	4618      	mov	r0, r3
 800b150:	f00d ff36 	bl	8018fc0 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800b154:	683a      	ldr	r2, [r7, #0]
 800b156:	f107 011c 	add.w	r1, r7, #28
 800b15a:	f107 031c 	add.w	r3, r7, #28
 800b15e:	4618      	mov	r0, r3
 800b160:	f000 fe60 	bl	800be24 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800b164:	7f3b      	ldrb	r3, [r7, #28]
 800b166:	b25b      	sxtb	r3, r3
 800b168:	2b00      	cmp	r3, #0
 800b16a:	da30      	bge.n	800b1ce <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800b16c:	2300      	movs	r3, #0
 800b16e:	647b      	str	r3, [r7, #68]	; 0x44
 800b170:	e01b      	b.n	800b1aa <AES_CMAC_Final+0x6e>
 800b172:	f107 021c 	add.w	r2, r7, #28
 800b176:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b178:	4413      	add	r3, r2
 800b17a:	781b      	ldrb	r3, [r3, #0]
 800b17c:	005b      	lsls	r3, r3, #1
 800b17e:	b25a      	sxtb	r2, r3
 800b180:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b182:	3301      	adds	r3, #1
 800b184:	3348      	adds	r3, #72	; 0x48
 800b186:	443b      	add	r3, r7
 800b188:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800b18c:	09db      	lsrs	r3, r3, #7
 800b18e:	b2db      	uxtb	r3, r3
 800b190:	b25b      	sxtb	r3, r3
 800b192:	4313      	orrs	r3, r2
 800b194:	b25b      	sxtb	r3, r3
 800b196:	b2d9      	uxtb	r1, r3
 800b198:	f107 021c 	add.w	r2, r7, #28
 800b19c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b19e:	4413      	add	r3, r2
 800b1a0:	460a      	mov	r2, r1
 800b1a2:	701a      	strb	r2, [r3, #0]
 800b1a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1a6:	3301      	adds	r3, #1
 800b1a8:	647b      	str	r3, [r7, #68]	; 0x44
 800b1aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1ac:	2b0e      	cmp	r3, #14
 800b1ae:	dde0      	ble.n	800b172 <AES_CMAC_Final+0x36>
 800b1b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b1b4:	005b      	lsls	r3, r3, #1
 800b1b6:	b2db      	uxtb	r3, r3
 800b1b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800b1bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b1c0:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800b1c4:	43db      	mvns	r3, r3
 800b1c6:	b2db      	uxtb	r3, r3
 800b1c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b1cc:	e027      	b.n	800b21e <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	643b      	str	r3, [r7, #64]	; 0x40
 800b1d2:	e01b      	b.n	800b20c <AES_CMAC_Final+0xd0>
 800b1d4:	f107 021c 	add.w	r2, r7, #28
 800b1d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1da:	4413      	add	r3, r2
 800b1dc:	781b      	ldrb	r3, [r3, #0]
 800b1de:	005b      	lsls	r3, r3, #1
 800b1e0:	b25a      	sxtb	r2, r3
 800b1e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1e4:	3301      	adds	r3, #1
 800b1e6:	3348      	adds	r3, #72	; 0x48
 800b1e8:	443b      	add	r3, r7
 800b1ea:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800b1ee:	09db      	lsrs	r3, r3, #7
 800b1f0:	b2db      	uxtb	r3, r3
 800b1f2:	b25b      	sxtb	r3, r3
 800b1f4:	4313      	orrs	r3, r2
 800b1f6:	b25b      	sxtb	r3, r3
 800b1f8:	b2d9      	uxtb	r1, r3
 800b1fa:	f107 021c 	add.w	r2, r7, #28
 800b1fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b200:	4413      	add	r3, r2
 800b202:	460a      	mov	r2, r1
 800b204:	701a      	strb	r2, [r3, #0]
 800b206:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b208:	3301      	adds	r3, #1
 800b20a:	643b      	str	r3, [r7, #64]	; 0x40
 800b20c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b20e:	2b0e      	cmp	r3, #14
 800b210:	dde0      	ble.n	800b1d4 <AES_CMAC_Final+0x98>
 800b212:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b216:	005b      	lsls	r3, r3, #1
 800b218:	b2db      	uxtb	r3, r3
 800b21a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b224:	2b10      	cmp	r3, #16
 800b226:	d11d      	bne.n	800b264 <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800b228:	2300      	movs	r3, #0
 800b22a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b22c:	e016      	b.n	800b25c <AES_CMAC_Final+0x120>
 800b22e:	683a      	ldr	r2, [r7, #0]
 800b230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b232:	4413      	add	r3, r2
 800b234:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b238:	781a      	ldrb	r2, [r3, #0]
 800b23a:	f107 011c 	add.w	r1, r7, #28
 800b23e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b240:	440b      	add	r3, r1
 800b242:	781b      	ldrb	r3, [r3, #0]
 800b244:	4053      	eors	r3, r2
 800b246:	b2d9      	uxtb	r1, r3
 800b248:	683a      	ldr	r2, [r7, #0]
 800b24a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b24c:	4413      	add	r3, r2
 800b24e:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b252:	460a      	mov	r2, r1
 800b254:	701a      	strb	r2, [r3, #0]
 800b256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b258:	3301      	adds	r3, #1
 800b25a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b25c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b25e:	2b0f      	cmp	r3, #15
 800b260:	dde5      	ble.n	800b22e <AES_CMAC_Final+0xf2>
 800b262:	e096      	b.n	800b392 <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800b264:	7f3b      	ldrb	r3, [r7, #28]
 800b266:	b25b      	sxtb	r3, r3
 800b268:	2b00      	cmp	r3, #0
 800b26a:	da30      	bge.n	800b2ce <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800b26c:	2300      	movs	r3, #0
 800b26e:	63bb      	str	r3, [r7, #56]	; 0x38
 800b270:	e01b      	b.n	800b2aa <AES_CMAC_Final+0x16e>
 800b272:	f107 021c 	add.w	r2, r7, #28
 800b276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b278:	4413      	add	r3, r2
 800b27a:	781b      	ldrb	r3, [r3, #0]
 800b27c:	005b      	lsls	r3, r3, #1
 800b27e:	b25a      	sxtb	r2, r3
 800b280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b282:	3301      	adds	r3, #1
 800b284:	3348      	adds	r3, #72	; 0x48
 800b286:	443b      	add	r3, r7
 800b288:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800b28c:	09db      	lsrs	r3, r3, #7
 800b28e:	b2db      	uxtb	r3, r3
 800b290:	b25b      	sxtb	r3, r3
 800b292:	4313      	orrs	r3, r2
 800b294:	b25b      	sxtb	r3, r3
 800b296:	b2d9      	uxtb	r1, r3
 800b298:	f107 021c 	add.w	r2, r7, #28
 800b29c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b29e:	4413      	add	r3, r2
 800b2a0:	460a      	mov	r2, r1
 800b2a2:	701a      	strb	r2, [r3, #0]
 800b2a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2a6:	3301      	adds	r3, #1
 800b2a8:	63bb      	str	r3, [r7, #56]	; 0x38
 800b2aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ac:	2b0e      	cmp	r3, #14
 800b2ae:	dde0      	ble.n	800b272 <AES_CMAC_Final+0x136>
 800b2b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b2b4:	005b      	lsls	r3, r3, #1
 800b2b6:	b2db      	uxtb	r3, r3
 800b2b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800b2bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b2c0:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800b2c4:	43db      	mvns	r3, r3
 800b2c6:	b2db      	uxtb	r3, r3
 800b2c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b2cc:	e027      	b.n	800b31e <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	637b      	str	r3, [r7, #52]	; 0x34
 800b2d2:	e01b      	b.n	800b30c <AES_CMAC_Final+0x1d0>
 800b2d4:	f107 021c 	add.w	r2, r7, #28
 800b2d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2da:	4413      	add	r3, r2
 800b2dc:	781b      	ldrb	r3, [r3, #0]
 800b2de:	005b      	lsls	r3, r3, #1
 800b2e0:	b25a      	sxtb	r2, r3
 800b2e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2e4:	3301      	adds	r3, #1
 800b2e6:	3348      	adds	r3, #72	; 0x48
 800b2e8:	443b      	add	r3, r7
 800b2ea:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800b2ee:	09db      	lsrs	r3, r3, #7
 800b2f0:	b2db      	uxtb	r3, r3
 800b2f2:	b25b      	sxtb	r3, r3
 800b2f4:	4313      	orrs	r3, r2
 800b2f6:	b25b      	sxtb	r3, r3
 800b2f8:	b2d9      	uxtb	r1, r3
 800b2fa:	f107 021c 	add.w	r2, r7, #28
 800b2fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b300:	4413      	add	r3, r2
 800b302:	460a      	mov	r2, r1
 800b304:	701a      	strb	r2, [r3, #0]
 800b306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b308:	3301      	adds	r3, #1
 800b30a:	637b      	str	r3, [r7, #52]	; 0x34
 800b30c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b30e:	2b0e      	cmp	r3, #14
 800b310:	dde0      	ble.n	800b2d4 <AES_CMAC_Final+0x198>
 800b312:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b316:	005b      	lsls	r3, r3, #1
 800b318:	b2db      	uxtb	r3, r3
 800b31a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b324:	683a      	ldr	r2, [r7, #0]
 800b326:	4413      	add	r3, r2
 800b328:	2280      	movs	r2, #128	; 0x80
 800b32a:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800b32e:	e007      	b.n	800b340 <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b336:	683a      	ldr	r2, [r7, #0]
 800b338:	4413      	add	r3, r2
 800b33a:	2200      	movs	r2, #0
 800b33c:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b346:	1c5a      	adds	r2, r3, #1
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b354:	2b0f      	cmp	r3, #15
 800b356:	d9eb      	bls.n	800b330 <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800b358:	2300      	movs	r3, #0
 800b35a:	633b      	str	r3, [r7, #48]	; 0x30
 800b35c:	e016      	b.n	800b38c <AES_CMAC_Final+0x250>
 800b35e:	683a      	ldr	r2, [r7, #0]
 800b360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b362:	4413      	add	r3, r2
 800b364:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b368:	781a      	ldrb	r2, [r3, #0]
 800b36a:	f107 011c 	add.w	r1, r7, #28
 800b36e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b370:	440b      	add	r3, r1
 800b372:	781b      	ldrb	r3, [r3, #0]
 800b374:	4053      	eors	r3, r2
 800b376:	b2d9      	uxtb	r1, r3
 800b378:	683a      	ldr	r2, [r7, #0]
 800b37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b37c:	4413      	add	r3, r2
 800b37e:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b382:	460a      	mov	r2, r1
 800b384:	701a      	strb	r2, [r3, #0]
 800b386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b388:	3301      	adds	r3, #1
 800b38a:	633b      	str	r3, [r7, #48]	; 0x30
 800b38c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b38e:	2b0f      	cmp	r3, #15
 800b390:	dde5      	ble.n	800b35e <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800b392:	2300      	movs	r3, #0
 800b394:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b396:	e015      	b.n	800b3c4 <AES_CMAC_Final+0x288>
 800b398:	683a      	ldr	r2, [r7, #0]
 800b39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b39c:	4413      	add	r3, r2
 800b39e:	33f1      	adds	r3, #241	; 0xf1
 800b3a0:	781a      	ldrb	r2, [r3, #0]
 800b3a2:	6839      	ldr	r1, [r7, #0]
 800b3a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3a6:	440b      	add	r3, r1
 800b3a8:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b3ac:	781b      	ldrb	r3, [r3, #0]
 800b3ae:	4053      	eors	r3, r2
 800b3b0:	b2d9      	uxtb	r1, r3
 800b3b2:	683a      	ldr	r2, [r7, #0]
 800b3b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3b6:	4413      	add	r3, r2
 800b3b8:	33f1      	adds	r3, #241	; 0xf1
 800b3ba:	460a      	mov	r2, r1
 800b3bc:	701a      	strb	r2, [r3, #0]
 800b3be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3c0:	3301      	adds	r3, #1
 800b3c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b3c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3c6:	2b0f      	cmp	r3, #15
 800b3c8:	dde6      	ble.n	800b398 <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800b3d0:	f107 030c 	add.w	r3, r7, #12
 800b3d4:	2210      	movs	r2, #16
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	f00d fdb7 	bl	8018f4a <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800b3dc:	683a      	ldr	r2, [r7, #0]
 800b3de:	f107 030c 	add.w	r3, r7, #12
 800b3e2:	6879      	ldr	r1, [r7, #4]
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f000 fd1d 	bl	800be24 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800b3ea:	f107 031c 	add.w	r3, r7, #28
 800b3ee:	2210      	movs	r2, #16
 800b3f0:	2100      	movs	r1, #0
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f00d fde4 	bl	8018fc0 <memset1>
}
 800b3f8:	bf00      	nop
 800b3fa:	3748      	adds	r7, #72	; 0x48
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}

0800b400 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800b400:	b480      	push	{r7}
 800b402:	b083      	sub	sp, #12
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
 800b408:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	781a      	ldrb	r2, [r3, #0]
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	3301      	adds	r3, #1
 800b416:	683a      	ldr	r2, [r7, #0]
 800b418:	7852      	ldrb	r2, [r2, #1]
 800b41a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	3302      	adds	r3, #2
 800b420:	683a      	ldr	r2, [r7, #0]
 800b422:	7892      	ldrb	r2, [r2, #2]
 800b424:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	3303      	adds	r3, #3
 800b42a:	683a      	ldr	r2, [r7, #0]
 800b42c:	78d2      	ldrb	r2, [r2, #3]
 800b42e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	3304      	adds	r3, #4
 800b434:	683a      	ldr	r2, [r7, #0]
 800b436:	7912      	ldrb	r2, [r2, #4]
 800b438:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	3305      	adds	r3, #5
 800b43e:	683a      	ldr	r2, [r7, #0]
 800b440:	7952      	ldrb	r2, [r2, #5]
 800b442:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	3306      	adds	r3, #6
 800b448:	683a      	ldr	r2, [r7, #0]
 800b44a:	7992      	ldrb	r2, [r2, #6]
 800b44c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	3307      	adds	r3, #7
 800b452:	683a      	ldr	r2, [r7, #0]
 800b454:	79d2      	ldrb	r2, [r2, #7]
 800b456:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	3308      	adds	r3, #8
 800b45c:	683a      	ldr	r2, [r7, #0]
 800b45e:	7a12      	ldrb	r2, [r2, #8]
 800b460:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	3309      	adds	r3, #9
 800b466:	683a      	ldr	r2, [r7, #0]
 800b468:	7a52      	ldrb	r2, [r2, #9]
 800b46a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	330a      	adds	r3, #10
 800b470:	683a      	ldr	r2, [r7, #0]
 800b472:	7a92      	ldrb	r2, [r2, #10]
 800b474:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	330b      	adds	r3, #11
 800b47a:	683a      	ldr	r2, [r7, #0]
 800b47c:	7ad2      	ldrb	r2, [r2, #11]
 800b47e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	330c      	adds	r3, #12
 800b484:	683a      	ldr	r2, [r7, #0]
 800b486:	7b12      	ldrb	r2, [r2, #12]
 800b488:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	330d      	adds	r3, #13
 800b48e:	683a      	ldr	r2, [r7, #0]
 800b490:	7b52      	ldrb	r2, [r2, #13]
 800b492:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	330e      	adds	r3, #14
 800b498:	683a      	ldr	r2, [r7, #0]
 800b49a:	7b92      	ldrb	r2, [r2, #14]
 800b49c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	330f      	adds	r3, #15
 800b4a2:	683a      	ldr	r2, [r7, #0]
 800b4a4:	7bd2      	ldrb	r2, [r2, #15]
 800b4a6:	701a      	strb	r2, [r3, #0]
#endif
}
 800b4a8:	bf00      	nop
 800b4aa:	370c      	adds	r7, #12
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	bc80      	pop	{r7}
 800b4b0:	4770      	bx	lr

0800b4b2 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800b4b2:	b480      	push	{r7}
 800b4b4:	b085      	sub	sp, #20
 800b4b6:	af00      	add	r7, sp, #0
 800b4b8:	60f8      	str	r0, [r7, #12]
 800b4ba:	60b9      	str	r1, [r7, #8]
 800b4bc:	4613      	mov	r3, r2
 800b4be:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800b4c0:	e007      	b.n	800b4d2 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800b4c2:	68ba      	ldr	r2, [r7, #8]
 800b4c4:	1c53      	adds	r3, r2, #1
 800b4c6:	60bb      	str	r3, [r7, #8]
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	1c59      	adds	r1, r3, #1
 800b4cc:	60f9      	str	r1, [r7, #12]
 800b4ce:	7812      	ldrb	r2, [r2, #0]
 800b4d0:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800b4d2:	79fb      	ldrb	r3, [r7, #7]
 800b4d4:	1e5a      	subs	r2, r3, #1
 800b4d6:	71fa      	strb	r2, [r7, #7]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d1f2      	bne.n	800b4c2 <copy_block_nn+0x10>
}
 800b4dc:	bf00      	nop
 800b4de:	bf00      	nop
 800b4e0:	3714      	adds	r7, #20
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	bc80      	pop	{r7}
 800b4e6:	4770      	bx	lr

0800b4e8 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800b4e8:	b480      	push	{r7}
 800b4ea:	b083      	sub	sp, #12
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
 800b4f0:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	781a      	ldrb	r2, [r3, #0]
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	781b      	ldrb	r3, [r3, #0]
 800b4fa:	4053      	eors	r3, r2
 800b4fc:	b2da      	uxtb	r2, r3
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	3301      	adds	r3, #1
 800b506:	7819      	ldrb	r1, [r3, #0]
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	3301      	adds	r3, #1
 800b50c:	781a      	ldrb	r2, [r3, #0]
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	3301      	adds	r3, #1
 800b512:	404a      	eors	r2, r1
 800b514:	b2d2      	uxtb	r2, r2
 800b516:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	3302      	adds	r3, #2
 800b51c:	7819      	ldrb	r1, [r3, #0]
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	3302      	adds	r3, #2
 800b522:	781a      	ldrb	r2, [r3, #0]
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	3302      	adds	r3, #2
 800b528:	404a      	eors	r2, r1
 800b52a:	b2d2      	uxtb	r2, r2
 800b52c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	3303      	adds	r3, #3
 800b532:	7819      	ldrb	r1, [r3, #0]
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	3303      	adds	r3, #3
 800b538:	781a      	ldrb	r2, [r3, #0]
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	3303      	adds	r3, #3
 800b53e:	404a      	eors	r2, r1
 800b540:	b2d2      	uxtb	r2, r2
 800b542:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	3304      	adds	r3, #4
 800b548:	7819      	ldrb	r1, [r3, #0]
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	3304      	adds	r3, #4
 800b54e:	781a      	ldrb	r2, [r3, #0]
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	3304      	adds	r3, #4
 800b554:	404a      	eors	r2, r1
 800b556:	b2d2      	uxtb	r2, r2
 800b558:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	3305      	adds	r3, #5
 800b55e:	7819      	ldrb	r1, [r3, #0]
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	3305      	adds	r3, #5
 800b564:	781a      	ldrb	r2, [r3, #0]
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	3305      	adds	r3, #5
 800b56a:	404a      	eors	r2, r1
 800b56c:	b2d2      	uxtb	r2, r2
 800b56e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	3306      	adds	r3, #6
 800b574:	7819      	ldrb	r1, [r3, #0]
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	3306      	adds	r3, #6
 800b57a:	781a      	ldrb	r2, [r3, #0]
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	3306      	adds	r3, #6
 800b580:	404a      	eors	r2, r1
 800b582:	b2d2      	uxtb	r2, r2
 800b584:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	3307      	adds	r3, #7
 800b58a:	7819      	ldrb	r1, [r3, #0]
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	3307      	adds	r3, #7
 800b590:	781a      	ldrb	r2, [r3, #0]
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	3307      	adds	r3, #7
 800b596:	404a      	eors	r2, r1
 800b598:	b2d2      	uxtb	r2, r2
 800b59a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	3308      	adds	r3, #8
 800b5a0:	7819      	ldrb	r1, [r3, #0]
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	3308      	adds	r3, #8
 800b5a6:	781a      	ldrb	r2, [r3, #0]
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	3308      	adds	r3, #8
 800b5ac:	404a      	eors	r2, r1
 800b5ae:	b2d2      	uxtb	r2, r2
 800b5b0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	3309      	adds	r3, #9
 800b5b6:	7819      	ldrb	r1, [r3, #0]
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	3309      	adds	r3, #9
 800b5bc:	781a      	ldrb	r2, [r3, #0]
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	3309      	adds	r3, #9
 800b5c2:	404a      	eors	r2, r1
 800b5c4:	b2d2      	uxtb	r2, r2
 800b5c6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	330a      	adds	r3, #10
 800b5cc:	7819      	ldrb	r1, [r3, #0]
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	330a      	adds	r3, #10
 800b5d2:	781a      	ldrb	r2, [r3, #0]
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	330a      	adds	r3, #10
 800b5d8:	404a      	eors	r2, r1
 800b5da:	b2d2      	uxtb	r2, r2
 800b5dc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	330b      	adds	r3, #11
 800b5e2:	7819      	ldrb	r1, [r3, #0]
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	330b      	adds	r3, #11
 800b5e8:	781a      	ldrb	r2, [r3, #0]
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	330b      	adds	r3, #11
 800b5ee:	404a      	eors	r2, r1
 800b5f0:	b2d2      	uxtb	r2, r2
 800b5f2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	330c      	adds	r3, #12
 800b5f8:	7819      	ldrb	r1, [r3, #0]
 800b5fa:	683b      	ldr	r3, [r7, #0]
 800b5fc:	330c      	adds	r3, #12
 800b5fe:	781a      	ldrb	r2, [r3, #0]
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	330c      	adds	r3, #12
 800b604:	404a      	eors	r2, r1
 800b606:	b2d2      	uxtb	r2, r2
 800b608:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	330d      	adds	r3, #13
 800b60e:	7819      	ldrb	r1, [r3, #0]
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	330d      	adds	r3, #13
 800b614:	781a      	ldrb	r2, [r3, #0]
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	330d      	adds	r3, #13
 800b61a:	404a      	eors	r2, r1
 800b61c:	b2d2      	uxtb	r2, r2
 800b61e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	330e      	adds	r3, #14
 800b624:	7819      	ldrb	r1, [r3, #0]
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	330e      	adds	r3, #14
 800b62a:	781a      	ldrb	r2, [r3, #0]
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	330e      	adds	r3, #14
 800b630:	404a      	eors	r2, r1
 800b632:	b2d2      	uxtb	r2, r2
 800b634:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	330f      	adds	r3, #15
 800b63a:	7819      	ldrb	r1, [r3, #0]
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	330f      	adds	r3, #15
 800b640:	781a      	ldrb	r2, [r3, #0]
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	330f      	adds	r3, #15
 800b646:	404a      	eors	r2, r1
 800b648:	b2d2      	uxtb	r2, r2
 800b64a:	701a      	strb	r2, [r3, #0]
#endif
}
 800b64c:	bf00      	nop
 800b64e:	370c      	adds	r7, #12
 800b650:	46bd      	mov	sp, r7
 800b652:	bc80      	pop	{r7}
 800b654:	4770      	bx	lr

0800b656 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800b656:	b480      	push	{r7}
 800b658:	b085      	sub	sp, #20
 800b65a:	af00      	add	r7, sp, #0
 800b65c:	60f8      	str	r0, [r7, #12]
 800b65e:	60b9      	str	r1, [r7, #8]
 800b660:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800b662:	68bb      	ldr	r3, [r7, #8]
 800b664:	781a      	ldrb	r2, [r3, #0]
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	781b      	ldrb	r3, [r3, #0]
 800b66a:	4053      	eors	r3, r2
 800b66c:	b2da      	uxtb	r2, r3
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800b672:	68bb      	ldr	r3, [r7, #8]
 800b674:	3301      	adds	r3, #1
 800b676:	7819      	ldrb	r1, [r3, #0]
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	3301      	adds	r3, #1
 800b67c:	781a      	ldrb	r2, [r3, #0]
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	3301      	adds	r3, #1
 800b682:	404a      	eors	r2, r1
 800b684:	b2d2      	uxtb	r2, r2
 800b686:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800b688:	68bb      	ldr	r3, [r7, #8]
 800b68a:	3302      	adds	r3, #2
 800b68c:	7819      	ldrb	r1, [r3, #0]
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	3302      	adds	r3, #2
 800b692:	781a      	ldrb	r2, [r3, #0]
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	3302      	adds	r3, #2
 800b698:	404a      	eors	r2, r1
 800b69a:	b2d2      	uxtb	r2, r2
 800b69c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800b69e:	68bb      	ldr	r3, [r7, #8]
 800b6a0:	3303      	adds	r3, #3
 800b6a2:	7819      	ldrb	r1, [r3, #0]
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	3303      	adds	r3, #3
 800b6a8:	781a      	ldrb	r2, [r3, #0]
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	3303      	adds	r3, #3
 800b6ae:	404a      	eors	r2, r1
 800b6b0:	b2d2      	uxtb	r2, r2
 800b6b2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	3304      	adds	r3, #4
 800b6b8:	7819      	ldrb	r1, [r3, #0]
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	3304      	adds	r3, #4
 800b6be:	781a      	ldrb	r2, [r3, #0]
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	3304      	adds	r3, #4
 800b6c4:	404a      	eors	r2, r1
 800b6c6:	b2d2      	uxtb	r2, r2
 800b6c8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800b6ca:	68bb      	ldr	r3, [r7, #8]
 800b6cc:	3305      	adds	r3, #5
 800b6ce:	7819      	ldrb	r1, [r3, #0]
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	3305      	adds	r3, #5
 800b6d4:	781a      	ldrb	r2, [r3, #0]
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	3305      	adds	r3, #5
 800b6da:	404a      	eors	r2, r1
 800b6dc:	b2d2      	uxtb	r2, r2
 800b6de:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	3306      	adds	r3, #6
 800b6e4:	7819      	ldrb	r1, [r3, #0]
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	3306      	adds	r3, #6
 800b6ea:	781a      	ldrb	r2, [r3, #0]
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	3306      	adds	r3, #6
 800b6f0:	404a      	eors	r2, r1
 800b6f2:	b2d2      	uxtb	r2, r2
 800b6f4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800b6f6:	68bb      	ldr	r3, [r7, #8]
 800b6f8:	3307      	adds	r3, #7
 800b6fa:	7819      	ldrb	r1, [r3, #0]
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	3307      	adds	r3, #7
 800b700:	781a      	ldrb	r2, [r3, #0]
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	3307      	adds	r3, #7
 800b706:	404a      	eors	r2, r1
 800b708:	b2d2      	uxtb	r2, r2
 800b70a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	3308      	adds	r3, #8
 800b710:	7819      	ldrb	r1, [r3, #0]
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	3308      	adds	r3, #8
 800b716:	781a      	ldrb	r2, [r3, #0]
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	3308      	adds	r3, #8
 800b71c:	404a      	eors	r2, r1
 800b71e:	b2d2      	uxtb	r2, r2
 800b720:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800b722:	68bb      	ldr	r3, [r7, #8]
 800b724:	3309      	adds	r3, #9
 800b726:	7819      	ldrb	r1, [r3, #0]
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	3309      	adds	r3, #9
 800b72c:	781a      	ldrb	r2, [r3, #0]
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	3309      	adds	r3, #9
 800b732:	404a      	eors	r2, r1
 800b734:	b2d2      	uxtb	r2, r2
 800b736:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	330a      	adds	r3, #10
 800b73c:	7819      	ldrb	r1, [r3, #0]
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	330a      	adds	r3, #10
 800b742:	781a      	ldrb	r2, [r3, #0]
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	330a      	adds	r3, #10
 800b748:	404a      	eors	r2, r1
 800b74a:	b2d2      	uxtb	r2, r2
 800b74c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	330b      	adds	r3, #11
 800b752:	7819      	ldrb	r1, [r3, #0]
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	330b      	adds	r3, #11
 800b758:	781a      	ldrb	r2, [r3, #0]
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	330b      	adds	r3, #11
 800b75e:	404a      	eors	r2, r1
 800b760:	b2d2      	uxtb	r2, r2
 800b762:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	330c      	adds	r3, #12
 800b768:	7819      	ldrb	r1, [r3, #0]
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	330c      	adds	r3, #12
 800b76e:	781a      	ldrb	r2, [r3, #0]
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	330c      	adds	r3, #12
 800b774:	404a      	eors	r2, r1
 800b776:	b2d2      	uxtb	r2, r2
 800b778:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	330d      	adds	r3, #13
 800b77e:	7819      	ldrb	r1, [r3, #0]
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	330d      	adds	r3, #13
 800b784:	781a      	ldrb	r2, [r3, #0]
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	330d      	adds	r3, #13
 800b78a:	404a      	eors	r2, r1
 800b78c:	b2d2      	uxtb	r2, r2
 800b78e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	330e      	adds	r3, #14
 800b794:	7819      	ldrb	r1, [r3, #0]
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	330e      	adds	r3, #14
 800b79a:	781a      	ldrb	r2, [r3, #0]
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	330e      	adds	r3, #14
 800b7a0:	404a      	eors	r2, r1
 800b7a2:	b2d2      	uxtb	r2, r2
 800b7a4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	330f      	adds	r3, #15
 800b7aa:	7819      	ldrb	r1, [r3, #0]
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	330f      	adds	r3, #15
 800b7b0:	781a      	ldrb	r2, [r3, #0]
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	330f      	adds	r3, #15
 800b7b6:	404a      	eors	r2, r1
 800b7b8:	b2d2      	uxtb	r2, r2
 800b7ba:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800b7bc:	bf00      	nop
 800b7be:	3714      	adds	r7, #20
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bc80      	pop	{r7}
 800b7c4:	4770      	bx	lr

0800b7c6 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800b7c6:	b580      	push	{r7, lr}
 800b7c8:	b082      	sub	sp, #8
 800b7ca:	af00      	add	r7, sp, #0
 800b7cc:	6078      	str	r0, [r7, #4]
 800b7ce:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800b7d0:	6839      	ldr	r1, [r7, #0]
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f7ff fe88 	bl	800b4e8 <xor_block>
}
 800b7d8:	bf00      	nop
 800b7da:	3708      	adds	r7, #8
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}

0800b7e0 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800b7e0:	b480      	push	{r7}
 800b7e2:	b085      	sub	sp, #20
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	781b      	ldrb	r3, [r3, #0]
 800b7ec:	461a      	mov	r2, r3
 800b7ee:	4b48      	ldr	r3, [pc, #288]	; (800b910 <shift_sub_rows+0x130>)
 800b7f0:	5c9a      	ldrb	r2, [r3, r2]
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	701a      	strb	r2, [r3, #0]
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	3304      	adds	r3, #4
 800b7fa:	781b      	ldrb	r3, [r3, #0]
 800b7fc:	4619      	mov	r1, r3
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	3304      	adds	r3, #4
 800b802:	4a43      	ldr	r2, [pc, #268]	; (800b910 <shift_sub_rows+0x130>)
 800b804:	5c52      	ldrb	r2, [r2, r1]
 800b806:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	3308      	adds	r3, #8
 800b80c:	781b      	ldrb	r3, [r3, #0]
 800b80e:	4619      	mov	r1, r3
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	3308      	adds	r3, #8
 800b814:	4a3e      	ldr	r2, [pc, #248]	; (800b910 <shift_sub_rows+0x130>)
 800b816:	5c52      	ldrb	r2, [r2, r1]
 800b818:	701a      	strb	r2, [r3, #0]
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	330c      	adds	r3, #12
 800b81e:	781b      	ldrb	r3, [r3, #0]
 800b820:	4619      	mov	r1, r3
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	330c      	adds	r3, #12
 800b826:	4a3a      	ldr	r2, [pc, #232]	; (800b910 <shift_sub_rows+0x130>)
 800b828:	5c52      	ldrb	r2, [r2, r1]
 800b82a:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	785b      	ldrb	r3, [r3, #1]
 800b830:	73fb      	strb	r3, [r7, #15]
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	3305      	adds	r3, #5
 800b836:	781b      	ldrb	r3, [r3, #0]
 800b838:	4619      	mov	r1, r3
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	3301      	adds	r3, #1
 800b83e:	4a34      	ldr	r2, [pc, #208]	; (800b910 <shift_sub_rows+0x130>)
 800b840:	5c52      	ldrb	r2, [r2, r1]
 800b842:	701a      	strb	r2, [r3, #0]
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	3309      	adds	r3, #9
 800b848:	781b      	ldrb	r3, [r3, #0]
 800b84a:	4619      	mov	r1, r3
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	3305      	adds	r3, #5
 800b850:	4a2f      	ldr	r2, [pc, #188]	; (800b910 <shift_sub_rows+0x130>)
 800b852:	5c52      	ldrb	r2, [r2, r1]
 800b854:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	330d      	adds	r3, #13
 800b85a:	781b      	ldrb	r3, [r3, #0]
 800b85c:	4619      	mov	r1, r3
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	3309      	adds	r3, #9
 800b862:	4a2b      	ldr	r2, [pc, #172]	; (800b910 <shift_sub_rows+0x130>)
 800b864:	5c52      	ldrb	r2, [r2, r1]
 800b866:	701a      	strb	r2, [r3, #0]
 800b868:	7bfa      	ldrb	r2, [r7, #15]
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	330d      	adds	r3, #13
 800b86e:	4928      	ldr	r1, [pc, #160]	; (800b910 <shift_sub_rows+0x130>)
 800b870:	5c8a      	ldrb	r2, [r1, r2]
 800b872:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	789b      	ldrb	r3, [r3, #2]
 800b878:	73fb      	strb	r3, [r7, #15]
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	330a      	adds	r3, #10
 800b87e:	781b      	ldrb	r3, [r3, #0]
 800b880:	4619      	mov	r1, r3
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	3302      	adds	r3, #2
 800b886:	4a22      	ldr	r2, [pc, #136]	; (800b910 <shift_sub_rows+0x130>)
 800b888:	5c52      	ldrb	r2, [r2, r1]
 800b88a:	701a      	strb	r2, [r3, #0]
 800b88c:	7bfa      	ldrb	r2, [r7, #15]
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	330a      	adds	r3, #10
 800b892:	491f      	ldr	r1, [pc, #124]	; (800b910 <shift_sub_rows+0x130>)
 800b894:	5c8a      	ldrb	r2, [r1, r2]
 800b896:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	799b      	ldrb	r3, [r3, #6]
 800b89c:	73fb      	strb	r3, [r7, #15]
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	330e      	adds	r3, #14
 800b8a2:	781b      	ldrb	r3, [r3, #0]
 800b8a4:	4619      	mov	r1, r3
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	3306      	adds	r3, #6
 800b8aa:	4a19      	ldr	r2, [pc, #100]	; (800b910 <shift_sub_rows+0x130>)
 800b8ac:	5c52      	ldrb	r2, [r2, r1]
 800b8ae:	701a      	strb	r2, [r3, #0]
 800b8b0:	7bfa      	ldrb	r2, [r7, #15]
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	330e      	adds	r3, #14
 800b8b6:	4916      	ldr	r1, [pc, #88]	; (800b910 <shift_sub_rows+0x130>)
 800b8b8:	5c8a      	ldrb	r2, [r1, r2]
 800b8ba:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	7bdb      	ldrb	r3, [r3, #15]
 800b8c0:	73fb      	strb	r3, [r7, #15]
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	330b      	adds	r3, #11
 800b8c6:	781b      	ldrb	r3, [r3, #0]
 800b8c8:	4619      	mov	r1, r3
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	330f      	adds	r3, #15
 800b8ce:	4a10      	ldr	r2, [pc, #64]	; (800b910 <shift_sub_rows+0x130>)
 800b8d0:	5c52      	ldrb	r2, [r2, r1]
 800b8d2:	701a      	strb	r2, [r3, #0]
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	3307      	adds	r3, #7
 800b8d8:	781b      	ldrb	r3, [r3, #0]
 800b8da:	4619      	mov	r1, r3
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	330b      	adds	r3, #11
 800b8e0:	4a0b      	ldr	r2, [pc, #44]	; (800b910 <shift_sub_rows+0x130>)
 800b8e2:	5c52      	ldrb	r2, [r2, r1]
 800b8e4:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	3303      	adds	r3, #3
 800b8ea:	781b      	ldrb	r3, [r3, #0]
 800b8ec:	4619      	mov	r1, r3
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	3307      	adds	r3, #7
 800b8f2:	4a07      	ldr	r2, [pc, #28]	; (800b910 <shift_sub_rows+0x130>)
 800b8f4:	5c52      	ldrb	r2, [r2, r1]
 800b8f6:	701a      	strb	r2, [r3, #0]
 800b8f8:	7bfa      	ldrb	r2, [r7, #15]
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	3303      	adds	r3, #3
 800b8fe:	4904      	ldr	r1, [pc, #16]	; (800b910 <shift_sub_rows+0x130>)
 800b900:	5c8a      	ldrb	r2, [r1, r2]
 800b902:	701a      	strb	r2, [r3, #0]
}
 800b904:	bf00      	nop
 800b906:	3714      	adds	r7, #20
 800b908:	46bd      	mov	sp, r7
 800b90a:	bc80      	pop	{r7}
 800b90c:	4770      	bx	lr
 800b90e:	bf00      	nop
 800b910:	0801e720 	.word	0x0801e720

0800b914 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800b914:	b580      	push	{r7, lr}
 800b916:	b086      	sub	sp, #24
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800b91c:	f107 0308 	add.w	r3, r7, #8
 800b920:	6879      	ldr	r1, [r7, #4]
 800b922:	4618      	mov	r0, r3
 800b924:	f7ff fd6c 	bl	800b400 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800b928:	7a3b      	ldrb	r3, [r7, #8]
 800b92a:	461a      	mov	r2, r3
 800b92c:	4b9a      	ldr	r3, [pc, #616]	; (800bb98 <mix_sub_columns+0x284>)
 800b92e:	5c9a      	ldrb	r2, [r3, r2]
 800b930:	7b7b      	ldrb	r3, [r7, #13]
 800b932:	4619      	mov	r1, r3
 800b934:	4b99      	ldr	r3, [pc, #612]	; (800bb9c <mix_sub_columns+0x288>)
 800b936:	5c5b      	ldrb	r3, [r3, r1]
 800b938:	4053      	eors	r3, r2
 800b93a:	b2da      	uxtb	r2, r3
 800b93c:	7cbb      	ldrb	r3, [r7, #18]
 800b93e:	4619      	mov	r1, r3
 800b940:	4b97      	ldr	r3, [pc, #604]	; (800bba0 <mix_sub_columns+0x28c>)
 800b942:	5c5b      	ldrb	r3, [r3, r1]
 800b944:	4053      	eors	r3, r2
 800b946:	b2da      	uxtb	r2, r3
 800b948:	7dfb      	ldrb	r3, [r7, #23]
 800b94a:	4619      	mov	r1, r3
 800b94c:	4b94      	ldr	r3, [pc, #592]	; (800bba0 <mix_sub_columns+0x28c>)
 800b94e:	5c5b      	ldrb	r3, [r3, r1]
 800b950:	4053      	eors	r3, r2
 800b952:	b2da      	uxtb	r2, r3
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800b958:	7a3b      	ldrb	r3, [r7, #8]
 800b95a:	461a      	mov	r2, r3
 800b95c:	4b90      	ldr	r3, [pc, #576]	; (800bba0 <mix_sub_columns+0x28c>)
 800b95e:	5c9a      	ldrb	r2, [r3, r2]
 800b960:	7b7b      	ldrb	r3, [r7, #13]
 800b962:	4619      	mov	r1, r3
 800b964:	4b8c      	ldr	r3, [pc, #560]	; (800bb98 <mix_sub_columns+0x284>)
 800b966:	5c5b      	ldrb	r3, [r3, r1]
 800b968:	4053      	eors	r3, r2
 800b96a:	b2da      	uxtb	r2, r3
 800b96c:	7cbb      	ldrb	r3, [r7, #18]
 800b96e:	4619      	mov	r1, r3
 800b970:	4b8a      	ldr	r3, [pc, #552]	; (800bb9c <mix_sub_columns+0x288>)
 800b972:	5c5b      	ldrb	r3, [r3, r1]
 800b974:	4053      	eors	r3, r2
 800b976:	b2d9      	uxtb	r1, r3
 800b978:	7dfb      	ldrb	r3, [r7, #23]
 800b97a:	461a      	mov	r2, r3
 800b97c:	4b88      	ldr	r3, [pc, #544]	; (800bba0 <mix_sub_columns+0x28c>)
 800b97e:	5c9a      	ldrb	r2, [r3, r2]
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	3301      	adds	r3, #1
 800b984:	404a      	eors	r2, r1
 800b986:	b2d2      	uxtb	r2, r2
 800b988:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800b98a:	7a3b      	ldrb	r3, [r7, #8]
 800b98c:	461a      	mov	r2, r3
 800b98e:	4b84      	ldr	r3, [pc, #528]	; (800bba0 <mix_sub_columns+0x28c>)
 800b990:	5c9a      	ldrb	r2, [r3, r2]
 800b992:	7b7b      	ldrb	r3, [r7, #13]
 800b994:	4619      	mov	r1, r3
 800b996:	4b82      	ldr	r3, [pc, #520]	; (800bba0 <mix_sub_columns+0x28c>)
 800b998:	5c5b      	ldrb	r3, [r3, r1]
 800b99a:	4053      	eors	r3, r2
 800b99c:	b2da      	uxtb	r2, r3
 800b99e:	7cbb      	ldrb	r3, [r7, #18]
 800b9a0:	4619      	mov	r1, r3
 800b9a2:	4b7d      	ldr	r3, [pc, #500]	; (800bb98 <mix_sub_columns+0x284>)
 800b9a4:	5c5b      	ldrb	r3, [r3, r1]
 800b9a6:	4053      	eors	r3, r2
 800b9a8:	b2d9      	uxtb	r1, r3
 800b9aa:	7dfb      	ldrb	r3, [r7, #23]
 800b9ac:	461a      	mov	r2, r3
 800b9ae:	4b7b      	ldr	r3, [pc, #492]	; (800bb9c <mix_sub_columns+0x288>)
 800b9b0:	5c9a      	ldrb	r2, [r3, r2]
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	3302      	adds	r3, #2
 800b9b6:	404a      	eors	r2, r1
 800b9b8:	b2d2      	uxtb	r2, r2
 800b9ba:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800b9bc:	7a3b      	ldrb	r3, [r7, #8]
 800b9be:	461a      	mov	r2, r3
 800b9c0:	4b76      	ldr	r3, [pc, #472]	; (800bb9c <mix_sub_columns+0x288>)
 800b9c2:	5c9a      	ldrb	r2, [r3, r2]
 800b9c4:	7b7b      	ldrb	r3, [r7, #13]
 800b9c6:	4619      	mov	r1, r3
 800b9c8:	4b75      	ldr	r3, [pc, #468]	; (800bba0 <mix_sub_columns+0x28c>)
 800b9ca:	5c5b      	ldrb	r3, [r3, r1]
 800b9cc:	4053      	eors	r3, r2
 800b9ce:	b2da      	uxtb	r2, r3
 800b9d0:	7cbb      	ldrb	r3, [r7, #18]
 800b9d2:	4619      	mov	r1, r3
 800b9d4:	4b72      	ldr	r3, [pc, #456]	; (800bba0 <mix_sub_columns+0x28c>)
 800b9d6:	5c5b      	ldrb	r3, [r3, r1]
 800b9d8:	4053      	eors	r3, r2
 800b9da:	b2d9      	uxtb	r1, r3
 800b9dc:	7dfb      	ldrb	r3, [r7, #23]
 800b9de:	461a      	mov	r2, r3
 800b9e0:	4b6d      	ldr	r3, [pc, #436]	; (800bb98 <mix_sub_columns+0x284>)
 800b9e2:	5c9a      	ldrb	r2, [r3, r2]
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	3303      	adds	r3, #3
 800b9e8:	404a      	eors	r2, r1
 800b9ea:	b2d2      	uxtb	r2, r2
 800b9ec:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800b9ee:	7b3b      	ldrb	r3, [r7, #12]
 800b9f0:	461a      	mov	r2, r3
 800b9f2:	4b69      	ldr	r3, [pc, #420]	; (800bb98 <mix_sub_columns+0x284>)
 800b9f4:	5c9a      	ldrb	r2, [r3, r2]
 800b9f6:	7c7b      	ldrb	r3, [r7, #17]
 800b9f8:	4619      	mov	r1, r3
 800b9fa:	4b68      	ldr	r3, [pc, #416]	; (800bb9c <mix_sub_columns+0x288>)
 800b9fc:	5c5b      	ldrb	r3, [r3, r1]
 800b9fe:	4053      	eors	r3, r2
 800ba00:	b2da      	uxtb	r2, r3
 800ba02:	7dbb      	ldrb	r3, [r7, #22]
 800ba04:	4619      	mov	r1, r3
 800ba06:	4b66      	ldr	r3, [pc, #408]	; (800bba0 <mix_sub_columns+0x28c>)
 800ba08:	5c5b      	ldrb	r3, [r3, r1]
 800ba0a:	4053      	eors	r3, r2
 800ba0c:	b2d9      	uxtb	r1, r3
 800ba0e:	7afb      	ldrb	r3, [r7, #11]
 800ba10:	461a      	mov	r2, r3
 800ba12:	4b63      	ldr	r3, [pc, #396]	; (800bba0 <mix_sub_columns+0x28c>)
 800ba14:	5c9a      	ldrb	r2, [r3, r2]
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	3304      	adds	r3, #4
 800ba1a:	404a      	eors	r2, r1
 800ba1c:	b2d2      	uxtb	r2, r2
 800ba1e:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800ba20:	7b3b      	ldrb	r3, [r7, #12]
 800ba22:	461a      	mov	r2, r3
 800ba24:	4b5e      	ldr	r3, [pc, #376]	; (800bba0 <mix_sub_columns+0x28c>)
 800ba26:	5c9a      	ldrb	r2, [r3, r2]
 800ba28:	7c7b      	ldrb	r3, [r7, #17]
 800ba2a:	4619      	mov	r1, r3
 800ba2c:	4b5a      	ldr	r3, [pc, #360]	; (800bb98 <mix_sub_columns+0x284>)
 800ba2e:	5c5b      	ldrb	r3, [r3, r1]
 800ba30:	4053      	eors	r3, r2
 800ba32:	b2da      	uxtb	r2, r3
 800ba34:	7dbb      	ldrb	r3, [r7, #22]
 800ba36:	4619      	mov	r1, r3
 800ba38:	4b58      	ldr	r3, [pc, #352]	; (800bb9c <mix_sub_columns+0x288>)
 800ba3a:	5c5b      	ldrb	r3, [r3, r1]
 800ba3c:	4053      	eors	r3, r2
 800ba3e:	b2d9      	uxtb	r1, r3
 800ba40:	7afb      	ldrb	r3, [r7, #11]
 800ba42:	461a      	mov	r2, r3
 800ba44:	4b56      	ldr	r3, [pc, #344]	; (800bba0 <mix_sub_columns+0x28c>)
 800ba46:	5c9a      	ldrb	r2, [r3, r2]
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	3305      	adds	r3, #5
 800ba4c:	404a      	eors	r2, r1
 800ba4e:	b2d2      	uxtb	r2, r2
 800ba50:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800ba52:	7b3b      	ldrb	r3, [r7, #12]
 800ba54:	461a      	mov	r2, r3
 800ba56:	4b52      	ldr	r3, [pc, #328]	; (800bba0 <mix_sub_columns+0x28c>)
 800ba58:	5c9a      	ldrb	r2, [r3, r2]
 800ba5a:	7c7b      	ldrb	r3, [r7, #17]
 800ba5c:	4619      	mov	r1, r3
 800ba5e:	4b50      	ldr	r3, [pc, #320]	; (800bba0 <mix_sub_columns+0x28c>)
 800ba60:	5c5b      	ldrb	r3, [r3, r1]
 800ba62:	4053      	eors	r3, r2
 800ba64:	b2da      	uxtb	r2, r3
 800ba66:	7dbb      	ldrb	r3, [r7, #22]
 800ba68:	4619      	mov	r1, r3
 800ba6a:	4b4b      	ldr	r3, [pc, #300]	; (800bb98 <mix_sub_columns+0x284>)
 800ba6c:	5c5b      	ldrb	r3, [r3, r1]
 800ba6e:	4053      	eors	r3, r2
 800ba70:	b2d9      	uxtb	r1, r3
 800ba72:	7afb      	ldrb	r3, [r7, #11]
 800ba74:	461a      	mov	r2, r3
 800ba76:	4b49      	ldr	r3, [pc, #292]	; (800bb9c <mix_sub_columns+0x288>)
 800ba78:	5c9a      	ldrb	r2, [r3, r2]
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	3306      	adds	r3, #6
 800ba7e:	404a      	eors	r2, r1
 800ba80:	b2d2      	uxtb	r2, r2
 800ba82:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800ba84:	7b3b      	ldrb	r3, [r7, #12]
 800ba86:	461a      	mov	r2, r3
 800ba88:	4b44      	ldr	r3, [pc, #272]	; (800bb9c <mix_sub_columns+0x288>)
 800ba8a:	5c9a      	ldrb	r2, [r3, r2]
 800ba8c:	7c7b      	ldrb	r3, [r7, #17]
 800ba8e:	4619      	mov	r1, r3
 800ba90:	4b43      	ldr	r3, [pc, #268]	; (800bba0 <mix_sub_columns+0x28c>)
 800ba92:	5c5b      	ldrb	r3, [r3, r1]
 800ba94:	4053      	eors	r3, r2
 800ba96:	b2da      	uxtb	r2, r3
 800ba98:	7dbb      	ldrb	r3, [r7, #22]
 800ba9a:	4619      	mov	r1, r3
 800ba9c:	4b40      	ldr	r3, [pc, #256]	; (800bba0 <mix_sub_columns+0x28c>)
 800ba9e:	5c5b      	ldrb	r3, [r3, r1]
 800baa0:	4053      	eors	r3, r2
 800baa2:	b2d9      	uxtb	r1, r3
 800baa4:	7afb      	ldrb	r3, [r7, #11]
 800baa6:	461a      	mov	r2, r3
 800baa8:	4b3b      	ldr	r3, [pc, #236]	; (800bb98 <mix_sub_columns+0x284>)
 800baaa:	5c9a      	ldrb	r2, [r3, r2]
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	3307      	adds	r3, #7
 800bab0:	404a      	eors	r2, r1
 800bab2:	b2d2      	uxtb	r2, r2
 800bab4:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800bab6:	7c3b      	ldrb	r3, [r7, #16]
 800bab8:	461a      	mov	r2, r3
 800baba:	4b37      	ldr	r3, [pc, #220]	; (800bb98 <mix_sub_columns+0x284>)
 800babc:	5c9a      	ldrb	r2, [r3, r2]
 800babe:	7d7b      	ldrb	r3, [r7, #21]
 800bac0:	4619      	mov	r1, r3
 800bac2:	4b36      	ldr	r3, [pc, #216]	; (800bb9c <mix_sub_columns+0x288>)
 800bac4:	5c5b      	ldrb	r3, [r3, r1]
 800bac6:	4053      	eors	r3, r2
 800bac8:	b2da      	uxtb	r2, r3
 800baca:	7abb      	ldrb	r3, [r7, #10]
 800bacc:	4619      	mov	r1, r3
 800bace:	4b34      	ldr	r3, [pc, #208]	; (800bba0 <mix_sub_columns+0x28c>)
 800bad0:	5c5b      	ldrb	r3, [r3, r1]
 800bad2:	4053      	eors	r3, r2
 800bad4:	b2d9      	uxtb	r1, r3
 800bad6:	7bfb      	ldrb	r3, [r7, #15]
 800bad8:	461a      	mov	r2, r3
 800bada:	4b31      	ldr	r3, [pc, #196]	; (800bba0 <mix_sub_columns+0x28c>)
 800badc:	5c9a      	ldrb	r2, [r3, r2]
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	3308      	adds	r3, #8
 800bae2:	404a      	eors	r2, r1
 800bae4:	b2d2      	uxtb	r2, r2
 800bae6:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800bae8:	7c3b      	ldrb	r3, [r7, #16]
 800baea:	461a      	mov	r2, r3
 800baec:	4b2c      	ldr	r3, [pc, #176]	; (800bba0 <mix_sub_columns+0x28c>)
 800baee:	5c9a      	ldrb	r2, [r3, r2]
 800baf0:	7d7b      	ldrb	r3, [r7, #21]
 800baf2:	4619      	mov	r1, r3
 800baf4:	4b28      	ldr	r3, [pc, #160]	; (800bb98 <mix_sub_columns+0x284>)
 800baf6:	5c5b      	ldrb	r3, [r3, r1]
 800baf8:	4053      	eors	r3, r2
 800bafa:	b2da      	uxtb	r2, r3
 800bafc:	7abb      	ldrb	r3, [r7, #10]
 800bafe:	4619      	mov	r1, r3
 800bb00:	4b26      	ldr	r3, [pc, #152]	; (800bb9c <mix_sub_columns+0x288>)
 800bb02:	5c5b      	ldrb	r3, [r3, r1]
 800bb04:	4053      	eors	r3, r2
 800bb06:	b2d9      	uxtb	r1, r3
 800bb08:	7bfb      	ldrb	r3, [r7, #15]
 800bb0a:	461a      	mov	r2, r3
 800bb0c:	4b24      	ldr	r3, [pc, #144]	; (800bba0 <mix_sub_columns+0x28c>)
 800bb0e:	5c9a      	ldrb	r2, [r3, r2]
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	3309      	adds	r3, #9
 800bb14:	404a      	eors	r2, r1
 800bb16:	b2d2      	uxtb	r2, r2
 800bb18:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800bb1a:	7c3b      	ldrb	r3, [r7, #16]
 800bb1c:	461a      	mov	r2, r3
 800bb1e:	4b20      	ldr	r3, [pc, #128]	; (800bba0 <mix_sub_columns+0x28c>)
 800bb20:	5c9a      	ldrb	r2, [r3, r2]
 800bb22:	7d7b      	ldrb	r3, [r7, #21]
 800bb24:	4619      	mov	r1, r3
 800bb26:	4b1e      	ldr	r3, [pc, #120]	; (800bba0 <mix_sub_columns+0x28c>)
 800bb28:	5c5b      	ldrb	r3, [r3, r1]
 800bb2a:	4053      	eors	r3, r2
 800bb2c:	b2da      	uxtb	r2, r3
 800bb2e:	7abb      	ldrb	r3, [r7, #10]
 800bb30:	4619      	mov	r1, r3
 800bb32:	4b19      	ldr	r3, [pc, #100]	; (800bb98 <mix_sub_columns+0x284>)
 800bb34:	5c5b      	ldrb	r3, [r3, r1]
 800bb36:	4053      	eors	r3, r2
 800bb38:	b2d9      	uxtb	r1, r3
 800bb3a:	7bfb      	ldrb	r3, [r7, #15]
 800bb3c:	461a      	mov	r2, r3
 800bb3e:	4b17      	ldr	r3, [pc, #92]	; (800bb9c <mix_sub_columns+0x288>)
 800bb40:	5c9a      	ldrb	r2, [r3, r2]
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	330a      	adds	r3, #10
 800bb46:	404a      	eors	r2, r1
 800bb48:	b2d2      	uxtb	r2, r2
 800bb4a:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800bb4c:	7c3b      	ldrb	r3, [r7, #16]
 800bb4e:	461a      	mov	r2, r3
 800bb50:	4b12      	ldr	r3, [pc, #72]	; (800bb9c <mix_sub_columns+0x288>)
 800bb52:	5c9a      	ldrb	r2, [r3, r2]
 800bb54:	7d7b      	ldrb	r3, [r7, #21]
 800bb56:	4619      	mov	r1, r3
 800bb58:	4b11      	ldr	r3, [pc, #68]	; (800bba0 <mix_sub_columns+0x28c>)
 800bb5a:	5c5b      	ldrb	r3, [r3, r1]
 800bb5c:	4053      	eors	r3, r2
 800bb5e:	b2da      	uxtb	r2, r3
 800bb60:	7abb      	ldrb	r3, [r7, #10]
 800bb62:	4619      	mov	r1, r3
 800bb64:	4b0e      	ldr	r3, [pc, #56]	; (800bba0 <mix_sub_columns+0x28c>)
 800bb66:	5c5b      	ldrb	r3, [r3, r1]
 800bb68:	4053      	eors	r3, r2
 800bb6a:	b2d9      	uxtb	r1, r3
 800bb6c:	7bfb      	ldrb	r3, [r7, #15]
 800bb6e:	461a      	mov	r2, r3
 800bb70:	4b09      	ldr	r3, [pc, #36]	; (800bb98 <mix_sub_columns+0x284>)
 800bb72:	5c9a      	ldrb	r2, [r3, r2]
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	330b      	adds	r3, #11
 800bb78:	404a      	eors	r2, r1
 800bb7a:	b2d2      	uxtb	r2, r2
 800bb7c:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800bb7e:	7d3b      	ldrb	r3, [r7, #20]
 800bb80:	461a      	mov	r2, r3
 800bb82:	4b05      	ldr	r3, [pc, #20]	; (800bb98 <mix_sub_columns+0x284>)
 800bb84:	5c9a      	ldrb	r2, [r3, r2]
 800bb86:	7a7b      	ldrb	r3, [r7, #9]
 800bb88:	4619      	mov	r1, r3
 800bb8a:	4b04      	ldr	r3, [pc, #16]	; (800bb9c <mix_sub_columns+0x288>)
 800bb8c:	5c5b      	ldrb	r3, [r3, r1]
 800bb8e:	4053      	eors	r3, r2
 800bb90:	b2da      	uxtb	r2, r3
 800bb92:	7bbb      	ldrb	r3, [r7, #14]
 800bb94:	4619      	mov	r1, r3
 800bb96:	e005      	b.n	800bba4 <mix_sub_columns+0x290>
 800bb98:	0801e820 	.word	0x0801e820
 800bb9c:	0801e920 	.word	0x0801e920
 800bba0:	0801e720 	.word	0x0801e720
 800bba4:	4b2d      	ldr	r3, [pc, #180]	; (800bc5c <mix_sub_columns+0x348>)
 800bba6:	5c5b      	ldrb	r3, [r3, r1]
 800bba8:	4053      	eors	r3, r2
 800bbaa:	b2d9      	uxtb	r1, r3
 800bbac:	7cfb      	ldrb	r3, [r7, #19]
 800bbae:	461a      	mov	r2, r3
 800bbb0:	4b2a      	ldr	r3, [pc, #168]	; (800bc5c <mix_sub_columns+0x348>)
 800bbb2:	5c9a      	ldrb	r2, [r3, r2]
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	330c      	adds	r3, #12
 800bbb8:	404a      	eors	r2, r1
 800bbba:	b2d2      	uxtb	r2, r2
 800bbbc:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800bbbe:	7d3b      	ldrb	r3, [r7, #20]
 800bbc0:	461a      	mov	r2, r3
 800bbc2:	4b26      	ldr	r3, [pc, #152]	; (800bc5c <mix_sub_columns+0x348>)
 800bbc4:	5c9a      	ldrb	r2, [r3, r2]
 800bbc6:	7a7b      	ldrb	r3, [r7, #9]
 800bbc8:	4619      	mov	r1, r3
 800bbca:	4b25      	ldr	r3, [pc, #148]	; (800bc60 <mix_sub_columns+0x34c>)
 800bbcc:	5c5b      	ldrb	r3, [r3, r1]
 800bbce:	4053      	eors	r3, r2
 800bbd0:	b2da      	uxtb	r2, r3
 800bbd2:	7bbb      	ldrb	r3, [r7, #14]
 800bbd4:	4619      	mov	r1, r3
 800bbd6:	4b23      	ldr	r3, [pc, #140]	; (800bc64 <mix_sub_columns+0x350>)
 800bbd8:	5c5b      	ldrb	r3, [r3, r1]
 800bbda:	4053      	eors	r3, r2
 800bbdc:	b2d9      	uxtb	r1, r3
 800bbde:	7cfb      	ldrb	r3, [r7, #19]
 800bbe0:	461a      	mov	r2, r3
 800bbe2:	4b1e      	ldr	r3, [pc, #120]	; (800bc5c <mix_sub_columns+0x348>)
 800bbe4:	5c9a      	ldrb	r2, [r3, r2]
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	330d      	adds	r3, #13
 800bbea:	404a      	eors	r2, r1
 800bbec:	b2d2      	uxtb	r2, r2
 800bbee:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800bbf0:	7d3b      	ldrb	r3, [r7, #20]
 800bbf2:	461a      	mov	r2, r3
 800bbf4:	4b19      	ldr	r3, [pc, #100]	; (800bc5c <mix_sub_columns+0x348>)
 800bbf6:	5c9a      	ldrb	r2, [r3, r2]
 800bbf8:	7a7b      	ldrb	r3, [r7, #9]
 800bbfa:	4619      	mov	r1, r3
 800bbfc:	4b17      	ldr	r3, [pc, #92]	; (800bc5c <mix_sub_columns+0x348>)
 800bbfe:	5c5b      	ldrb	r3, [r3, r1]
 800bc00:	4053      	eors	r3, r2
 800bc02:	b2da      	uxtb	r2, r3
 800bc04:	7bbb      	ldrb	r3, [r7, #14]
 800bc06:	4619      	mov	r1, r3
 800bc08:	4b15      	ldr	r3, [pc, #84]	; (800bc60 <mix_sub_columns+0x34c>)
 800bc0a:	5c5b      	ldrb	r3, [r3, r1]
 800bc0c:	4053      	eors	r3, r2
 800bc0e:	b2d9      	uxtb	r1, r3
 800bc10:	7cfb      	ldrb	r3, [r7, #19]
 800bc12:	461a      	mov	r2, r3
 800bc14:	4b13      	ldr	r3, [pc, #76]	; (800bc64 <mix_sub_columns+0x350>)
 800bc16:	5c9a      	ldrb	r2, [r3, r2]
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	330e      	adds	r3, #14
 800bc1c:	404a      	eors	r2, r1
 800bc1e:	b2d2      	uxtb	r2, r2
 800bc20:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800bc22:	7d3b      	ldrb	r3, [r7, #20]
 800bc24:	461a      	mov	r2, r3
 800bc26:	4b0f      	ldr	r3, [pc, #60]	; (800bc64 <mix_sub_columns+0x350>)
 800bc28:	5c9a      	ldrb	r2, [r3, r2]
 800bc2a:	7a7b      	ldrb	r3, [r7, #9]
 800bc2c:	4619      	mov	r1, r3
 800bc2e:	4b0b      	ldr	r3, [pc, #44]	; (800bc5c <mix_sub_columns+0x348>)
 800bc30:	5c5b      	ldrb	r3, [r3, r1]
 800bc32:	4053      	eors	r3, r2
 800bc34:	b2da      	uxtb	r2, r3
 800bc36:	7bbb      	ldrb	r3, [r7, #14]
 800bc38:	4619      	mov	r1, r3
 800bc3a:	4b08      	ldr	r3, [pc, #32]	; (800bc5c <mix_sub_columns+0x348>)
 800bc3c:	5c5b      	ldrb	r3, [r3, r1]
 800bc3e:	4053      	eors	r3, r2
 800bc40:	b2d9      	uxtb	r1, r3
 800bc42:	7cfb      	ldrb	r3, [r7, #19]
 800bc44:	461a      	mov	r2, r3
 800bc46:	4b06      	ldr	r3, [pc, #24]	; (800bc60 <mix_sub_columns+0x34c>)
 800bc48:	5c9a      	ldrb	r2, [r3, r2]
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	330f      	adds	r3, #15
 800bc4e:	404a      	eors	r2, r1
 800bc50:	b2d2      	uxtb	r2, r2
 800bc52:	701a      	strb	r2, [r3, #0]
  }
 800bc54:	bf00      	nop
 800bc56:	3718      	adds	r7, #24
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd80      	pop	{r7, pc}
 800bc5c:	0801e720 	.word	0x0801e720
 800bc60:	0801e820 	.word	0x0801e820
 800bc64:	0801e920 	.word	0x0801e920

0800bc68 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b086      	sub	sp, #24
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	60f8      	str	r0, [r7, #12]
 800bc70:	460b      	mov	r3, r1
 800bc72:	607a      	str	r2, [r7, #4]
 800bc74:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800bc76:	7afb      	ldrb	r3, [r7, #11]
 800bc78:	3b10      	subs	r3, #16
 800bc7a:	2b10      	cmp	r3, #16
 800bc7c:	bf8c      	ite	hi
 800bc7e:	2201      	movhi	r2, #1
 800bc80:	2200      	movls	r2, #0
 800bc82:	b2d2      	uxtb	r2, r2
 800bc84:	2a00      	cmp	r2, #0
 800bc86:	d10b      	bne.n	800bca0 <lorawan_aes_set_key+0x38>
 800bc88:	4a64      	ldr	r2, [pc, #400]	; (800be1c <lorawan_aes_set_key+0x1b4>)
 800bc8a:	fa22 f303 	lsr.w	r3, r2, r3
 800bc8e:	f003 0301 	and.w	r3, r3, #1
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	bf14      	ite	ne
 800bc96:	2301      	movne	r3, #1
 800bc98:	2300      	moveq	r3, #0
 800bc9a:	b2db      	uxtb	r3, r3
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d105      	bne.n	800bcac <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2200      	movs	r2, #0
 800bca4:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800bca8:	23ff      	movs	r3, #255	; 0xff
 800bcaa:	e0b2      	b.n	800be12 <lorawan_aes_set_key+0x1aa>
        break;
 800bcac:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	7afa      	ldrb	r2, [r7, #11]
 800bcb2:	68f9      	ldr	r1, [r7, #12]
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f7ff fbfc 	bl	800b4b2 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800bcba:	7afb      	ldrb	r3, [r7, #11]
 800bcbc:	331c      	adds	r3, #28
 800bcbe:	b2db      	uxtb	r3, r3
 800bcc0:	009b      	lsls	r3, r3, #2
 800bcc2:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800bcc4:	7c7b      	ldrb	r3, [r7, #17]
 800bcc6:	091b      	lsrs	r3, r3, #4
 800bcc8:	b2db      	uxtb	r3, r3
 800bcca:	3b01      	subs	r3, #1
 800bccc:	b2da      	uxtb	r2, r3
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800bcd4:	7afb      	ldrb	r3, [r7, #11]
 800bcd6:	75fb      	strb	r3, [r7, #23]
 800bcd8:	2301      	movs	r3, #1
 800bcda:	75bb      	strb	r3, [r7, #22]
 800bcdc:	e093      	b.n	800be06 <lorawan_aes_set_key+0x19e>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800bcde:	7dfb      	ldrb	r3, [r7, #23]
 800bce0:	3b04      	subs	r3, #4
 800bce2:	687a      	ldr	r2, [r7, #4]
 800bce4:	5cd3      	ldrb	r3, [r2, r3]
 800bce6:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800bce8:	7dfb      	ldrb	r3, [r7, #23]
 800bcea:	3b03      	subs	r3, #3
 800bcec:	687a      	ldr	r2, [r7, #4]
 800bcee:	5cd3      	ldrb	r3, [r2, r3]
 800bcf0:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800bcf2:	7dfb      	ldrb	r3, [r7, #23]
 800bcf4:	3b02      	subs	r3, #2
 800bcf6:	687a      	ldr	r2, [r7, #4]
 800bcf8:	5cd3      	ldrb	r3, [r2, r3]
 800bcfa:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800bcfc:	7dfb      	ldrb	r3, [r7, #23]
 800bcfe:	3b01      	subs	r3, #1
 800bd00:	687a      	ldr	r2, [r7, #4]
 800bd02:	5cd3      	ldrb	r3, [r2, r3]
 800bd04:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800bd06:	7dfb      	ldrb	r3, [r7, #23]
 800bd08:	7afa      	ldrb	r2, [r7, #11]
 800bd0a:	fbb3 f1f2 	udiv	r1, r3, r2
 800bd0e:	fb01 f202 	mul.w	r2, r1, r2
 800bd12:	1a9b      	subs	r3, r3, r2
 800bd14:	b2db      	uxtb	r3, r3
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d127      	bne.n	800bd6a <lorawan_aes_set_key+0x102>
        {
            tt = t0;
 800bd1a:	7d7b      	ldrb	r3, [r7, #21]
 800bd1c:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800bd1e:	7d3b      	ldrb	r3, [r7, #20]
 800bd20:	4a3f      	ldr	r2, [pc, #252]	; (800be20 <lorawan_aes_set_key+0x1b8>)
 800bd22:	5cd2      	ldrb	r2, [r2, r3]
 800bd24:	7dbb      	ldrb	r3, [r7, #22]
 800bd26:	4053      	eors	r3, r2
 800bd28:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800bd2a:	7cfb      	ldrb	r3, [r7, #19]
 800bd2c:	4a3c      	ldr	r2, [pc, #240]	; (800be20 <lorawan_aes_set_key+0x1b8>)
 800bd2e:	5cd3      	ldrb	r3, [r2, r3]
 800bd30:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800bd32:	7cbb      	ldrb	r3, [r7, #18]
 800bd34:	4a3a      	ldr	r2, [pc, #232]	; (800be20 <lorawan_aes_set_key+0x1b8>)
 800bd36:	5cd3      	ldrb	r3, [r2, r3]
 800bd38:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800bd3a:	7c3b      	ldrb	r3, [r7, #16]
 800bd3c:	4a38      	ldr	r2, [pc, #224]	; (800be20 <lorawan_aes_set_key+0x1b8>)
 800bd3e:	5cd3      	ldrb	r3, [r2, r3]
 800bd40:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800bd42:	7dbb      	ldrb	r3, [r7, #22]
 800bd44:	005b      	lsls	r3, r3, #1
 800bd46:	b25a      	sxtb	r2, r3
 800bd48:	7dbb      	ldrb	r3, [r7, #22]
 800bd4a:	09db      	lsrs	r3, r3, #7
 800bd4c:	b2db      	uxtb	r3, r3
 800bd4e:	4619      	mov	r1, r3
 800bd50:	0049      	lsls	r1, r1, #1
 800bd52:	440b      	add	r3, r1
 800bd54:	4619      	mov	r1, r3
 800bd56:	00c8      	lsls	r0, r1, #3
 800bd58:	4619      	mov	r1, r3
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	440b      	add	r3, r1
 800bd5e:	b2db      	uxtb	r3, r3
 800bd60:	b25b      	sxtb	r3, r3
 800bd62:	4053      	eors	r3, r2
 800bd64:	b25b      	sxtb	r3, r3
 800bd66:	75bb      	strb	r3, [r7, #22]
 800bd68:	e01c      	b.n	800bda4 <lorawan_aes_set_key+0x13c>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800bd6a:	7afb      	ldrb	r3, [r7, #11]
 800bd6c:	2b18      	cmp	r3, #24
 800bd6e:	d919      	bls.n	800bda4 <lorawan_aes_set_key+0x13c>
 800bd70:	7dfb      	ldrb	r3, [r7, #23]
 800bd72:	7afa      	ldrb	r2, [r7, #11]
 800bd74:	fbb3 f1f2 	udiv	r1, r3, r2
 800bd78:	fb01 f202 	mul.w	r2, r1, r2
 800bd7c:	1a9b      	subs	r3, r3, r2
 800bd7e:	b2db      	uxtb	r3, r3
 800bd80:	2b10      	cmp	r3, #16
 800bd82:	d10f      	bne.n	800bda4 <lorawan_aes_set_key+0x13c>
        {
            t0 = s_box(t0);
 800bd84:	7d7b      	ldrb	r3, [r7, #21]
 800bd86:	4a26      	ldr	r2, [pc, #152]	; (800be20 <lorawan_aes_set_key+0x1b8>)
 800bd88:	5cd3      	ldrb	r3, [r2, r3]
 800bd8a:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800bd8c:	7d3b      	ldrb	r3, [r7, #20]
 800bd8e:	4a24      	ldr	r2, [pc, #144]	; (800be20 <lorawan_aes_set_key+0x1b8>)
 800bd90:	5cd3      	ldrb	r3, [r2, r3]
 800bd92:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800bd94:	7cfb      	ldrb	r3, [r7, #19]
 800bd96:	4a22      	ldr	r2, [pc, #136]	; (800be20 <lorawan_aes_set_key+0x1b8>)
 800bd98:	5cd3      	ldrb	r3, [r2, r3]
 800bd9a:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800bd9c:	7cbb      	ldrb	r3, [r7, #18]
 800bd9e:	4a20      	ldr	r2, [pc, #128]	; (800be20 <lorawan_aes_set_key+0x1b8>)
 800bda0:	5cd3      	ldrb	r3, [r2, r3]
 800bda2:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800bda4:	7dfa      	ldrb	r2, [r7, #23]
 800bda6:	7afb      	ldrb	r3, [r7, #11]
 800bda8:	1ad3      	subs	r3, r2, r3
 800bdaa:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800bdac:	7c3b      	ldrb	r3, [r7, #16]
 800bdae:	687a      	ldr	r2, [r7, #4]
 800bdb0:	5cd1      	ldrb	r1, [r2, r3]
 800bdb2:	7dfb      	ldrb	r3, [r7, #23]
 800bdb4:	7d7a      	ldrb	r2, [r7, #21]
 800bdb6:	404a      	eors	r2, r1
 800bdb8:	b2d1      	uxtb	r1, r2
 800bdba:	687a      	ldr	r2, [r7, #4]
 800bdbc:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800bdbe:	7c3b      	ldrb	r3, [r7, #16]
 800bdc0:	3301      	adds	r3, #1
 800bdc2:	687a      	ldr	r2, [r7, #4]
 800bdc4:	5cd1      	ldrb	r1, [r2, r3]
 800bdc6:	7dfb      	ldrb	r3, [r7, #23]
 800bdc8:	3301      	adds	r3, #1
 800bdca:	7d3a      	ldrb	r2, [r7, #20]
 800bdcc:	404a      	eors	r2, r1
 800bdce:	b2d1      	uxtb	r1, r2
 800bdd0:	687a      	ldr	r2, [r7, #4]
 800bdd2:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800bdd4:	7c3b      	ldrb	r3, [r7, #16]
 800bdd6:	3302      	adds	r3, #2
 800bdd8:	687a      	ldr	r2, [r7, #4]
 800bdda:	5cd1      	ldrb	r1, [r2, r3]
 800bddc:	7dfb      	ldrb	r3, [r7, #23]
 800bdde:	3302      	adds	r3, #2
 800bde0:	7cfa      	ldrb	r2, [r7, #19]
 800bde2:	404a      	eors	r2, r1
 800bde4:	b2d1      	uxtb	r1, r2
 800bde6:	687a      	ldr	r2, [r7, #4]
 800bde8:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800bdea:	7c3b      	ldrb	r3, [r7, #16]
 800bdec:	3303      	adds	r3, #3
 800bdee:	687a      	ldr	r2, [r7, #4]
 800bdf0:	5cd1      	ldrb	r1, [r2, r3]
 800bdf2:	7dfb      	ldrb	r3, [r7, #23]
 800bdf4:	3303      	adds	r3, #3
 800bdf6:	7cba      	ldrb	r2, [r7, #18]
 800bdf8:	404a      	eors	r2, r1
 800bdfa:	b2d1      	uxtb	r1, r2
 800bdfc:	687a      	ldr	r2, [r7, #4]
 800bdfe:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800be00:	7dfb      	ldrb	r3, [r7, #23]
 800be02:	3304      	adds	r3, #4
 800be04:	75fb      	strb	r3, [r7, #23]
 800be06:	7dfa      	ldrb	r2, [r7, #23]
 800be08:	7c7b      	ldrb	r3, [r7, #17]
 800be0a:	429a      	cmp	r2, r3
 800be0c:	f4ff af67 	bcc.w	800bcde <lorawan_aes_set_key+0x76>
    }
    return 0;
 800be10:	2300      	movs	r3, #0
}
 800be12:	4618      	mov	r0, r3
 800be14:	3718      	adds	r7, #24
 800be16:	46bd      	mov	sp, r7
 800be18:	bd80      	pop	{r7, pc}
 800be1a:	bf00      	nop
 800be1c:	00010101 	.word	0x00010101
 800be20:	0801e720 	.word	0x0801e720

0800be24 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b08a      	sub	sp, #40	; 0x28
 800be28:	af00      	add	r7, sp, #0
 800be2a:	60f8      	str	r0, [r7, #12]
 800be2c:	60b9      	str	r1, [r7, #8]
 800be2e:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800be36:	2b00      	cmp	r3, #0
 800be38:	d038      	beq.n	800beac <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800be3a:	687a      	ldr	r2, [r7, #4]
 800be3c:	f107 0314 	add.w	r3, r7, #20
 800be40:	68f9      	ldr	r1, [r7, #12]
 800be42:	4618      	mov	r0, r3
 800be44:	f7ff fc07 	bl	800b656 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800be48:	2301      	movs	r3, #1
 800be4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800be4e:	e014      	b.n	800be7a <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800be50:	f107 0314 	add.w	r3, r7, #20
 800be54:	4618      	mov	r0, r3
 800be56:	f7ff fd5d 	bl	800b914 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800be60:	0112      	lsls	r2, r2, #4
 800be62:	441a      	add	r2, r3
 800be64:	f107 0314 	add.w	r3, r7, #20
 800be68:	4611      	mov	r1, r2
 800be6a:	4618      	mov	r0, r3
 800be6c:	f7ff fcab 	bl	800b7c6 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800be70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be74:	3301      	adds	r3, #1
 800be76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800be80:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800be84:	429a      	cmp	r2, r3
 800be86:	d3e3      	bcc.n	800be50 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800be88:	f107 0314 	add.w	r3, r7, #20
 800be8c:	4618      	mov	r0, r3
 800be8e:	f7ff fca7 	bl	800b7e0 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800be98:	0112      	lsls	r2, r2, #4
 800be9a:	441a      	add	r2, r3
 800be9c:	f107 0314 	add.w	r3, r7, #20
 800bea0:	4619      	mov	r1, r3
 800bea2:	68b8      	ldr	r0, [r7, #8]
 800bea4:	f7ff fbd7 	bl	800b656 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800bea8:	2300      	movs	r3, #0
 800beaa:	e000      	b.n	800beae <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800beac:	23ff      	movs	r3, #255	; 0xff
}
 800beae:	4618      	mov	r0, r3
 800beb0:	3728      	adds	r7, #40	; 0x28
 800beb2:	46bd      	mov	sp, r7
 800beb4:	bd80      	pop	{r7, pc}
	...

0800beb8 <PrintKey>:
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac );

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t keyID )
{
 800beb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800beba:	b0a1      	sub	sp, #132	; 0x84
 800bebc:	af12      	add	r7, sp, #72	; 0x48
 800bebe:	4603      	mov	r3, r0
 800bec0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#if (KEY_EXTRACTABLE == 1)
#if (LORAWAN_KMS == 0)
    Key_t *keyItem;
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 800bec4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800bec8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800becc:	4611      	mov	r1, r2
 800bece:	4618      	mov	r0, r3
 800bed0:	f000 fa12 	bl	800c2f8 <SecureElementGetKeyByID>
 800bed4:	4603      	mov	r3, r0
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d174      	bne.n	800bfc4 <PrintKey+0x10c>
#else
    uint8_t extractable_key[SE_KEY_SIZE] = {0};
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, ( uint8_t * )extractable_key ) )
#endif /* LORAWAN_KMS */
    {
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800beda:	2300      	movs	r3, #0
 800bedc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800bee0:	e06c      	b.n	800bfbc <PrintKey+0x104>
        {
            if( KeyLabel[i].keyID == keyID )
 800bee2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800bee6:	4939      	ldr	r1, [pc, #228]	; (800bfcc <PrintKey+0x114>)
 800bee8:	4613      	mov	r3, r2
 800beea:	005b      	lsls	r3, r3, #1
 800beec:	4413      	add	r3, r2
 800beee:	009b      	lsls	r3, r3, #2
 800bef0:	440b      	add	r3, r1
 800bef2:	781b      	ldrb	r3, [r3, #0]
 800bef4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800bef8:	429a      	cmp	r2, r3
 800befa:	d15a      	bne.n	800bfb2 <PrintKey+0xfa>
            {
#if (LORAWAN_KMS == 0)
                MW_LOG( TS_OFF, VLEVEL_M,
 800befc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800bf00:	4932      	ldr	r1, [pc, #200]	; (800bfcc <PrintKey+0x114>)
 800bf02:	4613      	mov	r3, r2
 800bf04:	005b      	lsls	r3, r3, #1
 800bf06:	4413      	add	r3, r2
 800bf08:	009b      	lsls	r3, r3, #2
 800bf0a:	440b      	add	r3, r1
 800bf0c:	3308      	adds	r3, #8
 800bf0e:	6819      	ldr	r1, [r3, #0]
 800bf10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf12:	785b      	ldrb	r3, [r3, #1]
 800bf14:	461d      	mov	r5, r3
 800bf16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf18:	789b      	ldrb	r3, [r3, #2]
 800bf1a:	461e      	mov	r6, r3
 800bf1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf1e:	78db      	ldrb	r3, [r3, #3]
 800bf20:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf24:	791b      	ldrb	r3, [r3, #4]
 800bf26:	627b      	str	r3, [r7, #36]	; 0x24
 800bf28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf2a:	795b      	ldrb	r3, [r3, #5]
 800bf2c:	623b      	str	r3, [r7, #32]
 800bf2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf30:	799b      	ldrb	r3, [r3, #6]
 800bf32:	61fb      	str	r3, [r7, #28]
 800bf34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf36:	79db      	ldrb	r3, [r3, #7]
 800bf38:	61bb      	str	r3, [r7, #24]
 800bf3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf3c:	7a1b      	ldrb	r3, [r3, #8]
 800bf3e:	617b      	str	r3, [r7, #20]
 800bf40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf42:	7a5b      	ldrb	r3, [r3, #9]
 800bf44:	613b      	str	r3, [r7, #16]
 800bf46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf48:	7a9b      	ldrb	r3, [r3, #10]
 800bf4a:	60fb      	str	r3, [r7, #12]
 800bf4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf4e:	7adb      	ldrb	r3, [r3, #11]
 800bf50:	60bb      	str	r3, [r7, #8]
 800bf52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf54:	7b1b      	ldrb	r3, [r3, #12]
 800bf56:	607b      	str	r3, [r7, #4]
 800bf58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf5a:	7b5b      	ldrb	r3, [r3, #13]
 800bf5c:	461c      	mov	r4, r3
 800bf5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf60:	7b9b      	ldrb	r3, [r3, #14]
 800bf62:	4618      	mov	r0, r3
 800bf64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf66:	7bdb      	ldrb	r3, [r3, #15]
 800bf68:	461a      	mov	r2, r3
 800bf6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf6c:	7c1b      	ldrb	r3, [r3, #16]
 800bf6e:	9310      	str	r3, [sp, #64]	; 0x40
 800bf70:	920f      	str	r2, [sp, #60]	; 0x3c
 800bf72:	900e      	str	r0, [sp, #56]	; 0x38
 800bf74:	940d      	str	r4, [sp, #52]	; 0x34
 800bf76:	687a      	ldr	r2, [r7, #4]
 800bf78:	920c      	str	r2, [sp, #48]	; 0x30
 800bf7a:	68ba      	ldr	r2, [r7, #8]
 800bf7c:	920b      	str	r2, [sp, #44]	; 0x2c
 800bf7e:	68fa      	ldr	r2, [r7, #12]
 800bf80:	920a      	str	r2, [sp, #40]	; 0x28
 800bf82:	693a      	ldr	r2, [r7, #16]
 800bf84:	9209      	str	r2, [sp, #36]	; 0x24
 800bf86:	697a      	ldr	r2, [r7, #20]
 800bf88:	9208      	str	r2, [sp, #32]
 800bf8a:	69ba      	ldr	r2, [r7, #24]
 800bf8c:	9207      	str	r2, [sp, #28]
 800bf8e:	69fa      	ldr	r2, [r7, #28]
 800bf90:	9206      	str	r2, [sp, #24]
 800bf92:	6a3a      	ldr	r2, [r7, #32]
 800bf94:	9205      	str	r2, [sp, #20]
 800bf96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf98:	9204      	str	r2, [sp, #16]
 800bf9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf9c:	9303      	str	r3, [sp, #12]
 800bf9e:	9602      	str	r6, [sp, #8]
 800bfa0:	9501      	str	r5, [sp, #4]
 800bfa2:	9100      	str	r1, [sp, #0]
 800bfa4:	4b0a      	ldr	r3, [pc, #40]	; (800bfd0 <PrintKey+0x118>)
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	2100      	movs	r1, #0
 800bfaa:	2002      	movs	r0, #2
 800bfac:	f011 fb72 	bl	801d694 <UTIL_ADV_TRACE_COND_FSend>
 800bfb0:	e008      	b.n	800bfc4 <PrintKey+0x10c>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800bfb2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bfb6:	3301      	adds	r3, #1
 800bfb8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800bfbc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bfc0:	2b0a      	cmp	r3, #10
 800bfc2:	d98e      	bls.n	800bee2 <PrintKey+0x2a>
                return;
            }
        }
    }
#endif /* KEY_EXTRACTABLE */
}
 800bfc4:	373c      	adds	r7, #60	; 0x3c
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfca:	bf00      	nop
 800bfcc:	0801ea20 	.word	0x0801ea20
 800bfd0:	0801e28c 	.word	0x0801e28c

0800bfd4 <PrintIds>:

static void PrintIds( ActivationType_t mode )
{
 800bfd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfd6:	b091      	sub	sp, #68	; 0x44
 800bfd8:	af08      	add	r7, sp, #32
 800bfda:	4603      	mov	r3, r0
 800bfdc:	71fb      	strb	r3, [r7, #7]
    uint8_t joinEui[SE_EUI_SIZE];
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddr = 0;
 800bfde:	2300      	movs	r3, #0
 800bfe0:	60fb      	str	r3, [r7, #12]

    SecureElementGetDevEui( devEui );
 800bfe2:	f107 0310 	add.w	r3, r7, #16
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	f000 fbda 	bl	800c7a0 <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 800bfec:	7c3b      	ldrb	r3, [r7, #16]
 800bfee:	7c7a      	ldrb	r2, [r7, #17]
 800bff0:	7cb9      	ldrb	r1, [r7, #18]
 800bff2:	7cf8      	ldrb	r0, [r7, #19]
 800bff4:	7d3c      	ldrb	r4, [r7, #20]
 800bff6:	7d7d      	ldrb	r5, [r7, #21]
 800bff8:	7dbe      	ldrb	r6, [r7, #22]
 800bffa:	f897 c017 	ldrb.w	ip, [r7, #23]
 800bffe:	f8cd c01c 	str.w	ip, [sp, #28]
 800c002:	9606      	str	r6, [sp, #24]
 800c004:	9505      	str	r5, [sp, #20]
 800c006:	9404      	str	r4, [sp, #16]
 800c008:	9003      	str	r0, [sp, #12]
 800c00a:	9102      	str	r1, [sp, #8]
 800c00c:	9201      	str	r2, [sp, #4]
 800c00e:	9300      	str	r3, [sp, #0]
 800c010:	4b24      	ldr	r3, [pc, #144]	; (800c0a4 <PrintIds+0xd0>)
 800c012:	2200      	movs	r2, #0
 800c014:	2100      	movs	r1, #0
 800c016:	2002      	movs	r0, #2
 800c018:	f011 fb3c 	bl	801d694 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetJoinEui( joinEui );
 800c01c:	f107 0318 	add.w	r3, r7, #24
 800c020:	4618      	mov	r0, r3
 800c022:	f000 fbed 	bl	800c800 <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 800c026:	7e3b      	ldrb	r3, [r7, #24]
 800c028:	7e7a      	ldrb	r2, [r7, #25]
 800c02a:	7eb9      	ldrb	r1, [r7, #26]
 800c02c:	7ef8      	ldrb	r0, [r7, #27]
 800c02e:	7f3c      	ldrb	r4, [r7, #28]
 800c030:	7f7d      	ldrb	r5, [r7, #29]
 800c032:	7fbe      	ldrb	r6, [r7, #30]
 800c034:	f897 c01f 	ldrb.w	ip, [r7, #31]
 800c038:	f8cd c01c 	str.w	ip, [sp, #28]
 800c03c:	9606      	str	r6, [sp, #24]
 800c03e:	9505      	str	r5, [sp, #20]
 800c040:	9404      	str	r4, [sp, #16]
 800c042:	9003      	str	r0, [sp, #12]
 800c044:	9102      	str	r1, [sp, #8]
 800c046:	9201      	str	r2, [sp, #4]
 800c048:	9300      	str	r3, [sp, #0]
 800c04a:	4b17      	ldr	r3, [pc, #92]	; (800c0a8 <PrintIds+0xd4>)
 800c04c:	2200      	movs	r2, #0
 800c04e:	2100      	movs	r1, #0
 800c050:	2002      	movs	r0, #2
 800c052:	f011 fb1f 	bl	801d694 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetDevAddr( mode, &devAddr );
 800c056:	f107 020c 	add.w	r2, r7, #12
 800c05a:	79fb      	ldrb	r3, [r7, #7]
 800c05c:	4611      	mov	r1, r2
 800c05e:	4618      	mov	r0, r3
 800c060:	f000 fc00 	bl	800c864 <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800c064:	f107 030c 	add.w	r3, r7, #12
 800c068:	3303      	adds	r3, #3
 800c06a:	781b      	ldrb	r3, [r3, #0]
 800c06c:	461a      	mov	r2, r3
 800c06e:	f107 030c 	add.w	r3, r7, #12
 800c072:	3302      	adds	r3, #2
 800c074:	781b      	ldrb	r3, [r3, #0]
 800c076:	4619      	mov	r1, r3
 800c078:	f107 030c 	add.w	r3, r7, #12
 800c07c:	3301      	adds	r3, #1
 800c07e:	781b      	ldrb	r3, [r3, #0]
 800c080:	4618      	mov	r0, r3
 800c082:	f107 030c 	add.w	r3, r7, #12
 800c086:	781b      	ldrb	r3, [r3, #0]
 800c088:	9303      	str	r3, [sp, #12]
 800c08a:	9002      	str	r0, [sp, #8]
 800c08c:	9101      	str	r1, [sp, #4]
 800c08e:	9200      	str	r2, [sp, #0]
 800c090:	4b06      	ldr	r3, [pc, #24]	; (800c0ac <PrintIds+0xd8>)
 800c092:	2200      	movs	r2, #0
 800c094:	2100      	movs	r1, #0
 800c096:	2002      	movs	r0, #2
 800c098:	f011 fafc 	bl	801d694 <UTIL_ADV_TRACE_COND_FSend>
            ( unsigned )( ( unsigned char * )( &devAddr ) )[3],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[2],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[1],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[0] );
}
 800c09c:	bf00      	nop
 800c09e:	3724      	adds	r7, #36	; 0x24
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0a4:	0801e2e8 	.word	0x0801e2e8
 800c0a8:	0801e328 	.word	0x0801e328
 800c0ac:	0801e368 	.word	0x0801e368

0800c0b0 <GetKeyByID>:

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800c0b0:	b480      	push	{r7}
 800c0b2:	b085      	sub	sp, #20
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	6039      	str	r1, [r7, #0]
 800c0ba:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c0bc:	2300      	movs	r3, #0
 800c0be:	73fb      	strb	r3, [r7, #15]
 800c0c0:	e01a      	b.n	800c0f8 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800c0c2:	4b12      	ldr	r3, [pc, #72]	; (800c10c <GetKeyByID+0x5c>)
 800c0c4:	6819      	ldr	r1, [r3, #0]
 800c0c6:	7bfa      	ldrb	r2, [r7, #15]
 800c0c8:	4613      	mov	r3, r2
 800c0ca:	011b      	lsls	r3, r3, #4
 800c0cc:	4413      	add	r3, r2
 800c0ce:	440b      	add	r3, r1
 800c0d0:	3318      	adds	r3, #24
 800c0d2:	781b      	ldrb	r3, [r3, #0]
 800c0d4:	79fa      	ldrb	r2, [r7, #7]
 800c0d6:	429a      	cmp	r2, r3
 800c0d8:	d10b      	bne.n	800c0f2 <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800c0da:	4b0c      	ldr	r3, [pc, #48]	; (800c10c <GetKeyByID+0x5c>)
 800c0dc:	6819      	ldr	r1, [r3, #0]
 800c0de:	7bfa      	ldrb	r2, [r7, #15]
 800c0e0:	4613      	mov	r3, r2
 800c0e2:	011b      	lsls	r3, r3, #4
 800c0e4:	4413      	add	r3, r2
 800c0e6:	3318      	adds	r3, #24
 800c0e8:	18ca      	adds	r2, r1, r3
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	e006      	b.n	800c100 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c0f2:	7bfb      	ldrb	r3, [r7, #15]
 800c0f4:	3301      	adds	r3, #1
 800c0f6:	73fb      	strb	r3, [r7, #15]
 800c0f8:	7bfb      	ldrb	r3, [r7, #15]
 800c0fa:	2b0a      	cmp	r3, #10
 800c0fc:	d9e1      	bls.n	800c0c2 <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c0fe:	2303      	movs	r3, #3
}
 800c100:	4618      	mov	r0, r3
 800c102:	3714      	adds	r7, #20
 800c104:	46bd      	mov	sp, r7
 800c106:	bc80      	pop	{r7}
 800c108:	4770      	bx	lr
 800c10a:	bf00      	nop
 800c10c:	20000568 	.word	0x20000568

0800c110 <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 800c110:	b590      	push	{r4, r7, lr}
 800c112:	b0d1      	sub	sp, #324	; 0x144
 800c114:	af00      	add	r7, sp, #0
 800c116:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 800c11a:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 800c11e:	6020      	str	r0, [r4, #0]
 800c120:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800c124:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800c128:	6001      	str	r1, [r0, #0]
 800c12a:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800c12e:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 800c132:	600a      	str	r2, [r1, #0]
 800c134:	461a      	mov	r2, r3
 800c136:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c13a:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800c13e:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800c140:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c144:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d003      	beq.n	800c156 <ComputeCmac+0x46>
 800c14e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800c152:	2b00      	cmp	r3, #0
 800c154:	d101      	bne.n	800c15a <ComputeCmac+0x4a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c156:	2302      	movs	r3, #2
 800c158:	e05d      	b.n	800c216 <ComputeCmac+0x106>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800c15a:	f107 0314 	add.w	r3, r7, #20
 800c15e:	4618      	mov	r0, r3
 800c160:	f7fe ff02 	bl	800af68 <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800c164:	f107 0210 	add.w	r2, r7, #16
 800c168:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c16c:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800c170:	781b      	ldrb	r3, [r3, #0]
 800c172:	4611      	mov	r1, r2
 800c174:	4618      	mov	r0, r3
 800c176:	f7ff ff9b 	bl	800c0b0 <GetKeyByID>
 800c17a:	4603      	mov	r3, r0
 800c17c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800c180:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800c184:	2b00      	cmp	r3, #0
 800c186:	d144      	bne.n	800c212 <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800c188:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c18c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	1c5a      	adds	r2, r3, #1
 800c194:	f107 0314 	add.w	r3, r7, #20
 800c198:	4611      	mov	r1, r2
 800c19a:	4618      	mov	r0, r3
 800c19c:	f7fe fefd 	bl	800af9a <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800c1a0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c1a4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d009      	beq.n	800c1c2 <ComputeCmac+0xb2>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 800c1ae:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c1b2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800c1b6:	f107 0014 	add.w	r0, r7, #20
 800c1ba:	2210      	movs	r2, #16
 800c1bc:	6819      	ldr	r1, [r3, #0]
 800c1be:	f7fe fefb 	bl	800afb8 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800c1c2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c1c6:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 800c1ca:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c1ce:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800c1d2:	f107 0014 	add.w	r0, r7, #20
 800c1d6:	6812      	ldr	r2, [r2, #0]
 800c1d8:	6819      	ldr	r1, [r3, #0]
 800c1da:	f7fe feed 	bl	800afb8 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800c1de:	f107 0214 	add.w	r2, r7, #20
 800c1e2:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800c1e6:	4611      	mov	r1, r2
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	f7fe ffa7 	bl	800b13c <AES_CMAC_Final>

        /* Bring into the required format */
        *cmac = GET_UINT32_LE( Cmac, 0 );
 800c1ee:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 800c1f2:	461a      	mov	r2, r3
 800c1f4:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800c1f8:	021b      	lsls	r3, r3, #8
 800c1fa:	431a      	orrs	r2, r3
 800c1fc:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800c200:	041b      	lsls	r3, r3, #16
 800c202:	431a      	orrs	r2, r3
 800c204:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800c208:	061b      	lsls	r3, r3, #24
 800c20a:	431a      	orrs	r2, r3
 800c20c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800c210:	601a      	str	r2, [r3, #0]
    if( rv != CKR_OK )
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800c212:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800c216:	4618      	mov	r0, r3
 800c218:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800c21c:	46bd      	mov	sp, r7
 800c21e:	bd90      	pop	{r4, r7, pc}

0800c220 <SecureElementInit>:
/* Exported functions ---------------------------------------------------------*/
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
 800c220:	b580      	push	{r7, lr}
 800c222:	b082      	sub	sp, #8
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d101      	bne.n	800c232 <SecureElementInit+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c22e:	2302      	movs	r3, #2
 800c230:	e00a      	b.n	800c248 <SecureElementInit+0x28>
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 800c232:	4a07      	ldr	r2, [pc, #28]	; (800c250 <SecureElementInit+0x30>)
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	6013      	str	r3, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 800c238:	4b05      	ldr	r3, [pc, #20]	; (800c250 <SecureElementInit+0x30>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	22d8      	movs	r2, #216	; 0xd8
 800c23e:	4905      	ldr	r1, [pc, #20]	; (800c254 <SecureElementInit+0x34>)
 800c240:	4618      	mov	r0, r3
 800c242:	f00c fe82 	bl	8018f4a <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 800c246:	2300      	movs	r3, #0
}
 800c248:	4618      	mov	r0, r3
 800c24a:	3708      	adds	r7, #8
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}
 800c250:	20000568 	.word	0x20000568
 800c254:	0801ecc0 	.word	0x0801ecc0

0800c258 <SecureElementInitMcuID>:

SecureElementStatus_t SecureElementInitMcuID( SecureElementGetUniqueId_t seGetUniqueId,
                                              SecureElementGetDevAddr_t seGetDevAddr )
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b086      	sub	sp, #24
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
 800c260:	6039      	str	r1, [r7, #0]
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddrABP = 0;
 800c262:	2300      	movs	r3, #0
 800c264:	60bb      	str	r3, [r7, #8]

    SecureElementGetDevEui( devEui );
 800c266:	f107 030c 	add.w	r3, r7, #12
 800c26a:	4618      	mov	r0, r3
 800c26c:	f000 fa98 	bl	800c7a0 <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 800c270:	f107 0308 	add.w	r3, r7, #8
 800c274:	4619      	mov	r1, r3
 800c276:	2001      	movs	r0, #1
 800c278:	f000 faf4 	bl	800c864 <SecureElementGetDevAddr>

    if( seGetUniqueId != NULL )
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d024      	beq.n	800c2cc <SecureElementInitMcuID+0x74>
    {
        bool id_init = false;
 800c282:	2300      	movs	r3, #0
 800c284:	75fb      	strb	r3, [r7, #23]
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800c286:	2300      	movs	r3, #0
 800c288:	75bb      	strb	r3, [r7, #22]
 800c28a:	e00c      	b.n	800c2a6 <SecureElementInitMcuID+0x4e>
        {
            if( devEui[index] != 0 )
 800c28c:	7dbb      	ldrb	r3, [r7, #22]
 800c28e:	3318      	adds	r3, #24
 800c290:	443b      	add	r3, r7
 800c292:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d002      	beq.n	800c2a0 <SecureElementInitMcuID+0x48>
            {
                id_init = true;
 800c29a:	2301      	movs	r3, #1
 800c29c:	75fb      	strb	r3, [r7, #23]
                break;
 800c29e:	e005      	b.n	800c2ac <SecureElementInitMcuID+0x54>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800c2a0:	7dbb      	ldrb	r3, [r7, #22]
 800c2a2:	3301      	adds	r3, #1
 800c2a4:	75bb      	strb	r3, [r7, #22]
 800c2a6:	7dbb      	ldrb	r3, [r7, #22]
 800c2a8:	2b07      	cmp	r3, #7
 800c2aa:	d9ef      	bls.n	800c28c <SecureElementInitMcuID+0x34>
            }
        }
        if( id_init == false )
 800c2ac:	7dfb      	ldrb	r3, [r7, #23]
 800c2ae:	f083 0301 	eor.w	r3, r3, #1
 800c2b2:	b2db      	uxtb	r3, r3
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d009      	beq.n	800c2cc <SecureElementInitMcuID+0x74>
        {
            /* Get a DevEUI from MCU unique ID */
            seGetUniqueId( devEui );
 800c2b8:	f107 020c 	add.w	r2, r7, #12
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	4610      	mov	r0, r2
 800c2c0:	4798      	blx	r3
            SecureElementSetDevEui( devEui );
 800c2c2:	f107 030c 	add.w	r3, r7, #12
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	f000 fa52 	bl	800c770 <SecureElementSetDevEui>
        }
    }

    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 800c2cc:	683b      	ldr	r3, [r7, #0]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d00c      	beq.n	800c2ec <SecureElementInitMcuID+0x94>
 800c2d2:	68bb      	ldr	r3, [r7, #8]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d109      	bne.n	800c2ec <SecureElementInitMcuID+0x94>
    {
        /* callback to dynamic DevAddr generation */
        seGetDevAddr( &devAddrABP );
 800c2d8:	f107 0208 	add.w	r2, r7, #8
 800c2dc:	683b      	ldr	r3, [r7, #0]
 800c2de:	4610      	mov	r0, r2
 800c2e0:	4798      	blx	r3
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 800c2e2:	68bb      	ldr	r3, [r7, #8]
 800c2e4:	4619      	mov	r1, r3
 800c2e6:	2001      	movs	r0, #1
 800c2e8:	f000 faa2 	bl	800c830 <SecureElementSetDevAddr>
    }

    return SECURE_ELEMENT_SUCCESS;
 800c2ec:	2300      	movs	r3, #0
}
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	3718      	adds	r7, #24
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bd80      	pop	{r7, pc}
	...

0800c2f8 <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800c2f8:	b480      	push	{r7}
 800c2fa:	b085      	sub	sp, #20
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	4603      	mov	r3, r0
 800c300:	6039      	str	r1, [r7, #0]
 800c302:	71fb      	strb	r3, [r7, #7]
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c304:	2300      	movs	r3, #0
 800c306:	73fb      	strb	r3, [r7, #15]
 800c308:	e01a      	b.n	800c340 <SecureElementGetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800c30a:	4b12      	ldr	r3, [pc, #72]	; (800c354 <SecureElementGetKeyByID+0x5c>)
 800c30c:	6819      	ldr	r1, [r3, #0]
 800c30e:	7bfa      	ldrb	r2, [r7, #15]
 800c310:	4613      	mov	r3, r2
 800c312:	011b      	lsls	r3, r3, #4
 800c314:	4413      	add	r3, r2
 800c316:	440b      	add	r3, r1
 800c318:	3318      	adds	r3, #24
 800c31a:	781b      	ldrb	r3, [r3, #0]
 800c31c:	79fa      	ldrb	r2, [r7, #7]
 800c31e:	429a      	cmp	r2, r3
 800c320:	d10b      	bne.n	800c33a <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800c322:	4b0c      	ldr	r3, [pc, #48]	; (800c354 <SecureElementGetKeyByID+0x5c>)
 800c324:	6819      	ldr	r1, [r3, #0]
 800c326:	7bfa      	ldrb	r2, [r7, #15]
 800c328:	4613      	mov	r3, r2
 800c32a:	011b      	lsls	r3, r3, #4
 800c32c:	4413      	add	r3, r2
 800c32e:	3318      	adds	r3, #24
 800c330:	18ca      	adds	r2, r1, r3
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800c336:	2300      	movs	r3, #0
 800c338:	e006      	b.n	800c348 <SecureElementGetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c33a:	7bfb      	ldrb	r3, [r7, #15]
 800c33c:	3301      	adds	r3, #1
 800c33e:	73fb      	strb	r3, [r7, #15]
 800c340:	7bfb      	ldrb	r3, [r7, #15]
 800c342:	2b0a      	cmp	r3, #10
 800c344:	d9e1      	bls.n	800c30a <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c346:	2303      	movs	r3, #3
}
 800c348:	4618      	mov	r0, r3
 800c34a:	3714      	adds	r7, #20
 800c34c:	46bd      	mov	sp, r7
 800c34e:	bc80      	pop	{r7}
 800c350:	4770      	bx	lr
 800c352:	bf00      	nop
 800c354:	20000568 	.word	0x20000568

0800c358 <SecureElementPrintKeys>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAWAN_KMS */

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	af00      	add	r7, sp, #0
    PrintKey( APP_KEY );
 800c35c:	2000      	movs	r0, #0
 800c35e:	f7ff fdab 	bl	800beb8 <PrintKey>
    PrintKey( NWK_KEY );
 800c362:	2001      	movs	r0, #1
 800c364:	f7ff fda8 	bl	800beb8 <PrintKey>
    PrintKey( APP_S_KEY );
 800c368:	2009      	movs	r0, #9
 800c36a:	f7ff fda5 	bl	800beb8 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800c36e:	2008      	movs	r0, #8
 800c370:	f7ff fda2 	bl	800beb8 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintIds( ACTIVATION_TYPE_NONE );
 800c374:	2000      	movs	r0, #0
 800c376:	f7ff fe2d 	bl	800bfd4 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800c37a:	2300      	movs	r3, #0
}
 800c37c:	4618      	mov	r0, r3
 800c37e:	bd80      	pop	{r7, pc}

0800c380 <SecureElementPrintSessionKeys>:

SecureElementStatus_t SecureElementPrintSessionKeys( ActivationType_t mode )
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b082      	sub	sp, #8
 800c384:	af00      	add	r7, sp, #0
 800c386:	4603      	mov	r3, r0
 800c388:	71fb      	strb	r3, [r7, #7]
    PrintKey( MC_ROOT_KEY );
 800c38a:	200b      	movs	r0, #11
 800c38c:	f7ff fd94 	bl	800beb8 <PrintKey>
    PrintKey( MC_KE_KEY );
 800c390:	200c      	movs	r0, #12
 800c392:	f7ff fd91 	bl	800beb8 <PrintKey>
    PrintKey( APP_S_KEY );
 800c396:	2009      	movs	r0, #9
 800c398:	f7ff fd8e 	bl	800beb8 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800c39c:	2008      	movs	r0, #8
 800c39e:	f7ff fd8b 	bl	800beb8 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintKey( DATABLOCK_INT_KEY );
 800c3a2:	200a      	movs	r0, #10
 800c3a4:	f7ff fd88 	bl	800beb8 <PrintKey>
    PrintIds( mode );
 800c3a8:	79fb      	ldrb	r3, [r7, #7]
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f7ff fe12 	bl	800bfd4 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800c3b0:	2300      	movs	r3, #0
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	3708      	adds	r7, #8
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bd80      	pop	{r7, pc}
	...

0800c3bc <SecureElementSetKey>:
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t *key )
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b088      	sub	sp, #32
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	6039      	str	r1, [r7, #0]
 800c3c6:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d101      	bne.n	800c3d2 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c3ce:	2302      	movs	r3, #2
 800c3d0:	e04c      	b.n	800c46c <SecureElementSetKey+0xb0>
    }

#if (LORAWAN_KMS == 0)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	77fb      	strb	r3, [r7, #31]
 800c3d6:	e045      	b.n	800c464 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800c3d8:	4b26      	ldr	r3, [pc, #152]	; (800c474 <SecureElementSetKey+0xb8>)
 800c3da:	6819      	ldr	r1, [r3, #0]
 800c3dc:	7ffa      	ldrb	r2, [r7, #31]
 800c3de:	4613      	mov	r3, r2
 800c3e0:	011b      	lsls	r3, r3, #4
 800c3e2:	4413      	add	r3, r2
 800c3e4:	440b      	add	r3, r1
 800c3e6:	3318      	adds	r3, #24
 800c3e8:	781b      	ldrb	r3, [r3, #0]
 800c3ea:	79fa      	ldrb	r2, [r7, #7]
 800c3ec:	429a      	cmp	r2, r3
 800c3ee:	d136      	bne.n	800c45e <SecureElementSetKey+0xa2>
        {
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if( keyID == MC_KEY_0 )
 800c3f0:	79fb      	ldrb	r3, [r7, #7]
 800c3f2:	2b0d      	cmp	r3, #13
 800c3f4:	d123      	bne.n	800c43e <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            {
                /* Decrypt the key if its a Mckey */
                SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800c3f6:	2306      	movs	r3, #6
 800c3f8:	77bb      	strb	r3, [r7, #30]
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	60fb      	str	r3, [r7, #12]
 800c3fe:	f107 0310 	add.w	r3, r7, #16
 800c402:	2200      	movs	r2, #0
 800c404:	601a      	str	r2, [r3, #0]
 800c406:	605a      	str	r2, [r3, #4]
 800c408:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 800c40a:	f107 030c 	add.w	r3, r7, #12
 800c40e:	220c      	movs	r2, #12
 800c410:	2110      	movs	r1, #16
 800c412:	6838      	ldr	r0, [r7, #0]
 800c414:	f000 f876 	bl	800c504 <SecureElementAesEncrypt>
 800c418:	4603      	mov	r3, r0
 800c41a:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800c41c:	4b15      	ldr	r3, [pc, #84]	; (800c474 <SecureElementSetKey+0xb8>)
 800c41e:	6819      	ldr	r1, [r3, #0]
 800c420:	7ffa      	ldrb	r2, [r7, #31]
 800c422:	4613      	mov	r3, r2
 800c424:	011b      	lsls	r3, r3, #4
 800c426:	4413      	add	r3, r2
 800c428:	3318      	adds	r3, #24
 800c42a:	440b      	add	r3, r1
 800c42c:	3301      	adds	r3, #1
 800c42e:	f107 010c 	add.w	r1, r7, #12
 800c432:	2210      	movs	r2, #16
 800c434:	4618      	mov	r0, r3
 800c436:	f00c fd88 	bl	8018f4a <memcpy1>
                return retval;
 800c43a:	7fbb      	ldrb	r3, [r7, #30]
 800c43c:	e016      	b.n	800c46c <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800c43e:	4b0d      	ldr	r3, [pc, #52]	; (800c474 <SecureElementSetKey+0xb8>)
 800c440:	6819      	ldr	r1, [r3, #0]
 800c442:	7ffa      	ldrb	r2, [r7, #31]
 800c444:	4613      	mov	r3, r2
 800c446:	011b      	lsls	r3, r3, #4
 800c448:	4413      	add	r3, r2
 800c44a:	3318      	adds	r3, #24
 800c44c:	440b      	add	r3, r1
 800c44e:	3301      	adds	r3, #1
 800c450:	2210      	movs	r2, #16
 800c452:	6839      	ldr	r1, [r7, #0]
 800c454:	4618      	mov	r0, r3
 800c456:	f00c fd78 	bl	8018f4a <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800c45a:	2300      	movs	r3, #0
 800c45c:	e006      	b.n	800c46c <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c45e:	7ffb      	ldrb	r3, [r7, #31]
 800c460:	3301      	adds	r3, #1
 800c462:	77fb      	strb	r3, [r7, #31]
 800c464:	7ffb      	ldrb	r3, [r7, #31]
 800c466:	2b0a      	cmp	r3, #10
 800c468:	d9b6      	bls.n	800c3d8 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c46a:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800c46c:	4618      	mov	r0, r3
 800c46e:	3720      	adds	r7, #32
 800c470:	46bd      	mov	sp, r7
 800c472:	bd80      	pop	{r7, pc}
 800c474:	20000568 	.word	0x20000568

0800c478 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b086      	sub	sp, #24
 800c47c:	af02      	add	r7, sp, #8
 800c47e:	60f8      	str	r0, [r7, #12]
 800c480:	60b9      	str	r1, [r7, #8]
 800c482:	607a      	str	r2, [r7, #4]
 800c484:	70fb      	strb	r3, [r7, #3]
    if( keyID >= MC_KE_KEY )
 800c486:	78fb      	ldrb	r3, [r7, #3]
 800c488:	2b0b      	cmp	r3, #11
 800c48a:	d901      	bls.n	800c490 <SecureElementComputeAesCmac+0x18>
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c48c:	2303      	movs	r3, #3
 800c48e:	e009      	b.n	800c4a4 <SecureElementComputeAesCmac+0x2c>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800c490:	78fa      	ldrb	r2, [r7, #3]
 800c492:	69bb      	ldr	r3, [r7, #24]
 800c494:	9300      	str	r3, [sp, #0]
 800c496:	4613      	mov	r3, r2
 800c498:	687a      	ldr	r2, [r7, #4]
 800c49a:	68b9      	ldr	r1, [r7, #8]
 800c49c:	68f8      	ldr	r0, [r7, #12]
 800c49e:	f7ff fe37 	bl	800c110 <ComputeCmac>
 800c4a2:	4603      	mov	r3, r0
}
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	3710      	adds	r7, #16
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	bd80      	pop	{r7, pc}

0800c4ac <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b088      	sub	sp, #32
 800c4b0:	af02      	add	r7, sp, #8
 800c4b2:	60f8      	str	r0, [r7, #12]
 800c4b4:	60b9      	str	r1, [r7, #8]
 800c4b6:	607a      	str	r2, [r7, #4]
 800c4b8:	70fb      	strb	r3, [r7, #3]
    if( buffer == NULL )
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d101      	bne.n	800c4c4 <SecureElementVerifyAesCmac+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c4c0:	2302      	movs	r3, #2
 800c4c2:	e01b      	b.n	800c4fc <SecureElementVerifyAesCmac+0x50>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800c4c4:	2306      	movs	r3, #6
 800c4c6:	75fb      	strb	r3, [r7, #23]
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800c4cc:	78fa      	ldrb	r2, [r7, #3]
 800c4ce:	f107 0310 	add.w	r3, r7, #16
 800c4d2:	9300      	str	r3, [sp, #0]
 800c4d4:	4613      	mov	r3, r2
 800c4d6:	68ba      	ldr	r2, [r7, #8]
 800c4d8:	68f9      	ldr	r1, [r7, #12]
 800c4da:	2000      	movs	r0, #0
 800c4dc:	f7ff fe18 	bl	800c110 <ComputeCmac>
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c4e4:	7dfb      	ldrb	r3, [r7, #23]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d001      	beq.n	800c4ee <SecureElementVerifyAesCmac+0x42>
    {
        return retval;
 800c4ea:	7dfb      	ldrb	r3, [r7, #23]
 800c4ec:	e006      	b.n	800c4fc <SecureElementVerifyAesCmac+0x50>
    }

    if( expectedCmac != compCmac )
 800c4ee:	693b      	ldr	r3, [r7, #16]
 800c4f0:	687a      	ldr	r2, [r7, #4]
 800c4f2:	429a      	cmp	r2, r3
 800c4f4:	d001      	beq.n	800c4fa <SecureElementVerifyAesCmac+0x4e>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800c4f6:	2301      	movs	r3, #1
 800c4f8:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800c4fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	3718      	adds	r7, #24
 800c500:	46bd      	mov	sp, r7
 800c502:	bd80      	pop	{r7, pc}

0800c504 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b0c2      	sub	sp, #264	; 0x108
 800c508:	af00      	add	r7, sp, #0
 800c50a:	60f8      	str	r0, [r7, #12]
 800c50c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c510:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 800c514:	6001      	str	r1, [r0, #0]
 800c516:	4611      	mov	r1, r2
 800c518:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800c51c:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800c520:	6013      	str	r3, [r2, #0]
 800c522:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c526:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 800c52a:	460a      	mov	r2, r1
 800c52c:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d006      	beq.n	800c542 <SecureElementAesEncrypt+0x3e>
 800c534:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c538:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d101      	bne.n	800c546 <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c542:	2302      	movs	r3, #2
 800c544:	e059      	b.n	800c5fa <SecureElementAesEncrypt+0xf6>
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 800c546:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c54a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	f003 030f 	and.w	r3, r3, #15
 800c554:	2b00      	cmp	r3, #0
 800c556:	d001      	beq.n	800c55c <SecureElementAesEncrypt+0x58>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800c558:	2305      	movs	r3, #5
 800c55a:	e04e      	b.n	800c5fa <SecureElementAesEncrypt+0xf6>
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800c55c:	f107 0314 	add.w	r3, r7, #20
 800c560:	22f0      	movs	r2, #240	; 0xf0
 800c562:	2100      	movs	r1, #0
 800c564:	4618      	mov	r0, r3
 800c566:	f00c fd2b 	bl	8018fc0 <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800c56a:	f107 0210 	add.w	r2, r7, #16
 800c56e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c572:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 800c576:	781b      	ldrb	r3, [r3, #0]
 800c578:	4611      	mov	r1, r2
 800c57a:	4618      	mov	r0, r3
 800c57c:	f7ff fd98 	bl	800c0b0 <GetKeyByID>
 800c580:	4603      	mov	r3, r0
 800c582:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800c586:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d133      	bne.n	800c5f6 <SecureElementAesEncrypt+0xf2>
    {
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 800c58e:	693b      	ldr	r3, [r7, #16]
 800c590:	3301      	adds	r3, #1
 800c592:	f107 0214 	add.w	r2, r7, #20
 800c596:	2110      	movs	r1, #16
 800c598:	4618      	mov	r0, r3
 800c59a:	f7ff fb65 	bl	800bc68 <lorawan_aes_set_key>

        uint8_t block = 0;
 800c59e:	2300      	movs	r3, #0
 800c5a0:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800c5a4:	e020      	b.n	800c5e8 <SecureElementAesEncrypt+0xe4>
        {
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 800c5a6:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800c5aa:	68fa      	ldr	r2, [r7, #12]
 800c5ac:	18d0      	adds	r0, r2, r3
 800c5ae:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800c5b2:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800c5b6:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800c5ba:	6812      	ldr	r2, [r2, #0]
 800c5bc:	4413      	add	r3, r2
 800c5be:	f107 0214 	add.w	r2, r7, #20
 800c5c2:	4619      	mov	r1, r3
 800c5c4:	f7ff fc2e 	bl	800be24 <lorawan_aes_encrypt>
            block = block + 16;
 800c5c8:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800c5cc:	3310      	adds	r3, #16
 800c5ce:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800c5d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5d6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800c5da:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800c5de:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800c5e2:	6812      	ldr	r2, [r2, #0]
 800c5e4:	3a10      	subs	r2, #16
 800c5e6:	601a      	str	r2, [r3, #0]
        while( size != 0 )
 800c5e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5ec:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d1d7      	bne.n	800c5a6 <SecureElementAesEncrypt+0xa2>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800c5f6:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800c600:	46bd      	mov	sp, r7
 800c602:	bd80      	pop	{r7, pc}

0800c604 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b088      	sub	sp, #32
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
 800c60c:	460b      	mov	r3, r1
 800c60e:	70fb      	strb	r3, [r7, #3]
 800c610:	4613      	mov	r3, r2
 800c612:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d101      	bne.n	800c61e <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c61a:	2302      	movs	r3, #2
 800c61c:	e02e      	b.n	800c67c <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800c61e:	2306      	movs	r3, #6
 800c620:	77fb      	strb	r3, [r7, #31]

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 800c622:	78bb      	ldrb	r3, [r7, #2]
 800c624:	2b0c      	cmp	r3, #12
 800c626:	d104      	bne.n	800c632 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800c628:	78fb      	ldrb	r3, [r7, #3]
 800c62a:	2b0b      	cmp	r3, #11
 800c62c:	d001      	beq.n	800c632 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c62e:	2303      	movs	r3, #3
 800c630:	e024      	b.n	800c67c <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 800c632:	2300      	movs	r3, #0
 800c634:	60fb      	str	r3, [r7, #12]
 800c636:	f107 0310 	add.w	r3, r7, #16
 800c63a:	2200      	movs	r2, #0
 800c63c:	601a      	str	r2, [r3, #0]
 800c63e:	605a      	str	r2, [r3, #4]
 800c640:	609a      	str	r2, [r3, #8]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 800c642:	f107 030c 	add.w	r3, r7, #12
 800c646:	78fa      	ldrb	r2, [r7, #3]
 800c648:	2110      	movs	r1, #16
 800c64a:	6878      	ldr	r0, [r7, #4]
 800c64c:	f7ff ff5a 	bl	800c504 <SecureElementAesEncrypt>
 800c650:	4603      	mov	r3, r0
 800c652:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c654:	7ffb      	ldrb	r3, [r7, #31]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d001      	beq.n	800c65e <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800c65a:	7ffb      	ldrb	r3, [r7, #31]
 800c65c:	e00e      	b.n	800c67c <SecureElementDeriveAndStoreKey+0x78>
    }

    /* Store key */
    retval = SecureElementSetKey( targetKeyID, key );
 800c65e:	f107 020c 	add.w	r2, r7, #12
 800c662:	78bb      	ldrb	r3, [r7, #2]
 800c664:	4611      	mov	r1, r2
 800c666:	4618      	mov	r0, r3
 800c668:	f7ff fea8 	bl	800c3bc <SecureElementSetKey>
 800c66c:	4603      	mov	r3, r0
 800c66e:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c670:	7ffb      	ldrb	r3, [r7, #31]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d001      	beq.n	800c67a <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800c676:	7ffb      	ldrb	r3, [r7, #31]
 800c678:	e000      	b.n	800c67c <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800c67a:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800c67c:	4618      	mov	r0, r3
 800c67e:	3720      	adds	r7, #32
 800c680:	46bd      	mov	sp, r7
 800c682:	bd80      	pop	{r7, pc}

0800c684 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b086      	sub	sp, #24
 800c688:	af00      	add	r7, sp, #0
 800c68a:	60b9      	str	r1, [r7, #8]
 800c68c:	607b      	str	r3, [r7, #4]
 800c68e:	4603      	mov	r3, r0
 800c690:	73fb      	strb	r3, [r7, #15]
 800c692:	4613      	mov	r3, r2
 800c694:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d005      	beq.n	800c6a8 <SecureElementProcessJoinAccept+0x24>
 800c69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d002      	beq.n	800c6a8 <SecureElementProcessJoinAccept+0x24>
 800c6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d101      	bne.n	800c6ac <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c6a8:	2302      	movs	r3, #2
 800c6aa:	e05c      	b.n	800c766 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800c6ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c6b0:	2b21      	cmp	r3, #33	; 0x21
 800c6b2:	d901      	bls.n	800c6b8 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800c6b4:	2305      	movs	r3, #5
 800c6b6:	e056      	b.n	800c766 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Determine decryption key */
    KeyIdentifier_t encKeyID = NWK_KEY;
 800c6b8:	2301      	movs	r3, #1
 800c6ba:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800c6bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c6c0:	b29b      	uxth	r3, r3
 800c6c2:	461a      	mov	r2, r3
 800c6c4:	6879      	ldr	r1, [r7, #4]
 800c6c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c6c8:	f00c fc3f 	bl	8018f4a <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	1c58      	adds	r0, r3, #1
 800c6d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c6d4:	3b01      	subs	r3, #1
 800c6d6:	4619      	mov	r1, r3
 800c6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6da:	3301      	adds	r3, #1
 800c6dc:	7dfa      	ldrb	r2, [r7, #23]
 800c6de:	f7ff ff11 	bl	800c504 <SecureElementAesEncrypt>
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d001      	beq.n	800c6ec <SecureElementProcessJoinAccept+0x68>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800c6e8:	2307      	movs	r3, #7
 800c6ea:	e03c      	b.n	800c766 <SecureElementProcessJoinAccept+0xe2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800c6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ee:	330b      	adds	r3, #11
 800c6f0:	781b      	ldrb	r3, [r3, #0]
 800c6f2:	09db      	lsrs	r3, r3, #7
 800c6f4:	b2da      	uxtb	r2, r3
 800c6f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6f8:	701a      	strb	r2, [r3, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 800c6fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c6fe:	3b04      	subs	r3, #4
 800c700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c702:	4413      	add	r3, r2
 800c704:	781b      	ldrb	r3, [r3, #0]
 800c706:	4619      	mov	r1, r3
 800c708:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c70c:	3b03      	subs	r3, #3
 800c70e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c710:	4413      	add	r3, r2
 800c712:	781b      	ldrb	r3, [r3, #0]
 800c714:	021b      	lsls	r3, r3, #8
 800c716:	ea41 0203 	orr.w	r2, r1, r3
 800c71a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c71e:	3b02      	subs	r3, #2
 800c720:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c722:	440b      	add	r3, r1
 800c724:	781b      	ldrb	r3, [r3, #0]
 800c726:	041b      	lsls	r3, r3, #16
 800c728:	431a      	orrs	r2, r3
 800c72a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c72e:	3b01      	subs	r3, #1
 800c730:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c732:	440b      	add	r3, r1
 800c734:	781b      	ldrb	r3, [r3, #0]
 800c736:	061b      	lsls	r3, r3, #24
 800c738:	4313      	orrs	r3, r2
 800c73a:	613b      	str	r3, [r7, #16]
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 800c73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c73e:	781b      	ldrb	r3, [r3, #0]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d10d      	bne.n	800c760 <SecureElementProcessJoinAccept+0xdc>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800c744:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c748:	3b04      	subs	r3, #4
 800c74a:	4619      	mov	r1, r3
 800c74c:	2301      	movs	r3, #1
 800c74e:	693a      	ldr	r2, [r7, #16]
 800c750:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c752:	f7ff feab 	bl	800c4ac <SecureElementVerifyAesCmac>
 800c756:	4603      	mov	r3, r0
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d003      	beq.n	800c764 <SecureElementProcessJoinAccept+0xe0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800c75c:	2301      	movs	r3, #1
 800c75e:	e002      	b.n	800c766 <SecureElementProcessJoinAccept+0xe2>
        }
    }
#endif /* LORAMAC_VERSION */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800c760:	2304      	movs	r3, #4
 800c762:	e000      	b.n	800c766 <SecureElementProcessJoinAccept+0xe2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800c764:	2300      	movs	r3, #0
}
 800c766:	4618      	mov	r0, r3
 800c768:	3718      	adds	r7, #24
 800c76a:	46bd      	mov	sp, r7
 800c76c:	bd80      	pop	{r7, pc}
	...

0800c770 <SecureElementSetDevEui>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b082      	sub	sp, #8
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d101      	bne.n	800c782 <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c77e:	2302      	movs	r3, #2
 800c780:	e007      	b.n	800c792 <SecureElementSetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 800c782:	4b06      	ldr	r3, [pc, #24]	; (800c79c <SecureElementSetDevEui+0x2c>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	2208      	movs	r2, #8
 800c788:	6879      	ldr	r1, [r7, #4]
 800c78a:	4618      	mov	r0, r3
 800c78c:	f00c fbdd 	bl	8018f4a <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c790:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800c792:	4618      	mov	r0, r3
 800c794:	3708      	adds	r7, #8
 800c796:	46bd      	mov	sp, r7
 800c798:	bd80      	pop	{r7, pc}
 800c79a:	bf00      	nop
 800c79c:	20000568 	.word	0x20000568

0800c7a0 <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b082      	sub	sp, #8
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d101      	bne.n	800c7b2 <SecureElementGetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c7ae:	2302      	movs	r3, #2
 800c7b0:	e007      	b.n	800c7c2 <SecureElementGetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 800c7b2:	4b06      	ldr	r3, [pc, #24]	; (800c7cc <SecureElementGetDevEui+0x2c>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	2208      	movs	r2, #8
 800c7b8:	4619      	mov	r1, r3
 800c7ba:	6878      	ldr	r0, [r7, #4]
 800c7bc:	f00c fbc5 	bl	8018f4a <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c7c0:	2300      	movs	r3, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	3708      	adds	r7, #8
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	bd80      	pop	{r7, pc}
 800c7ca:	bf00      	nop
 800c7cc:	20000568 	.word	0x20000568

0800c7d0 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b082      	sub	sp, #8
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d101      	bne.n	800c7e2 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c7de:	2302      	movs	r3, #2
 800c7e0:	e008      	b.n	800c7f4 <SecureElementSetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 800c7e2:	4b06      	ldr	r3, [pc, #24]	; (800c7fc <SecureElementSetJoinEui+0x2c>)
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	3308      	adds	r3, #8
 800c7e8:	2208      	movs	r2, #8
 800c7ea:	6879      	ldr	r1, [r7, #4]
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	f00c fbac 	bl	8018f4a <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c7f2:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	3708      	adds	r7, #8
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	bd80      	pop	{r7, pc}
 800c7fc:	20000568 	.word	0x20000568

0800c800 <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
 800c800:	b580      	push	{r7, lr}
 800c802:	b082      	sub	sp, #8
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d101      	bne.n	800c812 <SecureElementGetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c80e:	2302      	movs	r3, #2
 800c810:	e008      	b.n	800c824 <SecureElementGetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 800c812:	4b06      	ldr	r3, [pc, #24]	; (800c82c <SecureElementGetJoinEui+0x2c>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	3308      	adds	r3, #8
 800c818:	2208      	movs	r2, #8
 800c81a:	4619      	mov	r1, r3
 800c81c:	6878      	ldr	r0, [r7, #4]
 800c81e:	f00c fb94 	bl	8018f4a <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c822:	2300      	movs	r3, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800c824:	4618      	mov	r0, r3
 800c826:	3708      	adds	r7, #8
 800c828:	46bd      	mov	sp, r7
 800c82a:	bd80      	pop	{r7, pc}
 800c82c:	20000568 	.word	0x20000568

0800c830 <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
 800c830:	b480      	push	{r7}
 800c832:	b083      	sub	sp, #12
 800c834:	af00      	add	r7, sp, #0
 800c836:	4603      	mov	r3, r0
 800c838:	6039      	str	r1, [r7, #0]
 800c83a:	71fb      	strb	r3, [r7, #7]
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 800c83c:	79fb      	ldrb	r3, [r7, #7]
 800c83e:	2b02      	cmp	r3, #2
 800c840:	d104      	bne.n	800c84c <SecureElementSetDevAddr+0x1c>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 800c842:	4b07      	ldr	r3, [pc, #28]	; (800c860 <SecureElementSetDevAddr+0x30>)
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	683a      	ldr	r2, [r7, #0]
 800c848:	611a      	str	r2, [r3, #16]
 800c84a:	e003      	b.n	800c854 <SecureElementSetDevAddr+0x24>
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 800c84c:	4b04      	ldr	r3, [pc, #16]	; (800c860 <SecureElementSetDevAddr+0x30>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	683a      	ldr	r2, [r7, #0]
 800c852:	615a      	str	r2, [r3, #20]
    }

    return SECURE_ELEMENT_SUCCESS;
 800c854:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800c856:	4618      	mov	r0, r3
 800c858:	370c      	adds	r7, #12
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bc80      	pop	{r7}
 800c85e:	4770      	bx	lr
 800c860:	20000568 	.word	0x20000568

0800c864 <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
 800c864:	b480      	push	{r7}
 800c866:	b083      	sub	sp, #12
 800c868:	af00      	add	r7, sp, #0
 800c86a:	4603      	mov	r3, r0
 800c86c:	6039      	str	r1, [r7, #0]
 800c86e:	71fb      	strb	r3, [r7, #7]
    if( devAddr == NULL )
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d101      	bne.n	800c87a <SecureElementGetDevAddr+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c876:	2302      	movs	r3, #2
 800c878:	e00e      	b.n	800c898 <SecureElementGetDevAddr+0x34>
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 800c87a:	79fb      	ldrb	r3, [r7, #7]
 800c87c:	2b02      	cmp	r3, #2
 800c87e:	d105      	bne.n	800c88c <SecureElementGetDevAddr+0x28>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 800c880:	4b08      	ldr	r3, [pc, #32]	; (800c8a4 <SecureElementGetDevAddr+0x40>)
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	691a      	ldr	r2, [r3, #16]
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	601a      	str	r2, [r3, #0]
 800c88a:	e004      	b.n	800c896 <SecureElementGetDevAddr+0x32>
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 800c88c:	4b05      	ldr	r3, [pc, #20]	; (800c8a4 <SecureElementGetDevAddr+0x40>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	695a      	ldr	r2, [r3, #20]
 800c892:	683b      	ldr	r3, [r7, #0]
 800c894:	601a      	str	r2, [r3, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 800c896:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800c898:	4618      	mov	r0, r3
 800c89a:	370c      	adds	r7, #12
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bc80      	pop	{r7}
 800c8a0:	4770      	bx	lr
 800c8a2:	bf00      	nop
 800c8a4:	20000568 	.word	0x20000568

0800c8a8 <LmHandlerInit>:
static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity );
#endif /* LORAMAC_VERSION */

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b082      	sub	sp, #8
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
 800c8b0:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800c8b2:	4a29      	ldr	r2, [pc, #164]	; (800c958 <LmHandlerInit+0xb0>)
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800c8b8:	4b28      	ldr	r3, [pc, #160]	; (800c95c <LmHandlerInit+0xb4>)
 800c8ba:	4a29      	ldr	r2, [pc, #164]	; (800c960 <LmHandlerInit+0xb8>)
 800c8bc:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800c8be:	4b27      	ldr	r3, [pc, #156]	; (800c95c <LmHandlerInit+0xb4>)
 800c8c0:	4a28      	ldr	r2, [pc, #160]	; (800c964 <LmHandlerInit+0xbc>)
 800c8c2:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800c8c4:	4b25      	ldr	r3, [pc, #148]	; (800c95c <LmHandlerInit+0xb4>)
 800c8c6:	4a28      	ldr	r2, [pc, #160]	; (800c968 <LmHandlerInit+0xc0>)
 800c8c8:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800c8ca:	4b24      	ldr	r3, [pc, #144]	; (800c95c <LmHandlerInit+0xb4>)
 800c8cc:	4a27      	ldr	r2, [pc, #156]	; (800c96c <LmHandlerInit+0xc4>)
 800c8ce:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800c8d0:	4b21      	ldr	r3, [pc, #132]	; (800c958 <LmHandlerInit+0xb0>)
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	4a26      	ldr	r2, [pc, #152]	; (800c970 <LmHandlerInit+0xc8>)
 800c8d8:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800c8da:	4b1f      	ldr	r3, [pc, #124]	; (800c958 <LmHandlerInit+0xb0>)
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	685b      	ldr	r3, [r3, #4]
 800c8e0:	4a23      	ldr	r2, [pc, #140]	; (800c970 <LmHandlerInit+0xc8>)
 800c8e2:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800c8e4:	4b1c      	ldr	r3, [pc, #112]	; (800c958 <LmHandlerInit+0xb0>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	689b      	ldr	r3, [r3, #8]
 800c8ea:	4a21      	ldr	r2, [pc, #132]	; (800c970 <LmHandlerInit+0xc8>)
 800c8ec:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 800c8ee:	4b1a      	ldr	r3, [pc, #104]	; (800c958 <LmHandlerInit+0xb0>)
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	68db      	ldr	r3, [r3, #12]
 800c8f4:	4a1e      	ldr	r2, [pc, #120]	; (800c970 <LmHandlerInit+0xc8>)
 800c8f6:	60d3      	str	r3, [r2, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800c8f8:	4b1d      	ldr	r3, [pc, #116]	; (800c970 <LmHandlerInit+0xc8>)
 800c8fa:	4a1e      	ldr	r2, [pc, #120]	; (800c974 <LmHandlerInit+0xcc>)
 800c8fc:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800c8fe:	4b16      	ldr	r3, [pc, #88]	; (800c958 <LmHandlerInit+0xb0>)
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	699b      	ldr	r3, [r3, #24]
 800c904:	4a1a      	ldr	r2, [pc, #104]	; (800c970 <LmHandlerInit+0xc8>)
 800c906:	6153      	str	r3, [r2, #20]

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	4a1b      	ldr	r2, [pc, #108]	; (800c978 <LmHandlerInit+0xd0>)
 800c90c:	6013      	str	r3, [r2, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 800c90e:	4b12      	ldr	r3, [pc, #72]	; (800c958 <LmHandlerInit+0xb0>)
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c914:	4a18      	ldr	r2, [pc, #96]	; (800c978 <LmHandlerInit+0xd0>)
 800c916:	6053      	str	r3, [r2, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
 800c918:	4b17      	ldr	r3, [pc, #92]	; (800c978 <LmHandlerInit+0xd0>)
 800c91a:	4a18      	ldr	r2, [pc, #96]	; (800c97c <LmHandlerInit+0xd4>)
 800c91c:	609a      	str	r2, [r3, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
 800c91e:	4b16      	ldr	r3, [pc, #88]	; (800c978 <LmHandlerInit+0xd0>)
 800c920:	4a17      	ldr	r2, [pc, #92]	; (800c980 <LmHandlerInit+0xd8>)
 800c922:	60da      	str	r2, [r3, #12]
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 800c924:	4914      	ldr	r1, [pc, #80]	; (800c978 <LmHandlerInit+0xd0>)
 800c926:	2000      	movs	r0, #0
 800c928:	f000 fdb4 	bl	800d494 <LmHandlerPackageRegister>
 800c92c:	4603      	mov	r3, r0
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d002      	beq.n	800c938 <LmHandlerInit+0x90>
    {
        return LORAMAC_HANDLER_ERROR;
 800c932:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c936:	e00a      	b.n	800c94e <LmHandlerInit+0xa6>
    }

    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 800c938:	463b      	mov	r3, r7
 800c93a:	4618      	mov	r0, r3
 800c93c:	f001 fd2a 	bl	800e394 <LmhpPackagesRegistrationInit>
 800c940:	4603      	mov	r3, r0
 800c942:	2b00      	cmp	r3, #0
 800c944:	d002      	beq.n	800c94c <LmHandlerInit+0xa4>
    {
        return LORAMAC_HANDLER_ERROR;
 800c946:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c94a:	e000      	b.n	800c94e <LmHandlerInit+0xa6>
    }

    return LORAMAC_HANDLER_SUCCESS;
 800c94c:	2300      	movs	r3, #0
}
 800c94e:	4618      	mov	r0, r3
 800c950:	3708      	adds	r7, #8
 800c952:	46bd      	mov	sp, r7
 800c954:	bd80      	pop	{r7, pc}
 800c956:	bf00      	nop
 800c958:	200005c0 	.word	0x200005c0
 800c95c:	200005c4 	.word	0x200005c4
 800c960:	0800d16d 	.word	0x0800d16d
 800c964:	0800d1e1 	.word	0x0800d1e1
 800c968:	0800d2b1 	.word	0x0800d2b1
 800c96c:	0800d401 	.word	0x0800d401
 800c970:	200005d4 	.word	0x200005d4
 800c974:	0800d941 	.word	0x0800d941
 800c978:	20000584 	.word	0x20000584
 800c97c:	0800d755 	.word	0x0800d755
 800c980:	0800d78d 	.word	0x0800d78d

0800c984 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b092      	sub	sp, #72	; 0x48
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 800c98c:	2218      	movs	r2, #24
 800c98e:	6879      	ldr	r1, [r7, #4]
 800c990:	4884      	ldr	r0, [pc, #528]	; (800cba4 <LmHandlerConfigure+0x220>)
 800c992:	f00c fada 	bl	8018f4a <memcpy1>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    IsUplinkTxPending = false;
 800c996:	4b84      	ldr	r3, [pc, #528]	; (800cba8 <LmHandlerConfigure+0x224>)
 800c998:	2200      	movs	r2, #0
 800c99a:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800c99c:	f7fe faa2 	bl	800aee4 <LoraInfo_GetPtr>
 800c9a0:	6478      	str	r0, [r7, #68]	; 0x44

    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 800c9a2:	4b80      	ldr	r3, [pc, #512]	; (800cba4 <LmHandlerConfigure+0x220>)
 800c9a4:	781b      	ldrb	r3, [r3, #0]
 800c9a6:	461a      	mov	r2, r3
 800c9a8:	2301      	movs	r3, #1
 800c9aa:	4093      	lsls	r3, r2
 800c9ac:	461a      	mov	r2, r3
 800c9ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c9b0:	685b      	ldr	r3, [r3, #4]
 800c9b2:	4013      	ands	r3, r2
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d106      	bne.n	800c9c6 <LmHandlerConfigure+0x42>
    {
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 800c9b8:	4b7c      	ldr	r3, [pc, #496]	; (800cbac <LmHandlerConfigure+0x228>)
 800c9ba:	2201      	movs	r2, #1
 800c9bc:	2100      	movs	r1, #0
 800c9be:	2000      	movs	r0, #0
 800c9c0:	f010 fe68 	bl	801d694 <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 800c9c4:	e7fe      	b.n	800c9c4 <LmHandlerConfigure+0x40>
    }

    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 800c9c6:	4b77      	ldr	r3, [pc, #476]	; (800cba4 <LmHandlerConfigure+0x220>)
 800c9c8:	781b      	ldrb	r3, [r3, #0]
 800c9ca:	461a      	mov	r2, r3
 800c9cc:	4978      	ldr	r1, [pc, #480]	; (800cbb0 <LmHandlerConfigure+0x22c>)
 800c9ce:	4879      	ldr	r0, [pc, #484]	; (800cbb4 <LmHandlerConfigure+0x230>)
 800c9d0:	f004 ffd4 	bl	801197c <LoRaMacInitialization>
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d002      	beq.n	800c9e0 <LmHandlerConfigure+0x5c>
    {
        return LORAMAC_HANDLER_ERROR;
 800c9da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c9de:	e0dc      	b.n	800cb9a <LmHandlerConfigure+0x216>
    }

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    /* Try the restore context from the Backup RAM structure if data retention is available */
    mibReq.Type = MIB_NVM_CTXS;
 800c9e0:	2327      	movs	r3, #39	; 0x27
 800c9e2:	763b      	strb	r3, [r7, #24]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800c9e4:	f107 0318 	add.w	r3, r7, #24
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	f005 fd53 	bl	8012494 <LoRaMacMibSetRequestConfirm>
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d103      	bne.n	800c9fc <LmHandlerConfigure+0x78>
    {
        CtxRestoreDone = true;
 800c9f4:	4b70      	ldr	r3, [pc, #448]	; (800cbb8 <LmHandlerConfigure+0x234>)
 800c9f6:	2201      	movs	r2, #1
 800c9f8:	701a      	strb	r2, [r3, #0]
 800c9fa:	e02a      	b.n	800ca52 <LmHandlerConfigure+0xce>
    }
    else
    {
        /* Restore context data backup from user callback (stored in FLASH) */
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800c9fc:	2328      	movs	r3, #40	; 0x28
 800c9fe:	763b      	strb	r3, [r7, #24]
        if( LmHandlerCallbacks->OnRestoreContextRequest != NULL )
 800ca00:	4b6e      	ldr	r3, [pc, #440]	; (800cbbc <LmHandlerConfigure+0x238>)
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	691b      	ldr	r3, [r3, #16]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d00c      	beq.n	800ca24 <LmHandlerConfigure+0xa0>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 800ca0a:	f107 0318 	add.w	r3, r7, #24
 800ca0e:	4618      	mov	r0, r3
 800ca10:	f005 fb68 	bl	80120e4 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest( mibReq.Param.BackupContexts, sizeof( LoRaMacNvmData_t ) );
 800ca14:	4b69      	ldr	r3, [pc, #420]	; (800cbbc <LmHandlerConfigure+0x238>)
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	691b      	ldr	r3, [r3, #16]
 800ca1a:	69fa      	ldr	r2, [r7, #28]
 800ca1c:	f240 51cc 	movw	r1, #1484	; 0x5cc
 800ca20:	4610      	mov	r0, r2
 800ca22:	4798      	blx	r3
        }
        /* Restore context data from backup to main nvm structure */
        mibReq.Type = MIB_NVM_CTXS;
 800ca24:	2327      	movs	r3, #39	; 0x27
 800ca26:	763b      	strb	r3, [r7, #24]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800ca28:	f107 0318 	add.w	r3, r7, #24
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	f005 fd31 	bl	8012494 <LoRaMacMibSetRequestConfirm>
 800ca32:	4603      	mov	r3, r0
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d10c      	bne.n	800ca52 <LmHandlerConfigure+0xce>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800ca38:	2301      	movs	r3, #1
 800ca3a:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800ca3c:	f107 0318 	add.w	r3, r7, #24
 800ca40:	4618      	mov	r0, r3
 800ca42:	f005 fb4f 	bl	80120e4 <LoRaMacMibGetRequestConfirm>
            if( mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE )
 800ca46:	7f3b      	ldrb	r3, [r7, #28]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d002      	beq.n	800ca52 <LmHandlerConfigure+0xce>
            {
                CtxRestoreDone = true;
 800ca4c:	4b5a      	ldr	r3, [pc, #360]	; (800cbb8 <LmHandlerConfigure+0x234>)
 800ca4e:	2201      	movs	r2, #1
 800ca50:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if( CtxRestoreDone == true )
 800ca52:	4b59      	ldr	r3, [pc, #356]	; (800cbb8 <LmHandlerConfigure+0x234>)
 800ca54:	781b      	ldrb	r3, [r3, #0]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d022      	beq.n	800caa0 <LmHandlerConfigure+0x11c>
    {
        if( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800ca5a:	4b58      	ldr	r3, [pc, #352]	; (800cbbc <LmHandlerConfigure+0x238>)
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	69db      	ldr	r3, [r3, #28]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d004      	beq.n	800ca6e <LmHandlerConfigure+0xea>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800ca64:	4b55      	ldr	r3, [pc, #340]	; (800cbbc <LmHandlerConfigure+0x238>)
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	69db      	ldr	r3, [r3, #28]
 800ca6a:	2000      	movs	r0, #0
 800ca6c:	4798      	blx	r3
        }

        mibReq.Type = MIB_NVM_CTXS;
 800ca6e:	2327      	movs	r3, #39	; 0x27
 800ca70:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800ca72:	f107 0318 	add.w	r3, r7, #24
 800ca76:	4618      	mov	r0, r3
 800ca78:	f005 fb34 	bl	80120e4 <LoRaMacMibGetRequestConfirm>
        LoRaMacNvmData_t *current_nvm = mibReq.Param.Contexts;
 800ca7c:	69fb      	ldr	r3, [r7, #28]
 800ca7e:	643b      	str	r3, [r7, #64]	; 0x40

        LmHandlerParams.ActiveRegion = current_nvm->MacGroup2.Region;
 800ca80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca82:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800ca86:	4b47      	ldr	r3, [pc, #284]	; (800cba4 <LmHandlerConfigure+0x220>)
 800ca88:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = current_nvm->MacGroup2.DeviceClass;
 800ca8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca8c:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 800ca90:	4b44      	ldr	r3, [pc, #272]	; (800cba4 <LmHandlerConfigure+0x220>)
 800ca92:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
 800ca94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca96:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 800ca9a:	4b42      	ldr	r3, [pc, #264]	; (800cba4 <LmHandlerConfigure+0x220>)
 800ca9c:	709a      	strb	r2, [r3, #2]
 800ca9e:	e008      	b.n	800cab2 <LmHandlerConfigure+0x12e>
    }
    else
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
    {
        mibReq.Type = MIB_NET_ID;
 800caa0:	2305      	movs	r3, #5
 800caa2:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800caa4:	2300      	movs	r3, #0
 800caa6:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800caa8:	f107 0318 	add.w	r3, r7, #24
 800caac:	4618      	mov	r0, r3
 800caae:	f005 fcf1 	bl	8012494 <LoRaMacMibSetRequestConfirm>
    }

    /* Restore ID struct from NVM or Init from callbacks */
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 800cab2:	4b3f      	ldr	r3, [pc, #252]	; (800cbb0 <LmHandlerConfigure+0x22c>)
 800cab4:	689b      	ldr	r3, [r3, #8]
 800cab6:	4a3e      	ldr	r2, [pc, #248]	; (800cbb0 <LmHandlerConfigure+0x22c>)
 800cab8:	68d2      	ldr	r2, [r2, #12]
 800caba:	4611      	mov	r1, r2
 800cabc:	4618      	mov	r0, r3
 800cabe:	f7ff fbcb 	bl	800c258 <SecureElementInitMcuID>
 800cac2:	4603      	mov	r3, r0
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d002      	beq.n	800cace <LmHandlerConfigure+0x14a>
    {
        return LORAMAC_HANDLER_ERROR;
 800cac8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cacc:	e065      	b.n	800cb9a <LmHandlerConfigure+0x216>
    }

    /* Read secure-element DEV_EUI, JOIN_EUI and DEV_ADDR values. */
    mibReq.Type = MIB_DEV_ADDR;
 800cace:	2306      	movs	r3, #6
 800cad0:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800cad2:	f107 0318 	add.w	r3, r7, #24
 800cad6:	4618      	mov	r0, r3
 800cad8:	f005 fb04 	bl	80120e4 <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800cadc:	69fb      	ldr	r3, [r7, #28]
 800cade:	4a38      	ldr	r2, [pc, #224]	; (800cbc0 <LmHandlerConfigure+0x23c>)
 800cae0:	6153      	str	r3, [r2, #20]

    /* Override DevAddress value after init from callbacks */
    LoRaMacMibSetRequestConfirm( &mibReq );
 800cae2:	f107 0318 	add.w	r3, r7, #24
 800cae6:	4618      	mov	r0, r3
 800cae8:	f005 fcd4 	bl	8012494 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_DEV_EUI;
 800caec:	2302      	movs	r3, #2
 800caee:	763b      	strb	r3, [r7, #24]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 800caf0:	4b33      	ldr	r3, [pc, #204]	; (800cbc0 <LmHandlerConfigure+0x23c>)
 800caf2:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800caf4:	f107 0318 	add.w	r3, r7, #24
 800caf8:	4618      	mov	r0, r3
 800cafa:	f005 faf3 	bl	80120e4 <LoRaMacMibGetRequestConfirm>

    mibReq.Type = MIB_JOIN_EUI;
 800cafe:	2303      	movs	r3, #3
 800cb00:	763b      	strb	r3, [r7, #24]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 800cb02:	4b30      	ldr	r3, [pc, #192]	; (800cbc4 <LmHandlerConfigure+0x240>)
 800cb04:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800cb06:	f107 0318 	add.w	r3, r7, #24
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	f005 faea 	bl	80120e4 <LoRaMacMibGetRequestConfirm>

    SecureElementPrintKeys();
 800cb10:	f7ff fc22 	bl	800c358 <SecureElementPrintKeys>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG( TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n" );
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800cb14:	230f      	movs	r3, #15
 800cb16:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800cb18:	2301      	movs	r3, #1
 800cb1a:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800cb1c:	f107 0318 	add.w	r3, r7, #24
 800cb20:	4618      	mov	r0, r3
 800cb22:	f005 fcb7 	bl	8012494 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800cb26:	2310      	movs	r3, #16
 800cb28:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800cb2e:	f107 0318 	add.w	r3, r7, #24
 800cb32:	4618      	mov	r0, r3
 800cb34:	f005 fcae 	bl	8012494 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800cb38:	2304      	movs	r3, #4
 800cb3a:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800cb3c:	4b19      	ldr	r3, [pc, #100]	; (800cba4 <LmHandlerConfigure+0x220>)
 800cb3e:	789b      	ldrb	r3, [r3, #2]
 800cb40:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800cb42:	f107 0318 	add.w	r3, r7, #24
 800cb46:	4618      	mov	r0, r3
 800cb48:	f005 fca4 	bl	8012494 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800cb4c:	233a      	movs	r3, #58	; 0x3a
 800cb4e:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800cb50:	4b14      	ldr	r3, [pc, #80]	; (800cba4 <LmHandlerConfigure+0x220>)
 800cb52:	695b      	ldr	r3, [r3, #20]
 800cb54:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800cb56:	f107 0318 	add.w	r3, r7, #24
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	f005 fc9a 	bl	8012494 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800cb60:	230f      	movs	r3, #15
 800cb62:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800cb64:	4b0f      	ldr	r3, [pc, #60]	; (800cba4 <LmHandlerConfigure+0x220>)
 800cb66:	781b      	ldrb	r3, [r3, #0]
 800cb68:	f107 0210 	add.w	r2, r7, #16
 800cb6c:	4611      	mov	r1, r2
 800cb6e:	4618      	mov	r0, r3
 800cb70:	f008 fbea 	bl	8015348 <RegionGetPhyParam>
 800cb74:	4603      	mov	r3, r0
 800cb76:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	bf14      	ite	ne
 800cb7e:	2301      	movne	r3, #1
 800cb80:	2300      	moveq	r3, #0
 800cb82:	b2da      	uxtb	r2, r3
 800cb84:	4b07      	ldr	r3, [pc, #28]	; (800cba4 <LmHandlerConfigure+0x220>)
 800cb86:	71da      	strb	r2, [r3, #7]

    /* Set system maximum tolerated rx error in milliseconds */
    LmHandlerSetSystemMaxRxError( 20 );
 800cb88:	2014      	movs	r0, #20
 800cb8a:	f000 fad7 	bl	800d13c <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800cb8e:	4b05      	ldr	r3, [pc, #20]	; (800cba4 <LmHandlerConfigure+0x220>)
 800cb90:	79db      	ldrb	r3, [r3, #7]
 800cb92:	4618      	mov	r0, r3
 800cb94:	f006 faf8 	bl	8013188 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800cb98:	2300      	movs	r3, #0
}
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	3748      	adds	r7, #72	; 0x48
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bd80      	pop	{r7, pc}
 800cba2:	bf00      	nop
 800cba4:	200005a8 	.word	0x200005a8
 800cba8:	200005f0 	.word	0x200005f0
 800cbac:	0801e394 	.word	0x0801e394
 800cbb0:	200005d4 	.word	0x200005d4
 800cbb4:	200005c4 	.word	0x200005c4
 800cbb8:	200006e6 	.word	0x200006e6
 800cbbc:	200005c0 	.word	0x200005c0
 800cbc0:	2000056c 	.word	0x2000056c
 800cbc4:	20000574 	.word	0x20000574

0800cbc8 <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b082      	sub	sp, #8
 800cbcc:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    /* Processes the LoRaMac events */
    LoRaMacProcess( );
 800cbce:	f002 fe49 	bl	800f864 <LoRaMacProcess>

    /* Call all packages process functions */
    LmHandlerPackagesProcess( );
 800cbd2:	f000 fd8b 	bl	800d6ec <LmHandlerPackagesProcess>

    /* Check if a package transmission is pending. */
    /* If it is the case exit function earlier */
    if( LmHandlerPackageIsTxPending( ) == true )
 800cbd6:	f000 fd5f 	bl	800d698 <LmHandlerPackageIsTxPending>
 800cbda:	4603      	mov	r3, r0
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d117      	bne.n	800cc10 <LmHandlerProcess+0x48>
        return;
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    /* If a MAC layer scheduled uplink is still pending try to send it. */
    if( IsUplinkTxPending == true )
 800cbe0:	4b0d      	ldr	r3, [pc, #52]	; (800cc18 <LmHandlerProcess+0x50>)
 800cbe2:	781b      	ldrb	r3, [r3, #0]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d014      	beq.n	800cc12 <LmHandlerProcess+0x4a>
    {
        /* Send an empty message */
        LmHandlerAppData_t appData =
 800cbe8:	2300      	movs	r3, #0
 800cbea:	703b      	strb	r3, [r7, #0]
 800cbec:	2300      	movs	r3, #0
 800cbee:	707b      	strb	r3, [r7, #1]
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	607b      	str	r3, [r7, #4]
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0,
        };

        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 800cbf4:	4b09      	ldr	r3, [pc, #36]	; (800cc1c <LmHandlerProcess+0x54>)
 800cbf6:	78d9      	ldrb	r1, [r3, #3]
 800cbf8:	463b      	mov	r3, r7
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	f000 f8d7 	bl	800cdb0 <LmHandlerSend>
 800cc02:	4603      	mov	r3, r0
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d104      	bne.n	800cc12 <LmHandlerProcess+0x4a>
        {
            IsUplinkTxPending = false;
 800cc08:	4b03      	ldr	r3, [pc, #12]	; (800cc18 <LmHandlerProcess+0x50>)
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	701a      	strb	r2, [r3, #0]
 800cc0e:	e000      	b.n	800cc12 <LmHandlerProcess+0x4a>
        return;
 800cc10:	bf00      	nop
        }
    }
#endif /* LORAMAC_VERSION */
}
 800cc12:	3708      	adds	r7, #8
 800cc14:	46bd      	mov	sp, r7
 800cc16:	bd80      	pop	{r7, pc}
 800cc18:	200005f0 	.word	0x200005f0
 800cc1c:	200005a8 	.word	0x200005a8

0800cc20 <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800cc20:	b480      	push	{r7}
 800cc22:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800cc24:	4b02      	ldr	r3, [pc, #8]	; (800cc30 <LmHandlerGetDutyCycleWaitTime+0x10>)
 800cc26:	681b      	ldr	r3, [r3, #0]
}
 800cc28:	4618      	mov	r0, r3
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	bc80      	pop	{r7}
 800cc2e:	4770      	bx	lr
 800cc30:	200005ec 	.word	0x200005ec

0800cc34 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b092      	sub	sp, #72	; 0x48
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	4603      	mov	r3, r0
 800cc3c:	460a      	mov	r2, r1
 800cc3e:	71fb      	strb	r3, [r7, #7]
 800cc40:	4613      	mov	r3, r2
 800cc42:	71bb      	strb	r3, [r7, #6]
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800cc44:	2301      	movs	r3, #1
 800cc46:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800cc4a:	4b46      	ldr	r3, [pc, #280]	; (800cd64 <LmHandlerJoin+0x130>)
 800cc4c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800cc50:	b2db      	uxtb	r3, r3
 800cc52:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 800cc56:	4b43      	ldr	r3, [pc, #268]	; (800cd64 <LmHandlerJoin+0x130>)
 800cc58:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800cc5c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

    if( mode == ACTIVATION_TYPE_OTAA )
 800cc60:	79fb      	ldrb	r3, [r7, #7]
 800cc62:	2b02      	cmp	r3, #2
 800cc64:	d10b      	bne.n	800cc7e <LmHandlerJoin+0x4a>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800cc66:	2302      	movs	r3, #2
 800cc68:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800cc6c:	4b3e      	ldr	r3, [pc, #248]	; (800cd68 <LmHandlerJoin+0x134>)
 800cc6e:	2202      	movs	r2, #2
 800cc70:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 800cc72:	4a3d      	ldr	r2, [pc, #244]	; (800cd68 <LmHandlerJoin+0x134>)
 800cc74:	79bb      	ldrb	r3, [r7, #6]
 800cc76:	7213      	strb	r3, [r2, #8]
        LoRaMacStart();
 800cc78:	f005 f936 	bl	8011ee8 <LoRaMacStart>
 800cc7c:	e05c      	b.n	800cd38 <LmHandlerJoin+0x104>
    }
    else
    {
        MibRequestConfirm_t mibReq;

        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800cc7e:	2301      	movs	r3, #1
 800cc80:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800cc84:	4b38      	ldr	r3, [pc, #224]	; (800cd68 <LmHandlerJoin+0x134>)
 800cc86:	2201      	movs	r2, #1
 800cc88:	71da      	strb	r2, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800cc8a:	4b36      	ldr	r3, [pc, #216]	; (800cd64 <LmHandlerJoin+0x130>)
 800cc8c:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800cc90:	4b35      	ldr	r3, [pc, #212]	; (800cd68 <LmHandlerJoin+0x134>)
 800cc92:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 800cc94:	4b33      	ldr	r3, [pc, #204]	; (800cd64 <LmHandlerJoin+0x130>)
 800cc96:	f993 2005 	ldrsb.w	r2, [r3, #5]
 800cc9a:	4b33      	ldr	r3, [pc, #204]	; (800cd68 <LmHandlerJoin+0x134>)
 800cc9c:	715a      	strb	r2, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800cc9e:	4b32      	ldr	r3, [pc, #200]	; (800cd68 <LmHandlerJoin+0x134>)
 800cca0:	2200      	movs	r2, #0
 800cca2:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800cca4:	4a30      	ldr	r2, [pc, #192]	; (800cd68 <LmHandlerJoin+0x134>)
 800cca6:	79bb      	ldrb	r3, [r7, #6]
 800cca8:	7213      	strb	r3, [r2, #8]

        if( CtxRestoreDone == false )
 800ccaa:	4b30      	ldr	r3, [pc, #192]	; (800cd6c <LmHandlerJoin+0x138>)
 800ccac:	781b      	ldrb	r3, [r3, #0]
 800ccae:	f083 0301 	eor.w	r3, r3, #1
 800ccb2:	b2db      	uxtb	r3, r3
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d034      	beq.n	800cd22 <LmHandlerJoin+0xee>
        {
            /* Configure the default datarate */
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800ccb8:	231f      	movs	r3, #31
 800ccba:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800ccbc:	4b29      	ldr	r3, [pc, #164]	; (800cd64 <LmHandlerJoin+0x130>)
 800ccbe:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800ccc2:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800ccc4:	f107 030c 	add.w	r3, r7, #12
 800ccc8:	4618      	mov	r0, r3
 800ccca:	f005 fbe3 	bl	8012494 <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_DATARATE;
 800ccce:	2320      	movs	r3, #32
 800ccd0:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800ccd2:	4b24      	ldr	r3, [pc, #144]	; (800cd64 <LmHandlerJoin+0x130>)
 800ccd4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800ccd8:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800ccda:	f107 030c 	add.w	r3, r7, #12
 800ccde:	4618      	mov	r0, r3
 800cce0:	f005 fbd8 	bl	8012494 <LoRaMacMibSetRequestConfirm>

            /* Configure the default Tx Power */
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 800cce4:	2322      	movs	r3, #34	; 0x22
 800cce6:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 800cce8:	4b1e      	ldr	r3, [pc, #120]	; (800cd64 <LmHandlerJoin+0x130>)
 800ccea:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800ccee:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800ccf0:	f107 030c 	add.w	r3, r7, #12
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	f005 fbcd 	bl	8012494 <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_TX_POWER;
 800ccfa:	2321      	movs	r3, #33	; 0x21
 800ccfc:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 800ccfe:	4b19      	ldr	r3, [pc, #100]	; (800cd64 <LmHandlerJoin+0x130>)
 800cd00:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800cd04:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800cd06:	f107 030c 	add.w	r3, r7, #12
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	f005 fbc2 	bl	8012494 <LoRaMacMibSetRequestConfirm>

            /* Tell the MAC layer which network server version are we connecting too. */
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800cd10:	2329      	movs	r3, #41	; 0x29
 800cd12:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800cd14:	4b16      	ldr	r3, [pc, #88]	; (800cd70 <LmHandlerJoin+0x13c>)
 800cd16:	613b      	str	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800cd18:	f107 030c 	add.w	r3, r7, #12
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	f005 fbb9 	bl	8012494 <LoRaMacMibSetRequestConfirm>
        }

        LoRaMacStart();
 800cd22:	f005 f8e1 	bl	8011ee8 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800cd26:	2301      	movs	r3, #1
 800cd28:	733b      	strb	r3, [r7, #12]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800cd2a:	2301      	movs	r3, #1
 800cd2c:	743b      	strb	r3, [r7, #16]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800cd2e:	f107 030c 	add.w	r3, r7, #12
 800cd32:	4618      	mov	r0, r3
 800cd34:	f005 fbae 	bl	8012494 <LoRaMacMibSetRequestConfirm>
        LmHandlerRequestClass( LmHandlerParams.DefaultClass );
#endif /* LORAMAC_VERSION */
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( ( CtxRestoreDone == false ) || ( forceRejoin == true ) )
 800cd38:	4b0c      	ldr	r3, [pc, #48]	; (800cd6c <LmHandlerJoin+0x138>)
 800cd3a:	781b      	ldrb	r3, [r3, #0]
 800cd3c:	f083 0301 	eor.w	r3, r3, #1
 800cd40:	b2db      	uxtb	r3, r3
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d102      	bne.n	800cd4c <LmHandlerJoin+0x118>
 800cd46:	79bb      	ldrb	r3, [r7, #6]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d004      	beq.n	800cd56 <LmHandlerJoin+0x122>
    {
        /* Starts the join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
 800cd4c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800cd50:	4618      	mov	r0, r3
 800cd52:	f005 ff49 	bl	8012be8 <LoRaMacMlmeRequest>
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800cd56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd58:	4a06      	ldr	r2, [pc, #24]	; (800cd74 <LmHandlerJoin+0x140>)
 800cd5a:	6013      	str	r3, [r2, #0]
#endif /* LORAMAC_VERSION */
}
 800cd5c:	bf00      	nop
 800cd5e:	3748      	adds	r7, #72	; 0x48
 800cd60:	46bd      	mov	sp, r7
 800cd62:	bd80      	pop	{r7, pc}
 800cd64:	200005a8 	.word	0x200005a8
 800cd68:	20000094 	.word	0x20000094
 800cd6c:	200006e6 	.word	0x200006e6
 800cd70:	01000400 	.word	0x01000400
 800cd74:	200005ec 	.word	0x200005ec

0800cd78 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b08c      	sub	sp, #48	; 0x30
 800cd7c:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800cd7e:	2301      	movs	r3, #1
 800cd80:	713b      	strb	r3, [r7, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800cd82:	1d3b      	adds	r3, r7, #4
 800cd84:	4618      	mov	r0, r3
 800cd86:	f005 f9ad 	bl	80120e4 <LoRaMacMibGetRequestConfirm>
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if( status == LORAMAC_STATUS_OK )
 800cd90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d106      	bne.n	800cda6 <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800cd98:	7a3b      	ldrb	r3, [r7, #8]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d101      	bne.n	800cda2 <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800cd9e:	2300      	movs	r3, #0
 800cda0:	e002      	b.n	800cda8 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800cda2:	2301      	movs	r3, #1
 800cda4:	e000      	b.n	800cda8 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800cda6:	2300      	movs	r3, #0
    }
}
 800cda8:	4618      	mov	r0, r3
 800cdaa:	3730      	adds	r7, #48	; 0x30
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bd80      	pop	{r7, pc}

0800cdb0 <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      bool allowDelayedTx )
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b08a      	sub	sp, #40	; 0x28
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
 800cdb8:	460b      	mov	r3, r1
 800cdba:	70fb      	strb	r3, [r7, #3]
 800cdbc:	4613      	mov	r3, r2
 800cdbe:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800cdc0:	23ff      	movs	r3, #255	; 0xff
 800cdc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if( LoRaMacIsBusy() == true )
 800cdc6:	f002 faa7 	bl	800f318 <LoRaMacIsBusy>
 800cdca:	4603      	mov	r3, r0
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d002      	beq.n	800cdd6 <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800cdd0:	f06f 0301 	mvn.w	r3, #1
 800cdd4:	e0ab      	b.n	800cf2e <LmHandlerSend+0x17e>
    }

    if( LoRaMacIsStopped() == true )
 800cdd6:	f002 fac7 	bl	800f368 <LoRaMacIsStopped>
 800cdda:	4603      	mov	r3, r0
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d002      	beq.n	800cde6 <LmHandlerSend+0x36>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800cde0:	f06f 0302 	mvn.w	r3, #2
 800cde4:	e0a3      	b.n	800cf2e <LmHandlerSend+0x17e>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800cde6:	f7ff ffc7 	bl	800cd78 <LmHandlerJoinStatus>
 800cdea:	4603      	mov	r3, r0
 800cdec:	2b01      	cmp	r3, #1
 800cdee:	d00a      	beq.n	800ce06 <LmHandlerSend+0x56>
    {
        /* The network isn't joined, try again. */
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800cdf0:	4b51      	ldr	r3, [pc, #324]	; (800cf38 <LmHandlerSend+0x188>)
 800cdf2:	79db      	ldrb	r3, [r3, #7]
 800cdf4:	4a50      	ldr	r2, [pc, #320]	; (800cf38 <LmHandlerSend+0x188>)
 800cdf6:	7a12      	ldrb	r2, [r2, #8]
 800cdf8:	4611      	mov	r1, r2
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	f7ff ff1a 	bl	800cc34 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800ce00:	f06f 0302 	mvn.w	r3, #2
 800ce04:	e093      	b.n	800cf2e <LmHandlerSend+0x17e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800ce06:	4a4d      	ldr	r2, [pc, #308]	; (800cf3c <LmHandlerSend+0x18c>)
 800ce08:	78fb      	ldrb	r3, [r7, #3]
 800ce0a:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800ce0c:	78fb      	ldrb	r3, [r7, #3]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	bf14      	ite	ne
 800ce12:	2301      	movne	r3, #1
 800ce14:	2300      	moveq	r3, #0
 800ce16:	b2db      	uxtb	r3, r3
 800ce18:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800ce1a:	4b49      	ldr	r3, [pc, #292]	; (800cf40 <LmHandlerSend+0x190>)
 800ce1c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800ce20:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	785b      	ldrb	r3, [r3, #1]
 800ce26:	f107 020c 	add.w	r2, r7, #12
 800ce2a:	4611      	mov	r1, r2
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	f005 f8c9 	bl	8011fc4 <LoRaMacQueryTxPossible>
 800ce32:	4603      	mov	r3, r0
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d009      	beq.n	800ce4c <LmHandlerSend+0x9c>
    {
        /* Send empty frame in order to flush MAC commands */
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800ce38:	2300      	movs	r3, #0
 800ce3a:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800ce40:	2300      	movs	r3, #0
 800ce42:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800ce44:	23f9      	movs	r3, #249	; 0xf9
 800ce46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ce4a:	e009      	b.n	800ce60 <LmHandlerSend+0xb0>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	781b      	ldrb	r3, [r3, #0]
 800ce50:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	785b      	ldrb	r3, [r3, #1]
 800ce56:	b29b      	uxth	r3, r3
 800ce58:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	685b      	ldr	r3, [r3, #4]
 800ce5e:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800ce60:	4b36      	ldr	r3, [pc, #216]	; (800cf3c <LmHandlerSend+0x18c>)
 800ce62:	687a      	ldr	r2, [r7, #4]
 800ce64:	3310      	adds	r3, #16
 800ce66:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ce6a:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800ce6e:	4b34      	ldr	r3, [pc, #208]	; (800cf40 <LmHandlerSend+0x190>)
 800ce70:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800ce74:	4b31      	ldr	r3, [pc, #196]	; (800cf3c <LmHandlerSend+0x18c>)
 800ce76:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 800ce78:	78ba      	ldrb	r2, [r7, #2]
 800ce7a:	f107 0310 	add.w	r3, r7, #16
 800ce7e:	4611      	mov	r1, r2
 800ce80:	4618      	mov	r0, r3
 800ce82:	f006 f849 	bl	8012f18 <LoRaMacMcpsRequest>
 800ce86:	4603      	mov	r3, r0
 800ce88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800ce8c:	6a3b      	ldr	r3, [r7, #32]
 800ce8e:	4a2d      	ldr	r2, [pc, #180]	; (800cf44 <LmHandlerSend+0x194>)
 800ce90:	6013      	str	r3, [r2, #0]

    switch( status )
 800ce92:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ce96:	2b11      	cmp	r3, #17
 800ce98:	d842      	bhi.n	800cf20 <LmHandlerSend+0x170>
 800ce9a:	a201      	add	r2, pc, #4	; (adr r2, 800cea0 <LmHandlerSend+0xf0>)
 800ce9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cea0:	0800cee9 	.word	0x0800cee9
 800cea4:	0800cf01 	.word	0x0800cf01
 800cea8:	0800cf21 	.word	0x0800cf21
 800ceac:	0800cf21 	.word	0x0800cf21
 800ceb0:	0800cf21 	.word	0x0800cf21
 800ceb4:	0800cf21 	.word	0x0800cf21
 800ceb8:	0800cf21 	.word	0x0800cf21
 800cebc:	0800cf09 	.word	0x0800cf09
 800cec0:	0800cf21 	.word	0x0800cf21
 800cec4:	0800cf21 	.word	0x0800cf21
 800cec8:	0800cf21 	.word	0x0800cf21
 800cecc:	0800cf19 	.word	0x0800cf19
 800ced0:	0800cf21 	.word	0x0800cf21
 800ced4:	0800cf21 	.word	0x0800cf21
 800ced8:	0800cf01 	.word	0x0800cf01
 800cedc:	0800cf01 	.word	0x0800cf01
 800cee0:	0800cf01 	.word	0x0800cf01
 800cee4:	0800cf11 	.word	0x0800cf11
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            IsUplinkTxPending = false;
 800cee8:	4b17      	ldr	r3, [pc, #92]	; (800cf48 <LmHandlerSend+0x198>)
 800ceea:	2200      	movs	r2, #0
 800ceec:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 800ceee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cef2:	f113 0f07 	cmn.w	r3, #7
 800cef6:	d017      	beq.n	800cf28 <LmHandlerSend+0x178>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800cef8:	2300      	movs	r3, #0
 800cefa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 800cefe:	e013      	b.n	800cf28 <LmHandlerSend+0x178>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800cf00:	23fe      	movs	r3, #254	; 0xfe
 800cf02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800cf06:	e010      	b.n	800cf2a <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800cf08:	23fd      	movs	r3, #253	; 0xfd
 800cf0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800cf0e:	e00c      	b.n	800cf2a <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800cf10:	23fb      	movs	r3, #251	; 0xfb
 800cf12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800cf16:	e008      	b.n	800cf2a <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800cf18:	23fa      	movs	r3, #250	; 0xfa
 800cf1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800cf1e:	e004      	b.n	800cf2a <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800cf20:	23ff      	movs	r3, #255	; 0xff
 800cf22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800cf26:	e000      	b.n	800cf2a <LmHandlerSend+0x17a>
            break;
 800cf28:	bf00      	nop
    }

    return lmhStatus;
 800cf2a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800cf2e:	4618      	mov	r0, r3
 800cf30:	3728      	adds	r7, #40	; 0x28
 800cf32:	46bd      	mov	sp, r7
 800cf34:	bd80      	pop	{r7, pc}
 800cf36:	bf00      	nop
 800cf38:	20000094 	.word	0x20000094
 800cf3c:	200000a0 	.word	0x200000a0
 800cf40:	200005a8 	.word	0x200005a8
 800cf44:	200005ec 	.word	0x200005ec
 800cf48:	200005f0 	.word	0x200005f0

0800cf4c <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b086      	sub	sp, #24
 800cf50:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800cf52:	2309      	movs	r3, #9
 800cf54:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800cf56:	463b      	mov	r3, r7
 800cf58:	4618      	mov	r0, r3
 800cf5a:	f005 fe45 	bl	8012be8 <LoRaMacMlmeRequest>
 800cf5e:	4603      	mov	r3, r0
 800cf60:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800cf62:	693b      	ldr	r3, [r7, #16]
 800cf64:	4a06      	ldr	r2, [pc, #24]	; (800cf80 <LmHandlerDeviceTimeReq+0x34>)
 800cf66:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800cf68:	7dfb      	ldrb	r3, [r7, #23]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d101      	bne.n	800cf72 <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800cf6e:	2300      	movs	r3, #0
 800cf70:	e001      	b.n	800cf76 <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800cf72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
 800cf76:	4618      	mov	r0, r3
 800cf78:	3718      	adds	r7, #24
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	bd80      	pop	{r7, pc}
 800cf7e:	bf00      	nop
 800cf80:	200005ec 	.word	0x200005ec

0800cf84 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800cf84:	b480      	push	{r7}
 800cf86:	b083      	sub	sp, #12
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800cf8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
 800cf92:	4618      	mov	r0, r3
 800cf94:	370c      	adds	r7, #12
 800cf96:	46bd      	mov	sp, r7
 800cf98:	bc80      	pop	{r7}
 800cf9a:	4770      	bx	lr

0800cf9c <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b08e      	sub	sp, #56	; 0x38
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( LoRaMacIsBusy() == true )
 800cfac:	f002 f9b4 	bl	800f318 <LoRaMacIsBusy>
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d002      	beq.n	800cfbc <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800cfb6:	f06f 0301 	mvn.w	r3, #1
 800cfba:	e071      	b.n	800d0a0 <LmHandlerRequestClass+0x104>
    }

    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 800cfbc:	f7ff fedc 	bl	800cd78 <LmHandlerJoinStatus>
 800cfc0:	4603      	mov	r3, r0
 800cfc2:	2b01      	cmp	r3, #1
 800cfc4:	d002      	beq.n	800cfcc <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800cfc6:	f06f 0302 	mvn.w	r3, #2
 800cfca:	e069      	b.n	800d0a0 <LmHandlerRequestClass+0x104>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800cfcc:	2300      	movs	r3, #0
 800cfce:	733b      	strb	r3, [r7, #12]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800cfd0:	f107 030c 	add.w	r3, r7, #12
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	f005 f885 	bl	80120e4 <LoRaMacMibGetRequestConfirm>
 800cfda:	4603      	mov	r3, r0
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d002      	beq.n	800cfe6 <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800cfe0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cfe4:	e05c      	b.n	800d0a0 <LmHandlerRequestClass+0x104>
    }
    currentClass = mibReq.Param.Class;
 800cfe6:	7c3b      	ldrb	r3, [r7, #16]
 800cfe8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Attempt to switch only if class update */
    if( currentClass != newClass )
 800cfec:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800cff0:	79fb      	ldrb	r3, [r7, #7]
 800cff2:	429a      	cmp	r2, r3
 800cff4:	d052      	beq.n	800d09c <LmHandlerRequestClass+0x100>
    {
        switch( newClass )
 800cff6:	79fb      	ldrb	r3, [r7, #7]
 800cff8:	2b02      	cmp	r3, #2
 800cffa:	d028      	beq.n	800d04e <LmHandlerRequestClass+0xb2>
 800cffc:	2b02      	cmp	r3, #2
 800cffe:	dc48      	bgt.n	800d092 <LmHandlerRequestClass+0xf6>
 800d000:	2b00      	cmp	r3, #0
 800d002:	d002      	beq.n	800d00a <LmHandlerRequestClass+0x6e>
 800d004:	2b01      	cmp	r3, #1
 800d006:	d01e      	beq.n	800d046 <LmHandlerRequestClass+0xaa>
                        }
                    }
                }
                break;
            default:
                break;
 800d008:	e043      	b.n	800d092 <LmHandlerRequestClass+0xf6>
                    if( currentClass != CLASS_A )
 800d00a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d041      	beq.n	800d096 <LmHandlerRequestClass+0xfa>
                        mibReq.Param.Class = newClass;
 800d012:	79fb      	ldrb	r3, [r7, #7]
 800d014:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800d016:	f107 030c 	add.w	r3, r7, #12
 800d01a:	4618      	mov	r0, r3
 800d01c:	f005 fa3a 	bl	8012494 <LoRaMacMibSetRequestConfirm>
 800d020:	4603      	mov	r3, r0
 800d022:	2b00      	cmp	r3, #0
 800d024:	d10b      	bne.n	800d03e <LmHandlerRequestClass+0xa2>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800d026:	4b20      	ldr	r3, [pc, #128]	; (800d0a8 <LmHandlerRequestClass+0x10c>)
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d032      	beq.n	800d096 <LmHandlerRequestClass+0xfa>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800d030:	4b1d      	ldr	r3, [pc, #116]	; (800d0a8 <LmHandlerRequestClass+0x10c>)
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d036:	79fa      	ldrb	r2, [r7, #7]
 800d038:	4610      	mov	r0, r2
 800d03a:	4798      	blx	r3
                break;
 800d03c:	e02b      	b.n	800d096 <LmHandlerRequestClass+0xfa>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800d03e:	23ff      	movs	r3, #255	; 0xff
 800d040:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800d044:	e027      	b.n	800d096 <LmHandlerRequestClass+0xfa>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800d046:	23ff      	movs	r3, #255	; 0xff
 800d048:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800d04c:	e026      	b.n	800d09c <LmHandlerRequestClass+0x100>
                    if( currentClass != CLASS_A )
 800d04e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800d052:	2b00      	cmp	r3, #0
 800d054:	d003      	beq.n	800d05e <LmHandlerRequestClass+0xc2>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800d056:	23ff      	movs	r3, #255	; 0xff
 800d058:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800d05c:	e01d      	b.n	800d09a <LmHandlerRequestClass+0xfe>
                        mibReq.Param.Class = newClass;
 800d05e:	79fb      	ldrb	r3, [r7, #7]
 800d060:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800d062:	f107 030c 	add.w	r3, r7, #12
 800d066:	4618      	mov	r0, r3
 800d068:	f005 fa14 	bl	8012494 <LoRaMacMibSetRequestConfirm>
 800d06c:	4603      	mov	r3, r0
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d10b      	bne.n	800d08a <LmHandlerRequestClass+0xee>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800d072:	4b0d      	ldr	r3, [pc, #52]	; (800d0a8 <LmHandlerRequestClass+0x10c>)
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d00e      	beq.n	800d09a <LmHandlerRequestClass+0xfe>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800d07c:	4b0a      	ldr	r3, [pc, #40]	; (800d0a8 <LmHandlerRequestClass+0x10c>)
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d082:	79fa      	ldrb	r2, [r7, #7]
 800d084:	4610      	mov	r0, r2
 800d086:	4798      	blx	r3
                break;
 800d088:	e007      	b.n	800d09a <LmHandlerRequestClass+0xfe>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800d08a:	23ff      	movs	r3, #255	; 0xff
 800d08c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800d090:	e003      	b.n	800d09a <LmHandlerRequestClass+0xfe>
                break;
 800d092:	bf00      	nop
 800d094:	e002      	b.n	800d09c <LmHandlerRequestClass+0x100>
                break;
 800d096:	bf00      	nop
 800d098:	e000      	b.n	800d09c <LmHandlerRequestClass+0x100>
                break;
 800d09a:	bf00      	nop
        }
    }
    return errorStatus;
 800d09c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	3738      	adds	r7, #56	; 0x38
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	bd80      	pop	{r7, pc}
 800d0a8:	200005c0 	.word	0x200005c0

0800d0ac <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b08c      	sub	sp, #48	; 0x30
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( deviceClass == NULL )
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d102      	bne.n	800d0c0 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800d0ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d0be:	e010      	b.n	800d0e2 <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800d0c4:	f107 0308 	add.w	r3, r7, #8
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	f005 f80b 	bl	80120e4 <LoRaMacMibGetRequestConfirm>
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d002      	beq.n	800d0da <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800d0d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d0d8:	e003      	b.n	800d0e2 <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800d0da:	7b3a      	ldrb	r2, [r7, #12]
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800d0e0:	2300      	movs	r3, #0
}
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	3730      	adds	r7, #48	; 0x30
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	bd80      	pop	{r7, pc}
	...

0800d0ec <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b08c      	sub	sp, #48	; 0x30
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if( txDatarate == NULL )
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d102      	bne.n	800d100 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800d0fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d0fe:	e016      	b.n	800d12e <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800d100:	2320      	movs	r3, #32
 800d102:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 800d104:	f107 0308 	add.w	r3, r7, #8
 800d108:	4618      	mov	r0, r3
 800d10a:	f004 ffeb 	bl	80120e4 <LoRaMacMibGetRequestConfirm>
 800d10e:	4603      	mov	r3, r0
 800d110:	2b00      	cmp	r3, #0
 800d112:	d002      	beq.n	800d11a <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800d114:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d118:	e009      	b.n	800d12e <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800d11a:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	f993 2000 	ldrsb.w	r2, [r3]
 800d128:	4b03      	ldr	r3, [pc, #12]	; (800d138 <LmHandlerGetTxDatarate+0x4c>)
 800d12a:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800d12c:	2300      	movs	r3, #0
}
 800d12e:	4618      	mov	r0, r3
 800d130:	3730      	adds	r7, #48	; 0x30
 800d132:	46bd      	mov	sp, r7
 800d134:	bd80      	pop	{r7, pc}
 800d136:	bf00      	nop
 800d138:	200005a8 	.word	0x200005a8

0800d13c <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b08c      	sub	sp, #48	; 0x30
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800d144:	2323      	movs	r3, #35	; 0x23
 800d146:	723b      	strb	r3, [r7, #8]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	60fb      	str	r3, [r7, #12]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800d14c:	f107 0308 	add.w	r3, r7, #8
 800d150:	4618      	mov	r0, r3
 800d152:	f005 f99f 	bl	8012494 <LoRaMacMibSetRequestConfirm>
 800d156:	4603      	mov	r3, r0
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d002      	beq.n	800d162 <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800d15c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d160:	e000      	b.n	800d164 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800d162:	2300      	movs	r3, #0
}
 800d164:	4618      	mov	r0, r3
 800d166:	3730      	adds	r7, #48	; 0x30
 800d168:	46bd      	mov	sp, r7
 800d16a:	bd80      	pop	{r7, pc}

0800d16c <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b082      	sub	sp, #8
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800d174:	4b18      	ldr	r3, [pc, #96]	; (800d1d8 <McpsConfirm+0x6c>)
 800d176:	2201      	movs	r2, #1
 800d178:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	785a      	ldrb	r2, [r3, #1]
 800d17e:	4b16      	ldr	r3, [pc, #88]	; (800d1d8 <McpsConfirm+0x6c>)
 800d180:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	789b      	ldrb	r3, [r3, #2]
 800d186:	b25a      	sxtb	r2, r3
 800d188:	4b13      	ldr	r3, [pc, #76]	; (800d1d8 <McpsConfirm+0x6c>)
 800d18a:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	68db      	ldr	r3, [r3, #12]
 800d190:	4a11      	ldr	r2, [pc, #68]	; (800d1d8 <McpsConfirm+0x6c>)
 800d192:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800d19a:	4b0f      	ldr	r3, [pc, #60]	; (800d1d8 <McpsConfirm+0x6c>)
 800d19c:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	691b      	ldr	r3, [r3, #16]
 800d1a2:	b2da      	uxtb	r2, r3
 800d1a4:	4b0c      	ldr	r3, [pc, #48]	; (800d1d8 <McpsConfirm+0x6c>)
 800d1a6:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	791b      	ldrb	r3, [r3, #4]
 800d1ac:	461a      	mov	r2, r3
 800d1ae:	4b0a      	ldr	r3, [pc, #40]	; (800d1d8 <McpsConfirm+0x6c>)
 800d1b0:	725a      	strb	r2, [r3, #9]

    if( LmHandlerCallbacks->OnTxData != NULL )
 800d1b2:	4b0a      	ldr	r3, [pc, #40]	; (800d1dc <McpsConfirm+0x70>)
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d004      	beq.n	800d1c6 <McpsConfirm+0x5a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800d1bc:	4b07      	ldr	r3, [pc, #28]	; (800d1dc <McpsConfirm+0x70>)
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1c2:	4805      	ldr	r0, [pc, #20]	; (800d1d8 <McpsConfirm+0x6c>)
 800d1c4:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800d1c6:	6879      	ldr	r1, [r7, #4]
 800d1c8:	2000      	movs	r0, #0
 800d1ca:	f000 f9e9 	bl	800d5a0 <LmHandlerPackagesNotify>
}
 800d1ce:	bf00      	nop
 800d1d0:	3708      	adds	r7, #8
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	bd80      	pop	{r7, pc}
 800d1d6:	bf00      	nop
 800d1d8:	200000a0 	.word	0x200000a0
 800d1dc:	200005c0 	.word	0x200005c0

0800d1e0 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b086      	sub	sp, #24
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
 800d1e8:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	73fb      	strb	r3, [r7, #15]
    RxParams.IsMcpsIndication = 1;
 800d1ee:	4b2d      	ldr	r3, [pc, #180]	; (800d2a4 <McpsIndication+0xc4>)
 800d1f0:	2201      	movs	r2, #1
 800d1f2:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	785a      	ldrb	r2, [r3, #1]
 800d1f8:	4b2a      	ldr	r3, [pc, #168]	; (800d2a4 <McpsIndication+0xc4>)
 800d1fa:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800d1fc:	4b29      	ldr	r3, [pc, #164]	; (800d2a4 <McpsIndication+0xc4>)
 800d1fe:	785b      	ldrb	r3, [r3, #1]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d14b      	bne.n	800d29c <McpsIndication+0xbc>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	791b      	ldrb	r3, [r3, #4]
 800d208:	b25a      	sxtb	r2, r3
 800d20a:	4b26      	ldr	r3, [pc, #152]	; (800d2a4 <McpsIndication+0xc4>)
 800d20c:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800d20e:	683b      	ldr	r3, [r7, #0]
 800d210:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d214:	b25a      	sxtb	r2, r3
 800d216:	4b23      	ldr	r3, [pc, #140]	; (800d2a4 <McpsIndication+0xc4>)
 800d218:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800d21a:	683b      	ldr	r3, [r7, #0]
 800d21c:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800d220:	4b20      	ldr	r3, [pc, #128]	; (800d2a4 <McpsIndication+0xc4>)
 800d222:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800d224:	683b      	ldr	r3, [r7, #0]
 800d226:	78da      	ldrb	r2, [r3, #3]
 800d228:	4b1e      	ldr	r3, [pc, #120]	; (800d2a4 <McpsIndication+0xc4>)
 800d22a:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	691b      	ldr	r3, [r3, #16]
 800d230:	4a1c      	ldr	r2, [pc, #112]	; (800d2a4 <McpsIndication+0xc4>)
 800d232:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	78db      	ldrb	r3, [r3, #3]
 800d238:	743b      	strb	r3, [r7, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	7b1b      	ldrb	r3, [r3, #12]
 800d23e:	747b      	strb	r3, [r7, #17]
    appData.Buffer = mcpsIndication->Buffer;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	689b      	ldr	r3, [r3, #8]
 800d244:	617b      	str	r3, [r7, #20]

    if( LmHandlerCallbacks->OnRxData != NULL )
 800d246:	4b18      	ldr	r3, [pc, #96]	; (800d2a8 <McpsIndication+0xc8>)
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d007      	beq.n	800d260 <McpsIndication+0x80>
    {
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800d250:	4b15      	ldr	r3, [pc, #84]	; (800d2a8 <McpsIndication+0xc8>)
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d256:	f107 0210 	add.w	r2, r7, #16
 800d25a:	4912      	ldr	r1, [pc, #72]	; (800d2a4 <McpsIndication+0xc4>)
 800d25c:	4610      	mov	r0, r2
 800d25e:	4798      	blx	r3
    }

    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 800d260:	4b11      	ldr	r3, [pc, #68]	; (800d2a8 <McpsIndication+0xc8>)
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d266:	2b00      	cmp	r3, #0
 800d268:	d007      	beq.n	800d27a <McpsIndication+0x9a>
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	7e1b      	ldrb	r3, [r3, #24]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d003      	beq.n	800d27a <McpsIndication+0x9a>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800d272:	4b0d      	ldr	r3, [pc, #52]	; (800d2a8 <McpsIndication+0xc8>)
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d278:	4798      	blx	r3
    }
    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800d27a:	6879      	ldr	r1, [r7, #4]
 800d27c:	2001      	movs	r0, #1
 800d27e:	f000 f98f 	bl	800d5a0 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800d282:	f107 030f 	add.w	r3, r7, #15
 800d286:	4618      	mov	r0, r3
 800d288:	f7ff ff10 	bl	800d0ac <LmHandlerGetCurrentClass>
            .Port = 0
        };
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( mcpsIndication->IsUplinkTxPending != 0 )
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	795b      	ldrb	r3, [r3, #5]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d004      	beq.n	800d29e <McpsIndication+0xbe>
    {
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */
        IsUplinkTxPending = true;
 800d294:	4b05      	ldr	r3, [pc, #20]	; (800d2ac <McpsIndication+0xcc>)
 800d296:	2201      	movs	r2, #1
 800d298:	701a      	strb	r2, [r3, #0]
 800d29a:	e000      	b.n	800d29e <McpsIndication+0xbe>
        return;
 800d29c:	bf00      	nop
    }
#endif /* LORAMAC_VERSION */
}
 800d29e:	3718      	adds	r7, #24
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	bd80      	pop	{r7, pc}
 800d2a4:	200000bc 	.word	0x200000bc
 800d2a8:	200005c0 	.word	0x200005c0
 800d2ac:	200005f0 	.word	0x200005f0

0800d2b0 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b08c      	sub	sp, #48	; 0x30
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800d2b8:	4b49      	ldr	r3, [pc, #292]	; (800d3e0 <MlmeConfirm+0x130>)
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	785a      	ldrb	r2, [r3, #1]
 800d2c2:	4b47      	ldr	r3, [pc, #284]	; (800d3e0 <MlmeConfirm+0x130>)
 800d2c4:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 800d2c6:	4b47      	ldr	r3, [pc, #284]	; (800d3e4 <MlmeConfirm+0x134>)
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d004      	beq.n	800d2da <MlmeConfirm+0x2a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800d2d0:	4b44      	ldr	r3, [pc, #272]	; (800d3e4 <MlmeConfirm+0x134>)
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2d6:	4842      	ldr	r0, [pc, #264]	; (800d3e0 <MlmeConfirm+0x130>)
 800d2d8:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800d2da:	6879      	ldr	r1, [r7, #4]
 800d2dc:	2002      	movs	r0, #2
 800d2de:	f000 f95f 	bl	800d5a0 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	781b      	ldrb	r3, [r3, #0]
 800d2e6:	3b01      	subs	r3, #1
 800d2e8:	2b0b      	cmp	r3, #11
 800d2ea:	d872      	bhi.n	800d3d2 <MlmeConfirm+0x122>
 800d2ec:	a201      	add	r2, pc, #4	; (adr r2, 800d2f4 <MlmeConfirm+0x44>)
 800d2ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2f2:	bf00      	nop
 800d2f4:	0800d325 	.word	0x0800d325
 800d2f8:	0800d3d3 	.word	0x0800d3d3
 800d2fc:	0800d3d3 	.word	0x0800d3d3
 800d300:	0800d3d3 	.word	0x0800d3d3
 800d304:	0800d3a1 	.word	0x0800d3a1
 800d308:	0800d3d3 	.word	0x0800d3d3
 800d30c:	0800d3d3 	.word	0x0800d3d3
 800d310:	0800d3d3 	.word	0x0800d3d3
 800d314:	0800d3d3 	.word	0x0800d3d3
 800d318:	0800d3d3 	.word	0x0800d3d3
 800d31c:	0800d3b9 	.word	0x0800d3b9
 800d320:	0800d3d3 	.word	0x0800d3d3
    {
        case MLME_JOIN:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type = MIB_DEV_ADDR;
 800d324:	2306      	movs	r3, #6
 800d326:	723b      	strb	r3, [r7, #8]
                LoRaMacMibGetRequestConfirm( &mibReq );
 800d328:	f107 0308 	add.w	r3, r7, #8
 800d32c:	4618      	mov	r0, r3
 800d32e:	f004 fed9 	bl	80120e4 <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 800d332:	4b2d      	ldr	r3, [pc, #180]	; (800d3e8 <MlmeConfirm+0x138>)
 800d334:	79db      	ldrb	r3, [r3, #7]
 800d336:	68fa      	ldr	r2, [r7, #12]
 800d338:	4611      	mov	r1, r2
 800d33a:	4618      	mov	r0, r3
 800d33c:	f7ff fa78 	bl	800c830 <SecureElementSetDevAddr>
 800d340:	4603      	mov	r3, r0
 800d342:	2b00      	cmp	r3, #0
 800d344:	d102      	bne.n	800d34c <MlmeConfirm+0x9c>
                {
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	4a28      	ldr	r2, [pc, #160]	; (800d3ec <MlmeConfirm+0x13c>)
 800d34a:	6153      	str	r3, [r2, #20]
                }
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800d34c:	4828      	ldr	r0, [pc, #160]	; (800d3f0 <MlmeConfirm+0x140>)
 800d34e:	f7ff fecd 	bl	800d0ec <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 800d352:	4828      	ldr	r0, [pc, #160]	; (800d3f4 <MlmeConfirm+0x144>)
 800d354:	f000 fa74 	bl	800d840 <LmHandlerGetTxPower>

                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800d358:	4b21      	ldr	r3, [pc, #132]	; (800d3e0 <MlmeConfirm+0x130>)
 800d35a:	785b      	ldrb	r3, [r3, #1]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d108      	bne.n	800d372 <MlmeConfirm+0xc2>
                {
                    /* Status is OK, node has joined the network */
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800d360:	4b21      	ldr	r3, [pc, #132]	; (800d3e8 <MlmeConfirm+0x138>)
 800d362:	2200      	movs	r2, #0
 800d364:	719a      	strb	r2, [r3, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800d366:	4b24      	ldr	r3, [pc, #144]	; (800d3f8 <MlmeConfirm+0x148>)
 800d368:	785b      	ldrb	r3, [r3, #1]
 800d36a:	4618      	mov	r0, r3
 800d36c:	f7ff fe16 	bl	800cf9c <LmHandlerRequestClass>
 800d370:	e002      	b.n	800d378 <MlmeConfirm+0xc8>
                }
                else
                {
                    /* Join was not successful. Try to join again */
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800d372:	4b1d      	ldr	r3, [pc, #116]	; (800d3e8 <MlmeConfirm+0x138>)
 800d374:	22ff      	movs	r2, #255	; 0xff
 800d376:	719a      	strb	r2, [r3, #6]
                }
                /* Notify upper layer */
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800d378:	4b1a      	ldr	r3, [pc, #104]	; (800d3e4 <MlmeConfirm+0x134>)
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d004      	beq.n	800d38c <MlmeConfirm+0xdc>
                {
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800d382:	4b18      	ldr	r3, [pc, #96]	; (800d3e4 <MlmeConfirm+0x134>)
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d388:	4817      	ldr	r0, [pc, #92]	; (800d3e8 <MlmeConfirm+0x138>)
 800d38a:	4798      	blx	r3
                }
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800d38c:	4b14      	ldr	r3, [pc, #80]	; (800d3e0 <MlmeConfirm+0x130>)
 800d38e:	785b      	ldrb	r3, [r3, #1]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d120      	bne.n	800d3d6 <MlmeConfirm+0x126>
                {
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 800d394:	4b14      	ldr	r3, [pc, #80]	; (800d3e8 <MlmeConfirm+0x138>)
 800d396:	79db      	ldrb	r3, [r3, #7]
 800d398:	4618      	mov	r0, r3
 800d39a:	f7fe fff1 	bl	800c380 <SecureElementPrintSessionKeys>
                }
            }
            break;
 800d39e:	e01a      	b.n	800d3d6 <MlmeConfirm+0x126>
        case MLME_LINK_CHECK:
            {
                RxParams.LinkCheck = true;
 800d3a0:	4b16      	ldr	r3, [pc, #88]	; (800d3fc <MlmeConfirm+0x14c>)
 800d3a2:	2201      	movs	r2, #1
 800d3a4:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	7a1a      	ldrb	r2, [r3, #8]
 800d3aa:	4b14      	ldr	r3, [pc, #80]	; (800d3fc <MlmeConfirm+0x14c>)
 800d3ac:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	7a5a      	ldrb	r2, [r3, #9]
 800d3b2:	4b12      	ldr	r3, [pc, #72]	; (800d3fc <MlmeConfirm+0x14c>)
 800d3b4:	74da      	strb	r2, [r3, #19]
            }
            break;
 800d3b6:	e00f      	b.n	800d3d8 <MlmeConfirm+0x128>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        case MLME_BEACON_ACQUISITION:
            {
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	785b      	ldrb	r3, [r3, #1]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d105      	bne.n	800d3cc <MlmeConfirm+0x11c>
                {
                    /* Beacon has been acquired */
                    /* Request server for ping slot */
                    LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800d3c0:	4b0d      	ldr	r3, [pc, #52]	; (800d3f8 <MlmeConfirm+0x148>)
 800d3c2:	7c1b      	ldrb	r3, [r3, #16]
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	f7ff fddd 	bl	800cf84 <LmHandlerPingSlotReq>
                    /* Beacon not acquired */
                    /* Request Device Time again. */
                    LmHandlerDeviceTimeReq( );
                }
            }
            break;
 800d3ca:	e005      	b.n	800d3d8 <MlmeConfirm+0x128>
                    LmHandlerDeviceTimeReq( );
 800d3cc:	f7ff fdbe 	bl	800cf4c <LmHandlerDeviceTimeReq>
            break;
 800d3d0:	e002      	b.n	800d3d8 <MlmeConfirm+0x128>
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800d3d2:	bf00      	nop
 800d3d4:	e000      	b.n	800d3d8 <MlmeConfirm+0x128>
            break;
 800d3d6:	bf00      	nop
    }
}
 800d3d8:	bf00      	nop
 800d3da:	3730      	adds	r7, #48	; 0x30
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	bd80      	pop	{r7, pc}
 800d3e0:	200000a0 	.word	0x200000a0
 800d3e4:	200005c0 	.word	0x200005c0
 800d3e8:	20000094 	.word	0x20000094
 800d3ec:	2000056c 	.word	0x2000056c
 800d3f0:	20000098 	.word	0x20000098
 800d3f4:	20000099 	.word	0x20000099
 800d3f8:	200005a8 	.word	0x200005a8
 800d3fc:	200000bc 	.word	0x200000bc

0800d400 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b082      	sub	sp, #8
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
 800d408:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800d40a:	4b20      	ldr	r3, [pc, #128]	; (800d48c <MlmeIndication+0x8c>)
 800d40c:	2200      	movs	r2, #0
 800d40e:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	785a      	ldrb	r2, [r3, #1]
 800d414:	4b1d      	ldr	r3, [pc, #116]	; (800d48c <MlmeIndication+0x8c>)
 800d416:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	789b      	ldrb	r3, [r3, #2]
 800d41c:	b25a      	sxtb	r2, r3
 800d41e:	4b1b      	ldr	r3, [pc, #108]	; (800d48c <MlmeIndication+0x8c>)
 800d420:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d428:	b25a      	sxtb	r2, r3
 800d42a:	4b18      	ldr	r3, [pc, #96]	; (800d48c <MlmeIndication+0x8c>)
 800d42c:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800d42e:	683b      	ldr	r3, [r7, #0]
 800d430:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800d434:	4b15      	ldr	r3, [pc, #84]	; (800d48c <MlmeIndication+0x8c>)
 800d436:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800d438:	683b      	ldr	r3, [r7, #0]
 800d43a:	78da      	ldrb	r2, [r3, #3]
 800d43c:	4b13      	ldr	r3, [pc, #76]	; (800d48c <MlmeIndication+0x8c>)
 800d43e:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	685b      	ldr	r3, [r3, #4]
 800d444:	4a11      	ldr	r2, [pc, #68]	; (800d48c <MlmeIndication+0x8c>)
 800d446:	60d3      	str	r3, [r2, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 800d448:	4b11      	ldr	r3, [pc, #68]	; (800d490 <MlmeIndication+0x90>)
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d00d      	beq.n	800d46e <MlmeIndication+0x6e>
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	781b      	ldrb	r3, [r3, #0]
 800d456:	2b0a      	cmp	r3, #10
 800d458:	d009      	beq.n	800d46e <MlmeIndication+0x6e>
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	781b      	ldrb	r3, [r3, #0]
 800d45e:	2b0e      	cmp	r3, #14
 800d460:	d005      	beq.n	800d46e <MlmeIndication+0x6e>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800d462:	4b0b      	ldr	r3, [pc, #44]	; (800d490 <MlmeIndication+0x90>)
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d468:	4908      	ldr	r1, [pc, #32]	; (800d48c <MlmeIndication+0x8c>)
 800d46a:	2000      	movs	r0, #0
 800d46c:	4798      	blx	r3
    }

    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800d46e:	6879      	ldr	r1, [r7, #4]
 800d470:	2003      	movs	r0, #3
 800d472:	f000 f895 	bl	800d5a0 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	781b      	ldrb	r3, [r3, #0]
 800d47a:	2b0a      	cmp	r3, #10
 800d47c:	d001      	beq.n	800d482 <MlmeIndication+0x82>
 800d47e:	2b0e      	cmp	r3, #14
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800d480:	e000      	b.n	800d484 <MlmeIndication+0x84>
            break;
 800d482:	bf00      	nop
    }
}
 800d484:	bf00      	nop
 800d486:	3708      	adds	r7, #8
 800d488:	46bd      	mov	sp, r7
 800d48a:	bd80      	pop	{r7, pc}
 800d48c:	200000bc 	.word	0x200000bc
 800d490:	200005c0 	.word	0x200005c0

0800d494 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b084      	sub	sp, #16
 800d498:	af00      	add	r7, sp, #0
 800d49a:	4603      	mov	r3, r0
 800d49c:	6039      	str	r1, [r7, #0]
 800d49e:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	60fb      	str	r3, [r7, #12]
    switch( id )
 800d4a4:	79fb      	ldrb	r3, [r7, #7]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d104      	bne.n	800d4b4 <LmHandlerPackageRegister+0x20>
    {
        case PACKAGE_ID_COMPLIANCE:
            {
                package = LmhpCompliancePackageFactory( );
 800d4aa:	f000 fa8b 	bl	800d9c4 <LmhpCompliancePackageFactory>
 800d4ae:	4603      	mov	r3, r0
 800d4b0:	60fb      	str	r3, [r7, #12]
                break;
 800d4b2:	e00d      	b.n	800d4d0 <LmHandlerPackageRegister+0x3c>
            }
        default:
            {
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 800d4b4:	f107 020c 	add.w	r2, r7, #12
 800d4b8:	79fb      	ldrb	r3, [r7, #7]
 800d4ba:	4611      	mov	r1, r2
 800d4bc:	4618      	mov	r0, r3
 800d4be:	f000 ff73 	bl	800e3a8 <LmhpPackagesRegister>
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d002      	beq.n	800d4ce <LmHandlerPackageRegister+0x3a>
                {
                    return LORAMAC_HANDLER_ERROR;
 800d4c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d4cc:	e03b      	b.n	800d546 <LmHandlerPackageRegister+0xb2>
                }
                break;
 800d4ce:	bf00      	nop
            }
    }
    if( package != NULL )
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d035      	beq.n	800d542 <LmHandlerPackageRegister+0xae>
    {
        LmHandlerPackages[id] = package;
 800d4d6:	79fb      	ldrb	r3, [r7, #7]
 800d4d8:	68fa      	ldr	r2, [r7, #12]
 800d4da:	491d      	ldr	r1, [pc, #116]	; (800d550 <LmHandlerPackageRegister+0xbc>)
 800d4dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800d4e0:	79fb      	ldrb	r3, [r7, #7]
 800d4e2:	4a1b      	ldr	r2, [pc, #108]	; (800d550 <LmHandlerPackageRegister+0xbc>)
 800d4e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d4e8:	4a1a      	ldr	r2, [pc, #104]	; (800d554 <LmHandlerPackageRegister+0xc0>)
 800d4ea:	629a      	str	r2, [r3, #40]	; 0x28
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 800d4ec:	4b1a      	ldr	r3, [pc, #104]	; (800d558 <LmHandlerPackageRegister+0xc4>)
 800d4ee:	681a      	ldr	r2, [r3, #0]
 800d4f0:	79fb      	ldrb	r3, [r7, #7]
 800d4f2:	4917      	ldr	r1, [pc, #92]	; (800d550 <LmHandlerPackageRegister+0xbc>)
 800d4f4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d4f8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d4fa:	631a      	str	r2, [r3, #48]	; 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 800d4fc:	4b16      	ldr	r3, [pc, #88]	; (800d558 <LmHandlerPackageRegister+0xc4>)
 800d4fe:	681a      	ldr	r2, [r3, #0]
 800d500:	79fb      	ldrb	r3, [r7, #7]
 800d502:	4913      	ldr	r1, [pc, #76]	; (800d550 <LmHandlerPackageRegister+0xbc>)
 800d504:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d508:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d50a:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800d50c:	79fb      	ldrb	r3, [r7, #7]
 800d50e:	4a10      	ldr	r2, [pc, #64]	; (800d550 <LmHandlerPackageRegister+0xbc>)
 800d510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d514:	4a11      	ldr	r2, [pc, #68]	; (800d55c <LmHandlerPackageRegister+0xc8>)
 800d516:	62da      	str	r2, [r3, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800d518:	4b0f      	ldr	r3, [pc, #60]	; (800d558 <LmHandlerPackageRegister+0xc4>)
 800d51a:	681a      	ldr	r2, [r3, #0]
 800d51c:	79fb      	ldrb	r3, [r7, #7]
 800d51e:	490c      	ldr	r1, [pc, #48]	; (800d550 <LmHandlerPackageRegister+0xbc>)
 800d520:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d524:	6992      	ldr	r2, [r2, #24]
 800d526:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800d528:	79fb      	ldrb	r3, [r7, #7]
 800d52a:	4a09      	ldr	r2, [pc, #36]	; (800d550 <LmHandlerPackageRegister+0xbc>)
 800d52c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d530:	685b      	ldr	r3, [r3, #4]
 800d532:	4a0b      	ldr	r2, [pc, #44]	; (800d560 <LmHandlerPackageRegister+0xcc>)
 800d534:	6851      	ldr	r1, [r2, #4]
 800d536:	4a0a      	ldr	r2, [pc, #40]	; (800d560 <LmHandlerPackageRegister+0xcc>)
 800d538:	7852      	ldrb	r2, [r2, #1]
 800d53a:	6838      	ldr	r0, [r7, #0]
 800d53c:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800d53e:	2300      	movs	r3, #0
 800d540:	e001      	b.n	800d546 <LmHandlerPackageRegister+0xb2>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800d542:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
 800d546:	4618      	mov	r0, r3
 800d548:	3710      	adds	r7, #16
 800d54a:	46bd      	mov	sp, r7
 800d54c:	bd80      	pop	{r7, pc}
 800d54e:	bf00      	nop
 800d550:	20000594 	.word	0x20000594
 800d554:	0800cc35 	.word	0x0800cc35
 800d558:	200005c0 	.word	0x200005c0
 800d55c:	0800cf4d 	.word	0x0800cf4d
 800d560:	200000d0 	.word	0x200000d0

0800d564 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b082      	sub	sp, #8
 800d568:	af00      	add	r7, sp, #0
 800d56a:	4603      	mov	r3, r0
 800d56c:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800d56e:	79fb      	ldrb	r3, [r7, #7]
 800d570:	2b04      	cmp	r3, #4
 800d572:	d80e      	bhi.n	800d592 <LmHandlerPackageIsInitialized+0x2e>
 800d574:	79fb      	ldrb	r3, [r7, #7]
 800d576:	4a09      	ldr	r2, [pc, #36]	; (800d59c <LmHandlerPackageIsInitialized+0x38>)
 800d578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d57c:	689b      	ldr	r3, [r3, #8]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d007      	beq.n	800d592 <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800d582:	79fb      	ldrb	r3, [r7, #7]
 800d584:	4a05      	ldr	r2, [pc, #20]	; (800d59c <LmHandlerPackageIsInitialized+0x38>)
 800d586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d58a:	689b      	ldr	r3, [r3, #8]
 800d58c:	4798      	blx	r3
 800d58e:	4603      	mov	r3, r0
 800d590:	e000      	b.n	800d594 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800d592:	2300      	movs	r3, #0
    }
}
 800d594:	4618      	mov	r0, r3
 800d596:	3708      	adds	r7, #8
 800d598:	46bd      	mov	sp, r7
 800d59a:	bd80      	pop	{r7, pc}
 800d59c:	20000594 	.word	0x20000594

0800d5a0 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b084      	sub	sp, #16
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	4603      	mov	r3, r0
 800d5a8:	6039      	str	r1, [r7, #0]
 800d5aa:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	73fb      	strb	r3, [r7, #15]
 800d5b0:	e067      	b.n	800d682 <LmHandlerPackagesNotify+0xe2>
    {
        if( LmHandlerPackages[i] != NULL )
 800d5b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d5b6:	4a37      	ldr	r2, [pc, #220]	; (800d694 <LmHandlerPackagesNotify+0xf4>)
 800d5b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d05a      	beq.n	800d676 <LmHandlerPackagesNotify+0xd6>
        {
            switch( notifyType )
 800d5c0:	79fb      	ldrb	r3, [r7, #7]
 800d5c2:	2b03      	cmp	r3, #3
 800d5c4:	d84e      	bhi.n	800d664 <LmHandlerPackagesNotify+0xc4>
 800d5c6:	a201      	add	r2, pc, #4	; (adr r2, 800d5cc <LmHandlerPackagesNotify+0x2c>)
 800d5c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5cc:	0800d5dd 	.word	0x0800d5dd
 800d5d0:	0800d5ff 	.word	0x0800d5ff
 800d5d4:	0800d621 	.word	0x0800d621
 800d5d8:	0800d643 	.word	0x0800d643
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800d5dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d5e0:	4a2c      	ldr	r2, [pc, #176]	; (800d694 <LmHandlerPackagesNotify+0xf4>)
 800d5e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5e6:	699b      	ldr	r3, [r3, #24]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d03d      	beq.n	800d668 <LmHandlerPackagesNotify+0xc8>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 800d5ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d5f0:	4a28      	ldr	r2, [pc, #160]	; (800d694 <LmHandlerPackagesNotify+0xf4>)
 800d5f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5f6:	699b      	ldr	r3, [r3, #24]
 800d5f8:	6838      	ldr	r0, [r7, #0]
 800d5fa:	4798      	blx	r3
                        }
                        break;
 800d5fc:	e034      	b.n	800d668 <LmHandlerPackagesNotify+0xc8>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 800d5fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d602:	4a24      	ldr	r2, [pc, #144]	; (800d694 <LmHandlerPackagesNotify+0xf4>)
 800d604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d608:	69db      	ldr	r3, [r3, #28]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d02e      	beq.n	800d66c <LmHandlerPackagesNotify+0xcc>
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 800d60e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d612:	4a20      	ldr	r2, [pc, #128]	; (800d694 <LmHandlerPackagesNotify+0xf4>)
 800d614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d618:	69db      	ldr	r3, [r3, #28]
 800d61a:	6838      	ldr	r0, [r7, #0]
 800d61c:	4798      	blx	r3
                        }
                        break;
 800d61e:	e025      	b.n	800d66c <LmHandlerPackagesNotify+0xcc>
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800d620:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d624:	4a1b      	ldr	r2, [pc, #108]	; (800d694 <LmHandlerPackagesNotify+0xf4>)
 800d626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d62a:	6a1b      	ldr	r3, [r3, #32]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d01f      	beq.n	800d670 <LmHandlerPackagesNotify+0xd0>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 800d630:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d634:	4a17      	ldr	r2, [pc, #92]	; (800d694 <LmHandlerPackagesNotify+0xf4>)
 800d636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d63a:	6a1b      	ldr	r3, [r3, #32]
 800d63c:	6838      	ldr	r0, [r7, #0]
 800d63e:	4798      	blx	r3
                        }
                        break;
 800d640:	e016      	b.n	800d670 <LmHandlerPackagesNotify+0xd0>
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800d642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d646:	4a13      	ldr	r2, [pc, #76]	; (800d694 <LmHandlerPackagesNotify+0xf4>)
 800d648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d64c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d010      	beq.n	800d674 <LmHandlerPackagesNotify+0xd4>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800d652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d656:	4a0f      	ldr	r2, [pc, #60]	; (800d694 <LmHandlerPackagesNotify+0xf4>)
 800d658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d65c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d65e:	6838      	ldr	r0, [r7, #0]
 800d660:	4798      	blx	r3
                        }
                        break;
 800d662:	e007      	b.n	800d674 <LmHandlerPackagesNotify+0xd4>
                    }
                default:
                    {
                        break;
 800d664:	bf00      	nop
 800d666:	e006      	b.n	800d676 <LmHandlerPackagesNotify+0xd6>
                        break;
 800d668:	bf00      	nop
 800d66a:	e004      	b.n	800d676 <LmHandlerPackagesNotify+0xd6>
                        break;
 800d66c:	bf00      	nop
 800d66e:	e002      	b.n	800d676 <LmHandlerPackagesNotify+0xd6>
                        break;
 800d670:	bf00      	nop
 800d672:	e000      	b.n	800d676 <LmHandlerPackagesNotify+0xd6>
                        break;
 800d674:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d67a:	b2db      	uxtb	r3, r3
 800d67c:	3301      	adds	r3, #1
 800d67e:	b2db      	uxtb	r3, r3
 800d680:	73fb      	strb	r3, [r7, #15]
 800d682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d686:	2b04      	cmp	r3, #4
 800d688:	dd93      	ble.n	800d5b2 <LmHandlerPackagesNotify+0x12>
                    }
            }
        }
    }
}
 800d68a:	bf00      	nop
 800d68c:	bf00      	nop
 800d68e:	3710      	adds	r7, #16
 800d690:	46bd      	mov	sp, r7
 800d692:	bd80      	pop	{r7, pc}
 800d694:	20000594 	.word	0x20000594

0800d698 <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b082      	sub	sp, #8
 800d69c:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d69e:	2300      	movs	r3, #0
 800d6a0:	71fb      	strb	r3, [r7, #7]
 800d6a2:	e018      	b.n	800d6d6 <LmHandlerPackageIsTxPending+0x3e>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
#else
        if( LmHandlerPackages[i] != NULL )
 800d6a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d6a8:	4a0f      	ldr	r2, [pc, #60]	; (800d6e8 <LmHandlerPackageIsTxPending+0x50>)
 800d6aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d00b      	beq.n	800d6ca <LmHandlerPackageIsTxPending+0x32>
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800d6b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d6b6:	4a0c      	ldr	r2, [pc, #48]	; (800d6e8 <LmHandlerPackageIsTxPending+0x50>)
 800d6b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d6bc:	68db      	ldr	r3, [r3, #12]
 800d6be:	4798      	blx	r3
 800d6c0:	4603      	mov	r3, r0
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d001      	beq.n	800d6ca <LmHandlerPackageIsTxPending+0x32>
            {
                return true;
 800d6c6:	2301      	movs	r3, #1
 800d6c8:	e00a      	b.n	800d6e0 <LmHandlerPackageIsTxPending+0x48>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d6ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d6ce:	b2db      	uxtb	r3, r3
 800d6d0:	3301      	adds	r3, #1
 800d6d2:	b2db      	uxtb	r3, r3
 800d6d4:	71fb      	strb	r3, [r7, #7]
 800d6d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d6da:	2b04      	cmp	r3, #4
 800d6dc:	dde2      	ble.n	800d6a4 <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 800d6de:	2300      	movs	r3, #0
}
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	3708      	adds	r7, #8
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	bd80      	pop	{r7, pc}
 800d6e8:	20000594 	.word	0x20000594

0800d6ec <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b082      	sub	sp, #8
 800d6f0:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	71fb      	strb	r3, [r7, #7]
 800d6f6:	e022      	b.n	800d73e <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800d6f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d6fc:	4a14      	ldr	r2, [pc, #80]	; (800d750 <LmHandlerPackagesProcess+0x64>)
 800d6fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d015      	beq.n	800d732 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800d706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d70a:	4a11      	ldr	r2, [pc, #68]	; (800d750 <LmHandlerPackagesProcess+0x64>)
 800d70c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d710:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800d712:	2b00      	cmp	r3, #0
 800d714:	d00d      	beq.n	800d732 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800d716:	79fb      	ldrb	r3, [r7, #7]
 800d718:	4618      	mov	r0, r3
 800d71a:	f7ff ff23 	bl	800d564 <LmHandlerPackageIsInitialized>
 800d71e:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800d720:	2b00      	cmp	r3, #0
 800d722:	d006      	beq.n	800d732 <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800d724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d728:	4a09      	ldr	r2, [pc, #36]	; (800d750 <LmHandlerPackagesProcess+0x64>)
 800d72a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d72e:	691b      	ldr	r3, [r3, #16]
 800d730:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d736:	b2db      	uxtb	r3, r3
 800d738:	3301      	adds	r3, #1
 800d73a:	b2db      	uxtb	r3, r3
 800d73c:	71fb      	strb	r3, [r7, #7]
 800d73e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d742:	2b04      	cmp	r3, #4
 800d744:	ddd8      	ble.n	800d6f8 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800d746:	bf00      	nop
 800d748:	bf00      	nop
 800d74a:	3708      	adds	r7, #8
 800d74c:	46bd      	mov	sp, r7
 800d74e:	bd80      	pop	{r7, pc}
 800d750:	20000594 	.word	0x20000594

0800d754 <LmHandlerOnTxFrameCtrlChanged>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void LmHandlerOnTxFrameCtrlChanged( LmHandlerMsgTypes_t isTxConfirmed )
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b082      	sub	sp, #8
 800d758:	af00      	add	r7, sp, #0
 800d75a:	4603      	mov	r3, r0
 800d75c:	71fb      	strb	r3, [r7, #7]
    LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800d75e:	4a09      	ldr	r2, [pc, #36]	; (800d784 <LmHandlerOnTxFrameCtrlChanged+0x30>)
 800d760:	79fb      	ldrb	r3, [r7, #7]
 800d762:	70d3      	strb	r3, [r2, #3]

    if (LmHandlerCallbacks->OnTxFrameCtrlChanged != NULL)
 800d764:	4b08      	ldr	r3, [pc, #32]	; (800d788 <LmHandlerOnTxFrameCtrlChanged+0x34>)
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d005      	beq.n	800d77a <LmHandlerOnTxFrameCtrlChanged+0x26>
    {
        LmHandlerCallbacks->OnTxFrameCtrlChanged( isTxConfirmed );
 800d76e:	4b06      	ldr	r3, [pc, #24]	; (800d788 <LmHandlerOnTxFrameCtrlChanged+0x34>)
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d774:	79fa      	ldrb	r2, [r7, #7]
 800d776:	4610      	mov	r0, r2
 800d778:	4798      	blx	r3
    }
}
 800d77a:	bf00      	nop
 800d77c:	3708      	adds	r7, #8
 800d77e:	46bd      	mov	sp, r7
 800d780:	bd80      	pop	{r7, pc}
 800d782:	bf00      	nop
 800d784:	200005a8 	.word	0x200005a8
 800d788:	200005c0 	.word	0x200005c0

0800d78c <LmHandlerOnPingSlotPeriodicityChanged>:

static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity )
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b082      	sub	sp, #8
 800d790:	af00      	add	r7, sp, #0
 800d792:	4603      	mov	r3, r0
 800d794:	71fb      	strb	r3, [r7, #7]
    LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800d796:	4a09      	ldr	r2, [pc, #36]	; (800d7bc <LmHandlerOnPingSlotPeriodicityChanged+0x30>)
 800d798:	79fb      	ldrb	r3, [r7, #7]
 800d79a:	7413      	strb	r3, [r2, #16]

    if (LmHandlerCallbacks->OnPingSlotPeriodicityChanged != NULL)
 800d79c:	4b08      	ldr	r3, [pc, #32]	; (800d7c0 <LmHandlerOnPingSlotPeriodicityChanged+0x34>)
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d005      	beq.n	800d7b2 <LmHandlerOnPingSlotPeriodicityChanged+0x26>
    {
        LmHandlerCallbacks->OnPingSlotPeriodicityChanged( pingSlotPeriodicity );
 800d7a6:	4b06      	ldr	r3, [pc, #24]	; (800d7c0 <LmHandlerOnPingSlotPeriodicityChanged+0x34>)
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7ac:	79fa      	ldrb	r2, [r7, #7]
 800d7ae:	4610      	mov	r0, r2
 800d7b0:	4798      	blx	r3
    }
}
 800d7b2:	bf00      	nop
 800d7b4:	3708      	adds	r7, #8
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bd80      	pop	{r7, pc}
 800d7ba:	bf00      	nop
 800d7bc:	200005a8 	.word	0x200005a8
 800d7c0:	200005c0 	.word	0x200005c0

0800d7c4 <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion( LmHandlerVersionType_t lmhType, uint32_t *featureVersion )
{
 800d7c4:	b480      	push	{r7}
 800d7c6:	b083      	sub	sp, #12
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	4603      	mov	r3, r0
 800d7cc:	6039      	str	r1, [r7, #0]
 800d7ce:	71fb      	strb	r3, [r7, #7]
    if( featureVersion == NULL )
 800d7d0:	683b      	ldr	r3, [r7, #0]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d102      	bne.n	800d7dc <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 800d7d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d7da:	e00e      	b.n	800d7fa <LmHandlerGetVersion+0x36>
    }

    switch( lmhType )
 800d7dc:	79fb      	ldrb	r3, [r7, #7]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d002      	beq.n	800d7e8 <LmHandlerGetVersion+0x24>
 800d7e2:	2b01      	cmp	r3, #1
 800d7e4:	d004      	beq.n	800d7f0 <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
            break;
 800d7e6:	e007      	b.n	800d7f8 <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 800d7e8:	683b      	ldr	r3, [r7, #0]
 800d7ea:	4a06      	ldr	r2, [pc, #24]	; (800d804 <LmHandlerGetVersion+0x40>)
 800d7ec:	601a      	str	r2, [r3, #0]
            break;
 800d7ee:	e003      	b.n	800d7f8 <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 800d7f0:	683b      	ldr	r3, [r7, #0]
 800d7f2:	4a05      	ldr	r2, [pc, #20]	; (800d808 <LmHandlerGetVersion+0x44>)
 800d7f4:	601a      	str	r2, [r3, #0]
            break;
 800d7f6:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 800d7f8:	2300      	movs	r3, #0
}
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	370c      	adds	r7, #12
 800d7fe:	46bd      	mov	sp, r7
 800d800:	bc80      	pop	{r7}
 800d802:	4770      	bx	lr
 800d804:	01000400 	.word	0x01000400
 800d808:	02010001 	.word	0x02010001

0800d80c <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	af00      	add	r7, sp, #0
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 800d810:	f005 fce0 	bl	80131d4 <LoRaMacDeInitialization>
 800d814:	4603      	mov	r3, r0
 800d816:	2b00      	cmp	r3, #0
 800d818:	d101      	bne.n	800d81e <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800d81a:	2300      	movs	r3, #0
 800d81c:	e001      	b.n	800d822 <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800d81e:	f06f 0301 	mvn.w	r3, #1
    }
}
 800d822:	4618      	mov	r0, r3
 800d824:	bd80      	pop	{r7, pc}

0800d826 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 800d826:	b580      	push	{r7, lr}
 800d828:	af00      	add	r7, sp, #0
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 800d82a:	f004 fb93 	bl	8011f54 <LoRaMacHalt>
 800d82e:	4603      	mov	r3, r0
 800d830:	2b00      	cmp	r3, #0
 800d832:	d101      	bne.n	800d838 <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800d834:	2300      	movs	r3, #0
 800d836:	e001      	b.n	800d83c <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800d838:	f06f 0301 	mvn.w	r3, #1
    }
}
 800d83c:	4618      	mov	r0, r3
 800d83e:	bd80      	pop	{r7, pc}

0800d840 <LmHandlerGetTxPower>:
    rxParams->Datarate = mibReq.Param.Rx2Channel.Datarate;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b08c      	sub	sp, #48	; 0x30
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d102      	bne.n	800d854 <LmHandlerGetTxPower+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800d84e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d852:	e016      	b.n	800d882 <LmHandlerGetTxPower+0x42>
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 800d854:	2321      	movs	r3, #33	; 0x21
 800d856:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800d858:	f107 0308 	add.w	r3, r7, #8
 800d85c:	4618      	mov	r0, r3
 800d85e:	f004 fc41 	bl	80120e4 <LoRaMacMibGetRequestConfirm>
 800d862:	4603      	mov	r3, r0
 800d864:	2b00      	cmp	r3, #0
 800d866:	d002      	beq.n	800d86e <LmHandlerGetTxPower+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800d868:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d86c:	e009      	b.n	800d882 <LmHandlerGetTxPower+0x42>
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 800d86e:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxPower = *txPower;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	f993 2000 	ldrsb.w	r2, [r3]
 800d87c:	4b03      	ldr	r3, [pc, #12]	; (800d88c <LmHandlerGetTxPower+0x4c>)
 800d87e:	715a      	strb	r2, [r3, #5]
    return LORAMAC_HANDLER_SUCCESS;
 800d880:	2300      	movs	r3, #0
}
 800d882:	4618      	mov	r0, r3
 800d884:	3730      	adds	r7, #48	; 0x30
 800d886:	46bd      	mov	sp, r7
 800d888:	bd80      	pop	{r7, pc}
 800d88a:	bf00      	nop
 800d88c:	200005a8 	.word	0x200005a8

0800d890 <LmHandlerNvmDataStore>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800d890:	b580      	push	{r7, lr}
 800d892:	b08e      	sub	sp, #56	; 0x38
 800d894:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800d896:	2300      	movs	r3, #0
 800d898:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    int32_t status = NVM_DATA_OK;
 800d89c:	2300      	movs	r3, #0
 800d89e:	633b      	str	r3, [r7, #48]	; 0x30

    lmhStatus = LmHandlerHalt();
 800d8a0:	f7ff ffc1 	bl	800d826 <LmHandlerHalt>
 800d8a4:	4603      	mov	r3, r0
 800d8a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( lmhStatus == LORAMAC_HANDLER_SUCCESS )
 800d8aa:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d12f      	bne.n	800d912 <LmHandlerNvmDataStore+0x82>
    {
        status = NvmDataMgmtStoreBegin();
 800d8b2:	f000 f859 	bl	800d968 <NvmDataMgmtStoreBegin>
 800d8b6:	6338      	str	r0, [r7, #48]	; 0x30

        if( status == NVM_DATA_NO_UPDATED_DATA )
 800d8b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ba:	f113 0f02 	cmn.w	r3, #2
 800d8be:	d103      	bne.n	800d8c8 <LmHandlerNvmDataStore+0x38>
        {
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800d8c0:	23f8      	movs	r3, #248	; 0xf8
 800d8c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d8c6:	e01c      	b.n	800d902 <LmHandlerNvmDataStore+0x72>
        }
        else if( ( status != NVM_DATA_OK ) || ( LmHandlerCallbacks->OnStoreContextRequest == NULL ) )
 800d8c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d104      	bne.n	800d8d8 <LmHandlerNvmDataStore+0x48>
 800d8ce:	4b1b      	ldr	r3, [pc, #108]	; (800d93c <LmHandlerNvmDataStore+0xac>)
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	695b      	ldr	r3, [r3, #20]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d103      	bne.n	800d8e0 <LmHandlerNvmDataStore+0x50>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800d8d8:	23ff      	movs	r3, #255	; 0xff
 800d8da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d8de:	e010      	b.n	800d902 <LmHandlerNvmDataStore+0x72>
        }
        else
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_NVM_CTXS;
 800d8e0:	2327      	movs	r3, #39	; 0x27
 800d8e2:	703b      	strb	r3, [r7, #0]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800d8e4:	463b      	mov	r3, r7
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	f004 fbfc 	bl	80120e4 <LoRaMacMibGetRequestConfirm>
            nvm = ( LoRaMacNvmData_t * )mibReq.Param.Contexts;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	62fb      	str	r3, [r7, #44]	; 0x2c
            nvm_size = ( ( sizeof( LoRaMacNvmData_t ) + 7 ) & ~0x07 );
 800d8f0:	f44f 63ba 	mov.w	r3, #1488	; 0x5d0
 800d8f4:	62bb      	str	r3, [r7, #40]	; 0x28
            LmHandlerCallbacks->OnStoreContextRequest( nvm, nvm_size );
 800d8f6:	4b11      	ldr	r3, [pc, #68]	; (800d93c <LmHandlerNvmDataStore+0xac>)
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	695b      	ldr	r3, [r3, #20]
 800d8fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d8fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d900:	4798      	blx	r3
        }

        if( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 800d902:	f000 f847 	bl	800d994 <NvmDataMgmtStoreEnd>
 800d906:	4603      	mov	r3, r0
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d002      	beq.n	800d912 <LmHandlerNvmDataStore+0x82>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800d90c:	23ff      	movs	r3, #255	; 0xff
 800d90e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }

    if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) && ( LmHandlerCallbacks->OnNvmDataChange != NULL ) )
 800d912:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800d916:	2b00      	cmp	r3, #0
 800d918:	d109      	bne.n	800d92e <LmHandlerNvmDataStore+0x9e>
 800d91a:	4b08      	ldr	r3, [pc, #32]	; (800d93c <LmHandlerNvmDataStore+0xac>)
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	69db      	ldr	r3, [r3, #28]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d004      	beq.n	800d92e <LmHandlerNvmDataStore+0x9e>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800d924:	4b05      	ldr	r3, [pc, #20]	; (800d93c <LmHandlerNvmDataStore+0xac>)
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	69db      	ldr	r3, [r3, #28]
 800d92a:	2001      	movs	r0, #1
 800d92c:	4798      	blx	r3
    }

    return lmhStatus;
 800d92e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800d932:	4618      	mov	r0, r3
 800d934:	3738      	adds	r7, #56	; 0x38
 800d936:	46bd      	mov	sp, r7
 800d938:	bd80      	pop	{r7, pc}
 800d93a:	bf00      	nop
 800d93c:	200005c0 	.word	0x200005c0

0800d940 <NvmDataMgmtEvent>:
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800d940:	b480      	push	{r7}
 800d942:	b083      	sub	sp, #12
 800d944:	af00      	add	r7, sp, #0
 800d946:	4603      	mov	r3, r0
 800d948:	80fb      	strh	r3, [r7, #6]
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800d94a:	4b06      	ldr	r3, [pc, #24]	; (800d964 <NvmDataMgmtEvent+0x24>)
 800d94c:	881a      	ldrh	r2, [r3, #0]
 800d94e:	88fb      	ldrh	r3, [r7, #6]
 800d950:	4313      	orrs	r3, r2
 800d952:	b29a      	uxth	r2, r3
 800d954:	4b03      	ldr	r3, [pc, #12]	; (800d964 <NvmDataMgmtEvent+0x24>)
 800d956:	801a      	strh	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800d958:	bf00      	nop
 800d95a:	370c      	adds	r7, #12
 800d95c:	46bd      	mov	sp, r7
 800d95e:	bc80      	pop	{r7}
 800d960:	4770      	bx	lr
 800d962:	bf00      	nop
 800d964:	200006e8 	.word	0x200006e8

0800d968 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	af00      	add	r7, sp, #0
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Input checks */
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800d96c:	4b08      	ldr	r3, [pc, #32]	; (800d990 <NvmDataMgmtStoreBegin+0x28>)
 800d96e:	881b      	ldrh	r3, [r3, #0]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d102      	bne.n	800d97a <NvmDataMgmtStoreBegin+0x12>
    {
        /* There was no update. */
        return NVM_DATA_NO_UPDATED_DATA;
 800d974:	f06f 0301 	mvn.w	r3, #1
 800d978:	e008      	b.n	800d98c <NvmDataMgmtStoreBegin+0x24>
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800d97a:	f004 fac3 	bl	8011f04 <LoRaMacStop>
 800d97e:	4603      	mov	r3, r0
 800d980:	2b00      	cmp	r3, #0
 800d982:	d002      	beq.n	800d98a <NvmDataMgmtStoreBegin+0x22>
    {
        return NVM_DATA_NOT_AVAILABLE;
 800d984:	f06f 0302 	mvn.w	r3, #2
 800d988:	e000      	b.n	800d98c <NvmDataMgmtStoreBegin+0x24>
    }
    return NVM_DATA_OK;
 800d98a:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800d98c:	4618      	mov	r0, r3
 800d98e:	bd80      	pop	{r7, pc}
 800d990:	200006e8 	.word	0x200006e8

0800d994 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800d994:	b580      	push	{r7, lr}
 800d996:	af00      	add	r7, sp, #0
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Reset notification flags */
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800d998:	4b03      	ldr	r3, [pc, #12]	; (800d9a8 <NvmDataMgmtStoreEnd+0x14>)
 800d99a:	2200      	movs	r2, #0
 800d99c:	801a      	strh	r2, [r3, #0]

    /* Resume LoRaMac */
    LoRaMacStart( );
 800d99e:	f004 faa3 	bl	8011ee8 <LoRaMacStart>
    return NVM_DATA_OK;
 800d9a2:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	bd80      	pop	{r7, pc}
 800d9a8:	200006e8 	.word	0x200006e8

0800d9ac <ClassBStatusReset>:

/*!
 * Reset Beacon status structure
 */
static inline void ClassBStatusReset( void )
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	af00      	add	r7, sp, #0
    memset1( ( uint8_t * ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 800d9b0:	2220      	movs	r2, #32
 800d9b2:	2100      	movs	r1, #0
 800d9b4:	4802      	ldr	r0, [pc, #8]	; (800d9c0 <ClassBStatusReset+0x14>)
 800d9b6:	f00b fb03 	bl	8018fc0 <memset1>
}
 800d9ba:	bf00      	nop
 800d9bc:	bd80      	pop	{r7, pc}
 800d9be:	bf00      	nop
 800d9c0:	20000700 	.word	0x20000700

0800d9c4 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate         = NULL,  /* To be initialized by LmHandler */
    .OnSystemReset           = NULL,  /* To be initialized by LmHandler */
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800d9c4:	b480      	push	{r7}
 800d9c6:	af00      	add	r7, sp, #0
    return &CompliancePackage;
 800d9c8:	4b02      	ldr	r3, [pc, #8]	; (800d9d4 <LmhpCompliancePackageFactory+0x10>)
}
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	bc80      	pop	{r7}
 800d9d0:	4770      	bx	lr
 800d9d2:	bf00      	nop
 800d9d4:	200000d8 	.word	0x200000d8

0800d9d8 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b086      	sub	sp, #24
 800d9dc:	af02      	add	r7, sp, #8
 800d9de:	60f8      	str	r0, [r7, #12]
 800d9e0:	60b9      	str	r1, [r7, #8]
 800d9e2:	4613      	mov	r3, r2
 800d9e4:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d018      	beq.n	800da1e <LmhpComplianceInit+0x46>
 800d9ec:	68bb      	ldr	r3, [r7, #8]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d015      	beq.n	800da1e <LmhpComplianceInit+0x46>
    {
        ComplianceParams                      = ( LmhpComplianceParams_t * ) params;
 800d9f2:	4a19      	ldr	r2, [pc, #100]	; (800da58 <LmhpComplianceInit+0x80>)
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 800d9f8:	4a18      	ldr	r2, [pc, #96]	; (800da5c <LmhpComplianceInit+0x84>)
 800d9fa:	68bb      	ldr	r3, [r7, #8]
 800d9fc:	60d3      	str	r3, [r2, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800d9fe:	4a17      	ldr	r2, [pc, #92]	; (800da5c <LmhpComplianceInit+0x84>)
 800da00:	79fb      	ldrb	r3, [r7, #7]
 800da02:	7253      	strb	r3, [r2, #9]
        ComplianceTestState.Initialized       = true;
 800da04:	4b15      	ldr	r3, [pc, #84]	; (800da5c <LmhpComplianceInit+0x84>)
 800da06:	2201      	movs	r2, #1
 800da08:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 800da0a:	2300      	movs	r3, #0
 800da0c:	9300      	str	r3, [sp, #0]
 800da0e:	4b14      	ldr	r3, [pc, #80]	; (800da60 <LmhpComplianceInit+0x88>)
 800da10:	2200      	movs	r2, #0
 800da12:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800da16:	4813      	ldr	r0, [pc, #76]	; (800da64 <LmhpComplianceInit+0x8c>)
 800da18:	f00f fb8e 	bl	801d138 <UTIL_TIMER_Create>
 800da1c:	e005      	b.n	800da2a <LmhpComplianceInit+0x52>
    }
    else
    {
        ComplianceParams                = NULL;
 800da1e:	4b0e      	ldr	r3, [pc, #56]	; (800da58 <LmhpComplianceInit+0x80>)
 800da20:	2200      	movs	r2, #0
 800da22:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800da24:	4b0d      	ldr	r3, [pc, #52]	; (800da5c <LmhpComplianceInit+0x84>)
 800da26:	2200      	movs	r2, #0
 800da28:	701a      	strb	r2, [r3, #0]
    }
    ComplianceTestState.RxAppCnt = 0;
 800da2a:	4b0c      	ldr	r3, [pc, #48]	; (800da5c <LmhpComplianceInit+0x84>)
 800da2c:	2200      	movs	r2, #0
 800da2e:	821a      	strh	r2, [r3, #16]
    ClassBStatusReset( );
 800da30:	f7ff ffbc 	bl	800d9ac <ClassBStatusReset>
    ComplianceTestState.IsTxPending = false;
 800da34:	4b09      	ldr	r3, [pc, #36]	; (800da5c <LmhpComplianceInit+0x84>)
 800da36:	2200      	movs	r2, #0
 800da38:	705a      	strb	r2, [r3, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 800da3a:	4b08      	ldr	r3, [pc, #32]	; (800da5c <LmhpComplianceInit+0x84>)
 800da3c:	2200      	movs	r2, #0
 800da3e:	749a      	strb	r2, [r3, #18]
    ComplianceTestState.IsResetCmdPending = false;
 800da40:	4b06      	ldr	r3, [pc, #24]	; (800da5c <LmhpComplianceInit+0x84>)
 800da42:	2200      	movs	r2, #0
 800da44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 800da48:	4b04      	ldr	r3, [pc, #16]	; (800da5c <LmhpComplianceInit+0x84>)
 800da4a:	2200      	movs	r2, #0
 800da4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 800da50:	bf00      	nop
 800da52:	3710      	adds	r7, #16
 800da54:	46bd      	mov	sp, r7
 800da56:	bd80      	pop	{r7, pc}
 800da58:	20000724 	.word	0x20000724
 800da5c:	200006ec 	.word	0x200006ec
 800da60:	0800e361 	.word	0x0800e361
 800da64:	20000728 	.word	0x20000728

0800da68 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800da68:	b480      	push	{r7}
 800da6a:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800da6c:	4b02      	ldr	r3, [pc, #8]	; (800da78 <LmhpComplianceIsInitialized+0x10>)
 800da6e:	781b      	ldrb	r3, [r3, #0]
}
 800da70:	4618      	mov	r0, r3
 800da72:	46bd      	mov	sp, r7
 800da74:	bc80      	pop	{r7}
 800da76:	4770      	bx	lr
 800da78:	200006ec 	.word	0x200006ec

0800da7c <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
 800da7c:	b480      	push	{r7}
 800da7e:	af00      	add	r7, sp, #0
    return ComplianceTestState.IsTxPending;
 800da80:	4b02      	ldr	r3, [pc, #8]	; (800da8c <LmhpComplianceIsTxPending+0x10>)
 800da82:	785b      	ldrb	r3, [r3, #1]
}
 800da84:	4618      	mov	r0, r3
 800da86:	46bd      	mov	sp, r7
 800da88:	bc80      	pop	{r7}
 800da8a:	4770      	bx	lr
 800da8c:	200006ec 	.word	0x200006ec

0800da90 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800da90:	b590      	push	{r4, r7, lr}
 800da92:	b085      	sub	sp, #20
 800da94:	af00      	add	r7, sp, #0
    if( ComplianceTestState.IsTxPending == true )
 800da96:	4b33      	ldr	r3, [pc, #204]	; (800db64 <LmhpComplianceProcess+0xd4>)
 800da98:	785b      	ldrb	r3, [r3, #1]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d03e      	beq.n	800db1c <LmhpComplianceProcess+0x8c>
    {
        TimerTime_t now = TimerGetCurrentTime( );
 800da9e:	f00f fd09 	bl	801d4b4 <UTIL_TIMER_GetCurrentTime>
 800daa2:	60f8      	str	r0, [r7, #12]
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 800daa4:	4b2f      	ldr	r3, [pc, #188]	; (800db64 <LmhpComplianceProcess+0xd4>)
 800daa6:	685c      	ldr	r4, [r3, #4]
 800daa8:	f7ff f8ba 	bl	800cc20 <LmHandlerGetDutyCycleWaitTime>
 800daac:	4603      	mov	r3, r0
 800daae:	4423      	add	r3, r4
 800dab0:	68fa      	ldr	r2, [r7, #12]
 800dab2:	429a      	cmp	r2, r3
 800dab4:	d941      	bls.n	800db3a <LmhpComplianceProcess+0xaa>
        {
            if( ComplianceTestState.DataBufferSize != 0 )
 800dab6:	4b2b      	ldr	r3, [pc, #172]	; (800db64 <LmhpComplianceProcess+0xd4>)
 800dab8:	7a9b      	ldrb	r3, [r3, #10]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d03d      	beq.n	800db3a <LmhpComplianceProcess+0xaa>
            {
                /* Answer commands */
                LmHandlerAppData_t appData =
 800dabe:	23e0      	movs	r3, #224	; 0xe0
 800dac0:	703b      	strb	r3, [r7, #0]
                {
                    .Buffer     = ComplianceTestState.DataBuffer,
                    .BufferSize = ComplianceTestState.DataBufferSize,
 800dac2:	4b28      	ldr	r3, [pc, #160]	; (800db64 <LmhpComplianceProcess+0xd4>)
 800dac4:	7a9b      	ldrb	r3, [r3, #10]
                LmHandlerAppData_t appData =
 800dac6:	707b      	strb	r3, [r7, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 800dac8:	4b26      	ldr	r3, [pc, #152]	; (800db64 <LmhpComplianceProcess+0xd4>)
 800daca:	68db      	ldr	r3, [r3, #12]
                LmHandlerAppData_t appData =
 800dacc:	607b      	str	r3, [r7, #4]
                    .Port       = COMPLIANCE_PORT,
                };

                LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800dace:	23ff      	movs	r3, #255	; 0xff
 800dad0:	72fb      	strb	r3, [r7, #11]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 800dad2:	4b24      	ldr	r3, [pc, #144]	; (800db64 <LmhpComplianceProcess+0xd4>)
 800dad4:	7a19      	ldrb	r1, [r3, #8]
 800dad6:	463b      	mov	r3, r7
 800dad8:	2201      	movs	r2, #1
 800dada:	4618      	mov	r0, r3
 800dadc:	f7ff f968 	bl	800cdb0 <LmHandlerSend>
 800dae0:	4603      	mov	r3, r0
 800dae2:	72fb      	strb	r3, [r7, #11]
                if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) || ( lmhStatus == LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED ) )
 800dae4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d004      	beq.n	800daf6 <LmhpComplianceProcess+0x66>
 800daec:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800daf0:	f113 0f07 	cmn.w	r3, #7
 800daf4:	d106      	bne.n	800db04 <LmhpComplianceProcess+0x74>
                {
                    ComplianceTestState.IsTxPending = false;
 800daf6:	4b1b      	ldr	r3, [pc, #108]	; (800db64 <LmhpComplianceProcess+0xd4>)
 800daf8:	2200      	movs	r2, #0
 800dafa:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 800dafc:	4b19      	ldr	r3, [pc, #100]	; (800db64 <LmhpComplianceProcess+0xd4>)
 800dafe:	2200      	movs	r2, #0
 800db00:	729a      	strb	r2, [r3, #10]
 800db02:	e007      	b.n	800db14 <LmhpComplianceProcess+0x84>
                }
                else
                {
                    /* try to send the message again */
                    TimerSetValue( &ProcessTimer, 1500 );
 800db04:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800db08:	4817      	ldr	r0, [pc, #92]	; (800db68 <LmhpComplianceProcess+0xd8>)
 800db0a:	f00f fc29 	bl	801d360 <UTIL_TIMER_SetPeriod>
                    TimerStart( &ProcessTimer );
 800db0e:	4816      	ldr	r0, [pc, #88]	; (800db68 <LmhpComplianceProcess+0xd8>)
 800db10:	f00f fb48 	bl	801d1a4 <UTIL_TIMER_Start>
                }

                ComplianceTestState.TxPendingTimestamp = now;
 800db14:	4a13      	ldr	r2, [pc, #76]	; (800db64 <LmhpComplianceProcess+0xd4>)
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	6053      	str	r3, [r2, #4]
 800db1a:	e00e      	b.n	800db3a <LmhpComplianceProcess+0xaa>
        }
    }
    else
    {
        /* If no Tx is pending process other commands */
        if( ComplianceTestState.IsClassReqCmdPending == true )
 800db1c:	4b11      	ldr	r3, [pc, #68]	; (800db64 <LmhpComplianceProcess+0xd4>)
 800db1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800db22:	2b00      	cmp	r3, #0
 800db24:	d009      	beq.n	800db3a <LmhpComplianceProcess+0xaa>
        {
            ComplianceTestState.IsClassReqCmdPending = false;
 800db26:	4b0f      	ldr	r3, [pc, #60]	; (800db64 <LmhpComplianceProcess+0xd4>)
 800db28:	2200      	movs	r2, #0
 800db2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 800db2e:	4b0d      	ldr	r3, [pc, #52]	; (800db64 <LmhpComplianceProcess+0xd4>)
 800db30:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800db34:	4618      	mov	r0, r3
 800db36:	f7ff fa31 	bl	800cf9c <LmHandlerRequestClass>
        }
    }

    if( ComplianceTestState.IsResetCmdPending == true )
 800db3a:	4b0a      	ldr	r3, [pc, #40]	; (800db64 <LmhpComplianceProcess+0xd4>)
 800db3c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800db40:	2b00      	cmp	r3, #0
 800db42:	d00a      	beq.n	800db5a <LmhpComplianceProcess+0xca>
    {
        ComplianceTestState.IsResetCmdPending = false;
 800db44:	4b07      	ldr	r3, [pc, #28]	; (800db64 <LmhpComplianceProcess+0xd4>)
 800db46:	2200      	movs	r2, #0
 800db48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Call platform MCU reset API */
        if( CompliancePackage.OnSystemReset != NULL )
 800db4c:	4b07      	ldr	r3, [pc, #28]	; (800db6c <LmhpComplianceProcess+0xdc>)
 800db4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db50:	2b00      	cmp	r3, #0
 800db52:	d002      	beq.n	800db5a <LmhpComplianceProcess+0xca>
        {
            CompliancePackage.OnSystemReset( );
 800db54:	4b05      	ldr	r3, [pc, #20]	; (800db6c <LmhpComplianceProcess+0xdc>)
 800db56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db58:	4798      	blx	r3
        }
    }
}
 800db5a:	bf00      	nop
 800db5c:	3714      	adds	r7, #20
 800db5e:	46bd      	mov	sp, r7
 800db60:	bd90      	pop	{r4, r7, pc}
 800db62:	bf00      	nop
 800db64:	200006ec 	.word	0x200006ec
 800db68:	20000728 	.word	0x20000728
 800db6c:	200000d8 	.word	0x200000d8

0800db70 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t *mcpsIndication )
{
 800db70:	b5b0      	push	{r4, r5, r7, lr}
 800db72:	b0a4      	sub	sp, #144	; 0x90
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
    uint8_t cmdIndex        = 0;
 800db78:	2300      	movs	r3, #0
 800db7a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    MibRequestConfirm_t mibReq;

    if( ComplianceTestState.Initialized == false )
 800db7e:	4bd0      	ldr	r3, [pc, #832]	; (800dec0 <LmhpComplianceOnMcpsIndication+0x350>)
 800db80:	781b      	ldrb	r3, [r3, #0]
 800db82:	f083 0301 	eor.w	r3, r3, #1
 800db86:	b2db      	uxtb	r3, r3
 800db88:	2b00      	cmp	r3, #0
 800db8a:	f040 83bf 	bne.w	800e30c <LmhpComplianceOnMcpsIndication+0x79c>
        return;
    }

    /* Increment the compliance certification protocol downlink counter */
    /* Not counting downlinks on FPort 0 */
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	78db      	ldrb	r3, [r3, #3]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d103      	bne.n	800db9e <LmhpComplianceOnMcpsIndication+0x2e>
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	7b9b      	ldrb	r3, [r3, #14]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d005      	beq.n	800dbaa <LmhpComplianceOnMcpsIndication+0x3a>
    {
        ComplianceTestState.RxAppCnt++;
 800db9e:	4bc8      	ldr	r3, [pc, #800]	; (800dec0 <LmhpComplianceOnMcpsIndication+0x350>)
 800dba0:	8a1b      	ldrh	r3, [r3, #16]
 800dba2:	3301      	adds	r3, #1
 800dba4:	b29a      	uxth	r2, r3
 800dba6:	4bc6      	ldr	r3, [pc, #792]	; (800dec0 <LmhpComplianceOnMcpsIndication+0x350>)
 800dba8:	821a      	strh	r2, [r3, #16]
    }

    if( mcpsIndication->RxData == false )
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	7b5b      	ldrb	r3, [r3, #13]
 800dbae:	f083 0301 	eor.w	r3, r3, #1
 800dbb2:	b2db      	uxtb	r3, r3
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	f040 83ab 	bne.w	800e310 <LmhpComplianceOnMcpsIndication+0x7a0>
    {
        return;
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	78db      	ldrb	r3, [r3, #3]
 800dbbe:	2be0      	cmp	r3, #224	; 0xe0
 800dbc0:	f040 83a8 	bne.w	800e314 <LmhpComplianceOnMcpsIndication+0x7a4>
    {
        return;
    }

    ComplianceTestState.DataBufferSize = 0;
 800dbc4:	4bbe      	ldr	r3, [pc, #760]	; (800dec0 <LmhpComplianceOnMcpsIndication+0x350>)
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	729a      	strb	r2, [r3, #10]

    switch( mcpsIndication->Buffer[cmdIndex++] )
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	689a      	ldr	r2, [r3, #8]
 800dbce:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800dbd2:	1c59      	adds	r1, r3, #1
 800dbd4:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800dbd8:	4413      	add	r3, r2
 800dbda:	781b      	ldrb	r3, [r3, #0]
 800dbdc:	2b7f      	cmp	r3, #127	; 0x7f
 800dbde:	f200 8372 	bhi.w	800e2c6 <LmhpComplianceOnMcpsIndication+0x756>
 800dbe2:	a201      	add	r2, pc, #4	; (adr r2, 800dbe8 <LmhpComplianceOnMcpsIndication+0x78>)
 800dbe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbe8:	0800dde9 	.word	0x0800dde9
 800dbec:	0800de2d 	.word	0x0800de2d
 800dbf0:	0800de37 	.word	0x0800de37
 800dbf4:	0800de4d 	.word	0x0800de4d
 800dbf8:	0800de6f 	.word	0x0800de6f
 800dbfc:	0800de9d 	.word	0x0800de9d
 800dc00:	0800dec9 	.word	0x0800dec9
 800dc04:	0800df27 	.word	0x0800df27
 800dc08:	0800df7f 	.word	0x0800df7f
 800dc0c:	0800dfeb 	.word	0x0800dfeb
 800dc10:	0800e03b 	.word	0x0800e03b
 800dc14:	0800e2c7 	.word	0x0800e2c7
 800dc18:	0800e2c7 	.word	0x0800e2c7
 800dc1c:	0800e2c7 	.word	0x0800e2c7
 800dc20:	0800e2c7 	.word	0x0800e2c7
 800dc24:	0800e2c7 	.word	0x0800e2c7
 800dc28:	0800e2c7 	.word	0x0800e2c7
 800dc2c:	0800e2c7 	.word	0x0800e2c7
 800dc30:	0800e2c7 	.word	0x0800e2c7
 800dc34:	0800e2c7 	.word	0x0800e2c7
 800dc38:	0800e2c7 	.word	0x0800e2c7
 800dc3c:	0800e2c7 	.word	0x0800e2c7
 800dc40:	0800e2c7 	.word	0x0800e2c7
 800dc44:	0800e2c7 	.word	0x0800e2c7
 800dc48:	0800e2c7 	.word	0x0800e2c7
 800dc4c:	0800e2c7 	.word	0x0800e2c7
 800dc50:	0800e2c7 	.word	0x0800e2c7
 800dc54:	0800e2c7 	.word	0x0800e2c7
 800dc58:	0800e2c7 	.word	0x0800e2c7
 800dc5c:	0800e2c7 	.word	0x0800e2c7
 800dc60:	0800e2c7 	.word	0x0800e2c7
 800dc64:	0800e2c7 	.word	0x0800e2c7
 800dc68:	0800e043 	.word	0x0800e043
 800dc6c:	0800e055 	.word	0x0800e055
 800dc70:	0800e05d 	.word	0x0800e05d
 800dc74:	0800e2c7 	.word	0x0800e2c7
 800dc78:	0800e2c7 	.word	0x0800e2c7
 800dc7c:	0800e2c7 	.word	0x0800e2c7
 800dc80:	0800e2c7 	.word	0x0800e2c7
 800dc84:	0800e2c7 	.word	0x0800e2c7
 800dc88:	0800e2c7 	.word	0x0800e2c7
 800dc8c:	0800e2c7 	.word	0x0800e2c7
 800dc90:	0800e2c7 	.word	0x0800e2c7
 800dc94:	0800e2c7 	.word	0x0800e2c7
 800dc98:	0800e2c7 	.word	0x0800e2c7
 800dc9c:	0800e2c7 	.word	0x0800e2c7
 800dca0:	0800e2c7 	.word	0x0800e2c7
 800dca4:	0800e2c7 	.word	0x0800e2c7
 800dca8:	0800e2c7 	.word	0x0800e2c7
 800dcac:	0800e2c7 	.word	0x0800e2c7
 800dcb0:	0800e2c7 	.word	0x0800e2c7
 800dcb4:	0800e2c7 	.word	0x0800e2c7
 800dcb8:	0800e2c7 	.word	0x0800e2c7
 800dcbc:	0800e2c7 	.word	0x0800e2c7
 800dcc0:	0800e2c7 	.word	0x0800e2c7
 800dcc4:	0800e2c7 	.word	0x0800e2c7
 800dcc8:	0800e2c7 	.word	0x0800e2c7
 800dccc:	0800e2c7 	.word	0x0800e2c7
 800dcd0:	0800e2c7 	.word	0x0800e2c7
 800dcd4:	0800e2c7 	.word	0x0800e2c7
 800dcd8:	0800e2c7 	.word	0x0800e2c7
 800dcdc:	0800e2c7 	.word	0x0800e2c7
 800dce0:	0800e2c7 	.word	0x0800e2c7
 800dce4:	0800e2c7 	.word	0x0800e2c7
 800dce8:	0800e2c7 	.word	0x0800e2c7
 800dcec:	0800e2c7 	.word	0x0800e2c7
 800dcf0:	0800e2c7 	.word	0x0800e2c7
 800dcf4:	0800e2c7 	.word	0x0800e2c7
 800dcf8:	0800e2c7 	.word	0x0800e2c7
 800dcfc:	0800e2c7 	.word	0x0800e2c7
 800dd00:	0800e2c7 	.word	0x0800e2c7
 800dd04:	0800e2c7 	.word	0x0800e2c7
 800dd08:	0800e2c7 	.word	0x0800e2c7
 800dd0c:	0800e2c7 	.word	0x0800e2c7
 800dd10:	0800e2c7 	.word	0x0800e2c7
 800dd14:	0800e2c7 	.word	0x0800e2c7
 800dd18:	0800e2c7 	.word	0x0800e2c7
 800dd1c:	0800e2c7 	.word	0x0800e2c7
 800dd20:	0800e2c7 	.word	0x0800e2c7
 800dd24:	0800e2c7 	.word	0x0800e2c7
 800dd28:	0800e2c7 	.word	0x0800e2c7
 800dd2c:	0800e2c7 	.word	0x0800e2c7
 800dd30:	0800e2c7 	.word	0x0800e2c7
 800dd34:	0800e2c7 	.word	0x0800e2c7
 800dd38:	0800e2c7 	.word	0x0800e2c7
 800dd3c:	0800e2c7 	.word	0x0800e2c7
 800dd40:	0800e2c7 	.word	0x0800e2c7
 800dd44:	0800e2c7 	.word	0x0800e2c7
 800dd48:	0800e2c7 	.word	0x0800e2c7
 800dd4c:	0800e2c7 	.word	0x0800e2c7
 800dd50:	0800e2c7 	.word	0x0800e2c7
 800dd54:	0800e2c7 	.word	0x0800e2c7
 800dd58:	0800e2c7 	.word	0x0800e2c7
 800dd5c:	0800e2c7 	.word	0x0800e2c7
 800dd60:	0800e2c7 	.word	0x0800e2c7
 800dd64:	0800e2c7 	.word	0x0800e2c7
 800dd68:	0800e2c7 	.word	0x0800e2c7
 800dd6c:	0800e2c7 	.word	0x0800e2c7
 800dd70:	0800e2c7 	.word	0x0800e2c7
 800dd74:	0800e2c7 	.word	0x0800e2c7
 800dd78:	0800e2c7 	.word	0x0800e2c7
 800dd7c:	0800e2c7 	.word	0x0800e2c7
 800dd80:	0800e2c7 	.word	0x0800e2c7
 800dd84:	0800e2c7 	.word	0x0800e2c7
 800dd88:	0800e2c7 	.word	0x0800e2c7
 800dd8c:	0800e2c7 	.word	0x0800e2c7
 800dd90:	0800e2c7 	.word	0x0800e2c7
 800dd94:	0800e2c7 	.word	0x0800e2c7
 800dd98:	0800e2c7 	.word	0x0800e2c7
 800dd9c:	0800e2c7 	.word	0x0800e2c7
 800dda0:	0800e2c7 	.word	0x0800e2c7
 800dda4:	0800e2c7 	.word	0x0800e2c7
 800dda8:	0800e2c7 	.word	0x0800e2c7
 800ddac:	0800e2c7 	.word	0x0800e2c7
 800ddb0:	0800e2c7 	.word	0x0800e2c7
 800ddb4:	0800e2c7 	.word	0x0800e2c7
 800ddb8:	0800e2c7 	.word	0x0800e2c7
 800ddbc:	0800e2c7 	.word	0x0800e2c7
 800ddc0:	0800e2c7 	.word	0x0800e2c7
 800ddc4:	0800e2c7 	.word	0x0800e2c7
 800ddc8:	0800e2c7 	.word	0x0800e2c7
 800ddcc:	0800e2c7 	.word	0x0800e2c7
 800ddd0:	0800e2c7 	.word	0x0800e2c7
 800ddd4:	0800e2c7 	.word	0x0800e2c7
 800ddd8:	0800e2c7 	.word	0x0800e2c7
 800dddc:	0800e08f 	.word	0x0800e08f
 800dde0:	0800e13f 	.word	0x0800e13f
 800dde4:	0800e171 	.word	0x0800e171
    {
        case COMPLIANCE_PKG_VERSION_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 800dde8:	4b35      	ldr	r3, [pc, #212]	; (800dec0 <LmhpComplianceOnMcpsIndication+0x350>)
 800ddea:	68da      	ldr	r2, [r3, #12]
 800ddec:	4b34      	ldr	r3, [pc, #208]	; (800dec0 <LmhpComplianceOnMcpsIndication+0x350>)
 800ddee:	7a9b      	ldrb	r3, [r3, #10]
 800ddf0:	1c59      	adds	r1, r3, #1
 800ddf2:	b2c8      	uxtb	r0, r1
 800ddf4:	4932      	ldr	r1, [pc, #200]	; (800dec0 <LmhpComplianceOnMcpsIndication+0x350>)
 800ddf6:	7288      	strb	r0, [r1, #10]
 800ddf8:	4413      	add	r3, r2
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 800ddfe:	4b30      	ldr	r3, [pc, #192]	; (800dec0 <LmhpComplianceOnMcpsIndication+0x350>)
 800de00:	68da      	ldr	r2, [r3, #12]
 800de02:	4b2f      	ldr	r3, [pc, #188]	; (800dec0 <LmhpComplianceOnMcpsIndication+0x350>)
 800de04:	7a9b      	ldrb	r3, [r3, #10]
 800de06:	1c59      	adds	r1, r3, #1
 800de08:	b2c8      	uxtb	r0, r1
 800de0a:	492d      	ldr	r1, [pc, #180]	; (800dec0 <LmhpComplianceOnMcpsIndication+0x350>)
 800de0c:	7288      	strb	r0, [r1, #10]
 800de0e:	4413      	add	r3, r2
 800de10:	2206      	movs	r2, #6
 800de12:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 800de14:	4b2a      	ldr	r3, [pc, #168]	; (800dec0 <LmhpComplianceOnMcpsIndication+0x350>)
 800de16:	68da      	ldr	r2, [r3, #12]
 800de18:	4b29      	ldr	r3, [pc, #164]	; (800dec0 <LmhpComplianceOnMcpsIndication+0x350>)
 800de1a:	7a9b      	ldrb	r3, [r3, #10]
 800de1c:	1c59      	adds	r1, r3, #1
 800de1e:	b2c8      	uxtb	r0, r1
 800de20:	4927      	ldr	r1, [pc, #156]	; (800dec0 <LmhpComplianceOnMcpsIndication+0x350>)
 800de22:	7288      	strb	r0, [r1, #10]
 800de24:	4413      	add	r3, r2
 800de26:	2201      	movs	r2, #1
 800de28:	701a      	strb	r2, [r3, #0]
                break;
 800de2a:	e257      	b.n	800e2dc <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DUT_RESET_REQ:
            {
                ComplianceTestState.IsResetCmdPending = true;
 800de2c:	4b24      	ldr	r3, [pc, #144]	; (800dec0 <LmhpComplianceOnMcpsIndication+0x350>)
 800de2e:	2201      	movs	r2, #1
 800de30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                break;
 800de34:	e252      	b.n	800e2dc <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DUT_JOIN_REQ:
            {
                if( CompliancePackage.OnJoinRequest != NULL )
 800de36:	4b23      	ldr	r3, [pc, #140]	; (800dec4 <LmhpComplianceOnMcpsIndication+0x354>)
 800de38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	f000 8245 	beq.w	800e2ca <LmhpComplianceOnMcpsIndication+0x75a>
                {
                    CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800de40:	4b20      	ldr	r3, [pc, #128]	; (800dec4 <LmhpComplianceOnMcpsIndication+0x354>)
 800de42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de44:	2101      	movs	r1, #1
 800de46:	2002      	movs	r0, #2
 800de48:	4798      	blx	r3
                }
                break;
 800de4a:	e23e      	b.n	800e2ca <LmhpComplianceOnMcpsIndication+0x75a>
            }
        case COMPLIANCE_SWITCH_CLASS_REQ:
            {
                /* CLASS_A = 0, CLASS_B = 1, CLASS_C = 2 */
                ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	689a      	ldr	r2, [r3, #8]
 800de50:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800de54:	1c59      	adds	r1, r3, #1
 800de56:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800de5a:	4413      	add	r3, r2
 800de5c:	781a      	ldrb	r2, [r3, #0]
 800de5e:	4b18      	ldr	r3, [pc, #96]	; (800dec0 <LmhpComplianceOnMcpsIndication+0x350>)
 800de60:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                ComplianceTestState.IsClassReqCmdPending = true;
 800de64:	4b16      	ldr	r3, [pc, #88]	; (800dec0 <LmhpComplianceOnMcpsIndication+0x350>)
 800de66:	2201      	movs	r2, #1
 800de68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                break;
 800de6c:	e236      	b.n	800e2dc <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_ADR_BIT_CHANGE_REQ:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type            = MIB_ADR;
 800de6e:	2304      	movs	r3, #4
 800de70:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	689a      	ldr	r2, [r3, #8]
 800de76:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800de7a:	1c59      	adds	r1, r3, #1
 800de7c:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800de80:	4413      	add	r3, r2
 800de82:	781b      	ldrb	r3, [r3, #0]
 800de84:	2b00      	cmp	r3, #0
 800de86:	bf14      	ite	ne
 800de88:	2301      	movne	r3, #1
 800de8a:	2300      	moveq	r3, #0
 800de8c:	b2db      	uxtb	r3, r3
 800de8e:	733b      	strb	r3, [r7, #12]

                LoRaMacMibSetRequestConfirm( &mibReq );
 800de90:	f107 0308 	add.w	r3, r7, #8
 800de94:	4618      	mov	r0, r3
 800de96:	f004 fafd 	bl	8012494 <LoRaMacMibSetRequestConfirm>
                break;
 800de9a:	e21f      	b.n	800e2dc <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_REGIONAL_DUTY_CYCLE_CTRL_REQ:
            {
                LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	689a      	ldr	r2, [r3, #8]
 800dea0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800dea4:	1c59      	adds	r1, r3, #1
 800dea6:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800deaa:	4413      	add	r3, r2
 800deac:	781b      	ldrb	r3, [r3, #0]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	bf14      	ite	ne
 800deb2:	2301      	movne	r3, #1
 800deb4:	2300      	moveq	r3, #0
 800deb6:	b2db      	uxtb	r3, r3
 800deb8:	4618      	mov	r0, r3
 800deba:	f005 f965 	bl	8013188 <LoRaMacTestSetDutyCycleOn>
                break;
 800debe:	e20d      	b.n	800e2dc <LmhpComplianceOnMcpsIndication+0x76c>
 800dec0:	200006ec 	.word	0x200006ec
 800dec4:	200000d8 	.word	0x200000d8
            }
        case COMPLIANCE_TX_PERIODICITY_CHANGE_REQ:
            {
                /* Periodicity in milli-seconds */
                uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 800dec8:	4ba5      	ldr	r3, [pc, #660]	; (800e160 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800deca:	f107 0408 	add.w	r4, r7, #8
 800dece:	461d      	mov	r5, r3
 800ded0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ded2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ded4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ded6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ded8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800dedc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	689a      	ldr	r2, [r3, #8]
 800dee4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800dee8:	1c59      	adds	r1, r3, #1
 800deea:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800deee:	4413      	add	r3, r2
 800def0:	781b      	ldrb	r3, [r3, #0]
 800def2:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

                if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 800def6:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800defa:	2b0a      	cmp	r3, #10
 800defc:	f200 81e7 	bhi.w	800e2ce <LmhpComplianceOnMcpsIndication+0x75e>
                {
                    if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 800df00:	4b98      	ldr	r3, [pc, #608]	; (800e164 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	685b      	ldr	r3, [r3, #4]
 800df06:	2b00      	cmp	r3, #0
 800df08:	f000 81e1 	beq.w	800e2ce <LmhpComplianceOnMcpsIndication+0x75e>
                    {
                        ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 800df0c:	4b95      	ldr	r3, [pc, #596]	; (800e164 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	685a      	ldr	r2, [r3, #4]
 800df12:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800df16:	009b      	lsls	r3, r3, #2
 800df18:	3390      	adds	r3, #144	; 0x90
 800df1a:	443b      	add	r3, r7
 800df1c:	f853 3c88 	ldr.w	r3, [r3, #-136]
 800df20:	4618      	mov	r0, r3
 800df22:	4790      	blx	r2
                    }
                }
                break;
 800df24:	e1d3      	b.n	800e2ce <LmhpComplianceOnMcpsIndication+0x75e>
            }
        case COMPLIANCE_TX_FRAMES_CTRL_REQ:
            {
                uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	689a      	ldr	r2, [r3, #8]
 800df2a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800df2e:	1c59      	adds	r1, r3, #1
 800df30:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800df34:	4413      	add	r3, r2
 800df36:	781b      	ldrb	r3, [r3, #0]
 800df38:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

                if( ( frameType == 1 ) || ( frameType == 2 ) )
 800df3c:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800df40:	2b01      	cmp	r3, #1
 800df42:	d004      	beq.n	800df4e <LmhpComplianceOnMcpsIndication+0x3de>
 800df44:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800df48:	2b02      	cmp	r3, #2
 800df4a:	f040 81c2 	bne.w	800e2d2 <LmhpComplianceOnMcpsIndication+0x762>
                {
                    ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800df4e:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800df52:	2b01      	cmp	r3, #1
 800df54:	bf14      	ite	ne
 800df56:	2301      	movne	r3, #1
 800df58:	2300      	moveq	r3, #0
 800df5a:	b2db      	uxtb	r3, r3
 800df5c:	461a      	mov	r2, r3
 800df5e:	4b82      	ldr	r3, [pc, #520]	; (800e168 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800df60:	721a      	strb	r2, [r3, #8]

                    if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 800df62:	4b80      	ldr	r3, [pc, #512]	; (800e164 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	689b      	ldr	r3, [r3, #8]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	f000 81b2 	beq.w	800e2d2 <LmhpComplianceOnMcpsIndication+0x762>
                    {
                        ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 800df6e:	4b7d      	ldr	r3, [pc, #500]	; (800e164 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	689b      	ldr	r3, [r3, #8]
 800df74:	4a7c      	ldr	r2, [pc, #496]	; (800e168 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800df76:	7a12      	ldrb	r2, [r2, #8]
 800df78:	4610      	mov	r0, r2
 800df7a:	4798      	blx	r3
                    }
                }
                break;
 800df7c:	e1a9      	b.n	800e2d2 <LmhpComplianceOnMcpsIndication+0x762>
            }
        case COMPLIANCE_ECHO_PAYLOAD_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 800df7e:	4b7a      	ldr	r3, [pc, #488]	; (800e168 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800df80:	68da      	ldr	r2, [r3, #12]
 800df82:	4b79      	ldr	r3, [pc, #484]	; (800e168 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800df84:	7a9b      	ldrb	r3, [r3, #10]
 800df86:	1c59      	adds	r1, r3, #1
 800df88:	b2c8      	uxtb	r0, r1
 800df8a:	4977      	ldr	r1, [pc, #476]	; (800e168 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800df8c:	7288      	strb	r0, [r1, #10]
 800df8e:	4413      	add	r3, r2
 800df90:	2208      	movs	r2, #8
 800df92:	701a      	strb	r2, [r3, #0]

                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800df94:	2301      	movs	r3, #1
 800df96:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 800df9a:	e019      	b.n	800dfd0 <LmhpComplianceOnMcpsIndication+0x460>
                     i++ )
                {
                    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	689a      	ldr	r2, [r3, #8]
 800dfa0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800dfa4:	1c59      	adds	r1, r3, #1
 800dfa6:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800dfaa:	4413      	add	r3, r2
 800dfac:	781a      	ldrb	r2, [r3, #0]
 800dfae:	4b6e      	ldr	r3, [pc, #440]	; (800e168 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800dfb0:	68d9      	ldr	r1, [r3, #12]
 800dfb2:	4b6d      	ldr	r3, [pc, #436]	; (800e168 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800dfb4:	7a9b      	ldrb	r3, [r3, #10]
 800dfb6:	1c58      	adds	r0, r3, #1
 800dfb8:	b2c4      	uxtb	r4, r0
 800dfba:	486b      	ldr	r0, [pc, #428]	; (800e168 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800dfbc:	7284      	strb	r4, [r0, #10]
 800dfbe:	440b      	add	r3, r1
 800dfc0:	3201      	adds	r2, #1
 800dfc2:	b2d2      	uxtb	r2, r2
 800dfc4:	701a      	strb	r2, [r3, #0]
                     i++ )
 800dfc6:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800dfca:	3301      	adds	r3, #1
 800dfcc:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800dfd0:	4b65      	ldr	r3, [pc, #404]	; (800e168 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800dfd2:	7a5a      	ldrb	r2, [r3, #9]
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	7b1b      	ldrb	r3, [r3, #12]
 800dfd8:	4293      	cmp	r3, r2
 800dfda:	bf28      	it	cs
 800dfdc:	4613      	movcs	r3, r2
 800dfde:	b2db      	uxtb	r3, r3
 800dfe0:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 800dfe4:	429a      	cmp	r2, r3
 800dfe6:	d3d9      	bcc.n	800df9c <LmhpComplianceOnMcpsIndication+0x42c>
                }
                break;
 800dfe8:	e178      	b.n	800e2dc <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_RX_APP_CNT_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 800dfea:	4b5f      	ldr	r3, [pc, #380]	; (800e168 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800dfec:	68da      	ldr	r2, [r3, #12]
 800dfee:	4b5e      	ldr	r3, [pc, #376]	; (800e168 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800dff0:	7a9b      	ldrb	r3, [r3, #10]
 800dff2:	1c59      	adds	r1, r3, #1
 800dff4:	b2c8      	uxtb	r0, r1
 800dff6:	495c      	ldr	r1, [pc, #368]	; (800e168 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800dff8:	7288      	strb	r0, [r1, #10]
 800dffa:	4413      	add	r3, r2
 800dffc:	2209      	movs	r2, #9
 800dffe:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 800e000:	4b59      	ldr	r3, [pc, #356]	; (800e168 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800e002:	8a18      	ldrh	r0, [r3, #16]
 800e004:	4b58      	ldr	r3, [pc, #352]	; (800e168 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800e006:	68da      	ldr	r2, [r3, #12]
 800e008:	4b57      	ldr	r3, [pc, #348]	; (800e168 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800e00a:	7a9b      	ldrb	r3, [r3, #10]
 800e00c:	1c59      	adds	r1, r3, #1
 800e00e:	b2cc      	uxtb	r4, r1
 800e010:	4955      	ldr	r1, [pc, #340]	; (800e168 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800e012:	728c      	strb	r4, [r1, #10]
 800e014:	4413      	add	r3, r2
 800e016:	b2c2      	uxtb	r2, r0
 800e018:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 800e01a:	4b53      	ldr	r3, [pc, #332]	; (800e168 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800e01c:	8a1b      	ldrh	r3, [r3, #16]
 800e01e:	0a1b      	lsrs	r3, r3, #8
 800e020:	b298      	uxth	r0, r3
 800e022:	4b51      	ldr	r3, [pc, #324]	; (800e168 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800e024:	68da      	ldr	r2, [r3, #12]
 800e026:	4b50      	ldr	r3, [pc, #320]	; (800e168 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800e028:	7a9b      	ldrb	r3, [r3, #10]
 800e02a:	1c59      	adds	r1, r3, #1
 800e02c:	b2cc      	uxtb	r4, r1
 800e02e:	494e      	ldr	r1, [pc, #312]	; (800e168 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800e030:	728c      	strb	r4, [r1, #10]
 800e032:	4413      	add	r3, r2
 800e034:	b2c2      	uxtb	r2, r0
 800e036:	701a      	strb	r2, [r3, #0]
                break;
 800e038:	e150      	b.n	800e2dc <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_RX_APP_CNT_RESET_REQ:
            {
                ComplianceTestState.RxAppCnt = 0;
 800e03a:	4b4b      	ldr	r3, [pc, #300]	; (800e168 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800e03c:	2200      	movs	r2, #0
 800e03e:	821a      	strh	r2, [r3, #16]
                break;
 800e040:	e14c      	b.n	800e2dc <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_LINK_CHECK_REQ:
            {
                MlmeReq_t mlmeReq;
                mlmeReq.Type = MLME_LINK_CHECK;
 800e042:	2305      	movs	r3, #5
 800e044:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50

                LoRaMacMlmeRequest( &mlmeReq );
 800e048:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e04c:	4618      	mov	r0, r3
 800e04e:	f004 fdcb 	bl	8012be8 <LoRaMacMlmeRequest>
                break;
 800e052:	e143      	b.n	800e2dc <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DEVICE_TIME_REQ:
            {
                CompliancePackage.OnDeviceTimeRequest( );
 800e054:	4b45      	ldr	r3, [pc, #276]	; (800e16c <LmhpComplianceOnMcpsIndication+0x5fc>)
 800e056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e058:	4798      	blx	r3
                break;
 800e05a:	e13f      	b.n	800e2dc <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_PING_SLOT_INFO_REQ:
            {
                ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	689a      	ldr	r2, [r3, #8]
 800e060:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e064:	1c59      	adds	r1, r3, #1
 800e066:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800e06a:	4413      	add	r3, r2
 800e06c:	781a      	ldrb	r2, [r3, #0]
 800e06e:	4b3e      	ldr	r3, [pc, #248]	; (800e168 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800e070:	755a      	strb	r2, [r3, #21]
                if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 800e072:	4b3c      	ldr	r3, [pc, #240]	; (800e164 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	68db      	ldr	r3, [r3, #12]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	f000 812c 	beq.w	800e2d6 <LmhpComplianceOnMcpsIndication+0x766>
                {
                    ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 800e07e:	4b39      	ldr	r3, [pc, #228]	; (800e164 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	68db      	ldr	r3, [r3, #12]
 800e084:	4a38      	ldr	r2, [pc, #224]	; (800e168 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800e086:	7d52      	ldrb	r2, [r2, #21]
 800e088:	4610      	mov	r0, r2
 800e08a:	4798      	blx	r3
                }
                break;
 800e08c:	e123      	b.n	800e2d6 <LmhpComplianceOnMcpsIndication+0x766>
            }
#endif /* CLASS_B not available */
        case COMPLIANCE_TX_CW_REQ:
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 7 )
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	7b1b      	ldrb	r3, [r3, #12]
 800e092:	2b07      	cmp	r3, #7
 800e094:	f040 8121 	bne.w	800e2da <LmhpComplianceOnMcpsIndication+0x76a>
                {
                    mlmeReq.Type = MLME_TXCW;
 800e098:	2306      	movs	r3, #6
 800e09a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
                    mlmeReq.Req.TxCw.Timeout =
                        ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	689a      	ldr	r2, [r3, #8]
 800e0a2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e0a6:	4413      	add	r3, r2
 800e0a8:	781b      	ldrb	r3, [r3, #0]
 800e0aa:	b21a      	sxth	r2, r3
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	6899      	ldr	r1, [r3, #8]
 800e0b0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e0b4:	3301      	adds	r3, #1
 800e0b6:	440b      	add	r3, r1
 800e0b8:	781b      	ldrb	r3, [r3, #0]
 800e0ba:	021b      	lsls	r3, r3, #8
 800e0bc:	b21b      	sxth	r3, r3
 800e0be:	4313      	orrs	r3, r2
 800e0c0:	b21b      	sxth	r3, r3
 800e0c2:	b29b      	uxth	r3, r3
                    mlmeReq.Req.TxCw.Timeout =
 800e0c4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                    cmdIndex += 2;
 800e0c8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e0cc:	3302      	adds	r3, #2
 800e0ce:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                    mlmeReq.Req.TxCw.Frequency =
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	689a      	ldr	r2, [r3, #8]
 800e0d6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e0da:	4413      	add	r3, r2
 800e0dc:	781b      	ldrb	r3, [r3, #0]
 800e0de:	4619      	mov	r1, r3
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	689a      	ldr	r2, [r3, #8]
 800e0e4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e0e8:	3301      	adds	r3, #1
 800e0ea:	4413      	add	r3, r2
 800e0ec:	781b      	ldrb	r3, [r3, #0]
 800e0ee:	021b      	lsls	r3, r3, #8
 800e0f0:	ea41 0203 	orr.w	r2, r1, r3
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	6899      	ldr	r1, [r3, #8]
 800e0f8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e0fc:	3302      	adds	r3, #2
 800e0fe:	440b      	add	r3, r1
 800e100:	781b      	ldrb	r3, [r3, #0]
 800e102:	041b      	lsls	r3, r3, #16
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800e104:	4313      	orrs	r3, r2
 800e106:	461a      	mov	r2, r3
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800e108:	2364      	movs	r3, #100	; 0x64
 800e10a:	fb02 f303 	mul.w	r3, r2, r3
                    mlmeReq.Req.TxCw.Frequency =
 800e10e:	647b      	str	r3, [r7, #68]	; 0x44
                        100;
                    cmdIndex += 3;
 800e110:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e114:	3303      	adds	r3, #3
 800e116:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	689a      	ldr	r2, [r3, #8]
 800e11e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e122:	1c59      	adds	r1, r3, #1
 800e124:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800e128:	4413      	add	r3, r2
 800e12a:	781b      	ldrb	r3, [r3, #0]
 800e12c:	b25b      	sxtb	r3, r3
 800e12e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

                    LoRaMacMlmeRequest( &mlmeReq );
 800e132:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800e136:	4618      	mov	r0, r3
 800e138:	f004 fd56 	bl	8012be8 <LoRaMacMlmeRequest>
                }
                break;
 800e13c:	e0cd      	b.n	800e2da <LmhpComplianceOnMcpsIndication+0x76a>
            }
        case COMPLIANCE_DUT_FPORT_224_DISABLE_REQ:
            {
                mibReq.Type = MIB_IS_CERT_FPORT_ON;
 800e13e:	233b      	movs	r3, #59	; 0x3b
 800e140:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                mibReq.Param.IsCertPortOn = false;
 800e144:	2300      	movs	r3, #0
 800e146:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacMibSetRequestConfirm( &mibReq );
 800e14a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e14e:	4618      	mov	r0, r3
 800e150:	f004 f9a0 	bl	8012494 <LoRaMacMibSetRequestConfirm>

                ComplianceTestState.IsResetCmdPending = true;
 800e154:	4b04      	ldr	r3, [pc, #16]	; (800e168 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800e156:	2201      	movs	r2, #1
 800e158:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                break;
 800e15c:	e0be      	b.n	800e2dc <LmhpComplianceOnMcpsIndication+0x76c>
 800e15e:	bf00      	nop
 800e160:	0801e3e0 	.word	0x0801e3e0
 800e164:	20000724 	.word	0x20000724
 800e168:	200006ec 	.word	0x200006ec
 800e16c:	200000d8 	.word	0x200000d8
            {
                Version_t           lrwanVersion;
                Version_t           lrwanRpVersion;
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_LORAWAN_VERSION;
 800e170:	232a      	movs	r3, #42	; 0x2a
 800e172:	723b      	strb	r3, [r7, #8]

                LoRaMacMibGetRequestConfirm( &mibReq );
 800e174:	f107 0308 	add.w	r3, r7, #8
 800e178:	4618      	mov	r0, r3
 800e17a:	f003 ffb3 	bl	80120e4 <LoRaMacMibGetRequestConfirm>
                lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	63bb      	str	r3, [r7, #56]	; 0x38
                lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 800e182:	693b      	ldr	r3, [r7, #16]
 800e184:	637b      	str	r3, [r7, #52]	; 0x34

                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 800e186:	4b65      	ldr	r3, [pc, #404]	; (800e31c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e188:	68da      	ldr	r2, [r3, #12]
 800e18a:	4b64      	ldr	r3, [pc, #400]	; (800e31c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e18c:	7a9b      	ldrb	r3, [r3, #10]
 800e18e:	1c59      	adds	r1, r3, #1
 800e190:	b2c8      	uxtb	r0, r1
 800e192:	4962      	ldr	r1, [pc, #392]	; (800e31c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e194:	7288      	strb	r0, [r1, #10]
 800e196:	4413      	add	r3, r2
 800e198:	227f      	movs	r2, #127	; 0x7f
 800e19a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 800e19c:	4b60      	ldr	r3, [pc, #384]	; (800e320 <LmhpComplianceOnMcpsIndication+0x7b0>)
 800e19e:	681a      	ldr	r2, [r3, #0]
 800e1a0:	4b5e      	ldr	r3, [pc, #376]	; (800e31c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e1a2:	68d9      	ldr	r1, [r3, #12]
 800e1a4:	4b5d      	ldr	r3, [pc, #372]	; (800e31c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e1a6:	7a9b      	ldrb	r3, [r3, #10]
 800e1a8:	1c58      	adds	r0, r3, #1
 800e1aa:	b2c4      	uxtb	r4, r0
 800e1ac:	485b      	ldr	r0, [pc, #364]	; (800e31c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e1ae:	7284      	strb	r4, [r0, #10]
 800e1b0:	440b      	add	r3, r1
 800e1b2:	78d2      	ldrb	r2, [r2, #3]
 800e1b4:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 800e1b6:	4b5a      	ldr	r3, [pc, #360]	; (800e320 <LmhpComplianceOnMcpsIndication+0x7b0>)
 800e1b8:	681a      	ldr	r2, [r3, #0]
 800e1ba:	4b58      	ldr	r3, [pc, #352]	; (800e31c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e1bc:	68d9      	ldr	r1, [r3, #12]
 800e1be:	4b57      	ldr	r3, [pc, #348]	; (800e31c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e1c0:	7a9b      	ldrb	r3, [r3, #10]
 800e1c2:	1c58      	adds	r0, r3, #1
 800e1c4:	b2c4      	uxtb	r4, r0
 800e1c6:	4855      	ldr	r0, [pc, #340]	; (800e31c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e1c8:	7284      	strb	r4, [r0, #10]
 800e1ca:	440b      	add	r3, r1
 800e1cc:	7892      	ldrb	r2, [r2, #2]
 800e1ce:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 800e1d0:	4b53      	ldr	r3, [pc, #332]	; (800e320 <LmhpComplianceOnMcpsIndication+0x7b0>)
 800e1d2:	681a      	ldr	r2, [r3, #0]
 800e1d4:	4b51      	ldr	r3, [pc, #324]	; (800e31c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e1d6:	68d9      	ldr	r1, [r3, #12]
 800e1d8:	4b50      	ldr	r3, [pc, #320]	; (800e31c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e1da:	7a9b      	ldrb	r3, [r3, #10]
 800e1dc:	1c58      	adds	r0, r3, #1
 800e1de:	b2c4      	uxtb	r4, r0
 800e1e0:	484e      	ldr	r0, [pc, #312]	; (800e31c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e1e2:	7284      	strb	r4, [r0, #10]
 800e1e4:	440b      	add	r3, r1
 800e1e6:	7852      	ldrb	r2, [r2, #1]
 800e1e8:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 800e1ea:	4b4d      	ldr	r3, [pc, #308]	; (800e320 <LmhpComplianceOnMcpsIndication+0x7b0>)
 800e1ec:	681a      	ldr	r2, [r3, #0]
 800e1ee:	4b4b      	ldr	r3, [pc, #300]	; (800e31c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e1f0:	68d9      	ldr	r1, [r3, #12]
 800e1f2:	4b4a      	ldr	r3, [pc, #296]	; (800e31c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e1f4:	7a9b      	ldrb	r3, [r3, #10]
 800e1f6:	1c58      	adds	r0, r3, #1
 800e1f8:	b2c4      	uxtb	r4, r0
 800e1fa:	4848      	ldr	r0, [pc, #288]	; (800e31c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e1fc:	7284      	strb	r4, [r0, #10]
 800e1fe:	440b      	add	r3, r1
 800e200:	7812      	ldrb	r2, [r2, #0]
 800e202:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 800e204:	4b45      	ldr	r3, [pc, #276]	; (800e31c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e206:	68da      	ldr	r2, [r3, #12]
 800e208:	4b44      	ldr	r3, [pc, #272]	; (800e31c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e20a:	7a9b      	ldrb	r3, [r3, #10]
 800e20c:	1c59      	adds	r1, r3, #1
 800e20e:	b2c8      	uxtb	r0, r1
 800e210:	4942      	ldr	r1, [pc, #264]	; (800e31c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e212:	7288      	strb	r0, [r1, #10]
 800e214:	4413      	add	r3, r2
 800e216:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800e21a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 800e21c:	4b3f      	ldr	r3, [pc, #252]	; (800e31c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e21e:	68da      	ldr	r2, [r3, #12]
 800e220:	4b3e      	ldr	r3, [pc, #248]	; (800e31c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e222:	7a9b      	ldrb	r3, [r3, #10]
 800e224:	1c59      	adds	r1, r3, #1
 800e226:	b2c8      	uxtb	r0, r1
 800e228:	493c      	ldr	r1, [pc, #240]	; (800e31c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e22a:	7288      	strb	r0, [r1, #10]
 800e22c:	4413      	add	r3, r2
 800e22e:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800e232:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 800e234:	4b39      	ldr	r3, [pc, #228]	; (800e31c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e236:	68da      	ldr	r2, [r3, #12]
 800e238:	4b38      	ldr	r3, [pc, #224]	; (800e31c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e23a:	7a9b      	ldrb	r3, [r3, #10]
 800e23c:	1c59      	adds	r1, r3, #1
 800e23e:	b2c8      	uxtb	r0, r1
 800e240:	4936      	ldr	r1, [pc, #216]	; (800e31c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e242:	7288      	strb	r0, [r1, #10]
 800e244:	4413      	add	r3, r2
 800e246:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 800e24a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 800e24c:	4b33      	ldr	r3, [pc, #204]	; (800e31c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e24e:	68da      	ldr	r2, [r3, #12]
 800e250:	4b32      	ldr	r3, [pc, #200]	; (800e31c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e252:	7a9b      	ldrb	r3, [r3, #10]
 800e254:	1c59      	adds	r1, r3, #1
 800e256:	b2c8      	uxtb	r0, r1
 800e258:	4930      	ldr	r1, [pc, #192]	; (800e31c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e25a:	7288      	strb	r0, [r1, #10]
 800e25c:	4413      	add	r3, r2
 800e25e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e262:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 800e264:	4b2d      	ldr	r3, [pc, #180]	; (800e31c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e266:	68da      	ldr	r2, [r3, #12]
 800e268:	4b2c      	ldr	r3, [pc, #176]	; (800e31c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e26a:	7a9b      	ldrb	r3, [r3, #10]
 800e26c:	1c59      	adds	r1, r3, #1
 800e26e:	b2c8      	uxtb	r0, r1
 800e270:	492a      	ldr	r1, [pc, #168]	; (800e31c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e272:	7288      	strb	r0, [r1, #10]
 800e274:	4413      	add	r3, r2
 800e276:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e27a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 800e27c:	4b27      	ldr	r3, [pc, #156]	; (800e31c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e27e:	68da      	ldr	r2, [r3, #12]
 800e280:	4b26      	ldr	r3, [pc, #152]	; (800e31c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e282:	7a9b      	ldrb	r3, [r3, #10]
 800e284:	1c59      	adds	r1, r3, #1
 800e286:	b2c8      	uxtb	r0, r1
 800e288:	4924      	ldr	r1, [pc, #144]	; (800e31c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e28a:	7288      	strb	r0, [r1, #10]
 800e28c:	4413      	add	r3, r2
 800e28e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800e292:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 800e294:	4b21      	ldr	r3, [pc, #132]	; (800e31c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e296:	68da      	ldr	r2, [r3, #12]
 800e298:	4b20      	ldr	r3, [pc, #128]	; (800e31c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e29a:	7a9b      	ldrb	r3, [r3, #10]
 800e29c:	1c59      	adds	r1, r3, #1
 800e29e:	b2c8      	uxtb	r0, r1
 800e2a0:	491e      	ldr	r1, [pc, #120]	; (800e31c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e2a2:	7288      	strb	r0, [r1, #10]
 800e2a4:	4413      	add	r3, r2
 800e2a6:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800e2aa:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 800e2ac:	4b1b      	ldr	r3, [pc, #108]	; (800e31c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e2ae:	68da      	ldr	r2, [r3, #12]
 800e2b0:	4b1a      	ldr	r3, [pc, #104]	; (800e31c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e2b2:	7a9b      	ldrb	r3, [r3, #10]
 800e2b4:	1c59      	adds	r1, r3, #1
 800e2b6:	b2c8      	uxtb	r0, r1
 800e2b8:	4918      	ldr	r1, [pc, #96]	; (800e31c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e2ba:	7288      	strb	r0, [r1, #10]
 800e2bc:	4413      	add	r3, r2
 800e2be:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800e2c2:	701a      	strb	r2, [r3, #0]
                break;
 800e2c4:	e00a      	b.n	800e2dc <LmhpComplianceOnMcpsIndication+0x76c>
            }
        default:
            {
                break;
 800e2c6:	bf00      	nop
 800e2c8:	e008      	b.n	800e2dc <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800e2ca:	bf00      	nop
 800e2cc:	e006      	b.n	800e2dc <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800e2ce:	bf00      	nop
 800e2d0:	e004      	b.n	800e2dc <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800e2d2:	bf00      	nop
 800e2d4:	e002      	b.n	800e2dc <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800e2d6:	bf00      	nop
 800e2d8:	e000      	b.n	800e2dc <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800e2da:	bf00      	nop
            }
    }

    if( ComplianceTestState.DataBufferSize != 0 )
 800e2dc:	4b0f      	ldr	r3, [pc, #60]	; (800e31c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e2de:	7a9b      	ldrb	r3, [r3, #10]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d00c      	beq.n	800e2fe <LmhpComplianceOnMcpsIndication+0x78e>
    {
        if( ProcessTimer.IsRunning == 0U)
 800e2e4:	4b0f      	ldr	r3, [pc, #60]	; (800e324 <LmhpComplianceOnMcpsIndication+0x7b4>)
 800e2e6:	7a5b      	ldrb	r3, [r3, #9]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d114      	bne.n	800e316 <LmhpComplianceOnMcpsIndication+0x7a6>
        {
            TimerSetValue( &ProcessTimer, 1000 );
 800e2ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800e2f0:	480c      	ldr	r0, [pc, #48]	; (800e324 <LmhpComplianceOnMcpsIndication+0x7b4>)
 800e2f2:	f00f f835 	bl	801d360 <UTIL_TIMER_SetPeriod>
            TimerStart( &ProcessTimer );
 800e2f6:	480b      	ldr	r0, [pc, #44]	; (800e324 <LmhpComplianceOnMcpsIndication+0x7b4>)
 800e2f8:	f00e ff54 	bl	801d1a4 <UTIL_TIMER_Start>
 800e2fc:	e00b      	b.n	800e316 <LmhpComplianceOnMcpsIndication+0x7a6>
        }
    }
    else
    {
        /* Abort any pending Tx as a new command has been processed */
        TimerStop( &ProcessTimer );
 800e2fe:	4809      	ldr	r0, [pc, #36]	; (800e324 <LmhpComplianceOnMcpsIndication+0x7b4>)
 800e300:	f00e ffbe 	bl	801d280 <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 800e304:	4b05      	ldr	r3, [pc, #20]	; (800e31c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e306:	2200      	movs	r2, #0
 800e308:	705a      	strb	r2, [r3, #1]
 800e30a:	e004      	b.n	800e316 <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 800e30c:	bf00      	nop
 800e30e:	e002      	b.n	800e316 <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 800e310:	bf00      	nop
 800e312:	e000      	b.n	800e316 <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 800e314:	bf00      	nop
    }
}
 800e316:	3790      	adds	r7, #144	; 0x90
 800e318:	46bd      	mov	sp, r7
 800e31a:	bdb0      	pop	{r4, r5, r7, pc}
 800e31c:	200006ec 	.word	0x200006ec
 800e320:	20000724 	.word	0x20000724
 800e324:	20000728 	.word	0x20000728

0800e328 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800e328:	b480      	push	{r7}
 800e32a:	b083      	sub	sp, #12
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
                }
                break;
            }
#endif /* CLASS_B not available */
        default:
            break;
 800e330:	bf00      	nop
    }
}
 800e332:	bf00      	nop
 800e334:	370c      	adds	r7, #12
 800e336:	46bd      	mov	sp, r7
 800e338:	bc80      	pop	{r7}
 800e33a:	4770      	bx	lr

0800e33c <LmhpComplianceOnMlmeIndication>:

static void LmhpComplianceOnMlmeIndication( MlmeIndication_t *mlmeIndication )
{
 800e33c:	b480      	push	{r7}
 800e33e:	b083      	sub	sp, #12
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800e344:	4b05      	ldr	r3, [pc, #20]	; (800e35c <LmhpComplianceOnMlmeIndication+0x20>)
 800e346:	781b      	ldrb	r3, [r3, #0]
 800e348:	f083 0301 	eor.w	r3, r3, #1
 800e34c:	b2db      	uxtb	r3, r3
 800e34e:	2b00      	cmp	r3, #0
    {
        return;
 800e350:	bf00      	nop
            }
#endif /* CLASS_B not available */
        default:
            break;
    }
}
 800e352:	370c      	adds	r7, #12
 800e354:	46bd      	mov	sp, r7
 800e356:	bc80      	pop	{r7}
 800e358:	4770      	bx	lr
 800e35a:	bf00      	nop
 800e35c:	200006ec 	.word	0x200006ec

0800e360 <OnProcessTimer>:
    }
}
#endif /* CLASS_B not available */

static void OnProcessTimer( void *context )
{
 800e360:	b580      	push	{r7, lr}
 800e362:	b082      	sub	sp, #8
 800e364:	af00      	add	r7, sp, #0
 800e366:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.DataBufferSize != 0 )
 800e368:	4b08      	ldr	r3, [pc, #32]	; (800e38c <OnProcessTimer+0x2c>)
 800e36a:	7a9b      	ldrb	r3, [r3, #10]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d002      	beq.n	800e376 <OnProcessTimer+0x16>
    {
        ComplianceTestState.IsTxPending = true;
 800e370:	4b06      	ldr	r3, [pc, #24]	; (800e38c <OnProcessTimer+0x2c>)
 800e372:	2201      	movs	r2, #1
 800e374:	705a      	strb	r2, [r3, #1]
    }
    if( CompliancePackage.OnPackageProcessEvent != NULL )
 800e376:	4b06      	ldr	r3, [pc, #24]	; (800e390 <OnProcessTimer+0x30>)
 800e378:	695b      	ldr	r3, [r3, #20]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d002      	beq.n	800e384 <OnProcessTimer+0x24>
    {
        CompliancePackage.OnPackageProcessEvent();
 800e37e:	4b04      	ldr	r3, [pc, #16]	; (800e390 <OnProcessTimer+0x30>)
 800e380:	695b      	ldr	r3, [r3, #20]
 800e382:	4798      	blx	r3
    }
}
 800e384:	bf00      	nop
 800e386:	3708      	adds	r7, #8
 800e388:	46bd      	mov	sp, r7
 800e38a:	bd80      	pop	{r7, pc}
 800e38c:	200006ec 	.word	0x200006ec
 800e390:	200000d8 	.word	0x200000d8

0800e394 <LmhpPackagesRegistrationInit>:

/* Private variables ---------------------------------------------------------*/

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmhpPackagesRegistrationInit( Version_t *fwVersion )
{
 800e394:	b480      	push	{r7}
 800e396:	b083      	sub	sp, #12
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
        return LORAMAC_HANDLER_ERROR;
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
 800e39c:	2300      	movs	r3, #0
}
 800e39e:	4618      	mov	r0, r3
 800e3a0:	370c      	adds	r7, #12
 800e3a2:	46bd      	mov	sp, r7
 800e3a4:	bc80      	pop	{r7}
 800e3a6:	4770      	bx	lr

0800e3a8 <LmhpPackagesRegister>:

LmHandlerErrorStatus_t LmhpPackagesRegister( uint8_t id, LmhPackage_t **package )
{
 800e3a8:	b480      	push	{r7}
 800e3aa:	b083      	sub	sp, #12
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	4603      	mov	r3, r0
 800e3b0:	6039      	str	r1, [r7, #0]
 800e3b2:	71fb      	strb	r3, [r7, #7]
                break;
            }
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
 800e3b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	370c      	adds	r7, #12
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	bc80      	pop	{r7}
 800e3c0:	4770      	bx	lr
	...

0800e3c4 <OnRadioTxDone>:
}RxDoneParams_t;

static RxDoneParams_t RxDoneParams;

static void OnRadioTxDone( void )
{
 800e3c4:	b590      	push	{r4, r7, lr}
 800e3c6:	b083      	sub	sp, #12
 800e3c8:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800e3ca:	f00f f873 	bl	801d4b4 <UTIL_TIMER_GetCurrentTime>
 800e3ce:	4603      	mov	r3, r0
 800e3d0:	4a0f      	ldr	r2, [pc, #60]	; (800e410 <OnRadioTxDone+0x4c>)
 800e3d2:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800e3d4:	4c0f      	ldr	r4, [pc, #60]	; (800e414 <OnRadioTxDone+0x50>)
 800e3d6:	463b      	mov	r3, r7
 800e3d8:	4618      	mov	r0, r3
 800e3da:	f00e f9e9 	bl	801c7b0 <SysTimeGet>
 800e3de:	f504 734e 	add.w	r3, r4, #824	; 0x338
 800e3e2:	463a      	mov	r2, r7
 800e3e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e3e8:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800e3ec:	4a0a      	ldr	r2, [pc, #40]	; (800e418 <OnRadioTxDone+0x54>)
 800e3ee:	7813      	ldrb	r3, [r2, #0]
 800e3f0:	f043 0320 	orr.w	r3, r3, #32
 800e3f4:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800e3f6:	f003 fa71 	bl	80118dc <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800e3fa:	4b08      	ldr	r3, [pc, #32]	; (800e41c <OnRadioTxDone+0x58>)
 800e3fc:	2201      	movs	r2, #1
 800e3fe:	2100      	movs	r1, #0
 800e400:	2002      	movs	r0, #2
 800e402:	f00f f947 	bl	801d694 <UTIL_ADV_TRACE_COND_FSend>
}
 800e406:	bf00      	nop
 800e408:	370c      	adds	r7, #12
 800e40a:	46bd      	mov	sp, r7
 800e40c:	bd90      	pop	{r4, r7, pc}
 800e40e:	bf00      	nop
 800e410:	20001888 	.word	0x20001888
 800e414:	20000740 	.word	0x20000740
 800e418:	20001884 	.word	0x20001884
 800e41c:	0801e40c 	.word	0x0801e40c

0800e420 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800e420:	b580      	push	{r7, lr}
 800e422:	b084      	sub	sp, #16
 800e424:	af00      	add	r7, sp, #0
 800e426:	60f8      	str	r0, [r7, #12]
 800e428:	4608      	mov	r0, r1
 800e42a:	4611      	mov	r1, r2
 800e42c:	461a      	mov	r2, r3
 800e42e:	4603      	mov	r3, r0
 800e430:	817b      	strh	r3, [r7, #10]
 800e432:	460b      	mov	r3, r1
 800e434:	813b      	strh	r3, [r7, #8]
 800e436:	4613      	mov	r3, r2
 800e438:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800e43a:	f00f f83b 	bl	801d4b4 <UTIL_TIMER_GetCurrentTime>
 800e43e:	4603      	mov	r3, r0
 800e440:	4a11      	ldr	r2, [pc, #68]	; (800e488 <OnRadioRxDone+0x68>)
 800e442:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800e444:	4a10      	ldr	r2, [pc, #64]	; (800e488 <OnRadioRxDone+0x68>)
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800e44a:	4a0f      	ldr	r2, [pc, #60]	; (800e488 <OnRadioRxDone+0x68>)
 800e44c:	897b      	ldrh	r3, [r7, #10]
 800e44e:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800e450:	4a0d      	ldr	r2, [pc, #52]	; (800e488 <OnRadioRxDone+0x68>)
 800e452:	893b      	ldrh	r3, [r7, #8]
 800e454:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800e456:	4a0c      	ldr	r2, [pc, #48]	; (800e488 <OnRadioRxDone+0x68>)
 800e458:	79fb      	ldrb	r3, [r7, #7]
 800e45a:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800e45c:	4a0b      	ldr	r2, [pc, #44]	; (800e48c <OnRadioRxDone+0x6c>)
 800e45e:	7813      	ldrb	r3, [r2, #0]
 800e460:	f043 0310 	orr.w	r3, r3, #16
 800e464:	7013      	strb	r3, [r2, #0]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 800e466:	4a09      	ldr	r2, [pc, #36]	; (800e48c <OnRadioRxDone+0x6c>)
 800e468:	7813      	ldrb	r3, [r2, #0]
 800e46a:	f043 0301 	orr.w	r3, r3, #1
 800e46e:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    OnMacProcessNotify( );
 800e470:	f003 fa34 	bl	80118dc <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800e474:	4b06      	ldr	r3, [pc, #24]	; (800e490 <OnRadioRxDone+0x70>)
 800e476:	2201      	movs	r2, #1
 800e478:	2100      	movs	r1, #0
 800e47a:	2002      	movs	r0, #2
 800e47c:	f00f f90a 	bl	801d694 <UTIL_ADV_TRACE_COND_FSend>
}
 800e480:	bf00      	nop
 800e482:	3710      	adds	r7, #16
 800e484:	46bd      	mov	sp, r7
 800e486:	bd80      	pop	{r7, pc}
 800e488:	2000188c 	.word	0x2000188c
 800e48c:	20001884 	.word	0x20001884
 800e490:	0801e41c 	.word	0x0801e41c

0800e494 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800e494:	b580      	push	{r7, lr}
 800e496:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800e498:	4a07      	ldr	r2, [pc, #28]	; (800e4b8 <OnRadioTxTimeout+0x24>)
 800e49a:	7813      	ldrb	r3, [r2, #0]
 800e49c:	f043 0308 	orr.w	r3, r3, #8
 800e4a0:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800e4a2:	f003 fa1b 	bl	80118dc <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800e4a6:	4b05      	ldr	r3, [pc, #20]	; (800e4bc <OnRadioTxTimeout+0x28>)
 800e4a8:	2201      	movs	r2, #1
 800e4aa:	2100      	movs	r1, #0
 800e4ac:	2002      	movs	r0, #2
 800e4ae:	f00f f8f1 	bl	801d694 <UTIL_ADV_TRACE_COND_FSend>
}
 800e4b2:	bf00      	nop
 800e4b4:	bd80      	pop	{r7, pc}
 800e4b6:	bf00      	nop
 800e4b8:	20001884 	.word	0x20001884
 800e4bc:	0801e42c 	.word	0x0801e42c

0800e4c0 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800e4c4:	4a04      	ldr	r2, [pc, #16]	; (800e4d8 <OnRadioRxError+0x18>)
 800e4c6:	7813      	ldrb	r3, [r2, #0]
 800e4c8:	f043 0304 	orr.w	r3, r3, #4
 800e4cc:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800e4ce:	f003 fa05 	bl	80118dc <OnMacProcessNotify>
}
 800e4d2:	bf00      	nop
 800e4d4:	bd80      	pop	{r7, pc}
 800e4d6:	bf00      	nop
 800e4d8:	20001884 	.word	0x20001884

0800e4dc <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800e4e0:	4a07      	ldr	r2, [pc, #28]	; (800e500 <OnRadioRxTimeout+0x24>)
 800e4e2:	7813      	ldrb	r3, [r2, #0]
 800e4e4:	f043 0302 	orr.w	r3, r3, #2
 800e4e8:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800e4ea:	f003 f9f7 	bl	80118dc <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800e4ee:	4b05      	ldr	r3, [pc, #20]	; (800e504 <OnRadioRxTimeout+0x28>)
 800e4f0:	2201      	movs	r2, #1
 800e4f2:	2100      	movs	r1, #0
 800e4f4:	2002      	movs	r0, #2
 800e4f6:	f00f f8cd 	bl	801d694 <UTIL_ADV_TRACE_COND_FSend>
}
 800e4fa:	bf00      	nop
 800e4fc:	bd80      	pop	{r7, pc}
 800e4fe:	bf00      	nop
 800e500:	20001884 	.word	0x20001884
 800e504:	0801e43c 	.word	0x0801e43c

0800e508 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800e508:	b480      	push	{r7}
 800e50a:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e50c:	4b08      	ldr	r3, [pc, #32]	; (800e530 <UpdateRxSlotIdleState+0x28>)
 800e50e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800e512:	2b02      	cmp	r3, #2
 800e514:	d004      	beq.n	800e520 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800e516:	4b07      	ldr	r3, [pc, #28]	; (800e534 <UpdateRxSlotIdleState+0x2c>)
 800e518:	2206      	movs	r2, #6
 800e51a:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800e51e:	e003      	b.n	800e528 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800e520:	4b04      	ldr	r3, [pc, #16]	; (800e534 <UpdateRxSlotIdleState+0x2c>)
 800e522:	2202      	movs	r2, #2
 800e524:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
}
 800e528:	bf00      	nop
 800e52a:	46bd      	mov	sp, r7
 800e52c:	bc80      	pop	{r7}
 800e52e:	4770      	bx	lr
 800e530:	20000c5c 	.word	0x20000c5c
 800e534:	20000740 	.word	0x20000740

0800e538 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800e538:	b580      	push	{r7, lr}
 800e53a:	b092      	sub	sp, #72	; 0x48
 800e53c:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e53e:	4b4a      	ldr	r3, [pc, #296]	; (800e668 <ProcessRadioTxDone+0x130>)
 800e540:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800e544:	2b02      	cmp	r3, #2
 800e546:	d002      	beq.n	800e54e <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800e548:	4b48      	ldr	r3, [pc, #288]	; (800e66c <ProcessRadioTxDone+0x134>)
 800e54a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e54c:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e54e:	f3ef 8310 	mrs	r3, PRIMASK
 800e552:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800e554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    CRITICAL_SECTION_BEGIN( );
 800e556:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
 800e558:	b672      	cpsid	i
}
 800e55a:	bf00      	nop
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 800e55c:	f00e ffaa 	bl	801d4b4 <UTIL_TIMER_GetCurrentTime>
 800e560:	4602      	mov	r2, r0
 800e562:	4b43      	ldr	r3, [pc, #268]	; (800e670 <ProcessRadioTxDone+0x138>)
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	1ad3      	subs	r3, r2, r3
 800e568:	63bb      	str	r3, [r7, #56]	; 0x38
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 800e56a:	4b42      	ldr	r3, [pc, #264]	; (800e674 <ProcessRadioTxDone+0x13c>)
 800e56c:	f8d3 23b0 	ldr.w	r2, [r3, #944]	; 0x3b0
 800e570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e572:	1ad3      	subs	r3, r2, r3
 800e574:	4619      	mov	r1, r3
 800e576:	4840      	ldr	r0, [pc, #256]	; (800e678 <ProcessRadioTxDone+0x140>)
 800e578:	f00e fef2 	bl	801d360 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800e57c:	483e      	ldr	r0, [pc, #248]	; (800e678 <ProcessRadioTxDone+0x140>)
 800e57e:	f00e fe11 	bl	801d1a4 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 800e582:	4b3c      	ldr	r3, [pc, #240]	; (800e674 <ProcessRadioTxDone+0x13c>)
 800e584:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 800e588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e58a:	1ad3      	subs	r3, r2, r3
 800e58c:	4619      	mov	r1, r3
 800e58e:	483b      	ldr	r0, [pc, #236]	; (800e67c <ProcessRadioTxDone+0x144>)
 800e590:	f00e fee6 	bl	801d360 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800e594:	4839      	ldr	r0, [pc, #228]	; (800e67c <ProcessRadioTxDone+0x144>)
 800e596:	f00e fe05 	bl	801d1a4 <UTIL_TIMER_Start>
 800e59a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e59c:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e59e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5a0:	f383 8810 	msr	PRIMASK, r3
}
 800e5a4:	bf00      	nop
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
        TimerStart( &MacCtx.AckTimeoutTimer );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.NodeAckRequested == true )
 800e5a6:	4b33      	ldr	r3, [pc, #204]	; (800e674 <ProcessRadioTxDone+0x13c>)
 800e5a8:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d01a      	beq.n	800e5e6 <ProcessRadioTxDone+0xae>
    {
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 800e5b0:	2315      	movs	r3, #21
 800e5b2:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e5b6:	4b2c      	ldr	r3, [pc, #176]	; (800e668 <ProcessRadioTxDone+0x130>)
 800e5b8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800e5bc:	f107 0220 	add.w	r2, r7, #32
 800e5c0:	4611      	mov	r1, r2
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	f006 fec0 	bl	8015348 <RegionGetPhyParam>
 800e5c8:	4603      	mov	r3, r0
 800e5ca:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800e5cc:	4b29      	ldr	r3, [pc, #164]	; (800e674 <ProcessRadioTxDone+0x13c>)
 800e5ce:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 800e5d2:	69fb      	ldr	r3, [r7, #28]
 800e5d4:	4413      	add	r3, r2
 800e5d6:	4619      	mov	r1, r3
 800e5d8:	4829      	ldr	r0, [pc, #164]	; (800e680 <ProcessRadioTxDone+0x148>)
 800e5da:	f00e fec1 	bl	801d360 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 800e5de:	4828      	ldr	r0, [pc, #160]	; (800e680 <ProcessRadioTxDone+0x148>)
 800e5e0:	f00e fde0 	bl	801d1a4 <UTIL_TIMER_Start>
 800e5e4:	e003      	b.n	800e5ee <ProcessRadioTxDone+0xb6>
    }
    else
    {
        // Transmission successful, setup status directly
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e5e6:	4b23      	ldr	r3, [pc, #140]	; (800e674 <ProcessRadioTxDone+0x13c>)
 800e5e8:	2200      	movs	r2, #0
 800e5ea:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800e5ee:	4b20      	ldr	r3, [pc, #128]	; (800e670 <ProcessRadioTxDone+0x138>)
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	4a1d      	ldr	r2, [pc, #116]	; (800e668 <ProcessRadioTxDone+0x130>)
 800e5f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800e5f6:	4b1f      	ldr	r3, [pc, #124]	; (800e674 <ProcessRadioTxDone+0x13c>)
 800e5f8:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 800e5fc:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800e5fe:	4b1c      	ldr	r3, [pc, #112]	; (800e670 <ProcessRadioTxDone+0x138>)
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800e604:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e608:	4618      	mov	r0, r3
 800e60a:	f00e f909 	bl	801c820 <SysTimeGetMcuTime>
 800e60e:	4638      	mov	r0, r7
 800e610:	4b15      	ldr	r3, [pc, #84]	; (800e668 <ProcessRadioTxDone+0x130>)
 800e612:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 800e616:	9200      	str	r2, [sp, #0]
 800e618:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800e61c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800e620:	ca06      	ldmia	r2, {r1, r2}
 800e622:	f00e f85e 	bl	801c6e2 <SysTimeSub>
 800e626:	f107 0314 	add.w	r3, r7, #20
 800e62a:	463a      	mov	r2, r7
 800e62c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e630:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800e634:	4b0f      	ldr	r3, [pc, #60]	; (800e674 <ProcessRadioTxDone+0x13c>)
 800e636:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800e63a:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800e63c:	2301      	movs	r3, #1
 800e63e:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800e640:	4b09      	ldr	r3, [pc, #36]	; (800e668 <ProcessRadioTxDone+0x130>)
 800e642:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800e646:	2b00      	cmp	r3, #0
 800e648:	d101      	bne.n	800e64e <ProcessRadioTxDone+0x116>
    {
        txDone.Joined  = false;
 800e64a:	2300      	movs	r3, #0
 800e64c:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800e64e:	4b06      	ldr	r3, [pc, #24]	; (800e668 <ProcessRadioTxDone+0x130>)
 800e650:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800e654:	f107 0208 	add.w	r2, r7, #8
 800e658:	4611      	mov	r1, r2
 800e65a:	4618      	mov	r0, r3
 800e65c:	f006 fe95 	bl	801538a <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */
}
 800e660:	bf00      	nop
 800e662:	3740      	adds	r7, #64	; 0x40
 800e664:	46bd      	mov	sp, r7
 800e666:	bd80      	pop	{r7, pc}
 800e668:	20000c5c 	.word	0x20000c5c
 800e66c:	0801eb70 	.word	0x0801eb70
 800e670:	20001888 	.word	0x20001888
 800e674:	20000740 	.word	0x20000740
 800e678:	20000ac0 	.word	0x20000ac0
 800e67c:	20000ad8 	.word	0x20000ad8
 800e680:	20000b40 	.word	0x20000b40

0800e684 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800e684:	b580      	push	{r7, lr}
 800e686:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800e688:	4b10      	ldr	r3, [pc, #64]	; (800e6cc <PrepareRxDoneAbort+0x48>)
 800e68a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e68e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e692:	4a0e      	ldr	r2, [pc, #56]	; (800e6cc <PrepareRxDoneAbort+0x48>)
 800e694:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 800e698:	4b0c      	ldr	r3, [pc, #48]	; (800e6cc <PrepareRxDoneAbort+0x48>)
 800e69a:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d002      	beq.n	800e6a8 <PrepareRxDoneAbort+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        OnRetransmitTimeoutTimerEvent( NULL );
 800e6a2:	2000      	movs	r0, #0
 800e6a4:	f001 f9fa 	bl	800fa9c <OnRetransmitTimeoutTimerEvent>
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800e6a8:	4a08      	ldr	r2, [pc, #32]	; (800e6cc <PrepareRxDoneAbort+0x48>)
 800e6aa:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800e6ae:	f043 0302 	orr.w	r3, r3, #2
 800e6b2:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    MacCtx.MacFlags.Bits.MacDone = 1;
 800e6b6:	4a05      	ldr	r2, [pc, #20]	; (800e6cc <PrepareRxDoneAbort+0x48>)
 800e6b8:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800e6bc:	f043 0310 	orr.w	r3, r3, #16
 800e6c0:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491

    UpdateRxSlotIdleState( );
 800e6c4:	f7ff ff20 	bl	800e508 <UpdateRxSlotIdleState>
}
 800e6c8:	bf00      	nop
 800e6ca:	bd80      	pop	{r7, pc}
 800e6cc:	20000740 	.word	0x20000740

0800e6d0 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800e6d0:	b590      	push	{r4, r7, lr}
 800e6d2:	b0ab      	sub	sp, #172	; 0xac
 800e6d4:	af02      	add	r7, sp, #8
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800e6d6:	2312      	movs	r3, #18
 800e6d8:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800e6dc:	4b81      	ldr	r3, [pc, #516]	; (800e8e4 <ProcessRadioRxDone+0x214>)
 800e6de:	685b      	ldr	r3, [r3, #4]
 800e6e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    uint16_t size = RxDoneParams.Size;
 800e6e4:	4b7f      	ldr	r3, [pc, #508]	; (800e8e4 <ProcessRadioRxDone+0x214>)
 800e6e6:	891b      	ldrh	r3, [r3, #8]
 800e6e8:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
    int16_t rssi = RxDoneParams.Rssi;
 800e6ec:	4b7d      	ldr	r3, [pc, #500]	; (800e8e4 <ProcessRadioRxDone+0x214>)
 800e6ee:	895b      	ldrh	r3, [r3, #10]
 800e6f0:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
    int8_t snr = RxDoneParams.Snr;
 800e6f4:	4b7b      	ldr	r3, [pc, #492]	; (800e8e4 <ProcessRadioRxDone+0x214>)
 800e6f6:	7b1b      	ldrb	r3, [r3, #12]
 800e6f8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

    uint8_t pktHeaderLen = 0;
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e

    uint32_t downLinkCounter = 0;
 800e702:	2300      	movs	r3, #0
 800e704:	617b      	str	r3, [r7, #20]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800e706:	4b78      	ldr	r3, [pc, #480]	; (800e8e8 <ProcessRadioRxDone+0x218>)
 800e708:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e70c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    uint8_t multicast = 0;
 800e710:	2300      	movs	r3, #0
 800e712:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800e716:	2301      	movs	r3, #1
 800e718:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
    FCntIdentifier_t fCntID;
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    uint8_t macCmdPayload[2] = { 0 };
#endif /* LORAMAC_VERSION */
    Mlme_t joinType = MLME_JOIN;
 800e71c:	2301      	movs	r3, #1
 800e71e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 800e722:	4a72      	ldr	r2, [pc, #456]	; (800e8ec <ProcessRadioRxDone+0x21c>)
 800e724:	7813      	ldrb	r3, [r2, #0]
 800e726:	f36f 0300 	bfc	r3, #0, #1
 800e72a:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 800e72c:	4b70      	ldr	r3, [pc, #448]	; (800e8f0 <ProcessRadioRxDone+0x220>)
 800e72e:	2200      	movs	r2, #0
 800e730:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
    MacCtx.RxStatus.Rssi = rssi;
 800e734:	4a6e      	ldr	r2, [pc, #440]	; (800e8f0 <ProcessRadioRxDone+0x220>)
 800e736:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800e73a:	f8a2 348c 	strh.w	r3, [r2, #1164]	; 0x48c
    MacCtx.RxStatus.Snr = snr;
 800e73e:	4a6c      	ldr	r2, [pc, #432]	; (800e8f0 <ProcessRadioRxDone+0x220>)
 800e740:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e744:	f882 348e 	strb.w	r3, [r2, #1166]	; 0x48e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800e748:	4b69      	ldr	r3, [pc, #420]	; (800e8f0 <ProcessRadioRxDone+0x220>)
 800e74a:	f893 2490 	ldrb.w	r2, [r3, #1168]	; 0x490
 800e74e:	4b68      	ldr	r3, [pc, #416]	; (800e8f0 <ProcessRadioRxDone+0x220>)
 800e750:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
    MacCtx.McpsIndication.Port = 0;
 800e754:	4b66      	ldr	r3, [pc, #408]	; (800e8f0 <ProcessRadioRxDone+0x220>)
 800e756:	2200      	movs	r2, #0
 800e758:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
    MacCtx.McpsIndication.Multicast = 0;
 800e75c:	4b64      	ldr	r3, [pc, #400]	; (800e8f0 <ProcessRadioRxDone+0x220>)
 800e75e:	2200      	movs	r2, #0
 800e760:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 800e764:	4b62      	ldr	r3, [pc, #392]	; (800e8f0 <ProcessRadioRxDone+0x220>)
 800e766:	2200      	movs	r2, #0
 800e768:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
    MacCtx.McpsIndication.Buffer = NULL;
 800e76c:	4b60      	ldr	r3, [pc, #384]	; (800e8f0 <ProcessRadioRxDone+0x220>)
 800e76e:	2200      	movs	r2, #0
 800e770:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
    MacCtx.McpsIndication.BufferSize = 0;
 800e774:	4b5e      	ldr	r3, [pc, #376]	; (800e8f0 <ProcessRadioRxDone+0x220>)
 800e776:	2200      	movs	r2, #0
 800e778:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.RxData = false;
 800e77c:	4b5c      	ldr	r3, [pc, #368]	; (800e8f0 <ProcessRadioRxDone+0x220>)
 800e77e:	2200      	movs	r2, #0
 800e780:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
    MacCtx.McpsIndication.AckReceived = false;
 800e784:	4b5a      	ldr	r3, [pc, #360]	; (800e8f0 <ProcessRadioRxDone+0x220>)
 800e786:	2200      	movs	r2, #0
 800e788:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800e78c:	4b58      	ldr	r3, [pc, #352]	; (800e8f0 <ProcessRadioRxDone+0x220>)
 800e78e:	2200      	movs	r2, #0
 800e790:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800e794:	4b56      	ldr	r3, [pc, #344]	; (800e8f0 <ProcessRadioRxDone+0x220>)
 800e796:	2200      	movs	r2, #0
 800e798:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
    MacCtx.McpsIndication.DevAddress = 0;
 800e79c:	4b54      	ldr	r3, [pc, #336]	; (800e8f0 <ProcessRadioRxDone+0x220>)
 800e79e:	2200      	movs	r2, #0
 800e7a0:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800e7a4:	4b52      	ldr	r3, [pc, #328]	; (800e8f0 <ProcessRadioRxDone+0x220>)
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.McpsIndication.ResponseTimeout = 0;
 800e7ac:	4b50      	ldr	r3, [pc, #320]	; (800e8f0 <ProcessRadioRxDone+0x220>)
 800e7ae:	2200      	movs	r2, #0
 800e7b0:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 800e7b4:	4b4f      	ldr	r3, [pc, #316]	; (800e8f4 <ProcessRadioRxDone+0x224>)
 800e7b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7b8:	4798      	blx	r3

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800e7ba:	4b4d      	ldr	r3, [pc, #308]	; (800e8f0 <ProcessRadioRxDone+0x220>)
 800e7bc:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d102      	bne.n	800e7ca <ProcessRadioRxDone+0xfa>
    {
        TimerStop( &MacCtx.RxWindowTimer2 );
 800e7c4:	484c      	ldr	r0, [pc, #304]	; (800e8f8 <ProcessRadioRxDone+0x228>)
 800e7c6:	f00e fd5b 	bl	801d280 <UTIL_TIMER_Stop>
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800e7ca:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800e7ce:	4619      	mov	r1, r3
 800e7d0:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800e7d4:	f004 fe28 	bl	8013428 <LoRaMacClassBRxBeacon>
 800e7d8:	4603      	mov	r3, r0
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d00b      	beq.n	800e7f6 <ProcessRadioRxDone+0x126>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800e7de:	4a44      	ldr	r2, [pc, #272]	; (800e8f0 <ProcessRadioRxDone+0x220>)
 800e7e0:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800e7e4:	f8a2 347e 	strh.w	r3, [r2, #1150]	; 0x47e
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800e7e8:	4a41      	ldr	r2, [pc, #260]	; (800e8f0 <ProcessRadioRxDone+0x220>)
 800e7ea:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e7ee:	f882 3480 	strb.w	r3, [r2, #1152]	; 0x480
        return;
 800e7f2:	f000 bc75 	b.w	800f0e0 <ProcessRadioRxDone+0xa10>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800e7f6:	4b3c      	ldr	r3, [pc, #240]	; (800e8e8 <ProcessRadioRxDone+0x218>)
 800e7f8:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800e7fc:	2b01      	cmp	r3, #1
 800e7fe:	d11e      	bne.n	800e83e <ProcessRadioRxDone+0x16e>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800e800:	f004 fe25 	bl	801344e <LoRaMacClassBIsPingExpected>
 800e804:	4603      	mov	r3, r0
 800e806:	2b00      	cmp	r3, #0
 800e808:	d00a      	beq.n	800e820 <ProcessRadioRxDone+0x150>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e80a:	2000      	movs	r0, #0
 800e80c:	f004 fdd6 	bl	80133bc <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800e810:	2000      	movs	r0, #0
 800e812:	f004 fdf7 	bl	8013404 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800e816:	4b36      	ldr	r3, [pc, #216]	; (800e8f0 <ProcessRadioRxDone+0x220>)
 800e818:	2204      	movs	r2, #4
 800e81a:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
 800e81e:	e00e      	b.n	800e83e <ProcessRadioRxDone+0x16e>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800e820:	f004 fe1c 	bl	801345c <LoRaMacClassBIsMulticastExpected>
 800e824:	4603      	mov	r3, r0
 800e826:	2b00      	cmp	r3, #0
 800e828:	d009      	beq.n	800e83e <ProcessRadioRxDone+0x16e>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e82a:	2000      	movs	r0, #0
 800e82c:	f004 fdd0 	bl	80133d0 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800e830:	2000      	movs	r0, #0
 800e832:	f004 fdf0 	bl	8013416 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800e836:	4b2e      	ldr	r3, [pc, #184]	; (800e8f0 <ProcessRadioRxDone+0x220>)
 800e838:	2205      	movs	r2, #5
 800e83a:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
        }
    }

    // Abort on empty radio frames
    if( size == 0 )
 800e83e:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800e842:	2b00      	cmp	r3, #0
 800e844:	d107      	bne.n	800e856 <ProcessRadioRxDone+0x186>
    {
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e846:	4b2a      	ldr	r3, [pc, #168]	; (800e8f0 <ProcessRadioRxDone+0x220>)
 800e848:	2201      	movs	r2, #1
 800e84a:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
        PrepareRxDoneAbort( );
 800e84e:	f7ff ff19 	bl	800e684 <PrepareRxDoneAbort>
        return;
 800e852:	f000 bc45 	b.w	800f0e0 <ProcessRadioRxDone+0xa10>
    }

    macHdr.Value = payload[pktHeaderLen++];
 800e856:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800e85a:	1c5a      	adds	r2, r3, #1
 800e85c:	f887 208e 	strb.w	r2, [r7, #142]	; 0x8e
 800e860:	461a      	mov	r2, r3
 800e862:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e866:	4413      	add	r3, r2
 800e868:	781b      	ldrb	r3, [r3, #0]
 800e86a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
        PrepareRxDoneAbort( );
        return;
    }
#endif /* LORAMAC_VERSION */

    switch( macHdr.Bits.MType )
 800e86e:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800e872:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800e876:	b2db      	uxtb	r3, r3
 800e878:	3b01      	subs	r3, #1
 800e87a:	2b06      	cmp	r3, #6
 800e87c:	f200 8403 	bhi.w	800f086 <ProcessRadioRxDone+0x9b6>
 800e880:	a201      	add	r2, pc, #4	; (adr r2, 800e888 <ProcessRadioRxDone+0x1b8>)
 800e882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e886:	bf00      	nop
 800e888:	0800e8a5 	.word	0x0800e8a5
 800e88c:	0800f087 	.word	0x0800f087
 800e890:	0800eaa3 	.word	0x0800eaa3
 800e894:	0800f087 	.word	0x0800f087
 800e898:	0800ea9b 	.word	0x0800ea9b
 800e89c:	0800f087 	.word	0x0800f087
 800e8a0:	0800f02b 	.word	0x0800f02b
    {
        case FRAME_TYPE_JOIN_ACCEPT:
        {
            uint8_t joinEui[SE_EUI_SIZE];
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800e8a4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800e8a8:	2b10      	cmp	r3, #16
 800e8aa:	d807      	bhi.n	800e8bc <ProcessRadioRxDone+0x1ec>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e8ac:	4b10      	ldr	r3, [pc, #64]	; (800e8f0 <ProcessRadioRxDone+0x220>)
 800e8ae:	2201      	movs	r2, #1
 800e8b0:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800e8b4:	f7ff fee6 	bl	800e684 <PrepareRxDoneAbort>
                return;
 800e8b8:	f000 bc12 	b.w	800f0e0 <ProcessRadioRxDone+0xa10>
            }
            macMsgJoinAccept.Buffer = payload;
 800e8bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e8c0:	61bb      	str	r3, [r7, #24]
            macMsgJoinAccept.BufSize = size;
 800e8c2:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800e8c6:	b2db      	uxtb	r3, r3
 800e8c8:	773b      	strb	r3, [r7, #28]

            // Abort in case if the device is already joined and no rejoin request is ongoing.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
            if( ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) && ( Nvm.MacGroup2.IsRejoinAcceptPending == false ) )
#else
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800e8ca:	4b07      	ldr	r3, [pc, #28]	; (800e8e8 <ProcessRadioRxDone+0x218>)
 800e8cc:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d013      	beq.n	800e8fc <ProcessRadioRxDone+0x22c>
#endif /* LORAMAC_VERSION */
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e8d4:	4b06      	ldr	r3, [pc, #24]	; (800e8f0 <ProcessRadioRxDone+0x220>)
 800e8d6:	2201      	movs	r2, #1
 800e8d8:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800e8dc:	f7ff fed2 	bl	800e684 <PrepareRxDoneAbort>
                return;
 800e8e0:	e3fe      	b.n	800f0e0 <ProcessRadioRxDone+0xa10>
 800e8e2:	bf00      	nop
 800e8e4:	2000188c 	.word	0x2000188c
 800e8e8:	20000c5c 	.word	0x20000c5c
 800e8ec:	20001884 	.word	0x20001884
 800e8f0:	20000740 	.word	0x20000740
 800e8f4:	0801eb70 	.word	0x0801eb70
 800e8f8:	20000ad8 	.word	0x20000ad8
            }

            SecureElementGetJoinEui( joinEui );
 800e8fc:	f107 0308 	add.w	r3, r7, #8
 800e900:	4618      	mov	r0, r3
 800e902:	f7fd ff7d 	bl	800c800 <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 800e906:	f107 0218 	add.w	r2, r7, #24
 800e90a:	f107 0308 	add.w	r3, r7, #8
 800e90e:	4619      	mov	r1, r3
 800e910:	20ff      	movs	r0, #255	; 0xff
 800e912:	f005 ff95 	bl	8014840 <LoRaMacCryptoHandleJoinAccept>
 800e916:	4603      	mov	r3, r0
 800e918:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
                joinType = MLME_REJOIN_2;
            }
#endif /* LORAMAC_VERSION */

            VerifyParams_t verifyRxDr;
            bool rxDrValid = false;
 800e91c:	2300      	movs	r3, #0
 800e91e:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800e922:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e926:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e92a:	b2db      	uxtb	r3, r3
 800e92c:	b25b      	sxtb	r3, r3
 800e92e:	713b      	strb	r3, [r7, #4]
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e930:	4bb1      	ldr	r3, [pc, #708]	; (800ebf8 <ProcessRadioRxDone+0x528>)
 800e932:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800e936:	717b      	strb	r3, [r7, #5]
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 800e938:	4baf      	ldr	r3, [pc, #700]	; (800ebf8 <ProcessRadioRxDone+0x528>)
 800e93a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800e93e:	1d39      	adds	r1, r7, #4
 800e940:	2207      	movs	r2, #7
 800e942:	4618      	mov	r0, r3
 800e944:	f006 fd4e 	bl	80153e4 <RegionVerify>
 800e948:	4603      	mov	r3, r0
 800e94a:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
 800e94e:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 800e952:	2b00      	cmp	r3, #0
 800e954:	f040 8095 	bne.w	800ea82 <ProcessRadioRxDone+0x3b2>
 800e958:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	f000 8090 	beq.w	800ea82 <ProcessRadioRxDone+0x3b2>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800e962:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e966:	461a      	mov	r2, r3
 800e968:	4ba3      	ldr	r3, [pc, #652]	; (800ebf8 <ProcessRadioRxDone+0x528>)
 800e96a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800e96e:	4ba2      	ldr	r3, [pc, #648]	; (800ebf8 <ProcessRadioRxDone+0x528>)
 800e970:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800e974:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e978:	021b      	lsls	r3, r3, #8
 800e97a:	4313      	orrs	r3, r2
 800e97c:	4a9e      	ldr	r2, [pc, #632]	; (800ebf8 <ProcessRadioRxDone+0x528>)
 800e97e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800e982:	4b9d      	ldr	r3, [pc, #628]	; (800ebf8 <ProcessRadioRxDone+0x528>)
 800e984:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800e988:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e98c:	041b      	lsls	r3, r3, #16
 800e98e:	4313      	orrs	r3, r2
 800e990:	4a99      	ldr	r2, [pc, #612]	; (800ebf8 <ProcessRadioRxDone+0x528>)
 800e992:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800e996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e998:	4a97      	ldr	r2, [pc, #604]	; (800ebf8 <ProcessRadioRxDone+0x528>)
 800e99a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
                // Update NVM DevAddrOTAA with network value
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 800e99e:	4b96      	ldr	r3, [pc, #600]	; (800ebf8 <ProcessRadioRxDone+0x528>)
 800e9a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e9a4:	4619      	mov	r1, r3
 800e9a6:	2002      	movs	r0, #2
 800e9a8:	f7fd ff42 	bl	800c830 <SecureElementSetDevAddr>

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800e9ac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e9b0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800e9b4:	b2db      	uxtb	r3, r3
 800e9b6:	461a      	mov	r2, r3
 800e9b8:	4b8f      	ldr	r3, [pc, #572]	; (800ebf8 <ProcessRadioRxDone+0x528>)
 800e9ba:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800e9be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e9c2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e9c6:	b2db      	uxtb	r3, r3
 800e9c8:	461a      	mov	r2, r3
 800e9ca:	4b8b      	ldr	r3, [pc, #556]	; (800ebf8 <ProcessRadioRxDone+0x528>)
 800e9cc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800e9d0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e9d4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e9d8:	b2db      	uxtb	r3, r3
 800e9da:	461a      	mov	r2, r3
 800e9dc:	4b86      	ldr	r3, [pc, #536]	; (800ebf8 <ProcessRadioRxDone+0x528>)
 800e9de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800e9e2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800e9e6:	461a      	mov	r2, r3
 800e9e8:	4b83      	ldr	r3, [pc, #524]	; (800ebf8 <ProcessRadioRxDone+0x528>)
 800e9ea:	659a      	str	r2, [r3, #88]	; 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800e9ec:	4b82      	ldr	r3, [pc, #520]	; (800ebf8 <ProcessRadioRxDone+0x528>)
 800e9ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d102      	bne.n	800e9fa <ProcessRadioRxDone+0x32a>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800e9f4:	4b80      	ldr	r3, [pc, #512]	; (800ebf8 <ProcessRadioRxDone+0x528>)
 800e9f6:	2201      	movs	r2, #1
 800e9f8:	659a      	str	r2, [r3, #88]	; 0x58
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800e9fa:	4b7f      	ldr	r3, [pc, #508]	; (800ebf8 <ProcessRadioRxDone+0x528>)
 800e9fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e9fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ea02:	fb02 f303 	mul.w	r3, r2, r3
 800ea06:	4a7c      	ldr	r2, [pc, #496]	; (800ebf8 <ProcessRadioRxDone+0x528>)
 800ea08:	6593      	str	r3, [r2, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800ea0a:	4b7b      	ldr	r3, [pc, #492]	; (800ebf8 <ProcessRadioRxDone+0x528>)
 800ea0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea0e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800ea12:	4a79      	ldr	r2, [pc, #484]	; (800ebf8 <ProcessRadioRxDone+0x528>)
 800ea14:	65d3      	str	r3, [r2, #92]	; 0x5c

                // Reset NbTrans to default value
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 800ea16:	4b78      	ldr	r3, [pc, #480]	; (800ebf8 <ProcessRadioRxDone+0x528>)
 800ea18:	2201      	movs	r2, #1
 800ea1a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                else
                {
                    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
                }
#else
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800ea1e:	4b76      	ldr	r3, [pc, #472]	; (800ebf8 <ProcessRadioRxDone+0x528>)
 800ea20:	2200      	movs	r2, #0
 800ea22:	f883 212e 	strb.w	r2, [r3, #302]	; 0x12e
#endif /* LORAMAC_VERSION */

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800ea26:	f107 0318 	add.w	r3, r7, #24
 800ea2a:	3312      	adds	r3, #18
 800ea2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800ea30:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800ea34:	b2db      	uxtb	r3, r3
 800ea36:	3b11      	subs	r3, #17
 800ea38:	b2db      	uxtb	r3, r3
 800ea3a:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
 800ea3e:	4b6f      	ldr	r3, [pc, #444]	; (800ebfc <ProcessRadioRxDone+0x52c>)
 800ea40:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 800ea44:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800ea48:	4b6b      	ldr	r3, [pc, #428]	; (800ebf8 <ProcessRadioRxDone+0x528>)
 800ea4a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ea4e:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 800ea52:	4611      	mov	r1, r2
 800ea54:	4618      	mov	r0, r3
 800ea56:	f006 fce6 	bl	8015426 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800ea5a:	4b67      	ldr	r3, [pc, #412]	; (800ebf8 <ProcessRadioRxDone+0x528>)
 800ea5c:	2202      	movs	r2, #2
 800ea5e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
                }
#endif /* LORAMAC_VERSION */

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 800ea62:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800ea66:	4618      	mov	r0, r3
 800ea68:	f005 f9f4 	bl	8013e54 <LoRaMacConfirmQueueIsCmdActive>
 800ea6c:	4603      	mov	r3, r0
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	f000 8311 	beq.w	800f096 <ProcessRadioRxDone+0x9c6>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 800ea74:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800ea78:	4619      	mov	r1, r3
 800ea7a:	2000      	movs	r0, #0
 800ea7c:	f005 f95e 	bl	8013d3c <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 800ea80:	e309      	b.n	800f096 <ProcessRadioRxDone+0x9c6>
#endif /* LORAMAC_VERSION */
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800ea82:	2001      	movs	r0, #1
 800ea84:	f005 f9e6 	bl	8013e54 <LoRaMacConfirmQueueIsCmdActive>
 800ea88:	4603      	mov	r3, r0
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	f000 8302 	beq.w	800f094 <ProcessRadioRxDone+0x9c4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800ea90:	2101      	movs	r1, #1
 800ea92:	2007      	movs	r0, #7
 800ea94:	f005 f952 	bl	8013d3c <LoRaMacConfirmQueueSetStatus>
                }
            }

            break;
 800ea98:	e2fc      	b.n	800f094 <ProcessRadioRxDone+0x9c4>
        }
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800ea9a:	4b58      	ldr	r3, [pc, #352]	; (800ebfc <ProcessRadioRxDone+0x52c>)
 800ea9c:	2201      	movs	r2, #1
 800ea9e:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800eaa2:	4b55      	ldr	r3, [pc, #340]	; (800ebf8 <ProcessRadioRxDone+0x528>)
 800eaa4:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800eaa8:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800eaac:	4b53      	ldr	r3, [pc, #332]	; (800ebfc <ProcessRadioRxDone+0x52c>)
 800eaae:	f893 3424 	ldrb.w	r3, [r3, #1060]	; 0x424
 800eab2:	b25b      	sxtb	r3, r3
 800eab4:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800eab8:	230d      	movs	r3, #13
 800eaba:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800eabe:	4b4e      	ldr	r3, [pc, #312]	; (800ebf8 <ProcessRadioRxDone+0x528>)
 800eac0:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d002      	beq.n	800eace <ProcessRadioRxDone+0x3fe>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800eac8:	230e      	movs	r3, #14
 800eaca:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
            }

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800eace:	4b4a      	ldr	r3, [pc, #296]	; (800ebf8 <ProcessRadioRxDone+0x528>)
 800ead0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ead4:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800ead8:	4611      	mov	r1, r2
 800eada:	4618      	mov	r0, r3
 800eadc:	f006 fc34 	bl	8015348 <RegionGetPhyParam>
 800eae0:	4603      	mov	r3, r0
 800eae2:	673b      	str	r3, [r7, #112]	; 0x70
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800eae4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800eae8:	3b0d      	subs	r3, #13
 800eaea:	b29b      	uxth	r3, r3
 800eaec:	b21b      	sxth	r3, r3
 800eaee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800eaf2:	b21a      	sxth	r2, r3
 800eaf4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800eaf6:	b21b      	sxth	r3, r3
 800eaf8:	429a      	cmp	r2, r3
 800eafa:	dc03      	bgt.n	800eb04 <ProcessRadioRxDone+0x434>
 800eafc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800eb00:	2b0b      	cmp	r3, #11
 800eb02:	d806      	bhi.n	800eb12 <ProcessRadioRxDone+0x442>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800eb04:	4b3d      	ldr	r3, [pc, #244]	; (800ebfc <ProcessRadioRxDone+0x52c>)
 800eb06:	2201      	movs	r2, #1
 800eb08:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800eb0c:	f7ff fdba 	bl	800e684 <PrepareRxDoneAbort>
                return;
 800eb10:	e2e6      	b.n	800f0e0 <ProcessRadioRxDone+0xa10>
            }
            macMsgData.Buffer = payload;
 800eb12:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800eb16:	643b      	str	r3, [r7, #64]	; 0x40
            macMsgData.BufSize = size;
 800eb18:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800eb1c:	b2db      	uxtb	r3, r3
 800eb1e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800eb22:	4b37      	ldr	r3, [pc, #220]	; (800ec00 <ProcessRadioRxDone+0x530>)
 800eb24:	667b      	str	r3, [r7, #100]	; 0x64
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800eb26:	23ff      	movs	r3, #255	; 0xff
 800eb28:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800eb2c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800eb30:	4618      	mov	r0, r3
 800eb32:	f006 f987 	bl	8014e44 <LoRaMacParserData>
 800eb36:	4603      	mov	r3, r0
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d006      	beq.n	800eb4a <ProcessRadioRxDone+0x47a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800eb3c:	4b2f      	ldr	r3, [pc, #188]	; (800ebfc <ProcessRadioRxDone+0x52c>)
 800eb3e:	2201      	movs	r2, #1
 800eb40:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800eb44:	f7ff fd9e 	bl	800e684 <PrepareRxDoneAbort>
                return;
 800eb48:	e2ca      	b.n	800f0e0 <ProcessRadioRxDone+0xa10>
            }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Handle Class B
            // Check if we expect a ping or a multicast slot.
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800eb4a:	4b2b      	ldr	r3, [pc, #172]	; (800ebf8 <ProcessRadioRxDone+0x528>)
 800eb4c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800eb50:	2b01      	cmp	r3, #1
 800eb52:	d132      	bne.n	800ebba <ProcessRadioRxDone+0x4ea>
            {
                if( LoRaMacClassBIsPingExpected( ) == true )
 800eb54:	f004 fc7b 	bl	801344e <LoRaMacClassBIsPingExpected>
 800eb58:	4603      	mov	r3, r0
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d014      	beq.n	800eb88 <ProcessRadioRxDone+0x4b8>
                {
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800eb5e:	2000      	movs	r0, #0
 800eb60:	f004 fc2c 	bl	80133bc <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 800eb64:	2000      	movs	r0, #0
 800eb66:	f004 fc4d 	bl	8013404 <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800eb6a:	4b24      	ldr	r3, [pc, #144]	; (800ebfc <ProcessRadioRxDone+0x52c>)
 800eb6c:	2204      	movs	r2, #4
 800eb6e:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800eb72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eb74:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800eb78:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800eb7c:	b2db      	uxtb	r3, r3
 800eb7e:	4619      	mov	r1, r3
 800eb80:	4610      	mov	r0, r2
 800eb82:	f004 fced 	bl	8013560 <LoRaMacClassBSetFPendingBit>
 800eb86:	e018      	b.n	800ebba <ProcessRadioRxDone+0x4ea>
                }
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800eb88:	f004 fc68 	bl	801345c <LoRaMacClassBIsMulticastExpected>
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d013      	beq.n	800ebba <ProcessRadioRxDone+0x4ea>
                {
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800eb92:	2000      	movs	r0, #0
 800eb94:	f004 fc1c 	bl	80133d0 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800eb98:	2000      	movs	r0, #0
 800eb9a:	f004 fc3c 	bl	8013416 <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800eb9e:	4b17      	ldr	r3, [pc, #92]	; (800ebfc <ProcessRadioRxDone+0x52c>)
 800eba0:	2205      	movs	r2, #5
 800eba2:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800eba6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eba8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800ebac:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800ebb0:	b2db      	uxtb	r3, r3
 800ebb2:	4619      	mov	r1, r3
 800ebb4:	4610      	mov	r0, r2
 800ebb6:	f004 fcd3 	bl	8013560 <LoRaMacClassBSetFPendingBit>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800ebba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ebbc:	4a0f      	ldr	r2, [pc, #60]	; (800ebfc <ProcessRadioRxDone+0x52c>)
 800ebbe:	f8c2 3434 	str.w	r3, [r2, #1076]	; 0x434

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800ebc2:	f107 0212 	add.w	r2, r7, #18
 800ebc6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ebca:	4611      	mov	r1, r2
 800ebcc:	4618      	mov	r0, r3
 800ebce:	f002 fd81 	bl	80116d4 <DetermineFrameType>
 800ebd2:	4603      	mov	r3, r0
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d006      	beq.n	800ebe6 <ProcessRadioRxDone+0x516>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ebd8:	4b08      	ldr	r3, [pc, #32]	; (800ebfc <ProcessRadioRxDone+0x52c>)
 800ebda:	2201      	movs	r2, #1
 800ebdc:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800ebe0:	f7ff fd50 	bl	800e684 <PrepareRxDoneAbort>
                return;
 800ebe4:	e27c      	b.n	800f0e0 <ProcessRadioRxDone+0xa10>
            }

            //Check if it is a multicast message
            multicast = 0;
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
            downLinkCounter = 0;
 800ebec:	2300      	movs	r3, #0
 800ebee:	617b      	str	r3, [r7, #20]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
 800ebf6:	e055      	b.n	800eca4 <ProcessRadioRxDone+0x5d4>
 800ebf8:	20000c5c 	.word	0x20000c5c
 800ebfc:	20000740 	.word	0x20000740
 800ec00:	20000978 	.word	0x20000978
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800ec04:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 800ec08:	499f      	ldr	r1, [pc, #636]	; (800ee88 <ProcessRadioRxDone+0x7b8>)
 800ec0a:	4613      	mov	r3, r2
 800ec0c:	005b      	lsls	r3, r3, #1
 800ec0e:	4413      	add	r3, r2
 800ec10:	011b      	lsls	r3, r3, #4
 800ec12:	440b      	add	r3, r1
 800ec14:	33ec      	adds	r3, #236	; 0xec
 800ec16:	681a      	ldr	r2, [r3, #0]
 800ec18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec1a:	429a      	cmp	r2, r3
 800ec1c:	d13d      	bne.n	800ec9a <ProcessRadioRxDone+0x5ca>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800ec1e:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 800ec22:	4999      	ldr	r1, [pc, #612]	; (800ee88 <ProcessRadioRxDone+0x7b8>)
 800ec24:	4613      	mov	r3, r2
 800ec26:	005b      	lsls	r3, r3, #1
 800ec28:	4413      	add	r3, r2
 800ec2a:	011b      	lsls	r3, r3, #4
 800ec2c:	440b      	add	r3, r1
 800ec2e:	33e9      	adds	r3, #233	; 0xe9
 800ec30:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d031      	beq.n	800ec9a <ProcessRadioRxDone+0x5ca>
                {
                    multicast = 1;
 800ec36:	2301      	movs	r3, #1
 800ec38:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800ec3c:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 800ec40:	4991      	ldr	r1, [pc, #580]	; (800ee88 <ProcessRadioRxDone+0x7b8>)
 800ec42:	4613      	mov	r3, r2
 800ec44:	005b      	lsls	r3, r3, #1
 800ec46:	4413      	add	r3, r2
 800ec48:	011b      	lsls	r3, r3, #4
 800ec4a:	440b      	add	r3, r1
 800ec4c:	33ea      	adds	r3, #234	; 0xea
 800ec4e:	781b      	ldrb	r3, [r3, #0]
 800ec50:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800ec54:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 800ec58:	498b      	ldr	r1, [pc, #556]	; (800ee88 <ProcessRadioRxDone+0x7b8>)
 800ec5a:	4613      	mov	r3, r2
 800ec5c:	005b      	lsls	r3, r3, #1
 800ec5e:	4413      	add	r3, r2
 800ec60:	011b      	lsls	r3, r3, #4
 800ec62:	440b      	add	r3, r1
 800ec64:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	617b      	str	r3, [r7, #20]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800ec6e:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 800ec72:	4985      	ldr	r1, [pc, #532]	; (800ee88 <ProcessRadioRxDone+0x7b8>)
 800ec74:	4613      	mov	r3, r2
 800ec76:	005b      	lsls	r3, r3, #1
 800ec78:	4413      	add	r3, r2
 800ec7a:	011b      	lsls	r3, r3, #4
 800ec7c:	440b      	add	r3, r1
 800ec7e:	33ec      	adds	r3, #236	; 0xec
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800ec86:	4b80      	ldr	r3, [pc, #512]	; (800ee88 <ProcessRadioRxDone+0x7b8>)
 800ec88:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800ec8c:	2b02      	cmp	r3, #2
 800ec8e:	d10e      	bne.n	800ecae <ProcessRadioRxDone+0x5de>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800ec90:	4b7e      	ldr	r3, [pc, #504]	; (800ee8c <ProcessRadioRxDone+0x7bc>)
 800ec92:	2203      	movs	r2, #3
 800ec94:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    }
                    break;
 800ec98:	e009      	b.n	800ecae <ProcessRadioRxDone+0x5de>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ec9a:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 800ec9e:	3301      	adds	r3, #1
 800eca0:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
 800eca4:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d0ab      	beq.n	800ec04 <ProcessRadioRxDone+0x534>
 800ecac:	e000      	b.n	800ecb0 <ProcessRadioRxDone+0x5e0>
                    break;
 800ecae:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800ecb0:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800ecb4:	2b01      	cmp	r3, #1
 800ecb6:	d117      	bne.n	800ece8 <ProcessRadioRxDone+0x618>
 800ecb8:	7cbb      	ldrb	r3, [r7, #18]
 800ecba:	2b03      	cmp	r3, #3
 800ecbc:	d10d      	bne.n	800ecda <ProcessRadioRxDone+0x60a>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800ecbe:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800ecc2:	f003 0320 	and.w	r3, r3, #32
 800ecc6:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d106      	bne.n	800ecda <ProcessRadioRxDone+0x60a>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800eccc:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800ecd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ecd4:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d006      	beq.n	800ece8 <ProcessRadioRxDone+0x618>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ecda:	4b6c      	ldr	r3, [pc, #432]	; (800ee8c <ProcessRadioRxDone+0x7bc>)
 800ecdc:	2201      	movs	r2, #1
 800ecde:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800ece2:	f7ff fccf 	bl	800e684 <PrepareRxDoneAbort>
                return;
 800ece6:	e1fb      	b.n	800f0e0 <ProcessRadioRxDone+0xa10>
                PrepareRxDoneAbort( );
                return;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 800ece8:	7cb9      	ldrb	r1, [r7, #18]
 800ecea:	4c67      	ldr	r4, [pc, #412]	; (800ee88 <ProcessRadioRxDone+0x7b8>)
 800ecec:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800ecf0:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 800ecf4:	f107 0314 	add.w	r3, r7, #20
 800ecf8:	9301      	str	r3, [sp, #4]
 800ecfa:	f107 0313 	add.w	r3, r7, #19
 800ecfe:	9300      	str	r3, [sp, #0]
 800ed00:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 800ed04:	f000 fee4 	bl	800fad0 <GetFCntDown>
 800ed08:	4603      	mov	r3, r0
 800ed0a:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800ed0e:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d017      	beq.n	800ed46 <ProcessRadioRxDone+0x676>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800ed16:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 800ed1a:	2b07      	cmp	r3, #7
 800ed1c:	d104      	bne.n	800ed28 <ProcessRadioRxDone+0x658>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800ed1e:	4b5b      	ldr	r3, [pc, #364]	; (800ee8c <ProcessRadioRxDone+0x7bc>)
 800ed20:	2208      	movs	r2, #8
 800ed22:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 800ed26:	e003      	b.n	800ed30 <ProcessRadioRxDone+0x660>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ed28:	4b58      	ldr	r3, [pc, #352]	; (800ee8c <ProcessRadioRxDone+0x7bc>)
 800ed2a:	2201      	movs	r2, #1
 800ed2c:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800ed30:	697b      	ldr	r3, [r7, #20]
 800ed32:	4a56      	ldr	r2, [pc, #344]	; (800ee8c <ProcessRadioRxDone+0x7bc>)
 800ed34:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800ed38:	697b      	ldr	r3, [r7, #20]
 800ed3a:	4a54      	ldr	r2, [pc, #336]	; (800ee8c <ProcessRadioRxDone+0x7bc>)
 800ed3c:	f8c2 346c 	str.w	r3, [r2, #1132]	; 0x46c
                PrepareRxDoneAbort( );
 800ed40:	f7ff fca0 	bl	800e684 <PrepareRxDoneAbort>
                return;
 800ed44:	e1cc      	b.n	800f0e0 <ProcessRadioRxDone+0xa10>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800ed46:	7cfa      	ldrb	r2, [r7, #19]
 800ed48:	6979      	ldr	r1, [r7, #20]
 800ed4a:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 800ed4e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ed52:	9300      	str	r3, [sp, #0]
 800ed54:	460b      	mov	r3, r1
 800ed56:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800ed5a:	f005 fed3 	bl	8014b04 <LoRaMacCryptoUnsecureMessage>
 800ed5e:	4603      	mov	r3, r0
 800ed60:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800ed64:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d00f      	beq.n	800ed8c <ProcessRadioRxDone+0x6bc>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800ed6c:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 800ed70:	2b02      	cmp	r3, #2
 800ed72:	d104      	bne.n	800ed7e <ProcessRadioRxDone+0x6ae>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800ed74:	4b45      	ldr	r3, [pc, #276]	; (800ee8c <ProcessRadioRxDone+0x7bc>)
 800ed76:	220a      	movs	r2, #10
 800ed78:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 800ed7c:	e003      	b.n	800ed86 <ProcessRadioRxDone+0x6b6>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800ed7e:	4b43      	ldr	r3, [pc, #268]	; (800ee8c <ProcessRadioRxDone+0x7bc>)
 800ed80:	220b      	movs	r2, #11
 800ed82:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                }
                PrepareRxDoneAbort( );
 800ed86:	f7ff fc7d 	bl	800e684 <PrepareRxDoneAbort>
                return;
 800ed8a:	e1a9      	b.n	800f0e0 <ProcessRadioRxDone+0xa10>
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800ed8c:	4b3f      	ldr	r3, [pc, #252]	; (800ee8c <ProcessRadioRxDone+0x7bc>)
 800ed8e:	2200      	movs	r2, #0
 800ed90:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Multicast = multicast;
 800ed94:	4a3d      	ldr	r2, [pc, #244]	; (800ee8c <ProcessRadioRxDone+0x7bc>)
 800ed96:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800ed9a:	f882 3422 	strb.w	r3, [r2, #1058]	; 0x422
            MacCtx.McpsIndication.Buffer = NULL;
 800ed9e:	4b3b      	ldr	r3, [pc, #236]	; (800ee8c <ProcessRadioRxDone+0x7bc>)
 800eda0:	2200      	movs	r2, #0
 800eda2:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = 0;
 800eda6:	4b39      	ldr	r3, [pc, #228]	; (800ee8c <ProcessRadioRxDone+0x7bc>)
 800eda8:	2200      	movs	r2, #0
 800edaa:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800edae:	697b      	ldr	r3, [r7, #20]
 800edb0:	4a36      	ldr	r2, [pc, #216]	; (800ee8c <ProcessRadioRxDone+0x7bc>)
 800edb2:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800edb6:	697b      	ldr	r3, [r7, #20]
 800edb8:	4a34      	ldr	r2, [pc, #208]	; (800ee8c <ProcessRadioRxDone+0x7bc>)
 800edba:	f8c2 346c 	str.w	r3, [r2, #1132]	; 0x46c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800edbe:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800edc2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800edc6:	b2db      	uxtb	r3, r3
 800edc8:	2b00      	cmp	r3, #0
 800edca:	bf14      	ite	ne
 800edcc:	2301      	movne	r3, #1
 800edce:	2300      	moveq	r3, #0
 800edd0:	b2da      	uxtb	r2, r3
 800edd2:	4b2e      	ldr	r3, [pc, #184]	; (800ee8c <ProcessRadioRxDone+0x7bc>)
 800edd4:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800edd8:	4b2c      	ldr	r3, [pc, #176]	; (800ee8c <ProcessRadioRxDone+0x7bc>)
 800edda:	2200      	movs	r2, #0
 800eddc:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800ede0:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800ede4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ede8:	b2db      	uxtb	r3, r3
 800edea:	2b00      	cmp	r3, #0
 800edec:	bf14      	ite	ne
 800edee:	2301      	movne	r3, #1
 800edf0:	2300      	moveq	r3, #0
 800edf2:	b2da      	uxtb	r2, r3
 800edf4:	4b25      	ldr	r3, [pc, #148]	; (800ee8c <ProcessRadioRxDone+0x7bc>)
 800edf6:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800edfa:	4b24      	ldr	r3, [pc, #144]	; (800ee8c <ProcessRadioRxDone+0x7bc>)
 800edfc:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d004      	beq.n	800ee0e <ProcessRadioRxDone+0x73e>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800ee04:	4b21      	ldr	r3, [pc, #132]	; (800ee8c <ProcessRadioRxDone+0x7bc>)
 800ee06:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800ee0a:	2b01      	cmp	r3, #1
 800ee0c:	d106      	bne.n	800ee1c <ProcessRadioRxDone+0x74c>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800ee0e:	4b1e      	ldr	r3, [pc, #120]	; (800ee88 <ProcessRadioRxDone+0x7b8>)
 800ee10:	2200      	movs	r2, #0
 800ee12:	629a      	str	r2, [r3, #40]	; 0x28
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                Nvm.MacGroup2.DownlinkReceived = true;
 800ee14:	4b1c      	ldr	r3, [pc, #112]	; (800ee88 <ProcessRadioRxDone+0x7b8>)
 800ee16:	2201      	movs	r2, #1
 800ee18:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800ee1c:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800ee20:	2b01      	cmp	r3, #1
 800ee22:	d104      	bne.n	800ee2e <ProcessRadioRxDone+0x75e>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800ee24:	4b19      	ldr	r3, [pc, #100]	; (800ee8c <ProcessRadioRxDone+0x7bc>)
 800ee26:	2202      	movs	r2, #2
 800ee28:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 800ee2c:	e03a      	b.n	800eea4 <ProcessRadioRxDone+0x7d4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800ee2e:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800ee32:	f023 031f 	bic.w	r3, r3, #31
 800ee36:	b2db      	uxtb	r3, r3
 800ee38:	2ba0      	cmp	r3, #160	; 0xa0
 800ee3a:	d12b      	bne.n	800ee94 <ProcessRadioRxDone+0x7c4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800ee3c:	4b12      	ldr	r3, [pc, #72]	; (800ee88 <ProcessRadioRxDone+0x7b8>)
 800ee3e:	2201      	movs	r2, #1
 800ee40:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800ee44:	4b10      	ldr	r3, [pc, #64]	; (800ee88 <ProcessRadioRxDone+0x7b8>)
 800ee46:	f893 312e 	ldrb.w	r3, [r3, #302]	; 0x12e
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d102      	bne.n	800ee54 <ProcessRadioRxDone+0x784>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800ee4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee50:	4a0d      	ldr	r2, [pc, #52]	; (800ee88 <ProcessRadioRxDone+0x7b8>)
 800ee52:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800ee54:	4b0d      	ldr	r3, [pc, #52]	; (800ee8c <ProcessRadioRxDone+0x7bc>)
 800ee56:	2201      	movs	r2, #1
 800ee58:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // Handle response timeout for class c and class b downlinks
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800ee5c:	4b0b      	ldr	r3, [pc, #44]	; (800ee8c <ProcessRadioRxDone+0x7bc>)
 800ee5e:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d01e      	beq.n	800eea4 <ProcessRadioRxDone+0x7d4>
                        ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) )
 800ee66:	4b09      	ldr	r3, [pc, #36]	; (800ee8c <ProcessRadioRxDone+0x7bc>)
 800ee68:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800ee6c:	2b01      	cmp	r3, #1
 800ee6e:	d019      	beq.n	800eea4 <ProcessRadioRxDone+0x7d4>
                    {
                        // Calculate timeout
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800ee70:	4b05      	ldr	r3, [pc, #20]	; (800ee88 <ProcessRadioRxDone+0x7b8>)
 800ee72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ee76:	4a05      	ldr	r2, [pc, #20]	; (800ee8c <ProcessRadioRxDone+0x7bc>)
 800ee78:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 800ee7c:	4b04      	ldr	r3, [pc, #16]	; (800ee90 <ProcessRadioRxDone+0x7c0>)
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	4a02      	ldr	r2, [pc, #8]	; (800ee8c <ProcessRadioRxDone+0x7bc>)
 800ee82:	f8c2 3498 	str.w	r3, [r2, #1176]	; 0x498
 800ee86:	e00d      	b.n	800eea4 <ProcessRadioRxDone+0x7d4>
 800ee88:	20000c5c 	.word	0x20000c5c
 800ee8c:	20000740 	.word	0x20000740
 800ee90:	2000188c 	.word	0x2000188c
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800ee94:	4b94      	ldr	r3, [pc, #592]	; (800f0e8 <ProcessRadioRxDone+0xa18>)
 800ee96:	2200      	movs	r2, #0
 800ee98:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800ee9c:	4b93      	ldr	r3, [pc, #588]	; (800f0ec <ProcessRadioRxDone+0xa1c>)
 800ee9e:	2200      	movs	r2, #0
 800eea0:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
            }

            // Set the pending status
            /* if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
                ( MacCtx.McpsIndication.ResponseTimeout > 0 ) ) */
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 800eea4:	4b90      	ldr	r3, [pc, #576]	; (800f0e8 <ProcessRadioRxDone+0xa18>)
 800eea6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d106      	bne.n	800eebc <ProcessRadioRxDone+0x7ec>
 800eeae:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800eeb2:	f003 0310 	and.w	r3, r3, #16
 800eeb6:	b2db      	uxtb	r3, r3
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d008      	beq.n	800eece <ProcessRadioRxDone+0x7fe>
 800eebc:	4b8a      	ldr	r3, [pc, #552]	; (800f0e8 <ProcessRadioRxDone+0xa18>)
 800eebe:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d103      	bne.n	800eece <ProcessRadioRxDone+0x7fe>
            {
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 800eec6:	4b89      	ldr	r3, [pc, #548]	; (800f0ec <ProcessRadioRxDone+0xa1c>)
 800eec8:	2201      	movs	r2, #1
 800eeca:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800eece:	4b87      	ldr	r3, [pc, #540]	; (800f0ec <ProcessRadioRxDone+0xa1c>)
 800eed0:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800eed4:	4a85      	ldr	r2, [pc, #532]	; (800f0ec <ProcessRadioRxDone+0xa1c>)
 800eed6:	f892 2440 	ldrb.w	r2, [r2, #1088]	; 0x440
 800eeda:	f897 104c 	ldrb.w	r1, [r7, #76]	; 0x4c
 800eede:	4618      	mov	r0, r3
 800eee0:	f001 ff8a 	bl	8010df8 <RemoveMacCommands>

            switch( fType )
 800eee4:	7cbb      	ldrb	r3, [r7, #18]
 800eee6:	2b03      	cmp	r3, #3
 800eee8:	d873      	bhi.n	800efd2 <ProcessRadioRxDone+0x902>
 800eeea:	a201      	add	r2, pc, #4	; (adr r2, 800eef0 <ProcessRadioRxDone+0x820>)
 800eeec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eef0:	0800ef01 	.word	0x0800ef01
 800eef4:	0800ef51 	.word	0x0800ef51
 800eef8:	0800ef87 	.word	0x0800ef87
 800eefc:	0800efad 	.word	0x0800efad
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800ef00:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800ef04:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800ef08:	b2db      	uxtb	r3, r3
 800ef0a:	461c      	mov	r4, r3
 800ef0c:	4b77      	ldr	r3, [pc, #476]	; (800f0ec <ProcessRadioRxDone+0xa1c>)
 800ef0e:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800ef12:	f997 108f 	ldrsb.w	r1, [r7, #143]	; 0x8f
 800ef16:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800ef1a:	f102 0010 	add.w	r0, r2, #16
 800ef1e:	9300      	str	r3, [sp, #0]
 800ef20:	460b      	mov	r3, r1
 800ef22:	4622      	mov	r2, r4
 800ef24:	2100      	movs	r1, #0
 800ef26:	f000 ff4f 	bl	800fdc8 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800ef2a:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800ef2e:	4b6f      	ldr	r3, [pc, #444]	; (800f0ec <ProcessRadioRxDone+0xa1c>)
 800ef30:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800ef34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ef36:	4a6d      	ldr	r2, [pc, #436]	; (800f0ec <ProcessRadioRxDone+0xa1c>)
 800ef38:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800ef3c:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 800ef40:	4b6a      	ldr	r3, [pc, #424]	; (800f0ec <ProcessRadioRxDone+0xa1c>)
 800ef42:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 800ef46:	4b69      	ldr	r3, [pc, #420]	; (800f0ec <ProcessRadioRxDone+0xa1c>)
 800ef48:	2201      	movs	r2, #1
 800ef4a:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
                    break;
 800ef4e:	e047      	b.n	800efe0 <ProcessRadioRxDone+0x910>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800ef50:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800ef54:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800ef58:	b2db      	uxtb	r3, r3
 800ef5a:	461c      	mov	r4, r3
 800ef5c:	4b63      	ldr	r3, [pc, #396]	; (800f0ec <ProcessRadioRxDone+0xa1c>)
 800ef5e:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800ef62:	f997 108f 	ldrsb.w	r1, [r7, #143]	; 0x8f
 800ef66:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800ef6a:	f102 0010 	add.w	r0, r2, #16
 800ef6e:	9300      	str	r3, [sp, #0]
 800ef70:	460b      	mov	r3, r1
 800ef72:	4622      	mov	r2, r4
 800ef74:	2100      	movs	r1, #0
 800ef76:	f000 ff27 	bl	800fdc8 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800ef7a:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800ef7e:	4b5b      	ldr	r3, [pc, #364]	; (800f0ec <ProcessRadioRxDone+0xa1c>)
 800ef80:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    break;
 800ef84:	e02c      	b.n	800efe0 <ProcessRadioRxDone+0x910>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800ef86:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800ef88:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 800ef8c:	4b57      	ldr	r3, [pc, #348]	; (800f0ec <ProcessRadioRxDone+0xa1c>)
 800ef8e:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800ef92:	f997 108f 	ldrsb.w	r1, [r7, #143]	; 0x8f
 800ef96:	9300      	str	r3, [sp, #0]
 800ef98:	460b      	mov	r3, r1
 800ef9a:	2100      	movs	r1, #0
 800ef9c:	f000 ff14 	bl	800fdc8 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800efa0:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800efa4:	4b51      	ldr	r3, [pc, #324]	; (800f0ec <ProcessRadioRxDone+0xa1c>)
 800efa6:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    break;
 800efaa:	e019      	b.n	800efe0 <ProcessRadioRxDone+0x910>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800efac:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800efb0:	4b4e      	ldr	r3, [pc, #312]	; (800f0ec <ProcessRadioRxDone+0xa1c>)
 800efb2:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800efb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800efb8:	4a4c      	ldr	r2, [pc, #304]	; (800f0ec <ProcessRadioRxDone+0xa1c>)
 800efba:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800efbe:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 800efc2:	4b4a      	ldr	r3, [pc, #296]	; (800f0ec <ProcessRadioRxDone+0xa1c>)
 800efc4:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 800efc8:	4b48      	ldr	r3, [pc, #288]	; (800f0ec <ProcessRadioRxDone+0xa1c>)
 800efca:	2201      	movs	r2, #1
 800efcc:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
                    break;
 800efd0:	e006      	b.n	800efe0 <ProcessRadioRxDone+0x910>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800efd2:	4b46      	ldr	r3, [pc, #280]	; (800f0ec <ProcessRadioRxDone+0xa1c>)
 800efd4:	2201      	movs	r2, #1
 800efd6:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                    PrepareRxDoneAbort( );
 800efda:	f7ff fb53 	bl	800e684 <PrepareRxDoneAbort>
                    break;
 800efde:	bf00      	nop
                }
            }
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800efe0:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800efe4:	2be0      	cmp	r3, #224	; 0xe0
 800efe6:	d118      	bne.n	800f01a <ProcessRadioRxDone+0x94a>
 800efe8:	4b3f      	ldr	r3, [pc, #252]	; (800f0e8 <ProcessRadioRxDone+0xa18>)
 800efea:	f893 311f 	ldrb.w	r3, [r3, #287]	; 0x11f
 800efee:	f083 0301 	eor.w	r3, r3, #1
 800eff2:	b2db      	uxtb	r3, r3
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d010      	beq.n	800f01a <ProcessRadioRxDone+0x94a>
            { // Do not notify the upper layer of data reception on FPort LORAMAC_CERT_FPORT if the port
              // handling is disabled.
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 800eff8:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800effc:	4b3b      	ldr	r3, [pc, #236]	; (800f0ec <ProcessRadioRxDone+0xa1c>)
 800effe:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                MacCtx.McpsIndication.Buffer = NULL;
 800f002:	4b3a      	ldr	r3, [pc, #232]	; (800f0ec <ProcessRadioRxDone+0xa1c>)
 800f004:	2200      	movs	r2, #0
 800f006:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
                MacCtx.McpsIndication.BufferSize = 0;
 800f00a:	4b38      	ldr	r3, [pc, #224]	; (800f0ec <ProcessRadioRxDone+0xa1c>)
 800f00c:	2200      	movs	r2, #0
 800f00e:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
                MacCtx.McpsIndication.RxData = false;
 800f012:	4b36      	ldr	r3, [pc, #216]	; (800f0ec <ProcessRadioRxDone+0xa1c>)
 800f014:	2200      	movs	r2, #0
 800f016:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800f01a:	4a34      	ldr	r2, [pc, #208]	; (800f0ec <ProcessRadioRxDone+0xa1c>)
 800f01c:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f020:	f043 0302 	orr.w	r3, r3, #2
 800f024:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491

            break;
 800f028:	e035      	b.n	800f096 <ProcessRadioRxDone+0x9c6>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800f02a:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800f02e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f032:	18d1      	adds	r1, r2, r3
 800f034:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800f038:	b29b      	uxth	r3, r3
 800f03a:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 800f03e:	1ad3      	subs	r3, r2, r3
 800f040:	b29b      	uxth	r3, r3
 800f042:	461a      	mov	r2, r3
 800f044:	482a      	ldr	r0, [pc, #168]	; (800f0f0 <ProcessRadioRxDone+0xa20>)
 800f046:	f009 ff80 	bl	8018f4a <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800f04a:	4b28      	ldr	r3, [pc, #160]	; (800f0ec <ProcessRadioRxDone+0xa1c>)
 800f04c:	2203      	movs	r2, #3
 800f04e:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f052:	4b26      	ldr	r3, [pc, #152]	; (800f0ec <ProcessRadioRxDone+0xa1c>)
 800f054:	2200      	movs	r2, #0
 800f056:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800f05a:	4b24      	ldr	r3, [pc, #144]	; (800f0ec <ProcessRadioRxDone+0xa1c>)
 800f05c:	4a24      	ldr	r2, [pc, #144]	; (800f0f0 <ProcessRadioRxDone+0xa20>)
 800f05e:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800f062:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800f066:	b2da      	uxtb	r2, r3
 800f068:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800f06c:	1ad3      	subs	r3, r2, r3
 800f06e:	b2da      	uxtb	r2, r3
 800f070:	4b1e      	ldr	r3, [pc, #120]	; (800f0ec <ProcessRadioRxDone+0xa1c>)
 800f072:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800f076:	4a1d      	ldr	r2, [pc, #116]	; (800f0ec <ProcessRadioRxDone+0xa1c>)
 800f078:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f07c:	f043 0302 	orr.w	r3, r3, #2
 800f080:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
            break;
 800f084:	e007      	b.n	800f096 <ProcessRadioRxDone+0x9c6>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f086:	4b19      	ldr	r3, [pc, #100]	; (800f0ec <ProcessRadioRxDone+0xa1c>)
 800f088:	2201      	movs	r2, #1
 800f08a:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            PrepareRxDoneAbort( );
 800f08e:	f7ff faf9 	bl	800e684 <PrepareRxDoneAbort>
            break;
 800f092:	e000      	b.n	800f096 <ProcessRadioRxDone+0x9c6>
            break;
 800f094:	bf00      	nop
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Verify if we need to disable the RetransmitTimeoutTimer
    // Only applies if downlink is received on Rx1 or Rx2 windows.
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800f096:	4b15      	ldr	r3, [pc, #84]	; (800f0ec <ProcessRadioRxDone+0xa1c>)
 800f098:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d004      	beq.n	800f0aa <ProcessRadioRxDone+0x9da>
        ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800f0a0:	4b12      	ldr	r3, [pc, #72]	; (800f0ec <ProcessRadioRxDone+0xa1c>)
 800f0a2:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800f0a6:	2b01      	cmp	r3, #1
 800f0a8:	d10c      	bne.n	800f0c4 <ProcessRadioRxDone+0x9f4>
    {
        if( MacCtx.NodeAckRequested == true )
 800f0aa:	4b10      	ldr	r3, [pc, #64]	; (800f0ec <ProcessRadioRxDone+0xa1c>)
 800f0ac:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d007      	beq.n	800f0c4 <ProcessRadioRxDone+0x9f4>
        {
            if( MacCtx.McpsConfirm.AckReceived == true )
 800f0b4:	4b0d      	ldr	r3, [pc, #52]	; (800f0ec <ProcessRadioRxDone+0xa1c>)
 800f0b6:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d002      	beq.n	800f0c4 <ProcessRadioRxDone+0x9f4>
            {
                OnRetransmitTimeoutTimerEvent( NULL );
 800f0be:	2000      	movs	r0, #0
 800f0c0:	f000 fcec 	bl	800fa9c <OnRetransmitTimeoutTimerEvent>
            }
        }
    }

    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 800f0c4:	4b09      	ldr	r3, [pc, #36]	; (800f0ec <ProcessRadioRxDone+0xa1c>)
 800f0c6:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800f0ca:	2b02      	cmp	r3, #2
 800f0cc:	d006      	beq.n	800f0dc <ProcessRadioRxDone+0xa0c>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800f0ce:	4a07      	ldr	r2, [pc, #28]	; (800f0ec <ProcessRadioRxDone+0xa1c>)
 800f0d0:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f0d4:	f043 0310 	orr.w	r3, r3, #16
 800f0d8:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 800f0dc:	f7ff fa14 	bl	800e508 <UpdateRxSlotIdleState>
}
 800f0e0:	37a4      	adds	r7, #164	; 0xa4
 800f0e2:	46bd      	mov	sp, r7
 800f0e4:	bd90      	pop	{r4, r7, pc}
 800f0e6:	bf00      	nop
 800f0e8:	20000c5c 	.word	0x20000c5c
 800f0ec:	20000740 	.word	0x20000740
 800f0f0:	20000978 	.word	0x20000978

0800f0f4 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f0f8:	4b11      	ldr	r3, [pc, #68]	; (800f140 <ProcessRadioTxTimeout+0x4c>)
 800f0fa:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800f0fe:	2b02      	cmp	r3, #2
 800f100:	d002      	beq.n	800f108 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800f102:	4b10      	ldr	r3, [pc, #64]	; (800f144 <ProcessRadioTxTimeout+0x50>)
 800f104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f106:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800f108:	f7ff f9fe 	bl	800e508 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800f10c:	4b0e      	ldr	r3, [pc, #56]	; (800f148 <ProcessRadioTxTimeout+0x54>)
 800f10e:	2202      	movs	r2, #2
 800f110:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800f114:	2002      	movs	r0, #2
 800f116:	f004 fe69 	bl	8013dec <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800f11a:	4b0b      	ldr	r3, [pc, #44]	; (800f148 <ProcessRadioTxTimeout+0x54>)
 800f11c:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800f120:	2b00      	cmp	r3, #0
 800f122:	d003      	beq.n	800f12c <ProcessRadioTxTimeout+0x38>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        MacCtx.RetransmitTimeoutRetry = true;
 800f124:	4b08      	ldr	r3, [pc, #32]	; (800f148 <ProcessRadioTxTimeout+0x54>)
 800f126:	2201      	movs	r2, #1
 800f128:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800f12c:	4a06      	ldr	r2, [pc, #24]	; (800f148 <ProcessRadioTxTimeout+0x54>)
 800f12e:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f132:	f043 0310 	orr.w	r3, r3, #16
 800f136:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
}
 800f13a:	bf00      	nop
 800f13c:	bd80      	pop	{r7, pc}
 800f13e:	bf00      	nop
 800f140:	20000c5c 	.word	0x20000c5c
 800f144:	0801eb70 	.word	0x0801eb70
 800f148:	20000740 	.word	0x20000740

0800f14c <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800f14c:	b580      	push	{r7, lr}
 800f14e:	b084      	sub	sp, #16
 800f150:	af00      	add	r7, sp, #0
 800f152:	4603      	mov	r3, r0
 800f154:	460a      	mov	r2, r1
 800f156:	71fb      	strb	r3, [r7, #7]
 800f158:	4613      	mov	r3, r2
 800f15a:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800f15c:	2300      	movs	r3, #0
 800f15e:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f160:	4b3d      	ldr	r3, [pc, #244]	; (800f258 <HandleRadioRxErrorTimeout+0x10c>)
 800f162:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800f166:	2b02      	cmp	r3, #2
 800f168:	d002      	beq.n	800f170 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800f16a:	4b3c      	ldr	r3, [pc, #240]	; (800f25c <HandleRadioRxErrorTimeout+0x110>)
 800f16c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f16e:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800f170:	f004 f966 	bl	8013440 <LoRaMacClassBIsBeaconExpected>
 800f174:	4603      	mov	r3, r0
 800f176:	2b00      	cmp	r3, #0
 800f178:	d007      	beq.n	800f18a <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800f17a:	2002      	movs	r0, #2
 800f17c:	f004 f914 	bl	80133a8 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800f180:	2000      	movs	r0, #0
 800f182:	f004 f936 	bl	80133f2 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800f186:	2301      	movs	r3, #1
 800f188:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f18a:	4b33      	ldr	r3, [pc, #204]	; (800f258 <HandleRadioRxErrorTimeout+0x10c>)
 800f18c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800f190:	2b01      	cmp	r3, #1
 800f192:	d119      	bne.n	800f1c8 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800f194:	f004 f95b 	bl	801344e <LoRaMacClassBIsPingExpected>
 800f198:	4603      	mov	r3, r0
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d007      	beq.n	800f1ae <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f19e:	2000      	movs	r0, #0
 800f1a0:	f004 f90c 	bl	80133bc <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800f1a4:	2000      	movs	r0, #0
 800f1a6:	f004 f92d 	bl	8013404 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800f1aa:	2301      	movs	r3, #1
 800f1ac:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800f1ae:	f004 f955 	bl	801345c <LoRaMacClassBIsMulticastExpected>
 800f1b2:	4603      	mov	r3, r0
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d007      	beq.n	800f1c8 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f1b8:	2000      	movs	r0, #0
 800f1ba:	f004 f909 	bl	80133d0 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800f1be:	2000      	movs	r0, #0
 800f1c0:	f004 f929 	bl	8013416 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800f1c4:	2301      	movs	r3, #1
 800f1c6:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800f1c8:	7bfb      	ldrb	r3, [r7, #15]
 800f1ca:	f083 0301 	eor.w	r3, r3, #1
 800f1ce:	b2db      	uxtb	r3, r3
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d03b      	beq.n	800f24c <HandleRadioRxErrorTimeout+0x100>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800f1d4:	4b22      	ldr	r3, [pc, #136]	; (800f260 <HandleRadioRxErrorTimeout+0x114>)
 800f1d6:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d122      	bne.n	800f224 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800f1de:	4b20      	ldr	r3, [pc, #128]	; (800f260 <HandleRadioRxErrorTimeout+0x114>)
 800f1e0:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d003      	beq.n	800f1f0 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800f1e8:	4a1d      	ldr	r2, [pc, #116]	; (800f260 <HandleRadioRxErrorTimeout+0x114>)
 800f1ea:	79fb      	ldrb	r3, [r7, #7]
 800f1ec:	f882 3441 	strb.w	r3, [r2, #1089]	; 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800f1f0:	79fb      	ldrb	r3, [r7, #7]
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	f004 fdfa 	bl	8013dec <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800f1f8:	4b17      	ldr	r3, [pc, #92]	; (800f258 <HandleRadioRxErrorTimeout+0x10c>)
 800f1fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	f00e f96b 	bl	801d4d8 <UTIL_TIMER_GetElapsedTime>
 800f202:	4602      	mov	r2, r0
 800f204:	4b16      	ldr	r3, [pc, #88]	; (800f260 <HandleRadioRxErrorTimeout+0x114>)
 800f206:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800f20a:	429a      	cmp	r2, r3
 800f20c:	d31e      	bcc.n	800f24c <HandleRadioRxErrorTimeout+0x100>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800f20e:	4815      	ldr	r0, [pc, #84]	; (800f264 <HandleRadioRxErrorTimeout+0x118>)
 800f210:	f00e f836 	bl	801d280 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800f214:	4a12      	ldr	r2, [pc, #72]	; (800f260 <HandleRadioRxErrorTimeout+0x114>)
 800f216:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f21a:	f043 0310 	orr.w	r3, r3, #16
 800f21e:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 800f222:	e013      	b.n	800f24c <HandleRadioRxErrorTimeout+0x100>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800f224:	4b0e      	ldr	r3, [pc, #56]	; (800f260 <HandleRadioRxErrorTimeout+0x114>)
 800f226:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d003      	beq.n	800f236 <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800f22e:	4a0c      	ldr	r2, [pc, #48]	; (800f260 <HandleRadioRxErrorTimeout+0x114>)
 800f230:	79bb      	ldrb	r3, [r7, #6]
 800f232:	f882 3441 	strb.w	r3, [r2, #1089]	; 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800f236:	79bb      	ldrb	r3, [r7, #6]
 800f238:	4618      	mov	r0, r3
 800f23a:	f004 fdd7 	bl	8013dec <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.MacFlags.Bits.MacDone = 1;
 800f23e:	4a08      	ldr	r2, [pc, #32]	; (800f260 <HandleRadioRxErrorTimeout+0x114>)
 800f240:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f244:	f043 0310 	orr.w	r3, r3, #16
 800f248:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 800f24c:	f7ff f95c 	bl	800e508 <UpdateRxSlotIdleState>
}
 800f250:	bf00      	nop
 800f252:	3710      	adds	r7, #16
 800f254:	46bd      	mov	sp, r7
 800f256:	bd80      	pop	{r7, pc}
 800f258:	20000c5c 	.word	0x20000c5c
 800f25c:	0801eb70 	.word	0x0801eb70
 800f260:	20000740 	.word	0x20000740
 800f264:	20000ad8 	.word	0x20000ad8

0800f268 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800f268:	b580      	push	{r7, lr}
 800f26a:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800f26c:	2106      	movs	r1, #6
 800f26e:	2005      	movs	r0, #5
 800f270:	f7ff ff6c 	bl	800f14c <HandleRadioRxErrorTimeout>
}
 800f274:	bf00      	nop
 800f276:	bd80      	pop	{r7, pc}

0800f278 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800f278:	b580      	push	{r7, lr}
 800f27a:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800f27c:	2104      	movs	r1, #4
 800f27e:	2003      	movs	r0, #3
 800f280:	f7ff ff64 	bl	800f14c <HandleRadioRxErrorTimeout>
}
 800f284:	bf00      	nop
 800f286:	bd80      	pop	{r7, pc}

0800f288 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800f288:	b580      	push	{r7, lr}
 800f28a:	b084      	sub	sp, #16
 800f28c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f28e:	f3ef 8310 	mrs	r3, PRIMASK
 800f292:	607b      	str	r3, [r7, #4]
  return(result);
 800f294:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800f296:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800f298:	b672      	cpsid	i
}
 800f29a:	bf00      	nop
    events = LoRaMacRadioEvents;
 800f29c:	4b1d      	ldr	r3, [pc, #116]	; (800f314 <LoRaMacHandleIrqEvents+0x8c>)
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800f2a2:	4b1c      	ldr	r3, [pc, #112]	; (800f314 <LoRaMacHandleIrqEvents+0x8c>)
 800f2a4:	2200      	movs	r2, #0
 800f2a6:	601a      	str	r2, [r3, #0]
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f2ac:	68bb      	ldr	r3, [r7, #8]
 800f2ae:	f383 8810 	msr	PRIMASK, r3
}
 800f2b2:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800f2b4:	683b      	ldr	r3, [r7, #0]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d027      	beq.n	800f30a <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800f2ba:	783b      	ldrb	r3, [r7, #0]
 800f2bc:	f003 0320 	and.w	r3, r3, #32
 800f2c0:	b2db      	uxtb	r3, r3
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d001      	beq.n	800f2ca <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800f2c6:	f7ff f937 	bl	800e538 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800f2ca:	783b      	ldrb	r3, [r7, #0]
 800f2cc:	f003 0310 	and.w	r3, r3, #16
 800f2d0:	b2db      	uxtb	r3, r3
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d001      	beq.n	800f2da <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800f2d6:	f7ff f9fb 	bl	800e6d0 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800f2da:	783b      	ldrb	r3, [r7, #0]
 800f2dc:	f003 0308 	and.w	r3, r3, #8
 800f2e0:	b2db      	uxtb	r3, r3
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d001      	beq.n	800f2ea <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800f2e6:	f7ff ff05 	bl	800f0f4 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800f2ea:	783b      	ldrb	r3, [r7, #0]
 800f2ec:	f003 0304 	and.w	r3, r3, #4
 800f2f0:	b2db      	uxtb	r3, r3
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d001      	beq.n	800f2fa <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800f2f6:	f7ff ffb7 	bl	800f268 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800f2fa:	783b      	ldrb	r3, [r7, #0]
 800f2fc:	f003 0302 	and.w	r3, r3, #2
 800f300:	b2db      	uxtb	r3, r3
 800f302:	2b00      	cmp	r3, #0
 800f304:	d001      	beq.n	800f30a <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800f306:	f7ff ffb7 	bl	800f278 <ProcessRadioRxTimeout>
        }
    }
}
 800f30a:	bf00      	nop
 800f30c:	3710      	adds	r7, #16
 800f30e:	46bd      	mov	sp, r7
 800f310:	bd80      	pop	{r7, pc}
 800f312:	bf00      	nop
 800f314:	20001884 	.word	0x20001884

0800f318 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800f318:	b480      	push	{r7}
 800f31a:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800f31c:	4b10      	ldr	r3, [pc, #64]	; (800f360 <LoRaMacIsBusy+0x48>)
 800f31e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f322:	2b01      	cmp	r3, #1
 800f324:	d101      	bne.n	800f32a <LoRaMacIsBusy+0x12>
    {
        return false;
 800f326:	2300      	movs	r3, #0
 800f328:	e015      	b.n	800f356 <LoRaMacIsBusy+0x3e>
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 800f32a:	4b0e      	ldr	r3, [pc, #56]	; (800f364 <LoRaMacIsBusy+0x4c>)
 800f32c:	781b      	ldrb	r3, [r3, #0]
 800f32e:	f003 0301 	and.w	r3, r3, #1
 800f332:	b2db      	uxtb	r3, r3
 800f334:	2b00      	cmp	r3, #0
 800f336:	d001      	beq.n	800f33c <LoRaMacIsBusy+0x24>
    {
        return true;
 800f338:	2301      	movs	r3, #1
 800f33a:	e00c      	b.n	800f356 <LoRaMacIsBusy+0x3e>
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800f33c:	4b08      	ldr	r3, [pc, #32]	; (800f360 <LoRaMacIsBusy+0x48>)
 800f33e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f342:	2b00      	cmp	r3, #0
 800f344:	d106      	bne.n	800f354 <LoRaMacIsBusy+0x3c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800f346:	4b06      	ldr	r3, [pc, #24]	; (800f360 <LoRaMacIsBusy+0x48>)
 800f348:	f893 3492 	ldrb.w	r3, [r3, #1170]	; 0x492
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800f34c:	2b01      	cmp	r3, #1
 800f34e:	d101      	bne.n	800f354 <LoRaMacIsBusy+0x3c>
    {
        return false;
 800f350:	2300      	movs	r3, #0
 800f352:	e000      	b.n	800f356 <LoRaMacIsBusy+0x3e>
    }
    return true;
 800f354:	2301      	movs	r3, #1
}
 800f356:	4618      	mov	r0, r3
 800f358:	46bd      	mov	sp, r7
 800f35a:	bc80      	pop	{r7}
 800f35c:	4770      	bx	lr
 800f35e:	bf00      	nop
 800f360:	20000740 	.word	0x20000740
 800f364:	20001884 	.word	0x20001884

0800f368 <LoRaMacIsStopped>:

bool LoRaMacIsStopped( void )
{
 800f368:	b480      	push	{r7}
 800f36a:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800f36c:	4b05      	ldr	r3, [pc, #20]	; (800f384 <LoRaMacIsStopped+0x1c>)
 800f36e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f372:	2b01      	cmp	r3, #1
 800f374:	d101      	bne.n	800f37a <LoRaMacIsStopped+0x12>
    {
        return true;
 800f376:	2301      	movs	r3, #1
 800f378:	e000      	b.n	800f37c <LoRaMacIsStopped+0x14>
    }
    return false;
 800f37a:	2300      	movs	r3, #0
}
 800f37c:	4618      	mov	r0, r3
 800f37e:	46bd      	mov	sp, r7
 800f380:	bc80      	pop	{r7}
 800f382:	4770      	bx	lr
 800f384:	20000740 	.word	0x20000740

0800f388 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800f388:	b480      	push	{r7}
 800f38a:	b083      	sub	sp, #12
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	4603      	mov	r3, r0
 800f390:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800f392:	4a04      	ldr	r2, [pc, #16]	; (800f3a4 <LoRaMacEnableRequests+0x1c>)
 800f394:	79fb      	ldrb	r3, [r7, #7]
 800f396:	f882 3492 	strb.w	r3, [r2, #1170]	; 0x492
}
 800f39a:	bf00      	nop
 800f39c:	370c      	adds	r7, #12
 800f39e:	46bd      	mov	sp, r7
 800f3a0:	bc80      	pop	{r7}
 800f3a2:	4770      	bx	lr
 800f3a4:	20000740 	.word	0x20000740

0800f3a8 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b082      	sub	sp, #8
 800f3ac:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800f3ae:	4b2c      	ldr	r3, [pc, #176]	; (800f460 <LoRaMacHandleRequestEvents+0xb8>)
 800f3b0:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800f3b4:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800f3b6:	4b2a      	ldr	r3, [pc, #168]	; (800f460 <LoRaMacHandleRequestEvents+0xb8>)
 800f3b8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d14a      	bne.n	800f456 <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800f3c0:	4b27      	ldr	r3, [pc, #156]	; (800f460 <LoRaMacHandleRequestEvents+0xb8>)
 800f3c2:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800f3c6:	f003 0301 	and.w	r3, r3, #1
 800f3ca:	b2db      	uxtb	r3, r3
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d006      	beq.n	800f3de <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800f3d0:	4a23      	ldr	r2, [pc, #140]	; (800f460 <LoRaMacHandleRequestEvents+0xb8>)
 800f3d2:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f3d6:	f36f 0300 	bfc	r3, #0, #1
 800f3da:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800f3de:	4b20      	ldr	r3, [pc, #128]	; (800f460 <LoRaMacHandleRequestEvents+0xb8>)
 800f3e0:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800f3e4:	f003 0304 	and.w	r3, r3, #4
 800f3e8:	b2db      	uxtb	r3, r3
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d006      	beq.n	800f3fc <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800f3ee:	4a1c      	ldr	r2, [pc, #112]	; (800f460 <LoRaMacHandleRequestEvents+0xb8>)
 800f3f0:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f3f4:	f36f 0382 	bfc	r3, #2, #1
 800f3f8:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800f3fc:	2001      	movs	r0, #1
 800f3fe:	f7ff ffc3 	bl	800f388 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800f402:	793b      	ldrb	r3, [r7, #4]
 800f404:	f003 0301 	and.w	r3, r3, #1
 800f408:	b2db      	uxtb	r3, r3
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d005      	beq.n	800f41a <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800f40e:	4b14      	ldr	r3, [pc, #80]	; (800f460 <LoRaMacHandleRequestEvents+0xb8>)
 800f410:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	4813      	ldr	r0, [pc, #76]	; (800f464 <LoRaMacHandleRequestEvents+0xbc>)
 800f418:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800f41a:	793b      	ldrb	r3, [r7, #4]
 800f41c:	f003 0304 	and.w	r3, r3, #4
 800f420:	b2db      	uxtb	r3, r3
 800f422:	2b00      	cmp	r3, #0
 800f424:	d00e      	beq.n	800f444 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800f426:	4810      	ldr	r0, [pc, #64]	; (800f468 <LoRaMacHandleRequestEvents+0xc0>)
 800f428:	f004 fd2e 	bl	8013e88 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800f42c:	f004 fd7e 	bl	8013f2c <LoRaMacConfirmQueueGetCnt>
 800f430:	4603      	mov	r3, r0
 800f432:	2b00      	cmp	r3, #0
 800f434:	d006      	beq.n	800f444 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800f436:	4a0a      	ldr	r2, [pc, #40]	; (800f460 <LoRaMacHandleRequestEvents+0xb8>)
 800f438:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f43c:	f043 0304 	orr.w	r3, r3, #4
 800f440:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800f444:	f004 f828 	bl	8013498 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800f448:	4a05      	ldr	r2, [pc, #20]	; (800f460 <LoRaMacHandleRequestEvents+0xb8>)
 800f44a:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f44e:	f36f 1304 	bfc	r3, #4, #1
 800f452:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
}
 800f456:	bf00      	nop
 800f458:	3708      	adds	r7, #8
 800f45a:	46bd      	mov	sp, r7
 800f45c:	bd80      	pop	{r7, pc}
 800f45e:	bf00      	nop
 800f460:	20000740 	.word	0x20000740
 800f464:	20000b80 	.word	0x20000b80
 800f468:	20000b94 	.word	0x20000b94

0800f46c <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800f46c:	b580      	push	{r7, lr}
 800f46e:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800f470:	4b16      	ldr	r3, [pc, #88]	; (800f4cc <LoRaMacHandleIndicationEvents+0x60>)
 800f472:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800f476:	f003 0308 	and.w	r3, r3, #8
 800f47a:	b2db      	uxtb	r3, r3
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d00d      	beq.n	800f49c <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800f480:	4a12      	ldr	r2, [pc, #72]	; (800f4cc <LoRaMacHandleIndicationEvents+0x60>)
 800f482:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f486:	f36f 03c3 	bfc	r3, #3, #1
 800f48a:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800f48e:	4b0f      	ldr	r3, [pc, #60]	; (800f4cc <LoRaMacHandleIndicationEvents+0x60>)
 800f490:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800f494:	68db      	ldr	r3, [r3, #12]
 800f496:	490e      	ldr	r1, [pc, #56]	; (800f4d0 <LoRaMacHandleIndicationEvents+0x64>)
 800f498:	480e      	ldr	r0, [pc, #56]	; (800f4d4 <LoRaMacHandleIndicationEvents+0x68>)
 800f49a:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800f49c:	4b0b      	ldr	r3, [pc, #44]	; (800f4cc <LoRaMacHandleIndicationEvents+0x60>)
 800f49e:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800f4a2:	f003 0302 	and.w	r3, r3, #2
 800f4a6:	b2db      	uxtb	r3, r3
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d00d      	beq.n	800f4c8 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800f4ac:	4a07      	ldr	r2, [pc, #28]	; (800f4cc <LoRaMacHandleIndicationEvents+0x60>)
 800f4ae:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f4b2:	f36f 0341 	bfc	r3, #1, #1
 800f4b6:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800f4ba:	4b04      	ldr	r3, [pc, #16]	; (800f4cc <LoRaMacHandleIndicationEvents+0x60>)
 800f4bc:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800f4c0:	685b      	ldr	r3, [r3, #4]
 800f4c2:	4903      	ldr	r1, [pc, #12]	; (800f4d0 <LoRaMacHandleIndicationEvents+0x64>)
 800f4c4:	4804      	ldr	r0, [pc, #16]	; (800f4d8 <LoRaMacHandleIndicationEvents+0x6c>)
 800f4c6:	4798      	blx	r3
    }
}
 800f4c8:	bf00      	nop
 800f4ca:	bd80      	pop	{r7, pc}
 800f4cc:	20000740 	.word	0x20000740
 800f4d0:	20000bcc 	.word	0x20000bcc
 800f4d4:	20000ba8 	.word	0x20000ba8
 800f4d8:	20000b60 	.word	0x20000b60

0800f4dc <LoRaMacHandleMcpsRequest>:
    }
}
#endif /* LORAMAC_VERSION */

static void LoRaMacHandleMcpsRequest( void )
{
 800f4dc:	b580      	push	{r7, lr}
 800f4de:	b082      	sub	sp, #8
 800f4e0:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800f4e2:	4b2a      	ldr	r3, [pc, #168]	; (800f58c <LoRaMacHandleMcpsRequest+0xb0>)
 800f4e4:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800f4e8:	f003 0301 	and.w	r3, r3, #1
 800f4ec:	b2db      	uxtb	r3, r3
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d048      	beq.n	800f584 <LoRaMacHandleMcpsRequest+0xa8>
    {
        bool stopRetransmission = false;
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800f4fa:	4b24      	ldr	r3, [pc, #144]	; (800f58c <LoRaMacHandleMcpsRequest+0xb0>)
 800f4fc:	f893 3440 	ldrb.w	r3, [r3, #1088]	; 0x440
 800f500:	2b00      	cmp	r3, #0
 800f502:	d004      	beq.n	800f50e <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800f504:	4b21      	ldr	r3, [pc, #132]	; (800f58c <LoRaMacHandleMcpsRequest+0xb0>)
 800f506:	f893 3440 	ldrb.w	r3, [r3, #1088]	; 0x440
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800f50a:	2b03      	cmp	r3, #3
 800f50c:	d104      	bne.n	800f518 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800f50e:	f002 f943 	bl	8011798 <CheckRetransUnconfirmedUplink>
 800f512:	4603      	mov	r3, r0
 800f514:	71fb      	strb	r3, [r7, #7]
 800f516:	e010      	b.n	800f53a <LoRaMacHandleMcpsRequest+0x5e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800f518:	4b1c      	ldr	r3, [pc, #112]	; (800f58c <LoRaMacHandleMcpsRequest+0xb0>)
 800f51a:	f893 3440 	ldrb.w	r3, [r3, #1088]	; 0x440
 800f51e:	2b01      	cmp	r3, #1
 800f520:	d10b      	bne.n	800f53a <LoRaMacHandleMcpsRequest+0x5e>
            else
            {
                waitForRetransmission = true;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.RetransmitTimeoutRetry == true )
 800f522:	4b1a      	ldr	r3, [pc, #104]	; (800f58c <LoRaMacHandleMcpsRequest+0xb0>)
 800f524:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d004      	beq.n	800f536 <LoRaMacHandleMcpsRequest+0x5a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800f52c:	f002 f960 	bl	80117f0 <CheckRetransConfirmedUplink>
 800f530:	4603      	mov	r3, r0
 800f532:	71fb      	strb	r3, [r7, #7]
 800f534:	e001      	b.n	800f53a <LoRaMacHandleMcpsRequest+0x5e>
            }
            else
            {
                waitForRetransmission = true;
 800f536:	2301      	movs	r3, #1
 800f538:	71bb      	strb	r3, [r7, #6]
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 800f53a:	79fb      	ldrb	r3, [r7, #7]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d00d      	beq.n	800f55c <LoRaMacHandleMcpsRequest+0x80>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800f540:	4813      	ldr	r0, [pc, #76]	; (800f590 <LoRaMacHandleMcpsRequest+0xb4>)
 800f542:	f00d fe9d 	bl	801d280 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800f546:	4b11      	ldr	r3, [pc, #68]	; (800f58c <LoRaMacHandleMcpsRequest+0xb0>)
 800f548:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f54c:	f023 0320 	bic.w	r3, r3, #32
 800f550:	4a0e      	ldr	r2, [pc, #56]	; (800f58c <LoRaMacHandleMcpsRequest+0xb0>)
 800f552:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 800f556:	f002 f985 	bl	8011864 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800f55a:	e013      	b.n	800f584 <LoRaMacHandleMcpsRequest+0xa8>
        else if( waitForRetransmission == false )
 800f55c:	79bb      	ldrb	r3, [r7, #6]
 800f55e:	f083 0301 	eor.w	r3, r3, #1
 800f562:	b2db      	uxtb	r3, r3
 800f564:	2b00      	cmp	r3, #0
 800f566:	d00d      	beq.n	800f584 <LoRaMacHandleMcpsRequest+0xa8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800f568:	4a08      	ldr	r2, [pc, #32]	; (800f58c <LoRaMacHandleMcpsRequest+0xb0>)
 800f56a:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f56e:	f36f 1304 	bfc	r3, #4, #1
 800f572:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
            MacCtx.RetransmitTimeoutRetry = false;
 800f576:	4b05      	ldr	r3, [pc, #20]	; (800f58c <LoRaMacHandleMcpsRequest+0xb0>)
 800f578:	2200      	movs	r2, #0
 800f57a:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
            OnTxDelayedTimerEvent( NULL );
 800f57e:	2000      	movs	r0, #0
 800f580:	f000 f9c8 	bl	800f914 <OnTxDelayedTimerEvent>
}
 800f584:	bf00      	nop
 800f586:	3708      	adds	r7, #8
 800f588:	46bd      	mov	sp, r7
 800f58a:	bd80      	pop	{r7, pc}
 800f58c:	20000740 	.word	0x20000740
 800f590:	20000aa8 	.word	0x20000aa8

0800f594 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800f594:	b580      	push	{r7, lr}
 800f596:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800f598:	4b18      	ldr	r3, [pc, #96]	; (800f5fc <LoRaMacHandleMlmeRequest+0x68>)
 800f59a:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800f59e:	f003 0304 	and.w	r3, r3, #4
 800f5a2:	b2db      	uxtb	r3, r3
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d026      	beq.n	800f5f6 <LoRaMacHandleMlmeRequest+0x62>
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_1 ) == true ) ||
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_2 ) == true ) )
        {
            MacCtx.ChannelsNbTransCounter = 0;
#else
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800f5a8:	2001      	movs	r0, #1
 800f5aa:	f004 fc53 	bl	8013e54 <LoRaMacConfirmQueueIsCmdActive>
 800f5ae:	4603      	mov	r3, r0
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d012      	beq.n	800f5da <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800f5b4:	2001      	movs	r0, #1
 800f5b6:	f004 fbef 	bl	8013d98 <LoRaMacConfirmQueueGetStatus>
 800f5ba:	4603      	mov	r3, r0
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d103      	bne.n	800f5c8 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800f5c0:	4b0e      	ldr	r3, [pc, #56]	; (800f5fc <LoRaMacHandleMlmeRequest+0x68>)
 800f5c2:	2200      	movs	r2, #0
 800f5c4:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            }
#endif /* LORAMAC_VERSION */
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f5c8:	4b0c      	ldr	r3, [pc, #48]	; (800f5fc <LoRaMacHandleMlmeRequest+0x68>)
 800f5ca:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f5ce:	f023 0302 	bic.w	r3, r3, #2
 800f5d2:	4a0a      	ldr	r2, [pc, #40]	; (800f5fc <LoRaMacHandleMlmeRequest+0x68>)
 800f5d4:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 800f5d8:	e00d      	b.n	800f5f6 <LoRaMacHandleMlmeRequest+0x62>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 800f5da:	2006      	movs	r0, #6
 800f5dc:	f004 fc3a 	bl	8013e54 <LoRaMacConfirmQueueIsCmdActive>
 800f5e0:	4603      	mov	r3, r0
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d007      	beq.n	800f5f6 <LoRaMacHandleMlmeRequest+0x62>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f5e6:	4b05      	ldr	r3, [pc, #20]	; (800f5fc <LoRaMacHandleMlmeRequest+0x68>)
 800f5e8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f5ec:	f023 0302 	bic.w	r3, r3, #2
 800f5f0:	4a02      	ldr	r2, [pc, #8]	; (800f5fc <LoRaMacHandleMlmeRequest+0x68>)
 800f5f2:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 800f5f6:	bf00      	nop
 800f5f8:	bd80      	pop	{r7, pc}
 800f5fa:	bf00      	nop
 800f5fc:	20000740 	.word	0x20000740

0800f600 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800f600:	b580      	push	{r7, lr}
 800f602:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800f604:	200b      	movs	r0, #11
 800f606:	f004 fc25 	bl	8013e54 <LoRaMacConfirmQueueIsCmdActive>
 800f60a:	4603      	mov	r3, r0
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d019      	beq.n	800f644 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800f610:	4b0e      	ldr	r3, [pc, #56]	; (800f64c <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f612:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800f616:	f003 0301 	and.w	r3, r3, #1
 800f61a:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d111      	bne.n	800f644 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800f620:	4b0a      	ldr	r3, [pc, #40]	; (800f64c <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f622:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800f626:	f003 0304 	and.w	r3, r3, #4
 800f62a:	b2db      	uxtb	r3, r3
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d009      	beq.n	800f644 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f630:	4b06      	ldr	r3, [pc, #24]	; (800f64c <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f632:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f636:	f023 0302 	bic.w	r3, r3, #2
 800f63a:	4a04      	ldr	r2, [pc, #16]	; (800f64c <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f63c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 800f640:	2301      	movs	r3, #1
 800f642:	e000      	b.n	800f646 <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 800f644:	2300      	movs	r3, #0
}
 800f646:	4618      	mov	r0, r3
 800f648:	bd80      	pop	{r7, pc}
 800f64a:	bf00      	nop
 800f64c:	20000740 	.word	0x20000740

0800f650 <CheckForMinimumAbpDatarate>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
 800f650:	b480      	push	{r7}
 800f652:	b083      	sub	sp, #12
 800f654:	af00      	add	r7, sp, #0
 800f656:	4603      	mov	r3, r0
 800f658:	71fb      	strb	r3, [r7, #7]
 800f65a:	460b      	mov	r3, r1
 800f65c:	71bb      	strb	r3, [r7, #6]
 800f65e:	4613      	mov	r3, r2
 800f660:	717b      	strb	r3, [r7, #5]
    if( ( adr == true ) &&
 800f662:	79fb      	ldrb	r3, [r7, #7]
 800f664:	2b00      	cmp	r3, #0
 800f666:	d00a      	beq.n	800f67e <CheckForMinimumAbpDatarate+0x2e>
 800f668:	79bb      	ldrb	r3, [r7, #6]
 800f66a:	2b01      	cmp	r3, #1
 800f66c:	d107      	bne.n	800f67e <CheckForMinimumAbpDatarate+0x2e>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
 800f66e:	797b      	ldrb	r3, [r7, #5]
 800f670:	f083 0301 	eor.w	r3, r3, #1
 800f674:	b2db      	uxtb	r3, r3
        ( activation == ACTIVATION_TYPE_ABP ) &&
 800f676:	2b00      	cmp	r3, #0
 800f678:	d001      	beq.n	800f67e <CheckForMinimumAbpDatarate+0x2e>
    {
        return true;
 800f67a:	2301      	movs	r3, #1
 800f67c:	e000      	b.n	800f680 <CheckForMinimumAbpDatarate+0x30>
    }
    return false;
 800f67e:	2300      	movs	r3, #0
}
 800f680:	4618      	mov	r0, r3
 800f682:	370c      	adds	r7, #12
 800f684:	46bd      	mov	sp, r7
 800f686:	bc80      	pop	{r7}
 800f688:	4770      	bx	lr
	...

0800f68c <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 800f68c:	b480      	push	{r7}
 800f68e:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800f690:	4b0d      	ldr	r3, [pc, #52]	; (800f6c8 <LoRaMacCheckForRxAbort+0x3c>)
 800f692:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d00f      	beq.n	800f6be <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800f69e:	4b0a      	ldr	r3, [pc, #40]	; (800f6c8 <LoRaMacCheckForRxAbort+0x3c>)
 800f6a0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f6a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f6a8:	4a07      	ldr	r2, [pc, #28]	; (800f6c8 <LoRaMacCheckForRxAbort+0x3c>)
 800f6aa:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f6ae:	4b06      	ldr	r3, [pc, #24]	; (800f6c8 <LoRaMacCheckForRxAbort+0x3c>)
 800f6b0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f6b4:	f023 0302 	bic.w	r3, r3, #2
 800f6b8:	4a03      	ldr	r2, [pc, #12]	; (800f6c8 <LoRaMacCheckForRxAbort+0x3c>)
 800f6ba:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 800f6be:	bf00      	nop
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	bc80      	pop	{r7}
 800f6c4:	4770      	bx	lr
 800f6c6:	bf00      	nop
 800f6c8:	20000740 	.word	0x20000740

0800f6cc <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	b084      	sub	sp, #16
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800f6d4:	2300      	movs	r3, #0
 800f6d6:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800f6d8:	2300      	movs	r3, #0
 800f6da:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 800f6dc:	4b51      	ldr	r3, [pc, #324]	; (800f824 <LoRaMacHandleNvm+0x158>)
 800f6de:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	f040 8099 	bne.w	800f81a <LoRaMacHandleNvm+0x14e>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	2124      	movs	r1, #36	; 0x24
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	f009 fc81 	bl	8018ff4 <Crc32>
 800f6f2:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6f8:	68ba      	ldr	r2, [r7, #8]
 800f6fa:	429a      	cmp	r2, r3
 800f6fc:	d006      	beq.n	800f70c <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	68ba      	ldr	r2, [r7, #8]
 800f702:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800f704:	89fb      	ldrh	r3, [r7, #14]
 800f706:	f043 0301 	orr.w	r3, r3, #1
 800f70a:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	3328      	adds	r3, #40	; 0x28
 800f710:	211c      	movs	r1, #28
 800f712:	4618      	mov	r0, r3
 800f714:	f009 fc6e 	bl	8018ff4 <Crc32>
 800f718:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f71e:	68ba      	ldr	r2, [r7, #8]
 800f720:	429a      	cmp	r2, r3
 800f722:	d006      	beq.n	800f732 <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	68ba      	ldr	r2, [r7, #8]
 800f728:	645a      	str	r2, [r3, #68]	; 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800f72a:	89fb      	ldrh	r3, [r7, #14]
 800f72c:	f043 0302 	orr.w	r3, r3, #2
 800f730:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	3348      	adds	r3, #72	; 0x48
 800f736:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f73a:	4618      	mov	r0, r3
 800f73c:	f009 fc5a 	bl	8018ff4 <Crc32>
 800f740:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800f748:	68ba      	ldr	r2, [r7, #8]
 800f74a:	429a      	cmp	r2, r3
 800f74c:	d007      	beq.n	800f75e <LoRaMacHandleNvm+0x92>
    {
        nvmData->MacGroup2.Crc32 = crc;
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	68ba      	ldr	r2, [r7, #8]
 800f752:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800f756:	89fb      	ldrh	r3, [r7, #14]
 800f758:	f043 0304 	orr.w	r3, r3, #4
 800f75c:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800f764:	21d4      	movs	r1, #212	; 0xd4
 800f766:	4618      	mov	r0, r3
 800f768:	f009 fc44 	bl	8018ff4 <Crc32>
 800f76c:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800f774:	68ba      	ldr	r2, [r7, #8]
 800f776:	429a      	cmp	r2, r3
 800f778:	d007      	beq.n	800f78a <LoRaMacHandleNvm+0xbe>
    {
        nvmData->SecureElement.Crc32 = crc;
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	68ba      	ldr	r2, [r7, #8]
 800f77e:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800f782:	89fb      	ldrh	r3, [r7, #14]
 800f784:	f043 0308 	orr.w	r3, r3, #8
 800f788:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	f503 7309 	add.w	r3, r3, #548	; 0x224
 800f790:	2110      	movs	r1, #16
 800f792:	4618      	mov	r0, r3
 800f794:	f009 fc2e 	bl	8018ff4 <Crc32>
 800f798:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 800f7a0:	68ba      	ldr	r2, [r7, #8]
 800f7a2:	429a      	cmp	r2, r3
 800f7a4:	d007      	beq.n	800f7b6 <LoRaMacHandleNvm+0xea>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	68ba      	ldr	r2, [r7, #8]
 800f7aa:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800f7ae:	89fb      	ldrh	r3, [r7, #14]
 800f7b0:	f043 0310 	orr.w	r3, r3, #16
 800f7b4:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	f503 730e 	add.w	r3, r3, #568	; 0x238
 800f7bc:	f44f 715e 	mov.w	r1, #888	; 0x378
 800f7c0:	4618      	mov	r0, r3
 800f7c2:	f009 fc17 	bl	8018ff4 <Crc32>
 800f7c6:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	; 0x5b0
 800f7ce:	68ba      	ldr	r2, [r7, #8]
 800f7d0:	429a      	cmp	r2, r3
 800f7d2:	d007      	beq.n	800f7e4 <LoRaMacHandleNvm+0x118>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	68ba      	ldr	r2, [r7, #8]
 800f7d8:	f8c3 25b0 	str.w	r2, [r3, #1456]	; 0x5b0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800f7dc:	89fb      	ldrh	r3, [r7, #14]
 800f7de:	f043 0320 	orr.w	r3, r3, #32
 800f7e2:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	f203 53b4 	addw	r3, r3, #1460	; 0x5b4
 800f7ea:	2114      	movs	r1, #20
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	f009 fc01 	bl	8018ff4 <Crc32>
 800f7f2:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	f8d3 35c8 	ldr.w	r3, [r3, #1480]	; 0x5c8
 800f7fa:	68ba      	ldr	r2, [r7, #8]
 800f7fc:	429a      	cmp	r2, r3
 800f7fe:	d007      	beq.n	800f810 <LoRaMacHandleNvm+0x144>
    {
        nvmData->ClassB.Crc32 = crc;
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	68ba      	ldr	r2, [r7, #8]
 800f804:	f8c3 25c8 	str.w	r2, [r3, #1480]	; 0x5c8
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800f808:	89fb      	ldrh	r3, [r7, #14]
 800f80a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f80e:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 800f810:	89fb      	ldrh	r3, [r7, #14]
 800f812:	4618      	mov	r0, r3
 800f814:	f002 f878 	bl	8011908 <CallNvmDataChangeCallback>
 800f818:	e000      	b.n	800f81c <LoRaMacHandleNvm+0x150>
        return;
 800f81a:	bf00      	nop
}
 800f81c:	3710      	adds	r7, #16
 800f81e:	46bd      	mov	sp, r7
 800f820:	bd80      	pop	{r7, pc}
 800f822:	bf00      	nop
 800f824:	20000740 	.word	0x20000740

0800f828 <LoRaMacHandleResponseTimeout>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool LoRaMacHandleResponseTimeout( TimerTime_t timeoutInMs, TimerTime_t startTimeInMs )
{
 800f828:	b580      	push	{r7, lr}
 800f82a:	b084      	sub	sp, #16
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	6078      	str	r0, [r7, #4]
 800f830:	6039      	str	r1, [r7, #0]
    if( startTimeInMs != 0 )
 800f832:	683b      	ldr	r3, [r7, #0]
 800f834:	2b00      	cmp	r3, #0
 800f836:	d00d      	beq.n	800f854 <LoRaMacHandleResponseTimeout+0x2c>
    {
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 800f838:	6838      	ldr	r0, [r7, #0]
 800f83a:	f00d fe4d 	bl	801d4d8 <UTIL_TIMER_GetElapsedTime>
 800f83e:	60f8      	str	r0, [r7, #12]
        if( elapsedTime > timeoutInMs )
 800f840:	68fa      	ldr	r2, [r7, #12]
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	429a      	cmp	r2, r3
 800f846:	d905      	bls.n	800f854 <LoRaMacHandleResponseTimeout+0x2c>
        {
            Nvm.MacGroup1.SrvAckRequested = false;
 800f848:	4b05      	ldr	r3, [pc, #20]	; (800f860 <LoRaMacHandleResponseTimeout+0x38>)
 800f84a:	2200      	movs	r2, #0
 800f84c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
            return true;
 800f850:	2301      	movs	r3, #1
 800f852:	e000      	b.n	800f856 <LoRaMacHandleResponseTimeout+0x2e>
        }
    }
    return false;
 800f854:	2300      	movs	r3, #0
}
 800f856:	4618      	mov	r0, r3
 800f858:	3710      	adds	r7, #16
 800f85a:	46bd      	mov	sp, r7
 800f85c:	bd80      	pop	{r7, pc}
 800f85e:	bf00      	nop
 800f860:	20000c5c 	.word	0x20000c5c

0800f864 <LoRaMacProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 800f864:	b580      	push	{r7, lr}
 800f866:	b082      	sub	sp, #8
 800f868:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800f86a:	2300      	movs	r3, #0
 800f86c:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 800f86e:	f7ff fd0b 	bl	800f288 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800f872:	f003 fe80 	bl	8013576 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800f876:	4b25      	ldr	r3, [pc, #148]	; (800f90c <LoRaMacProcess+0xa8>)
 800f878:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800f87c:	f003 0310 	and.w	r3, r3, #16
 800f880:	b2db      	uxtb	r3, r3
 800f882:	2b00      	cmp	r3, #0
 800f884:	d023      	beq.n	800f8ce <LoRaMacProcess+0x6a>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800f886:	2000      	movs	r0, #0
 800f888:	f7ff fd7e 	bl	800f388 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800f88c:	f7ff fefe 	bl	800f68c <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800f890:	f002 f858 	bl	8011944 <IsRequestPending>
 800f894:	4603      	mov	r3, r0
 800f896:	2b00      	cmp	r3, #0
 800f898:	d006      	beq.n	800f8a8 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800f89a:	f7ff feb1 	bl	800f600 <LoRaMacCheckForBeaconAcquisition>
 800f89e:	4603      	mov	r3, r0
 800f8a0:	461a      	mov	r2, r3
 800f8a2:	79fb      	ldrb	r3, [r7, #7]
 800f8a4:	4313      	orrs	r3, r2
 800f8a6:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 800f8a8:	79fb      	ldrb	r3, [r7, #7]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d103      	bne.n	800f8b6 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 800f8ae:	f7ff fe71 	bl	800f594 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800f8b2:	f7ff fe13 	bl	800f4dc <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800f8b6:	f7ff fd77 	bl	800f3a8 <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800f8ba:	2001      	movs	r0, #1
 800f8bc:	f7ff fd64 	bl	800f388 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800f8c0:	4a12      	ldr	r2, [pc, #72]	; (800f90c <LoRaMacProcess+0xa8>)
 800f8c2:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f8c6:	f043 0320 	orr.w	r3, r3, #32
 800f8ca:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
    LoRaMacHandleIndicationEvents( );
 800f8ce:	f7ff fdcd 	bl	800f46c <LoRaMacHandleIndicationEvents>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    LoRaMacHandleRejoinEvents( );
#endif /* LORAMAC_VERSION */

    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800f8d2:	4b0e      	ldr	r3, [pc, #56]	; (800f90c <LoRaMacProcess+0xa8>)
 800f8d4:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 800f8d8:	2b02      	cmp	r3, #2
 800f8da:	d101      	bne.n	800f8e0 <LoRaMacProcess+0x7c>
    {
        OpenContinuousRxCWindow( );
 800f8dc:	f001 fc1a 	bl	8011114 <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800f8e0:	4b0a      	ldr	r3, [pc, #40]	; (800f90c <LoRaMacProcess+0xa8>)
 800f8e2:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800f8e6:	f003 0320 	and.w	r3, r3, #32
 800f8ea:	b2db      	uxtb	r3, r3
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d009      	beq.n	800f904 <LoRaMacProcess+0xa0>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800f8f0:	4a06      	ldr	r2, [pc, #24]	; (800f90c <LoRaMacProcess+0xa8>)
 800f8f2:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f8f6:	f36f 1345 	bfc	r3, #5, #1
 800f8fa:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        LoRaMacHandleNvm( &Nvm );
 800f8fe:	4804      	ldr	r0, [pc, #16]	; (800f910 <LoRaMacProcess+0xac>)
 800f900:	f7ff fee4 	bl	800f6cc <LoRaMacHandleNvm>
    }
}
 800f904:	bf00      	nop
 800f906:	3708      	adds	r7, #8
 800f908:	46bd      	mov	sp, r7
 800f90a:	bd80      	pop	{r7, pc}
 800f90c:	20000740 	.word	0x20000740
 800f910:	20000c5c 	.word	0x20000c5c

0800f914 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800f914:	b580      	push	{r7, lr}
 800f916:	b082      	sub	sp, #8
 800f918:	af00      	add	r7, sp, #0
 800f91a:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800f91c:	481e      	ldr	r0, [pc, #120]	; (800f998 <OnTxDelayedTimerEvent+0x84>)
 800f91e:	f00d fcaf 	bl	801d280 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800f922:	4b1e      	ldr	r3, [pc, #120]	; (800f99c <OnTxDelayedTimerEvent+0x88>)
 800f924:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f928:	f023 0320 	bic.w	r3, r3, #32
 800f92c:	4a1b      	ldr	r2, [pc, #108]	; (800f99c <OnTxDelayedTimerEvent+0x88>)
 800f92e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800f932:	4b1b      	ldr	r3, [pc, #108]	; (800f9a0 <OnTxDelayedTimerEvent+0x8c>)
 800f934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f938:	4a18      	ldr	r2, [pc, #96]	; (800f99c <OnTxDelayedTimerEvent+0x88>)
 800f93a:	f8d2 2498 	ldr.w	r2, [r2, #1176]	; 0x498
 800f93e:	4611      	mov	r1, r2
 800f940:	4618      	mov	r0, r3
 800f942:	f7ff ff71 	bl	800f828 <LoRaMacHandleResponseTimeout>
 800f946:	4603      	mov	r3, r0
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d11e      	bne.n	800f98a <OnTxDelayedTimerEvent+0x76>
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800f94c:	2001      	movs	r0, #1
 800f94e:	f001 f92b 	bl	8010ba8 <ScheduleTx>
 800f952:	4603      	mov	r3, r0
 800f954:	2b00      	cmp	r3, #0
 800f956:	d01a      	beq.n	800f98e <OnTxDelayedTimerEvent+0x7a>
 800f958:	2b0b      	cmp	r3, #11
 800f95a:	d018      	beq.n	800f98e <OnTxDelayedTimerEvent+0x7a>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f95c:	4b10      	ldr	r3, [pc, #64]	; (800f9a0 <OnTxDelayedTimerEvent+0x8c>)
 800f95e:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f962:	b2da      	uxtb	r2, r3
 800f964:	4b0d      	ldr	r3, [pc, #52]	; (800f99c <OnTxDelayedTimerEvent+0x88>)
 800f966:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800f96a:	4b0c      	ldr	r3, [pc, #48]	; (800f99c <OnTxDelayedTimerEvent+0x88>)
 800f96c:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800f970:	4b0a      	ldr	r3, [pc, #40]	; (800f99c <OnTxDelayedTimerEvent+0x88>)
 800f972:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800f976:	4b09      	ldr	r3, [pc, #36]	; (800f99c <OnTxDelayedTimerEvent+0x88>)
 800f978:	2209      	movs	r2, #9
 800f97a:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800f97e:	2009      	movs	r0, #9
 800f980:	f004 fa34 	bl	8013dec <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800f984:	f001 ff6e 	bl	8011864 <StopRetransmission>
            break;
 800f988:	e002      	b.n	800f990 <OnTxDelayedTimerEvent+0x7c>
        return;
 800f98a:	bf00      	nop
 800f98c:	e000      	b.n	800f990 <OnTxDelayedTimerEvent+0x7c>
            break;
 800f98e:	bf00      	nop
        }
    }
}
 800f990:	3708      	adds	r7, #8
 800f992:	46bd      	mov	sp, r7
 800f994:	bd80      	pop	{r7, pc}
 800f996:	bf00      	nop
 800f998:	20000aa8 	.word	0x20000aa8
 800f99c:	20000740 	.word	0x20000740
 800f9a0:	20000c5c 	.word	0x20000c5c

0800f9a4 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800f9a4:	b580      	push	{r7, lr}
 800f9a6:	b082      	sub	sp, #8
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800f9ac:	4b17      	ldr	r3, [pc, #92]	; (800fa0c <OnRxWindow1TimerEvent+0x68>)
 800f9ae:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 800f9b2:	4b16      	ldr	r3, [pc, #88]	; (800fa0c <OnRxWindow1TimerEvent+0x68>)
 800f9b4:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800f9b8:	4b15      	ldr	r3, [pc, #84]	; (800fa10 <OnRxWindow1TimerEvent+0x6c>)
 800f9ba:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800f9be:	b25a      	sxtb	r2, r3
 800f9c0:	4b12      	ldr	r3, [pc, #72]	; (800fa0c <OnRxWindow1TimerEvent+0x68>)
 800f9c2:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f9c6:	4b12      	ldr	r3, [pc, #72]	; (800fa10 <OnRxWindow1TimerEvent+0x6c>)
 800f9c8:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800f9cc:	4b0f      	ldr	r3, [pc, #60]	; (800fa0c <OnRxWindow1TimerEvent+0x68>)
 800f9ce:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800f9d2:	4b0f      	ldr	r3, [pc, #60]	; (800fa10 <OnRxWindow1TimerEvent+0x6c>)
 800f9d4:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 800f9d8:	4b0c      	ldr	r3, [pc, #48]	; (800fa0c <OnRxWindow1TimerEvent+0x68>)
 800f9da:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800f9de:	4b0b      	ldr	r3, [pc, #44]	; (800fa0c <OnRxWindow1TimerEvent+0x68>)
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800f9e6:	4b09      	ldr	r3, [pc, #36]	; (800fa0c <OnRxWindow1TimerEvent+0x68>)
 800f9e8:	2200      	movs	r2, #0
 800f9ea:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800f9ee:	4b08      	ldr	r3, [pc, #32]	; (800fa10 <OnRxWindow1TimerEvent+0x6c>)
 800f9f0:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 800f9f4:	4b05      	ldr	r3, [pc, #20]	; (800fa0c <OnRxWindow1TimerEvent+0x68>)
 800f9f6:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800f9fa:	4906      	ldr	r1, [pc, #24]	; (800fa14 <OnRxWindow1TimerEvent+0x70>)
 800f9fc:	4806      	ldr	r0, [pc, #24]	; (800fa18 <OnRxWindow1TimerEvent+0x74>)
 800f9fe:	f001 fb55 	bl	80110ac <RxWindowSetup>
}
 800fa02:	bf00      	nop
 800fa04:	3708      	adds	r7, #8
 800fa06:	46bd      	mov	sp, r7
 800fa08:	bd80      	pop	{r7, pc}
 800fa0a:	bf00      	nop
 800fa0c:	20000740 	.word	0x20000740
 800fa10:	20000c5c 	.word	0x20000c5c
 800fa14:	20000af8 	.word	0x20000af8
 800fa18:	20000ac0 	.word	0x20000ac0

0800fa1c <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800fa1c:	b580      	push	{r7, lr}
 800fa1e:	b082      	sub	sp, #8
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800fa24:	4b19      	ldr	r3, [pc, #100]	; (800fa8c <OnRxWindow2TimerEvent+0x70>)
 800fa26:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d029      	beq.n	800fa82 <OnRxWindow2TimerEvent+0x66>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800fa2e:	4b17      	ldr	r3, [pc, #92]	; (800fa8c <OnRxWindow2TimerEvent+0x70>)
 800fa30:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 800fa34:	4b15      	ldr	r3, [pc, #84]	; (800fa8c <OnRxWindow2TimerEvent+0x70>)
 800fa36:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800fa3a:	4b15      	ldr	r3, [pc, #84]	; (800fa90 <OnRxWindow2TimerEvent+0x74>)
 800fa3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa3e:	4a13      	ldr	r2, [pc, #76]	; (800fa8c <OnRxWindow2TimerEvent+0x70>)
 800fa40:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800fa44:	4b12      	ldr	r3, [pc, #72]	; (800fa90 <OnRxWindow2TimerEvent+0x74>)
 800fa46:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800fa4a:	4b10      	ldr	r3, [pc, #64]	; (800fa8c <OnRxWindow2TimerEvent+0x70>)
 800fa4c:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800fa50:	4b0f      	ldr	r3, [pc, #60]	; (800fa90 <OnRxWindow2TimerEvent+0x74>)
 800fa52:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 800fa56:	4b0d      	ldr	r3, [pc, #52]	; (800fa8c <OnRxWindow2TimerEvent+0x70>)
 800fa58:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800fa5c:	4b0b      	ldr	r3, [pc, #44]	; (800fa8c <OnRxWindow2TimerEvent+0x70>)
 800fa5e:	2200      	movs	r2, #0
 800fa60:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800fa64:	4b09      	ldr	r3, [pc, #36]	; (800fa8c <OnRxWindow2TimerEvent+0x70>)
 800fa66:	2201      	movs	r2, #1
 800fa68:	f883 23e3 	strb.w	r2, [r3, #995]	; 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800fa6c:	4b08      	ldr	r3, [pc, #32]	; (800fa90 <OnRxWindow2TimerEvent+0x74>)
 800fa6e:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 800fa72:	4b06      	ldr	r3, [pc, #24]	; (800fa8c <OnRxWindow2TimerEvent+0x70>)
 800fa74:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800fa78:	4906      	ldr	r1, [pc, #24]	; (800fa94 <OnRxWindow2TimerEvent+0x78>)
 800fa7a:	4807      	ldr	r0, [pc, #28]	; (800fa98 <OnRxWindow2TimerEvent+0x7c>)
 800fa7c:	f001 fb16 	bl	80110ac <RxWindowSetup>
 800fa80:	e000      	b.n	800fa84 <OnRxWindow2TimerEvent+0x68>
        return;
 800fa82:	bf00      	nop
}
 800fa84:	3708      	adds	r7, #8
 800fa86:	46bd      	mov	sp, r7
 800fa88:	bd80      	pop	{r7, pc}
 800fa8a:	bf00      	nop
 800fa8c:	20000740 	.word	0x20000740
 800fa90:	20000c5c 	.word	0x20000c5c
 800fa94:	20000b10 	.word	0x20000b10
 800fa98:	20000ad8 	.word	0x20000ad8

0800fa9c <OnRetransmitTimeoutTimerEvent>:

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void OnRetransmitTimeoutTimerEvent( void* context )
{
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	b082      	sub	sp, #8
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800faa4:	4808      	ldr	r0, [pc, #32]	; (800fac8 <OnRetransmitTimeoutTimerEvent+0x2c>)
 800faa6:	f00d fbeb 	bl	801d280 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800faaa:	4b08      	ldr	r3, [pc, #32]	; (800facc <OnRetransmitTimeoutTimerEvent+0x30>)
 800faac:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d003      	beq.n	800fabc <OnRetransmitTimeoutTimerEvent+0x20>
    {
        MacCtx.RetransmitTimeoutRetry = true;
 800fab4:	4b05      	ldr	r3, [pc, #20]	; (800facc <OnRetransmitTimeoutTimerEvent+0x30>)
 800fab6:	2201      	movs	r2, #1
 800fab8:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
    }
    OnMacProcessNotify( );
 800fabc:	f001 ff0e 	bl	80118dc <OnMacProcessNotify>
}
 800fac0:	bf00      	nop
 800fac2:	3708      	adds	r7, #8
 800fac4:	46bd      	mov	sp, r7
 800fac6:	bd80      	pop	{r7, pc}
 800fac8:	20000b40 	.word	0x20000b40
 800facc:	20000740 	.word	0x20000740

0800fad0 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800fad0:	b580      	push	{r7, lr}
 800fad2:	b084      	sub	sp, #16
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	60ba      	str	r2, [r7, #8]
 800fad8:	607b      	str	r3, [r7, #4]
 800fada:	4603      	mov	r3, r0
 800fadc:	73fb      	strb	r3, [r7, #15]
 800fade:	460b      	mov	r3, r1
 800fae0:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800fae2:	68bb      	ldr	r3, [r7, #8]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d005      	beq.n	800faf4 <GetFCntDown+0x24>
 800fae8:	69bb      	ldr	r3, [r7, #24]
 800faea:	2b00      	cmp	r3, #0
 800faec:	d002      	beq.n	800faf4 <GetFCntDown+0x24>
 800faee:	69fb      	ldr	r3, [r7, #28]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d101      	bne.n	800faf8 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800faf4:	2309      	movs	r3, #9
 800faf6:	e028      	b.n	800fb4a <GetFCntDown+0x7a>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800faf8:	7bfb      	ldrb	r3, [r7, #15]
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d016      	beq.n	800fb2c <GetFCntDown+0x5c>
 800fafe:	2b01      	cmp	r3, #1
 800fb00:	d118      	bne.n	800fb34 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800fb02:	79bb      	ldrb	r3, [r7, #6]
 800fb04:	2b01      	cmp	r3, #1
 800fb06:	d10d      	bne.n	800fb24 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800fb08:	7bbb      	ldrb	r3, [r7, #14]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d002      	beq.n	800fb14 <GetFCntDown+0x44>
 800fb0e:	7bbb      	ldrb	r3, [r7, #14]
 800fb10:	2b03      	cmp	r3, #3
 800fb12:	d103      	bne.n	800fb1c <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 800fb14:	69bb      	ldr	r3, [r7, #24]
 800fb16:	2202      	movs	r2, #2
 800fb18:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800fb1a:	e00d      	b.n	800fb38 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 800fb1c:	69bb      	ldr	r3, [r7, #24]
 800fb1e:	2201      	movs	r2, #1
 800fb20:	701a      	strb	r2, [r3, #0]
            break;
 800fb22:	e009      	b.n	800fb38 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 800fb24:	69bb      	ldr	r3, [r7, #24]
 800fb26:	2203      	movs	r2, #3
 800fb28:	701a      	strb	r2, [r3, #0]
            break;
 800fb2a:	e005      	b.n	800fb38 <GetFCntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800fb2c:	69bb      	ldr	r3, [r7, #24]
 800fb2e:	2204      	movs	r2, #4
 800fb30:	701a      	strb	r2, [r3, #0]
            break;
 800fb32:	e001      	b.n	800fb38 <GetFCntDown+0x68>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800fb34:	2305      	movs	r3, #5
 800fb36:	e008      	b.n	800fb4a <GetFCntDown+0x7a>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 800fb38:	69bb      	ldr	r3, [r7, #24]
 800fb3a:	7818      	ldrb	r0, [r3, #0]
 800fb3c:	68bb      	ldr	r3, [r7, #8]
 800fb3e:	89db      	ldrh	r3, [r3, #14]
 800fb40:	69fa      	ldr	r2, [r7, #28]
 800fb42:	4619      	mov	r1, r3
 800fb44:	f004 fd90 	bl	8014668 <LoRaMacCryptoGetFCntDown>
 800fb48:	4603      	mov	r3, r0
}
 800fb4a:	4618      	mov	r0, r3
 800fb4c:	3710      	adds	r7, #16
 800fb4e:	46bd      	mov	sp, r7
 800fb50:	bd80      	pop	{r7, pc}
	...

0800fb54 <SwitchClass>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800fb54:	b5b0      	push	{r4, r5, r7, lr}
 800fb56:	b084      	sub	sp, #16
 800fb58:	af00      	add	r7, sp, #0
 800fb5a:	4603      	mov	r3, r0
 800fb5c:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fb5e:	2303      	movs	r3, #3
 800fb60:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 800fb62:	4b6e      	ldr	r3, [pc, #440]	; (800fd1c <SwitchClass+0x1c8>)
 800fb64:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800fb68:	2b02      	cmp	r3, #2
 800fb6a:	f000 80bb 	beq.w	800fce4 <SwitchClass+0x190>
 800fb6e:	2b02      	cmp	r3, #2
 800fb70:	f300 80ce 	bgt.w	800fd10 <SwitchClass+0x1bc>
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d003      	beq.n	800fb80 <SwitchClass+0x2c>
 800fb78:	2b01      	cmp	r3, #1
 800fb7a:	f000 80a5 	beq.w	800fcc8 <SwitchClass+0x174>
 800fb7e:	e0c7      	b.n	800fd10 <SwitchClass+0x1bc>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800fb80:	79fb      	ldrb	r3, [r7, #7]
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d109      	bne.n	800fb9a <SwitchClass+0x46>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800fb86:	4b65      	ldr	r3, [pc, #404]	; (800fd1c <SwitchClass+0x1c8>)
 800fb88:	4a64      	ldr	r2, [pc, #400]	; (800fd1c <SwitchClass+0x1c8>)
 800fb8a:	3374      	adds	r3, #116	; 0x74
 800fb8c:	326c      	adds	r2, #108	; 0x6c
 800fb8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fb92:	e883 0003 	stmia.w	r3, {r0, r1}

                status = LORAMAC_STATUS_OK;
 800fb96:	2300      	movs	r3, #0
 800fb98:	73fb      	strb	r3, [r7, #15]
            }
            if( deviceClass == CLASS_B )
 800fb9a:	79fb      	ldrb	r3, [r7, #7]
 800fb9c:	2b01      	cmp	r3, #1
 800fb9e:	d10c      	bne.n	800fbba <SwitchClass+0x66>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800fba0:	79fb      	ldrb	r3, [r7, #7]
 800fba2:	4618      	mov	r0, r3
 800fba4:	f003 fc7e 	bl	80134a4 <LoRaMacClassBSwitchClass>
 800fba8:	4603      	mov	r3, r0
 800fbaa:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 800fbac:	7bfb      	ldrb	r3, [r7, #15]
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d103      	bne.n	800fbba <SwitchClass+0x66>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800fbb2:	4a5a      	ldr	r2, [pc, #360]	; (800fd1c <SwitchClass+0x1c8>)
 800fbb4:	79fb      	ldrb	r3, [r7, #7]
 800fbb6:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
                }
            }

            if( deviceClass == CLASS_C )
 800fbba:	79fb      	ldrb	r3, [r7, #7]
 800fbbc:	2b02      	cmp	r3, #2
 800fbbe:	f040 80a2 	bne.w	800fd06 <SwitchClass+0x1b2>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800fbc2:	4a56      	ldr	r2, [pc, #344]	; (800fd1c <SwitchClass+0x1c8>)
 800fbc4:	79fb      	ldrb	r3, [r7, #7]
 800fbc6:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800fbca:	4a55      	ldr	r2, [pc, #340]	; (800fd20 <SwitchClass+0x1cc>)
 800fbcc:	4b54      	ldr	r3, [pc, #336]	; (800fd20 <SwitchClass+0x1cc>)
 800fbce:	f502 747a 	add.w	r4, r2, #1000	; 0x3e8
 800fbd2:	f503 7574 	add.w	r5, r3, #976	; 0x3d0
 800fbd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fbd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fbda:	e895 0003 	ldmia.w	r5, {r0, r1}
 800fbde:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800fbe2:	4b4f      	ldr	r3, [pc, #316]	; (800fd20 <SwitchClass+0x1cc>)
 800fbe4:	2202      	movs	r2, #2
 800fbe6:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800fbea:	2300      	movs	r3, #0
 800fbec:	73bb      	strb	r3, [r7, #14]
 800fbee:	e05b      	b.n	800fca8 <SwitchClass+0x154>
                {
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800fbf0:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800fbf4:	4949      	ldr	r1, [pc, #292]	; (800fd1c <SwitchClass+0x1c8>)
 800fbf6:	4613      	mov	r3, r2
 800fbf8:	005b      	lsls	r3, r3, #1
 800fbfa:	4413      	add	r3, r2
 800fbfc:	011b      	lsls	r3, r3, #4
 800fbfe:	440b      	add	r3, r1
 800fc00:	33e9      	adds	r3, #233	; 0xe9
 800fc02:	781b      	ldrb	r3, [r3, #0]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d049      	beq.n	800fc9c <SwitchClass+0x148>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 800fc08:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800fc0c:	4943      	ldr	r1, [pc, #268]	; (800fd1c <SwitchClass+0x1c8>)
 800fc0e:	4613      	mov	r3, r2
 800fc10:	005b      	lsls	r3, r3, #1
 800fc12:	4413      	add	r3, r2
 800fc14:	011b      	lsls	r3, r3, #4
 800fc16:	440b      	add	r3, r1
 800fc18:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800fc1c:	781b      	ldrb	r3, [r3, #0]
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800fc1e:	2b02      	cmp	r3, #2
 800fc20:	d13c      	bne.n	800fc9c <SwitchClass+0x148>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 800fc22:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800fc26:	493d      	ldr	r1, [pc, #244]	; (800fd1c <SwitchClass+0x1c8>)
 800fc28:	4613      	mov	r3, r2
 800fc2a:	005b      	lsls	r3, r3, #1
 800fc2c:	4413      	add	r3, r2
 800fc2e:	011b      	lsls	r3, r3, #4
 800fc30:	440b      	add	r3, r1
 800fc32:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	4a38      	ldr	r2, [pc, #224]	; (800fd1c <SwitchClass+0x1c8>)
 800fc3a:	6753      	str	r3, [r2, #116]	; 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 800fc3c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800fc40:	4936      	ldr	r1, [pc, #216]	; (800fd1c <SwitchClass+0x1c8>)
 800fc42:	4613      	mov	r3, r2
 800fc44:	005b      	lsls	r3, r3, #1
 800fc46:	4413      	add	r3, r2
 800fc48:	011b      	lsls	r3, r3, #4
 800fc4a:	440b      	add	r3, r1
 800fc4c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800fc50:	f993 3000 	ldrsb.w	r3, [r3]
 800fc54:	b2da      	uxtb	r2, r3
 800fc56:	4b31      	ldr	r3, [pc, #196]	; (800fd1c <SwitchClass+0x1c8>)
 800fc58:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800fc5c:	4b30      	ldr	r3, [pc, #192]	; (800fd20 <SwitchClass+0x1cc>)
 800fc5e:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 800fc62:	4b2f      	ldr	r3, [pc, #188]	; (800fd20 <SwitchClass+0x1cc>)
 800fc64:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800fc68:	4b2c      	ldr	r3, [pc, #176]	; (800fd1c <SwitchClass+0x1c8>)
 800fc6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fc6c:	4a2c      	ldr	r2, [pc, #176]	; (800fd20 <SwitchClass+0x1cc>)
 800fc6e:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800fc72:	4b2a      	ldr	r3, [pc, #168]	; (800fd1c <SwitchClass+0x1c8>)
 800fc74:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800fc78:	4b29      	ldr	r3, [pc, #164]	; (800fd20 <SwitchClass+0x1cc>)
 800fc7a:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800fc7e:	4b27      	ldr	r3, [pc, #156]	; (800fd1c <SwitchClass+0x1c8>)
 800fc80:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 800fc84:	4b26      	ldr	r3, [pc, #152]	; (800fd20 <SwitchClass+0x1cc>)
 800fc86:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800fc8a:	4b25      	ldr	r3, [pc, #148]	; (800fd20 <SwitchClass+0x1cc>)
 800fc8c:	2203      	movs	r2, #3
 800fc8e:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800fc92:	4b23      	ldr	r3, [pc, #140]	; (800fd20 <SwitchClass+0x1cc>)
 800fc94:	2201      	movs	r2, #1
 800fc96:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
                        break;
 800fc9a:	e009      	b.n	800fcb0 <SwitchClass+0x15c>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800fc9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fca0:	b2db      	uxtb	r3, r3
 800fca2:	3301      	adds	r3, #1
 800fca4:	b2db      	uxtb	r3, r3
 800fca6:	73bb      	strb	r3, [r7, #14]
 800fca8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	dd9f      	ble.n	800fbf0 <SwitchClass+0x9c>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800fcb0:	4b1b      	ldr	r3, [pc, #108]	; (800fd20 <SwitchClass+0x1cc>)
 800fcb2:	2200      	movs	r2, #0
 800fcb4:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800fcb8:	4b1a      	ldr	r3, [pc, #104]	; (800fd24 <SwitchClass+0x1d0>)
 800fcba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcbc:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 800fcbe:	f001 fa29 	bl	8011114 <OpenContinuousRxCWindow>
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */

                status = LORAMAC_STATUS_OK;
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800fcc6:	e01e      	b.n	800fd06 <SwitchClass+0x1b2>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800fcc8:	79fb      	ldrb	r3, [r7, #7]
 800fcca:	4618      	mov	r0, r3
 800fccc:	f003 fbea 	bl	80134a4 <LoRaMacClassBSwitchClass>
 800fcd0:	4603      	mov	r3, r0
 800fcd2:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 800fcd4:	7bfb      	ldrb	r3, [r7, #15]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d117      	bne.n	800fd0a <SwitchClass+0x1b6>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800fcda:	4a10      	ldr	r2, [pc, #64]	; (800fd1c <SwitchClass+0x1c8>)
 800fcdc:	79fb      	ldrb	r3, [r7, #7]
 800fcde:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
            }
            break;
 800fce2:	e012      	b.n	800fd0a <SwitchClass+0x1b6>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800fce4:	79fb      	ldrb	r3, [r7, #7]
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d111      	bne.n	800fd0e <SwitchClass+0x1ba>
            {
                // Reset RxSlot to NONE
                MacCtx.RxSlot = RX_SLOT_NONE;
 800fcea:	4b0d      	ldr	r3, [pc, #52]	; (800fd20 <SwitchClass+0x1cc>)
 800fcec:	2206      	movs	r2, #6
 800fcee:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490

                Nvm.MacGroup2.DeviceClass = deviceClass;
 800fcf2:	4a0a      	ldr	r2, [pc, #40]	; (800fd1c <SwitchClass+0x1c8>)
 800fcf4:	79fb      	ldrb	r3, [r7, #7]
 800fcf6:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800fcfa:	4b0a      	ldr	r3, [pc, #40]	; (800fd24 <SwitchClass+0x1d0>)
 800fcfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcfe:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800fd00:	2300      	movs	r3, #0
 800fd02:	73fb      	strb	r3, [r7, #15]
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */
            }
            break;
 800fd04:	e003      	b.n	800fd0e <SwitchClass+0x1ba>
            break;
 800fd06:	bf00      	nop
 800fd08:	e002      	b.n	800fd10 <SwitchClass+0x1bc>
            break;
 800fd0a:	bf00      	nop
 800fd0c:	e000      	b.n	800fd10 <SwitchClass+0x1bc>
            break;
 800fd0e:	bf00      	nop
        }
    }

    return status;
 800fd10:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd12:	4618      	mov	r0, r3
 800fd14:	3710      	adds	r7, #16
 800fd16:	46bd      	mov	sp, r7
 800fd18:	bdb0      	pop	{r4, r5, r7, pc}
 800fd1a:	bf00      	nop
 800fd1c:	20000c5c 	.word	0x20000c5c
 800fd20:	20000740 	.word	0x20000740
 800fd24:	0801eb70 	.word	0x0801eb70

0800fd28 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800fd28:	b580      	push	{r7, lr}
 800fd2a:	b086      	sub	sp, #24
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	4603      	mov	r3, r0
 800fd30:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800fd32:	4b10      	ldr	r3, [pc, #64]	; (800fd74 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800fd34:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800fd38:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 800fd3a:	79fb      	ldrb	r3, [r7, #7]
 800fd3c:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800fd3e:	230d      	movs	r3, #13
 800fd40:	743b      	strb	r3, [r7, #16]

    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800fd42:	4b0c      	ldr	r3, [pc, #48]	; (800fd74 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800fd44:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d001      	beq.n	800fd50 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800fd4c:	230e      	movs	r3, #14
 800fd4e:	743b      	strb	r3, [r7, #16]
    }
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fd50:	4b08      	ldr	r3, [pc, #32]	; (800fd74 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800fd52:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800fd56:	f107 0210 	add.w	r2, r7, #16
 800fd5a:	4611      	mov	r1, r2
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	f005 faf3 	bl	8015348 <RegionGetPhyParam>
 800fd62:	4603      	mov	r3, r0
 800fd64:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	b2db      	uxtb	r3, r3
}
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	3718      	adds	r7, #24
 800fd6e:	46bd      	mov	sp, r7
 800fd70:	bd80      	pop	{r7, pc}
 800fd72:	bf00      	nop
 800fd74:	20000c5c 	.word	0x20000c5c

0800fd78 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	b084      	sub	sp, #16
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	4603      	mov	r3, r0
 800fd80:	71fb      	strb	r3, [r7, #7]
 800fd82:	460b      	mov	r3, r1
 800fd84:	71bb      	strb	r3, [r7, #6]
 800fd86:	4613      	mov	r3, r2
 800fd88:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 800fd8e:	2300      	movs	r3, #0
 800fd90:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800fd92:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800fd96:	4618      	mov	r0, r3
 800fd98:	f7ff ffc6 	bl	800fd28 <GetMaxAppPayloadWithoutFOptsLength>
 800fd9c:	4603      	mov	r3, r0
 800fd9e:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800fda0:	79fb      	ldrb	r3, [r7, #7]
 800fda2:	b29a      	uxth	r2, r3
 800fda4:	797b      	ldrb	r3, [r7, #5]
 800fda6:	b29b      	uxth	r3, r3
 800fda8:	4413      	add	r3, r2
 800fdaa:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800fdac:	89ba      	ldrh	r2, [r7, #12]
 800fdae:	89fb      	ldrh	r3, [r7, #14]
 800fdb0:	429a      	cmp	r2, r3
 800fdb2:	d804      	bhi.n	800fdbe <ValidatePayloadLength+0x46>
 800fdb4:	89bb      	ldrh	r3, [r7, #12]
 800fdb6:	2bff      	cmp	r3, #255	; 0xff
 800fdb8:	d801      	bhi.n	800fdbe <ValidatePayloadLength+0x46>
    {
        return true;
 800fdba:	2301      	movs	r3, #1
 800fdbc:	e000      	b.n	800fdc0 <ValidatePayloadLength+0x48>
    }
    return false;
 800fdbe:	2300      	movs	r3, #0
}
 800fdc0:	4618      	mov	r0, r3
 800fdc2:	3710      	adds	r7, #16
 800fdc4:	46bd      	mov	sp, r7
 800fdc6:	bd80      	pop	{r7, pc}

0800fdc8 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800fdc8:	b590      	push	{r4, r7, lr}
 800fdca:	b0a5      	sub	sp, #148	; 0x94
 800fdcc:	af02      	add	r7, sp, #8
 800fdce:	6078      	str	r0, [r7, #4]
 800fdd0:	4608      	mov	r0, r1
 800fdd2:	4611      	mov	r1, r2
 800fdd4:	461a      	mov	r2, r3
 800fdd6:	4603      	mov	r3, r0
 800fdd8:	70fb      	strb	r3, [r7, #3]
 800fdda:	460b      	mov	r3, r1
 800fddc:	70bb      	strb	r3, [r7, #2]
 800fdde:	4613      	mov	r3, r2
 800fde0:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 800fde2:	2300      	movs	r3, #0
 800fde4:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 800fde8:	2300      	movs	r3, #0
 800fdea:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800fdee:	2300      	movs	r3, #0
 800fdf0:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    MacCommand_t* macCmd;
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 800fdf4:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	f000 84ab 	beq.w	8010754 <ProcessMacCommands+0x98c>
 800fdfe:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 800fe02:	2b01      	cmp	r3, #1
 800fe04:	f040 84ac 	bne.w	8010760 <ProcessMacCommands+0x998>
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 800fe08:	f000 bca4 	b.w	8010754 <ProcessMacCommands+0x98c>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800fe0c:	78fb      	ldrb	r3, [r7, #3]
 800fe0e:	687a      	ldr	r2, [r7, #4]
 800fe10:	4413      	add	r3, r2
 800fe12:	781b      	ldrb	r3, [r3, #0]
 800fe14:	4618      	mov	r0, r3
 800fe16:	f003 fe45 	bl	8013aa4 <LoRaMacCommandsGetCmdSize>
 800fe1a:	4603      	mov	r3, r0
 800fe1c:	461a      	mov	r2, r3
 800fe1e:	78fb      	ldrb	r3, [r7, #3]
 800fe20:	441a      	add	r2, r3
 800fe22:	78bb      	ldrb	r3, [r7, #2]
 800fe24:	429a      	cmp	r2, r3
 800fe26:	f300 849d 	bgt.w	8010764 <ProcessMacCommands+0x99c>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800fe2a:	78fb      	ldrb	r3, [r7, #3]
 800fe2c:	1c5a      	adds	r2, r3, #1
 800fe2e:	70fa      	strb	r2, [r7, #3]
 800fe30:	461a      	mov	r2, r3
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	4413      	add	r3, r2
 800fe36:	781b      	ldrb	r3, [r3, #0]
 800fe38:	3b02      	subs	r3, #2
 800fe3a:	2b11      	cmp	r3, #17
 800fe3c:	f200 8494 	bhi.w	8010768 <ProcessMacCommands+0x9a0>
 800fe40:	a201      	add	r2, pc, #4	; (adr r2, 800fe48 <ProcessMacCommands+0x80>)
 800fe42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe46:	bf00      	nop
 800fe48:	0800fe91 	.word	0x0800fe91
 800fe4c:	0800fed3 	.word	0x0800fed3
 800fe50:	0801004f 	.word	0x0801004f
 800fe54:	0801008d 	.word	0x0801008d
 800fe58:	08010185 	.word	0x08010185
 800fe5c:	080101d5 	.word	0x080101d5
 800fe60:	08010291 	.word	0x08010291
 800fe64:	080102e7 	.word	0x080102e7
 800fe68:	080103cd 	.word	0x080103cd
 800fe6c:	08010769 	.word	0x08010769
 800fe70:	08010769 	.word	0x08010769
 800fe74:	08010475 	.word	0x08010475
 800fe78:	08010769 	.word	0x08010769
 800fe7c:	08010769 	.word	0x08010769
 800fe80:	08010595 	.word	0x08010595
 800fe84:	080105c9 	.word	0x080105c9
 800fe88:	08010659 	.word	0x08010659
 800fe8c:	080106cf 	.word	0x080106cf
                break;
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800fe90:	2005      	movs	r0, #5
 800fe92:	f003 ffdf 	bl	8013e54 <LoRaMacConfirmQueueIsCmdActive>
 800fe96:	4603      	mov	r3, r0
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	f000 845b 	beq.w	8010754 <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800fe9e:	2105      	movs	r1, #5
 800fea0:	2000      	movs	r0, #0
 800fea2:	f003 ff4b 	bl	8013d3c <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800fea6:	78fb      	ldrb	r3, [r7, #3]
 800fea8:	1c5a      	adds	r2, r3, #1
 800feaa:	70fa      	strb	r2, [r7, #3]
 800feac:	461a      	mov	r2, r3
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	4413      	add	r3, r2
 800feb2:	781a      	ldrb	r2, [r3, #0]
 800feb4:	4bb0      	ldr	r3, [pc, #704]	; (8010178 <ProcessMacCommands+0x3b0>)
 800feb6:	f883 245c 	strb.w	r2, [r3, #1116]	; 0x45c
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800feba:	78fb      	ldrb	r3, [r7, #3]
 800febc:	1c5a      	adds	r2, r3, #1
 800febe:	70fa      	strb	r2, [r7, #3]
 800fec0:	461a      	mov	r2, r3
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	4413      	add	r3, r2
 800fec6:	781a      	ldrb	r2, [r3, #0]
 800fec8:	4bab      	ldr	r3, [pc, #684]	; (8010178 <ProcessMacCommands+0x3b0>)
 800feca:	f883 245d 	strb.w	r2, [r3, #1117]	; 0x45d
                }
                break;
 800fece:	f000 bc41 	b.w	8010754 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800fed2:	2300      	movs	r3, #0
 800fed4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 800fed8:	2300      	movs	r3, #0
 800feda:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 800fede:	2300      	movs	r3, #0
 800fee0:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 800fee4:	2300      	movs	r3, #0
 800fee6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
                }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                if( adrBlockFound == false )
 800feea:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800feee:	f083 0301 	eor.w	r3, r3, #1
 800fef2:	b2db      	uxtb	r3, r3
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	f000 80a5 	beq.w	8010044 <ProcessMacCommands+0x27c>
                {
                    adrBlockFound = true;
 800fefa:	2301      	movs	r3, #1
 800fefc:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    do
                    {
                        // Fill parameter structure
                        linkAdrReq.Payload = &payload[macIndex - 1];
 800ff00:	78fb      	ldrb	r3, [r7, #3]
 800ff02:	3b01      	subs	r3, #1
 800ff04:	687a      	ldr	r2, [r7, #4]
 800ff06:	4413      	add	r3, r2
 800ff08:	65fb      	str	r3, [r7, #92]	; 0x5c
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800ff0a:	4b9c      	ldr	r3, [pc, #624]	; (801017c <ProcessMacCommands+0x3b4>)
 800ff0c:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 800ff10:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ff14:	4b99      	ldr	r3, [pc, #612]	; (801017c <ProcessMacCommands+0x3b4>)
 800ff16:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ff1a:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800ff1e:	4b97      	ldr	r3, [pc, #604]	; (801017c <ProcessMacCommands+0x3b4>)
 800ff20:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800ff24:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800ff28:	4b94      	ldr	r3, [pc, #592]	; (801017c <ProcessMacCommands+0x3b4>)
 800ff2a:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800ff2e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800ff32:	4b92      	ldr	r3, [pc, #584]	; (801017c <ProcessMacCommands+0x3b4>)
 800ff34:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800ff38:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 800ff3c:	4b8f      	ldr	r3, [pc, #572]	; (801017c <ProcessMacCommands+0x3b4>)
 800ff3e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800ff42:	65bb      	str	r3, [r7, #88]	; 0x58

                        // There is a fundamental difference in reporting the status
                        // of the LinkAdrRequests when ADR is on or off. When ADR is on, every
                        // LinkAdrAns contains the same value. This does not hold when ADR is off,
                        // where every LinkAdrAns requires an individual status.
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800ff44:	4b8d      	ldr	r3, [pc, #564]	; (801017c <ProcessMacCommands+0x3b4>)
 800ff46:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d008      	beq.n	800ff60 <ProcessMacCommands+0x198>
                        {
                            // When ADR is on, the function RegionLinkAdrReq will take care
                            // about the parsing and interpretation of the LinkAdrRequest block and
                            // it provides one status which shall be applied to every LinkAdrAns
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800ff4e:	78ba      	ldrb	r2, [r7, #2]
 800ff50:	78fb      	ldrb	r3, [r7, #3]
 800ff52:	1ad3      	subs	r3, r2, r3
 800ff54:	b2db      	uxtb	r3, r3
 800ff56:	3301      	adds	r3, #1
 800ff58:	b2db      	uxtb	r3, r3
 800ff5a:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 800ff5e:	e002      	b.n	800ff66 <ProcessMacCommands+0x19e>
                            // When ADR is off, this function will loop over the individual LinkAdrRequests
                            // and will call RegionLinkAdrReq for each individually, as every request
                            // requires an individual answer.
                            // When ADR is off, the function RegionLinkAdrReq ignores the new values for
                            // ChannelsDatarate, ChannelsTxPower and ChannelsNbTrans.
                            linkAdrReq.PayloadSize = 5;
 800ff60:	2305      	movs	r3, #5
 800ff62:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                        }

                        // Process the ADR requests
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800ff66:	4b85      	ldr	r3, [pc, #532]	; (801017c <ProcessMacCommands+0x3b4>)
 800ff68:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800ff6c:	f107 0456 	add.w	r4, r7, #86	; 0x56
 800ff70:	f107 0257 	add.w	r2, r7, #87	; 0x57
 800ff74:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800ff78:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800ff7c:	9301      	str	r3, [sp, #4]
 800ff7e:	f107 0355 	add.w	r3, r7, #85	; 0x55
 800ff82:	9300      	str	r3, [sp, #0]
 800ff84:	4623      	mov	r3, r4
 800ff86:	f005 fae2 	bl	801554e <RegionLinkAdrReq>
 800ff8a:	4603      	mov	r3, r0
 800ff8c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                                &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                        if( ( status & 0x07 ) == 0x07 )
 800ff90:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800ff94:	f003 0307 	and.w	r3, r3, #7
 800ff98:	2b07      	cmp	r3, #7
 800ff9a:	d119      	bne.n	800ffd0 <ProcessMacCommands+0x208>
                        {
                            // Set the status that the datarate has been increased
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 800ff9c:	4b77      	ldr	r3, [pc, #476]	; (801017c <ProcessMacCommands+0x3b4>)
 800ff9e:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 800ffa2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ffa6:	429a      	cmp	r2, r3
 800ffa8:	da03      	bge.n	800ffb2 <ProcessMacCommands+0x1ea>
                            {
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 800ffaa:	4b74      	ldr	r3, [pc, #464]	; (801017c <ProcessMacCommands+0x3b4>)
 800ffac:	2201      	movs	r2, #1
 800ffae:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
                            }
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800ffb2:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 800ffb6:	4b71      	ldr	r3, [pc, #452]	; (801017c <ProcessMacCommands+0x3b4>)
 800ffb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800ffbc:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 800ffc0:	4b6e      	ldr	r3, [pc, #440]	; (801017c <ProcessMacCommands+0x3b4>)
 800ffc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800ffc6:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800ffca:	4b6c      	ldr	r3, [pc, #432]	; (801017c <ProcessMacCommands+0x3b4>)
 800ffcc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                        }

                        // Add the answers to the buffer
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800ffd0:	2300      	movs	r3, #0
 800ffd2:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800ffd6:	e00b      	b.n	800fff0 <ProcessMacCommands+0x228>
                        {
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800ffd8:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 800ffdc:	2201      	movs	r2, #1
 800ffde:	4619      	mov	r1, r3
 800ffe0:	2003      	movs	r0, #3
 800ffe2:	f003 fbff 	bl	80137e4 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800ffe6:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800ffea:	3301      	adds	r3, #1
 800ffec:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800fff0:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800fff4:	4a62      	ldr	r2, [pc, #392]	; (8010180 <ProcessMacCommands+0x3b8>)
 800fff6:	fba2 2303 	umull	r2, r3, r2, r3
 800fffa:	089b      	lsrs	r3, r3, #2
 800fffc:	b2db      	uxtb	r3, r3
 800fffe:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 8010002:	429a      	cmp	r2, r3
 8010004:	d3e8      	bcc.n	800ffd8 <ProcessMacCommands+0x210>
                        }
                        // Update MAC index
                        macIndex += linkAdrNbBytesParsed - 1;
 8010006:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 801000a:	78fb      	ldrb	r3, [r7, #3]
 801000c:	4413      	add	r3, r2
 801000e:	b2db      	uxtb	r3, r3
 8010010:	3b01      	subs	r3, #1
 8010012:	70fb      	strb	r3, [r7, #3]

                        // Check to prevent invalid access
                        if( macIndex >= commandsSize )
 8010014:	78fa      	ldrb	r2, [r7, #3]
 8010016:	78bb      	ldrb	r3, [r7, #2]
 8010018:	429a      	cmp	r2, r3
 801001a:	d20a      	bcs.n	8010032 <ProcessMacCommands+0x26a>
                            break;

                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 801001c:	78fb      	ldrb	r3, [r7, #3]
 801001e:	1c5a      	adds	r2, r3, #1
 8010020:	70fa      	strb	r2, [r7, #3]
 8010022:	461a      	mov	r2, r3
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	4413      	add	r3, r2
 8010028:	781b      	ldrb	r3, [r3, #0]
 801002a:	2b03      	cmp	r3, #3
 801002c:	f43f af68 	beq.w	800ff00 <ProcessMacCommands+0x138>
 8010030:	e000      	b.n	8010034 <ProcessMacCommands+0x26c>
                            break;
 8010032:	bf00      	nop

                    if( macIndex < commandsSize )
 8010034:	78fa      	ldrb	r2, [r7, #3]
 8010036:	78bb      	ldrb	r3, [r7, #2]
 8010038:	429a      	cmp	r2, r3
 801003a:	d206      	bcs.n	801004a <ProcessMacCommands+0x282>
                    {
                        // Decrease the index such that it points to the next MAC command
                        macIndex--;
 801003c:	78fb      	ldrb	r3, [r7, #3]
 801003e:	3b01      	subs	r3, #1
 8010040:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 8010042:	e002      	b.n	801004a <ProcessMacCommands+0x282>
                    macIndex += 4;
 8010044:	78fb      	ldrb	r3, [r7, #3]
 8010046:	3304      	adds	r3, #4
 8010048:	70fb      	strb	r3, [r7, #3]
                break;
 801004a:	bf00      	nop
 801004c:	e382      	b.n	8010754 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 801004e:	78fb      	ldrb	r3, [r7, #3]
 8010050:	1c5a      	adds	r2, r3, #1
 8010052:	70fa      	strb	r2, [r7, #3]
 8010054:	461a      	mov	r2, r3
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	4413      	add	r3, r2
 801005a:	781b      	ldrb	r3, [r3, #0]
 801005c:	f003 030f 	and.w	r3, r3, #15
 8010060:	b2da      	uxtb	r2, r3
 8010062:	4b46      	ldr	r3, [pc, #280]	; (801017c <ProcessMacCommands+0x3b4>)
 8010064:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 8010068:	4b44      	ldr	r3, [pc, #272]	; (801017c <ProcessMacCommands+0x3b4>)
 801006a:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 801006e:	461a      	mov	r2, r3
 8010070:	2301      	movs	r3, #1
 8010072:	4093      	lsls	r3, r2
 8010074:	b29a      	uxth	r2, r3
 8010076:	4b41      	ldr	r3, [pc, #260]	; (801017c <ProcessMacCommands+0x3b4>)
 8010078:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 801007c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010080:	2200      	movs	r2, #0
 8010082:	4619      	mov	r1, r3
 8010084:	2004      	movs	r0, #4
 8010086:	f003 fbad 	bl	80137e4 <LoRaMacCommandsAddCmd>
                break;
 801008a:	e363      	b.n	8010754 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 801008c:	2307      	movs	r3, #7
 801008e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8010092:	78fb      	ldrb	r3, [r7, #3]
 8010094:	687a      	ldr	r2, [r7, #4]
 8010096:	4413      	add	r3, r2
 8010098:	781b      	ldrb	r3, [r3, #0]
 801009a:	091b      	lsrs	r3, r3, #4
 801009c:	b2db      	uxtb	r3, r3
 801009e:	b25b      	sxtb	r3, r3
 80100a0:	f003 0307 	and.w	r3, r3, #7
 80100a4:	b25b      	sxtb	r3, r3
 80100a6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 80100aa:	78fb      	ldrb	r3, [r7, #3]
 80100ac:	687a      	ldr	r2, [r7, #4]
 80100ae:	4413      	add	r3, r2
 80100b0:	781b      	ldrb	r3, [r3, #0]
 80100b2:	b25b      	sxtb	r3, r3
 80100b4:	f003 030f 	and.w	r3, r3, #15
 80100b8:	b25b      	sxtb	r3, r3
 80100ba:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 80100be:	78fb      	ldrb	r3, [r7, #3]
 80100c0:	3301      	adds	r3, #1
 80100c2:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 80100c4:	78fb      	ldrb	r3, [r7, #3]
 80100c6:	1c5a      	adds	r2, r3, #1
 80100c8:	70fa      	strb	r2, [r7, #3]
 80100ca:	461a      	mov	r2, r3
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	4413      	add	r3, r2
 80100d0:	781b      	ldrb	r3, [r3, #0]
 80100d2:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80100d4:	78fb      	ldrb	r3, [r7, #3]
 80100d6:	1c5a      	adds	r2, r3, #1
 80100d8:	70fa      	strb	r2, [r7, #3]
 80100da:	461a      	mov	r2, r3
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	4413      	add	r3, r2
 80100e0:	781b      	ldrb	r3, [r3, #0]
 80100e2:	021a      	lsls	r2, r3, #8
 80100e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100e6:	4313      	orrs	r3, r2
 80100e8:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80100ea:	78fb      	ldrb	r3, [r7, #3]
 80100ec:	1c5a      	adds	r2, r3, #1
 80100ee:	70fa      	strb	r2, [r7, #3]
 80100f0:	461a      	mov	r2, r3
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	4413      	add	r3, r2
 80100f6:	781b      	ldrb	r3, [r3, #0]
 80100f8:	041a      	lsls	r2, r3, #16
 80100fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100fc:	4313      	orrs	r3, r2
 80100fe:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 8010100:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010102:	2264      	movs	r2, #100	; 0x64
 8010104:	fb02 f303 	mul.w	r3, r2, r3
 8010108:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 801010a:	4b1c      	ldr	r3, [pc, #112]	; (801017c <ProcessMacCommands+0x3b4>)
 801010c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010110:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8010114:	4611      	mov	r1, r2
 8010116:	4618      	mov	r0, r3
 8010118:	f005 fa40 	bl	801559c <RegionRxParamSetupReq>
 801011c:	4603      	mov	r3, r0
 801011e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 8010122:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8010126:	f003 0307 	and.w	r3, r3, #7
 801012a:	2b07      	cmp	r3, #7
 801012c:	d117      	bne.n	801015e <ProcessMacCommands+0x396>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 801012e:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 8010132:	b2da      	uxtb	r2, r3
 8010134:	4b11      	ldr	r3, [pc, #68]	; (801017c <ProcessMacCommands+0x3b4>)
 8010136:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 801013a:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 801013e:	b2da      	uxtb	r2, r3
 8010140:	4b0e      	ldr	r3, [pc, #56]	; (801017c <ProcessMacCommands+0x3b4>)
 8010142:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8010146:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010148:	4a0c      	ldr	r2, [pc, #48]	; (801017c <ProcessMacCommands+0x3b4>)
 801014a:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 801014c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801014e:	4a0b      	ldr	r2, [pc, #44]	; (801017c <ProcessMacCommands+0x3b4>)
 8010150:	6753      	str	r3, [r2, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8010152:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8010156:	b2da      	uxtb	r2, r3
 8010158:	4b08      	ldr	r3, [pc, #32]	; (801017c <ProcessMacCommands+0x3b4>)
 801015a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                }
                macCmdPayload[0] = status;
 801015e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8010162:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8010166:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801016a:	2201      	movs	r2, #1
 801016c:	4619      	mov	r1, r3
 801016e:	2005      	movs	r0, #5
 8010170:	f003 fb38 	bl	80137e4 <LoRaMacCommandsAddCmd>
                break;
 8010174:	bf00      	nop
 8010176:	e2ed      	b.n	8010754 <ProcessMacCommands+0x98c>
 8010178:	20000740 	.word	0x20000740
 801017c:	20000c5c 	.word	0x20000c5c
 8010180:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8010184:	23ff      	movs	r3, #255	; 0xff
 8010186:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 801018a:	4bb7      	ldr	r3, [pc, #732]	; (8010468 <ProcessMacCommands+0x6a0>)
 801018c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010190:	2b00      	cmp	r3, #0
 8010192:	d00d      	beq.n	80101b0 <ProcessMacCommands+0x3e8>
 8010194:	4bb4      	ldr	r3, [pc, #720]	; (8010468 <ProcessMacCommands+0x6a0>)
 8010196:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	2b00      	cmp	r3, #0
 801019e:	d007      	beq.n	80101b0 <ProcessMacCommands+0x3e8>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 80101a0:	4bb1      	ldr	r3, [pc, #708]	; (8010468 <ProcessMacCommands+0x6a0>)
 80101a2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	4798      	blx	r3
 80101aa:	4603      	mov	r3, r0
 80101ac:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 80101b0:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80101b4:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 80101b8:	787b      	ldrb	r3, [r7, #1]
 80101ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80101be:	b2db      	uxtb	r3, r3
 80101c0:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 80101c4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80101c8:	2202      	movs	r2, #2
 80101ca:	4619      	mov	r1, r3
 80101cc:	2006      	movs	r0, #6
 80101ce:	f003 fb09 	bl	80137e4 <LoRaMacCommandsAddCmd>
                break;
 80101d2:	e2bf      	b.n	8010754 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 80101d4:	2303      	movs	r3, #3
 80101d6:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 80101da:	78fb      	ldrb	r3, [r7, #3]
 80101dc:	1c5a      	adds	r2, r3, #1
 80101de:	70fa      	strb	r2, [r7, #3]
 80101e0:	461a      	mov	r2, r3
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	4413      	add	r3, r2
 80101e6:	781b      	ldrb	r3, [r3, #0]
 80101e8:	b25b      	sxtb	r3, r3
 80101ea:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 80101ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80101f2:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 80101f4:	78fb      	ldrb	r3, [r7, #3]
 80101f6:	1c5a      	adds	r2, r3, #1
 80101f8:	70fa      	strb	r2, [r7, #3]
 80101fa:	461a      	mov	r2, r3
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	4413      	add	r3, r2
 8010200:	781b      	ldrb	r3, [r3, #0]
 8010202:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8010204:	78fb      	ldrb	r3, [r7, #3]
 8010206:	1c5a      	adds	r2, r3, #1
 8010208:	70fa      	strb	r2, [r7, #3]
 801020a:	461a      	mov	r2, r3
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	4413      	add	r3, r2
 8010210:	781b      	ldrb	r3, [r3, #0]
 8010212:	021a      	lsls	r2, r3, #8
 8010214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010216:	4313      	orrs	r3, r2
 8010218:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 801021a:	78fb      	ldrb	r3, [r7, #3]
 801021c:	1c5a      	adds	r2, r3, #1
 801021e:	70fa      	strb	r2, [r7, #3]
 8010220:	461a      	mov	r2, r3
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	4413      	add	r3, r2
 8010226:	781b      	ldrb	r3, [r3, #0]
 8010228:	041a      	lsls	r2, r3, #16
 801022a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801022c:	4313      	orrs	r3, r2
 801022e:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 8010230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010232:	2264      	movs	r2, #100	; 0x64
 8010234:	fb02 f303 	mul.w	r3, r2, r3
 8010238:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 801023a:	2300      	movs	r3, #0
 801023c:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 801023e:	78fb      	ldrb	r3, [r7, #3]
 8010240:	1c5a      	adds	r2, r3, #1
 8010242:	70fa      	strb	r2, [r7, #3]
 8010244:	461a      	mov	r2, r3
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	4413      	add	r3, r2
 801024a:	781b      	ldrb	r3, [r3, #0]
 801024c:	b25b      	sxtb	r3, r3
 801024e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8010252:	4b86      	ldr	r3, [pc, #536]	; (801046c <ProcessMacCommands+0x6a4>)
 8010254:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010258:	f107 0244 	add.w	r2, r7, #68	; 0x44
 801025c:	4611      	mov	r1, r2
 801025e:	4618      	mov	r0, r3
 8010260:	f005 f9b7 	bl	80155d2 <RegionNewChannelReq>
 8010264:	4603      	mov	r3, r0
 8010266:	b2db      	uxtb	r3, r3
 8010268:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 801026c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8010270:	b25b      	sxtb	r3, r3
 8010272:	2b00      	cmp	r3, #0
 8010274:	db0a      	blt.n	801028c <ProcessMacCommands+0x4c4>
                {
                    macCmdPayload[0] = status;
 8010276:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 801027a:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 801027e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010282:	2201      	movs	r2, #1
 8010284:	4619      	mov	r1, r3
 8010286:	2007      	movs	r0, #7
 8010288:	f003 faac 	bl	80137e4 <LoRaMacCommandsAddCmd>
                }
                break;
 801028c:	bf00      	nop
 801028e:	e261      	b.n	8010754 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 8010290:	78fb      	ldrb	r3, [r7, #3]
 8010292:	1c5a      	adds	r2, r3, #1
 8010294:	70fa      	strb	r2, [r7, #3]
 8010296:	461a      	mov	r2, r3
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	4413      	add	r3, r2
 801029c:	781b      	ldrb	r3, [r3, #0]
 801029e:	f003 030f 	and.w	r3, r3, #15
 80102a2:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 80102a6:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d104      	bne.n	80102b8 <ProcessMacCommands+0x4f0>
                {
                    delay++;
 80102ae:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80102b2:	3301      	adds	r3, #1
 80102b4:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 80102b8:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80102bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80102c0:	fb02 f303 	mul.w	r3, r2, r3
 80102c4:	461a      	mov	r2, r3
 80102c6:	4b69      	ldr	r3, [pc, #420]	; (801046c <ProcessMacCommands+0x6a4>)
 80102c8:	659a      	str	r2, [r3, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 80102ca:	4b68      	ldr	r3, [pc, #416]	; (801046c <ProcessMacCommands+0x6a4>)
 80102cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80102ce:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80102d2:	4a66      	ldr	r2, [pc, #408]	; (801046c <ProcessMacCommands+0x6a4>)
 80102d4:	65d3      	str	r3, [r2, #92]	; 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 80102d6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80102da:	2200      	movs	r2, #0
 80102dc:	4619      	mov	r1, r3
 80102de:	2008      	movs	r0, #8
 80102e0:	f003 fa80 	bl	80137e4 <LoRaMacCommandsAddCmd>
                break;
 80102e4:	e236      	b.n	8010754 <ProcessMacCommands+0x98c>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 80102e6:	78fb      	ldrb	r3, [r7, #3]
 80102e8:	1c5a      	adds	r2, r3, #1
 80102ea:	70fa      	strb	r2, [r7, #3]
 80102ec:	461a      	mov	r2, r3
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	4413      	add	r3, r2
 80102f2:	781b      	ldrb	r3, [r3, #0]
 80102f4:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 80102f8:	2300      	movs	r3, #0
 80102fa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 80102fe:	2300      	movs	r3, #0
 8010300:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8010304:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8010308:	f003 0320 	and.w	r3, r3, #32
 801030c:	2b00      	cmp	r3, #0
 801030e:	d002      	beq.n	8010316 <ProcessMacCommands+0x54e>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 8010310:	2301      	movs	r3, #1
 8010312:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8010316:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 801031a:	f003 0310 	and.w	r3, r3, #16
 801031e:	2b00      	cmp	r3, #0
 8010320:	d002      	beq.n	8010328 <ProcessMacCommands+0x560>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 8010322:	2301      	movs	r3, #1
 8010324:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8010328:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 801032c:	f003 030f 	and.w	r3, r3, #15
 8010330:	b2db      	uxtb	r3, r3
 8010332:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8010336:	4b4d      	ldr	r3, [pc, #308]	; (801046c <ProcessMacCommands+0x6a4>)
 8010338:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801033c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8010340:	4611      	mov	r1, r2
 8010342:	4618      	mov	r0, r3
 8010344:	f005 f960 	bl	8015608 <RegionTxParamSetupReq>
 8010348:	4603      	mov	r3, r0
 801034a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801034e:	d03b      	beq.n	80103c8 <ProcessMacCommands+0x600>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8010350:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8010354:	4b45      	ldr	r3, [pc, #276]	; (801046c <ProcessMacCommands+0x6a4>)
 8010356:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 801035a:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 801035e:	4b43      	ldr	r3, [pc, #268]	; (801046c <ProcessMacCommands+0x6a4>)
 8010360:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8010364:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8010368:	461a      	mov	r2, r3
 801036a:	4b41      	ldr	r3, [pc, #260]	; (8010470 <ProcessMacCommands+0x6a8>)
 801036c:	5c9b      	ldrb	r3, [r3, r2]
 801036e:	4618      	mov	r0, r3
 8010370:	f7f0 fa2c 	bl	80007cc <__aeabi_ui2f>
 8010374:	4603      	mov	r3, r0
 8010376:	4a3d      	ldr	r2, [pc, #244]	; (801046c <ProcessMacCommands+0x6a4>)
 8010378:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 801037c:	2302      	movs	r3, #2
 801037e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010382:	4b3a      	ldr	r3, [pc, #232]	; (801046c <ProcessMacCommands+0x6a4>)
 8010384:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8010388:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801038c:	4b37      	ldr	r3, [pc, #220]	; (801046c <ProcessMacCommands+0x6a4>)
 801038e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010392:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8010396:	4611      	mov	r1, r2
 8010398:	4618      	mov	r0, r3
 801039a:	f004 ffd5 	bl	8015348 <RegionGetPhyParam>
 801039e:	4603      	mov	r3, r0
 80103a0:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 80103a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103a4:	b25a      	sxtb	r2, r3
 80103a6:	4b31      	ldr	r3, [pc, #196]	; (801046c <ProcessMacCommands+0x6a4>)
 80103a8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80103ac:	4293      	cmp	r3, r2
 80103ae:	bfb8      	it	lt
 80103b0:	4613      	movlt	r3, r2
 80103b2:	b25a      	sxtb	r2, r3
 80103b4:	4b2d      	ldr	r3, [pc, #180]	; (801046c <ProcessMacCommands+0x6a4>)
 80103b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 80103ba:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80103be:	2200      	movs	r2, #0
 80103c0:	4619      	mov	r1, r3
 80103c2:	2009      	movs	r0, #9
 80103c4:	f003 fa0e 	bl	80137e4 <LoRaMacCommandsAddCmd>
                }
                break;
 80103c8:	bf00      	nop
 80103ca:	e1c3      	b.n	8010754 <ProcessMacCommands+0x98c>
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 80103cc:	2303      	movs	r3, #3
 80103ce:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 80103d2:	78fb      	ldrb	r3, [r7, #3]
 80103d4:	1c5a      	adds	r2, r3, #1
 80103d6:	70fa      	strb	r2, [r7, #3]
 80103d8:	461a      	mov	r2, r3
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	4413      	add	r3, r2
 80103de:	781b      	ldrb	r3, [r3, #0]
 80103e0:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 80103e4:	78fb      	ldrb	r3, [r7, #3]
 80103e6:	1c5a      	adds	r2, r3, #1
 80103e8:	70fa      	strb	r2, [r7, #3]
 80103ea:	461a      	mov	r2, r3
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	4413      	add	r3, r2
 80103f0:	781b      	ldrb	r3, [r3, #0]
 80103f2:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80103f4:	78fb      	ldrb	r3, [r7, #3]
 80103f6:	1c5a      	adds	r2, r3, #1
 80103f8:	70fa      	strb	r2, [r7, #3]
 80103fa:	461a      	mov	r2, r3
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	4413      	add	r3, r2
 8010400:	781b      	ldrb	r3, [r3, #0]
 8010402:	021a      	lsls	r2, r3, #8
 8010404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010406:	4313      	orrs	r3, r2
 8010408:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 801040a:	78fb      	ldrb	r3, [r7, #3]
 801040c:	1c5a      	adds	r2, r3, #1
 801040e:	70fa      	strb	r2, [r7, #3]
 8010410:	461a      	mov	r2, r3
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	4413      	add	r3, r2
 8010416:	781b      	ldrb	r3, [r3, #0]
 8010418:	041a      	lsls	r2, r3, #16
 801041a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801041c:	4313      	orrs	r3, r2
 801041e:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 8010420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010422:	2264      	movs	r2, #100	; 0x64
 8010424:	fb02 f303 	mul.w	r3, r2, r3
 8010428:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 801042a:	4b10      	ldr	r3, [pc, #64]	; (801046c <ProcessMacCommands+0x6a4>)
 801042c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010430:	f107 0220 	add.w	r2, r7, #32
 8010434:	4611      	mov	r1, r2
 8010436:	4618      	mov	r0, r3
 8010438:	f005 f901 	bl	801563e <RegionDlChannelReq>
 801043c:	4603      	mov	r3, r0
 801043e:	b2db      	uxtb	r3, r3
 8010440:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 8010444:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8010448:	b25b      	sxtb	r3, r3
 801044a:	2b00      	cmp	r3, #0
 801044c:	db0a      	blt.n	8010464 <ProcessMacCommands+0x69c>
                {
                    macCmdPayload[0] = status;
 801044e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8010452:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8010456:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801045a:	2201      	movs	r2, #1
 801045c:	4619      	mov	r1, r3
 801045e:	200a      	movs	r0, #10
 8010460:	f003 f9c0 	bl	80137e4 <LoRaMacCommandsAddCmd>
                }
                break;
 8010464:	bf00      	nop
 8010466:	e175      	b.n	8010754 <ProcessMacCommands+0x98c>
 8010468:	20000740 	.word	0x20000740
 801046c:	20000c5c 	.word	0x20000c5c
 8010470:	0801eaa4 	.word	0x0801eaa4
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8010474:	2009      	movs	r0, #9
 8010476:	f003 fced 	bl	8013e54 <LoRaMacConfirmQueueIsCmdActive>
 801047a:	4603      	mov	r3, r0
 801047c:	2b00      	cmp	r3, #0
 801047e:	f000 8084 	beq.w	801058a <ProcessMacCommands+0x7c2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8010482:	2109      	movs	r1, #9
 8010484:	2000      	movs	r0, #0
 8010486:	f003 fc59 	bl	8013d3c <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 801048a:	f107 0318 	add.w	r3, r7, #24
 801048e:	2200      	movs	r2, #0
 8010490:	601a      	str	r2, [r3, #0]
 8010492:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 8010494:	f107 0310 	add.w	r3, r7, #16
 8010498:	2200      	movs	r2, #0
 801049a:	601a      	str	r2, [r3, #0]
 801049c:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 801049e:	f107 0308 	add.w	r3, r7, #8
 80104a2:	2200      	movs	r2, #0
 80104a4:	601a      	str	r2, [r3, #0]
 80104a6:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 80104a8:	78fb      	ldrb	r3, [r7, #3]
 80104aa:	1c5a      	adds	r2, r3, #1
 80104ac:	70fa      	strb	r2, [r7, #3]
 80104ae:	461a      	mov	r2, r3
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	4413      	add	r3, r2
 80104b4:	781b      	ldrb	r3, [r3, #0]
 80104b6:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 80104b8:	78fb      	ldrb	r3, [r7, #3]
 80104ba:	1c5a      	adds	r2, r3, #1
 80104bc:	70fa      	strb	r2, [r7, #3]
 80104be:	461a      	mov	r2, r3
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	4413      	add	r3, r2
 80104c4:	781b      	ldrb	r3, [r3, #0]
 80104c6:	021a      	lsls	r2, r3, #8
 80104c8:	69bb      	ldr	r3, [r7, #24]
 80104ca:	4313      	orrs	r3, r2
 80104cc:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 80104ce:	78fb      	ldrb	r3, [r7, #3]
 80104d0:	1c5a      	adds	r2, r3, #1
 80104d2:	70fa      	strb	r2, [r7, #3]
 80104d4:	461a      	mov	r2, r3
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	4413      	add	r3, r2
 80104da:	781b      	ldrb	r3, [r3, #0]
 80104dc:	041a      	lsls	r2, r3, #16
 80104de:	69bb      	ldr	r3, [r7, #24]
 80104e0:	4313      	orrs	r3, r2
 80104e2:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 80104e4:	78fb      	ldrb	r3, [r7, #3]
 80104e6:	1c5a      	adds	r2, r3, #1
 80104e8:	70fa      	strb	r2, [r7, #3]
 80104ea:	461a      	mov	r2, r3
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	4413      	add	r3, r2
 80104f0:	781b      	ldrb	r3, [r3, #0]
 80104f2:	061a      	lsls	r2, r3, #24
 80104f4:	69bb      	ldr	r3, [r7, #24]
 80104f6:	4313      	orrs	r3, r2
 80104f8:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 80104fa:	78fb      	ldrb	r3, [r7, #3]
 80104fc:	1c5a      	adds	r2, r3, #1
 80104fe:	70fa      	strb	r2, [r7, #3]
 8010500:	461a      	mov	r2, r3
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	4413      	add	r3, r2
 8010506:	781b      	ldrb	r3, [r3, #0]
 8010508:	b21b      	sxth	r3, r3
 801050a:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 801050c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8010510:	461a      	mov	r2, r3
 8010512:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010516:	fb02 f303 	mul.w	r3, r2, r3
 801051a:	121b      	asrs	r3, r3, #8
 801051c:	b21b      	sxth	r3, r3
 801051e:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 8010520:	f107 0310 	add.w	r3, r7, #16
 8010524:	f107 0218 	add.w	r2, r7, #24
 8010528:	e892 0003 	ldmia.w	r2, {r0, r1}
 801052c:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8010530:	693a      	ldr	r2, [r7, #16]
 8010532:	4b8f      	ldr	r3, [pc, #572]	; (8010770 <ProcessMacCommands+0x9a8>)
 8010534:	4413      	add	r3, r2
 8010536:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 8010538:	f107 0308 	add.w	r3, r7, #8
 801053c:	4618      	mov	r0, r3
 801053e:	f00c f937 	bl	801c7b0 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8010542:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8010546:	4b8b      	ldr	r3, [pc, #556]	; (8010774 <ProcessMacCommands+0x9ac>)
 8010548:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 801054c:	9200      	str	r2, [sp, #0]
 801054e:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 8010552:	f107 0210 	add.w	r2, r7, #16
 8010556:	ca06      	ldmia	r2, {r1, r2}
 8010558:	f00c f8c3 	bl	801c6e2 <SysTimeSub>
 801055c:	f107 0010 	add.w	r0, r7, #16
 8010560:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010562:	9300      	str	r3, [sp, #0]
 8010564:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010566:	f107 0208 	add.w	r2, r7, #8
 801056a:	ca06      	ldmia	r2, {r1, r2}
 801056c:	f00c f880 	bl	801c670 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 8010570:	f107 0310 	add.w	r3, r7, #16
 8010574:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010578:	f00c f8ec 	bl	801c754 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 801057c:	f002 ffd0 	bl	8013520 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8010580:	4b7c      	ldr	r3, [pc, #496]	; (8010774 <ProcessMacCommands+0x9ac>)
 8010582:	2201      	movs	r2, #1
 8010584:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
 8010588:	e0e4      	b.n	8010754 <ProcessMacCommands+0x98c>
                }
                else
                {
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 801058a:	4b7a      	ldr	r3, [pc, #488]	; (8010774 <ProcessMacCommands+0x9ac>)
 801058c:	2200      	movs	r2, #0
 801058e:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
#endif /* LORAMAC_VERSION */
                }
                break;
 8010592:	e0df      	b.n	8010754 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8010594:	200c      	movs	r0, #12
 8010596:	f003 fc5d 	bl	8013e54 <LoRaMacConfirmQueueIsCmdActive>
 801059a:	4603      	mov	r3, r0
 801059c:	2b00      	cmp	r3, #0
 801059e:	f000 80d9 	beq.w	8010754 <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 80105a2:	210c      	movs	r1, #12
 80105a4:	2000      	movs	r0, #0
 80105a6:	f003 fbc9 	bl	8013d3c <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 80105aa:	4b72      	ldr	r3, [pc, #456]	; (8010774 <ProcessMacCommands+0x9ac>)
 80105ac:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 80105b0:	2b04      	cmp	r3, #4
 80105b2:	f000 80cf 	beq.w	8010754 <ProcessMacCommands+0x98c>
 80105b6:	4b6f      	ldr	r3, [pc, #444]	; (8010774 <ProcessMacCommands+0x9ac>)
 80105b8:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 80105bc:	2b05      	cmp	r3, #5
 80105be:	f000 80c9 	beq.w	8010754 <ProcessMacCommands+0x98c>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 80105c2:	f002 ff8e 	bl	80134e2 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 80105c6:	e0c5      	b.n	8010754 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 80105c8:	2303      	movs	r3, #3
 80105ca:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 80105ce:	2300      	movs	r3, #0
 80105d0:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 80105d2:	78fb      	ldrb	r3, [r7, #3]
 80105d4:	1c5a      	adds	r2, r3, #1
 80105d6:	70fa      	strb	r2, [r7, #3]
 80105d8:	461a      	mov	r2, r3
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	4413      	add	r3, r2
 80105de:	781b      	ldrb	r3, [r3, #0]
 80105e0:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 80105e2:	78fb      	ldrb	r3, [r7, #3]
 80105e4:	1c5a      	adds	r2, r3, #1
 80105e6:	70fa      	strb	r2, [r7, #3]
 80105e8:	461a      	mov	r2, r3
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	4413      	add	r3, r2
 80105ee:	781b      	ldrb	r3, [r3, #0]
 80105f0:	021b      	lsls	r3, r3, #8
 80105f2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80105f4:	4313      	orrs	r3, r2
 80105f6:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 80105f8:	78fb      	ldrb	r3, [r7, #3]
 80105fa:	1c5a      	adds	r2, r3, #1
 80105fc:	70fa      	strb	r2, [r7, #3]
 80105fe:	461a      	mov	r2, r3
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	4413      	add	r3, r2
 8010604:	781b      	ldrb	r3, [r3, #0]
 8010606:	041b      	lsls	r3, r3, #16
 8010608:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801060a:	4313      	orrs	r3, r2
 801060c:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 801060e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010610:	2264      	movs	r2, #100	; 0x64
 8010612:	fb02 f303 	mul.w	r3, r2, r3
 8010616:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 8010618:	78fb      	ldrb	r3, [r7, #3]
 801061a:	1c5a      	adds	r2, r3, #1
 801061c:	70fa      	strb	r2, [r7, #3]
 801061e:	461a      	mov	r2, r3
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	4413      	add	r3, r2
 8010624:	781b      	ldrb	r3, [r3, #0]
 8010626:	f003 030f 	and.w	r3, r3, #15
 801062a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 801062e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8010632:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8010634:	4618      	mov	r0, r3
 8010636:	f002 ff5a 	bl	80134ee <LoRaMacClassBPingSlotChannelReq>
 801063a:	4603      	mov	r3, r0
 801063c:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 8010640:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8010644:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 8010648:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801064c:	2201      	movs	r2, #1
 801064e:	4619      	mov	r1, r3
 8010650:	2011      	movs	r0, #17
 8010652:	f003 f8c7 	bl	80137e4 <LoRaMacCommandsAddCmd>
#endif /* LORAMAC_VERSION */
                break;
 8010656:	e07d      	b.n	8010754 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8010658:	200d      	movs	r0, #13
 801065a:	f003 fbfb 	bl	8013e54 <LoRaMacConfirmQueueIsCmdActive>
 801065e:	4603      	mov	r3, r0
 8010660:	2b00      	cmp	r3, #0
 8010662:	d077      	beq.n	8010754 <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8010664:	210d      	movs	r1, #13
 8010666:	2000      	movs	r0, #0
 8010668:	f003 fb68 	bl	8013d3c <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 801066c:	2300      	movs	r3, #0
 801066e:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 8010672:	2300      	movs	r3, #0
 8010674:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8010678:	78fb      	ldrb	r3, [r7, #3]
 801067a:	1c5a      	adds	r2, r3, #1
 801067c:	70fa      	strb	r2, [r7, #3]
 801067e:	461a      	mov	r2, r3
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	4413      	add	r3, r2
 8010684:	781b      	ldrb	r3, [r3, #0]
 8010686:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 801068a:	78fb      	ldrb	r3, [r7, #3]
 801068c:	1c5a      	adds	r2, r3, #1
 801068e:	70fa      	strb	r2, [r7, #3]
 8010690:	461a      	mov	r2, r3
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	4413      	add	r3, r2
 8010696:	781b      	ldrb	r3, [r3, #0]
 8010698:	021b      	lsls	r3, r3, #8
 801069a:	b21a      	sxth	r2, r3
 801069c:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 80106a0:	4313      	orrs	r3, r2
 80106a2:	b21b      	sxth	r3, r3
 80106a4:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 80106a8:	78fb      	ldrb	r3, [r7, #3]
 80106aa:	1c5a      	adds	r2, r3, #1
 80106ac:	70fa      	strb	r2, [r7, #3]
 80106ae:	461a      	mov	r2, r3
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	4413      	add	r3, r2
 80106b4:	781b      	ldrb	r3, [r3, #0]
 80106b6:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 80106ba:	4b2f      	ldr	r3, [pc, #188]	; (8010778 <ProcessMacCommands+0x9b0>)
 80106bc:	681a      	ldr	r2, [r3, #0]
 80106be:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 80106c2:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80106c6:	4618      	mov	r0, r3
 80106c8:	f002 ff1d 	bl	8013506 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 80106cc:	e042      	b.n	8010754 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 80106ce:	2300      	movs	r3, #0
 80106d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 80106d4:	78fb      	ldrb	r3, [r7, #3]
 80106d6:	1c5a      	adds	r2, r3, #1
 80106d8:	70fa      	strb	r2, [r7, #3]
 80106da:	461a      	mov	r2, r3
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	4413      	add	r3, r2
 80106e0:	781b      	ldrb	r3, [r3, #0]
 80106e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 80106e6:	78fb      	ldrb	r3, [r7, #3]
 80106e8:	1c5a      	adds	r2, r3, #1
 80106ea:	70fa      	strb	r2, [r7, #3]
 80106ec:	461a      	mov	r2, r3
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	4413      	add	r3, r2
 80106f2:	781b      	ldrb	r3, [r3, #0]
 80106f4:	021b      	lsls	r3, r3, #8
 80106f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80106fa:	4313      	orrs	r3, r2
 80106fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8010700:	78fb      	ldrb	r3, [r7, #3]
 8010702:	1c5a      	adds	r2, r3, #1
 8010704:	70fa      	strb	r2, [r7, #3]
 8010706:	461a      	mov	r2, r3
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	4413      	add	r3, r2
 801070c:	781b      	ldrb	r3, [r3, #0]
 801070e:	041b      	lsls	r3, r3, #16
 8010710:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010714:	4313      	orrs	r3, r2
 8010716:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 801071a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801071e:	2264      	movs	r2, #100	; 0x64
 8010720:	fb02 f303 	mul.w	r3, r2, r3
 8010724:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8010728:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 801072c:	f002 fefe 	bl	801352c <LoRaMacClassBBeaconFreqReq>
 8010730:	4603      	mov	r3, r0
 8010732:	2b00      	cmp	r3, #0
 8010734:	d003      	beq.n	801073e <ProcessMacCommands+0x976>
                    {
                        macCmdPayload[0] = 1;
 8010736:	2301      	movs	r3, #1
 8010738:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 801073c:	e002      	b.n	8010744 <ProcessMacCommands+0x97c>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 801073e:	2300      	movs	r3, #0
 8010740:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8010744:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010748:	2201      	movs	r2, #1
 801074a:	4619      	mov	r1, r3
 801074c:	2013      	movs	r0, #19
 801074e:	f003 f849 	bl	80137e4 <LoRaMacCommandsAddCmd>
                }
                break;
 8010752:	bf00      	nop
    while( macIndex < commandsSize )
 8010754:	78fa      	ldrb	r2, [r7, #3]
 8010756:	78bb      	ldrb	r3, [r7, #2]
 8010758:	429a      	cmp	r2, r3
 801075a:	f4ff ab57 	bcc.w	800fe0c <ProcessMacCommands+0x44>
 801075e:	e004      	b.n	801076a <ProcessMacCommands+0x9a2>
        return;
 8010760:	bf00      	nop
 8010762:	e002      	b.n	801076a <ProcessMacCommands+0x9a2>
            return;
 8010764:	bf00      	nop
 8010766:	e000      	b.n	801076a <ProcessMacCommands+0x9a2>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 8010768:	bf00      	nop
        }
    }
}
 801076a:	378c      	adds	r7, #140	; 0x8c
 801076c:	46bd      	mov	sp, r7
 801076e:	bd90      	pop	{r4, r7, pc}
 8010770:	12d53d80 	.word	0x12d53d80
 8010774:	20000740 	.word	0x20000740
 8010778:	2000188c 	.word	0x2000188c

0801077c <Send>:

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 801077c:	b580      	push	{r7, lr}
 801077e:	b08e      	sub	sp, #56	; 0x38
 8010780:	af02      	add	r7, sp, #8
 8010782:	60f8      	str	r0, [r7, #12]
 8010784:	607a      	str	r2, [r7, #4]
 8010786:	461a      	mov	r2, r3
 8010788:	460b      	mov	r3, r1
 801078a:	72fb      	strb	r3, [r7, #11]
 801078c:	4613      	mov	r3, r2
 801078e:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010790:	2303      	movs	r3, #3
 8010792:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010796:	4b66      	ldr	r3, [pc, #408]	; (8010930 <Send+0x1b4>)
 8010798:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801079c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 80107a0:	4b63      	ldr	r3, [pc, #396]	; (8010930 <Send+0x1b4>)
 80107a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80107a6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80107aa:	4b61      	ldr	r3, [pc, #388]	; (8010930 <Send+0x1b4>)
 80107ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80107ae:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80107b0:	4b5f      	ldr	r3, [pc, #380]	; (8010930 <Send+0x1b4>)
 80107b2:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d101      	bne.n	80107be <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 80107ba:	2307      	movs	r3, #7
 80107bc:	e0b4      	b.n	8010928 <Send+0x1ac>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 80107be:	4b5c      	ldr	r3, [pc, #368]	; (8010930 <Send+0x1b4>)
 80107c0:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d102      	bne.n	80107ce <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 80107c8:	4b59      	ldr	r3, [pc, #356]	; (8010930 <Send+0x1b4>)
 80107ca:	2200      	movs	r2, #0
 80107cc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 80107ce:	2300      	movs	r3, #0
 80107d0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 80107d4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80107d8:	f36f 0303 	bfc	r3, #0, #4
 80107dc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 80107e0:	4b53      	ldr	r3, [pc, #332]	; (8010930 <Send+0x1b4>)
 80107e2:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 80107e6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80107ea:	f362 13c7 	bfi	r3, r2, #7, #1
 80107ee:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80107f2:	4b4f      	ldr	r3, [pc, #316]	; (8010930 <Send+0x1b4>)
 80107f4:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80107f8:	2b01      	cmp	r3, #1
 80107fa:	d106      	bne.n	801080a <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 80107fc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010800:	f043 0310 	orr.w	r3, r3, #16
 8010804:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8010808:	e005      	b.n	8010816 <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 801080a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801080e:	f36f 1304 	bfc	r3, #4, #1
 8010812:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 8010816:	4b46      	ldr	r3, [pc, #280]	; (8010930 <Send+0x1b4>)
 8010818:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801081c:	2b00      	cmp	r3, #0
 801081e:	d005      	beq.n	801082c <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 8010820:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010824:	f043 0320 	orr.w	r3, r3, #32
 8010828:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
    adrNext.UpdateChanMask = true;
 801082c:	2301      	movs	r3, #1
 801082e:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8010830:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010834:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8010838:	b2db      	uxtb	r3, r3
 801083a:	2b00      	cmp	r3, #0
 801083c:	bf14      	ite	ne
 801083e:	2301      	movne	r3, #1
 8010840:	2300      	moveq	r3, #0
 8010842:	b2db      	uxtb	r3, r3
 8010844:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8010846:	4b3a      	ldr	r3, [pc, #232]	; (8010930 <Send+0x1b4>)
 8010848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801084a:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 801084c:	4b38      	ldr	r3, [pc, #224]	; (8010930 <Send+0x1b4>)
 801084e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8010852:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8010854:	4b36      	ldr	r3, [pc, #216]	; (8010930 <Send+0x1b4>)
 8010856:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 801085a:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801085c:	4b34      	ldr	r3, [pc, #208]	; (8010930 <Send+0x1b4>)
 801085e:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010862:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010866:	4b32      	ldr	r3, [pc, #200]	; (8010930 <Send+0x1b4>)
 8010868:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 801086c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010870:	4b2f      	ldr	r3, [pc, #188]	; (8010930 <Send+0x1b4>)
 8010872:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8010876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 801087a:	4b2d      	ldr	r3, [pc, #180]	; (8010930 <Send+0x1b4>)
 801087c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010880:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8010884:	4b2a      	ldr	r3, [pc, #168]	; (8010930 <Send+0x1b4>)
 8010886:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 801088a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 801088e:	f107 0014 	add.w	r0, r7, #20
 8010892:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010896:	9300      	str	r3, [sp, #0]
 8010898:	4b26      	ldr	r3, [pc, #152]	; (8010934 <Send+0x1b8>)
 801089a:	4a27      	ldr	r2, [pc, #156]	; (8010938 <Send+0x1bc>)
 801089c:	4927      	ldr	r1, [pc, #156]	; (801093c <Send+0x1c0>)
 801089e:	f002 fcbf 	bl	8013220 <LoRaMacAdrCalcNext>
 80108a2:	4603      	mov	r3, r0
 80108a4:	461a      	mov	r2, r3
 80108a6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80108aa:	f362 1386 	bfi	r3, r2, #6, #1
 80108ae:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 80108b2:	7afa      	ldrb	r2, [r7, #11]
 80108b4:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80108b8:	893b      	ldrh	r3, [r7, #8]
 80108ba:	9300      	str	r3, [sp, #0]
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	68f8      	ldr	r0, [r7, #12]
 80108c0:	f000 fc72 	bl	80111a8 <PrepareFrame>
 80108c4:	4603      	mov	r3, r0
 80108c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 80108ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d003      	beq.n	80108da <Send+0x15e>
 80108d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80108d6:	2b0a      	cmp	r3, #10
 80108d8:	d107      	bne.n	80108ea <Send+0x16e>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 80108da:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80108de:	4618      	mov	r0, r3
 80108e0:	f000 f962 	bl	8010ba8 <ScheduleTx>
 80108e4:	4603      	mov	r3, r0
 80108e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 80108ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d00a      	beq.n	8010908 <Send+0x18c>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 80108f2:	4a0f      	ldr	r2, [pc, #60]	; (8010930 <Send+0x1b4>)
 80108f4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80108f8:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 80108fc:	4a0c      	ldr	r2, [pc, #48]	; (8010930 <Send+0x1b4>)
 80108fe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010902:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 8010906:	e00d      	b.n	8010924 <Send+0x1a8>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 8010908:	4b09      	ldr	r3, [pc, #36]	; (8010930 <Send+0x1b4>)
 801090a:	2200      	movs	r2, #0
 801090c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8010910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010912:	4a07      	ldr	r2, [pc, #28]	; (8010930 <Send+0x1b4>)
 8010914:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8010916:	f003 f80b 	bl	8013930 <LoRaMacCommandsRemoveNoneStickyCmds>
 801091a:	4603      	mov	r3, r0
 801091c:	2b00      	cmp	r3, #0
 801091e:	d001      	beq.n	8010924 <Send+0x1a8>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010920:	2313      	movs	r3, #19
 8010922:	e001      	b.n	8010928 <Send+0x1ac>
        }
    }
    return status;
 8010924:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8010928:	4618      	mov	r0, r3
 801092a:	3730      	adds	r7, #48	; 0x30
 801092c:	46bd      	mov	sp, r7
 801092e:	bd80      	pop	{r7, pc}
 8010930:	20000c5c 	.word	0x20000c5c
 8010934:	20000cc4 	.word	0x20000cc4
 8010938:	20000c94 	.word	0x20000c94
 801093c:	20000c95 	.word	0x20000c95

08010940 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 8010940:	b580      	push	{r7, lr}
 8010942:	b084      	sub	sp, #16
 8010944:	af00      	add	r7, sp, #0
 8010946:	4603      	mov	r3, r0
 8010948:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801094a:	2300      	movs	r3, #0
 801094c:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 801094e:	2300      	movs	r3, #0
 8010950:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 8010952:	2301      	movs	r3, #1
 8010954:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 8010956:	79fb      	ldrb	r3, [r7, #7]
 8010958:	2bff      	cmp	r3, #255	; 0xff
 801095a:	d11f      	bne.n	801099c <SendReJoinReq+0x5c>
            break;
        }
#endif /* LORAMAC_VERSION */
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 801095c:	2000      	movs	r0, #0
 801095e:	f7ff f8f9 	bl	800fb54 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8010962:	4b15      	ldr	r3, [pc, #84]	; (80109b8 <SendReJoinReq+0x78>)
 8010964:	2200      	movs	r2, #0
 8010966:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 801096a:	4b13      	ldr	r3, [pc, #76]	; (80109b8 <SendReJoinReq+0x78>)
 801096c:	4a13      	ldr	r2, [pc, #76]	; (80109bc <SendReJoinReq+0x7c>)
 801096e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8010972:	4b11      	ldr	r3, [pc, #68]	; (80109b8 <SendReJoinReq+0x78>)
 8010974:	22ff      	movs	r2, #255	; 0xff
 8010976:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 801097a:	7b3b      	ldrb	r3, [r7, #12]
 801097c:	f36f 1347 	bfc	r3, #5, #3
 8010980:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8010982:	7b3a      	ldrb	r2, [r7, #12]
 8010984:	4b0c      	ldr	r3, [pc, #48]	; (80109b8 <SendReJoinReq+0x78>)
 8010986:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 801098a:	480d      	ldr	r0, [pc, #52]	; (80109c0 <SendReJoinReq+0x80>)
 801098c:	f7fb ff38 	bl	800c800 <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 8010990:	480c      	ldr	r0, [pc, #48]	; (80109c4 <SendReJoinReq+0x84>)
 8010992:	f7fb ff05 	bl	800c7a0 <SecureElementGetDevEui>

            allowDelayedTx = false;
 8010996:	2300      	movs	r3, #0
 8010998:	73fb      	strb	r3, [r7, #15]

            break;
 801099a:	e002      	b.n	80109a2 <SendReJoinReq+0x62>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 801099c:	2302      	movs	r3, #2
 801099e:	73bb      	strb	r3, [r7, #14]
            break;
 80109a0:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 80109a2:	7bfb      	ldrb	r3, [r7, #15]
 80109a4:	4618      	mov	r0, r3
 80109a6:	f000 f8ff 	bl	8010ba8 <ScheduleTx>
 80109aa:	4603      	mov	r3, r0
 80109ac:	73bb      	strb	r3, [r7, #14]
    return status;
 80109ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80109b0:	4618      	mov	r0, r3
 80109b2:	3710      	adds	r7, #16
 80109b4:	46bd      	mov	sp, r7
 80109b6:	bd80      	pop	{r7, pc}
 80109b8:	20000740 	.word	0x20000740
 80109bc:	20000742 	.word	0x20000742
 80109c0:	2000084e 	.word	0x2000084e
 80109c4:	20000856 	.word	0x20000856

080109c8 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 80109c8:	b580      	push	{r7, lr}
 80109ca:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 80109cc:	f002 fd38 	bl	8013440 <LoRaMacClassBIsBeaconExpected>
 80109d0:	4603      	mov	r3, r0
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d001      	beq.n	80109da <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 80109d6:	230e      	movs	r3, #14
 80109d8:	e013      	b.n	8010a02 <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80109da:	4b0b      	ldr	r3, [pc, #44]	; (8010a08 <CheckForClassBCollision+0x40>)
 80109dc:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80109e0:	2b01      	cmp	r3, #1
 80109e2:	d10d      	bne.n	8010a00 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 80109e4:	f002 fd33 	bl	801344e <LoRaMacClassBIsPingExpected>
 80109e8:	4603      	mov	r3, r0
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d001      	beq.n	80109f2 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 80109ee:	230f      	movs	r3, #15
 80109f0:	e007      	b.n	8010a02 <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 80109f2:	f002 fd33 	bl	801345c <LoRaMacClassBIsMulticastExpected>
 80109f6:	4603      	mov	r3, r0
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d001      	beq.n	8010a00 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 80109fc:	230f      	movs	r3, #15
 80109fe:	e000      	b.n	8010a02 <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 8010a00:	2300      	movs	r3, #0
}
 8010a02:	4618      	mov	r0, r3
 8010a04:	bd80      	pop	{r7, pc}
 8010a06:	bf00      	nop
 8010a08:	20000c5c 	.word	0x20000c5c

08010a0c <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 8010a0c:	b590      	push	{r4, r7, lr}
 8010a0e:	b083      	sub	sp, #12
 8010a10:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010a12:	4b2d      	ldr	r3, [pc, #180]	; (8010ac8 <ComputeRxWindowParameters+0xbc>)
 8010a14:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8010a18:	4b2b      	ldr	r3, [pc, #172]	; (8010ac8 <ComputeRxWindowParameters+0xbc>)
 8010a1a:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8010a1e:	4b2a      	ldr	r3, [pc, #168]	; (8010ac8 <ComputeRxWindowParameters+0xbc>)
 8010a20:	f893 107d 	ldrb.w	r1, [r3, #125]	; 0x7d
 8010a24:	4b28      	ldr	r3, [pc, #160]	; (8010ac8 <ComputeRxWindowParameters+0xbc>)
 8010a26:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 8010a2a:	4b27      	ldr	r3, [pc, #156]	; (8010ac8 <ComputeRxWindowParameters+0xbc>)
 8010a2c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8010a30:	b25b      	sxtb	r3, r3
 8010a32:	f004 fe68 	bl	8015706 <RegionApplyDrOffset>
 8010a36:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010a38:	b259      	sxtb	r1, r3
 8010a3a:	4b23      	ldr	r3, [pc, #140]	; (8010ac8 <ComputeRxWindowParameters+0xbc>)
 8010a3c:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8010a40:	4b21      	ldr	r3, [pc, #132]	; (8010ac8 <ComputeRxWindowParameters+0xbc>)
 8010a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010a44:	4821      	ldr	r0, [pc, #132]	; (8010acc <ComputeRxWindowParameters+0xc0>)
 8010a46:	9000      	str	r0, [sp, #0]
 8010a48:	4620      	mov	r0, r4
 8010a4a:	f004 fd1e 	bl	801548a <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010a4e:	4b1e      	ldr	r3, [pc, #120]	; (8010ac8 <ComputeRxWindowParameters+0xbc>)
 8010a50:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 8010a54:	4b1c      	ldr	r3, [pc, #112]	; (8010ac8 <ComputeRxWindowParameters+0xbc>)
 8010a56:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010a5a:	b259      	sxtb	r1, r3
 8010a5c:	4b1a      	ldr	r3, [pc, #104]	; (8010ac8 <ComputeRxWindowParameters+0xbc>)
 8010a5e:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8010a62:	4b19      	ldr	r3, [pc, #100]	; (8010ac8 <ComputeRxWindowParameters+0xbc>)
 8010a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010a66:	4c1a      	ldr	r4, [pc, #104]	; (8010ad0 <ComputeRxWindowParameters+0xc4>)
 8010a68:	9400      	str	r4, [sp, #0]
 8010a6a:	f004 fd0e 	bl	801548a <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8010a6e:	4b16      	ldr	r3, [pc, #88]	; (8010ac8 <ComputeRxWindowParameters+0xbc>)
 8010a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010a72:	4a18      	ldr	r2, [pc, #96]	; (8010ad4 <ComputeRxWindowParameters+0xc8>)
 8010a74:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8010a78:	4413      	add	r3, r2
 8010a7a:	4a16      	ldr	r2, [pc, #88]	; (8010ad4 <ComputeRxWindowParameters+0xc8>)
 8010a7c:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8010a80:	4b11      	ldr	r3, [pc, #68]	; (8010ac8 <ComputeRxWindowParameters+0xbc>)
 8010a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a84:	4a13      	ldr	r2, [pc, #76]	; (8010ad4 <ComputeRxWindowParameters+0xc8>)
 8010a86:	f8d2 23dc 	ldr.w	r2, [r2, #988]	; 0x3dc
 8010a8a:	4413      	add	r3, r2
 8010a8c:	4a11      	ldr	r2, [pc, #68]	; (8010ad4 <ComputeRxWindowParameters+0xc8>)
 8010a8e:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 8010a92:	4b10      	ldr	r3, [pc, #64]	; (8010ad4 <ComputeRxWindowParameters+0xc8>)
 8010a94:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8010a98:	2b04      	cmp	r3, #4
 8010a9a:	d011      	beq.n	8010ac0 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8010a9c:	4b0a      	ldr	r3, [pc, #40]	; (8010ac8 <ComputeRxWindowParameters+0xbc>)
 8010a9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010aa0:	4a0c      	ldr	r2, [pc, #48]	; (8010ad4 <ComputeRxWindowParameters+0xc8>)
 8010aa2:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8010aa6:	4413      	add	r3, r2
 8010aa8:	4a0a      	ldr	r2, [pc, #40]	; (8010ad4 <ComputeRxWindowParameters+0xc8>)
 8010aaa:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8010aae:	4b06      	ldr	r3, [pc, #24]	; (8010ac8 <ComputeRxWindowParameters+0xbc>)
 8010ab0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010ab2:	4a08      	ldr	r2, [pc, #32]	; (8010ad4 <ComputeRxWindowParameters+0xc8>)
 8010ab4:	f8d2 23dc 	ldr.w	r2, [r2, #988]	; 0x3dc
 8010ab8:	4413      	add	r3, r2
 8010aba:	4a06      	ldr	r2, [pc, #24]	; (8010ad4 <ComputeRxWindowParameters+0xc8>)
 8010abc:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 8010ac0:	bf00      	nop
 8010ac2:	3704      	adds	r7, #4
 8010ac4:	46bd      	mov	sp, r7
 8010ac6:	bd90      	pop	{r4, r7, pc}
 8010ac8:	20000c5c 	.word	0x20000c5c
 8010acc:	20000af8 	.word	0x20000af8
 8010ad0:	20000b10 	.word	0x20000b10
 8010ad4:	20000740 	.word	0x20000740

08010ad8 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 8010ad8:	b580      	push	{r7, lr}
 8010ada:	b082      	sub	sp, #8
 8010adc:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 8010ade:	2300      	movs	r3, #0
 8010ae0:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8010ae2:	4b13      	ldr	r3, [pc, #76]	; (8010b30 <VerifyTxFrame+0x58>)
 8010ae4:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d01b      	beq.n	8010b24 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8010aec:	1d3b      	adds	r3, r7, #4
 8010aee:	4618      	mov	r0, r3
 8010af0:	f002 ff6e 	bl	80139d0 <LoRaMacCommandsGetSizeSerializedCmds>
 8010af4:	4603      	mov	r3, r0
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d001      	beq.n	8010afe <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010afa:	2313      	movs	r3, #19
 8010afc:	e013      	b.n	8010b26 <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8010afe:	4b0d      	ldr	r3, [pc, #52]	; (8010b34 <VerifyTxFrame+0x5c>)
 8010b00:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8010b04:	4a0a      	ldr	r2, [pc, #40]	; (8010b30 <VerifyTxFrame+0x58>)
 8010b06:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 8010b0a:	687a      	ldr	r2, [r7, #4]
 8010b0c:	b2d2      	uxtb	r2, r2
 8010b0e:	4618      	mov	r0, r3
 8010b10:	f7ff f932 	bl	800fd78 <ValidatePayloadLength>
 8010b14:	4603      	mov	r3, r0
 8010b16:	f083 0301 	eor.w	r3, r3, #1
 8010b1a:	b2db      	uxtb	r3, r3
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d001      	beq.n	8010b24 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 8010b20:	2308      	movs	r3, #8
 8010b22:	e000      	b.n	8010b26 <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 8010b24:	2300      	movs	r3, #0
}
 8010b26:	4618      	mov	r0, r3
 8010b28:	3708      	adds	r7, #8
 8010b2a:	46bd      	mov	sp, r7
 8010b2c:	bd80      	pop	{r7, pc}
 8010b2e:	bf00      	nop
 8010b30:	20000c5c 	.word	0x20000c5c
 8010b34:	20000740 	.word	0x20000740

08010b38 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 8010b38:	b580      	push	{r7, lr}
 8010b3a:	b082      	sub	sp, #8
 8010b3c:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 8010b3e:	4b18      	ldr	r3, [pc, #96]	; (8010ba0 <SerializeTxFrame+0x68>)
 8010b40:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d002      	beq.n	8010b4e <SerializeTxFrame+0x16>
 8010b48:	2b04      	cmp	r3, #4
 8010b4a:	d011      	beq.n	8010b70 <SerializeTxFrame+0x38>
 8010b4c:	e021      	b.n	8010b92 <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8010b4e:	4815      	ldr	r0, [pc, #84]	; (8010ba4 <SerializeTxFrame+0x6c>)
 8010b50:	f004 fa6c 	bl	801502c <LoRaMacSerializerJoinRequest>
 8010b54:	4603      	mov	r3, r0
 8010b56:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8010b58:	79fb      	ldrb	r3, [r7, #7]
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d001      	beq.n	8010b62 <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010b5e:	2311      	movs	r3, #17
 8010b60:	e01a      	b.n	8010b98 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8010b62:	4b0f      	ldr	r3, [pc, #60]	; (8010ba0 <SerializeTxFrame+0x68>)
 8010b64:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8010b68:	b29a      	uxth	r2, r3
 8010b6a:	4b0d      	ldr	r3, [pc, #52]	; (8010ba0 <SerializeTxFrame+0x68>)
 8010b6c:	801a      	strh	r2, [r3, #0]
            break;
 8010b6e:	e012      	b.n	8010b96 <SerializeTxFrame+0x5e>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8010b70:	480c      	ldr	r0, [pc, #48]	; (8010ba4 <SerializeTxFrame+0x6c>)
 8010b72:	f004 fadd 	bl	8015130 <LoRaMacSerializerData>
 8010b76:	4603      	mov	r3, r0
 8010b78:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8010b7a:	79fb      	ldrb	r3, [r7, #7]
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d001      	beq.n	8010b84 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010b80:	2311      	movs	r3, #17
 8010b82:	e009      	b.n	8010b98 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8010b84:	4b06      	ldr	r3, [pc, #24]	; (8010ba0 <SerializeTxFrame+0x68>)
 8010b86:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8010b8a:	b29a      	uxth	r2, r3
 8010b8c:	4b04      	ldr	r3, [pc, #16]	; (8010ba0 <SerializeTxFrame+0x68>)
 8010b8e:	801a      	strh	r2, [r3, #0]
            break;
 8010b90:	e001      	b.n	8010b96 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8010b92:	2303      	movs	r3, #3
 8010b94:	e000      	b.n	8010b98 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 8010b96:	2300      	movs	r3, #0
}
 8010b98:	4618      	mov	r0, r3
 8010b9a:	3708      	adds	r7, #8
 8010b9c:	46bd      	mov	sp, r7
 8010b9e:	bd80      	pop	{r7, pc}
 8010ba0:	20000740 	.word	0x20000740
 8010ba4:	20000848 	.word	0x20000848

08010ba8 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8010ba8:	b580      	push	{r7, lr}
 8010baa:	b090      	sub	sp, #64	; 0x40
 8010bac:	af02      	add	r7, sp, #8
 8010bae:	4603      	mov	r3, r0
 8010bb0:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010bb2:	2303      	movs	r3, #3
 8010bb4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8010bb8:	f7ff ff06 	bl	80109c8 <CheckForClassBCollision>
 8010bbc:	4603      	mov	r3, r0
 8010bbe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8010bc2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d002      	beq.n	8010bd0 <ScheduleTx+0x28>
    {
        return status;
 8010bca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010bce:	e092      	b.n	8010cf6 <ScheduleTx+0x14e>
    }

    // Update back-off
    CalculateBackOff( );
 8010bd0:	f000 f8f8 	bl	8010dc4 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8010bd4:	f7ff ffb0 	bl	8010b38 <SerializeTxFrame>
 8010bd8:	4603      	mov	r3, r0
 8010bda:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8010bde:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d002      	beq.n	8010bec <ScheduleTx+0x44>
    {
        return status;
 8010be6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010bea:	e084      	b.n	8010cf6 <ScheduleTx+0x14e>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8010bec:	4b44      	ldr	r3, [pc, #272]	; (8010d00 <ScheduleTx+0x158>)
 8010bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010bf0:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010bf2:	4b43      	ldr	r3, [pc, #268]	; (8010d00 <ScheduleTx+0x158>)
 8010bf4:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010bf8:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8010bfa:	4b41      	ldr	r3, [pc, #260]	; (8010d00 <ScheduleTx+0x158>)
 8010bfc:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8010c00:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8010c02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010c06:	4618      	mov	r0, r3
 8010c08:	f00b fe0a 	bl	801c820 <SysTimeGetMcuTime>
 8010c0c:	4638      	mov	r0, r7
 8010c0e:	4b3c      	ldr	r3, [pc, #240]	; (8010d00 <ScheduleTx+0x158>)
 8010c10:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 8010c14:	9200      	str	r2, [sp, #0]
 8010c16:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8010c1a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8010c1e:	ca06      	ldmia	r2, {r1, r2}
 8010c20:	f00b fd5f 	bl	801c6e2 <SysTimeSub>
 8010c24:	f107 0320 	add.w	r3, r7, #32
 8010c28:	463a      	mov	r2, r7
 8010c2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010c2e:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8010c32:	4b33      	ldr	r3, [pc, #204]	; (8010d00 <ScheduleTx+0x158>)
 8010c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c36:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 8010c38:	2300      	movs	r3, #0
 8010c3a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 8010c3e:	2301      	movs	r3, #1
 8010c40:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8010c42:	4b30      	ldr	r3, [pc, #192]	; (8010d04 <ScheduleTx+0x15c>)
 8010c44:	881b      	ldrh	r3, [r3, #0]
 8010c46:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8010c48:	4b2d      	ldr	r3, [pc, #180]	; (8010d00 <ScheduleTx+0x158>)
 8010c4a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d104      	bne.n	8010c5c <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 8010c52:	2301      	movs	r3, #1
 8010c54:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 8010c58:	2300      	movs	r3, #0
 8010c5a:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 8010c5c:	4b28      	ldr	r3, [pc, #160]	; (8010d00 <ScheduleTx+0x158>)
 8010c5e:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8010c62:	f107 0114 	add.w	r1, r7, #20
 8010c66:	4b28      	ldr	r3, [pc, #160]	; (8010d08 <ScheduleTx+0x160>)
 8010c68:	9300      	str	r3, [sp, #0]
 8010c6a:	4b28      	ldr	r3, [pc, #160]	; (8010d0c <ScheduleTx+0x164>)
 8010c6c:	4a28      	ldr	r2, [pc, #160]	; (8010d10 <ScheduleTx+0x168>)
 8010c6e:	f004 fd27 	bl	80156c0 <RegionNextChannel>
 8010c72:	4603      	mov	r3, r0
 8010c74:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 8010c78:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d025      	beq.n	8010ccc <ScheduleTx+0x124>
    {
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 8010c80:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010c84:	2b0b      	cmp	r3, #11
 8010c86:	d11e      	bne.n	8010cc6 <ScheduleTx+0x11e>
        {
            if( MacCtx.DutyCycleWaitTime != 0 )
 8010c88:	4b1e      	ldr	r3, [pc, #120]	; (8010d04 <ScheduleTx+0x15c>)
 8010c8a:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d01c      	beq.n	8010ccc <ScheduleTx+0x124>
            {
                if( allowDelayedTx == true )
 8010c92:	7bfb      	ldrb	r3, [r7, #15]
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d013      	beq.n	8010cc0 <ScheduleTx+0x118>
                {
                    // Allow delayed transmissions. We have to allow it in case
                    // the MAC must retransmit a frame with the frame repetitions
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8010c98:	4b1a      	ldr	r3, [pc, #104]	; (8010d04 <ScheduleTx+0x15c>)
 8010c9a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010c9e:	f043 0320 	orr.w	r3, r3, #32
 8010ca2:	4a18      	ldr	r2, [pc, #96]	; (8010d04 <ScheduleTx+0x15c>)
 8010ca4:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8010ca8:	4b16      	ldr	r3, [pc, #88]	; (8010d04 <ScheduleTx+0x15c>)
 8010caa:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8010cae:	4619      	mov	r1, r3
 8010cb0:	4818      	ldr	r0, [pc, #96]	; (8010d14 <ScheduleTx+0x16c>)
 8010cb2:	f00c fb55 	bl	801d360 <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 8010cb6:	4817      	ldr	r0, [pc, #92]	; (8010d14 <ScheduleTx+0x16c>)
 8010cb8:	f00c fa74 	bl	801d1a4 <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 8010cbc:	2300      	movs	r3, #0
 8010cbe:	e01a      	b.n	8010cf6 <ScheduleTx+0x14e>
                }
                // Need to delay, but allowDelayedTx does not allow it
                return status;
 8010cc0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010cc4:	e017      	b.n	8010cf6 <ScheduleTx+0x14e>
            }
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8010cc6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010cca:	e014      	b.n	8010cf6 <ScheduleTx+0x14e>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 8010ccc:	f7ff fe9e 	bl	8010a0c <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 8010cd0:	f7ff ff02 	bl	8010ad8 <VerifyTxFrame>
 8010cd4:	4603      	mov	r3, r0
 8010cd6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8010cda:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d002      	beq.n	8010ce8 <ScheduleTx+0x140>
    {
        return status;
 8010ce2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010ce6:	e006      	b.n	8010cf6 <ScheduleTx+0x14e>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8010ce8:	4b06      	ldr	r3, [pc, #24]	; (8010d04 <ScheduleTx+0x15c>)
 8010cea:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 8010cee:	4618      	mov	r0, r3
 8010cf0:	f000 fb76 	bl	80113e0 <SendFrameOnChannel>
 8010cf4:	4603      	mov	r3, r0
}
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	3738      	adds	r7, #56	; 0x38
 8010cfa:	46bd      	mov	sp, r7
 8010cfc:	bd80      	pop	{r7, pc}
 8010cfe:	bf00      	nop
 8010d00:	20000c5c 	.word	0x20000c5c
 8010d04:	20000740 	.word	0x20000740
 8010d08:	20000c8c 	.word	0x20000c8c
 8010d0c:	20000bd4 	.word	0x20000bd4
 8010d10:	20000b5b 	.word	0x20000b5b
 8010d14:	20000aa8 	.word	0x20000aa8

08010d18 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8010d18:	b580      	push	{r7, lr}
 8010d1a:	b084      	sub	sp, #16
 8010d1c:	af00      	add	r7, sp, #0
 8010d1e:	4603      	mov	r3, r0
 8010d20:	460a      	mov	r2, r1
 8010d22:	71fb      	strb	r3, [r7, #7]
 8010d24:	4613      	mov	r3, r2
 8010d26:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8010d28:	2312      	movs	r3, #18
 8010d2a:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 8010d2c:	2300      	movs	r3, #0
 8010d2e:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 8010d30:	4b22      	ldr	r3, [pc, #136]	; (8010dbc <SecureFrame+0xa4>)
 8010d32:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d002      	beq.n	8010d40 <SecureFrame+0x28>
 8010d3a:	2b04      	cmp	r3, #4
 8010d3c:	d011      	beq.n	8010d62 <SecureFrame+0x4a>
 8010d3e:	e036      	b.n	8010dae <SecureFrame+0x96>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8010d40:	481f      	ldr	r0, [pc, #124]	; (8010dc0 <SecureFrame+0xa8>)
 8010d42:	f003 fd3f 	bl	80147c4 <LoRaMacCryptoPrepareJoinRequest>
 8010d46:	4603      	mov	r3, r0
 8010d48:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8010d4a:	7bfb      	ldrb	r3, [r7, #15]
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d001      	beq.n	8010d54 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010d50:	2311      	movs	r3, #17
 8010d52:	e02f      	b.n	8010db4 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8010d54:	4b19      	ldr	r3, [pc, #100]	; (8010dbc <SecureFrame+0xa4>)
 8010d56:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8010d5a:	b29a      	uxth	r2, r3
 8010d5c:	4b17      	ldr	r3, [pc, #92]	; (8010dbc <SecureFrame+0xa4>)
 8010d5e:	801a      	strh	r2, [r3, #0]
            break;
 8010d60:	e027      	b.n	8010db2 <SecureFrame+0x9a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8010d62:	f107 0308 	add.w	r3, r7, #8
 8010d66:	4618      	mov	r0, r3
 8010d68:	f003 fc66 	bl	8014638 <LoRaMacCryptoGetFCntUp>
 8010d6c:	4603      	mov	r3, r0
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d001      	beq.n	8010d76 <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8010d72:	2312      	movs	r3, #18
 8010d74:	e01e      	b.n	8010db4 <SecureFrame+0x9c>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 8010d76:	4b11      	ldr	r3, [pc, #68]	; (8010dbc <SecureFrame+0xa4>)
 8010d78:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d002      	beq.n	8010d86 <SecureFrame+0x6e>
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 8010d80:	68bb      	ldr	r3, [r7, #8]
 8010d82:	3b01      	subs	r3, #1
 8010d84:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8010d86:	68b8      	ldr	r0, [r7, #8]
 8010d88:	79ba      	ldrb	r2, [r7, #6]
 8010d8a:	79f9      	ldrb	r1, [r7, #7]
 8010d8c:	4b0c      	ldr	r3, [pc, #48]	; (8010dc0 <SecureFrame+0xa8>)
 8010d8e:	f003 fe41 	bl	8014a14 <LoRaMacCryptoSecureMessage>
 8010d92:	4603      	mov	r3, r0
 8010d94:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8010d96:	7bfb      	ldrb	r3, [r7, #15]
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d001      	beq.n	8010da0 <SecureFrame+0x88>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010d9c:	2311      	movs	r3, #17
 8010d9e:	e009      	b.n	8010db4 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8010da0:	4b06      	ldr	r3, [pc, #24]	; (8010dbc <SecureFrame+0xa4>)
 8010da2:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8010da6:	b29a      	uxth	r2, r3
 8010da8:	4b04      	ldr	r3, [pc, #16]	; (8010dbc <SecureFrame+0xa4>)
 8010daa:	801a      	strh	r2, [r3, #0]
            break;
 8010dac:	e001      	b.n	8010db2 <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8010dae:	2303      	movs	r3, #3
 8010db0:	e000      	b.n	8010db4 <SecureFrame+0x9c>
    }
    return LORAMAC_STATUS_OK;
 8010db2:	2300      	movs	r3, #0
}
 8010db4:	4618      	mov	r0, r3
 8010db6:	3710      	adds	r7, #16
 8010db8:	46bd      	mov	sp, r7
 8010dba:	bd80      	pop	{r7, pc}
 8010dbc:	20000740 	.word	0x20000740
 8010dc0:	20000848 	.word	0x20000848

08010dc4 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8010dc4:	b480      	push	{r7}
 8010dc6:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8010dc8:	4b09      	ldr	r3, [pc, #36]	; (8010df0 <CalculateBackOff+0x2c>)
 8010dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d10a      	bne.n	8010de6 <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8010dd0:	4b07      	ldr	r3, [pc, #28]	; (8010df0 <CalculateBackOff+0x2c>)
 8010dd2:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 8010dd6:	3b01      	subs	r3, #1
 8010dd8:	4a06      	ldr	r2, [pc, #24]	; (8010df4 <CalculateBackOff+0x30>)
 8010dda:	f8d2 241c 	ldr.w	r2, [r2, #1052]	; 0x41c
 8010dde:	fb02 f303 	mul.w	r3, r2, r3
 8010de2:	4a03      	ldr	r2, [pc, #12]	; (8010df0 <CalculateBackOff+0x2c>)
 8010de4:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 8010de6:	bf00      	nop
 8010de8:	46bd      	mov	sp, r7
 8010dea:	bc80      	pop	{r7}
 8010dec:	4770      	bx	lr
 8010dee:	bf00      	nop
 8010df0:	20000c5c 	.word	0x20000c5c
 8010df4:	20000740 	.word	0x20000740

08010df8 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8010df8:	b580      	push	{r7, lr}
 8010dfa:	b082      	sub	sp, #8
 8010dfc:	af00      	add	r7, sp, #0
 8010dfe:	4603      	mov	r3, r0
 8010e00:	7139      	strb	r1, [r7, #4]
 8010e02:	71fb      	strb	r3, [r7, #7]
 8010e04:	4613      	mov	r3, r2
 8010e06:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8010e08:	79fb      	ldrb	r3, [r7, #7]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d002      	beq.n	8010e14 <RemoveMacCommands+0x1c>
 8010e0e:	79fb      	ldrb	r3, [r7, #7]
 8010e10:	2b01      	cmp	r3, #1
 8010e12:	d10d      	bne.n	8010e30 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 8010e14:	79bb      	ldrb	r3, [r7, #6]
 8010e16:	2b01      	cmp	r3, #1
 8010e18:	d108      	bne.n	8010e2c <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 8010e1a:	793b      	ldrb	r3, [r7, #4]
 8010e1c:	f003 0320 	and.w	r3, r3, #32
 8010e20:	b2db      	uxtb	r3, r3
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d004      	beq.n	8010e30 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8010e26:	f002 fda7 	bl	8013978 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 8010e2a:	e001      	b.n	8010e30 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8010e2c:	f002 fda4 	bl	8013978 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8010e30:	bf00      	nop
 8010e32:	3708      	adds	r7, #8
 8010e34:	46bd      	mov	sp, r7
 8010e36:	bd80      	pop	{r7, pc}

08010e38 <ResetMacParameters>:

static void ResetMacParameters( bool isRejoin )
{
 8010e38:	b5b0      	push	{r4, r5, r7, lr}
 8010e3a:	b092      	sub	sp, #72	; 0x48
 8010e3c:	af00      	add	r7, sp, #0
 8010e3e:	4603      	mov	r3, r0
 8010e40:	71fb      	strb	r3, [r7, #7]
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( isRejoin == false )
 8010e42:	79fb      	ldrb	r3, [r7, #7]
 8010e44:	f083 0301 	eor.w	r3, r3, #1
 8010e48:	b2db      	uxtb	r3, r3
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d003      	beq.n	8010e56 <ResetMacParameters+0x1e>
    {
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8010e4e:	4b88      	ldr	r3, [pc, #544]	; (8011070 <ResetMacParameters+0x238>)
 8010e50:	2200      	movs	r2, #0
 8010e52:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
    }

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 8010e56:	4b86      	ldr	r3, [pc, #536]	; (8011070 <ResetMacParameters+0x238>)
 8010e58:	2200      	movs	r2, #0
 8010e5a:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 8010e5c:	4b85      	ldr	r3, [pc, #532]	; (8011074 <ResetMacParameters+0x23c>)
 8010e5e:	2200      	movs	r2, #0
 8010e60:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 8010e64:	4b83      	ldr	r3, [pc, #524]	; (8011074 <ResetMacParameters+0x23c>)
 8010e66:	2200      	movs	r2, #0
 8010e68:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
    MacCtx.ResponseTimeoutStartTime = 0;
 8010e6c:	4b81      	ldr	r3, [pc, #516]	; (8011074 <ResetMacParameters+0x23c>)
 8010e6e:	2200      	movs	r2, #0
 8010e70:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 8010e74:	4b7e      	ldr	r3, [pc, #504]	; (8011070 <ResetMacParameters+0x238>)
 8010e76:	2200      	movs	r2, #0
 8010e78:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8010e7c:	4b7c      	ldr	r3, [pc, #496]	; (8011070 <ResetMacParameters+0x238>)
 8010e7e:	2201      	movs	r2, #1
 8010e80:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8010e84:	4b7a      	ldr	r3, [pc, #488]	; (8011070 <ResetMacParameters+0x238>)
 8010e86:	f993 20dc 	ldrsb.w	r2, [r3, #220]	; 0xdc
 8010e8a:	4b79      	ldr	r3, [pc, #484]	; (8011070 <ResetMacParameters+0x238>)
 8010e8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8010e90:	4b77      	ldr	r3, [pc, #476]	; (8011070 <ResetMacParameters+0x238>)
 8010e92:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 8010e96:	4b76      	ldr	r3, [pc, #472]	; (8011070 <ResetMacParameters+0x238>)
 8010e98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8010e9c:	4b74      	ldr	r3, [pc, #464]	; (8011070 <ResetMacParameters+0x238>)
 8010e9e:	f893 20b1 	ldrb.w	r2, [r3, #177]	; 0xb1
 8010ea2:	4b73      	ldr	r3, [pc, #460]	; (8011070 <ResetMacParameters+0x238>)
 8010ea4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8010ea8:	4b71      	ldr	r3, [pc, #452]	; (8011070 <ResetMacParameters+0x238>)
 8010eaa:	4a71      	ldr	r2, [pc, #452]	; (8011070 <ResetMacParameters+0x238>)
 8010eac:	336c      	adds	r3, #108	; 0x6c
 8010eae:	32b4      	adds	r2, #180	; 0xb4
 8010eb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010eb4:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8010eb8:	4b6d      	ldr	r3, [pc, #436]	; (8011070 <ResetMacParameters+0x238>)
 8010eba:	4a6d      	ldr	r2, [pc, #436]	; (8011070 <ResetMacParameters+0x238>)
 8010ebc:	3374      	adds	r3, #116	; 0x74
 8010ebe:	32bc      	adds	r2, #188	; 0xbc
 8010ec0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010ec4:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8010ec8:	4b69      	ldr	r3, [pc, #420]	; (8011070 <ResetMacParameters+0x238>)
 8010eca:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
 8010ece:	4b68      	ldr	r3, [pc, #416]	; (8011070 <ResetMacParameters+0x238>)
 8010ed0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8010ed4:	4b66      	ldr	r3, [pc, #408]	; (8011070 <ResetMacParameters+0x238>)
 8010ed6:	f893 20c5 	ldrb.w	r2, [r3, #197]	; 0xc5
 8010eda:	4b65      	ldr	r3, [pc, #404]	; (8011070 <ResetMacParameters+0x238>)
 8010edc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8010ee0:	4b63      	ldr	r3, [pc, #396]	; (8011070 <ResetMacParameters+0x238>)
 8010ee2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8010ee6:	4a62      	ldr	r2, [pc, #392]	; (8011070 <ResetMacParameters+0x238>)
 8010ee8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8010eec:	4b60      	ldr	r3, [pc, #384]	; (8011070 <ResetMacParameters+0x238>)
 8010eee:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8010ef2:	4a5f      	ldr	r2, [pc, #380]	; (8011070 <ResetMacParameters+0x238>)
 8010ef4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 8010ef8:	4b5d      	ldr	r3, [pc, #372]	; (8011070 <ResetMacParameters+0x238>)
 8010efa:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 8010efe:	4b5c      	ldr	r3, [pc, #368]	; (8011070 <ResetMacParameters+0x238>)
 8010f00:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 8010f04:	4b5a      	ldr	r3, [pc, #360]	; (8011070 <ResetMacParameters+0x238>)
 8010f06:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 8010f0a:	4b59      	ldr	r3, [pc, #356]	; (8011070 <ResetMacParameters+0x238>)
 8010f0c:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

    MacCtx.NodeAckRequested = false;
 8010f10:	4b58      	ldr	r3, [pc, #352]	; (8011074 <ResetMacParameters+0x23c>)
 8010f12:	2200      	movs	r2, #0
 8010f14:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
    Nvm.MacGroup1.SrvAckRequested = false;
 8010f18:	4b55      	ldr	r3, [pc, #340]	; (8011070 <ResetMacParameters+0x238>)
 8010f1a:	2200      	movs	r2, #0
 8010f1c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8010f20:	4b53      	ldr	r3, [pc, #332]	; (8011070 <ResetMacParameters+0x238>)
 8010f22:	2200      	movs	r2, #0
 8010f24:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
    Nvm.MacGroup2.DownlinkReceived = false;
 8010f28:	4b51      	ldr	r3, [pc, #324]	; (8011070 <ResetMacParameters+0x238>)
 8010f2a:	2200      	movs	r2, #0
 8010f2c:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 8010f30:	4b4f      	ldr	r3, [pc, #316]	; (8011070 <ResetMacParameters+0x238>)
 8010f32:	2200      	movs	r2, #0
 8010f34:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 8010f38:	4b4d      	ldr	r3, [pc, #308]	; (8011070 <ResetMacParameters+0x238>)
 8010f3a:	2200      	movs	r2, #0
 8010f3c:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
    Nvm.MacGroup2.ForceRejoinType = 0;
 8010f40:	4b4b      	ldr	r3, [pc, #300]	; (8011070 <ResetMacParameters+0x238>)
 8010f42:	2200      	movs	r2, #0
 8010f44:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 8010f48:	4b49      	ldr	r3, [pc, #292]	; (8011070 <ResetMacParameters+0x238>)
 8010f4a:	2200      	movs	r2, #0
 8010f4c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 8010f50:	4b47      	ldr	r3, [pc, #284]	; (8011070 <ResetMacParameters+0x238>)
 8010f52:	2200      	movs	r2, #0
 8010f54:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 8010f58:	4b45      	ldr	r3, [pc, #276]	; (8011070 <ResetMacParameters+0x238>)
 8010f5a:	2200      	movs	r2, #0
 8010f5c:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 8010f60:	4b43      	ldr	r3, [pc, #268]	; (8011070 <ResetMacParameters+0x238>)
 8010f62:	2200      	movs	r2, #0
 8010f64:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 8010f68:	4b41      	ldr	r3, [pc, #260]	; (8011070 <ResetMacParameters+0x238>)
 8010f6a:	2200      	movs	r2, #0
 8010f6c:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8010f70:	2301      	movs	r3, #1
 8010f72:	763b      	strb	r3, [r7, #24]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8010f74:	4b40      	ldr	r3, [pc, #256]	; (8011078 <ResetMacParameters+0x240>)
 8010f76:	60fb      	str	r3, [r7, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8010f78:	4b40      	ldr	r3, [pc, #256]	; (801107c <ResetMacParameters+0x244>)
 8010f7a:	613b      	str	r3, [r7, #16]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    params.Bands = &RegionBands;
 8010f7c:	4b40      	ldr	r3, [pc, #256]	; (8011080 <ResetMacParameters+0x248>)
 8010f7e:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8010f80:	4b3b      	ldr	r3, [pc, #236]	; (8011070 <ResetMacParameters+0x238>)
 8010f82:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010f86:	f107 020c 	add.w	r2, r7, #12
 8010f8a:	4611      	mov	r1, r2
 8010f8c:	4618      	mov	r0, r3
 8010f8e:	f004 fa12 	bl	80153b6 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8010f92:	4b38      	ldr	r3, [pc, #224]	; (8011074 <ResetMacParameters+0x23c>)
 8010f94:	2200      	movs	r2, #0
 8010f96:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8010f9a:	4b36      	ldr	r3, [pc, #216]	; (8011074 <ResetMacParameters+0x23c>)
 8010f9c:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 8010fa0:	4b34      	ldr	r3, [pc, #208]	; (8011074 <ResetMacParameters+0x23c>)
 8010fa2:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8010fa6:	4b32      	ldr	r3, [pc, #200]	; (8011070 <ResetMacParameters+0x238>)
 8010fa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010faa:	4a32      	ldr	r2, [pc, #200]	; (8011074 <ResetMacParameters+0x23c>)
 8010fac:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010fb0:	4b2f      	ldr	r3, [pc, #188]	; (8011070 <ResetMacParameters+0x238>)
 8010fb2:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8010fb6:	4b2f      	ldr	r3, [pc, #188]	; (8011074 <ResetMacParameters+0x23c>)
 8010fb8:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8010fbc:	4b2c      	ldr	r3, [pc, #176]	; (8011070 <ResetMacParameters+0x238>)
 8010fbe:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8010fc2:	4b2c      	ldr	r3, [pc, #176]	; (8011074 <ResetMacParameters+0x23c>)
 8010fc4:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 8010fc8:	4b2a      	ldr	r3, [pc, #168]	; (8011074 <ResetMacParameters+0x23c>)
 8010fca:	2200      	movs	r2, #0
 8010fcc:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8010fd0:	4b28      	ldr	r3, [pc, #160]	; (8011074 <ResetMacParameters+0x23c>)
 8010fd2:	2201      	movs	r2, #1
 8010fd4:	f883 23e3 	strb.w	r2, [r3, #995]	; 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8010fd8:	4b25      	ldr	r3, [pc, #148]	; (8011070 <ResetMacParameters+0x238>)
 8010fda:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8010fde:	4b25      	ldr	r3, [pc, #148]	; (8011074 <ResetMacParameters+0x23c>)
 8010fe0:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8010fe4:	4a23      	ldr	r2, [pc, #140]	; (8011074 <ResetMacParameters+0x23c>)
 8010fe6:	4b23      	ldr	r3, [pc, #140]	; (8011074 <ResetMacParameters+0x23c>)
 8010fe8:	f502 747a 	add.w	r4, r2, #1000	; 0x3e8
 8010fec:	f503 7574 	add.w	r5, r3, #976	; 0x3d0
 8010ff0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010ff2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010ff4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010ff8:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8010ffc:	4b1d      	ldr	r3, [pc, #116]	; (8011074 <ResetMacParameters+0x23c>)
 8010ffe:	2201      	movs	r2, #1
 8011000:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8011004:	4b1b      	ldr	r3, [pc, #108]	; (8011074 <ResetMacParameters+0x23c>)
 8011006:	2202      	movs	r2, #2
 8011008:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 801100c:	2300      	movs	r3, #0
 801100e:	643b      	str	r3, [r7, #64]	; 0x40
    classBCallbacks.MacProcessNotify = NULL;
 8011010:	2300      	movs	r3, #0
 8011012:	647b      	str	r3, [r7, #68]	; 0x44

    if( MacCtx.MacCallbacks != NULL )
 8011014:	4b17      	ldr	r3, [pc, #92]	; (8011074 <ResetMacParameters+0x23c>)
 8011016:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801101a:	2b00      	cmp	r3, #0
 801101c:	d009      	beq.n	8011032 <ResetMacParameters+0x1fa>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 801101e:	4b15      	ldr	r3, [pc, #84]	; (8011074 <ResetMacParameters+0x23c>)
 8011020:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011024:	685b      	ldr	r3, [r3, #4]
 8011026:	643b      	str	r3, [r7, #64]	; 0x40
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8011028:	4b12      	ldr	r3, [pc, #72]	; (8011074 <ResetMacParameters+0x23c>)
 801102a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801102e:	695b      	ldr	r3, [r3, #20]
 8011030:	647b      	str	r3, [r7, #68]	; 0x44
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8011032:	4b14      	ldr	r3, [pc, #80]	; (8011084 <ResetMacParameters+0x24c>)
 8011034:	61fb      	str	r3, [r7, #28]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8011036:	4b14      	ldr	r3, [pc, #80]	; (8011088 <ResetMacParameters+0x250>)
 8011038:	623b      	str	r3, [r7, #32]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 801103a:	4b14      	ldr	r3, [pc, #80]	; (801108c <ResetMacParameters+0x254>)
 801103c:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 801103e:	4b14      	ldr	r3, [pc, #80]	; (8011090 <ResetMacParameters+0x258>)
 8011040:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8011042:	4b14      	ldr	r3, [pc, #80]	; (8011094 <ResetMacParameters+0x25c>)
 8011044:	62fb      	str	r3, [r7, #44]	; 0x2c
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8011046:	4b14      	ldr	r3, [pc, #80]	; (8011098 <ResetMacParameters+0x260>)
 8011048:	633b      	str	r3, [r7, #48]	; 0x30
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 801104a:	4b14      	ldr	r3, [pc, #80]	; (801109c <ResetMacParameters+0x264>)
 801104c:	637b      	str	r3, [r7, #52]	; 0x34
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 801104e:	4b14      	ldr	r3, [pc, #80]	; (80110a0 <ResetMacParameters+0x268>)
 8011050:	63bb      	str	r3, [r7, #56]	; 0x38
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 8011052:	4b14      	ldr	r3, [pc, #80]	; (80110a4 <ResetMacParameters+0x26c>)
 8011054:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8011056:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801105a:	f107 031c 	add.w	r3, r7, #28
 801105e:	4a12      	ldr	r2, [pc, #72]	; (80110a8 <ResetMacParameters+0x270>)
 8011060:	4618      	mov	r0, r3
 8011062:	f002 f996 	bl	8013392 <LoRaMacClassBInit>
}
 8011066:	bf00      	nop
 8011068:	3748      	adds	r7, #72	; 0x48
 801106a:	46bd      	mov	sp, r7
 801106c:	bdb0      	pop	{r4, r5, r7, pc}
 801106e:	bf00      	nop
 8011070:	20000c5c 	.word	0x20000c5c
 8011074:	20000740 	.word	0x20000740
 8011078:	20000e80 	.word	0x20000e80
 801107c:	20000e94 	.word	0x20000e94
 8011080:	200017f4 	.word	0x200017f4
 8011084:	20000ba8 	.word	0x20000ba8
 8011088:	20000b60 	.word	0x20000b60
 801108c:	20000b94 	.word	0x20000b94
 8011090:	20000bd1 	.word	0x20000bd1
 8011094:	20000d40 	.word	0x20000d40
 8011098:	20000ca4 	.word	0x20000ca4
 801109c:	20000ca8 	.word	0x20000ca8
 80110a0:	20000d44 	.word	0x20000d44
 80110a4:	20000d8c 	.word	0x20000d8c
 80110a8:	20001210 	.word	0x20001210

080110ac <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 80110ac:	b580      	push	{r7, lr}
 80110ae:	b082      	sub	sp, #8
 80110b0:	af00      	add	r7, sp, #0
 80110b2:	6078      	str	r0, [r7, #4]
 80110b4:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 80110b6:	6878      	ldr	r0, [r7, #4]
 80110b8:	f00c f8e2 	bl	801d280 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 80110bc:	4b11      	ldr	r3, [pc, #68]	; (8011104 <RxWindowSetup+0x58>)
 80110be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110c0:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80110c2:	4b11      	ldr	r3, [pc, #68]	; (8011108 <RxWindowSetup+0x5c>)
 80110c4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80110c8:	4a10      	ldr	r2, [pc, #64]	; (801110c <RxWindowSetup+0x60>)
 80110ca:	6839      	ldr	r1, [r7, #0]
 80110cc:	4618      	mov	r0, r3
 80110ce:	f004 f9ff 	bl	80154d0 <RegionRxConfig>
 80110d2:	4603      	mov	r3, r0
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d010      	beq.n	80110fa <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 80110d8:	4b0d      	ldr	r3, [pc, #52]	; (8011110 <RxWindowSetup+0x64>)
 80110da:	f893 2424 	ldrb.w	r2, [r3, #1060]	; 0x424
 80110de:	4b0c      	ldr	r3, [pc, #48]	; (8011110 <RxWindowSetup+0x64>)
 80110e0:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 80110e4:	4b07      	ldr	r3, [pc, #28]	; (8011104 <RxWindowSetup+0x58>)
 80110e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110e8:	4a07      	ldr	r2, [pc, #28]	; (8011108 <RxWindowSetup+0x5c>)
 80110ea:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80110ec:	4610      	mov	r0, r2
 80110ee:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 80110f0:	683b      	ldr	r3, [r7, #0]
 80110f2:	7cda      	ldrb	r2, [r3, #19]
 80110f4:	4b06      	ldr	r3, [pc, #24]	; (8011110 <RxWindowSetup+0x64>)
 80110f6:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
    }
}
 80110fa:	bf00      	nop
 80110fc:	3708      	adds	r7, #8
 80110fe:	46bd      	mov	sp, r7
 8011100:	bd80      	pop	{r7, pc}
 8011102:	bf00      	nop
 8011104:	0801eb70 	.word	0x0801eb70
 8011108:	20000c5c 	.word	0x20000c5c
 801110c:	20000b64 	.word	0x20000b64
 8011110:	20000740 	.word	0x20000740

08011114 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8011114:	b590      	push	{r4, r7, lr}
 8011116:	b083      	sub	sp, #12
 8011118:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801111a:	4b1e      	ldr	r3, [pc, #120]	; (8011194 <OpenContinuousRxCWindow+0x80>)
 801111c:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8011120:	4b1c      	ldr	r3, [pc, #112]	; (8011194 <OpenContinuousRxCWindow+0x80>)
 8011122:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011126:	b259      	sxtb	r1, r3
 8011128:	4b1a      	ldr	r3, [pc, #104]	; (8011194 <OpenContinuousRxCWindow+0x80>)
 801112a:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 801112e:	4b19      	ldr	r3, [pc, #100]	; (8011194 <OpenContinuousRxCWindow+0x80>)
 8011130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011132:	4c19      	ldr	r4, [pc, #100]	; (8011198 <OpenContinuousRxCWindow+0x84>)
 8011134:	9400      	str	r4, [sp, #0]
 8011136:	f004 f9a8 	bl	801548a <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801113a:	4b18      	ldr	r3, [pc, #96]	; (801119c <OpenContinuousRxCWindow+0x88>)
 801113c:	2202      	movs	r2, #2
 801113e:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8011142:	4b14      	ldr	r3, [pc, #80]	; (8011194 <OpenContinuousRxCWindow+0x80>)
 8011144:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8011148:	4b14      	ldr	r3, [pc, #80]	; (801119c <OpenContinuousRxCWindow+0x88>)
 801114a:	f883 23fc 	strb.w	r2, [r3, #1020]	; 0x3fc
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 801114e:	4b13      	ldr	r3, [pc, #76]	; (801119c <OpenContinuousRxCWindow+0x88>)
 8011150:	2201      	movs	r2, #1
 8011152:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8011156:	4b0f      	ldr	r3, [pc, #60]	; (8011194 <OpenContinuousRxCWindow+0x80>)
 8011158:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801115c:	4a10      	ldr	r2, [pc, #64]	; (80111a0 <OpenContinuousRxCWindow+0x8c>)
 801115e:	490e      	ldr	r1, [pc, #56]	; (8011198 <OpenContinuousRxCWindow+0x84>)
 8011160:	4618      	mov	r0, r3
 8011162:	f004 f9b5 	bl	80154d0 <RegionRxConfig>
 8011166:	4603      	mov	r3, r0
 8011168:	2b00      	cmp	r3, #0
 801116a:	d00f      	beq.n	801118c <OpenContinuousRxCWindow+0x78>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 801116c:	4b0b      	ldr	r3, [pc, #44]	; (801119c <OpenContinuousRxCWindow+0x88>)
 801116e:	f893 2424 	ldrb.w	r2, [r3, #1060]	; 0x424
 8011172:	4b0a      	ldr	r3, [pc, #40]	; (801119c <OpenContinuousRxCWindow+0x88>)
 8011174:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
        Radio.Rx( 0 ); // Continuous mode
 8011178:	4b0a      	ldr	r3, [pc, #40]	; (80111a4 <OpenContinuousRxCWindow+0x90>)
 801117a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801117c:	2000      	movs	r0, #0
 801117e:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8011180:	4b06      	ldr	r3, [pc, #24]	; (801119c <OpenContinuousRxCWindow+0x88>)
 8011182:	f893 23fb 	ldrb.w	r2, [r3, #1019]	; 0x3fb
 8011186:	4b05      	ldr	r3, [pc, #20]	; (801119c <OpenContinuousRxCWindow+0x88>)
 8011188:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
    }
}
 801118c:	bf00      	nop
 801118e:	3704      	adds	r7, #4
 8011190:	46bd      	mov	sp, r7
 8011192:	bd90      	pop	{r4, r7, pc}
 8011194:	20000c5c 	.word	0x20000c5c
 8011198:	20000b28 	.word	0x20000b28
 801119c:	20000740 	.word	0x20000740
 80111a0:	20000b64 	.word	0x20000b64
 80111a4:	0801eb70 	.word	0x0801eb70

080111a8 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 80111a8:	b580      	push	{r7, lr}
 80111aa:	b088      	sub	sp, #32
 80111ac:	af00      	add	r7, sp, #0
 80111ae:	60f8      	str	r0, [r7, #12]
 80111b0:	60b9      	str	r1, [r7, #8]
 80111b2:	603b      	str	r3, [r7, #0]
 80111b4:	4613      	mov	r3, r2
 80111b6:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 80111b8:	4b82      	ldr	r3, [pc, #520]	; (80113c4 <PrepareFrame+0x21c>)
 80111ba:	2200      	movs	r2, #0
 80111bc:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 80111be:	4b81      	ldr	r3, [pc, #516]	; (80113c4 <PrepareFrame+0x21c>)
 80111c0:	2200      	movs	r2, #0
 80111c2:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
    uint32_t fCntUp = 0;
 80111c6:	2300      	movs	r3, #0
 80111c8:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 80111ca:	2300      	movs	r3, #0
 80111cc:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 80111ce:	2300      	movs	r3, #0
 80111d0:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 80111d2:	683b      	ldr	r3, [r7, #0]
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d101      	bne.n	80111dc <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 80111d8:	2300      	movs	r3, #0
 80111da:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 80111dc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80111de:	461a      	mov	r2, r3
 80111e0:	6839      	ldr	r1, [r7, #0]
 80111e2:	4879      	ldr	r0, [pc, #484]	; (80113c8 <PrepareFrame+0x220>)
 80111e4:	f007 feb1 	bl	8018f4a <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 80111e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80111ea:	b2da      	uxtb	r2, r3
 80111ec:	4b75      	ldr	r3, [pc, #468]	; (80113c4 <PrepareFrame+0x21c>)
 80111ee:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	781a      	ldrb	r2, [r3, #0]
 80111f6:	4b73      	ldr	r3, [pc, #460]	; (80113c4 <PrepareFrame+0x21c>)
 80111f8:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	781b      	ldrb	r3, [r3, #0]
 80111fe:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8011202:	b2db      	uxtb	r3, r3
 8011204:	2b07      	cmp	r3, #7
 8011206:	f000 80b9 	beq.w	801137c <PrepareFrame+0x1d4>
 801120a:	2b07      	cmp	r3, #7
 801120c:	f300 80d0 	bgt.w	80113b0 <PrepareFrame+0x208>
 8011210:	2b02      	cmp	r3, #2
 8011212:	d006      	beq.n	8011222 <PrepareFrame+0x7a>
 8011214:	2b04      	cmp	r3, #4
 8011216:	f040 80cb 	bne.w	80113b0 <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 801121a:	4b6a      	ldr	r3, [pc, #424]	; (80113c4 <PrepareFrame+0x21c>)
 801121c:	2201      	movs	r2, #1
 801121e:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8011222:	4b68      	ldr	r3, [pc, #416]	; (80113c4 <PrepareFrame+0x21c>)
 8011224:	2204      	movs	r2, #4
 8011226:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 801122a:	4b66      	ldr	r3, [pc, #408]	; (80113c4 <PrepareFrame+0x21c>)
 801122c:	4a67      	ldr	r2, [pc, #412]	; (80113cc <PrepareFrame+0x224>)
 801122e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8011232:	4b64      	ldr	r3, [pc, #400]	; (80113c4 <PrepareFrame+0x21c>)
 8011234:	22ff      	movs	r2, #255	; 0xff
 8011236:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	781a      	ldrb	r2, [r3, #0]
 801123e:	4b61      	ldr	r3, [pc, #388]	; (80113c4 <PrepareFrame+0x21c>)
 8011240:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8011244:	4a5f      	ldr	r2, [pc, #380]	; (80113c4 <PrepareFrame+0x21c>)
 8011246:	79fb      	ldrb	r3, [r7, #7]
 8011248:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 801124c:	4b60      	ldr	r3, [pc, #384]	; (80113d0 <PrepareFrame+0x228>)
 801124e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8011252:	4a5c      	ldr	r2, [pc, #368]	; (80113c4 <PrepareFrame+0x21c>)
 8011254:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8011258:	68bb      	ldr	r3, [r7, #8]
 801125a:	781a      	ldrb	r2, [r3, #0]
 801125c:	4b59      	ldr	r3, [pc, #356]	; (80113c4 <PrepareFrame+0x21c>)
 801125e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8011262:	4b58      	ldr	r3, [pc, #352]	; (80113c4 <PrepareFrame+0x21c>)
 8011264:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 8011268:	4b56      	ldr	r3, [pc, #344]	; (80113c4 <PrepareFrame+0x21c>)
 801126a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 801126e:	4b55      	ldr	r3, [pc, #340]	; (80113c4 <PrepareFrame+0x21c>)
 8011270:	4a55      	ldr	r2, [pc, #340]	; (80113c8 <PrepareFrame+0x220>)
 8011272:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8011276:	f107 0318 	add.w	r3, r7, #24
 801127a:	4618      	mov	r0, r3
 801127c:	f003 f9dc 	bl	8014638 <LoRaMacCryptoGetFCntUp>
 8011280:	4603      	mov	r3, r0
 8011282:	2b00      	cmp	r3, #0
 8011284:	d001      	beq.n	801128a <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8011286:	2312      	movs	r3, #18
 8011288:	e098      	b.n	80113bc <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 801128a:	69bb      	ldr	r3, [r7, #24]
 801128c:	b29a      	uxth	r2, r3
 801128e:	4b4d      	ldr	r3, [pc, #308]	; (80113c4 <PrepareFrame+0x21c>)
 8011290:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = 0;
 8011294:	4b4b      	ldr	r3, [pc, #300]	; (80113c4 <PrepareFrame+0x21c>)
 8011296:	2200      	movs	r2, #0
 8011298:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 801129c:	4b49      	ldr	r3, [pc, #292]	; (80113c4 <PrepareFrame+0x21c>)
 801129e:	2200      	movs	r2, #0
 80112a0:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 80112a4:	69bb      	ldr	r3, [r7, #24]
 80112a6:	4a47      	ldr	r2, [pc, #284]	; (80113c4 <PrepareFrame+0x21c>)
 80112a8:	f8c2 344c 	str.w	r3, [r2, #1100]	; 0x44c

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80112ac:	f107 0314 	add.w	r3, r7, #20
 80112b0:	4618      	mov	r0, r3
 80112b2:	f002 fb8d 	bl	80139d0 <LoRaMacCommandsGetSizeSerializedCmds>
 80112b6:	4603      	mov	r3, r0
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d001      	beq.n	80112c0 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80112bc:	2313      	movs	r3, #19
 80112be:	e07d      	b.n	80113bc <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 80112c0:	697b      	ldr	r3, [r7, #20]
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d076      	beq.n	80113b4 <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 80112c6:	4b42      	ldr	r3, [pc, #264]	; (80113d0 <PrepareFrame+0x228>)
 80112c8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80112cc:	4618      	mov	r0, r3
 80112ce:	f7fe fd2b 	bl	800fd28 <GetMaxAppPayloadWithoutFOptsLength>
 80112d2:	4603      	mov	r3, r0
 80112d4:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80112d6:	4b3b      	ldr	r3, [pc, #236]	; (80113c4 <PrepareFrame+0x21c>)
 80112d8:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d01d      	beq.n	801131c <PrepareFrame+0x174>
 80112e0:	697b      	ldr	r3, [r7, #20]
 80112e2:	2b0f      	cmp	r3, #15
 80112e4:	d81a      	bhi.n	801131c <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 80112e6:	f107 0314 	add.w	r3, r7, #20
 80112ea:	4a3a      	ldr	r2, [pc, #232]	; (80113d4 <PrepareFrame+0x22c>)
 80112ec:	4619      	mov	r1, r3
 80112ee:	200f      	movs	r0, #15
 80112f0:	f002 fb84 	bl	80139fc <LoRaMacCommandsSerializeCmds>
 80112f4:	4603      	mov	r3, r0
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d001      	beq.n	80112fe <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80112fa:	2313      	movs	r3, #19
 80112fc:	e05e      	b.n	80113bc <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 80112fe:	697b      	ldr	r3, [r7, #20]
 8011300:	f003 030f 	and.w	r3, r3, #15
 8011304:	b2d9      	uxtb	r1, r3
 8011306:	68ba      	ldr	r2, [r7, #8]
 8011308:	7813      	ldrb	r3, [r2, #0]
 801130a:	f361 0303 	bfi	r3, r1, #0, #4
 801130e:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8011310:	68bb      	ldr	r3, [r7, #8]
 8011312:	781a      	ldrb	r2, [r3, #0]
 8011314:	4b2b      	ldr	r3, [pc, #172]	; (80113c4 <PrepareFrame+0x21c>)
 8011316:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 801131a:	e04b      	b.n	80113b4 <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 801131c:	4b29      	ldr	r3, [pc, #164]	; (80113c4 <PrepareFrame+0x21c>)
 801131e:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8011322:	2b00      	cmp	r3, #0
 8011324:	d010      	beq.n	8011348 <PrepareFrame+0x1a0>
 8011326:	697b      	ldr	r3, [r7, #20]
 8011328:	2b0f      	cmp	r3, #15
 801132a:	d90d      	bls.n	8011348 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 801132c:	7ffb      	ldrb	r3, [r7, #31]
 801132e:	f107 0114 	add.w	r1, r7, #20
 8011332:	4a29      	ldr	r2, [pc, #164]	; (80113d8 <PrepareFrame+0x230>)
 8011334:	4618      	mov	r0, r3
 8011336:	f002 fb61 	bl	80139fc <LoRaMacCommandsSerializeCmds>
 801133a:	4603      	mov	r3, r0
 801133c:	2b00      	cmp	r3, #0
 801133e:	d001      	beq.n	8011344 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011340:	2313      	movs	r3, #19
 8011342:	e03b      	b.n	80113bc <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8011344:	230a      	movs	r3, #10
 8011346:	e039      	b.n	80113bc <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8011348:	7ffb      	ldrb	r3, [r7, #31]
 801134a:	f107 0114 	add.w	r1, r7, #20
 801134e:	4a22      	ldr	r2, [pc, #136]	; (80113d8 <PrepareFrame+0x230>)
 8011350:	4618      	mov	r0, r3
 8011352:	f002 fb53 	bl	80139fc <LoRaMacCommandsSerializeCmds>
 8011356:	4603      	mov	r3, r0
 8011358:	2b00      	cmp	r3, #0
 801135a:	d001      	beq.n	8011360 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801135c:	2313      	movs	r3, #19
 801135e:	e02d      	b.n	80113bc <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8011360:	4b18      	ldr	r3, [pc, #96]	; (80113c4 <PrepareFrame+0x21c>)
 8011362:	2200      	movs	r2, #0
 8011364:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8011368:	4b16      	ldr	r3, [pc, #88]	; (80113c4 <PrepareFrame+0x21c>)
 801136a:	4a1b      	ldr	r2, [pc, #108]	; (80113d8 <PrepareFrame+0x230>)
 801136c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8011370:	697b      	ldr	r3, [r7, #20]
 8011372:	b2da      	uxtb	r2, r3
 8011374:	4b13      	ldr	r3, [pc, #76]	; (80113c4 <PrepareFrame+0x21c>)
 8011376:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 801137a:	e01b      	b.n	80113b4 <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 801137c:	683b      	ldr	r3, [r7, #0]
 801137e:	2b00      	cmp	r3, #0
 8011380:	d01a      	beq.n	80113b8 <PrepareFrame+0x210>
 8011382:	4b10      	ldr	r3, [pc, #64]	; (80113c4 <PrepareFrame+0x21c>)
 8011384:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8011388:	2b00      	cmp	r3, #0
 801138a:	d015      	beq.n	80113b8 <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 801138c:	4813      	ldr	r0, [pc, #76]	; (80113dc <PrepareFrame+0x234>)
 801138e:	4b0d      	ldr	r3, [pc, #52]	; (80113c4 <PrepareFrame+0x21c>)
 8011390:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8011394:	b29b      	uxth	r3, r3
 8011396:	461a      	mov	r2, r3
 8011398:	6839      	ldr	r1, [r7, #0]
 801139a:	f007 fdd6 	bl	8018f4a <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 801139e:	4b09      	ldr	r3, [pc, #36]	; (80113c4 <PrepareFrame+0x21c>)
 80113a0:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80113a4:	b29b      	uxth	r3, r3
 80113a6:	3301      	adds	r3, #1
 80113a8:	b29a      	uxth	r2, r3
 80113aa:	4b06      	ldr	r3, [pc, #24]	; (80113c4 <PrepareFrame+0x21c>)
 80113ac:	801a      	strh	r2, [r3, #0]
            }
            break;
 80113ae:	e003      	b.n	80113b8 <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80113b0:	2302      	movs	r3, #2
 80113b2:	e003      	b.n	80113bc <PrepareFrame+0x214>
            break;
 80113b4:	bf00      	nop
 80113b6:	e000      	b.n	80113ba <PrepareFrame+0x212>
            break;
 80113b8:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 80113ba:	2300      	movs	r3, #0
}
 80113bc:	4618      	mov	r0, r3
 80113be:	3720      	adds	r7, #32
 80113c0:	46bd      	mov	sp, r7
 80113c2:	bd80      	pop	{r7, pc}
 80113c4:	20000740 	.word	0x20000740
 80113c8:	20000878 	.word	0x20000878
 80113cc:	20000742 	.word	0x20000742
 80113d0:	20000c5c 	.word	0x20000c5c
 80113d4:	20000858 	.word	0x20000858
 80113d8:	20000bdc 	.word	0x20000bdc
 80113dc:	20000743 	.word	0x20000743

080113e0 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 80113e0:	b580      	push	{r7, lr}
 80113e2:	b08a      	sub	sp, #40	; 0x28
 80113e4:	af00      	add	r7, sp, #0
 80113e6:	4603      	mov	r3, r0
 80113e8:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80113ea:	2303      	movs	r3, #3
 80113ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 80113f0:	2300      	movs	r3, #0
 80113f2:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 80113f4:	79fb      	ldrb	r3, [r7, #7]
 80113f6:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80113f8:	4b4b      	ldr	r3, [pc, #300]	; (8011528 <SendFrameOnChannel+0x148>)
 80113fa:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80113fe:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011400:	4b49      	ldr	r3, [pc, #292]	; (8011528 <SendFrameOnChannel+0x148>)
 8011402:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8011406:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8011408:	4b47      	ldr	r3, [pc, #284]	; (8011528 <SendFrameOnChannel+0x148>)
 801140a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801140e:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8011410:	4b45      	ldr	r3, [pc, #276]	; (8011528 <SendFrameOnChannel+0x148>)
 8011412:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011416:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8011418:	4b44      	ldr	r3, [pc, #272]	; (801152c <SendFrameOnChannel+0x14c>)
 801141a:	881b      	ldrh	r3, [r3, #0]
 801141c:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 801141e:	4b42      	ldr	r3, [pc, #264]	; (8011528 <SendFrameOnChannel+0x148>)
 8011420:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8011424:	77bb      	strb	r3, [r7, #30]
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8011426:	4b40      	ldr	r3, [pc, #256]	; (8011528 <SendFrameOnChannel+0x148>)
 8011428:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 801142c:	f107 020f 	add.w	r2, r7, #15
 8011430:	f107 0110 	add.w	r1, r7, #16
 8011434:	4b3e      	ldr	r3, [pc, #248]	; (8011530 <SendFrameOnChannel+0x150>)
 8011436:	f004 f869 	bl	801550c <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801143a:	4b3c      	ldr	r3, [pc, #240]	; (801152c <SendFrameOnChannel+0x14c>)
 801143c:	2201      	movs	r2, #1
 801143e:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011442:	4b39      	ldr	r3, [pc, #228]	; (8011528 <SendFrameOnChannel+0x148>)
 8011444:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011448:	b2da      	uxtb	r2, r3
 801144a:	4b38      	ldr	r3, [pc, #224]	; (801152c <SendFrameOnChannel+0x14c>)
 801144c:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
    MacCtx.McpsConfirm.TxPower = txPower;
 8011450:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8011454:	4b35      	ldr	r3, [pc, #212]	; (801152c <SendFrameOnChannel+0x14c>)
 8011456:	f883 2443 	strb.w	r2, [r3, #1091]	; 0x443
    MacCtx.McpsConfirm.Channel = channel;
 801145a:	79fb      	ldrb	r3, [r7, #7]
 801145c:	4a33      	ldr	r2, [pc, #204]	; (801152c <SendFrameOnChannel+0x14c>)
 801145e:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8011462:	4b32      	ldr	r3, [pc, #200]	; (801152c <SendFrameOnChannel+0x14c>)
 8011464:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8011468:	4a30      	ldr	r2, [pc, #192]	; (801152c <SendFrameOnChannel+0x14c>)
 801146a:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 801146e:	4b2f      	ldr	r3, [pc, #188]	; (801152c <SendFrameOnChannel+0x14c>)
 8011470:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8011474:	4a2d      	ldr	r2, [pc, #180]	; (801152c <SendFrameOnChannel+0x14c>)
 8011476:	f8c2 3458 	str.w	r3, [r2, #1112]	; 0x458

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 801147a:	f001 fff6 	bl	801346a <LoRaMacClassBIsBeaconModeActive>
 801147e:	4603      	mov	r3, r0
 8011480:	2b00      	cmp	r3, #0
 8011482:	d00b      	beq.n	801149c <SendFrameOnChannel+0xbc>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8011484:	4b29      	ldr	r3, [pc, #164]	; (801152c <SendFrameOnChannel+0x14c>)
 8011486:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 801148a:	4618      	mov	r0, r3
 801148c:	f002 f858 	bl	8013540 <LoRaMacClassBIsUplinkCollision>
 8011490:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 8011492:	6a3b      	ldr	r3, [r7, #32]
 8011494:	2b00      	cmp	r3, #0
 8011496:	d001      	beq.n	801149c <SendFrameOnChannel+0xbc>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8011498:	2310      	movs	r3, #16
 801149a:	e040      	b.n	801151e <SendFrameOnChannel+0x13e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801149c:	4b22      	ldr	r3, [pc, #136]	; (8011528 <SendFrameOnChannel+0x148>)
 801149e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80114a2:	2b01      	cmp	r3, #1
 80114a4:	d101      	bne.n	80114aa <SendFrameOnChannel+0xca>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 80114a6:	f002 f855 	bl	8013554 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 80114aa:	f001 ffef 	bl	801348c <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 80114ae:	4b1e      	ldr	r3, [pc, #120]	; (8011528 <SendFrameOnChannel+0x148>)
 80114b0:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80114b4:	b2db      	uxtb	r3, r3
 80114b6:	4a1d      	ldr	r2, [pc, #116]	; (801152c <SendFrameOnChannel+0x14c>)
 80114b8:	f892 241b 	ldrb.w	r2, [r2, #1051]	; 0x41b
 80114bc:	4611      	mov	r1, r2
 80114be:	4618      	mov	r0, r3
 80114c0:	f7ff fc2a 	bl	8010d18 <SecureFrame>
 80114c4:	4603      	mov	r3, r0
 80114c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 80114ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d002      	beq.n	80114d8 <SendFrameOnChannel+0xf8>
    {
        return status;
 80114d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80114d6:	e022      	b.n	801151e <SendFrameOnChannel+0x13e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80114d8:	4b14      	ldr	r3, [pc, #80]	; (801152c <SendFrameOnChannel+0x14c>)
 80114da:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80114de:	f043 0302 	orr.w	r3, r3, #2
 80114e2:	4a12      	ldr	r2, [pc, #72]	; (801152c <SendFrameOnChannel+0x14c>)
 80114e4:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.ChannelsNbTransCounter++;
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.ChannelsNbTransCounter++;
 80114e8:	4b10      	ldr	r3, [pc, #64]	; (801152c <SendFrameOnChannel+0x14c>)
 80114ea:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80114ee:	3301      	adds	r3, #1
 80114f0:	b2da      	uxtb	r2, r3
 80114f2:	4b0e      	ldr	r3, [pc, #56]	; (801152c <SendFrameOnChannel+0x14c>)
 80114f4:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 80114f8:	4b0c      	ldr	r3, [pc, #48]	; (801152c <SendFrameOnChannel+0x14c>)
 80114fa:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80114fe:	4b0b      	ldr	r3, [pc, #44]	; (801152c <SendFrameOnChannel+0x14c>)
 8011500:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
    MacCtx.ResponseTimeoutStartTime = 0;
 8011504:	4b09      	ldr	r3, [pc, #36]	; (801152c <SendFrameOnChannel+0x14c>)
 8011506:	2200      	movs	r2, #0
 8011508:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 801150c:	4b09      	ldr	r3, [pc, #36]	; (8011534 <SendFrameOnChannel+0x154>)
 801150e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011510:	4a06      	ldr	r2, [pc, #24]	; (801152c <SendFrameOnChannel+0x14c>)
 8011512:	8812      	ldrh	r2, [r2, #0]
 8011514:	b2d2      	uxtb	r2, r2
 8011516:	4611      	mov	r1, r2
 8011518:	4807      	ldr	r0, [pc, #28]	; (8011538 <SendFrameOnChannel+0x158>)
 801151a:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 801151c:	2300      	movs	r3, #0
}
 801151e:	4618      	mov	r0, r3
 8011520:	3728      	adds	r7, #40	; 0x28
 8011522:	46bd      	mov	sp, r7
 8011524:	bd80      	pop	{r7, pc}
 8011526:	bf00      	nop
 8011528:	20000c5c 	.word	0x20000c5c
 801152c:	20000740 	.word	0x20000740
 8011530:	20000b5c 	.word	0x20000b5c
 8011534:	0801eb70 	.word	0x0801eb70
 8011538:	20000742 	.word	0x20000742

0801153c <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 801153c:	b580      	push	{r7, lr}
 801153e:	b082      	sub	sp, #8
 8011540:	af00      	add	r7, sp, #0
 8011542:	4603      	mov	r3, r0
 8011544:	6039      	str	r1, [r7, #0]
 8011546:	80fb      	strh	r3, [r7, #6]
 8011548:	4613      	mov	r3, r2
 801154a:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 801154c:	4b09      	ldr	r3, [pc, #36]	; (8011574 <SetTxContinuousWave+0x38>)
 801154e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011550:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8011554:	88fa      	ldrh	r2, [r7, #6]
 8011556:	6838      	ldr	r0, [r7, #0]
 8011558:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 801155a:	4b07      	ldr	r3, [pc, #28]	; (8011578 <SetTxContinuousWave+0x3c>)
 801155c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011560:	f043 0302 	orr.w	r3, r3, #2
 8011564:	4a04      	ldr	r2, [pc, #16]	; (8011578 <SetTxContinuousWave+0x3c>)
 8011566:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 801156a:	2300      	movs	r3, #0
}
 801156c:	4618      	mov	r0, r3
 801156e:	3708      	adds	r7, #8
 8011570:	46bd      	mov	sp, r7
 8011572:	bd80      	pop	{r7, pc}
 8011574:	0801eb70 	.word	0x0801eb70
 8011578:	20000740 	.word	0x20000740

0801157c <RestoreNvmData>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 801157c:	b580      	push	{r7, lr}
 801157e:	b082      	sub	sp, #8
 8011580:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    uint32_t crc = 0;
 8011582:	2300      	movs	r3, #0
 8011584:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8011586:	4b49      	ldr	r3, [pc, #292]	; (80116ac <RestoreNvmData+0x130>)
 8011588:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801158c:	2b01      	cmp	r3, #1
 801158e:	d001      	beq.n	8011594 <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 8011590:	2301      	movs	r3, #1
 8011592:	e087      	b.n	80116a4 <RestoreNvmData+0x128>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 8011594:	2124      	movs	r1, #36	; 0x24
 8011596:	4846      	ldr	r0, [pc, #280]	; (80116b0 <RestoreNvmData+0x134>)
 8011598:	f007 fd2c 	bl	8018ff4 <Crc32>
 801159c:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 801159e:	4b44      	ldr	r3, [pc, #272]	; (80116b0 <RestoreNvmData+0x134>)
 80115a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115a2:	687a      	ldr	r2, [r7, #4]
 80115a4:	429a      	cmp	r2, r3
 80115a6:	d001      	beq.n	80115ac <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80115a8:	2317      	movs	r3, #23
 80115aa:	e07b      	b.n	80116a4 <RestoreNvmData+0x128>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 80115ac:	211c      	movs	r1, #28
 80115ae:	4841      	ldr	r0, [pc, #260]	; (80116b4 <RestoreNvmData+0x138>)
 80115b0:	f007 fd20 	bl	8018ff4 <Crc32>
 80115b4:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 80115b6:	4b3e      	ldr	r3, [pc, #248]	; (80116b0 <RestoreNvmData+0x134>)
 80115b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80115ba:	687a      	ldr	r2, [r7, #4]
 80115bc:	429a      	cmp	r2, r3
 80115be:	d001      	beq.n	80115c4 <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80115c0:	2317      	movs	r3, #23
 80115c2:	e06f      	b.n	80116a4 <RestoreNvmData+0x128>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 80115c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80115c8:	483b      	ldr	r0, [pc, #236]	; (80116b8 <RestoreNvmData+0x13c>)
 80115ca:	f007 fd13 	bl	8018ff4 <Crc32>
 80115ce:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 80115d0:	4b37      	ldr	r3, [pc, #220]	; (80116b0 <RestoreNvmData+0x134>)
 80115d2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80115d6:	687a      	ldr	r2, [r7, #4]
 80115d8:	429a      	cmp	r2, r3
 80115da:	d001      	beq.n	80115e0 <RestoreNvmData+0x64>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80115dc:	2317      	movs	r3, #23
 80115de:	e061      	b.n	80116a4 <RestoreNvmData+0x128>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 80115e0:	21d4      	movs	r1, #212	; 0xd4
 80115e2:	4836      	ldr	r0, [pc, #216]	; (80116bc <RestoreNvmData+0x140>)
 80115e4:	f007 fd06 	bl	8018ff4 <Crc32>
 80115e8:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 80115ea:	4b31      	ldr	r3, [pc, #196]	; (80116b0 <RestoreNvmData+0x134>)
 80115ec:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80115f0:	687a      	ldr	r2, [r7, #4]
 80115f2:	429a      	cmp	r2, r3
 80115f4:	d001      	beq.n	80115fa <RestoreNvmData+0x7e>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80115f6:	2317      	movs	r3, #23
 80115f8:	e054      	b.n	80116a4 <RestoreNvmData+0x128>
    }

    // RegionGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 80115fa:	2110      	movs	r1, #16
 80115fc:	4830      	ldr	r0, [pc, #192]	; (80116c0 <RestoreNvmData+0x144>)
 80115fe:	f007 fcf9 	bl	8018ff4 <Crc32>
 8011602:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 8011604:	4b2a      	ldr	r3, [pc, #168]	; (80116b0 <RestoreNvmData+0x134>)
 8011606:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 801160a:	687a      	ldr	r2, [r7, #4]
 801160c:	429a      	cmp	r2, r3
 801160e:	d001      	beq.n	8011614 <RestoreNvmData+0x98>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8011610:	2317      	movs	r3, #23
 8011612:	e047      	b.n	80116a4 <RestoreNvmData+0x128>
    }

    // RegionGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup2), sizeof( NvmBackup.RegionGroup2 ) -
 8011614:	f44f 715e 	mov.w	r1, #888	; 0x378
 8011618:	482a      	ldr	r0, [pc, #168]	; (80116c4 <RestoreNvmData+0x148>)
 801161a:	f007 fceb 	bl	8018ff4 <Crc32>
 801161e:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup2.Crc32 ) );
    if( crc != NvmBackup.RegionGroup2.Crc32 )
 8011620:	4b23      	ldr	r3, [pc, #140]	; (80116b0 <RestoreNvmData+0x134>)
 8011622:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	; 0x5b0
 8011626:	687a      	ldr	r2, [r7, #4]
 8011628:	429a      	cmp	r2, r3
 801162a:	d001      	beq.n	8011630 <RestoreNvmData+0xb4>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 801162c:	2317      	movs	r3, #23
 801162e:	e039      	b.n	80116a4 <RestoreNvmData+0x128>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 8011630:	2114      	movs	r1, #20
 8011632:	4825      	ldr	r0, [pc, #148]	; (80116c8 <RestoreNvmData+0x14c>)
 8011634:	f007 fcde 	bl	8018ff4 <Crc32>
 8011638:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 801163a:	4b1d      	ldr	r3, [pc, #116]	; (80116b0 <RestoreNvmData+0x134>)
 801163c:	f8d3 35c8 	ldr.w	r3, [r3, #1480]	; 0x5c8
 8011640:	687a      	ldr	r2, [r7, #4]
 8011642:	429a      	cmp	r2, r3
 8011644:	d001      	beq.n	801164a <RestoreNvmData+0xce>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8011646:	2317      	movs	r3, #23
 8011648:	e02c      	b.n	80116a4 <RestoreNvmData+0x128>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 801164a:	f240 52cc 	movw	r2, #1484	; 0x5cc
 801164e:	4918      	ldr	r1, [pc, #96]	; (80116b0 <RestoreNvmData+0x134>)
 8011650:	481e      	ldr	r0, [pc, #120]	; (80116cc <RestoreNvmData+0x150>)
 8011652:	f007 fc7a 	bl	8018f4a <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 8011656:	f240 52cc 	movw	r2, #1484	; 0x5cc
 801165a:	2100      	movs	r1, #0
 801165c:	4814      	ldr	r0, [pc, #80]	; (80116b0 <RestoreNvmData+0x134>)
 801165e:	f007 fcaf 	bl	8018fc0 <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8011662:	4b12      	ldr	r3, [pc, #72]	; (80116ac <RestoreNvmData+0x130>)
 8011664:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 8011668:	4b10      	ldr	r3, [pc, #64]	; (80116ac <RestoreNvmData+0x130>)
 801166a:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 801166e:	4b17      	ldr	r3, [pc, #92]	; (80116cc <RestoreNvmData+0x150>)
 8011670:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011672:	4a0e      	ldr	r2, [pc, #56]	; (80116ac <RestoreNvmData+0x130>)
 8011674:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011678:	4b14      	ldr	r3, [pc, #80]	; (80116cc <RestoreNvmData+0x150>)
 801167a:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 801167e:	4b0b      	ldr	r3, [pc, #44]	; (80116ac <RestoreNvmData+0x130>)
 8011680:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8011684:	4b09      	ldr	r3, [pc, #36]	; (80116ac <RestoreNvmData+0x130>)
 8011686:	2201      	movs	r2, #1
 8011688:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801168c:	4b07      	ldr	r3, [pc, #28]	; (80116ac <RestoreNvmData+0x130>)
 801168e:	2202      	movs	r2, #2
 8011690:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

    // The public/private network flag may change upon reloading MacGroup2
    // from NVM and we thus need to synchronize the radio. The same function
    // is invoked in LoRaMacInitialization.
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8011694:	4b0e      	ldr	r3, [pc, #56]	; (80116d0 <RestoreNvmData+0x154>)
 8011696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011698:	4a0c      	ldr	r2, [pc, #48]	; (80116cc <RestoreNvmData+0x150>)
 801169a:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 801169e:	4610      	mov	r0, r2
 80116a0:	4798      	blx	r3
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

    return LORAMAC_STATUS_OK;
 80116a2:	2300      	movs	r3, #0
}
 80116a4:	4618      	mov	r0, r3
 80116a6:	3708      	adds	r7, #8
 80116a8:	46bd      	mov	sp, r7
 80116aa:	bd80      	pop	{r7, pc}
 80116ac:	20000740 	.word	0x20000740
 80116b0:	20001228 	.word	0x20001228
 80116b4:	20001250 	.word	0x20001250
 80116b8:	20001270 	.word	0x20001270
 80116bc:	20001374 	.word	0x20001374
 80116c0:	2000144c 	.word	0x2000144c
 80116c4:	20001460 	.word	0x20001460
 80116c8:	200017dc 	.word	0x200017dc
 80116cc:	20000c5c 	.word	0x20000c5c
 80116d0:	0801eb70 	.word	0x0801eb70

080116d4 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 80116d4:	b480      	push	{r7}
 80116d6:	b083      	sub	sp, #12
 80116d8:	af00      	add	r7, sp, #0
 80116da:	6078      	str	r0, [r7, #4]
 80116dc:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d002      	beq.n	80116ea <DetermineFrameType+0x16>
 80116e4:	683b      	ldr	r3, [r7, #0]
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d101      	bne.n	80116ee <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80116ea:	2303      	movs	r3, #3
 80116ec:	e03b      	b.n	8011766 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	7b1b      	ldrb	r3, [r3, #12]
 80116f2:	f003 030f 	and.w	r3, r3, #15
 80116f6:	b2db      	uxtb	r3, r3
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d008      	beq.n	801170e <DetermineFrameType+0x3a>
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011702:	2b00      	cmp	r3, #0
 8011704:	d003      	beq.n	801170e <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 8011706:	683b      	ldr	r3, [r7, #0]
 8011708:	2200      	movs	r2, #0
 801170a:	701a      	strb	r2, [r3, #0]
 801170c:	e02a      	b.n	8011764 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011714:	2b00      	cmp	r3, #0
 8011716:	d103      	bne.n	8011720 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8011718:	683b      	ldr	r3, [r7, #0]
 801171a:	2201      	movs	r2, #1
 801171c:	701a      	strb	r2, [r3, #0]
 801171e:	e021      	b.n	8011764 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	7b1b      	ldrb	r3, [r3, #12]
 8011724:	f003 030f 	and.w	r3, r3, #15
 8011728:	b2db      	uxtb	r3, r3
 801172a:	2b00      	cmp	r3, #0
 801172c:	d108      	bne.n	8011740 <DetermineFrameType+0x6c>
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011734:	2b00      	cmp	r3, #0
 8011736:	d103      	bne.n	8011740 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8011738:	683b      	ldr	r3, [r7, #0]
 801173a:	2202      	movs	r2, #2
 801173c:	701a      	strb	r2, [r3, #0]
 801173e:	e011      	b.n	8011764 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	7b1b      	ldrb	r3, [r3, #12]
 8011744:	f003 030f 	and.w	r3, r3, #15
 8011748:	b2db      	uxtb	r3, r3
 801174a:	2b00      	cmp	r3, #0
 801174c:	d108      	bne.n	8011760 <DetermineFrameType+0x8c>
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011754:	2b00      	cmp	r3, #0
 8011756:	d003      	beq.n	8011760 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8011758:	683b      	ldr	r3, [r7, #0]
 801175a:	2203      	movs	r2, #3
 801175c:	701a      	strb	r2, [r3, #0]
 801175e:	e001      	b.n	8011764 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8011760:	2318      	movs	r3, #24
 8011762:	e000      	b.n	8011766 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8011764:	2300      	movs	r3, #0
}
 8011766:	4618      	mov	r0, r3
 8011768:	370c      	adds	r7, #12
 801176a:	46bd      	mov	sp, r7
 801176c:	bc80      	pop	{r7}
 801176e:	4770      	bx	lr

08011770 <CheckRetrans>:
    }
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
 8011770:	b480      	push	{r7}
 8011772:	b083      	sub	sp, #12
 8011774:	af00      	add	r7, sp, #0
 8011776:	4603      	mov	r3, r0
 8011778:	460a      	mov	r2, r1
 801177a:	71fb      	strb	r3, [r7, #7]
 801177c:	4613      	mov	r3, r2
 801177e:	71bb      	strb	r3, [r7, #6]
    if( counter >= limit )
 8011780:	79fa      	ldrb	r2, [r7, #7]
 8011782:	79bb      	ldrb	r3, [r7, #6]
 8011784:	429a      	cmp	r2, r3
 8011786:	d301      	bcc.n	801178c <CheckRetrans+0x1c>
    {
        return true;
 8011788:	2301      	movs	r3, #1
 801178a:	e000      	b.n	801178e <CheckRetrans+0x1e>
    }
    return false;
 801178c:	2300      	movs	r3, #0
}
 801178e:	4618      	mov	r0, r3
 8011790:	370c      	adds	r7, #12
 8011792:	46bd      	mov	sp, r7
 8011794:	bc80      	pop	{r7}
 8011796:	4770      	bx	lr

08011798 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8011798:	b580      	push	{r7, lr}
 801179a:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 801179c:	4b12      	ldr	r3, [pc, #72]	; (80117e8 <CheckRetransUnconfirmedUplink+0x50>)
 801179e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80117a2:	4a12      	ldr	r2, [pc, #72]	; (80117ec <CheckRetransUnconfirmedUplink+0x54>)
 80117a4:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
 80117a8:	4611      	mov	r1, r2
 80117aa:	4618      	mov	r0, r3
 80117ac:	f7ff ffe0 	bl	8011770 <CheckRetrans>
 80117b0:	4603      	mov	r3, r0
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d001      	beq.n	80117ba <CheckRetransUnconfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 80117b6:	2301      	movs	r3, #1
 80117b8:	e014      	b.n	80117e4 <CheckRetransUnconfirmedUplink+0x4c>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80117ba:	4b0b      	ldr	r3, [pc, #44]	; (80117e8 <CheckRetransUnconfirmedUplink+0x50>)
 80117bc:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 80117c0:	f003 0302 	and.w	r3, r3, #2
 80117c4:	b2db      	uxtb	r3, r3
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d00b      	beq.n	80117e2 <CheckRetransUnconfirmedUplink+0x4a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 80117ca:	4b07      	ldr	r3, [pc, #28]	; (80117e8 <CheckRetransUnconfirmedUplink+0x50>)
 80117cc:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d004      	beq.n	80117de <CheckRetransUnconfirmedUplink+0x46>
            ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 80117d4:	4b04      	ldr	r3, [pc, #16]	; (80117e8 <CheckRetransUnconfirmedUplink+0x50>)
 80117d6:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 80117da:	2b01      	cmp	r3, #1
 80117dc:	d101      	bne.n	80117e2 <CheckRetransUnconfirmedUplink+0x4a>
        {
            return true;
 80117de:	2301      	movs	r3, #1
 80117e0:	e000      	b.n	80117e4 <CheckRetransUnconfirmedUplink+0x4c>
        }
    }
    return false;
 80117e2:	2300      	movs	r3, #0
}
 80117e4:	4618      	mov	r0, r3
 80117e6:	bd80      	pop	{r7, pc}
 80117e8:	20000740 	.word	0x20000740
 80117ec:	20000c5c 	.word	0x20000c5c

080117f0 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 80117f0:	b580      	push	{r7, lr}
 80117f2:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 80117f4:	4b10      	ldr	r3, [pc, #64]	; (8011838 <CheckRetransConfirmedUplink+0x48>)
 80117f6:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80117fa:	4a10      	ldr	r2, [pc, #64]	; (801183c <CheckRetransConfirmedUplink+0x4c>)
 80117fc:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
 8011800:	4611      	mov	r1, r2
 8011802:	4618      	mov	r0, r3
 8011804:	f7ff ffb4 	bl	8011770 <CheckRetrans>
 8011808:	4603      	mov	r3, r0
 801180a:	2b00      	cmp	r3, #0
 801180c:	d001      	beq.n	8011812 <CheckRetransConfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 801180e:	2301      	movs	r3, #1
 8011810:	e00f      	b.n	8011832 <CheckRetransConfirmedUplink+0x42>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8011812:	4b09      	ldr	r3, [pc, #36]	; (8011838 <CheckRetransConfirmedUplink+0x48>)
 8011814:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8011818:	f003 0302 	and.w	r3, r3, #2
 801181c:	b2db      	uxtb	r3, r3
 801181e:	2b00      	cmp	r3, #0
 8011820:	d006      	beq.n	8011830 <CheckRetransConfirmedUplink+0x40>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8011822:	4b05      	ldr	r3, [pc, #20]	; (8011838 <CheckRetransConfirmedUplink+0x48>)
 8011824:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 8011828:	2b00      	cmp	r3, #0
 801182a:	d001      	beq.n	8011830 <CheckRetransConfirmedUplink+0x40>
        {
            return true;
 801182c:	2301      	movs	r3, #1
 801182e:	e000      	b.n	8011832 <CheckRetransConfirmedUplink+0x42>
        }
    }
    return false;
 8011830:	2300      	movs	r3, #0
}
 8011832:	4618      	mov	r0, r3
 8011834:	bd80      	pop	{r7, pc}
 8011836:	bf00      	nop
 8011838:	20000740 	.word	0x20000740
 801183c:	20000c5c 	.word	0x20000c5c

08011840 <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
 8011840:	b480      	push	{r7}
 8011842:	b083      	sub	sp, #12
 8011844:	af00      	add	r7, sp, #0
 8011846:	6078      	str	r0, [r7, #4]
    if( counter < ADR_ACK_COUNTER_MAX )
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801184e:	d002      	beq.n	8011856 <IncreaseAdrAckCounter+0x16>
    {
        counter++;
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	3301      	adds	r3, #1
 8011854:	607b      	str	r3, [r7, #4]
    }
    return counter;
 8011856:	687b      	ldr	r3, [r7, #4]
}
 8011858:	4618      	mov	r0, r3
 801185a:	370c      	adds	r7, #12
 801185c:	46bd      	mov	sp, r7
 801185e:	bc80      	pop	{r7}
 8011860:	4770      	bx	lr
	...

08011864 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 8011864:	b580      	push	{r7, lr}
 8011866:	af00      	add	r7, sp, #0
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8011868:	4b1a      	ldr	r3, [pc, #104]	; (80118d4 <StopRetransmission+0x70>)
 801186a:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 801186e:	f003 0302 	and.w	r3, r3, #2
 8011872:	b2db      	uxtb	r3, r3
 8011874:	2b00      	cmp	r3, #0
 8011876:	d009      	beq.n	801188c <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8011878:	4b16      	ldr	r3, [pc, #88]	; (80118d4 <StopRetransmission+0x70>)
 801187a:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 801187e:	2b00      	cmp	r3, #0
 8011880:	d011      	beq.n	80118a6 <StopRetransmission+0x42>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 8011882:	4b14      	ldr	r3, [pc, #80]	; (80118d4 <StopRetransmission+0x70>)
 8011884:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8011888:	2b01      	cmp	r3, #1
 801188a:	d00c      	beq.n	80118a6 <StopRetransmission+0x42>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 801188c:	4b12      	ldr	r3, [pc, #72]	; (80118d8 <StopRetransmission+0x74>)
 801188e:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8011892:	2b00      	cmp	r3, #0
 8011894:	d007      	beq.n	80118a6 <StopRetransmission+0x42>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 8011896:	4b10      	ldr	r3, [pc, #64]	; (80118d8 <StopRetransmission+0x74>)
 8011898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801189a:	4618      	mov	r0, r3
 801189c:	f7ff ffd0 	bl	8011840 <IncreaseAdrAckCounter>
 80118a0:	4603      	mov	r3, r0
 80118a2:	4a0d      	ldr	r2, [pc, #52]	; (80118d8 <StopRetransmission+0x74>)
 80118a4:	6293      	str	r3, [r2, #40]	; 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 80118a6:	4b0b      	ldr	r3, [pc, #44]	; (80118d4 <StopRetransmission+0x70>)
 80118a8:	2200      	movs	r2, #0
 80118aa:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    MacCtx.NodeAckRequested = false;
 80118ae:	4b09      	ldr	r3, [pc, #36]	; (80118d4 <StopRetransmission+0x70>)
 80118b0:	2200      	movs	r2, #0
 80118b2:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 80118b6:	4b07      	ldr	r3, [pc, #28]	; (80118d4 <StopRetransmission+0x70>)
 80118b8:	2200      	movs	r2, #0
 80118ba:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80118be:	4b05      	ldr	r3, [pc, #20]	; (80118d4 <StopRetransmission+0x70>)
 80118c0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80118c4:	f023 0302 	bic.w	r3, r3, #2
 80118c8:	4a02      	ldr	r2, [pc, #8]	; (80118d4 <StopRetransmission+0x70>)
 80118ca:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 80118ce:	2301      	movs	r3, #1
}
 80118d0:	4618      	mov	r0, r3
 80118d2:	bd80      	pop	{r7, pc}
 80118d4:	20000740 	.word	0x20000740
 80118d8:	20000c5c 	.word	0x20000c5c

080118dc <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 80118dc:	b580      	push	{r7, lr}
 80118de:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80118e0:	4b08      	ldr	r3, [pc, #32]	; (8011904 <OnMacProcessNotify+0x28>)
 80118e2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d00a      	beq.n	8011900 <OnMacProcessNotify+0x24>
 80118ea:	4b06      	ldr	r3, [pc, #24]	; (8011904 <OnMacProcessNotify+0x28>)
 80118ec:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80118f0:	695b      	ldr	r3, [r3, #20]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d004      	beq.n	8011900 <OnMacProcessNotify+0x24>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 80118f6:	4b03      	ldr	r3, [pc, #12]	; (8011904 <OnMacProcessNotify+0x28>)
 80118f8:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80118fc:	695b      	ldr	r3, [r3, #20]
 80118fe:	4798      	blx	r3
    }
}
 8011900:	bf00      	nop
 8011902:	bd80      	pop	{r7, pc}
 8011904:	20000740 	.word	0x20000740

08011908 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8011908:	b580      	push	{r7, lr}
 801190a:	b082      	sub	sp, #8
 801190c:	af00      	add	r7, sp, #0
 801190e:	4603      	mov	r3, r0
 8011910:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8011912:	4b0b      	ldr	r3, [pc, #44]	; (8011940 <CallNvmDataChangeCallback+0x38>)
 8011914:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011918:	2b00      	cmp	r3, #0
 801191a:	d00c      	beq.n	8011936 <CallNvmDataChangeCallback+0x2e>
 801191c:	4b08      	ldr	r3, [pc, #32]	; (8011940 <CallNvmDataChangeCallback+0x38>)
 801191e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011922:	691b      	ldr	r3, [r3, #16]
 8011924:	2b00      	cmp	r3, #0
 8011926:	d006      	beq.n	8011936 <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8011928:	4b05      	ldr	r3, [pc, #20]	; (8011940 <CallNvmDataChangeCallback+0x38>)
 801192a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801192e:	691b      	ldr	r3, [r3, #16]
 8011930:	88fa      	ldrh	r2, [r7, #6]
 8011932:	4610      	mov	r0, r2
 8011934:	4798      	blx	r3
    }
}
 8011936:	bf00      	nop
 8011938:	3708      	adds	r7, #8
 801193a:	46bd      	mov	sp, r7
 801193c:	bd80      	pop	{r7, pc}
 801193e:	bf00      	nop
 8011940:	20000740 	.word	0x20000740

08011944 <IsRequestPending>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 8011944:	b480      	push	{r7}
 8011946:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8011948:	4b0b      	ldr	r3, [pc, #44]	; (8011978 <IsRequestPending+0x34>)
 801194a:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 801194e:	f003 0304 	and.w	r3, r3, #4
 8011952:	b2db      	uxtb	r3, r3
 8011954:	2b00      	cmp	r3, #0
 8011956:	d107      	bne.n	8011968 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8011958:	4b07      	ldr	r3, [pc, #28]	; (8011978 <IsRequestPending+0x34>)
 801195a:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 801195e:	f003 0301 	and.w	r3, r3, #1
 8011962:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8011964:	2b00      	cmp	r3, #0
 8011966:	d001      	beq.n	801196c <IsRequestPending+0x28>
    {
        return 1;
 8011968:	2301      	movs	r3, #1
 801196a:	e000      	b.n	801196e <IsRequestPending+0x2a>
    }
    return 0;
 801196c:	2300      	movs	r3, #0
}
 801196e:	4618      	mov	r0, r3
 8011970:	46bd      	mov	sp, r7
 8011972:	bc80      	pop	{r7}
 8011974:	4770      	bx	lr
 8011976:	bf00      	nop
 8011978:	20000740 	.word	0x20000740

0801197c <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 801197c:	b590      	push	{r4, r7, lr}
 801197e:	b091      	sub	sp, #68	; 0x44
 8011980:	af02      	add	r7, sp, #8
 8011982:	6178      	str	r0, [r7, #20]
 8011984:	6139      	str	r1, [r7, #16]
 8011986:	4613      	mov	r3, r2
 8011988:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 801198a:	697b      	ldr	r3, [r7, #20]
 801198c:	2b00      	cmp	r3, #0
 801198e:	d002      	beq.n	8011996 <LoRaMacInitialization+0x1a>
 8011990:	693b      	ldr	r3, [r7, #16]
 8011992:	2b00      	cmp	r3, #0
 8011994:	d101      	bne.n	801199a <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011996:	2303      	movs	r3, #3
 8011998:	e27a      	b.n	8011e90 <LoRaMacInitialization+0x514>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 801199a:	697b      	ldr	r3, [r7, #20]
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	2b00      	cmp	r3, #0
 80119a0:	d00b      	beq.n	80119ba <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 80119a2:	697b      	ldr	r3, [r7, #20]
 80119a4:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d007      	beq.n	80119ba <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 80119aa:	697b      	ldr	r3, [r7, #20]
 80119ac:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d003      	beq.n	80119ba <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 80119b2:	697b      	ldr	r3, [r7, #20]
 80119b4:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d101      	bne.n	80119be <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80119ba:	2303      	movs	r3, #3
 80119bc:	e268      	b.n	8011e90 <LoRaMacInitialization+0x514>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 80119be:	7bfb      	ldrb	r3, [r7, #15]
 80119c0:	4618      	mov	r0, r3
 80119c2:	f003 fcac 	bl	801531e <RegionIsActive>
 80119c6:	4603      	mov	r3, r0
 80119c8:	f083 0301 	eor.w	r3, r3, #1
 80119cc:	b2db      	uxtb	r3, r3
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d001      	beq.n	80119d6 <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 80119d2:	2309      	movs	r3, #9
 80119d4:	e25c      	b.n	8011e90 <LoRaMacInitialization+0x514>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 80119d6:	6978      	ldr	r0, [r7, #20]
 80119d8:	f002 f932 	bl	8013c40 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 80119dc:	f240 52cc 	movw	r2, #1484	; 0x5cc
 80119e0:	2100      	movs	r1, #0
 80119e2:	48c7      	ldr	r0, [pc, #796]	; (8011d00 <LoRaMacInitialization+0x384>)
 80119e4:	f007 faec 	bl	8018fc0 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 80119e8:	f240 521c 	movw	r2, #1308	; 0x51c
 80119ec:	2100      	movs	r1, #0
 80119ee:	48c5      	ldr	r0, [pc, #788]	; (8011d04 <LoRaMacInitialization+0x388>)
 80119f0:	f007 fae6 	bl	8018fc0 <memset1>
    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 80119f4:	4ac2      	ldr	r2, [pc, #776]	; (8011d00 <LoRaMacInitialization+0x384>)
 80119f6:	7bfb      	ldrb	r3, [r7, #15]
 80119f8:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 80119fc:	4bc0      	ldr	r3, [pc, #768]	; (8011d00 <LoRaMacInitialization+0x384>)
 80119fe:	2200      	movs	r2, #0
 8011a00:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 8011a04:	4bbe      	ldr	r3, [pc, #760]	; (8011d00 <LoRaMacInitialization+0x384>)
 8011a06:	2200      	movs	r2, #0
 8011a08:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8011a0c:	4bbc      	ldr	r3, [pc, #752]	; (8011d00 <LoRaMacInitialization+0x384>)
 8011a0e:	4abe      	ldr	r2, [pc, #760]	; (8011d08 <LoRaMacInitialization+0x38c>)
 8011a10:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8011a14:	2300      	movs	r3, #0
 8011a16:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8011a1a:	4bbc      	ldr	r3, [pc, #752]	; (8011d0c <LoRaMacInitialization+0x390>)
 8011a1c:	61fb      	str	r3, [r7, #28]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8011a1e:	4bbc      	ldr	r3, [pc, #752]	; (8011d10 <LoRaMacInitialization+0x394>)
 8011a20:	623b      	str	r3, [r7, #32]
    params.Bands = &RegionBands;
 8011a22:	4bbc      	ldr	r3, [pc, #752]	; (8011d14 <LoRaMacInitialization+0x398>)
 8011a24:	627b      	str	r3, [r7, #36]	; 0x24
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8011a26:	4bb6      	ldr	r3, [pc, #728]	; (8011d00 <LoRaMacInitialization+0x384>)
 8011a28:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011a2c:	f107 021c 	add.w	r2, r7, #28
 8011a30:	4611      	mov	r1, r2
 8011a32:	4618      	mov	r0, r3
 8011a34:	f003 fcbf 	bl	80153b6 <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8011a38:	230f      	movs	r3, #15
 8011a3a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011a3e:	4bb0      	ldr	r3, [pc, #704]	; (8011d00 <LoRaMacInitialization+0x384>)
 8011a40:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011a44:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011a48:	4611      	mov	r1, r2
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	f003 fc7c 	bl	8015348 <RegionGetPhyParam>
 8011a50:	4603      	mov	r3, r0
 8011a52:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8011a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	bf14      	ite	ne
 8011a5a:	2301      	movne	r3, #1
 8011a5c:	2300      	moveq	r3, #0
 8011a5e:	b2da      	uxtb	r2, r3
 8011a60:	4ba7      	ldr	r3, [pc, #668]	; (8011d00 <LoRaMacInitialization+0x384>)
 8011a62:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8011a66:	230a      	movs	r3, #10
 8011a68:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011a6c:	4ba4      	ldr	r3, [pc, #656]	; (8011d00 <LoRaMacInitialization+0x384>)
 8011a6e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011a72:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011a76:	4611      	mov	r1, r2
 8011a78:	4618      	mov	r0, r3
 8011a7a:	f003 fc65 	bl	8015348 <RegionGetPhyParam>
 8011a7e:	4603      	mov	r3, r0
 8011a80:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8011a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a84:	b25a      	sxtb	r2, r3
 8011a86:	4b9e      	ldr	r3, [pc, #632]	; (8011d00 <LoRaMacInitialization+0x384>)
 8011a88:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 8011a8c:	2306      	movs	r3, #6
 8011a8e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011a92:	4b9b      	ldr	r3, [pc, #620]	; (8011d00 <LoRaMacInitialization+0x384>)
 8011a94:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011a98:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011a9c:	4611      	mov	r1, r2
 8011a9e:	4618      	mov	r0, r3
 8011aa0:	f003 fc52 	bl	8015348 <RegionGetPhyParam>
 8011aa4:	4603      	mov	r3, r0
 8011aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8011aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aaa:	b25a      	sxtb	r2, r3
 8011aac:	4b94      	ldr	r3, [pc, #592]	; (8011d00 <LoRaMacInitialization+0x384>)
 8011aae:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8011ab2:	2310      	movs	r3, #16
 8011ab4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011ab8:	4b91      	ldr	r3, [pc, #580]	; (8011d00 <LoRaMacInitialization+0x384>)
 8011aba:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011abe:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011ac2:	4611      	mov	r1, r2
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	f003 fc3f 	bl	8015348 <RegionGetPhyParam>
 8011aca:	4603      	mov	r3, r0
 8011acc:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8011ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ad0:	4a8b      	ldr	r2, [pc, #556]	; (8011d00 <LoRaMacInitialization+0x384>)
 8011ad2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8011ad6:	2311      	movs	r3, #17
 8011ad8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011adc:	4b88      	ldr	r3, [pc, #544]	; (8011d00 <LoRaMacInitialization+0x384>)
 8011ade:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011ae2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011ae6:	4611      	mov	r1, r2
 8011ae8:	4618      	mov	r0, r3
 8011aea:	f003 fc2d 	bl	8015348 <RegionGetPhyParam>
 8011aee:	4603      	mov	r3, r0
 8011af0:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8011af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011af4:	4a82      	ldr	r2, [pc, #520]	; (8011d00 <LoRaMacInitialization+0x384>)
 8011af6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8011afa:	2312      	movs	r3, #18
 8011afc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011b00:	4b7f      	ldr	r3, [pc, #508]	; (8011d00 <LoRaMacInitialization+0x384>)
 8011b02:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011b06:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011b0a:	4611      	mov	r1, r2
 8011b0c:	4618      	mov	r0, r3
 8011b0e:	f003 fc1b 	bl	8015348 <RegionGetPhyParam>
 8011b12:	4603      	mov	r3, r0
 8011b14:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8011b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b18:	4a79      	ldr	r2, [pc, #484]	; (8011d00 <LoRaMacInitialization+0x384>)
 8011b1a:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8011b1e:	2313      	movs	r3, #19
 8011b20:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011b24:	4b76      	ldr	r3, [pc, #472]	; (8011d00 <LoRaMacInitialization+0x384>)
 8011b26:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011b2a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011b2e:	4611      	mov	r1, r2
 8011b30:	4618      	mov	r0, r3
 8011b32:	f003 fc09 	bl	8015348 <RegionGetPhyParam>
 8011b36:	4603      	mov	r3, r0
 8011b38:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8011b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b3c:	4a70      	ldr	r2, [pc, #448]	; (8011d00 <LoRaMacInitialization+0x384>)
 8011b3e:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8011b42:	2314      	movs	r3, #20
 8011b44:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011b48:	4b6d      	ldr	r3, [pc, #436]	; (8011d00 <LoRaMacInitialization+0x384>)
 8011b4a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011b4e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011b52:	4611      	mov	r1, r2
 8011b54:	4618      	mov	r0, r3
 8011b56:	f003 fbf7 	bl	8015348 <RegionGetPhyParam>
 8011b5a:	4603      	mov	r3, r0
 8011b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8011b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b60:	4a67      	ldr	r2, [pc, #412]	; (8011d00 <LoRaMacInitialization+0x384>)
 8011b62:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8011b66:	2316      	movs	r3, #22
 8011b68:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011b6c:	4b64      	ldr	r3, [pc, #400]	; (8011d00 <LoRaMacInitialization+0x384>)
 8011b6e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011b72:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011b76:	4611      	mov	r1, r2
 8011b78:	4618      	mov	r0, r3
 8011b7a:	f003 fbe5 	bl	8015348 <RegionGetPhyParam>
 8011b7e:	4603      	mov	r3, r0
 8011b80:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8011b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b84:	b2da      	uxtb	r2, r3
 8011b86:	4b5e      	ldr	r3, [pc, #376]	; (8011d00 <LoRaMacInitialization+0x384>)
 8011b88:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8011b8c:	2317      	movs	r3, #23
 8011b8e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011b92:	4b5b      	ldr	r3, [pc, #364]	; (8011d00 <LoRaMacInitialization+0x384>)
 8011b94:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011b98:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011b9c:	4611      	mov	r1, r2
 8011b9e:	4618      	mov	r0, r3
 8011ba0:	f003 fbd2 	bl	8015348 <RegionGetPhyParam>
 8011ba4:	4603      	mov	r3, r0
 8011ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8011ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011baa:	4a55      	ldr	r2, [pc, #340]	; (8011d00 <LoRaMacInitialization+0x384>)
 8011bac:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8011bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bb2:	4a53      	ldr	r2, [pc, #332]	; (8011d00 <LoRaMacInitialization+0x384>)
 8011bb4:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8011bb8:	2318      	movs	r3, #24
 8011bba:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011bbe:	4b50      	ldr	r3, [pc, #320]	; (8011d00 <LoRaMacInitialization+0x384>)
 8011bc0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011bc4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011bc8:	4611      	mov	r1, r2
 8011bca:	4618      	mov	r0, r3
 8011bcc:	f003 fbbc 	bl	8015348 <RegionGetPhyParam>
 8011bd0:	4603      	mov	r3, r0
 8011bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8011bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bd6:	b2da      	uxtb	r2, r3
 8011bd8:	4b49      	ldr	r3, [pc, #292]	; (8011d00 <LoRaMacInitialization+0x384>)
 8011bda:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8011bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011be0:	b2da      	uxtb	r2, r3
 8011be2:	4b47      	ldr	r3, [pc, #284]	; (8011d00 <LoRaMacInitialization+0x384>)
 8011be4:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8011be8:	231d      	movs	r3, #29
 8011bea:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011bee:	4b44      	ldr	r3, [pc, #272]	; (8011d00 <LoRaMacInitialization+0x384>)
 8011bf0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011bf4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011bf8:	4611      	mov	r1, r2
 8011bfa:	4618      	mov	r0, r3
 8011bfc:	f003 fba4 	bl	8015348 <RegionGetPhyParam>
 8011c00:	4603      	mov	r3, r0
 8011c02:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8011c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c06:	b2da      	uxtb	r2, r3
 8011c08:	4b3d      	ldr	r3, [pc, #244]	; (8011d00 <LoRaMacInitialization+0x384>)
 8011c0a:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8011c0e:	231e      	movs	r3, #30
 8011c10:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011c14:	4b3a      	ldr	r3, [pc, #232]	; (8011d00 <LoRaMacInitialization+0x384>)
 8011c16:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011c1a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011c1e:	4611      	mov	r1, r2
 8011c20:	4618      	mov	r0, r3
 8011c22:	f003 fb91 	bl	8015348 <RegionGetPhyParam>
 8011c26:	4603      	mov	r3, r0
 8011c28:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8011c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c2c:	b2da      	uxtb	r2, r3
 8011c2e:	4b34      	ldr	r3, [pc, #208]	; (8011d00 <LoRaMacInitialization+0x384>)
 8011c30:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8011c34:	231f      	movs	r3, #31
 8011c36:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011c3a:	4b31      	ldr	r3, [pc, #196]	; (8011d00 <LoRaMacInitialization+0x384>)
 8011c3c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011c40:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011c44:	4611      	mov	r1, r2
 8011c46:	4618      	mov	r0, r3
 8011c48:	f003 fb7e 	bl	8015348 <RegionGetPhyParam>
 8011c4c:	4603      	mov	r3, r0
 8011c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8011c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c52:	4a2b      	ldr	r2, [pc, #172]	; (8011d00 <LoRaMacInitialization+0x384>)
 8011c54:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8011c58:	2320      	movs	r3, #32
 8011c5a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011c5e:	4b28      	ldr	r3, [pc, #160]	; (8011d00 <LoRaMacInitialization+0x384>)
 8011c60:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011c64:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011c68:	4611      	mov	r1, r2
 8011c6a:	4618      	mov	r0, r3
 8011c6c:	f003 fb6c 	bl	8015348 <RegionGetPhyParam>
 8011c70:	4603      	mov	r3, r0
 8011c72:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8011c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c76:	4a22      	ldr	r2, [pc, #136]	; (8011d00 <LoRaMacInitialization+0x384>)
 8011c78:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8011c7c:	230b      	movs	r3, #11
 8011c7e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011c82:	4b1f      	ldr	r3, [pc, #124]	; (8011d00 <LoRaMacInitialization+0x384>)
 8011c84:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011c88:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011c8c:	4611      	mov	r1, r2
 8011c8e:	4618      	mov	r0, r3
 8011c90:	f003 fb5a 	bl	8015348 <RegionGetPhyParam>
 8011c94:	4603      	mov	r3, r0
 8011c96:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 8011c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c9a:	b29a      	uxth	r2, r3
 8011c9c:	4b18      	ldr	r3, [pc, #96]	; (8011d00 <LoRaMacInitialization+0x384>)
 8011c9e:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8011ca2:	230c      	movs	r3, #12
 8011ca4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011ca8:	4b15      	ldr	r3, [pc, #84]	; (8011d00 <LoRaMacInitialization+0x384>)
 8011caa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011cae:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011cb2:	4611      	mov	r1, r2
 8011cb4:	4618      	mov	r0, r3
 8011cb6:	f003 fb47 	bl	8015348 <RegionGetPhyParam>
 8011cba:	4603      	mov	r3, r0
 8011cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 8011cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cc0:	b29a      	uxth	r2, r3
 8011cc2:	4b0f      	ldr	r3, [pc, #60]	; (8011d00 <LoRaMacInitialization+0x384>)
 8011cc4:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8011cc8:	4b0d      	ldr	r3, [pc, #52]	; (8011d00 <LoRaMacInitialization+0x384>)
 8011cca:	2201      	movs	r2, #1
 8011ccc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8011cd0:	4b0b      	ldr	r3, [pc, #44]	; (8011d00 <LoRaMacInitialization+0x384>)
 8011cd2:	220a      	movs	r2, #10
 8011cd4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8011cd8:	4b09      	ldr	r3, [pc, #36]	; (8011d00 <LoRaMacInitialization+0x384>)
 8011cda:	2206      	movs	r2, #6
 8011cdc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8011ce0:	4b07      	ldr	r3, [pc, #28]	; (8011d00 <LoRaMacInitialization+0x384>)
 8011ce2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011ce6:	4a06      	ldr	r2, [pc, #24]	; (8011d00 <LoRaMacInitialization+0x384>)
 8011ce8:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8011cea:	4b05      	ldr	r3, [pc, #20]	; (8011d00 <LoRaMacInitialization+0x384>)
 8011cec:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 8011cf0:	4b03      	ldr	r3, [pc, #12]	; (8011d00 <LoRaMacInitialization+0x384>)
 8011cf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8011cf6:	4b02      	ldr	r3, [pc, #8]	; (8011d00 <LoRaMacInitialization+0x384>)
 8011cf8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8011cfc:	e00c      	b.n	8011d18 <LoRaMacInitialization+0x39c>
 8011cfe:	bf00      	nop
 8011d00:	20000c5c 	.word	0x20000c5c
 8011d04:	20000740 	.word	0x20000740
 8011d08:	01000400 	.word	0x01000400
 8011d0c:	20000e80 	.word	0x20000e80
 8011d10:	20000e94 	.word	0x20000e94
 8011d14:	200017f4 	.word	0x200017f4
 8011d18:	4a5f      	ldr	r2, [pc, #380]	; (8011e98 <LoRaMacInitialization+0x51c>)
 8011d1a:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8011d1c:	4b5e      	ldr	r3, [pc, #376]	; (8011e98 <LoRaMacInitialization+0x51c>)
 8011d1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8011d22:	4a5d      	ldr	r2, [pc, #372]	; (8011e98 <LoRaMacInitialization+0x51c>)
 8011d24:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8011d26:	4b5c      	ldr	r3, [pc, #368]	; (8011e98 <LoRaMacInitialization+0x51c>)
 8011d28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8011d2c:	4a5a      	ldr	r2, [pc, #360]	; (8011e98 <LoRaMacInitialization+0x51c>)
 8011d2e:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8011d30:	4b59      	ldr	r3, [pc, #356]	; (8011e98 <LoRaMacInitialization+0x51c>)
 8011d32:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8011d36:	4a58      	ldr	r2, [pc, #352]	; (8011e98 <LoRaMacInitialization+0x51c>)
 8011d38:	6613      	str	r3, [r2, #96]	; 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8011d3a:	4b57      	ldr	r3, [pc, #348]	; (8011e98 <LoRaMacInitialization+0x51c>)
 8011d3c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8011d40:	4a55      	ldr	r2, [pc, #340]	; (8011e98 <LoRaMacInitialization+0x51c>)
 8011d42:	6653      	str	r3, [r2, #100]	; 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8011d44:	4b54      	ldr	r3, [pc, #336]	; (8011e98 <LoRaMacInitialization+0x51c>)
 8011d46:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
 8011d4a:	4b53      	ldr	r3, [pc, #332]	; (8011e98 <LoRaMacInitialization+0x51c>)
 8011d4c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 8011d50:	4b51      	ldr	r3, [pc, #324]	; (8011e98 <LoRaMacInitialization+0x51c>)
 8011d52:	2201      	movs	r2, #1
 8011d54:	f883 211f 	strb.w	r2, [r3, #287]	; 0x11f
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 8011d58:	4a50      	ldr	r2, [pc, #320]	; (8011e9c <LoRaMacInitialization+0x520>)
 8011d5a:	693b      	ldr	r3, [r7, #16]
 8011d5c:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( false );
 8011d60:	2000      	movs	r0, #0
 8011d62:	f7ff f869 	bl	8010e38 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8011d66:	4b4c      	ldr	r3, [pc, #304]	; (8011e98 <LoRaMacInitialization+0x51c>)
 8011d68:	2201      	movs	r2, #1
 8011d6a:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119

    MacCtx.MacPrimitives = primitives;
 8011d6e:	4a4b      	ldr	r2, [pc, #300]	; (8011e9c <LoRaMacInitialization+0x520>)
 8011d70:	697b      	ldr	r3, [r7, #20]
 8011d72:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 8011d76:	4b49      	ldr	r3, [pc, #292]	; (8011e9c <LoRaMacInitialization+0x520>)
 8011d78:	2200      	movs	r2, #0
 8011d7a:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
    MacCtx.MacState = LORAMAC_STOPPED;
 8011d7e:	4b47      	ldr	r3, [pc, #284]	; (8011e9c <LoRaMacInitialization+0x520>)
 8011d80:	2201      	movs	r2, #1
 8011d82:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8011d86:	4b44      	ldr	r3, [pc, #272]	; (8011e98 <LoRaMacInitialization+0x51c>)
 8011d88:	2200      	movs	r2, #0
 8011d8a:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8011d8c:	4b42      	ldr	r3, [pc, #264]	; (8011e98 <LoRaMacInitialization+0x51c>)
 8011d8e:	2200      	movs	r2, #0
 8011d90:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8011d92:	2300      	movs	r3, #0
 8011d94:	9300      	str	r3, [sp, #0]
 8011d96:	4b42      	ldr	r3, [pc, #264]	; (8011ea0 <LoRaMacInitialization+0x524>)
 8011d98:	2200      	movs	r2, #0
 8011d9a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8011d9e:	4841      	ldr	r0, [pc, #260]	; (8011ea4 <LoRaMacInitialization+0x528>)
 8011da0:	f00b f9ca 	bl	801d138 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8011da4:	2300      	movs	r3, #0
 8011da6:	9300      	str	r3, [sp, #0]
 8011da8:	4b3f      	ldr	r3, [pc, #252]	; (8011ea8 <LoRaMacInitialization+0x52c>)
 8011daa:	2200      	movs	r2, #0
 8011dac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8011db0:	483e      	ldr	r0, [pc, #248]	; (8011eac <LoRaMacInitialization+0x530>)
 8011db2:	f00b f9c1 	bl	801d138 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8011db6:	2300      	movs	r3, #0
 8011db8:	9300      	str	r3, [sp, #0]
 8011dba:	4b3d      	ldr	r3, [pc, #244]	; (8011eb0 <LoRaMacInitialization+0x534>)
 8011dbc:	2200      	movs	r2, #0
 8011dbe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8011dc2:	483c      	ldr	r0, [pc, #240]	; (8011eb4 <LoRaMacInitialization+0x538>)
 8011dc4:	f00b f9b8 	bl	801d138 <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 8011dc8:	2300      	movs	r3, #0
 8011dca:	9300      	str	r3, [sp, #0]
 8011dcc:	4b3a      	ldr	r3, [pc, #232]	; (8011eb8 <LoRaMacInitialization+0x53c>)
 8011dce:	2200      	movs	r2, #0
 8011dd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8011dd4:	4839      	ldr	r0, [pc, #228]	; (8011ebc <LoRaMacInitialization+0x540>)
 8011dd6:	f00b f9af 	bl	801d138 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8011dda:	4c2f      	ldr	r4, [pc, #188]	; (8011e98 <LoRaMacInitialization+0x51c>)
 8011ddc:	463b      	mov	r3, r7
 8011dde:	4618      	mov	r0, r3
 8011de0:	f00a fd1e 	bl	801c820 <SysTimeGetMcuTime>
 8011de4:	f504 7392 	add.w	r3, r4, #292	; 0x124
 8011de8:	463a      	mov	r2, r7
 8011dea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011dee:	e883 0003 	stmia.w	r3, {r0, r1}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 8011df2:	4b33      	ldr	r3, [pc, #204]	; (8011ec0 <LoRaMacInitialization+0x544>)
 8011df4:	2200      	movs	r2, #0
 8011df6:	601a      	str	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8011df8:	4b28      	ldr	r3, [pc, #160]	; (8011e9c <LoRaMacInitialization+0x520>)
 8011dfa:	4a32      	ldr	r2, [pc, #200]	; (8011ec4 <LoRaMacInitialization+0x548>)
 8011dfc:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8011e00:	4b26      	ldr	r3, [pc, #152]	; (8011e9c <LoRaMacInitialization+0x520>)
 8011e02:	4a31      	ldr	r2, [pc, #196]	; (8011ec8 <LoRaMacInitialization+0x54c>)
 8011e04:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8011e08:	4b24      	ldr	r3, [pc, #144]	; (8011e9c <LoRaMacInitialization+0x520>)
 8011e0a:	4a30      	ldr	r2, [pc, #192]	; (8011ecc <LoRaMacInitialization+0x550>)
 8011e0c:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8011e10:	4b22      	ldr	r3, [pc, #136]	; (8011e9c <LoRaMacInitialization+0x520>)
 8011e12:	4a2f      	ldr	r2, [pc, #188]	; (8011ed0 <LoRaMacInitialization+0x554>)
 8011e14:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8011e18:	4b20      	ldr	r3, [pc, #128]	; (8011e9c <LoRaMacInitialization+0x520>)
 8011e1a:	4a2e      	ldr	r2, [pc, #184]	; (8011ed4 <LoRaMacInitialization+0x558>)
 8011e1c:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8011e20:	4b2d      	ldr	r3, [pc, #180]	; (8011ed8 <LoRaMacInitialization+0x55c>)
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	482d      	ldr	r0, [pc, #180]	; (8011edc <LoRaMacInitialization+0x560>)
 8011e26:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 8011e28:	482d      	ldr	r0, [pc, #180]	; (8011ee0 <LoRaMacInitialization+0x564>)
 8011e2a:	f7fa f9f9 	bl	800c220 <SecureElementInit>
 8011e2e:	4603      	mov	r3, r0
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d001      	beq.n	8011e38 <LoRaMacInitialization+0x4bc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8011e34:	2311      	movs	r3, #17
 8011e36:	e02b      	b.n	8011e90 <LoRaMacInitialization+0x514>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8011e38:	4817      	ldr	r0, [pc, #92]	; (8011e98 <LoRaMacInitialization+0x51c>)
 8011e3a:	f002 fbc1 	bl	80145c0 <LoRaMacCryptoInit>
 8011e3e:	4603      	mov	r3, r0
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d001      	beq.n	8011e48 <LoRaMacInitialization+0x4cc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8011e44:	2311      	movs	r3, #17
 8011e46:	e023      	b.n	8011e90 <LoRaMacInitialization+0x514>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8011e48:	f001 fcbc 	bl	80137c4 <LoRaMacCommandsInit>
 8011e4c:	4603      	mov	r3, r0
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d001      	beq.n	8011e56 <LoRaMacInitialization+0x4da>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011e52:	2313      	movs	r3, #19
 8011e54:	e01c      	b.n	8011e90 <LoRaMacInitialization+0x514>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8011e56:	4823      	ldr	r0, [pc, #140]	; (8011ee4 <LoRaMacInitialization+0x568>)
 8011e58:	f002 fc52 	bl	8014700 <LoRaMacCryptoSetMulticastReference>
 8011e5c:	4603      	mov	r3, r0
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d001      	beq.n	8011e66 <LoRaMacInitialization+0x4ea>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8011e62:	2311      	movs	r3, #17
 8011e64:	e014      	b.n	8011e90 <LoRaMacInitialization+0x514>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8011e66:	4b1c      	ldr	r3, [pc, #112]	; (8011ed8 <LoRaMacInitialization+0x55c>)
 8011e68:	695b      	ldr	r3, [r3, #20]
 8011e6a:	4798      	blx	r3
 8011e6c:	4603      	mov	r3, r0
 8011e6e:	4618      	mov	r0, r3
 8011e70:	f007 f846 	bl	8018f00 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8011e74:	4b18      	ldr	r3, [pc, #96]	; (8011ed8 <LoRaMacInitialization+0x55c>)
 8011e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011e78:	4a07      	ldr	r2, [pc, #28]	; (8011e98 <LoRaMacInitialization+0x51c>)
 8011e7a:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 8011e7e:	4610      	mov	r0, r2
 8011e80:	4798      	blx	r3
    Radio.Sleep( );
 8011e82:	4b15      	ldr	r3, [pc, #84]	; (8011ed8 <LoRaMacInitialization+0x55c>)
 8011e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e86:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8011e88:	2001      	movs	r0, #1
 8011e8a:	f7fd fa7d 	bl	800f388 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8011e8e:	2300      	movs	r3, #0
}
 8011e90:	4618      	mov	r0, r3
 8011e92:	373c      	adds	r7, #60	; 0x3c
 8011e94:	46bd      	mov	sp, r7
 8011e96:	bd90      	pop	{r4, r7, pc}
 8011e98:	20000c5c 	.word	0x20000c5c
 8011e9c:	20000740 	.word	0x20000740
 8011ea0:	0800f915 	.word	0x0800f915
 8011ea4:	20000aa8 	.word	0x20000aa8
 8011ea8:	0800f9a5 	.word	0x0800f9a5
 8011eac:	20000ac0 	.word	0x20000ac0
 8011eb0:	0800fa1d 	.word	0x0800fa1d
 8011eb4:	20000ad8 	.word	0x20000ad8
 8011eb8:	0800fa9d 	.word	0x0800fa9d
 8011ebc:	20000b40 	.word	0x20000b40
 8011ec0:	20001884 	.word	0x20001884
 8011ec4:	0800e3c5 	.word	0x0800e3c5
 8011ec8:	0800e421 	.word	0x0800e421
 8011ecc:	0800e4c1 	.word	0x0800e4c1
 8011ed0:	0800e495 	.word	0x0800e495
 8011ed4:	0800e4dd 	.word	0x0800e4dd
 8011ed8:	0801eb70 	.word	0x0801eb70
 8011edc:	20000a8c 	.word	0x20000a8c
 8011ee0:	20000da8 	.word	0x20000da8
 8011ee4:	20000d44 	.word	0x20000d44

08011ee8 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8011ee8:	b580      	push	{r7, lr}
 8011eea:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8011eec:	4b04      	ldr	r3, [pc, #16]	; (8011f00 <LoRaMacStart+0x18>)
 8011eee:	2200      	movs	r2, #0
 8011ef0:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    UpdateRxSlotIdleState();
 8011ef4:	f7fc fb08 	bl	800e508 <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
 8011ef8:	2300      	movs	r3, #0
}
 8011efa:	4618      	mov	r0, r3
 8011efc:	bd80      	pop	{r7, pc}
 8011efe:	bf00      	nop
 8011f00:	20000740 	.word	0x20000740

08011f04 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 8011f04:	b580      	push	{r7, lr}
 8011f06:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 8011f08:	f7fd fa06 	bl	800f318 <LoRaMacIsBusy>
 8011f0c:	4603      	mov	r3, r0
 8011f0e:	f083 0301 	eor.w	r3, r3, #1
 8011f12:	b2db      	uxtb	r3, r3
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d00d      	beq.n	8011f34 <LoRaMacStop+0x30>
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8011f18:	4b0b      	ldr	r3, [pc, #44]	; (8011f48 <LoRaMacStop+0x44>)
 8011f1a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011f1e:	2b02      	cmp	r3, #2
 8011f20:	d102      	bne.n	8011f28 <LoRaMacStop+0x24>
        {
            Radio.Sleep( );
 8011f22:	4b0a      	ldr	r3, [pc, #40]	; (8011f4c <LoRaMacStop+0x48>)
 8011f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f26:	4798      	blx	r3
        }
        MacCtx.MacState = LORAMAC_STOPPED;
 8011f28:	4b09      	ldr	r3, [pc, #36]	; (8011f50 <LoRaMacStop+0x4c>)
 8011f2a:	2201      	movs	r2, #1
 8011f2c:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 8011f30:	2300      	movs	r3, #0
 8011f32:	e007      	b.n	8011f44 <LoRaMacStop+0x40>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 8011f34:	4b06      	ldr	r3, [pc, #24]	; (8011f50 <LoRaMacStop+0x4c>)
 8011f36:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011f3a:	2b01      	cmp	r3, #1
 8011f3c:	d101      	bne.n	8011f42 <LoRaMacStop+0x3e>
    {
        return LORAMAC_STATUS_OK;
 8011f3e:	2300      	movs	r3, #0
 8011f40:	e000      	b.n	8011f44 <LoRaMacStop+0x40>
    }
    return LORAMAC_STATUS_BUSY;
 8011f42:	2301      	movs	r3, #1
}
 8011f44:	4618      	mov	r0, r3
 8011f46:	bd80      	pop	{r7, pc}
 8011f48:	20000c5c 	.word	0x20000c5c
 8011f4c:	0801eb70 	.word	0x0801eb70
 8011f50:	20000740 	.word	0x20000740

08011f54 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 8011f54:	b580      	push	{r7, lr}
 8011f56:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 8011f58:	4812      	ldr	r0, [pc, #72]	; (8011fa4 <LoRaMacHalt+0x50>)
 8011f5a:	f00b f991 	bl	801d280 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 8011f5e:	4812      	ldr	r0, [pc, #72]	; (8011fa8 <LoRaMacHalt+0x54>)
 8011f60:	f00b f98e 	bl	801d280 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 8011f64:	4811      	ldr	r0, [pc, #68]	; (8011fac <LoRaMacHalt+0x58>)
 8011f66:	f00b f98b 	bl	801d280 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 8011f6a:	4811      	ldr	r0, [pc, #68]	; (8011fb0 <LoRaMacHalt+0x5c>)
 8011f6c:	f00b f988 	bl	801d280 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 8011f70:	f001 fa8c 	bl	801348c <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 8011f74:	4b0f      	ldr	r3, [pc, #60]	; (8011fb4 <LoRaMacHalt+0x60>)
 8011f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f78:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 8011f7a:	4b0f      	ldr	r3, [pc, #60]	; (8011fb8 <LoRaMacHalt+0x64>)
 8011f7c:	2200      	movs	r2, #0
 8011f7e:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacHandleNvm( &Nvm );
 8011f82:	480e      	ldr	r0, [pc, #56]	; (8011fbc <LoRaMacHalt+0x68>)
 8011f84:	f7fd fba2 	bl	800f6cc <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 8011f88:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8011f8c:	490b      	ldr	r1, [pc, #44]	; (8011fbc <LoRaMacHalt+0x68>)
 8011f8e:	480c      	ldr	r0, [pc, #48]	; (8011fc0 <LoRaMacHalt+0x6c>)
 8011f90:	f006 ffdb 	bl	8018f4a <memcpy1>
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 8011f94:	4b08      	ldr	r3, [pc, #32]	; (8011fb8 <LoRaMacHalt+0x64>)
 8011f96:	2201      	movs	r2, #1
 8011f98:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8011f9c:	2300      	movs	r3, #0
}
 8011f9e:	4618      	mov	r0, r3
 8011fa0:	bd80      	pop	{r7, pc}
 8011fa2:	bf00      	nop
 8011fa4:	20000aa8 	.word	0x20000aa8
 8011fa8:	20000ac0 	.word	0x20000ac0
 8011fac:	20000ad8 	.word	0x20000ad8
 8011fb0:	20000b40 	.word	0x20000b40
 8011fb4:	0801eb70 	.word	0x0801eb70
 8011fb8:	20000740 	.word	0x20000740
 8011fbc:	20000c5c 	.word	0x20000c5c
 8011fc0:	20001228 	.word	0x20001228

08011fc4 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8011fc4:	b590      	push	{r4, r7, lr}
 8011fc6:	b08d      	sub	sp, #52	; 0x34
 8011fc8:	af02      	add	r7, sp, #8
 8011fca:	4603      	mov	r3, r0
 8011fcc:	6039      	str	r1, [r7, #0]
 8011fce:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8011fd0:	4b42      	ldr	r3, [pc, #264]	; (80120dc <LoRaMacQueryTxPossible+0x118>)
 8011fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011fd4:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8011fd6:	4b41      	ldr	r3, [pc, #260]	; (80120dc <LoRaMacQueryTxPossible+0x118>)
 8011fd8:	f993 30dd 	ldrsb.w	r3, [r3, #221]	; 0xdd
 8011fdc:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8011fde:	4b3f      	ldr	r3, [pc, #252]	; (80120dc <LoRaMacQueryTxPossible+0x118>)
 8011fe0:	f993 30dc 	ldrsb.w	r3, [r3, #220]	; 0xdc
 8011fe4:	73bb      	strb	r3, [r7, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 8011fe6:	4b3e      	ldr	r3, [pc, #248]	; (80120e0 <LoRaMacQueryTxPossible+0x11c>)
 8011fe8:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8011fec:	737b      	strb	r3, [r7, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 8011fee:	2300      	movs	r3, #0
 8011ff0:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8011ff2:	683b      	ldr	r3, [r7, #0]
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d101      	bne.n	8011ffc <LoRaMacQueryTxPossible+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011ff8:	2303      	movs	r3, #3
 8011ffa:	e06b      	b.n	80120d4 <LoRaMacQueryTxPossible+0x110>

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 8011ffc:	2300      	movs	r3, #0
 8011ffe:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8012000:	4b36      	ldr	r3, [pc, #216]	; (80120dc <LoRaMacQueryTxPossible+0x118>)
 8012002:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8012006:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8012008:	4b34      	ldr	r3, [pc, #208]	; (80120dc <LoRaMacQueryTxPossible+0x118>)
 801200a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801200c:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 801200e:	4b33      	ldr	r3, [pc, #204]	; (80120dc <LoRaMacQueryTxPossible+0x118>)
 8012010:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8012014:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8012016:	4b31      	ldr	r3, [pc, #196]	; (80120dc <LoRaMacQueryTxPossible+0x118>)
 8012018:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 801201c:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801201e:	4b2f      	ldr	r3, [pc, #188]	; (80120dc <LoRaMacQueryTxPossible+0x118>)
 8012020:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012024:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8012028:	4b2c      	ldr	r3, [pc, #176]	; (80120dc <LoRaMacQueryTxPossible+0x118>)
 801202a:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 801202e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 8012032:	4b2b      	ldr	r3, [pc, #172]	; (80120e0 <LoRaMacQueryTxPossible+0x11c>)
 8012034:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8012038:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801203c:	4b27      	ldr	r3, [pc, #156]	; (80120dc <LoRaMacQueryTxPossible+0x118>)
 801203e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8012042:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 8012046:	4b25      	ldr	r3, [pc, #148]	; (80120dc <LoRaMacQueryTxPossible+0x118>)
 8012048:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801204c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 8012050:	f107 040d 	add.w	r4, r7, #13
 8012054:	f107 020e 	add.w	r2, r7, #14
 8012058:	f107 010f 	add.w	r1, r7, #15
 801205c:	f107 0014 	add.w	r0, r7, #20
 8012060:	f107 0310 	add.w	r3, r7, #16
 8012064:	9300      	str	r3, [sp, #0]
 8012066:	4623      	mov	r3, r4
 8012068:	f001 f8da 	bl	8013220 <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 801206c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012070:	4618      	mov	r0, r3
 8012072:	f7fd fe59 	bl	800fd28 <GetMaxAppPayloadWithoutFOptsLength>
 8012076:	4603      	mov	r3, r0
 8012078:	461a      	mov	r2, r3
 801207a:	683b      	ldr	r3, [r7, #0]
 801207c:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 801207e:	f107 0308 	add.w	r3, r7, #8
 8012082:	4618      	mov	r0, r3
 8012084:	f001 fca4 	bl	80139d0 <LoRaMacCommandsGetSizeSerializedCmds>
 8012088:	4603      	mov	r3, r0
 801208a:	2b00      	cmp	r3, #0
 801208c:	d001      	beq.n	8012092 <LoRaMacQueryTxPossible+0xce>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801208e:	2313      	movs	r3, #19
 8012090:	e020      	b.n	80120d4 <LoRaMacQueryTxPossible+0x110>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8012092:	68bb      	ldr	r3, [r7, #8]
 8012094:	2b0f      	cmp	r3, #15
 8012096:	d819      	bhi.n	80120cc <LoRaMacQueryTxPossible+0x108>
 8012098:	683b      	ldr	r3, [r7, #0]
 801209a:	785b      	ldrb	r3, [r3, #1]
 801209c:	461a      	mov	r2, r3
 801209e:	68bb      	ldr	r3, [r7, #8]
 80120a0:	429a      	cmp	r2, r3
 80120a2:	d313      	bcc.n	80120cc <LoRaMacQueryTxPossible+0x108>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 80120a4:	683b      	ldr	r3, [r7, #0]
 80120a6:	785a      	ldrb	r2, [r3, #1]
 80120a8:	68bb      	ldr	r3, [r7, #8]
 80120aa:	b2db      	uxtb	r3, r3
 80120ac:	1ad3      	subs	r3, r2, r3
 80120ae:	b2da      	uxtb	r2, r3
 80120b0:	683b      	ldr	r3, [r7, #0]
 80120b2:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 80120b4:	683b      	ldr	r3, [r7, #0]
 80120b6:	785b      	ldrb	r3, [r3, #1]
 80120b8:	4619      	mov	r1, r3
 80120ba:	79fa      	ldrb	r2, [r7, #7]
 80120bc:	68bb      	ldr	r3, [r7, #8]
 80120be:	4413      	add	r3, r2
 80120c0:	4299      	cmp	r1, r3
 80120c2:	d301      	bcc.n	80120c8 <LoRaMacQueryTxPossible+0x104>
        {
            return LORAMAC_STATUS_OK;
 80120c4:	2300      	movs	r3, #0
 80120c6:	e005      	b.n	80120d4 <LoRaMacQueryTxPossible+0x110>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 80120c8:	2308      	movs	r3, #8
 80120ca:	e003      	b.n	80120d4 <LoRaMacQueryTxPossible+0x110>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 80120cc:	683b      	ldr	r3, [r7, #0]
 80120ce:	2200      	movs	r2, #0
 80120d0:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 80120d2:	2308      	movs	r3, #8
    }
}
 80120d4:	4618      	mov	r0, r3
 80120d6:	372c      	adds	r7, #44	; 0x2c
 80120d8:	46bd      	mov	sp, r7
 80120da:	bd90      	pop	{r4, r7, pc}
 80120dc:	20000c5c 	.word	0x20000c5c
 80120e0:	20000740 	.word	0x20000740

080120e4 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 80120e4:	b590      	push	{r4, r7, lr}
 80120e6:	b087      	sub	sp, #28
 80120e8:	af00      	add	r7, sp, #0
 80120ea:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80120ec:	2300      	movs	r3, #0
 80120ee:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d101      	bne.n	80120fa <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80120f6:	2303      	movs	r3, #3
 80120f8:	e1c4      	b.n	8012484 <LoRaMacMibGetRequestConfirm+0x3a0>
    }

    switch( mibGet->Type )
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	781b      	ldrb	r3, [r3, #0]
 80120fe:	2b41      	cmp	r3, #65	; 0x41
 8012100:	f200 81b9 	bhi.w	8012476 <LoRaMacMibGetRequestConfirm+0x392>
 8012104:	a201      	add	r2, pc, #4	; (adr r2, 801210c <LoRaMacMibGetRequestConfirm+0x28>)
 8012106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801210a:	bf00      	nop
 801210c:	08012215 	.word	0x08012215
 8012110:	08012221 	.word	0x08012221
 8012114:	0801222d 	.word	0x0801222d
 8012118:	08012239 	.word	0x08012239
 801211c:	08012245 	.word	0x08012245
 8012120:	08012251 	.word	0x08012251
 8012124:	0801225d 	.word	0x0801225d
 8012128:	08012477 	.word	0x08012477
 801212c:	08012477 	.word	0x08012477
 8012130:	08012477 	.word	0x08012477
 8012134:	08012477 	.word	0x08012477
 8012138:	08012477 	.word	0x08012477
 801213c:	08012477 	.word	0x08012477
 8012140:	08012477 	.word	0x08012477
 8012144:	08012477 	.word	0x08012477
 8012148:	08012271 	.word	0x08012271
 801214c:	0801227d 	.word	0x0801227d
 8012150:	08012289 	.word	0x08012289
 8012154:	080122ab 	.word	0x080122ab
 8012158:	080122bd 	.word	0x080122bd
 801215c:	080122cf 	.word	0x080122cf
 8012160:	080122e1 	.word	0x080122e1
 8012164:	08012315 	.word	0x08012315
 8012168:	080122f3 	.word	0x080122f3
 801216c:	08012337 	.word	0x08012337
 8012170:	08012343 	.word	0x08012343
 8012174:	0801234d 	.word	0x0801234d
 8012178:	08012357 	.word	0x08012357
 801217c:	08012361 	.word	0x08012361
 8012180:	0801236b 	.word	0x0801236b
 8012184:	08012375 	.word	0x08012375
 8012188:	080123a1 	.word	0x080123a1
 801218c:	080123ad 	.word	0x080123ad
 8012190:	080123c5 	.word	0x080123c5
 8012194:	080123b9 	.word	0x080123b9
 8012198:	080123d1 	.word	0x080123d1
 801219c:	080123db 	.word	0x080123db
 80121a0:	080123e7 	.word	0x080123e7
 80121a4:	08012403 	.word	0x08012403
 80121a8:	080123f3 	.word	0x080123f3
 80121ac:	080123fb 	.word	0x080123fb
 80121b0:	08012477 	.word	0x08012477
 80121b4:	0801240f 	.word	0x0801240f
 80121b8:	08012477 	.word	0x08012477
 80121bc:	08012477 	.word	0x08012477
 80121c0:	08012477 	.word	0x08012477
 80121c4:	08012477 	.word	0x08012477
 80121c8:	08012477 	.word	0x08012477
 80121cc:	08012477 	.word	0x08012477
 80121d0:	08012477 	.word	0x08012477
 80121d4:	08012477 	.word	0x08012477
 80121d8:	08012477 	.word	0x08012477
 80121dc:	08012477 	.word	0x08012477
 80121e0:	08012477 	.word	0x08012477
 80121e4:	08012477 	.word	0x08012477
 80121e8:	08012477 	.word	0x08012477
 80121ec:	08012477 	.word	0x08012477
 80121f0:	08012477 	.word	0x08012477
 80121f4:	08012423 	.word	0x08012423
 80121f8:	0801242f 	.word	0x0801242f
 80121fc:	0801243b 	.word	0x0801243b
 8012200:	08012447 	.word	0x08012447
 8012204:	08012453 	.word	0x08012453
 8012208:	0801245f 	.word	0x0801245f
 801220c:	0801246b 	.word	0x0801246b
 8012210:	08012471 	.word	0x08012471
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8012214:	4b9d      	ldr	r3, [pc, #628]	; (801248c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012216:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	711a      	strb	r2, [r3, #4]
            break;
 801221e:	e130      	b.n	8012482 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8012220:	4b9a      	ldr	r3, [pc, #616]	; (801248c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012222:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	711a      	strb	r2, [r3, #4]
            break;
 801222a:	e12a      	b.n	8012482 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	685b      	ldr	r3, [r3, #4]
 8012230:	4618      	mov	r0, r3
 8012232:	f7fa fab5 	bl	800c7a0 <SecureElementGetDevEui>
            break;
 8012236:	e124      	b.n	8012482 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	685b      	ldr	r3, [r3, #4]
 801223c:	4618      	mov	r0, r3
 801223e:	f7fa fadf 	bl	800c800 <SecureElementGetJoinEui>
            break;
 8012242:	e11e      	b.n	8012482 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8012244:	4b91      	ldr	r3, [pc, #580]	; (801248c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012246:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	711a      	strb	r2, [r3, #4]
            break;
 801224e:	e118      	b.n	8012482 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8012250:	4b8e      	ldr	r3, [pc, #568]	; (801248c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012252:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	605a      	str	r2, [r3, #4]
            break;
 801225a:	e112      	b.n	8012482 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 801225c:	4b8b      	ldr	r3, [pc, #556]	; (801248c <LoRaMacMibGetRequestConfirm+0x3a8>)
 801225e:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	3304      	adds	r3, #4
 8012266:	4619      	mov	r1, r3
 8012268:	4610      	mov	r0, r2
 801226a:	f7fa fafb 	bl	800c864 <SecureElementGetDevAddr>
            break;
 801226e:	e108      	b.n	8012482 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8012270:	4b86      	ldr	r3, [pc, #536]	; (801248c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012272:	f893 2119 	ldrb.w	r2, [r3, #281]	; 0x119
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	711a      	strb	r2, [r3, #4]
            break;
 801227a:	e102      	b.n	8012482 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 801227c:	4b83      	ldr	r3, [pc, #524]	; (801248c <LoRaMacMibGetRequestConfirm+0x3a8>)
 801227e:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	711a      	strb	r2, [r3, #4]
            break;
 8012286:	e0fc      	b.n	8012482 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8012288:	231c      	movs	r3, #28
 801228a:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801228c:	4b7f      	ldr	r3, [pc, #508]	; (801248c <LoRaMacMibGetRequestConfirm+0x3a8>)
 801228e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012292:	f107 0210 	add.w	r2, r7, #16
 8012296:	4611      	mov	r1, r2
 8012298:	4618      	mov	r0, r3
 801229a:	f003 f855 	bl	8015348 <RegionGetPhyParam>
 801229e:	4603      	mov	r3, r0
 80122a0:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 80122a2:	68fa      	ldr	r2, [r7, #12]
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	605a      	str	r2, [r3, #4]
            break;
 80122a8:	e0eb      	b.n	8012482 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	4a77      	ldr	r2, [pc, #476]	; (801248c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80122ae:	3304      	adds	r3, #4
 80122b0:	326c      	adds	r2, #108	; 0x6c
 80122b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80122b6:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80122ba:	e0e2      	b.n	8012482 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	4a73      	ldr	r2, [pc, #460]	; (801248c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80122c0:	3304      	adds	r3, #4
 80122c2:	32b4      	adds	r2, #180	; 0xb4
 80122c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80122c8:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80122cc:	e0d9      	b.n	8012482 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	4a6e      	ldr	r2, [pc, #440]	; (801248c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80122d2:	3304      	adds	r3, #4
 80122d4:	3274      	adds	r2, #116	; 0x74
 80122d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80122da:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80122de:	e0d0      	b.n	8012482 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	4a6a      	ldr	r2, [pc, #424]	; (801248c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80122e4:	3304      	adds	r3, #4
 80122e6:	32bc      	adds	r2, #188	; 0xbc
 80122e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80122ec:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80122f0:	e0c7      	b.n	8012482 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 80122f2:	231a      	movs	r3, #26
 80122f4:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80122f6:	4b65      	ldr	r3, [pc, #404]	; (801248c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80122f8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80122fc:	f107 0210 	add.w	r2, r7, #16
 8012300:	4611      	mov	r1, r2
 8012302:	4618      	mov	r0, r3
 8012304:	f003 f820 	bl	8015348 <RegionGetPhyParam>
 8012308:	4603      	mov	r3, r0
 801230a:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 801230c:	68fa      	ldr	r2, [r7, #12]
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	605a      	str	r2, [r3, #4]
            break;
 8012312:	e0b6      	b.n	8012482 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8012314:	2319      	movs	r3, #25
 8012316:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012318:	4b5c      	ldr	r3, [pc, #368]	; (801248c <LoRaMacMibGetRequestConfirm+0x3a8>)
 801231a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801231e:	f107 0210 	add.w	r2, r7, #16
 8012322:	4611      	mov	r1, r2
 8012324:	4618      	mov	r0, r3
 8012326:	f003 f80f 	bl	8015348 <RegionGetPhyParam>
 801232a:	4603      	mov	r3, r0
 801232c:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 801232e:	68fa      	ldr	r2, [r7, #12]
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	605a      	str	r2, [r3, #4]
            break;
 8012334:	e0a5      	b.n	8012482 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8012336:	4b55      	ldr	r3, [pc, #340]	; (801248c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012338:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	711a      	strb	r2, [r3, #4]
            break;
 8012340:	e09f      	b.n	8012482 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 8012342:	4b52      	ldr	r3, [pc, #328]	; (801248c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012344:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	605a      	str	r2, [r3, #4]
            break;
 801234a:	e09a      	b.n	8012482 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 801234c:	4b4f      	ldr	r3, [pc, #316]	; (801248c <LoRaMacMibGetRequestConfirm+0x3a8>)
 801234e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	605a      	str	r2, [r3, #4]
            break;
 8012354:	e095      	b.n	8012482 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8012356:	4b4d      	ldr	r3, [pc, #308]	; (801248c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012358:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	605a      	str	r2, [r3, #4]
            break;
 801235e:	e090      	b.n	8012482 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8012360:	4b4a      	ldr	r3, [pc, #296]	; (801248c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012362:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	605a      	str	r2, [r3, #4]
            break;
 8012368:	e08b      	b.n	8012482 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 801236a:	4b48      	ldr	r3, [pc, #288]	; (801248c <LoRaMacMibGetRequestConfirm+0x3a8>)
 801236c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	605a      	str	r2, [r3, #4]
            break;
 8012372:	e086      	b.n	8012482 <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_CHANNELS_MIN_TX_DATARATE:
        {
            getPhy.Attribute = PHY_MIN_TX_DR;
 8012374:	2302      	movs	r3, #2
 8012376:	743b      	strb	r3, [r7, #16]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012378:	4b44      	ldr	r3, [pc, #272]	; (801248c <LoRaMacMibGetRequestConfirm+0x3a8>)
 801237a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801237e:	74bb      	strb	r3, [r7, #18]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012380:	4b42      	ldr	r3, [pc, #264]	; (801248c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012382:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012386:	f107 0210 	add.w	r2, r7, #16
 801238a:	4611      	mov	r1, r2
 801238c:	4618      	mov	r0, r3
 801238e:	f002 ffdb 	bl	8015348 <RegionGetPhyParam>
 8012392:	4603      	mov	r3, r0
 8012394:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	b25a      	sxtb	r2, r3
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	711a      	strb	r2, [r3, #4]
            break;
 801239e:	e070      	b.n	8012482 <LoRaMacMibGetRequestConfirm+0x39e>
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80123a0:	4b3a      	ldr	r3, [pc, #232]	; (801248c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80123a2:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	711a      	strb	r2, [r3, #4]
            break;
 80123aa:	e06a      	b.n	8012482 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 80123ac:	4b37      	ldr	r3, [pc, #220]	; (801248c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80123ae:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	711a      	strb	r2, [r3, #4]
            break;
 80123b6:	e064      	b.n	8012482 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80123b8:	4b34      	ldr	r3, [pc, #208]	; (801248c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80123ba:	f993 20dc 	ldrsb.w	r2, [r3, #220]	; 0xdc
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	711a      	strb	r2, [r3, #4]
            break;
 80123c2:	e05e      	b.n	8012482 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 80123c4:	4b31      	ldr	r3, [pc, #196]	; (801248c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80123c6:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	711a      	strb	r2, [r3, #4]
            break;
 80123ce:	e058      	b.n	8012482 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 80123d0:	4b2e      	ldr	r3, [pc, #184]	; (801248c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80123d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	605a      	str	r2, [r3, #4]
            break;
 80123d8:	e053      	b.n	8012482 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 80123da:	4b2c      	ldr	r3, [pc, #176]	; (801248c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80123dc:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	711a      	strb	r2, [r3, #4]
            break;
 80123e4:	e04d      	b.n	8012482 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80123e6:	4b29      	ldr	r3, [pc, #164]	; (801248c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80123e8:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	605a      	str	r2, [r3, #4]
            break;
 80123f0:	e047      	b.n	8012482 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	4a25      	ldr	r2, [pc, #148]	; (801248c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80123f6:	605a      	str	r2, [r3, #4]
            break;
 80123f8:	e043      	b.n	8012482 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	4a24      	ldr	r2, [pc, #144]	; (8012490 <LoRaMacMibGetRequestConfirm+0x3ac>)
 80123fe:	605a      	str	r2, [r3, #4]
#else
            mibGet->Param.BackupContexts = NULL;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 8012400:	e03f      	b.n	8012482 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8012402:	4b22      	ldr	r3, [pc, #136]	; (801248c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012404:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	605a      	str	r2, [r3, #4]
            break;
 801240c:	e039      	b.n	8012482 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	4a1e      	ldr	r2, [pc, #120]	; (801248c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012412:	f8d2 212c 	ldr.w	r2, [r2, #300]	; 0x12c
 8012416:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8012418:	687c      	ldr	r4, [r7, #4]
 801241a:	f003 f9a3 	bl	8015764 <RegionGetVersion>
 801241e:	60a0      	str	r0, [r4, #8]
            break;
 8012420:	e02f      	b.n	8012482 <LoRaMacMibGetRequestConfirm+0x39e>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 8012422:	4b1a      	ldr	r3, [pc, #104]	; (801248c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012424:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	605a      	str	r2, [r3, #4]
            break;
 801242c:	e029      	b.n	8012482 <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 801242e:	4b17      	ldr	r3, [pc, #92]	; (801248c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012430:	f893 211f 	ldrb.w	r2, [r3, #287]	; 0x11f
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	711a      	strb	r2, [r3, #4]
            break;
 8012438:	e023      	b.n	8012482 <LoRaMacMibGetRequestConfirm+0x39e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 801243a:	4b14      	ldr	r3, [pc, #80]	; (801248c <LoRaMacMibGetRequestConfirm+0x3a8>)
 801243c:	f8b3 2088 	ldrh.w	r2, [r3, #136]	; 0x88
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	809a      	strh	r2, [r3, #4]
            break;
 8012444:	e01d      	b.n	8012482 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8012446:	4b11      	ldr	r3, [pc, #68]	; (801248c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012448:	f8b3 208a 	ldrh.w	r2, [r3, #138]	; 0x8a
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	809a      	strh	r2, [r3, #4]
            break;
 8012450:	e017      	b.n	8012482 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 8012452:	4b0e      	ldr	r3, [pc, #56]	; (801248c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012454:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	809a      	strh	r2, [r3, #4]
            break;
 801245c:	e011      	b.n	8012482 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 801245e:	4b0b      	ldr	r3, [pc, #44]	; (801248c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012460:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	809a      	strh	r2, [r3, #4]
            break;
 8012468:	e00b      	b.n	8012482 <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.RssiFreeThreshold = Nvm.RegionGroup2.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 801246a:	2318      	movs	r3, #24
 801246c:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 801246e:	e008      	b.n	8012482 <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.CarrierSenseTime = Nvm.RegionGroup2.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8012470:	2318      	movs	r3, #24
 8012472:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8012474:	e005      	b.n	8012482 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8012476:	6878      	ldr	r0, [r7, #4]
 8012478:	f001 f81f 	bl	80134ba <LoRaMacClassBMibGetRequestConfirm>
 801247c:	4603      	mov	r3, r0
 801247e:	75fb      	strb	r3, [r7, #23]
            break;
 8012480:	bf00      	nop
        }
    }
    return status;
 8012482:	7dfb      	ldrb	r3, [r7, #23]
}
 8012484:	4618      	mov	r0, r3
 8012486:	371c      	adds	r7, #28
 8012488:	46bd      	mov	sp, r7
 801248a:	bd90      	pop	{r4, r7, pc}
 801248c:	20000c5c 	.word	0x20000c5c
 8012490:	20001228 	.word	0x20001228

08012494 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8012494:	b580      	push	{r7, lr}
 8012496:	b086      	sub	sp, #24
 8012498:	af00      	add	r7, sp, #0
 801249a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801249c:	2300      	movs	r3, #0
 801249e:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d101      	bne.n	80124aa <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80124a6:	2303      	movs	r3, #3
 80124a8:	e396      	b.n	8012bd8 <LoRaMacMibSetRequestConfirm+0x744>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 80124aa:	4bbd      	ldr	r3, [pc, #756]	; (80127a0 <LoRaMacMibSetRequestConfirm+0x30c>)
 80124ac:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80124b0:	f003 0302 	and.w	r3, r3, #2
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d001      	beq.n	80124bc <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 80124b8:	2301      	movs	r3, #1
 80124ba:	e38d      	b.n	8012bd8 <LoRaMacMibSetRequestConfirm+0x744>
    }

    switch( mibSet->Type )
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	781b      	ldrb	r3, [r3, #0]
 80124c0:	2b41      	cmp	r3, #65	; 0x41
 80124c2:	f200 835d 	bhi.w	8012b80 <LoRaMacMibSetRequestConfirm+0x6ec>
 80124c6:	a201      	add	r2, pc, #4	; (adr r2, 80124cc <LoRaMacMibSetRequestConfirm+0x38>)
 80124c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124cc:	080125d5 	.word	0x080125d5
 80124d0:	080125e5 	.word	0x080125e5
 80124d4:	080125ff 	.word	0x080125ff
 80124d8:	08012617 	.word	0x08012617
 80124dc:	0801262f 	.word	0x0801262f
 80124e0:	0801263b 	.word	0x0801263b
 80124e4:	08012647 	.word	0x08012647
 80124e8:	08012671 	.word	0x08012671
 80124ec:	08012697 	.word	0x08012697
 80124f0:	080126bd 	.word	0x080126bd
 80124f4:	080126e3 	.word	0x080126e3
 80124f8:	08012709 	.word	0x08012709
 80124fc:	0801272f 	.word	0x0801272f
 8012500:	08012755 	.word	0x08012755
 8012504:	0801277b 	.word	0x0801277b
 8012508:	080127a9 	.word	0x080127a9
 801250c:	080127c9 	.word	0x080127c9
 8012510:	08012b81 	.word	0x08012b81
 8012514:	080127d5 	.word	0x080127d5
 8012518:	08012845 	.word	0x08012845
 801251c:	08012885 	.word	0x08012885
 8012520:	080128e7 	.word	0x080128e7
 8012524:	08012957 	.word	0x08012957
 8012528:	08012927 	.word	0x08012927
 801252c:	08012987 	.word	0x08012987
 8012530:	080129a9 	.word	0x080129a9
 8012534:	080129b3 	.word	0x080129b3
 8012538:	080129bd 	.word	0x080129bd
 801253c:	080129c7 	.word	0x080129c7
 8012540:	080129d1 	.word	0x080129d1
 8012544:	08012b81 	.word	0x08012b81
 8012548:	080129db 	.word	0x080129db
 801254c:	08012a0d 	.word	0x08012a0d
 8012550:	08012a81 	.word	0x08012a81
 8012554:	08012a47 	.word	0x08012a47
 8012558:	08012ab3 	.word	0x08012ab3
 801255c:	08012ac9 	.word	0x08012ac9
 8012560:	08012ae1 	.word	0x08012ae1
 8012564:	08012aed 	.word	0x08012aed
 8012568:	08012af9 	.word	0x08012af9
 801256c:	08012b81 	.word	0x08012b81
 8012570:	08012b03 	.word	0x08012b03
 8012574:	08012b81 	.word	0x08012b81
 8012578:	08012b81 	.word	0x08012b81
 801257c:	08012b81 	.word	0x08012b81
 8012580:	08012b81 	.word	0x08012b81
 8012584:	08012b81 	.word	0x08012b81
 8012588:	08012b81 	.word	0x08012b81
 801258c:	08012b81 	.word	0x08012b81
 8012590:	08012b81 	.word	0x08012b81
 8012594:	08012b81 	.word	0x08012b81
 8012598:	08012b81 	.word	0x08012b81
 801259c:	08012b81 	.word	0x08012b81
 80125a0:	08012b81 	.word	0x08012b81
 80125a4:	08012b81 	.word	0x08012b81
 80125a8:	08012b81 	.word	0x08012b81
 80125ac:	08012b81 	.word	0x08012b81
 80125b0:	08012b81 	.word	0x08012b81
 80125b4:	08012b2d 	.word	0x08012b2d
 80125b8:	08012b39 	.word	0x08012b39
 80125bc:	08012b45 	.word	0x08012b45
 80125c0:	08012b51 	.word	0x08012b51
 80125c4:	08012b5d 	.word	0x08012b5d
 80125c8:	08012b69 	.word	0x08012b69
 80125cc:	08012b75 	.word	0x08012b75
 80125d0:	08012b7b 	.word	0x08012b7b
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	791b      	ldrb	r3, [r3, #4]
 80125d8:	4618      	mov	r0, r3
 80125da:	f7fd fabb 	bl	800fb54 <SwitchClass>
 80125de:	4603      	mov	r3, r0
 80125e0:	75fb      	strb	r3, [r7, #23]
            break;
 80125e2:	e2ee      	b.n	8012bc2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	791b      	ldrb	r3, [r3, #4]
 80125e8:	2b02      	cmp	r3, #2
 80125ea:	d005      	beq.n	80125f8 <LoRaMacMibSetRequestConfirm+0x164>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	791a      	ldrb	r2, [r3, #4]
 80125f0:	4b6c      	ldr	r3, [pc, #432]	; (80127a4 <LoRaMacMibSetRequestConfirm+0x310>)
 80125f2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80125f6:	e2e4      	b.n	8012bc2 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80125f8:	2303      	movs	r3, #3
 80125fa:	75fb      	strb	r3, [r7, #23]
            break;
 80125fc:	e2e1      	b.n	8012bc2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	685b      	ldr	r3, [r3, #4]
 8012602:	4618      	mov	r0, r3
 8012604:	f7fa f8b4 	bl	800c770 <SecureElementSetDevEui>
 8012608:	4603      	mov	r3, r0
 801260a:	2b00      	cmp	r3, #0
 801260c:	f000 82be 	beq.w	8012b8c <LoRaMacMibSetRequestConfirm+0x6f8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012610:	2303      	movs	r3, #3
 8012612:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012614:	e2ba      	b.n	8012b8c <LoRaMacMibSetRequestConfirm+0x6f8>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	685b      	ldr	r3, [r3, #4]
 801261a:	4618      	mov	r0, r3
 801261c:	f7fa f8d8 	bl	800c7d0 <SecureElementSetJoinEui>
 8012620:	4603      	mov	r3, r0
 8012622:	2b00      	cmp	r3, #0
 8012624:	f000 82b4 	beq.w	8012b90 <LoRaMacMibSetRequestConfirm+0x6fc>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012628:	2303      	movs	r3, #3
 801262a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801262c:	e2b0      	b.n	8012b90 <LoRaMacMibSetRequestConfirm+0x6fc>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	791a      	ldrb	r2, [r3, #4]
 8012632:	4b5c      	ldr	r3, [pc, #368]	; (80127a4 <LoRaMacMibSetRequestConfirm+0x310>)
 8012634:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
            break;
 8012638:	e2c3      	b.n	8012bc2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	685b      	ldr	r3, [r3, #4]
 801263e:	4a59      	ldr	r2, [pc, #356]	; (80127a4 <LoRaMacMibSetRequestConfirm+0x310>)
 8012640:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
            break;
 8012644:	e2bd      	b.n	8012bc2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEV_ADDR:
        {
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 8012646:	4b57      	ldr	r3, [pc, #348]	; (80127a4 <LoRaMacMibSetRequestConfirm+0x310>)
 8012648:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	685b      	ldr	r3, [r3, #4]
 8012650:	4619      	mov	r1, r3
 8012652:	4610      	mov	r0, r2
 8012654:	f7fa f8ec 	bl	800c830 <SecureElementSetDevAddr>
 8012658:	4603      	mov	r3, r0
 801265a:	2b00      	cmp	r3, #0
 801265c:	d002      	beq.n	8012664 <LoRaMacMibSetRequestConfirm+0x1d0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801265e:	2303      	movs	r3, #3
 8012660:	75fb      	strb	r3, [r7, #23]
            else
            {
                /* Update Nvm.MacGroup2.devAdr to handle set/get sequence */
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
            }
            break;
 8012662:	e2ae      	b.n	8012bc2 <LoRaMacMibSetRequestConfirm+0x72e>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	685b      	ldr	r3, [r3, #4]
 8012668:	4a4e      	ldr	r2, [pc, #312]	; (80127a4 <LoRaMacMibSetRequestConfirm+0x310>)
 801266a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
            break;
 801266e:	e2a8      	b.n	8012bc2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	685b      	ldr	r3, [r3, #4]
 8012674:	2b00      	cmp	r3, #0
 8012676:	d00b      	beq.n	8012690 <LoRaMacMibSetRequestConfirm+0x1fc>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	685b      	ldr	r3, [r3, #4]
 801267c:	4619      	mov	r1, r3
 801267e:	2000      	movs	r0, #0
 8012680:	f002 f868 	bl	8014754 <LoRaMacCryptoSetKey>
 8012684:	4603      	mov	r3, r0
 8012686:	2b00      	cmp	r3, #0
 8012688:	f000 8284 	beq.w	8012b94 <LoRaMacMibSetRequestConfirm+0x700>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801268c:	2311      	movs	r3, #17
 801268e:	e2a3      	b.n	8012bd8 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012690:	2303      	movs	r3, #3
 8012692:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012694:	e27e      	b.n	8012b94 <LoRaMacMibSetRequestConfirm+0x700>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	685b      	ldr	r3, [r3, #4]
 801269a:	2b00      	cmp	r3, #0
 801269c:	d00b      	beq.n	80126b6 <LoRaMacMibSetRequestConfirm+0x222>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	685b      	ldr	r3, [r3, #4]
 80126a2:	4619      	mov	r1, r3
 80126a4:	2001      	movs	r0, #1
 80126a6:	f002 f855 	bl	8014754 <LoRaMacCryptoSetKey>
 80126aa:	4603      	mov	r3, r0
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	f000 8273 	beq.w	8012b98 <LoRaMacMibSetRequestConfirm+0x704>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80126b2:	2311      	movs	r3, #17
 80126b4:	e290      	b.n	8012bd8 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80126b6:	2303      	movs	r3, #3
 80126b8:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80126ba:	e26d      	b.n	8012b98 <LoRaMacMibSetRequestConfirm+0x704>
            break;
        }
#else
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	685b      	ldr	r3, [r3, #4]
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d00b      	beq.n	80126dc <LoRaMacMibSetRequestConfirm+0x248>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	685b      	ldr	r3, [r3, #4]
 80126c8:	4619      	mov	r1, r3
 80126ca:	2008      	movs	r0, #8
 80126cc:	f002 f842 	bl	8014754 <LoRaMacCryptoSetKey>
 80126d0:	4603      	mov	r3, r0
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	f000 8262 	beq.w	8012b9c <LoRaMacMibSetRequestConfirm+0x708>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80126d8:	2311      	movs	r3, #17
 80126da:	e27d      	b.n	8012bd8 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80126dc:	2303      	movs	r3, #3
 80126de:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80126e0:	e25c      	b.n	8012b9c <LoRaMacMibSetRequestConfirm+0x708>
        }
#endif /* LORAMAC_VERSION */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	685b      	ldr	r3, [r3, #4]
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d00b      	beq.n	8012702 <LoRaMacMibSetRequestConfirm+0x26e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	685b      	ldr	r3, [r3, #4]
 80126ee:	4619      	mov	r1, r3
 80126f0:	2009      	movs	r0, #9
 80126f2:	f002 f82f 	bl	8014754 <LoRaMacCryptoSetKey>
 80126f6:	4603      	mov	r3, r0
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	f000 8251 	beq.w	8012ba0 <LoRaMacMibSetRequestConfirm+0x70c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80126fe:	2311      	movs	r3, #17
 8012700:	e26a      	b.n	8012bd8 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012702:	2303      	movs	r3, #3
 8012704:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012706:	e24b      	b.n	8012ba0 <LoRaMacMibSetRequestConfirm+0x70c>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	685b      	ldr	r3, [r3, #4]
 801270c:	2b00      	cmp	r3, #0
 801270e:	d00b      	beq.n	8012728 <LoRaMacMibSetRequestConfirm+0x294>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	685b      	ldr	r3, [r3, #4]
 8012714:	4619      	mov	r1, r3
 8012716:	200c      	movs	r0, #12
 8012718:	f002 f81c 	bl	8014754 <LoRaMacCryptoSetKey>
 801271c:	4603      	mov	r3, r0
 801271e:	2b00      	cmp	r3, #0
 8012720:	f000 8240 	beq.w	8012ba4 <LoRaMacMibSetRequestConfirm+0x710>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012724:	2311      	movs	r3, #17
 8012726:	e257      	b.n	8012bd8 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012728:	2303      	movs	r3, #3
 801272a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801272c:	e23a      	b.n	8012ba4 <LoRaMacMibSetRequestConfirm+0x710>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	685b      	ldr	r3, [r3, #4]
 8012732:	2b00      	cmp	r3, #0
 8012734:	d00b      	beq.n	801274e <LoRaMacMibSetRequestConfirm+0x2ba>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	685b      	ldr	r3, [r3, #4]
 801273a:	4619      	mov	r1, r3
 801273c:	200d      	movs	r0, #13
 801273e:	f002 f809 	bl	8014754 <LoRaMacCryptoSetKey>
 8012742:	4603      	mov	r3, r0
 8012744:	2b00      	cmp	r3, #0
 8012746:	f000 822f 	beq.w	8012ba8 <LoRaMacMibSetRequestConfirm+0x714>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801274a:	2311      	movs	r3, #17
 801274c:	e244      	b.n	8012bd8 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801274e:	2303      	movs	r3, #3
 8012750:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012752:	e229      	b.n	8012ba8 <LoRaMacMibSetRequestConfirm+0x714>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	685b      	ldr	r3, [r3, #4]
 8012758:	2b00      	cmp	r3, #0
 801275a:	d00b      	beq.n	8012774 <LoRaMacMibSetRequestConfirm+0x2e0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	685b      	ldr	r3, [r3, #4]
 8012760:	4619      	mov	r1, r3
 8012762:	200e      	movs	r0, #14
 8012764:	f001 fff6 	bl	8014754 <LoRaMacCryptoSetKey>
 8012768:	4603      	mov	r3, r0
 801276a:	2b00      	cmp	r3, #0
 801276c:	f000 821e 	beq.w	8012bac <LoRaMacMibSetRequestConfirm+0x718>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012770:	2311      	movs	r3, #17
 8012772:	e231      	b.n	8012bd8 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012774:	2303      	movs	r3, #3
 8012776:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012778:	e218      	b.n	8012bac <LoRaMacMibSetRequestConfirm+0x718>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	685b      	ldr	r3, [r3, #4]
 801277e:	2b00      	cmp	r3, #0
 8012780:	d00b      	beq.n	801279a <LoRaMacMibSetRequestConfirm+0x306>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	685b      	ldr	r3, [r3, #4]
 8012786:	4619      	mov	r1, r3
 8012788:	200f      	movs	r0, #15
 801278a:	f001 ffe3 	bl	8014754 <LoRaMacCryptoSetKey>
 801278e:	4603      	mov	r3, r0
 8012790:	2b00      	cmp	r3, #0
 8012792:	f000 820d 	beq.w	8012bb0 <LoRaMacMibSetRequestConfirm+0x71c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012796:	2311      	movs	r3, #17
 8012798:	e21e      	b.n	8012bd8 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801279a:	2303      	movs	r3, #3
 801279c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801279e:	e207      	b.n	8012bb0 <LoRaMacMibSetRequestConfirm+0x71c>
 80127a0:	20000740 	.word	0x20000740
 80127a4:	20000c5c 	.word	0x20000c5c
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	791a      	ldrb	r2, [r3, #4]
 80127ac:	4bb2      	ldr	r3, [pc, #712]	; (8012a78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80127ae:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80127b2:	4bb2      	ldr	r3, [pc, #712]	; (8012a7c <LoRaMacMibSetRequestConfirm+0x5e8>)
 80127b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80127b6:	4ab0      	ldr	r2, [pc, #704]	; (8012a78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80127b8:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 80127bc:	4610      	mov	r0, r2
 80127be:	4798      	blx	r3
            Radio.Sleep( );
 80127c0:	4bae      	ldr	r3, [pc, #696]	; (8012a7c <LoRaMacMibSetRequestConfirm+0x5e8>)
 80127c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127c4:	4798      	blx	r3
            break;
 80127c6:	e1fc      	b.n	8012bc2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	791a      	ldrb	r2, [r3, #4]
 80127cc:	4baa      	ldr	r3, [pc, #680]	; (8012a78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80127ce:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
            break;
 80127d2:	e1f6      	b.n	8012bc2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	7a1b      	ldrb	r3, [r3, #8]
 80127d8:	b25b      	sxtb	r3, r3
 80127da:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80127dc:	4ba6      	ldr	r3, [pc, #664]	; (8012a78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80127de:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80127e2:	727b      	strb	r3, [r7, #9]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 80127e4:	4ba4      	ldr	r3, [pc, #656]	; (8012a78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80127e6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80127ea:	f107 0108 	add.w	r1, r7, #8
 80127ee:	2207      	movs	r2, #7
 80127f0:	4618      	mov	r0, r3
 80127f2:	f002 fdf7 	bl	80153e4 <RegionVerify>
 80127f6:	4603      	mov	r3, r0
 80127f8:	f083 0301 	eor.w	r3, r3, #1
 80127fc:	b2db      	uxtb	r3, r3
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d002      	beq.n	8012808 <LoRaMacMibSetRequestConfirm+0x374>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012802:	2303      	movs	r3, #3
 8012804:	75fb      	strb	r3, [r7, #23]
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            break;
 8012806:	e1dc      	b.n	8012bc2 <LoRaMacMibSetRequestConfirm+0x72e>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	685b      	ldr	r3, [r3, #4]
 801280c:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 801280e:	4b9a      	ldr	r3, [pc, #616]	; (8012a78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012810:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012814:	f107 0108 	add.w	r1, r7, #8
 8012818:	2200      	movs	r2, #0
 801281a:	4618      	mov	r0, r3
 801281c:	f002 fde2 	bl	80153e4 <RegionVerify>
 8012820:	4603      	mov	r3, r0
 8012822:	f083 0301 	eor.w	r3, r3, #1
 8012826:	b2db      	uxtb	r3, r3
 8012828:	2b00      	cmp	r3, #0
 801282a:	d002      	beq.n	8012832 <LoRaMacMibSetRequestConfirm+0x39e>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 801282c:	2303      	movs	r3, #3
 801282e:	75fb      	strb	r3, [r7, #23]
            break;
 8012830:	e1c7      	b.n	8012bc2 <LoRaMacMibSetRequestConfirm+0x72e>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8012832:	4b91      	ldr	r3, [pc, #580]	; (8012a78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012834:	687a      	ldr	r2, [r7, #4]
 8012836:	336c      	adds	r3, #108	; 0x6c
 8012838:	3204      	adds	r2, #4
 801283a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801283e:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8012842:	e1be      	b.n	8012bc2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	7a1b      	ldrb	r3, [r3, #8]
 8012848:	b25b      	sxtb	r3, r3
 801284a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801284c:	4b8a      	ldr	r3, [pc, #552]	; (8012a78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801284e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8012852:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8012854:	4b88      	ldr	r3, [pc, #544]	; (8012a78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012856:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801285a:	f107 0108 	add.w	r1, r7, #8
 801285e:	2207      	movs	r2, #7
 8012860:	4618      	mov	r0, r3
 8012862:	f002 fdbf 	bl	80153e4 <RegionVerify>
 8012866:	4603      	mov	r3, r0
 8012868:	2b00      	cmp	r3, #0
 801286a:	d008      	beq.n	801287e <LoRaMacMibSetRequestConfirm+0x3ea>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 801286c:	4b82      	ldr	r3, [pc, #520]	; (8012a78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801286e:	687a      	ldr	r2, [r7, #4]
 8012870:	33b4      	adds	r3, #180	; 0xb4
 8012872:	3204      	adds	r2, #4
 8012874:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012878:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801287c:	e1a1      	b.n	8012bc2 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801287e:	2303      	movs	r3, #3
 8012880:	75fb      	strb	r3, [r7, #23]
            break;
 8012882:	e19e      	b.n	8012bc2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	7a1b      	ldrb	r3, [r3, #8]
 8012888:	b25b      	sxtb	r3, r3
 801288a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801288c:	4b7a      	ldr	r3, [pc, #488]	; (8012a78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801288e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8012892:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8012894:	4b78      	ldr	r3, [pc, #480]	; (8012a78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012896:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801289a:	f107 0108 	add.w	r1, r7, #8
 801289e:	2207      	movs	r2, #7
 80128a0:	4618      	mov	r0, r3
 80128a2:	f002 fd9f 	bl	80153e4 <RegionVerify>
 80128a6:	4603      	mov	r3, r0
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d019      	beq.n	80128e0 <LoRaMacMibSetRequestConfirm+0x44c>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 80128ac:	4b72      	ldr	r3, [pc, #456]	; (8012a78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80128ae:	687a      	ldr	r2, [r7, #4]
 80128b0:	3374      	adds	r3, #116	; 0x74
 80128b2:	3204      	adds	r2, #4
 80128b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80128b8:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 80128bc:	4b6e      	ldr	r3, [pc, #440]	; (8012a78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80128be:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80128c2:	2b02      	cmp	r3, #2
 80128c4:	f040 8176 	bne.w	8012bb4 <LoRaMacMibSetRequestConfirm+0x720>
 80128c8:	4b6b      	ldr	r3, [pc, #428]	; (8012a78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80128ca:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	f000 8170 	beq.w	8012bb4 <LoRaMacMibSetRequestConfirm+0x720>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 80128d4:	4b69      	ldr	r3, [pc, #420]	; (8012a7c <LoRaMacMibSetRequestConfirm+0x5e8>)
 80128d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128d8:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 80128da:	f7fe fc1b 	bl	8011114 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80128de:	e169      	b.n	8012bb4 <LoRaMacMibSetRequestConfirm+0x720>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80128e0:	2303      	movs	r3, #3
 80128e2:	75fb      	strb	r3, [r7, #23]
            break;
 80128e4:	e166      	b.n	8012bb4 <LoRaMacMibSetRequestConfirm+0x720>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	7a1b      	ldrb	r3, [r3, #8]
 80128ea:	b25b      	sxtb	r3, r3
 80128ec:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80128ee:	4b62      	ldr	r3, [pc, #392]	; (8012a78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80128f0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80128f4:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80128f6:	4b60      	ldr	r3, [pc, #384]	; (8012a78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80128f8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80128fc:	f107 0108 	add.w	r1, r7, #8
 8012900:	2207      	movs	r2, #7
 8012902:	4618      	mov	r0, r3
 8012904:	f002 fd6e 	bl	80153e4 <RegionVerify>
 8012908:	4603      	mov	r3, r0
 801290a:	2b00      	cmp	r3, #0
 801290c:	d008      	beq.n	8012920 <LoRaMacMibSetRequestConfirm+0x48c>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 801290e:	4b5a      	ldr	r3, [pc, #360]	; (8012a78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012910:	687a      	ldr	r2, [r7, #4]
 8012912:	33bc      	adds	r3, #188	; 0xbc
 8012914:	3204      	adds	r2, #4
 8012916:	e892 0003 	ldmia.w	r2, {r0, r1}
 801291a:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801291e:	e150      	b.n	8012bc2 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012920:	2303      	movs	r3, #3
 8012922:	75fb      	strb	r3, [r7, #23]
            break;
 8012924:	e14d      	b.n	8012bc2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	685b      	ldr	r3, [r3, #4]
 801292a:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 801292c:	2301      	movs	r3, #1
 801292e:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8012930:	4b51      	ldr	r3, [pc, #324]	; (8012a78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012932:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012936:	f107 020c 	add.w	r2, r7, #12
 801293a:	4611      	mov	r1, r2
 801293c:	4618      	mov	r0, r3
 801293e:	f002 fd89 	bl	8015454 <RegionChanMaskSet>
 8012942:	4603      	mov	r3, r0
 8012944:	f083 0301 	eor.w	r3, r3, #1
 8012948:	b2db      	uxtb	r3, r3
 801294a:	2b00      	cmp	r3, #0
 801294c:	f000 8134 	beq.w	8012bb8 <LoRaMacMibSetRequestConfirm+0x724>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012950:	2303      	movs	r3, #3
 8012952:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012954:	e130      	b.n	8012bb8 <LoRaMacMibSetRequestConfirm+0x724>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	685b      	ldr	r3, [r3, #4]
 801295a:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 801295c:	2300      	movs	r3, #0
 801295e:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8012960:	4b45      	ldr	r3, [pc, #276]	; (8012a78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012962:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012966:	f107 020c 	add.w	r2, r7, #12
 801296a:	4611      	mov	r1, r2
 801296c:	4618      	mov	r0, r3
 801296e:	f002 fd71 	bl	8015454 <RegionChanMaskSet>
 8012972:	4603      	mov	r3, r0
 8012974:	f083 0301 	eor.w	r3, r3, #1
 8012978:	b2db      	uxtb	r3, r3
 801297a:	2b00      	cmp	r3, #0
 801297c:	f000 811e 	beq.w	8012bbc <LoRaMacMibSetRequestConfirm+0x728>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012980:	2303      	movs	r3, #3
 8012982:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012984:	e11a      	b.n	8012bbc <LoRaMacMibSetRequestConfirm+0x728>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	791b      	ldrb	r3, [r3, #4]
 801298a:	2b00      	cmp	r3, #0
 801298c:	d009      	beq.n	80129a2 <LoRaMacMibSetRequestConfirm+0x50e>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8012992:	2b0f      	cmp	r3, #15
 8012994:	d805      	bhi.n	80129a2 <LoRaMacMibSetRequestConfirm+0x50e>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	791a      	ldrb	r2, [r3, #4]
 801299a:	4b37      	ldr	r3, [pc, #220]	; (8012a78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801299c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80129a0:	e10f      	b.n	8012bc2 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80129a2:	2303      	movs	r3, #3
 80129a4:	75fb      	strb	r3, [r7, #23]
            break;
 80129a6:	e10c      	b.n	8012bc2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	685b      	ldr	r3, [r3, #4]
 80129ac:	4a32      	ldr	r2, [pc, #200]	; (8012a78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80129ae:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 80129b0:	e107      	b.n	8012bc2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	685b      	ldr	r3, [r3, #4]
 80129b6:	4a30      	ldr	r2, [pc, #192]	; (8012a78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80129b8:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 80129ba:	e102      	b.n	8012bc2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	685b      	ldr	r3, [r3, #4]
 80129c0:	4a2d      	ldr	r2, [pc, #180]	; (8012a78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80129c2:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 80129c4:	e0fd      	b.n	8012bc2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	685b      	ldr	r3, [r3, #4]
 80129ca:	4a2b      	ldr	r2, [pc, #172]	; (8012a78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80129cc:	6613      	str	r3, [r2, #96]	; 0x60
            break;
 80129ce:	e0f8      	b.n	8012bc2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	685b      	ldr	r3, [r3, #4]
 80129d4:	4a28      	ldr	r2, [pc, #160]	; (8012a78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80129d6:	6653      	str	r3, [r2, #100]	; 0x64
            break;
 80129d8:	e0f3      	b.n	8012bc2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80129e0:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 80129e2:	4b25      	ldr	r3, [pc, #148]	; (8012a78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80129e4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80129e8:	f107 0108 	add.w	r1, r7, #8
 80129ec:	2206      	movs	r2, #6
 80129ee:	4618      	mov	r0, r3
 80129f0:	f002 fcf8 	bl	80153e4 <RegionVerify>
 80129f4:	4603      	mov	r3, r0
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d005      	beq.n	8012a06 <LoRaMacMibSetRequestConfirm+0x572>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 80129fa:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80129fe:	4b1e      	ldr	r3, [pc, #120]	; (8012a78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012a00:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012a04:	e0dd      	b.n	8012bc2 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012a06:	2303      	movs	r3, #3
 8012a08:	75fb      	strb	r3, [r7, #23]
            break;
 8012a0a:	e0da      	b.n	8012bc2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012a12:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012a14:	4b18      	ldr	r3, [pc, #96]	; (8012a78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012a16:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8012a1a:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8012a1c:	4b16      	ldr	r3, [pc, #88]	; (8012a78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012a1e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012a22:	f107 0108 	add.w	r1, r7, #8
 8012a26:	2205      	movs	r2, #5
 8012a28:	4618      	mov	r0, r3
 8012a2a:	f002 fcdb 	bl	80153e4 <RegionVerify>
 8012a2e:	4603      	mov	r3, r0
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d005      	beq.n	8012a40 <LoRaMacMibSetRequestConfirm+0x5ac>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8012a34:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8012a38:	4b0f      	ldr	r3, [pc, #60]	; (8012a78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012a3a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012a3e:	e0c0      	b.n	8012bc2 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012a40:	2303      	movs	r3, #3
 8012a42:	75fb      	strb	r3, [r7, #23]
            break;
 8012a44:	e0bd      	b.n	8012bc2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012a4c:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8012a4e:	4b0a      	ldr	r3, [pc, #40]	; (8012a78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012a50:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012a54:	f107 0108 	add.w	r1, r7, #8
 8012a58:	220a      	movs	r2, #10
 8012a5a:	4618      	mov	r0, r3
 8012a5c:	f002 fcc2 	bl	80153e4 <RegionVerify>
 8012a60:	4603      	mov	r3, r0
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d005      	beq.n	8012a72 <LoRaMacMibSetRequestConfirm+0x5de>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8012a66:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8012a6a:	4b03      	ldr	r3, [pc, #12]	; (8012a78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012a6c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012a70:	e0a7      	b.n	8012bc2 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012a72:	2303      	movs	r3, #3
 8012a74:	75fb      	strb	r3, [r7, #23]
            break;
 8012a76:	e0a4      	b.n	8012bc2 <LoRaMacMibSetRequestConfirm+0x72e>
 8012a78:	20000c5c 	.word	0x20000c5c
 8012a7c:	0801eb70 	.word	0x0801eb70
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012a86:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8012a88:	4b55      	ldr	r3, [pc, #340]	; (8012be0 <LoRaMacMibSetRequestConfirm+0x74c>)
 8012a8a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012a8e:	f107 0108 	add.w	r1, r7, #8
 8012a92:	2209      	movs	r2, #9
 8012a94:	4618      	mov	r0, r3
 8012a96:	f002 fca5 	bl	80153e4 <RegionVerify>
 8012a9a:	4603      	mov	r3, r0
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d005      	beq.n	8012aac <LoRaMacMibSetRequestConfirm+0x618>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8012aa0:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8012aa4:	4b4e      	ldr	r3, [pc, #312]	; (8012be0 <LoRaMacMibSetRequestConfirm+0x74c>)
 8012aa6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012aaa:	e08a      	b.n	8012bc2 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012aac:	2303      	movs	r3, #3
 8012aae:	75fb      	strb	r3, [r7, #23]
            break;
 8012ab0:	e087      	b.n	8012bc2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	685b      	ldr	r3, [r3, #4]
 8012ab6:	4a4a      	ldr	r2, [pc, #296]	; (8012be0 <LoRaMacMibSetRequestConfirm+0x74c>)
 8012ab8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8012abc:	4b48      	ldr	r3, [pc, #288]	; (8012be0 <LoRaMacMibSetRequestConfirm+0x74c>)
 8012abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012ac2:	4a47      	ldr	r2, [pc, #284]	; (8012be0 <LoRaMacMibSetRequestConfirm+0x74c>)
 8012ac4:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 8012ac6:	e07c      	b.n	8012bc2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	791a      	ldrb	r2, [r3, #4]
 8012acc:	4b44      	ldr	r3, [pc, #272]	; (8012be0 <LoRaMacMibSetRequestConfirm+0x74c>)
 8012ace:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 8012ad2:	4b43      	ldr	r3, [pc, #268]	; (8012be0 <LoRaMacMibSetRequestConfirm+0x74c>)
 8012ad4:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 8012ad8:	4b41      	ldr	r3, [pc, #260]	; (8012be0 <LoRaMacMibSetRequestConfirm+0x74c>)
 8012ada:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            break;
 8012ade:	e070      	b.n	8012bc2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	685b      	ldr	r3, [r3, #4]
 8012ae4:	4a3e      	ldr	r2, [pc, #248]	; (8012be0 <LoRaMacMibSetRequestConfirm+0x74c>)
 8012ae6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            break;
 8012aea:	e06a      	b.n	8012bc2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	685b      	ldr	r3, [r3, #4]
 8012af0:	4a3b      	ldr	r2, [pc, #236]	; (8012be0 <LoRaMacMibSetRequestConfirm+0x74c>)
 8012af2:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
            break;
 8012af6:	e064      	b.n	8012bc2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 8012af8:	f7fe fd40 	bl	801157c <RestoreNvmData>
 8012afc:	4603      	mov	r3, r0
 8012afe:	75fb      	strb	r3, [r7, #23]
            break;
 8012b00:	e05f      	b.n	8012bc2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	799b      	ldrb	r3, [r3, #6]
 8012b06:	2b01      	cmp	r3, #1
 8012b08:	d80d      	bhi.n	8012b26 <LoRaMacMibSetRequestConfirm+0x692>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8012b0a:	4a35      	ldr	r2, [pc, #212]	; (8012be0 <LoRaMacMibSetRequestConfirm+0x74c>)
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	685b      	ldr	r3, [r3, #4]
 8012b10:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	6858      	ldr	r0, [r3, #4]
 8012b18:	f001 fd7e 	bl	8014618 <LoRaMacCryptoSetLrWanVersion>
 8012b1c:	4603      	mov	r3, r0
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d04e      	beq.n	8012bc0 <LoRaMacMibSetRequestConfirm+0x72c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012b22:	2311      	movs	r3, #17
 8012b24:	e058      	b.n	8012bd8 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012b26:	2303      	movs	r3, #3
 8012b28:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012b2a:	e049      	b.n	8012bc0 <LoRaMacMibSetRequestConfirm+0x72c>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	685b      	ldr	r3, [r3, #4]
 8012b30:	4a2b      	ldr	r2, [pc, #172]	; (8012be0 <LoRaMacMibSetRequestConfirm+0x74c>)
 8012b32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
            break;
 8012b36:	e044      	b.n	8012bc2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	791a      	ldrb	r2, [r3, #4]
 8012b3c:	4b28      	ldr	r3, [pc, #160]	; (8012be0 <LoRaMacMibSetRequestConfirm+0x74c>)
 8012b3e:	f883 211f 	strb.w	r2, [r3, #287]	; 0x11f
            break;
 8012b42:	e03e      	b.n	8012bc2 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	889a      	ldrh	r2, [r3, #4]
 8012b48:	4b25      	ldr	r3, [pc, #148]	; (8012be0 <LoRaMacMibSetRequestConfirm+0x74c>)
 8012b4a:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
            break;
 8012b4e:	e038      	b.n	8012bc2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	889a      	ldrh	r2, [r3, #4]
 8012b54:	4b22      	ldr	r3, [pc, #136]	; (8012be0 <LoRaMacMibSetRequestConfirm+0x74c>)
 8012b56:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
            break;
 8012b5a:	e032      	b.n	8012bc2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	889a      	ldrh	r2, [r3, #4]
 8012b60:	4b1f      	ldr	r3, [pc, #124]	; (8012be0 <LoRaMacMibSetRequestConfirm+0x74c>)
 8012b62:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
            break;
 8012b66:	e02c      	b.n	8012bc2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	889a      	ldrh	r2, [r3, #4]
 8012b6c:	4b1c      	ldr	r3, [pc, #112]	; (8012be0 <LoRaMacMibSetRequestConfirm+0x74c>)
 8012b6e:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
            break;
 8012b72:	e026      	b.n	8012bc2 <LoRaMacMibSetRequestConfirm+0x72e>
            else
            {
                Nvm.RegionGroup2.RssiFreeThreshold = mibSet->Param.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8012b74:	2318      	movs	r3, #24
 8012b76:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8012b78:	e023      	b.n	8012bc2 <LoRaMacMibSetRequestConfirm+0x72e>
            else
            {
                Nvm.RegionGroup2.CarrierSenseTime = mibSet->Param.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8012b7a:	2318      	movs	r3, #24
 8012b7c:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8012b7e:	e020      	b.n	8012bc2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8012b80:	6878      	ldr	r0, [r7, #4]
 8012b82:	f000 fca4 	bl	80134ce <LoRaMacMibClassBSetRequestConfirm>
 8012b86:	4603      	mov	r3, r0
 8012b88:	75fb      	strb	r3, [r7, #23]
            break;
 8012b8a:	e01a      	b.n	8012bc2 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8012b8c:	bf00      	nop
 8012b8e:	e018      	b.n	8012bc2 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8012b90:	bf00      	nop
 8012b92:	e016      	b.n	8012bc2 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8012b94:	bf00      	nop
 8012b96:	e014      	b.n	8012bc2 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8012b98:	bf00      	nop
 8012b9a:	e012      	b.n	8012bc2 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8012b9c:	bf00      	nop
 8012b9e:	e010      	b.n	8012bc2 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8012ba0:	bf00      	nop
 8012ba2:	e00e      	b.n	8012bc2 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8012ba4:	bf00      	nop
 8012ba6:	e00c      	b.n	8012bc2 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8012ba8:	bf00      	nop
 8012baa:	e00a      	b.n	8012bc2 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8012bac:	bf00      	nop
 8012bae:	e008      	b.n	8012bc2 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8012bb0:	bf00      	nop
 8012bb2:	e006      	b.n	8012bc2 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8012bb4:	bf00      	nop
 8012bb6:	e004      	b.n	8012bc2 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8012bb8:	bf00      	nop
 8012bba:	e002      	b.n	8012bc2 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8012bbc:	bf00      	nop
 8012bbe:	e000      	b.n	8012bc2 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8012bc0:	bf00      	nop
        }
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( status == LORAMAC_STATUS_OK )
 8012bc2:	7dfb      	ldrb	r3, [r7, #23]
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d106      	bne.n	8012bd6 <LoRaMacMibSetRequestConfirm+0x742>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8012bc8:	4a06      	ldr	r2, [pc, #24]	; (8012be4 <LoRaMacMibSetRequestConfirm+0x750>)
 8012bca:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8012bce:	f043 0320 	orr.w	r3, r3, #32
 8012bd2:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
#endif /* LORAMAC_VERSION */
    return status;
 8012bd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8012bd8:	4618      	mov	r0, r3
 8012bda:	3718      	adds	r7, #24
 8012bdc:	46bd      	mov	sp, r7
 8012bde:	bd80      	pop	{r7, pc}
 8012be0:	20000c5c 	.word	0x20000c5c
 8012be4:	20000740 	.word	0x20000740

08012be8 <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8012be8:	b580      	push	{r7, lr}
 8012bea:	b08a      	sub	sp, #40	; 0x28
 8012bec:	af00      	add	r7, sp, #0
 8012bee:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012bf0:	2302      	movs	r3, #2
 8012bf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8012bf6:	2300      	movs	r3, #0
 8012bf8:	83bb      	strh	r3, [r7, #28]

    if( mlmeRequest == NULL )
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d101      	bne.n	8012c04 <LoRaMacMlmeRequest+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012c00:	2303      	movs	r3, #3
 8012c02:	e17e      	b.n	8012f02 <LoRaMacMlmeRequest+0x31a>
    }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	2200      	movs	r2, #0
 8012c08:	611a      	str	r2, [r3, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 8012c0a:	f7fc fb85 	bl	800f318 <LoRaMacIsBusy>
 8012c0e:	4603      	mov	r3, r0
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d001      	beq.n	8012c18 <LoRaMacMlmeRequest+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 8012c14:	2301      	movs	r3, #1
 8012c16:	e174      	b.n	8012f02 <LoRaMacMlmeRequest+0x31a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8012c18:	f001 f994 	bl	8013f44 <LoRaMacConfirmQueueIsFull>
 8012c1c:	4603      	mov	r3, r0
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d001      	beq.n	8012c26 <LoRaMacMlmeRequest+0x3e>
    {
        return LORAMAC_STATUS_BUSY;
 8012c22:	2301      	movs	r3, #1
 8012c24:	e16d      	b.n	8012f02 <LoRaMacMlmeRequest+0x31a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8012c26:	f001 f981 	bl	8013f2c <LoRaMacConfirmQueueGetCnt>
 8012c2a:	4603      	mov	r3, r0
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d104      	bne.n	8012c3a <LoRaMacMlmeRequest+0x52>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8012c30:	2214      	movs	r2, #20
 8012c32:	2100      	movs	r1, #0
 8012c34:	48b5      	ldr	r0, [pc, #724]	; (8012f0c <LoRaMacMlmeRequest+0x324>)
 8012c36:	f006 f9c3 	bl	8018fc0 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012c3a:	4bb5      	ldr	r3, [pc, #724]	; (8012f10 <LoRaMacMlmeRequest+0x328>)
 8012c3c:	2201      	movs	r2, #1
 8012c3e:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8012c42:	4ab3      	ldr	r2, [pc, #716]	; (8012f10 <LoRaMacMlmeRequest+0x328>)
 8012c44:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8012c48:	f043 0304 	orr.w	r3, r3, #4
 8012c4c:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    queueElement.Request = mlmeRequest->Type;
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	781b      	ldrb	r3, [r3, #0]
 8012c54:	f887 3020 	strb.w	r3, [r7, #32]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012c58:	2301      	movs	r3, #1
 8012c5a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    queueElement.RestrictCommonReadyToHandle = false;
 8012c5e:	2300      	movs	r3, #0
 8012c60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    queueElement.ReadyToHandle = false;
 8012c64:	2300      	movs	r3, #0
 8012c66:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	781b      	ldrb	r3, [r3, #0]
 8012c6e:	3b01      	subs	r3, #1
 8012c70:	2b0c      	cmp	r3, #12
 8012c72:	f200 811a 	bhi.w	8012eaa <LoRaMacMlmeRequest+0x2c2>
 8012c76:	a201      	add	r2, pc, #4	; (adr r2, 8012c7c <LoRaMacMlmeRequest+0x94>)
 8012c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c7c:	08012cb1 	.word	0x08012cb1
 8012c80:	08012eab 	.word	0x08012eab
 8012c84:	08012eab 	.word	0x08012eab
 8012c88:	08012eab 	.word	0x08012eab
 8012c8c:	08012d8f 	.word	0x08012d8f
 8012c90:	08012db3 	.word	0x08012db3
 8012c94:	08012eab 	.word	0x08012eab
 8012c98:	08012eab 	.word	0x08012eab
 8012c9c:	08012dd1 	.word	0x08012dd1
 8012ca0:	08012eab 	.word	0x08012eab
 8012ca4:	08012e79 	.word	0x08012e79
 8012ca8:	08012e0d 	.word	0x08012e0d
 8012cac:	08012e57 	.word	0x08012e57
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8012cb0:	4b97      	ldr	r3, [pc, #604]	; (8012f10 <LoRaMacMlmeRequest+0x328>)
 8012cb2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012cb6:	f003 0320 	and.w	r3, r3, #32
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d001      	beq.n	8012cc2 <LoRaMacMlmeRequest+0xda>
            {
                return LORAMAC_STATUS_BUSY;
 8012cbe:	2301      	movs	r3, #1
 8012cc0:	e11f      	b.n	8012f02 <LoRaMacMlmeRequest+0x31a>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	791b      	ldrb	r3, [r3, #4]
 8012cc6:	2b02      	cmp	r3, #2
 8012cc8:	d135      	bne.n	8012d36 <LoRaMacMlmeRequest+0x14e>
            {
                ResetMacParameters( false );
 8012cca:	2000      	movs	r0, #0
 8012ccc:	f7fe f8b4 	bl	8010e38 <ResetMacParameters>

                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8012cd0:	4b90      	ldr	r3, [pc, #576]	; (8012f14 <LoRaMacMlmeRequest+0x32c>)
 8012cd2:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	795b      	ldrb	r3, [r3, #5]
 8012cda:	b25b      	sxtb	r3, r3
 8012cdc:	2200      	movs	r2, #0
 8012cde:	4619      	mov	r1, r3
 8012ce0:	f002 fcc8 	bl	8015674 <RegionAlternateDr>
 8012ce4:	4603      	mov	r3, r0
 8012ce6:	461a      	mov	r2, r3
 8012ce8:	4b8a      	ldr	r3, [pc, #552]	; (8012f14 <LoRaMacMlmeRequest+0x32c>)
 8012cea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8012cf4:	4b87      	ldr	r3, [pc, #540]	; (8012f14 <LoRaMacMlmeRequest+0x32c>)
 8012cf6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8012cfa:	2307      	movs	r3, #7
 8012cfc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

                status = SendReJoinReq( JOIN_REQ );
 8012d00:	20ff      	movs	r0, #255	; 0xff
 8012d02:	f7fd fe1d 	bl	8010940 <SendReJoinReq>
 8012d06:	4603      	mov	r3, r0
 8012d08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                if( status != LORAMAC_STATUS_OK )
 8012d0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	f000 80cc 	beq.w	8012eae <LoRaMacMlmeRequest+0x2c6>
                {
                    // Revert back the previous datarate ( mainly used for US915 like regions )
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8012d16:	4b7f      	ldr	r3, [pc, #508]	; (8012f14 <LoRaMacMlmeRequest+0x32c>)
 8012d18:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	795b      	ldrb	r3, [r3, #5]
 8012d20:	b25b      	sxtb	r3, r3
 8012d22:	2201      	movs	r2, #1
 8012d24:	4619      	mov	r1, r3
 8012d26:	f002 fca5 	bl	8015674 <RegionAlternateDr>
 8012d2a:	4603      	mov	r3, r0
 8012d2c:	461a      	mov	r2, r3
 8012d2e:	4b79      	ldr	r3, [pc, #484]	; (8012f14 <LoRaMacMlmeRequest+0x32c>)
 8012d30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                OnMacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 8012d34:	e0bb      	b.n	8012eae <LoRaMacMlmeRequest+0x2c6>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	791b      	ldrb	r3, [r3, #4]
 8012d3a:	2b01      	cmp	r3, #1
 8012d3c:	f040 80b7 	bne.w	8012eae <LoRaMacMlmeRequest+0x2c6>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8012d40:	4b74      	ldr	r3, [pc, #464]	; (8012f14 <LoRaMacMlmeRequest+0x32c>)
 8012d42:	2200      	movs	r2, #0
 8012d44:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8012d48:	2302      	movs	r3, #2
 8012d4a:	763b      	strb	r3, [r7, #24]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8012d4c:	4b71      	ldr	r3, [pc, #452]	; (8012f14 <LoRaMacMlmeRequest+0x32c>)
 8012d4e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012d52:	f107 020c 	add.w	r2, r7, #12
 8012d56:	4611      	mov	r1, r2
 8012d58:	4618      	mov	r0, r3
 8012d5a:	f002 fb2c 	bl	80153b6 <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	791a      	ldrb	r2, [r3, #4]
 8012d62:	4b6c      	ldr	r3, [pc, #432]	; (8012f14 <LoRaMacMlmeRequest+0x32c>)
 8012d64:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8012d68:	2300      	movs	r3, #0
 8012d6a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                queueElement.ReadyToHandle = true;
 8012d6e:	2301      	movs	r3, #1
 8012d70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
                OnMacProcessNotify( );
 8012d74:	f7fe fdb2 	bl	80118dc <OnMacProcessNotify>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8012d78:	4a65      	ldr	r2, [pc, #404]	; (8012f10 <LoRaMacMlmeRequest+0x328>)
 8012d7a:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8012d7e:	f043 0310 	orr.w	r3, r3, #16
 8012d82:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
                status = LORAMAC_STATUS_OK;
 8012d86:	2300      	movs	r3, #0
 8012d88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8012d8c:	e08f      	b.n	8012eae <LoRaMacMlmeRequest+0x2c6>
        }
#endif /* LORAMAC_VERSION */
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8012d8e:	2300      	movs	r3, #0
 8012d90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8012d94:	f107 031c 	add.w	r3, r7, #28
 8012d98:	2200      	movs	r2, #0
 8012d9a:	4619      	mov	r1, r3
 8012d9c:	2002      	movs	r0, #2
 8012d9e:	f000 fd21 	bl	80137e4 <LoRaMacCommandsAddCmd>
 8012da2:	4603      	mov	r3, r0
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	f000 8084 	beq.w	8012eb2 <LoRaMacMlmeRequest+0x2ca>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012daa:	2313      	movs	r3, #19
 8012dac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 8012db0:	e07f      	b.n	8012eb2 <LoRaMacMlmeRequest+0x2ca>
            break;
        }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	8898      	ldrh	r0, [r3, #4]
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	6899      	ldr	r1, [r3, #8]
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8012dc0:	b2db      	uxtb	r3, r3
 8012dc2:	461a      	mov	r2, r3
 8012dc4:	f7fe fbba 	bl	801153c <SetTxContinuousWave>
 8012dc8:	4603      	mov	r3, r0
 8012dca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8012dce:	e077      	b.n	8012ec0 <LoRaMacMlmeRequest+0x2d8>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8012dd0:	2300      	movs	r3, #0
 8012dd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            MacCommand_t* newCmd;
            /* ST_CODE Begin: Add MAC command condition to prevent some duplicated request */
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 8012dd6:	f107 0308 	add.w	r3, r7, #8
 8012dda:	4619      	mov	r1, r3
 8012ddc:	200d      	movs	r0, #13
 8012dde:	f000 fd81 	bl	80138e4 <LoRaMacCommandsGetCmd>
 8012de2:	4603      	mov	r3, r0
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d103      	bne.n	8012df0 <LoRaMacMlmeRequest+0x208>
            {
                status = LORAMAC_STATUS_OK;
 8012de8:	2300      	movs	r3, #0
 8012dea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            /* ST_CODE End */
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
            }
            break;
 8012dee:	e062      	b.n	8012eb6 <LoRaMacMlmeRequest+0x2ce>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8012df0:	f107 031c 	add.w	r3, r7, #28
 8012df4:	2200      	movs	r2, #0
 8012df6:	4619      	mov	r1, r3
 8012df8:	200d      	movs	r0, #13
 8012dfa:	f000 fcf3 	bl	80137e4 <LoRaMacCommandsAddCmd>
 8012dfe:	4603      	mov	r3, r0
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d058      	beq.n	8012eb6 <LoRaMacMlmeRequest+0x2ce>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012e04:	2313      	movs	r3, #19
 8012e06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8012e0a:	e054      	b.n	8012eb6 <LoRaMacMlmeRequest+0x2ce>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8012e0c:	4b41      	ldr	r3, [pc, #260]	; (8012f14 <LoRaMacMlmeRequest+0x32c>)
 8012e0e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d151      	bne.n	8012eba <LoRaMacMlmeRequest+0x2d2>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	791b      	ldrb	r3, [r3, #4]
 8012e1a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	791b      	ldrb	r3, [r3, #4]
 8012e22:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8012e26:	b2db      	uxtb	r3, r3
 8012e28:	4618      	mov	r0, r3
 8012e2a:	f000 fb25 	bl	8013478 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8012e2e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012e32:	773b      	strb	r3, [r7, #28]
                status = LORAMAC_STATUS_OK;
 8012e34:	2300      	movs	r3, #0
 8012e36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8012e3a:	f107 031c 	add.w	r3, r7, #28
 8012e3e:	2201      	movs	r2, #1
 8012e40:	4619      	mov	r1, r3
 8012e42:	2010      	movs	r0, #16
 8012e44:	f000 fcce 	bl	80137e4 <LoRaMacCommandsAddCmd>
 8012e48:	4603      	mov	r3, r0
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d035      	beq.n	8012eba <LoRaMacMlmeRequest+0x2d2>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012e4e:	2313      	movs	r3, #19
 8012e50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
            }
            break;
 8012e54:	e031      	b.n	8012eba <LoRaMacMlmeRequest+0x2d2>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8012e56:	2300      	movs	r3, #0
 8012e58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8012e5c:	f107 031c 	add.w	r3, r7, #28
 8012e60:	2200      	movs	r2, #0
 8012e62:	4619      	mov	r1, r3
 8012e64:	2012      	movs	r0, #18
 8012e66:	f000 fcbd 	bl	80137e4 <LoRaMacCommandsAddCmd>
 8012e6a:	4603      	mov	r3, r0
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d026      	beq.n	8012ebe <LoRaMacMlmeRequest+0x2d6>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012e70:	2313      	movs	r3, #19
 8012e72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 8012e76:	e022      	b.n	8012ebe <LoRaMacMlmeRequest+0x2d6>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8012e78:	2301      	movs	r3, #1
 8012e7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8012e7e:	f000 fab1 	bl	80133e4 <LoRaMacClassBIsAcquisitionInProgress>
 8012e82:	4603      	mov	r3, r0
 8012e84:	f083 0301 	eor.w	r3, r3, #1
 8012e88:	b2db      	uxtb	r3, r3
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d009      	beq.n	8012ea2 <LoRaMacMlmeRequest+0x2ba>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8012e8e:	2000      	movs	r0, #0
 8012e90:	f000 fa8a 	bl	80133a8 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8012e94:	2000      	movs	r0, #0
 8012e96:	f000 faac 	bl	80133f2 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8012e9a:	2300      	movs	r3, #0
 8012e9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8012ea0:	e00e      	b.n	8012ec0 <LoRaMacMlmeRequest+0x2d8>
                status = LORAMAC_STATUS_BUSY;
 8012ea2:	2301      	movs	r3, #1
 8012ea4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8012ea8:	e00a      	b.n	8012ec0 <LoRaMacMlmeRequest+0x2d8>
        }
        default:
            break;
 8012eaa:	bf00      	nop
 8012eac:	e008      	b.n	8012ec0 <LoRaMacMlmeRequest+0x2d8>
            break;
 8012eae:	bf00      	nop
 8012eb0:	e006      	b.n	8012ec0 <LoRaMacMlmeRequest+0x2d8>
            break;
 8012eb2:	bf00      	nop
 8012eb4:	e004      	b.n	8012ec0 <LoRaMacMlmeRequest+0x2d8>
            break;
 8012eb6:	bf00      	nop
 8012eb8:	e002      	b.n	8012ec0 <LoRaMacMlmeRequest+0x2d8>
            break;
 8012eba:	bf00      	nop
 8012ebc:	e000      	b.n	8012ec0 <LoRaMacMlmeRequest+0x2d8>
            break;
 8012ebe:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8012ec0:	4b13      	ldr	r3, [pc, #76]	; (8012f10 <LoRaMacMlmeRequest+0x328>)
 8012ec2:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8012eca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d010      	beq.n	8012ef4 <LoRaMacMlmeRequest+0x30c>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8012ed2:	f001 f82b 	bl	8013f2c <LoRaMacConfirmQueueGetCnt>
 8012ed6:	4603      	mov	r3, r0
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d110      	bne.n	8012efe <LoRaMacMlmeRequest+0x316>
        {
            MacCtx.NodeAckRequested = false;
 8012edc:	4b0c      	ldr	r3, [pc, #48]	; (8012f10 <LoRaMacMlmeRequest+0x328>)
 8012ede:	2200      	movs	r2, #0
 8012ee0:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8012ee4:	4a0a      	ldr	r2, [pc, #40]	; (8012f10 <LoRaMacMlmeRequest+0x328>)
 8012ee6:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8012eea:	f36f 0382 	bfc	r3, #2, #1
 8012eee:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 8012ef2:	e004      	b.n	8012efe <LoRaMacMlmeRequest+0x316>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8012ef4:	f107 0320 	add.w	r3, r7, #32
 8012ef8:	4618      	mov	r0, r3
 8012efa:	f000 fec3 	bl	8013c84 <LoRaMacConfirmQueueAdd>
    }
    return status;
 8012efe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8012f02:	4618      	mov	r0, r3
 8012f04:	3728      	adds	r7, #40	; 0x28
 8012f06:	46bd      	mov	sp, r7
 8012f08:	bd80      	pop	{r7, pc}
 8012f0a:	bf00      	nop
 8012f0c:	20000b94 	.word	0x20000b94
 8012f10:	20000740 	.word	0x20000740
 8012f14:	20000c5c 	.word	0x20000c5c

08012f18 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8012f18:	b5b0      	push	{r4, r5, r7, lr}
 8012f1a:	b092      	sub	sp, #72	; 0x48
 8012f1c:	af02      	add	r7, sp, #8
 8012f1e:	6078      	str	r0, [r7, #4]
 8012f20:	460b      	mov	r3, r1
 8012f22:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012f24:	2302      	movs	r3, #2
 8012f26:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8012f2a:	2300      	movs	r3, #0
 8012f2c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    void* fBuffer = NULL;
 8012f30:	2300      	movs	r3, #0
 8012f32:	63bb      	str	r3, [r7, #56]	; 0x38
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8012f34:	2300      	movs	r3, #0
 8012f36:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    bool readyToSend = false;
 8012f3a:	2300      	movs	r3, #0
 8012f3c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    if( mcpsRequest == NULL )
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d101      	bne.n	8012f4a <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012f46:	2303      	movs	r3, #3
 8012f48:	e113      	b.n	8013172 <LoRaMacMcpsRequest+0x25a>
        }
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	2200      	movs	r2, #0
 8012f4e:	611a      	str	r2, [r3, #16]

    if( LoRaMacIsBusy( ) == true )
 8012f50:	f7fc f9e2 	bl	800f318 <LoRaMacIsBusy>
 8012f54:	4603      	mov	r3, r0
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	d001      	beq.n	8012f5e <LoRaMacMcpsRequest+0x46>
    {
        return LORAMAC_STATUS_BUSY;
 8012f5a:	2301      	movs	r3, #1
 8012f5c:	e109      	b.n	8013172 <LoRaMacMcpsRequest+0x25a>
    }

    McpsReq_t request = *mcpsRequest;
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	f107 040c 	add.w	r4, r7, #12
 8012f64:	461d      	mov	r5, r3
 8012f66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012f68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012f6a:	682b      	ldr	r3, [r5, #0]
 8012f6c:	6023      	str	r3, [r4, #0]

    macHdr.Value = 0;
 8012f6e:	2300      	movs	r3, #0
 8012f70:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8012f74:	2214      	movs	r2, #20
 8012f76:	2100      	movs	r1, #0
 8012f78:	4880      	ldr	r0, [pc, #512]	; (801317c <LoRaMacMcpsRequest+0x264>)
 8012f7a:	f006 f821 	bl	8018fc0 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012f7e:	4b80      	ldr	r3, [pc, #512]	; (8013180 <LoRaMacMcpsRequest+0x268>)
 8012f80:	2201      	movs	r2, #1
 8012f82:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441

    // Apply confirmed downlinks, if the device has not received a valid
    // downlink after a join accept.
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 8012f86:	4b7f      	ldr	r3, [pc, #508]	; (8013184 <LoRaMacMcpsRequest+0x26c>)
 8012f88:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8012f8c:	2b02      	cmp	r3, #2
 8012f8e:	d111      	bne.n	8012fb4 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8012f90:	4b7c      	ldr	r3, [pc, #496]	; (8013184 <LoRaMacMcpsRequest+0x26c>)
 8012f92:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 8012f96:	2b02      	cmp	r3, #2
 8012f98:	d10c      	bne.n	8012fb4 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 8012f9a:	4b7a      	ldr	r3, [pc, #488]	; (8013184 <LoRaMacMcpsRequest+0x26c>)
 8012f9c:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
 8012fa0:	f083 0301 	eor.w	r3, r3, #1
 8012fa4:	b2db      	uxtb	r3, r3
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d004      	beq.n	8012fb4 <LoRaMacMcpsRequest+0x9c>
        ( request.Type == MCPS_UNCONFIRMED ) )
 8012faa:	7b3b      	ldrb	r3, [r7, #12]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d101      	bne.n	8012fb4 <LoRaMacMcpsRequest+0x9c>
    {
        request.Type = MCPS_CONFIRMED;
 8012fb0:	2301      	movs	r3, #1
 8012fb2:	733b      	strb	r3, [r7, #12]
    }

    switch( request.Type )
 8012fb4:	7b3b      	ldrb	r3, [r7, #12]
 8012fb6:	2b03      	cmp	r3, #3
 8012fb8:	d030      	beq.n	801301c <LoRaMacMcpsRequest+0x104>
 8012fba:	2b03      	cmp	r3, #3
 8012fbc:	dc3f      	bgt.n	801303e <LoRaMacMcpsRequest+0x126>
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d002      	beq.n	8012fc8 <LoRaMacMcpsRequest+0xb0>
 8012fc2:	2b01      	cmp	r3, #1
 8012fc4:	d015      	beq.n	8012ff2 <LoRaMacMcpsRequest+0xda>
            fBufferSize = request.Req.Proprietary.fBufferSize;
            datarate = request.Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8012fc6:	e03a      	b.n	801303e <LoRaMacMcpsRequest+0x126>
            readyToSend = true;
 8012fc8:	2301      	movs	r3, #1
 8012fca:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8012fce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012fd2:	2202      	movs	r2, #2
 8012fd4:	f362 1347 	bfi	r3, r2, #5, #3
 8012fd8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fPort = request.Req.Unconfirmed.fPort;
 8012fdc:	7c3b      	ldrb	r3, [r7, #16]
 8012fde:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            fBuffer = request.Req.Unconfirmed.fBuffer;
 8012fe2:	697b      	ldr	r3, [r7, #20]
 8012fe4:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 8012fe6:	8b3b      	ldrh	r3, [r7, #24]
 8012fe8:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Unconfirmed.Datarate;
 8012fea:	7ebb      	ldrb	r3, [r7, #26]
 8012fec:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8012ff0:	e026      	b.n	8013040 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 8012ff2:	2301      	movs	r3, #1
 8012ff4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8012ff8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012ffc:	2204      	movs	r2, #4
 8012ffe:	f362 1347 	bfi	r3, r2, #5, #3
 8013002:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fPort = request.Req.Confirmed.fPort;
 8013006:	7c3b      	ldrb	r3, [r7, #16]
 8013008:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            fBuffer = request.Req.Confirmed.fBuffer;
 801300c:	697b      	ldr	r3, [r7, #20]
 801300e:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Confirmed.fBufferSize;
 8013010:	8b3b      	ldrh	r3, [r7, #24]
 8013012:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Confirmed.Datarate;
 8013014:	7ebb      	ldrb	r3, [r7, #26]
 8013016:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 801301a:	e011      	b.n	8013040 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 801301c:	2301      	movs	r3, #1
 801301e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8013022:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013026:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 801302a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fBuffer = request.Req.Proprietary.fBuffer;
 801302e:	693b      	ldr	r3, [r7, #16]
 8013030:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Proprietary.fBufferSize;
 8013032:	8abb      	ldrh	r3, [r7, #20]
 8013034:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Proprietary.Datarate;
 8013036:	7dbb      	ldrb	r3, [r7, #22]
 8013038:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 801303c:	e000      	b.n	8013040 <LoRaMacMcpsRequest+0x128>
            break;
 801303e:	bf00      	nop
    }

    // Make sure that the input datarate is compliant
    // to the regional specification.
    getPhy.Attribute = PHY_MIN_TX_DR;
 8013040:	2302      	movs	r3, #2
 8013042:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8013046:	4b4f      	ldr	r3, [pc, #316]	; (8013184 <LoRaMacMcpsRequest+0x26c>)
 8013048:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801304c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013050:	4b4c      	ldr	r3, [pc, #304]	; (8013184 <LoRaMacMcpsRequest+0x26c>)
 8013052:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013056:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801305a:	4611      	mov	r1, r2
 801305c:	4618      	mov	r0, r3
 801305e:	f002 f973 	bl	8015348 <RegionGetPhyParam>
 8013062:	4603      	mov	r3, r0
 8013064:	62bb      	str	r3, [r7, #40]	; 0x28
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8013066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013068:	b25b      	sxtb	r3, r3
 801306a:	f997 2035 	ldrsb.w	r2, [r7, #53]	; 0x35
 801306e:	4293      	cmp	r3, r2
 8013070:	bfb8      	it	lt
 8013072:	4613      	movlt	r3, r2
 8013074:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    // Apply minimum datarate in this special case.
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8013078:	4b42      	ldr	r3, [pc, #264]	; (8013184 <LoRaMacMcpsRequest+0x26c>)
 801307a:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 801307e:	4a41      	ldr	r2, [pc, #260]	; (8013184 <LoRaMacMcpsRequest+0x26c>)
 8013080:	f892 1130 	ldrb.w	r1, [r2, #304]	; 0x130
 8013084:	4a3f      	ldr	r2, [pc, #252]	; (8013184 <LoRaMacMcpsRequest+0x26c>)
 8013086:	f892 211d 	ldrb.w	r2, [r2, #285]	; 0x11d
 801308a:	4618      	mov	r0, r3
 801308c:	f7fc fae0 	bl	800f650 <CheckForMinimumAbpDatarate>
 8013090:	4603      	mov	r3, r0
 8013092:	2b00      	cmp	r3, #0
 8013094:	d002      	beq.n	801309c <LoRaMacMcpsRequest+0x184>
                                    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true )
    {
        datarate = ( int8_t )phyParam.Value;
 8013096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013098:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if( readyToSend == true )
 801309c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d05f      	beq.n	8013164 <LoRaMacMcpsRequest+0x24c>
    {
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 80130a4:	4b37      	ldr	r3, [pc, #220]	; (8013184 <LoRaMacMcpsRequest+0x26c>)
 80130a6:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 80130aa:	f083 0301 	eor.w	r3, r3, #1
 80130ae:	b2db      	uxtb	r3, r3
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d10e      	bne.n	80130d2 <LoRaMacMcpsRequest+0x1ba>
            ( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 80130b4:	4b33      	ldr	r3, [pc, #204]	; (8013184 <LoRaMacMcpsRequest+0x26c>)
 80130b6:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 80130ba:	4a32      	ldr	r2, [pc, #200]	; (8013184 <LoRaMacMcpsRequest+0x26c>)
 80130bc:	f892 1130 	ldrb.w	r1, [r2, #304]	; 0x130
 80130c0:	4a30      	ldr	r2, [pc, #192]	; (8013184 <LoRaMacMcpsRequest+0x26c>)
 80130c2:	f892 211d 	ldrb.w	r2, [r2, #285]	; 0x11d
 80130c6:	4618      	mov	r0, r3
 80130c8:	f7fc fac2 	bl	800f650 <CheckForMinimumAbpDatarate>
 80130cc:	4603      	mov	r3, r0
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d01c      	beq.n	801310c <LoRaMacMcpsRequest+0x1f4>
                                          Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true ) )
        {
            verify.DatarateParams.Datarate = datarate;
 80130d2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80130d6:	f887 3020 	strb.w	r3, [r7, #32]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80130da:	4b2a      	ldr	r3, [pc, #168]	; (8013184 <LoRaMacMcpsRequest+0x26c>)
 80130dc:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80130e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 80130e4:	4b27      	ldr	r3, [pc, #156]	; (8013184 <LoRaMacMcpsRequest+0x26c>)
 80130e6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80130ea:	f107 0120 	add.w	r1, r7, #32
 80130ee:	2205      	movs	r2, #5
 80130f0:	4618      	mov	r0, r3
 80130f2:	f002 f977 	bl	80153e4 <RegionVerify>
 80130f6:	4603      	mov	r3, r0
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d005      	beq.n	8013108 <LoRaMacMcpsRequest+0x1f0>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 80130fc:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8013100:	4b20      	ldr	r3, [pc, #128]	; (8013184 <LoRaMacMcpsRequest+0x26c>)
 8013102:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8013106:	e001      	b.n	801310c <LoRaMacMcpsRequest+0x1f4>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8013108:	2303      	movs	r3, #3
 801310a:	e032      	b.n	8013172 <LoRaMacMcpsRequest+0x25a>
            }
        }

        // Verification of response timeout for class b and class c
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 801310c:	4b1d      	ldr	r3, [pc, #116]	; (8013184 <LoRaMacMcpsRequest+0x26c>)
 801310e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013112:	4a1b      	ldr	r2, [pc, #108]	; (8013180 <LoRaMacMcpsRequest+0x268>)
 8013114:	f8d2 2498 	ldr.w	r2, [r2, #1176]	; 0x498
 8013118:	4611      	mov	r1, r2
 801311a:	4618      	mov	r0, r3
 801311c:	f7fc fb84 	bl	800f828 <LoRaMacHandleResponseTimeout>
                                      MacCtx.ResponseTimeoutStartTime );

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 8013120:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8013122:	f897 103e 	ldrb.w	r1, [r7, #62]	; 0x3e
 8013126:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801312a:	78fb      	ldrb	r3, [r7, #3]
 801312c:	9300      	str	r3, [sp, #0]
 801312e:	4613      	mov	r3, r2
 8013130:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013132:	f7fd fb23 	bl	801077c <Send>
 8013136:	4603      	mov	r3, r0
 8013138:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if( status == LORAMAC_STATUS_OK )
 801313c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013140:	2b00      	cmp	r3, #0
 8013142:	d10b      	bne.n	801315c <LoRaMacMcpsRequest+0x244>
        {
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 8013144:	7b3a      	ldrb	r2, [r7, #12]
 8013146:	4b0e      	ldr	r3, [pc, #56]	; (8013180 <LoRaMacMcpsRequest+0x268>)
 8013148:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
            MacCtx.MacFlags.Bits.McpsReq = 1;
 801314c:	4a0c      	ldr	r2, [pc, #48]	; (8013180 <LoRaMacMcpsRequest+0x268>)
 801314e:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8013152:	f043 0301 	orr.w	r3, r3, #1
 8013156:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 801315a:	e003      	b.n	8013164 <LoRaMacMcpsRequest+0x24c>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 801315c:	4b08      	ldr	r3, [pc, #32]	; (8013180 <LoRaMacMcpsRequest+0x268>)
 801315e:	2200      	movs	r2, #0
 8013160:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8013164:	4b06      	ldr	r3, [pc, #24]	; (8013180 <LoRaMacMcpsRequest+0x268>)
 8013166:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	611a      	str	r2, [r3, #16]

    return status;
 801316e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8013172:	4618      	mov	r0, r3
 8013174:	3740      	adds	r7, #64	; 0x40
 8013176:	46bd      	mov	sp, r7
 8013178:	bdb0      	pop	{r4, r5, r7, pc}
 801317a:	bf00      	nop
 801317c:	20000b80 	.word	0x20000b80
 8013180:	20000740 	.word	0x20000740
 8013184:	20000c5c 	.word	0x20000c5c

08013188 <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8013188:	b580      	push	{r7, lr}
 801318a:	b084      	sub	sp, #16
 801318c:	af00      	add	r7, sp, #0
 801318e:	4603      	mov	r3, r0
 8013190:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8013192:	79fb      	ldrb	r3, [r7, #7]
 8013194:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8013196:	4b0d      	ldr	r3, [pc, #52]	; (80131cc <LoRaMacTestSetDutyCycleOn+0x44>)
 8013198:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801319c:	f107 010c 	add.w	r1, r7, #12
 80131a0:	220f      	movs	r2, #15
 80131a2:	4618      	mov	r0, r3
 80131a4:	f002 f91e 	bl	80153e4 <RegionVerify>
 80131a8:	4603      	mov	r3, r0
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d00a      	beq.n	80131c4 <LoRaMacTestSetDutyCycleOn+0x3c>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 80131ae:	4a07      	ldr	r2, [pc, #28]	; (80131cc <LoRaMacTestSetDutyCycleOn+0x44>)
 80131b0:	79fb      	ldrb	r3, [r7, #7]
 80131b2:	f882 311c 	strb.w	r3, [r2, #284]	; 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 80131b6:	4a06      	ldr	r2, [pc, #24]	; (80131d0 <LoRaMacTestSetDutyCycleOn+0x48>)
 80131b8:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80131bc:	f043 0320 	orr.w	r3, r3, #32
 80131c0:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
}
 80131c4:	bf00      	nop
 80131c6:	3710      	adds	r7, #16
 80131c8:	46bd      	mov	sp, r7
 80131ca:	bd80      	pop	{r7, pc}
 80131cc:	20000c5c 	.word	0x20000c5c
 80131d0:	20000740 	.word	0x20000740

080131d4 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 80131d4:	b580      	push	{r7, lr}
 80131d6:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 80131d8:	f7fe fe94 	bl	8011f04 <LoRaMacStop>
 80131dc:	4603      	mov	r3, r0
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d112      	bne.n	8013208 <LoRaMacDeInitialization+0x34>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 80131e2:	480b      	ldr	r0, [pc, #44]	; (8013210 <LoRaMacDeInitialization+0x3c>)
 80131e4:	f00a f84c 	bl	801d280 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 80131e8:	480a      	ldr	r0, [pc, #40]	; (8013214 <LoRaMacDeInitialization+0x40>)
 80131ea:	f00a f849 	bl	801d280 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 80131ee:	480a      	ldr	r0, [pc, #40]	; (8013218 <LoRaMacDeInitialization+0x44>)
 80131f0:	f00a f846 	bl	801d280 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 80131f4:	f000 f94a 	bl	801348c <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( false );
 80131f8:	2000      	movs	r0, #0
 80131fa:	f7fd fe1d 	bl	8010e38 <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 80131fe:	4b07      	ldr	r3, [pc, #28]	; (801321c <LoRaMacDeInitialization+0x48>)
 8013200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013202:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 8013204:	2300      	movs	r3, #0
 8013206:	e000      	b.n	801320a <LoRaMacDeInitialization+0x36>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 8013208:	2301      	movs	r3, #1
    }
}
 801320a:	4618      	mov	r0, r3
 801320c:	bd80      	pop	{r7, pc}
 801320e:	bf00      	nop
 8013210:	20000aa8 	.word	0x20000aa8
 8013214:	20000ac0 	.word	0x20000ac0
 8013218:	20000ad8 	.word	0x20000ad8
 801321c:	0801eb70 	.word	0x0801eb70

08013220 <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 8013220:	b580      	push	{r7, lr}
 8013222:	b08c      	sub	sp, #48	; 0x30
 8013224:	af00      	add	r7, sp, #0
 8013226:	60f8      	str	r0, [r7, #12]
 8013228:	60b9      	str	r1, [r7, #8]
 801322a:	607a      	str	r2, [r7, #4]
 801322c:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 801322e:	2300      	movs	r3, #0
 8013230:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	7b1b      	ldrb	r3, [r3, #12]
 8013238:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 801323c:	68fb      	ldr	r3, [r7, #12]
 801323e:	7b5b      	ldrb	r3, [r3, #13]
 8013240:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint8_t nbTrans = adrNext->NbTrans;
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	7b9b      	ldrb	r3, [r3, #14]
 8013248:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	685a      	ldr	r2, [r3, #4]
 8013250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013252:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8013254:	68fb      	ldr	r3, [r7, #12]
 8013256:	785b      	ldrb	r3, [r3, #1]
 8013258:	2b00      	cmp	r3, #0
 801325a:	f000 8088 	beq.w	801336e <LoRaMacAdrCalcNext+0x14e>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 801325e:	2302      	movs	r3, #2
 8013260:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8013264:	68fb      	ldr	r3, [r7, #12]
 8013266:	7bdb      	ldrb	r3, [r3, #15]
 8013268:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 801326c:	68fb      	ldr	r3, [r7, #12]
 801326e:	7c1b      	ldrb	r3, [r3, #16]
 8013270:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8013274:	4611      	mov	r1, r2
 8013276:	4618      	mov	r0, r3
 8013278:	f002 f866 	bl	8015348 <RegionGetPhyParam>
 801327c:	4603      	mov	r3, r0
 801327e:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8013280:	6a3b      	ldr	r3, [r7, #32]
 8013282:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        datarate = MAX( datarate, minTxDatarate );
 8013286:	f997 202b 	ldrsb.w	r2, [r7, #43]	; 0x2b
 801328a:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 801328e:	4293      	cmp	r3, r2
 8013290:	bfb8      	it	lt
 8013292:	4613      	movlt	r3, r2
 8013294:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        // Verify if ADR ack req bit needs to be set.
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 8013298:	68fb      	ldr	r3, [r7, #12]
 801329a:	685b      	ldr	r3, [r3, #4]
 801329c:	68fa      	ldr	r2, [r7, #12]
 801329e:	8912      	ldrh	r2, [r2, #8]
 80132a0:	4293      	cmp	r3, r2
 80132a2:	d302      	bcc.n	80132aa <LoRaMacAdrCalcNext+0x8a>
        {
            adrAckReq = true;
 80132a4:	2301      	movs	r3, #1
 80132a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        // Verify, if we need to set the TX power to default
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 80132aa:	68fb      	ldr	r3, [r7, #12]
 80132ac:	685b      	ldr	r3, [r3, #4]
 80132ae:	68fa      	ldr	r2, [r7, #12]
 80132b0:	8912      	ldrh	r2, [r2, #8]
 80132b2:	4611      	mov	r1, r2
 80132b4:	68fa      	ldr	r2, [r7, #12]
 80132b6:	8952      	ldrh	r2, [r2, #10]
 80132b8:	440a      	add	r2, r1
 80132ba:	4293      	cmp	r3, r2
 80132bc:	d30f      	bcc.n	80132de <LoRaMacAdrCalcNext+0xbe>
        {
            // Set TX Power to default
            getPhy.Attribute = PHY_DEF_TX_POWER;
 80132be:	230a      	movs	r3, #10
 80132c0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80132c4:	68fb      	ldr	r3, [r7, #12]
 80132c6:	7c1b      	ldrb	r3, [r3, #16]
 80132c8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80132cc:	4611      	mov	r1, r2
 80132ce:	4618      	mov	r0, r3
 80132d0:	f002 f83a 	bl	8015348 <RegionGetPhyParam>
 80132d4:	4603      	mov	r3, r0
 80132d6:	623b      	str	r3, [r7, #32]
            txPower = phyParam.Value;
 80132d8:	6a3b      	ldr	r3, [r7, #32]
 80132da:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        }

        // Verify, if we need to decrease the data rate
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	685b      	ldr	r3, [r3, #4]
 80132e2:	68fa      	ldr	r2, [r7, #12]
 80132e4:	8912      	ldrh	r2, [r2, #8]
 80132e6:	4611      	mov	r1, r2
 80132e8:	68fa      	ldr	r2, [r7, #12]
 80132ea:	8952      	ldrh	r2, [r2, #10]
 80132ec:	0052      	lsls	r2, r2, #1
 80132ee:	440a      	add	r2, r1
 80132f0:	4293      	cmp	r3, r2
 80132f2:	d33c      	bcc.n	801336e <LoRaMacAdrCalcNext+0x14e>
        {
            // Perform actions with every adrNext->AdrAckDelay only
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	685b      	ldr	r3, [r3, #4]
 80132f8:	68fa      	ldr	r2, [r7, #12]
 80132fa:	8912      	ldrh	r2, [r2, #8]
 80132fc:	1a9b      	subs	r3, r3, r2
 80132fe:	68fa      	ldr	r2, [r7, #12]
 8013300:	8952      	ldrh	r2, [r2, #10]
 8013302:	fbb3 f1f2 	udiv	r1, r3, r2
 8013306:	fb01 f202 	mul.w	r2, r1, r2
 801330a:	1a9b      	subs	r3, r3, r2
 801330c:	2b00      	cmp	r3, #0
 801330e:	d12e      	bne.n	801336e <LoRaMacAdrCalcNext+0x14e>
            {
                if( datarate == minTxDatarate )
 8013310:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8013314:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8013318:	429a      	cmp	r2, r3
 801331a:	d110      	bne.n	801333e <LoRaMacAdrCalcNext+0x11e>
                {
                    // Restore the channel mask
                    if( adrNext->UpdateChanMask == true )
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	781b      	ldrb	r3, [r3, #0]
 8013320:	2b00      	cmp	r3, #0
 8013322:	d009      	beq.n	8013338 <LoRaMacAdrCalcNext+0x118>
                    {
                        InitDefaultsParams_t params;
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8013324:	2302      	movs	r3, #2
 8013326:	773b      	strb	r3, [r7, #28]
                        RegionInitDefaults( adrNext->Region, &params );
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	7c1b      	ldrb	r3, [r3, #16]
 801332c:	f107 0210 	add.w	r2, r7, #16
 8013330:	4611      	mov	r1, r2
 8013332:	4618      	mov	r0, r3
 8013334:	f002 f83f 	bl	80153b6 <RegionInitDefaults>
                    }

                    // Restore NbTrans
                    nbTrans = 1;
 8013338:	2301      	movs	r3, #1
 801333a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                // Decrease the datarate
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 801333e:	2321      	movs	r3, #33	; 0x21
 8013340:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                getPhy.Datarate = datarate;
 8013344:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8013348:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	7bdb      	ldrb	r3, [r3, #15]
 8013350:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	7c1b      	ldrb	r3, [r3, #16]
 8013358:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801335c:	4611      	mov	r1, r2
 801335e:	4618      	mov	r0, r3
 8013360:	f001 fff2 	bl	8015348 <RegionGetPhyParam>
 8013364:	4603      	mov	r3, r0
 8013366:	623b      	str	r3, [r7, #32]
                datarate = phyParam.Value;
 8013368:	6a3b      	ldr	r3, [r7, #32]
 801336a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            }
        }
    }

    *drOut = datarate;
 801336e:	68bb      	ldr	r3, [r7, #8]
 8013370:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8013374:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801337c:	701a      	strb	r2, [r3, #0]
    *nbTransOut = nbTrans;
 801337e:	683b      	ldr	r3, [r7, #0]
 8013380:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8013384:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8013386:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801338a:	4618      	mov	r0, r3
 801338c:	3730      	adds	r7, #48	; 0x30
 801338e:	46bd      	mov	sp, r7
 8013390:	bd80      	pop	{r7, pc}

08013392 <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 8013392:	b480      	push	{r7}
 8013394:	b085      	sub	sp, #20
 8013396:	af00      	add	r7, sp, #0
 8013398:	60f8      	str	r0, [r7, #12]
 801339a:	60b9      	str	r1, [r7, #8]
 801339c:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801339e:	bf00      	nop
 80133a0:	3714      	adds	r7, #20
 80133a2:	46bd      	mov	sp, r7
 80133a4:	bc80      	pop	{r7}
 80133a6:	4770      	bx	lr

080133a8 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 80133a8:	b480      	push	{r7}
 80133aa:	b083      	sub	sp, #12
 80133ac:	af00      	add	r7, sp, #0
 80133ae:	4603      	mov	r3, r0
 80133b0:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80133b2:	bf00      	nop
 80133b4:	370c      	adds	r7, #12
 80133b6:	46bd      	mov	sp, r7
 80133b8:	bc80      	pop	{r7}
 80133ba:	4770      	bx	lr

080133bc <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 80133bc:	b480      	push	{r7}
 80133be:	b083      	sub	sp, #12
 80133c0:	af00      	add	r7, sp, #0
 80133c2:	4603      	mov	r3, r0
 80133c4:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80133c6:	bf00      	nop
 80133c8:	370c      	adds	r7, #12
 80133ca:	46bd      	mov	sp, r7
 80133cc:	bc80      	pop	{r7}
 80133ce:	4770      	bx	lr

080133d0 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 80133d0:	b480      	push	{r7}
 80133d2:	b083      	sub	sp, #12
 80133d4:	af00      	add	r7, sp, #0
 80133d6:	4603      	mov	r3, r0
 80133d8:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80133da:	bf00      	nop
 80133dc:	370c      	adds	r7, #12
 80133de:	46bd      	mov	sp, r7
 80133e0:	bc80      	pop	{r7}
 80133e2:	4770      	bx	lr

080133e4 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 80133e4:	b480      	push	{r7}
 80133e6:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 80133e8:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80133ea:	4618      	mov	r0, r3
 80133ec:	46bd      	mov	sp, r7
 80133ee:	bc80      	pop	{r7}
 80133f0:	4770      	bx	lr

080133f2 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 80133f2:	b480      	push	{r7}
 80133f4:	b083      	sub	sp, #12
 80133f6:	af00      	add	r7, sp, #0
 80133f8:	6078      	str	r0, [r7, #4]
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80133fa:	bf00      	nop
 80133fc:	370c      	adds	r7, #12
 80133fe:	46bd      	mov	sp, r7
 8013400:	bc80      	pop	{r7}
 8013402:	4770      	bx	lr

08013404 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8013404:	b480      	push	{r7}
 8013406:	b083      	sub	sp, #12
 8013408:	af00      	add	r7, sp, #0
 801340a:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801340c:	bf00      	nop
 801340e:	370c      	adds	r7, #12
 8013410:	46bd      	mov	sp, r7
 8013412:	bc80      	pop	{r7}
 8013414:	4770      	bx	lr

08013416 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8013416:	b480      	push	{r7}
 8013418:	b083      	sub	sp, #12
 801341a:	af00      	add	r7, sp, #0
 801341c:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801341e:	bf00      	nop
 8013420:	370c      	adds	r7, #12
 8013422:	46bd      	mov	sp, r7
 8013424:	bc80      	pop	{r7}
 8013426:	4770      	bx	lr

08013428 <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 8013428:	b480      	push	{r7}
 801342a:	b083      	sub	sp, #12
 801342c:	af00      	add	r7, sp, #0
 801342e:	6078      	str	r0, [r7, #4]
 8013430:	460b      	mov	r3, r1
 8013432:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8013434:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013436:	4618      	mov	r0, r3
 8013438:	370c      	adds	r7, #12
 801343a:	46bd      	mov	sp, r7
 801343c:	bc80      	pop	{r7}
 801343e:	4770      	bx	lr

08013440 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 8013440:	b480      	push	{r7}
 8013442:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8013444:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013446:	4618      	mov	r0, r3
 8013448:	46bd      	mov	sp, r7
 801344a:	bc80      	pop	{r7}
 801344c:	4770      	bx	lr

0801344e <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 801344e:	b480      	push	{r7}
 8013450:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8013452:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013454:	4618      	mov	r0, r3
 8013456:	46bd      	mov	sp, r7
 8013458:	bc80      	pop	{r7}
 801345a:	4770      	bx	lr

0801345c <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 801345c:	b480      	push	{r7}
 801345e:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8013460:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013462:	4618      	mov	r0, r3
 8013464:	46bd      	mov	sp, r7
 8013466:	bc80      	pop	{r7}
 8013468:	4770      	bx	lr

0801346a <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 801346a:	b480      	push	{r7}
 801346c:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 801346e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013470:	4618      	mov	r0, r3
 8013472:	46bd      	mov	sp, r7
 8013474:	bc80      	pop	{r7}
 8013476:	4770      	bx	lr

08013478 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8013478:	b480      	push	{r7}
 801347a:	b083      	sub	sp, #12
 801347c:	af00      	add	r7, sp, #0
 801347e:	4603      	mov	r3, r0
 8013480:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013482:	bf00      	nop
 8013484:	370c      	adds	r7, #12
 8013486:	46bd      	mov	sp, r7
 8013488:	bc80      	pop	{r7}
 801348a:	4770      	bx	lr

0801348c <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 801348c:	b480      	push	{r7}
 801348e:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013490:	bf00      	nop
 8013492:	46bd      	mov	sp, r7
 8013494:	bc80      	pop	{r7}
 8013496:	4770      	bx	lr

08013498 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8013498:	b480      	push	{r7}
 801349a:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801349c:	bf00      	nop
 801349e:	46bd      	mov	sp, r7
 80134a0:	bc80      	pop	{r7}
 80134a2:	4770      	bx	lr

080134a4 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 80134a4:	b480      	push	{r7}
 80134a6:	b083      	sub	sp, #12
 80134a8:	af00      	add	r7, sp, #0
 80134aa:	4603      	mov	r3, r0
 80134ac:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80134ae:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80134b0:	4618      	mov	r0, r3
 80134b2:	370c      	adds	r7, #12
 80134b4:	46bd      	mov	sp, r7
 80134b6:	bc80      	pop	{r7}
 80134b8:	4770      	bx	lr

080134ba <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 80134ba:	b480      	push	{r7}
 80134bc:	b083      	sub	sp, #12
 80134be:	af00      	add	r7, sp, #0
 80134c0:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80134c2:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80134c4:	4618      	mov	r0, r3
 80134c6:	370c      	adds	r7, #12
 80134c8:	46bd      	mov	sp, r7
 80134ca:	bc80      	pop	{r7}
 80134cc:	4770      	bx	lr

080134ce <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 80134ce:	b480      	push	{r7}
 80134d0:	b083      	sub	sp, #12
 80134d2:	af00      	add	r7, sp, #0
 80134d4:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80134d6:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80134d8:	4618      	mov	r0, r3
 80134da:	370c      	adds	r7, #12
 80134dc:	46bd      	mov	sp, r7
 80134de:	bc80      	pop	{r7}
 80134e0:	4770      	bx	lr

080134e2 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 80134e2:	b480      	push	{r7}
 80134e4:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80134e6:	bf00      	nop
 80134e8:	46bd      	mov	sp, r7
 80134ea:	bc80      	pop	{r7}
 80134ec:	4770      	bx	lr

080134ee <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 80134ee:	b480      	push	{r7}
 80134f0:	b083      	sub	sp, #12
 80134f2:	af00      	add	r7, sp, #0
 80134f4:	4603      	mov	r3, r0
 80134f6:	6039      	str	r1, [r7, #0]
 80134f8:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 80134fa:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80134fc:	4618      	mov	r0, r3
 80134fe:	370c      	adds	r7, #12
 8013500:	46bd      	mov	sp, r7
 8013502:	bc80      	pop	{r7}
 8013504:	4770      	bx	lr

08013506 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8013506:	b480      	push	{r7}
 8013508:	b083      	sub	sp, #12
 801350a:	af00      	add	r7, sp, #0
 801350c:	4603      	mov	r3, r0
 801350e:	603a      	str	r2, [r7, #0]
 8013510:	80fb      	strh	r3, [r7, #6]
 8013512:	460b      	mov	r3, r1
 8013514:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013516:	bf00      	nop
 8013518:	370c      	adds	r7, #12
 801351a:	46bd      	mov	sp, r7
 801351c:	bc80      	pop	{r7}
 801351e:	4770      	bx	lr

08013520 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8013520:	b480      	push	{r7}
 8013522:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013524:	bf00      	nop
 8013526:	46bd      	mov	sp, r7
 8013528:	bc80      	pop	{r7}
 801352a:	4770      	bx	lr

0801352c <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 801352c:	b480      	push	{r7}
 801352e:	b083      	sub	sp, #12
 8013530:	af00      	add	r7, sp, #0
 8013532:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 8013534:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013536:	4618      	mov	r0, r3
 8013538:	370c      	adds	r7, #12
 801353a:	46bd      	mov	sp, r7
 801353c:	bc80      	pop	{r7}
 801353e:	4770      	bx	lr

08013540 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8013540:	b480      	push	{r7}
 8013542:	b083      	sub	sp, #12
 8013544:	af00      	add	r7, sp, #0
 8013546:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8013548:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801354a:	4618      	mov	r0, r3
 801354c:	370c      	adds	r7, #12
 801354e:	46bd      	mov	sp, r7
 8013550:	bc80      	pop	{r7}
 8013552:	4770      	bx	lr

08013554 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8013554:	b480      	push	{r7}
 8013556:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013558:	bf00      	nop
 801355a:	46bd      	mov	sp, r7
 801355c:	bc80      	pop	{r7}
 801355e:	4770      	bx	lr

08013560 <LoRaMacClassBSetFPendingBit>:
#endif /* LORAMAC_CLASSB_ENABLED */
}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
void LoRaMacClassBSetFPendingBit( uint32_t address, uint8_t fPendingSet )
{
 8013560:	b480      	push	{r7}
 8013562:	b083      	sub	sp, #12
 8013564:	af00      	add	r7, sp, #0
 8013566:	6078      	str	r0, [r7, #4]
 8013568:	460b      	mov	r3, r1
 801356a:	70fb      	strb	r3, [r7, #3]
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801356c:	bf00      	nop
 801356e:	370c      	adds	r7, #12
 8013570:	46bd      	mov	sp, r7
 8013572:	bc80      	pop	{r7}
 8013574:	4770      	bx	lr

08013576 <LoRaMacClassBProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 8013576:	b480      	push	{r7}
 8013578:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801357a:	bf00      	nop
 801357c:	46bd      	mov	sp, r7
 801357e:	bc80      	pop	{r7}
 8013580:	4770      	bx	lr

08013582 <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8013582:	b480      	push	{r7}
 8013584:	b085      	sub	sp, #20
 8013586:	af00      	add	r7, sp, #0
 8013588:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 801358e:	2300      	movs	r3, #0
 8013590:	81fb      	strh	r3, [r7, #14]
 8013592:	e00a      	b.n	80135aa <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8013594:	89fb      	ldrh	r3, [r7, #14]
 8013596:	68ba      	ldr	r2, [r7, #8]
 8013598:	4413      	add	r3, r2
 801359a:	781b      	ldrb	r3, [r3, #0]
 801359c:	2b00      	cmp	r3, #0
 801359e:	d001      	beq.n	80135a4 <IsSlotFree+0x22>
        {
            return false;
 80135a0:	2300      	movs	r3, #0
 80135a2:	e006      	b.n	80135b2 <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80135a4:	89fb      	ldrh	r3, [r7, #14]
 80135a6:	3301      	adds	r3, #1
 80135a8:	81fb      	strh	r3, [r7, #14]
 80135aa:	89fb      	ldrh	r3, [r7, #14]
 80135ac:	2b0f      	cmp	r3, #15
 80135ae:	d9f1      	bls.n	8013594 <IsSlotFree+0x12>
        }
    }
    return true;
 80135b0:	2301      	movs	r3, #1
}
 80135b2:	4618      	mov	r0, r3
 80135b4:	3714      	adds	r7, #20
 80135b6:	46bd      	mov	sp, r7
 80135b8:	bc80      	pop	{r7}
 80135ba:	4770      	bx	lr

080135bc <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 80135bc:	b580      	push	{r7, lr}
 80135be:	b082      	sub	sp, #8
 80135c0:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 80135c2:	2300      	movs	r3, #0
 80135c4:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 80135c6:	e007      	b.n	80135d8 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 80135c8:	79fb      	ldrb	r3, [r7, #7]
 80135ca:	3301      	adds	r3, #1
 80135cc:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 80135ce:	79fb      	ldrb	r3, [r7, #7]
 80135d0:	2b20      	cmp	r3, #32
 80135d2:	d101      	bne.n	80135d8 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 80135d4:	2300      	movs	r3, #0
 80135d6:	e012      	b.n	80135fe <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 80135d8:	79fb      	ldrb	r3, [r7, #7]
 80135da:	011b      	lsls	r3, r3, #4
 80135dc:	3308      	adds	r3, #8
 80135de:	4a0a      	ldr	r2, [pc, #40]	; (8013608 <MallocNewMacCommandSlot+0x4c>)
 80135e0:	4413      	add	r3, r2
 80135e2:	4618      	mov	r0, r3
 80135e4:	f7ff ffcd 	bl	8013582 <IsSlotFree>
 80135e8:	4603      	mov	r3, r0
 80135ea:	f083 0301 	eor.w	r3, r3, #1
 80135ee:	b2db      	uxtb	r3, r3
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d1e9      	bne.n	80135c8 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 80135f4:	79fb      	ldrb	r3, [r7, #7]
 80135f6:	011b      	lsls	r3, r3, #4
 80135f8:	3308      	adds	r3, #8
 80135fa:	4a03      	ldr	r2, [pc, #12]	; (8013608 <MallocNewMacCommandSlot+0x4c>)
 80135fc:	4413      	add	r3, r2
}
 80135fe:	4618      	mov	r0, r3
 8013600:	3708      	adds	r7, #8
 8013602:	46bd      	mov	sp, r7
 8013604:	bd80      	pop	{r7, pc}
 8013606:	bf00      	nop
 8013608:	2000189c 	.word	0x2000189c

0801360c <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 801360c:	b580      	push	{r7, lr}
 801360e:	b082      	sub	sp, #8
 8013610:	af00      	add	r7, sp, #0
 8013612:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	2b00      	cmp	r3, #0
 8013618:	d101      	bne.n	801361e <FreeMacCommandSlot+0x12>
    {
        return false;
 801361a:	2300      	movs	r3, #0
 801361c:	e005      	b.n	801362a <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 801361e:	2210      	movs	r2, #16
 8013620:	2100      	movs	r1, #0
 8013622:	6878      	ldr	r0, [r7, #4]
 8013624:	f005 fccc 	bl	8018fc0 <memset1>

    return true;
 8013628:	2301      	movs	r3, #1
}
 801362a:	4618      	mov	r0, r3
 801362c:	3708      	adds	r7, #8
 801362e:	46bd      	mov	sp, r7
 8013630:	bd80      	pop	{r7, pc}

08013632 <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8013632:	b480      	push	{r7}
 8013634:	b083      	sub	sp, #12
 8013636:	af00      	add	r7, sp, #0
 8013638:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	2b00      	cmp	r3, #0
 801363e:	d101      	bne.n	8013644 <LinkedListInit+0x12>
    {
        return false;
 8013640:	2300      	movs	r3, #0
 8013642:	e006      	b.n	8013652 <LinkedListInit+0x20>
    }

    list->First = NULL;
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	2200      	movs	r2, #0
 8013648:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	2200      	movs	r2, #0
 801364e:	605a      	str	r2, [r3, #4]

    return true;
 8013650:	2301      	movs	r3, #1
}
 8013652:	4618      	mov	r0, r3
 8013654:	370c      	adds	r7, #12
 8013656:	46bd      	mov	sp, r7
 8013658:	bc80      	pop	{r7}
 801365a:	4770      	bx	lr

0801365c <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 801365c:	b480      	push	{r7}
 801365e:	b083      	sub	sp, #12
 8013660:	af00      	add	r7, sp, #0
 8013662:	6078      	str	r0, [r7, #4]
 8013664:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	2b00      	cmp	r3, #0
 801366a:	d002      	beq.n	8013672 <LinkedListAdd+0x16>
 801366c:	683b      	ldr	r3, [r7, #0]
 801366e:	2b00      	cmp	r3, #0
 8013670:	d101      	bne.n	8013676 <LinkedListAdd+0x1a>
    {
        return false;
 8013672:	2300      	movs	r3, #0
 8013674:	e015      	b.n	80136a2 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	2b00      	cmp	r3, #0
 801367c:	d102      	bne.n	8013684 <LinkedListAdd+0x28>
    {
        list->First = element;
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	683a      	ldr	r2, [r7, #0]
 8013682:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	685b      	ldr	r3, [r3, #4]
 8013688:	2b00      	cmp	r3, #0
 801368a:	d003      	beq.n	8013694 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	685b      	ldr	r3, [r3, #4]
 8013690:	683a      	ldr	r2, [r7, #0]
 8013692:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8013694:	683b      	ldr	r3, [r7, #0]
 8013696:	2200      	movs	r2, #0
 8013698:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	683a      	ldr	r2, [r7, #0]
 801369e:	605a      	str	r2, [r3, #4]

    return true;
 80136a0:	2301      	movs	r3, #1
}
 80136a2:	4618      	mov	r0, r3
 80136a4:	370c      	adds	r7, #12
 80136a6:	46bd      	mov	sp, r7
 80136a8:	bc80      	pop	{r7}
 80136aa:	4770      	bx	lr

080136ac <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 80136ac:	b480      	push	{r7}
 80136ae:	b085      	sub	sp, #20
 80136b0:	af00      	add	r7, sp, #0
 80136b2:	6078      	str	r0, [r7, #4]
 80136b4:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d002      	beq.n	80136c2 <LinkedListGetPrevious+0x16>
 80136bc:	683b      	ldr	r3, [r7, #0]
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d101      	bne.n	80136c6 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 80136c2:	2300      	movs	r3, #0
 80136c4:	e016      	b.n	80136f4 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 80136cc:	683a      	ldr	r2, [r7, #0]
 80136ce:	68fb      	ldr	r3, [r7, #12]
 80136d0:	429a      	cmp	r2, r3
 80136d2:	d00c      	beq.n	80136ee <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 80136d4:	e002      	b.n	80136dc <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	681b      	ldr	r3, [r3, #0]
 80136da:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d007      	beq.n	80136f2 <LinkedListGetPrevious+0x46>
 80136e2:	68fb      	ldr	r3, [r7, #12]
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	683a      	ldr	r2, [r7, #0]
 80136e8:	429a      	cmp	r2, r3
 80136ea:	d1f4      	bne.n	80136d6 <LinkedListGetPrevious+0x2a>
 80136ec:	e001      	b.n	80136f2 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 80136ee:	2300      	movs	r3, #0
 80136f0:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 80136f2:	68fb      	ldr	r3, [r7, #12]
}
 80136f4:	4618      	mov	r0, r3
 80136f6:	3714      	adds	r7, #20
 80136f8:	46bd      	mov	sp, r7
 80136fa:	bc80      	pop	{r7}
 80136fc:	4770      	bx	lr

080136fe <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 80136fe:	b580      	push	{r7, lr}
 8013700:	b084      	sub	sp, #16
 8013702:	af00      	add	r7, sp, #0
 8013704:	6078      	str	r0, [r7, #4]
 8013706:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	2b00      	cmp	r3, #0
 801370c:	d002      	beq.n	8013714 <LinkedListRemove+0x16>
 801370e:	683b      	ldr	r3, [r7, #0]
 8013710:	2b00      	cmp	r3, #0
 8013712:	d101      	bne.n	8013718 <LinkedListRemove+0x1a>
    {
        return false;
 8013714:	2300      	movs	r3, #0
 8013716:	e020      	b.n	801375a <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8013718:	6839      	ldr	r1, [r7, #0]
 801371a:	6878      	ldr	r0, [r7, #4]
 801371c:	f7ff ffc6 	bl	80136ac <LinkedListGetPrevious>
 8013720:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	681b      	ldr	r3, [r3, #0]
 8013726:	683a      	ldr	r2, [r7, #0]
 8013728:	429a      	cmp	r2, r3
 801372a:	d103      	bne.n	8013734 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 801372c:	683b      	ldr	r3, [r7, #0]
 801372e:	681a      	ldr	r2, [r3, #0]
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	685b      	ldr	r3, [r3, #4]
 8013738:	683a      	ldr	r2, [r7, #0]
 801373a:	429a      	cmp	r2, r3
 801373c:	d102      	bne.n	8013744 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	68fa      	ldr	r2, [r7, #12]
 8013742:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8013744:	68fb      	ldr	r3, [r7, #12]
 8013746:	2b00      	cmp	r3, #0
 8013748:	d003      	beq.n	8013752 <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 801374a:	683b      	ldr	r3, [r7, #0]
 801374c:	681a      	ldr	r2, [r3, #0]
 801374e:	68fb      	ldr	r3, [r7, #12]
 8013750:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8013752:	683b      	ldr	r3, [r7, #0]
 8013754:	2200      	movs	r2, #0
 8013756:	601a      	str	r2, [r3, #0]

    return true;
 8013758:	2301      	movs	r3, #1
}
 801375a:	4618      	mov	r0, r3
 801375c:	3710      	adds	r7, #16
 801375e:	46bd      	mov	sp, r7
 8013760:	bd80      	pop	{r7, pc}
	...

08013764 <IsSticky>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8013764:	b480      	push	{r7}
 8013766:	b083      	sub	sp, #12
 8013768:	af00      	add	r7, sp, #0
 801376a:	4603      	mov	r3, r0
 801376c:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 801376e:	79fb      	ldrb	r3, [r7, #7]
 8013770:	2b11      	cmp	r3, #17
 8013772:	bf8c      	ite	hi
 8013774:	2201      	movhi	r2, #1
 8013776:	2200      	movls	r2, #0
 8013778:	b2d2      	uxtb	r2, r2
 801377a:	2a00      	cmp	r2, #0
 801377c:	d10d      	bne.n	801379a <IsSticky+0x36>
 801377e:	4a0a      	ldr	r2, [pc, #40]	; (80137a8 <IsSticky+0x44>)
 8013780:	fa22 f303 	lsr.w	r3, r2, r3
 8013784:	f003 0301 	and.w	r3, r3, #1
 8013788:	2b00      	cmp	r3, #0
 801378a:	bf14      	ite	ne
 801378c:	2301      	movne	r3, #1
 801378e:	2300      	moveq	r3, #0
 8013790:	b2db      	uxtb	r3, r3
 8013792:	2b00      	cmp	r3, #0
 8013794:	d001      	beq.n	801379a <IsSticky+0x36>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 8013796:	2301      	movs	r3, #1
 8013798:	e000      	b.n	801379c <IsSticky+0x38>
        default:
            return false;
 801379a:	2300      	movs	r3, #0
    }
}
 801379c:	4618      	mov	r0, r3
 801379e:	370c      	adds	r7, #12
 80137a0:	46bd      	mov	sp, r7
 80137a2:	bc80      	pop	{r7}
 80137a4:	4770      	bx	lr
 80137a6:	bf00      	nop
 80137a8:	00020720 	.word	0x00020720

080137ac <IsConfirmationRequired>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsConfirmationRequired( uint8_t cid )
{
 80137ac:	b480      	push	{r7}
 80137ae:	b083      	sub	sp, #12
 80137b0:	af00      	add	r7, sp, #0
 80137b2:	4603      	mov	r3, r0
 80137b4:	71fb      	strb	r3, [r7, #7]
        case MOTE_MAC_REKEY_IND:
        case MOTE_MAC_DEVICE_MODE_IND:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
 80137b6:	2300      	movs	r3, #0
    }
}
 80137b8:	4618      	mov	r0, r3
 80137ba:	370c      	adds	r7, #12
 80137bc:	46bd      	mov	sp, r7
 80137be:	bc80      	pop	{r7}
 80137c0:	4770      	bx	lr
	...

080137c4 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 80137c4:	b580      	push	{r7, lr}
 80137c6:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 80137c8:	f44f 7203 	mov.w	r2, #524	; 0x20c
 80137cc:	2100      	movs	r1, #0
 80137ce:	4804      	ldr	r0, [pc, #16]	; (80137e0 <LoRaMacCommandsInit+0x1c>)
 80137d0:	f005 fbf6 	bl	8018fc0 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 80137d4:	4802      	ldr	r0, [pc, #8]	; (80137e0 <LoRaMacCommandsInit+0x1c>)
 80137d6:	f7ff ff2c 	bl	8013632 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 80137da:	2300      	movs	r3, #0
}
 80137dc:	4618      	mov	r0, r3
 80137de:	bd80      	pop	{r7, pc}
 80137e0:	2000189c 	.word	0x2000189c

080137e4 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 80137e4:	b580      	push	{r7, lr}
 80137e6:	b086      	sub	sp, #24
 80137e8:	af00      	add	r7, sp, #0
 80137ea:	4603      	mov	r3, r0
 80137ec:	60b9      	str	r1, [r7, #8]
 80137ee:	607a      	str	r2, [r7, #4]
 80137f0:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 80137f2:	68bb      	ldr	r3, [r7, #8]
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d101      	bne.n	80137fc <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80137f8:	2301      	movs	r3, #1
 80137fa:	e03b      	b.n	8013874 <LoRaMacCommandsAddCmd+0x90>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 80137fc:	f7ff fede 	bl	80135bc <MallocNewMacCommandSlot>
 8013800:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 8013802:	697b      	ldr	r3, [r7, #20]
 8013804:	2b00      	cmp	r3, #0
 8013806:	d101      	bne.n	801380c <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8013808:	2302      	movs	r3, #2
 801380a:	e033      	b.n	8013874 <LoRaMacCommandsAddCmd+0x90>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 801380c:	6979      	ldr	r1, [r7, #20]
 801380e:	481b      	ldr	r0, [pc, #108]	; (801387c <LoRaMacCommandsAddCmd+0x98>)
 8013810:	f7ff ff24 	bl	801365c <LinkedListAdd>
 8013814:	4603      	mov	r3, r0
 8013816:	f083 0301 	eor.w	r3, r3, #1
 801381a:	b2db      	uxtb	r3, r3
 801381c:	2b00      	cmp	r3, #0
 801381e:	d001      	beq.n	8013824 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8013820:	2305      	movs	r3, #5
 8013822:	e027      	b.n	8013874 <LoRaMacCommandsAddCmd+0x90>
    }

    // Set Values
    newCmd->CID = cid;
 8013824:	697b      	ldr	r3, [r7, #20]
 8013826:	7bfa      	ldrb	r2, [r7, #15]
 8013828:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 801382a:	697b      	ldr	r3, [r7, #20]
 801382c:	687a      	ldr	r2, [r7, #4]
 801382e:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8013830:	697b      	ldr	r3, [r7, #20]
 8013832:	3305      	adds	r3, #5
 8013834:	687a      	ldr	r2, [r7, #4]
 8013836:	b292      	uxth	r2, r2
 8013838:	68b9      	ldr	r1, [r7, #8]
 801383a:	4618      	mov	r0, r3
 801383c:	f005 fb85 	bl	8018f4a <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8013840:	7bfb      	ldrb	r3, [r7, #15]
 8013842:	4618      	mov	r0, r3
 8013844:	f7ff ff8e 	bl	8013764 <IsSticky>
 8013848:	4603      	mov	r3, r0
 801384a:	461a      	mov	r2, r3
 801384c:	697b      	ldr	r3, [r7, #20]
 801384e:	731a      	strb	r2, [r3, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 8013850:	7bfb      	ldrb	r3, [r7, #15]
 8013852:	4618      	mov	r0, r3
 8013854:	f7ff ffaa 	bl	80137ac <IsConfirmationRequired>
 8013858:	4603      	mov	r3, r0
 801385a:	461a      	mov	r2, r3
 801385c:	697b      	ldr	r3, [r7, #20]
 801385e:	735a      	strb	r2, [r3, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8013860:	4b06      	ldr	r3, [pc, #24]	; (801387c <LoRaMacCommandsAddCmd+0x98>)
 8013862:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	4413      	add	r3, r2
 801386a:	3301      	adds	r3, #1
 801386c:	4a03      	ldr	r2, [pc, #12]	; (801387c <LoRaMacCommandsAddCmd+0x98>)
 801386e:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 8013872:	2300      	movs	r3, #0
}
 8013874:	4618      	mov	r0, r3
 8013876:	3718      	adds	r7, #24
 8013878:	46bd      	mov	sp, r7
 801387a:	bd80      	pop	{r7, pc}
 801387c:	2000189c 	.word	0x2000189c

08013880 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8013880:	b580      	push	{r7, lr}
 8013882:	b082      	sub	sp, #8
 8013884:	af00      	add	r7, sp, #0
 8013886:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	2b00      	cmp	r3, #0
 801388c:	d101      	bne.n	8013892 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801388e:	2301      	movs	r3, #1
 8013890:	e021      	b.n	80138d6 <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8013892:	6879      	ldr	r1, [r7, #4]
 8013894:	4812      	ldr	r0, [pc, #72]	; (80138e0 <LoRaMacCommandsRemoveCmd+0x60>)
 8013896:	f7ff ff32 	bl	80136fe <LinkedListRemove>
 801389a:	4603      	mov	r3, r0
 801389c:	f083 0301 	eor.w	r3, r3, #1
 80138a0:	b2db      	uxtb	r3, r3
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d001      	beq.n	80138aa <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 80138a6:	2303      	movs	r3, #3
 80138a8:	e015      	b.n	80138d6 <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 80138aa:	4b0d      	ldr	r3, [pc, #52]	; (80138e0 <LoRaMacCommandsRemoveCmd+0x60>)
 80138ac:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	689b      	ldr	r3, [r3, #8]
 80138b4:	1ad3      	subs	r3, r2, r3
 80138b6:	3b01      	subs	r3, #1
 80138b8:	4a09      	ldr	r2, [pc, #36]	; (80138e0 <LoRaMacCommandsRemoveCmd+0x60>)
 80138ba:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 80138be:	6878      	ldr	r0, [r7, #4]
 80138c0:	f7ff fea4 	bl	801360c <FreeMacCommandSlot>
 80138c4:	4603      	mov	r3, r0
 80138c6:	f083 0301 	eor.w	r3, r3, #1
 80138ca:	b2db      	uxtb	r3, r3
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d001      	beq.n	80138d4 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 80138d0:	2305      	movs	r3, #5
 80138d2:	e000      	b.n	80138d6 <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80138d4:	2300      	movs	r3, #0
}
 80138d6:	4618      	mov	r0, r3
 80138d8:	3708      	adds	r7, #8
 80138da:	46bd      	mov	sp, r7
 80138dc:	bd80      	pop	{r7, pc}
 80138de:	bf00      	nop
 80138e0:	2000189c 	.word	0x2000189c

080138e4 <LoRaMacCommandsGetCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
 80138e4:	b480      	push	{r7}
 80138e6:	b085      	sub	sp, #20
 80138e8:	af00      	add	r7, sp, #0
 80138ea:	4603      	mov	r3, r0
 80138ec:	6039      	str	r1, [r7, #0]
 80138ee:	71fb      	strb	r3, [r7, #7]
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80138f0:	4b0e      	ldr	r3, [pc, #56]	; (801392c <LoRaMacCommandsGetCmd+0x48>)
 80138f2:	681b      	ldr	r3, [r3, #0]
 80138f4:	60fb      	str	r3, [r7, #12]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 80138f6:	e002      	b.n	80138fe <LoRaMacCommandsGetCmd+0x1a>
    {
        curElement = curElement->Next;
 80138f8:	68fb      	ldr	r3, [r7, #12]
 80138fa:	681b      	ldr	r3, [r3, #0]
 80138fc:	60fb      	str	r3, [r7, #12]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 80138fe:	68fb      	ldr	r3, [r7, #12]
 8013900:	2b00      	cmp	r3, #0
 8013902:	d004      	beq.n	801390e <LoRaMacCommandsGetCmd+0x2a>
 8013904:	68fb      	ldr	r3, [r7, #12]
 8013906:	791b      	ldrb	r3, [r3, #4]
 8013908:	79fa      	ldrb	r2, [r7, #7]
 801390a:	429a      	cmp	r2, r3
 801390c:	d1f4      	bne.n	80138f8 <LoRaMacCommandsGetCmd+0x14>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 801390e:	683b      	ldr	r3, [r7, #0]
 8013910:	68fa      	ldr	r2, [r7, #12]
 8013912:	601a      	str	r2, [r3, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 8013914:	68fb      	ldr	r3, [r7, #12]
 8013916:	2b00      	cmp	r3, #0
 8013918:	d101      	bne.n	801391e <LoRaMacCommandsGetCmd+0x3a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 801391a:	2303      	movs	r3, #3
 801391c:	e000      	b.n	8013920 <LoRaMacCommandsGetCmd+0x3c>
    }
    return LORAMAC_COMMANDS_SUCCESS;
 801391e:	2300      	movs	r3, #0
}
 8013920:	4618      	mov	r0, r3
 8013922:	3714      	adds	r7, #20
 8013924:	46bd      	mov	sp, r7
 8013926:	bc80      	pop	{r7}
 8013928:	4770      	bx	lr
 801392a:	bf00      	nop
 801392c:	2000189c 	.word	0x2000189c

08013930 <LoRaMacCommandsRemoveNoneStickyCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8013930:	b580      	push	{r7, lr}
 8013932:	b082      	sub	sp, #8
 8013934:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8013936:	4b0f      	ldr	r3, [pc, #60]	; (8013974 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8013938:	681b      	ldr	r3, [r3, #0]
 801393a:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 801393c:	e012      	b.n	8013964 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	7b1b      	ldrb	r3, [r3, #12]
 8013942:	f083 0301 	eor.w	r3, r3, #1
 8013946:	b2db      	uxtb	r3, r3
 8013948:	2b00      	cmp	r3, #0
 801394a:	d008      	beq.n	801395e <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	681b      	ldr	r3, [r3, #0]
 8013950:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8013952:	6878      	ldr	r0, [r7, #4]
 8013954:	f7ff ff94 	bl	8013880 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8013958:	683b      	ldr	r3, [r7, #0]
 801395a:	607b      	str	r3, [r7, #4]
 801395c:	e002      	b.n	8013964 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	681b      	ldr	r3, [r3, #0]
 8013962:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	2b00      	cmp	r3, #0
 8013968:	d1e9      	bne.n	801393e <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 801396a:	2300      	movs	r3, #0
}
 801396c:	4618      	mov	r0, r3
 801396e:	3708      	adds	r7, #8
 8013970:	46bd      	mov	sp, r7
 8013972:	bd80      	pop	{r7, pc}
 8013974:	2000189c 	.word	0x2000189c

08013978 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8013978:	b580      	push	{r7, lr}
 801397a:	b082      	sub	sp, #8
 801397c:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 801397e:	4b13      	ldr	r3, [pc, #76]	; (80139cc <LoRaMacCommandsRemoveStickyAnsCmds+0x54>)
 8013980:	681b      	ldr	r3, [r3, #0]
 8013982:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8013984:	e01a      	b.n	80139bc <LoRaMacCommandsRemoveStickyAnsCmds+0x44>
    {
        nexElement = curElement->Next;
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	681b      	ldr	r3, [r3, #0]
 801398a:	603b      	str	r3, [r7, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	791b      	ldrb	r3, [r3, #4]
 8013990:	4618      	mov	r0, r3
 8013992:	f7ff fee7 	bl	8013764 <IsSticky>
 8013996:	4603      	mov	r3, r0
 8013998:	2b00      	cmp	r3, #0
 801399a:	d00d      	beq.n	80139b8 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	791b      	ldrb	r3, [r3, #4]
 80139a0:	4618      	mov	r0, r3
 80139a2:	f7ff ff03 	bl	80137ac <IsConfirmationRequired>
 80139a6:	4603      	mov	r3, r0
 80139a8:	f083 0301 	eor.w	r3, r3, #1
 80139ac:	b2db      	uxtb	r3, r3
        if( ( IsSticky( curElement->CID ) == true ) &&
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d002      	beq.n	80139b8 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 80139b2:	6878      	ldr	r0, [r7, #4]
 80139b4:	f7ff ff64 	bl	8013880 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 80139b8:	683b      	ldr	r3, [r7, #0]
 80139ba:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d1e1      	bne.n	8013986 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80139c2:	2300      	movs	r3, #0
}
 80139c4:	4618      	mov	r0, r3
 80139c6:	3708      	adds	r7, #8
 80139c8:	46bd      	mov	sp, r7
 80139ca:	bd80      	pop	{r7, pc}
 80139cc:	2000189c 	.word	0x2000189c

080139d0 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 80139d0:	b480      	push	{r7}
 80139d2:	b083      	sub	sp, #12
 80139d4:	af00      	add	r7, sp, #0
 80139d6:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d101      	bne.n	80139e2 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80139de:	2301      	movs	r3, #1
 80139e0:	e005      	b.n	80139ee <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 80139e2:	4b05      	ldr	r3, [pc, #20]	; (80139f8 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 80139e4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 80139ec:	2300      	movs	r3, #0
}
 80139ee:	4618      	mov	r0, r3
 80139f0:	370c      	adds	r7, #12
 80139f2:	46bd      	mov	sp, r7
 80139f4:	bc80      	pop	{r7}
 80139f6:	4770      	bx	lr
 80139f8:	2000189c 	.word	0x2000189c

080139fc <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 80139fc:	b580      	push	{r7, lr}
 80139fe:	b088      	sub	sp, #32
 8013a00:	af00      	add	r7, sp, #0
 8013a02:	60f8      	str	r0, [r7, #12]
 8013a04:	60b9      	str	r1, [r7, #8]
 8013a06:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8013a08:	4b25      	ldr	r3, [pc, #148]	; (8013aa0 <LoRaMacCommandsSerializeCmds+0xa4>)
 8013a0a:	681b      	ldr	r3, [r3, #0]
 8013a0c:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8013a0e:	2300      	movs	r3, #0
 8013a10:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d002      	beq.n	8013a1e <LoRaMacCommandsSerializeCmds+0x22>
 8013a18:	68bb      	ldr	r3, [r7, #8]
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d126      	bne.n	8013a6c <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8013a1e:	2301      	movs	r3, #1
 8013a20:	e039      	b.n	8013a96 <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8013a22:	7efb      	ldrb	r3, [r7, #27]
 8013a24:	68fa      	ldr	r2, [r7, #12]
 8013a26:	1ad2      	subs	r2, r2, r3
 8013a28:	69fb      	ldr	r3, [r7, #28]
 8013a2a:	689b      	ldr	r3, [r3, #8]
 8013a2c:	3301      	adds	r3, #1
 8013a2e:	429a      	cmp	r2, r3
 8013a30:	d320      	bcc.n	8013a74 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 8013a32:	7efb      	ldrb	r3, [r7, #27]
 8013a34:	1c5a      	adds	r2, r3, #1
 8013a36:	76fa      	strb	r2, [r7, #27]
 8013a38:	461a      	mov	r2, r3
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	4413      	add	r3, r2
 8013a3e:	69fa      	ldr	r2, [r7, #28]
 8013a40:	7912      	ldrb	r2, [r2, #4]
 8013a42:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8013a44:	7efb      	ldrb	r3, [r7, #27]
 8013a46:	687a      	ldr	r2, [r7, #4]
 8013a48:	18d0      	adds	r0, r2, r3
 8013a4a:	69fb      	ldr	r3, [r7, #28]
 8013a4c:	1d59      	adds	r1, r3, #5
 8013a4e:	69fb      	ldr	r3, [r7, #28]
 8013a50:	689b      	ldr	r3, [r3, #8]
 8013a52:	b29b      	uxth	r3, r3
 8013a54:	461a      	mov	r2, r3
 8013a56:	f005 fa78 	bl	8018f4a <memcpy1>
            itr += curElement->PayloadSize;
 8013a5a:	69fb      	ldr	r3, [r7, #28]
 8013a5c:	689b      	ldr	r3, [r3, #8]
 8013a5e:	b2da      	uxtb	r2, r3
 8013a60:	7efb      	ldrb	r3, [r7, #27]
 8013a62:	4413      	add	r3, r2
 8013a64:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8013a66:	69fb      	ldr	r3, [r7, #28]
 8013a68:	681b      	ldr	r3, [r3, #0]
 8013a6a:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8013a6c:	69fb      	ldr	r3, [r7, #28]
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d1d7      	bne.n	8013a22 <LoRaMacCommandsSerializeCmds+0x26>
 8013a72:	e009      	b.n	8013a88 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8013a74:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8013a76:	e007      	b.n	8013a88 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8013a78:	69fb      	ldr	r3, [r7, #28]
 8013a7a:	681b      	ldr	r3, [r3, #0]
 8013a7c:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8013a7e:	69f8      	ldr	r0, [r7, #28]
 8013a80:	f7ff fefe 	bl	8013880 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8013a84:	697b      	ldr	r3, [r7, #20]
 8013a86:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8013a88:	69fb      	ldr	r3, [r7, #28]
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d1f4      	bne.n	8013a78 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8013a8e:	68b8      	ldr	r0, [r7, #8]
 8013a90:	f7ff ff9e 	bl	80139d0 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8013a94:	2300      	movs	r3, #0
}
 8013a96:	4618      	mov	r0, r3
 8013a98:	3720      	adds	r7, #32
 8013a9a:	46bd      	mov	sp, r7
 8013a9c:	bd80      	pop	{r7, pc}
 8013a9e:	bf00      	nop
 8013aa0:	2000189c 	.word	0x2000189c

08013aa4 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8013aa4:	b480      	push	{r7}
 8013aa6:	b085      	sub	sp, #20
 8013aa8:	af00      	add	r7, sp, #0
 8013aaa:	4603      	mov	r3, r0
 8013aac:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 8013aae:	2300      	movs	r3, #0
 8013ab0:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8013ab2:	79fb      	ldrb	r3, [r7, #7]
 8013ab4:	3b02      	subs	r3, #2
 8013ab6:	2b11      	cmp	r3, #17
 8013ab8:	d850      	bhi.n	8013b5c <LoRaMacCommandsGetCmdSize+0xb8>
 8013aba:	a201      	add	r2, pc, #4	; (adr r2, 8013ac0 <LoRaMacCommandsGetCmdSize+0x1c>)
 8013abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ac0:	08013b09 	.word	0x08013b09
 8013ac4:	08013b0f 	.word	0x08013b0f
 8013ac8:	08013b15 	.word	0x08013b15
 8013acc:	08013b1b 	.word	0x08013b1b
 8013ad0:	08013b21 	.word	0x08013b21
 8013ad4:	08013b27 	.word	0x08013b27
 8013ad8:	08013b2d 	.word	0x08013b2d
 8013adc:	08013b33 	.word	0x08013b33
 8013ae0:	08013b39 	.word	0x08013b39
 8013ae4:	08013b5d 	.word	0x08013b5d
 8013ae8:	08013b5d 	.word	0x08013b5d
 8013aec:	08013b3f 	.word	0x08013b3f
 8013af0:	08013b5d 	.word	0x08013b5d
 8013af4:	08013b5d 	.word	0x08013b5d
 8013af8:	08013b45 	.word	0x08013b45
 8013afc:	08013b4b 	.word	0x08013b4b
 8013b00:	08013b51 	.word	0x08013b51
 8013b04:	08013b57 	.word	0x08013b57
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8013b08:	2303      	movs	r3, #3
 8013b0a:	73fb      	strb	r3, [r7, #15]
            break;
 8013b0c:	e027      	b.n	8013b5e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8013b0e:	2305      	movs	r3, #5
 8013b10:	73fb      	strb	r3, [r7, #15]
            break;
 8013b12:	e024      	b.n	8013b5e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8013b14:	2302      	movs	r3, #2
 8013b16:	73fb      	strb	r3, [r7, #15]
            break;
 8013b18:	e021      	b.n	8013b5e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 8013b1a:	2305      	movs	r3, #5
 8013b1c:	73fb      	strb	r3, [r7, #15]
            break;
 8013b1e:	e01e      	b.n	8013b5e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8013b20:	2301      	movs	r3, #1
 8013b22:	73fb      	strb	r3, [r7, #15]
            break;
 8013b24:	e01b      	b.n	8013b5e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8013b26:	2306      	movs	r3, #6
 8013b28:	73fb      	strb	r3, [r7, #15]
            break;
 8013b2a:	e018      	b.n	8013b5e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8013b2c:	2302      	movs	r3, #2
 8013b2e:	73fb      	strb	r3, [r7, #15]
            break;
 8013b30:	e015      	b.n	8013b5e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8013b32:	2302      	movs	r3, #2
 8013b34:	73fb      	strb	r3, [r7, #15]
            break;
 8013b36:	e012      	b.n	8013b5e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8013b38:	2305      	movs	r3, #5
 8013b3a:	73fb      	strb	r3, [r7, #15]
            break;
 8013b3c:	e00f      	b.n	8013b5e <LoRaMacCommandsGetCmdSize+0xba>
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8013b3e:	2306      	movs	r3, #6
 8013b40:	73fb      	strb	r3, [r7, #15]
            break;
 8013b42:	e00c      	b.n	8013b5e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8013b44:	2301      	movs	r3, #1
 8013b46:	73fb      	strb	r3, [r7, #15]
            break;
 8013b48:	e009      	b.n	8013b5e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8013b4a:	2305      	movs	r3, #5
 8013b4c:	73fb      	strb	r3, [r7, #15]
            break;
 8013b4e:	e006      	b.n	8013b5e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8013b50:	2304      	movs	r3, #4
 8013b52:	73fb      	strb	r3, [r7, #15]
            break;
 8013b54:	e003      	b.n	8013b5e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8013b56:	2304      	movs	r3, #4
 8013b58:	73fb      	strb	r3, [r7, #15]
            break;
 8013b5a:	e000      	b.n	8013b5e <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8013b5c:	bf00      	nop
        }
    }
    return cidSize;
 8013b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013b60:	4618      	mov	r0, r3
 8013b62:	3714      	adds	r7, #20
 8013b64:	46bd      	mov	sp, r7
 8013b66:	bc80      	pop	{r7}
 8013b68:	4770      	bx	lr
 8013b6a:	bf00      	nop

08013b6c <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8013b6c:	b480      	push	{r7}
 8013b6e:	b083      	sub	sp, #12
 8013b70:	af00      	add	r7, sp, #0
 8013b72:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	4a07      	ldr	r2, [pc, #28]	; (8013b94 <IncreaseBufferPointer+0x28>)
 8013b78:	4293      	cmp	r3, r2
 8013b7a:	d102      	bne.n	8013b82 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8013b7c:	4b06      	ldr	r3, [pc, #24]	; (8013b98 <IncreaseBufferPointer+0x2c>)
 8013b7e:	607b      	str	r3, [r7, #4]
 8013b80:	e002      	b.n	8013b88 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	3304      	adds	r3, #4
 8013b86:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8013b88:	687b      	ldr	r3, [r7, #4]
}
 8013b8a:	4618      	mov	r0, r3
 8013b8c:	370c      	adds	r7, #12
 8013b8e:	46bd      	mov	sp, r7
 8013b90:	bc80      	pop	{r7}
 8013b92:	4770      	bx	lr
 8013b94:	20001ac4 	.word	0x20001ac4
 8013b98:	20001ab4 	.word	0x20001ab4

08013b9c <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8013b9c:	b480      	push	{r7}
 8013b9e:	b083      	sub	sp, #12
 8013ba0:	af00      	add	r7, sp, #0
 8013ba2:	4603      	mov	r3, r0
 8013ba4:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8013ba6:	79fb      	ldrb	r3, [r7, #7]
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d101      	bne.n	8013bb0 <IsListEmpty+0x14>
    {
        return true;
 8013bac:	2301      	movs	r3, #1
 8013bae:	e000      	b.n	8013bb2 <IsListEmpty+0x16>
    }
    return false;
 8013bb0:	2300      	movs	r3, #0
}
 8013bb2:	4618      	mov	r0, r3
 8013bb4:	370c      	adds	r7, #12
 8013bb6:	46bd      	mov	sp, r7
 8013bb8:	bc80      	pop	{r7}
 8013bba:	4770      	bx	lr

08013bbc <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8013bbc:	b480      	push	{r7}
 8013bbe:	b083      	sub	sp, #12
 8013bc0:	af00      	add	r7, sp, #0
 8013bc2:	4603      	mov	r3, r0
 8013bc4:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8013bc6:	79fb      	ldrb	r3, [r7, #7]
 8013bc8:	2b04      	cmp	r3, #4
 8013bca:	d901      	bls.n	8013bd0 <IsListFull+0x14>
    {
        return true;
 8013bcc:	2301      	movs	r3, #1
 8013bce:	e000      	b.n	8013bd2 <IsListFull+0x16>
    }
    return false;
 8013bd0:	2300      	movs	r3, #0
}
 8013bd2:	4618      	mov	r0, r3
 8013bd4:	370c      	adds	r7, #12
 8013bd6:	46bd      	mov	sp, r7
 8013bd8:	bc80      	pop	{r7}
 8013bda:	4770      	bx	lr

08013bdc <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8013bdc:	b580      	push	{r7, lr}
 8013bde:	b086      	sub	sp, #24
 8013be0:	af00      	add	r7, sp, #0
 8013be2:	4603      	mov	r3, r0
 8013be4:	60b9      	str	r1, [r7, #8]
 8013be6:	607a      	str	r2, [r7, #4]
 8013be8:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 8013bea:	68bb      	ldr	r3, [r7, #8]
 8013bec:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013bee:	4b13      	ldr	r3, [pc, #76]	; (8013c3c <GetElement+0x60>)
 8013bf0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013bf4:	4618      	mov	r0, r3
 8013bf6:	f7ff ffd1 	bl	8013b9c <IsListEmpty>
 8013bfa:	4603      	mov	r3, r0
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d001      	beq.n	8013c04 <GetElement+0x28>
    {
        return NULL;
 8013c00:	2300      	movs	r3, #0
 8013c02:	e017      	b.n	8013c34 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8013c04:	2300      	movs	r3, #0
 8013c06:	74fb      	strb	r3, [r7, #19]
 8013c08:	e00d      	b.n	8013c26 <GetElement+0x4a>
    {
        if( element->Request == request )
 8013c0a:	697b      	ldr	r3, [r7, #20]
 8013c0c:	781b      	ldrb	r3, [r3, #0]
 8013c0e:	7bfa      	ldrb	r2, [r7, #15]
 8013c10:	429a      	cmp	r2, r3
 8013c12:	d101      	bne.n	8013c18 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8013c14:	697b      	ldr	r3, [r7, #20]
 8013c16:	e00d      	b.n	8013c34 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8013c18:	6978      	ldr	r0, [r7, #20]
 8013c1a:	f7ff ffa7 	bl	8013b6c <IncreaseBufferPointer>
 8013c1e:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8013c20:	7cfb      	ldrb	r3, [r7, #19]
 8013c22:	3301      	adds	r3, #1
 8013c24:	74fb      	strb	r3, [r7, #19]
 8013c26:	4b05      	ldr	r3, [pc, #20]	; (8013c3c <GetElement+0x60>)
 8013c28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013c2c:	7cfa      	ldrb	r2, [r7, #19]
 8013c2e:	429a      	cmp	r2, r3
 8013c30:	d3eb      	bcc.n	8013c0a <GetElement+0x2e>
    }

    return NULL;
 8013c32:	2300      	movs	r3, #0
}
 8013c34:	4618      	mov	r0, r3
 8013c36:	3718      	adds	r7, #24
 8013c38:	46bd      	mov	sp, r7
 8013c3a:	bd80      	pop	{r7, pc}
 8013c3c:	20001aa8 	.word	0x20001aa8

08013c40 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8013c40:	b580      	push	{r7, lr}
 8013c42:	b082      	sub	sp, #8
 8013c44:	af00      	add	r7, sp, #0
 8013c46:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8013c48:	4a0c      	ldr	r2, [pc, #48]	; (8013c7c <LoRaMacConfirmQueueInit+0x3c>)
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 8013c4e:	4b0b      	ldr	r3, [pc, #44]	; (8013c7c <LoRaMacConfirmQueueInit+0x3c>)
 8013c50:	2200      	movs	r2, #0
 8013c52:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8013c56:	4b09      	ldr	r3, [pc, #36]	; (8013c7c <LoRaMacConfirmQueueInit+0x3c>)
 8013c58:	4a09      	ldr	r2, [pc, #36]	; (8013c80 <LoRaMacConfirmQueueInit+0x40>)
 8013c5a:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8013c5c:	4b07      	ldr	r3, [pc, #28]	; (8013c7c <LoRaMacConfirmQueueInit+0x3c>)
 8013c5e:	4a08      	ldr	r2, [pc, #32]	; (8013c80 <LoRaMacConfirmQueueInit+0x40>)
 8013c60:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8013c62:	2214      	movs	r2, #20
 8013c64:	21ff      	movs	r1, #255	; 0xff
 8013c66:	4806      	ldr	r0, [pc, #24]	; (8013c80 <LoRaMacConfirmQueueInit+0x40>)
 8013c68:	f005 f9aa 	bl	8018fc0 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013c6c:	4b03      	ldr	r3, [pc, #12]	; (8013c7c <LoRaMacConfirmQueueInit+0x3c>)
 8013c6e:	2201      	movs	r2, #1
 8013c70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8013c74:	bf00      	nop
 8013c76:	3708      	adds	r7, #8
 8013c78:	46bd      	mov	sp, r7
 8013c7a:	bd80      	pop	{r7, pc}
 8013c7c:	20001aa8 	.word	0x20001aa8
 8013c80:	20001ab4 	.word	0x20001ab4

08013c84 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8013c84:	b580      	push	{r7, lr}
 8013c86:	b082      	sub	sp, #8
 8013c88:	af00      	add	r7, sp, #0
 8013c8a:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013c8c:	4b19      	ldr	r3, [pc, #100]	; (8013cf4 <LoRaMacConfirmQueueAdd+0x70>)
 8013c8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013c92:	4618      	mov	r0, r3
 8013c94:	f7ff ff92 	bl	8013bbc <IsListFull>
 8013c98:	4603      	mov	r3, r0
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d001      	beq.n	8013ca2 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 8013c9e:	2300      	movs	r3, #0
 8013ca0:	e024      	b.n	8013cec <LoRaMacConfirmQueueAdd+0x68>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8013ca2:	4b14      	ldr	r3, [pc, #80]	; (8013cf4 <LoRaMacConfirmQueueAdd+0x70>)
 8013ca4:	689b      	ldr	r3, [r3, #8]
 8013ca6:	687a      	ldr	r2, [r7, #4]
 8013ca8:	7812      	ldrb	r2, [r2, #0]
 8013caa:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8013cac:	4b11      	ldr	r3, [pc, #68]	; (8013cf4 <LoRaMacConfirmQueueAdd+0x70>)
 8013cae:	689b      	ldr	r3, [r3, #8]
 8013cb0:	687a      	ldr	r2, [r7, #4]
 8013cb2:	7852      	ldrb	r2, [r2, #1]
 8013cb4:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8013cb6:	4b0f      	ldr	r3, [pc, #60]	; (8013cf4 <LoRaMacConfirmQueueAdd+0x70>)
 8013cb8:	689b      	ldr	r3, [r3, #8]
 8013cba:	687a      	ldr	r2, [r7, #4]
 8013cbc:	78d2      	ldrb	r2, [r2, #3]
 8013cbe:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 8013cc0:	4b0c      	ldr	r3, [pc, #48]	; (8013cf4 <LoRaMacConfirmQueueAdd+0x70>)
 8013cc2:	689b      	ldr	r3, [r3, #8]
 8013cc4:	687a      	ldr	r2, [r7, #4]
 8013cc6:	7892      	ldrb	r2, [r2, #2]
 8013cc8:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8013cca:	4b0a      	ldr	r3, [pc, #40]	; (8013cf4 <LoRaMacConfirmQueueAdd+0x70>)
 8013ccc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013cd0:	3301      	adds	r3, #1
 8013cd2:	b2da      	uxtb	r2, r3
 8013cd4:	4b07      	ldr	r3, [pc, #28]	; (8013cf4 <LoRaMacConfirmQueueAdd+0x70>)
 8013cd6:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8013cda:	4b06      	ldr	r3, [pc, #24]	; (8013cf4 <LoRaMacConfirmQueueAdd+0x70>)
 8013cdc:	689b      	ldr	r3, [r3, #8]
 8013cde:	4618      	mov	r0, r3
 8013ce0:	f7ff ff44 	bl	8013b6c <IncreaseBufferPointer>
 8013ce4:	4603      	mov	r3, r0
 8013ce6:	4a03      	ldr	r2, [pc, #12]	; (8013cf4 <LoRaMacConfirmQueueAdd+0x70>)
 8013ce8:	6093      	str	r3, [r2, #8]

    return true;
 8013cea:	2301      	movs	r3, #1
}
 8013cec:	4618      	mov	r0, r3
 8013cee:	3708      	adds	r7, #8
 8013cf0:	46bd      	mov	sp, r7
 8013cf2:	bd80      	pop	{r7, pc}
 8013cf4:	20001aa8 	.word	0x20001aa8

08013cf8 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8013cf8:	b580      	push	{r7, lr}
 8013cfa:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013cfc:	4b0e      	ldr	r3, [pc, #56]	; (8013d38 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013cfe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013d02:	4618      	mov	r0, r3
 8013d04:	f7ff ff4a 	bl	8013b9c <IsListEmpty>
 8013d08:	4603      	mov	r3, r0
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d001      	beq.n	8013d12 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8013d0e:	2300      	movs	r3, #0
 8013d10:	e010      	b.n	8013d34 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8013d12:	4b09      	ldr	r3, [pc, #36]	; (8013d38 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013d14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013d18:	3b01      	subs	r3, #1
 8013d1a:	b2da      	uxtb	r2, r3
 8013d1c:	4b06      	ldr	r3, [pc, #24]	; (8013d38 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013d1e:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8013d22:	4b05      	ldr	r3, [pc, #20]	; (8013d38 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013d24:	685b      	ldr	r3, [r3, #4]
 8013d26:	4618      	mov	r0, r3
 8013d28:	f7ff ff20 	bl	8013b6c <IncreaseBufferPointer>
 8013d2c:	4603      	mov	r3, r0
 8013d2e:	4a02      	ldr	r2, [pc, #8]	; (8013d38 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013d30:	6053      	str	r3, [r2, #4]

    return true;
 8013d32:	2301      	movs	r3, #1
}
 8013d34:	4618      	mov	r0, r3
 8013d36:	bd80      	pop	{r7, pc}
 8013d38:	20001aa8 	.word	0x20001aa8

08013d3c <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8013d3c:	b580      	push	{r7, lr}
 8013d3e:	b084      	sub	sp, #16
 8013d40:	af00      	add	r7, sp, #0
 8013d42:	4603      	mov	r3, r0
 8013d44:	460a      	mov	r2, r1
 8013d46:	71fb      	strb	r3, [r7, #7]
 8013d48:	4613      	mov	r3, r2
 8013d4a:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8013d4c:	2300      	movs	r3, #0
 8013d4e:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8013d50:	4b10      	ldr	r3, [pc, #64]	; (8013d94 <LoRaMacConfirmQueueSetStatus+0x58>)
 8013d52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013d56:	4618      	mov	r0, r3
 8013d58:	f7ff ff20 	bl	8013b9c <IsListEmpty>
 8013d5c:	4603      	mov	r3, r0
 8013d5e:	f083 0301 	eor.w	r3, r3, #1
 8013d62:	b2db      	uxtb	r3, r3
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d011      	beq.n	8013d8c <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8013d68:	4b0a      	ldr	r3, [pc, #40]	; (8013d94 <LoRaMacConfirmQueueSetStatus+0x58>)
 8013d6a:	6859      	ldr	r1, [r3, #4]
 8013d6c:	4b09      	ldr	r3, [pc, #36]	; (8013d94 <LoRaMacConfirmQueueSetStatus+0x58>)
 8013d6e:	689a      	ldr	r2, [r3, #8]
 8013d70:	79bb      	ldrb	r3, [r7, #6]
 8013d72:	4618      	mov	r0, r3
 8013d74:	f7ff ff32 	bl	8013bdc <GetElement>
 8013d78:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8013d7a:	68fb      	ldr	r3, [r7, #12]
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d005      	beq.n	8013d8c <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8013d80:	68fb      	ldr	r3, [r7, #12]
 8013d82:	79fa      	ldrb	r2, [r7, #7]
 8013d84:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8013d86:	68fb      	ldr	r3, [r7, #12]
 8013d88:	2201      	movs	r2, #1
 8013d8a:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8013d8c:	bf00      	nop
 8013d8e:	3710      	adds	r7, #16
 8013d90:	46bd      	mov	sp, r7
 8013d92:	bd80      	pop	{r7, pc}
 8013d94:	20001aa8 	.word	0x20001aa8

08013d98 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8013d98:	b580      	push	{r7, lr}
 8013d9a:	b084      	sub	sp, #16
 8013d9c:	af00      	add	r7, sp, #0
 8013d9e:	4603      	mov	r3, r0
 8013da0:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8013da2:	2300      	movs	r3, #0
 8013da4:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8013da6:	4b10      	ldr	r3, [pc, #64]	; (8013de8 <LoRaMacConfirmQueueGetStatus+0x50>)
 8013da8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013dac:	4618      	mov	r0, r3
 8013dae:	f7ff fef5 	bl	8013b9c <IsListEmpty>
 8013db2:	4603      	mov	r3, r0
 8013db4:	f083 0301 	eor.w	r3, r3, #1
 8013db8:	b2db      	uxtb	r3, r3
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d00e      	beq.n	8013ddc <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8013dbe:	4b0a      	ldr	r3, [pc, #40]	; (8013de8 <LoRaMacConfirmQueueGetStatus+0x50>)
 8013dc0:	6859      	ldr	r1, [r3, #4]
 8013dc2:	4b09      	ldr	r3, [pc, #36]	; (8013de8 <LoRaMacConfirmQueueGetStatus+0x50>)
 8013dc4:	689a      	ldr	r2, [r3, #8]
 8013dc6:	79fb      	ldrb	r3, [r7, #7]
 8013dc8:	4618      	mov	r0, r3
 8013dca:	f7ff ff07 	bl	8013bdc <GetElement>
 8013dce:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8013dd0:	68fb      	ldr	r3, [r7, #12]
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d002      	beq.n	8013ddc <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8013dd6:	68fb      	ldr	r3, [r7, #12]
 8013dd8:	785b      	ldrb	r3, [r3, #1]
 8013dda:	e000      	b.n	8013dde <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013ddc:	2301      	movs	r3, #1
}
 8013dde:	4618      	mov	r0, r3
 8013de0:	3710      	adds	r7, #16
 8013de2:	46bd      	mov	sp, r7
 8013de4:	bd80      	pop	{r7, pc}
 8013de6:	bf00      	nop
 8013de8:	20001aa8 	.word	0x20001aa8

08013dec <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8013dec:	b580      	push	{r7, lr}
 8013dee:	b084      	sub	sp, #16
 8013df0:	af00      	add	r7, sp, #0
 8013df2:	4603      	mov	r3, r0
 8013df4:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8013df6:	4b16      	ldr	r3, [pc, #88]	; (8013e50 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013df8:	685b      	ldr	r3, [r3, #4]
 8013dfa:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8013dfc:	4a14      	ldr	r2, [pc, #80]	; (8013e50 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013dfe:	79fb      	ldrb	r3, [r7, #7]
 8013e00:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8013e04:	4b12      	ldr	r3, [pc, #72]	; (8013e50 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013e06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013e0a:	4618      	mov	r0, r3
 8013e0c:	f7ff fec6 	bl	8013b9c <IsListEmpty>
 8013e10:	4603      	mov	r3, r0
 8013e12:	f083 0301 	eor.w	r3, r3, #1
 8013e16:	b2db      	uxtb	r3, r3
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d015      	beq.n	8013e48 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8013e1c:	68fb      	ldr	r3, [r7, #12]
 8013e1e:	79fa      	ldrb	r2, [r7, #7]
 8013e20:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8013e22:	68fb      	ldr	r3, [r7, #12]
 8013e24:	78db      	ldrb	r3, [r3, #3]
 8013e26:	f083 0301 	eor.w	r3, r3, #1
 8013e2a:	b2db      	uxtb	r3, r3
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d002      	beq.n	8013e36 <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8013e30:	68fb      	ldr	r3, [r7, #12]
 8013e32:	2201      	movs	r2, #1
 8013e34:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8013e36:	68f8      	ldr	r0, [r7, #12]
 8013e38:	f7ff fe98 	bl	8013b6c <IncreaseBufferPointer>
 8013e3c:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8013e3e:	4b04      	ldr	r3, [pc, #16]	; (8013e50 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013e40:	689b      	ldr	r3, [r3, #8]
 8013e42:	68fa      	ldr	r2, [r7, #12]
 8013e44:	429a      	cmp	r2, r3
 8013e46:	d1e9      	bne.n	8013e1c <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8013e48:	bf00      	nop
 8013e4a:	3710      	adds	r7, #16
 8013e4c:	46bd      	mov	sp, r7
 8013e4e:	bd80      	pop	{r7, pc}
 8013e50:	20001aa8 	.word	0x20001aa8

08013e54 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8013e54:	b580      	push	{r7, lr}
 8013e56:	b082      	sub	sp, #8
 8013e58:	af00      	add	r7, sp, #0
 8013e5a:	4603      	mov	r3, r0
 8013e5c:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8013e5e:	4b09      	ldr	r3, [pc, #36]	; (8013e84 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8013e60:	6859      	ldr	r1, [r3, #4]
 8013e62:	4b08      	ldr	r3, [pc, #32]	; (8013e84 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8013e64:	689a      	ldr	r2, [r3, #8]
 8013e66:	79fb      	ldrb	r3, [r7, #7]
 8013e68:	4618      	mov	r0, r3
 8013e6a:	f7ff feb7 	bl	8013bdc <GetElement>
 8013e6e:	4603      	mov	r3, r0
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d001      	beq.n	8013e78 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8013e74:	2301      	movs	r3, #1
 8013e76:	e000      	b.n	8013e7a <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8013e78:	2300      	movs	r3, #0
}
 8013e7a:	4618      	mov	r0, r3
 8013e7c:	3708      	adds	r7, #8
 8013e7e:	46bd      	mov	sp, r7
 8013e80:	bd80      	pop	{r7, pc}
 8013e82:	bf00      	nop
 8013e84:	20001aa8 	.word	0x20001aa8

08013e88 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8013e88:	b580      	push	{r7, lr}
 8013e8a:	b084      	sub	sp, #16
 8013e8c:	af00      	add	r7, sp, #0
 8013e8e:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8013e90:	4b25      	ldr	r3, [pc, #148]	; (8013f28 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8013e92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013e96:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8013e98:	2300      	movs	r3, #0
 8013e9a:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 8013e9c:	f107 0308 	add.w	r3, r7, #8
 8013ea0:	2204      	movs	r2, #4
 8013ea2:	2100      	movs	r1, #0
 8013ea4:	4618      	mov	r0, r3
 8013ea6:	f005 f88b 	bl	8018fc0 <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 8013eaa:	2300      	movs	r3, #0
 8013eac:	73fb      	strb	r3, [r7, #15]
 8013eae:	e032      	b.n	8013f16 <LoRaMacConfirmQueueHandleCb+0x8e>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8013eb0:	4b1d      	ldr	r3, [pc, #116]	; (8013f28 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8013eb2:	685b      	ldr	r3, [r3, #4]
 8013eb4:	781a      	ldrb	r2, [r3, #0]
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8013eba:	4b1b      	ldr	r3, [pc, #108]	; (8013f28 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8013ebc:	685b      	ldr	r3, [r3, #4]
 8013ebe:	785a      	ldrb	r2, [r3, #1]
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8013ec4:	4b18      	ldr	r3, [pc, #96]	; (8013f28 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8013ec6:	685b      	ldr	r3, [r3, #4]
 8013ec8:	789b      	ldrb	r3, [r3, #2]
 8013eca:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8013ecc:	7b7b      	ldrb	r3, [r7, #13]
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d005      	beq.n	8013ede <LoRaMacConfirmQueueHandleCb+0x56>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8013ed2:	4b15      	ldr	r3, [pc, #84]	; (8013f28 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8013ed4:	681b      	ldr	r3, [r3, #0]
 8013ed6:	689b      	ldr	r3, [r3, #8]
 8013ed8:	6878      	ldr	r0, [r7, #4]
 8013eda:	4798      	blx	r3
 8013edc:	e00b      	b.n	8013ef6 <LoRaMacConfirmQueueHandleCb+0x6e>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8013ede:	4b12      	ldr	r3, [pc, #72]	; (8013f28 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8013ee0:	685b      	ldr	r3, [r3, #4]
 8013ee2:	781b      	ldrb	r3, [r3, #0]
 8013ee4:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8013ee6:	4b10      	ldr	r3, [pc, #64]	; (8013f28 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8013ee8:	685b      	ldr	r3, [r3, #4]
 8013eea:	785b      	ldrb	r3, [r3, #1]
 8013eec:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8013eee:	4b0e      	ldr	r3, [pc, #56]	; (8013f28 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8013ef0:	685b      	ldr	r3, [r3, #4]
 8013ef2:	78db      	ldrb	r3, [r3, #3]
 8013ef4:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8013ef6:	f7ff feff 	bl	8013cf8 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8013efa:	7b7b      	ldrb	r3, [r7, #13]
 8013efc:	f083 0301 	eor.w	r3, r3, #1
 8013f00:	b2db      	uxtb	r3, r3
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d004      	beq.n	8013f10 <LoRaMacConfirmQueueHandleCb+0x88>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8013f06:	f107 0308 	add.w	r3, r7, #8
 8013f0a:	4618      	mov	r0, r3
 8013f0c:	f7ff feba 	bl	8013c84 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8013f10:	7bfb      	ldrb	r3, [r7, #15]
 8013f12:	3301      	adds	r3, #1
 8013f14:	73fb      	strb	r3, [r7, #15]
 8013f16:	7bfa      	ldrb	r2, [r7, #15]
 8013f18:	7bbb      	ldrb	r3, [r7, #14]
 8013f1a:	429a      	cmp	r2, r3
 8013f1c:	d3c8      	bcc.n	8013eb0 <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 8013f1e:	bf00      	nop
 8013f20:	bf00      	nop
 8013f22:	3710      	adds	r7, #16
 8013f24:	46bd      	mov	sp, r7
 8013f26:	bd80      	pop	{r7, pc}
 8013f28:	20001aa8 	.word	0x20001aa8

08013f2c <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8013f2c:	b480      	push	{r7}
 8013f2e:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8013f30:	4b03      	ldr	r3, [pc, #12]	; (8013f40 <LoRaMacConfirmQueueGetCnt+0x14>)
 8013f32:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8013f36:	4618      	mov	r0, r3
 8013f38:	46bd      	mov	sp, r7
 8013f3a:	bc80      	pop	{r7}
 8013f3c:	4770      	bx	lr
 8013f3e:	bf00      	nop
 8013f40:	20001aa8 	.word	0x20001aa8

08013f44 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8013f44:	b580      	push	{r7, lr}
 8013f46:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013f48:	4b06      	ldr	r3, [pc, #24]	; (8013f64 <LoRaMacConfirmQueueIsFull+0x20>)
 8013f4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013f4e:	4618      	mov	r0, r3
 8013f50:	f7ff fe34 	bl	8013bbc <IsListFull>
 8013f54:	4603      	mov	r3, r0
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	d001      	beq.n	8013f5e <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 8013f5a:	2301      	movs	r3, #1
 8013f5c:	e000      	b.n	8013f60 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 8013f5e:	2300      	movs	r3, #0
    }
}
 8013f60:	4618      	mov	r0, r3
 8013f62:	bd80      	pop	{r7, pc}
 8013f64:	20001aa8 	.word	0x20001aa8

08013f68 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8013f68:	b580      	push	{r7, lr}
 8013f6a:	b08e      	sub	sp, #56	; 0x38
 8013f6c:	af00      	add	r7, sp, #0
 8013f6e:	60f8      	str	r0, [r7, #12]
 8013f70:	607b      	str	r3, [r7, #4]
 8013f72:	460b      	mov	r3, r1
 8013f74:	817b      	strh	r3, [r7, #10]
 8013f76:	4613      	mov	r3, r2
 8013f78:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 8013f7a:	68fb      	ldr	r3, [r7, #12]
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	d101      	bne.n	8013f84 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013f80:	2309      	movs	r3, #9
 8013f82:	e086      	b.n	8014092 <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 8013f84:	2300      	movs	r3, #0
 8013f86:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 8013f8a:	2301      	movs	r3, #1
 8013f8c:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 8013f8e:	2300      	movs	r3, #0
 8013f90:	623b      	str	r3, [r7, #32]
 8013f92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013f96:	2200      	movs	r2, #0
 8013f98:	601a      	str	r2, [r3, #0]
 8013f9a:	605a      	str	r2, [r3, #4]
 8013f9c:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 8013f9e:	2300      	movs	r3, #0
 8013fa0:	613b      	str	r3, [r7, #16]
 8013fa2:	f107 0314 	add.w	r3, r7, #20
 8013fa6:	2200      	movs	r2, #0
 8013fa8:	601a      	str	r2, [r3, #0]
 8013faa:	605a      	str	r2, [r3, #4]
 8013fac:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 8013fae:	2301      	movs	r3, #1
 8013fb0:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8013fb2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8013fb6:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	b2db      	uxtb	r3, r3
 8013fbc:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	0a1b      	lsrs	r3, r3, #8
 8013fc2:	b2db      	uxtb	r3, r3
 8013fc4:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	0c1b      	lsrs	r3, r3, #16
 8013fca:	b2db      	uxtb	r3, r3
 8013fcc:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	0e1b      	lsrs	r3, r3, #24
 8013fd2:	b2db      	uxtb	r3, r3
 8013fd4:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 8013fd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013fd8:	b2db      	uxtb	r3, r3
 8013fda:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8013fdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013fde:	0a1b      	lsrs	r3, r3, #8
 8013fe0:	b2db      	uxtb	r3, r3
 8013fe2:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8013fe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013fe6:	0c1b      	lsrs	r3, r3, #16
 8013fe8:	b2db      	uxtb	r3, r3
 8013fea:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8013fec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013fee:	0e1b      	lsrs	r3, r3, #24
 8013ff0:	b2db      	uxtb	r3, r3
 8013ff2:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8013ff4:	e048      	b.n	8014088 <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 8013ff6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013ff8:	b2db      	uxtb	r3, r3
 8013ffa:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8013ffc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013ffe:	3301      	adds	r3, #1
 8014000:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8014002:	f107 0320 	add.w	r3, r7, #32
 8014006:	7a7a      	ldrb	r2, [r7, #9]
 8014008:	f107 0010 	add.w	r0, r7, #16
 801400c:	2110      	movs	r1, #16
 801400e:	f7f8 fa79 	bl	800c504 <SecureElementAesEncrypt>
 8014012:	4603      	mov	r3, r0
 8014014:	2b00      	cmp	r3, #0
 8014016:	d001      	beq.n	801401c <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014018:	230e      	movs	r3, #14
 801401a:	e03a      	b.n	8014092 <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 801401c:	2300      	movs	r3, #0
 801401e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8014022:	e01e      	b.n	8014062 <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8014024:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014028:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801402c:	4413      	add	r3, r2
 801402e:	461a      	mov	r2, r3
 8014030:	68fb      	ldr	r3, [r7, #12]
 8014032:	4413      	add	r3, r2
 8014034:	7819      	ldrb	r1, [r3, #0]
 8014036:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801403a:	3338      	adds	r3, #56	; 0x38
 801403c:	443b      	add	r3, r7
 801403e:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8014042:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8014046:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801404a:	4403      	add	r3, r0
 801404c:	4618      	mov	r0, r3
 801404e:	68fb      	ldr	r3, [r7, #12]
 8014050:	4403      	add	r3, r0
 8014052:	404a      	eors	r2, r1
 8014054:	b2d2      	uxtb	r2, r2
 8014056:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8014058:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801405c:	3301      	adds	r3, #1
 801405e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8014062:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8014066:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801406a:	2a10      	cmp	r2, #16
 801406c:	bfa8      	it	ge
 801406e:	2210      	movge	r2, #16
 8014070:	b212      	sxth	r2, r2
 8014072:	4293      	cmp	r3, r2
 8014074:	dbd6      	blt.n	8014024 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 8014076:	897b      	ldrh	r3, [r7, #10]
 8014078:	3b10      	subs	r3, #16
 801407a:	b29b      	uxth	r3, r3
 801407c:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 801407e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014082:	3310      	adds	r3, #16
 8014084:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 8014088:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801408c:	2b00      	cmp	r3, #0
 801408e:	dcb2      	bgt.n	8013ff6 <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014090:	2300      	movs	r3, #0
}
 8014092:	4618      	mov	r0, r3
 8014094:	3738      	adds	r7, #56	; 0x38
 8014096:	46bd      	mov	sp, r7
 8014098:	bd80      	pop	{r7, pc}

0801409a <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 801409a:	b490      	push	{r4, r7}
 801409c:	b082      	sub	sp, #8
 801409e:	af00      	add	r7, sp, #0
 80140a0:	4604      	mov	r4, r0
 80140a2:	4608      	mov	r0, r1
 80140a4:	4611      	mov	r1, r2
 80140a6:	461a      	mov	r2, r3
 80140a8:	4623      	mov	r3, r4
 80140aa:	80fb      	strh	r3, [r7, #6]
 80140ac:	4603      	mov	r3, r0
 80140ae:	717b      	strb	r3, [r7, #5]
 80140b0:	460b      	mov	r3, r1
 80140b2:	713b      	strb	r3, [r7, #4]
 80140b4:	4613      	mov	r3, r2
 80140b6:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 80140b8:	69bb      	ldr	r3, [r7, #24]
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	d101      	bne.n	80140c2 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80140be:	2309      	movs	r3, #9
 80140c0:	e04e      	b.n	8014160 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 80140c2:	69bb      	ldr	r3, [r7, #24]
 80140c4:	2249      	movs	r2, #73	; 0x49
 80140c6:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 80140c8:	69bb      	ldr	r3, [r7, #24]
 80140ca:	3301      	adds	r3, #1
 80140cc:	2200      	movs	r2, #0
 80140ce:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 80140d0:	69bb      	ldr	r3, [r7, #24]
 80140d2:	3302      	adds	r3, #2
 80140d4:	2200      	movs	r2, #0
 80140d6:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 80140d8:	69bb      	ldr	r3, [r7, #24]
 80140da:	3303      	adds	r3, #3
 80140dc:	2200      	movs	r2, #0
 80140de:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 80140e0:	69bb      	ldr	r3, [r7, #24]
 80140e2:	3304      	adds	r3, #4
 80140e4:	2200      	movs	r2, #0
 80140e6:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 80140e8:	69bb      	ldr	r3, [r7, #24]
 80140ea:	3305      	adds	r3, #5
 80140ec:	78fa      	ldrb	r2, [r7, #3]
 80140ee:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 80140f0:	69bb      	ldr	r3, [r7, #24]
 80140f2:	3306      	adds	r3, #6
 80140f4:	693a      	ldr	r2, [r7, #16]
 80140f6:	b2d2      	uxtb	r2, r2
 80140f8:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 80140fa:	693b      	ldr	r3, [r7, #16]
 80140fc:	0a1a      	lsrs	r2, r3, #8
 80140fe:	69bb      	ldr	r3, [r7, #24]
 8014100:	3307      	adds	r3, #7
 8014102:	b2d2      	uxtb	r2, r2
 8014104:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8014106:	693b      	ldr	r3, [r7, #16]
 8014108:	0c1a      	lsrs	r2, r3, #16
 801410a:	69bb      	ldr	r3, [r7, #24]
 801410c:	3308      	adds	r3, #8
 801410e:	b2d2      	uxtb	r2, r2
 8014110:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8014112:	693b      	ldr	r3, [r7, #16]
 8014114:	0e1a      	lsrs	r2, r3, #24
 8014116:	69bb      	ldr	r3, [r7, #24]
 8014118:	3309      	adds	r3, #9
 801411a:	b2d2      	uxtb	r2, r2
 801411c:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 801411e:	69bb      	ldr	r3, [r7, #24]
 8014120:	330a      	adds	r3, #10
 8014122:	697a      	ldr	r2, [r7, #20]
 8014124:	b2d2      	uxtb	r2, r2
 8014126:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8014128:	697b      	ldr	r3, [r7, #20]
 801412a:	0a1a      	lsrs	r2, r3, #8
 801412c:	69bb      	ldr	r3, [r7, #24]
 801412e:	330b      	adds	r3, #11
 8014130:	b2d2      	uxtb	r2, r2
 8014132:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8014134:	697b      	ldr	r3, [r7, #20]
 8014136:	0c1a      	lsrs	r2, r3, #16
 8014138:	69bb      	ldr	r3, [r7, #24]
 801413a:	330c      	adds	r3, #12
 801413c:	b2d2      	uxtb	r2, r2
 801413e:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8014140:	697b      	ldr	r3, [r7, #20]
 8014142:	0e1a      	lsrs	r2, r3, #24
 8014144:	69bb      	ldr	r3, [r7, #24]
 8014146:	330d      	adds	r3, #13
 8014148:	b2d2      	uxtb	r2, r2
 801414a:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 801414c:	69bb      	ldr	r3, [r7, #24]
 801414e:	330e      	adds	r3, #14
 8014150:	2200      	movs	r2, #0
 8014152:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8014154:	69bb      	ldr	r3, [r7, #24]
 8014156:	330f      	adds	r3, #15
 8014158:	88fa      	ldrh	r2, [r7, #6]
 801415a:	b2d2      	uxtb	r2, r2
 801415c:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 801415e:	2300      	movs	r3, #0
}
 8014160:	4618      	mov	r0, r3
 8014162:	3708      	adds	r7, #8
 8014164:	46bd      	mov	sp, r7
 8014166:	bc90      	pop	{r4, r7}
 8014168:	4770      	bx	lr

0801416a <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 801416a:	b590      	push	{r4, r7, lr}
 801416c:	b08b      	sub	sp, #44	; 0x2c
 801416e:	af04      	add	r7, sp, #16
 8014170:	6078      	str	r0, [r7, #4]
 8014172:	4608      	mov	r0, r1
 8014174:	4611      	mov	r1, r2
 8014176:	461a      	mov	r2, r3
 8014178:	4603      	mov	r3, r0
 801417a:	807b      	strh	r3, [r7, #2]
 801417c:	460b      	mov	r3, r1
 801417e:	707b      	strb	r3, [r7, #1]
 8014180:	4613      	mov	r3, r2
 8014182:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	2b00      	cmp	r3, #0
 8014188:	d002      	beq.n	8014190 <ComputeCmacB0+0x26>
 801418a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801418c:	2b00      	cmp	r3, #0
 801418e:	d101      	bne.n	8014194 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014190:	2309      	movs	r3, #9
 8014192:	e024      	b.n	80141de <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8014194:	887b      	ldrh	r3, [r7, #2]
 8014196:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801419a:	d901      	bls.n	80141a0 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 801419c:	230d      	movs	r3, #13
 801419e:	e01e      	b.n	80141de <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE] ALIGN(4);

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80141a0:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 80141a4:	783a      	ldrb	r2, [r7, #0]
 80141a6:	7879      	ldrb	r1, [r7, #1]
 80141a8:	8878      	ldrh	r0, [r7, #2]
 80141aa:	f107 0308 	add.w	r3, r7, #8
 80141ae:	9302      	str	r3, [sp, #8]
 80141b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141b2:	9301      	str	r3, [sp, #4]
 80141b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141b6:	9300      	str	r3, [sp, #0]
 80141b8:	4623      	mov	r3, r4
 80141ba:	f7ff ff6e 	bl	801409a <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 80141be:	887a      	ldrh	r2, [r7, #2]
 80141c0:	7879      	ldrb	r1, [r7, #1]
 80141c2:	f107 0008 	add.w	r0, r7, #8
 80141c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80141c8:	9300      	str	r3, [sp, #0]
 80141ca:	460b      	mov	r3, r1
 80141cc:	6879      	ldr	r1, [r7, #4]
 80141ce:	f7f8 f953 	bl	800c478 <SecureElementComputeAesCmac>
 80141d2:	4603      	mov	r3, r0
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	d001      	beq.n	80141dc <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80141d8:	230e      	movs	r3, #14
 80141da:	e000      	b.n	80141de <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80141dc:	2300      	movs	r3, #0
}
 80141de:	4618      	mov	r0, r3
 80141e0:	371c      	adds	r7, #28
 80141e2:	46bd      	mov	sp, r7
 80141e4:	bd90      	pop	{r4, r7, pc}

080141e6 <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 80141e6:	b590      	push	{r4, r7, lr}
 80141e8:	b0cd      	sub	sp, #308	; 0x134
 80141ea:	af04      	add	r7, sp, #16
 80141ec:	f507 7490 	add.w	r4, r7, #288	; 0x120
 80141f0:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 80141f4:	6020      	str	r0, [r4, #0]
 80141f6:	460c      	mov	r4, r1
 80141f8:	4610      	mov	r0, r2
 80141fa:	4619      	mov	r1, r3
 80141fc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014200:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8014204:	4622      	mov	r2, r4
 8014206:	801a      	strh	r2, [r3, #0]
 8014208:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801420c:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8014210:	4602      	mov	r2, r0
 8014212:	701a      	strb	r2, [r3, #0]
 8014214:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014218:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801421c:	460a      	mov	r2, r1
 801421e:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8014220:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014224:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8014228:	681b      	ldr	r3, [r3, #0]
 801422a:	2b00      	cmp	r3, #0
 801422c:	d101      	bne.n	8014232 <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801422e:	2309      	movs	r3, #9
 8014230:	e063      	b.n	80142fa <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8014232:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014236:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 801423a:	881b      	ldrh	r3, [r3, #0]
 801423c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014240:	d901      	bls.n	8014246 <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8014242:	230d      	movs	r3, #13
 8014244:	e059      	b.n	80142fa <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8014246:	f107 030c 	add.w	r3, r7, #12
 801424a:	f44f 7288 	mov.w	r2, #272	; 0x110
 801424e:	2100      	movs	r1, #0
 8014250:	4618      	mov	r0, r3
 8014252:	f004 feb5 	bl	8018fc0 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8014256:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 801425a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801425e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8014262:	781a      	ldrb	r2, [r3, #0]
 8014264:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014268:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 801426c:	7819      	ldrb	r1, [r3, #0]
 801426e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014272:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8014276:	8818      	ldrh	r0, [r3, #0]
 8014278:	f107 030c 	add.w	r3, r7, #12
 801427c:	9302      	str	r3, [sp, #8]
 801427e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8014282:	9301      	str	r3, [sp, #4]
 8014284:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8014288:	9300      	str	r3, [sp, #0]
 801428a:	4623      	mov	r3, r4
 801428c:	f7ff ff05 	bl	801409a <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8014290:	f107 030c 	add.w	r3, r7, #12
 8014294:	3310      	adds	r3, #16
 8014296:	f507 7290 	add.w	r2, r7, #288	; 0x120
 801429a:	f5a2 728f 	sub.w	r2, r2, #286	; 0x11e
 801429e:	8812      	ldrh	r2, [r2, #0]
 80142a0:	f507 7190 	add.w	r1, r7, #288	; 0x120
 80142a4:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 80142a8:	6809      	ldr	r1, [r1, #0]
 80142aa:	4618      	mov	r0, r3
 80142ac:	f004 fe4d 	bl	8018f4a <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 80142b0:	2306      	movs	r3, #6
 80142b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 80142b6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80142ba:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 80142be:	881b      	ldrh	r3, [r3, #0]
 80142c0:	3310      	adds	r3, #16
 80142c2:	4619      	mov	r1, r3
 80142c4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80142c8:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 80142cc:	781b      	ldrb	r3, [r3, #0]
 80142ce:	f107 000c 	add.w	r0, r7, #12
 80142d2:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80142d6:	f7f8 f8e9 	bl	800c4ac <SecureElementVerifyAesCmac>
 80142da:	4603      	mov	r3, r0
 80142dc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 80142e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d101      	bne.n	80142ec <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 80142e8:	2300      	movs	r3, #0
 80142ea:	e006      	b.n	80142fa <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 80142ec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80142f0:	2b01      	cmp	r3, #1
 80142f2:	d101      	bne.n	80142f8 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 80142f4:	2301      	movs	r3, #1
 80142f6:	e000      	b.n	80142fa <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80142f8:	230e      	movs	r3, #14
}
 80142fa:	4618      	mov	r0, r3
 80142fc:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8014300:	46bd      	mov	sp, r7
 8014302:	bd90      	pop	{r4, r7, pc}

08014304 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8014304:	b480      	push	{r7}
 8014306:	b085      	sub	sp, #20
 8014308:	af00      	add	r7, sp, #0
 801430a:	4603      	mov	r3, r0
 801430c:	6039      	str	r1, [r7, #0]
 801430e:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8014310:	2300      	movs	r3, #0
 8014312:	73fb      	strb	r3, [r7, #15]
 8014314:	e011      	b.n	801433a <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8014316:	7bfb      	ldrb	r3, [r7, #15]
 8014318:	4a0c      	ldr	r2, [pc, #48]	; (801434c <GetKeyAddrItem+0x48>)
 801431a:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 801431e:	79fa      	ldrb	r2, [r7, #7]
 8014320:	429a      	cmp	r2, r3
 8014322:	d107      	bne.n	8014334 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8014324:	7bfb      	ldrb	r3, [r7, #15]
 8014326:	009b      	lsls	r3, r3, #2
 8014328:	4a08      	ldr	r2, [pc, #32]	; (801434c <GetKeyAddrItem+0x48>)
 801432a:	441a      	add	r2, r3
 801432c:	683b      	ldr	r3, [r7, #0]
 801432e:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8014330:	2300      	movs	r3, #0
 8014332:	e006      	b.n	8014342 <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8014334:	7bfb      	ldrb	r3, [r7, #15]
 8014336:	3301      	adds	r3, #1
 8014338:	73fb      	strb	r3, [r7, #15]
 801433a:	7bfb      	ldrb	r3, [r7, #15]
 801433c:	2b01      	cmp	r3, #1
 801433e:	d9ea      	bls.n	8014316 <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8014340:	230b      	movs	r3, #11
}
 8014342:	4618      	mov	r0, r3
 8014344:	3714      	adds	r7, #20
 8014346:	46bd      	mov	sp, r7
 8014348:	bc80      	pop	{r7}
 801434a:	4770      	bx	lr
 801434c:	20000110 	.word	0x20000110

08014350 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8014350:	b580      	push	{r7, lr}
 8014352:	b088      	sub	sp, #32
 8014354:	af00      	add	r7, sp, #0
 8014356:	60b9      	str	r1, [r7, #8]
 8014358:	607a      	str	r2, [r7, #4]
 801435a:	461a      	mov	r2, r3
 801435c:	4603      	mov	r3, r0
 801435e:	73fb      	strb	r3, [r7, #15]
 8014360:	4613      	mov	r3, r2
 8014362:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 8014364:	2300      	movs	r3, #0
 8014366:	613b      	str	r3, [r7, #16]
 8014368:	f107 0314 	add.w	r3, r7, #20
 801436c:	2200      	movs	r2, #0
 801436e:	601a      	str	r2, [r3, #0]
 8014370:	605a      	str	r2, [r3, #4]
 8014372:	609a      	str	r2, [r3, #8]

    switch( keyID )
 8014374:	7bfb      	ldrb	r3, [r7, #15]
 8014376:	2b08      	cmp	r3, #8
 8014378:	d002      	beq.n	8014380 <DeriveSessionKey10x+0x30>
 801437a:	2b09      	cmp	r3, #9
 801437c:	d003      	beq.n	8014386 <DeriveSessionKey10x+0x36>
 801437e:	e005      	b.n	801438c <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else
        case NWK_S_KEY:
#endif /* LORAMAC_VERSION */
            compBase[0] = 0x01;
 8014380:	2301      	movs	r3, #1
 8014382:	743b      	strb	r3, [r7, #16]
            break;
 8014384:	e004      	b.n	8014390 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8014386:	2302      	movs	r3, #2
 8014388:	743b      	strb	r3, [r7, #16]
            break;
 801438a:	e001      	b.n	8014390 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 801438c:	230a      	movs	r3, #10
 801438e:	e02a      	b.n	80143e6 <DeriveSessionKey10x+0x96>
    }

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8014390:	68bb      	ldr	r3, [r7, #8]
 8014392:	b2db      	uxtb	r3, r3
 8014394:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8014396:	68bb      	ldr	r3, [r7, #8]
 8014398:	0a1b      	lsrs	r3, r3, #8
 801439a:	b2db      	uxtb	r3, r3
 801439c:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 801439e:	68bb      	ldr	r3, [r7, #8]
 80143a0:	0c1b      	lsrs	r3, r3, #16
 80143a2:	b2db      	uxtb	r3, r3
 80143a4:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	b2db      	uxtb	r3, r3
 80143aa:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	0a1b      	lsrs	r3, r3, #8
 80143b0:	b2db      	uxtb	r3, r3
 80143b2:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	0c1b      	lsrs	r3, r3, #16
 80143b8:	b2db      	uxtb	r3, r3
 80143ba:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 80143bc:	89bb      	ldrh	r3, [r7, #12]
 80143be:	b2db      	uxtb	r3, r3
 80143c0:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 80143c2:	89bb      	ldrh	r3, [r7, #12]
 80143c4:	0a1b      	lsrs	r3, r3, #8
 80143c6:	b29b      	uxth	r3, r3
 80143c8:	b2db      	uxtb	r3, r3
 80143ca:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 80143cc:	7bfa      	ldrb	r2, [r7, #15]
 80143ce:	f107 0310 	add.w	r3, r7, #16
 80143d2:	2101      	movs	r1, #1
 80143d4:	4618      	mov	r0, r3
 80143d6:	f7f8 f915 	bl	800c604 <SecureElementDeriveAndStoreKey>
 80143da:	4603      	mov	r3, r0
 80143dc:	2b00      	cmp	r3, #0
 80143de:	d001      	beq.n	80143e4 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80143e0:	230e      	movs	r3, #14
 80143e2:	e000      	b.n	80143e6 <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80143e4:	2300      	movs	r3, #0
}
 80143e6:	4618      	mov	r0, r3
 80143e8:	3720      	adds	r7, #32
 80143ea:	46bd      	mov	sp, r7
 80143ec:	bd80      	pop	{r7, pc}
	...

080143f0 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 80143f0:	b480      	push	{r7}
 80143f2:	b083      	sub	sp, #12
 80143f4:	af00      	add	r7, sp, #0
 80143f6:	4603      	mov	r3, r0
 80143f8:	6039      	str	r1, [r7, #0]
 80143fa:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 80143fc:	683b      	ldr	r3, [r7, #0]
 80143fe:	2b00      	cmp	r3, #0
 8014400:	d101      	bne.n	8014406 <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014402:	2309      	movs	r3, #9
 8014404:	e029      	b.n	801445a <GetLastFcntDown+0x6a>
    }
    switch( fCntID )
 8014406:	79fb      	ldrb	r3, [r7, #7]
 8014408:	3b01      	subs	r3, #1
 801440a:	2b03      	cmp	r3, #3
 801440c:	d822      	bhi.n	8014454 <GetLastFcntDown+0x64>
 801440e:	a201      	add	r2, pc, #4	; (adr r2, 8014414 <GetLastFcntDown+0x24>)
 8014410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014414:	08014425 	.word	0x08014425
 8014418:	08014431 	.word	0x08014431
 801441c:	0801443d 	.word	0x0801443d
 8014420:	08014449 	.word	0x08014449
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8014424:	4b0f      	ldr	r3, [pc, #60]	; (8014464 <GetLastFcntDown+0x74>)
 8014426:	681b      	ldr	r3, [r3, #0]
 8014428:	691a      	ldr	r2, [r3, #16]
 801442a:	683b      	ldr	r3, [r7, #0]
 801442c:	601a      	str	r2, [r3, #0]
            break;
 801442e:	e013      	b.n	8014458 <GetLastFcntDown+0x68>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8014430:	4b0c      	ldr	r3, [pc, #48]	; (8014464 <GetLastFcntDown+0x74>)
 8014432:	681b      	ldr	r3, [r3, #0]
 8014434:	695a      	ldr	r2, [r3, #20]
 8014436:	683b      	ldr	r3, [r7, #0]
 8014438:	601a      	str	r2, [r3, #0]
            break;
 801443a:	e00d      	b.n	8014458 <GetLastFcntDown+0x68>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 801443c:	4b09      	ldr	r3, [pc, #36]	; (8014464 <GetLastFcntDown+0x74>)
 801443e:	681b      	ldr	r3, [r3, #0]
 8014440:	699a      	ldr	r2, [r3, #24]
 8014442:	683b      	ldr	r3, [r7, #0]
 8014444:	601a      	str	r2, [r3, #0]
            break;
 8014446:	e007      	b.n	8014458 <GetLastFcntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8014448:	4b06      	ldr	r3, [pc, #24]	; (8014464 <GetLastFcntDown+0x74>)
 801444a:	681b      	ldr	r3, [r3, #0]
 801444c:	69da      	ldr	r2, [r3, #28]
 801444e:	683b      	ldr	r3, [r7, #0]
 8014450:	601a      	str	r2, [r3, #0]
            break;
 8014452:	e001      	b.n	8014458 <GetLastFcntDown+0x68>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8014454:	2305      	movs	r3, #5
 8014456:	e000      	b.n	801445a <GetLastFcntDown+0x6a>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8014458:	2300      	movs	r3, #0
}
 801445a:	4618      	mov	r0, r3
 801445c:	370c      	adds	r7, #12
 801445e:	46bd      	mov	sp, r7
 8014460:	bc80      	pop	{r7}
 8014462:	4770      	bx	lr
 8014464:	20001acc 	.word	0x20001acc

08014468 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8014468:	b580      	push	{r7, lr}
 801446a:	b084      	sub	sp, #16
 801446c:	af00      	add	r7, sp, #0
 801446e:	4603      	mov	r3, r0
 8014470:	6039      	str	r1, [r7, #0]
 8014472:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8014474:	2300      	movs	r3, #0
 8014476:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8014478:	f107 020c 	add.w	r2, r7, #12
 801447c:	79fb      	ldrb	r3, [r7, #7]
 801447e:	4611      	mov	r1, r2
 8014480:	4618      	mov	r0, r3
 8014482:	f7ff ffb5 	bl	80143f0 <GetLastFcntDown>
 8014486:	4603      	mov	r3, r0
 8014488:	2b00      	cmp	r3, #0
 801448a:	d001      	beq.n	8014490 <CheckFCntDown+0x28>
    {
        return false;
 801448c:	2300      	movs	r3, #0
 801448e:	e00a      	b.n	80144a6 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8014490:	68fb      	ldr	r3, [r7, #12]
 8014492:	683a      	ldr	r2, [r7, #0]
 8014494:	429a      	cmp	r2, r3
 8014496:	d803      	bhi.n	80144a0 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITIAL_VALUE ) )
 8014498:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 801449a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801449e:	d101      	bne.n	80144a4 <CheckFCntDown+0x3c>
    {
        return true;
 80144a0:	2301      	movs	r3, #1
 80144a2:	e000      	b.n	80144a6 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 80144a4:	2300      	movs	r3, #0
    }
}
 80144a6:	4618      	mov	r0, r3
 80144a8:	3710      	adds	r7, #16
 80144aa:	46bd      	mov	sp, r7
 80144ac:	bd80      	pop	{r7, pc}
	...

080144b0 <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80144b0:	b480      	push	{r7}
 80144b2:	b083      	sub	sp, #12
 80144b4:	af00      	add	r7, sp, #0
 80144b6:	4603      	mov	r3, r0
 80144b8:	6039      	str	r1, [r7, #0]
 80144ba:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 80144bc:	79fb      	ldrb	r3, [r7, #7]
 80144be:	3b01      	subs	r3, #1
 80144c0:	2b03      	cmp	r3, #3
 80144c2:	d82b      	bhi.n	801451c <UpdateFCntDown+0x6c>
 80144c4:	a201      	add	r2, pc, #4	; (adr r2, 80144cc <UpdateFCntDown+0x1c>)
 80144c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80144ca:	bf00      	nop
 80144cc:	080144dd 	.word	0x080144dd
 80144d0:	080144ef 	.word	0x080144ef
 80144d4:	08014501 	.word	0x08014501
 80144d8:	08014513 	.word	0x08014513
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 80144dc:	4b12      	ldr	r3, [pc, #72]	; (8014528 <UpdateFCntDown+0x78>)
 80144de:	681b      	ldr	r3, [r3, #0]
 80144e0:	683a      	ldr	r2, [r7, #0]
 80144e2:	611a      	str	r2, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 80144e4:	4b10      	ldr	r3, [pc, #64]	; (8014528 <UpdateFCntDown+0x78>)
 80144e6:	681b      	ldr	r3, [r3, #0]
 80144e8:	683a      	ldr	r2, [r7, #0]
 80144ea:	621a      	str	r2, [r3, #32]
            break;
 80144ec:	e017      	b.n	801451e <UpdateFCntDown+0x6e>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 80144ee:	4b0e      	ldr	r3, [pc, #56]	; (8014528 <UpdateFCntDown+0x78>)
 80144f0:	681b      	ldr	r3, [r3, #0]
 80144f2:	683a      	ldr	r2, [r7, #0]
 80144f4:	615a      	str	r2, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 80144f6:	4b0c      	ldr	r3, [pc, #48]	; (8014528 <UpdateFCntDown+0x78>)
 80144f8:	681b      	ldr	r3, [r3, #0]
 80144fa:	683a      	ldr	r2, [r7, #0]
 80144fc:	621a      	str	r2, [r3, #32]
            break;
 80144fe:	e00e      	b.n	801451e <UpdateFCntDown+0x6e>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8014500:	4b09      	ldr	r3, [pc, #36]	; (8014528 <UpdateFCntDown+0x78>)
 8014502:	681b      	ldr	r3, [r3, #0]
 8014504:	683a      	ldr	r2, [r7, #0]
 8014506:	619a      	str	r2, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 8014508:	4b07      	ldr	r3, [pc, #28]	; (8014528 <UpdateFCntDown+0x78>)
 801450a:	681b      	ldr	r3, [r3, #0]
 801450c:	683a      	ldr	r2, [r7, #0]
 801450e:	621a      	str	r2, [r3, #32]
            break;
 8014510:	e005      	b.n	801451e <UpdateFCntDown+0x6e>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 8014512:	4b05      	ldr	r3, [pc, #20]	; (8014528 <UpdateFCntDown+0x78>)
 8014514:	681b      	ldr	r3, [r3, #0]
 8014516:	683a      	ldr	r2, [r7, #0]
 8014518:	61da      	str	r2, [r3, #28]
            break;
 801451a:	e000      	b.n	801451e <UpdateFCntDown+0x6e>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 801451c:	bf00      	nop
    }
}
 801451e:	bf00      	nop
 8014520:	370c      	adds	r7, #12
 8014522:	46bd      	mov	sp, r7
 8014524:	bc80      	pop	{r7}
 8014526:	4770      	bx	lr
 8014528:	20001acc 	.word	0x20001acc

0801452c <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 801452c:	b480      	push	{r7}
 801452e:	b083      	sub	sp, #12
 8014530:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 8014532:	4b18      	ldr	r3, [pc, #96]	; (8014594 <ResetFCnts+0x68>)
 8014534:	681b      	ldr	r3, [r3, #0]
 8014536:	2200      	movs	r2, #0
 8014538:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 801453a:	4b16      	ldr	r3, [pc, #88]	; (8014594 <ResetFCnts+0x68>)
 801453c:	681b      	ldr	r3, [r3, #0]
 801453e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014542:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8014544:	4b13      	ldr	r3, [pc, #76]	; (8014594 <ResetFCnts+0x68>)
 8014546:	681b      	ldr	r3, [r3, #0]
 8014548:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801454c:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 801454e:	4b11      	ldr	r3, [pc, #68]	; (8014594 <ResetFCnts+0x68>)
 8014550:	681b      	ldr	r3, [r3, #0]
 8014552:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014556:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8014558:	4b0e      	ldr	r3, [pc, #56]	; (8014594 <ResetFCnts+0x68>)
 801455a:	681a      	ldr	r2, [r3, #0]
 801455c:	4b0d      	ldr	r3, [pc, #52]	; (8014594 <ResetFCnts+0x68>)
 801455e:	681b      	ldr	r3, [r3, #0]
 8014560:	6992      	ldr	r2, [r2, #24]
 8014562:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8014564:	2300      	movs	r3, #0
 8014566:	607b      	str	r3, [r7, #4]
 8014568:	e00b      	b.n	8014582 <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 801456a:	4b0a      	ldr	r3, [pc, #40]	; (8014594 <ResetFCnts+0x68>)
 801456c:	681a      	ldr	r2, [r3, #0]
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	3306      	adds	r3, #6
 8014572:	009b      	lsls	r3, r3, #2
 8014574:	4413      	add	r3, r2
 8014576:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801457a:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	3301      	adds	r3, #1
 8014580:	607b      	str	r3, [r7, #4]
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	2b00      	cmp	r3, #0
 8014586:	ddf0      	ble.n	801456a <ResetFCnts+0x3e>
    }
}
 8014588:	bf00      	nop
 801458a:	bf00      	nop
 801458c:	370c      	adds	r7, #12
 801458e:	46bd      	mov	sp, r7
 8014590:	bc80      	pop	{r7}
 8014592:	4770      	bx	lr
 8014594:	20001acc 	.word	0x20001acc

08014598 <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
 8014598:	b480      	push	{r7}
 801459a:	b083      	sub	sp, #12
 801459c:	af00      	add	r7, sp, #0
 801459e:	6078      	str	r0, [r7, #4]
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 80145a0:	4b06      	ldr	r3, [pc, #24]	; (80145bc <IsJoinNonce10xOk+0x24>)
 80145a2:	681b      	ldr	r3, [r3, #0]
 80145a4:	689b      	ldr	r3, [r3, #8]
 80145a6:	687a      	ldr	r2, [r7, #4]
 80145a8:	429a      	cmp	r2, r3
 80145aa:	bf8c      	ite	hi
 80145ac:	2301      	movhi	r3, #1
 80145ae:	2300      	movls	r3, #0
 80145b0:	b2db      	uxtb	r3, r3
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 80145b2:	4618      	mov	r0, r3
 80145b4:	370c      	adds	r7, #12
 80145b6:	46bd      	mov	sp, r7
 80145b8:	bc80      	pop	{r7}
 80145ba:	4770      	bx	lr
 80145bc:	20001acc 	.word	0x20001acc

080145c0 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 80145c0:	b580      	push	{r7, lr}
 80145c2:	b082      	sub	sp, #8
 80145c4:	af00      	add	r7, sp, #0
 80145c6:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	d101      	bne.n	80145d2 <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 80145ce:	2308      	movs	r3, #8
 80145d0:	e01c      	b.n	801460c <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 80145d2:	4a10      	ldr	r2, [pc, #64]	; (8014614 <LoRaMacCryptoInit+0x54>)
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 80145d8:	4b0e      	ldr	r3, [pc, #56]	; (8014614 <LoRaMacCryptoInit+0x54>)
 80145da:	681b      	ldr	r3, [r3, #0]
 80145dc:	2228      	movs	r2, #40	; 0x28
 80145de:	2100      	movs	r1, #0
 80145e0:	4618      	mov	r0, r3
 80145e2:	f004 fced 	bl	8018fc0 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 80145e6:	4b0b      	ldr	r3, [pc, #44]	; (8014614 <LoRaMacCryptoInit+0x54>)
 80145e8:	681b      	ldr	r3, [r3, #0]
 80145ea:	2201      	movs	r2, #1
 80145ec:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 80145ee:	4b09      	ldr	r3, [pc, #36]	; (8014614 <LoRaMacCryptoInit+0x54>)
 80145f0:	681b      	ldr	r3, [r3, #0]
 80145f2:	2201      	movs	r2, #1
 80145f4:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 80145f6:	4b07      	ldr	r3, [pc, #28]	; (8014614 <LoRaMacCryptoInit+0x54>)
 80145f8:	681b      	ldr	r3, [r3, #0]
 80145fa:	2201      	movs	r2, #1
 80145fc:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 80145fe:	4b05      	ldr	r3, [pc, #20]	; (8014614 <LoRaMacCryptoInit+0x54>)
 8014600:	681b      	ldr	r3, [r3, #0]
 8014602:	2200      	movs	r2, #0
 8014604:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8014606:	f7ff ff91 	bl	801452c <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 801460a:	2300      	movs	r3, #0
}
 801460c:	4618      	mov	r0, r3
 801460e:	3708      	adds	r7, #8
 8014610:	46bd      	mov	sp, r7
 8014612:	bd80      	pop	{r7, pc}
 8014614:	20001acc 	.word	0x20001acc

08014618 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8014618:	b480      	push	{r7}
 801461a:	b083      	sub	sp, #12
 801461c:	af00      	add	r7, sp, #0
 801461e:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8014620:	4b04      	ldr	r3, [pc, #16]	; (8014634 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8014622:	681b      	ldr	r3, [r3, #0]
 8014624:	687a      	ldr	r2, [r7, #4]
 8014626:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8014628:	2300      	movs	r3, #0
}
 801462a:	4618      	mov	r0, r3
 801462c:	370c      	adds	r7, #12
 801462e:	46bd      	mov	sp, r7
 8014630:	bc80      	pop	{r7}
 8014632:	4770      	bx	lr
 8014634:	20001acc 	.word	0x20001acc

08014638 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8014638:	b480      	push	{r7}
 801463a:	b083      	sub	sp, #12
 801463c:	af00      	add	r7, sp, #0
 801463e:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	2b00      	cmp	r3, #0
 8014644:	d101      	bne.n	801464a <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014646:	2309      	movs	r3, #9
 8014648:	e006      	b.n	8014658 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 801464a:	4b06      	ldr	r3, [pc, #24]	; (8014664 <LoRaMacCryptoGetFCntUp+0x2c>)
 801464c:	681b      	ldr	r3, [r3, #0]
 801464e:	68db      	ldr	r3, [r3, #12]
 8014650:	1c5a      	adds	r2, r3, #1
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8014656:	2300      	movs	r3, #0
}
 8014658:	4618      	mov	r0, r3
 801465a:	370c      	adds	r7, #12
 801465c:	46bd      	mov	sp, r7
 801465e:	bc80      	pop	{r7}
 8014660:	4770      	bx	lr
 8014662:	bf00      	nop
 8014664:	20001acc 	.word	0x20001acc

08014668 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 8014668:	b580      	push	{r7, lr}
 801466a:	b088      	sub	sp, #32
 801466c:	af00      	add	r7, sp, #0
 801466e:	4603      	mov	r3, r0
 8014670:	60b9      	str	r1, [r7, #8]
 8014672:	607a      	str	r2, [r7, #4]
 8014674:	73fb      	strb	r3, [r7, #15]
    uint32_t lastDown = 0;
 8014676:	2300      	movs	r3, #0
 8014678:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 801467a:	2300      	movs	r3, #0
 801467c:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 801467e:	2312      	movs	r3, #18
 8014680:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	2b00      	cmp	r3, #0
 8014686:	d101      	bne.n	801468c <LoRaMacCryptoGetFCntDown+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014688:	2309      	movs	r3, #9
 801468a:	e035      	b.n	80146f8 <LoRaMacCryptoGetFCntDown+0x90>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 801468c:	f107 0214 	add.w	r2, r7, #20
 8014690:	7bfb      	ldrb	r3, [r7, #15]
 8014692:	4611      	mov	r1, r2
 8014694:	4618      	mov	r0, r3
 8014696:	f7ff feab 	bl	80143f0 <GetLastFcntDown>
 801469a:	4603      	mov	r3, r0
 801469c:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 801469e:	7efb      	ldrb	r3, [r7, #27]
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	d001      	beq.n	80146a8 <LoRaMacCryptoGetFCntDown+0x40>
    {
        return cryptoStatus;
 80146a4:	7efb      	ldrb	r3, [r7, #27]
 80146a6:	e027      	b.n	80146f8 <LoRaMacCryptoGetFCntDown+0x90>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 80146a8:	697b      	ldr	r3, [r7, #20]
 80146aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80146ae:	d103      	bne.n	80146b8 <LoRaMacCryptoGetFCntDown+0x50>
    {
        *currentDown = frameFcnt;
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	68ba      	ldr	r2, [r7, #8]
 80146b4:	601a      	str	r2, [r3, #0]
 80146b6:	e01e      	b.n	80146f6 <LoRaMacCryptoGetFCntDown+0x8e>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 80146b8:	697b      	ldr	r3, [r7, #20]
 80146ba:	b29b      	uxth	r3, r3
 80146bc:	68ba      	ldr	r2, [r7, #8]
 80146be:	1ad3      	subs	r3, r2, r3
 80146c0:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 80146c2:	69fb      	ldr	r3, [r7, #28]
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	dd05      	ble.n	80146d4 <LoRaMacCryptoGetFCntDown+0x6c>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 80146c8:	697a      	ldr	r2, [r7, #20]
 80146ca:	69fb      	ldr	r3, [r7, #28]
 80146cc:	441a      	add	r2, r3
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	601a      	str	r2, [r3, #0]
 80146d2:	e010      	b.n	80146f6 <LoRaMacCryptoGetFCntDown+0x8e>
        }
        else if( fCntDiff == 0 )
 80146d4:	69fb      	ldr	r3, [r7, #28]
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	d104      	bne.n	80146e4 <LoRaMacCryptoGetFCntDown+0x7c>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 80146da:	697a      	ldr	r2, [r7, #20]
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 80146e0:	2307      	movs	r3, #7
 80146e2:	e009      	b.n	80146f8 <LoRaMacCryptoGetFCntDown+0x90>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 80146e4:	697b      	ldr	r3, [r7, #20]
 80146e6:	0c1b      	lsrs	r3, r3, #16
 80146e8:	041b      	lsls	r3, r3, #16
 80146ea:	68ba      	ldr	r2, [r7, #8]
 80146ec:	4413      	add	r3, r2
 80146ee:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	601a      	str	r2, [r3, #0]
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80146f6:	2300      	movs	r3, #0
}
 80146f8:	4618      	mov	r0, r3
 80146fa:	3720      	adds	r7, #32
 80146fc:	46bd      	mov	sp, r7
 80146fe:	bd80      	pop	{r7, pc}

08014700 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8014700:	b480      	push	{r7}
 8014702:	b085      	sub	sp, #20
 8014704:	af00      	add	r7, sp, #0
 8014706:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	2b00      	cmp	r3, #0
 801470c:	d101      	bne.n	8014712 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801470e:	2309      	movs	r3, #9
 8014710:	e019      	b.n	8014746 <LoRaMacCryptoSetMulticastReference+0x46>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8014712:	2300      	movs	r3, #0
 8014714:	60fb      	str	r3, [r7, #12]
 8014716:	e012      	b.n	801473e <LoRaMacCryptoSetMulticastReference+0x3e>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8014718:	4b0d      	ldr	r3, [pc, #52]	; (8014750 <LoRaMacCryptoSetMulticastReference+0x50>)
 801471a:	6819      	ldr	r1, [r3, #0]
 801471c:	68fa      	ldr	r2, [r7, #12]
 801471e:	4613      	mov	r3, r2
 8014720:	005b      	lsls	r3, r3, #1
 8014722:	4413      	add	r3, r2
 8014724:	011b      	lsls	r3, r3, #4
 8014726:	461a      	mov	r2, r3
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	4413      	add	r3, r2
 801472c:	68fa      	ldr	r2, [r7, #12]
 801472e:	3206      	adds	r2, #6
 8014730:	0092      	lsls	r2, r2, #2
 8014732:	440a      	add	r2, r1
 8014734:	3204      	adds	r2, #4
 8014736:	625a      	str	r2, [r3, #36]	; 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8014738:	68fb      	ldr	r3, [r7, #12]
 801473a:	3301      	adds	r3, #1
 801473c:	60fb      	str	r3, [r7, #12]
 801473e:	68fb      	ldr	r3, [r7, #12]
 8014740:	2b00      	cmp	r3, #0
 8014742:	dde9      	ble.n	8014718 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014744:	2300      	movs	r3, #0
}
 8014746:	4618      	mov	r0, r3
 8014748:	3714      	adds	r7, #20
 801474a:	46bd      	mov	sp, r7
 801474c:	bc80      	pop	{r7}
 801474e:	4770      	bx	lr
 8014750:	20001acc 	.word	0x20001acc

08014754 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8014754:	b580      	push	{r7, lr}
 8014756:	b082      	sub	sp, #8
 8014758:	af00      	add	r7, sp, #0
 801475a:	4603      	mov	r3, r0
 801475c:	6039      	str	r1, [r7, #0]
 801475e:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8014760:	79fb      	ldrb	r3, [r7, #7]
 8014762:	6839      	ldr	r1, [r7, #0]
 8014764:	4618      	mov	r0, r3
 8014766:	f7f7 fe29 	bl	800c3bc <SecureElementSetKey>
 801476a:	4603      	mov	r3, r0
 801476c:	2b00      	cmp	r3, #0
 801476e:	d001      	beq.n	8014774 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014770:	230e      	movs	r3, #14
 8014772:	e021      	b.n	80147b8 <LoRaMacCryptoSetKey+0x64>
    }
    if( keyID == APP_KEY )
 8014774:	79fb      	ldrb	r3, [r7, #7]
 8014776:	2b00      	cmp	r3, #0
 8014778:	d11d      	bne.n	80147b6 <LoRaMacCryptoSetKey+0x62>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 801477a:	4b11      	ldr	r3, [pc, #68]	; (80147c0 <LoRaMacCryptoSetKey+0x6c>)
 801477c:	681b      	ldr	r3, [r3, #0]
 801477e:	789b      	ldrb	r3, [r3, #2]
 8014780:	210b      	movs	r1, #11
 8014782:	4618      	mov	r0, r3
 8014784:	f000 fa58 	bl	8014c38 <LoRaMacCryptoDeriveLifeTimeKey>
 8014788:	4603      	mov	r3, r0
 801478a:	2b00      	cmp	r3, #0
 801478c:	d001      	beq.n	8014792 <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801478e:	230e      	movs	r3, #14
 8014790:	e012      	b.n	80147b8 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8014792:	210c      	movs	r1, #12
 8014794:	2000      	movs	r0, #0
 8014796:	f000 fa4f 	bl	8014c38 <LoRaMacCryptoDeriveLifeTimeKey>
 801479a:	4603      	mov	r3, r0
 801479c:	2b00      	cmp	r3, #0
 801479e:	d001      	beq.n	80147a4 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80147a0:	230e      	movs	r3, #14
 80147a2:	e009      	b.n	80147b8 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 80147a4:	210a      	movs	r1, #10
 80147a6:	2000      	movs	r0, #0
 80147a8:	f000 fa46 	bl	8014c38 <LoRaMacCryptoDeriveLifeTimeKey>
 80147ac:	4603      	mov	r3, r0
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	d001      	beq.n	80147b6 <LoRaMacCryptoSetKey+0x62>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80147b2:	230e      	movs	r3, #14
 80147b4:	e000      	b.n	80147b8 <LoRaMacCryptoSetKey+0x64>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80147b6:	2300      	movs	r3, #0
}
 80147b8:	4618      	mov	r0, r3
 80147ba:	3708      	adds	r7, #8
 80147bc:	46bd      	mov	sp, r7
 80147be:	bd80      	pop	{r7, pc}
 80147c0:	20001acc 	.word	0x20001acc

080147c4 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 80147c4:	b580      	push	{r7, lr}
 80147c6:	b086      	sub	sp, #24
 80147c8:	af02      	add	r7, sp, #8
 80147ca:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d101      	bne.n	80147d6 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80147d2:	2309      	movs	r3, #9
 80147d4:	e02d      	b.n	8014832 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 80147d6:	2301      	movs	r3, #1
 80147d8:	73fb      	strb	r3, [r7, #15]
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 80147da:	4b18      	ldr	r3, [pc, #96]	; (801483c <LoRaMacCryptoPrepareJoinRequest+0x78>)
 80147dc:	681b      	ldr	r3, [r3, #0]
 80147de:	889a      	ldrh	r2, [r3, #4]
 80147e0:	3201      	adds	r2, #1
 80147e2:	b292      	uxth	r2, r2
 80147e4:	809a      	strh	r2, [r3, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 80147e6:	4b15      	ldr	r3, [pc, #84]	; (801483c <LoRaMacCryptoPrepareJoinRequest+0x78>)
 80147e8:	681b      	ldr	r3, [r3, #0]
 80147ea:	889a      	ldrh	r2, [r3, #4]
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80147f0:	6878      	ldr	r0, [r7, #4]
 80147f2:	f000 fc1b 	bl	801502c <LoRaMacSerializerJoinRequest>
 80147f6:	4603      	mov	r3, r0
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d001      	beq.n	8014800 <LoRaMacCryptoPrepareJoinRequest+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80147fc:	2310      	movs	r3, #16
 80147fe:	e018      	b.n	8014832 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	6819      	ldr	r1, [r3, #0]
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	3318      	adds	r3, #24
 8014808:	7bfa      	ldrb	r2, [r7, #15]
 801480a:	9300      	str	r3, [sp, #0]
 801480c:	4613      	mov	r3, r2
 801480e:	2213      	movs	r2, #19
 8014810:	2000      	movs	r0, #0
 8014812:	f7f7 fe31 	bl	800c478 <SecureElementComputeAesCmac>
 8014816:	4603      	mov	r3, r0
 8014818:	2b00      	cmp	r3, #0
 801481a:	d001      	beq.n	8014820 <LoRaMacCryptoPrepareJoinRequest+0x5c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801481c:	230e      	movs	r3, #14
 801481e:	e008      	b.n	8014832 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8014820:	6878      	ldr	r0, [r7, #4]
 8014822:	f000 fc03 	bl	801502c <LoRaMacSerializerJoinRequest>
 8014826:	4603      	mov	r3, r0
 8014828:	2b00      	cmp	r3, #0
 801482a:	d001      	beq.n	8014830 <LoRaMacCryptoPrepareJoinRequest+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801482c:	2310      	movs	r3, #16
 801482e:	e000      	b.n	8014832 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014830:	2300      	movs	r3, #0
}
 8014832:	4618      	mov	r0, r3
 8014834:	3710      	adds	r7, #16
 8014836:	46bd      	mov	sp, r7
 8014838:	bd80      	pop	{r7, pc}
 801483a:	bf00      	nop
 801483c:	20001acc 	.word	0x20001acc

08014840 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8014840:	b590      	push	{r4, r7, lr}
 8014842:	b097      	sub	sp, #92	; 0x5c
 8014844:	af04      	add	r7, sp, #16
 8014846:	4603      	mov	r3, r0
 8014848:	60b9      	str	r1, [r7, #8]
 801484a:	607a      	str	r2, [r7, #4]
 801484c:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	2b00      	cmp	r3, #0
 8014852:	d002      	beq.n	801485a <LoRaMacCryptoHandleJoinAccept+0x1a>
 8014854:	68bb      	ldr	r3, [r7, #8]
 8014856:	2b00      	cmp	r3, #0
 8014858:	d101      	bne.n	801485e <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801485a:	2309      	movs	r3, #9
 801485c:	e0d3      	b.n	8014a06 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801485e:	2312      	movs	r3, #18
 8014860:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8014864:	2300      	movs	r3, #0
 8014866:	617b      	str	r3, [r7, #20]
 8014868:	f107 0318 	add.w	r3, r7, #24
 801486c:	221d      	movs	r2, #29
 801486e:	2100      	movs	r1, #0
 8014870:	4618      	mov	r0, r3
 8014872:	f009 f987 	bl	801db84 <memset>
    uint8_t versionMinor         = 0;
 8014876:	2300      	movs	r3, #0
 8014878:	74fb      	strb	r3, [r7, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 801487a:	4b65      	ldr	r3, [pc, #404]	; (8014a10 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 801487c:	681b      	ldr	r3, [r3, #0]
 801487e:	889b      	ldrh	r3, [r3, #4]
 8014880:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* LORAMAC_VERSION */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	681c      	ldr	r4, [r3, #0]
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	791b      	ldrb	r3, [r3, #4]
 801488c:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8014890:	7bf8      	ldrb	r0, [r7, #15]
 8014892:	f107 0213 	add.w	r2, r7, #19
 8014896:	9202      	str	r2, [sp, #8]
 8014898:	f107 0214 	add.w	r2, r7, #20
 801489c:	9201      	str	r2, [sp, #4]
 801489e:	9300      	str	r3, [sp, #0]
 80148a0:	4623      	mov	r3, r4
 80148a2:	460a      	mov	r2, r1
 80148a4:	68b9      	ldr	r1, [r7, #8]
 80148a6:	f7f7 feed 	bl	800c684 <SecureElementProcessJoinAccept>
 80148aa:	4603      	mov	r3, r0
 80148ac:	2b00      	cmp	r3, #0
 80148ae:	d001      	beq.n	80148b4 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80148b0:	230e      	movs	r3, #14
 80148b2:	e0a8      	b.n	8014a06 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	6818      	ldr	r0, [r3, #0]
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	791b      	ldrb	r3, [r3, #4]
 80148bc:	b29a      	uxth	r2, r3
 80148be:	f107 0314 	add.w	r3, r7, #20
 80148c2:	4619      	mov	r1, r3
 80148c4:	f004 fb41 	bl	8018f4a <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80148c8:	6878      	ldr	r0, [r7, #4]
 80148ca:	f000 f9f0 	bl	8014cae <LoRaMacParserJoinAccept>
 80148ce:	4603      	mov	r3, r0
 80148d0:	2b00      	cmp	r3, #0
 80148d2:	d001      	beq.n	80148d8 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80148d4:	230f      	movs	r3, #15
 80148d6:	e096      	b.n	8014a06 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    uint32_t currentJoinNonce;
    bool isJoinNonceOk = false;
 80148d8:	2300      	movs	r3, #0
 80148da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	799b      	ldrb	r3, [r3, #6]
 80148e2:	63fb      	str	r3, [r7, #60]	; 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	79db      	ldrb	r3, [r3, #7]
 80148e8:	021b      	lsls	r3, r3, #8
 80148ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80148ec:	4313      	orrs	r3, r2
 80148ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	7a1b      	ldrb	r3, [r3, #8]
 80148f4:	041b      	lsls	r3, r3, #16
 80148f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80148f8:	4313      	orrs	r3, r2
 80148fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        isJoinNonceOk = IsJoinNonce11xOk( currentJoinNonce );
    }
    else
#endif /* LORAMAC_VERSION */
    {
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 80148fc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80148fe:	f7ff fe4b 	bl	8014598 <IsJoinNonce10xOk>
 8014902:	4603      	mov	r3, r0
 8014904:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    }

    if( isJoinNonceOk == true )
 8014908:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801490c:	2b00      	cmp	r3, #0
 801490e:	d010      	beq.n	8014932 <LoRaMacCryptoHandleJoinAccept+0xf2>
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8014910:	4b3f      	ldr	r3, [pc, #252]	; (8014a10 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8014912:	681b      	ldr	r3, [r3, #0]
 8014914:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014916:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 8014918:	7cfb      	ldrb	r3, [r7, #19]
 801491a:	210b      	movs	r1, #11
 801491c:	4618      	mov	r0, r3
 801491e:	f000 f98b 	bl	8014c38 <LoRaMacCryptoDeriveLifeTimeKey>
 8014922:	4603      	mov	r3, r0
 8014924:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014928:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801492c:	2b00      	cmp	r3, #0
 801492e:	d005      	beq.n	801493c <LoRaMacCryptoHandleJoinAccept+0xfc>
 8014930:	e001      	b.n	8014936 <LoRaMacCryptoHandleJoinAccept+0xf6>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8014932:	2303      	movs	r3, #3
 8014934:	e067      	b.n	8014a06 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        return retval;
 8014936:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801493a:	e064      	b.n	8014a06 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 801493c:	210c      	movs	r1, #12
 801493e:	2000      	movs	r0, #0
 8014940:	f000 f97a 	bl	8014c38 <LoRaMacCryptoDeriveLifeTimeKey>
 8014944:	4603      	mov	r3, r0
 8014946:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801494a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801494e:	2b00      	cmp	r3, #0
 8014950:	d002      	beq.n	8014958 <LoRaMacCryptoHandleJoinAccept+0x118>
    {
        return retval;
 8014952:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014956:	e056      	b.n	8014a06 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 8014958:	210a      	movs	r1, #10
 801495a:	2000      	movs	r0, #0
 801495c:	f000 f96c 	bl	8014c38 <LoRaMacCryptoDeriveLifeTimeKey>
 8014960:	4603      	mov	r3, r0
 8014962:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014966:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801496a:	2b00      	cmp	r3, #0
 801496c:	d002      	beq.n	8014974 <LoRaMacCryptoHandleJoinAccept+0x134>
    {
        return retval;
 801496e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014972:	e048      	b.n	8014a06 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	7a5b      	ldrb	r3, [r3, #9]
 8014978:	63bb      	str	r3, [r7, #56]	; 0x38
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	7a9b      	ldrb	r3, [r3, #10]
 801497e:	021b      	lsls	r3, r3, #8
 8014980:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014982:	4313      	orrs	r3, r2
 8014984:	63bb      	str	r3, [r7, #56]	; 0x38
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	7adb      	ldrb	r3, [r3, #11]
 801498a:	041b      	lsls	r3, r3, #16
 801498c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801498e:	4313      	orrs	r3, r2
 8014990:	63bb      	str	r3, [r7, #56]	; 0x38

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8014992:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014996:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014998:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801499a:	2009      	movs	r0, #9
 801499c:	f7ff fcd8 	bl	8014350 <DeriveSessionKey10x>
 80149a0:	4603      	mov	r3, r0
 80149a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80149a6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	d002      	beq.n	80149b4 <LoRaMacCryptoHandleJoinAccept+0x174>
        {
            return retval;
 80149ae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80149b2:	e028      	b.n	8014a06 <LoRaMacCryptoHandleJoinAccept+0x1c6>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 80149b4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80149b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80149ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80149bc:	2008      	movs	r0, #8
 80149be:	f7ff fcc7 	bl	8014350 <DeriveSessionKey10x>
 80149c2:	4603      	mov	r3, r0
 80149c4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* LORAMAC_VERSION */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80149c8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	d002      	beq.n	80149d6 <LoRaMacCryptoHandleJoinAccept+0x196>
        {
            return retval;
 80149d0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80149d4:	e017      	b.n	8014a06 <LoRaMacCryptoHandleJoinAccept+0x1c6>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 80149d6:	4b0e      	ldr	r3, [pc, #56]	; (8014a10 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 80149d8:	681b      	ldr	r3, [r3, #0]
 80149da:	7cfa      	ldrb	r2, [r7, #19]
 80149dc:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    RJcount0 = 0;
#endif /* LORAMAC_VERSION */
    CryptoNvm->FCntList.FCntUp = 0;
 80149de:	4b0c      	ldr	r3, [pc, #48]	; (8014a10 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 80149e0:	681b      	ldr	r3, [r3, #0]
 80149e2:	2200      	movs	r2, #0
 80149e4:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 80149e6:	4b0a      	ldr	r3, [pc, #40]	; (8014a10 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 80149e8:	681b      	ldr	r3, [r3, #0]
 80149ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80149ee:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 80149f0:	4b07      	ldr	r3, [pc, #28]	; (8014a10 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 80149f2:	681b      	ldr	r3, [r3, #0]
 80149f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80149f8:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 80149fa:	4b05      	ldr	r3, [pc, #20]	; (8014a10 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 80149fc:	681b      	ldr	r3, [r3, #0]
 80149fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014a02:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8014a04:	2300      	movs	r3, #0
}
 8014a06:	4618      	mov	r0, r3
 8014a08:	374c      	adds	r7, #76	; 0x4c
 8014a0a:	46bd      	mov	sp, r7
 8014a0c:	bd90      	pop	{r4, r7, pc}
 8014a0e:	bf00      	nop
 8014a10:	20001acc 	.word	0x20001acc

08014a14 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8014a14:	b590      	push	{r4, r7, lr}
 8014a16:	b08b      	sub	sp, #44	; 0x2c
 8014a18:	af04      	add	r7, sp, #16
 8014a1a:	60f8      	str	r0, [r7, #12]
 8014a1c:	607b      	str	r3, [r7, #4]
 8014a1e:	460b      	mov	r3, r1
 8014a20:	72fb      	strb	r3, [r7, #11]
 8014a22:	4613      	mov	r3, r2
 8014a24:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8014a26:	2312      	movs	r3, #18
 8014a28:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8014a2a:	2309      	movs	r3, #9
 8014a2c:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	d101      	bne.n	8014a38 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014a34:	2309      	movs	r3, #9
 8014a36:	e05f      	b.n	8014af8 <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8014a38:	4b31      	ldr	r3, [pc, #196]	; (8014b00 <LoRaMacCryptoSecureMessage+0xec>)
 8014a3a:	681b      	ldr	r3, [r3, #0]
 8014a3c:	68db      	ldr	r3, [r3, #12]
 8014a3e:	68fa      	ldr	r2, [r7, #12]
 8014a40:	429a      	cmp	r2, r3
 8014a42:	d201      	bcs.n	8014a48 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8014a44:	2306      	movs	r3, #6
 8014a46:	e057      	b.n	8014af8 <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d101      	bne.n	8014a56 <LoRaMacCryptoSecureMessage+0x42>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8014a52:	2308      	movs	r3, #8
 8014a54:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8014a56:	4b2a      	ldr	r3, [pc, #168]	; (8014b00 <LoRaMacCryptoSecureMessage+0xec>)
 8014a58:	681b      	ldr	r3, [r3, #0]
 8014a5a:	68db      	ldr	r3, [r3, #12]
 8014a5c:	68fa      	ldr	r2, [r7, #12]
 8014a5e:	429a      	cmp	r2, r3
 8014a60:	d916      	bls.n	8014a90 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014a6c:	b219      	sxth	r1, r3
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	689c      	ldr	r4, [r3, #8]
 8014a72:	7dfa      	ldrb	r2, [r7, #23]
 8014a74:	68fb      	ldr	r3, [r7, #12]
 8014a76:	9301      	str	r3, [sp, #4]
 8014a78:	2300      	movs	r3, #0
 8014a7a:	9300      	str	r3, [sp, #0]
 8014a7c:	4623      	mov	r3, r4
 8014a7e:	f7ff fa73 	bl	8013f68 <PayloadEncrypt>
 8014a82:	4603      	mov	r3, r0
 8014a84:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014a86:	7dbb      	ldrb	r3, [r7, #22]
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	d001      	beq.n	8014a90 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8014a8c:	7dbb      	ldrb	r3, [r7, #22]
 8014a8e:	e033      	b.n	8014af8 <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8014a90:	6878      	ldr	r0, [r7, #4]
 8014a92:	f000 fb4d 	bl	8015130 <LoRaMacSerializerData>
 8014a96:	4603      	mov	r3, r0
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	d001      	beq.n	8014aa0 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8014a9c:	2310      	movs	r3, #16
 8014a9e:	e02b      	b.n	8014af8 <LoRaMacCryptoSecureMessage+0xe4>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8014aa0:	2308      	movs	r3, #8
 8014aa2:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	6818      	ldr	r0, [r3, #0]
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	791b      	ldrb	r3, [r3, #4]
 8014aac:	b29b      	uxth	r3, r3
 8014aae:	3b04      	subs	r3, #4
 8014ab0:	b299      	uxth	r1, r3
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	689b      	ldr	r3, [r3, #8]
 8014ab6:	687a      	ldr	r2, [r7, #4]
 8014ab8:	322c      	adds	r2, #44	; 0x2c
 8014aba:	7dfc      	ldrb	r4, [r7, #23]
 8014abc:	9203      	str	r2, [sp, #12]
 8014abe:	68fa      	ldr	r2, [r7, #12]
 8014ac0:	9202      	str	r2, [sp, #8]
 8014ac2:	9301      	str	r3, [sp, #4]
 8014ac4:	2300      	movs	r3, #0
 8014ac6:	9300      	str	r3, [sp, #0]
 8014ac8:	2300      	movs	r3, #0
 8014aca:	4622      	mov	r2, r4
 8014acc:	f7ff fb4d 	bl	801416a <ComputeCmacB0>
 8014ad0:	4603      	mov	r3, r0
 8014ad2:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014ad4:	7dbb      	ldrb	r3, [r7, #22]
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d001      	beq.n	8014ade <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 8014ada:	7dbb      	ldrb	r3, [r7, #22]
 8014adc:	e00c      	b.n	8014af8 <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8014ade:	6878      	ldr	r0, [r7, #4]
 8014ae0:	f000 fb26 	bl	8015130 <LoRaMacSerializerData>
 8014ae4:	4603      	mov	r3, r0
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	d001      	beq.n	8014aee <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8014aea:	2310      	movs	r3, #16
 8014aec:	e004      	b.n	8014af8 <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8014aee:	4b04      	ldr	r3, [pc, #16]	; (8014b00 <LoRaMacCryptoSecureMessage+0xec>)
 8014af0:	681b      	ldr	r3, [r3, #0]
 8014af2:	68fa      	ldr	r2, [r7, #12]
 8014af4:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8014af6:	2300      	movs	r3, #0
}
 8014af8:	4618      	mov	r0, r3
 8014afa:	371c      	adds	r7, #28
 8014afc:	46bd      	mov	sp, r7
 8014afe:	bd90      	pop	{r4, r7, pc}
 8014b00:	20001acc 	.word	0x20001acc

08014b04 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8014b04:	b590      	push	{r4, r7, lr}
 8014b06:	b08b      	sub	sp, #44	; 0x2c
 8014b08:	af04      	add	r7, sp, #16
 8014b0a:	60b9      	str	r1, [r7, #8]
 8014b0c:	607b      	str	r3, [r7, #4]
 8014b0e:	4603      	mov	r3, r0
 8014b10:	73fb      	strb	r3, [r7, #15]
 8014b12:	4613      	mov	r3, r2
 8014b14:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8014b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d101      	bne.n	8014b20 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014b1c:	2309      	movs	r3, #9
 8014b1e:	e084      	b.n	8014c2a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8014b20:	7bbb      	ldrb	r3, [r7, #14]
 8014b22:	6879      	ldr	r1, [r7, #4]
 8014b24:	4618      	mov	r0, r3
 8014b26:	f7ff fc9f 	bl	8014468 <CheckFCntDown>
 8014b2a:	4603      	mov	r3, r0
 8014b2c:	f083 0301 	eor.w	r3, r3, #1
 8014b30:	b2db      	uxtb	r3, r3
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d001      	beq.n	8014b3a <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8014b36:	2306      	movs	r3, #6
 8014b38:	e077      	b.n	8014c2a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8014b3a:	2312      	movs	r3, #18
 8014b3c:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8014b3e:	2309      	movs	r3, #9
 8014b40:	75fb      	strb	r3, [r7, #23]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8014b42:	2308      	movs	r3, #8
 8014b44:	753b      	strb	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8014b46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014b48:	f000 f97c 	bl	8014e44 <LoRaMacParserData>
 8014b4c:	4603      	mov	r3, r0
 8014b4e:	2b00      	cmp	r3, #0
 8014b50:	d001      	beq.n	8014b56 <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8014b52:	230f      	movs	r3, #15
 8014b54:	e069      	b.n	8014c2a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8014b56:	f107 0210 	add.w	r2, r7, #16
 8014b5a:	7bfb      	ldrb	r3, [r7, #15]
 8014b5c:	4611      	mov	r1, r2
 8014b5e:	4618      	mov	r0, r3
 8014b60:	f7ff fbd0 	bl	8014304 <GetKeyAddrItem>
 8014b64:	4603      	mov	r3, r0
 8014b66:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014b68:	7d7b      	ldrb	r3, [r7, #21]
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d001      	beq.n	8014b72 <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 8014b6e:	7d7b      	ldrb	r3, [r7, #21]
 8014b70:	e05b      	b.n	8014c2a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8014b72:	693b      	ldr	r3, [r7, #16]
 8014b74:	785b      	ldrb	r3, [r3, #1]
 8014b76:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8014b78:	693b      	ldr	r3, [r7, #16]
 8014b7a:	789b      	ldrb	r3, [r3, #2]
 8014b7c:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8014b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b80:	689b      	ldr	r3, [r3, #8]
 8014b82:	68ba      	ldr	r2, [r7, #8]
 8014b84:	429a      	cmp	r2, r3
 8014b86:	d001      	beq.n	8014b8c <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8014b88:	2302      	movs	r3, #2
 8014b8a:	e04e      	b.n	8014c2a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8014b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b8e:	7b1b      	ldrb	r3, [r3, #12]
 8014b90:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8014b94:	b2db      	uxtb	r3, r3
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	bf14      	ite	ne
 8014b9a:	2301      	movne	r3, #1
 8014b9c:	2300      	moveq	r3, #0
 8014b9e:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8014ba0:	4b24      	ldr	r3, [pc, #144]	; (8014c34 <LoRaMacCryptoUnsecureMessage+0x130>)
 8014ba2:	681b      	ldr	r3, [r3, #0]
 8014ba4:	789b      	ldrb	r3, [r3, #2]
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	d101      	bne.n	8014bae <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8014baa:	2300      	movs	r3, #0
 8014bac:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8014bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bb0:	6818      	ldr	r0, [r3, #0]
 8014bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bb4:	791b      	ldrb	r3, [r3, #4]
 8014bb6:	b29b      	uxth	r3, r3
 8014bb8:	3b04      	subs	r3, #4
 8014bba:	b299      	uxth	r1, r3
 8014bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014bc0:	7dbc      	ldrb	r4, [r7, #22]
 8014bc2:	7d3a      	ldrb	r2, [r7, #20]
 8014bc4:	9303      	str	r3, [sp, #12]
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	9302      	str	r3, [sp, #8]
 8014bca:	68bb      	ldr	r3, [r7, #8]
 8014bcc:	9301      	str	r3, [sp, #4]
 8014bce:	2301      	movs	r3, #1
 8014bd0:	9300      	str	r3, [sp, #0]
 8014bd2:	4623      	mov	r3, r4
 8014bd4:	f7ff fb07 	bl	80141e6 <VerifyCmacB0>
 8014bd8:	4603      	mov	r3, r0
 8014bda:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014bdc:	7d7b      	ldrb	r3, [r7, #21]
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d001      	beq.n	8014be6 <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 8014be2:	7d7b      	ldrb	r3, [r7, #21]
 8014be4:	e021      	b.n	8014c2a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8014be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014be8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d101      	bne.n	8014bf4 <LoRaMacCryptoUnsecureMessage+0xf0>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8014bf0:	2308      	movs	r3, #8
 8014bf2:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8014bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bf6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8014bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bfa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014bfe:	b219      	sxth	r1, r3
 8014c00:	7dfa      	ldrb	r2, [r7, #23]
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	9301      	str	r3, [sp, #4]
 8014c06:	2301      	movs	r3, #1
 8014c08:	9300      	str	r3, [sp, #0]
 8014c0a:	68bb      	ldr	r3, [r7, #8]
 8014c0c:	f7ff f9ac 	bl	8013f68 <PayloadEncrypt>
 8014c10:	4603      	mov	r3, r0
 8014c12:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014c14:	7d7b      	ldrb	r3, [r7, #21]
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d001      	beq.n	8014c1e <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 8014c1a:	7d7b      	ldrb	r3, [r7, #21]
 8014c1c:	e005      	b.n	8014c2a <LoRaMacCryptoUnsecureMessage+0x126>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 8014c1e:	7bbb      	ldrb	r3, [r7, #14]
 8014c20:	6879      	ldr	r1, [r7, #4]
 8014c22:	4618      	mov	r0, r3
 8014c24:	f7ff fc44 	bl	80144b0 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8014c28:	2300      	movs	r3, #0
}
 8014c2a:	4618      	mov	r0, r3
 8014c2c:	371c      	adds	r7, #28
 8014c2e:	46bd      	mov	sp, r7
 8014c30:	bd90      	pop	{r4, r7, pc}
 8014c32:	bf00      	nop
 8014c34:	20001acc 	.word	0x20001acc

08014c38 <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8014c38:	b580      	push	{r7, lr}
 8014c3a:	b088      	sub	sp, #32
 8014c3c:	af00      	add	r7, sp, #0
 8014c3e:	4603      	mov	r3, r0
 8014c40:	460a      	mov	r2, r1
 8014c42:	71fb      	strb	r3, [r7, #7]
 8014c44:	4613      	mov	r3, r2
 8014c46:	71bb      	strb	r3, [r7, #6]
    uint8_t compBase[16] = { 0 };
 8014c48:	2300      	movs	r3, #0
 8014c4a:	60fb      	str	r3, [r7, #12]
 8014c4c:	f107 0310 	add.w	r3, r7, #16
 8014c50:	2200      	movs	r2, #0
 8014c52:	601a      	str	r2, [r3, #0]
 8014c54:	605a      	str	r2, [r3, #4]
 8014c56:	609a      	str	r2, [r3, #8]
    KeyIdentifier_t rootKeyId = APP_KEY;
 8014c58:	2300      	movs	r3, #0
 8014c5a:	77fb      	strb	r3, [r7, #31]
    switch( keyID )
 8014c5c:	79bb      	ldrb	r3, [r7, #6]
 8014c5e:	2b0c      	cmp	r3, #12
 8014c60:	d00b      	beq.n	8014c7a <LoRaMacCryptoDeriveLifeTimeKey+0x42>
 8014c62:	2b0c      	cmp	r3, #12
 8014c64:	dc0f      	bgt.n	8014c86 <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
 8014c66:	2b0a      	cmp	r3, #10
 8014c68:	d00a      	beq.n	8014c80 <LoRaMacCryptoDeriveLifeTimeKey+0x48>
 8014c6a:	2b0b      	cmp	r3, #11
 8014c6c:	d10b      	bne.n	8014c86 <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
    {
        case MC_ROOT_KEY:
            if( versionMinor == 1 )
 8014c6e:	79fb      	ldrb	r3, [r7, #7]
 8014c70:	2b01      	cmp	r3, #1
 8014c72:	d10a      	bne.n	8014c8a <LoRaMacCryptoDeriveLifeTimeKey+0x52>
            {
                compBase[0] = 0x20;
 8014c74:	2320      	movs	r3, #32
 8014c76:	733b      	strb	r3, [r7, #12]
            }
            break;
 8014c78:	e007      	b.n	8014c8a <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        case MC_KE_KEY:
            rootKeyId = MC_ROOT_KEY;
 8014c7a:	230b      	movs	r3, #11
 8014c7c:	77fb      	strb	r3, [r7, #31]
            break;
 8014c7e:	e005      	b.n	8014c8c <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        case DATABLOCK_INT_KEY:
            compBase[0] = 0x30;
 8014c80:	2330      	movs	r3, #48	; 0x30
 8014c82:	733b      	strb	r3, [r7, #12]
            break;
 8014c84:	e002      	b.n	8014c8c <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8014c86:	230a      	movs	r3, #10
 8014c88:	e00d      	b.n	8014ca6 <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
            break;
 8014c8a:	bf00      	nop
    }

    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 8014c8c:	79ba      	ldrb	r2, [r7, #6]
 8014c8e:	7ff9      	ldrb	r1, [r7, #31]
 8014c90:	f107 030c 	add.w	r3, r7, #12
 8014c94:	4618      	mov	r0, r3
 8014c96:	f7f7 fcb5 	bl	800c604 <SecureElementDeriveAndStoreKey>
 8014c9a:	4603      	mov	r3, r0
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	d001      	beq.n	8014ca4 <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014ca0:	230e      	movs	r3, #14
 8014ca2:	e000      	b.n	8014ca6 <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014ca4:	2300      	movs	r3, #0
}
 8014ca6:	4618      	mov	r0, r3
 8014ca8:	3720      	adds	r7, #32
 8014caa:	46bd      	mov	sp, r7
 8014cac:	bd80      	pop	{r7, pc}

08014cae <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8014cae:	b580      	push	{r7, lr}
 8014cb0:	b084      	sub	sp, #16
 8014cb2:	af00      	add	r7, sp, #0
 8014cb4:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d003      	beq.n	8014cc4 <LoRaMacParserJoinAccept+0x16>
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	681b      	ldr	r3, [r3, #0]
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	d101      	bne.n	8014cc8 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8014cc4:	2302      	movs	r3, #2
 8014cc6:	e0b9      	b.n	8014e3c <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8014cc8:	2300      	movs	r3, #0
 8014cca:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	681a      	ldr	r2, [r3, #0]
 8014cd0:	89fb      	ldrh	r3, [r7, #14]
 8014cd2:	1c59      	adds	r1, r3, #1
 8014cd4:	81f9      	strh	r1, [r7, #14]
 8014cd6:	4413      	add	r3, r2
 8014cd8:	781a      	ldrb	r2, [r3, #0]
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	1d98      	adds	r0, r3, #6
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	681a      	ldr	r2, [r3, #0]
 8014ce6:	89fb      	ldrh	r3, [r7, #14]
 8014ce8:	4413      	add	r3, r2
 8014cea:	2203      	movs	r2, #3
 8014cec:	4619      	mov	r1, r3
 8014cee:	f004 f92c 	bl	8018f4a <memcpy1>
    bufItr = bufItr + 3;
 8014cf2:	89fb      	ldrh	r3, [r7, #14]
 8014cf4:	3303      	adds	r3, #3
 8014cf6:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	f103 0009 	add.w	r0, r3, #9
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	681a      	ldr	r2, [r3, #0]
 8014d02:	89fb      	ldrh	r3, [r7, #14]
 8014d04:	4413      	add	r3, r2
 8014d06:	2203      	movs	r2, #3
 8014d08:	4619      	mov	r1, r3
 8014d0a:	f004 f91e 	bl	8018f4a <memcpy1>
    bufItr = bufItr + 3;
 8014d0e:	89fb      	ldrh	r3, [r7, #14]
 8014d10:	3303      	adds	r3, #3
 8014d12:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	681a      	ldr	r2, [r3, #0]
 8014d18:	89fb      	ldrh	r3, [r7, #14]
 8014d1a:	1c59      	adds	r1, r3, #1
 8014d1c:	81f9      	strh	r1, [r7, #14]
 8014d1e:	4413      	add	r3, r2
 8014d20:	781b      	ldrb	r3, [r3, #0]
 8014d22:	461a      	mov	r2, r3
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	681a      	ldr	r2, [r3, #0]
 8014d2c:	89fb      	ldrh	r3, [r7, #14]
 8014d2e:	1c59      	adds	r1, r3, #1
 8014d30:	81f9      	strh	r1, [r7, #14]
 8014d32:	4413      	add	r3, r2
 8014d34:	781b      	ldrb	r3, [r3, #0]
 8014d36:	021a      	lsls	r2, r3, #8
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	68db      	ldr	r3, [r3, #12]
 8014d3c:	431a      	orrs	r2, r3
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	681a      	ldr	r2, [r3, #0]
 8014d46:	89fb      	ldrh	r3, [r7, #14]
 8014d48:	1c59      	adds	r1, r3, #1
 8014d4a:	81f9      	strh	r1, [r7, #14]
 8014d4c:	4413      	add	r3, r2
 8014d4e:	781b      	ldrb	r3, [r3, #0]
 8014d50:	041a      	lsls	r2, r3, #16
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	68db      	ldr	r3, [r3, #12]
 8014d56:	431a      	orrs	r2, r3
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	681a      	ldr	r2, [r3, #0]
 8014d60:	89fb      	ldrh	r3, [r7, #14]
 8014d62:	1c59      	adds	r1, r3, #1
 8014d64:	81f9      	strh	r1, [r7, #14]
 8014d66:	4413      	add	r3, r2
 8014d68:	781b      	ldrb	r3, [r3, #0]
 8014d6a:	061a      	lsls	r2, r3, #24
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	68db      	ldr	r3, [r3, #12]
 8014d70:	431a      	orrs	r2, r3
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	681a      	ldr	r2, [r3, #0]
 8014d7a:	89fb      	ldrh	r3, [r7, #14]
 8014d7c:	1c59      	adds	r1, r3, #1
 8014d7e:	81f9      	strh	r1, [r7, #14]
 8014d80:	4413      	add	r3, r2
 8014d82:	781a      	ldrb	r2, [r3, #0]
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	681a      	ldr	r2, [r3, #0]
 8014d8c:	89fb      	ldrh	r3, [r7, #14]
 8014d8e:	1c59      	adds	r1, r3, #1
 8014d90:	81f9      	strh	r1, [r7, #14]
 8014d92:	4413      	add	r3, r2
 8014d94:	781a      	ldrb	r2, [r3, #0]
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	791b      	ldrb	r3, [r3, #4]
 8014d9e:	1f1a      	subs	r2, r3, #4
 8014da0:	89fb      	ldrh	r3, [r7, #14]
 8014da2:	1ad3      	subs	r3, r2, r3
 8014da4:	2b10      	cmp	r3, #16
 8014da6:	d10e      	bne.n	8014dc6 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	f103 0012 	add.w	r0, r3, #18
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	681a      	ldr	r2, [r3, #0]
 8014db2:	89fb      	ldrh	r3, [r7, #14]
 8014db4:	4413      	add	r3, r2
 8014db6:	2210      	movs	r2, #16
 8014db8:	4619      	mov	r1, r3
 8014dba:	f004 f8c6 	bl	8018f4a <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8014dbe:	89fb      	ldrh	r3, [r7, #14]
 8014dc0:	3310      	adds	r3, #16
 8014dc2:	81fb      	strh	r3, [r7, #14]
 8014dc4:	e008      	b.n	8014dd8 <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	791b      	ldrb	r3, [r3, #4]
 8014dca:	1f1a      	subs	r2, r3, #4
 8014dcc:	89fb      	ldrh	r3, [r7, #14]
 8014dce:	1ad3      	subs	r3, r2, r3
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	dd01      	ble.n	8014dd8 <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8014dd4:	2301      	movs	r3, #1
 8014dd6:	e031      	b.n	8014e3c <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	681a      	ldr	r2, [r3, #0]
 8014ddc:	89fb      	ldrh	r3, [r7, #14]
 8014dde:	1c59      	adds	r1, r3, #1
 8014de0:	81f9      	strh	r1, [r7, #14]
 8014de2:	4413      	add	r3, r2
 8014de4:	781b      	ldrb	r3, [r3, #0]
 8014de6:	461a      	mov	r2, r3
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	681a      	ldr	r2, [r3, #0]
 8014df0:	89fb      	ldrh	r3, [r7, #14]
 8014df2:	1c59      	adds	r1, r3, #1
 8014df4:	81f9      	strh	r1, [r7, #14]
 8014df6:	4413      	add	r3, r2
 8014df8:	781b      	ldrb	r3, [r3, #0]
 8014dfa:	021a      	lsls	r2, r3, #8
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e00:	431a      	orrs	r2, r3
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	681a      	ldr	r2, [r3, #0]
 8014e0a:	89fb      	ldrh	r3, [r7, #14]
 8014e0c:	1c59      	adds	r1, r3, #1
 8014e0e:	81f9      	strh	r1, [r7, #14]
 8014e10:	4413      	add	r3, r2
 8014e12:	781b      	ldrb	r3, [r3, #0]
 8014e14:	041a      	lsls	r2, r3, #16
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e1a:	431a      	orrs	r2, r3
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	681a      	ldr	r2, [r3, #0]
 8014e24:	89fb      	ldrh	r3, [r7, #14]
 8014e26:	1c59      	adds	r1, r3, #1
 8014e28:	81f9      	strh	r1, [r7, #14]
 8014e2a:	4413      	add	r3, r2
 8014e2c:	781b      	ldrb	r3, [r3, #0]
 8014e2e:	061a      	lsls	r2, r3, #24
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e34:	431a      	orrs	r2, r3
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 8014e3a:	2300      	movs	r3, #0
}
 8014e3c:	4618      	mov	r0, r3
 8014e3e:	3710      	adds	r7, #16
 8014e40:	46bd      	mov	sp, r7
 8014e42:	bd80      	pop	{r7, pc}

08014e44 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8014e44:	b580      	push	{r7, lr}
 8014e46:	b084      	sub	sp, #16
 8014e48:	af00      	add	r7, sp, #0
 8014e4a:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d003      	beq.n	8014e5a <LoRaMacParserData+0x16>
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	681b      	ldr	r3, [r3, #0]
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	d101      	bne.n	8014e5e <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8014e5a:	2302      	movs	r3, #2
 8014e5c:	e0e2      	b.n	8015024 <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 8014e5e:	2300      	movs	r3, #0
 8014e60:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	681a      	ldr	r2, [r3, #0]
 8014e66:	89fb      	ldrh	r3, [r7, #14]
 8014e68:	1c59      	adds	r1, r3, #1
 8014e6a:	81f9      	strh	r1, [r7, #14]
 8014e6c:	4413      	add	r3, r2
 8014e6e:	781a      	ldrb	r2, [r3, #0]
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	681a      	ldr	r2, [r3, #0]
 8014e78:	89fb      	ldrh	r3, [r7, #14]
 8014e7a:	1c59      	adds	r1, r3, #1
 8014e7c:	81f9      	strh	r1, [r7, #14]
 8014e7e:	4413      	add	r3, r2
 8014e80:	781b      	ldrb	r3, [r3, #0]
 8014e82:	461a      	mov	r2, r3
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	681a      	ldr	r2, [r3, #0]
 8014e8c:	89fb      	ldrh	r3, [r7, #14]
 8014e8e:	1c59      	adds	r1, r3, #1
 8014e90:	81f9      	strh	r1, [r7, #14]
 8014e92:	4413      	add	r3, r2
 8014e94:	781b      	ldrb	r3, [r3, #0]
 8014e96:	021a      	lsls	r2, r3, #8
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	689b      	ldr	r3, [r3, #8]
 8014e9c:	431a      	orrs	r2, r3
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	681a      	ldr	r2, [r3, #0]
 8014ea6:	89fb      	ldrh	r3, [r7, #14]
 8014ea8:	1c59      	adds	r1, r3, #1
 8014eaa:	81f9      	strh	r1, [r7, #14]
 8014eac:	4413      	add	r3, r2
 8014eae:	781b      	ldrb	r3, [r3, #0]
 8014eb0:	041a      	lsls	r2, r3, #16
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	689b      	ldr	r3, [r3, #8]
 8014eb6:	431a      	orrs	r2, r3
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	681a      	ldr	r2, [r3, #0]
 8014ec0:	89fb      	ldrh	r3, [r7, #14]
 8014ec2:	1c59      	adds	r1, r3, #1
 8014ec4:	81f9      	strh	r1, [r7, #14]
 8014ec6:	4413      	add	r3, r2
 8014ec8:	781b      	ldrb	r3, [r3, #0]
 8014eca:	061a      	lsls	r2, r3, #24
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	689b      	ldr	r3, [r3, #8]
 8014ed0:	431a      	orrs	r2, r3
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	681a      	ldr	r2, [r3, #0]
 8014eda:	89fb      	ldrh	r3, [r7, #14]
 8014edc:	1c59      	adds	r1, r3, #1
 8014ede:	81f9      	strh	r1, [r7, #14]
 8014ee0:	4413      	add	r3, r2
 8014ee2:	781a      	ldrb	r2, [r3, #0]
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	681a      	ldr	r2, [r3, #0]
 8014eec:	89fb      	ldrh	r3, [r7, #14]
 8014eee:	1c59      	adds	r1, r3, #1
 8014ef0:	81f9      	strh	r1, [r7, #14]
 8014ef2:	4413      	add	r3, r2
 8014ef4:	781b      	ldrb	r3, [r3, #0]
 8014ef6:	b29a      	uxth	r2, r3
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	681a      	ldr	r2, [r3, #0]
 8014f00:	89fb      	ldrh	r3, [r7, #14]
 8014f02:	1c59      	adds	r1, r3, #1
 8014f04:	81f9      	strh	r1, [r7, #14]
 8014f06:	4413      	add	r3, r2
 8014f08:	781b      	ldrb	r3, [r3, #0]
 8014f0a:	0219      	lsls	r1, r3, #8
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	89db      	ldrh	r3, [r3, #14]
 8014f10:	b21a      	sxth	r2, r3
 8014f12:	b20b      	sxth	r3, r1
 8014f14:	4313      	orrs	r3, r2
 8014f16:	b21b      	sxth	r3, r3
 8014f18:	b29a      	uxth	r2, r3
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	81da      	strh	r2, [r3, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	f103 0010 	add.w	r0, r3, #16
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	681a      	ldr	r2, [r3, #0]
 8014f28:	89fb      	ldrh	r3, [r7, #14]
 8014f2a:	18d1      	adds	r1, r2, r3
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	7b1b      	ldrb	r3, [r3, #12]
 8014f30:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014f34:	b2db      	uxtb	r3, r3
 8014f36:	b29b      	uxth	r3, r3
 8014f38:	461a      	mov	r2, r3
 8014f3a:	f004 f806 	bl	8018f4a <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	7b1b      	ldrb	r3, [r3, #12]
 8014f42:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014f46:	b2db      	uxtb	r3, r3
 8014f48:	b29a      	uxth	r2, r3
 8014f4a:	89fb      	ldrh	r3, [r7, #14]
 8014f4c:	4413      	add	r3, r2
 8014f4e:	81fb      	strh	r3, [r7, #14]

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	2200      	movs	r2, #0
 8014f54:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	2200      	movs	r2, #0
 8014f5c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	791b      	ldrb	r3, [r3, #4]
 8014f64:	461a      	mov	r2, r3
 8014f66:	89fb      	ldrh	r3, [r7, #14]
 8014f68:	1ad3      	subs	r3, r2, r3
 8014f6a:	2b04      	cmp	r3, #4
 8014f6c:	dd28      	ble.n	8014fc0 <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	681a      	ldr	r2, [r3, #0]
 8014f72:	89fb      	ldrh	r3, [r7, #14]
 8014f74:	1c59      	adds	r1, r3, #1
 8014f76:	81f9      	strh	r1, [r7, #14]
 8014f78:	4413      	add	r3, r2
 8014f7a:	781a      	ldrb	r2, [r3, #0]
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	791a      	ldrb	r2, [r3, #4]
 8014f86:	89fb      	ldrh	r3, [r7, #14]
 8014f88:	b2db      	uxtb	r3, r3
 8014f8a:	1ad3      	subs	r3, r2, r3
 8014f8c:	b2db      	uxtb	r3, r3
 8014f8e:	3b04      	subs	r3, #4
 8014f90:	b2da      	uxtb	r2, r3
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	681a      	ldr	r2, [r3, #0]
 8014fa0:	89fb      	ldrh	r3, [r7, #14]
 8014fa2:	18d1      	adds	r1, r2, r3
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014faa:	b29b      	uxth	r3, r3
 8014fac:	461a      	mov	r2, r3
 8014fae:	f003 ffcc 	bl	8018f4a <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014fb8:	b29a      	uxth	r2, r3
 8014fba:	89fb      	ldrh	r3, [r7, #14]
 8014fbc:	4413      	add	r3, r2
 8014fbe:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	681a      	ldr	r2, [r3, #0]
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	791b      	ldrb	r3, [r3, #4]
 8014fc8:	3b04      	subs	r3, #4
 8014fca:	4413      	add	r3, r2
 8014fcc:	781b      	ldrb	r3, [r3, #0]
 8014fce:	461a      	mov	r2, r3
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	6819      	ldr	r1, [r3, #0]
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	791b      	ldrb	r3, [r3, #4]
 8014fe0:	3b03      	subs	r3, #3
 8014fe2:	440b      	add	r3, r1
 8014fe4:	781b      	ldrb	r3, [r3, #0]
 8014fe6:	021b      	lsls	r3, r3, #8
 8014fe8:	431a      	orrs	r2, r3
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	6819      	ldr	r1, [r3, #0]
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	791b      	ldrb	r3, [r3, #4]
 8014ffa:	3b02      	subs	r3, #2
 8014ffc:	440b      	add	r3, r1
 8014ffe:	781b      	ldrb	r3, [r3, #0]
 8015000:	041b      	lsls	r3, r3, #16
 8015002:	431a      	orrs	r2, r3
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	6819      	ldr	r1, [r3, #0]
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	791b      	ldrb	r3, [r3, #4]
 8015014:	3b01      	subs	r3, #1
 8015016:	440b      	add	r3, r1
 8015018:	781b      	ldrb	r3, [r3, #0]
 801501a:	061b      	lsls	r3, r3, #24
 801501c:	431a      	orrs	r2, r3
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8015022:	2300      	movs	r3, #0
}
 8015024:	4618      	mov	r0, r3
 8015026:	3710      	adds	r7, #16
 8015028:	46bd      	mov	sp, r7
 801502a:	bd80      	pop	{r7, pc}

0801502c <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 801502c:	b580      	push	{r7, lr}
 801502e:	b084      	sub	sp, #16
 8015030:	af00      	add	r7, sp, #0
 8015032:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	2b00      	cmp	r3, #0
 8015038:	d003      	beq.n	8015042 <LoRaMacSerializerJoinRequest+0x16>
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	681b      	ldr	r3, [r3, #0]
 801503e:	2b00      	cmp	r3, #0
 8015040:	d101      	bne.n	8015046 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8015042:	2301      	movs	r3, #1
 8015044:	e070      	b.n	8015128 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8015046:	2300      	movs	r3, #0
 8015048:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	791b      	ldrb	r3, [r3, #4]
 801504e:	2b16      	cmp	r3, #22
 8015050:	d801      	bhi.n	8015056 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8015052:	2302      	movs	r3, #2
 8015054:	e068      	b.n	8015128 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	681a      	ldr	r2, [r3, #0]
 801505a:	89fb      	ldrh	r3, [r7, #14]
 801505c:	1c59      	adds	r1, r3, #1
 801505e:	81f9      	strh	r1, [r7, #14]
 8015060:	4413      	add	r3, r2
 8015062:	687a      	ldr	r2, [r7, #4]
 8015064:	7952      	ldrb	r2, [r2, #5]
 8015066:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	681a      	ldr	r2, [r3, #0]
 801506c:	89fb      	ldrh	r3, [r7, #14]
 801506e:	18d0      	adds	r0, r2, r3
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	3306      	adds	r3, #6
 8015074:	2208      	movs	r2, #8
 8015076:	4619      	mov	r1, r3
 8015078:	f003 ff82 	bl	8018f80 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 801507c:	89fb      	ldrh	r3, [r7, #14]
 801507e:	3308      	adds	r3, #8
 8015080:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	681a      	ldr	r2, [r3, #0]
 8015086:	89fb      	ldrh	r3, [r7, #14]
 8015088:	18d0      	adds	r0, r2, r3
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	330e      	adds	r3, #14
 801508e:	2208      	movs	r2, #8
 8015090:	4619      	mov	r1, r3
 8015092:	f003 ff75 	bl	8018f80 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8015096:	89fb      	ldrh	r3, [r7, #14]
 8015098:	3308      	adds	r3, #8
 801509a:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	8ad9      	ldrh	r1, [r3, #22]
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	681a      	ldr	r2, [r3, #0]
 80150a4:	89fb      	ldrh	r3, [r7, #14]
 80150a6:	1c58      	adds	r0, r3, #1
 80150a8:	81f8      	strh	r0, [r7, #14]
 80150aa:	4413      	add	r3, r2
 80150ac:	b2ca      	uxtb	r2, r1
 80150ae:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	8adb      	ldrh	r3, [r3, #22]
 80150b4:	0a1b      	lsrs	r3, r3, #8
 80150b6:	b299      	uxth	r1, r3
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	681a      	ldr	r2, [r3, #0]
 80150bc:	89fb      	ldrh	r3, [r7, #14]
 80150be:	1c58      	adds	r0, r3, #1
 80150c0:	81f8      	strh	r0, [r7, #14]
 80150c2:	4413      	add	r3, r2
 80150c4:	b2ca      	uxtb	r2, r1
 80150c6:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	6999      	ldr	r1, [r3, #24]
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	681a      	ldr	r2, [r3, #0]
 80150d0:	89fb      	ldrh	r3, [r7, #14]
 80150d2:	1c58      	adds	r0, r3, #1
 80150d4:	81f8      	strh	r0, [r7, #14]
 80150d6:	4413      	add	r3, r2
 80150d8:	b2ca      	uxtb	r2, r1
 80150da:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	699b      	ldr	r3, [r3, #24]
 80150e0:	0a19      	lsrs	r1, r3, #8
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	681a      	ldr	r2, [r3, #0]
 80150e6:	89fb      	ldrh	r3, [r7, #14]
 80150e8:	1c58      	adds	r0, r3, #1
 80150ea:	81f8      	strh	r0, [r7, #14]
 80150ec:	4413      	add	r3, r2
 80150ee:	b2ca      	uxtb	r2, r1
 80150f0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	699b      	ldr	r3, [r3, #24]
 80150f6:	0c19      	lsrs	r1, r3, #16
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	681a      	ldr	r2, [r3, #0]
 80150fc:	89fb      	ldrh	r3, [r7, #14]
 80150fe:	1c58      	adds	r0, r3, #1
 8015100:	81f8      	strh	r0, [r7, #14]
 8015102:	4413      	add	r3, r2
 8015104:	b2ca      	uxtb	r2, r1
 8015106:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	699b      	ldr	r3, [r3, #24]
 801510c:	0e19      	lsrs	r1, r3, #24
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	681a      	ldr	r2, [r3, #0]
 8015112:	89fb      	ldrh	r3, [r7, #14]
 8015114:	1c58      	adds	r0, r3, #1
 8015116:	81f8      	strh	r0, [r7, #14]
 8015118:	4413      	add	r3, r2
 801511a:	b2ca      	uxtb	r2, r1
 801511c:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 801511e:	89fb      	ldrh	r3, [r7, #14]
 8015120:	b2da      	uxtb	r2, r3
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8015126:	2300      	movs	r3, #0
}
 8015128:	4618      	mov	r0, r3
 801512a:	3710      	adds	r7, #16
 801512c:	46bd      	mov	sp, r7
 801512e:	bd80      	pop	{r7, pc}

08015130 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8015130:	b580      	push	{r7, lr}
 8015132:	b084      	sub	sp, #16
 8015134:	af00      	add	r7, sp, #0
 8015136:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	2b00      	cmp	r3, #0
 801513c:	d003      	beq.n	8015146 <LoRaMacSerializerData+0x16>
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	681b      	ldr	r3, [r3, #0]
 8015142:	2b00      	cmp	r3, #0
 8015144:	d101      	bne.n	801514a <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8015146:	2301      	movs	r3, #1
 8015148:	e0e5      	b.n	8015316 <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 801514a:	2300      	movs	r3, #0
 801514c:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 801514e:	2308      	movs	r3, #8
 8015150:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	7b1b      	ldrb	r3, [r3, #12]
 8015156:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801515a:	b2db      	uxtb	r3, r3
 801515c:	b29a      	uxth	r2, r3
 801515e:	89bb      	ldrh	r3, [r7, #12]
 8015160:	4413      	add	r3, r2
 8015162:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801516a:	2b00      	cmp	r3, #0
 801516c:	d002      	beq.n	8015174 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 801516e:	89bb      	ldrh	r3, [r7, #12]
 8015170:	3301      	adds	r3, #1
 8015172:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801517a:	b29a      	uxth	r2, r3
 801517c:	89bb      	ldrh	r3, [r7, #12]
 801517e:	4413      	add	r3, r2
 8015180:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8015182:	89bb      	ldrh	r3, [r7, #12]
 8015184:	3304      	adds	r3, #4
 8015186:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	791b      	ldrb	r3, [r3, #4]
 801518c:	b29b      	uxth	r3, r3
 801518e:	89ba      	ldrh	r2, [r7, #12]
 8015190:	429a      	cmp	r2, r3
 8015192:	d901      	bls.n	8015198 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8015194:	2302      	movs	r3, #2
 8015196:	e0be      	b.n	8015316 <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	681a      	ldr	r2, [r3, #0]
 801519c:	89fb      	ldrh	r3, [r7, #14]
 801519e:	1c59      	adds	r1, r3, #1
 80151a0:	81f9      	strh	r1, [r7, #14]
 80151a2:	4413      	add	r3, r2
 80151a4:	687a      	ldr	r2, [r7, #4]
 80151a6:	7952      	ldrb	r2, [r2, #5]
 80151a8:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	6899      	ldr	r1, [r3, #8]
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	681a      	ldr	r2, [r3, #0]
 80151b2:	89fb      	ldrh	r3, [r7, #14]
 80151b4:	1c58      	adds	r0, r3, #1
 80151b6:	81f8      	strh	r0, [r7, #14]
 80151b8:	4413      	add	r3, r2
 80151ba:	b2ca      	uxtb	r2, r1
 80151bc:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	689b      	ldr	r3, [r3, #8]
 80151c2:	0a19      	lsrs	r1, r3, #8
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	681a      	ldr	r2, [r3, #0]
 80151c8:	89fb      	ldrh	r3, [r7, #14]
 80151ca:	1c58      	adds	r0, r3, #1
 80151cc:	81f8      	strh	r0, [r7, #14]
 80151ce:	4413      	add	r3, r2
 80151d0:	b2ca      	uxtb	r2, r1
 80151d2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	689b      	ldr	r3, [r3, #8]
 80151d8:	0c19      	lsrs	r1, r3, #16
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	681a      	ldr	r2, [r3, #0]
 80151de:	89fb      	ldrh	r3, [r7, #14]
 80151e0:	1c58      	adds	r0, r3, #1
 80151e2:	81f8      	strh	r0, [r7, #14]
 80151e4:	4413      	add	r3, r2
 80151e6:	b2ca      	uxtb	r2, r1
 80151e8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	689b      	ldr	r3, [r3, #8]
 80151ee:	0e19      	lsrs	r1, r3, #24
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	681a      	ldr	r2, [r3, #0]
 80151f4:	89fb      	ldrh	r3, [r7, #14]
 80151f6:	1c58      	adds	r0, r3, #1
 80151f8:	81f8      	strh	r0, [r7, #14]
 80151fa:	4413      	add	r3, r2
 80151fc:	b2ca      	uxtb	r2, r1
 80151fe:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	681a      	ldr	r2, [r3, #0]
 8015204:	89fb      	ldrh	r3, [r7, #14]
 8015206:	1c59      	adds	r1, r3, #1
 8015208:	81f9      	strh	r1, [r7, #14]
 801520a:	4413      	add	r3, r2
 801520c:	687a      	ldr	r2, [r7, #4]
 801520e:	7b12      	ldrb	r2, [r2, #12]
 8015210:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	89d9      	ldrh	r1, [r3, #14]
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	681a      	ldr	r2, [r3, #0]
 801521a:	89fb      	ldrh	r3, [r7, #14]
 801521c:	1c58      	adds	r0, r3, #1
 801521e:	81f8      	strh	r0, [r7, #14]
 8015220:	4413      	add	r3, r2
 8015222:	b2ca      	uxtb	r2, r1
 8015224:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	89db      	ldrh	r3, [r3, #14]
 801522a:	0a1b      	lsrs	r3, r3, #8
 801522c:	b299      	uxth	r1, r3
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	681a      	ldr	r2, [r3, #0]
 8015232:	89fb      	ldrh	r3, [r7, #14]
 8015234:	1c58      	adds	r0, r3, #1
 8015236:	81f8      	strh	r0, [r7, #14]
 8015238:	4413      	add	r3, r2
 801523a:	b2ca      	uxtb	r2, r1
 801523c:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	681a      	ldr	r2, [r3, #0]
 8015242:	89fb      	ldrh	r3, [r7, #14]
 8015244:	18d0      	adds	r0, r2, r3
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	f103 0110 	add.w	r1, r3, #16
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	7b1b      	ldrb	r3, [r3, #12]
 8015250:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8015254:	b2db      	uxtb	r3, r3
 8015256:	b29b      	uxth	r3, r3
 8015258:	461a      	mov	r2, r3
 801525a:	f003 fe76 	bl	8018f4a <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	7b1b      	ldrb	r3, [r3, #12]
 8015262:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8015266:	b2db      	uxtb	r3, r3
 8015268:	b29a      	uxth	r2, r3
 801526a:	89fb      	ldrh	r3, [r7, #14]
 801526c:	4413      	add	r3, r2
 801526e:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015276:	2b00      	cmp	r3, #0
 8015278:	d009      	beq.n	801528e <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	681a      	ldr	r2, [r3, #0]
 801527e:	89fb      	ldrh	r3, [r7, #14]
 8015280:	1c59      	adds	r1, r3, #1
 8015282:	81f9      	strh	r1, [r7, #14]
 8015284:	4413      	add	r3, r2
 8015286:	687a      	ldr	r2, [r7, #4]
 8015288:	f892 2020 	ldrb.w	r2, [r2, #32]
 801528c:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	681a      	ldr	r2, [r3, #0]
 8015292:	89fb      	ldrh	r3, [r7, #14]
 8015294:	18d0      	adds	r0, r2, r3
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80152a0:	b29b      	uxth	r3, r3
 80152a2:	461a      	mov	r2, r3
 80152a4:	f003 fe51 	bl	8018f4a <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80152ae:	b29a      	uxth	r2, r3
 80152b0:	89fb      	ldrh	r3, [r7, #14]
 80152b2:	4413      	add	r3, r2
 80152b4:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	681a      	ldr	r2, [r3, #0]
 80152be:	89fb      	ldrh	r3, [r7, #14]
 80152c0:	1c58      	adds	r0, r3, #1
 80152c2:	81f8      	strh	r0, [r7, #14]
 80152c4:	4413      	add	r3, r2
 80152c6:	b2ca      	uxtb	r2, r1
 80152c8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152ce:	0a19      	lsrs	r1, r3, #8
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	681a      	ldr	r2, [r3, #0]
 80152d4:	89fb      	ldrh	r3, [r7, #14]
 80152d6:	1c58      	adds	r0, r3, #1
 80152d8:	81f8      	strh	r0, [r7, #14]
 80152da:	4413      	add	r3, r2
 80152dc:	b2ca      	uxtb	r2, r1
 80152de:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152e4:	0c19      	lsrs	r1, r3, #16
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	681a      	ldr	r2, [r3, #0]
 80152ea:	89fb      	ldrh	r3, [r7, #14]
 80152ec:	1c58      	adds	r0, r3, #1
 80152ee:	81f8      	strh	r0, [r7, #14]
 80152f0:	4413      	add	r3, r2
 80152f2:	b2ca      	uxtb	r2, r1
 80152f4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152fa:	0e19      	lsrs	r1, r3, #24
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	681a      	ldr	r2, [r3, #0]
 8015300:	89fb      	ldrh	r3, [r7, #14]
 8015302:	1c58      	adds	r0, r3, #1
 8015304:	81f8      	strh	r0, [r7, #14]
 8015306:	4413      	add	r3, r2
 8015308:	b2ca      	uxtb	r2, r1
 801530a:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 801530c:	89fb      	ldrh	r3, [r7, #14]
 801530e:	b2da      	uxtb	r2, r3
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8015314:	2300      	movs	r3, #0
}
 8015316:	4618      	mov	r0, r3
 8015318:	3710      	adds	r7, #16
 801531a:	46bd      	mov	sp, r7
 801531c:	bd80      	pop	{r7, pc}

0801531e <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 801531e:	b480      	push	{r7}
 8015320:	b083      	sub	sp, #12
 8015322:	af00      	add	r7, sp, #0
 8015324:	4603      	mov	r3, r0
 8015326:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015328:	79fb      	ldrb	r3, [r7, #7]
 801532a:	2b05      	cmp	r3, #5
 801532c:	d002      	beq.n	8015334 <RegionIsActive+0x16>
 801532e:	2b08      	cmp	r3, #8
 8015330:	d002      	beq.n	8015338 <RegionIsActive+0x1a>
 8015332:	e003      	b.n	801533c <RegionIsActive+0x1e>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 8015334:	2301      	movs	r3, #1
 8015336:	e002      	b.n	801533e <RegionIsActive+0x20>
        KR920_IS_ACTIVE( );
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
 8015338:	2301      	movs	r3, #1
 801533a:	e000      	b.n	801533e <RegionIsActive+0x20>
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 801533c:	2300      	movs	r3, #0
        }
    }
}
 801533e:	4618      	mov	r0, r3
 8015340:	370c      	adds	r7, #12
 8015342:	46bd      	mov	sp, r7
 8015344:	bc80      	pop	{r7}
 8015346:	4770      	bx	lr

08015348 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8015348:	b580      	push	{r7, lr}
 801534a:	b084      	sub	sp, #16
 801534c:	af00      	add	r7, sp, #0
 801534e:	4603      	mov	r3, r0
 8015350:	6039      	str	r1, [r7, #0]
 8015352:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8015354:	2300      	movs	r3, #0
 8015356:	60bb      	str	r3, [r7, #8]
    switch( region )
 8015358:	79fb      	ldrb	r3, [r7, #7]
 801535a:	2b05      	cmp	r3, #5
 801535c:	d002      	beq.n	8015364 <RegionGetPhyParam+0x1c>
 801535e:	2b08      	cmp	r3, #8
 8015360:	d006      	beq.n	8015370 <RegionGetPhyParam+0x28>
 8015362:	e00b      	b.n	801537c <RegionGetPhyParam+0x34>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8015364:	6838      	ldr	r0, [r7, #0]
 8015366:	f001 fad1 	bl	801690c <RegionEU868GetPhyParam>
 801536a:	4603      	mov	r3, r0
 801536c:	60fb      	str	r3, [r7, #12]
 801536e:	e007      	b.n	8015380 <RegionGetPhyParam+0x38>
        KR920_GET_PHY_PARAM( );
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
 8015370:	6838      	ldr	r0, [r7, #0]
 8015372:	f002 fc51 	bl	8017c18 <RegionUS915GetPhyParam>
 8015376:	4603      	mov	r3, r0
 8015378:	60fb      	str	r3, [r7, #12]
 801537a:	e001      	b.n	8015380 <RegionGetPhyParam+0x38>
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 801537c:	68bb      	ldr	r3, [r7, #8]
 801537e:	60fb      	str	r3, [r7, #12]
        }
    }
}
 8015380:	68fb      	ldr	r3, [r7, #12]
 8015382:	4618      	mov	r0, r3
 8015384:	3710      	adds	r7, #16
 8015386:	46bd      	mov	sp, r7
 8015388:	bd80      	pop	{r7, pc}

0801538a <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 801538a:	b580      	push	{r7, lr}
 801538c:	b082      	sub	sp, #8
 801538e:	af00      	add	r7, sp, #0
 8015390:	4603      	mov	r3, r0
 8015392:	6039      	str	r1, [r7, #0]
 8015394:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015396:	79fb      	ldrb	r3, [r7, #7]
 8015398:	2b05      	cmp	r3, #5
 801539a:	d002      	beq.n	80153a2 <RegionSetBandTxDone+0x18>
 801539c:	2b08      	cmp	r3, #8
 801539e:	d004      	beq.n	80153aa <RegionSetBandTxDone+0x20>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 80153a0:	e006      	b.n	80153b0 <RegionSetBandTxDone+0x26>
        EU868_SET_BAND_TX_DONE( );
 80153a2:	6838      	ldr	r0, [r7, #0]
 80153a4:	f001 fbf8 	bl	8016b98 <RegionEU868SetBandTxDone>
 80153a8:	e002      	b.n	80153b0 <RegionSetBandTxDone+0x26>
        US915_SET_BAND_TX_DONE( );
 80153aa:	6838      	ldr	r0, [r7, #0]
 80153ac:	f002 fd90 	bl	8017ed0 <RegionUS915SetBandTxDone>
        }
    }
}
 80153b0:	3708      	adds	r7, #8
 80153b2:	46bd      	mov	sp, r7
 80153b4:	bd80      	pop	{r7, pc}

080153b6 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 80153b6:	b580      	push	{r7, lr}
 80153b8:	b082      	sub	sp, #8
 80153ba:	af00      	add	r7, sp, #0
 80153bc:	4603      	mov	r3, r0
 80153be:	6039      	str	r1, [r7, #0]
 80153c0:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80153c2:	79fb      	ldrb	r3, [r7, #7]
 80153c4:	2b05      	cmp	r3, #5
 80153c6:	d002      	beq.n	80153ce <RegionInitDefaults+0x18>
 80153c8:	2b08      	cmp	r3, #8
 80153ca:	d004      	beq.n	80153d6 <RegionInitDefaults+0x20>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 80153cc:	e006      	b.n	80153dc <RegionInitDefaults+0x26>
        EU868_INIT_DEFAULTS( );
 80153ce:	6838      	ldr	r0, [r7, #0]
 80153d0:	f001 fc0e 	bl	8016bf0 <RegionEU868InitDefaults>
 80153d4:	e002      	b.n	80153dc <RegionInitDefaults+0x26>
        US915_INIT_DEFAULTS( );
 80153d6:	6838      	ldr	r0, [r7, #0]
 80153d8:	f002 fda6 	bl	8017f28 <RegionUS915InitDefaults>
        }
    }
}
 80153dc:	bf00      	nop
 80153de:	3708      	adds	r7, #8
 80153e0:	46bd      	mov	sp, r7
 80153e2:	bd80      	pop	{r7, pc}

080153e4 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80153e4:	b580      	push	{r7, lr}
 80153e6:	b082      	sub	sp, #8
 80153e8:	af00      	add	r7, sp, #0
 80153ea:	4603      	mov	r3, r0
 80153ec:	6039      	str	r1, [r7, #0]
 80153ee:	71fb      	strb	r3, [r7, #7]
 80153f0:	4613      	mov	r3, r2
 80153f2:	71bb      	strb	r3, [r7, #6]
    switch( region )
 80153f4:	79fb      	ldrb	r3, [r7, #7]
 80153f6:	2b05      	cmp	r3, #5
 80153f8:	d002      	beq.n	8015400 <RegionVerify+0x1c>
 80153fa:	2b08      	cmp	r3, #8
 80153fc:	d007      	beq.n	801540e <RegionVerify+0x2a>
 80153fe:	e00d      	b.n	801541c <RegionVerify+0x38>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8015400:	79bb      	ldrb	r3, [r7, #6]
 8015402:	4619      	mov	r1, r3
 8015404:	6838      	ldr	r0, [r7, #0]
 8015406:	f001 fc91 	bl	8016d2c <RegionEU868Verify>
 801540a:	4603      	mov	r3, r0
 801540c:	e007      	b.n	801541e <RegionVerify+0x3a>
        KR920_VERIFY( );
        IN865_VERIFY( );
        US915_VERIFY( );
 801540e:	79bb      	ldrb	r3, [r7, #6]
 8015410:	4619      	mov	r1, r3
 8015412:	6838      	ldr	r0, [r7, #0]
 8015414:	f002 feba 	bl	801818c <RegionUS915Verify>
 8015418:	4603      	mov	r3, r0
 801541a:	e000      	b.n	801541e <RegionVerify+0x3a>
        RU864_VERIFY( );
        default:
        {
            return false;
 801541c:	2300      	movs	r3, #0
        }
    }
}
 801541e:	4618      	mov	r0, r3
 8015420:	3708      	adds	r7, #8
 8015422:	46bd      	mov	sp, r7
 8015424:	bd80      	pop	{r7, pc}

08015426 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8015426:	b580      	push	{r7, lr}
 8015428:	b082      	sub	sp, #8
 801542a:	af00      	add	r7, sp, #0
 801542c:	4603      	mov	r3, r0
 801542e:	6039      	str	r1, [r7, #0]
 8015430:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015432:	79fb      	ldrb	r3, [r7, #7]
 8015434:	2b05      	cmp	r3, #5
 8015436:	d002      	beq.n	801543e <RegionApplyCFList+0x18>
 8015438:	2b08      	cmp	r3, #8
 801543a:	d004      	beq.n	8015446 <RegionApplyCFList+0x20>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 801543c:	e006      	b.n	801544c <RegionApplyCFList+0x26>
        EU868_APPLY_CF_LIST( );
 801543e:	6838      	ldr	r0, [r7, #0]
 8015440:	f001 fcf0 	bl	8016e24 <RegionEU868ApplyCFList>
 8015444:	e002      	b.n	801544c <RegionApplyCFList+0x26>
        US915_APPLY_CF_LIST( );
 8015446:	6838      	ldr	r0, [r7, #0]
 8015448:	f002 ff16 	bl	8018278 <RegionUS915ApplyCFList>
        }
    }
}
 801544c:	bf00      	nop
 801544e:	3708      	adds	r7, #8
 8015450:	46bd      	mov	sp, r7
 8015452:	bd80      	pop	{r7, pc}

08015454 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8015454:	b580      	push	{r7, lr}
 8015456:	b082      	sub	sp, #8
 8015458:	af00      	add	r7, sp, #0
 801545a:	4603      	mov	r3, r0
 801545c:	6039      	str	r1, [r7, #0]
 801545e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015460:	79fb      	ldrb	r3, [r7, #7]
 8015462:	2b05      	cmp	r3, #5
 8015464:	d002      	beq.n	801546c <RegionChanMaskSet+0x18>
 8015466:	2b08      	cmp	r3, #8
 8015468:	d005      	beq.n	8015476 <RegionChanMaskSet+0x22>
 801546a:	e009      	b.n	8015480 <RegionChanMaskSet+0x2c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 801546c:	6838      	ldr	r0, [r7, #0]
 801546e:	f001 fd4d 	bl	8016f0c <RegionEU868ChanMaskSet>
 8015472:	4603      	mov	r3, r0
 8015474:	e005      	b.n	8015482 <RegionChanMaskSet+0x2e>
        KR920_CHAN_MASK_SET( );
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
 8015476:	6838      	ldr	r0, [r7, #0]
 8015478:	f002 ff72 	bl	8018360 <RegionUS915ChanMaskSet>
 801547c:	4603      	mov	r3, r0
 801547e:	e000      	b.n	8015482 <RegionChanMaskSet+0x2e>
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8015480:	2300      	movs	r3, #0
        }
    }
}
 8015482:	4618      	mov	r0, r3
 8015484:	3708      	adds	r7, #8
 8015486:	46bd      	mov	sp, r7
 8015488:	bd80      	pop	{r7, pc}

0801548a <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 801548a:	b580      	push	{r7, lr}
 801548c:	b082      	sub	sp, #8
 801548e:	af00      	add	r7, sp, #0
 8015490:	603b      	str	r3, [r7, #0]
 8015492:	4603      	mov	r3, r0
 8015494:	71fb      	strb	r3, [r7, #7]
 8015496:	460b      	mov	r3, r1
 8015498:	71bb      	strb	r3, [r7, #6]
 801549a:	4613      	mov	r3, r2
 801549c:	717b      	strb	r3, [r7, #5]
    switch( region )
 801549e:	79fb      	ldrb	r3, [r7, #7]
 80154a0:	2b05      	cmp	r3, #5
 80154a2:	d002      	beq.n	80154aa <RegionComputeRxWindowParameters+0x20>
 80154a4:	2b08      	cmp	r3, #8
 80154a6:	d008      	beq.n	80154ba <RegionComputeRxWindowParameters+0x30>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 80154a8:	e00e      	b.n	80154c8 <RegionComputeRxWindowParameters+0x3e>
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 80154aa:	7979      	ldrb	r1, [r7, #5]
 80154ac:	f997 0006 	ldrsb.w	r0, [r7, #6]
 80154b0:	693b      	ldr	r3, [r7, #16]
 80154b2:	683a      	ldr	r2, [r7, #0]
 80154b4:	f001 fd54 	bl	8016f60 <RegionEU868ComputeRxWindowParameters>
 80154b8:	e006      	b.n	80154c8 <RegionComputeRxWindowParameters+0x3e>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 80154ba:	7979      	ldrb	r1, [r7, #5]
 80154bc:	f997 0006 	ldrsb.w	r0, [r7, #6]
 80154c0:	693b      	ldr	r3, [r7, #16]
 80154c2:	683a      	ldr	r2, [r7, #0]
 80154c4:	f002 ffb4 	bl	8018430 <RegionUS915ComputeRxWindowParameters>
        }
    }
}
 80154c8:	bf00      	nop
 80154ca:	3708      	adds	r7, #8
 80154cc:	46bd      	mov	sp, r7
 80154ce:	bd80      	pop	{r7, pc}

080154d0 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80154d0:	b580      	push	{r7, lr}
 80154d2:	b084      	sub	sp, #16
 80154d4:	af00      	add	r7, sp, #0
 80154d6:	4603      	mov	r3, r0
 80154d8:	60b9      	str	r1, [r7, #8]
 80154da:	607a      	str	r2, [r7, #4]
 80154dc:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80154de:	7bfb      	ldrb	r3, [r7, #15]
 80154e0:	2b05      	cmp	r3, #5
 80154e2:	d002      	beq.n	80154ea <RegionRxConfig+0x1a>
 80154e4:	2b08      	cmp	r3, #8
 80154e6:	d006      	beq.n	80154f6 <RegionRxConfig+0x26>
 80154e8:	e00b      	b.n	8015502 <RegionRxConfig+0x32>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 80154ea:	6879      	ldr	r1, [r7, #4]
 80154ec:	68b8      	ldr	r0, [r7, #8]
 80154ee:	f001 fd91 	bl	8017014 <RegionEU868RxConfig>
 80154f2:	4603      	mov	r3, r0
 80154f4:	e006      	b.n	8015504 <RegionRxConfig+0x34>
        KR920_RX_CONFIG( );
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
 80154f6:	6879      	ldr	r1, [r7, #4]
 80154f8:	68b8      	ldr	r0, [r7, #8]
 80154fa:	f002 ffe3 	bl	80184c4 <RegionUS915RxConfig>
 80154fe:	4603      	mov	r3, r0
 8015500:	e000      	b.n	8015504 <RegionRxConfig+0x34>
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8015502:	2300      	movs	r3, #0
        }
    }
}
 8015504:	4618      	mov	r0, r3
 8015506:	3710      	adds	r7, #16
 8015508:	46bd      	mov	sp, r7
 801550a:	bd80      	pop	{r7, pc}

0801550c <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801550c:	b580      	push	{r7, lr}
 801550e:	b084      	sub	sp, #16
 8015510:	af00      	add	r7, sp, #0
 8015512:	60b9      	str	r1, [r7, #8]
 8015514:	607a      	str	r2, [r7, #4]
 8015516:	603b      	str	r3, [r7, #0]
 8015518:	4603      	mov	r3, r0
 801551a:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801551c:	7bfb      	ldrb	r3, [r7, #15]
 801551e:	2b05      	cmp	r3, #5
 8015520:	d002      	beq.n	8015528 <RegionTxConfig+0x1c>
 8015522:	2b08      	cmp	r3, #8
 8015524:	d007      	beq.n	8015536 <RegionTxConfig+0x2a>
 8015526:	e00d      	b.n	8015544 <RegionTxConfig+0x38>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8015528:	683a      	ldr	r2, [r7, #0]
 801552a:	6879      	ldr	r1, [r7, #4]
 801552c:	68b8      	ldr	r0, [r7, #8]
 801552e:	f001 fe41 	bl	80171b4 <RegionEU868TxConfig>
 8015532:	4603      	mov	r3, r0
 8015534:	e007      	b.n	8015546 <RegionTxConfig+0x3a>
        KR920_TX_CONFIG( );
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
 8015536:	683a      	ldr	r2, [r7, #0]
 8015538:	6879      	ldr	r1, [r7, #4]
 801553a:	68b8      	ldr	r0, [r7, #8]
 801553c:	f003 f846 	bl	80185cc <RegionUS915TxConfig>
 8015540:	4603      	mov	r3, r0
 8015542:	e000      	b.n	8015546 <RegionTxConfig+0x3a>
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8015544:	2300      	movs	r3, #0
        }
    }
}
 8015546:	4618      	mov	r0, r3
 8015548:	3710      	adds	r7, #16
 801554a:	46bd      	mov	sp, r7
 801554c:	bd80      	pop	{r7, pc}

0801554e <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801554e:	b580      	push	{r7, lr}
 8015550:	b086      	sub	sp, #24
 8015552:	af02      	add	r7, sp, #8
 8015554:	60b9      	str	r1, [r7, #8]
 8015556:	607a      	str	r2, [r7, #4]
 8015558:	603b      	str	r3, [r7, #0]
 801555a:	4603      	mov	r3, r0
 801555c:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801555e:	7bfb      	ldrb	r3, [r7, #15]
 8015560:	2b05      	cmp	r3, #5
 8015562:	d002      	beq.n	801556a <RegionLinkAdrReq+0x1c>
 8015564:	2b08      	cmp	r3, #8
 8015566:	d00a      	beq.n	801557e <RegionLinkAdrReq+0x30>
 8015568:	e013      	b.n	8015592 <RegionLinkAdrReq+0x44>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 801556a:	69fb      	ldr	r3, [r7, #28]
 801556c:	9300      	str	r3, [sp, #0]
 801556e:	69bb      	ldr	r3, [r7, #24]
 8015570:	683a      	ldr	r2, [r7, #0]
 8015572:	6879      	ldr	r1, [r7, #4]
 8015574:	68b8      	ldr	r0, [r7, #8]
 8015576:	f001 feed 	bl	8017354 <RegionEU868LinkAdrReq>
 801557a:	4603      	mov	r3, r0
 801557c:	e00a      	b.n	8015594 <RegionLinkAdrReq+0x46>
        KR920_LINK_ADR_REQ( );
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
 801557e:	69fb      	ldr	r3, [r7, #28]
 8015580:	9300      	str	r3, [sp, #0]
 8015582:	69bb      	ldr	r3, [r7, #24]
 8015584:	683a      	ldr	r2, [r7, #0]
 8015586:	6879      	ldr	r1, [r7, #4]
 8015588:	68b8      	ldr	r0, [r7, #8]
 801558a:	f003 f8c9 	bl	8018720 <RegionUS915LinkAdrReq>
 801558e:	4603      	mov	r3, r0
 8015590:	e000      	b.n	8015594 <RegionLinkAdrReq+0x46>
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8015592:	2300      	movs	r3, #0
        }
    }
}
 8015594:	4618      	mov	r0, r3
 8015596:	3710      	adds	r7, #16
 8015598:	46bd      	mov	sp, r7
 801559a:	bd80      	pop	{r7, pc}

0801559c <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 801559c:	b580      	push	{r7, lr}
 801559e:	b082      	sub	sp, #8
 80155a0:	af00      	add	r7, sp, #0
 80155a2:	4603      	mov	r3, r0
 80155a4:	6039      	str	r1, [r7, #0]
 80155a6:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80155a8:	79fb      	ldrb	r3, [r7, #7]
 80155aa:	2b05      	cmp	r3, #5
 80155ac:	d002      	beq.n	80155b4 <RegionRxParamSetupReq+0x18>
 80155ae:	2b08      	cmp	r3, #8
 80155b0:	d005      	beq.n	80155be <RegionRxParamSetupReq+0x22>
 80155b2:	e009      	b.n	80155c8 <RegionRxParamSetupReq+0x2c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 80155b4:	6838      	ldr	r0, [r7, #0]
 80155b6:	f001 ffef 	bl	8017598 <RegionEU868RxParamSetupReq>
 80155ba:	4603      	mov	r3, r0
 80155bc:	e005      	b.n	80155ca <RegionRxParamSetupReq+0x2e>
        KR920_RX_PARAM_SETUP_REQ( );
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
 80155be:	6838      	ldr	r0, [r7, #0]
 80155c0:	f003 fac8 	bl	8018b54 <RegionUS915RxParamSetupReq>
 80155c4:	4603      	mov	r3, r0
 80155c6:	e000      	b.n	80155ca <RegionRxParamSetupReq+0x2e>
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80155c8:	2300      	movs	r3, #0
        }
    }
}
 80155ca:	4618      	mov	r0, r3
 80155cc:	3708      	adds	r7, #8
 80155ce:	46bd      	mov	sp, r7
 80155d0:	bd80      	pop	{r7, pc}

080155d2 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 80155d2:	b580      	push	{r7, lr}
 80155d4:	b082      	sub	sp, #8
 80155d6:	af00      	add	r7, sp, #0
 80155d8:	4603      	mov	r3, r0
 80155da:	6039      	str	r1, [r7, #0]
 80155dc:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80155de:	79fb      	ldrb	r3, [r7, #7]
 80155e0:	2b05      	cmp	r3, #5
 80155e2:	d002      	beq.n	80155ea <RegionNewChannelReq+0x18>
 80155e4:	2b08      	cmp	r3, #8
 80155e6:	d005      	beq.n	80155f4 <RegionNewChannelReq+0x22>
 80155e8:	e009      	b.n	80155fe <RegionNewChannelReq+0x2c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 80155ea:	6838      	ldr	r0, [r7, #0]
 80155ec:	f002 f812 	bl	8017614 <RegionEU868NewChannelReq>
 80155f0:	4603      	mov	r3, r0
 80155f2:	e005      	b.n	8015600 <RegionNewChannelReq+0x2e>
        KR920_NEW_CHANNEL_REQ( );
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
 80155f4:	6838      	ldr	r0, [r7, #0]
 80155f6:	f003 faf9 	bl	8018bec <RegionUS915NewChannelReq>
 80155fa:	4603      	mov	r3, r0
 80155fc:	e000      	b.n	8015600 <RegionNewChannelReq+0x2e>
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 80155fe:	2300      	movs	r3, #0
        }
    }
}
 8015600:	4618      	mov	r0, r3
 8015602:	3708      	adds	r7, #8
 8015604:	46bd      	mov	sp, r7
 8015606:	bd80      	pop	{r7, pc}

08015608 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8015608:	b580      	push	{r7, lr}
 801560a:	b082      	sub	sp, #8
 801560c:	af00      	add	r7, sp, #0
 801560e:	4603      	mov	r3, r0
 8015610:	6039      	str	r1, [r7, #0]
 8015612:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015614:	79fb      	ldrb	r3, [r7, #7]
 8015616:	2b05      	cmp	r3, #5
 8015618:	d002      	beq.n	8015620 <RegionTxParamSetupReq+0x18>
 801561a:	2b08      	cmp	r3, #8
 801561c:	d005      	beq.n	801562a <RegionTxParamSetupReq+0x22>
 801561e:	e009      	b.n	8015634 <RegionTxParamSetupReq+0x2c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 8015620:	6838      	ldr	r0, [r7, #0]
 8015622:	f002 f855 	bl	80176d0 <RegionEU868TxParamSetupReq>
 8015626:	4603      	mov	r3, r0
 8015628:	e005      	b.n	8015636 <RegionTxParamSetupReq+0x2e>
        KR920_TX_PARAM_SETUP_REQ( );
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
 801562a:	6838      	ldr	r0, [r7, #0]
 801562c:	f003 fae9 	bl	8018c02 <RegionUS915TxParamSetupReq>
 8015630:	4603      	mov	r3, r0
 8015632:	e000      	b.n	8015636 <RegionTxParamSetupReq+0x2e>
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8015634:	2300      	movs	r3, #0
        }
    }
}
 8015636:	4618      	mov	r0, r3
 8015638:	3708      	adds	r7, #8
 801563a:	46bd      	mov	sp, r7
 801563c:	bd80      	pop	{r7, pc}

0801563e <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 801563e:	b580      	push	{r7, lr}
 8015640:	b082      	sub	sp, #8
 8015642:	af00      	add	r7, sp, #0
 8015644:	4603      	mov	r3, r0
 8015646:	6039      	str	r1, [r7, #0]
 8015648:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801564a:	79fb      	ldrb	r3, [r7, #7]
 801564c:	2b05      	cmp	r3, #5
 801564e:	d002      	beq.n	8015656 <RegionDlChannelReq+0x18>
 8015650:	2b08      	cmp	r3, #8
 8015652:	d005      	beq.n	8015660 <RegionDlChannelReq+0x22>
 8015654:	e009      	b.n	801566a <RegionDlChannelReq+0x2c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8015656:	6838      	ldr	r0, [r7, #0]
 8015658:	f002 f846 	bl	80176e8 <RegionEU868DlChannelReq>
 801565c:	4603      	mov	r3, r0
 801565e:	e005      	b.n	801566c <RegionDlChannelReq+0x2e>
        KR920_DL_CHANNEL_REQ( );
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
 8015660:	6838      	ldr	r0, [r7, #0]
 8015662:	f003 fad9 	bl	8018c18 <RegionUS915DlChannelReq>
 8015666:	4603      	mov	r3, r0
 8015668:	e000      	b.n	801566c <RegionDlChannelReq+0x2e>
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 801566a:	2300      	movs	r3, #0
        }
    }
}
 801566c:	4618      	mov	r0, r3
 801566e:	3708      	adds	r7, #8
 8015670:	46bd      	mov	sp, r7
 8015672:	bd80      	pop	{r7, pc}

08015674 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8015674:	b580      	push	{r7, lr}
 8015676:	b082      	sub	sp, #8
 8015678:	af00      	add	r7, sp, #0
 801567a:	4603      	mov	r3, r0
 801567c:	71fb      	strb	r3, [r7, #7]
 801567e:	460b      	mov	r3, r1
 8015680:	71bb      	strb	r3, [r7, #6]
 8015682:	4613      	mov	r3, r2
 8015684:	717b      	strb	r3, [r7, #5]
    switch( region )
 8015686:	79fb      	ldrb	r3, [r7, #7]
 8015688:	2b05      	cmp	r3, #5
 801568a:	d002      	beq.n	8015692 <RegionAlternateDr+0x1e>
 801568c:	2b08      	cmp	r3, #8
 801568e:	d009      	beq.n	80156a4 <RegionAlternateDr+0x30>
 8015690:	e011      	b.n	80156b6 <RegionAlternateDr+0x42>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8015692:	797a      	ldrb	r2, [r7, #5]
 8015694:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015698:	4611      	mov	r1, r2
 801569a:	4618      	mov	r0, r3
 801569c:	f002 f86e 	bl	801777c <RegionEU868AlternateDr>
 80156a0:	4603      	mov	r3, r0
 80156a2:	e009      	b.n	80156b8 <RegionAlternateDr+0x44>
        KR920_ALTERNATE_DR( );
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
 80156a4:	797a      	ldrb	r2, [r7, #5]
 80156a6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80156aa:	4611      	mov	r1, r2
 80156ac:	4618      	mov	r0, r3
 80156ae:	f003 fabf 	bl	8018c30 <RegionUS915AlternateDr>
 80156b2:	4603      	mov	r3, r0
 80156b4:	e000      	b.n	80156b8 <RegionAlternateDr+0x44>
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 80156b6:	2300      	movs	r3, #0
        }
    }
}
 80156b8:	4618      	mov	r0, r3
 80156ba:	3708      	adds	r7, #8
 80156bc:	46bd      	mov	sp, r7
 80156be:	bd80      	pop	{r7, pc}

080156c0 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80156c0:	b580      	push	{r7, lr}
 80156c2:	b084      	sub	sp, #16
 80156c4:	af00      	add	r7, sp, #0
 80156c6:	60b9      	str	r1, [r7, #8]
 80156c8:	607a      	str	r2, [r7, #4]
 80156ca:	603b      	str	r3, [r7, #0]
 80156cc:	4603      	mov	r3, r0
 80156ce:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80156d0:	7bfb      	ldrb	r3, [r7, #15]
 80156d2:	2b05      	cmp	r3, #5
 80156d4:	d002      	beq.n	80156dc <RegionNextChannel+0x1c>
 80156d6:	2b08      	cmp	r3, #8
 80156d8:	d008      	beq.n	80156ec <RegionNextChannel+0x2c>
 80156da:	e00f      	b.n	80156fc <RegionNextChannel+0x3c>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 80156dc:	69bb      	ldr	r3, [r7, #24]
 80156de:	683a      	ldr	r2, [r7, #0]
 80156e0:	6879      	ldr	r1, [r7, #4]
 80156e2:	68b8      	ldr	r0, [r7, #8]
 80156e4:	f002 f85a 	bl	801779c <RegionEU868NextChannel>
 80156e8:	4603      	mov	r3, r0
 80156ea:	e008      	b.n	80156fe <RegionNextChannel+0x3e>
        KR920_NEXT_CHANNEL( );
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
 80156ec:	69bb      	ldr	r3, [r7, #24]
 80156ee:	683a      	ldr	r2, [r7, #0]
 80156f0:	6879      	ldr	r1, [r7, #4]
 80156f2:	68b8      	ldr	r0, [r7, #8]
 80156f4:	f003 fad2 	bl	8018c9c <RegionUS915NextChannel>
 80156f8:	4603      	mov	r3, r0
 80156fa:	e000      	b.n	80156fe <RegionNextChannel+0x3e>
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 80156fc:	2309      	movs	r3, #9
        }
    }
}
 80156fe:	4618      	mov	r0, r3
 8015700:	3710      	adds	r7, #16
 8015702:	46bd      	mov	sp, r7
 8015704:	bd80      	pop	{r7, pc}

08015706 <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8015706:	b590      	push	{r4, r7, lr}
 8015708:	b083      	sub	sp, #12
 801570a:	af00      	add	r7, sp, #0
 801570c:	4604      	mov	r4, r0
 801570e:	4608      	mov	r0, r1
 8015710:	4611      	mov	r1, r2
 8015712:	461a      	mov	r2, r3
 8015714:	4623      	mov	r3, r4
 8015716:	71fb      	strb	r3, [r7, #7]
 8015718:	4603      	mov	r3, r0
 801571a:	71bb      	strb	r3, [r7, #6]
 801571c:	460b      	mov	r3, r1
 801571e:	717b      	strb	r3, [r7, #5]
 8015720:	4613      	mov	r3, r2
 8015722:	713b      	strb	r3, [r7, #4]
    switch( region )
 8015724:	79fb      	ldrb	r3, [r7, #7]
 8015726:	2b05      	cmp	r3, #5
 8015728:	d002      	beq.n	8015730 <RegionApplyDrOffset+0x2a>
 801572a:	2b08      	cmp	r3, #8
 801572c:	d00a      	beq.n	8015744 <RegionApplyDrOffset+0x3e>
 801572e:	e013      	b.n	8015758 <RegionApplyDrOffset+0x52>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 8015730:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8015734:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8015738:	79bb      	ldrb	r3, [r7, #6]
 801573a:	4618      	mov	r0, r3
 801573c:	f002 f9a8 	bl	8017a90 <RegionEU868ApplyDrOffset>
 8015740:	4603      	mov	r3, r0
 8015742:	e00a      	b.n	801575a <RegionApplyDrOffset+0x54>
        KR920_APPLY_DR_OFFSET( );
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
 8015744:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8015748:	f997 1005 	ldrsb.w	r1, [r7, #5]
 801574c:	79bb      	ldrb	r3, [r7, #6]
 801574e:	4618      	mov	r0, r3
 8015750:	f003 fb92 	bl	8018e78 <RegionUS915ApplyDrOffset>
 8015754:	4603      	mov	r3, r0
 8015756:	e000      	b.n	801575a <RegionApplyDrOffset+0x54>
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8015758:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 801575a:	4618      	mov	r0, r3
 801575c:	370c      	adds	r7, #12
 801575e:	46bd      	mov	sp, r7
 8015760:	bd90      	pop	{r4, r7, pc}
	...

08015764 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8015764:	b480      	push	{r7}
 8015766:	b083      	sub	sp, #12
 8015768:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 801576a:	4b04      	ldr	r3, [pc, #16]	; (801577c <RegionGetVersion+0x18>)
 801576c:	607b      	str	r3, [r7, #4]

    return version;
 801576e:	687b      	ldr	r3, [r7, #4]
}
 8015770:	4618      	mov	r0, r3
 8015772:	370c      	adds	r7, #12
 8015774:	46bd      	mov	sp, r7
 8015776:	bc80      	pop	{r7}
 8015778:	4770      	bx	lr
 801577a:	bf00      	nop
 801577c:	02010001 	.word	0x02010001

08015780 <FindAvailable125kHzChannels>:
 *
 * \retval Status
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
 8015780:	b480      	push	{r7}
 8015782:	b087      	sub	sp, #28
 8015784:	af00      	add	r7, sp, #0
 8015786:	4603      	mov	r3, r0
 8015788:	60b9      	str	r1, [r7, #8]
 801578a:	607a      	str	r2, [r7, #4]
 801578c:	81fb      	strh	r3, [r7, #14]
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 801578e:	68bb      	ldr	r3, [r7, #8]
 8015790:	2b00      	cmp	r3, #0
 8015792:	d002      	beq.n	801579a <FindAvailable125kHzChannels+0x1a>
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	2b00      	cmp	r3, #0
 8015798:	d101      	bne.n	801579e <FindAvailable125kHzChannels+0x1e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801579a:	2303      	movs	r3, #3
 801579c:	e021      	b.n	80157e2 <FindAvailable125kHzChannels+0x62>
    }

    // Initialize counter
    *availableChannels = 0;
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	2200      	movs	r2, #0
 80157a2:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 80157a4:	2300      	movs	r3, #0
 80157a6:	75fb      	strb	r3, [r7, #23]
 80157a8:	e017      	b.n	80157da <FindAvailable125kHzChannels+0x5a>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 80157aa:	89fa      	ldrh	r2, [r7, #14]
 80157ac:	7dfb      	ldrb	r3, [r7, #23]
 80157ae:	fa42 f303 	asr.w	r3, r2, r3
 80157b2:	f003 0301 	and.w	r3, r3, #1
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	d00c      	beq.n	80157d4 <FindAvailable125kHzChannels+0x54>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	781b      	ldrb	r3, [r3, #0]
 80157be:	461a      	mov	r2, r3
 80157c0:	68bb      	ldr	r3, [r7, #8]
 80157c2:	4413      	add	r3, r2
 80157c4:	7dfa      	ldrb	r2, [r7, #23]
 80157c6:	701a      	strb	r2, [r3, #0]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	781b      	ldrb	r3, [r3, #0]
 80157cc:	3301      	adds	r3, #1
 80157ce:	b2da      	uxtb	r2, r3
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 80157d4:	7dfb      	ldrb	r3, [r7, #23]
 80157d6:	3301      	adds	r3, #1
 80157d8:	75fb      	strb	r3, [r7, #23]
 80157da:	7dfb      	ldrb	r3, [r7, #23]
 80157dc:	2b07      	cmp	r3, #7
 80157de:	d9e4      	bls.n	80157aa <FindAvailable125kHzChannels+0x2a>
        }
    }

    return LORAMAC_STATUS_OK;
 80157e0:	2300      	movs	r3, #0
}
 80157e2:	4618      	mov	r0, r3
 80157e4:	371c      	adds	r7, #28
 80157e6:	46bd      	mov	sp, r7
 80157e8:	bc80      	pop	{r7}
 80157ea:	4770      	bx	lr

080157ec <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 80157ec:	b590      	push	{r4, r7, lr}
 80157ee:	b089      	sub	sp, #36	; 0x24
 80157f0:	af00      	add	r7, sp, #0
 80157f2:	60f8      	str	r0, [r7, #12]
 80157f4:	60b9      	str	r1, [r7, #8]
 80157f6:	607a      	str	r2, [r7, #4]
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 80157f8:	2300      	movs	r3, #0
 80157fa:	617b      	str	r3, [r7, #20]
 80157fc:	2300      	movs	r3, #0
 80157fe:	61bb      	str	r3, [r7, #24]
    uint8_t availableChannels = 0;
 8015800:	2300      	movs	r3, #0
 8015802:	74fb      	strb	r3, [r7, #19]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 8015804:	68fb      	ldr	r3, [r7, #12]
 8015806:	2b00      	cmp	r3, #0
 8015808:	d005      	beq.n	8015816 <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 801580a:	68bb      	ldr	r3, [r7, #8]
 801580c:	2b00      	cmp	r3, #0
 801580e:	d002      	beq.n	8015816 <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	2b00      	cmp	r3, #0
 8015814:	d101      	bne.n	801581a <RegionBaseUSComputeNext125kHzJoinChannel+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8015816:	2303      	movs	r3, #3
 8015818:	e055      	b.n	80158c6 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 801581a:	68bb      	ldr	r3, [r7, #8]
 801581c:	781b      	ldrb	r3, [r3, #0]
 801581e:	777b      	strb	r3, [r7, #29]

    do
    {
        // Current ChannelMaskRemaining, two groups per channel mask. For example Group 0 and 1 (8 bit) are ChannelMaskRemaining 0 (16 bit), etc.
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 8015820:	7f7b      	ldrb	r3, [r7, #29]
 8015822:	085b      	lsrs	r3, r3, #1
 8015824:	773b      	strb	r3, [r7, #28]

        // For even numbers we need the 8 LSBs and for uneven the 8 MSBs
        if( ( startIndex % 2 ) == 0 )
 8015826:	7f7b      	ldrb	r3, [r7, #29]
 8015828:	f003 0301 	and.w	r3, r3, #1
 801582c:	b2db      	uxtb	r3, r3
 801582e:	2b00      	cmp	r3, #0
 8015830:	d107      	bne.n	8015842 <RegionBaseUSComputeNext125kHzJoinChannel+0x56>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 8015832:	7f3b      	ldrb	r3, [r7, #28]
 8015834:	005b      	lsls	r3, r3, #1
 8015836:	68fa      	ldr	r2, [r7, #12]
 8015838:	4413      	add	r3, r2
 801583a:	881b      	ldrh	r3, [r3, #0]
 801583c:	b2db      	uxtb	r3, r3
 801583e:	83fb      	strh	r3, [r7, #30]
 8015840:	e006      	b.n	8015850 <RegionBaseUSComputeNext125kHzJoinChannel+0x64>
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 8015842:	7f3b      	ldrb	r3, [r7, #28]
 8015844:	005b      	lsls	r3, r3, #1
 8015846:	68fa      	ldr	r2, [r7, #12]
 8015848:	4413      	add	r3, r2
 801584a:	881b      	ldrh	r3, [r3, #0]
 801584c:	0a1b      	lsrs	r3, r3, #8
 801584e:	83fb      	strh	r3, [r7, #30]
        }

        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 8015850:	f107 0213 	add.w	r2, r7, #19
 8015854:	f107 0114 	add.w	r1, r7, #20
 8015858:	8bfb      	ldrh	r3, [r7, #30]
 801585a:	4618      	mov	r0, r3
 801585c:	f7ff ff90 	bl	8015780 <FindAvailable125kHzChannels>
 8015860:	4603      	mov	r3, r0
 8015862:	2b03      	cmp	r3, #3
 8015864:	d101      	bne.n	801586a <RegionBaseUSComputeNext125kHzJoinChannel+0x7e>
        {
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8015866:	2303      	movs	r3, #3
 8015868:	e02d      	b.n	80158c6 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
        }

        if ( availableChannels > 0 )
 801586a:	7cfb      	ldrb	r3, [r7, #19]
 801586c:	2b00      	cmp	r3, #0
 801586e:	d011      	beq.n	8015894 <RegionBaseUSComputeNext125kHzJoinChannel+0xa8>
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 8015870:	7f7b      	ldrb	r3, [r7, #29]
 8015872:	00db      	lsls	r3, r3, #3
 8015874:	b2dc      	uxtb	r4, r3
 8015876:	7cfb      	ldrb	r3, [r7, #19]
 8015878:	3b01      	subs	r3, #1
 801587a:	4619      	mov	r1, r3
 801587c:	2000      	movs	r0, #0
 801587e:	f003 fb4d 	bl	8018f1c <randr>
 8015882:	4603      	mov	r3, r0
 8015884:	3320      	adds	r3, #32
 8015886:	443b      	add	r3, r7
 8015888:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 801588c:	4423      	add	r3, r4
 801588e:	b2da      	uxtb	r2, r3
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	701a      	strb	r2, [r3, #0]
        }

        // Increment start index
        startIndex++;
 8015894:	7f7b      	ldrb	r3, [r7, #29]
 8015896:	3301      	adds	r3, #1
 8015898:	777b      	strb	r3, [r7, #29]
        if ( startIndex > 7 )
 801589a:	7f7b      	ldrb	r3, [r7, #29]
 801589c:	2b07      	cmp	r3, #7
 801589e:	d901      	bls.n	80158a4 <RegionBaseUSComputeNext125kHzJoinChannel+0xb8>
        {
            startIndex = 0;
 80158a0:	2300      	movs	r3, #0
 80158a2:	777b      	strb	r3, [r7, #29]
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 80158a4:	7cfb      	ldrb	r3, [r7, #19]
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	d104      	bne.n	80158b4 <RegionBaseUSComputeNext125kHzJoinChannel+0xc8>
 80158aa:	68bb      	ldr	r3, [r7, #8]
 80158ac:	781b      	ldrb	r3, [r3, #0]
 80158ae:	7f7a      	ldrb	r2, [r7, #29]
 80158b0:	429a      	cmp	r2, r3
 80158b2:	d1b5      	bne.n	8015820 <RegionBaseUSComputeNext125kHzJoinChannel+0x34>

    if ( availableChannels > 0 )
 80158b4:	7cfb      	ldrb	r3, [r7, #19]
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	d004      	beq.n	80158c4 <RegionBaseUSComputeNext125kHzJoinChannel+0xd8>
    {
        *groupsCurrentIndex = startIndex;
 80158ba:	68bb      	ldr	r3, [r7, #8]
 80158bc:	7f7a      	ldrb	r2, [r7, #29]
 80158be:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 80158c0:	2300      	movs	r3, #0
 80158c2:	e000      	b.n	80158c6 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 80158c4:	2303      	movs	r3, #3
}
 80158c6:	4618      	mov	r0, r3
 80158c8:	3724      	adds	r7, #36	; 0x24
 80158ca:	46bd      	mov	sp, r7
 80158cc:	bd90      	pop	{r4, r7, pc}

080158ce <RegionBaseUSCalcDownlinkFrequency>:
    return true;
}

uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
 80158ce:	b480      	push	{r7}
 80158d0:	b085      	sub	sp, #20
 80158d2:	af00      	add	r7, sp, #0
 80158d4:	4603      	mov	r3, r0
 80158d6:	60b9      	str	r1, [r7, #8]
 80158d8:	607a      	str	r2, [r7, #4]
 80158da:	73fb      	strb	r3, [r7, #15]
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
 80158dc:	7bfb      	ldrb	r3, [r7, #15]
 80158de:	687a      	ldr	r2, [r7, #4]
 80158e0:	fb03 f202 	mul.w	r2, r3, r2
 80158e4:	68bb      	ldr	r3, [r7, #8]
 80158e6:	4413      	add	r3, r2
}
 80158e8:	4618      	mov	r0, r3
 80158ea:	3714      	adds	r7, #20
 80158ec:	46bd      	mov	sp, r7
 80158ee:	bc80      	pop	{r7}
 80158f0:	4770      	bx	lr

080158f2 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80158f2:	b480      	push	{r7}
 80158f4:	b087      	sub	sp, #28
 80158f6:	af00      	add	r7, sp, #0
 80158f8:	60f8      	str	r0, [r7, #12]
 80158fa:	4608      	mov	r0, r1
 80158fc:	4639      	mov	r1, r7
 80158fe:	e881 000c 	stmia.w	r1, {r2, r3}
 8015902:	4603      	mov	r3, r0
 8015904:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8015906:	68fb      	ldr	r3, [r7, #12]
 8015908:	881b      	ldrh	r3, [r3, #0]
 801590a:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 801590c:	7afb      	ldrb	r3, [r7, #11]
 801590e:	f083 0301 	eor.w	r3, r3, #1
 8015912:	b2db      	uxtb	r3, r3
 8015914:	2b00      	cmp	r3, #0
 8015916:	d01b      	beq.n	8015950 <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8015918:	f242 7310 	movw	r3, #10000	; 0x2710
 801591c:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 801591e:	683b      	ldr	r3, [r7, #0]
 8015920:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8015924:	d202      	bcs.n	801592c <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8015926:	2364      	movs	r3, #100	; 0x64
 8015928:	82bb      	strh	r3, [r7, #20]
 801592a:	e00b      	b.n	8015944 <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 801592c:	683b      	ldr	r3, [r7, #0]
 801592e:	f649 22af 	movw	r2, #39599	; 0x9aaf
 8015932:	4293      	cmp	r3, r2
 8015934:	d803      	bhi.n	801593e <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8015936:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801593a:	82bb      	strh	r3, [r7, #20]
 801593c:	e002      	b.n	8015944 <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 801593e:	f242 7310 	movw	r3, #10000	; 0x2710
 8015942:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8015944:	8aba      	ldrh	r2, [r7, #20]
 8015946:	8afb      	ldrh	r3, [r7, #22]
 8015948:	4293      	cmp	r3, r2
 801594a:	bf38      	it	cc
 801594c:	4613      	movcc	r3, r2
 801594e:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8015950:	8afb      	ldrh	r3, [r7, #22]
 8015952:	2b00      	cmp	r3, #0
 8015954:	d101      	bne.n	801595a <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 8015956:	2301      	movs	r3, #1
 8015958:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 801595a:	8afb      	ldrh	r3, [r7, #22]
}
 801595c:	4618      	mov	r0, r3
 801595e:	371c      	adds	r7, #28
 8015960:	46bd      	mov	sp, r7
 8015962:	bc80      	pop	{r7}
 8015964:	4770      	bx	lr
	...

08015968 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8015968:	b580      	push	{r7, lr}
 801596a:	b08e      	sub	sp, #56	; 0x38
 801596c:	af02      	add	r7, sp, #8
 801596e:	60f8      	str	r0, [r7, #12]
 8015970:	4608      	mov	r0, r1
 8015972:	4639      	mov	r1, r7
 8015974:	e881 000c 	stmia.w	r1, {r2, r3}
 8015978:	4603      	mov	r3, r0
 801597a:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 801597c:	68fb      	ldr	r3, [r7, #12]
 801597e:	881b      	ldrh	r3, [r3, #0]
 8015980:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8015982:	4b4b      	ldr	r3, [pc, #300]	; (8015ab0 <SetMaxTimeCredits+0x148>)
 8015984:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 8015986:	463b      	mov	r3, r7
 8015988:	e893 0003 	ldmia.w	r3, {r0, r1}
 801598c:	f006 ff68 	bl	801c860 <SysTimeToMs>
 8015990:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 8015992:	f107 0314 	add.w	r3, r7, #20
 8015996:	2200      	movs	r2, #0
 8015998:	601a      	str	r2, [r3, #0]
 801599a:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 801599c:	7af9      	ldrb	r1, [r7, #11]
 801599e:	463b      	mov	r3, r7
 80159a0:	cb0c      	ldmia	r3, {r2, r3}
 80159a2:	68f8      	ldr	r0, [r7, #12]
 80159a4:	f7ff ffa5 	bl	80158f2 <GetDutyCycle>
 80159a8:	4603      	mov	r3, r0
 80159aa:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 80159ac:	7afb      	ldrb	r3, [r7, #11]
 80159ae:	f083 0301 	eor.w	r3, r3, #1
 80159b2:	b2db      	uxtb	r3, r3
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	d062      	beq.n	8015a7e <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 80159b8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80159ba:	2b64      	cmp	r3, #100	; 0x64
 80159bc:	d105      	bne.n	80159ca <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80159be:	4b3c      	ldr	r3, [pc, #240]	; (8015ab0 <SetMaxTimeCredits+0x148>)
 80159c0:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 80159c2:	68fb      	ldr	r3, [r7, #12]
 80159c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80159c6:	609a      	str	r2, [r3, #8]
 80159c8:	e00b      	b.n	80159e2 <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 80159ca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80159cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80159d0:	d105      	bne.n	80159de <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 80159d2:	4b38      	ldr	r3, [pc, #224]	; (8015ab4 <SetMaxTimeCredits+0x14c>)
 80159d4:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 80159d6:	68fb      	ldr	r3, [r7, #12]
 80159d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80159da:	609a      	str	r2, [r3, #8]
 80159dc:	e001      	b.n	80159e2 <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 80159de:	4b36      	ldr	r3, [pc, #216]	; (8015ab8 <SetMaxTimeCredits+0x150>)
 80159e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 80159e2:	68fb      	ldr	r3, [r7, #12]
 80159e4:	689a      	ldr	r2, [r3, #8]
 80159e6:	f107 031c 	add.w	r3, r7, #28
 80159ea:	4611      	mov	r1, r2
 80159ec:	4618      	mov	r0, r3
 80159ee:	f006 ff5f 	bl	801c8b0 <SysTimeFromMs>
 80159f2:	f107 0014 	add.w	r0, r7, #20
 80159f6:	6a3b      	ldr	r3, [r7, #32]
 80159f8:	9300      	str	r3, [sp, #0]
 80159fa:	69fb      	ldr	r3, [r7, #28]
 80159fc:	463a      	mov	r2, r7
 80159fe:	ca06      	ldmia	r2, {r1, r2}
 8015a00:	f006 fe6f 	bl	801c6e2 <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8015a04:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8015a08:	f083 0301 	eor.w	r3, r3, #1
 8015a0c:	b2db      	uxtb	r3, r3
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	d006      	beq.n	8015a20 <SetMaxTimeCredits+0xb8>
 8015a12:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8015a16:	f083 0301 	eor.w	r3, r3, #1
 8015a1a:	b2db      	uxtb	r3, r3
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	d108      	bne.n	8015a32 <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8015a20:	68fb      	ldr	r3, [r7, #12]
 8015a22:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8015a24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015a26:	429a      	cmp	r2, r3
 8015a28:	d103      	bne.n	8015a32 <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 8015a2a:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8015a2c:	4a23      	ldr	r2, [pc, #140]	; (8015abc <SetMaxTimeCredits+0x154>)
 8015a2e:	4293      	cmp	r3, r2
 8015a30:	d92f      	bls.n	8015a92 <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 8015a32:	68fb      	ldr	r3, [r7, #12]
 8015a34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015a36:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8015a38:	683b      	ldr	r3, [r7, #0]
 8015a3a:	4a21      	ldr	r2, [pc, #132]	; (8015ac0 <SetMaxTimeCredits+0x158>)
 8015a3c:	4293      	cmp	r3, r2
 8015a3e:	d928      	bls.n	8015a92 <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8015a40:	683b      	ldr	r3, [r7, #0]
 8015a42:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8015a46:	3b30      	subs	r3, #48	; 0x30
 8015a48:	4a1e      	ldr	r2, [pc, #120]	; (8015ac4 <SetMaxTimeCredits+0x15c>)
 8015a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8015a4e:	0c1b      	lsrs	r3, r3, #16
 8015a50:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 8015a52:	697b      	ldr	r3, [r7, #20]
 8015a54:	4a1c      	ldr	r2, [pc, #112]	; (8015ac8 <SetMaxTimeCredits+0x160>)
 8015a56:	fb02 f303 	mul.w	r3, r2, r3
 8015a5a:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8015a5c:	697b      	ldr	r3, [r7, #20]
 8015a5e:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8015a62:	3330      	adds	r3, #48	; 0x30
 8015a64:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 8015a66:	2300      	movs	r3, #0
 8015a68:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 8015a6a:	f107 0314 	add.w	r3, r7, #20
 8015a6e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015a72:	f006 fef5 	bl	801c860 <SysTimeToMs>
 8015a76:	4602      	mov	r2, r0
 8015a78:	68fb      	ldr	r3, [r7, #12]
 8015a7a:	609a      	str	r2, [r3, #8]
 8015a7c:	e009      	b.n	8015a92 <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 8015a7e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8015a82:	f083 0301 	eor.w	r3, r3, #1
 8015a86:	b2db      	uxtb	r3, r3
 8015a88:	2b00      	cmp	r3, #0
 8015a8a:	d002      	beq.n	8015a92 <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 8015a8c:	68fb      	ldr	r3, [r7, #12]
 8015a8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015a90:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 8015a92:	68fb      	ldr	r3, [r7, #12]
 8015a94:	685b      	ldr	r3, [r3, #4]
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	d102      	bne.n	8015aa0 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 8015a9a:	68fb      	ldr	r3, [r7, #12]
 8015a9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015a9e:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8015aa0:	68fb      	ldr	r3, [r7, #12]
 8015aa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015aa4:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 8015aa6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 8015aa8:	4618      	mov	r0, r3
 8015aaa:	3730      	adds	r7, #48	; 0x30
 8015aac:	46bd      	mov	sp, r7
 8015aae:	bd80      	pop	{r7, pc}
 8015ab0:	001b7740 	.word	0x001b7740
 8015ab4:	0112a880 	.word	0x0112a880
 8015ab8:	02932e00 	.word	0x02932e00
 8015abc:	0001517f 	.word	0x0001517f
 8015ac0:	0001ec2f 	.word	0x0001ec2f
 8015ac4:	c22e4507 	.word	0xc22e4507
 8015ac8:	00015180 	.word	0x00015180

08015acc <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8015acc:	b580      	push	{r7, lr}
 8015ace:	b086      	sub	sp, #24
 8015ad0:	af02      	add	r7, sp, #8
 8015ad2:	6078      	str	r0, [r7, #4]
 8015ad4:	4608      	mov	r0, r1
 8015ad6:	4611      	mov	r1, r2
 8015ad8:	461a      	mov	r2, r3
 8015ada:	4603      	mov	r3, r0
 8015adc:	70fb      	strb	r3, [r7, #3]
 8015ade:	460b      	mov	r3, r1
 8015ae0:	70bb      	strb	r3, [r7, #2]
 8015ae2:	4613      	mov	r3, r2
 8015ae4:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8015ae6:	78f9      	ldrb	r1, [r7, #3]
 8015ae8:	787b      	ldrb	r3, [r7, #1]
 8015aea:	9301      	str	r3, [sp, #4]
 8015aec:	78bb      	ldrb	r3, [r7, #2]
 8015aee:	9300      	str	r3, [sp, #0]
 8015af0:	f107 0318 	add.w	r3, r7, #24
 8015af4:	cb0c      	ldmia	r3, {r2, r3}
 8015af6:	6878      	ldr	r0, [r7, #4]
 8015af8:	f7ff ff36 	bl	8015968 <SetMaxTimeCredits>
 8015afc:	4603      	mov	r3, r0
 8015afe:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8015b00:	78fb      	ldrb	r3, [r7, #3]
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	d00a      	beq.n	8015b1c <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	685b      	ldr	r3, [r3, #4]
 8015b0a:	4618      	mov	r0, r3
 8015b0c:	f007 fce4 	bl	801d4d8 <UTIL_TIMER_GetElapsedTime>
 8015b10:	4602      	mov	r2, r0
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	68db      	ldr	r3, [r3, #12]
 8015b16:	441a      	add	r2, r3
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	68da      	ldr	r2, [r3, #12]
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	691b      	ldr	r3, [r3, #16]
 8015b24:	429a      	cmp	r2, r3
 8015b26:	d903      	bls.n	8015b30 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	691a      	ldr	r2, [r3, #16]
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8015b30:	687b      	ldr	r3, [r7, #4]
 8015b32:	6a3a      	ldr	r2, [r7, #32]
 8015b34:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 8015b36:	89fb      	ldrh	r3, [r7, #14]
}
 8015b38:	4618      	mov	r0, r3
 8015b3a:	3710      	adds	r7, #16
 8015b3c:	46bd      	mov	sp, r7
 8015b3e:	bd80      	pop	{r7, pc}

08015b40 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8015b40:	b480      	push	{r7}
 8015b42:	b085      	sub	sp, #20
 8015b44:	af00      	add	r7, sp, #0
 8015b46:	4603      	mov	r3, r0
 8015b48:	460a      	mov	r2, r1
 8015b4a:	80fb      	strh	r3, [r7, #6]
 8015b4c:	4613      	mov	r3, r2
 8015b4e:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8015b50:	2300      	movs	r3, #0
 8015b52:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8015b54:	2300      	movs	r3, #0
 8015b56:	73bb      	strb	r3, [r7, #14]
 8015b58:	e011      	b.n	8015b7e <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8015b5a:	88fa      	ldrh	r2, [r7, #6]
 8015b5c:	7bbb      	ldrb	r3, [r7, #14]
 8015b5e:	2101      	movs	r1, #1
 8015b60:	fa01 f303 	lsl.w	r3, r1, r3
 8015b64:	401a      	ands	r2, r3
 8015b66:	7bbb      	ldrb	r3, [r7, #14]
 8015b68:	2101      	movs	r1, #1
 8015b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8015b6e:	429a      	cmp	r2, r3
 8015b70:	d102      	bne.n	8015b78 <CountChannels+0x38>
        {
            nbActiveBits++;
 8015b72:	7bfb      	ldrb	r3, [r7, #15]
 8015b74:	3301      	adds	r3, #1
 8015b76:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8015b78:	7bbb      	ldrb	r3, [r7, #14]
 8015b7a:	3301      	adds	r3, #1
 8015b7c:	73bb      	strb	r3, [r7, #14]
 8015b7e:	7bba      	ldrb	r2, [r7, #14]
 8015b80:	797b      	ldrb	r3, [r7, #5]
 8015b82:	429a      	cmp	r2, r3
 8015b84:	d3e9      	bcc.n	8015b5a <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 8015b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b88:	4618      	mov	r0, r3
 8015b8a:	3714      	adds	r7, #20
 8015b8c:	46bd      	mov	sp, r7
 8015b8e:	bc80      	pop	{r7}
 8015b90:	4770      	bx	lr

08015b92 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8015b92:	b580      	push	{r7, lr}
 8015b94:	b084      	sub	sp, #16
 8015b96:	af00      	add	r7, sp, #0
 8015b98:	6039      	str	r1, [r7, #0]
 8015b9a:	4611      	mov	r1, r2
 8015b9c:	461a      	mov	r2, r3
 8015b9e:	4603      	mov	r3, r0
 8015ba0:	71fb      	strb	r3, [r7, #7]
 8015ba2:	460b      	mov	r3, r1
 8015ba4:	71bb      	strb	r3, [r7, #6]
 8015ba6:	4613      	mov	r3, r2
 8015ba8:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8015baa:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8015bae:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8015bb2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015bb6:	4618      	mov	r0, r3
 8015bb8:	f000 f85d 	bl	8015c76 <RegionCommonValueInRange>
 8015bbc:	4603      	mov	r3, r0
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	d101      	bne.n	8015bc6 <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 8015bc2:	2300      	movs	r3, #0
 8015bc4:	e053      	b.n	8015c6e <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8015bc6:	2300      	movs	r3, #0
 8015bc8:	73fb      	strb	r3, [r7, #15]
 8015bca:	2300      	movs	r3, #0
 8015bcc:	73bb      	strb	r3, [r7, #14]
 8015bce:	e049      	b.n	8015c64 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8015bd0:	2300      	movs	r3, #0
 8015bd2:	737b      	strb	r3, [r7, #13]
 8015bd4:	e03d      	b.n	8015c52 <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8015bd6:	7bbb      	ldrb	r3, [r7, #14]
 8015bd8:	005b      	lsls	r3, r3, #1
 8015bda:	683a      	ldr	r2, [r7, #0]
 8015bdc:	4413      	add	r3, r2
 8015bde:	881b      	ldrh	r3, [r3, #0]
 8015be0:	461a      	mov	r2, r3
 8015be2:	7b7b      	ldrb	r3, [r7, #13]
 8015be4:	fa42 f303 	asr.w	r3, r2, r3
 8015be8:	f003 0301 	and.w	r3, r3, #1
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	d02d      	beq.n	8015c4c <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8015bf0:	7bfa      	ldrb	r2, [r7, #15]
 8015bf2:	7b7b      	ldrb	r3, [r7, #13]
 8015bf4:	4413      	add	r3, r2
 8015bf6:	461a      	mov	r2, r3
 8015bf8:	4613      	mov	r3, r2
 8015bfa:	005b      	lsls	r3, r3, #1
 8015bfc:	4413      	add	r3, r2
 8015bfe:	009b      	lsls	r3, r3, #2
 8015c00:	461a      	mov	r2, r3
 8015c02:	69fb      	ldr	r3, [r7, #28]
 8015c04:	4413      	add	r3, r2
 8015c06:	7a1b      	ldrb	r3, [r3, #8]
 8015c08:	f343 0303 	sbfx	r3, r3, #0, #4
 8015c0c:	b25b      	sxtb	r3, r3
 8015c0e:	f003 030f 	and.w	r3, r3, #15
 8015c12:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8015c14:	7bfa      	ldrb	r2, [r7, #15]
 8015c16:	7b7b      	ldrb	r3, [r7, #13]
 8015c18:	4413      	add	r3, r2
 8015c1a:	461a      	mov	r2, r3
 8015c1c:	4613      	mov	r3, r2
 8015c1e:	005b      	lsls	r3, r3, #1
 8015c20:	4413      	add	r3, r2
 8015c22:	009b      	lsls	r3, r3, #2
 8015c24:	461a      	mov	r2, r3
 8015c26:	69fb      	ldr	r3, [r7, #28]
 8015c28:	4413      	add	r3, r2
 8015c2a:	7a1b      	ldrb	r3, [r3, #8]
 8015c2c:	f343 1303 	sbfx	r3, r3, #4, #4
 8015c30:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8015c32:	f003 030f 	and.w	r3, r3, #15
 8015c36:	b25a      	sxtb	r2, r3
 8015c38:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015c3c:	4618      	mov	r0, r3
 8015c3e:	f000 f81a 	bl	8015c76 <RegionCommonValueInRange>
 8015c42:	4603      	mov	r3, r0
 8015c44:	2b01      	cmp	r3, #1
 8015c46:	d101      	bne.n	8015c4c <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8015c48:	2301      	movs	r3, #1
 8015c4a:	e010      	b.n	8015c6e <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8015c4c:	7b7b      	ldrb	r3, [r7, #13]
 8015c4e:	3301      	adds	r3, #1
 8015c50:	737b      	strb	r3, [r7, #13]
 8015c52:	7b7b      	ldrb	r3, [r7, #13]
 8015c54:	2b0f      	cmp	r3, #15
 8015c56:	d9be      	bls.n	8015bd6 <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8015c58:	7bfb      	ldrb	r3, [r7, #15]
 8015c5a:	3310      	adds	r3, #16
 8015c5c:	73fb      	strb	r3, [r7, #15]
 8015c5e:	7bbb      	ldrb	r3, [r7, #14]
 8015c60:	3301      	adds	r3, #1
 8015c62:	73bb      	strb	r3, [r7, #14]
 8015c64:	7bfa      	ldrb	r2, [r7, #15]
 8015c66:	79fb      	ldrb	r3, [r7, #7]
 8015c68:	429a      	cmp	r2, r3
 8015c6a:	d3b1      	bcc.n	8015bd0 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8015c6c:	2300      	movs	r3, #0
}
 8015c6e:	4618      	mov	r0, r3
 8015c70:	3710      	adds	r7, #16
 8015c72:	46bd      	mov	sp, r7
 8015c74:	bd80      	pop	{r7, pc}

08015c76 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8015c76:	b480      	push	{r7}
 8015c78:	b083      	sub	sp, #12
 8015c7a:	af00      	add	r7, sp, #0
 8015c7c:	4603      	mov	r3, r0
 8015c7e:	71fb      	strb	r3, [r7, #7]
 8015c80:	460b      	mov	r3, r1
 8015c82:	71bb      	strb	r3, [r7, #6]
 8015c84:	4613      	mov	r3, r2
 8015c86:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8015c88:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8015c8c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015c90:	429a      	cmp	r2, r3
 8015c92:	db07      	blt.n	8015ca4 <RegionCommonValueInRange+0x2e>
 8015c94:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8015c98:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8015c9c:	429a      	cmp	r2, r3
 8015c9e:	dc01      	bgt.n	8015ca4 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8015ca0:	2301      	movs	r3, #1
 8015ca2:	e000      	b.n	8015ca6 <RegionCommonValueInRange+0x30>
    }
    return 0;
 8015ca4:	2300      	movs	r3, #0
}
 8015ca6:	4618      	mov	r0, r3
 8015ca8:	370c      	adds	r7, #12
 8015caa:	46bd      	mov	sp, r7
 8015cac:	bc80      	pop	{r7}
 8015cae:	4770      	bx	lr

08015cb0 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8015cb0:	b480      	push	{r7}
 8015cb2:	b085      	sub	sp, #20
 8015cb4:	af00      	add	r7, sp, #0
 8015cb6:	6078      	str	r0, [r7, #4]
 8015cb8:	460b      	mov	r3, r1
 8015cba:	70fb      	strb	r3, [r7, #3]
 8015cbc:	4613      	mov	r3, r2
 8015cbe:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8015cc0:	78fb      	ldrb	r3, [r7, #3]
 8015cc2:	091b      	lsrs	r3, r3, #4
 8015cc4:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8015cc6:	78bb      	ldrb	r3, [r7, #2]
 8015cc8:	091b      	lsrs	r3, r3, #4
 8015cca:	b2db      	uxtb	r3, r3
 8015ccc:	7bfa      	ldrb	r2, [r7, #15]
 8015cce:	429a      	cmp	r2, r3
 8015cd0:	d803      	bhi.n	8015cda <RegionCommonChanDisable+0x2a>
 8015cd2:	78fa      	ldrb	r2, [r7, #3]
 8015cd4:	78bb      	ldrb	r3, [r7, #2]
 8015cd6:	429a      	cmp	r2, r3
 8015cd8:	d301      	bcc.n	8015cde <RegionCommonChanDisable+0x2e>
    {
        return false;
 8015cda:	2300      	movs	r3, #0
 8015cdc:	e017      	b.n	8015d0e <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8015cde:	7bfb      	ldrb	r3, [r7, #15]
 8015ce0:	005b      	lsls	r3, r3, #1
 8015ce2:	687a      	ldr	r2, [r7, #4]
 8015ce4:	4413      	add	r3, r2
 8015ce6:	881b      	ldrh	r3, [r3, #0]
 8015ce8:	b21a      	sxth	r2, r3
 8015cea:	78fb      	ldrb	r3, [r7, #3]
 8015cec:	f003 030f 	and.w	r3, r3, #15
 8015cf0:	2101      	movs	r1, #1
 8015cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8015cf6:	b21b      	sxth	r3, r3
 8015cf8:	43db      	mvns	r3, r3
 8015cfa:	b21b      	sxth	r3, r3
 8015cfc:	4013      	ands	r3, r2
 8015cfe:	b219      	sxth	r1, r3
 8015d00:	7bfb      	ldrb	r3, [r7, #15]
 8015d02:	005b      	lsls	r3, r3, #1
 8015d04:	687a      	ldr	r2, [r7, #4]
 8015d06:	4413      	add	r3, r2
 8015d08:	b28a      	uxth	r2, r1
 8015d0a:	801a      	strh	r2, [r3, #0]

    return true;
 8015d0c:	2301      	movs	r3, #1
}
 8015d0e:	4618      	mov	r0, r3
 8015d10:	3714      	adds	r7, #20
 8015d12:	46bd      	mov	sp, r7
 8015d14:	bc80      	pop	{r7}
 8015d16:	4770      	bx	lr

08015d18 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8015d18:	b580      	push	{r7, lr}
 8015d1a:	b084      	sub	sp, #16
 8015d1c:	af00      	add	r7, sp, #0
 8015d1e:	6078      	str	r0, [r7, #4]
 8015d20:	460b      	mov	r3, r1
 8015d22:	70fb      	strb	r3, [r7, #3]
 8015d24:	4613      	mov	r3, r2
 8015d26:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8015d28:	2300      	movs	r3, #0
 8015d2a:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	2b00      	cmp	r3, #0
 8015d30:	d101      	bne.n	8015d36 <RegionCommonCountChannels+0x1e>
    {
        return 0;
 8015d32:	2300      	movs	r3, #0
 8015d34:	e018      	b.n	8015d68 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8015d36:	78fb      	ldrb	r3, [r7, #3]
 8015d38:	73bb      	strb	r3, [r7, #14]
 8015d3a:	e010      	b.n	8015d5e <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8015d3c:	7bbb      	ldrb	r3, [r7, #14]
 8015d3e:	005b      	lsls	r3, r3, #1
 8015d40:	687a      	ldr	r2, [r7, #4]
 8015d42:	4413      	add	r3, r2
 8015d44:	881b      	ldrh	r3, [r3, #0]
 8015d46:	2110      	movs	r1, #16
 8015d48:	4618      	mov	r0, r3
 8015d4a:	f7ff fef9 	bl	8015b40 <CountChannels>
 8015d4e:	4603      	mov	r3, r0
 8015d50:	461a      	mov	r2, r3
 8015d52:	7bfb      	ldrb	r3, [r7, #15]
 8015d54:	4413      	add	r3, r2
 8015d56:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8015d58:	7bbb      	ldrb	r3, [r7, #14]
 8015d5a:	3301      	adds	r3, #1
 8015d5c:	73bb      	strb	r3, [r7, #14]
 8015d5e:	7bba      	ldrb	r2, [r7, #14]
 8015d60:	78bb      	ldrb	r3, [r7, #2]
 8015d62:	429a      	cmp	r2, r3
 8015d64:	d3ea      	bcc.n	8015d3c <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 8015d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8015d68:	4618      	mov	r0, r3
 8015d6a:	3710      	adds	r7, #16
 8015d6c:	46bd      	mov	sp, r7
 8015d6e:	bd80      	pop	{r7, pc}

08015d70 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8015d70:	b480      	push	{r7}
 8015d72:	b087      	sub	sp, #28
 8015d74:	af00      	add	r7, sp, #0
 8015d76:	60f8      	str	r0, [r7, #12]
 8015d78:	60b9      	str	r1, [r7, #8]
 8015d7a:	4613      	mov	r3, r2
 8015d7c:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8015d7e:	68fb      	ldr	r3, [r7, #12]
 8015d80:	2b00      	cmp	r3, #0
 8015d82:	d016      	beq.n	8015db2 <RegionCommonChanMaskCopy+0x42>
 8015d84:	68bb      	ldr	r3, [r7, #8]
 8015d86:	2b00      	cmp	r3, #0
 8015d88:	d013      	beq.n	8015db2 <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 8015d8a:	2300      	movs	r3, #0
 8015d8c:	75fb      	strb	r3, [r7, #23]
 8015d8e:	e00c      	b.n	8015daa <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8015d90:	7dfb      	ldrb	r3, [r7, #23]
 8015d92:	005b      	lsls	r3, r3, #1
 8015d94:	68ba      	ldr	r2, [r7, #8]
 8015d96:	441a      	add	r2, r3
 8015d98:	7dfb      	ldrb	r3, [r7, #23]
 8015d9a:	005b      	lsls	r3, r3, #1
 8015d9c:	68f9      	ldr	r1, [r7, #12]
 8015d9e:	440b      	add	r3, r1
 8015da0:	8812      	ldrh	r2, [r2, #0]
 8015da2:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8015da4:	7dfb      	ldrb	r3, [r7, #23]
 8015da6:	3301      	adds	r3, #1
 8015da8:	75fb      	strb	r3, [r7, #23]
 8015daa:	7dfa      	ldrb	r2, [r7, #23]
 8015dac:	79fb      	ldrb	r3, [r7, #7]
 8015dae:	429a      	cmp	r2, r3
 8015db0:	d3ee      	bcc.n	8015d90 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8015db2:	bf00      	nop
 8015db4:	371c      	adds	r7, #28
 8015db6:	46bd      	mov	sp, r7
 8015db8:	bc80      	pop	{r7}
 8015dba:	4770      	bx	lr

08015dbc <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8015dbc:	b082      	sub	sp, #8
 8015dbe:	b580      	push	{r7, lr}
 8015dc0:	b086      	sub	sp, #24
 8015dc2:	af00      	add	r7, sp, #0
 8015dc4:	60f8      	str	r0, [r7, #12]
 8015dc6:	60b9      	str	r1, [r7, #8]
 8015dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8015dca:	4613      	mov	r3, r2
 8015dcc:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8015dce:	79f9      	ldrb	r1, [r7, #7]
 8015dd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015dd4:	cb0c      	ldmia	r3, {r2, r3}
 8015dd6:	68f8      	ldr	r0, [r7, #12]
 8015dd8:	f7ff fd8b 	bl	80158f2 <GetDutyCycle>
 8015ddc:	4603      	mov	r3, r0
 8015dde:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8015de0:	68fb      	ldr	r3, [r7, #12]
 8015de2:	68da      	ldr	r2, [r3, #12]
 8015de4:	8afb      	ldrh	r3, [r7, #22]
 8015de6:	68b9      	ldr	r1, [r7, #8]
 8015de8:	fb01 f303 	mul.w	r3, r1, r3
 8015dec:	429a      	cmp	r2, r3
 8015dee:	d909      	bls.n	8015e04 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8015df0:	68fb      	ldr	r3, [r7, #12]
 8015df2:	68da      	ldr	r2, [r3, #12]
 8015df4:	8afb      	ldrh	r3, [r7, #22]
 8015df6:	68b9      	ldr	r1, [r7, #8]
 8015df8:	fb01 f303 	mul.w	r3, r1, r3
 8015dfc:	1ad2      	subs	r2, r2, r3
 8015dfe:	68fb      	ldr	r3, [r7, #12]
 8015e00:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8015e02:	e002      	b.n	8015e0a <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8015e04:	68fb      	ldr	r3, [r7, #12]
 8015e06:	2200      	movs	r2, #0
 8015e08:	60da      	str	r2, [r3, #12]
}
 8015e0a:	bf00      	nop
 8015e0c:	3718      	adds	r7, #24
 8015e0e:	46bd      	mov	sp, r7
 8015e10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015e14:	b002      	add	sp, #8
 8015e16:	4770      	bx	lr

08015e18 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8015e18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015e1a:	b08f      	sub	sp, #60	; 0x3c
 8015e1c:	af04      	add	r7, sp, #16
 8015e1e:	6039      	str	r1, [r7, #0]
 8015e20:	4611      	mov	r1, r2
 8015e22:	461a      	mov	r2, r3
 8015e24:	4603      	mov	r3, r0
 8015e26:	71fb      	strb	r3, [r7, #7]
 8015e28:	460b      	mov	r3, r1
 8015e2a:	71bb      	strb	r3, [r7, #6]
 8015e2c:	4613      	mov	r3, r2
 8015e2e:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8015e30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015e34:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8015e36:	f007 fb3d 	bl	801d4b4 <UTIL_TIMER_GetCurrentTime>
 8015e3a:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8015e3c:	2300      	movs	r3, #0
 8015e3e:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8015e40:	2301      	movs	r3, #1
 8015e42:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8015e44:	2300      	movs	r3, #0
 8015e46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8015e4a:	2300      	movs	r3, #0
 8015e4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8015e50:	e0ba      	b.n	8015fc8 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8015e52:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015e56:	4613      	mov	r3, r2
 8015e58:	005b      	lsls	r3, r3, #1
 8015e5a:	4413      	add	r3, r2
 8015e5c:	00db      	lsls	r3, r3, #3
 8015e5e:	461a      	mov	r2, r3
 8015e60:	683b      	ldr	r3, [r7, #0]
 8015e62:	189c      	adds	r4, r3, r2
 8015e64:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 8015e68:	797a      	ldrb	r2, [r7, #5]
 8015e6a:	79fd      	ldrb	r5, [r7, #7]
 8015e6c:	69fb      	ldr	r3, [r7, #28]
 8015e6e:	9302      	str	r3, [sp, #8]
 8015e70:	46ec      	mov	ip, sp
 8015e72:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015e76:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015e7a:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015e7e:	4633      	mov	r3, r6
 8015e80:	4629      	mov	r1, r5
 8015e82:	4620      	mov	r0, r4
 8015e84:	f7ff fe22 	bl	8015acc <UpdateTimeCredits>
 8015e88:	4603      	mov	r3, r0
 8015e8a:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8015e8c:	8afa      	ldrh	r2, [r7, #22]
 8015e8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015e90:	fb02 f303 	mul.w	r3, r2, r3
 8015e94:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 8015e96:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015e9a:	4613      	mov	r3, r2
 8015e9c:	005b      	lsls	r3, r3, #1
 8015e9e:	4413      	add	r3, r2
 8015ea0:	00db      	lsls	r3, r3, #3
 8015ea2:	461a      	mov	r2, r3
 8015ea4:	683b      	ldr	r3, [r7, #0]
 8015ea6:	4413      	add	r3, r2
 8015ea8:	68db      	ldr	r3, [r3, #12]
 8015eaa:	69ba      	ldr	r2, [r7, #24]
 8015eac:	429a      	cmp	r2, r3
 8015eae:	d908      	bls.n	8015ec2 <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8015eb0:	797b      	ldrb	r3, [r7, #5]
 8015eb2:	f083 0301 	eor.w	r3, r3, #1
 8015eb6:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	d013      	beq.n	8015ee4 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8015ebc:	79fb      	ldrb	r3, [r7, #7]
 8015ebe:	2b00      	cmp	r3, #0
 8015ec0:	d010      	beq.n	8015ee4 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 8015ec2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015ec6:	4613      	mov	r3, r2
 8015ec8:	005b      	lsls	r3, r3, #1
 8015eca:	4413      	add	r3, r2
 8015ecc:	00db      	lsls	r3, r3, #3
 8015ece:	461a      	mov	r2, r3
 8015ed0:	683b      	ldr	r3, [r7, #0]
 8015ed2:	4413      	add	r3, r2
 8015ed4:	2201      	movs	r2, #1
 8015ed6:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8015ed8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015edc:	3301      	adds	r3, #1
 8015ede:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8015ee2:	e06c      	b.n	8015fbe <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8015ee4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015ee8:	4613      	mov	r3, r2
 8015eea:	005b      	lsls	r3, r3, #1
 8015eec:	4413      	add	r3, r2
 8015eee:	00db      	lsls	r3, r3, #3
 8015ef0:	461a      	mov	r2, r3
 8015ef2:	683b      	ldr	r3, [r7, #0]
 8015ef4:	4413      	add	r3, r2
 8015ef6:	2200      	movs	r2, #0
 8015ef8:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits >= creditCosts )
 8015efa:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015efe:	4613      	mov	r3, r2
 8015f00:	005b      	lsls	r3, r3, #1
 8015f02:	4413      	add	r3, r2
 8015f04:	00db      	lsls	r3, r3, #3
 8015f06:	461a      	mov	r2, r3
 8015f08:	683b      	ldr	r3, [r7, #0]
 8015f0a:	4413      	add	r3, r2
 8015f0c:	691b      	ldr	r3, [r3, #16]
 8015f0e:	69ba      	ldr	r2, [r7, #24]
 8015f10:	429a      	cmp	r2, r3
 8015f12:	d815      	bhi.n	8015f40 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8015f14:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015f18:	4613      	mov	r3, r2
 8015f1a:	005b      	lsls	r3, r3, #1
 8015f1c:	4413      	add	r3, r2
 8015f1e:	00db      	lsls	r3, r3, #3
 8015f20:	461a      	mov	r2, r3
 8015f22:	683b      	ldr	r3, [r7, #0]
 8015f24:	4413      	add	r3, r2
 8015f26:	68db      	ldr	r3, [r3, #12]
 8015f28:	69ba      	ldr	r2, [r7, #24]
 8015f2a:	1ad3      	subs	r3, r2, r3
 8015f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015f2e:	4293      	cmp	r3, r2
 8015f30:	bf28      	it	cs
 8015f32:	4613      	movcs	r3, r2
 8015f34:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8015f36:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015f3a:	3301      	adds	r3, #1
 8015f3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8015f40:	79fb      	ldrb	r3, [r7, #7]
 8015f42:	f083 0301 	eor.w	r3, r3, #1
 8015f46:	b2db      	uxtb	r3, r3
 8015f48:	2b00      	cmp	r3, #0
 8015f4a:	d038      	beq.n	8015fbe <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8015f4c:	2300      	movs	r3, #0
 8015f4e:	60fb      	str	r3, [r7, #12]
 8015f50:	2300      	movs	r3, #0
 8015f52:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8015f54:	8afb      	ldrh	r3, [r7, #22]
 8015f56:	2b64      	cmp	r3, #100	; 0x64
 8015f58:	d103      	bne.n	8015f62 <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8015f5a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8015f5e:	60fb      	str	r3, [r7, #12]
 8015f60:	e009      	b.n	8015f76 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8015f62:	8afb      	ldrh	r3, [r7, #22]
 8015f64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015f68:	d103      	bne.n	8015f72 <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8015f6a:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 8015f6e:	60fb      	str	r3, [r7, #12]
 8015f70:	e001      	b.n	8015f76 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8015f72:	4b1e      	ldr	r3, [pc, #120]	; (8015fec <RegionCommonUpdateBandTimeOff+0x1d4>)
 8015f74:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8015f76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015f78:	4a1c      	ldr	r2, [pc, #112]	; (8015fec <RegionCommonUpdateBandTimeOff+0x1d4>)
 8015f7a:	4293      	cmp	r3, r2
 8015f7c:	d90e      	bls.n	8015f9c <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8015f7e:	68fa      	ldr	r2, [r7, #12]
 8015f80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015f82:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8015f86:	3b30      	subs	r3, #48	; 0x30
 8015f88:	4919      	ldr	r1, [pc, #100]	; (8015ff0 <RegionCommonUpdateBandTimeOff+0x1d8>)
 8015f8a:	fba1 1303 	umull	r1, r3, r1, r3
 8015f8e:	0c1b      	lsrs	r3, r3, #16
 8015f90:	3301      	adds	r3, #1
 8015f92:	4918      	ldr	r1, [pc, #96]	; (8015ff4 <RegionCommonUpdateBandTimeOff+0x1dc>)
 8015f94:	fb01 f303 	mul.w	r3, r1, r3
 8015f98:	4413      	add	r3, r2
 8015f9a:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8015f9c:	f107 000c 	add.w	r0, r7, #12
 8015fa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015fa2:	9300      	str	r3, [sp, #0]
 8015fa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015fa6:	f107 020c 	add.w	r2, r7, #12
 8015faa:	ca06      	ldmia	r2, {r1, r2}
 8015fac:	f006 fb99 	bl	801c6e2 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8015fb0:	f107 030c 	add.w	r3, r7, #12
 8015fb4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015fb8:	f006 fc52 	bl	801c860 <SysTimeToMs>
 8015fbc:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 8015fbe:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015fc2:	3301      	adds	r3, #1
 8015fc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8015fc8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015fcc:	79bb      	ldrb	r3, [r7, #6]
 8015fce:	429a      	cmp	r2, r3
 8015fd0:	f4ff af3f 	bcc.w	8015e52 <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 8015fd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	d102      	bne.n	8015fe2 <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8015fdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015fe0:	e000      	b.n	8015fe4 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 8015fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015fe4:	4618      	mov	r0, r3
 8015fe6:	372c      	adds	r7, #44	; 0x2c
 8015fe8:	46bd      	mov	sp, r7
 8015fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015fec:	0001ec30 	.word	0x0001ec30
 8015ff0:	c22e4507 	.word	0xc22e4507
 8015ff4:	00015180 	.word	0x00015180

08015ff8 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8015ff8:	b480      	push	{r7}
 8015ffa:	b085      	sub	sp, #20
 8015ffc:	af00      	add	r7, sp, #0
 8015ffe:	6078      	str	r0, [r7, #4]
 8016000:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8016002:	2300      	movs	r3, #0
 8016004:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8016006:	687b      	ldr	r3, [r7, #4]
 8016008:	781b      	ldrb	r3, [r3, #0]
 801600a:	2b03      	cmp	r3, #3
 801600c:	d13f      	bne.n	801608e <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	3301      	adds	r3, #1
 8016012:	781b      	ldrb	r3, [r3, #0]
 8016014:	b25a      	sxtb	r2, r3
 8016016:	683b      	ldr	r3, [r7, #0]
 8016018:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 801601a:	683b      	ldr	r3, [r7, #0]
 801601c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016020:	f003 030f 	and.w	r3, r3, #15
 8016024:	b25a      	sxtb	r2, r3
 8016026:	683b      	ldr	r3, [r7, #0]
 8016028:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 801602a:	683b      	ldr	r3, [r7, #0]
 801602c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016030:	b2db      	uxtb	r3, r3
 8016032:	091b      	lsrs	r3, r3, #4
 8016034:	b2db      	uxtb	r3, r3
 8016036:	b25a      	sxtb	r2, r3
 8016038:	683b      	ldr	r3, [r7, #0]
 801603a:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	3302      	adds	r3, #2
 8016040:	781b      	ldrb	r3, [r3, #0]
 8016042:	b29a      	uxth	r2, r3
 8016044:	683b      	ldr	r3, [r7, #0]
 8016046:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8016048:	683b      	ldr	r3, [r7, #0]
 801604a:	889b      	ldrh	r3, [r3, #4]
 801604c:	b21a      	sxth	r2, r3
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	3303      	adds	r3, #3
 8016052:	781b      	ldrb	r3, [r3, #0]
 8016054:	021b      	lsls	r3, r3, #8
 8016056:	b21b      	sxth	r3, r3
 8016058:	4313      	orrs	r3, r2
 801605a:	b21b      	sxth	r3, r3
 801605c:	b29a      	uxth	r2, r3
 801605e:	683b      	ldr	r3, [r7, #0]
 8016060:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	791a      	ldrb	r2, [r3, #4]
 8016066:	683b      	ldr	r3, [r7, #0]
 8016068:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 801606a:	683b      	ldr	r3, [r7, #0]
 801606c:	781b      	ldrb	r3, [r3, #0]
 801606e:	091b      	lsrs	r3, r3, #4
 8016070:	b2db      	uxtb	r3, r3
 8016072:	f003 0307 	and.w	r3, r3, #7
 8016076:	b2da      	uxtb	r2, r3
 8016078:	683b      	ldr	r3, [r7, #0]
 801607a:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 801607c:	683b      	ldr	r3, [r7, #0]
 801607e:	781b      	ldrb	r3, [r3, #0]
 8016080:	f003 030f 	and.w	r3, r3, #15
 8016084:	b2da      	uxtb	r2, r3
 8016086:	683b      	ldr	r3, [r7, #0]
 8016088:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 801608a:	2305      	movs	r3, #5
 801608c:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 801608e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016090:	4618      	mov	r0, r3
 8016092:	3714      	adds	r7, #20
 8016094:	46bd      	mov	sp, r7
 8016096:	bc80      	pop	{r7}
 8016098:	4770      	bx	lr

0801609a <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 801609a:	b5b0      	push	{r4, r5, r7, lr}
 801609c:	b088      	sub	sp, #32
 801609e:	af02      	add	r7, sp, #8
 80160a0:	60f8      	str	r0, [r7, #12]
 80160a2:	60b9      	str	r1, [r7, #8]
 80160a4:	607a      	str	r2, [r7, #4]
 80160a6:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 80160a8:	68fb      	ldr	r3, [r7, #12]
 80160aa:	791b      	ldrb	r3, [r3, #4]
 80160ac:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 80160ae:	68fb      	ldr	r3, [r7, #12]
 80160b0:	799b      	ldrb	r3, [r3, #6]
 80160b2:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 80160b4:	68fb      	ldr	r3, [r7, #12]
 80160b6:	79db      	ldrb	r3, [r3, #7]
 80160b8:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 80160ba:	68fb      	ldr	r3, [r7, #12]
 80160bc:	7a1b      	ldrb	r3, [r3, #8]
 80160be:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 80160c0:	68fb      	ldr	r3, [r7, #12]
 80160c2:	795b      	ldrb	r3, [r3, #5]
 80160c4:	f083 0301 	eor.w	r3, r3, #1
 80160c8:	b2db      	uxtb	r3, r3
 80160ca:	2b00      	cmp	r3, #0
 80160cc:	d008      	beq.n	80160e0 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 80160ce:	68fb      	ldr	r3, [r7, #12]
 80160d0:	7adb      	ldrb	r3, [r3, #11]
 80160d2:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 80160d4:	68fb      	ldr	r3, [r7, #12]
 80160d6:	7a5b      	ldrb	r3, [r3, #9]
 80160d8:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 80160da:	68fb      	ldr	r3, [r7, #12]
 80160dc:	7a9b      	ldrb	r3, [r3, #10]
 80160de:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 80160e0:	7dfb      	ldrb	r3, [r7, #23]
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	d04a      	beq.n	801617c <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 80160e6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80160ea:	2b0f      	cmp	r3, #15
 80160ec:	d103      	bne.n	80160f6 <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 80160ee:	68fb      	ldr	r3, [r7, #12]
 80160f0:	7a5b      	ldrb	r3, [r3, #9]
 80160f2:	75bb      	strb	r3, [r7, #22]
 80160f4:	e01d      	b.n	8016132 <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80160f6:	68fb      	ldr	r3, [r7, #12]
 80160f8:	7b18      	ldrb	r0, [r3, #12]
 80160fa:	68fb      	ldr	r3, [r7, #12]
 80160fc:	6919      	ldr	r1, [r3, #16]
 80160fe:	68fb      	ldr	r3, [r7, #12]
 8016100:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8016104:	68fb      	ldr	r3, [r7, #12]
 8016106:	f993 3015 	ldrsb.w	r3, [r3, #21]
 801610a:	68fa      	ldr	r2, [r7, #12]
 801610c:	6992      	ldr	r2, [r2, #24]
 801610e:	f997 4016 	ldrsb.w	r4, [r7, #22]
 8016112:	9201      	str	r2, [sp, #4]
 8016114:	9300      	str	r3, [sp, #0]
 8016116:	462b      	mov	r3, r5
 8016118:	4622      	mov	r2, r4
 801611a:	f7ff fd3a 	bl	8015b92 <RegionCommonChanVerifyDr>
 801611e:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8016120:	f083 0301 	eor.w	r3, r3, #1
 8016124:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8016126:	2b00      	cmp	r3, #0
 8016128:	d003      	beq.n	8016132 <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 801612a:	7dfb      	ldrb	r3, [r7, #23]
 801612c:	f023 0302 	bic.w	r3, r3, #2
 8016130:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 8016132:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8016136:	2b0f      	cmp	r3, #15
 8016138:	d103      	bne.n	8016142 <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 801613a:	68fb      	ldr	r3, [r7, #12]
 801613c:	7a9b      	ldrb	r3, [r3, #10]
 801613e:	757b      	strb	r3, [r7, #21]
 8016140:	e01c      	b.n	801617c <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8016142:	68fb      	ldr	r3, [r7, #12]
 8016144:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8016148:	68fb      	ldr	r3, [r7, #12]
 801614a:	f993 201c 	ldrsb.w	r2, [r3, #28]
 801614e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8016152:	4618      	mov	r0, r3
 8016154:	f7ff fd8f 	bl	8015c76 <RegionCommonValueInRange>
 8016158:	4603      	mov	r3, r0
 801615a:	2b00      	cmp	r3, #0
 801615c:	d10e      	bne.n	801617c <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 801615e:	68fb      	ldr	r3, [r7, #12]
 8016160:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8016164:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8016168:	429a      	cmp	r2, r3
 801616a:	da03      	bge.n	8016174 <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 801616c:	68fb      	ldr	r3, [r7, #12]
 801616e:	7f5b      	ldrb	r3, [r3, #29]
 8016170:	757b      	strb	r3, [r7, #21]
 8016172:	e003      	b.n	801617c <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8016174:	7dfb      	ldrb	r3, [r7, #23]
 8016176:	f023 0304 	bic.w	r3, r3, #4
 801617a:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 801617c:	7dfb      	ldrb	r3, [r7, #23]
 801617e:	2b07      	cmp	r3, #7
 8016180:	d105      	bne.n	801618e <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 8016182:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8016186:	2b00      	cmp	r3, #0
 8016188:	d101      	bne.n	801618e <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 801618a:	2301      	movs	r3, #1
 801618c:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 801618e:	68bb      	ldr	r3, [r7, #8]
 8016190:	7dba      	ldrb	r2, [r7, #22]
 8016192:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	7d7a      	ldrb	r2, [r7, #21]
 8016198:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 801619a:	7d3a      	ldrb	r2, [r7, #20]
 801619c:	683b      	ldr	r3, [r7, #0]
 801619e:	701a      	strb	r2, [r3, #0]

    return status;
 80161a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80161a2:	4618      	mov	r0, r3
 80161a4:	3718      	adds	r7, #24
 80161a6:	46bd      	mov	sp, r7
 80161a8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080161ac <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 80161ac:	b480      	push	{r7}
 80161ae:	b083      	sub	sp, #12
 80161b0:	af00      	add	r7, sp, #0
 80161b2:	4603      	mov	r3, r0
 80161b4:	6039      	str	r1, [r7, #0]
 80161b6:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 80161b8:	79fb      	ldrb	r3, [r7, #7]
 80161ba:	4a06      	ldr	r2, [pc, #24]	; (80161d4 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 80161bc:	fa02 f303 	lsl.w	r3, r2, r3
 80161c0:	461a      	mov	r2, r3
 80161c2:	683b      	ldr	r3, [r7, #0]
 80161c4:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80161c8:	4618      	mov	r0, r3
 80161ca:	370c      	adds	r7, #12
 80161cc:	46bd      	mov	sp, r7
 80161ce:	bc80      	pop	{r7}
 80161d0:	4770      	bx	lr
 80161d2:	bf00      	nop
 80161d4:	000f4240 	.word	0x000f4240

080161d8 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 80161d8:	b480      	push	{r7}
 80161da:	b083      	sub	sp, #12
 80161dc:	af00      	add	r7, sp, #0
 80161de:	4603      	mov	r3, r0
 80161e0:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 80161e2:	79fb      	ldrb	r3, [r7, #7]
 80161e4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80161e8:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80161ec:	4618      	mov	r0, r3
 80161ee:	370c      	adds	r7, #12
 80161f0:	46bd      	mov	sp, r7
 80161f2:	bc80      	pop	{r7}
 80161f4:	4770      	bx	lr
	...

080161f8 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 80161f8:	b480      	push	{r7}
 80161fa:	b085      	sub	sp, #20
 80161fc:	af00      	add	r7, sp, #0
 80161fe:	60f8      	str	r0, [r7, #12]
 8016200:	607a      	str	r2, [r7, #4]
 8016202:	603b      	str	r3, [r7, #0]
 8016204:	460b      	mov	r3, r1
 8016206:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8016208:	7afa      	ldrb	r2, [r7, #11]
 801620a:	7afb      	ldrb	r3, [r7, #11]
 801620c:	3b04      	subs	r3, #4
 801620e:	4619      	mov	r1, r3
 8016210:	68fb      	ldr	r3, [r7, #12]
 8016212:	fb03 f101 	mul.w	r1, r3, r1
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801621c:	fb00 f303 	mul.w	r3, r0, r3
 8016220:	440b      	add	r3, r1
 8016222:	005b      	lsls	r3, r3, #1
 8016224:	2b00      	cmp	r3, #0
 8016226:	d013      	beq.n	8016250 <RegionCommonComputeRxWindowParameters+0x58>
 8016228:	7afb      	ldrb	r3, [r7, #11]
 801622a:	3b04      	subs	r3, #4
 801622c:	4619      	mov	r1, r3
 801622e:	68fb      	ldr	r3, [r7, #12]
 8016230:	fb03 f101 	mul.w	r1, r3, r1
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801623a:	fb00 f303 	mul.w	r3, r0, r3
 801623e:	440b      	add	r3, r1
 8016240:	0059      	lsls	r1, r3, #1
 8016242:	68fb      	ldr	r3, [r7, #12]
 8016244:	440b      	add	r3, r1
 8016246:	1e59      	subs	r1, r3, #1
 8016248:	68fb      	ldr	r3, [r7, #12]
 801624a:	fbb1 f3f3 	udiv	r3, r1, r3
 801624e:	e00f      	b.n	8016270 <RegionCommonComputeRxWindowParameters+0x78>
 8016250:	7afb      	ldrb	r3, [r7, #11]
 8016252:	3b04      	subs	r3, #4
 8016254:	4619      	mov	r1, r3
 8016256:	68fb      	ldr	r3, [r7, #12]
 8016258:	fb03 f101 	mul.w	r1, r3, r1
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8016262:	fb00 f303 	mul.w	r3, r0, r3
 8016266:	440b      	add	r3, r1
 8016268:	0059      	lsls	r1, r3, #1
 801626a:	68fb      	ldr	r3, [r7, #12]
 801626c:	fbb1 f3f3 	udiv	r3, r1, r3
 8016270:	429a      	cmp	r2, r3
 8016272:	bf38      	it	cc
 8016274:	461a      	movcc	r2, r3
 8016276:	69bb      	ldr	r3, [r7, #24]
 8016278:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 801627a:	68fb      	ldr	r3, [r7, #12]
 801627c:	009b      	lsls	r3, r3, #2
 801627e:	4619      	mov	r1, r3
 8016280:	69bb      	ldr	r3, [r7, #24]
 8016282:	681b      	ldr	r3, [r3, #0]
 8016284:	68fa      	ldr	r2, [r7, #12]
 8016286:	fb02 f303 	mul.w	r3, r2, r3
 801628a:	2b00      	cmp	r3, #0
 801628c:	d007      	beq.n	801629e <RegionCommonComputeRxWindowParameters+0xa6>
 801628e:	69bb      	ldr	r3, [r7, #24]
 8016290:	681b      	ldr	r3, [r3, #0]
 8016292:	68fa      	ldr	r2, [r7, #12]
 8016294:	fb02 f303 	mul.w	r3, r2, r3
 8016298:	3301      	adds	r3, #1
 801629a:	085b      	lsrs	r3, r3, #1
 801629c:	e005      	b.n	80162aa <RegionCommonComputeRxWindowParameters+0xb2>
 801629e:	69bb      	ldr	r3, [r7, #24]
 80162a0:	681b      	ldr	r3, [r3, #0]
 80162a2:	68fa      	ldr	r2, [r7, #12]
 80162a4:	fb02 f303 	mul.w	r3, r2, r3
 80162a8:	085b      	lsrs	r3, r3, #1
 80162aa:	1acb      	subs	r3, r1, r3
 80162ac:	683a      	ldr	r2, [r7, #0]
 80162ae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80162b2:	fb01 f202 	mul.w	r2, r1, r2
 80162b6:	1a9b      	subs	r3, r3, r2
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	dd27      	ble.n	801630c <RegionCommonComputeRxWindowParameters+0x114>
 80162bc:	68fb      	ldr	r3, [r7, #12]
 80162be:	009b      	lsls	r3, r3, #2
 80162c0:	4619      	mov	r1, r3
 80162c2:	69bb      	ldr	r3, [r7, #24]
 80162c4:	681b      	ldr	r3, [r3, #0]
 80162c6:	68fa      	ldr	r2, [r7, #12]
 80162c8:	fb02 f303 	mul.w	r3, r2, r3
 80162cc:	2b00      	cmp	r3, #0
 80162ce:	d007      	beq.n	80162e0 <RegionCommonComputeRxWindowParameters+0xe8>
 80162d0:	69bb      	ldr	r3, [r7, #24]
 80162d2:	681b      	ldr	r3, [r3, #0]
 80162d4:	68fa      	ldr	r2, [r7, #12]
 80162d6:	fb02 f303 	mul.w	r3, r2, r3
 80162da:	3301      	adds	r3, #1
 80162dc:	085b      	lsrs	r3, r3, #1
 80162de:	e005      	b.n	80162ec <RegionCommonComputeRxWindowParameters+0xf4>
 80162e0:	69bb      	ldr	r3, [r7, #24]
 80162e2:	681b      	ldr	r3, [r3, #0]
 80162e4:	68fa      	ldr	r2, [r7, #12]
 80162e6:	fb02 f303 	mul.w	r3, r2, r3
 80162ea:	085b      	lsrs	r3, r3, #1
 80162ec:	1acb      	subs	r3, r1, r3
 80162ee:	683a      	ldr	r2, [r7, #0]
 80162f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80162f4:	fb01 f202 	mul.w	r2, r1, r2
 80162f8:	1a9b      	subs	r3, r3, r2
 80162fa:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 80162fe:	4a19      	ldr	r2, [pc, #100]	; (8016364 <RegionCommonComputeRxWindowParameters+0x16c>)
 8016300:	fb82 1203 	smull	r1, r2, r2, r3
 8016304:	1192      	asrs	r2, r2, #6
 8016306:	17db      	asrs	r3, r3, #31
 8016308:	1ad3      	subs	r3, r2, r3
 801630a:	e024      	b.n	8016356 <RegionCommonComputeRxWindowParameters+0x15e>
 801630c:	68fb      	ldr	r3, [r7, #12]
 801630e:	009b      	lsls	r3, r3, #2
 8016310:	4619      	mov	r1, r3
 8016312:	69bb      	ldr	r3, [r7, #24]
 8016314:	681b      	ldr	r3, [r3, #0]
 8016316:	68fa      	ldr	r2, [r7, #12]
 8016318:	fb02 f303 	mul.w	r3, r2, r3
 801631c:	2b00      	cmp	r3, #0
 801631e:	d007      	beq.n	8016330 <RegionCommonComputeRxWindowParameters+0x138>
 8016320:	69bb      	ldr	r3, [r7, #24]
 8016322:	681b      	ldr	r3, [r3, #0]
 8016324:	68fa      	ldr	r2, [r7, #12]
 8016326:	fb02 f303 	mul.w	r3, r2, r3
 801632a:	3301      	adds	r3, #1
 801632c:	085b      	lsrs	r3, r3, #1
 801632e:	e005      	b.n	801633c <RegionCommonComputeRxWindowParameters+0x144>
 8016330:	69bb      	ldr	r3, [r7, #24]
 8016332:	681b      	ldr	r3, [r3, #0]
 8016334:	68fa      	ldr	r2, [r7, #12]
 8016336:	fb02 f303 	mul.w	r3, r2, r3
 801633a:	085b      	lsrs	r3, r3, #1
 801633c:	1acb      	subs	r3, r1, r3
 801633e:	683a      	ldr	r2, [r7, #0]
 8016340:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8016344:	fb01 f202 	mul.w	r2, r1, r2
 8016348:	1a9b      	subs	r3, r3, r2
 801634a:	4a06      	ldr	r2, [pc, #24]	; (8016364 <RegionCommonComputeRxWindowParameters+0x16c>)
 801634c:	fb82 1203 	smull	r1, r2, r2, r3
 8016350:	1192      	asrs	r2, r2, #6
 8016352:	17db      	asrs	r3, r3, #31
 8016354:	1ad3      	subs	r3, r2, r3
 8016356:	69fa      	ldr	r2, [r7, #28]
 8016358:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 801635a:	bf00      	nop
 801635c:	3714      	adds	r7, #20
 801635e:	46bd      	mov	sp, r7
 8016360:	bc80      	pop	{r7}
 8016362:	4770      	bx	lr
 8016364:	10624dd3 	.word	0x10624dd3

08016368 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8016368:	b580      	push	{r7, lr}
 801636a:	b086      	sub	sp, #24
 801636c:	af00      	add	r7, sp, #0
 801636e:	4603      	mov	r3, r0
 8016370:	60b9      	str	r1, [r7, #8]
 8016372:	607a      	str	r2, [r7, #4]
 8016374:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8016376:	2300      	movs	r3, #0
 8016378:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 801637a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801637e:	005b      	lsls	r3, r3, #1
 8016380:	4618      	mov	r0, r3
 8016382:	f7ea fa23 	bl	80007cc <__aeabi_ui2f>
 8016386:	4603      	mov	r3, r0
 8016388:	4619      	mov	r1, r3
 801638a:	68b8      	ldr	r0, [r7, #8]
 801638c:	f7ea f96c 	bl	8000668 <__aeabi_fsub>
 8016390:	4603      	mov	r3, r0
 8016392:	6879      	ldr	r1, [r7, #4]
 8016394:	4618      	mov	r0, r3
 8016396:	f7ea f967 	bl	8000668 <__aeabi_fsub>
 801639a:	4603      	mov	r3, r0
 801639c:	4618      	mov	r0, r3
 801639e:	f7ea f857 	bl	8000450 <__aeabi_f2d>
 80163a2:	4602      	mov	r2, r0
 80163a4:	460b      	mov	r3, r1
 80163a6:	4610      	mov	r0, r2
 80163a8:	4619      	mov	r1, r3
 80163aa:	f007 fc19 	bl	801dbe0 <floor>
 80163ae:	4602      	mov	r2, r0
 80163b0:	460b      	mov	r3, r1
 80163b2:	4610      	mov	r0, r2
 80163b4:	4619      	mov	r1, r3
 80163b6:	f7ea f92b 	bl	8000610 <__aeabi_d2iz>
 80163ba:	4603      	mov	r3, r0
 80163bc:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 80163be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80163c2:	4618      	mov	r0, r3
 80163c4:	3718      	adds	r7, #24
 80163c6:	46bd      	mov	sp, r7
 80163c8:	bd80      	pop	{r7, pc}

080163ca <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 80163ca:	b590      	push	{r4, r7, lr}
 80163cc:	b087      	sub	sp, #28
 80163ce:	af00      	add	r7, sp, #0
 80163d0:	60f8      	str	r0, [r7, #12]
 80163d2:	60b9      	str	r1, [r7, #8]
 80163d4:	607a      	str	r2, [r7, #4]
 80163d6:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 80163d8:	2300      	movs	r3, #0
 80163da:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 80163dc:	2300      	movs	r3, #0
 80163de:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80163e0:	2300      	movs	r3, #0
 80163e2:	757b      	strb	r3, [r7, #21]
 80163e4:	2300      	movs	r3, #0
 80163e6:	753b      	strb	r3, [r7, #20]
 80163e8:	e09c      	b.n	8016524 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80163ea:	2300      	movs	r3, #0
 80163ec:	74fb      	strb	r3, [r7, #19]
 80163ee:	e08f      	b.n	8016510 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 80163f0:	68fb      	ldr	r3, [r7, #12]
 80163f2:	685a      	ldr	r2, [r3, #4]
 80163f4:	7d3b      	ldrb	r3, [r7, #20]
 80163f6:	005b      	lsls	r3, r3, #1
 80163f8:	4413      	add	r3, r2
 80163fa:	881b      	ldrh	r3, [r3, #0]
 80163fc:	461a      	mov	r2, r3
 80163fe:	7cfb      	ldrb	r3, [r7, #19]
 8016400:	fa42 f303 	asr.w	r3, r2, r3
 8016404:	f003 0301 	and.w	r3, r3, #1
 8016408:	2b00      	cmp	r3, #0
 801640a:	d07e      	beq.n	801650a <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 801640c:	68fb      	ldr	r3, [r7, #12]
 801640e:	689a      	ldr	r2, [r3, #8]
 8016410:	7d79      	ldrb	r1, [r7, #21]
 8016412:	7cfb      	ldrb	r3, [r7, #19]
 8016414:	440b      	add	r3, r1
 8016416:	4619      	mov	r1, r3
 8016418:	460b      	mov	r3, r1
 801641a:	005b      	lsls	r3, r3, #1
 801641c:	440b      	add	r3, r1
 801641e:	009b      	lsls	r3, r3, #2
 8016420:	4413      	add	r3, r2
 8016422:	681b      	ldr	r3, [r3, #0]
 8016424:	2b00      	cmp	r3, #0
 8016426:	d06b      	beq.n	8016500 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8016428:	68fb      	ldr	r3, [r7, #12]
 801642a:	781b      	ldrb	r3, [r3, #0]
 801642c:	f083 0301 	eor.w	r3, r3, #1
 8016430:	b2db      	uxtb	r3, r3
 8016432:	2b00      	cmp	r3, #0
 8016434:	d011      	beq.n	801645a <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8016436:	68fb      	ldr	r3, [r7, #12]
 8016438:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 801643a:	2b00      	cmp	r3, #0
 801643c:	d00d      	beq.n	801645a <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 801643e:	68fb      	ldr	r3, [r7, #12]
 8016440:	695a      	ldr	r2, [r3, #20]
 8016442:	7d3b      	ldrb	r3, [r7, #20]
 8016444:	005b      	lsls	r3, r3, #1
 8016446:	4413      	add	r3, r2
 8016448:	881b      	ldrh	r3, [r3, #0]
 801644a:	461a      	mov	r2, r3
 801644c:	7cfb      	ldrb	r3, [r7, #19]
 801644e:	fa42 f303 	asr.w	r3, r2, r3
 8016452:	f003 0301 	and.w	r3, r3, #1
 8016456:	2b00      	cmp	r3, #0
 8016458:	d054      	beq.n	8016504 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801645a:	68fb      	ldr	r3, [r7, #12]
 801645c:	785b      	ldrb	r3, [r3, #1]
 801645e:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8016460:	68fb      	ldr	r3, [r7, #12]
 8016462:	689a      	ldr	r2, [r3, #8]
 8016464:	7d79      	ldrb	r1, [r7, #21]
 8016466:	7cfb      	ldrb	r3, [r7, #19]
 8016468:	440b      	add	r3, r1
 801646a:	4619      	mov	r1, r3
 801646c:	460b      	mov	r3, r1
 801646e:	005b      	lsls	r3, r3, #1
 8016470:	440b      	add	r3, r1
 8016472:	009b      	lsls	r3, r3, #2
 8016474:	4413      	add	r3, r2
 8016476:	7a1b      	ldrb	r3, [r3, #8]
 8016478:	f343 0303 	sbfx	r3, r3, #0, #4
 801647c:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801647e:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8016480:	68fb      	ldr	r3, [r7, #12]
 8016482:	689a      	ldr	r2, [r3, #8]
 8016484:	7d79      	ldrb	r1, [r7, #21]
 8016486:	7cfb      	ldrb	r3, [r7, #19]
 8016488:	440b      	add	r3, r1
 801648a:	4619      	mov	r1, r3
 801648c:	460b      	mov	r3, r1
 801648e:	005b      	lsls	r3, r3, #1
 8016490:	440b      	add	r3, r1
 8016492:	009b      	lsls	r3, r3, #2
 8016494:	4413      	add	r3, r2
 8016496:	7a1b      	ldrb	r3, [r3, #8]
 8016498:	f343 1303 	sbfx	r3, r3, #4, #4
 801649c:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801649e:	461a      	mov	r2, r3
 80164a0:	4621      	mov	r1, r4
 80164a2:	f7ff fbe8 	bl	8015c76 <RegionCommonValueInRange>
 80164a6:	4603      	mov	r3, r0
 80164a8:	2b00      	cmp	r3, #0
 80164aa:	d02d      	beq.n	8016508 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 80164ac:	68fb      	ldr	r3, [r7, #12]
 80164ae:	68da      	ldr	r2, [r3, #12]
 80164b0:	68fb      	ldr	r3, [r7, #12]
 80164b2:	6899      	ldr	r1, [r3, #8]
 80164b4:	7d78      	ldrb	r0, [r7, #21]
 80164b6:	7cfb      	ldrb	r3, [r7, #19]
 80164b8:	4403      	add	r3, r0
 80164ba:	4618      	mov	r0, r3
 80164bc:	4603      	mov	r3, r0
 80164be:	005b      	lsls	r3, r3, #1
 80164c0:	4403      	add	r3, r0
 80164c2:	009b      	lsls	r3, r3, #2
 80164c4:	440b      	add	r3, r1
 80164c6:	7a5b      	ldrb	r3, [r3, #9]
 80164c8:	4619      	mov	r1, r3
 80164ca:	460b      	mov	r3, r1
 80164cc:	005b      	lsls	r3, r3, #1
 80164ce:	440b      	add	r3, r1
 80164d0:	00db      	lsls	r3, r3, #3
 80164d2:	4413      	add	r3, r2
 80164d4:	7d1b      	ldrb	r3, [r3, #20]
 80164d6:	f083 0301 	eor.w	r3, r3, #1
 80164da:	b2db      	uxtb	r3, r3
 80164dc:	2b00      	cmp	r3, #0
 80164de:	d003      	beq.n	80164e8 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 80164e0:	7dbb      	ldrb	r3, [r7, #22]
 80164e2:	3301      	adds	r3, #1
 80164e4:	75bb      	strb	r3, [r7, #22]
                    continue;
 80164e6:	e010      	b.n	801650a <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 80164e8:	7dfb      	ldrb	r3, [r7, #23]
 80164ea:	1c5a      	adds	r2, r3, #1
 80164ec:	75fa      	strb	r2, [r7, #23]
 80164ee:	461a      	mov	r2, r3
 80164f0:	68bb      	ldr	r3, [r7, #8]
 80164f2:	4413      	add	r3, r2
 80164f4:	7d79      	ldrb	r1, [r7, #21]
 80164f6:	7cfa      	ldrb	r2, [r7, #19]
 80164f8:	440a      	add	r2, r1
 80164fa:	b2d2      	uxtb	r2, r2
 80164fc:	701a      	strb	r2, [r3, #0]
 80164fe:	e004      	b.n	801650a <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8016500:	bf00      	nop
 8016502:	e002      	b.n	801650a <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8016504:	bf00      	nop
 8016506:	e000      	b.n	801650a <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8016508:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 801650a:	7cfb      	ldrb	r3, [r7, #19]
 801650c:	3301      	adds	r3, #1
 801650e:	74fb      	strb	r3, [r7, #19]
 8016510:	7cfb      	ldrb	r3, [r7, #19]
 8016512:	2b0f      	cmp	r3, #15
 8016514:	f67f af6c 	bls.w	80163f0 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8016518:	7d7b      	ldrb	r3, [r7, #21]
 801651a:	3310      	adds	r3, #16
 801651c:	757b      	strb	r3, [r7, #21]
 801651e:	7d3b      	ldrb	r3, [r7, #20]
 8016520:	3301      	adds	r3, #1
 8016522:	753b      	strb	r3, [r7, #20]
 8016524:	7d7b      	ldrb	r3, [r7, #21]
 8016526:	b29a      	uxth	r2, r3
 8016528:	68fb      	ldr	r3, [r7, #12]
 801652a:	8a1b      	ldrh	r3, [r3, #16]
 801652c:	429a      	cmp	r2, r3
 801652e:	f4ff af5c 	bcc.w	80163ea <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	7dfa      	ldrb	r2, [r7, #23]
 8016536:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8016538:	683b      	ldr	r3, [r7, #0]
 801653a:	7dba      	ldrb	r2, [r7, #22]
 801653c:	701a      	strb	r2, [r3, #0]
}
 801653e:	bf00      	nop
 8016540:	371c      	adds	r7, #28
 8016542:	46bd      	mov	sp, r7
 8016544:	bd90      	pop	{r4, r7, pc}

08016546 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8016546:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016548:	b08b      	sub	sp, #44	; 0x2c
 801654a:	af04      	add	r7, sp, #16
 801654c:	60f8      	str	r0, [r7, #12]
 801654e:	60b9      	str	r1, [r7, #8]
 8016550:	607a      	str	r2, [r7, #4]
 8016552:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8016554:	68fb      	ldr	r3, [r7, #12]
 8016556:	685b      	ldr	r3, [r3, #4]
 8016558:	4618      	mov	r0, r3
 801655a:	f006 ffbd 	bl	801d4d8 <UTIL_TIMER_GetElapsedTime>
 801655e:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8016560:	68fb      	ldr	r3, [r7, #12]
 8016562:	681a      	ldr	r2, [r3, #0]
 8016564:	697b      	ldr	r3, [r7, #20]
 8016566:	1ad2      	subs	r2, r2, r3
 8016568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801656a:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 801656c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801656e:	2201      	movs	r2, #1
 8016570:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8016572:	683b      	ldr	r3, [r7, #0]
 8016574:	2200      	movs	r2, #0
 8016576:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8016578:	68fb      	ldr	r3, [r7, #12]
 801657a:	685b      	ldr	r3, [r3, #4]
 801657c:	2b00      	cmp	r3, #0
 801657e:	d004      	beq.n	801658a <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8016580:	68fb      	ldr	r3, [r7, #12]
 8016582:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8016584:	697a      	ldr	r2, [r7, #20]
 8016586:	429a      	cmp	r2, r3
 8016588:	d32b      	bcc.n	80165e2 <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 801658a:	68bb      	ldr	r3, [r7, #8]
 801658c:	2200      	movs	r2, #0
 801658e:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8016590:	68fb      	ldr	r3, [r7, #12]
 8016592:	69db      	ldr	r3, [r3, #28]
 8016594:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8016596:	68fb      	ldr	r3, [r7, #12]
 8016598:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 801659a:	68dd      	ldr	r5, [r3, #12]
 801659c:	68fb      	ldr	r3, [r7, #12]
 801659e:	7a5e      	ldrb	r6, [r3, #9]
 80165a0:	68fb      	ldr	r3, [r7, #12]
 80165a2:	f893 c008 	ldrb.w	ip, [r3, #8]
 80165a6:	68fb      	ldr	r3, [r7, #12]
 80165a8:	7d1b      	ldrb	r3, [r3, #20]
 80165aa:	68fa      	ldr	r2, [r7, #12]
 80165ac:	6992      	ldr	r2, [r2, #24]
 80165ae:	9203      	str	r2, [sp, #12]
 80165b0:	68fa      	ldr	r2, [r7, #12]
 80165b2:	f10d 0e04 	add.w	lr, sp, #4
 80165b6:	320c      	adds	r2, #12
 80165b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80165bc:	e88e 0003 	stmia.w	lr, {r0, r1}
 80165c0:	9300      	str	r3, [sp, #0]
 80165c2:	4663      	mov	r3, ip
 80165c4:	4632      	mov	r2, r6
 80165c6:	4629      	mov	r1, r5
 80165c8:	4620      	mov	r0, r4
 80165ca:	f7ff fc25 	bl	8015e18 <RegionCommonUpdateBandTimeOff>
 80165ce:	4602      	mov	r2, r0
 80165d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80165d2:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 80165d4:	68fb      	ldr	r3, [r7, #12]
 80165d6:	69d8      	ldr	r0, [r3, #28]
 80165d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165da:	683a      	ldr	r2, [r7, #0]
 80165dc:	6879      	ldr	r1, [r7, #4]
 80165de:	f7ff fef4 	bl	80163ca <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 80165e2:	683b      	ldr	r3, [r7, #0]
 80165e4:	781b      	ldrb	r3, [r3, #0]
 80165e6:	2b00      	cmp	r3, #0
 80165e8:	d004      	beq.n	80165f4 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 80165ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80165ec:	2200      	movs	r2, #0
 80165ee:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 80165f0:	2300      	movs	r3, #0
 80165f2:	e006      	b.n	8016602 <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 80165f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165f6:	781b      	ldrb	r3, [r3, #0]
 80165f8:	2b00      	cmp	r3, #0
 80165fa:	d001      	beq.n	8016600 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 80165fc:	230b      	movs	r3, #11
 80165fe:	e000      	b.n	8016602 <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8016600:	230c      	movs	r3, #12
    }
}
 8016602:	4618      	mov	r0, r3
 8016604:	371c      	adds	r7, #28
 8016606:	46bd      	mov	sp, r7
 8016608:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801660a <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 801660a:	b5b0      	push	{r4, r5, r7, lr}
 801660c:	b086      	sub	sp, #24
 801660e:	af02      	add	r7, sp, #8
 8016610:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	781b      	ldrb	r3, [r3, #0]
 8016616:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	f993 2000 	ldrsb.w	r2, [r3]
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8016624:	429a      	cmp	r2, r3
 8016626:	d103      	bne.n	8016630 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8016628:	687b      	ldr	r3, [r7, #4]
 801662a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801662e:	e026      	b.n	801667e <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8016630:	7bfb      	ldrb	r3, [r7, #15]
 8016632:	3b01      	subs	r3, #1
 8016634:	b2db      	uxtb	r3, r3
 8016636:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801663e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8016642:	429a      	cmp	r2, r3
 8016644:	d019      	beq.n	801667a <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	78d8      	ldrb	r0, [r3, #3]
 801664a:	687b      	ldr	r3, [r7, #4]
 801664c:	6859      	ldr	r1, [r3, #4]
 801664e:	687b      	ldr	r3, [r7, #4]
 8016650:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801665a:	687a      	ldr	r2, [r7, #4]
 801665c:	6892      	ldr	r2, [r2, #8]
 801665e:	f997 400f 	ldrsb.w	r4, [r7, #15]
 8016662:	9201      	str	r2, [sp, #4]
 8016664:	9300      	str	r3, [sp, #0]
 8016666:	462b      	mov	r3, r5
 8016668:	4622      	mov	r2, r4
 801666a:	f7ff fa92 	bl	8015b92 <RegionCommonChanVerifyDr>
 801666e:	4603      	mov	r3, r0
 8016670:	f083 0301 	eor.w	r3, r3, #1
 8016674:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 8016676:	2b00      	cmp	r3, #0
 8016678:	d1da      	bne.n	8016630 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 801667a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 801667e:	4618      	mov	r0, r3
 8016680:	3710      	adds	r7, #16
 8016682:	46bd      	mov	sp, r7
 8016684:	bdb0      	pop	{r4, r5, r7, pc}

08016686 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 8016686:	b480      	push	{r7}
 8016688:	b083      	sub	sp, #12
 801668a:	af00      	add	r7, sp, #0
 801668c:	4603      	mov	r3, r0
 801668e:	460a      	mov	r2, r1
 8016690:	71fb      	strb	r3, [r7, #7]
 8016692:	4613      	mov	r3, r2
 8016694:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 8016696:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801669a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801669e:	4293      	cmp	r3, r2
 80166a0:	bfb8      	it	lt
 80166a2:	4613      	movlt	r3, r2
 80166a4:	b25b      	sxtb	r3, r3
}
 80166a6:	4618      	mov	r0, r3
 80166a8:	370c      	adds	r7, #12
 80166aa:	46bd      	mov	sp, r7
 80166ac:	bc80      	pop	{r7}
 80166ae:	4770      	bx	lr

080166b0 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 80166b0:	b480      	push	{r7}
 80166b2:	b083      	sub	sp, #12
 80166b4:	af00      	add	r7, sp, #0
 80166b6:	6078      	str	r0, [r7, #4]
 80166b8:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	009b      	lsls	r3, r3, #2
 80166be:	683a      	ldr	r2, [r7, #0]
 80166c0:	4413      	add	r3, r2
 80166c2:	681b      	ldr	r3, [r3, #0]
 80166c4:	4a07      	ldr	r2, [pc, #28]	; (80166e4 <RegionCommonGetBandwidth+0x34>)
 80166c6:	4293      	cmp	r3, r2
 80166c8:	d004      	beq.n	80166d4 <RegionCommonGetBandwidth+0x24>
 80166ca:	4a07      	ldr	r2, [pc, #28]	; (80166e8 <RegionCommonGetBandwidth+0x38>)
 80166cc:	4293      	cmp	r3, r2
 80166ce:	d003      	beq.n	80166d8 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 80166d0:	2300      	movs	r3, #0
 80166d2:	e002      	b.n	80166da <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 80166d4:	2301      	movs	r3, #1
 80166d6:	e000      	b.n	80166da <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 80166d8:	2302      	movs	r3, #2
    }
}
 80166da:	4618      	mov	r0, r3
 80166dc:	370c      	adds	r7, #12
 80166de:	46bd      	mov	sp, r7
 80166e0:	bc80      	pop	{r7}
 80166e2:	4770      	bx	lr
 80166e4:	0003d090 	.word	0x0003d090
 80166e8:	0007a120 	.word	0x0007a120

080166ec <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 80166ec:	b580      	push	{r7, lr}
 80166ee:	b086      	sub	sp, #24
 80166f0:	af04      	add	r7, sp, #16
 80166f2:	4603      	mov	r3, r0
 80166f4:	6039      	str	r1, [r7, #0]
 80166f6:	71fb      	strb	r3, [r7, #7]
 80166f8:	4613      	mov	r3, r2
 80166fa:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 80166fc:	79fb      	ldrb	r3, [r7, #7]
 80166fe:	2b05      	cmp	r3, #5
 8016700:	d810      	bhi.n	8016724 <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 8016702:	79fb      	ldrb	r3, [r7, #7]
 8016704:	4a0f      	ldr	r2, [pc, #60]	; (8016744 <RegionCommonRxConfigPrint+0x58>)
 8016706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801670a:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801670e:	9202      	str	r2, [sp, #8]
 8016710:	683a      	ldr	r2, [r7, #0]
 8016712:	9201      	str	r2, [sp, #4]
 8016714:	9300      	str	r3, [sp, #0]
 8016716:	4b0c      	ldr	r3, [pc, #48]	; (8016748 <RegionCommonRxConfigPrint+0x5c>)
 8016718:	2201      	movs	r2, #1
 801671a:	2100      	movs	r1, #0
 801671c:	2002      	movs	r0, #2
 801671e:	f006 ffb9 	bl	801d694 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8016722:	e00a      	b.n	801673a <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8016724:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016728:	9301      	str	r3, [sp, #4]
 801672a:	683b      	ldr	r3, [r7, #0]
 801672c:	9300      	str	r3, [sp, #0]
 801672e:	4b07      	ldr	r3, [pc, #28]	; (801674c <RegionCommonRxConfigPrint+0x60>)
 8016730:	2201      	movs	r2, #1
 8016732:	2100      	movs	r1, #0
 8016734:	2002      	movs	r0, #2
 8016736:	f006 ffad 	bl	801d694 <UTIL_ADV_TRACE_COND_FSend>
}
 801673a:	bf00      	nop
 801673c:	3708      	adds	r7, #8
 801673e:	46bd      	mov	sp, r7
 8016740:	bd80      	pop	{r7, pc}
 8016742:	bf00      	nop
 8016744:	20000118 	.word	0x20000118
 8016748:	0801e48c 	.word	0x0801e48c
 801674c:	0801e4ac 	.word	0x0801e4ac

08016750 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8016750:	b580      	push	{r7, lr}
 8016752:	b084      	sub	sp, #16
 8016754:	af02      	add	r7, sp, #8
 8016756:	6078      	str	r0, [r7, #4]
 8016758:	460b      	mov	r3, r1
 801675a:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 801675c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016760:	9301      	str	r3, [sp, #4]
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	9300      	str	r3, [sp, #0]
 8016766:	4b05      	ldr	r3, [pc, #20]	; (801677c <RegionCommonTxConfigPrint+0x2c>)
 8016768:	2201      	movs	r2, #1
 801676a:	2100      	movs	r1, #0
 801676c:	2002      	movs	r0, #2
 801676e:	f006 ff91 	bl	801d694 <UTIL_ADV_TRACE_COND_FSend>
}
 8016772:	bf00      	nop
 8016774:	3708      	adds	r7, #8
 8016776:	46bd      	mov	sp, r7
 8016778:	bd80      	pop	{r7, pc}
 801677a:	bf00      	nop
 801677c:	0801e4c8 	.word	0x0801e4c8

08016780 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8016780:	b580      	push	{r7, lr}
 8016782:	b082      	sub	sp, #8
 8016784:	af00      	add	r7, sp, #0
 8016786:	6078      	str	r0, [r7, #4]
 8016788:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 801678a:	4b2d      	ldr	r3, [pc, #180]	; (8016840 <VerifyRfFreq+0xc0>)
 801678c:	6a1b      	ldr	r3, [r3, #32]
 801678e:	6878      	ldr	r0, [r7, #4]
 8016790:	4798      	blx	r3
 8016792:	4603      	mov	r3, r0
 8016794:	f083 0301 	eor.w	r3, r3, #1
 8016798:	b2db      	uxtb	r3, r3
 801679a:	2b00      	cmp	r3, #0
 801679c:	d001      	beq.n	80167a2 <VerifyRfFreq+0x22>
    {
        return false;
 801679e:	2300      	movs	r3, #0
 80167a0:	e04a      	b.n	8016838 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	4a27      	ldr	r2, [pc, #156]	; (8016844 <VerifyRfFreq+0xc4>)
 80167a6:	4293      	cmp	r3, r2
 80167a8:	d307      	bcc.n	80167ba <VerifyRfFreq+0x3a>
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	4a26      	ldr	r2, [pc, #152]	; (8016848 <VerifyRfFreq+0xc8>)
 80167ae:	4293      	cmp	r3, r2
 80167b0:	d803      	bhi.n	80167ba <VerifyRfFreq+0x3a>
    {
        *band = 2;
 80167b2:	683b      	ldr	r3, [r7, #0]
 80167b4:	2202      	movs	r2, #2
 80167b6:	701a      	strb	r2, [r3, #0]
 80167b8:	e03d      	b.n	8016836 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 80167ba:	687b      	ldr	r3, [r7, #4]
 80167bc:	4a22      	ldr	r2, [pc, #136]	; (8016848 <VerifyRfFreq+0xc8>)
 80167be:	4293      	cmp	r3, r2
 80167c0:	d907      	bls.n	80167d2 <VerifyRfFreq+0x52>
 80167c2:	687b      	ldr	r3, [r7, #4]
 80167c4:	4a21      	ldr	r2, [pc, #132]	; (801684c <VerifyRfFreq+0xcc>)
 80167c6:	4293      	cmp	r3, r2
 80167c8:	d803      	bhi.n	80167d2 <VerifyRfFreq+0x52>
    {
        *band = 0;
 80167ca:	683b      	ldr	r3, [r7, #0]
 80167cc:	2200      	movs	r2, #0
 80167ce:	701a      	strb	r2, [r3, #0]
 80167d0:	e031      	b.n	8016836 <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 80167d2:	687b      	ldr	r3, [r7, #4]
 80167d4:	4a1d      	ldr	r2, [pc, #116]	; (801684c <VerifyRfFreq+0xcc>)
 80167d6:	4293      	cmp	r3, r2
 80167d8:	d907      	bls.n	80167ea <VerifyRfFreq+0x6a>
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	4a1c      	ldr	r2, [pc, #112]	; (8016850 <VerifyRfFreq+0xd0>)
 80167de:	4293      	cmp	r3, r2
 80167e0:	d803      	bhi.n	80167ea <VerifyRfFreq+0x6a>
    {
        *band = 1;
 80167e2:	683b      	ldr	r3, [r7, #0]
 80167e4:	2201      	movs	r2, #1
 80167e6:	701a      	strb	r2, [r3, #0]
 80167e8:	e025      	b.n	8016836 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	4a19      	ldr	r2, [pc, #100]	; (8016854 <VerifyRfFreq+0xd4>)
 80167ee:	4293      	cmp	r3, r2
 80167f0:	d907      	bls.n	8016802 <VerifyRfFreq+0x82>
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	4a18      	ldr	r2, [pc, #96]	; (8016858 <VerifyRfFreq+0xd8>)
 80167f6:	4293      	cmp	r3, r2
 80167f8:	d803      	bhi.n	8016802 <VerifyRfFreq+0x82>
    {
        *band = 5;
 80167fa:	683b      	ldr	r3, [r7, #0]
 80167fc:	2205      	movs	r2, #5
 80167fe:	701a      	strb	r2, [r3, #0]
 8016800:	e019      	b.n	8016836 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	4a15      	ldr	r2, [pc, #84]	; (801685c <VerifyRfFreq+0xdc>)
 8016806:	4293      	cmp	r3, r2
 8016808:	d907      	bls.n	801681a <VerifyRfFreq+0x9a>
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	4a14      	ldr	r2, [pc, #80]	; (8016860 <VerifyRfFreq+0xe0>)
 801680e:	4293      	cmp	r3, r2
 8016810:	d803      	bhi.n	801681a <VerifyRfFreq+0x9a>
    {
        *band = 3;
 8016812:	683b      	ldr	r3, [r7, #0]
 8016814:	2203      	movs	r2, #3
 8016816:	701a      	strb	r2, [r3, #0]
 8016818:	e00d      	b.n	8016836 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	4a11      	ldr	r2, [pc, #68]	; (8016864 <VerifyRfFreq+0xe4>)
 801681e:	4293      	cmp	r3, r2
 8016820:	d307      	bcc.n	8016832 <VerifyRfFreq+0xb2>
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	4a10      	ldr	r2, [pc, #64]	; (8016868 <VerifyRfFreq+0xe8>)
 8016826:	4293      	cmp	r3, r2
 8016828:	d803      	bhi.n	8016832 <VerifyRfFreq+0xb2>
    {
        *band = 4;
 801682a:	683b      	ldr	r3, [r7, #0]
 801682c:	2204      	movs	r2, #4
 801682e:	701a      	strb	r2, [r3, #0]
 8016830:	e001      	b.n	8016836 <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 8016832:	2300      	movs	r3, #0
 8016834:	e000      	b.n	8016838 <VerifyRfFreq+0xb8>
    }
    return true;
 8016836:	2301      	movs	r3, #1
}
 8016838:	4618      	mov	r0, r3
 801683a:	3708      	adds	r7, #8
 801683c:	46bd      	mov	sp, r7
 801683e:	bd80      	pop	{r7, pc}
 8016840:	0801eb70 	.word	0x0801eb70
 8016844:	337055c0 	.word	0x337055c0
 8016848:	338eda3f 	.word	0x338eda3f
 801684c:	33bca100 	.word	0x33bca100
 8016850:	33c5c8c0 	.word	0x33c5c8c0
 8016854:	33c74f5f 	.word	0x33c74f5f
 8016858:	33cef080 	.word	0x33cef080
 801685c:	33d1fdbf 	.word	0x33d1fdbf
 8016860:	33d5ce50 	.word	0x33d5ce50
 8016864:	33d691a0 	.word	0x33d691a0
 8016868:	33db2580 	.word	0x33db2580

0801686c <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 801686c:	b590      	push	{r4, r7, lr}
 801686e:	b08b      	sub	sp, #44	; 0x2c
 8016870:	af04      	add	r7, sp, #16
 8016872:	4603      	mov	r3, r0
 8016874:	460a      	mov	r2, r1
 8016876:	71fb      	strb	r3, [r7, #7]
 8016878:	4613      	mov	r3, r2
 801687a:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 801687c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016880:	4a1f      	ldr	r2, [pc, #124]	; (8016900 <GetTimeOnAir+0x94>)
 8016882:	5cd3      	ldrb	r3, [r2, r3]
 8016884:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 8016886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801688a:	491e      	ldr	r1, [pc, #120]	; (8016904 <GetTimeOnAir+0x98>)
 801688c:	4618      	mov	r0, r3
 801688e:	f7ff ff0f 	bl	80166b0 <RegionCommonGetBandwidth>
 8016892:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8016894:	2300      	movs	r3, #0
 8016896:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8016898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801689c:	2b07      	cmp	r3, #7
 801689e:	d118      	bne.n	80168d2 <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 80168a0:	4b19      	ldr	r3, [pc, #100]	; (8016908 <GetTimeOnAir+0x9c>)
 80168a2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80168a4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80168a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80168ac:	fb02 f303 	mul.w	r3, r2, r3
 80168b0:	4619      	mov	r1, r3
 80168b2:	88bb      	ldrh	r3, [r7, #4]
 80168b4:	b2db      	uxtb	r3, r3
 80168b6:	2201      	movs	r2, #1
 80168b8:	9203      	str	r2, [sp, #12]
 80168ba:	9302      	str	r3, [sp, #8]
 80168bc:	2300      	movs	r3, #0
 80168be:	9301      	str	r3, [sp, #4]
 80168c0:	2305      	movs	r3, #5
 80168c2:	9300      	str	r3, [sp, #0]
 80168c4:	2300      	movs	r3, #0
 80168c6:	460a      	mov	r2, r1
 80168c8:	68f9      	ldr	r1, [r7, #12]
 80168ca:	2000      	movs	r0, #0
 80168cc:	47a0      	blx	r4
 80168ce:	6178      	str	r0, [r7, #20]
 80168d0:	e011      	b.n	80168f6 <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 80168d2:	4b0d      	ldr	r3, [pc, #52]	; (8016908 <GetTimeOnAir+0x9c>)
 80168d4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80168d6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80168da:	88bb      	ldrh	r3, [r7, #4]
 80168dc:	b2db      	uxtb	r3, r3
 80168de:	2101      	movs	r1, #1
 80168e0:	9103      	str	r1, [sp, #12]
 80168e2:	9302      	str	r3, [sp, #8]
 80168e4:	2300      	movs	r3, #0
 80168e6:	9301      	str	r3, [sp, #4]
 80168e8:	2308      	movs	r3, #8
 80168ea:	9300      	str	r3, [sp, #0]
 80168ec:	2301      	movs	r3, #1
 80168ee:	68f9      	ldr	r1, [r7, #12]
 80168f0:	2001      	movs	r0, #1
 80168f2:	47a0      	blx	r4
 80168f4:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 80168f6:	697b      	ldr	r3, [r7, #20]
}
 80168f8:	4618      	mov	r0, r3
 80168fa:	371c      	adds	r7, #28
 80168fc:	46bd      	mov	sp, r7
 80168fe:	bd90      	pop	{r4, r7, pc}
 8016900:	0801eab4 	.word	0x0801eab4
 8016904:	0801eabc 	.word	0x0801eabc
 8016908:	0801eb70 	.word	0x0801eb70

0801690c <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 801690c:	b580      	push	{r7, lr}
 801690e:	b088      	sub	sp, #32
 8016910:	af00      	add	r7, sp, #0
 8016912:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8016914:	2300      	movs	r3, #0
 8016916:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	781b      	ldrb	r3, [r3, #0]
 801691c:	3b01      	subs	r3, #1
 801691e:	2b37      	cmp	r3, #55	; 0x37
 8016920:	f200 8122 	bhi.w	8016b68 <RegionEU868GetPhyParam+0x25c>
 8016924:	a201      	add	r2, pc, #4	; (adr r2, 801692c <RegionEU868GetPhyParam+0x20>)
 8016926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801692a:	bf00      	nop
 801692c:	08016a0d 	.word	0x08016a0d
 8016930:	08016a13 	.word	0x08016a13
 8016934:	08016b69 	.word	0x08016b69
 8016938:	08016b69 	.word	0x08016b69
 801693c:	08016b69 	.word	0x08016b69
 8016940:	08016a19 	.word	0x08016a19
 8016944:	08016b69 	.word	0x08016b69
 8016948:	08016a53 	.word	0x08016a53
 801694c:	08016b69 	.word	0x08016b69
 8016950:	08016a59 	.word	0x08016a59
 8016954:	08016a5f 	.word	0x08016a5f
 8016958:	08016a65 	.word	0x08016a65
 801695c:	08016a6b 	.word	0x08016a6b
 8016960:	08016a7b 	.word	0x08016a7b
 8016964:	08016a8b 	.word	0x08016a8b
 8016968:	08016a91 	.word	0x08016a91
 801696c:	08016a99 	.word	0x08016a99
 8016970:	08016aa1 	.word	0x08016aa1
 8016974:	08016aa9 	.word	0x08016aa9
 8016978:	08016ab1 	.word	0x08016ab1
 801697c:	08016ab9 	.word	0x08016ab9
 8016980:	08016acd 	.word	0x08016acd
 8016984:	08016ad3 	.word	0x08016ad3
 8016988:	08016ad9 	.word	0x08016ad9
 801698c:	08016adf 	.word	0x08016adf
 8016990:	08016aeb 	.word	0x08016aeb
 8016994:	08016af7 	.word	0x08016af7
 8016998:	08016afd 	.word	0x08016afd
 801699c:	08016b05 	.word	0x08016b05
 80169a0:	08016b0b 	.word	0x08016b0b
 80169a4:	08016b11 	.word	0x08016b11
 80169a8:	08016b19 	.word	0x08016b19
 80169ac:	08016a1f 	.word	0x08016a1f
 80169b0:	08016b69 	.word	0x08016b69
 80169b4:	08016b69 	.word	0x08016b69
 80169b8:	08016b69 	.word	0x08016b69
 80169bc:	08016b69 	.word	0x08016b69
 80169c0:	08016b69 	.word	0x08016b69
 80169c4:	08016b69 	.word	0x08016b69
 80169c8:	08016b69 	.word	0x08016b69
 80169cc:	08016b69 	.word	0x08016b69
 80169d0:	08016b69 	.word	0x08016b69
 80169d4:	08016b69 	.word	0x08016b69
 80169d8:	08016b69 	.word	0x08016b69
 80169dc:	08016b69 	.word	0x08016b69
 80169e0:	08016b69 	.word	0x08016b69
 80169e4:	08016b1f 	.word	0x08016b1f
 80169e8:	08016b25 	.word	0x08016b25
 80169ec:	08016b33 	.word	0x08016b33
 80169f0:	08016b69 	.word	0x08016b69
 80169f4:	08016b69 	.word	0x08016b69
 80169f8:	08016b39 	.word	0x08016b39
 80169fc:	08016b3f 	.word	0x08016b3f
 8016a00:	08016b69 	.word	0x08016b69
 8016a04:	08016b45 	.word	0x08016b45
 8016a08:	08016b55 	.word	0x08016b55
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8016a0c:	2300      	movs	r3, #0
 8016a0e:	61bb      	str	r3, [r7, #24]
            break;
 8016a10:	e0ab      	b.n	8016b6a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 8016a12:	2300      	movs	r3, #0
 8016a14:	61bb      	str	r3, [r7, #24]
            break;
 8016a16:	e0a8      	b.n	8016b6a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8016a18:	2300      	movs	r3, #0
 8016a1a:	61bb      	str	r3, [r7, #24]
            break;
 8016a1c:	e0a5      	b.n	8016b6a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8016a1e:	687b      	ldr	r3, [r7, #4]
 8016a20:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8016a24:	733b      	strb	r3, [r7, #12]
 8016a26:	2307      	movs	r3, #7
 8016a28:	737b      	strb	r3, [r7, #13]
 8016a2a:	2300      	movs	r3, #0
 8016a2c:	73bb      	strb	r3, [r7, #14]
 8016a2e:	2310      	movs	r3, #16
 8016a30:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8016a32:	4b51      	ldr	r3, [pc, #324]	; (8016b78 <RegionEU868GetPhyParam+0x26c>)
 8016a34:	681b      	ldr	r3, [r3, #0]
 8016a36:	f503 7358 	add.w	r3, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8016a3a:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8016a3c:	4b4e      	ldr	r3, [pc, #312]	; (8016b78 <RegionEU868GetPhyParam+0x26c>)
 8016a3e:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8016a40:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8016a42:	f107 030c 	add.w	r3, r7, #12
 8016a46:	4618      	mov	r0, r3
 8016a48:	f7ff fddf 	bl	801660a <RegionCommonGetNextLowerTxDr>
 8016a4c:	4603      	mov	r3, r0
 8016a4e:	61bb      	str	r3, [r7, #24]
            break;
 8016a50:	e08b      	b.n	8016b6a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 8016a52:	2300      	movs	r3, #0
 8016a54:	61bb      	str	r3, [r7, #24]
            break;
 8016a56:	e088      	b.n	8016b6a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8016a58:	2300      	movs	r3, #0
 8016a5a:	61bb      	str	r3, [r7, #24]
            break;
 8016a5c:	e085      	b.n	8016b6a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8016a5e:	2340      	movs	r3, #64	; 0x40
 8016a60:	61bb      	str	r3, [r7, #24]
            break;
 8016a62:	e082      	b.n	8016b6a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8016a64:	2320      	movs	r3, #32
 8016a66:	61bb      	str	r3, [r7, #24]
            break;
 8016a68:	e07f      	b.n	8016b6a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8016a6a:	687b      	ldr	r3, [r7, #4]
 8016a6c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016a70:	461a      	mov	r2, r3
 8016a72:	4b42      	ldr	r3, [pc, #264]	; (8016b7c <RegionEU868GetPhyParam+0x270>)
 8016a74:	5c9b      	ldrb	r3, [r3, r2]
 8016a76:	61bb      	str	r3, [r7, #24]
            break;
 8016a78:	e077      	b.n	8016b6a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016a80:	461a      	mov	r2, r3
 8016a82:	4b3f      	ldr	r3, [pc, #252]	; (8016b80 <RegionEU868GetPhyParam+0x274>)
 8016a84:	5c9b      	ldrb	r3, [r3, r2]
 8016a86:	61bb      	str	r3, [r7, #24]
            break;
 8016a88:	e06f      	b.n	8016b6a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8016a8a:	2301      	movs	r3, #1
 8016a8c:	61bb      	str	r3, [r7, #24]
            break;
 8016a8e:	e06c      	b.n	8016b6a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8016a90:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8016a94:	61bb      	str	r3, [r7, #24]
            break;
 8016a96:	e068      	b.n	8016b6a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8016a98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016a9c:	61bb      	str	r3, [r7, #24]
            break;
 8016a9e:	e064      	b.n	8016b6a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8016aa0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8016aa4:	61bb      	str	r3, [r7, #24]
            break;
 8016aa6:	e060      	b.n	8016b6a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8016aa8:	f241 3388 	movw	r3, #5000	; 0x1388
 8016aac:	61bb      	str	r3, [r7, #24]
            break;
 8016aae:	e05c      	b.n	8016b6a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8016ab0:	f241 7370 	movw	r3, #6000	; 0x1770
 8016ab4:	61bb      	str	r3, [r7, #24]
            break;
 8016ab6:	e058      	b.n	8016b6a <RegionEU868GetPhyParam+0x25e>
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))

        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 8016ab8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8016abc:	4831      	ldr	r0, [pc, #196]	; (8016b84 <RegionEU868GetPhyParam+0x278>)
 8016abe:	f002 fa2d 	bl	8018f1c <randr>
 8016ac2:	4603      	mov	r3, r0
 8016ac4:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8016ac8:	61bb      	str	r3, [r7, #24]
            break;
 8016aca:	e04e      	b.n	8016b6a <RegionEU868GetPhyParam+0x25e>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8016acc:	2300      	movs	r3, #0
 8016ace:	61bb      	str	r3, [r7, #24]
            break;
 8016ad0:	e04b      	b.n	8016b6a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8016ad2:	4b2d      	ldr	r3, [pc, #180]	; (8016b88 <RegionEU868GetPhyParam+0x27c>)
 8016ad4:	61bb      	str	r3, [r7, #24]
            break;
 8016ad6:	e048      	b.n	8016b6a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8016ad8:	2300      	movs	r3, #0
 8016ada:	61bb      	str	r3, [r7, #24]
            break;
 8016adc:	e045      	b.n	8016b6a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8016ade:	4b26      	ldr	r3, [pc, #152]	; (8016b78 <RegionEU868GetPhyParam+0x26c>)
 8016ae0:	681b      	ldr	r3, [r3, #0]
 8016ae2:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8016ae6:	61bb      	str	r3, [r7, #24]
            break;
 8016ae8:	e03f      	b.n	8016b6a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8016aea:	4b23      	ldr	r3, [pc, #140]	; (8016b78 <RegionEU868GetPhyParam+0x26c>)
 8016aec:	681b      	ldr	r3, [r3, #0]
 8016aee:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8016af2:	61bb      	str	r3, [r7, #24]
            break;
 8016af4:	e039      	b.n	8016b6a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8016af6:	2310      	movs	r3, #16
 8016af8:	61bb      	str	r3, [r7, #24]
            break;
 8016afa:	e036      	b.n	8016b6a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8016afc:	4b1e      	ldr	r3, [pc, #120]	; (8016b78 <RegionEU868GetPhyParam+0x26c>)
 8016afe:	681b      	ldr	r3, [r3, #0]
 8016b00:	61bb      	str	r3, [r7, #24]
            break;
 8016b02:	e032      	b.n	8016b6a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 8016b04:	2300      	movs	r3, #0
 8016b06:	61bb      	str	r3, [r7, #24]
            break;
 8016b08:	e02f      	b.n	8016b6a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8016b0a:	2300      	movs	r3, #0
 8016b0c:	61bb      	str	r3, [r7, #24]
            break;
 8016b0e:	e02c      	b.n	8016b6a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8016b10:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8016b14:	61bb      	str	r3, [r7, #24]
            break;
 8016b16:	e028      	b.n	8016b6a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8016b18:	4b1c      	ldr	r3, [pc, #112]	; (8016b8c <RegionEU868GetPhyParam+0x280>)
 8016b1a:	61bb      	str	r3, [r7, #24]
            break;
 8016b1c:	e025      	b.n	8016b6a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8016b1e:	4b1a      	ldr	r3, [pc, #104]	; (8016b88 <RegionEU868GetPhyParam+0x27c>)
 8016b20:	61bb      	str	r3, [r7, #24]
            break;
 8016b22:	e022      	b.n	8016b6a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8016b24:	2311      	movs	r3, #17
 8016b26:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8016b28:	2301      	movs	r3, #1
 8016b2a:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 8016b2c:	2300      	movs	r3, #0
 8016b2e:	76bb      	strb	r3, [r7, #26]
            break;
 8016b30:	e01b      	b.n	8016b6a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8016b32:	2303      	movs	r3, #3
 8016b34:	61bb      	str	r3, [r7, #24]
            break;
 8016b36:	e018      	b.n	8016b6a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8016b38:	4b13      	ldr	r3, [pc, #76]	; (8016b88 <RegionEU868GetPhyParam+0x27c>)
 8016b3a:	61bb      	str	r3, [r7, #24]
            break;
 8016b3c:	e015      	b.n	8016b6a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 8016b3e:	2303      	movs	r3, #3
 8016b40:	61bb      	str	r3, [r7, #24]
            break;
 8016b42:	e012      	b.n	8016b6a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 8016b44:	687b      	ldr	r3, [r7, #4]
 8016b46:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016b4a:	461a      	mov	r2, r3
 8016b4c:	4b10      	ldr	r3, [pc, #64]	; (8016b90 <RegionEU868GetPhyParam+0x284>)
 8016b4e:	5c9b      	ldrb	r3, [r3, r2]
 8016b50:	61bb      	str	r3, [r7, #24]
            break;
 8016b52:	e00a      	b.n	8016b6a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 8016b54:	687b      	ldr	r3, [r7, #4]
 8016b56:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016b5a:	490e      	ldr	r1, [pc, #56]	; (8016b94 <RegionEU868GetPhyParam+0x288>)
 8016b5c:	4618      	mov	r0, r3
 8016b5e:	f7ff fda7 	bl	80166b0 <RegionCommonGetBandwidth>
 8016b62:	4603      	mov	r3, r0
 8016b64:	61bb      	str	r3, [r7, #24]
            break;
 8016b66:	e000      	b.n	8016b6a <RegionEU868GetPhyParam+0x25e>
        }
        default:
        {
            break;
 8016b68:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 8016b6a:	69bb      	ldr	r3, [r7, #24]
 8016b6c:	61fb      	str	r3, [r7, #28]
 8016b6e:	69fb      	ldr	r3, [r7, #28]
}
 8016b70:	4618      	mov	r0, r3
 8016b72:	3720      	adds	r7, #32
 8016b74:	46bd      	mov	sp, r7
 8016b76:	bd80      	pop	{r7, pc}
 8016b78:	20001ad0 	.word	0x20001ad0
 8016b7c:	0801eadc 	.word	0x0801eadc
 8016b80:	0801eae4 	.word	0x0801eae4
 8016b84:	fffffc18 	.word	0xfffffc18
 8016b88:	33d3e608 	.word	0x33d3e608
 8016b8c:	4009999a 	.word	0x4009999a
 8016b90:	0801eab4 	.word	0x0801eab4
 8016b94:	0801eabc 	.word	0x0801eabc

08016b98 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8016b98:	b590      	push	{r4, r7, lr}
 8016b9a:	b085      	sub	sp, #20
 8016b9c:	af02      	add	r7, sp, #8
 8016b9e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8016ba0:	4b11      	ldr	r3, [pc, #68]	; (8016be8 <RegionEU868SetBandTxDone+0x50>)
 8016ba2:	681a      	ldr	r2, [r3, #0]
 8016ba4:	4b11      	ldr	r3, [pc, #68]	; (8016bec <RegionEU868SetBandTxDone+0x54>)
 8016ba6:	6819      	ldr	r1, [r3, #0]
 8016ba8:	687b      	ldr	r3, [r7, #4]
 8016baa:	781b      	ldrb	r3, [r3, #0]
 8016bac:	4618      	mov	r0, r3
 8016bae:	4603      	mov	r3, r0
 8016bb0:	005b      	lsls	r3, r3, #1
 8016bb2:	4403      	add	r3, r0
 8016bb4:	009b      	lsls	r3, r3, #2
 8016bb6:	440b      	add	r3, r1
 8016bb8:	3309      	adds	r3, #9
 8016bba:	781b      	ldrb	r3, [r3, #0]
 8016bbc:	4619      	mov	r1, r3
 8016bbe:	460b      	mov	r3, r1
 8016bc0:	005b      	lsls	r3, r3, #1
 8016bc2:	440b      	add	r3, r1
 8016bc4:	00db      	lsls	r3, r3, #3
 8016bc6:	18d0      	adds	r0, r2, r3
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	6899      	ldr	r1, [r3, #8]
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	785c      	ldrb	r4, [r3, #1]
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	691a      	ldr	r2, [r3, #16]
 8016bd4:	9200      	str	r2, [sp, #0]
 8016bd6:	68db      	ldr	r3, [r3, #12]
 8016bd8:	4622      	mov	r2, r4
 8016bda:	f7ff f8ef 	bl	8015dbc <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 8016bde:	bf00      	nop
 8016be0:	370c      	adds	r7, #12
 8016be2:	46bd      	mov	sp, r7
 8016be4:	bd90      	pop	{r4, r7, pc}
 8016be6:	bf00      	nop
 8016be8:	20001ad4 	.word	0x20001ad4
 8016bec:	20001ad0 	.word	0x20001ad0

08016bf0 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8016bf0:	b580      	push	{r7, lr}
 8016bf2:	b0b0      	sub	sp, #192	; 0xc0
 8016bf4:	af00      	add	r7, sp, #0
 8016bf6:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 8016bf8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016bfc:	2290      	movs	r2, #144	; 0x90
 8016bfe:	2100      	movs	r1, #0
 8016c00:	4618      	mov	r0, r3
 8016c02:	f006 ffbf 	bl	801db84 <memset>
 8016c06:	2364      	movs	r3, #100	; 0x64
 8016c08:	863b      	strh	r3, [r7, #48]	; 0x30
 8016c0a:	2364      	movs	r3, #100	; 0x64
 8016c0c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8016c10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016c14:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8016c18:	230a      	movs	r3, #10
 8016c1a:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8016c1e:	2364      	movs	r3, #100	; 0x64
 8016c20:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8016c24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016c28:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	7b1b      	ldrb	r3, [r3, #12]
 8016c30:	2b02      	cmp	r3, #2
 8016c32:	d05d      	beq.n	8016cf0 <RegionEU868InitDefaults+0x100>
 8016c34:	2b02      	cmp	r3, #2
 8016c36:	dc6a      	bgt.n	8016d0e <RegionEU868InitDefaults+0x11e>
 8016c38:	2b00      	cmp	r3, #0
 8016c3a:	d002      	beq.n	8016c42 <RegionEU868InitDefaults+0x52>
 8016c3c:	2b01      	cmp	r3, #1
 8016c3e:	d03e      	beq.n	8016cbe <RegionEU868InitDefaults+0xce>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8016c40:	e065      	b.n	8016d0e <RegionEU868InitDefaults+0x11e>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8016c42:	687b      	ldr	r3, [r7, #4]
 8016c44:	681b      	ldr	r3, [r3, #0]
 8016c46:	2b00      	cmp	r3, #0
 8016c48:	d062      	beq.n	8016d10 <RegionEU868InitDefaults+0x120>
 8016c4a:	687b      	ldr	r3, [r7, #4]
 8016c4c:	685b      	ldr	r3, [r3, #4]
 8016c4e:	2b00      	cmp	r3, #0
 8016c50:	d05e      	beq.n	8016d10 <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8016c52:	687b      	ldr	r3, [r7, #4]
 8016c54:	685b      	ldr	r3, [r3, #4]
 8016c56:	4a30      	ldr	r2, [pc, #192]	; (8016d18 <RegionEU868InitDefaults+0x128>)
 8016c58:	6013      	str	r3, [r2, #0]
            RegionBands = (Band_t*) params->Bands;
 8016c5a:	687b      	ldr	r3, [r7, #4]
 8016c5c:	689b      	ldr	r3, [r3, #8]
 8016c5e:	4a2f      	ldr	r2, [pc, #188]	; (8016d1c <RegionEU868InitDefaults+0x12c>)
 8016c60:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8016c62:	4b2e      	ldr	r3, [pc, #184]	; (8016d1c <RegionEU868InitDefaults+0x12c>)
 8016c64:	681b      	ldr	r3, [r3, #0]
 8016c66:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8016c6a:	2290      	movs	r2, #144	; 0x90
 8016c6c:	4618      	mov	r0, r3
 8016c6e:	f002 f96c 	bl	8018f4a <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8016c72:	4b29      	ldr	r3, [pc, #164]	; (8016d18 <RegionEU868InitDefaults+0x128>)
 8016c74:	681b      	ldr	r3, [r3, #0]
 8016c76:	4a2a      	ldr	r2, [pc, #168]	; (8016d20 <RegionEU868InitDefaults+0x130>)
 8016c78:	ca07      	ldmia	r2, {r0, r1, r2}
 8016c7a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8016c7e:	4b26      	ldr	r3, [pc, #152]	; (8016d18 <RegionEU868InitDefaults+0x128>)
 8016c80:	681b      	ldr	r3, [r3, #0]
 8016c82:	4a28      	ldr	r2, [pc, #160]	; (8016d24 <RegionEU868InitDefaults+0x134>)
 8016c84:	330c      	adds	r3, #12
 8016c86:	ca07      	ldmia	r2, {r0, r1, r2}
 8016c88:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8016c8c:	4b22      	ldr	r3, [pc, #136]	; (8016d18 <RegionEU868InitDefaults+0x128>)
 8016c8e:	681b      	ldr	r3, [r3, #0]
 8016c90:	4a25      	ldr	r2, [pc, #148]	; (8016d28 <RegionEU868InitDefaults+0x138>)
 8016c92:	3318      	adds	r3, #24
 8016c94:	ca07      	ldmia	r2, {r0, r1, r2}
 8016c96:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8016c9a:	4b1f      	ldr	r3, [pc, #124]	; (8016d18 <RegionEU868InitDefaults+0x128>)
 8016c9c:	681b      	ldr	r3, [r3, #0]
 8016c9e:	2207      	movs	r2, #7
 8016ca0:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8016ca4:	4b1c      	ldr	r3, [pc, #112]	; (8016d18 <RegionEU868InitDefaults+0x128>)
 8016ca6:	681b      	ldr	r3, [r3, #0]
 8016ca8:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8016cac:	4b1a      	ldr	r3, [pc, #104]	; (8016d18 <RegionEU868InitDefaults+0x128>)
 8016cae:	681b      	ldr	r3, [r3, #0]
 8016cb0:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8016cb4:	2201      	movs	r2, #1
 8016cb6:	4619      	mov	r1, r3
 8016cb8:	f7ff f85a 	bl	8015d70 <RegionCommonChanMaskCopy>
 8016cbc:	e028      	b.n	8016d10 <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8016cbe:	4b16      	ldr	r3, [pc, #88]	; (8016d18 <RegionEU868InitDefaults+0x128>)
 8016cc0:	681b      	ldr	r3, [r3, #0]
 8016cc2:	2200      	movs	r2, #0
 8016cc4:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8016cc6:	4b14      	ldr	r3, [pc, #80]	; (8016d18 <RegionEU868InitDefaults+0x128>)
 8016cc8:	681b      	ldr	r3, [r3, #0]
 8016cca:	2200      	movs	r2, #0
 8016ccc:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 8016cce:	4b12      	ldr	r3, [pc, #72]	; (8016d18 <RegionEU868InitDefaults+0x128>)
 8016cd0:	681b      	ldr	r3, [r3, #0]
 8016cd2:	2200      	movs	r2, #0
 8016cd4:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8016cd6:	4b10      	ldr	r3, [pc, #64]	; (8016d18 <RegionEU868InitDefaults+0x128>)
 8016cd8:	681b      	ldr	r3, [r3, #0]
 8016cda:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8016cde:	4b0e      	ldr	r3, [pc, #56]	; (8016d18 <RegionEU868InitDefaults+0x128>)
 8016ce0:	681b      	ldr	r3, [r3, #0]
 8016ce2:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8016ce6:	2201      	movs	r2, #1
 8016ce8:	4619      	mov	r1, r3
 8016cea:	f7ff f841 	bl	8015d70 <RegionCommonChanMaskCopy>
            break;
 8016cee:	e00f      	b.n	8016d10 <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8016cf0:	4b09      	ldr	r3, [pc, #36]	; (8016d18 <RegionEU868InitDefaults+0x128>)
 8016cf2:	681b      	ldr	r3, [r3, #0]
 8016cf4:	f8b3 1360 	ldrh.w	r1, [r3, #864]	; 0x360
 8016cf8:	4b07      	ldr	r3, [pc, #28]	; (8016d18 <RegionEU868InitDefaults+0x128>)
 8016cfa:	681b      	ldr	r3, [r3, #0]
 8016cfc:	f8b3 236c 	ldrh.w	r2, [r3, #876]	; 0x36c
 8016d00:	4b05      	ldr	r3, [pc, #20]	; (8016d18 <RegionEU868InitDefaults+0x128>)
 8016d02:	681b      	ldr	r3, [r3, #0]
 8016d04:	430a      	orrs	r2, r1
 8016d06:	b292      	uxth	r2, r2
 8016d08:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
            break;
 8016d0c:	e000      	b.n	8016d10 <RegionEU868InitDefaults+0x120>
            break;
 8016d0e:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8016d10:	37c0      	adds	r7, #192	; 0xc0
 8016d12:	46bd      	mov	sp, r7
 8016d14:	bd80      	pop	{r7, pc}
 8016d16:	bf00      	nop
 8016d18:	20001ad0 	.word	0x20001ad0
 8016d1c:	20001ad4 	.word	0x20001ad4
 8016d20:	0801e4e4 	.word	0x0801e4e4
 8016d24:	0801e4f0 	.word	0x0801e4f0
 8016d28:	0801e4fc 	.word	0x0801e4fc

08016d2c <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8016d2c:	b580      	push	{r7, lr}
 8016d2e:	b084      	sub	sp, #16
 8016d30:	af00      	add	r7, sp, #0
 8016d32:	6078      	str	r0, [r7, #4]
 8016d34:	460b      	mov	r3, r1
 8016d36:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 8016d38:	78fb      	ldrb	r3, [r7, #3]
 8016d3a:	2b0f      	cmp	r3, #15
 8016d3c:	d86c      	bhi.n	8016e18 <RegionEU868Verify+0xec>
 8016d3e:	a201      	add	r2, pc, #4	; (adr r2, 8016d44 <RegionEU868Verify+0x18>)
 8016d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016d44:	08016d85 	.word	0x08016d85
 8016d48:	08016e19 	.word	0x08016e19
 8016d4c:	08016e19 	.word	0x08016e19
 8016d50:	08016e19 	.word	0x08016e19
 8016d54:	08016e19 	.word	0x08016e19
 8016d58:	08016d9d 	.word	0x08016d9d
 8016d5c:	08016dbb 	.word	0x08016dbb
 8016d60:	08016dd9 	.word	0x08016dd9
 8016d64:	08016e19 	.word	0x08016e19
 8016d68:	08016df7 	.word	0x08016df7
 8016d6c:	08016df7 	.word	0x08016df7
 8016d70:	08016e19 	.word	0x08016e19
 8016d74:	08016e19 	.word	0x08016e19
 8016d78:	08016e19 	.word	0x08016e19
 8016d7c:	08016e19 	.word	0x08016e19
 8016d80:	08016e15 	.word	0x08016e15
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8016d84:	2300      	movs	r3, #0
 8016d86:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 8016d88:	687b      	ldr	r3, [r7, #4]
 8016d8a:	681b      	ldr	r3, [r3, #0]
 8016d8c:	f107 020f 	add.w	r2, r7, #15
 8016d90:	4611      	mov	r1, r2
 8016d92:	4618      	mov	r0, r3
 8016d94:	f7ff fcf4 	bl	8016780 <VerifyRfFreq>
 8016d98:	4603      	mov	r3, r0
 8016d9a:	e03e      	b.n	8016e1a <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	f993 3000 	ldrsb.w	r3, [r3]
 8016da2:	2207      	movs	r2, #7
 8016da4:	2100      	movs	r1, #0
 8016da6:	4618      	mov	r0, r3
 8016da8:	f7fe ff65 	bl	8015c76 <RegionCommonValueInRange>
 8016dac:	4603      	mov	r3, r0
 8016dae:	2b00      	cmp	r3, #0
 8016db0:	bf14      	ite	ne
 8016db2:	2301      	movne	r3, #1
 8016db4:	2300      	moveq	r3, #0
 8016db6:	b2db      	uxtb	r3, r3
 8016db8:	e02f      	b.n	8016e1a <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8016dba:	687b      	ldr	r3, [r7, #4]
 8016dbc:	f993 3000 	ldrsb.w	r3, [r3]
 8016dc0:	2205      	movs	r2, #5
 8016dc2:	2100      	movs	r1, #0
 8016dc4:	4618      	mov	r0, r3
 8016dc6:	f7fe ff56 	bl	8015c76 <RegionCommonValueInRange>
 8016dca:	4603      	mov	r3, r0
 8016dcc:	2b00      	cmp	r3, #0
 8016dce:	bf14      	ite	ne
 8016dd0:	2301      	movne	r3, #1
 8016dd2:	2300      	moveq	r3, #0
 8016dd4:	b2db      	uxtb	r3, r3
 8016dd6:	e020      	b.n	8016e1a <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8016dd8:	687b      	ldr	r3, [r7, #4]
 8016dda:	f993 3000 	ldrsb.w	r3, [r3]
 8016dde:	2207      	movs	r2, #7
 8016de0:	2100      	movs	r1, #0
 8016de2:	4618      	mov	r0, r3
 8016de4:	f7fe ff47 	bl	8015c76 <RegionCommonValueInRange>
 8016de8:	4603      	mov	r3, r0
 8016dea:	2b00      	cmp	r3, #0
 8016dec:	bf14      	ite	ne
 8016dee:	2301      	movne	r3, #1
 8016df0:	2300      	moveq	r3, #0
 8016df2:	b2db      	uxtb	r3, r3
 8016df4:	e011      	b.n	8016e1a <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8016df6:	687b      	ldr	r3, [r7, #4]
 8016df8:	f993 3000 	ldrsb.w	r3, [r3]
 8016dfc:	2207      	movs	r2, #7
 8016dfe:	2100      	movs	r1, #0
 8016e00:	4618      	mov	r0, r3
 8016e02:	f7fe ff38 	bl	8015c76 <RegionCommonValueInRange>
 8016e06:	4603      	mov	r3, r0
 8016e08:	2b00      	cmp	r3, #0
 8016e0a:	bf14      	ite	ne
 8016e0c:	2301      	movne	r3, #1
 8016e0e:	2300      	moveq	r3, #0
 8016e10:	b2db      	uxtb	r3, r3
 8016e12:	e002      	b.n	8016e1a <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8016e14:	2301      	movs	r3, #1
 8016e16:	e000      	b.n	8016e1a <RegionEU868Verify+0xee>
        }
        default:
            return false;
 8016e18:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 8016e1a:	4618      	mov	r0, r3
 8016e1c:	3710      	adds	r7, #16
 8016e1e:	46bd      	mov	sp, r7
 8016e20:	bd80      	pop	{r7, pc}
 8016e22:	bf00      	nop

08016e24 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8016e24:	b580      	push	{r7, lr}
 8016e26:	b08a      	sub	sp, #40	; 0x28
 8016e28:	af00      	add	r7, sp, #0
 8016e2a:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8016e2c:	2350      	movs	r3, #80	; 0x50
 8016e2e:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8016e32:	687b      	ldr	r3, [r7, #4]
 8016e34:	7a1b      	ldrb	r3, [r3, #8]
 8016e36:	2b10      	cmp	r3, #16
 8016e38:	d162      	bne.n	8016f00 <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8016e3a:	687b      	ldr	r3, [r7, #4]
 8016e3c:	685b      	ldr	r3, [r3, #4]
 8016e3e:	330f      	adds	r3, #15
 8016e40:	781b      	ldrb	r3, [r3, #0]
 8016e42:	2b00      	cmp	r3, #0
 8016e44:	d15e      	bne.n	8016f04 <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8016e46:	2300      	movs	r3, #0
 8016e48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016e4c:	2303      	movs	r3, #3
 8016e4e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016e52:	e050      	b.n	8016ef6 <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8016e54:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016e58:	2b07      	cmp	r3, #7
 8016e5a:	d824      	bhi.n	8016ea6 <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	685a      	ldr	r2, [r3, #4]
 8016e60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016e64:	4413      	add	r3, r2
 8016e66:	781b      	ldrb	r3, [r3, #0]
 8016e68:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8016e6a:	69ba      	ldr	r2, [r7, #24]
 8016e6c:	687b      	ldr	r3, [r7, #4]
 8016e6e:	6859      	ldr	r1, [r3, #4]
 8016e70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016e74:	3301      	adds	r3, #1
 8016e76:	440b      	add	r3, r1
 8016e78:	781b      	ldrb	r3, [r3, #0]
 8016e7a:	021b      	lsls	r3, r3, #8
 8016e7c:	4313      	orrs	r3, r2
 8016e7e:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8016e80:	69ba      	ldr	r2, [r7, #24]
 8016e82:	687b      	ldr	r3, [r7, #4]
 8016e84:	6859      	ldr	r1, [r3, #4]
 8016e86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016e8a:	3302      	adds	r3, #2
 8016e8c:	440b      	add	r3, r1
 8016e8e:	781b      	ldrb	r3, [r3, #0]
 8016e90:	041b      	lsls	r3, r3, #16
 8016e92:	4313      	orrs	r3, r2
 8016e94:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 8016e96:	69bb      	ldr	r3, [r7, #24]
 8016e98:	2264      	movs	r2, #100	; 0x64
 8016e9a:	fb02 f303 	mul.w	r3, r2, r3
 8016e9e:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8016ea0:	2300      	movs	r3, #0
 8016ea2:	61fb      	str	r3, [r7, #28]
 8016ea4:	e006      	b.n	8016eb4 <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 8016ea6:	2300      	movs	r3, #0
 8016ea8:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 8016eaa:	2300      	movs	r3, #0
 8016eac:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8016eb0:	2300      	movs	r3, #0
 8016eb2:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8016eb4:	69bb      	ldr	r3, [r7, #24]
 8016eb6:	2b00      	cmp	r3, #0
 8016eb8:	d00b      	beq.n	8016ed2 <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 8016eba:	f107 0318 	add.w	r3, r7, #24
 8016ebe:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8016ec0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016ec4:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 8016ec6:	f107 0310 	add.w	r3, r7, #16
 8016eca:	4618      	mov	r0, r3
 8016ecc:	f000 fd14 	bl	80178f8 <RegionEU868ChannelAdd>
 8016ed0:	e007      	b.n	8016ee2 <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8016ed2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016ed6:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 8016ed8:	f107 030c 	add.w	r3, r7, #12
 8016edc:	4618      	mov	r0, r3
 8016ede:	f000 fdad 	bl	8017a3c <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8016ee2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016ee6:	3303      	adds	r3, #3
 8016ee8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016eec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016ef0:	3301      	adds	r3, #1
 8016ef2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016ef6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016efa:	2b0f      	cmp	r3, #15
 8016efc:	d9aa      	bls.n	8016e54 <RegionEU868ApplyCFList+0x30>
 8016efe:	e002      	b.n	8016f06 <RegionEU868ApplyCFList+0xe2>
        return;
 8016f00:	bf00      	nop
 8016f02:	e000      	b.n	8016f06 <RegionEU868ApplyCFList+0xe2>
        return;
 8016f04:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8016f06:	3728      	adds	r7, #40	; 0x28
 8016f08:	46bd      	mov	sp, r7
 8016f0a:	bd80      	pop	{r7, pc}

08016f0c <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8016f0c:	b580      	push	{r7, lr}
 8016f0e:	b082      	sub	sp, #8
 8016f10:	af00      	add	r7, sp, #0
 8016f12:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 8016f14:	687b      	ldr	r3, [r7, #4]
 8016f16:	791b      	ldrb	r3, [r3, #4]
 8016f18:	2b00      	cmp	r3, #0
 8016f1a:	d002      	beq.n	8016f22 <RegionEU868ChanMaskSet+0x16>
 8016f1c:	2b01      	cmp	r3, #1
 8016f1e:	d00b      	beq.n	8016f38 <RegionEU868ChanMaskSet+0x2c>
 8016f20:	e015      	b.n	8016f4e <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8016f22:	4b0e      	ldr	r3, [pc, #56]	; (8016f5c <RegionEU868ChanMaskSet+0x50>)
 8016f24:	681b      	ldr	r3, [r3, #0]
 8016f26:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8016f2a:	687b      	ldr	r3, [r7, #4]
 8016f2c:	681b      	ldr	r3, [r3, #0]
 8016f2e:	2201      	movs	r2, #1
 8016f30:	4619      	mov	r1, r3
 8016f32:	f7fe ff1d 	bl	8015d70 <RegionCommonChanMaskCopy>
            break;
 8016f36:	e00c      	b.n	8016f52 <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8016f38:	4b08      	ldr	r3, [pc, #32]	; (8016f5c <RegionEU868ChanMaskSet+0x50>)
 8016f3a:	681b      	ldr	r3, [r3, #0]
 8016f3c:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	681b      	ldr	r3, [r3, #0]
 8016f44:	2201      	movs	r2, #1
 8016f46:	4619      	mov	r1, r3
 8016f48:	f7fe ff12 	bl	8015d70 <RegionCommonChanMaskCopy>
            break;
 8016f4c:	e001      	b.n	8016f52 <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 8016f4e:	2300      	movs	r3, #0
 8016f50:	e000      	b.n	8016f54 <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 8016f52:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8016f54:	4618      	mov	r0, r3
 8016f56:	3708      	adds	r7, #8
 8016f58:	46bd      	mov	sp, r7
 8016f5a:	bd80      	pop	{r7, pc}
 8016f5c:	20001ad0 	.word	0x20001ad0

08016f60 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8016f60:	b580      	push	{r7, lr}
 8016f62:	b088      	sub	sp, #32
 8016f64:	af02      	add	r7, sp, #8
 8016f66:	60ba      	str	r2, [r7, #8]
 8016f68:	607b      	str	r3, [r7, #4]
 8016f6a:	4603      	mov	r3, r0
 8016f6c:	73fb      	strb	r3, [r7, #15]
 8016f6e:	460b      	mov	r3, r1
 8016f70:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 8016f72:	2300      	movs	r3, #0
 8016f74:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8016f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016f7a:	2b07      	cmp	r3, #7
 8016f7c:	bfa8      	it	ge
 8016f7e:	2307      	movge	r3, #7
 8016f80:	b25a      	sxtb	r2, r3
 8016f82:	687b      	ldr	r3, [r7, #4]
 8016f84:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 8016f86:	687b      	ldr	r3, [r7, #4]
 8016f88:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016f8c:	491e      	ldr	r1, [pc, #120]	; (8017008 <RegionEU868ComputeRxWindowParameters+0xa8>)
 8016f8e:	4618      	mov	r0, r3
 8016f90:	f7ff fb8e 	bl	80166b0 <RegionCommonGetBandwidth>
 8016f94:	4603      	mov	r3, r0
 8016f96:	b2da      	uxtb	r2, r3
 8016f98:	687b      	ldr	r3, [r7, #4]
 8016f9a:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016fa2:	2b07      	cmp	r3, #7
 8016fa4:	d10a      	bne.n	8016fbc <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 8016fa6:	687b      	ldr	r3, [r7, #4]
 8016fa8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016fac:	461a      	mov	r2, r3
 8016fae:	4b17      	ldr	r3, [pc, #92]	; (801700c <RegionEU868ComputeRxWindowParameters+0xac>)
 8016fb0:	5c9b      	ldrb	r3, [r3, r2]
 8016fb2:	4618      	mov	r0, r3
 8016fb4:	f7ff f910 	bl	80161d8 <RegionCommonComputeSymbolTimeFsk>
 8016fb8:	6178      	str	r0, [r7, #20]
 8016fba:	e011      	b.n	8016fe0 <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8016fbc:	687b      	ldr	r3, [r7, #4]
 8016fbe:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016fc2:	461a      	mov	r2, r3
 8016fc4:	4b11      	ldr	r3, [pc, #68]	; (801700c <RegionEU868ComputeRxWindowParameters+0xac>)
 8016fc6:	5c9a      	ldrb	r2, [r3, r2]
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016fce:	4619      	mov	r1, r3
 8016fd0:	4b0d      	ldr	r3, [pc, #52]	; (8017008 <RegionEU868ComputeRxWindowParameters+0xa8>)
 8016fd2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016fd6:	4619      	mov	r1, r3
 8016fd8:	4610      	mov	r0, r2
 8016fda:	f7ff f8e7 	bl	80161ac <RegionCommonComputeSymbolTimeLoRa>
 8016fde:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8016fe0:	4b0b      	ldr	r3, [pc, #44]	; (8017010 <RegionEU868ComputeRxWindowParameters+0xb0>)
 8016fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016fe4:	4798      	blx	r3
 8016fe6:	687b      	ldr	r3, [r7, #4]
 8016fe8:	3308      	adds	r3, #8
 8016fea:	687a      	ldr	r2, [r7, #4]
 8016fec:	320c      	adds	r2, #12
 8016fee:	7bb9      	ldrb	r1, [r7, #14]
 8016ff0:	9201      	str	r2, [sp, #4]
 8016ff2:	9300      	str	r3, [sp, #0]
 8016ff4:	4603      	mov	r3, r0
 8016ff6:	68ba      	ldr	r2, [r7, #8]
 8016ff8:	6978      	ldr	r0, [r7, #20]
 8016ffa:	f7ff f8fd 	bl	80161f8 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 8016ffe:	bf00      	nop
 8017000:	3718      	adds	r7, #24
 8017002:	46bd      	mov	sp, r7
 8017004:	bd80      	pop	{r7, pc}
 8017006:	bf00      	nop
 8017008:	0801eabc 	.word	0x0801eabc
 801700c:	0801eab4 	.word	0x0801eab4
 8017010:	0801eb70 	.word	0x0801eb70

08017014 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8017014:	b5b0      	push	{r4, r5, r7, lr}
 8017016:	b090      	sub	sp, #64	; 0x40
 8017018:	af0a      	add	r7, sp, #40	; 0x28
 801701a:	6078      	str	r0, [r7, #4]
 801701c:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 801701e:	687b      	ldr	r3, [r7, #4]
 8017020:	785b      	ldrb	r3, [r3, #1]
 8017022:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8017024:	2300      	movs	r3, #0
 8017026:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8017028:	2300      	movs	r3, #0
 801702a:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 801702c:	687b      	ldr	r3, [r7, #4]
 801702e:	685b      	ldr	r3, [r3, #4]
 8017030:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8017032:	4b5a      	ldr	r3, [pc, #360]	; (801719c <RegionEU868RxConfig+0x188>)
 8017034:	685b      	ldr	r3, [r3, #4]
 8017036:	4798      	blx	r3
 8017038:	4603      	mov	r3, r0
 801703a:	2b00      	cmp	r3, #0
 801703c:	d001      	beq.n	8017042 <RegionEU868RxConfig+0x2e>
    {
        return false;
 801703e:	2300      	movs	r3, #0
 8017040:	e0a8      	b.n	8017194 <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8017042:	687b      	ldr	r3, [r7, #4]
 8017044:	7cdb      	ldrb	r3, [r3, #19]
 8017046:	2b00      	cmp	r3, #0
 8017048:	d126      	bne.n	8017098 <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 801704a:	4b55      	ldr	r3, [pc, #340]	; (80171a0 <RegionEU868RxConfig+0x18c>)
 801704c:	681a      	ldr	r2, [r3, #0]
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	781b      	ldrb	r3, [r3, #0]
 8017052:	4619      	mov	r1, r3
 8017054:	460b      	mov	r3, r1
 8017056:	005b      	lsls	r3, r3, #1
 8017058:	440b      	add	r3, r1
 801705a:	009b      	lsls	r3, r3, #2
 801705c:	4413      	add	r3, r2
 801705e:	681b      	ldr	r3, [r3, #0]
 8017060:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8017062:	4b4f      	ldr	r3, [pc, #316]	; (80171a0 <RegionEU868RxConfig+0x18c>)
 8017064:	681a      	ldr	r2, [r3, #0]
 8017066:	687b      	ldr	r3, [r7, #4]
 8017068:	781b      	ldrb	r3, [r3, #0]
 801706a:	4619      	mov	r1, r3
 801706c:	460b      	mov	r3, r1
 801706e:	005b      	lsls	r3, r3, #1
 8017070:	440b      	add	r3, r1
 8017072:	009b      	lsls	r3, r3, #2
 8017074:	4413      	add	r3, r2
 8017076:	3304      	adds	r3, #4
 8017078:	681b      	ldr	r3, [r3, #0]
 801707a:	2b00      	cmp	r3, #0
 801707c:	d00c      	beq.n	8017098 <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 801707e:	4b48      	ldr	r3, [pc, #288]	; (80171a0 <RegionEU868RxConfig+0x18c>)
 8017080:	681a      	ldr	r2, [r3, #0]
 8017082:	687b      	ldr	r3, [r7, #4]
 8017084:	781b      	ldrb	r3, [r3, #0]
 8017086:	4619      	mov	r1, r3
 8017088:	460b      	mov	r3, r1
 801708a:	005b      	lsls	r3, r3, #1
 801708c:	440b      	add	r3, r1
 801708e:	009b      	lsls	r3, r3, #2
 8017090:	4413      	add	r3, r2
 8017092:	3304      	adds	r3, #4
 8017094:	681b      	ldr	r3, [r3, #0]
 8017096:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8017098:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801709c:	4a41      	ldr	r2, [pc, #260]	; (80171a4 <RegionEU868RxConfig+0x190>)
 801709e:	5cd3      	ldrb	r3, [r2, r3]
 80170a0:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 80170a2:	4b3e      	ldr	r3, [pc, #248]	; (801719c <RegionEU868RxConfig+0x188>)
 80170a4:	68db      	ldr	r3, [r3, #12]
 80170a6:	6938      	ldr	r0, [r7, #16]
 80170a8:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 80170aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80170ae:	2b07      	cmp	r3, #7
 80170b0:	d128      	bne.n	8017104 <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 80170b2:	2300      	movs	r3, #0
 80170b4:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 80170b6:	4b39      	ldr	r3, [pc, #228]	; (801719c <RegionEU868RxConfig+0x188>)
 80170b8:	699c      	ldr	r4, [r3, #24]
 80170ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80170be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80170c2:	fb02 f303 	mul.w	r3, r2, r3
 80170c6:	4619      	mov	r1, r3
 80170c8:	687b      	ldr	r3, [r7, #4]
 80170ca:	689b      	ldr	r3, [r3, #8]
 80170cc:	b29b      	uxth	r3, r3
 80170ce:	687a      	ldr	r2, [r7, #4]
 80170d0:	7c92      	ldrb	r2, [r2, #18]
 80170d2:	7df8      	ldrb	r0, [r7, #23]
 80170d4:	9209      	str	r2, [sp, #36]	; 0x24
 80170d6:	2200      	movs	r2, #0
 80170d8:	9208      	str	r2, [sp, #32]
 80170da:	2200      	movs	r2, #0
 80170dc:	9207      	str	r2, [sp, #28]
 80170de:	2200      	movs	r2, #0
 80170e0:	9206      	str	r2, [sp, #24]
 80170e2:	2201      	movs	r2, #1
 80170e4:	9205      	str	r2, [sp, #20]
 80170e6:	2200      	movs	r2, #0
 80170e8:	9204      	str	r2, [sp, #16]
 80170ea:	2200      	movs	r2, #0
 80170ec:	9203      	str	r2, [sp, #12]
 80170ee:	9302      	str	r3, [sp, #8]
 80170f0:	2305      	movs	r3, #5
 80170f2:	9301      	str	r3, [sp, #4]
 80170f4:	4b2c      	ldr	r3, [pc, #176]	; (80171a8 <RegionEU868RxConfig+0x194>)
 80170f6:	9300      	str	r3, [sp, #0]
 80170f8:	2300      	movs	r3, #0
 80170fa:	460a      	mov	r2, r1
 80170fc:	f24c 3150 	movw	r1, #50000	; 0xc350
 8017100:	47a0      	blx	r4
 8017102:	e024      	b.n	801714e <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 8017104:	2301      	movs	r3, #1
 8017106:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8017108:	4b24      	ldr	r3, [pc, #144]	; (801719c <RegionEU868RxConfig+0x188>)
 801710a:	699c      	ldr	r4, [r3, #24]
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	789b      	ldrb	r3, [r3, #2]
 8017110:	461d      	mov	r5, r3
 8017112:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8017116:	687b      	ldr	r3, [r7, #4]
 8017118:	689b      	ldr	r3, [r3, #8]
 801711a:	b29b      	uxth	r3, r3
 801711c:	687a      	ldr	r2, [r7, #4]
 801711e:	7c92      	ldrb	r2, [r2, #18]
 8017120:	7df8      	ldrb	r0, [r7, #23]
 8017122:	9209      	str	r2, [sp, #36]	; 0x24
 8017124:	2201      	movs	r2, #1
 8017126:	9208      	str	r2, [sp, #32]
 8017128:	2200      	movs	r2, #0
 801712a:	9207      	str	r2, [sp, #28]
 801712c:	2200      	movs	r2, #0
 801712e:	9206      	str	r2, [sp, #24]
 8017130:	2200      	movs	r2, #0
 8017132:	9205      	str	r2, [sp, #20]
 8017134:	2200      	movs	r2, #0
 8017136:	9204      	str	r2, [sp, #16]
 8017138:	2200      	movs	r2, #0
 801713a:	9203      	str	r2, [sp, #12]
 801713c:	9302      	str	r3, [sp, #8]
 801713e:	2308      	movs	r3, #8
 8017140:	9301      	str	r3, [sp, #4]
 8017142:	2300      	movs	r3, #0
 8017144:	9300      	str	r3, [sp, #0]
 8017146:	2301      	movs	r3, #1
 8017148:	460a      	mov	r2, r1
 801714a:	4629      	mov	r1, r5
 801714c:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	7c5b      	ldrb	r3, [r3, #17]
 8017152:	2b00      	cmp	r3, #0
 8017154:	d005      	beq.n	8017162 <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 8017156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801715a:	4a14      	ldr	r2, [pc, #80]	; (80171ac <RegionEU868RxConfig+0x198>)
 801715c:	5cd3      	ldrb	r3, [r2, r3]
 801715e:	75bb      	strb	r3, [r7, #22]
 8017160:	e004      	b.n	801716c <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 8017162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017166:	4a12      	ldr	r2, [pc, #72]	; (80171b0 <RegionEU868RxConfig+0x19c>)
 8017168:	5cd3      	ldrb	r3, [r2, r3]
 801716a:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 801716c:	4b0b      	ldr	r3, [pc, #44]	; (801719c <RegionEU868RxConfig+0x188>)
 801716e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017170:	7dba      	ldrb	r2, [r7, #22]
 8017172:	320d      	adds	r2, #13
 8017174:	b2d1      	uxtb	r1, r2
 8017176:	7dfa      	ldrb	r2, [r7, #23]
 8017178:	4610      	mov	r0, r2
 801717a:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 801717c:	687b      	ldr	r3, [r7, #4]
 801717e:	7cdb      	ldrb	r3, [r3, #19]
 8017180:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8017184:	6939      	ldr	r1, [r7, #16]
 8017186:	4618      	mov	r0, r3
 8017188:	f7ff fab0 	bl	80166ec <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 801718c:	683b      	ldr	r3, [r7, #0]
 801718e:	7bfa      	ldrb	r2, [r7, #15]
 8017190:	701a      	strb	r2, [r3, #0]
    return true;
 8017192:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8017194:	4618      	mov	r0, r3
 8017196:	3718      	adds	r7, #24
 8017198:	46bd      	mov	sp, r7
 801719a:	bdb0      	pop	{r4, r5, r7, pc}
 801719c:	0801eb70 	.word	0x0801eb70
 80171a0:	20001ad0 	.word	0x20001ad0
 80171a4:	0801eab4 	.word	0x0801eab4
 80171a8:	00014585 	.word	0x00014585
 80171ac:	0801eae4 	.word	0x0801eae4
 80171b0:	0801eadc 	.word	0x0801eadc

080171b4 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80171b4:	b590      	push	{r4, r7, lr}
 80171b6:	b093      	sub	sp, #76	; 0x4c
 80171b8:	af0a      	add	r7, sp, #40	; 0x28
 80171ba:	60f8      	str	r0, [r7, #12]
 80171bc:	60b9      	str	r1, [r7, #8]
 80171be:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 80171c0:	68fb      	ldr	r3, [r7, #12]
 80171c2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80171c6:	461a      	mov	r2, r3
 80171c8:	4b5d      	ldr	r3, [pc, #372]	; (8017340 <RegionEU868TxConfig+0x18c>)
 80171ca:	5c9b      	ldrb	r3, [r3, r2]
 80171cc:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 80171ce:	68fb      	ldr	r3, [r7, #12]
 80171d0:	f993 0002 	ldrsb.w	r0, [r3, #2]
 80171d4:	4b5b      	ldr	r3, [pc, #364]	; (8017344 <RegionEU868TxConfig+0x190>)
 80171d6:	681a      	ldr	r2, [r3, #0]
 80171d8:	4b5b      	ldr	r3, [pc, #364]	; (8017348 <RegionEU868TxConfig+0x194>)
 80171da:	6819      	ldr	r1, [r3, #0]
 80171dc:	68fb      	ldr	r3, [r7, #12]
 80171de:	781b      	ldrb	r3, [r3, #0]
 80171e0:	461c      	mov	r4, r3
 80171e2:	4623      	mov	r3, r4
 80171e4:	005b      	lsls	r3, r3, #1
 80171e6:	4423      	add	r3, r4
 80171e8:	009b      	lsls	r3, r3, #2
 80171ea:	440b      	add	r3, r1
 80171ec:	3309      	adds	r3, #9
 80171ee:	781b      	ldrb	r3, [r3, #0]
 80171f0:	4619      	mov	r1, r3
 80171f2:	460b      	mov	r3, r1
 80171f4:	005b      	lsls	r3, r3, #1
 80171f6:	440b      	add	r3, r1
 80171f8:	00db      	lsls	r3, r3, #3
 80171fa:	4413      	add	r3, r2
 80171fc:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8017200:	4619      	mov	r1, r3
 8017202:	f7ff fa40 	bl	8016686 <RegionCommonLimitTxPower>
 8017206:	4603      	mov	r3, r0
 8017208:	777b      	strb	r3, [r7, #29]
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 801720a:	68fb      	ldr	r3, [r7, #12]
 801720c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017210:	494e      	ldr	r1, [pc, #312]	; (801734c <RegionEU868TxConfig+0x198>)
 8017212:	4618      	mov	r0, r3
 8017214:	f7ff fa4c 	bl	80166b0 <RegionCommonGetBandwidth>
 8017218:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 801721a:	2300      	movs	r3, #0
 801721c:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 801721e:	68fb      	ldr	r3, [r7, #12]
 8017220:	6859      	ldr	r1, [r3, #4]
 8017222:	68fb      	ldr	r3, [r7, #12]
 8017224:	689a      	ldr	r2, [r3, #8]
 8017226:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801722a:	4618      	mov	r0, r3
 801722c:	f7ff f89c 	bl	8016368 <RegionCommonComputeTxPower>
 8017230:	4603      	mov	r3, r0
 8017232:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8017234:	4b46      	ldr	r3, [pc, #280]	; (8017350 <RegionEU868TxConfig+0x19c>)
 8017236:	68da      	ldr	r2, [r3, #12]
 8017238:	4b43      	ldr	r3, [pc, #268]	; (8017348 <RegionEU868TxConfig+0x194>)
 801723a:	6819      	ldr	r1, [r3, #0]
 801723c:	68fb      	ldr	r3, [r7, #12]
 801723e:	781b      	ldrb	r3, [r3, #0]
 8017240:	4618      	mov	r0, r3
 8017242:	4603      	mov	r3, r0
 8017244:	005b      	lsls	r3, r3, #1
 8017246:	4403      	add	r3, r0
 8017248:	009b      	lsls	r3, r3, #2
 801724a:	440b      	add	r3, r1
 801724c:	681b      	ldr	r3, [r3, #0]
 801724e:	4618      	mov	r0, r3
 8017250:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8017252:	68fb      	ldr	r3, [r7, #12]
 8017254:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017258:	2b07      	cmp	r3, #7
 801725a:	d124      	bne.n	80172a6 <RegionEU868TxConfig+0xf2>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 801725c:	2300      	movs	r3, #0
 801725e:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8017260:	4b3b      	ldr	r3, [pc, #236]	; (8017350 <RegionEU868TxConfig+0x19c>)
 8017262:	69dc      	ldr	r4, [r3, #28]
 8017264:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8017268:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801726c:	fb02 f303 	mul.w	r3, r2, r3
 8017270:	461a      	mov	r2, r3
 8017272:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8017276:	7ff8      	ldrb	r0, [r7, #31]
 8017278:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 801727c:	9308      	str	r3, [sp, #32]
 801727e:	2300      	movs	r3, #0
 8017280:	9307      	str	r3, [sp, #28]
 8017282:	2300      	movs	r3, #0
 8017284:	9306      	str	r3, [sp, #24]
 8017286:	2300      	movs	r3, #0
 8017288:	9305      	str	r3, [sp, #20]
 801728a:	2301      	movs	r3, #1
 801728c:	9304      	str	r3, [sp, #16]
 801728e:	2300      	movs	r3, #0
 8017290:	9303      	str	r3, [sp, #12]
 8017292:	2305      	movs	r3, #5
 8017294:	9302      	str	r3, [sp, #8]
 8017296:	2300      	movs	r3, #0
 8017298:	9301      	str	r3, [sp, #4]
 801729a:	9200      	str	r2, [sp, #0]
 801729c:	69bb      	ldr	r3, [r7, #24]
 801729e:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80172a2:	47a0      	blx	r4
 80172a4:	e01d      	b.n	80172e2 <RegionEU868TxConfig+0x12e>
    }
    else
    {
        modem = MODEM_LORA;
 80172a6:	2301      	movs	r3, #1
 80172a8:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 80172aa:	4b29      	ldr	r3, [pc, #164]	; (8017350 <RegionEU868TxConfig+0x19c>)
 80172ac:	69dc      	ldr	r4, [r3, #28]
 80172ae:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80172b2:	f997 1017 	ldrsb.w	r1, [r7, #23]
 80172b6:	7ff8      	ldrb	r0, [r7, #31]
 80172b8:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80172bc:	9208      	str	r2, [sp, #32]
 80172be:	2200      	movs	r2, #0
 80172c0:	9207      	str	r2, [sp, #28]
 80172c2:	2200      	movs	r2, #0
 80172c4:	9206      	str	r2, [sp, #24]
 80172c6:	2200      	movs	r2, #0
 80172c8:	9205      	str	r2, [sp, #20]
 80172ca:	2201      	movs	r2, #1
 80172cc:	9204      	str	r2, [sp, #16]
 80172ce:	2200      	movs	r2, #0
 80172d0:	9203      	str	r2, [sp, #12]
 80172d2:	2208      	movs	r2, #8
 80172d4:	9202      	str	r2, [sp, #8]
 80172d6:	2201      	movs	r2, #1
 80172d8:	9201      	str	r2, [sp, #4]
 80172da:	9300      	str	r3, [sp, #0]
 80172dc:	69bb      	ldr	r3, [r7, #24]
 80172de:	2200      	movs	r2, #0
 80172e0:	47a0      	blx	r4
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 80172e2:	4b19      	ldr	r3, [pc, #100]	; (8017348 <RegionEU868TxConfig+0x194>)
 80172e4:	681a      	ldr	r2, [r3, #0]
 80172e6:	68fb      	ldr	r3, [r7, #12]
 80172e8:	781b      	ldrb	r3, [r3, #0]
 80172ea:	4619      	mov	r1, r3
 80172ec:	460b      	mov	r3, r1
 80172ee:	005b      	lsls	r3, r3, #1
 80172f0:	440b      	add	r3, r1
 80172f2:	009b      	lsls	r3, r3, #2
 80172f4:	4413      	add	r3, r2
 80172f6:	681a      	ldr	r2, [r3, #0]
 80172f8:	68fb      	ldr	r3, [r7, #12]
 80172fa:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80172fe:	4619      	mov	r1, r3
 8017300:	4610      	mov	r0, r2
 8017302:	f7ff fa25 	bl	8016750 <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8017306:	68fb      	ldr	r3, [r7, #12]
 8017308:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801730c:	68fb      	ldr	r3, [r7, #12]
 801730e:	899b      	ldrh	r3, [r3, #12]
 8017310:	4619      	mov	r1, r3
 8017312:	4610      	mov	r0, r2
 8017314:	f7ff faaa 	bl	801686c <GetTimeOnAir>
 8017318:	4602      	mov	r2, r0
 801731a:	687b      	ldr	r3, [r7, #4]
 801731c:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 801731e:	4b0c      	ldr	r3, [pc, #48]	; (8017350 <RegionEU868TxConfig+0x19c>)
 8017320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017322:	68fa      	ldr	r2, [r7, #12]
 8017324:	8992      	ldrh	r2, [r2, #12]
 8017326:	b2d1      	uxtb	r1, r2
 8017328:	7ffa      	ldrb	r2, [r7, #31]
 801732a:	4610      	mov	r0, r2
 801732c:	4798      	blx	r3

    *txPower = txPowerLimited;
 801732e:	68bb      	ldr	r3, [r7, #8]
 8017330:	7f7a      	ldrb	r2, [r7, #29]
 8017332:	701a      	strb	r2, [r3, #0]
    return true;
 8017334:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8017336:	4618      	mov	r0, r3
 8017338:	3724      	adds	r7, #36	; 0x24
 801733a:	46bd      	mov	sp, r7
 801733c:	bd90      	pop	{r4, r7, pc}
 801733e:	bf00      	nop
 8017340:	0801eab4 	.word	0x0801eab4
 8017344:	20001ad4 	.word	0x20001ad4
 8017348:	20001ad0 	.word	0x20001ad0
 801734c:	0801eabc 	.word	0x0801eabc
 8017350:	0801eb70 	.word	0x0801eb70

08017354 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8017354:	b590      	push	{r4, r7, lr}
 8017356:	b093      	sub	sp, #76	; 0x4c
 8017358:	af00      	add	r7, sp, #0
 801735a:	60f8      	str	r0, [r7, #12]
 801735c:	60b9      	str	r1, [r7, #8]
 801735e:	607a      	str	r2, [r7, #4]
 8017360:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8017362:	2307      	movs	r3, #7
 8017364:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8017368:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801736c:	2200      	movs	r2, #0
 801736e:	601a      	str	r2, [r3, #0]
 8017370:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8017372:	2300      	movs	r3, #0
 8017374:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t bytesProcessed = 0;
 8017378:	2300      	movs	r3, #0
 801737a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint16_t chMask = 0;
 801737e:	2300      	movs	r3, #0
 8017380:	877b      	strh	r3, [r7, #58]	; 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8017382:	e085      	b.n	8017490 <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8017384:	68fb      	ldr	r3, [r7, #12]
 8017386:	685a      	ldr	r2, [r3, #4]
 8017388:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801738c:	4413      	add	r3, r2
 801738e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8017392:	4611      	mov	r1, r2
 8017394:	4618      	mov	r0, r3
 8017396:	f7fe fe2f 	bl	8015ff8 <RegionCommonParseLinkAdrReq>
 801739a:	4603      	mov	r3, r0
 801739c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

        if( nextIndex == 0 )
 80173a0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80173a4:	2b00      	cmp	r3, #0
 80173a6:	d07b      	beq.n	80174a0 <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 80173a8:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80173ac:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80173b0:	4413      	add	r3, r2
 80173b2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 80173b6:	2307      	movs	r3, #7
 80173b8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 80173bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80173c0:	877b      	strh	r3, [r7, #58]	; 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 80173c2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80173c6:	2b00      	cmp	r3, #0
 80173c8:	d109      	bne.n	80173de <RegionEU868LinkAdrReq+0x8a>
 80173ca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80173cc:	2b00      	cmp	r3, #0
 80173ce:	d106      	bne.n	80173de <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 80173d0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80173d4:	f023 0301 	bic.w	r3, r3, #1
 80173d8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80173dc:	e058      	b.n	8017490 <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80173de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80173e2:	2b00      	cmp	r3, #0
 80173e4:	d003      	beq.n	80173ee <RegionEU868LinkAdrReq+0x9a>
 80173e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80173ea:	2b05      	cmp	r3, #5
 80173ec:	d903      	bls.n	80173f6 <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 80173ee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80173f2:	2b06      	cmp	r3, #6
 80173f4:	d906      	bls.n	8017404 <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 80173f6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80173fa:	f023 0301 	bic.w	r3, r3, #1
 80173fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8017402:	e045      	b.n	8017490 <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8017404:	2300      	movs	r3, #0
 8017406:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 801740a:	e03d      	b.n	8017488 <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 801740c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8017410:	2b06      	cmp	r3, #6
 8017412:	d118      	bne.n	8017446 <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8017414:	4b5f      	ldr	r3, [pc, #380]	; (8017594 <RegionEU868LinkAdrReq+0x240>)
 8017416:	6819      	ldr	r1, [r3, #0]
 8017418:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 801741c:	4613      	mov	r3, r2
 801741e:	005b      	lsls	r3, r3, #1
 8017420:	4413      	add	r3, r2
 8017422:	009b      	lsls	r3, r3, #2
 8017424:	440b      	add	r3, r1
 8017426:	681b      	ldr	r3, [r3, #0]
 8017428:	2b00      	cmp	r3, #0
 801742a:	d028      	beq.n	801747e <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 801742c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8017430:	2201      	movs	r2, #1
 8017432:	fa02 f303 	lsl.w	r3, r2, r3
 8017436:	b21a      	sxth	r2, r3
 8017438:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801743a:	b21b      	sxth	r3, r3
 801743c:	4313      	orrs	r3, r2
 801743e:	b21b      	sxth	r3, r3
 8017440:	b29b      	uxth	r3, r3
 8017442:	877b      	strh	r3, [r7, #58]	; 0x3a
 8017444:	e01b      	b.n	801747e <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8017446:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017448:	461a      	mov	r2, r3
 801744a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801744e:	fa42 f303 	asr.w	r3, r2, r3
 8017452:	f003 0301 	and.w	r3, r3, #1
 8017456:	2b00      	cmp	r3, #0
 8017458:	d011      	beq.n	801747e <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 801745a:	4b4e      	ldr	r3, [pc, #312]	; (8017594 <RegionEU868LinkAdrReq+0x240>)
 801745c:	6819      	ldr	r1, [r3, #0]
 801745e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8017462:	4613      	mov	r3, r2
 8017464:	005b      	lsls	r3, r3, #1
 8017466:	4413      	add	r3, r2
 8017468:	009b      	lsls	r3, r3, #2
 801746a:	440b      	add	r3, r1
 801746c:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801746e:	2b00      	cmp	r3, #0
 8017470:	d105      	bne.n	801747e <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8017472:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8017476:	f023 0301 	bic.w	r3, r3, #1
 801747a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 801747e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8017482:	3301      	adds	r3, #1
 8017484:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8017488:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801748c:	2b0f      	cmp	r3, #15
 801748e:	d9bd      	bls.n	801740c <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8017490:	68fb      	ldr	r3, [r7, #12]
 8017492:	7a1b      	ldrb	r3, [r3, #8]
 8017494:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8017498:	429a      	cmp	r2, r3
 801749a:	f4ff af73 	bcc.w	8017384 <RegionEU868LinkAdrReq+0x30>
 801749e:	e000      	b.n	80174a2 <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 80174a0:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 80174a2:	2302      	movs	r3, #2
 80174a4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 80174a8:	68fb      	ldr	r3, [r7, #12]
 80174aa:	7a5b      	ldrb	r3, [r3, #9]
 80174ac:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 80174b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80174b4:	4618      	mov	r0, r3
 80174b6:	f7ff fa29 	bl	801690c <RegionEU868GetPhyParam>
 80174ba:	4603      	mov	r3, r0
 80174bc:	633b      	str	r3, [r7, #48]	; 0x30

    linkAdrVerifyParams.Status = status;
 80174be:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80174c2:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 80174c4:	68fb      	ldr	r3, [r7, #12]
 80174c6:	7a9b      	ldrb	r3, [r3, #10]
 80174c8:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 80174ca:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 80174ce:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 80174d0:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 80174d4:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 80174d6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80174da:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 80174dc:	68fb      	ldr	r3, [r7, #12]
 80174de:	f993 300b 	ldrsb.w	r3, [r3, #11]
 80174e2:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 80174e4:	68fb      	ldr	r3, [r7, #12]
 80174e6:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80174ea:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 80174ec:	68fb      	ldr	r3, [r7, #12]
 80174ee:	7b5b      	ldrb	r3, [r3, #13]
 80174f0:	b25b      	sxtb	r3, r3
 80174f2:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 80174f4:	2310      	movs	r3, #16
 80174f6:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 80174f8:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 80174fc:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 80174fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017500:	b25b      	sxtb	r3, r3
 8017502:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 8017506:	2307      	movs	r3, #7
 8017508:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 801750c:	4b21      	ldr	r3, [pc, #132]	; (8017594 <RegionEU868LinkAdrReq+0x240>)
 801750e:	681b      	ldr	r3, [r3, #0]
 8017510:	62bb      	str	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8017512:	2307      	movs	r3, #7
 8017514:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8017518:	2300      	movs	r3, #0
 801751a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 801751e:	68fb      	ldr	r3, [r7, #12]
 8017520:	681b      	ldr	r3, [r3, #0]
 8017522:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8017524:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8017528:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801752c:	1c9a      	adds	r2, r3, #2
 801752e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8017532:	1c59      	adds	r1, r3, #1
 8017534:	f107 0010 	add.w	r0, r7, #16
 8017538:	4623      	mov	r3, r4
 801753a:	f7fe fdae 	bl	801609a <RegionCommonLinkAdrReqVerifyParams>
 801753e:	4603      	mov	r3, r0
 8017540:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8017544:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8017548:	2b07      	cmp	r3, #7
 801754a:	d10d      	bne.n	8017568 <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 801754c:	4b11      	ldr	r3, [pc, #68]	; (8017594 <RegionEU868LinkAdrReq+0x240>)
 801754e:	681b      	ldr	r3, [r3, #0]
 8017550:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8017554:	220c      	movs	r2, #12
 8017556:	2100      	movs	r1, #0
 8017558:	4618      	mov	r0, r3
 801755a:	f001 fd31 	bl	8018fc0 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 801755e:	4b0d      	ldr	r3, [pc, #52]	; (8017594 <RegionEU868LinkAdrReq+0x240>)
 8017560:	681b      	ldr	r3, [r3, #0]
 8017562:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017564:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8017568:	f997 203d 	ldrsb.w	r2, [r7, #61]	; 0x3d
 801756c:	68bb      	ldr	r3, [r7, #8]
 801756e:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8017570:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8017578:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801757c:	683b      	ldr	r3, [r7, #0]
 801757e:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8017580:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017582:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8017586:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 8017588:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 801758c:	4618      	mov	r0, r3
 801758e:	374c      	adds	r7, #76	; 0x4c
 8017590:	46bd      	mov	sp, r7
 8017592:	bd90      	pop	{r4, r7, pc}
 8017594:	20001ad0 	.word	0x20001ad0

08017598 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8017598:	b580      	push	{r7, lr}
 801759a:	b084      	sub	sp, #16
 801759c:	af00      	add	r7, sp, #0
 801759e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 80175a0:	2307      	movs	r3, #7
 80175a2:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 80175a4:	2300      	movs	r3, #0
 80175a6:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 80175a8:	687b      	ldr	r3, [r7, #4]
 80175aa:	685b      	ldr	r3, [r3, #4]
 80175ac:	f107 020e 	add.w	r2, r7, #14
 80175b0:	4611      	mov	r1, r2
 80175b2:	4618      	mov	r0, r3
 80175b4:	f7ff f8e4 	bl	8016780 <VerifyRfFreq>
 80175b8:	4603      	mov	r3, r0
 80175ba:	f083 0301 	eor.w	r3, r3, #1
 80175be:	b2db      	uxtb	r3, r3
 80175c0:	2b00      	cmp	r3, #0
 80175c2:	d003      	beq.n	80175cc <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 80175c4:	7bfb      	ldrb	r3, [r7, #15]
 80175c6:	f023 0301 	bic.w	r3, r3, #1
 80175ca:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 80175cc:	687b      	ldr	r3, [r7, #4]
 80175ce:	f993 3000 	ldrsb.w	r3, [r3]
 80175d2:	2207      	movs	r2, #7
 80175d4:	2100      	movs	r1, #0
 80175d6:	4618      	mov	r0, r3
 80175d8:	f7fe fb4d 	bl	8015c76 <RegionCommonValueInRange>
 80175dc:	4603      	mov	r3, r0
 80175de:	2b00      	cmp	r3, #0
 80175e0:	d103      	bne.n	80175ea <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 80175e2:	7bfb      	ldrb	r3, [r7, #15]
 80175e4:	f023 0302 	bic.w	r3, r3, #2
 80175e8:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 80175ea:	687b      	ldr	r3, [r7, #4]
 80175ec:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80175f0:	2205      	movs	r2, #5
 80175f2:	2100      	movs	r1, #0
 80175f4:	4618      	mov	r0, r3
 80175f6:	f7fe fb3e 	bl	8015c76 <RegionCommonValueInRange>
 80175fa:	4603      	mov	r3, r0
 80175fc:	2b00      	cmp	r3, #0
 80175fe:	d103      	bne.n	8017608 <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8017600:	7bfb      	ldrb	r3, [r7, #15]
 8017602:	f023 0304 	bic.w	r3, r3, #4
 8017606:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 8017608:	7bfb      	ldrb	r3, [r7, #15]
}
 801760a:	4618      	mov	r0, r3
 801760c:	3710      	adds	r7, #16
 801760e:	46bd      	mov	sp, r7
 8017610:	bd80      	pop	{r7, pc}
	...

08017614 <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8017614:	b580      	push	{r7, lr}
 8017616:	b086      	sub	sp, #24
 8017618:	af00      	add	r7, sp, #0
 801761a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 801761c:	2303      	movs	r3, #3
 801761e:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	681b      	ldr	r3, [r3, #0]
 8017624:	681b      	ldr	r3, [r3, #0]
 8017626:	2b00      	cmp	r3, #0
 8017628:	d114      	bne.n	8017654 <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 801762a:	687b      	ldr	r3, [r7, #4]
 801762c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8017630:	b2db      	uxtb	r3, r3
 8017632:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8017634:	f107 0308 	add.w	r3, r7, #8
 8017638:	4618      	mov	r0, r3
 801763a:	f000 f9ff 	bl	8017a3c <RegionEU868ChannelsRemove>
 801763e:	4603      	mov	r3, r0
 8017640:	f083 0301 	eor.w	r3, r3, #1
 8017644:	b2db      	uxtb	r3, r3
 8017646:	2b00      	cmp	r3, #0
 8017648:	d03b      	beq.n	80176c2 <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 801764a:	7dfb      	ldrb	r3, [r7, #23]
 801764c:	f023 0303 	bic.w	r3, r3, #3
 8017650:	75fb      	strb	r3, [r7, #23]
 8017652:	e036      	b.n	80176c2 <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8017654:	687b      	ldr	r3, [r7, #4]
 8017656:	681b      	ldr	r3, [r3, #0]
 8017658:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 801765a:	687b      	ldr	r3, [r7, #4]
 801765c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8017660:	b2db      	uxtb	r3, r3
 8017662:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8017664:	f107 030c 	add.w	r3, r7, #12
 8017668:	4618      	mov	r0, r3
 801766a:	f000 f945 	bl	80178f8 <RegionEU868ChannelAdd>
 801766e:	4603      	mov	r3, r0
 8017670:	2b06      	cmp	r3, #6
 8017672:	d820      	bhi.n	80176b6 <RegionEU868NewChannelReq+0xa2>
 8017674:	a201      	add	r2, pc, #4	; (adr r2, 801767c <RegionEU868NewChannelReq+0x68>)
 8017676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801767a:	bf00      	nop
 801767c:	080176c1 	.word	0x080176c1
 8017680:	080176b7 	.word	0x080176b7
 8017684:	080176b7 	.word	0x080176b7
 8017688:	080176b7 	.word	0x080176b7
 801768c:	08017699 	.word	0x08017699
 8017690:	080176a3 	.word	0x080176a3
 8017694:	080176ad 	.word	0x080176ad
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8017698:	7dfb      	ldrb	r3, [r7, #23]
 801769a:	f023 0301 	bic.w	r3, r3, #1
 801769e:	75fb      	strb	r3, [r7, #23]
                break;
 80176a0:	e00f      	b.n	80176c2 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 80176a2:	7dfb      	ldrb	r3, [r7, #23]
 80176a4:	f023 0302 	bic.w	r3, r3, #2
 80176a8:	75fb      	strb	r3, [r7, #23]
                break;
 80176aa:	e00a      	b.n	80176c2 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 80176ac:	7dfb      	ldrb	r3, [r7, #23]
 80176ae:	f023 0303 	bic.w	r3, r3, #3
 80176b2:	75fb      	strb	r3, [r7, #23]
                break;
 80176b4:	e005      	b.n	80176c2 <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 80176b6:	7dfb      	ldrb	r3, [r7, #23]
 80176b8:	f023 0303 	bic.w	r3, r3, #3
 80176bc:	75fb      	strb	r3, [r7, #23]
                break;
 80176be:	e000      	b.n	80176c2 <RegionEU868NewChannelReq+0xae>
                break;
 80176c0:	bf00      	nop
            }
        }
    }

    return status;
 80176c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80176c6:	4618      	mov	r0, r3
 80176c8:	3718      	adds	r7, #24
 80176ca:	46bd      	mov	sp, r7
 80176cc:	bd80      	pop	{r7, pc}
 80176ce:	bf00      	nop

080176d0 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 80176d0:	b480      	push	{r7}
 80176d2:	b083      	sub	sp, #12
 80176d4:	af00      	add	r7, sp, #0
 80176d6:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 80176d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80176dc:	4618      	mov	r0, r3
 80176de:	370c      	adds	r7, #12
 80176e0:	46bd      	mov	sp, r7
 80176e2:	bc80      	pop	{r7}
 80176e4:	4770      	bx	lr
	...

080176e8 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 80176e8:	b580      	push	{r7, lr}
 80176ea:	b084      	sub	sp, #16
 80176ec:	af00      	add	r7, sp, #0
 80176ee:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80176f0:	2303      	movs	r3, #3
 80176f2:	73fb      	strb	r3, [r7, #15]

#if defined( REGION_EU868 )
    uint8_t band = 0;
 80176f4:	2300      	movs	r3, #0
 80176f6:	73bb      	strb	r3, [r7, #14]

    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 80176f8:	687b      	ldr	r3, [r7, #4]
 80176fa:	781b      	ldrb	r3, [r3, #0]
 80176fc:	2b0f      	cmp	r3, #15
 80176fe:	d901      	bls.n	8017704 <RegionEU868DlChannelReq+0x1c>
    {
        return 0;
 8017700:	2300      	movs	r3, #0
 8017702:	e035      	b.n	8017770 <RegionEU868DlChannelReq+0x88>
    }

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8017704:	687b      	ldr	r3, [r7, #4]
 8017706:	685b      	ldr	r3, [r3, #4]
 8017708:	f107 020e 	add.w	r2, r7, #14
 801770c:	4611      	mov	r1, r2
 801770e:	4618      	mov	r0, r3
 8017710:	f7ff f836 	bl	8016780 <VerifyRfFreq>
 8017714:	4603      	mov	r3, r0
 8017716:	f083 0301 	eor.w	r3, r3, #1
 801771a:	b2db      	uxtb	r3, r3
 801771c:	2b00      	cmp	r3, #0
 801771e:	d003      	beq.n	8017728 <RegionEU868DlChannelReq+0x40>
    {
        status &= 0xFE;
 8017720:	7bfb      	ldrb	r3, [r7, #15]
 8017722:	f023 0301 	bic.w	r3, r3, #1
 8017726:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8017728:	4b13      	ldr	r3, [pc, #76]	; (8017778 <RegionEU868DlChannelReq+0x90>)
 801772a:	681a      	ldr	r2, [r3, #0]
 801772c:	687b      	ldr	r3, [r7, #4]
 801772e:	781b      	ldrb	r3, [r3, #0]
 8017730:	4619      	mov	r1, r3
 8017732:	460b      	mov	r3, r1
 8017734:	005b      	lsls	r3, r3, #1
 8017736:	440b      	add	r3, r1
 8017738:	009b      	lsls	r3, r3, #2
 801773a:	4413      	add	r3, r2
 801773c:	681b      	ldr	r3, [r3, #0]
 801773e:	2b00      	cmp	r3, #0
 8017740:	d103      	bne.n	801774a <RegionEU868DlChannelReq+0x62>
    {
        status &= 0xFD;
 8017742:	7bfb      	ldrb	r3, [r7, #15]
 8017744:	f023 0302 	bic.w	r3, r3, #2
 8017748:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 801774a:	7bfb      	ldrb	r3, [r7, #15]
 801774c:	2b03      	cmp	r3, #3
 801774e:	d10d      	bne.n	801776c <RegionEU868DlChannelReq+0x84>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8017750:	4b09      	ldr	r3, [pc, #36]	; (8017778 <RegionEU868DlChannelReq+0x90>)
 8017752:	6819      	ldr	r1, [r3, #0]
 8017754:	687b      	ldr	r3, [r7, #4]
 8017756:	781b      	ldrb	r3, [r3, #0]
 8017758:	4618      	mov	r0, r3
 801775a:	687b      	ldr	r3, [r7, #4]
 801775c:	685a      	ldr	r2, [r3, #4]
 801775e:	4603      	mov	r3, r0
 8017760:	005b      	lsls	r3, r3, #1
 8017762:	4403      	add	r3, r0
 8017764:	009b      	lsls	r3, r3, #2
 8017766:	440b      	add	r3, r1
 8017768:	3304      	adds	r3, #4
 801776a:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 801776c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017770:	4618      	mov	r0, r3
 8017772:	3710      	adds	r7, #16
 8017774:	46bd      	mov	sp, r7
 8017776:	bd80      	pop	{r7, pc}
 8017778:	20001ad0 	.word	0x20001ad0

0801777c <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 801777c:	b480      	push	{r7}
 801777e:	b083      	sub	sp, #12
 8017780:	af00      	add	r7, sp, #0
 8017782:	4603      	mov	r3, r0
 8017784:	460a      	mov	r2, r1
 8017786:	71fb      	strb	r3, [r7, #7]
 8017788:	4613      	mov	r3, r2
 801778a:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 801778c:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 8017790:	4618      	mov	r0, r3
 8017792:	370c      	adds	r7, #12
 8017794:	46bd      	mov	sp, r7
 8017796:	bc80      	pop	{r7}
 8017798:	4770      	bx	lr
	...

0801779c <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801779c:	b580      	push	{r7, lr}
 801779e:	b09a      	sub	sp, #104	; 0x68
 80177a0:	af02      	add	r7, sp, #8
 80177a2:	60f8      	str	r0, [r7, #12]
 80177a4:	60b9      	str	r1, [r7, #8]
 80177a6:	607a      	str	r2, [r7, #4]
 80177a8:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 80177aa:	2300      	movs	r3, #0
 80177ac:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 80177b0:	2300      	movs	r3, #0
 80177b2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 80177b6:	2300      	movs	r3, #0
 80177b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80177ba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80177be:	2200      	movs	r2, #0
 80177c0:	601a      	str	r2, [r3, #0]
 80177c2:	605a      	str	r2, [r3, #4]
 80177c4:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80177c6:	230c      	movs	r3, #12
 80177c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 80177cc:	2307      	movs	r3, #7
 80177ce:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 80177d0:	4b47      	ldr	r3, [pc, #284]	; (80178f0 <RegionEU868NextChannel+0x154>)
 80177d2:	681b      	ldr	r3, [r3, #0]
 80177d4:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80177d8:	2201      	movs	r2, #1
 80177da:	2100      	movs	r1, #0
 80177dc:	4618      	mov	r0, r3
 80177de:	f7fe fa9b 	bl	8015d18 <RegionCommonCountChannels>
 80177e2:	4603      	mov	r3, r0
 80177e4:	2b00      	cmp	r3, #0
 80177e6:	d10a      	bne.n	80177fe <RegionEU868NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80177e8:	4b41      	ldr	r3, [pc, #260]	; (80178f0 <RegionEU868NextChannel+0x154>)
 80177ea:	681b      	ldr	r3, [r3, #0]
 80177ec:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 80177f0:	4b3f      	ldr	r3, [pc, #252]	; (80178f0 <RegionEU868NextChannel+0x154>)
 80177f2:	681b      	ldr	r3, [r3, #0]
 80177f4:	f042 0207 	orr.w	r2, r2, #7
 80177f8:	b292      	uxth	r2, r2
 80177fa:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 80177fe:	68fb      	ldr	r3, [r7, #12]
 8017800:	7a5b      	ldrb	r3, [r3, #9]
 8017802:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8017804:	68fb      	ldr	r3, [r7, #12]
 8017806:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801780a:	b2db      	uxtb	r3, r3
 801780c:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801780e:	4b38      	ldr	r3, [pc, #224]	; (80178f0 <RegionEU868NextChannel+0x154>)
 8017810:	681b      	ldr	r3, [r3, #0]
 8017812:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8017816:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8017818:	4b35      	ldr	r3, [pc, #212]	; (80178f0 <RegionEU868NextChannel+0x154>)
 801781a:	681b      	ldr	r3, [r3, #0]
 801781c:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 801781e:	4b35      	ldr	r3, [pc, #212]	; (80178f4 <RegionEU868NextChannel+0x158>)
 8017820:	681b      	ldr	r3, [r3, #0]
 8017822:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 8017824:	2310      	movs	r3, #16
 8017826:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 8017828:	f107 0312 	add.w	r3, r7, #18
 801782c:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 801782e:	68fb      	ldr	r3, [r7, #12]
 8017830:	681b      	ldr	r3, [r3, #0]
 8017832:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8017834:	68fb      	ldr	r3, [r7, #12]
 8017836:	685b      	ldr	r3, [r3, #4]
 8017838:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 801783a:	68fb      	ldr	r3, [r7, #12]
 801783c:	7a9b      	ldrb	r3, [r3, #10]
 801783e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 8017842:	2306      	movs	r3, #6
 8017844:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8017848:	68fa      	ldr	r2, [r7, #12]
 801784a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801784e:	320c      	adds	r2, #12
 8017850:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017854:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8017858:	68fb      	ldr	r3, [r7, #12]
 801785a:	7d1b      	ldrb	r3, [r3, #20]
 801785c:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8017860:	68fb      	ldr	r3, [r7, #12]
 8017862:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8017866:	68fb      	ldr	r3, [r7, #12]
 8017868:	8adb      	ldrh	r3, [r3, #22]
 801786a:	4619      	mov	r1, r3
 801786c:	4610      	mov	r0, r2
 801786e:	f7fe fffd 	bl	801686c <GetTimeOnAir>
 8017872:	4603      	mov	r3, r0
 8017874:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8017876:	f107 0314 	add.w	r3, r7, #20
 801787a:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 801787c:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 8017880:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8017884:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8017888:	687b      	ldr	r3, [r7, #4]
 801788a:	9301      	str	r3, [sp, #4]
 801788c:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 8017890:	9300      	str	r3, [sp, #0]
 8017892:	460b      	mov	r3, r1
 8017894:	6839      	ldr	r1, [r7, #0]
 8017896:	f7fe fe56 	bl	8016546 <RegionCommonIdentifyChannels>
 801789a:	4603      	mov	r3, r0
 801789c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 80178a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80178a4:	2b00      	cmp	r3, #0
 80178a6:	d10e      	bne.n	80178c6 <RegionEU868NextChannel+0x12a>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 80178a8:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80178ac:	3b01      	subs	r3, #1
 80178ae:	4619      	mov	r1, r3
 80178b0:	2000      	movs	r0, #0
 80178b2:	f001 fb33 	bl	8018f1c <randr>
 80178b6:	4603      	mov	r3, r0
 80178b8:	3360      	adds	r3, #96	; 0x60
 80178ba:	443b      	add	r3, r7
 80178bc:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 80178c0:	68bb      	ldr	r3, [r7, #8]
 80178c2:	701a      	strb	r2, [r3, #0]
 80178c4:	e00e      	b.n	80178e4 <RegionEU868NextChannel+0x148>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 80178c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80178ca:	2b0c      	cmp	r3, #12
 80178cc:	d10a      	bne.n	80178e4 <RegionEU868NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80178ce:	4b08      	ldr	r3, [pc, #32]	; (80178f0 <RegionEU868NextChannel+0x154>)
 80178d0:	681b      	ldr	r3, [r3, #0]
 80178d2:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 80178d6:	4b06      	ldr	r3, [pc, #24]	; (80178f0 <RegionEU868NextChannel+0x154>)
 80178d8:	681b      	ldr	r3, [r3, #0]
 80178da:	f042 0207 	orr.w	r2, r2, #7
 80178de:	b292      	uxth	r2, r2
 80178e0:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }
    return status;
 80178e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 80178e8:	4618      	mov	r0, r3
 80178ea:	3760      	adds	r7, #96	; 0x60
 80178ec:	46bd      	mov	sp, r7
 80178ee:	bd80      	pop	{r7, pc}
 80178f0:	20001ad0 	.word	0x20001ad0
 80178f4:	20001ad4 	.word	0x20001ad4

080178f8 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 80178f8:	b580      	push	{r7, lr}
 80178fa:	b084      	sub	sp, #16
 80178fc:	af00      	add	r7, sp, #0
 80178fe:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8017900:	2300      	movs	r3, #0
 8017902:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 8017904:	2300      	movs	r3, #0
 8017906:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 8017908:	2300      	movs	r3, #0
 801790a:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 801790c:	687b      	ldr	r3, [r7, #4]
 801790e:	791b      	ldrb	r3, [r3, #4]
 8017910:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8017912:	7b7b      	ldrb	r3, [r7, #13]
 8017914:	2b02      	cmp	r3, #2
 8017916:	d801      	bhi.n	801791c <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8017918:	2306      	movs	r3, #6
 801791a:	e089      	b.n	8017a30 <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 801791c:	7b7b      	ldrb	r3, [r7, #13]
 801791e:	2b0f      	cmp	r3, #15
 8017920:	d901      	bls.n	8017926 <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8017922:	2303      	movs	r3, #3
 8017924:	e084      	b.n	8017a30 <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	681b      	ldr	r3, [r3, #0]
 801792a:	7a1b      	ldrb	r3, [r3, #8]
 801792c:	f343 0303 	sbfx	r3, r3, #0, #4
 8017930:	b25b      	sxtb	r3, r3
 8017932:	2207      	movs	r2, #7
 8017934:	2100      	movs	r1, #0
 8017936:	4618      	mov	r0, r3
 8017938:	f7fe f99d 	bl	8015c76 <RegionCommonValueInRange>
 801793c:	4603      	mov	r3, r0
 801793e:	2b00      	cmp	r3, #0
 8017940:	d101      	bne.n	8017946 <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 8017942:	2301      	movs	r3, #1
 8017944:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8017946:	687b      	ldr	r3, [r7, #4]
 8017948:	681b      	ldr	r3, [r3, #0]
 801794a:	7a1b      	ldrb	r3, [r3, #8]
 801794c:	f343 1303 	sbfx	r3, r3, #4, #4
 8017950:	b25b      	sxtb	r3, r3
 8017952:	2207      	movs	r2, #7
 8017954:	2100      	movs	r1, #0
 8017956:	4618      	mov	r0, r3
 8017958:	f7fe f98d 	bl	8015c76 <RegionCommonValueInRange>
 801795c:	4603      	mov	r3, r0
 801795e:	2b00      	cmp	r3, #0
 8017960:	d101      	bne.n	8017966 <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 8017962:	2301      	movs	r3, #1
 8017964:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8017966:	687b      	ldr	r3, [r7, #4]
 8017968:	681b      	ldr	r3, [r3, #0]
 801796a:	7a1b      	ldrb	r3, [r3, #8]
 801796c:	f343 0303 	sbfx	r3, r3, #0, #4
 8017970:	b25a      	sxtb	r2, r3
 8017972:	687b      	ldr	r3, [r7, #4]
 8017974:	681b      	ldr	r3, [r3, #0]
 8017976:	7a1b      	ldrb	r3, [r3, #8]
 8017978:	f343 1303 	sbfx	r3, r3, #4, #4
 801797c:	b25b      	sxtb	r3, r3
 801797e:	429a      	cmp	r2, r3
 8017980:	dd01      	ble.n	8017986 <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 8017982:	2301      	movs	r3, #1
 8017984:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 8017986:	7bbb      	ldrb	r3, [r7, #14]
 8017988:	f083 0301 	eor.w	r3, r3, #1
 801798c:	b2db      	uxtb	r3, r3
 801798e:	2b00      	cmp	r3, #0
 8017990:	d010      	beq.n	80179b4 <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	681b      	ldr	r3, [r3, #0]
 8017996:	681b      	ldr	r3, [r3, #0]
 8017998:	f107 020c 	add.w	r2, r7, #12
 801799c:	4611      	mov	r1, r2
 801799e:	4618      	mov	r0, r3
 80179a0:	f7fe feee 	bl	8016780 <VerifyRfFreq>
 80179a4:	4603      	mov	r3, r0
 80179a6:	f083 0301 	eor.w	r3, r3, #1
 80179aa:	b2db      	uxtb	r3, r3
 80179ac:	2b00      	cmp	r3, #0
 80179ae:	d001      	beq.n	80179b4 <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 80179b0:	2301      	movs	r3, #1
 80179b2:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 80179b4:	7bfb      	ldrb	r3, [r7, #15]
 80179b6:	2b00      	cmp	r3, #0
 80179b8:	d004      	beq.n	80179c4 <RegionEU868ChannelAdd+0xcc>
 80179ba:	7bbb      	ldrb	r3, [r7, #14]
 80179bc:	2b00      	cmp	r3, #0
 80179be:	d001      	beq.n	80179c4 <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80179c0:	2306      	movs	r3, #6
 80179c2:	e035      	b.n	8017a30 <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 80179c4:	7bfb      	ldrb	r3, [r7, #15]
 80179c6:	2b00      	cmp	r3, #0
 80179c8:	d001      	beq.n	80179ce <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 80179ca:	2305      	movs	r3, #5
 80179cc:	e030      	b.n	8017a30 <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 80179ce:	7bbb      	ldrb	r3, [r7, #14]
 80179d0:	2b00      	cmp	r3, #0
 80179d2:	d001      	beq.n	80179d8 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 80179d4:	2304      	movs	r3, #4
 80179d6:	e02b      	b.n	8017a30 <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 80179d8:	4b17      	ldr	r3, [pc, #92]	; (8017a38 <RegionEU868ChannelAdd+0x140>)
 80179da:	6819      	ldr	r1, [r3, #0]
 80179dc:	7b7a      	ldrb	r2, [r7, #13]
 80179de:	4613      	mov	r3, r2
 80179e0:	005b      	lsls	r3, r3, #1
 80179e2:	4413      	add	r3, r2
 80179e4:	009b      	lsls	r3, r3, #2
 80179e6:	18c8      	adds	r0, r1, r3
 80179e8:	687b      	ldr	r3, [r7, #4]
 80179ea:	681b      	ldr	r3, [r3, #0]
 80179ec:	220c      	movs	r2, #12
 80179ee:	4619      	mov	r1, r3
 80179f0:	f001 faab 	bl	8018f4a <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 80179f4:	4b10      	ldr	r3, [pc, #64]	; (8017a38 <RegionEU868ChannelAdd+0x140>)
 80179f6:	6819      	ldr	r1, [r3, #0]
 80179f8:	7b7a      	ldrb	r2, [r7, #13]
 80179fa:	7b38      	ldrb	r0, [r7, #12]
 80179fc:	4613      	mov	r3, r2
 80179fe:	005b      	lsls	r3, r3, #1
 8017a00:	4413      	add	r3, r2
 8017a02:	009b      	lsls	r3, r3, #2
 8017a04:	440b      	add	r3, r1
 8017a06:	3309      	adds	r3, #9
 8017a08:	4602      	mov	r2, r0
 8017a0a:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8017a0c:	4b0a      	ldr	r3, [pc, #40]	; (8017a38 <RegionEU868ChannelAdd+0x140>)
 8017a0e:	681b      	ldr	r3, [r3, #0]
 8017a10:	f8b3 3360 	ldrh.w	r3, [r3, #864]	; 0x360
 8017a14:	b21a      	sxth	r2, r3
 8017a16:	7b7b      	ldrb	r3, [r7, #13]
 8017a18:	2101      	movs	r1, #1
 8017a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8017a1e:	b21b      	sxth	r3, r3
 8017a20:	4313      	orrs	r3, r2
 8017a22:	b21a      	sxth	r2, r3
 8017a24:	4b04      	ldr	r3, [pc, #16]	; (8017a38 <RegionEU868ChannelAdd+0x140>)
 8017a26:	681b      	ldr	r3, [r3, #0]
 8017a28:	b292      	uxth	r2, r2
 8017a2a:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    return LORAMAC_STATUS_OK;
 8017a2e:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8017a30:	4618      	mov	r0, r3
 8017a32:	3710      	adds	r7, #16
 8017a34:	46bd      	mov	sp, r7
 8017a36:	bd80      	pop	{r7, pc}
 8017a38:	20001ad0 	.word	0x20001ad0

08017a3c <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8017a3c:	b580      	push	{r7, lr}
 8017a3e:	b086      	sub	sp, #24
 8017a40:	af00      	add	r7, sp, #0
 8017a42:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 8017a44:	687b      	ldr	r3, [r7, #4]
 8017a46:	781b      	ldrb	r3, [r3, #0]
 8017a48:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8017a4a:	7dfb      	ldrb	r3, [r7, #23]
 8017a4c:	2b02      	cmp	r3, #2
 8017a4e:	d801      	bhi.n	8017a54 <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 8017a50:	2300      	movs	r3, #0
 8017a52:	e016      	b.n	8017a82 <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8017a54:	4b0d      	ldr	r3, [pc, #52]	; (8017a8c <RegionEU868ChannelsRemove+0x50>)
 8017a56:	6819      	ldr	r1, [r3, #0]
 8017a58:	7dfa      	ldrb	r2, [r7, #23]
 8017a5a:	4613      	mov	r3, r2
 8017a5c:	005b      	lsls	r3, r3, #1
 8017a5e:	4413      	add	r3, r2
 8017a60:	009b      	lsls	r3, r3, #2
 8017a62:	440b      	add	r3, r1
 8017a64:	461a      	mov	r2, r3
 8017a66:	2300      	movs	r3, #0
 8017a68:	6013      	str	r3, [r2, #0]
 8017a6a:	6053      	str	r3, [r2, #4]
 8017a6c:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8017a6e:	4b07      	ldr	r3, [pc, #28]	; (8017a8c <RegionEU868ChannelsRemove+0x50>)
 8017a70:	681b      	ldr	r3, [r3, #0]
 8017a72:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8017a76:	7df9      	ldrb	r1, [r7, #23]
 8017a78:	2210      	movs	r2, #16
 8017a7a:	4618      	mov	r0, r3
 8017a7c:	f7fe f918 	bl	8015cb0 <RegionCommonChanDisable>
 8017a80:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 8017a82:	4618      	mov	r0, r3
 8017a84:	3718      	adds	r7, #24
 8017a86:	46bd      	mov	sp, r7
 8017a88:	bd80      	pop	{r7, pc}
 8017a8a:	bf00      	nop
 8017a8c:	20001ad0 	.word	0x20001ad0

08017a90 <RegionEU868ApplyDrOffset>:
#endif /* REGION_EU868 */
}
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8017a90:	b480      	push	{r7}
 8017a92:	b085      	sub	sp, #20
 8017a94:	af00      	add	r7, sp, #0
 8017a96:	4603      	mov	r3, r0
 8017a98:	71fb      	strb	r3, [r7, #7]
 8017a9a:	460b      	mov	r3, r1
 8017a9c:	71bb      	strb	r3, [r7, #6]
 8017a9e:	4613      	mov	r3, r2
 8017aa0:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 8017aa2:	79ba      	ldrb	r2, [r7, #6]
 8017aa4:	797b      	ldrb	r3, [r7, #5]
 8017aa6:	1ad3      	subs	r3, r2, r3
 8017aa8:	b2db      	uxtb	r3, r3
 8017aaa:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8017aac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017ab0:	2b00      	cmp	r3, #0
 8017ab2:	da01      	bge.n	8017ab8 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 8017ab4:	2300      	movs	r3, #0
 8017ab6:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8017ab8:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 8017aba:	4618      	mov	r0, r3
 8017abc:	3714      	adds	r7, #20
 8017abe:	46bd      	mov	sp, r7
 8017ac0:	bc80      	pop	{r7}
 8017ac2:	4770      	bx	lr

08017ac4 <LimitTxPower>:
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
static Band_t* RegionBands;
#endif /* REGION_VERSION */

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 8017ac4:	b580      	push	{r7, lr}
 8017ac6:	b084      	sub	sp, #16
 8017ac8:	af00      	add	r7, sp, #0
 8017aca:	603b      	str	r3, [r7, #0]
 8017acc:	4603      	mov	r3, r0
 8017ace:	71fb      	strb	r3, [r7, #7]
 8017ad0:	460b      	mov	r3, r1
 8017ad2:	71bb      	strb	r3, [r7, #6]
 8017ad4:	4613      	mov	r3, r2
 8017ad6:	717b      	strb	r3, [r7, #5]
    int8_t txPowerResult = txPower;
 8017ad8:	79fb      	ldrb	r3, [r7, #7]
 8017ada:	73fb      	strb	r3, [r7, #15]

    // Limit tx power to the band max
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 8017adc:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8017ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017ae4:	4611      	mov	r1, r2
 8017ae6:	4618      	mov	r0, r3
 8017ae8:	f7fe fdcd 	bl	8016686 <RegionCommonLimitTxPower>
 8017aec:	4603      	mov	r3, r0
 8017aee:	73fb      	strb	r3, [r7, #15]

    if( datarate == DR_4 )
 8017af0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8017af4:	2b04      	cmp	r3, #4
 8017af6:	d106      	bne.n	8017b06 <LimitTxPower+0x42>
    {// Limit tx power to max 26dBm
        txPowerResult = MAX( txPower, TX_POWER_2 );
 8017af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017afc:	2b02      	cmp	r3, #2
 8017afe:	bfb8      	it	lt
 8017b00:	2302      	movlt	r3, #2
 8017b02:	73fb      	strb	r3, [r7, #15]
 8017b04:	e00d      	b.n	8017b22 <LimitTxPower+0x5e>
    }
    else
    {
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 8017b06:	2204      	movs	r2, #4
 8017b08:	2100      	movs	r1, #0
 8017b0a:	6838      	ldr	r0, [r7, #0]
 8017b0c:	f7fe f904 	bl	8015d18 <RegionCommonCountChannels>
 8017b10:	4603      	mov	r3, r0
 8017b12:	2b31      	cmp	r3, #49	; 0x31
 8017b14:	d805      	bhi.n	8017b22 <LimitTxPower+0x5e>
        {// Limit tx power to max 21dBm
            txPowerResult = MAX( txPower, TX_POWER_5 );
 8017b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017b1a:	2b05      	cmp	r3, #5
 8017b1c:	bfb8      	it	lt
 8017b1e:	2305      	movlt	r3, #5
 8017b20:	73fb      	strb	r3, [r7, #15]
        }
    }
    return txPowerResult;
 8017b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017b26:	4618      	mov	r0, r3
 8017b28:	3710      	adds	r7, #16
 8017b2a:	46bd      	mov	sp, r7
 8017b2c:	bd80      	pop	{r7, pc}
	...

08017b30 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 8017b30:	b580      	push	{r7, lr}
 8017b32:	b082      	sub	sp, #8
 8017b34:	af00      	add	r7, sp, #0
 8017b36:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8017b38:	4b18      	ldr	r3, [pc, #96]	; (8017b9c <VerifyRfFreq+0x6c>)
 8017b3a:	6a1b      	ldr	r3, [r3, #32]
 8017b3c:	6878      	ldr	r0, [r7, #4]
 8017b3e:	4798      	blx	r3
 8017b40:	4603      	mov	r3, r0
 8017b42:	f083 0301 	eor.w	r3, r3, #1
 8017b46:	b2db      	uxtb	r3, r3
 8017b48:	2b00      	cmp	r3, #0
 8017b4a:	d001      	beq.n	8017b50 <VerifyRfFreq+0x20>
    {
        return false;
 8017b4c:	2300      	movs	r3, #0
 8017b4e:	e021      	b.n	8017b94 <VerifyRfFreq+0x64>
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 8017b50:	687b      	ldr	r3, [r7, #4]
 8017b52:	4a13      	ldr	r2, [pc, #76]	; (8017ba0 <VerifyRfFreq+0x70>)
 8017b54:	4293      	cmp	r3, r2
 8017b56:	d910      	bls.n	8017b7a <VerifyRfFreq+0x4a>
 8017b58:	687b      	ldr	r3, [r7, #4]
 8017b5a:	4a12      	ldr	r2, [pc, #72]	; (8017ba4 <VerifyRfFreq+0x74>)
 8017b5c:	4293      	cmp	r3, r2
 8017b5e:	d80c      	bhi.n	8017b7a <VerifyRfFreq+0x4a>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 8017b60:	687a      	ldr	r2, [r7, #4]
 8017b62:	4b11      	ldr	r3, [pc, #68]	; (8017ba8 <VerifyRfFreq+0x78>)
 8017b64:	4413      	add	r3, r2
 8017b66:	4a11      	ldr	r2, [pc, #68]	; (8017bac <VerifyRfFreq+0x7c>)
 8017b68:	fba2 1203 	umull	r1, r2, r2, r3
 8017b6c:	0c92      	lsrs	r2, r2, #18
 8017b6e:	4910      	ldr	r1, [pc, #64]	; (8017bb0 <VerifyRfFreq+0x80>)
 8017b70:	fb01 f202 	mul.w	r2, r1, r2
 8017b74:	1a9a      	subs	r2, r3, r2
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 8017b76:	2a00      	cmp	r2, #0
 8017b78:	d001      	beq.n	8017b7e <VerifyRfFreq+0x4e>
    {
        return false;
 8017b7a:	2300      	movs	r3, #0
 8017b7c:	e00a      	b.n	8017b94 <VerifyRfFreq+0x64>
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 8017b7e:	687b      	ldr	r3, [r7, #4]
 8017b80:	4a0c      	ldr	r2, [pc, #48]	; (8017bb4 <VerifyRfFreq+0x84>)
 8017b82:	4293      	cmp	r3, r2
 8017b84:	d903      	bls.n	8017b8e <VerifyRfFreq+0x5e>
 8017b86:	687b      	ldr	r3, [r7, #4]
 8017b88:	4a06      	ldr	r2, [pc, #24]	; (8017ba4 <VerifyRfFreq+0x74>)
 8017b8a:	4293      	cmp	r3, r2
 8017b8c:	d901      	bls.n	8017b92 <VerifyRfFreq+0x62>
    {
        return false;
 8017b8e:	2300      	movs	r3, #0
 8017b90:	e000      	b.n	8017b94 <VerifyRfFreq+0x64>
    }
    return true;
 8017b92:	2301      	movs	r3, #1
}
 8017b94:	4618      	mov	r0, r3
 8017b96:	3708      	adds	r7, #8
 8017b98:	46bd      	mov	sp, r7
 8017b9a:	bd80      	pop	{r7, pc}
 8017b9c:	0801eb70 	.word	0x0801eb70
 8017ba0:	3708709f 	.word	0x3708709f
 8017ba4:	374886e0 	.word	0x374886e0
 8017ba8:	c8f78f60 	.word	0xc8f78f60
 8017bac:	6fd91d85 	.word	0x6fd91d85
 8017bb0:	000927c0 	.word	0x000927c0
 8017bb4:	35c8015f 	.word	0x35c8015f

08017bb8 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8017bb8:	b590      	push	{r4, r7, lr}
 8017bba:	b089      	sub	sp, #36	; 0x24
 8017bbc:	af04      	add	r7, sp, #16
 8017bbe:	4603      	mov	r3, r0
 8017bc0:	460a      	mov	r2, r1
 8017bc2:	71fb      	strb	r3, [r7, #7]
 8017bc4:	4613      	mov	r3, r2
 8017bc6:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesUS915[datarate];
 8017bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017bcc:	4a0f      	ldr	r2, [pc, #60]	; (8017c0c <GetTimeOnAir+0x54>)
 8017bce:	5cd3      	ldrb	r3, [r2, r3]
 8017bd0:	73fb      	strb	r3, [r7, #15]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 8017bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017bd6:	490e      	ldr	r1, [pc, #56]	; (8017c10 <GetTimeOnAir+0x58>)
 8017bd8:	4618      	mov	r0, r3
 8017bda:	f7fe fd69 	bl	80166b0 <RegionCommonGetBandwidth>
 8017bde:	60b8      	str	r0, [r7, #8]

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8017be0:	4b0c      	ldr	r3, [pc, #48]	; (8017c14 <GetTimeOnAir+0x5c>)
 8017be2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8017be4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8017be8:	88bb      	ldrh	r3, [r7, #4]
 8017bea:	b2db      	uxtb	r3, r3
 8017bec:	2101      	movs	r1, #1
 8017bee:	9103      	str	r1, [sp, #12]
 8017bf0:	9302      	str	r3, [sp, #8]
 8017bf2:	2300      	movs	r3, #0
 8017bf4:	9301      	str	r3, [sp, #4]
 8017bf6:	2308      	movs	r3, #8
 8017bf8:	9300      	str	r3, [sp, #0]
 8017bfa:	2301      	movs	r3, #1
 8017bfc:	68b9      	ldr	r1, [r7, #8]
 8017bfe:	2001      	movs	r0, #1
 8017c00:	47a0      	blx	r4
 8017c02:	4603      	mov	r3, r0
}
 8017c04:	4618      	mov	r0, r3
 8017c06:	3714      	adds	r7, #20
 8017c08:	46bd      	mov	sp, r7
 8017c0a:	bd90      	pop	{r4, r7, pc}
 8017c0c:	0801eaec 	.word	0x0801eaec
 8017c10:	0801eafc 	.word	0x0801eafc
 8017c14:	0801eb70 	.word	0x0801eb70

08017c18 <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 8017c18:	b580      	push	{r7, lr}
 8017c1a:	b088      	sub	sp, #32
 8017c1c:	af00      	add	r7, sp, #0
 8017c1e:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8017c20:	2300      	movs	r3, #0
 8017c22:	61bb      	str	r3, [r7, #24]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 8017c24:	687b      	ldr	r3, [r7, #4]
 8017c26:	781b      	ldrb	r3, [r3, #0]
 8017c28:	3b01      	subs	r3, #1
 8017c2a:	2b37      	cmp	r3, #55	; 0x37
 8017c2c:	f200 8136 	bhi.w	8017e9c <RegionUS915GetPhyParam+0x284>
 8017c30:	a201      	add	r2, pc, #4	; (adr r2, 8017c38 <RegionUS915GetPhyParam+0x20>)
 8017c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017c36:	bf00      	nop
 8017c38:	08017d19 	.word	0x08017d19
 8017c3c:	08017d1f 	.word	0x08017d1f
 8017c40:	08017e9d 	.word	0x08017e9d
 8017c44:	08017e9d 	.word	0x08017e9d
 8017c48:	08017e9d 	.word	0x08017e9d
 8017c4c:	08017d25 	.word	0x08017d25
 8017c50:	08017e9d 	.word	0x08017e9d
 8017c54:	08017d5f 	.word	0x08017d5f
 8017c58:	08017e9d 	.word	0x08017e9d
 8017c5c:	08017d65 	.word	0x08017d65
 8017c60:	08017d6b 	.word	0x08017d6b
 8017c64:	08017d71 	.word	0x08017d71
 8017c68:	08017d77 	.word	0x08017d77
 8017c6c:	08017d87 	.word	0x08017d87
 8017c70:	08017d97 	.word	0x08017d97
 8017c74:	08017d9d 	.word	0x08017d9d
 8017c78:	08017da5 	.word	0x08017da5
 8017c7c:	08017dad 	.word	0x08017dad
 8017c80:	08017db5 	.word	0x08017db5
 8017c84:	08017dbd 	.word	0x08017dbd
 8017c88:	08017dc5 	.word	0x08017dc5
 8017c8c:	08017dd9 	.word	0x08017dd9
 8017c90:	08017ddf 	.word	0x08017ddf
 8017c94:	08017de5 	.word	0x08017de5
 8017c98:	08017deb 	.word	0x08017deb
 8017c9c:	08017df7 	.word	0x08017df7
 8017ca0:	08017e03 	.word	0x08017e03
 8017ca4:	08017e09 	.word	0x08017e09
 8017ca8:	08017e11 	.word	0x08017e11
 8017cac:	08017e17 	.word	0x08017e17
 8017cb0:	08017e1d 	.word	0x08017e1d
 8017cb4:	08017e23 	.word	0x08017e23
 8017cb8:	08017d2b 	.word	0x08017d2b
 8017cbc:	08017e9d 	.word	0x08017e9d
 8017cc0:	08017e9d 	.word	0x08017e9d
 8017cc4:	08017e9d 	.word	0x08017e9d
 8017cc8:	08017e9d 	.word	0x08017e9d
 8017ccc:	08017e9d 	.word	0x08017e9d
 8017cd0:	08017e9d 	.word	0x08017e9d
 8017cd4:	08017e9d 	.word	0x08017e9d
 8017cd8:	08017e9d 	.word	0x08017e9d
 8017cdc:	08017e9d 	.word	0x08017e9d
 8017ce0:	08017e9d 	.word	0x08017e9d
 8017ce4:	08017e9d 	.word	0x08017e9d
 8017ce8:	08017e9d 	.word	0x08017e9d
 8017cec:	08017e9d 	.word	0x08017e9d
 8017cf0:	08017e2b 	.word	0x08017e2b
 8017cf4:	08017e3f 	.word	0x08017e3f
 8017cf8:	08017e4d 	.word	0x08017e4d
 8017cfc:	08017e53 	.word	0x08017e53
 8017d00:	08017e9d 	.word	0x08017e9d
 8017d04:	08017e59 	.word	0x08017e59
 8017d08:	08017e6d 	.word	0x08017e6d
 8017d0c:	08017e73 	.word	0x08017e73
 8017d10:	08017e79 	.word	0x08017e79
 8017d14:	08017e89 	.word	0x08017e89
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 8017d18:	2308      	movs	r3, #8
 8017d1a:	61bb      	str	r3, [r7, #24]
            break;
 8017d1c:	e0bf      	b.n	8017e9e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = US915_TX_MIN_DATARATE;
 8017d1e:	2300      	movs	r3, #0
 8017d20:	61bb      	str	r3, [r7, #24]
            break;
 8017d22:	e0bc      	b.n	8017e9e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = US915_DEFAULT_DATARATE;
 8017d24:	2300      	movs	r3, #0
 8017d26:	61bb      	str	r3, [r7, #24]
            break;
 8017d28:	e0b9      	b.n	8017e9e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8017d2a:	687b      	ldr	r3, [r7, #4]
 8017d2c:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8017d30:	733b      	strb	r3, [r7, #12]
 8017d32:	2304      	movs	r3, #4
 8017d34:	737b      	strb	r3, [r7, #13]
 8017d36:	2300      	movs	r3, #0
 8017d38:	73bb      	strb	r3, [r7, #14]
 8017d3a:	2348      	movs	r3, #72	; 0x48
 8017d3c:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )US915_TX_MAX_DATARATE,
                .MinDr = ( int8_t )US915_TX_MIN_DATARATE,
                .NbChannels = US915_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8017d3e:	4b5b      	ldr	r3, [pc, #364]	; (8017eac <RegionUS915GetPhyParam+0x294>)
 8017d40:	681b      	ldr	r3, [r3, #0]
 8017d42:	f503 7358 	add.w	r3, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8017d46:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8017d48:	4b58      	ldr	r3, [pc, #352]	; (8017eac <RegionUS915GetPhyParam+0x294>)
 8017d4a:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8017d4c:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8017d4e:	f107 030c 	add.w	r3, r7, #12
 8017d52:	4618      	mov	r0, r3
 8017d54:	f7fe fc59 	bl	801660a <RegionCommonGetNextLowerTxDr>
 8017d58:	4603      	mov	r3, r0
 8017d5a:	61bb      	str	r3, [r7, #24]
            break;
 8017d5c:	e09f      	b.n	8017e9e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = US915_MAX_TX_POWER;
 8017d5e:	2300      	movs	r3, #0
 8017d60:	61bb      	str	r3, [r7, #24]
            break;
 8017d62:	e09c      	b.n	8017e9e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = US915_DEFAULT_TX_POWER;
 8017d64:	2300      	movs	r3, #0
 8017d66:	61bb      	str	r3, [r7, #24]
            break;
 8017d68:	e099      	b.n	8017e9e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8017d6a:	2340      	movs	r3, #64	; 0x40
 8017d6c:	61bb      	str	r3, [r7, #24]
            break;
 8017d6e:	e096      	b.n	8017e9e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8017d70:	2320      	movs	r3, #32
 8017d72:	61bb      	str	r3, [r7, #24]
            break;
 8017d74:	e093      	b.n	8017e9e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 8017d76:	687b      	ldr	r3, [r7, #4]
 8017d78:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017d7c:	461a      	mov	r2, r3
 8017d7e:	4b4c      	ldr	r3, [pc, #304]	; (8017eb0 <RegionUS915GetPhyParam+0x298>)
 8017d80:	5c9b      	ldrb	r3, [r3, r2]
 8017d82:	61bb      	str	r3, [r7, #24]
            break;
 8017d84:	e08b      	b.n	8017e9e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 8017d86:	687b      	ldr	r3, [r7, #4]
 8017d88:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017d8c:	461a      	mov	r2, r3
 8017d8e:	4b49      	ldr	r3, [pc, #292]	; (8017eb4 <RegionUS915GetPhyParam+0x29c>)
 8017d90:	5c9b      	ldrb	r3, [r3, r2]
 8017d92:	61bb      	str	r3, [r7, #24]
            break;
 8017d94:	e083      	b.n	8017e9e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = US915_DUTY_CYCLE_ENABLED;
 8017d96:	2300      	movs	r3, #0
 8017d98:	61bb      	str	r3, [r7, #24]
            break;
 8017d9a:	e080      	b.n	8017e9e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = US915_MAX_RX_WINDOW;
 8017d9c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8017da0:	61bb      	str	r3, [r7, #24]
            break;
 8017da2:	e07c      	b.n	8017e9e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8017da4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017da8:	61bb      	str	r3, [r7, #24]
            break;
 8017daa:	e078      	b.n	8017e9e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8017dac:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8017db0:	61bb      	str	r3, [r7, #24]
            break;
 8017db2:	e074      	b.n	8017e9e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8017db4:	f241 3388 	movw	r3, #5000	; 0x1388
 8017db8:	61bb      	str	r3, [r7, #24]
            break;
 8017dba:	e070      	b.n	8017e9e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8017dbc:	f241 7370 	movw	r3, #6000	; 0x1770
 8017dc0:	61bb      	str	r3, [r7, #24]
            break;
 8017dc2:	e06c      	b.n	8017e9e <RegionUS915GetPhyParam+0x286>
            break;
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 8017dc4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8017dc8:	483b      	ldr	r0, [pc, #236]	; (8017eb8 <RegionUS915GetPhyParam+0x2a0>)
 8017dca:	f001 f8a7 	bl	8018f1c <randr>
 8017dce:	4603      	mov	r3, r0
 8017dd0:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8017dd4:	61bb      	str	r3, [r7, #24]
            break;
 8017dd6:	e062      	b.n	8017e9e <RegionUS915GetPhyParam+0x286>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8017dd8:	2300      	movs	r3, #0
 8017dda:	61bb      	str	r3, [r7, #24]
            break;
 8017ddc:	e05f      	b.n	8017e9e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = US915_RX_WND_2_FREQ;
 8017dde:	4b37      	ldr	r3, [pc, #220]	; (8017ebc <RegionUS915GetPhyParam+0x2a4>)
 8017de0:	61bb      	str	r3, [r7, #24]
            break;
 8017de2:	e05c      	b.n	8017e9e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = US915_RX_WND_2_DR;
 8017de4:	2308      	movs	r3, #8
 8017de6:	61bb      	str	r3, [r7, #24]
            break;
 8017de8:	e059      	b.n	8017e9e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8017dea:	4b30      	ldr	r3, [pc, #192]	; (8017eac <RegionUS915GetPhyParam+0x294>)
 8017dec:	681b      	ldr	r3, [r3, #0]
 8017dee:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8017df2:	61bb      	str	r3, [r7, #24]
            break;
 8017df4:	e053      	b.n	8017e9e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8017df6:	4b2d      	ldr	r3, [pc, #180]	; (8017eac <RegionUS915GetPhyParam+0x294>)
 8017df8:	681b      	ldr	r3, [r3, #0]
 8017dfa:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8017dfe:	61bb      	str	r3, [r7, #24]
            break;
 8017e00:	e04d      	b.n	8017e9e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = US915_MAX_NB_CHANNELS;
 8017e02:	2348      	movs	r3, #72	; 0x48
 8017e04:	61bb      	str	r3, [r7, #24]
            break;
 8017e06:	e04a      	b.n	8017e9e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8017e08:	4b28      	ldr	r3, [pc, #160]	; (8017eac <RegionUS915GetPhyParam+0x294>)
 8017e0a:	681b      	ldr	r3, [r3, #0]
 8017e0c:	61bb      	str	r3, [r7, #24]
            break;
 8017e0e:	e046      	b.n	8017e9e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = US915_DEFAULT_UPLINK_DWELL_TIME;
 8017e10:	2300      	movs	r3, #0
 8017e12:	61bb      	str	r3, [r7, #24]
            break;
 8017e14:	e043      	b.n	8017e9e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8017e16:	2300      	movs	r3, #0
 8017e18:	61bb      	str	r3, [r7, #24]
            break;
 8017e1a:	e040      	b.n	8017e9e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 8017e1c:	4b28      	ldr	r3, [pc, #160]	; (8017ec0 <RegionUS915GetPhyParam+0x2a8>)
 8017e1e:	61bb      	str	r3, [r7, #24]
            break;
 8017e20:	e03d      	b.n	8017e9e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = 0;
 8017e22:	f04f 0300 	mov.w	r3, #0
 8017e26:	61bb      	str	r3, [r7, #24]
            break;
 8017e28:	e039      	b.n	8017e9e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 8017e2a:	687b      	ldr	r3, [r7, #4]
 8017e2c:	791b      	ldrb	r3, [r3, #4]
 8017e2e:	4a25      	ldr	r2, [pc, #148]	; (8017ec4 <RegionUS915GetPhyParam+0x2ac>)
 8017e30:	4922      	ldr	r1, [pc, #136]	; (8017ebc <RegionUS915GetPhyParam+0x2a4>)
 8017e32:	4618      	mov	r0, r3
 8017e34:	f7fd fd4b 	bl	80158ce <RegionBaseUSCalcDownlinkFrequency>
 8017e38:	4603      	mov	r3, r0
 8017e3a:	61bb      	str	r3, [r7, #24]
                                                                US915_BEACON_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 8017e3c:	e02f      	b.n	8017e9e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 8017e3e:	2317      	movs	r3, #23
 8017e40:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 8017e42:	2304      	movs	r3, #4
 8017e44:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 8017e46:	2303      	movs	r3, #3
 8017e48:	76bb      	strb	r3, [r7, #26]
            break;
 8017e4a:	e028      	b.n	8017e9e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 8017e4c:	2308      	movs	r3, #8
 8017e4e:	61bb      	str	r3, [r7, #24]
            break;
 8017e50:	e025      	b.n	8017e9e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8017e52:	2308      	movs	r3, #8
 8017e54:	61bb      	str	r3, [r7, #24]
            break;
 8017e56:	e022      	b.n	8017e9e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 8017e58:	687b      	ldr	r3, [r7, #4]
 8017e5a:	791b      	ldrb	r3, [r3, #4]
 8017e5c:	4a19      	ldr	r2, [pc, #100]	; (8017ec4 <RegionUS915GetPhyParam+0x2ac>)
 8017e5e:	4917      	ldr	r1, [pc, #92]	; (8017ebc <RegionUS915GetPhyParam+0x2a4>)
 8017e60:	4618      	mov	r0, r3
 8017e62:	f7fd fd34 	bl	80158ce <RegionBaseUSCalcDownlinkFrequency>
 8017e66:	4603      	mov	r3, r0
 8017e68:	61bb      	str	r3, [r7, #24]
                                                                US915_PING_SLOT_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 8017e6a:	e018      	b.n	8017e9e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 8017e6c:	2308      	movs	r3, #8
 8017e6e:	61bb      	str	r3, [r7, #24]
            break;
 8017e70:	e015      	b.n	8017e9e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8017e72:	2308      	movs	r3, #8
 8017e74:	61bb      	str	r3, [r7, #24]
            break;
 8017e76:	e012      	b.n	8017e9e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 8017e78:	687b      	ldr	r3, [r7, #4]
 8017e7a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017e7e:	461a      	mov	r2, r3
 8017e80:	4b11      	ldr	r3, [pc, #68]	; (8017ec8 <RegionUS915GetPhyParam+0x2b0>)
 8017e82:	5c9b      	ldrb	r3, [r3, r2]
 8017e84:	61bb      	str	r3, [r7, #24]
            break;
 8017e86:	e00a      	b.n	8017e9e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 8017e88:	687b      	ldr	r3, [r7, #4]
 8017e8a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017e8e:	490f      	ldr	r1, [pc, #60]	; (8017ecc <RegionUS915GetPhyParam+0x2b4>)
 8017e90:	4618      	mov	r0, r3
 8017e92:	f7fe fc0d 	bl	80166b0 <RegionCommonGetBandwidth>
 8017e96:	4603      	mov	r3, r0
 8017e98:	61bb      	str	r3, [r7, #24]
            break;
 8017e9a:	e000      	b.n	8017e9e <RegionUS915GetPhyParam+0x286>
        }
        default:
        {
            break;
 8017e9c:	bf00      	nop
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 8017e9e:	69bb      	ldr	r3, [r7, #24]
 8017ea0:	61fb      	str	r3, [r7, #28]
 8017ea2:	69fb      	ldr	r3, [r7, #28]
}
 8017ea4:	4618      	mov	r0, r3
 8017ea6:	3720      	adds	r7, #32
 8017ea8:	46bd      	mov	sp, r7
 8017eaa:	bd80      	pop	{r7, pc}
 8017eac:	20001adc 	.word	0x20001adc
 8017eb0:	0801eb50 	.word	0x0801eb50
 8017eb4:	0801eb60 	.word	0x0801eb60
 8017eb8:	fffffc18 	.word	0xfffffc18
 8017ebc:	370870a0 	.word	0x370870a0
 8017ec0:	4200999a 	.word	0x4200999a
 8017ec4:	000927c0 	.word	0x000927c0
 8017ec8:	0801eaec 	.word	0x0801eaec
 8017ecc:	0801eafc 	.word	0x0801eafc

08017ed0 <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8017ed0:	b590      	push	{r4, r7, lr}
 8017ed2:	b085      	sub	sp, #20
 8017ed4:	af02      	add	r7, sp, #8
 8017ed6:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8017ed8:	4b11      	ldr	r3, [pc, #68]	; (8017f20 <RegionUS915SetBandTxDone+0x50>)
 8017eda:	681a      	ldr	r2, [r3, #0]
 8017edc:	4b11      	ldr	r3, [pc, #68]	; (8017f24 <RegionUS915SetBandTxDone+0x54>)
 8017ede:	6819      	ldr	r1, [r3, #0]
 8017ee0:	687b      	ldr	r3, [r7, #4]
 8017ee2:	781b      	ldrb	r3, [r3, #0]
 8017ee4:	4618      	mov	r0, r3
 8017ee6:	4603      	mov	r3, r0
 8017ee8:	005b      	lsls	r3, r3, #1
 8017eea:	4403      	add	r3, r0
 8017eec:	009b      	lsls	r3, r3, #2
 8017eee:	440b      	add	r3, r1
 8017ef0:	3309      	adds	r3, #9
 8017ef2:	781b      	ldrb	r3, [r3, #0]
 8017ef4:	4619      	mov	r1, r3
 8017ef6:	460b      	mov	r3, r1
 8017ef8:	005b      	lsls	r3, r3, #1
 8017efa:	440b      	add	r3, r1
 8017efc:	00db      	lsls	r3, r3, #3
 8017efe:	18d0      	adds	r0, r2, r3
 8017f00:	687b      	ldr	r3, [r7, #4]
 8017f02:	6899      	ldr	r1, [r3, #8]
 8017f04:	687b      	ldr	r3, [r7, #4]
 8017f06:	785c      	ldrb	r4, [r3, #1]
 8017f08:	687b      	ldr	r3, [r7, #4]
 8017f0a:	691a      	ldr	r2, [r3, #16]
 8017f0c:	9200      	str	r2, [sp, #0]
 8017f0e:	68db      	ldr	r3, [r3, #12]
 8017f10:	4622      	mov	r2, r4
 8017f12:	f7fd ff53 	bl	8015dbc <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_US915 */
}
 8017f16:	bf00      	nop
 8017f18:	370c      	adds	r7, #12
 8017f1a:	46bd      	mov	sp, r7
 8017f1c:	bd90      	pop	{r4, r7, pc}
 8017f1e:	bf00      	nop
 8017f20:	20001ae0 	.word	0x20001ae0
 8017f24:	20001adc 	.word	0x20001adc

08017f28 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 8017f28:	b580      	push	{r7, lr}
 8017f2a:	b08a      	sub	sp, #40	; 0x28
 8017f2c:	af00      	add	r7, sp, #0
 8017f2e:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 8017f30:	2301      	movs	r3, #1
 8017f32:	81bb      	strh	r3, [r7, #12]
 8017f34:	2300      	movs	r3, #0
 8017f36:	73bb      	strb	r3, [r7, #14]
 8017f38:	2300      	movs	r3, #0
 8017f3a:	613b      	str	r3, [r7, #16]
 8017f3c:	2300      	movs	r3, #0
 8017f3e:	617b      	str	r3, [r7, #20]
 8017f40:	2300      	movs	r3, #0
 8017f42:	61bb      	str	r3, [r7, #24]
 8017f44:	2300      	movs	r3, #0
 8017f46:	61fb      	str	r3, [r7, #28]
 8017f48:	2300      	movs	r3, #0
 8017f4a:	f887 3020 	strb.w	r3, [r7, #32]
    {
       US915_BAND0
    };

    switch( params->Type )
 8017f4e:	687b      	ldr	r3, [r7, #4]
 8017f50:	7b1b      	ldrb	r3, [r3, #12]
 8017f52:	2b00      	cmp	r3, #0
 8017f54:	d007      	beq.n	8017f66 <RegionUS915InitDefaults+0x3e>
 8017f56:	2b00      	cmp	r3, #0
 8017f58:	f2c0 8104 	blt.w	8018164 <RegionUS915InitDefaults+0x23c>
 8017f5c:	3b01      	subs	r3, #1
 8017f5e:	2b01      	cmp	r3, #1
 8017f60:	f200 8100 	bhi.w	8018164 <RegionUS915InitDefaults+0x23c>
 8017f64:	e0ce      	b.n	8018104 <RegionUS915InitDefaults+0x1dc>
    {
        case INIT_TYPE_DEFAULTS:
        {
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8017f66:	687b      	ldr	r3, [r7, #4]
 8017f68:	681b      	ldr	r3, [r3, #0]
 8017f6a:	2b00      	cmp	r3, #0
 8017f6c:	f000 80fc 	beq.w	8018168 <RegionUS915InitDefaults+0x240>
 8017f70:	687b      	ldr	r3, [r7, #4]
 8017f72:	685b      	ldr	r3, [r3, #4]
 8017f74:	2b00      	cmp	r3, #0
 8017f76:	f000 80f7 	beq.w	8018168 <RegionUS915InitDefaults+0x240>
            {
                return;
            }

            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 8017f7a:	687b      	ldr	r3, [r7, #4]
 8017f7c:	681b      	ldr	r3, [r3, #0]
 8017f7e:	4a7c      	ldr	r2, [pc, #496]	; (8018170 <RegionUS915InitDefaults+0x248>)
 8017f80:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8017f82:	687b      	ldr	r3, [r7, #4]
 8017f84:	685b      	ldr	r3, [r3, #4]
 8017f86:	4a7b      	ldr	r2, [pc, #492]	; (8018174 <RegionUS915InitDefaults+0x24c>)
 8017f88:	6013      	str	r3, [r2, #0]
            RegionNvmGroup1->JoinTrialsCounter = 0;

            // Default bands
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            RegionBands = (Band_t*) params->Bands;
 8017f8a:	687b      	ldr	r3, [r7, #4]
 8017f8c:	689b      	ldr	r3, [r3, #8]
 8017f8e:	4a7a      	ldr	r2, [pc, #488]	; (8018178 <RegionUS915InitDefaults+0x250>)
 8017f90:	6013      	str	r3, [r2, #0]

            // Initialize 8 bit channel groups index
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8017f92:	4b77      	ldr	r3, [pc, #476]	; (8018170 <RegionUS915InitDefaults+0x248>)
 8017f94:	681b      	ldr	r3, [r3, #0]
 8017f96:	2200      	movs	r2, #0
 8017f98:	731a      	strb	r2, [r3, #12]

            // Initialize the join trials counter
            RegionNvmGroup1->JoinTrialsCounter = 0;
 8017f9a:	4b75      	ldr	r3, [pc, #468]	; (8018170 <RegionUS915InitDefaults+0x248>)
 8017f9c:	681b      	ldr	r3, [r3, #0]
 8017f9e:	2200      	movs	r2, #0
 8017fa0:	735a      	strb	r2, [r3, #13]

            // Default bands
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 8017fa2:	4b75      	ldr	r3, [pc, #468]	; (8018178 <RegionUS915InitDefaults+0x250>)
 8017fa4:	681b      	ldr	r3, [r3, #0]
 8017fa6:	f107 010c 	add.w	r1, r7, #12
 8017faa:	2218      	movs	r2, #24
 8017fac:	4618      	mov	r0, r3
 8017fae:	f000 ffcc 	bl	8018f4a <memcpy1>
#endif /* REGION_VERSION */

            // Default channels
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 8017fb2:	2300      	movs	r3, #0
 8017fb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017fb8:	e02e      	b.n	8018018 <RegionUS915InitDefaults+0xf0>
            {
                // 125 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 8017fba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017fbe:	4a6f      	ldr	r2, [pc, #444]	; (801817c <RegionUS915InitDefaults+0x254>)
 8017fc0:	fb03 f202 	mul.w	r2, r3, r2
 8017fc4:	4b6e      	ldr	r3, [pc, #440]	; (8018180 <RegionUS915InitDefaults+0x258>)
 8017fc6:	4413      	add	r3, r2
 8017fc8:	4a6a      	ldr	r2, [pc, #424]	; (8018174 <RegionUS915InitDefaults+0x24c>)
 8017fca:	6811      	ldr	r1, [r2, #0]
 8017fcc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8017fd0:	4618      	mov	r0, r3
 8017fd2:	4613      	mov	r3, r2
 8017fd4:	005b      	lsls	r3, r3, #1
 8017fd6:	4413      	add	r3, r2
 8017fd8:	009b      	lsls	r3, r3, #2
 8017fda:	440b      	add	r3, r1
 8017fdc:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 8017fde:	4b65      	ldr	r3, [pc, #404]	; (8018174 <RegionUS915InitDefaults+0x24c>)
 8017fe0:	6819      	ldr	r1, [r3, #0]
 8017fe2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8017fe6:	4613      	mov	r3, r2
 8017fe8:	005b      	lsls	r3, r3, #1
 8017fea:	4413      	add	r3, r2
 8017fec:	009b      	lsls	r3, r3, #2
 8017fee:	440b      	add	r3, r1
 8017ff0:	3308      	adds	r3, #8
 8017ff2:	2230      	movs	r2, #48	; 0x30
 8017ff4:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 8017ff6:	4b5f      	ldr	r3, [pc, #380]	; (8018174 <RegionUS915InitDefaults+0x24c>)
 8017ff8:	6819      	ldr	r1, [r3, #0]
 8017ffa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8017ffe:	4613      	mov	r3, r2
 8018000:	005b      	lsls	r3, r3, #1
 8018002:	4413      	add	r3, r2
 8018004:	009b      	lsls	r3, r3, #2
 8018006:	440b      	add	r3, r1
 8018008:	3309      	adds	r3, #9
 801800a:	2200      	movs	r2, #0
 801800c:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 801800e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018012:	3301      	adds	r3, #1
 8018014:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018018:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801801c:	2b3f      	cmp	r3, #63	; 0x3f
 801801e:	d9cc      	bls.n	8017fba <RegionUS915InitDefaults+0x92>
            }
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 8018020:	2340      	movs	r3, #64	; 0x40
 8018022:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018026:	e02f      	b.n	8018088 <RegionUS915InitDefaults+0x160>
            {
                // 500 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 8018028:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801802c:	3b40      	subs	r3, #64	; 0x40
 801802e:	4a55      	ldr	r2, [pc, #340]	; (8018184 <RegionUS915InitDefaults+0x25c>)
 8018030:	fb03 f202 	mul.w	r2, r3, r2
 8018034:	4b54      	ldr	r3, [pc, #336]	; (8018188 <RegionUS915InitDefaults+0x260>)
 8018036:	4413      	add	r3, r2
 8018038:	4a4e      	ldr	r2, [pc, #312]	; (8018174 <RegionUS915InitDefaults+0x24c>)
 801803a:	6811      	ldr	r1, [r2, #0]
 801803c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8018040:	4618      	mov	r0, r3
 8018042:	4613      	mov	r3, r2
 8018044:	005b      	lsls	r3, r3, #1
 8018046:	4413      	add	r3, r2
 8018048:	009b      	lsls	r3, r3, #2
 801804a:	440b      	add	r3, r1
 801804c:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 801804e:	4b49      	ldr	r3, [pc, #292]	; (8018174 <RegionUS915InitDefaults+0x24c>)
 8018050:	6819      	ldr	r1, [r3, #0]
 8018052:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8018056:	4613      	mov	r3, r2
 8018058:	005b      	lsls	r3, r3, #1
 801805a:	4413      	add	r3, r2
 801805c:	009b      	lsls	r3, r3, #2
 801805e:	440b      	add	r3, r1
 8018060:	3308      	adds	r3, #8
 8018062:	2244      	movs	r2, #68	; 0x44
 8018064:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 8018066:	4b43      	ldr	r3, [pc, #268]	; (8018174 <RegionUS915InitDefaults+0x24c>)
 8018068:	6819      	ldr	r1, [r3, #0]
 801806a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801806e:	4613      	mov	r3, r2
 8018070:	005b      	lsls	r3, r3, #1
 8018072:	4413      	add	r3, r2
 8018074:	009b      	lsls	r3, r3, #2
 8018076:	440b      	add	r3, r1
 8018078:	3309      	adds	r3, #9
 801807a:	2200      	movs	r2, #0
 801807c:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 801807e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018082:	3301      	adds	r3, #1
 8018084:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018088:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801808c:	2b47      	cmp	r3, #71	; 0x47
 801808e:	d9cb      	bls.n	8018028 <RegionUS915InitDefaults+0x100>
            RegionNvmGroup2->ChannelsDefaultMask[2] = HYBRID_DEFAULT_MASK2;
            RegionNvmGroup2->ChannelsDefaultMask[3] = HYBRID_DEFAULT_MASK3;
            RegionNvmGroup2->ChannelsDefaultMask[4] = HYBRID_DEFAULT_MASK4;
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
#else
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 8018090:	4b38      	ldr	r3, [pc, #224]	; (8018174 <RegionUS915InitDefaults+0x24c>)
 8018092:	681b      	ldr	r3, [r3, #0]
 8018094:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018098:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 801809c:	4b35      	ldr	r3, [pc, #212]	; (8018174 <RegionUS915InitDefaults+0x24c>)
 801809e:	681b      	ldr	r3, [r3, #0]
 80180a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80180a4:	f8a3 236e 	strh.w	r2, [r3, #878]	; 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 80180a8:	4b32      	ldr	r3, [pc, #200]	; (8018174 <RegionUS915InitDefaults+0x24c>)
 80180aa:	681b      	ldr	r3, [r3, #0]
 80180ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80180b0:	f8a3 2370 	strh.w	r2, [r3, #880]	; 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 80180b4:	4b2f      	ldr	r3, [pc, #188]	; (8018174 <RegionUS915InitDefaults+0x24c>)
 80180b6:	681b      	ldr	r3, [r3, #0]
 80180b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80180bc:	f8a3 2372 	strh.w	r2, [r3, #882]	; 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 80180c0:	4b2c      	ldr	r3, [pc, #176]	; (8018174 <RegionUS915InitDefaults+0x24c>)
 80180c2:	681b      	ldr	r3, [r3, #0]
 80180c4:	22ff      	movs	r2, #255	; 0xff
 80180c6:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 80180ca:	4b2a      	ldr	r3, [pc, #168]	; (8018174 <RegionUS915InitDefaults+0x24c>)
 80180cc:	681b      	ldr	r3, [r3, #0]
 80180ce:	2200      	movs	r2, #0
 80180d0:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376
#endif /* HYBRID_ENABLED == 1 */

            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80180d4:	4b27      	ldr	r3, [pc, #156]	; (8018174 <RegionUS915InitDefaults+0x24c>)
 80180d6:	681b      	ldr	r3, [r3, #0]
 80180d8:	f503 7058 	add.w	r0, r3, #864	; 0x360
 80180dc:	4b25      	ldr	r3, [pc, #148]	; (8018174 <RegionUS915InitDefaults+0x24c>)
 80180de:	681b      	ldr	r3, [r3, #0]
 80180e0:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 80180e4:	2206      	movs	r2, #6
 80180e6:	4619      	mov	r1, r3
 80180e8:	f7fd fe42 	bl	8015d70 <RegionCommonChanMaskCopy>

            // Copy into channels mask remaining
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 80180ec:	4b20      	ldr	r3, [pc, #128]	; (8018170 <RegionUS915InitDefaults+0x248>)
 80180ee:	681b      	ldr	r3, [r3, #0]
 80180f0:	4618      	mov	r0, r3
 80180f2:	4b20      	ldr	r3, [pc, #128]	; (8018174 <RegionUS915InitDefaults+0x24c>)
 80180f4:	681b      	ldr	r3, [r3, #0]
 80180f6:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80180fa:	2206      	movs	r2, #6
 80180fc:	4619      	mov	r1, r3
 80180fe:	f7fd fe37 	bl	8015d70 <RegionCommonChanMaskCopy>
            break;
 8018102:	e032      	b.n	801816a <RegionUS915InitDefaults+0x242>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8018104:	4b1b      	ldr	r3, [pc, #108]	; (8018174 <RegionUS915InitDefaults+0x24c>)
 8018106:	681b      	ldr	r3, [r3, #0]
 8018108:	f503 7058 	add.w	r0, r3, #864	; 0x360
 801810c:	4b19      	ldr	r3, [pc, #100]	; (8018174 <RegionUS915InitDefaults+0x24c>)
 801810e:	681b      	ldr	r3, [r3, #0]
 8018110:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8018114:	2206      	movs	r2, #6
 8018116:	4619      	mov	r1, r3
 8018118:	f7fd fe2a 	bl	8015d70 <RegionCommonChanMaskCopy>

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            for( uint8_t i = 0; i < 6; i++ )
 801811c:	2300      	movs	r3, #0
 801811e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8018122:	e01a      	b.n	801815a <RegionUS915InitDefaults+0x232>
#endif /* REGION_VERSION */
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 8018124:	4b12      	ldr	r3, [pc, #72]	; (8018170 <RegionUS915InitDefaults+0x248>)
 8018126:	681b      	ldr	r3, [r3, #0]
 8018128:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 801812c:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8018130:	4b10      	ldr	r3, [pc, #64]	; (8018174 <RegionUS915InitDefaults+0x24c>)
 8018132:	681b      	ldr	r3, [r3, #0]
 8018134:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8018138:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801813c:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8018140:	4b0b      	ldr	r3, [pc, #44]	; (8018170 <RegionUS915InitDefaults+0x248>)
 8018142:	681b      	ldr	r3, [r3, #0]
 8018144:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8018148:	4001      	ands	r1, r0
 801814a:	b289      	uxth	r1, r1
 801814c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < 6; i++ )
 8018150:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8018154:	3301      	adds	r3, #1
 8018156:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801815a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801815e:	2b05      	cmp	r3, #5
 8018160:	d9e0      	bls.n	8018124 <RegionUS915InitDefaults+0x1fc>
            }
            break;
 8018162:	e002      	b.n	801816a <RegionUS915InitDefaults+0x242>
        }
        default:
        {
            break;
 8018164:	bf00      	nop
 8018166:	e000      	b.n	801816a <RegionUS915InitDefaults+0x242>
                return;
 8018168:	bf00      	nop
        }
    }
#endif /* REGION_US915 */
}
 801816a:	3728      	adds	r7, #40	; 0x28
 801816c:	46bd      	mov	sp, r7
 801816e:	bd80      	pop	{r7, pc}
 8018170:	20001ad8 	.word	0x20001ad8
 8018174:	20001adc 	.word	0x20001adc
 8018178:	20001ae0 	.word	0x20001ae0
 801817c:	00030d40 	.word	0x00030d40
 8018180:	35c80160 	.word	0x35c80160
 8018184:	00186a00 	.word	0x00186a00
 8018188:	35d2afc0 	.word	0x35d2afc0

0801818c <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 801818c:	b580      	push	{r7, lr}
 801818e:	b082      	sub	sp, #8
 8018190:	af00      	add	r7, sp, #0
 8018192:	6078      	str	r0, [r7, #4]
 8018194:	460b      	mov	r3, r1
 8018196:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_US915 )
    switch( phyAttribute )
 8018198:	78fb      	ldrb	r3, [r7, #3]
 801819a:	2b0f      	cmp	r3, #15
 801819c:	d867      	bhi.n	801826e <RegionUS915Verify+0xe2>
 801819e:	a201      	add	r2, pc, #4	; (adr r2, 80181a4 <RegionUS915Verify+0x18>)
 80181a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80181a4:	080181e5 	.word	0x080181e5
 80181a8:	0801826f 	.word	0x0801826f
 80181ac:	0801826f 	.word	0x0801826f
 80181b0:	0801826f 	.word	0x0801826f
 80181b4:	0801826f 	.word	0x0801826f
 80181b8:	080181f3 	.word	0x080181f3
 80181bc:	08018211 	.word	0x08018211
 80181c0:	0801822f 	.word	0x0801822f
 80181c4:	0801826f 	.word	0x0801826f
 80181c8:	0801824d 	.word	0x0801824d
 80181cc:	0801824d 	.word	0x0801824d
 80181d0:	0801826f 	.word	0x0801826f
 80181d4:	0801826f 	.word	0x0801826f
 80181d8:	0801826f 	.word	0x0801826f
 80181dc:	0801826f 	.word	0x0801826f
 80181e0:	0801826b 	.word	0x0801826b
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 80181e4:	687b      	ldr	r3, [r7, #4]
 80181e6:	681b      	ldr	r3, [r3, #0]
 80181e8:	4618      	mov	r0, r3
 80181ea:	f7ff fca1 	bl	8017b30 <VerifyRfFreq>
 80181ee:	4603      	mov	r3, r0
 80181f0:	e03e      	b.n	8018270 <RegionUS915Verify+0xe4>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 80181f2:	687b      	ldr	r3, [r7, #4]
 80181f4:	f993 3000 	ldrsb.w	r3, [r3]
 80181f8:	2204      	movs	r2, #4
 80181fa:	2100      	movs	r1, #0
 80181fc:	4618      	mov	r0, r3
 80181fe:	f7fd fd3a 	bl	8015c76 <RegionCommonValueInRange>
 8018202:	4603      	mov	r3, r0
 8018204:	2b00      	cmp	r3, #0
 8018206:	bf14      	ite	ne
 8018208:	2301      	movne	r3, #1
 801820a:	2300      	moveq	r3, #0
 801820c:	b2db      	uxtb	r3, r3
 801820e:	e02f      	b.n	8018270 <RegionUS915Verify+0xe4>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8018210:	687b      	ldr	r3, [r7, #4]
 8018212:	f993 3000 	ldrsb.w	r3, [r3]
 8018216:	2205      	movs	r2, #5
 8018218:	2100      	movs	r1, #0
 801821a:	4618      	mov	r0, r3
 801821c:	f7fd fd2b 	bl	8015c76 <RegionCommonValueInRange>
 8018220:	4603      	mov	r3, r0
 8018222:	2b00      	cmp	r3, #0
 8018224:	bf14      	ite	ne
 8018226:	2301      	movne	r3, #1
 8018228:	2300      	moveq	r3, #0
 801822a:	b2db      	uxtb	r3, r3
 801822c:	e020      	b.n	8018270 <RegionUS915Verify+0xe4>
        }
#endif /* REGION_VERSION */
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 801822e:	687b      	ldr	r3, [r7, #4]
 8018230:	f993 3000 	ldrsb.w	r3, [r3]
 8018234:	220d      	movs	r2, #13
 8018236:	2108      	movs	r1, #8
 8018238:	4618      	mov	r0, r3
 801823a:	f7fd fd1c 	bl	8015c76 <RegionCommonValueInRange>
 801823e:	4603      	mov	r3, r0
 8018240:	2b00      	cmp	r3, #0
 8018242:	bf14      	ite	ne
 8018244:	2301      	movne	r3, #1
 8018246:	2300      	moveq	r3, #0
 8018248:	b2db      	uxtb	r3, r3
 801824a:	e011      	b.n	8018270 <RegionUS915Verify+0xe4>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 801824c:	687b      	ldr	r3, [r7, #4]
 801824e:	f993 3000 	ldrsb.w	r3, [r3]
 8018252:	220e      	movs	r2, #14
 8018254:	2100      	movs	r1, #0
 8018256:	4618      	mov	r0, r3
 8018258:	f7fd fd0d 	bl	8015c76 <RegionCommonValueInRange>
 801825c:	4603      	mov	r3, r0
 801825e:	2b00      	cmp	r3, #0
 8018260:	bf14      	ite	ne
 8018262:	2301      	movne	r3, #1
 8018264:	2300      	moveq	r3, #0
 8018266:	b2db      	uxtb	r3, r3
 8018268:	e002      	b.n	8018270 <RegionUS915Verify+0xe4>
        }
        case PHY_DUTY_CYCLE:
        {
            return US915_DUTY_CYCLE_ENABLED;
 801826a:	2300      	movs	r3, #0
 801826c:	e000      	b.n	8018270 <RegionUS915Verify+0xe4>
        }
        default:
            return false;
 801826e:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_US915 */
}
 8018270:	4618      	mov	r0, r3
 8018272:	3708      	adds	r7, #8
 8018274:	46bd      	mov	sp, r7
 8018276:	bd80      	pop	{r7, pc}

08018278 <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8018278:	b480      	push	{r7}
 801827a:	b085      	sub	sp, #20
 801827c:	af00      	add	r7, sp, #0
 801827e:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 8018280:	687b      	ldr	r3, [r7, #4]
 8018282:	7a1b      	ldrb	r3, [r3, #8]
 8018284:	2b10      	cmp	r3, #16
 8018286:	d160      	bne.n	801834a <RegionUS915ApplyCFList+0xd2>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 8018288:	687b      	ldr	r3, [r7, #4]
 801828a:	685b      	ldr	r3, [r3, #4]
 801828c:	330f      	adds	r3, #15
 801828e:	781b      	ldrb	r3, [r3, #0]
 8018290:	2b01      	cmp	r3, #1
 8018292:	d15c      	bne.n	801834e <RegionUS915ApplyCFList+0xd6>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 8018294:	2300      	movs	r3, #0
 8018296:	73fb      	strb	r3, [r7, #15]
 8018298:	2300      	movs	r3, #0
 801829a:	73bb      	strb	r3, [r7, #14]
 801829c:	e051      	b.n	8018342 <RegionUS915ApplyCFList+0xca>
    {
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 801829e:	687b      	ldr	r3, [r7, #4]
 80182a0:	685a      	ldr	r2, [r3, #4]
 80182a2:	7bbb      	ldrb	r3, [r7, #14]
 80182a4:	4413      	add	r3, r2
 80182a6:	7819      	ldrb	r1, [r3, #0]
 80182a8:	4b2b      	ldr	r3, [pc, #172]	; (8018358 <RegionUS915ApplyCFList+0xe0>)
 80182aa:	681b      	ldr	r3, [r3, #0]
 80182ac:	7bfa      	ldrb	r2, [r7, #15]
 80182ae:	b289      	uxth	r1, r1
 80182b0:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 80182b4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 80182b8:	4b27      	ldr	r3, [pc, #156]	; (8018358 <RegionUS915ApplyCFList+0xe0>)
 80182ba:	681b      	ldr	r3, [r3, #0]
 80182bc:	7bfa      	ldrb	r2, [r7, #15]
 80182be:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 80182c2:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80182c6:	687b      	ldr	r3, [r7, #4]
 80182c8:	685a      	ldr	r2, [r3, #4]
 80182ca:	7bbb      	ldrb	r3, [r7, #14]
 80182cc:	3301      	adds	r3, #1
 80182ce:	4413      	add	r3, r2
 80182d0:	781b      	ldrb	r3, [r3, #0]
 80182d2:	b29b      	uxth	r3, r3
 80182d4:	021b      	lsls	r3, r3, #8
 80182d6:	b299      	uxth	r1, r3
 80182d8:	4b1f      	ldr	r3, [pc, #124]	; (8018358 <RegionUS915ApplyCFList+0xe0>)
 80182da:	681b      	ldr	r3, [r3, #0]
 80182dc:	7bfa      	ldrb	r2, [r7, #15]
 80182de:	4301      	orrs	r1, r0
 80182e0:	b289      	uxth	r1, r1
 80182e2:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 80182e6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        if( chMaskItr == 4 )
 80182ea:	7bfb      	ldrb	r3, [r7, #15]
 80182ec:	2b04      	cmp	r3, #4
 80182ee:	d10f      	bne.n	8018310 <RegionUS915ApplyCFList+0x98>
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 80182f0:	4b19      	ldr	r3, [pc, #100]	; (8018358 <RegionUS915ApplyCFList+0xe0>)
 80182f2:	681b      	ldr	r3, [r3, #0]
 80182f4:	7bfa      	ldrb	r2, [r7, #15]
 80182f6:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 80182fa:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 80182fe:	4b16      	ldr	r3, [pc, #88]	; (8018358 <RegionUS915ApplyCFList+0xe0>)
 8018300:	681b      	ldr	r3, [r3, #0]
 8018302:	7bfa      	ldrb	r2, [r7, #15]
 8018304:	b2c9      	uxtb	r1, r1
 8018306:	b289      	uxth	r1, r1
 8018308:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801830c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 8018310:	4b12      	ldr	r3, [pc, #72]	; (801835c <RegionUS915ApplyCFList+0xe4>)
 8018312:	681b      	ldr	r3, [r3, #0]
 8018314:	7bfa      	ldrb	r2, [r7, #15]
 8018316:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801831a:	4b0f      	ldr	r3, [pc, #60]	; (8018358 <RegionUS915ApplyCFList+0xe0>)
 801831c:	681b      	ldr	r3, [r3, #0]
 801831e:	7bfa      	ldrb	r2, [r7, #15]
 8018320:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8018324:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8018328:	4b0c      	ldr	r3, [pc, #48]	; (801835c <RegionUS915ApplyCFList+0xe4>)
 801832a:	681b      	ldr	r3, [r3, #0]
 801832c:	7bfa      	ldrb	r2, [r7, #15]
 801832e:	4001      	ands	r1, r0
 8018330:	b289      	uxth	r1, r1
 8018332:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 8018336:	7bfb      	ldrb	r3, [r7, #15]
 8018338:	3301      	adds	r3, #1
 801833a:	73fb      	strb	r3, [r7, #15]
 801833c:	7bbb      	ldrb	r3, [r7, #14]
 801833e:	3302      	adds	r3, #2
 8018340:	73bb      	strb	r3, [r7, #14]
 8018342:	7bfb      	ldrb	r3, [r7, #15]
 8018344:	2b04      	cmp	r3, #4
 8018346:	d9aa      	bls.n	801829e <RegionUS915ApplyCFList+0x26>
 8018348:	e002      	b.n	8018350 <RegionUS915ApplyCFList+0xd8>
        return;
 801834a:	bf00      	nop
 801834c:	e000      	b.n	8018350 <RegionUS915ApplyCFList+0xd8>
        return;
 801834e:	bf00      	nop
    }
#endif /* REGION_US915 */
}
 8018350:	3714      	adds	r7, #20
 8018352:	46bd      	mov	sp, r7
 8018354:	bc80      	pop	{r7}
 8018356:	4770      	bx	lr
 8018358:	20001adc 	.word	0x20001adc
 801835c:	20001ad8 	.word	0x20001ad8

08018360 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8018360:	b580      	push	{r7, lr}
 8018362:	b084      	sub	sp, #16
 8018364:	af00      	add	r7, sp, #0
 8018366:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 8018368:	687b      	ldr	r3, [r7, #4]
 801836a:	681b      	ldr	r3, [r3, #0]
 801836c:	2204      	movs	r2, #4
 801836e:	2100      	movs	r1, #0
 8018370:	4618      	mov	r0, r3
 8018372:	f7fd fcd1 	bl	8015d18 <RegionCommonCountChannels>
 8018376:	4603      	mov	r3, r0
 8018378:	73bb      	strb	r3, [r7, #14]

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 801837a:	7bbb      	ldrb	r3, [r7, #14]
 801837c:	2b01      	cmp	r3, #1
 801837e:	d804      	bhi.n	801838a <RegionUS915ChanMaskSet+0x2a>
 8018380:	7bbb      	ldrb	r3, [r7, #14]
 8018382:	2b00      	cmp	r3, #0
 8018384:	d001      	beq.n	801838a <RegionUS915ChanMaskSet+0x2a>
        ( nbChannels > 0 ) )
    {
        return false;
 8018386:	2300      	movs	r3, #0
 8018388:	e04a      	b.n	8018420 <RegionUS915ChanMaskSet+0xc0>
    }

    switch( chanMaskSet->ChannelsMaskType )
 801838a:	687b      	ldr	r3, [r7, #4]
 801838c:	791b      	ldrb	r3, [r3, #4]
 801838e:	2b00      	cmp	r3, #0
 8018390:	d002      	beq.n	8018398 <RegionUS915ChanMaskSet+0x38>
 8018392:	2b01      	cmp	r3, #1
 8018394:	d036      	beq.n	8018404 <RegionUS915ChanMaskSet+0xa4>
 8018396:	e040      	b.n	801841a <RegionUS915ChanMaskSet+0xba>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8018398:	4b23      	ldr	r3, [pc, #140]	; (8018428 <RegionUS915ChanMaskSet+0xc8>)
 801839a:	681b      	ldr	r3, [r3, #0]
 801839c:	f503 7058 	add.w	r0, r3, #864	; 0x360
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	681b      	ldr	r3, [r3, #0]
 80183a4:	2206      	movs	r2, #6
 80183a6:	4619      	mov	r1, r3
 80183a8:	f7fd fce2 	bl	8015d70 <RegionCommonChanMaskCopy>

            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 80183ac:	4b1e      	ldr	r3, [pc, #120]	; (8018428 <RegionUS915ChanMaskSet+0xc8>)
 80183ae:	681b      	ldr	r3, [r3, #0]
 80183b0:	f8b3 2374 	ldrh.w	r2, [r3, #884]	; 0x374
 80183b4:	4b1c      	ldr	r3, [pc, #112]	; (8018428 <RegionUS915ChanMaskSet+0xc8>)
 80183b6:	681b      	ldr	r3, [r3, #0]
 80183b8:	b2d2      	uxtb	r2, r2
 80183ba:	b292      	uxth	r2, r2
 80183bc:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 80183c0:	4b19      	ldr	r3, [pc, #100]	; (8018428 <RegionUS915ChanMaskSet+0xc8>)
 80183c2:	681b      	ldr	r3, [r3, #0]
 80183c4:	2200      	movs	r2, #0
 80183c6:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 80183ca:	2300      	movs	r3, #0
 80183cc:	73fb      	strb	r3, [r7, #15]
 80183ce:	e015      	b.n	80183fc <RegionUS915ChanMaskSet+0x9c>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 80183d0:	4b16      	ldr	r3, [pc, #88]	; (801842c <RegionUS915ChanMaskSet+0xcc>)
 80183d2:	681b      	ldr	r3, [r3, #0]
 80183d4:	7bfa      	ldrb	r2, [r7, #15]
 80183d6:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80183da:	4b13      	ldr	r3, [pc, #76]	; (8018428 <RegionUS915ChanMaskSet+0xc8>)
 80183dc:	681b      	ldr	r3, [r3, #0]
 80183de:	7bfa      	ldrb	r2, [r7, #15]
 80183e0:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 80183e4:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 80183e8:	4b10      	ldr	r3, [pc, #64]	; (801842c <RegionUS915ChanMaskSet+0xcc>)
 80183ea:	681b      	ldr	r3, [r3, #0]
 80183ec:	7bfa      	ldrb	r2, [r7, #15]
 80183ee:	4001      	ands	r1, r0
 80183f0:	b289      	uxth	r1, r1
 80183f2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 80183f6:	7bfb      	ldrb	r3, [r7, #15]
 80183f8:	3301      	adds	r3, #1
 80183fa:	73fb      	strb	r3, [r7, #15]
 80183fc:	7bfb      	ldrb	r3, [r7, #15]
 80183fe:	2b05      	cmp	r3, #5
 8018400:	d9e6      	bls.n	80183d0 <RegionUS915ChanMaskSet+0x70>
            }
            break;
 8018402:	e00c      	b.n	801841e <RegionUS915ChanMaskSet+0xbe>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8018404:	4b08      	ldr	r3, [pc, #32]	; (8018428 <RegionUS915ChanMaskSet+0xc8>)
 8018406:	681b      	ldr	r3, [r3, #0]
 8018408:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 801840c:	687b      	ldr	r3, [r7, #4]
 801840e:	681b      	ldr	r3, [r3, #0]
 8018410:	2206      	movs	r2, #6
 8018412:	4619      	mov	r1, r3
 8018414:	f7fd fcac 	bl	8015d70 <RegionCommonChanMaskCopy>
            break;
 8018418:	e001      	b.n	801841e <RegionUS915ChanMaskSet+0xbe>
        }
        default:
            return false;
 801841a:	2300      	movs	r3, #0
 801841c:	e000      	b.n	8018420 <RegionUS915ChanMaskSet+0xc0>
    }
    return true;
 801841e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8018420:	4618      	mov	r0, r3
 8018422:	3710      	adds	r7, #16
 8018424:	46bd      	mov	sp, r7
 8018426:	bd80      	pop	{r7, pc}
 8018428:	20001adc 	.word	0x20001adc
 801842c:	20001ad8 	.word	0x20001ad8

08018430 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8018430:	b580      	push	{r7, lr}
 8018432:	b088      	sub	sp, #32
 8018434:	af02      	add	r7, sp, #8
 8018436:	60ba      	str	r2, [r7, #8]
 8018438:	607b      	str	r3, [r7, #4]
 801843a:	4603      	mov	r3, r0
 801843c:	73fb      	strb	r3, [r7, #15]
 801843e:	460b      	mov	r3, r1
 8018440:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;
 8018442:	2300      	movs	r3, #0
 8018444:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 8018446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801844a:	2b0d      	cmp	r3, #13
 801844c:	bfa8      	it	ge
 801844e:	230d      	movge	r3, #13
 8018450:	b25a      	sxtb	r2, r3
 8018452:	687b      	ldr	r3, [r7, #4]
 8018454:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 8018456:	687b      	ldr	r3, [r7, #4]
 8018458:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801845c:	4916      	ldr	r1, [pc, #88]	; (80184b8 <RegionUS915ComputeRxWindowParameters+0x88>)
 801845e:	4618      	mov	r0, r3
 8018460:	f7fe f926 	bl	80166b0 <RegionCommonGetBandwidth>
 8018464:	4603      	mov	r3, r0
 8018466:	b2da      	uxtb	r2, r3
 8018468:	687b      	ldr	r3, [r7, #4]
 801846a:	709a      	strb	r2, [r3, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 801846c:	687b      	ldr	r3, [r7, #4]
 801846e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018472:	461a      	mov	r2, r3
 8018474:	4b11      	ldr	r3, [pc, #68]	; (80184bc <RegionUS915ComputeRxWindowParameters+0x8c>)
 8018476:	5c9a      	ldrb	r2, [r3, r2]
 8018478:	687b      	ldr	r3, [r7, #4]
 801847a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801847e:	4619      	mov	r1, r3
 8018480:	4b0d      	ldr	r3, [pc, #52]	; (80184b8 <RegionUS915ComputeRxWindowParameters+0x88>)
 8018482:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018486:	4619      	mov	r1, r3
 8018488:	4610      	mov	r0, r2
 801848a:	f7fd fe8f 	bl	80161ac <RegionCommonComputeSymbolTimeLoRa>
 801848e:	6178      	str	r0, [r7, #20]

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8018490:	4b0b      	ldr	r3, [pc, #44]	; (80184c0 <RegionUS915ComputeRxWindowParameters+0x90>)
 8018492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018494:	4798      	blx	r3
 8018496:	687b      	ldr	r3, [r7, #4]
 8018498:	3308      	adds	r3, #8
 801849a:	687a      	ldr	r2, [r7, #4]
 801849c:	320c      	adds	r2, #12
 801849e:	7bb9      	ldrb	r1, [r7, #14]
 80184a0:	9201      	str	r2, [sp, #4]
 80184a2:	9300      	str	r3, [sp, #0]
 80184a4:	4603      	mov	r3, r0
 80184a6:	68ba      	ldr	r2, [r7, #8]
 80184a8:	6978      	ldr	r0, [r7, #20]
 80184aa:	f7fd fea5 	bl	80161f8 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 80184ae:	bf00      	nop
 80184b0:	3718      	adds	r7, #24
 80184b2:	46bd      	mov	sp, r7
 80184b4:	bd80      	pop	{r7, pc}
 80184b6:	bf00      	nop
 80184b8:	0801eafc 	.word	0x0801eafc
 80184bc:	0801eaec 	.word	0x0801eaec
 80184c0:	0801eb70 	.word	0x0801eb70

080184c4 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80184c4:	b590      	push	{r4, r7, lr}
 80184c6:	b091      	sub	sp, #68	; 0x44
 80184c8:	af0a      	add	r7, sp, #40	; 0x28
 80184ca:	6078      	str	r0, [r7, #4]
 80184cc:	6039      	str	r1, [r7, #0]
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 80184ce:	687b      	ldr	r3, [r7, #4]
 80184d0:	785b      	ldrb	r3, [r3, #1]
 80184d2:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 80184d4:	2300      	movs	r3, #0
 80184d6:	75fb      	strb	r3, [r7, #23]
    int8_t phyDr = 0;
 80184d8:	2300      	movs	r3, #0
 80184da:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 80184dc:	687b      	ldr	r3, [r7, #4]
 80184de:	685b      	ldr	r3, [r3, #4]
 80184e0:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 80184e2:	4b34      	ldr	r3, [pc, #208]	; (80185b4 <RegionUS915RxConfig+0xf0>)
 80184e4:	685b      	ldr	r3, [r3, #4]
 80184e6:	4798      	blx	r3
 80184e8:	4603      	mov	r3, r0
 80184ea:	2b00      	cmp	r3, #0
 80184ec:	d001      	beq.n	80184f2 <RegionUS915RxConfig+0x2e>
    {
        return false;
 80184ee:	2300      	movs	r3, #0
 80184f0:	e05c      	b.n	80185ac <RegionUS915RxConfig+0xe8>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 80184f2:	687b      	ldr	r3, [r7, #4]
 80184f4:	7cdb      	ldrb	r3, [r3, #19]
 80184f6:	2b00      	cmp	r3, #0
 80184f8:	d109      	bne.n	801850e <RegionUS915RxConfig+0x4a>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 80184fa:	687b      	ldr	r3, [r7, #4]
 80184fc:	781b      	ldrb	r3, [r3, #0]
 80184fe:	f003 0307 	and.w	r3, r3, #7
 8018502:	4a2d      	ldr	r2, [pc, #180]	; (80185b8 <RegionUS915RxConfig+0xf4>)
 8018504:	fb03 f202 	mul.w	r2, r3, r2
 8018508:	4b2c      	ldr	r3, [pc, #176]	; (80185bc <RegionUS915RxConfig+0xf8>)
 801850a:	4413      	add	r3, r2
 801850c:	613b      	str	r3, [r7, #16]
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 801850e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018512:	4a2b      	ldr	r2, [pc, #172]	; (80185c0 <RegionUS915RxConfig+0xfc>)
 8018514:	5cd3      	ldrb	r3, [r2, r3]
 8018516:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8018518:	4b26      	ldr	r3, [pc, #152]	; (80185b4 <RegionUS915RxConfig+0xf0>)
 801851a:	68db      	ldr	r3, [r3, #12]
 801851c:	6938      	ldr	r0, [r7, #16]
 801851e:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8018520:	4b24      	ldr	r3, [pc, #144]	; (80185b4 <RegionUS915RxConfig+0xf0>)
 8018522:	699c      	ldr	r4, [r3, #24]
 8018524:	687b      	ldr	r3, [r7, #4]
 8018526:	789b      	ldrb	r3, [r3, #2]
 8018528:	4618      	mov	r0, r3
 801852a:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801852e:	687b      	ldr	r3, [r7, #4]
 8018530:	689b      	ldr	r3, [r3, #8]
 8018532:	b29b      	uxth	r3, r3
 8018534:	687a      	ldr	r2, [r7, #4]
 8018536:	7c92      	ldrb	r2, [r2, #18]
 8018538:	9209      	str	r2, [sp, #36]	; 0x24
 801853a:	2201      	movs	r2, #1
 801853c:	9208      	str	r2, [sp, #32]
 801853e:	2200      	movs	r2, #0
 8018540:	9207      	str	r2, [sp, #28]
 8018542:	2200      	movs	r2, #0
 8018544:	9206      	str	r2, [sp, #24]
 8018546:	2200      	movs	r2, #0
 8018548:	9205      	str	r2, [sp, #20]
 801854a:	2200      	movs	r2, #0
 801854c:	9204      	str	r2, [sp, #16]
 801854e:	2200      	movs	r2, #0
 8018550:	9203      	str	r2, [sp, #12]
 8018552:	9302      	str	r3, [sp, #8]
 8018554:	2308      	movs	r3, #8
 8018556:	9301      	str	r3, [sp, #4]
 8018558:	2300      	movs	r3, #0
 801855a:	9300      	str	r3, [sp, #0]
 801855c:	2301      	movs	r3, #1
 801855e:	460a      	mov	r2, r1
 8018560:	4601      	mov	r1, r0
 8018562:	2001      	movs	r0, #1
 8018564:	47a0      	blx	r4

    if( rxConfig->RepeaterSupport == true )
 8018566:	687b      	ldr	r3, [r7, #4]
 8018568:	7c5b      	ldrb	r3, [r3, #17]
 801856a:	2b00      	cmp	r3, #0
 801856c:	d005      	beq.n	801857a <RegionUS915RxConfig+0xb6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 801856e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018572:	4a14      	ldr	r2, [pc, #80]	; (80185c4 <RegionUS915RxConfig+0x100>)
 8018574:	5cd3      	ldrb	r3, [r2, r3]
 8018576:	75fb      	strb	r3, [r7, #23]
 8018578:	e004      	b.n	8018584 <RegionUS915RxConfig+0xc0>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 801857a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801857e:	4a12      	ldr	r2, [pc, #72]	; (80185c8 <RegionUS915RxConfig+0x104>)
 8018580:	5cd3      	ldrb	r3, [r2, r3]
 8018582:	75fb      	strb	r3, [r7, #23]
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8018584:	4b0b      	ldr	r3, [pc, #44]	; (80185b4 <RegionUS915RxConfig+0xf0>)
 8018586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018588:	7dfa      	ldrb	r2, [r7, #23]
 801858a:	320d      	adds	r2, #13
 801858c:	b2d2      	uxtb	r2, r2
 801858e:	4611      	mov	r1, r2
 8018590:	2001      	movs	r0, #1
 8018592:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8018594:	687b      	ldr	r3, [r7, #4]
 8018596:	7cdb      	ldrb	r3, [r3, #19]
 8018598:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801859c:	6939      	ldr	r1, [r7, #16]
 801859e:	4618      	mov	r0, r3
 80185a0:	f7fe f8a4 	bl	80166ec <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 80185a4:	683b      	ldr	r3, [r7, #0]
 80185a6:	7bfa      	ldrb	r2, [r7, #15]
 80185a8:	701a      	strb	r2, [r3, #0]
    return true;
 80185aa:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 80185ac:	4618      	mov	r0, r3
 80185ae:	371c      	adds	r7, #28
 80185b0:	46bd      	mov	sp, r7
 80185b2:	bd90      	pop	{r4, r7, pc}
 80185b4:	0801eb70 	.word	0x0801eb70
 80185b8:	000927c0 	.word	0x000927c0
 80185bc:	370870a0 	.word	0x370870a0
 80185c0:	0801eaec 	.word	0x0801eaec
 80185c4:	0801eb60 	.word	0x0801eb60
 80185c8:	0801eb50 	.word	0x0801eb50

080185cc <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80185cc:	b590      	push	{r4, r7, lr}
 80185ce:	b093      	sub	sp, #76	; 0x4c
 80185d0:	af0a      	add	r7, sp, #40	; 0x28
 80185d2:	60f8      	str	r0, [r7, #12]
 80185d4:	60b9      	str	r1, [r7, #8]
 80185d6:	607a      	str	r2, [r7, #4]
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 80185d8:	68fb      	ldr	r3, [r7, #12]
 80185da:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80185de:	461a      	mov	r2, r3
 80185e0:	4b49      	ldr	r3, [pc, #292]	; (8018708 <RegionUS915TxConfig+0x13c>)
 80185e2:	5c9b      	ldrb	r3, [r3, r2]
 80185e4:	77fb      	strb	r3, [r7, #31]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 80185e6:	68fb      	ldr	r3, [r7, #12]
 80185e8:	f993 0002 	ldrsb.w	r0, [r3, #2]
 80185ec:	4b47      	ldr	r3, [pc, #284]	; (801870c <RegionUS915TxConfig+0x140>)
 80185ee:	681a      	ldr	r2, [r3, #0]
 80185f0:	4b47      	ldr	r3, [pc, #284]	; (8018710 <RegionUS915TxConfig+0x144>)
 80185f2:	6819      	ldr	r1, [r3, #0]
 80185f4:	68fb      	ldr	r3, [r7, #12]
 80185f6:	781b      	ldrb	r3, [r3, #0]
 80185f8:	461c      	mov	r4, r3
 80185fa:	4623      	mov	r3, r4
 80185fc:	005b      	lsls	r3, r3, #1
 80185fe:	4423      	add	r3, r4
 8018600:	009b      	lsls	r3, r3, #2
 8018602:	440b      	add	r3, r1
 8018604:	3309      	adds	r3, #9
 8018606:	781b      	ldrb	r3, [r3, #0]
 8018608:	4619      	mov	r1, r3
 801860a:	460b      	mov	r3, r1
 801860c:	005b      	lsls	r3, r3, #1
 801860e:	440b      	add	r3, r1
 8018610:	00db      	lsls	r3, r3, #3
 8018612:	4413      	add	r3, r2
 8018614:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8018618:	68fb      	ldr	r3, [r7, #12]
 801861a:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801861e:	4b3c      	ldr	r3, [pc, #240]	; (8018710 <RegionUS915TxConfig+0x144>)
 8018620:	681b      	ldr	r3, [r3, #0]
 8018622:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8018626:	f7ff fa4d 	bl	8017ac4 <LimitTxPower>
 801862a:	4603      	mov	r3, r0
 801862c:	77bb      	strb	r3, [r7, #30]
#endif /* REGION_VERSION */

    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 801862e:	68fb      	ldr	r3, [r7, #12]
 8018630:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018634:	4937      	ldr	r1, [pc, #220]	; (8018714 <RegionUS915TxConfig+0x148>)
 8018636:	4618      	mov	r0, r3
 8018638:	f7fe f83a 	bl	80166b0 <RegionCommonGetBandwidth>
 801863c:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 801863e:	2300      	movs	r3, #0
 8018640:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 8018642:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8018646:	f04f 0200 	mov.w	r2, #0
 801864a:	4933      	ldr	r1, [pc, #204]	; (8018718 <RegionUS915TxConfig+0x14c>)
 801864c:	4618      	mov	r0, r3
 801864e:	f7fd fe8b 	bl	8016368 <RegionCommonComputeTxPower>
 8018652:	4603      	mov	r3, r0
 8018654:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8018656:	4b31      	ldr	r3, [pc, #196]	; (801871c <RegionUS915TxConfig+0x150>)
 8018658:	68da      	ldr	r2, [r3, #12]
 801865a:	4b2d      	ldr	r3, [pc, #180]	; (8018710 <RegionUS915TxConfig+0x144>)
 801865c:	6819      	ldr	r1, [r3, #0]
 801865e:	68fb      	ldr	r3, [r7, #12]
 8018660:	781b      	ldrb	r3, [r3, #0]
 8018662:	4618      	mov	r0, r3
 8018664:	4603      	mov	r3, r0
 8018666:	005b      	lsls	r3, r3, #1
 8018668:	4403      	add	r3, r0
 801866a:	009b      	lsls	r3, r3, #2
 801866c:	440b      	add	r3, r1
 801866e:	681b      	ldr	r3, [r3, #0]
 8018670:	4618      	mov	r0, r3
 8018672:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8018674:	4b29      	ldr	r3, [pc, #164]	; (801871c <RegionUS915TxConfig+0x150>)
 8018676:	69dc      	ldr	r4, [r3, #28]
 8018678:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801867c:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8018680:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8018684:	9208      	str	r2, [sp, #32]
 8018686:	2200      	movs	r2, #0
 8018688:	9207      	str	r2, [sp, #28]
 801868a:	2200      	movs	r2, #0
 801868c:	9206      	str	r2, [sp, #24]
 801868e:	2200      	movs	r2, #0
 8018690:	9205      	str	r2, [sp, #20]
 8018692:	2201      	movs	r2, #1
 8018694:	9204      	str	r2, [sp, #16]
 8018696:	2200      	movs	r2, #0
 8018698:	9203      	str	r2, [sp, #12]
 801869a:	2208      	movs	r2, #8
 801869c:	9202      	str	r2, [sp, #8]
 801869e:	2201      	movs	r2, #1
 80186a0:	9201      	str	r2, [sp, #4]
 80186a2:	9300      	str	r3, [sp, #0]
 80186a4:	69bb      	ldr	r3, [r7, #24]
 80186a6:	2200      	movs	r2, #0
 80186a8:	2001      	movs	r0, #1
 80186aa:	47a0      	blx	r4
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 80186ac:	4b18      	ldr	r3, [pc, #96]	; (8018710 <RegionUS915TxConfig+0x144>)
 80186ae:	681a      	ldr	r2, [r3, #0]
 80186b0:	68fb      	ldr	r3, [r7, #12]
 80186b2:	781b      	ldrb	r3, [r3, #0]
 80186b4:	4619      	mov	r1, r3
 80186b6:	460b      	mov	r3, r1
 80186b8:	005b      	lsls	r3, r3, #1
 80186ba:	440b      	add	r3, r1
 80186bc:	009b      	lsls	r3, r3, #2
 80186be:	4413      	add	r3, r2
 80186c0:	681a      	ldr	r2, [r3, #0]
 80186c2:	68fb      	ldr	r3, [r7, #12]
 80186c4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80186c8:	4619      	mov	r1, r3
 80186ca:	4610      	mov	r0, r2
 80186cc:	f7fe f840 	bl	8016750 <RegionCommonTxConfigPrint>

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 80186d0:	4b12      	ldr	r3, [pc, #72]	; (801871c <RegionUS915TxConfig+0x150>)
 80186d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80186d4:	68fa      	ldr	r2, [r7, #12]
 80186d6:	8992      	ldrh	r2, [r2, #12]
 80186d8:	b2d2      	uxtb	r2, r2
 80186da:	4611      	mov	r1, r2
 80186dc:	2001      	movs	r0, #1
 80186de:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 80186e0:	68fb      	ldr	r3, [r7, #12]
 80186e2:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80186e6:	68fb      	ldr	r3, [r7, #12]
 80186e8:	899b      	ldrh	r3, [r3, #12]
 80186ea:	4619      	mov	r1, r3
 80186ec:	4610      	mov	r0, r2
 80186ee:	f7ff fa63 	bl	8017bb8 <GetTimeOnAir>
 80186f2:	4602      	mov	r2, r0
 80186f4:	687b      	ldr	r3, [r7, #4]
 80186f6:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 80186f8:	68bb      	ldr	r3, [r7, #8]
 80186fa:	7fba      	ldrb	r2, [r7, #30]
 80186fc:	701a      	strb	r2, [r3, #0]
    return true;
 80186fe:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8018700:	4618      	mov	r0, r3
 8018702:	3724      	adds	r7, #36	; 0x24
 8018704:	46bd      	mov	sp, r7
 8018706:	bd90      	pop	{r4, r7, pc}
 8018708:	0801eaec 	.word	0x0801eaec
 801870c:	20001ae0 	.word	0x20001ae0
 8018710:	20001adc 	.word	0x20001adc
 8018714:	0801eafc 	.word	0x0801eafc
 8018718:	41f00000 	.word	0x41f00000
 801871c:	0801eb70 	.word	0x0801eb70

08018720 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8018720:	b590      	push	{r4, r7, lr}
 8018722:	b097      	sub	sp, #92	; 0x5c
 8018724:	af00      	add	r7, sp, #0
 8018726:	60f8      	str	r0, [r7, #12]
 8018728:	60b9      	str	r1, [r7, #8]
 801872a:	607a      	str	r2, [r7, #4]
 801872c:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 801872e:	2307      	movs	r3, #7
 8018730:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8018734:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8018738:	2200      	movs	r2, #0
 801873a:	601a      	str	r2, [r3, #0]
 801873c:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 801873e:	2300      	movs	r3, #0
 8018740:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    uint8_t bytesProcessed = 0;
 8018744:	2300      	movs	r3, #0
 8018746:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 801874a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801874e:	2200      	movs	r2, #0
 8018750:	601a      	str	r2, [r3, #0]
 8018752:	605a      	str	r2, [r3, #4]
 8018754:	609a      	str	r2, [r3, #8]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 8018756:	4b97      	ldr	r3, [pc, #604]	; (80189b4 <RegionUS915LinkAdrReq+0x294>)
 8018758:	681b      	ldr	r3, [r3, #0]
 801875a:	f503 7158 	add.w	r1, r3, #864	; 0x360
 801875e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018762:	2206      	movs	r2, #6
 8018764:	4618      	mov	r0, r3
 8018766:	f7fd fb03 	bl	8015d70 <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801876a:	e11b      	b.n	80189a4 <RegionUS915LinkAdrReq+0x284>
    {
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 801876c:	68fb      	ldr	r3, [r7, #12]
 801876e:	685a      	ldr	r2, [r3, #4]
 8018770:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8018774:	4413      	add	r3, r2
 8018776:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801877a:	4611      	mov	r1, r2
 801877c:	4618      	mov	r0, r3
 801877e:	f7fd fc3b 	bl	8015ff8 <RegionCommonParseLinkAdrReq>
 8018782:	4603      	mov	r3, r0
 8018784:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

        if( nextIndex == 0 )
 8018788:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 801878c:	2b00      	cmp	r3, #0
 801878e:	f000 8113 	beq.w	80189b8 <RegionUS915LinkAdrReq+0x298>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8018792:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8018796:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 801879a:	4413      	add	r3, r2
 801879c:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 80187a0:	2307      	movs	r3, #7
 80187a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

        if( linkAdrParams.ChMaskCtrl == 6 )
 80187a6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80187aa:	2b06      	cmp	r3, #6
 80187ac:	d116      	bne.n	80187dc <RegionUS915LinkAdrReq+0xbc>
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 80187ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80187b2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            channelsMask[1] = 0xFFFF;
 80187b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80187ba:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            channelsMask[2] = 0xFFFF;
 80187be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80187c2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            channelsMask[3] = 0xFFFF;
 80187c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80187ca:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 80187ce:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80187d2:	b2db      	uxtb	r3, r3
 80187d4:	b29b      	uxth	r3, r3
 80187d6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80187da:	e0e3      	b.n	80189a4 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 80187dc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80187e0:	2b07      	cmp	r3, #7
 80187e2:	d112      	bne.n	801880a <RegionUS915LinkAdrReq+0xea>
        {
            // Disable all 125 kHz channels
            channelsMask[0] = 0x0000;
 80187e4:	2300      	movs	r3, #0
 80187e6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            channelsMask[1] = 0x0000;
 80187ea:	2300      	movs	r3, #0
 80187ec:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            channelsMask[2] = 0x0000;
 80187f0:	2300      	movs	r3, #0
 80187f2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            channelsMask[3] = 0x0000;
 80187f6:	2300      	movs	r3, #0
 80187f8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 80187fc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8018800:	b2db      	uxtb	r3, r3
 8018802:	b29b      	uxth	r3, r3
 8018804:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8018808:	e0cc      	b.n	80189a4 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 801880a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801880e:	2b05      	cmp	r3, #5
 8018810:	f040 80bf 	bne.w	8018992 <RegionUS915LinkAdrReq+0x272>
        {
            // Start value for comparison
            uint8_t bitMask = 1;
 8018814:	2301      	movs	r3, #1
 8018816:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52

            // cntChannelMask for channelsMask[0] until channelsMask[3]
            uint8_t cntChannelMask = 0;
 801881a:	2300      	movs	r3, #0
 801881c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

            // i will be 1, 2, 3, ..., 7
            for( uint8_t i = 0; i <= 7; i++ )
 8018820:	2300      	movs	r3, #0
 8018822:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 8018826:	e0ae      	b.n	8018986 <RegionUS915LinkAdrReq+0x266>
            {
                // 8 MSBs of ChMask are RFU
                // Checking if the ChMask is set, then true
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 8018828:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 801882c:	b2da      	uxtb	r2, r3
 801882e:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 8018832:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8018836:	fa01 f303 	lsl.w	r3, r1, r3
 801883a:	4013      	ands	r3, r2
 801883c:	2b00      	cmp	r3, #0
 801883e:	d04d      	beq.n	80188dc <RegionUS915LinkAdrReq+0x1bc>
                {
                    if( ( i % 2 ) == 0 )
 8018840:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8018844:	f003 0301 	and.w	r3, r3, #1
 8018848:	b2db      	uxtb	r3, r3
 801884a:	2b00      	cmp	r3, #0
 801884c:	d120      	bne.n	8018890 <RegionUS915LinkAdrReq+0x170>
                    {
                        // Enable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] |= 0x00FF;
 801884e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8018852:	005b      	lsls	r3, r3, #1
 8018854:	3358      	adds	r3, #88	; 0x58
 8018856:	443b      	add	r3, r7
 8018858:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801885c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8018860:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 8018864:	b292      	uxth	r2, r2
 8018866:	005b      	lsls	r3, r3, #1
 8018868:	3358      	adds	r3, #88	; 0x58
 801886a:	443b      	add	r3, r7
 801886c:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 8018870:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8018874:	b21a      	sxth	r2, r3
 8018876:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801887a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801887e:	fa01 f303 	lsl.w	r3, r1, r3
 8018882:	b21b      	sxth	r3, r3
 8018884:	4313      	orrs	r3, r2
 8018886:	b21b      	sxth	r3, r3
 8018888:	b29b      	uxth	r3, r3
 801888a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801888e:	e075      	b.n	801897c <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] |= 0xFF00;
 8018890:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8018894:	005b      	lsls	r3, r3, #1
 8018896:	3358      	adds	r3, #88	; 0x58
 8018898:	443b      	add	r3, r7
 801889a:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801889e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80188a2:	f062 02ff 	orn	r2, r2, #255	; 0xff
 80188a6:	b292      	uxth	r2, r2
 80188a8:	005b      	lsls	r3, r3, #1
 80188aa:	3358      	adds	r3, #88	; 0x58
 80188ac:	443b      	add	r3, r7
 80188ae:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 80188b2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80188b6:	b21a      	sxth	r2, r3
 80188b8:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 80188bc:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80188c0:	fa01 f303 	lsl.w	r3, r1, r3
 80188c4:	b21b      	sxth	r3, r3
 80188c6:	4313      	orrs	r3, r2
 80188c8:	b21b      	sxth	r3, r3
 80188ca:	b29b      	uxth	r3, r3
 80188cc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 80188d0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80188d4:	3301      	adds	r3, #1
 80188d6:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 80188da:	e04f      	b.n	801897c <RegionUS915LinkAdrReq+0x25c>
                    }
                }
                // ChMask is not set
                else
                {
                    if( ( i % 2 ) == 0 )
 80188dc:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80188e0:	f003 0301 	and.w	r3, r3, #1
 80188e4:	b2db      	uxtb	r3, r3
 80188e6:	2b00      	cmp	r3, #0
 80188e8:	d122      	bne.n	8018930 <RegionUS915LinkAdrReq+0x210>
                    {
                        // Disable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] &= 0xFF00;
 80188ea:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80188ee:	005b      	lsls	r3, r3, #1
 80188f0:	3358      	adds	r3, #88	; 0x58
 80188f2:	443b      	add	r3, r7
 80188f4:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 80188f8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80188fc:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8018900:	b292      	uxth	r2, r2
 8018902:	005b      	lsls	r3, r3, #1
 8018904:	3358      	adds	r3, #88	; 0x58
 8018906:	443b      	add	r3, r7
 8018908:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 801890c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8018910:	b21a      	sxth	r2, r3
 8018912:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 8018916:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801891a:	fa01 f303 	lsl.w	r3, r1, r3
 801891e:	b21b      	sxth	r3, r3
 8018920:	43db      	mvns	r3, r3
 8018922:	b21b      	sxth	r3, r3
 8018924:	4013      	ands	r3, r2
 8018926:	b21b      	sxth	r3, r3
 8018928:	b29b      	uxth	r3, r3
 801892a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801892e:	e025      	b.n	801897c <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] &= 0x00FF;
 8018930:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8018934:	005b      	lsls	r3, r3, #1
 8018936:	3358      	adds	r3, #88	; 0x58
 8018938:	443b      	add	r3, r7
 801893a:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801893e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8018942:	b2d2      	uxtb	r2, r2
 8018944:	b292      	uxth	r2, r2
 8018946:	005b      	lsls	r3, r3, #1
 8018948:	3358      	adds	r3, #88	; 0x58
 801894a:	443b      	add	r3, r7
 801894c:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 8018950:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8018954:	b21a      	sxth	r2, r3
 8018956:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801895a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801895e:	fa01 f303 	lsl.w	r3, r1, r3
 8018962:	b21b      	sxth	r3, r3
 8018964:	43db      	mvns	r3, r3
 8018966:	b21b      	sxth	r3, r3
 8018968:	4013      	ands	r3, r2
 801896a:	b21b      	sxth	r3, r3
 801896c:	b29b      	uxth	r3, r3
 801896e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 8018972:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8018976:	3301      	adds	r3, #1
 8018978:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
            for( uint8_t i = 0; i <= 7; i++ )
 801897c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8018980:	3301      	adds	r3, #1
 8018982:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 8018986:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801898a:	2b07      	cmp	r3, #7
 801898c:	f67f af4c 	bls.w	8018828 <RegionUS915LinkAdrReq+0x108>
 8018990:	e008      	b.n	80189a4 <RegionUS915LinkAdrReq+0x284>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 8018992:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8018996:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 801899a:	005b      	lsls	r3, r3, #1
 801899c:	3358      	adds	r3, #88	; 0x58
 801899e:	443b      	add	r3, r7
 80189a0:	f823 2c18 	strh.w	r2, [r3, #-24]
    while( bytesProcessed < linkAdrReq->PayloadSize )
 80189a4:	68fb      	ldr	r3, [r7, #12]
 80189a6:	7a1b      	ldrb	r3, [r3, #8]
 80189a8:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 80189ac:	429a      	cmp	r2, r3
 80189ae:	f4ff aedd 	bcc.w	801876c <RegionUS915LinkAdrReq+0x4c>
 80189b2:	e002      	b.n	80189ba <RegionUS915LinkAdrReq+0x29a>
 80189b4:	20001adc 	.word	0x20001adc
            break; // break loop, since no more request has been found
 80189b8:	bf00      	nop
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 80189ba:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 80189be:	2b03      	cmp	r3, #3
 80189c0:	dc0f      	bgt.n	80189e2 <RegionUS915LinkAdrReq+0x2c2>
 80189c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80189c6:	2204      	movs	r2, #4
 80189c8:	2100      	movs	r1, #0
 80189ca:	4618      	mov	r0, r3
 80189cc:	f7fd f9a4 	bl	8015d18 <RegionCommonCountChannels>
 80189d0:	4603      	mov	r3, r0
 80189d2:	2b01      	cmp	r3, #1
 80189d4:	d805      	bhi.n	80189e2 <RegionUS915LinkAdrReq+0x2c2>
    {
        status &= 0xFE; // Channel mask KO
 80189d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80189da:	f023 0301 	bic.w	r3, r3, #1
 80189de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 80189e2:	2302      	movs	r3, #2
 80189e4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 80189e8:	68fb      	ldr	r3, [r7, #12]
 80189ea:	7a5b      	ldrb	r3, [r3, #9]
 80189ec:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
    phyParam = RegionUS915GetPhyParam( &getPhy );
 80189f0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80189f4:	4618      	mov	r0, r3
 80189f6:	f7ff f90f 	bl	8017c18 <RegionUS915GetPhyParam>
 80189fa:	4603      	mov	r3, r0
 80189fc:	637b      	str	r3, [r7, #52]	; 0x34

    linkAdrVerifyParams.Status = status;
 80189fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018a02:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8018a04:	68fb      	ldr	r3, [r7, #12]
 8018a06:	7a9b      	ldrb	r3, [r3, #10]
 8018a08:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8018a0a:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8018a0e:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8018a10:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8018a14:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8018a16:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8018a1a:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8018a1c:	68fb      	ldr	r3, [r7, #12]
 8018a1e:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8018a22:	777b      	strb	r3, [r7, #29]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8018a24:	68fb      	ldr	r3, [r7, #12]
 8018a26:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8018a2a:	77bb      	strb	r3, [r7, #30]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8018a2c:	68fb      	ldr	r3, [r7, #12]
 8018a2e:	7b5b      	ldrb	r3, [r3, #13]
 8018a30:	b25b      	sxtb	r3, r3
 8018a32:	77fb      	strb	r3, [r7, #31]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 8018a34:	2348      	movs	r3, #72	; 0x48
 8018a36:	f887 3020 	strb.w	r3, [r7, #32]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 8018a3a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018a3e:	627b      	str	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8018a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018a42:	b25b      	sxtb	r3, r3
 8018a44:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 8018a48:	2304      	movs	r3, #4
 8018a4a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8018a4e:	4b3f      	ldr	r3, [pc, #252]	; (8018b4c <RegionUS915LinkAdrReq+0x42c>)
 8018a50:	681b      	ldr	r3, [r3, #0]
 8018a52:	62fb      	str	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 8018a54:	230e      	movs	r3, #14
 8018a56:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 8018a5a:	2300      	movs	r3, #0
 8018a5c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8018a60:	68fb      	ldr	r3, [r7, #12]
 8018a62:	681b      	ldr	r3, [r3, #0]
 8018a64:	617b      	str	r3, [r7, #20]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8018a66:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8018a6a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8018a6e:	1c9a      	adds	r2, r3, #2
 8018a70:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8018a74:	1c59      	adds	r1, r3, #1
 8018a76:	f107 0014 	add.w	r0, r7, #20
 8018a7a:	4623      	mov	r3, r4
 8018a7c:	f7fd fb0d 	bl	801609a <RegionCommonLinkAdrReqVerifyParams>
 8018a80:	4603      	mov	r3, r0
 8018a82:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8018a86:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018a8a:	2b07      	cmp	r3, #7
 8018a8c:	d147      	bne.n	8018b1e <RegionUS915LinkAdrReq+0x3fe>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 8018a8e:	4b2f      	ldr	r3, [pc, #188]	; (8018b4c <RegionUS915LinkAdrReq+0x42c>)
 8018a90:	681b      	ldr	r3, [r3, #0]
 8018a92:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8018a96:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8018a9a:	2206      	movs	r2, #6
 8018a9c:	4618      	mov	r0, r3
 8018a9e:	f7fd f967 	bl	8015d70 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 8018aa2:	4b2b      	ldr	r3, [pc, #172]	; (8018b50 <RegionUS915LinkAdrReq+0x430>)
 8018aa4:	681b      	ldr	r3, [r3, #0]
 8018aa6:	8819      	ldrh	r1, [r3, #0]
 8018aa8:	4b28      	ldr	r3, [pc, #160]	; (8018b4c <RegionUS915LinkAdrReq+0x42c>)
 8018aaa:	681b      	ldr	r3, [r3, #0]
 8018aac:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 8018ab0:	4b27      	ldr	r3, [pc, #156]	; (8018b50 <RegionUS915LinkAdrReq+0x430>)
 8018ab2:	681b      	ldr	r3, [r3, #0]
 8018ab4:	400a      	ands	r2, r1
 8018ab6:	b292      	uxth	r2, r2
 8018ab8:	801a      	strh	r2, [r3, #0]
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 8018aba:	4b25      	ldr	r3, [pc, #148]	; (8018b50 <RegionUS915LinkAdrReq+0x430>)
 8018abc:	681b      	ldr	r3, [r3, #0]
 8018abe:	8859      	ldrh	r1, [r3, #2]
 8018ac0:	4b22      	ldr	r3, [pc, #136]	; (8018b4c <RegionUS915LinkAdrReq+0x42c>)
 8018ac2:	681b      	ldr	r3, [r3, #0]
 8018ac4:	f8b3 2362 	ldrh.w	r2, [r3, #866]	; 0x362
 8018ac8:	4b21      	ldr	r3, [pc, #132]	; (8018b50 <RegionUS915LinkAdrReq+0x430>)
 8018aca:	681b      	ldr	r3, [r3, #0]
 8018acc:	400a      	ands	r2, r1
 8018ace:	b292      	uxth	r2, r2
 8018ad0:	805a      	strh	r2, [r3, #2]
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 8018ad2:	4b1f      	ldr	r3, [pc, #124]	; (8018b50 <RegionUS915LinkAdrReq+0x430>)
 8018ad4:	681b      	ldr	r3, [r3, #0]
 8018ad6:	8899      	ldrh	r1, [r3, #4]
 8018ad8:	4b1c      	ldr	r3, [pc, #112]	; (8018b4c <RegionUS915LinkAdrReq+0x42c>)
 8018ada:	681b      	ldr	r3, [r3, #0]
 8018adc:	f8b3 2364 	ldrh.w	r2, [r3, #868]	; 0x364
 8018ae0:	4b1b      	ldr	r3, [pc, #108]	; (8018b50 <RegionUS915LinkAdrReq+0x430>)
 8018ae2:	681b      	ldr	r3, [r3, #0]
 8018ae4:	400a      	ands	r2, r1
 8018ae6:	b292      	uxth	r2, r2
 8018ae8:	809a      	strh	r2, [r3, #4]
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 8018aea:	4b19      	ldr	r3, [pc, #100]	; (8018b50 <RegionUS915LinkAdrReq+0x430>)
 8018aec:	681b      	ldr	r3, [r3, #0]
 8018aee:	88d9      	ldrh	r1, [r3, #6]
 8018af0:	4b16      	ldr	r3, [pc, #88]	; (8018b4c <RegionUS915LinkAdrReq+0x42c>)
 8018af2:	681b      	ldr	r3, [r3, #0]
 8018af4:	f8b3 2366 	ldrh.w	r2, [r3, #870]	; 0x366
 8018af8:	4b15      	ldr	r3, [pc, #84]	; (8018b50 <RegionUS915LinkAdrReq+0x430>)
 8018afa:	681b      	ldr	r3, [r3, #0]
 8018afc:	400a      	ands	r2, r1
 8018afe:	b292      	uxth	r2, r2
 8018b00:	80da      	strh	r2, [r3, #6]
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8018b02:	4b12      	ldr	r3, [pc, #72]	; (8018b4c <RegionUS915LinkAdrReq+0x42c>)
 8018b04:	681a      	ldr	r2, [r3, #0]
 8018b06:	4b12      	ldr	r3, [pc, #72]	; (8018b50 <RegionUS915LinkAdrReq+0x430>)
 8018b08:	681b      	ldr	r3, [r3, #0]
 8018b0a:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 8018b0e:	811a      	strh	r2, [r3, #8]
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 8018b10:	4b0e      	ldr	r3, [pc, #56]	; (8018b4c <RegionUS915LinkAdrReq+0x42c>)
 8018b12:	681a      	ldr	r2, [r3, #0]
 8018b14:	4b0e      	ldr	r3, [pc, #56]	; (8018b50 <RegionUS915LinkAdrReq+0x430>)
 8018b16:	681b      	ldr	r3, [r3, #0]
 8018b18:	f8b2 236a 	ldrh.w	r2, [r2, #874]	; 0x36a
 8018b1c:	815a      	strh	r2, [r3, #10]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8018b1e:	f997 204d 	ldrsb.w	r2, [r7, #77]	; 0x4d
 8018b22:	68bb      	ldr	r3, [r7, #8]
 8018b24:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8018b26:	f997 204e 	ldrsb.w	r2, [r7, #78]	; 0x4e
 8018b2a:	687b      	ldr	r3, [r7, #4]
 8018b2c:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8018b2e:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8018b32:	683b      	ldr	r3, [r7, #0]
 8018b34:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8018b36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018b38:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8018b3c:	701a      	strb	r2, [r3, #0]

#endif /* REGION_US915 */
    return status;
 8018b3e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8018b42:	4618      	mov	r0, r3
 8018b44:	375c      	adds	r7, #92	; 0x5c
 8018b46:	46bd      	mov	sp, r7
 8018b48:	bd90      	pop	{r4, r7, pc}
 8018b4a:	bf00      	nop
 8018b4c:	20001adc 	.word	0x20001adc
 8018b50:	20001ad8 	.word	0x20001ad8

08018b54 <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8018b54:	b580      	push	{r7, lr}
 8018b56:	b084      	sub	sp, #16
 8018b58:	af00      	add	r7, sp, #0
 8018b5a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8018b5c:	2307      	movs	r3, #7
 8018b5e:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8018b60:	687b      	ldr	r3, [r7, #4]
 8018b62:	685b      	ldr	r3, [r3, #4]
 8018b64:	4618      	mov	r0, r3
 8018b66:	f7fe ffe3 	bl	8017b30 <VerifyRfFreq>
 8018b6a:	4603      	mov	r3, r0
 8018b6c:	f083 0301 	eor.w	r3, r3, #1
 8018b70:	b2db      	uxtb	r3, r3
 8018b72:	2b00      	cmp	r3, #0
 8018b74:	d003      	beq.n	8018b7e <RegionUS915RxParamSetupReq+0x2a>
    {
        status &= 0xFE; // Channel frequency KO
 8018b76:	7bfb      	ldrb	r3, [r7, #15]
 8018b78:	f023 0301 	bic.w	r3, r3, #1
 8018b7c:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 8018b7e:	687b      	ldr	r3, [r7, #4]
 8018b80:	f993 3000 	ldrsb.w	r3, [r3]
 8018b84:	220d      	movs	r2, #13
 8018b86:	2108      	movs	r1, #8
 8018b88:	4618      	mov	r0, r3
 8018b8a:	f7fd f874 	bl	8015c76 <RegionCommonValueInRange>
 8018b8e:	4603      	mov	r3, r0
 8018b90:	2b00      	cmp	r3, #0
 8018b92:	d103      	bne.n	8018b9c <RegionUS915RxParamSetupReq+0x48>
    {
        status &= 0xFD; // Datarate KO
 8018b94:	7bfb      	ldrb	r3, [r7, #15]
 8018b96:	f023 0302 	bic.w	r3, r3, #2
 8018b9a:	73fb      	strb	r3, [r7, #15]
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8018b9c:	687b      	ldr	r3, [r7, #4]
 8018b9e:	f993 3000 	ldrsb.w	r3, [r3]
 8018ba2:	2207      	movs	r2, #7
 8018ba4:	2105      	movs	r1, #5
 8018ba6:	4618      	mov	r0, r3
 8018ba8:	f7fd f865 	bl	8015c76 <RegionCommonValueInRange>
 8018bac:	4603      	mov	r3, r0
 8018bae:	2b01      	cmp	r3, #1
 8018bb0:	d004      	beq.n	8018bbc <RegionUS915RxParamSetupReq+0x68>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 8018bb2:	687b      	ldr	r3, [r7, #4]
 8018bb4:	f993 3000 	ldrsb.w	r3, [r3]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8018bb8:	2b0d      	cmp	r3, #13
 8018bba:	dd03      	ble.n	8018bc4 <RegionUS915RxParamSetupReq+0x70>
    {
        status &= 0xFD; // Datarate KO
 8018bbc:	7bfb      	ldrb	r3, [r7, #15]
 8018bbe:	f023 0302 	bic.w	r3, r3, #2
 8018bc2:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 8018bc4:	687b      	ldr	r3, [r7, #4]
 8018bc6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018bca:	2203      	movs	r2, #3
 8018bcc:	2100      	movs	r1, #0
 8018bce:	4618      	mov	r0, r3
 8018bd0:	f7fd f851 	bl	8015c76 <RegionCommonValueInRange>
 8018bd4:	4603      	mov	r3, r0
 8018bd6:	2b00      	cmp	r3, #0
 8018bd8:	d103      	bne.n	8018be2 <RegionUS915RxParamSetupReq+0x8e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8018bda:	7bfb      	ldrb	r3, [r7, #15]
 8018bdc:	f023 0304 	bic.w	r3, r3, #4
 8018be0:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_US915 */
    return status;
 8018be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8018be4:	4618      	mov	r0, r3
 8018be6:	3710      	adds	r7, #16
 8018be8:	46bd      	mov	sp, r7
 8018bea:	bd80      	pop	{r7, pc}

08018bec <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8018bec:	b480      	push	{r7}
 8018bee:	b083      	sub	sp, #12
 8018bf0:	af00      	add	r7, sp, #0
 8018bf2:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8018bf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8018bf8:	4618      	mov	r0, r3
 8018bfa:	370c      	adds	r7, #12
 8018bfc:	46bd      	mov	sp, r7
 8018bfe:	bc80      	pop	{r7}
 8018c00:	4770      	bx	lr

08018c02 <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8018c02:	b480      	push	{r7}
 8018c04:	b083      	sub	sp, #12
 8018c06:	af00      	add	r7, sp, #0
 8018c08:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8018c0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8018c0e:	4618      	mov	r0, r3
 8018c10:	370c      	adds	r7, #12
 8018c12:	46bd      	mov	sp, r7
 8018c14:	bc80      	pop	{r7}
 8018c16:	4770      	bx	lr

08018c18 <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8018c18:	b480      	push	{r7}
 8018c1a:	b083      	sub	sp, #12
 8018c1c:	af00      	add	r7, sp, #0
 8018c1e:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8018c20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8018c24:	4618      	mov	r0, r3
 8018c26:	370c      	adds	r7, #12
 8018c28:	46bd      	mov	sp, r7
 8018c2a:	bc80      	pop	{r7}
 8018c2c:	4770      	bx	lr
	...

08018c30 <RegionUS915AlternateDr>:

int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8018c30:	b480      	push	{r7}
 8018c32:	b083      	sub	sp, #12
 8018c34:	af00      	add	r7, sp, #0
 8018c36:	4603      	mov	r3, r0
 8018c38:	460a      	mov	r2, r1
 8018c3a:	71fb      	strb	r3, [r7, #7]
 8018c3c:	4613      	mov	r3, r2
 8018c3e:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 8018c40:	79bb      	ldrb	r3, [r7, #6]
 8018c42:	2b00      	cmp	r3, #0
 8018c44:	d106      	bne.n	8018c54 <RegionUS915AlternateDr+0x24>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 8018c46:	4b13      	ldr	r3, [pc, #76]	; (8018c94 <RegionUS915AlternateDr+0x64>)
 8018c48:	681b      	ldr	r3, [r3, #0]
 8018c4a:	7b5a      	ldrb	r2, [r3, #13]
 8018c4c:	3201      	adds	r2, #1
 8018c4e:	b2d2      	uxtb	r2, r2
 8018c50:	735a      	strb	r2, [r3, #13]
 8018c52:	e005      	b.n	8018c60 <RegionUS915AlternateDr+0x30>
    }
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
 8018c54:	4b0f      	ldr	r3, [pc, #60]	; (8018c94 <RegionUS915AlternateDr+0x64>)
 8018c56:	681b      	ldr	r3, [r3, #0]
 8018c58:	7b5a      	ldrb	r2, [r3, #13]
 8018c5a:	3a01      	subs	r2, #1
 8018c5c:	b2d2      	uxtb	r2, r2
 8018c5e:	735a      	strb	r2, [r3, #13]
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 8018c60:	4b0c      	ldr	r3, [pc, #48]	; (8018c94 <RegionUS915AlternateDr+0x64>)
 8018c62:	681b      	ldr	r3, [r3, #0]
 8018c64:	7b5a      	ldrb	r2, [r3, #13]
 8018c66:	4b0c      	ldr	r3, [pc, #48]	; (8018c98 <RegionUS915AlternateDr+0x68>)
 8018c68:	fba3 1302 	umull	r1, r3, r3, r2
 8018c6c:	0859      	lsrs	r1, r3, #1
 8018c6e:	460b      	mov	r3, r1
 8018c70:	00db      	lsls	r3, r3, #3
 8018c72:	440b      	add	r3, r1
 8018c74:	1ad3      	subs	r3, r2, r3
 8018c76:	b2db      	uxtb	r3, r3
 8018c78:	2b00      	cmp	r3, #0
 8018c7a:	d102      	bne.n	8018c82 <RegionUS915AlternateDr+0x52>
    {
        // Use DR_4 every 9th times.
        currentDr = DR_4;
 8018c7c:	2304      	movs	r3, #4
 8018c7e:	71fb      	strb	r3, [r7, #7]
 8018c80:	e001      	b.n	8018c86 <RegionUS915AlternateDr+0x56>
    }
    else
    {
        currentDr = DR_0;
 8018c82:	2300      	movs	r3, #0
 8018c84:	71fb      	strb	r3, [r7, #7]
    }
    return currentDr;
 8018c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_US915 */
}
 8018c8a:	4618      	mov	r0, r3
 8018c8c:	370c      	adds	r7, #12
 8018c8e:	46bd      	mov	sp, r7
 8018c90:	bc80      	pop	{r7}
 8018c92:	4770      	bx	lr
 8018c94:	20001ad8 	.word	0x20001ad8
 8018c98:	38e38e39 	.word	0x38e38e39

08018c9c <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8018c9c:	b580      	push	{r7, lr}
 8018c9e:	b0a8      	sub	sp, #160	; 0xa0
 8018ca0:	af02      	add	r7, sp, #8
 8018ca2:	60f8      	str	r0, [r7, #12]
 8018ca4:	60b9      	str	r1, [r7, #8]
 8018ca6:	607a      	str	r2, [r7, #4]
 8018ca8:	603b      	str	r3, [r7, #0]
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 8018caa:	2300      	movs	r3, #0
 8018cac:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
    uint8_t nbRestrictedChannels = 0;
 8018cb0:	2300      	movs	r3, #0
 8018cb2:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 8018cb6:	2300      	movs	r3, #0
 8018cb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018cba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8018cbe:	2244      	movs	r2, #68	; 0x44
 8018cc0:	2100      	movs	r1, #0
 8018cc2:	4618      	mov	r0, r3
 8018cc4:	f004 ff5e 	bl	801db84 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8018cc8:	230c      	movs	r3, #12
 8018cca:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 8018cce:	4b67      	ldr	r3, [pc, #412]	; (8018e6c <RegionUS915NextChannel+0x1d0>)
 8018cd0:	681b      	ldr	r3, [r3, #0]
 8018cd2:	2204      	movs	r2, #4
 8018cd4:	2100      	movs	r1, #0
 8018cd6:	4618      	mov	r0, r3
 8018cd8:	f7fd f81e 	bl	8015d18 <RegionCommonCountChannels>
 8018cdc:	4603      	mov	r3, r0
 8018cde:	2b00      	cmp	r3, #0
 8018ce0:	d10e      	bne.n	8018d00 <RegionUS915NextChannel+0x64>
    { // Reactivate default channels
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 8018ce2:	4b62      	ldr	r3, [pc, #392]	; (8018e6c <RegionUS915NextChannel+0x1d0>)
 8018ce4:	681b      	ldr	r3, [r3, #0]
 8018ce6:	4618      	mov	r0, r3
 8018ce8:	4b61      	ldr	r3, [pc, #388]	; (8018e70 <RegionUS915NextChannel+0x1d4>)
 8018cea:	681b      	ldr	r3, [r3, #0]
 8018cec:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8018cf0:	2204      	movs	r2, #4
 8018cf2:	4619      	mov	r1, r3
 8018cf4:	f7fd f83c 	bl	8015d70 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8018cf8:	4b5c      	ldr	r3, [pc, #368]	; (8018e6c <RegionUS915NextChannel+0x1d0>)
 8018cfa:	681b      	ldr	r3, [r3, #0]
 8018cfc:	2200      	movs	r2, #0
 8018cfe:	731a      	strb	r2, [r3, #12]
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 8018d00:	68fb      	ldr	r3, [r7, #12]
 8018d02:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018d06:	2b03      	cmp	r3, #3
 8018d08:	dd0c      	ble.n	8018d24 <RegionUS915NextChannel+0x88>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 8018d0a:	4b58      	ldr	r3, [pc, #352]	; (8018e6c <RegionUS915NextChannel+0x1d0>)
 8018d0c:	681b      	ldr	r3, [r3, #0]
 8018d0e:	891b      	ldrh	r3, [r3, #8]
 8018d10:	b2db      	uxtb	r3, r3
 8018d12:	2b00      	cmp	r3, #0
 8018d14:	d106      	bne.n	8018d24 <RegionUS915NextChannel+0x88>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8018d16:	4b56      	ldr	r3, [pc, #344]	; (8018e70 <RegionUS915NextChannel+0x1d4>)
 8018d18:	681a      	ldr	r2, [r3, #0]
 8018d1a:	4b54      	ldr	r3, [pc, #336]	; (8018e6c <RegionUS915NextChannel+0x1d0>)
 8018d1c:	681b      	ldr	r3, [r3, #0]
 8018d1e:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 8018d22:	811a      	strh	r2, [r3, #8]
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8018d24:	68fb      	ldr	r3, [r7, #12]
 8018d26:	7a5b      	ldrb	r3, [r3, #9]
 8018d28:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8018d2a:	68fb      	ldr	r3, [r7, #12]
 8018d2c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018d30:	b2db      	uxtb	r3, r3
 8018d32:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 8018d34:	4b4d      	ldr	r3, [pc, #308]	; (8018e6c <RegionUS915NextChannel+0x1d0>)
 8018d36:	681b      	ldr	r3, [r3, #0]
 8018d38:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8018d3a:	4b4d      	ldr	r3, [pc, #308]	; (8018e70 <RegionUS915NextChannel+0x1d4>)
 8018d3c:	681b      	ldr	r3, [r3, #0]
 8018d3e:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 8018d40:	4b4c      	ldr	r3, [pc, #304]	; (8018e74 <RegionUS915NextChannel+0x1d8>)
 8018d42:	681b      	ldr	r3, [r3, #0]
 8018d44:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 8018d46:	2348      	movs	r3, #72	; 0x48
 8018d48:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = NULL;
 8018d4a:	2300      	movs	r3, #0
 8018d4c:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8018d4e:	68fb      	ldr	r3, [r7, #12]
 8018d50:	681b      	ldr	r3, [r3, #0]
 8018d52:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8018d54:	68fb      	ldr	r3, [r7, #12]
 8018d56:	685b      	ldr	r3, [r3, #4]
 8018d58:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8018d5a:	68fb      	ldr	r3, [r7, #12]
 8018d5c:	7a9b      	ldrb	r3, [r3, #10]
 8018d5e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 8018d62:	2301      	movs	r3, #1
 8018d64:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8018d68:	f107 0314 	add.w	r3, r7, #20
 8018d6c:	64bb      	str	r3, [r7, #72]	; 0x48

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8018d6e:	68fa      	ldr	r2, [r7, #12]
 8018d70:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8018d74:	320c      	adds	r2, #12
 8018d76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018d7a:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8018d7e:	68fb      	ldr	r3, [r7, #12]
 8018d80:	7d1b      	ldrb	r3, [r3, #20]
 8018d82:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8018d86:	68fb      	ldr	r3, [r7, #12]
 8018d88:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8018d8c:	68fb      	ldr	r3, [r7, #12]
 8018d8e:	8adb      	ldrh	r3, [r3, #22]
 8018d90:	4619      	mov	r1, r3
 8018d92:	4610      	mov	r0, r2
 8018d94:	f7fe ff10 	bl	8017bb8 <GetTimeOnAir>
 8018d98:	4603      	mov	r3, r0
 8018d9a:	647b      	str	r3, [r7, #68]	; 0x44
#endif /* REGION_VERSION */

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8018d9c:	f107 0195 	add.w	r1, r7, #149	; 0x95
 8018da0:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8018da4:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8018da8:	687b      	ldr	r3, [r7, #4]
 8018daa:	9301      	str	r3, [sp, #4]
 8018dac:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8018db0:	9300      	str	r3, [sp, #0]
 8018db2:	460b      	mov	r3, r1
 8018db4:	6839      	ldr	r1, [r7, #0]
 8018db6:	f7fd fbc6 	bl	8016546 <RegionCommonIdentifyChannels>
 8018dba:	4603      	mov	r3, r0
 8018dbc:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8018dc0:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8018dc4:	2b00      	cmp	r3, #0
 8018dc6:	d14a      	bne.n	8018e5e <RegionUS915NextChannel+0x1c2>
    {
        if( nextChanParams->Joined == true )
 8018dc8:	68fb      	ldr	r3, [r7, #12]
 8018dca:	7a5b      	ldrb	r3, [r3, #9]
 8018dcc:	2b00      	cmp	r3, #0
 8018dce:	d00e      	beq.n	8018dee <RegionUS915NextChannel+0x152>
        {
            // Choose randomly on of the remaining channels
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8018dd0:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8018dd4:	3b01      	subs	r3, #1
 8018dd6:	4619      	mov	r1, r3
 8018dd8:	2000      	movs	r0, #0
 8018dda:	f000 f89f 	bl	8018f1c <randr>
 8018dde:	4603      	mov	r3, r0
 8018de0:	3398      	adds	r3, #152	; 0x98
 8018de2:	443b      	add	r3, r7
 8018de4:	f813 2c4c 	ldrb.w	r2, [r3, #-76]
 8018de8:	68bb      	ldr	r3, [r7, #8]
 8018dea:	701a      	strb	r2, [r3, #0]
 8018dec:	e02e      	b.n	8018e4c <RegionUS915NextChannel+0x1b0>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 8018dee:	68fb      	ldr	r3, [r7, #12]
 8018df0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018df4:	2b00      	cmp	r3, #0
 8018df6:	d10e      	bne.n	8018e16 <RegionUS915NextChannel+0x17a>
            {
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 8018df8:	4b1c      	ldr	r3, [pc, #112]	; (8018e6c <RegionUS915NextChannel+0x1d0>)
 8018dfa:	681b      	ldr	r3, [r3, #0]
 8018dfc:	4618      	mov	r0, r3
                    &RegionNvmGroup1->JoinChannelGroupsCurrentIndex, channel ) == LORAMAC_STATUS_PARAMETER_INVALID )
 8018dfe:	4b1b      	ldr	r3, [pc, #108]	; (8018e6c <RegionUS915NextChannel+0x1d0>)
 8018e00:	681b      	ldr	r3, [r3, #0]
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 8018e02:	330c      	adds	r3, #12
 8018e04:	68ba      	ldr	r2, [r7, #8]
 8018e06:	4619      	mov	r1, r3
 8018e08:	f7fc fcf0 	bl	80157ec <RegionBaseUSComputeNext125kHzJoinChannel>
 8018e0c:	4603      	mov	r3, r0
 8018e0e:	2b03      	cmp	r3, #3
 8018e10:	d11c      	bne.n	8018e4c <RegionUS915NextChannel+0x1b0>
                {
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 8018e12:	2303      	movs	r3, #3
 8018e14:	e025      	b.n	8018e62 <RegionUS915NextChannel+0x1c6>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 8018e16:	2300      	movs	r3, #0
 8018e18:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 8018e1c:	e004      	b.n	8018e28 <RegionUS915NextChannel+0x18c>
                {
                    i++;
 8018e1e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8018e22:	3301      	adds	r3, #1
 8018e24:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 8018e28:	4b10      	ldr	r3, [pc, #64]	; (8018e6c <RegionUS915NextChannel+0x1d0>)
 8018e2a:	681b      	ldr	r3, [r3, #0]
 8018e2c:	891b      	ldrh	r3, [r3, #8]
 8018e2e:	b2da      	uxtb	r2, r3
 8018e30:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8018e34:	fa42 f303 	asr.w	r3, r2, r3
 8018e38:	f003 0301 	and.w	r3, r3, #1
 8018e3c:	2b00      	cmp	r3, #0
 8018e3e:	d0ee      	beq.n	8018e1e <RegionUS915NextChannel+0x182>
                }
                *channel = 64 + i;
 8018e40:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8018e44:	3340      	adds	r3, #64	; 0x40
 8018e46:	b2da      	uxtb	r2, r3
 8018e48:	68bb      	ldr	r3, [r7, #8]
 8018e4a:	701a      	strb	r2, [r3, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 8018e4c:	4b07      	ldr	r3, [pc, #28]	; (8018e6c <RegionUS915NextChannel+0x1d0>)
 8018e4e:	681b      	ldr	r3, [r3, #0]
 8018e50:	4618      	mov	r0, r3
 8018e52:	68bb      	ldr	r3, [r7, #8]
 8018e54:	781b      	ldrb	r3, [r3, #0]
 8018e56:	2248      	movs	r2, #72	; 0x48
 8018e58:	4619      	mov	r1, r3
 8018e5a:	f7fc ff29 	bl	8015cb0 <RegionCommonChanDisable>
    }
    return status;
 8018e5e:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 8018e62:	4618      	mov	r0, r3
 8018e64:	3798      	adds	r7, #152	; 0x98
 8018e66:	46bd      	mov	sp, r7
 8018e68:	bd80      	pop	{r7, pc}
 8018e6a:	bf00      	nop
 8018e6c:	20001ad8 	.word	0x20001ad8
 8018e70:	20001adc 	.word	0x20001adc
 8018e74:	20001ae0 	.word	0x20001ae0

08018e78 <RegionUS915ApplyDrOffset>:
#endif /* REGION_US915 */
}
#endif /* REGION_VERSION */

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8018e78:	b480      	push	{r7}
 8018e7a:	b085      	sub	sp, #20
 8018e7c:	af00      	add	r7, sp, #0
 8018e7e:	4603      	mov	r3, r0
 8018e80:	71fb      	strb	r3, [r7, #7]
 8018e82:	460b      	mov	r3, r1
 8018e84:	71bb      	strb	r3, [r7, #6]
 8018e86:	4613      	mov	r3, r2
 8018e88:	717b      	strb	r3, [r7, #5]
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 8018e8a:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8018e8e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8018e92:	4909      	ldr	r1, [pc, #36]	; (8018eb8 <RegionUS915ApplyDrOffset+0x40>)
 8018e94:	0092      	lsls	r2, r2, #2
 8018e96:	440a      	add	r2, r1
 8018e98:	4413      	add	r3, r2
 8018e9a:	781b      	ldrb	r3, [r3, #0]
 8018e9c:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8018e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018ea2:	2b00      	cmp	r3, #0
 8018ea4:	da01      	bge.n	8018eaa <RegionUS915ApplyDrOffset+0x32>
    {
        datarate = DR_0;
 8018ea6:	2300      	movs	r3, #0
 8018ea8:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8018eaa:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_US915 */
}
 8018eac:	4618      	mov	r0, r3
 8018eae:	3714      	adds	r7, #20
 8018eb0:	46bd      	mov	sp, r7
 8018eb2:	bc80      	pop	{r7}
 8018eb4:	4770      	bx	lr
 8018eb6:	bf00      	nop
 8018eb8:	0801eb3c 	.word	0x0801eb3c

08018ebc <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8018ebc:	b480      	push	{r7}
 8018ebe:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8018ec0:	4b0d      	ldr	r3, [pc, #52]	; (8018ef8 <rand1+0x3c>)
 8018ec2:	681b      	ldr	r3, [r3, #0]
 8018ec4:	4a0d      	ldr	r2, [pc, #52]	; (8018efc <rand1+0x40>)
 8018ec6:	fb02 f303 	mul.w	r3, r2, r3
 8018eca:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8018ece:	3339      	adds	r3, #57	; 0x39
 8018ed0:	4a09      	ldr	r2, [pc, #36]	; (8018ef8 <rand1+0x3c>)
 8018ed2:	6013      	str	r3, [r2, #0]
 8018ed4:	4b08      	ldr	r3, [pc, #32]	; (8018ef8 <rand1+0x3c>)
 8018ed6:	681a      	ldr	r2, [r3, #0]
 8018ed8:	2303      	movs	r3, #3
 8018eda:	fba3 1302 	umull	r1, r3, r3, r2
 8018ede:	1ad1      	subs	r1, r2, r3
 8018ee0:	0849      	lsrs	r1, r1, #1
 8018ee2:	440b      	add	r3, r1
 8018ee4:	0f99      	lsrs	r1, r3, #30
 8018ee6:	460b      	mov	r3, r1
 8018ee8:	07db      	lsls	r3, r3, #31
 8018eea:	1a5b      	subs	r3, r3, r1
 8018eec:	1ad1      	subs	r1, r2, r3
 8018eee:	460b      	mov	r3, r1
}
 8018ef0:	4618      	mov	r0, r3
 8018ef2:	46bd      	mov	sp, r7
 8018ef4:	bc80      	pop	{r7}
 8018ef6:	4770      	bx	lr
 8018ef8:	20000130 	.word	0x20000130
 8018efc:	41c64e6d 	.word	0x41c64e6d

08018f00 <srand1>:

void srand1( uint32_t seed )
{
 8018f00:	b480      	push	{r7}
 8018f02:	b083      	sub	sp, #12
 8018f04:	af00      	add	r7, sp, #0
 8018f06:	6078      	str	r0, [r7, #4]
    next = seed;
 8018f08:	4a03      	ldr	r2, [pc, #12]	; (8018f18 <srand1+0x18>)
 8018f0a:	687b      	ldr	r3, [r7, #4]
 8018f0c:	6013      	str	r3, [r2, #0]
}
 8018f0e:	bf00      	nop
 8018f10:	370c      	adds	r7, #12
 8018f12:	46bd      	mov	sp, r7
 8018f14:	bc80      	pop	{r7}
 8018f16:	4770      	bx	lr
 8018f18:	20000130 	.word	0x20000130

08018f1c <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8018f1c:	b580      	push	{r7, lr}
 8018f1e:	b082      	sub	sp, #8
 8018f20:	af00      	add	r7, sp, #0
 8018f22:	6078      	str	r0, [r7, #4]
 8018f24:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8018f26:	f7ff ffc9 	bl	8018ebc <rand1>
 8018f2a:	4602      	mov	r2, r0
 8018f2c:	6839      	ldr	r1, [r7, #0]
 8018f2e:	687b      	ldr	r3, [r7, #4]
 8018f30:	1acb      	subs	r3, r1, r3
 8018f32:	3301      	adds	r3, #1
 8018f34:	fb92 f1f3 	sdiv	r1, r2, r3
 8018f38:	fb01 f303 	mul.w	r3, r1, r3
 8018f3c:	1ad2      	subs	r2, r2, r3
 8018f3e:	687b      	ldr	r3, [r7, #4]
 8018f40:	4413      	add	r3, r2
}
 8018f42:	4618      	mov	r0, r3
 8018f44:	3708      	adds	r7, #8
 8018f46:	46bd      	mov	sp, r7
 8018f48:	bd80      	pop	{r7, pc}

08018f4a <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8018f4a:	b480      	push	{r7}
 8018f4c:	b085      	sub	sp, #20
 8018f4e:	af00      	add	r7, sp, #0
 8018f50:	60f8      	str	r0, [r7, #12]
 8018f52:	60b9      	str	r1, [r7, #8]
 8018f54:	4613      	mov	r3, r2
 8018f56:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8018f58:	e007      	b.n	8018f6a <memcpy1+0x20>
    {
        *dst++ = *src++;
 8018f5a:	68ba      	ldr	r2, [r7, #8]
 8018f5c:	1c53      	adds	r3, r2, #1
 8018f5e:	60bb      	str	r3, [r7, #8]
 8018f60:	68fb      	ldr	r3, [r7, #12]
 8018f62:	1c59      	adds	r1, r3, #1
 8018f64:	60f9      	str	r1, [r7, #12]
 8018f66:	7812      	ldrb	r2, [r2, #0]
 8018f68:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8018f6a:	88fb      	ldrh	r3, [r7, #6]
 8018f6c:	1e5a      	subs	r2, r3, #1
 8018f6e:	80fa      	strh	r2, [r7, #6]
 8018f70:	2b00      	cmp	r3, #0
 8018f72:	d1f2      	bne.n	8018f5a <memcpy1+0x10>
    }
}
 8018f74:	bf00      	nop
 8018f76:	bf00      	nop
 8018f78:	3714      	adds	r7, #20
 8018f7a:	46bd      	mov	sp, r7
 8018f7c:	bc80      	pop	{r7}
 8018f7e:	4770      	bx	lr

08018f80 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8018f80:	b480      	push	{r7}
 8018f82:	b085      	sub	sp, #20
 8018f84:	af00      	add	r7, sp, #0
 8018f86:	60f8      	str	r0, [r7, #12]
 8018f88:	60b9      	str	r1, [r7, #8]
 8018f8a:	4613      	mov	r3, r2
 8018f8c:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 8018f8e:	88fb      	ldrh	r3, [r7, #6]
 8018f90:	3b01      	subs	r3, #1
 8018f92:	68fa      	ldr	r2, [r7, #12]
 8018f94:	4413      	add	r3, r2
 8018f96:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8018f98:	e007      	b.n	8018faa <memcpyr+0x2a>
    {
        *dst-- = *src++;
 8018f9a:	68ba      	ldr	r2, [r7, #8]
 8018f9c:	1c53      	adds	r3, r2, #1
 8018f9e:	60bb      	str	r3, [r7, #8]
 8018fa0:	68fb      	ldr	r3, [r7, #12]
 8018fa2:	1e59      	subs	r1, r3, #1
 8018fa4:	60f9      	str	r1, [r7, #12]
 8018fa6:	7812      	ldrb	r2, [r2, #0]
 8018fa8:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8018faa:	88fb      	ldrh	r3, [r7, #6]
 8018fac:	1e5a      	subs	r2, r3, #1
 8018fae:	80fa      	strh	r2, [r7, #6]
 8018fb0:	2b00      	cmp	r3, #0
 8018fb2:	d1f2      	bne.n	8018f9a <memcpyr+0x1a>
    }
}
 8018fb4:	bf00      	nop
 8018fb6:	bf00      	nop
 8018fb8:	3714      	adds	r7, #20
 8018fba:	46bd      	mov	sp, r7
 8018fbc:	bc80      	pop	{r7}
 8018fbe:	4770      	bx	lr

08018fc0 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8018fc0:	b480      	push	{r7}
 8018fc2:	b083      	sub	sp, #12
 8018fc4:	af00      	add	r7, sp, #0
 8018fc6:	6078      	str	r0, [r7, #4]
 8018fc8:	460b      	mov	r3, r1
 8018fca:	70fb      	strb	r3, [r7, #3]
 8018fcc:	4613      	mov	r3, r2
 8018fce:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8018fd0:	e004      	b.n	8018fdc <memset1+0x1c>
    {
        *dst++ = value;
 8018fd2:	687b      	ldr	r3, [r7, #4]
 8018fd4:	1c5a      	adds	r2, r3, #1
 8018fd6:	607a      	str	r2, [r7, #4]
 8018fd8:	78fa      	ldrb	r2, [r7, #3]
 8018fda:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8018fdc:	883b      	ldrh	r3, [r7, #0]
 8018fde:	1e5a      	subs	r2, r3, #1
 8018fe0:	803a      	strh	r2, [r7, #0]
 8018fe2:	2b00      	cmp	r3, #0
 8018fe4:	d1f5      	bne.n	8018fd2 <memset1+0x12>
    }
}
 8018fe6:	bf00      	nop
 8018fe8:	bf00      	nop
 8018fea:	370c      	adds	r7, #12
 8018fec:	46bd      	mov	sp, r7
 8018fee:	bc80      	pop	{r7}
 8018ff0:	4770      	bx	lr
	...

08018ff4 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8018ff4:	b480      	push	{r7}
 8018ff6:	b085      	sub	sp, #20
 8018ff8:	af00      	add	r7, sp, #0
 8018ffa:	6078      	str	r0, [r7, #4]
 8018ffc:	460b      	mov	r3, r1
 8018ffe:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 8019000:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019004:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 8019006:	687b      	ldr	r3, [r7, #4]
 8019008:	2b00      	cmp	r3, #0
 801900a:	d101      	bne.n	8019010 <Crc32+0x1c>
    {
        return 0;
 801900c:	2300      	movs	r3, #0
 801900e:	e026      	b.n	801905e <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 8019010:	2300      	movs	r3, #0
 8019012:	817b      	strh	r3, [r7, #10]
 8019014:	e01d      	b.n	8019052 <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 8019016:	897b      	ldrh	r3, [r7, #10]
 8019018:	687a      	ldr	r2, [r7, #4]
 801901a:	4413      	add	r3, r2
 801901c:	781b      	ldrb	r3, [r3, #0]
 801901e:	461a      	mov	r2, r3
 8019020:	68fb      	ldr	r3, [r7, #12]
 8019022:	4053      	eors	r3, r2
 8019024:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8019026:	2300      	movs	r3, #0
 8019028:	813b      	strh	r3, [r7, #8]
 801902a:	e00c      	b.n	8019046 <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 801902c:	68fb      	ldr	r3, [r7, #12]
 801902e:	085a      	lsrs	r2, r3, #1
 8019030:	68fb      	ldr	r3, [r7, #12]
 8019032:	f003 0301 	and.w	r3, r3, #1
 8019036:	425b      	negs	r3, r3
 8019038:	490b      	ldr	r1, [pc, #44]	; (8019068 <Crc32+0x74>)
 801903a:	400b      	ands	r3, r1
 801903c:	4053      	eors	r3, r2
 801903e:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8019040:	893b      	ldrh	r3, [r7, #8]
 8019042:	3301      	adds	r3, #1
 8019044:	813b      	strh	r3, [r7, #8]
 8019046:	893b      	ldrh	r3, [r7, #8]
 8019048:	2b07      	cmp	r3, #7
 801904a:	d9ef      	bls.n	801902c <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 801904c:	897b      	ldrh	r3, [r7, #10]
 801904e:	3301      	adds	r3, #1
 8019050:	817b      	strh	r3, [r7, #10]
 8019052:	897a      	ldrh	r2, [r7, #10]
 8019054:	887b      	ldrh	r3, [r7, #2]
 8019056:	429a      	cmp	r2, r3
 8019058:	d3dd      	bcc.n	8019016 <Crc32+0x22>
        }
    }

    return ~crc;
 801905a:	68fb      	ldr	r3, [r7, #12]
 801905c:	43db      	mvns	r3, r3
}
 801905e:	4618      	mov	r0, r3
 8019060:	3714      	adds	r7, #20
 8019062:	46bd      	mov	sp, r7
 8019064:	bc80      	pop	{r7}
 8019066:	4770      	bx	lr
 8019068:	edb88320 	.word	0xedb88320

0801906c <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 801906c:	b580      	push	{r7, lr}
 801906e:	b084      	sub	sp, #16
 8019070:	af02      	add	r7, sp, #8
 8019072:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8019074:	4a24      	ldr	r2, [pc, #144]	; (8019108 <RadioInit+0x9c>)
 8019076:	687b      	ldr	r3, [r7, #4]
 8019078:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 801907a:	4b24      	ldr	r3, [pc, #144]	; (801910c <RadioInit+0xa0>)
 801907c:	2200      	movs	r2, #0
 801907e:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8019080:	4b22      	ldr	r3, [pc, #136]	; (801910c <RadioInit+0xa0>)
 8019082:	2200      	movs	r2, #0
 8019084:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8019086:	4b21      	ldr	r3, [pc, #132]	; (801910c <RadioInit+0xa0>)
 8019088:	2200      	movs	r2, #0
 801908a:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801908c:	4b1f      	ldr	r3, [pc, #124]	; (801910c <RadioInit+0xa0>)
 801908e:	2200      	movs	r2, #0
 8019090:	659a      	str	r2, [r3, #88]	; 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 8019092:	481f      	ldr	r0, [pc, #124]	; (8019110 <RadioInit+0xa4>)
 8019094:	f001 ffc2 	bl	801b01c <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8019098:	4b1c      	ldr	r3, [pc, #112]	; (801910c <RadioInit+0xa0>)
 801909a:	2200      	movs	r2, #0
 801909c:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 801909e:	4b1b      	ldr	r3, [pc, #108]	; (801910c <RadioInit+0xa0>)
 80190a0:	2200      	movs	r2, #0
 80190a2:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 80190a4:	f002 fa56 	bl	801b554 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 80190a8:	2100      	movs	r1, #0
 80190aa:	2000      	movs	r0, #0
 80190ac:	f002 fe22 	bl	801bcf4 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 80190b0:	2204      	movs	r2, #4
 80190b2:	2100      	movs	r1, #0
 80190b4:	2001      	movs	r0, #1
 80190b6:	f002 fbdf 	bl	801b878 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80190ba:	2300      	movs	r3, #0
 80190bc:	2200      	movs	r2, #0
 80190be:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80190c2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80190c6:	f002 fb0f 	bl	801b6e8 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 80190ca:	f000 fe99 	bl	8019e00 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 80190ce:	2300      	movs	r3, #0
 80190d0:	9300      	str	r3, [sp, #0]
 80190d2:	4b10      	ldr	r3, [pc, #64]	; (8019114 <RadioInit+0xa8>)
 80190d4:	2200      	movs	r2, #0
 80190d6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80190da:	480f      	ldr	r0, [pc, #60]	; (8019118 <RadioInit+0xac>)
 80190dc:	f004 f82c 	bl	801d138 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 80190e0:	2300      	movs	r3, #0
 80190e2:	9300      	str	r3, [sp, #0]
 80190e4:	4b0d      	ldr	r3, [pc, #52]	; (801911c <RadioInit+0xb0>)
 80190e6:	2200      	movs	r2, #0
 80190e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80190ec:	480c      	ldr	r0, [pc, #48]	; (8019120 <RadioInit+0xb4>)
 80190ee:	f004 f823 	bl	801d138 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 80190f2:	4809      	ldr	r0, [pc, #36]	; (8019118 <RadioInit+0xac>)
 80190f4:	f004 f8c4 	bl	801d280 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 80190f8:	4809      	ldr	r0, [pc, #36]	; (8019120 <RadioInit+0xb4>)
 80190fa:	f004 f8c1 	bl	801d280 <UTIL_TIMER_Stop>
}
 80190fe:	bf00      	nop
 8019100:	3708      	adds	r7, #8
 8019102:	46bd      	mov	sp, r7
 8019104:	bd80      	pop	{r7, pc}
 8019106:	bf00      	nop
 8019108:	20001be4 	.word	0x20001be4
 801910c:	20001be8 	.word	0x20001be8
 8019110:	0801a1f9 	.word	0x0801a1f9
 8019114:	0801a181 	.word	0x0801a181
 8019118:	20001c44 	.word	0x20001c44
 801911c:	0801a195 	.word	0x0801a195
 8019120:	20001c5c 	.word	0x20001c5c

08019124 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8019124:	b580      	push	{r7, lr}
 8019126:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8019128:	f001 ffc0 	bl	801b0ac <SUBGRF_GetOperatingMode>
 801912c:	4603      	mov	r3, r0
 801912e:	2b07      	cmp	r3, #7
 8019130:	d00a      	beq.n	8019148 <RadioGetStatus+0x24>
 8019132:	2b07      	cmp	r3, #7
 8019134:	dc0a      	bgt.n	801914c <RadioGetStatus+0x28>
 8019136:	2b04      	cmp	r3, #4
 8019138:	d002      	beq.n	8019140 <RadioGetStatus+0x1c>
 801913a:	2b05      	cmp	r3, #5
 801913c:	d002      	beq.n	8019144 <RadioGetStatus+0x20>
 801913e:	e005      	b.n	801914c <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8019140:	2302      	movs	r3, #2
 8019142:	e004      	b.n	801914e <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8019144:	2301      	movs	r3, #1
 8019146:	e002      	b.n	801914e <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8019148:	2303      	movs	r3, #3
 801914a:	e000      	b.n	801914e <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 801914c:	2300      	movs	r3, #0
    }
}
 801914e:	4618      	mov	r0, r3
 8019150:	bd80      	pop	{r7, pc}
	...

08019154 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8019154:	b580      	push	{r7, lr}
 8019156:	b082      	sub	sp, #8
 8019158:	af00      	add	r7, sp, #0
 801915a:	4603      	mov	r3, r0
 801915c:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 801915e:	4a2a      	ldr	r2, [pc, #168]	; (8019208 <RadioSetModem+0xb4>)
 8019160:	79fb      	ldrb	r3, [r7, #7]
 8019162:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8019164:	79fb      	ldrb	r3, [r7, #7]
 8019166:	4618      	mov	r0, r3
 8019168:	f003 f997 	bl	801c49a <RFW_SetRadioModem>
    switch( modem )
 801916c:	79fb      	ldrb	r3, [r7, #7]
 801916e:	2b05      	cmp	r3, #5
 8019170:	d80e      	bhi.n	8019190 <RadioSetModem+0x3c>
 8019172:	a201      	add	r2, pc, #4	; (adr r2, 8019178 <RadioSetModem+0x24>)
 8019174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019178:	0801919f 	.word	0x0801919f
 801917c:	080191ad 	.word	0x080191ad
 8019180:	08019191 	.word	0x08019191
 8019184:	080191d3 	.word	0x080191d3
 8019188:	080191e1 	.word	0x080191e1
 801918c:	080191ef 	.word	0x080191ef
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8019190:	2003      	movs	r0, #3
 8019192:	f002 fb4b 	bl	801b82c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8019196:	4b1c      	ldr	r3, [pc, #112]	; (8019208 <RadioSetModem+0xb4>)
 8019198:	2200      	movs	r2, #0
 801919a:	735a      	strb	r2, [r3, #13]
        break;
 801919c:	e02f      	b.n	80191fe <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801919e:	2000      	movs	r0, #0
 80191a0:	f002 fb44 	bl	801b82c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80191a4:	4b18      	ldr	r3, [pc, #96]	; (8019208 <RadioSetModem+0xb4>)
 80191a6:	2200      	movs	r2, #0
 80191a8:	735a      	strb	r2, [r3, #13]
        break;
 80191aa:	e028      	b.n	80191fe <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 80191ac:	2001      	movs	r0, #1
 80191ae:	f002 fb3d 	bl	801b82c <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 80191b2:	4b15      	ldr	r3, [pc, #84]	; (8019208 <RadioSetModem+0xb4>)
 80191b4:	7b5a      	ldrb	r2, [r3, #13]
 80191b6:	4b14      	ldr	r3, [pc, #80]	; (8019208 <RadioSetModem+0xb4>)
 80191b8:	7b1b      	ldrb	r3, [r3, #12]
 80191ba:	429a      	cmp	r2, r3
 80191bc:	d01e      	beq.n	80191fc <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 80191be:	4b12      	ldr	r3, [pc, #72]	; (8019208 <RadioSetModem+0xb4>)
 80191c0:	7b1a      	ldrb	r2, [r3, #12]
 80191c2:	4b11      	ldr	r3, [pc, #68]	; (8019208 <RadioSetModem+0xb4>)
 80191c4:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 80191c6:	4b10      	ldr	r3, [pc, #64]	; (8019208 <RadioSetModem+0xb4>)
 80191c8:	7b5b      	ldrb	r3, [r3, #13]
 80191ca:	4618      	mov	r0, r3
 80191cc:	f000 ffa2 	bl	801a114 <RadioSetPublicNetwork>
        }
        break;
 80191d0:	e014      	b.n	80191fc <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80191d2:	2002      	movs	r0, #2
 80191d4:	f002 fb2a 	bl	801b82c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80191d8:	4b0b      	ldr	r3, [pc, #44]	; (8019208 <RadioSetModem+0xb4>)
 80191da:	2200      	movs	r2, #0
 80191dc:	735a      	strb	r2, [r3, #13]
        break;
 80191de:	e00e      	b.n	80191fe <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80191e0:	2002      	movs	r0, #2
 80191e2:	f002 fb23 	bl	801b82c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80191e6:	4b08      	ldr	r3, [pc, #32]	; (8019208 <RadioSetModem+0xb4>)
 80191e8:	2200      	movs	r2, #0
 80191ea:	735a      	strb	r2, [r3, #13]
        break;
 80191ec:	e007      	b.n	80191fe <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80191ee:	2000      	movs	r0, #0
 80191f0:	f002 fb1c 	bl	801b82c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80191f4:	4b04      	ldr	r3, [pc, #16]	; (8019208 <RadioSetModem+0xb4>)
 80191f6:	2200      	movs	r2, #0
 80191f8:	735a      	strb	r2, [r3, #13]
        break;
 80191fa:	e000      	b.n	80191fe <RadioSetModem+0xaa>
        break;
 80191fc:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 80191fe:	bf00      	nop
 8019200:	3708      	adds	r7, #8
 8019202:	46bd      	mov	sp, r7
 8019204:	bd80      	pop	{r7, pc}
 8019206:	bf00      	nop
 8019208:	20001be8 	.word	0x20001be8

0801920c <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 801920c:	b580      	push	{r7, lr}
 801920e:	b082      	sub	sp, #8
 8019210:	af00      	add	r7, sp, #0
 8019212:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8019214:	6878      	ldr	r0, [r7, #4]
 8019216:	f002 fac3 	bl	801b7a0 <SUBGRF_SetRfFrequency>
}
 801921a:	bf00      	nop
 801921c:	3708      	adds	r7, #8
 801921e:	46bd      	mov	sp, r7
 8019220:	bd80      	pop	{r7, pc}

08019222 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8019222:	b580      	push	{r7, lr}
 8019224:	b090      	sub	sp, #64	; 0x40
 8019226:	af0a      	add	r7, sp, #40	; 0x28
 8019228:	60f8      	str	r0, [r7, #12]
 801922a:	60b9      	str	r1, [r7, #8]
 801922c:	603b      	str	r3, [r7, #0]
 801922e:	4613      	mov	r3, r2
 8019230:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8019232:	2301      	movs	r3, #1
 8019234:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8019236:	2300      	movs	r3, #0
 8019238:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 801923a:	2300      	movs	r3, #0
 801923c:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 801923e:	f000 fdf2 	bl	8019e26 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8019242:	2000      	movs	r0, #0
 8019244:	f7ff ff86 	bl	8019154 <RadioSetModem>

    RadioSetChannel( freq );
 8019248:	68f8      	ldr	r0, [r7, #12]
 801924a:	f7ff ffdf 	bl	801920c <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 801924e:	2301      	movs	r3, #1
 8019250:	9309      	str	r3, [sp, #36]	; 0x24
 8019252:	2300      	movs	r3, #0
 8019254:	9308      	str	r3, [sp, #32]
 8019256:	2300      	movs	r3, #0
 8019258:	9307      	str	r3, [sp, #28]
 801925a:	2300      	movs	r3, #0
 801925c:	9306      	str	r3, [sp, #24]
 801925e:	2300      	movs	r3, #0
 8019260:	9305      	str	r3, [sp, #20]
 8019262:	2300      	movs	r3, #0
 8019264:	9304      	str	r3, [sp, #16]
 8019266:	2300      	movs	r3, #0
 8019268:	9303      	str	r3, [sp, #12]
 801926a:	2300      	movs	r3, #0
 801926c:	9302      	str	r3, [sp, #8]
 801926e:	2303      	movs	r3, #3
 8019270:	9301      	str	r3, [sp, #4]
 8019272:	68bb      	ldr	r3, [r7, #8]
 8019274:	9300      	str	r3, [sp, #0]
 8019276:	2300      	movs	r3, #0
 8019278:	f44f 7216 	mov.w	r2, #600	; 0x258
 801927c:	68b9      	ldr	r1, [r7, #8]
 801927e:	2000      	movs	r0, #0
 8019280:	f000 f83c 	bl	80192fc <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8019284:	2000      	movs	r0, #0
 8019286:	f000 fdd5 	bl	8019e34 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 801928a:	f000 ff71 	bl	801a170 <RadioGetWakeupTime>
 801928e:	4603      	mov	r3, r0
 8019290:	4618      	mov	r0, r3
 8019292:	f7e8 ffcb 	bl	800222c <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8019296:	f004 f90d 	bl	801d4b4 <UTIL_TIMER_GetCurrentTime>
 801929a:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801929c:	e00d      	b.n	80192ba <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 801929e:	2000      	movs	r0, #0
 80192a0:	f000 feb6 	bl	801a010 <RadioRssi>
 80192a4:	4603      	mov	r3, r0
 80192a6:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 80192a8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80192ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80192b0:	429a      	cmp	r2, r3
 80192b2:	dd02      	ble.n	80192ba <RadioIsChannelFree+0x98>
        {
            status = false;
 80192b4:	2300      	movs	r3, #0
 80192b6:	75fb      	strb	r3, [r7, #23]
            break;
 80192b8:	e006      	b.n	80192c8 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80192ba:	6938      	ldr	r0, [r7, #16]
 80192bc:	f004 f90c 	bl	801d4d8 <UTIL_TIMER_GetElapsedTime>
 80192c0:	4602      	mov	r2, r0
 80192c2:	683b      	ldr	r3, [r7, #0]
 80192c4:	4293      	cmp	r3, r2
 80192c6:	d8ea      	bhi.n	801929e <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 80192c8:	f000 fdad 	bl	8019e26 <RadioStandby>

    return status;
 80192cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80192ce:	4618      	mov	r0, r3
 80192d0:	3718      	adds	r7, #24
 80192d2:	46bd      	mov	sp, r7
 80192d4:	bd80      	pop	{r7, pc}

080192d6 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 80192d6:	b580      	push	{r7, lr}
 80192d8:	b082      	sub	sp, #8
 80192da:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 80192dc:	2300      	movs	r3, #0
 80192de:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80192e0:	2300      	movs	r3, #0
 80192e2:	2200      	movs	r2, #0
 80192e4:	2100      	movs	r1, #0
 80192e6:	2000      	movs	r0, #0
 80192e8:	f002 f9fe 	bl	801b6e8 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 80192ec:	f001 ffaf 	bl	801b24e <SUBGRF_GetRandom>
 80192f0:	6078      	str	r0, [r7, #4]

    return rnd;
 80192f2:	687b      	ldr	r3, [r7, #4]
}
 80192f4:	4618      	mov	r0, r3
 80192f6:	3708      	adds	r7, #8
 80192f8:	46bd      	mov	sp, r7
 80192fa:	bd80      	pop	{r7, pc}

080192fc <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 80192fc:	b580      	push	{r7, lr}
 80192fe:	b08a      	sub	sp, #40	; 0x28
 8019300:	af00      	add	r7, sp, #0
 8019302:	60b9      	str	r1, [r7, #8]
 8019304:	607a      	str	r2, [r7, #4]
 8019306:	461a      	mov	r2, r3
 8019308:	4603      	mov	r3, r0
 801930a:	73fb      	strb	r3, [r7, #15]
 801930c:	4613      	mov	r3, r2
 801930e:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8019310:	4ab9      	ldr	r2, [pc, #740]	; (80195f8 <RadioSetRxConfig+0x2fc>)
 8019312:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8019316:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 8019318:	f003 f87d 	bl	801c416 <RFW_DeInit>
    if( rxContinuous == true )
 801931c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8019320:	2b00      	cmp	r3, #0
 8019322:	d001      	beq.n	8019328 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8019324:	2300      	movs	r3, #0
 8019326:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8019328:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801932c:	2b00      	cmp	r3, #0
 801932e:	d004      	beq.n	801933a <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8019330:	4ab2      	ldr	r2, [pc, #712]	; (80195fc <RadioSetRxConfig+0x300>)
 8019332:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8019336:	7013      	strb	r3, [r2, #0]
 8019338:	e002      	b.n	8019340 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 801933a:	4bb0      	ldr	r3, [pc, #704]	; (80195fc <RadioSetRxConfig+0x300>)
 801933c:	22ff      	movs	r2, #255	; 0xff
 801933e:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8019340:	7bfb      	ldrb	r3, [r7, #15]
 8019342:	2b05      	cmp	r3, #5
 8019344:	d009      	beq.n	801935a <RadioSetRxConfig+0x5e>
 8019346:	2b05      	cmp	r3, #5
 8019348:	f300 81d7 	bgt.w	80196fa <RadioSetRxConfig+0x3fe>
 801934c:	2b00      	cmp	r3, #0
 801934e:	f000 80bf 	beq.w	80194d0 <RadioSetRxConfig+0x1d4>
 8019352:	2b01      	cmp	r3, #1
 8019354:	f000 8124 	beq.w	80195a0 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8019358:	e1cf      	b.n	80196fa <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 801935a:	2001      	movs	r0, #1
 801935c:	f002 f8bc 	bl	801b4d8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8019360:	4ba5      	ldr	r3, [pc, #660]	; (80195f8 <RadioSetRxConfig+0x2fc>)
 8019362:	2200      	movs	r2, #0
 8019364:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8019368:	4aa3      	ldr	r2, [pc, #652]	; (80195f8 <RadioSetRxConfig+0x2fc>)
 801936a:	687b      	ldr	r3, [r7, #4]
 801936c:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 801936e:	4ba2      	ldr	r3, [pc, #648]	; (80195f8 <RadioSetRxConfig+0x2fc>)
 8019370:	2209      	movs	r2, #9
 8019372:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8019376:	4ba0      	ldr	r3, [pc, #640]	; (80195f8 <RadioSetRxConfig+0x2fc>)
 8019378:	f44f 7248 	mov.w	r2, #800	; 0x320
 801937c:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801937e:	68b8      	ldr	r0, [r7, #8]
 8019380:	f002 ff7c 	bl	801c27c <SUBGRF_GetFskBandwidthRegValue>
 8019384:	4603      	mov	r3, r0
 8019386:	461a      	mov	r2, r3
 8019388:	4b9b      	ldr	r3, [pc, #620]	; (80195f8 <RadioSetRxConfig+0x2fc>)
 801938a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801938e:	4b9a      	ldr	r3, [pc, #616]	; (80195f8 <RadioSetRxConfig+0x2fc>)
 8019390:	2200      	movs	r2, #0
 8019392:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8019394:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019396:	00db      	lsls	r3, r3, #3
 8019398:	b29a      	uxth	r2, r3
 801939a:	4b97      	ldr	r3, [pc, #604]	; (80195f8 <RadioSetRxConfig+0x2fc>)
 801939c:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 801939e:	4b96      	ldr	r3, [pc, #600]	; (80195f8 <RadioSetRxConfig+0x2fc>)
 80193a0:	2200      	movs	r2, #0
 80193a2:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 80193a4:	4b94      	ldr	r3, [pc, #592]	; (80195f8 <RadioSetRxConfig+0x2fc>)
 80193a6:	2210      	movs	r2, #16
 80193a8:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80193aa:	4b93      	ldr	r3, [pc, #588]	; (80195f8 <RadioSetRxConfig+0x2fc>)
 80193ac:	2200      	movs	r2, #0
 80193ae:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 80193b0:	4b91      	ldr	r3, [pc, #580]	; (80195f8 <RadioSetRxConfig+0x2fc>)
 80193b2:	2200      	movs	r2, #0
 80193b4:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80193b6:	4b91      	ldr	r3, [pc, #580]	; (80195fc <RadioSetRxConfig+0x300>)
 80193b8:	781a      	ldrb	r2, [r3, #0]
 80193ba:	4b8f      	ldr	r3, [pc, #572]	; (80195f8 <RadioSetRxConfig+0x2fc>)
 80193bc:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80193be:	4b8e      	ldr	r3, [pc, #568]	; (80195f8 <RadioSetRxConfig+0x2fc>)
 80193c0:	2201      	movs	r2, #1
 80193c2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 80193c4:	4b8c      	ldr	r3, [pc, #560]	; (80195f8 <RadioSetRxConfig+0x2fc>)
 80193c6:	2200      	movs	r2, #0
 80193c8:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 80193ca:	2005      	movs	r0, #5
 80193cc:	f7ff fec2 	bl	8019154 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80193d0:	488b      	ldr	r0, [pc, #556]	; (8019600 <RadioSetRxConfig+0x304>)
 80193d2:	f002 fb1f 	bl	801ba14 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80193d6:	488b      	ldr	r0, [pc, #556]	; (8019604 <RadioSetRxConfig+0x308>)
 80193d8:	f002 fbee 	bl	801bbb8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80193dc:	4a8a      	ldr	r2, [pc, #552]	; (8019608 <RadioSetRxConfig+0x30c>)
 80193de:	f107 031c 	add.w	r3, r7, #28
 80193e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80193e6:	e883 0003 	stmia.w	r3, {r0, r1}
 80193ea:	f107 031c 	add.w	r3, r7, #28
 80193ee:	4618      	mov	r0, r3
 80193f0:	f001 feab 	bl	801b14a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80193f4:	f240 10ff 	movw	r0, #511	; 0x1ff
 80193f8:	f001 fef6 	bl	801b1e8 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 80193fc:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8019400:	f000 fe25 	bl	801a04e <RadioRead>
 8019404:	4603      	mov	r3, r0
 8019406:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 801940a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801940e:	f023 0310 	bic.w	r3, r3, #16
 8019412:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8019416:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801941a:	4619      	mov	r1, r3
 801941c:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8019420:	f000 fe03 	bl	801a02a <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8019424:	2104      	movs	r1, #4
 8019426:	f640 00b9 	movw	r0, #2233	; 0x8b9
 801942a:	f000 fdfe 	bl	801a02a <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 801942e:	f640 009b 	movw	r0, #2203	; 0x89b
 8019432:	f000 fe0c 	bl	801a04e <RadioRead>
 8019436:	4603      	mov	r3, r0
 8019438:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801943c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019440:	f023 031c 	bic.w	r3, r3, #28
 8019444:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8019448:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801944c:	f043 0308 	orr.w	r3, r3, #8
 8019450:	b2db      	uxtb	r3, r3
 8019452:	4619      	mov	r1, r3
 8019454:	f640 009b 	movw	r0, #2203	; 0x89b
 8019458:	f000 fde7 	bl	801a02a <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 801945c:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8019460:	f000 fdf5 	bl	801a04e <RadioRead>
 8019464:	4603      	mov	r3, r0
 8019466:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801946a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801946e:	f023 0318 	bic.w	r3, r3, #24
 8019472:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8019476:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801947a:	f043 0318 	orr.w	r3, r3, #24
 801947e:	b2db      	uxtb	r3, r3
 8019480:	4619      	mov	r1, r3
 8019482:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8019486:	f000 fdd0 	bl	801a02a <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 801948a:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801948e:	f000 fdde 	bl	801a04e <RadioRead>
 8019492:	4603      	mov	r3, r0
 8019494:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8019498:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801949c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80194a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 80194a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80194a8:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80194ac:	b2db      	uxtb	r3, r3
 80194ae:	4619      	mov	r1, r3
 80194b0:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80194b4:	f000 fdb9 	bl	801a02a <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80194b8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80194ba:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80194be:	fb02 f303 	mul.w	r3, r2, r3
 80194c2:	461a      	mov	r2, r3
 80194c4:	687b      	ldr	r3, [r7, #4]
 80194c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80194ca:	4a4b      	ldr	r2, [pc, #300]	; (80195f8 <RadioSetRxConfig+0x2fc>)
 80194cc:	6093      	str	r3, [r2, #8]
            break;
 80194ce:	e115      	b.n	80196fc <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80194d0:	2000      	movs	r0, #0
 80194d2:	f002 f801 	bl	801b4d8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80194d6:	4b48      	ldr	r3, [pc, #288]	; (80195f8 <RadioSetRxConfig+0x2fc>)
 80194d8:	2200      	movs	r2, #0
 80194da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80194de:	4a46      	ldr	r2, [pc, #280]	; (80195f8 <RadioSetRxConfig+0x2fc>)
 80194e0:	687b      	ldr	r3, [r7, #4]
 80194e2:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80194e4:	4b44      	ldr	r3, [pc, #272]	; (80195f8 <RadioSetRxConfig+0x2fc>)
 80194e6:	220b      	movs	r2, #11
 80194e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80194ec:	68b8      	ldr	r0, [r7, #8]
 80194ee:	f002 fec5 	bl	801c27c <SUBGRF_GetFskBandwidthRegValue>
 80194f2:	4603      	mov	r3, r0
 80194f4:	461a      	mov	r2, r3
 80194f6:	4b40      	ldr	r3, [pc, #256]	; (80195f8 <RadioSetRxConfig+0x2fc>)
 80194f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80194fc:	4b3e      	ldr	r3, [pc, #248]	; (80195f8 <RadioSetRxConfig+0x2fc>)
 80194fe:	2200      	movs	r2, #0
 8019500:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8019502:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019504:	00db      	lsls	r3, r3, #3
 8019506:	b29a      	uxth	r2, r3
 8019508:	4b3b      	ldr	r3, [pc, #236]	; (80195f8 <RadioSetRxConfig+0x2fc>)
 801950a:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801950c:	4b3a      	ldr	r3, [pc, #232]	; (80195f8 <RadioSetRxConfig+0x2fc>)
 801950e:	2204      	movs	r2, #4
 8019510:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8019512:	4b39      	ldr	r3, [pc, #228]	; (80195f8 <RadioSetRxConfig+0x2fc>)
 8019514:	2218      	movs	r2, #24
 8019516:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8019518:	4b37      	ldr	r3, [pc, #220]	; (80195f8 <RadioSetRxConfig+0x2fc>)
 801951a:	2200      	movs	r2, #0
 801951c:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801951e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8019522:	f083 0301 	eor.w	r3, r3, #1
 8019526:	b2db      	uxtb	r3, r3
 8019528:	461a      	mov	r2, r3
 801952a:	4b33      	ldr	r3, [pc, #204]	; (80195f8 <RadioSetRxConfig+0x2fc>)
 801952c:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801952e:	4b33      	ldr	r3, [pc, #204]	; (80195fc <RadioSetRxConfig+0x300>)
 8019530:	781a      	ldrb	r2, [r3, #0]
 8019532:	4b31      	ldr	r3, [pc, #196]	; (80195f8 <RadioSetRxConfig+0x2fc>)
 8019534:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8019536:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801953a:	2b00      	cmp	r3, #0
 801953c:	d003      	beq.n	8019546 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801953e:	4b2e      	ldr	r3, [pc, #184]	; (80195f8 <RadioSetRxConfig+0x2fc>)
 8019540:	22f2      	movs	r2, #242	; 0xf2
 8019542:	75da      	strb	r2, [r3, #23]
 8019544:	e002      	b.n	801954c <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8019546:	4b2c      	ldr	r3, [pc, #176]	; (80195f8 <RadioSetRxConfig+0x2fc>)
 8019548:	2201      	movs	r2, #1
 801954a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801954c:	4b2a      	ldr	r3, [pc, #168]	; (80195f8 <RadioSetRxConfig+0x2fc>)
 801954e:	2201      	movs	r2, #1
 8019550:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8019552:	f000 fc68 	bl	8019e26 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8019556:	2000      	movs	r0, #0
 8019558:	f7ff fdfc 	bl	8019154 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801955c:	4828      	ldr	r0, [pc, #160]	; (8019600 <RadioSetRxConfig+0x304>)
 801955e:	f002 fa59 	bl	801ba14 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019562:	4828      	ldr	r0, [pc, #160]	; (8019604 <RadioSetRxConfig+0x308>)
 8019564:	f002 fb28 	bl	801bbb8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8019568:	4a28      	ldr	r2, [pc, #160]	; (801960c <RadioSetRxConfig+0x310>)
 801956a:	f107 0314 	add.w	r3, r7, #20
 801956e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019572:	e883 0003 	stmia.w	r3, {r0, r1}
 8019576:	f107 0314 	add.w	r3, r7, #20
 801957a:	4618      	mov	r0, r3
 801957c:	f001 fde5 	bl	801b14a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8019580:	f240 10ff 	movw	r0, #511	; 0x1ff
 8019584:	f001 fe30 	bl	801b1e8 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8019588:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801958a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801958e:	fb02 f303 	mul.w	r3, r2, r3
 8019592:	461a      	mov	r2, r3
 8019594:	687b      	ldr	r3, [r7, #4]
 8019596:	fbb2 f3f3 	udiv	r3, r2, r3
 801959a:	4a17      	ldr	r2, [pc, #92]	; (80195f8 <RadioSetRxConfig+0x2fc>)
 801959c:	6093      	str	r3, [r2, #8]
            break;
 801959e:	e0ad      	b.n	80196fc <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80195a0:	2000      	movs	r0, #0
 80195a2:	f001 ff99 	bl	801b4d8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80195a6:	4b14      	ldr	r3, [pc, #80]	; (80195f8 <RadioSetRxConfig+0x2fc>)
 80195a8:	2201      	movs	r2, #1
 80195aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 80195ae:	687b      	ldr	r3, [r7, #4]
 80195b0:	b2da      	uxtb	r2, r3
 80195b2:	4b11      	ldr	r3, [pc, #68]	; (80195f8 <RadioSetRxConfig+0x2fc>)
 80195b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 80195b8:	4a15      	ldr	r2, [pc, #84]	; (8019610 <RadioSetRxConfig+0x314>)
 80195ba:	68bb      	ldr	r3, [r7, #8]
 80195bc:	4413      	add	r3, r2
 80195be:	781a      	ldrb	r2, [r3, #0]
 80195c0:	4b0d      	ldr	r3, [pc, #52]	; (80195f8 <RadioSetRxConfig+0x2fc>)
 80195c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 80195c6:	4a0c      	ldr	r2, [pc, #48]	; (80195f8 <RadioSetRxConfig+0x2fc>)
 80195c8:	7bbb      	ldrb	r3, [r7, #14]
 80195ca:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80195ce:	68bb      	ldr	r3, [r7, #8]
 80195d0:	2b00      	cmp	r3, #0
 80195d2:	d105      	bne.n	80195e0 <RadioSetRxConfig+0x2e4>
 80195d4:	687b      	ldr	r3, [r7, #4]
 80195d6:	2b0b      	cmp	r3, #11
 80195d8:	d008      	beq.n	80195ec <RadioSetRxConfig+0x2f0>
 80195da:	687b      	ldr	r3, [r7, #4]
 80195dc:	2b0c      	cmp	r3, #12
 80195de:	d005      	beq.n	80195ec <RadioSetRxConfig+0x2f0>
 80195e0:	68bb      	ldr	r3, [r7, #8]
 80195e2:	2b01      	cmp	r3, #1
 80195e4:	d116      	bne.n	8019614 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80195e6:	687b      	ldr	r3, [r7, #4]
 80195e8:	2b0c      	cmp	r3, #12
 80195ea:	d113      	bne.n	8019614 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80195ec:	4b02      	ldr	r3, [pc, #8]	; (80195f8 <RadioSetRxConfig+0x2fc>)
 80195ee:	2201      	movs	r2, #1
 80195f0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80195f4:	e012      	b.n	801961c <RadioSetRxConfig+0x320>
 80195f6:	bf00      	nop
 80195f8:	20001be8 	.word	0x20001be8
 80195fc:	20000134 	.word	0x20000134
 8019600:	20001c20 	.word	0x20001c20
 8019604:	20001bf6 	.word	0x20001bf6
 8019608:	0801e508 	.word	0x0801e508
 801960c:	0801e510 	.word	0x0801e510
 8019610:	0801ebfc 	.word	0x0801ebfc
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8019614:	4b3b      	ldr	r3, [pc, #236]	; (8019704 <RadioSetRxConfig+0x408>)
 8019616:	2200      	movs	r2, #0
 8019618:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801961c:	4b39      	ldr	r3, [pc, #228]	; (8019704 <RadioSetRxConfig+0x408>)
 801961e:	2201      	movs	r2, #1
 8019620:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8019622:	4b38      	ldr	r3, [pc, #224]	; (8019704 <RadioSetRxConfig+0x408>)
 8019624:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8019628:	2b05      	cmp	r3, #5
 801962a:	d004      	beq.n	8019636 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801962c:	4b35      	ldr	r3, [pc, #212]	; (8019704 <RadioSetRxConfig+0x408>)
 801962e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8019632:	2b06      	cmp	r3, #6
 8019634:	d10a      	bne.n	801964c <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 8019636:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019638:	2b0b      	cmp	r3, #11
 801963a:	d803      	bhi.n	8019644 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801963c:	4b31      	ldr	r3, [pc, #196]	; (8019704 <RadioSetRxConfig+0x408>)
 801963e:	220c      	movs	r2, #12
 8019640:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8019642:	e006      	b.n	8019652 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8019644:	4a2f      	ldr	r2, [pc, #188]	; (8019704 <RadioSetRxConfig+0x408>)
 8019646:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019648:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801964a:	e002      	b.n	8019652 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801964c:	4a2d      	ldr	r2, [pc, #180]	; (8019704 <RadioSetRxConfig+0x408>)
 801964e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019650:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8019652:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8019656:	4b2b      	ldr	r3, [pc, #172]	; (8019704 <RadioSetRxConfig+0x408>)
 8019658:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801965a:	4b2b      	ldr	r3, [pc, #172]	; (8019708 <RadioSetRxConfig+0x40c>)
 801965c:	781a      	ldrb	r2, [r3, #0]
 801965e:	4b29      	ldr	r3, [pc, #164]	; (8019704 <RadioSetRxConfig+0x408>)
 8019660:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8019662:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8019666:	4b27      	ldr	r3, [pc, #156]	; (8019704 <RadioSetRxConfig+0x408>)
 8019668:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801966c:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8019670:	4b24      	ldr	r3, [pc, #144]	; (8019704 <RadioSetRxConfig+0x408>)
 8019672:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8019676:	f000 fbd6 	bl	8019e26 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801967a:	2001      	movs	r0, #1
 801967c:	f7ff fd6a 	bl	8019154 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019680:	4822      	ldr	r0, [pc, #136]	; (801970c <RadioSetRxConfig+0x410>)
 8019682:	f002 f9c7 	bl	801ba14 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019686:	4822      	ldr	r0, [pc, #136]	; (8019710 <RadioSetRxConfig+0x414>)
 8019688:	f002 fa96 	bl	801bbb8 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801968c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801968e:	b2db      	uxtb	r3, r3
 8019690:	4618      	mov	r0, r3
 8019692:	f001 ff30 	bl	801b4f6 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 8019696:	f640 00a3 	movw	r0, #2211	; 0x8a3
 801969a:	f002 fbe9 	bl	801be70 <SUBGRF_ReadRegister>
 801969e:	4603      	mov	r3, r0
 80196a0:	f003 0301 	and.w	r3, r3, #1
 80196a4:	b2db      	uxtb	r3, r3
 80196a6:	4619      	mov	r1, r3
 80196a8:	f640 00a3 	movw	r0, #2211	; 0x8a3
 80196ac:	f002 fbcc 	bl	801be48 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80196b0:	4b14      	ldr	r3, [pc, #80]	; (8019704 <RadioSetRxConfig+0x408>)
 80196b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80196b6:	2b01      	cmp	r3, #1
 80196b8:	d10d      	bne.n	80196d6 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 80196ba:	f240 7036 	movw	r0, #1846	; 0x736
 80196be:	f002 fbd7 	bl	801be70 <SUBGRF_ReadRegister>
 80196c2:	4603      	mov	r3, r0
 80196c4:	f023 0304 	bic.w	r3, r3, #4
 80196c8:	b2db      	uxtb	r3, r3
 80196ca:	4619      	mov	r1, r3
 80196cc:	f240 7036 	movw	r0, #1846	; 0x736
 80196d0:	f002 fbba 	bl	801be48 <SUBGRF_WriteRegister>
 80196d4:	e00c      	b.n	80196f0 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 80196d6:	f240 7036 	movw	r0, #1846	; 0x736
 80196da:	f002 fbc9 	bl	801be70 <SUBGRF_ReadRegister>
 80196de:	4603      	mov	r3, r0
 80196e0:	f043 0304 	orr.w	r3, r3, #4
 80196e4:	b2db      	uxtb	r3, r3
 80196e6:	4619      	mov	r1, r3
 80196e8:	f240 7036 	movw	r0, #1846	; 0x736
 80196ec:	f002 fbac 	bl	801be48 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 80196f0:	4b04      	ldr	r3, [pc, #16]	; (8019704 <RadioSetRxConfig+0x408>)
 80196f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80196f6:	609a      	str	r2, [r3, #8]
            break;
 80196f8:	e000      	b.n	80196fc <RadioSetRxConfig+0x400>
            break;
 80196fa:	bf00      	nop
    }
}
 80196fc:	bf00      	nop
 80196fe:	3728      	adds	r7, #40	; 0x28
 8019700:	46bd      	mov	sp, r7
 8019702:	bd80      	pop	{r7, pc}
 8019704:	20001be8 	.word	0x20001be8
 8019708:	20000134 	.word	0x20000134
 801970c:	20001c20 	.word	0x20001c20
 8019710:	20001bf6 	.word	0x20001bf6

08019714 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8019714:	b580      	push	{r7, lr}
 8019716:	b086      	sub	sp, #24
 8019718:	af00      	add	r7, sp, #0
 801971a:	60ba      	str	r2, [r7, #8]
 801971c:	607b      	str	r3, [r7, #4]
 801971e:	4603      	mov	r3, r0
 8019720:	73fb      	strb	r3, [r7, #15]
 8019722:	460b      	mov	r3, r1
 8019724:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 8019726:	f002 fe76 	bl	801c416 <RFW_DeInit>
    switch( modem )
 801972a:	7bfb      	ldrb	r3, [r7, #15]
 801972c:	2b04      	cmp	r3, #4
 801972e:	f000 80c7 	beq.w	80198c0 <RadioSetTxConfig+0x1ac>
 8019732:	2b04      	cmp	r3, #4
 8019734:	f300 80d6 	bgt.w	80198e4 <RadioSetTxConfig+0x1d0>
 8019738:	2b00      	cmp	r3, #0
 801973a:	d002      	beq.n	8019742 <RadioSetTxConfig+0x2e>
 801973c:	2b01      	cmp	r3, #1
 801973e:	d059      	beq.n	80197f4 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8019740:	e0d0      	b.n	80198e4 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8019742:	4b77      	ldr	r3, [pc, #476]	; (8019920 <RadioSetTxConfig+0x20c>)
 8019744:	2200      	movs	r2, #0
 8019746:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801974a:	4a75      	ldr	r2, [pc, #468]	; (8019920 <RadioSetTxConfig+0x20c>)
 801974c:	6a3b      	ldr	r3, [r7, #32]
 801974e:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8019750:	4b73      	ldr	r3, [pc, #460]	; (8019920 <RadioSetTxConfig+0x20c>)
 8019752:	220b      	movs	r2, #11
 8019754:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8019758:	6878      	ldr	r0, [r7, #4]
 801975a:	f002 fd8f 	bl	801c27c <SUBGRF_GetFskBandwidthRegValue>
 801975e:	4603      	mov	r3, r0
 8019760:	461a      	mov	r2, r3
 8019762:	4b6f      	ldr	r3, [pc, #444]	; (8019920 <RadioSetTxConfig+0x20c>)
 8019764:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8019768:	4a6d      	ldr	r2, [pc, #436]	; (8019920 <RadioSetTxConfig+0x20c>)
 801976a:	68bb      	ldr	r3, [r7, #8]
 801976c:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801976e:	4b6c      	ldr	r3, [pc, #432]	; (8019920 <RadioSetTxConfig+0x20c>)
 8019770:	2200      	movs	r2, #0
 8019772:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8019774:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8019776:	00db      	lsls	r3, r3, #3
 8019778:	b29a      	uxth	r2, r3
 801977a:	4b69      	ldr	r3, [pc, #420]	; (8019920 <RadioSetTxConfig+0x20c>)
 801977c:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801977e:	4b68      	ldr	r3, [pc, #416]	; (8019920 <RadioSetTxConfig+0x20c>)
 8019780:	2204      	movs	r2, #4
 8019782:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8019784:	4b66      	ldr	r3, [pc, #408]	; (8019920 <RadioSetTxConfig+0x20c>)
 8019786:	2218      	movs	r2, #24
 8019788:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801978a:	4b65      	ldr	r3, [pc, #404]	; (8019920 <RadioSetTxConfig+0x20c>)
 801978c:	2200      	movs	r2, #0
 801978e:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8019790:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8019794:	f083 0301 	eor.w	r3, r3, #1
 8019798:	b2db      	uxtb	r3, r3
 801979a:	461a      	mov	r2, r3
 801979c:	4b60      	ldr	r3, [pc, #384]	; (8019920 <RadioSetTxConfig+0x20c>)
 801979e:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 80197a0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80197a4:	2b00      	cmp	r3, #0
 80197a6:	d003      	beq.n	80197b0 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80197a8:	4b5d      	ldr	r3, [pc, #372]	; (8019920 <RadioSetTxConfig+0x20c>)
 80197aa:	22f2      	movs	r2, #242	; 0xf2
 80197ac:	75da      	strb	r2, [r3, #23]
 80197ae:	e002      	b.n	80197b6 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80197b0:	4b5b      	ldr	r3, [pc, #364]	; (8019920 <RadioSetTxConfig+0x20c>)
 80197b2:	2201      	movs	r2, #1
 80197b4:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80197b6:	4b5a      	ldr	r3, [pc, #360]	; (8019920 <RadioSetTxConfig+0x20c>)
 80197b8:	2201      	movs	r2, #1
 80197ba:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80197bc:	f000 fb33 	bl	8019e26 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 80197c0:	2000      	movs	r0, #0
 80197c2:	f7ff fcc7 	bl	8019154 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80197c6:	4857      	ldr	r0, [pc, #348]	; (8019924 <RadioSetTxConfig+0x210>)
 80197c8:	f002 f924 	bl	801ba14 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80197cc:	4856      	ldr	r0, [pc, #344]	; (8019928 <RadioSetTxConfig+0x214>)
 80197ce:	f002 f9f3 	bl	801bbb8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80197d2:	4a56      	ldr	r2, [pc, #344]	; (801992c <RadioSetTxConfig+0x218>)
 80197d4:	f107 0310 	add.w	r3, r7, #16
 80197d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80197dc:	e883 0003 	stmia.w	r3, {r0, r1}
 80197e0:	f107 0310 	add.w	r3, r7, #16
 80197e4:	4618      	mov	r0, r3
 80197e6:	f001 fcb0 	bl	801b14a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80197ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80197ee:	f001 fcfb 	bl	801b1e8 <SUBGRF_SetWhiteningSeed>
            break;
 80197f2:	e078      	b.n	80198e6 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80197f4:	4b4a      	ldr	r3, [pc, #296]	; (8019920 <RadioSetTxConfig+0x20c>)
 80197f6:	2201      	movs	r2, #1
 80197f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 80197fc:	6a3b      	ldr	r3, [r7, #32]
 80197fe:	b2da      	uxtb	r2, r3
 8019800:	4b47      	ldr	r3, [pc, #284]	; (8019920 <RadioSetTxConfig+0x20c>)
 8019802:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8019806:	4a4a      	ldr	r2, [pc, #296]	; (8019930 <RadioSetTxConfig+0x21c>)
 8019808:	687b      	ldr	r3, [r7, #4]
 801980a:	4413      	add	r3, r2
 801980c:	781a      	ldrb	r2, [r3, #0]
 801980e:	4b44      	ldr	r3, [pc, #272]	; (8019920 <RadioSetTxConfig+0x20c>)
 8019810:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8019814:	4a42      	ldr	r2, [pc, #264]	; (8019920 <RadioSetTxConfig+0x20c>)
 8019816:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801981a:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801981e:	687b      	ldr	r3, [r7, #4]
 8019820:	2b00      	cmp	r3, #0
 8019822:	d105      	bne.n	8019830 <RadioSetTxConfig+0x11c>
 8019824:	6a3b      	ldr	r3, [r7, #32]
 8019826:	2b0b      	cmp	r3, #11
 8019828:	d008      	beq.n	801983c <RadioSetTxConfig+0x128>
 801982a:	6a3b      	ldr	r3, [r7, #32]
 801982c:	2b0c      	cmp	r3, #12
 801982e:	d005      	beq.n	801983c <RadioSetTxConfig+0x128>
 8019830:	687b      	ldr	r3, [r7, #4]
 8019832:	2b01      	cmp	r3, #1
 8019834:	d107      	bne.n	8019846 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8019836:	6a3b      	ldr	r3, [r7, #32]
 8019838:	2b0c      	cmp	r3, #12
 801983a:	d104      	bne.n	8019846 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801983c:	4b38      	ldr	r3, [pc, #224]	; (8019920 <RadioSetTxConfig+0x20c>)
 801983e:	2201      	movs	r2, #1
 8019840:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8019844:	e003      	b.n	801984e <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8019846:	4b36      	ldr	r3, [pc, #216]	; (8019920 <RadioSetTxConfig+0x20c>)
 8019848:	2200      	movs	r2, #0
 801984a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801984e:	4b34      	ldr	r3, [pc, #208]	; (8019920 <RadioSetTxConfig+0x20c>)
 8019850:	2201      	movs	r2, #1
 8019852:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8019854:	4b32      	ldr	r3, [pc, #200]	; (8019920 <RadioSetTxConfig+0x20c>)
 8019856:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801985a:	2b05      	cmp	r3, #5
 801985c:	d004      	beq.n	8019868 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801985e:	4b30      	ldr	r3, [pc, #192]	; (8019920 <RadioSetTxConfig+0x20c>)
 8019860:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8019864:	2b06      	cmp	r3, #6
 8019866:	d10a      	bne.n	801987e <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8019868:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801986a:	2b0b      	cmp	r3, #11
 801986c:	d803      	bhi.n	8019876 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801986e:	4b2c      	ldr	r3, [pc, #176]	; (8019920 <RadioSetTxConfig+0x20c>)
 8019870:	220c      	movs	r2, #12
 8019872:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8019874:	e006      	b.n	8019884 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8019876:	4a2a      	ldr	r2, [pc, #168]	; (8019920 <RadioSetTxConfig+0x20c>)
 8019878:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801987a:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801987c:	e002      	b.n	8019884 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801987e:	4a28      	ldr	r2, [pc, #160]	; (8019920 <RadioSetTxConfig+0x20c>)
 8019880:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8019882:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8019884:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8019888:	4b25      	ldr	r3, [pc, #148]	; (8019920 <RadioSetTxConfig+0x20c>)
 801988a:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801988c:	4b29      	ldr	r3, [pc, #164]	; (8019934 <RadioSetTxConfig+0x220>)
 801988e:	781a      	ldrb	r2, [r3, #0]
 8019890:	4b23      	ldr	r3, [pc, #140]	; (8019920 <RadioSetTxConfig+0x20c>)
 8019892:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8019894:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8019898:	4b21      	ldr	r3, [pc, #132]	; (8019920 <RadioSetTxConfig+0x20c>)
 801989a:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801989e:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80198a2:	4b1f      	ldr	r3, [pc, #124]	; (8019920 <RadioSetTxConfig+0x20c>)
 80198a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 80198a8:	f000 fabd 	bl	8019e26 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80198ac:	2001      	movs	r0, #1
 80198ae:	f7ff fc51 	bl	8019154 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80198b2:	481c      	ldr	r0, [pc, #112]	; (8019924 <RadioSetTxConfig+0x210>)
 80198b4:	f002 f8ae 	bl	801ba14 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80198b8:	481b      	ldr	r0, [pc, #108]	; (8019928 <RadioSetTxConfig+0x214>)
 80198ba:	f002 f97d 	bl	801bbb8 <SUBGRF_SetPacketParams>
            break;
 80198be:	e012      	b.n	80198e6 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 80198c0:	2004      	movs	r0, #4
 80198c2:	f7ff fc47 	bl	8019154 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80198c6:	4b16      	ldr	r3, [pc, #88]	; (8019920 <RadioSetTxConfig+0x20c>)
 80198c8:	2202      	movs	r2, #2
 80198ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 80198ce:	4a14      	ldr	r2, [pc, #80]	; (8019920 <RadioSetTxConfig+0x20c>)
 80198d0:	6a3b      	ldr	r3, [r7, #32]
 80198d2:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80198d4:	4b12      	ldr	r3, [pc, #72]	; (8019920 <RadioSetTxConfig+0x20c>)
 80198d6:	2216      	movs	r2, #22
 80198d8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80198dc:	4811      	ldr	r0, [pc, #68]	; (8019924 <RadioSetTxConfig+0x210>)
 80198de:	f002 f899 	bl	801ba14 <SUBGRF_SetModulationParams>
            break;
 80198e2:	e000      	b.n	80198e6 <RadioSetTxConfig+0x1d2>
            break;
 80198e4:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80198e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80198ea:	4618      	mov	r0, r3
 80198ec:	f002 fbc8 	bl	801c080 <SUBGRF_SetRfTxPower>
 80198f0:	4603      	mov	r3, r0
 80198f2:	461a      	mov	r2, r3
 80198f4:	4b0a      	ldr	r3, [pc, #40]	; (8019920 <RadioSetTxConfig+0x20c>)
 80198f6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80198fa:	210e      	movs	r1, #14
 80198fc:	f640 101f 	movw	r0, #2335	; 0x91f
 8019900:	f002 faa2 	bl	801be48 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8019904:	4b06      	ldr	r3, [pc, #24]	; (8019920 <RadioSetTxConfig+0x20c>)
 8019906:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801990a:	4618      	mov	r0, r3
 801990c:	f002 fd97 	bl	801c43e <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8019910:	4a03      	ldr	r2, [pc, #12]	; (8019920 <RadioSetTxConfig+0x20c>)
 8019912:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019914:	6053      	str	r3, [r2, #4]
}
 8019916:	bf00      	nop
 8019918:	3718      	adds	r7, #24
 801991a:	46bd      	mov	sp, r7
 801991c:	bd80      	pop	{r7, pc}
 801991e:	bf00      	nop
 8019920:	20001be8 	.word	0x20001be8
 8019924:	20001c20 	.word	0x20001c20
 8019928:	20001bf6 	.word	0x20001bf6
 801992c:	0801e510 	.word	0x0801e510
 8019930:	0801ebfc 	.word	0x0801ebfc
 8019934:	20000134 	.word	0x20000134

08019938 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8019938:	b480      	push	{r7}
 801993a:	b083      	sub	sp, #12
 801993c:	af00      	add	r7, sp, #0
 801993e:	6078      	str	r0, [r7, #4]
    return true;
 8019940:	2301      	movs	r3, #1
}
 8019942:	4618      	mov	r0, r3
 8019944:	370c      	adds	r7, #12
 8019946:	46bd      	mov	sp, r7
 8019948:	bc80      	pop	{r7}
 801994a:	4770      	bx	lr

0801994c <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 801994c:	b480      	push	{r7}
 801994e:	b085      	sub	sp, #20
 8019950:	af00      	add	r7, sp, #0
 8019952:	4603      	mov	r3, r0
 8019954:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8019956:	2300      	movs	r3, #0
 8019958:	60fb      	str	r3, [r7, #12]

    switch( bw )
 801995a:	79fb      	ldrb	r3, [r7, #7]
 801995c:	2b0a      	cmp	r3, #10
 801995e:	d83e      	bhi.n	80199de <RadioGetLoRaBandwidthInHz+0x92>
 8019960:	a201      	add	r2, pc, #4	; (adr r2, 8019968 <RadioGetLoRaBandwidthInHz+0x1c>)
 8019962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019966:	bf00      	nop
 8019968:	08019995 	.word	0x08019995
 801996c:	080199a5 	.word	0x080199a5
 8019970:	080199b5 	.word	0x080199b5
 8019974:	080199c5 	.word	0x080199c5
 8019978:	080199cd 	.word	0x080199cd
 801997c:	080199d3 	.word	0x080199d3
 8019980:	080199d9 	.word	0x080199d9
 8019984:	080199df 	.word	0x080199df
 8019988:	0801999d 	.word	0x0801999d
 801998c:	080199ad 	.word	0x080199ad
 8019990:	080199bd 	.word	0x080199bd
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8019994:	f641 6384 	movw	r3, #7812	; 0x1e84
 8019998:	60fb      	str	r3, [r7, #12]
        break;
 801999a:	e020      	b.n	80199de <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 801999c:	f642 03b1 	movw	r3, #10417	; 0x28b1
 80199a0:	60fb      	str	r3, [r7, #12]
        break;
 80199a2:	e01c      	b.n	80199de <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 80199a4:	f643 5309 	movw	r3, #15625	; 0x3d09
 80199a8:	60fb      	str	r3, [r7, #12]
        break;
 80199aa:	e018      	b.n	80199de <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 80199ac:	f245 1361 	movw	r3, #20833	; 0x5161
 80199b0:	60fb      	str	r3, [r7, #12]
        break;
 80199b2:	e014      	b.n	80199de <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 80199b4:	f647 2312 	movw	r3, #31250	; 0x7a12
 80199b8:	60fb      	str	r3, [r7, #12]
        break;
 80199ba:	e010      	b.n	80199de <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 80199bc:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 80199c0:	60fb      	str	r3, [r7, #12]
        break;
 80199c2:	e00c      	b.n	80199de <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 80199c4:	f24f 4324 	movw	r3, #62500	; 0xf424
 80199c8:	60fb      	str	r3, [r7, #12]
        break;
 80199ca:	e008      	b.n	80199de <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 80199cc:	4b07      	ldr	r3, [pc, #28]	; (80199ec <RadioGetLoRaBandwidthInHz+0xa0>)
 80199ce:	60fb      	str	r3, [r7, #12]
        break;
 80199d0:	e005      	b.n	80199de <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 80199d2:	4b07      	ldr	r3, [pc, #28]	; (80199f0 <RadioGetLoRaBandwidthInHz+0xa4>)
 80199d4:	60fb      	str	r3, [r7, #12]
        break;
 80199d6:	e002      	b.n	80199de <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 80199d8:	4b06      	ldr	r3, [pc, #24]	; (80199f4 <RadioGetLoRaBandwidthInHz+0xa8>)
 80199da:	60fb      	str	r3, [r7, #12]
        break;
 80199dc:	bf00      	nop
    }

    return bandwidthInHz;
 80199de:	68fb      	ldr	r3, [r7, #12]
}
 80199e0:	4618      	mov	r0, r3
 80199e2:	3714      	adds	r7, #20
 80199e4:	46bd      	mov	sp, r7
 80199e6:	bc80      	pop	{r7}
 80199e8:	4770      	bx	lr
 80199ea:	bf00      	nop
 80199ec:	0001e848 	.word	0x0001e848
 80199f0:	0003d090 	.word	0x0003d090
 80199f4:	0007a120 	.word	0x0007a120

080199f8 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80199f8:	b480      	push	{r7}
 80199fa:	b083      	sub	sp, #12
 80199fc:	af00      	add	r7, sp, #0
 80199fe:	6078      	str	r0, [r7, #4]
 8019a00:	4608      	mov	r0, r1
 8019a02:	4611      	mov	r1, r2
 8019a04:	461a      	mov	r2, r3
 8019a06:	4603      	mov	r3, r0
 8019a08:	70fb      	strb	r3, [r7, #3]
 8019a0a:	460b      	mov	r3, r1
 8019a0c:	803b      	strh	r3, [r7, #0]
 8019a0e:	4613      	mov	r3, r2
 8019a10:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 8019a12:	883b      	ldrh	r3, [r7, #0]
 8019a14:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8019a16:	78ba      	ldrb	r2, [r7, #2]
 8019a18:	f082 0201 	eor.w	r2, r2, #1
 8019a1c:	b2d2      	uxtb	r2, r2
 8019a1e:	2a00      	cmp	r2, #0
 8019a20:	d001      	beq.n	8019a26 <RadioGetGfskTimeOnAirNumerator+0x2e>
 8019a22:	2208      	movs	r2, #8
 8019a24:	e000      	b.n	8019a28 <RadioGetGfskTimeOnAirNumerator+0x30>
 8019a26:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8019a28:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8019a2a:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8019a2e:	7c3b      	ldrb	r3, [r7, #16]
 8019a30:	7d39      	ldrb	r1, [r7, #20]
 8019a32:	2900      	cmp	r1, #0
 8019a34:	d001      	beq.n	8019a3a <RadioGetGfskTimeOnAirNumerator+0x42>
 8019a36:	2102      	movs	r1, #2
 8019a38:	e000      	b.n	8019a3c <RadioGetGfskTimeOnAirNumerator+0x44>
 8019a3a:	2100      	movs	r1, #0
 8019a3c:	440b      	add	r3, r1
 8019a3e:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8019a40:	4413      	add	r3, r2
}
 8019a42:	4618      	mov	r0, r3
 8019a44:	370c      	adds	r7, #12
 8019a46:	46bd      	mov	sp, r7
 8019a48:	bc80      	pop	{r7}
 8019a4a:	4770      	bx	lr

08019a4c <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8019a4c:	b480      	push	{r7}
 8019a4e:	b08b      	sub	sp, #44	; 0x2c
 8019a50:	af00      	add	r7, sp, #0
 8019a52:	60f8      	str	r0, [r7, #12]
 8019a54:	60b9      	str	r1, [r7, #8]
 8019a56:	4611      	mov	r1, r2
 8019a58:	461a      	mov	r2, r3
 8019a5a:	460b      	mov	r3, r1
 8019a5c:	71fb      	strb	r3, [r7, #7]
 8019a5e:	4613      	mov	r3, r2
 8019a60:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8019a62:	79fb      	ldrb	r3, [r7, #7]
 8019a64:	3304      	adds	r3, #4
 8019a66:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8019a68:	2300      	movs	r3, #0
 8019a6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8019a6e:	68bb      	ldr	r3, [r7, #8]
 8019a70:	2b05      	cmp	r3, #5
 8019a72:	d002      	beq.n	8019a7a <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8019a74:	68bb      	ldr	r3, [r7, #8]
 8019a76:	2b06      	cmp	r3, #6
 8019a78:	d104      	bne.n	8019a84 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8019a7a:	88bb      	ldrh	r3, [r7, #4]
 8019a7c:	2b0b      	cmp	r3, #11
 8019a7e:	d801      	bhi.n	8019a84 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8019a80:	230c      	movs	r3, #12
 8019a82:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8019a84:	68fb      	ldr	r3, [r7, #12]
 8019a86:	2b00      	cmp	r3, #0
 8019a88:	d105      	bne.n	8019a96 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8019a8a:	68bb      	ldr	r3, [r7, #8]
 8019a8c:	2b0b      	cmp	r3, #11
 8019a8e:	d008      	beq.n	8019aa2 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8019a90:	68bb      	ldr	r3, [r7, #8]
 8019a92:	2b0c      	cmp	r3, #12
 8019a94:	d005      	beq.n	8019aa2 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8019a96:	68fb      	ldr	r3, [r7, #12]
 8019a98:	2b01      	cmp	r3, #1
 8019a9a:	d105      	bne.n	8019aa8 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8019a9c:	68bb      	ldr	r3, [r7, #8]
 8019a9e:	2b0c      	cmp	r3, #12
 8019aa0:	d102      	bne.n	8019aa8 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8019aa2:	2301      	movs	r3, #1
 8019aa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8019aa8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8019aac:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8019aae:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8019ab2:	2a00      	cmp	r2, #0
 8019ab4:	d001      	beq.n	8019aba <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8019ab6:	2210      	movs	r2, #16
 8019ab8:	e000      	b.n	8019abc <RadioGetLoRaTimeOnAirNumerator+0x70>
 8019aba:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8019abc:	4413      	add	r3, r2
 8019abe:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8019ac0:	68bb      	ldr	r3, [r7, #8]
 8019ac2:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8019ac4:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8019ac6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8019aca:	2a00      	cmp	r2, #0
 8019acc:	d001      	beq.n	8019ad2 <RadioGetLoRaTimeOnAirNumerator+0x86>
 8019ace:	2200      	movs	r2, #0
 8019ad0:	e000      	b.n	8019ad4 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8019ad2:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8019ad4:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8019ad6:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8019ad8:	68bb      	ldr	r3, [r7, #8]
 8019ada:	2b06      	cmp	r3, #6
 8019adc:	d803      	bhi.n	8019ae6 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8019ade:	68bb      	ldr	r3, [r7, #8]
 8019ae0:	009b      	lsls	r3, r3, #2
 8019ae2:	623b      	str	r3, [r7, #32]
 8019ae4:	e00e      	b.n	8019b04 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8019ae6:	69fb      	ldr	r3, [r7, #28]
 8019ae8:	3308      	adds	r3, #8
 8019aea:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8019aec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019af0:	2b00      	cmp	r3, #0
 8019af2:	d004      	beq.n	8019afe <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8019af4:	68bb      	ldr	r3, [r7, #8]
 8019af6:	3b02      	subs	r3, #2
 8019af8:	009b      	lsls	r3, r3, #2
 8019afa:	623b      	str	r3, [r7, #32]
 8019afc:	e002      	b.n	8019b04 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8019afe:	68bb      	ldr	r3, [r7, #8]
 8019b00:	009b      	lsls	r3, r3, #2
 8019b02:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8019b04:	69fb      	ldr	r3, [r7, #28]
 8019b06:	2b00      	cmp	r3, #0
 8019b08:	da01      	bge.n	8019b0e <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8019b0a:	2300      	movs	r3, #0
 8019b0c:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8019b0e:	69fa      	ldr	r2, [r7, #28]
 8019b10:	6a3b      	ldr	r3, [r7, #32]
 8019b12:	4413      	add	r3, r2
 8019b14:	1e5a      	subs	r2, r3, #1
 8019b16:	6a3b      	ldr	r3, [r7, #32]
 8019b18:	fb92 f3f3 	sdiv	r3, r2, r3
 8019b1c:	697a      	ldr	r2, [r7, #20]
 8019b1e:	fb03 f202 	mul.w	r2, r3, r2
 8019b22:	88bb      	ldrh	r3, [r7, #4]
 8019b24:	4413      	add	r3, r2
    int32_t intermediate =
 8019b26:	330c      	adds	r3, #12
 8019b28:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8019b2a:	68bb      	ldr	r3, [r7, #8]
 8019b2c:	2b06      	cmp	r3, #6
 8019b2e:	d802      	bhi.n	8019b36 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8019b30:	69bb      	ldr	r3, [r7, #24]
 8019b32:	3302      	adds	r3, #2
 8019b34:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8019b36:	69bb      	ldr	r3, [r7, #24]
 8019b38:	009b      	lsls	r3, r3, #2
 8019b3a:	1c5a      	adds	r2, r3, #1
 8019b3c:	68bb      	ldr	r3, [r7, #8]
 8019b3e:	3b02      	subs	r3, #2
 8019b40:	fa02 f303 	lsl.w	r3, r2, r3
}
 8019b44:	4618      	mov	r0, r3
 8019b46:	372c      	adds	r7, #44	; 0x2c
 8019b48:	46bd      	mov	sp, r7
 8019b4a:	bc80      	pop	{r7}
 8019b4c:	4770      	bx	lr
	...

08019b50 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8019b50:	b580      	push	{r7, lr}
 8019b52:	b08a      	sub	sp, #40	; 0x28
 8019b54:	af04      	add	r7, sp, #16
 8019b56:	60b9      	str	r1, [r7, #8]
 8019b58:	607a      	str	r2, [r7, #4]
 8019b5a:	461a      	mov	r2, r3
 8019b5c:	4603      	mov	r3, r0
 8019b5e:	73fb      	strb	r3, [r7, #15]
 8019b60:	4613      	mov	r3, r2
 8019b62:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8019b64:	2300      	movs	r3, #0
 8019b66:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8019b68:	2301      	movs	r3, #1
 8019b6a:	613b      	str	r3, [r7, #16]

    switch( modem )
 8019b6c:	7bfb      	ldrb	r3, [r7, #15]
 8019b6e:	2b00      	cmp	r3, #0
 8019b70:	d002      	beq.n	8019b78 <RadioTimeOnAir+0x28>
 8019b72:	2b01      	cmp	r3, #1
 8019b74:	d017      	beq.n	8019ba6 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8019b76:	e035      	b.n	8019be4 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8019b78:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8019b7c:	8c3a      	ldrh	r2, [r7, #32]
 8019b7e:	7bb9      	ldrb	r1, [r7, #14]
 8019b80:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8019b84:	9301      	str	r3, [sp, #4]
 8019b86:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8019b8a:	9300      	str	r3, [sp, #0]
 8019b8c:	4603      	mov	r3, r0
 8019b8e:	6878      	ldr	r0, [r7, #4]
 8019b90:	f7ff ff32 	bl	80199f8 <RadioGetGfskTimeOnAirNumerator>
 8019b94:	4603      	mov	r3, r0
 8019b96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019b9a:	fb02 f303 	mul.w	r3, r2, r3
 8019b9e:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8019ba0:	687b      	ldr	r3, [r7, #4]
 8019ba2:	613b      	str	r3, [r7, #16]
        break;
 8019ba4:	e01e      	b.n	8019be4 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8019ba6:	8c39      	ldrh	r1, [r7, #32]
 8019ba8:	7bba      	ldrb	r2, [r7, #14]
 8019baa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8019bae:	9302      	str	r3, [sp, #8]
 8019bb0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8019bb4:	9301      	str	r3, [sp, #4]
 8019bb6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019bba:	9300      	str	r3, [sp, #0]
 8019bbc:	460b      	mov	r3, r1
 8019bbe:	6879      	ldr	r1, [r7, #4]
 8019bc0:	68b8      	ldr	r0, [r7, #8]
 8019bc2:	f7ff ff43 	bl	8019a4c <RadioGetLoRaTimeOnAirNumerator>
 8019bc6:	4603      	mov	r3, r0
 8019bc8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019bcc:	fb02 f303 	mul.w	r3, r2, r3
 8019bd0:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8019bd2:	4a0a      	ldr	r2, [pc, #40]	; (8019bfc <RadioTimeOnAir+0xac>)
 8019bd4:	68bb      	ldr	r3, [r7, #8]
 8019bd6:	4413      	add	r3, r2
 8019bd8:	781b      	ldrb	r3, [r3, #0]
 8019bda:	4618      	mov	r0, r3
 8019bdc:	f7ff feb6 	bl	801994c <RadioGetLoRaBandwidthInHz>
 8019be0:	6138      	str	r0, [r7, #16]
        break;
 8019be2:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8019be4:	697a      	ldr	r2, [r7, #20]
 8019be6:	693b      	ldr	r3, [r7, #16]
 8019be8:	4413      	add	r3, r2
 8019bea:	1e5a      	subs	r2, r3, #1
 8019bec:	693b      	ldr	r3, [r7, #16]
 8019bee:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8019bf2:	4618      	mov	r0, r3
 8019bf4:	3718      	adds	r7, #24
 8019bf6:	46bd      	mov	sp, r7
 8019bf8:	bd80      	pop	{r7, pc}
 8019bfa:	bf00      	nop
 8019bfc:	0801ebfc 	.word	0x0801ebfc

08019c00 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 8019c00:	b580      	push	{r7, lr}
 8019c02:	b084      	sub	sp, #16
 8019c04:	af00      	add	r7, sp, #0
 8019c06:	6078      	str	r0, [r7, #4]
 8019c08:	460b      	mov	r3, r1
 8019c0a:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8019c0c:	2300      	movs	r3, #0
 8019c0e:	2200      	movs	r2, #0
 8019c10:	f240 2101 	movw	r1, #513	; 0x201
 8019c14:	f240 2001 	movw	r0, #513	; 0x201
 8019c18:	f001 fd66 	bl	801b6e8 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8019c1c:	4b73      	ldr	r3, [pc, #460]	; (8019dec <RadioSend+0x1ec>)
 8019c1e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019c22:	2101      	movs	r1, #1
 8019c24:	4618      	mov	r0, r3
 8019c26:	f002 fa03 	bl	801c030 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8019c2a:	4b70      	ldr	r3, [pc, #448]	; (8019dec <RadioSend+0x1ec>)
 8019c2c:	781b      	ldrb	r3, [r3, #0]
 8019c2e:	2b01      	cmp	r3, #1
 8019c30:	d112      	bne.n	8019c58 <RadioSend+0x58>
 8019c32:	4b6e      	ldr	r3, [pc, #440]	; (8019dec <RadioSend+0x1ec>)
 8019c34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8019c38:	2b06      	cmp	r3, #6
 8019c3a:	d10d      	bne.n	8019c58 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8019c3c:	f640 0089 	movw	r0, #2185	; 0x889
 8019c40:	f002 f916 	bl	801be70 <SUBGRF_ReadRegister>
 8019c44:	4603      	mov	r3, r0
 8019c46:	f023 0304 	bic.w	r3, r3, #4
 8019c4a:	b2db      	uxtb	r3, r3
 8019c4c:	4619      	mov	r1, r3
 8019c4e:	f640 0089 	movw	r0, #2185	; 0x889
 8019c52:	f002 f8f9 	bl	801be48 <SUBGRF_WriteRegister>
 8019c56:	e00c      	b.n	8019c72 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8019c58:	f640 0089 	movw	r0, #2185	; 0x889
 8019c5c:	f002 f908 	bl	801be70 <SUBGRF_ReadRegister>
 8019c60:	4603      	mov	r3, r0
 8019c62:	f043 0304 	orr.w	r3, r3, #4
 8019c66:	b2db      	uxtb	r3, r3
 8019c68:	4619      	mov	r1, r3
 8019c6a:	f640 0089 	movw	r0, #2185	; 0x889
 8019c6e:	f002 f8eb 	bl	801be48 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 8019c72:	4b5e      	ldr	r3, [pc, #376]	; (8019dec <RadioSend+0x1ec>)
 8019c74:	781b      	ldrb	r3, [r3, #0]
 8019c76:	2b04      	cmp	r3, #4
 8019c78:	f200 80a8 	bhi.w	8019dcc <RadioSend+0x1cc>
 8019c7c:	a201      	add	r2, pc, #4	; (adr r2, 8019c84 <RadioSend+0x84>)
 8019c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019c82:	bf00      	nop
 8019c84:	08019cb3 	.word	0x08019cb3
 8019c88:	08019c99 	.word	0x08019c99
 8019c8c:	08019cb3 	.word	0x08019cb3
 8019c90:	08019d15 	.word	0x08019d15
 8019c94:	08019d35 	.word	0x08019d35
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8019c98:	4a54      	ldr	r2, [pc, #336]	; (8019dec <RadioSend+0x1ec>)
 8019c9a:	78fb      	ldrb	r3, [r7, #3]
 8019c9c:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019c9e:	4854      	ldr	r0, [pc, #336]	; (8019df0 <RadioSend+0x1f0>)
 8019ca0:	f001 ff8a 	bl	801bbb8 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8019ca4:	78fb      	ldrb	r3, [r7, #3]
 8019ca6:	2200      	movs	r2, #0
 8019ca8:	4619      	mov	r1, r3
 8019caa:	6878      	ldr	r0, [r7, #4]
 8019cac:	f001 fa3a 	bl	801b124 <SUBGRF_SendPayload>
            break;
 8019cb0:	e08d      	b.n	8019dce <RadioSend+0x1ce>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8019cb2:	f002 fbb6 	bl	801c422 <RFW_Is_Init>
 8019cb6:	4603      	mov	r3, r0
 8019cb8:	2b01      	cmp	r3, #1
 8019cba:	d11e      	bne.n	8019cfa <RadioSend+0xfa>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8019cbc:	f107 020d 	add.w	r2, r7, #13
 8019cc0:	78fb      	ldrb	r3, [r7, #3]
 8019cc2:	4619      	mov	r1, r3
 8019cc4:	6878      	ldr	r0, [r7, #4]
 8019cc6:	f002 fbc4 	bl	801c452 <RFW_TransmitInit>
 8019cca:	4603      	mov	r3, r0
 8019ccc:	2b00      	cmp	r3, #0
 8019cce:	d10c      	bne.n	8019cea <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8019cd0:	7b7a      	ldrb	r2, [r7, #13]
 8019cd2:	4b46      	ldr	r3, [pc, #280]	; (8019dec <RadioSend+0x1ec>)
 8019cd4:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019cd6:	4846      	ldr	r0, [pc, #280]	; (8019df0 <RadioSend+0x1f0>)
 8019cd8:	f001 ff6e 	bl	801bbb8 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 8019cdc:	7b7b      	ldrb	r3, [r7, #13]
 8019cde:	2200      	movs	r2, #0
 8019ce0:	4619      	mov	r1, r3
 8019ce2:	6878      	ldr	r0, [r7, #4]
 8019ce4:	f001 fa1e 	bl	801b124 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8019ce8:	e071      	b.n	8019dce <RadioSend+0x1ce>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 8019cea:	4b42      	ldr	r3, [pc, #264]	; (8019df4 <RadioSend+0x1f4>)
 8019cec:	2201      	movs	r2, #1
 8019cee:	2100      	movs	r1, #0
 8019cf0:	2002      	movs	r0, #2
 8019cf2:	f003 fccf 	bl	801d694 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 8019cf6:	2303      	movs	r3, #3
 8019cf8:	e073      	b.n	8019de2 <RadioSend+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8019cfa:	4a3c      	ldr	r2, [pc, #240]	; (8019dec <RadioSend+0x1ec>)
 8019cfc:	78fb      	ldrb	r3, [r7, #3]
 8019cfe:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019d00:	483b      	ldr	r0, [pc, #236]	; (8019df0 <RadioSend+0x1f0>)
 8019d02:	f001 ff59 	bl	801bbb8 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 8019d06:	78fb      	ldrb	r3, [r7, #3]
 8019d08:	2200      	movs	r2, #0
 8019d0a:	4619      	mov	r1, r3
 8019d0c:	6878      	ldr	r0, [r7, #4]
 8019d0e:	f001 fa09 	bl	801b124 <SUBGRF_SendPayload>
            break;
 8019d12:	e05c      	b.n	8019dce <RadioSend+0x1ce>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8019d14:	4b35      	ldr	r3, [pc, #212]	; (8019dec <RadioSend+0x1ec>)
 8019d16:	2202      	movs	r2, #2
 8019d18:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8019d1a:	4a34      	ldr	r2, [pc, #208]	; (8019dec <RadioSend+0x1ec>)
 8019d1c:	78fb      	ldrb	r3, [r7, #3]
 8019d1e:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019d20:	4833      	ldr	r0, [pc, #204]	; (8019df0 <RadioSend+0x1f0>)
 8019d22:	f001 ff49 	bl	801bbb8 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8019d26:	78fb      	ldrb	r3, [r7, #3]
 8019d28:	2200      	movs	r2, #0
 8019d2a:	4619      	mov	r1, r3
 8019d2c:	6878      	ldr	r0, [r7, #4]
 8019d2e:	f001 f9f9 	bl	801b124 <SUBGRF_SendPayload>
            break;
 8019d32:	e04c      	b.n	8019dce <RadioSend+0x1ce>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8019d34:	78fb      	ldrb	r3, [r7, #3]
 8019d36:	461a      	mov	r2, r3
 8019d38:	6879      	ldr	r1, [r7, #4]
 8019d3a:	482f      	ldr	r0, [pc, #188]	; (8019df8 <RadioSend+0x1f8>)
 8019d3c:	f000 fccc 	bl	801a6d8 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8019d40:	4b2a      	ldr	r3, [pc, #168]	; (8019dec <RadioSend+0x1ec>)
 8019d42:	2202      	movs	r2, #2
 8019d44:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8019d46:	78fb      	ldrb	r3, [r7, #3]
 8019d48:	3301      	adds	r3, #1
 8019d4a:	b2da      	uxtb	r2, r3
 8019d4c:	4b27      	ldr	r3, [pc, #156]	; (8019dec <RadioSend+0x1ec>)
 8019d4e:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019d50:	4827      	ldr	r0, [pc, #156]	; (8019df0 <RadioSend+0x1f0>)
 8019d52:	f001 ff31 	bl	801bbb8 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8019d56:	2100      	movs	r1, #0
 8019d58:	20f1      	movs	r0, #241	; 0xf1
 8019d5a:	f000 f966 	bl	801a02a <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8019d5e:	2100      	movs	r1, #0
 8019d60:	20f0      	movs	r0, #240	; 0xf0
 8019d62:	f000 f962 	bl	801a02a <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8019d66:	4b21      	ldr	r3, [pc, #132]	; (8019dec <RadioSend+0x1ec>)
 8019d68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019d6a:	2b64      	cmp	r3, #100	; 0x64
 8019d6c:	d108      	bne.n	8019d80 <RadioSend+0x180>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8019d6e:	2170      	movs	r1, #112	; 0x70
 8019d70:	20f3      	movs	r0, #243	; 0xf3
 8019d72:	f000 f95a 	bl	801a02a <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8019d76:	211d      	movs	r1, #29
 8019d78:	20f2      	movs	r0, #242	; 0xf2
 8019d7a:	f000 f956 	bl	801a02a <RadioWrite>
 8019d7e:	e007      	b.n	8019d90 <RadioSend+0x190>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8019d80:	21e1      	movs	r1, #225	; 0xe1
 8019d82:	20f3      	movs	r0, #243	; 0xf3
 8019d84:	f000 f951 	bl	801a02a <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8019d88:	2104      	movs	r1, #4
 8019d8a:	20f2      	movs	r0, #242	; 0xf2
 8019d8c:	f000 f94d 	bl	801a02a <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8019d90:	78fb      	ldrb	r3, [r7, #3]
 8019d92:	b29b      	uxth	r3, r3
 8019d94:	00db      	lsls	r3, r3, #3
 8019d96:	b29b      	uxth	r3, r3
 8019d98:	3302      	adds	r3, #2
 8019d9a:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8019d9c:	89fb      	ldrh	r3, [r7, #14]
 8019d9e:	0a1b      	lsrs	r3, r3, #8
 8019da0:	b29b      	uxth	r3, r3
 8019da2:	b2db      	uxtb	r3, r3
 8019da4:	4619      	mov	r1, r3
 8019da6:	20f4      	movs	r0, #244	; 0xf4
 8019da8:	f000 f93f 	bl	801a02a <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8019dac:	89fb      	ldrh	r3, [r7, #14]
 8019dae:	b2db      	uxtb	r3, r3
 8019db0:	4619      	mov	r1, r3
 8019db2:	20f5      	movs	r0, #245	; 0xf5
 8019db4:	f000 f939 	bl	801a02a <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 8019db8:	78fb      	ldrb	r3, [r7, #3]
 8019dba:	3301      	adds	r3, #1
 8019dbc:	b2db      	uxtb	r3, r3
 8019dbe:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8019dc2:	4619      	mov	r1, r3
 8019dc4:	480c      	ldr	r0, [pc, #48]	; (8019df8 <RadioSend+0x1f8>)
 8019dc6:	f001 f9ad 	bl	801b124 <SUBGRF_SendPayload>
            break;
 8019dca:	e000      	b.n	8019dce <RadioSend+0x1ce>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8019dcc:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8019dce:	4b07      	ldr	r3, [pc, #28]	; (8019dec <RadioSend+0x1ec>)
 8019dd0:	685b      	ldr	r3, [r3, #4]
 8019dd2:	4619      	mov	r1, r3
 8019dd4:	4809      	ldr	r0, [pc, #36]	; (8019dfc <RadioSend+0x1fc>)
 8019dd6:	f003 fac3 	bl	801d360 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 8019dda:	4808      	ldr	r0, [pc, #32]	; (8019dfc <RadioSend+0x1fc>)
 8019ddc:	f003 f9e2 	bl	801d1a4 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 8019de0:	2300      	movs	r3, #0
}
 8019de2:	4618      	mov	r0, r3
 8019de4:	3710      	adds	r7, #16
 8019de6:	46bd      	mov	sp, r7
 8019de8:	bd80      	pop	{r7, pc}
 8019dea:	bf00      	nop
 8019dec:	20001be8 	.word	0x20001be8
 8019df0:	20001bf6 	.word	0x20001bf6
 8019df4:	0801e518 	.word	0x0801e518
 8019df8:	20001ae4 	.word	0x20001ae4
 8019dfc:	20001c44 	.word	0x20001c44

08019e00 <RadioSleep>:

static void RadioSleep( void )
{
 8019e00:	b580      	push	{r7, lr}
 8019e02:	b082      	sub	sp, #8
 8019e04:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8019e06:	2300      	movs	r3, #0
 8019e08:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8019e0a:	793b      	ldrb	r3, [r7, #4]
 8019e0c:	f043 0304 	orr.w	r3, r3, #4
 8019e10:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8019e12:	7938      	ldrb	r0, [r7, #4]
 8019e14:	f001 fa62 	bl	801b2dc <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8019e18:	2002      	movs	r0, #2
 8019e1a:	f7e8 fa07 	bl	800222c <HAL_Delay>
}
 8019e1e:	bf00      	nop
 8019e20:	3708      	adds	r7, #8
 8019e22:	46bd      	mov	sp, r7
 8019e24:	bd80      	pop	{r7, pc}

08019e26 <RadioStandby>:

static void RadioStandby( void )
{
 8019e26:	b580      	push	{r7, lr}
 8019e28:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8019e2a:	2000      	movs	r0, #0
 8019e2c:	f001 fa88 	bl	801b340 <SUBGRF_SetStandby>
}
 8019e30:	bf00      	nop
 8019e32:	bd80      	pop	{r7, pc}

08019e34 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8019e34:	b580      	push	{r7, lr}
 8019e36:	b082      	sub	sp, #8
 8019e38:	af00      	add	r7, sp, #0
 8019e3a:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 8019e3c:	f002 faf1 	bl	801c422 <RFW_Is_Init>
 8019e40:	4603      	mov	r3, r0
 8019e42:	2b01      	cmp	r3, #1
 8019e44:	d102      	bne.n	8019e4c <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 8019e46:	f002 fb14 	bl	801c472 <RFW_ReceiveInit>
 8019e4a:	e007      	b.n	8019e5c <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8019e4c:	2300      	movs	r3, #0
 8019e4e:	2200      	movs	r2, #0
 8019e50:	f240 2162 	movw	r1, #610	; 0x262
 8019e54:	f240 2062 	movw	r0, #610	; 0x262
 8019e58:	f001 fc46 	bl	801b6e8 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8019e5c:	687b      	ldr	r3, [r7, #4]
 8019e5e:	2b00      	cmp	r3, #0
 8019e60:	d006      	beq.n	8019e70 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8019e62:	6879      	ldr	r1, [r7, #4]
 8019e64:	4811      	ldr	r0, [pc, #68]	; (8019eac <RadioRx+0x78>)
 8019e66:	f003 fa7b 	bl	801d360 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8019e6a:	4810      	ldr	r0, [pc, #64]	; (8019eac <RadioRx+0x78>)
 8019e6c:	f003 f99a 	bl	801d1a4 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8019e70:	4b0f      	ldr	r3, [pc, #60]	; (8019eb0 <RadioRx+0x7c>)
 8019e72:	2200      	movs	r2, #0
 8019e74:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8019e76:	4b0e      	ldr	r3, [pc, #56]	; (8019eb0 <RadioRx+0x7c>)
 8019e78:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019e7c:	2100      	movs	r1, #0
 8019e7e:	4618      	mov	r0, r3
 8019e80:	f002 f8d6 	bl	801c030 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8019e84:	4b0a      	ldr	r3, [pc, #40]	; (8019eb0 <RadioRx+0x7c>)
 8019e86:	785b      	ldrb	r3, [r3, #1]
 8019e88:	2b00      	cmp	r3, #0
 8019e8a:	d004      	beq.n	8019e96 <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8019e8c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8019e90:	f001 fa92 	bl	801b3b8 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8019e94:	e005      	b.n	8019ea2 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8019e96:	4b06      	ldr	r3, [pc, #24]	; (8019eb0 <RadioRx+0x7c>)
 8019e98:	689b      	ldr	r3, [r3, #8]
 8019e9a:	019b      	lsls	r3, r3, #6
 8019e9c:	4618      	mov	r0, r3
 8019e9e:	f001 fa8b 	bl	801b3b8 <SUBGRF_SetRx>
}
 8019ea2:	bf00      	nop
 8019ea4:	3708      	adds	r7, #8
 8019ea6:	46bd      	mov	sp, r7
 8019ea8:	bd80      	pop	{r7, pc}
 8019eaa:	bf00      	nop
 8019eac:	20001c5c 	.word	0x20001c5c
 8019eb0:	20001be8 	.word	0x20001be8

08019eb4 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8019eb4:	b580      	push	{r7, lr}
 8019eb6:	b082      	sub	sp, #8
 8019eb8:	af00      	add	r7, sp, #0
 8019eba:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 8019ebc:	f002 fab1 	bl	801c422 <RFW_Is_Init>
 8019ec0:	4603      	mov	r3, r0
 8019ec2:	2b01      	cmp	r3, #1
 8019ec4:	d102      	bne.n	8019ecc <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 8019ec6:	f002 fad4 	bl	801c472 <RFW_ReceiveInit>
 8019eca:	e007      	b.n	8019edc <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8019ecc:	2300      	movs	r3, #0
 8019ece:	2200      	movs	r2, #0
 8019ed0:	f240 2162 	movw	r1, #610	; 0x262
 8019ed4:	f240 2062 	movw	r0, #610	; 0x262
 8019ed8:	f001 fc06 	bl	801b6e8 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8019edc:	687b      	ldr	r3, [r7, #4]
 8019ede:	2b00      	cmp	r3, #0
 8019ee0:	d006      	beq.n	8019ef0 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8019ee2:	6879      	ldr	r1, [r7, #4]
 8019ee4:	4811      	ldr	r0, [pc, #68]	; (8019f2c <RadioRxBoosted+0x78>)
 8019ee6:	f003 fa3b 	bl	801d360 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8019eea:	4810      	ldr	r0, [pc, #64]	; (8019f2c <RadioRxBoosted+0x78>)
 8019eec:	f003 f95a 	bl	801d1a4 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8019ef0:	4b0f      	ldr	r3, [pc, #60]	; (8019f30 <RadioRxBoosted+0x7c>)
 8019ef2:	2200      	movs	r2, #0
 8019ef4:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8019ef6:	4b0e      	ldr	r3, [pc, #56]	; (8019f30 <RadioRxBoosted+0x7c>)
 8019ef8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019efc:	2100      	movs	r1, #0
 8019efe:	4618      	mov	r0, r3
 8019f00:	f002 f896 	bl	801c030 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8019f04:	4b0a      	ldr	r3, [pc, #40]	; (8019f30 <RadioRxBoosted+0x7c>)
 8019f06:	785b      	ldrb	r3, [r3, #1]
 8019f08:	2b00      	cmp	r3, #0
 8019f0a:	d004      	beq.n	8019f16 <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8019f0c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8019f10:	f001 fa72 	bl	801b3f8 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8019f14:	e005      	b.n	8019f22 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8019f16:	4b06      	ldr	r3, [pc, #24]	; (8019f30 <RadioRxBoosted+0x7c>)
 8019f18:	689b      	ldr	r3, [r3, #8]
 8019f1a:	019b      	lsls	r3, r3, #6
 8019f1c:	4618      	mov	r0, r3
 8019f1e:	f001 fa6b 	bl	801b3f8 <SUBGRF_SetRxBoosted>
}
 8019f22:	bf00      	nop
 8019f24:	3708      	adds	r7, #8
 8019f26:	46bd      	mov	sp, r7
 8019f28:	bd80      	pop	{r7, pc}
 8019f2a:	bf00      	nop
 8019f2c:	20001c5c 	.word	0x20001c5c
 8019f30:	20001be8 	.word	0x20001be8

08019f34 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8019f34:	b580      	push	{r7, lr}
 8019f36:	b082      	sub	sp, #8
 8019f38:	af00      	add	r7, sp, #0
 8019f3a:	6078      	str	r0, [r7, #4]
 8019f3c:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8019f3e:	687b      	ldr	r3, [r7, #4]
 8019f40:	005a      	lsls	r2, r3, #1
 8019f42:	683b      	ldr	r3, [r7, #0]
 8019f44:	4413      	add	r3, r2
 8019f46:	4a0c      	ldr	r2, [pc, #48]	; (8019f78 <RadioSetRxDutyCycle+0x44>)
 8019f48:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8019f4a:	2300      	movs	r3, #0
 8019f4c:	2200      	movs	r2, #0
 8019f4e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8019f52:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8019f56:	f001 fbc7 	bl	801b6e8 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8019f5a:	4b07      	ldr	r3, [pc, #28]	; (8019f78 <RadioSetRxDutyCycle+0x44>)
 8019f5c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019f60:	2100      	movs	r1, #0
 8019f62:	4618      	mov	r0, r3
 8019f64:	f002 f864 	bl	801c030 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8019f68:	6839      	ldr	r1, [r7, #0]
 8019f6a:	6878      	ldr	r0, [r7, #4]
 8019f6c:	f001 fa68 	bl	801b440 <SUBGRF_SetRxDutyCycle>
}
 8019f70:	bf00      	nop
 8019f72:	3708      	adds	r7, #8
 8019f74:	46bd      	mov	sp, r7
 8019f76:	bd80      	pop	{r7, pc}
 8019f78:	20001be8 	.word	0x20001be8

08019f7c <RadioStartCad>:

static void RadioStartCad( void )
{
 8019f7c:	b580      	push	{r7, lr}
 8019f7e:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8019f80:	4b09      	ldr	r3, [pc, #36]	; (8019fa8 <RadioStartCad+0x2c>)
 8019f82:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019f86:	2100      	movs	r1, #0
 8019f88:	4618      	mov	r0, r3
 8019f8a:	f002 f851 	bl	801c030 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8019f8e:	2300      	movs	r3, #0
 8019f90:	2200      	movs	r2, #0
 8019f92:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8019f96:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8019f9a:	f001 fba5 	bl	801b6e8 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8019f9e:	f001 fa7b 	bl	801b498 <SUBGRF_SetCad>
}
 8019fa2:	bf00      	nop
 8019fa4:	bd80      	pop	{r7, pc}
 8019fa6:	bf00      	nop
 8019fa8:	20001be8 	.word	0x20001be8

08019fac <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8019fac:	b580      	push	{r7, lr}
 8019fae:	b084      	sub	sp, #16
 8019fb0:	af00      	add	r7, sp, #0
 8019fb2:	6078      	str	r0, [r7, #4]
 8019fb4:	460b      	mov	r3, r1
 8019fb6:	70fb      	strb	r3, [r7, #3]
 8019fb8:	4613      	mov	r3, r2
 8019fba:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 8019fbc:	883b      	ldrh	r3, [r7, #0]
 8019fbe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019fc2:	fb02 f303 	mul.w	r3, r2, r3
 8019fc6:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8019fc8:	6878      	ldr	r0, [r7, #4]
 8019fca:	f001 fbe9 	bl	801b7a0 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8019fce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019fd2:	4618      	mov	r0, r3
 8019fd4:	f002 f854 	bl	801c080 <SUBGRF_SetRfTxPower>
 8019fd8:	4603      	mov	r3, r0
 8019fda:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8019fdc:	210e      	movs	r1, #14
 8019fde:	f640 101f 	movw	r0, #2335	; 0x91f
 8019fe2:	f001 ff31 	bl	801be48 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8019fe6:	7afb      	ldrb	r3, [r7, #11]
 8019fe8:	2101      	movs	r1, #1
 8019fea:	4618      	mov	r0, r3
 8019fec:	f002 f820 	bl	801c030 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8019ff0:	f001 fa60 	bl	801b4b4 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8019ff4:	68f9      	ldr	r1, [r7, #12]
 8019ff6:	4805      	ldr	r0, [pc, #20]	; (801a00c <RadioSetTxContinuousWave+0x60>)
 8019ff8:	f003 f9b2 	bl	801d360 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8019ffc:	4803      	ldr	r0, [pc, #12]	; (801a00c <RadioSetTxContinuousWave+0x60>)
 8019ffe:	f003 f8d1 	bl	801d1a4 <UTIL_TIMER_Start>
}
 801a002:	bf00      	nop
 801a004:	3710      	adds	r7, #16
 801a006:	46bd      	mov	sp, r7
 801a008:	bd80      	pop	{r7, pc}
 801a00a:	bf00      	nop
 801a00c:	20001c44 	.word	0x20001c44

0801a010 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 801a010:	b580      	push	{r7, lr}
 801a012:	b082      	sub	sp, #8
 801a014:	af00      	add	r7, sp, #0
 801a016:	4603      	mov	r3, r0
 801a018:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 801a01a:	f001 fe82 	bl	801bd22 <SUBGRF_GetRssiInst>
 801a01e:	4603      	mov	r3, r0
 801a020:	b21b      	sxth	r3, r3
}
 801a022:	4618      	mov	r0, r3
 801a024:	3708      	adds	r7, #8
 801a026:	46bd      	mov	sp, r7
 801a028:	bd80      	pop	{r7, pc}

0801a02a <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 801a02a:	b580      	push	{r7, lr}
 801a02c:	b082      	sub	sp, #8
 801a02e:	af00      	add	r7, sp, #0
 801a030:	4603      	mov	r3, r0
 801a032:	460a      	mov	r2, r1
 801a034:	80fb      	strh	r3, [r7, #6]
 801a036:	4613      	mov	r3, r2
 801a038:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 801a03a:	797a      	ldrb	r2, [r7, #5]
 801a03c:	88fb      	ldrh	r3, [r7, #6]
 801a03e:	4611      	mov	r1, r2
 801a040:	4618      	mov	r0, r3
 801a042:	f001 ff01 	bl	801be48 <SUBGRF_WriteRegister>
}
 801a046:	bf00      	nop
 801a048:	3708      	adds	r7, #8
 801a04a:	46bd      	mov	sp, r7
 801a04c:	bd80      	pop	{r7, pc}

0801a04e <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 801a04e:	b580      	push	{r7, lr}
 801a050:	b082      	sub	sp, #8
 801a052:	af00      	add	r7, sp, #0
 801a054:	4603      	mov	r3, r0
 801a056:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 801a058:	88fb      	ldrh	r3, [r7, #6]
 801a05a:	4618      	mov	r0, r3
 801a05c:	f001 ff08 	bl	801be70 <SUBGRF_ReadRegister>
 801a060:	4603      	mov	r3, r0
}
 801a062:	4618      	mov	r0, r3
 801a064:	3708      	adds	r7, #8
 801a066:	46bd      	mov	sp, r7
 801a068:	bd80      	pop	{r7, pc}

0801a06a <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801a06a:	b580      	push	{r7, lr}
 801a06c:	b082      	sub	sp, #8
 801a06e:	af00      	add	r7, sp, #0
 801a070:	4603      	mov	r3, r0
 801a072:	6039      	str	r1, [r7, #0]
 801a074:	80fb      	strh	r3, [r7, #6]
 801a076:	4613      	mov	r3, r2
 801a078:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 801a07a:	797b      	ldrb	r3, [r7, #5]
 801a07c:	b29a      	uxth	r2, r3
 801a07e:	88fb      	ldrh	r3, [r7, #6]
 801a080:	6839      	ldr	r1, [r7, #0]
 801a082:	4618      	mov	r0, r3
 801a084:	f001 ff08 	bl	801be98 <SUBGRF_WriteRegisters>
}
 801a088:	bf00      	nop
 801a08a:	3708      	adds	r7, #8
 801a08c:	46bd      	mov	sp, r7
 801a08e:	bd80      	pop	{r7, pc}

0801a090 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801a090:	b580      	push	{r7, lr}
 801a092:	b082      	sub	sp, #8
 801a094:	af00      	add	r7, sp, #0
 801a096:	4603      	mov	r3, r0
 801a098:	6039      	str	r1, [r7, #0]
 801a09a:	80fb      	strh	r3, [r7, #6]
 801a09c:	4613      	mov	r3, r2
 801a09e:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 801a0a0:	797b      	ldrb	r3, [r7, #5]
 801a0a2:	b29a      	uxth	r2, r3
 801a0a4:	88fb      	ldrh	r3, [r7, #6]
 801a0a6:	6839      	ldr	r1, [r7, #0]
 801a0a8:	4618      	mov	r0, r3
 801a0aa:	f001 ff17 	bl	801bedc <SUBGRF_ReadRegisters>
}
 801a0ae:	bf00      	nop
 801a0b0:	3708      	adds	r7, #8
 801a0b2:	46bd      	mov	sp, r7
 801a0b4:	bd80      	pop	{r7, pc}
	...

0801a0b8 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 801a0b8:	b580      	push	{r7, lr}
 801a0ba:	b082      	sub	sp, #8
 801a0bc:	af00      	add	r7, sp, #0
 801a0be:	4603      	mov	r3, r0
 801a0c0:	460a      	mov	r2, r1
 801a0c2:	71fb      	strb	r3, [r7, #7]
 801a0c4:	4613      	mov	r3, r2
 801a0c6:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 801a0c8:	79fb      	ldrb	r3, [r7, #7]
 801a0ca:	2b01      	cmp	r3, #1
 801a0cc:	d10a      	bne.n	801a0e4 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 801a0ce:	4a0e      	ldr	r2, [pc, #56]	; (801a108 <RadioSetMaxPayloadLength+0x50>)
 801a0d0:	79bb      	ldrb	r3, [r7, #6]
 801a0d2:	7013      	strb	r3, [r2, #0]
 801a0d4:	4b0c      	ldr	r3, [pc, #48]	; (801a108 <RadioSetMaxPayloadLength+0x50>)
 801a0d6:	781a      	ldrb	r2, [r3, #0]
 801a0d8:	4b0c      	ldr	r3, [pc, #48]	; (801a10c <RadioSetMaxPayloadLength+0x54>)
 801a0da:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a0dc:	480c      	ldr	r0, [pc, #48]	; (801a110 <RadioSetMaxPayloadLength+0x58>)
 801a0de:	f001 fd6b 	bl	801bbb8 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 801a0e2:	e00d      	b.n	801a100 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 801a0e4:	4b09      	ldr	r3, [pc, #36]	; (801a10c <RadioSetMaxPayloadLength+0x54>)
 801a0e6:	7d5b      	ldrb	r3, [r3, #21]
 801a0e8:	2b01      	cmp	r3, #1
 801a0ea:	d109      	bne.n	801a100 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 801a0ec:	4a06      	ldr	r2, [pc, #24]	; (801a108 <RadioSetMaxPayloadLength+0x50>)
 801a0ee:	79bb      	ldrb	r3, [r7, #6]
 801a0f0:	7013      	strb	r3, [r2, #0]
 801a0f2:	4b05      	ldr	r3, [pc, #20]	; (801a108 <RadioSetMaxPayloadLength+0x50>)
 801a0f4:	781a      	ldrb	r2, [r3, #0]
 801a0f6:	4b05      	ldr	r3, [pc, #20]	; (801a10c <RadioSetMaxPayloadLength+0x54>)
 801a0f8:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a0fa:	4805      	ldr	r0, [pc, #20]	; (801a110 <RadioSetMaxPayloadLength+0x58>)
 801a0fc:	f001 fd5c 	bl	801bbb8 <SUBGRF_SetPacketParams>
}
 801a100:	bf00      	nop
 801a102:	3708      	adds	r7, #8
 801a104:	46bd      	mov	sp, r7
 801a106:	bd80      	pop	{r7, pc}
 801a108:	20000134 	.word	0x20000134
 801a10c:	20001be8 	.word	0x20001be8
 801a110:	20001bf6 	.word	0x20001bf6

0801a114 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 801a114:	b580      	push	{r7, lr}
 801a116:	b082      	sub	sp, #8
 801a118:	af00      	add	r7, sp, #0
 801a11a:	4603      	mov	r3, r0
 801a11c:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 801a11e:	4a13      	ldr	r2, [pc, #76]	; (801a16c <RadioSetPublicNetwork+0x58>)
 801a120:	79fb      	ldrb	r3, [r7, #7]
 801a122:	7313      	strb	r3, [r2, #12]
 801a124:	4b11      	ldr	r3, [pc, #68]	; (801a16c <RadioSetPublicNetwork+0x58>)
 801a126:	7b1a      	ldrb	r2, [r3, #12]
 801a128:	4b10      	ldr	r3, [pc, #64]	; (801a16c <RadioSetPublicNetwork+0x58>)
 801a12a:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 801a12c:	2001      	movs	r0, #1
 801a12e:	f7ff f811 	bl	8019154 <RadioSetModem>
    if( enable == true )
 801a132:	79fb      	ldrb	r3, [r7, #7]
 801a134:	2b00      	cmp	r3, #0
 801a136:	d00a      	beq.n	801a14e <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 801a138:	2134      	movs	r1, #52	; 0x34
 801a13a:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801a13e:	f001 fe83 	bl	801be48 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 801a142:	2144      	movs	r1, #68	; 0x44
 801a144:	f240 7041 	movw	r0, #1857	; 0x741
 801a148:	f001 fe7e 	bl	801be48 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 801a14c:	e009      	b.n	801a162 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 801a14e:	2114      	movs	r1, #20
 801a150:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801a154:	f001 fe78 	bl	801be48 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 801a158:	2124      	movs	r1, #36	; 0x24
 801a15a:	f240 7041 	movw	r0, #1857	; 0x741
 801a15e:	f001 fe73 	bl	801be48 <SUBGRF_WriteRegister>
}
 801a162:	bf00      	nop
 801a164:	3708      	adds	r7, #8
 801a166:	46bd      	mov	sp, r7
 801a168:	bd80      	pop	{r7, pc}
 801a16a:	bf00      	nop
 801a16c:	20001be8 	.word	0x20001be8

0801a170 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 801a170:	b580      	push	{r7, lr}
 801a172:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 801a174:	f001 ffb8 	bl	801c0e8 <SUBGRF_GetRadioWakeUpTime>
 801a178:	4603      	mov	r3, r0
 801a17a:	3303      	adds	r3, #3
}
 801a17c:	4618      	mov	r0, r3
 801a17e:	bd80      	pop	{r7, pc}

0801a180 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 801a180:	b580      	push	{r7, lr}
 801a182:	b082      	sub	sp, #8
 801a184:	af00      	add	r7, sp, #0
 801a186:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 801a188:	f000 f80e 	bl	801a1a8 <RadioOnTxTimeoutProcess>
}
 801a18c:	bf00      	nop
 801a18e:	3708      	adds	r7, #8
 801a190:	46bd      	mov	sp, r7
 801a192:	bd80      	pop	{r7, pc}

0801a194 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 801a194:	b580      	push	{r7, lr}
 801a196:	b082      	sub	sp, #8
 801a198:	af00      	add	r7, sp, #0
 801a19a:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 801a19c:	f000 f818 	bl	801a1d0 <RadioOnRxTimeoutProcess>
}
 801a1a0:	bf00      	nop
 801a1a2:	3708      	adds	r7, #8
 801a1a4:	46bd      	mov	sp, r7
 801a1a6:	bd80      	pop	{r7, pc}

0801a1a8 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 801a1a8:	b580      	push	{r7, lr}
 801a1aa:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801a1ac:	4b07      	ldr	r3, [pc, #28]	; (801a1cc <RadioOnTxTimeoutProcess+0x24>)
 801a1ae:	681b      	ldr	r3, [r3, #0]
 801a1b0:	2b00      	cmp	r3, #0
 801a1b2:	d008      	beq.n	801a1c6 <RadioOnTxTimeoutProcess+0x1e>
 801a1b4:	4b05      	ldr	r3, [pc, #20]	; (801a1cc <RadioOnTxTimeoutProcess+0x24>)
 801a1b6:	681b      	ldr	r3, [r3, #0]
 801a1b8:	685b      	ldr	r3, [r3, #4]
 801a1ba:	2b00      	cmp	r3, #0
 801a1bc:	d003      	beq.n	801a1c6 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 801a1be:	4b03      	ldr	r3, [pc, #12]	; (801a1cc <RadioOnTxTimeoutProcess+0x24>)
 801a1c0:	681b      	ldr	r3, [r3, #0]
 801a1c2:	685b      	ldr	r3, [r3, #4]
 801a1c4:	4798      	blx	r3
    }
}
 801a1c6:	bf00      	nop
 801a1c8:	bd80      	pop	{r7, pc}
 801a1ca:	bf00      	nop
 801a1cc:	20001be4 	.word	0x20001be4

0801a1d0 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 801a1d0:	b580      	push	{r7, lr}
 801a1d2:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801a1d4:	4b07      	ldr	r3, [pc, #28]	; (801a1f4 <RadioOnRxTimeoutProcess+0x24>)
 801a1d6:	681b      	ldr	r3, [r3, #0]
 801a1d8:	2b00      	cmp	r3, #0
 801a1da:	d008      	beq.n	801a1ee <RadioOnRxTimeoutProcess+0x1e>
 801a1dc:	4b05      	ldr	r3, [pc, #20]	; (801a1f4 <RadioOnRxTimeoutProcess+0x24>)
 801a1de:	681b      	ldr	r3, [r3, #0]
 801a1e0:	68db      	ldr	r3, [r3, #12]
 801a1e2:	2b00      	cmp	r3, #0
 801a1e4:	d003      	beq.n	801a1ee <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 801a1e6:	4b03      	ldr	r3, [pc, #12]	; (801a1f4 <RadioOnRxTimeoutProcess+0x24>)
 801a1e8:	681b      	ldr	r3, [r3, #0]
 801a1ea:	68db      	ldr	r3, [r3, #12]
 801a1ec:	4798      	blx	r3
    }
}
 801a1ee:	bf00      	nop
 801a1f0:	bd80      	pop	{r7, pc}
 801a1f2:	bf00      	nop
 801a1f4:	20001be4 	.word	0x20001be4

0801a1f8 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 801a1f8:	b580      	push	{r7, lr}
 801a1fa:	b082      	sub	sp, #8
 801a1fc:	af00      	add	r7, sp, #0
 801a1fe:	4603      	mov	r3, r0
 801a200:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 801a202:	4a05      	ldr	r2, [pc, #20]	; (801a218 <RadioOnDioIrq+0x20>)
 801a204:	88fb      	ldrh	r3, [r7, #6]
 801a206:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 801a20a:	f000 f807 	bl	801a21c <RadioIrqProcess>
}
 801a20e:	bf00      	nop
 801a210:	3708      	adds	r7, #8
 801a212:	46bd      	mov	sp, r7
 801a214:	bd80      	pop	{r7, pc}
 801a216:	bf00      	nop
 801a218:	20001be8 	.word	0x20001be8

0801a21c <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 801a21c:	b5b0      	push	{r4, r5, r7, lr}
 801a21e:	b082      	sub	sp, #8
 801a220:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 801a222:	2300      	movs	r3, #0
 801a224:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 801a226:	2300      	movs	r3, #0
 801a228:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 801a22a:	4ba8      	ldr	r3, [pc, #672]	; (801a4cc <RadioIrqProcess+0x2b0>)
 801a22c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801a230:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a234:	f000 810d 	beq.w	801a452 <RadioIrqProcess+0x236>
 801a238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a23c:	f300 81e8 	bgt.w	801a610 <RadioIrqProcess+0x3f4>
 801a240:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a244:	f000 80f1 	beq.w	801a42a <RadioIrqProcess+0x20e>
 801a248:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a24c:	f300 81e0 	bgt.w	801a610 <RadioIrqProcess+0x3f4>
 801a250:	2b80      	cmp	r3, #128	; 0x80
 801a252:	f000 80d6 	beq.w	801a402 <RadioIrqProcess+0x1e6>
 801a256:	2b80      	cmp	r3, #128	; 0x80
 801a258:	f300 81da 	bgt.w	801a610 <RadioIrqProcess+0x3f4>
 801a25c:	2b20      	cmp	r3, #32
 801a25e:	dc49      	bgt.n	801a2f4 <RadioIrqProcess+0xd8>
 801a260:	2b00      	cmp	r3, #0
 801a262:	f340 81d5 	ble.w	801a610 <RadioIrqProcess+0x3f4>
 801a266:	3b01      	subs	r3, #1
 801a268:	2b1f      	cmp	r3, #31
 801a26a:	f200 81d1 	bhi.w	801a610 <RadioIrqProcess+0x3f4>
 801a26e:	a201      	add	r2, pc, #4	; (adr r2, 801a274 <RadioIrqProcess+0x58>)
 801a270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a274:	0801a2fd 	.word	0x0801a2fd
 801a278:	0801a337 	.word	0x0801a337
 801a27c:	0801a611 	.word	0x0801a611
 801a280:	0801a4ed 	.word	0x0801a4ed
 801a284:	0801a611 	.word	0x0801a611
 801a288:	0801a611 	.word	0x0801a611
 801a28c:	0801a611 	.word	0x0801a611
 801a290:	0801a569 	.word	0x0801a569
 801a294:	0801a611 	.word	0x0801a611
 801a298:	0801a611 	.word	0x0801a611
 801a29c:	0801a611 	.word	0x0801a611
 801a2a0:	0801a611 	.word	0x0801a611
 801a2a4:	0801a611 	.word	0x0801a611
 801a2a8:	0801a611 	.word	0x0801a611
 801a2ac:	0801a611 	.word	0x0801a611
 801a2b0:	0801a585 	.word	0x0801a585
 801a2b4:	0801a611 	.word	0x0801a611
 801a2b8:	0801a611 	.word	0x0801a611
 801a2bc:	0801a611 	.word	0x0801a611
 801a2c0:	0801a611 	.word	0x0801a611
 801a2c4:	0801a611 	.word	0x0801a611
 801a2c8:	0801a611 	.word	0x0801a611
 801a2cc:	0801a611 	.word	0x0801a611
 801a2d0:	0801a611 	.word	0x0801a611
 801a2d4:	0801a611 	.word	0x0801a611
 801a2d8:	0801a611 	.word	0x0801a611
 801a2dc:	0801a611 	.word	0x0801a611
 801a2e0:	0801a611 	.word	0x0801a611
 801a2e4:	0801a611 	.word	0x0801a611
 801a2e8:	0801a611 	.word	0x0801a611
 801a2ec:	0801a611 	.word	0x0801a611
 801a2f0:	0801a593 	.word	0x0801a593
 801a2f4:	2b40      	cmp	r3, #64	; 0x40
 801a2f6:	f000 816d 	beq.w	801a5d4 <RadioIrqProcess+0x3b8>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 801a2fa:	e189      	b.n	801a610 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 801a2fc:	4874      	ldr	r0, [pc, #464]	; (801a4d0 <RadioIrqProcess+0x2b4>)
 801a2fe:	f002 ffbf 	bl	801d280 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 801a302:	2000      	movs	r0, #0
 801a304:	f001 f81c 	bl	801b340 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 801a308:	f002 f892 	bl	801c430 <RFW_Is_LongPacketModeEnabled>
 801a30c:	4603      	mov	r3, r0
 801a30e:	2b01      	cmp	r3, #1
 801a310:	d101      	bne.n	801a316 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 801a312:	f002 f8b6 	bl	801c482 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801a316:	4b6f      	ldr	r3, [pc, #444]	; (801a4d4 <RadioIrqProcess+0x2b8>)
 801a318:	681b      	ldr	r3, [r3, #0]
 801a31a:	2b00      	cmp	r3, #0
 801a31c:	f000 817a 	beq.w	801a614 <RadioIrqProcess+0x3f8>
 801a320:	4b6c      	ldr	r3, [pc, #432]	; (801a4d4 <RadioIrqProcess+0x2b8>)
 801a322:	681b      	ldr	r3, [r3, #0]
 801a324:	681b      	ldr	r3, [r3, #0]
 801a326:	2b00      	cmp	r3, #0
 801a328:	f000 8174 	beq.w	801a614 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 801a32c:	4b69      	ldr	r3, [pc, #420]	; (801a4d4 <RadioIrqProcess+0x2b8>)
 801a32e:	681b      	ldr	r3, [r3, #0]
 801a330:	681b      	ldr	r3, [r3, #0]
 801a332:	4798      	blx	r3
        break;
 801a334:	e16e      	b.n	801a614 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 801a336:	4868      	ldr	r0, [pc, #416]	; (801a4d8 <RadioIrqProcess+0x2bc>)
 801a338:	f002 ffa2 	bl	801d280 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801a33c:	4b63      	ldr	r3, [pc, #396]	; (801a4cc <RadioIrqProcess+0x2b0>)
 801a33e:	785b      	ldrb	r3, [r3, #1]
 801a340:	f083 0301 	eor.w	r3, r3, #1
 801a344:	b2db      	uxtb	r3, r3
 801a346:	2b00      	cmp	r3, #0
 801a348:	d014      	beq.n	801a374 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 801a34a:	2000      	movs	r0, #0
 801a34c:	f000 fff8 	bl	801b340 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 801a350:	2100      	movs	r1, #0
 801a352:	f640 1002 	movw	r0, #2306	; 0x902
 801a356:	f001 fd77 	bl	801be48 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 801a35a:	f640 1044 	movw	r0, #2372	; 0x944
 801a35e:	f001 fd87 	bl	801be70 <SUBGRF_ReadRegister>
 801a362:	4603      	mov	r3, r0
 801a364:	f043 0302 	orr.w	r3, r3, #2
 801a368:	b2db      	uxtb	r3, r3
 801a36a:	4619      	mov	r1, r3
 801a36c:	f640 1044 	movw	r0, #2372	; 0x944
 801a370:	f001 fd6a 	bl	801be48 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 801a374:	1dfb      	adds	r3, r7, #7
 801a376:	22ff      	movs	r2, #255	; 0xff
 801a378:	4619      	mov	r1, r3
 801a37a:	4858      	ldr	r0, [pc, #352]	; (801a4dc <RadioIrqProcess+0x2c0>)
 801a37c:	f000 feb0 	bl	801b0e0 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 801a380:	4857      	ldr	r0, [pc, #348]	; (801a4e0 <RadioIrqProcess+0x2c4>)
 801a382:	f001 fd0f 	bl	801bda4 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801a386:	4b53      	ldr	r3, [pc, #332]	; (801a4d4 <RadioIrqProcess+0x2b8>)
 801a388:	681b      	ldr	r3, [r3, #0]
 801a38a:	2b00      	cmp	r3, #0
 801a38c:	f000 8144 	beq.w	801a618 <RadioIrqProcess+0x3fc>
 801a390:	4b50      	ldr	r3, [pc, #320]	; (801a4d4 <RadioIrqProcess+0x2b8>)
 801a392:	681b      	ldr	r3, [r3, #0]
 801a394:	689b      	ldr	r3, [r3, #8]
 801a396:	2b00      	cmp	r3, #0
 801a398:	f000 813e 	beq.w	801a618 <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 801a39c:	4b4b      	ldr	r3, [pc, #300]	; (801a4cc <RadioIrqProcess+0x2b0>)
 801a39e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801a3a2:	2b01      	cmp	r3, #1
 801a3a4:	d10e      	bne.n	801a3c4 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 801a3a6:	4b4b      	ldr	r3, [pc, #300]	; (801a4d4 <RadioIrqProcess+0x2b8>)
 801a3a8:	681b      	ldr	r3, [r3, #0]
 801a3aa:	689c      	ldr	r4, [r3, #8]
 801a3ac:	79fb      	ldrb	r3, [r7, #7]
 801a3ae:	b299      	uxth	r1, r3
 801a3b0:	4b46      	ldr	r3, [pc, #280]	; (801a4cc <RadioIrqProcess+0x2b0>)
 801a3b2:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 801a3b6:	b21a      	sxth	r2, r3
 801a3b8:	4b44      	ldr	r3, [pc, #272]	; (801a4cc <RadioIrqProcess+0x2b0>)
 801a3ba:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 801a3be:	4847      	ldr	r0, [pc, #284]	; (801a4dc <RadioIrqProcess+0x2c0>)
 801a3c0:	47a0      	blx	r4
                break;
 801a3c2:	e01d      	b.n	801a400 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 801a3c4:	4b41      	ldr	r3, [pc, #260]	; (801a4cc <RadioIrqProcess+0x2b0>)
 801a3c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a3c8:	463a      	mov	r2, r7
 801a3ca:	4611      	mov	r1, r2
 801a3cc:	4618      	mov	r0, r3
 801a3ce:	f001 ff7d 	bl	801c2cc <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 801a3d2:	4b40      	ldr	r3, [pc, #256]	; (801a4d4 <RadioIrqProcess+0x2b8>)
 801a3d4:	681b      	ldr	r3, [r3, #0]
 801a3d6:	689c      	ldr	r4, [r3, #8]
 801a3d8:	79fb      	ldrb	r3, [r7, #7]
 801a3da:	b299      	uxth	r1, r3
 801a3dc:	4b3b      	ldr	r3, [pc, #236]	; (801a4cc <RadioIrqProcess+0x2b0>)
 801a3de:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 801a3e2:	b218      	sxth	r0, r3
 801a3e4:	683b      	ldr	r3, [r7, #0]
 801a3e6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 801a3ea:	4a3e      	ldr	r2, [pc, #248]	; (801a4e4 <RadioIrqProcess+0x2c8>)
 801a3ec:	fb82 5203 	smull	r5, r2, r2, r3
 801a3f0:	1192      	asrs	r2, r2, #6
 801a3f2:	17db      	asrs	r3, r3, #31
 801a3f4:	1ad3      	subs	r3, r2, r3
 801a3f6:	b25b      	sxtb	r3, r3
 801a3f8:	4602      	mov	r2, r0
 801a3fa:	4838      	ldr	r0, [pc, #224]	; (801a4dc <RadioIrqProcess+0x2c0>)
 801a3fc:	47a0      	blx	r4
                break;
 801a3fe:	bf00      	nop
        break;
 801a400:	e10a      	b.n	801a618 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 801a402:	2000      	movs	r0, #0
 801a404:	f000 ff9c 	bl	801b340 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801a408:	4b32      	ldr	r3, [pc, #200]	; (801a4d4 <RadioIrqProcess+0x2b8>)
 801a40a:	681b      	ldr	r3, [r3, #0]
 801a40c:	2b00      	cmp	r3, #0
 801a40e:	f000 8105 	beq.w	801a61c <RadioIrqProcess+0x400>
 801a412:	4b30      	ldr	r3, [pc, #192]	; (801a4d4 <RadioIrqProcess+0x2b8>)
 801a414:	681b      	ldr	r3, [r3, #0]
 801a416:	699b      	ldr	r3, [r3, #24]
 801a418:	2b00      	cmp	r3, #0
 801a41a:	f000 80ff 	beq.w	801a61c <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 801a41e:	4b2d      	ldr	r3, [pc, #180]	; (801a4d4 <RadioIrqProcess+0x2b8>)
 801a420:	681b      	ldr	r3, [r3, #0]
 801a422:	699b      	ldr	r3, [r3, #24]
 801a424:	2000      	movs	r0, #0
 801a426:	4798      	blx	r3
        break;
 801a428:	e0f8      	b.n	801a61c <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 801a42a:	2000      	movs	r0, #0
 801a42c:	f000 ff88 	bl	801b340 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801a430:	4b28      	ldr	r3, [pc, #160]	; (801a4d4 <RadioIrqProcess+0x2b8>)
 801a432:	681b      	ldr	r3, [r3, #0]
 801a434:	2b00      	cmp	r3, #0
 801a436:	f000 80f3 	beq.w	801a620 <RadioIrqProcess+0x404>
 801a43a:	4b26      	ldr	r3, [pc, #152]	; (801a4d4 <RadioIrqProcess+0x2b8>)
 801a43c:	681b      	ldr	r3, [r3, #0]
 801a43e:	699b      	ldr	r3, [r3, #24]
 801a440:	2b00      	cmp	r3, #0
 801a442:	f000 80ed 	beq.w	801a620 <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 801a446:	4b23      	ldr	r3, [pc, #140]	; (801a4d4 <RadioIrqProcess+0x2b8>)
 801a448:	681b      	ldr	r3, [r3, #0]
 801a44a:	699b      	ldr	r3, [r3, #24]
 801a44c:	2001      	movs	r0, #1
 801a44e:	4798      	blx	r3
        break;
 801a450:	e0e6      	b.n	801a620 <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 801a452:	4b25      	ldr	r3, [pc, #148]	; (801a4e8 <RadioIrqProcess+0x2cc>)
 801a454:	2201      	movs	r2, #1
 801a456:	2100      	movs	r1, #0
 801a458:	2002      	movs	r0, #2
 801a45a:	f003 f91b 	bl	801d694 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 801a45e:	f000 fe25 	bl	801b0ac <SUBGRF_GetOperatingMode>
 801a462:	4603      	mov	r3, r0
 801a464:	2b04      	cmp	r3, #4
 801a466:	d115      	bne.n	801a494 <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 801a468:	4819      	ldr	r0, [pc, #100]	; (801a4d0 <RadioIrqProcess+0x2b4>)
 801a46a:	f002 ff09 	bl	801d280 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801a46e:	2000      	movs	r0, #0
 801a470:	f000 ff66 	bl	801b340 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801a474:	4b17      	ldr	r3, [pc, #92]	; (801a4d4 <RadioIrqProcess+0x2b8>)
 801a476:	681b      	ldr	r3, [r3, #0]
 801a478:	2b00      	cmp	r3, #0
 801a47a:	f000 80d3 	beq.w	801a624 <RadioIrqProcess+0x408>
 801a47e:	4b15      	ldr	r3, [pc, #84]	; (801a4d4 <RadioIrqProcess+0x2b8>)
 801a480:	681b      	ldr	r3, [r3, #0]
 801a482:	685b      	ldr	r3, [r3, #4]
 801a484:	2b00      	cmp	r3, #0
 801a486:	f000 80cd 	beq.w	801a624 <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 801a48a:	4b12      	ldr	r3, [pc, #72]	; (801a4d4 <RadioIrqProcess+0x2b8>)
 801a48c:	681b      	ldr	r3, [r3, #0]
 801a48e:	685b      	ldr	r3, [r3, #4]
 801a490:	4798      	blx	r3
        break;
 801a492:	e0c7      	b.n	801a624 <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 801a494:	f000 fe0a 	bl	801b0ac <SUBGRF_GetOperatingMode>
 801a498:	4603      	mov	r3, r0
 801a49a:	2b05      	cmp	r3, #5
 801a49c:	f040 80c2 	bne.w	801a624 <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 801a4a0:	480d      	ldr	r0, [pc, #52]	; (801a4d8 <RadioIrqProcess+0x2bc>)
 801a4a2:	f002 feed 	bl	801d280 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801a4a6:	2000      	movs	r0, #0
 801a4a8:	f000 ff4a 	bl	801b340 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801a4ac:	4b09      	ldr	r3, [pc, #36]	; (801a4d4 <RadioIrqProcess+0x2b8>)
 801a4ae:	681b      	ldr	r3, [r3, #0]
 801a4b0:	2b00      	cmp	r3, #0
 801a4b2:	f000 80b7 	beq.w	801a624 <RadioIrqProcess+0x408>
 801a4b6:	4b07      	ldr	r3, [pc, #28]	; (801a4d4 <RadioIrqProcess+0x2b8>)
 801a4b8:	681b      	ldr	r3, [r3, #0]
 801a4ba:	68db      	ldr	r3, [r3, #12]
 801a4bc:	2b00      	cmp	r3, #0
 801a4be:	f000 80b1 	beq.w	801a624 <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 801a4c2:	4b04      	ldr	r3, [pc, #16]	; (801a4d4 <RadioIrqProcess+0x2b8>)
 801a4c4:	681b      	ldr	r3, [r3, #0]
 801a4c6:	68db      	ldr	r3, [r3, #12]
 801a4c8:	4798      	blx	r3
        break;
 801a4ca:	e0ab      	b.n	801a624 <RadioIrqProcess+0x408>
 801a4cc:	20001be8 	.word	0x20001be8
 801a4d0:	20001c44 	.word	0x20001c44
 801a4d4:	20001be4 	.word	0x20001be4
 801a4d8:	20001c5c 	.word	0x20001c5c
 801a4dc:	20001ae4 	.word	0x20001ae4
 801a4e0:	20001c0c 	.word	0x20001c0c
 801a4e4:	10624dd3 	.word	0x10624dd3
 801a4e8:	0801e530 	.word	0x0801e530
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 801a4ec:	4b54      	ldr	r3, [pc, #336]	; (801a640 <RadioIrqProcess+0x424>)
 801a4ee:	2201      	movs	r2, #1
 801a4f0:	2100      	movs	r1, #0
 801a4f2:	2002      	movs	r0, #2
 801a4f4:	f003 f8ce 	bl	801d694 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 801a4f8:	4b52      	ldr	r3, [pc, #328]	; (801a644 <RadioIrqProcess+0x428>)
 801a4fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a4fc:	2b00      	cmp	r3, #0
 801a4fe:	f000 8093 	beq.w	801a628 <RadioIrqProcess+0x40c>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 801a502:	4a51      	ldr	r2, [pc, #324]	; (801a648 <RadioIrqProcess+0x42c>)
 801a504:	4b4f      	ldr	r3, [pc, #316]	; (801a644 <RadioIrqProcess+0x428>)
 801a506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a508:	0c1b      	lsrs	r3, r3, #16
 801a50a:	b2db      	uxtb	r3, r3
 801a50c:	4619      	mov	r1, r3
 801a50e:	f640 1003 	movw	r0, #2307	; 0x903
 801a512:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 801a514:	4a4c      	ldr	r2, [pc, #304]	; (801a648 <RadioIrqProcess+0x42c>)
 801a516:	4b4b      	ldr	r3, [pc, #300]	; (801a644 <RadioIrqProcess+0x428>)
 801a518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a51a:	0a1b      	lsrs	r3, r3, #8
 801a51c:	b2db      	uxtb	r3, r3
 801a51e:	4619      	mov	r1, r3
 801a520:	f640 1004 	movw	r0, #2308	; 0x904
 801a524:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 801a526:	4a48      	ldr	r2, [pc, #288]	; (801a648 <RadioIrqProcess+0x42c>)
 801a528:	4b46      	ldr	r3, [pc, #280]	; (801a644 <RadioIrqProcess+0x428>)
 801a52a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a52c:	b2db      	uxtb	r3, r3
 801a52e:	4619      	mov	r1, r3
 801a530:	f640 1005 	movw	r0, #2309	; 0x905
 801a534:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 801a536:	4c44      	ldr	r4, [pc, #272]	; (801a648 <RadioIrqProcess+0x42c>)
 801a538:	4b44      	ldr	r3, [pc, #272]	; (801a64c <RadioIrqProcess+0x430>)
 801a53a:	f640 1002 	movw	r0, #2306	; 0x902
 801a53e:	4798      	blx	r3
 801a540:	4603      	mov	r3, r0
 801a542:	f043 0301 	orr.w	r3, r3, #1
 801a546:	b2db      	uxtb	r3, r3
 801a548:	4619      	mov	r1, r3
 801a54a:	f640 1002 	movw	r0, #2306	; 0x902
 801a54e:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 801a550:	4b3c      	ldr	r3, [pc, #240]	; (801a644 <RadioIrqProcess+0x428>)
 801a552:	2200      	movs	r2, #0
 801a554:	659a      	str	r2, [r3, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801a556:	2300      	movs	r3, #0
 801a558:	2200      	movs	r2, #0
 801a55a:	f240 2162 	movw	r1, #610	; 0x262
 801a55e:	f240 2062 	movw	r0, #610	; 0x262
 801a562:	f001 f8c1 	bl	801b6e8 <SUBGRF_SetDioIrqParams>
        break;
 801a566:	e05f      	b.n	801a628 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 801a568:	4b39      	ldr	r3, [pc, #228]	; (801a650 <RadioIrqProcess+0x434>)
 801a56a:	2201      	movs	r2, #1
 801a56c:	2100      	movs	r1, #0
 801a56e:	2002      	movs	r0, #2
 801a570:	f003 f890 	bl	801d694 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 801a574:	f001 ff55 	bl	801c422 <RFW_Is_Init>
 801a578:	4603      	mov	r3, r0
 801a57a:	2b01      	cmp	r3, #1
 801a57c:	d156      	bne.n	801a62c <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 801a57e:	f001 ff86 	bl	801c48e <RFW_ReceivePayload>
        break;
 801a582:	e053      	b.n	801a62c <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 801a584:	4b33      	ldr	r3, [pc, #204]	; (801a654 <RadioIrqProcess+0x438>)
 801a586:	2201      	movs	r2, #1
 801a588:	2100      	movs	r1, #0
 801a58a:	2002      	movs	r0, #2
 801a58c:	f003 f882 	bl	801d694 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801a590:	e051      	b.n	801a636 <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 801a592:	4831      	ldr	r0, [pc, #196]	; (801a658 <RadioIrqProcess+0x43c>)
 801a594:	f002 fe74 	bl	801d280 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801a598:	4b2a      	ldr	r3, [pc, #168]	; (801a644 <RadioIrqProcess+0x428>)
 801a59a:	785b      	ldrb	r3, [r3, #1]
 801a59c:	f083 0301 	eor.w	r3, r3, #1
 801a5a0:	b2db      	uxtb	r3, r3
 801a5a2:	2b00      	cmp	r3, #0
 801a5a4:	d002      	beq.n	801a5ac <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 801a5a6:	2000      	movs	r0, #0
 801a5a8:	f000 feca 	bl	801b340 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801a5ac:	4b2b      	ldr	r3, [pc, #172]	; (801a65c <RadioIrqProcess+0x440>)
 801a5ae:	681b      	ldr	r3, [r3, #0]
 801a5b0:	2b00      	cmp	r3, #0
 801a5b2:	d03d      	beq.n	801a630 <RadioIrqProcess+0x414>
 801a5b4:	4b29      	ldr	r3, [pc, #164]	; (801a65c <RadioIrqProcess+0x440>)
 801a5b6:	681b      	ldr	r3, [r3, #0]
 801a5b8:	68db      	ldr	r3, [r3, #12]
 801a5ba:	2b00      	cmp	r3, #0
 801a5bc:	d038      	beq.n	801a630 <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 801a5be:	4b27      	ldr	r3, [pc, #156]	; (801a65c <RadioIrqProcess+0x440>)
 801a5c0:	681b      	ldr	r3, [r3, #0]
 801a5c2:	68db      	ldr	r3, [r3, #12]
 801a5c4:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 801a5c6:	4b26      	ldr	r3, [pc, #152]	; (801a660 <RadioIrqProcess+0x444>)
 801a5c8:	2201      	movs	r2, #1
 801a5ca:	2100      	movs	r1, #0
 801a5cc:	2002      	movs	r0, #2
 801a5ce:	f003 f861 	bl	801d694 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801a5d2:	e02d      	b.n	801a630 <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 801a5d4:	4b23      	ldr	r3, [pc, #140]	; (801a664 <RadioIrqProcess+0x448>)
 801a5d6:	2201      	movs	r2, #1
 801a5d8:	2100      	movs	r1, #0
 801a5da:	2002      	movs	r0, #2
 801a5dc:	f003 f85a 	bl	801d694 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 801a5e0:	4b18      	ldr	r3, [pc, #96]	; (801a644 <RadioIrqProcess+0x428>)
 801a5e2:	785b      	ldrb	r3, [r3, #1]
 801a5e4:	f083 0301 	eor.w	r3, r3, #1
 801a5e8:	b2db      	uxtb	r3, r3
 801a5ea:	2b00      	cmp	r3, #0
 801a5ec:	d002      	beq.n	801a5f4 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 801a5ee:	2000      	movs	r0, #0
 801a5f0:	f000 fea6 	bl	801b340 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 801a5f4:	4b19      	ldr	r3, [pc, #100]	; (801a65c <RadioIrqProcess+0x440>)
 801a5f6:	681b      	ldr	r3, [r3, #0]
 801a5f8:	2b00      	cmp	r3, #0
 801a5fa:	d01b      	beq.n	801a634 <RadioIrqProcess+0x418>
 801a5fc:	4b17      	ldr	r3, [pc, #92]	; (801a65c <RadioIrqProcess+0x440>)
 801a5fe:	681b      	ldr	r3, [r3, #0]
 801a600:	691b      	ldr	r3, [r3, #16]
 801a602:	2b00      	cmp	r3, #0
 801a604:	d016      	beq.n	801a634 <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 801a606:	4b15      	ldr	r3, [pc, #84]	; (801a65c <RadioIrqProcess+0x440>)
 801a608:	681b      	ldr	r3, [r3, #0]
 801a60a:	691b      	ldr	r3, [r3, #16]
 801a60c:	4798      	blx	r3
        break;
 801a60e:	e011      	b.n	801a634 <RadioIrqProcess+0x418>
        break;
 801a610:	bf00      	nop
 801a612:	e010      	b.n	801a636 <RadioIrqProcess+0x41a>
        break;
 801a614:	bf00      	nop
 801a616:	e00e      	b.n	801a636 <RadioIrqProcess+0x41a>
        break;
 801a618:	bf00      	nop
 801a61a:	e00c      	b.n	801a636 <RadioIrqProcess+0x41a>
        break;
 801a61c:	bf00      	nop
 801a61e:	e00a      	b.n	801a636 <RadioIrqProcess+0x41a>
        break;
 801a620:	bf00      	nop
 801a622:	e008      	b.n	801a636 <RadioIrqProcess+0x41a>
        break;
 801a624:	bf00      	nop
 801a626:	e006      	b.n	801a636 <RadioIrqProcess+0x41a>
        break;
 801a628:	bf00      	nop
 801a62a:	e004      	b.n	801a636 <RadioIrqProcess+0x41a>
        break;
 801a62c:	bf00      	nop
 801a62e:	e002      	b.n	801a636 <RadioIrqProcess+0x41a>
        break;
 801a630:	bf00      	nop
 801a632:	e000      	b.n	801a636 <RadioIrqProcess+0x41a>
        break;
 801a634:	bf00      	nop
    }
}
 801a636:	bf00      	nop
 801a638:	3708      	adds	r7, #8
 801a63a:	46bd      	mov	sp, r7
 801a63c:	bdb0      	pop	{r4, r5, r7, pc}
 801a63e:	bf00      	nop
 801a640:	0801e544 	.word	0x0801e544
 801a644:	20001be8 	.word	0x20001be8
 801a648:	0801a02b 	.word	0x0801a02b
 801a64c:	0801a04f 	.word	0x0801a04f
 801a650:	0801e550 	.word	0x0801e550
 801a654:	0801e55c 	.word	0x0801e55c
 801a658:	20001c5c 	.word	0x20001c5c
 801a65c:	20001be4 	.word	0x20001be4
 801a660:	0801e568 	.word	0x0801e568
 801a664:	0801e574 	.word	0x0801e574

0801a668 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 801a668:	b580      	push	{r7, lr}
 801a66a:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801a66c:	4b09      	ldr	r3, [pc, #36]	; (801a694 <RadioTxPrbs+0x2c>)
 801a66e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a672:	2101      	movs	r1, #1
 801a674:	4618      	mov	r0, r3
 801a676:	f001 fcdb 	bl	801c030 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 801a67a:	4b07      	ldr	r3, [pc, #28]	; (801a698 <RadioTxPrbs+0x30>)
 801a67c:	212d      	movs	r1, #45	; 0x2d
 801a67e:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801a682:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 801a684:	f000 ff1f 	bl	801b4c6 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 801a688:	4804      	ldr	r0, [pc, #16]	; (801a69c <RadioTxPrbs+0x34>)
 801a68a:	f000 fe75 	bl	801b378 <SUBGRF_SetTx>
}
 801a68e:	bf00      	nop
 801a690:	bd80      	pop	{r7, pc}
 801a692:	bf00      	nop
 801a694:	20001be8 	.word	0x20001be8
 801a698:	0801a02b 	.word	0x0801a02b
 801a69c:	000fffff 	.word	0x000fffff

0801a6a0 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 801a6a0:	b580      	push	{r7, lr}
 801a6a2:	b084      	sub	sp, #16
 801a6a4:	af00      	add	r7, sp, #0
 801a6a6:	4603      	mov	r3, r0
 801a6a8:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 801a6aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a6ae:	4618      	mov	r0, r3
 801a6b0:	f001 fce6 	bl	801c080 <SUBGRF_SetRfTxPower>
 801a6b4:	4603      	mov	r3, r0
 801a6b6:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801a6b8:	210e      	movs	r1, #14
 801a6ba:	f640 101f 	movw	r0, #2335	; 0x91f
 801a6be:	f001 fbc3 	bl	801be48 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 801a6c2:	7bfb      	ldrb	r3, [r7, #15]
 801a6c4:	2101      	movs	r1, #1
 801a6c6:	4618      	mov	r0, r3
 801a6c8:	f001 fcb2 	bl	801c030 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 801a6cc:	f000 fef2 	bl	801b4b4 <SUBGRF_SetTxContinuousWave>
}
 801a6d0:	bf00      	nop
 801a6d2:	3710      	adds	r7, #16
 801a6d4:	46bd      	mov	sp, r7
 801a6d6:	bd80      	pop	{r7, pc}

0801a6d8 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 801a6d8:	b480      	push	{r7}
 801a6da:	b089      	sub	sp, #36	; 0x24
 801a6dc:	af00      	add	r7, sp, #0
 801a6de:	60f8      	str	r0, [r7, #12]
 801a6e0:	60b9      	str	r1, [r7, #8]
 801a6e2:	4613      	mov	r3, r2
 801a6e4:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 801a6e6:	2300      	movs	r3, #0
 801a6e8:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 801a6ea:	2300      	movs	r3, #0
 801a6ec:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 801a6ee:	2300      	movs	r3, #0
 801a6f0:	61bb      	str	r3, [r7, #24]
 801a6f2:	e011      	b.n	801a718 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 801a6f4:	69bb      	ldr	r3, [r7, #24]
 801a6f6:	68ba      	ldr	r2, [r7, #8]
 801a6f8:	4413      	add	r3, r2
 801a6fa:	781a      	ldrb	r2, [r3, #0]
 801a6fc:	69bb      	ldr	r3, [r7, #24]
 801a6fe:	68b9      	ldr	r1, [r7, #8]
 801a700:	440b      	add	r3, r1
 801a702:	43d2      	mvns	r2, r2
 801a704:	b2d2      	uxtb	r2, r2
 801a706:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 801a708:	69bb      	ldr	r3, [r7, #24]
 801a70a:	68fa      	ldr	r2, [r7, #12]
 801a70c:	4413      	add	r3, r2
 801a70e:	2200      	movs	r2, #0
 801a710:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 801a712:	69bb      	ldr	r3, [r7, #24]
 801a714:	3301      	adds	r3, #1
 801a716:	61bb      	str	r3, [r7, #24]
 801a718:	79fb      	ldrb	r3, [r7, #7]
 801a71a:	69ba      	ldr	r2, [r7, #24]
 801a71c:	429a      	cmp	r2, r3
 801a71e:	dbe9      	blt.n	801a6f4 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 801a720:	2300      	movs	r3, #0
 801a722:	61bb      	str	r3, [r7, #24]
 801a724:	e049      	b.n	801a7ba <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 801a726:	69bb      	ldr	r3, [r7, #24]
 801a728:	425a      	negs	r2, r3
 801a72a:	f003 0307 	and.w	r3, r3, #7
 801a72e:	f002 0207 	and.w	r2, r2, #7
 801a732:	bf58      	it	pl
 801a734:	4253      	negpl	r3, r2
 801a736:	b2db      	uxtb	r3, r3
 801a738:	f1c3 0307 	rsb	r3, r3, #7
 801a73c:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 801a73e:	69bb      	ldr	r3, [r7, #24]
 801a740:	2b00      	cmp	r3, #0
 801a742:	da00      	bge.n	801a746 <payload_integration+0x6e>
 801a744:	3307      	adds	r3, #7
 801a746:	10db      	asrs	r3, r3, #3
 801a748:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 801a74a:	69bb      	ldr	r3, [r7, #24]
 801a74c:	3301      	adds	r3, #1
 801a74e:	425a      	negs	r2, r3
 801a750:	f003 0307 	and.w	r3, r3, #7
 801a754:	f002 0207 	and.w	r2, r2, #7
 801a758:	bf58      	it	pl
 801a75a:	4253      	negpl	r3, r2
 801a75c:	b2db      	uxtb	r3, r3
 801a75e:	f1c3 0307 	rsb	r3, r3, #7
 801a762:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 801a764:	69bb      	ldr	r3, [r7, #24]
 801a766:	3301      	adds	r3, #1
 801a768:	2b00      	cmp	r3, #0
 801a76a:	da00      	bge.n	801a76e <payload_integration+0x96>
 801a76c:	3307      	adds	r3, #7
 801a76e:	10db      	asrs	r3, r3, #3
 801a770:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 801a772:	7dbb      	ldrb	r3, [r7, #22]
 801a774:	68ba      	ldr	r2, [r7, #8]
 801a776:	4413      	add	r3, r2
 801a778:	781b      	ldrb	r3, [r3, #0]
 801a77a:	461a      	mov	r2, r3
 801a77c:	7dfb      	ldrb	r3, [r7, #23]
 801a77e:	fa42 f303 	asr.w	r3, r2, r3
 801a782:	b2db      	uxtb	r3, r3
 801a784:	f003 0301 	and.w	r3, r3, #1
 801a788:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 801a78a:	7ffa      	ldrb	r2, [r7, #31]
 801a78c:	7cfb      	ldrb	r3, [r7, #19]
 801a78e:	4053      	eors	r3, r2
 801a790:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 801a792:	7d3b      	ldrb	r3, [r7, #20]
 801a794:	68fa      	ldr	r2, [r7, #12]
 801a796:	4413      	add	r3, r2
 801a798:	781b      	ldrb	r3, [r3, #0]
 801a79a:	b25a      	sxtb	r2, r3
 801a79c:	7ff9      	ldrb	r1, [r7, #31]
 801a79e:	7d7b      	ldrb	r3, [r7, #21]
 801a7a0:	fa01 f303 	lsl.w	r3, r1, r3
 801a7a4:	b25b      	sxtb	r3, r3
 801a7a6:	4313      	orrs	r3, r2
 801a7a8:	b259      	sxtb	r1, r3
 801a7aa:	7d3b      	ldrb	r3, [r7, #20]
 801a7ac:	68fa      	ldr	r2, [r7, #12]
 801a7ae:	4413      	add	r3, r2
 801a7b0:	b2ca      	uxtb	r2, r1
 801a7b2:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 801a7b4:	69bb      	ldr	r3, [r7, #24]
 801a7b6:	3301      	adds	r3, #1
 801a7b8:	61bb      	str	r3, [r7, #24]
 801a7ba:	79fb      	ldrb	r3, [r7, #7]
 801a7bc:	00db      	lsls	r3, r3, #3
 801a7be:	69ba      	ldr	r2, [r7, #24]
 801a7c0:	429a      	cmp	r2, r3
 801a7c2:	dbb0      	blt.n	801a726 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 801a7c4:	7ffb      	ldrb	r3, [r7, #31]
 801a7c6:	01db      	lsls	r3, r3, #7
 801a7c8:	b25a      	sxtb	r2, r3
 801a7ca:	7ffb      	ldrb	r3, [r7, #31]
 801a7cc:	019b      	lsls	r3, r3, #6
 801a7ce:	b25b      	sxtb	r3, r3
 801a7d0:	4313      	orrs	r3, r2
 801a7d2:	b25b      	sxtb	r3, r3
 801a7d4:	7ffa      	ldrb	r2, [r7, #31]
 801a7d6:	2a00      	cmp	r2, #0
 801a7d8:	d101      	bne.n	801a7de <payload_integration+0x106>
 801a7da:	2220      	movs	r2, #32
 801a7dc:	e000      	b.n	801a7e0 <payload_integration+0x108>
 801a7de:	2200      	movs	r2, #0
 801a7e0:	4313      	orrs	r3, r2
 801a7e2:	b259      	sxtb	r1, r3
 801a7e4:	79fb      	ldrb	r3, [r7, #7]
 801a7e6:	68fa      	ldr	r2, [r7, #12]
 801a7e8:	4413      	add	r3, r2
 801a7ea:	b2ca      	uxtb	r2, r1
 801a7ec:	701a      	strb	r2, [r3, #0]
}
 801a7ee:	bf00      	nop
 801a7f0:	3724      	adds	r7, #36	; 0x24
 801a7f2:	46bd      	mov	sp, r7
 801a7f4:	bc80      	pop	{r7}
 801a7f6:	4770      	bx	lr

0801a7f8 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 801a7f8:	b580      	push	{r7, lr}
 801a7fa:	b08c      	sub	sp, #48	; 0x30
 801a7fc:	af00      	add	r7, sp, #0
 801a7fe:	60b9      	str	r1, [r7, #8]
 801a800:	607a      	str	r2, [r7, #4]
 801a802:	603b      	str	r3, [r7, #0]
 801a804:	4603      	mov	r3, r0
 801a806:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 801a808:	2300      	movs	r3, #0
 801a80a:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 801a80c:	2300      	movs	r3, #0
 801a80e:	623b      	str	r3, [r7, #32]
 801a810:	2300      	movs	r3, #0
 801a812:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801a814:	f001 fdff 	bl	801c416 <RFW_DeInit>

    if( rxContinuous != 0 )
 801a818:	687b      	ldr	r3, [r7, #4]
 801a81a:	2b00      	cmp	r3, #0
 801a81c:	d001      	beq.n	801a822 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 801a81e:	2300      	movs	r3, #0
 801a820:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 801a822:	687b      	ldr	r3, [r7, #4]
 801a824:	2b00      	cmp	r3, #0
 801a826:	bf14      	ite	ne
 801a828:	2301      	movne	r3, #1
 801a82a:	2300      	moveq	r3, #0
 801a82c:	b2da      	uxtb	r2, r3
 801a82e:	4ba3      	ldr	r3, [pc, #652]	; (801aabc <RadioSetRxGenericConfig+0x2c4>)
 801a830:	705a      	strb	r2, [r3, #1]

    switch( modem )
 801a832:	7bfb      	ldrb	r3, [r7, #15]
 801a834:	2b00      	cmp	r3, #0
 801a836:	d003      	beq.n	801a840 <RadioSetRxGenericConfig+0x48>
 801a838:	2b01      	cmp	r3, #1
 801a83a:	f000 80dc 	beq.w	801a9f6 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 801a83e:	e194      	b.n	801ab6a <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 801a840:	68bb      	ldr	r3, [r7, #8]
 801a842:	689b      	ldr	r3, [r3, #8]
 801a844:	2b00      	cmp	r3, #0
 801a846:	d003      	beq.n	801a850 <RadioSetRxGenericConfig+0x58>
 801a848:	68bb      	ldr	r3, [r7, #8]
 801a84a:	68db      	ldr	r3, [r3, #12]
 801a84c:	2b00      	cmp	r3, #0
 801a84e:	d102      	bne.n	801a856 <RadioSetRxGenericConfig+0x5e>
            return -1;
 801a850:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a854:	e18a      	b.n	801ab6c <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 801a856:	68bb      	ldr	r3, [r7, #8]
 801a858:	7f9b      	ldrb	r3, [r3, #30]
 801a85a:	2b08      	cmp	r3, #8
 801a85c:	d902      	bls.n	801a864 <RadioSetRxGenericConfig+0x6c>
            return -1;
 801a85e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a862:	e183      	b.n	801ab6c <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801a864:	68bb      	ldr	r3, [r7, #8]
 801a866:	6919      	ldr	r1, [r3, #16]
 801a868:	68bb      	ldr	r3, [r7, #8]
 801a86a:	7f9b      	ldrb	r3, [r3, #30]
 801a86c:	b29a      	uxth	r2, r3
 801a86e:	f107 0320 	add.w	r3, r7, #32
 801a872:	4618      	mov	r0, r3
 801a874:	f001 fec2 	bl	801c5fc <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801a878:	68bb      	ldr	r3, [r7, #8]
 801a87a:	681b      	ldr	r3, [r3, #0]
 801a87c:	2b00      	cmp	r3, #0
 801a87e:	bf14      	ite	ne
 801a880:	2301      	movne	r3, #1
 801a882:	2300      	moveq	r3, #0
 801a884:	b2db      	uxtb	r3, r3
 801a886:	4618      	mov	r0, r3
 801a888:	f000 fe26 	bl	801b4d8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a88c:	4b8b      	ldr	r3, [pc, #556]	; (801aabc <RadioSetRxGenericConfig+0x2c4>)
 801a88e:	2200      	movs	r2, #0
 801a890:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801a894:	68bb      	ldr	r3, [r7, #8]
 801a896:	689b      	ldr	r3, [r3, #8]
 801a898:	4a88      	ldr	r2, [pc, #544]	; (801aabc <RadioSetRxGenericConfig+0x2c4>)
 801a89a:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801a89c:	68bb      	ldr	r3, [r7, #8]
 801a89e:	f893 2020 	ldrb.w	r2, [r3, #32]
 801a8a2:	4b86      	ldr	r3, [pc, #536]	; (801aabc <RadioSetRxGenericConfig+0x2c4>)
 801a8a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 801a8a8:	68bb      	ldr	r3, [r7, #8]
 801a8aa:	685b      	ldr	r3, [r3, #4]
 801a8ac:	4618      	mov	r0, r3
 801a8ae:	f001 fce5 	bl	801c27c <SUBGRF_GetFskBandwidthRegValue>
 801a8b2:	4603      	mov	r3, r0
 801a8b4:	461a      	mov	r2, r3
 801a8b6:	4b81      	ldr	r3, [pc, #516]	; (801aabc <RadioSetRxGenericConfig+0x2c4>)
 801a8b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a8bc:	4b7f      	ldr	r3, [pc, #508]	; (801aabc <RadioSetRxGenericConfig+0x2c4>)
 801a8be:	2200      	movs	r2, #0
 801a8c0:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 801a8c2:	68bb      	ldr	r3, [r7, #8]
 801a8c4:	68db      	ldr	r3, [r3, #12]
 801a8c6:	b29b      	uxth	r3, r3
 801a8c8:	00db      	lsls	r3, r3, #3
 801a8ca:	b29a      	uxth	r2, r3
 801a8cc:	4b7b      	ldr	r3, [pc, #492]	; (801aabc <RadioSetRxGenericConfig+0x2c4>)
 801a8ce:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 801a8d0:	68bb      	ldr	r3, [r7, #8]
 801a8d2:	7fda      	ldrb	r2, [r3, #31]
 801a8d4:	4b79      	ldr	r3, [pc, #484]	; (801aabc <RadioSetRxGenericConfig+0x2c4>)
 801a8d6:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801a8d8:	68bb      	ldr	r3, [r7, #8]
 801a8da:	7f9b      	ldrb	r3, [r3, #30]
 801a8dc:	00db      	lsls	r3, r3, #3
 801a8de:	b2da      	uxtb	r2, r3
 801a8e0:	4b76      	ldr	r3, [pc, #472]	; (801aabc <RadioSetRxGenericConfig+0x2c4>)
 801a8e2:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 801a8e4:	68bb      	ldr	r3, [r7, #8]
 801a8e6:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 801a8ea:	4b74      	ldr	r3, [pc, #464]	; (801aabc <RadioSetRxGenericConfig+0x2c4>)
 801a8ec:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 801a8ee:	68bb      	ldr	r3, [r7, #8]
 801a8f0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801a8f4:	2b00      	cmp	r3, #0
 801a8f6:	d105      	bne.n	801a904 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 801a8f8:	68bb      	ldr	r3, [r7, #8]
 801a8fa:	695b      	ldr	r3, [r3, #20]
 801a8fc:	b2da      	uxtb	r2, r3
 801a8fe:	4b6f      	ldr	r3, [pc, #444]	; (801aabc <RadioSetRxGenericConfig+0x2c4>)
 801a900:	759a      	strb	r2, [r3, #22]
 801a902:	e00b      	b.n	801a91c <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 801a904:	68bb      	ldr	r3, [r7, #8]
 801a906:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801a90a:	2b02      	cmp	r3, #2
 801a90c:	d103      	bne.n	801a916 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801a90e:	4b6b      	ldr	r3, [pc, #428]	; (801aabc <RadioSetRxGenericConfig+0x2c4>)
 801a910:	22ff      	movs	r2, #255	; 0xff
 801a912:	759a      	strb	r2, [r3, #22]
 801a914:	e002      	b.n	801a91c <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801a916:	4b69      	ldr	r3, [pc, #420]	; (801aabc <RadioSetRxGenericConfig+0x2c4>)
 801a918:	22ff      	movs	r2, #255	; 0xff
 801a91a:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801a91c:	68bb      	ldr	r3, [r7, #8]
 801a91e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801a922:	2b02      	cmp	r3, #2
 801a924:	d004      	beq.n	801a930 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801a926:	68bb      	ldr	r3, [r7, #8]
 801a928:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801a92c:	2b02      	cmp	r3, #2
 801a92e:	d12d      	bne.n	801a98c <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801a930:	68bb      	ldr	r3, [r7, #8]
 801a932:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801a936:	2bf1      	cmp	r3, #241	; 0xf1
 801a938:	d00c      	beq.n	801a954 <RadioSetRxGenericConfig+0x15c>
 801a93a:	68bb      	ldr	r3, [r7, #8]
 801a93c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801a940:	2bf2      	cmp	r3, #242	; 0xf2
 801a942:	d007      	beq.n	801a954 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801a944:	68bb      	ldr	r3, [r7, #8]
 801a946:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801a94a:	2b01      	cmp	r3, #1
 801a94c:	d002      	beq.n	801a954 <RadioSetRxGenericConfig+0x15c>
                return -1;
 801a94e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a952:	e10b      	b.n	801ab6c <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 801a954:	2300      	movs	r3, #0
 801a956:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 801a958:	68bb      	ldr	r3, [r7, #8]
 801a95a:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 801a95c:	4b58      	ldr	r3, [pc, #352]	; (801aac0 <RadioSetRxGenericConfig+0x2c8>)
 801a95e:	6819      	ldr	r1, [r3, #0]
 801a960:	f107 0314 	add.w	r3, r7, #20
 801a964:	4a57      	ldr	r2, [pc, #348]	; (801aac4 <RadioSetRxGenericConfig+0x2cc>)
 801a966:	4618      	mov	r0, r3
 801a968:	f001 fd48 	bl	801c3fc <RFW_Init>
 801a96c:	4603      	mov	r3, r0
 801a96e:	2b00      	cmp	r3, #0
 801a970:	d002      	beq.n	801a978 <RadioSetRxGenericConfig+0x180>
                return -1;
 801a972:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a976:	e0f9      	b.n	801ab6c <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801a978:	4b50      	ldr	r3, [pc, #320]	; (801aabc <RadioSetRxGenericConfig+0x2c4>)
 801a97a:	2200      	movs	r2, #0
 801a97c:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801a97e:	4b4f      	ldr	r3, [pc, #316]	; (801aabc <RadioSetRxGenericConfig+0x2c4>)
 801a980:	2201      	movs	r2, #1
 801a982:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801a984:	4b4d      	ldr	r3, [pc, #308]	; (801aabc <RadioSetRxGenericConfig+0x2c4>)
 801a986:	2200      	movs	r2, #0
 801a988:	755a      	strb	r2, [r3, #21]
        {
 801a98a:	e00e      	b.n	801a9aa <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801a98c:	68bb      	ldr	r3, [r7, #8]
 801a98e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 801a992:	4b4a      	ldr	r3, [pc, #296]	; (801aabc <RadioSetRxGenericConfig+0x2c4>)
 801a994:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801a996:	68bb      	ldr	r3, [r7, #8]
 801a998:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801a99c:	4b47      	ldr	r3, [pc, #284]	; (801aabc <RadioSetRxGenericConfig+0x2c4>)
 801a99e:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 801a9a0:	68bb      	ldr	r3, [r7, #8]
 801a9a2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 801a9a6:	4b45      	ldr	r3, [pc, #276]	; (801aabc <RadioSetRxGenericConfig+0x2c4>)
 801a9a8:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801a9aa:	f7ff fa3c 	bl	8019e26 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801a9ae:	2000      	movs	r0, #0
 801a9b0:	f7fe fbd0 	bl	8019154 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a9b4:	4844      	ldr	r0, [pc, #272]	; (801aac8 <RadioSetRxGenericConfig+0x2d0>)
 801a9b6:	f001 f82d 	bl	801ba14 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a9ba:	4844      	ldr	r0, [pc, #272]	; (801aacc <RadioSetRxGenericConfig+0x2d4>)
 801a9bc:	f001 f8fc 	bl	801bbb8 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801a9c0:	f107 0320 	add.w	r3, r7, #32
 801a9c4:	4618      	mov	r0, r3
 801a9c6:	f000 fbc0 	bl	801b14a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801a9ca:	68bb      	ldr	r3, [r7, #8]
 801a9cc:	8b9b      	ldrh	r3, [r3, #28]
 801a9ce:	4618      	mov	r0, r3
 801a9d0:	f000 fc0a 	bl	801b1e8 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801a9d4:	68bb      	ldr	r3, [r7, #8]
 801a9d6:	8b1b      	ldrh	r3, [r3, #24]
 801a9d8:	4618      	mov	r0, r3
 801a9da:	f000 fbe5 	bl	801b1a8 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 801a9de:	683b      	ldr	r3, [r7, #0]
 801a9e0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801a9e4:	fb03 f202 	mul.w	r2, r3, r2
 801a9e8:	68bb      	ldr	r3, [r7, #8]
 801a9ea:	689b      	ldr	r3, [r3, #8]
 801a9ec:	fbb2 f3f3 	udiv	r3, r2, r3
 801a9f0:	4a32      	ldr	r2, [pc, #200]	; (801aabc <RadioSetRxGenericConfig+0x2c4>)
 801a9f2:	6093      	str	r3, [r2, #8]
        break;
 801a9f4:	e0b9      	b.n	801ab6a <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 801a9f6:	68bb      	ldr	r3, [r7, #8]
 801a9f8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801a9fa:	2b00      	cmp	r3, #0
 801a9fc:	d102      	bne.n	801aa04 <RadioSetRxGenericConfig+0x20c>
            return -1;
 801a9fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801aa02:	e0b3      	b.n	801ab6c <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 801aa04:	68bb      	ldr	r3, [r7, #8]
 801aa06:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801aa0a:	2b01      	cmp	r3, #1
 801aa0c:	d104      	bne.n	801aa18 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 801aa0e:	68bb      	ldr	r3, [r7, #8]
 801aa10:	695b      	ldr	r3, [r3, #20]
 801aa12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801aa16:	e002      	b.n	801aa1e <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 801aa18:	23ff      	movs	r3, #255	; 0xff
 801aa1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801aa1e:	68bb      	ldr	r3, [r7, #8]
 801aa20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801aa22:	2b00      	cmp	r3, #0
 801aa24:	bf14      	ite	ne
 801aa26:	2301      	movne	r3, #1
 801aa28:	2300      	moveq	r3, #0
 801aa2a:	b2db      	uxtb	r3, r3
 801aa2c:	4618      	mov	r0, r3
 801aa2e:	f000 fd53 	bl	801b4d8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801aa32:	683b      	ldr	r3, [r7, #0]
 801aa34:	b2db      	uxtb	r3, r3
 801aa36:	4618      	mov	r0, r3
 801aa38:	f000 fd5d 	bl	801b4f6 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801aa3c:	4b1f      	ldr	r3, [pc, #124]	; (801aabc <RadioSetRxGenericConfig+0x2c4>)
 801aa3e:	2201      	movs	r2, #1
 801aa40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801aa44:	68bb      	ldr	r3, [r7, #8]
 801aa46:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 801aa4a:	4b1c      	ldr	r3, [pc, #112]	; (801aabc <RadioSetRxGenericConfig+0x2c4>)
 801aa4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801aa50:	68bb      	ldr	r3, [r7, #8]
 801aa52:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 801aa56:	4b19      	ldr	r3, [pc, #100]	; (801aabc <RadioSetRxGenericConfig+0x2c4>)
 801aa58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801aa5c:	68bb      	ldr	r3, [r7, #8]
 801aa5e:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801aa62:	4b16      	ldr	r3, [pc, #88]	; (801aabc <RadioSetRxGenericConfig+0x2c4>)
 801aa64:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801aa68:	68bb      	ldr	r3, [r7, #8]
 801aa6a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801aa6e:	2b02      	cmp	r3, #2
 801aa70:	d010      	beq.n	801aa94 <RadioSetRxGenericConfig+0x29c>
 801aa72:	2b02      	cmp	r3, #2
 801aa74:	dc2c      	bgt.n	801aad0 <RadioSetRxGenericConfig+0x2d8>
 801aa76:	2b00      	cmp	r3, #0
 801aa78:	d002      	beq.n	801aa80 <RadioSetRxGenericConfig+0x288>
 801aa7a:	2b01      	cmp	r3, #1
 801aa7c:	d005      	beq.n	801aa8a <RadioSetRxGenericConfig+0x292>
            break;
 801aa7e:	e027      	b.n	801aad0 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801aa80:	4b0e      	ldr	r3, [pc, #56]	; (801aabc <RadioSetRxGenericConfig+0x2c4>)
 801aa82:	2200      	movs	r2, #0
 801aa84:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801aa88:	e023      	b.n	801aad2 <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801aa8a:	4b0c      	ldr	r3, [pc, #48]	; (801aabc <RadioSetRxGenericConfig+0x2c4>)
 801aa8c:	2201      	movs	r2, #1
 801aa8e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801aa92:	e01e      	b.n	801aad2 <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801aa94:	68bb      	ldr	r3, [r7, #8]
 801aa96:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801aa9a:	2b0b      	cmp	r3, #11
 801aa9c:	d004      	beq.n	801aaa8 <RadioSetRxGenericConfig+0x2b0>
 801aa9e:	68bb      	ldr	r3, [r7, #8]
 801aaa0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801aaa4:	2b0c      	cmp	r3, #12
 801aaa6:	d104      	bne.n	801aab2 <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801aaa8:	4b04      	ldr	r3, [pc, #16]	; (801aabc <RadioSetRxGenericConfig+0x2c4>)
 801aaaa:	2201      	movs	r2, #1
 801aaac:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801aab0:	e00f      	b.n	801aad2 <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801aab2:	4b02      	ldr	r3, [pc, #8]	; (801aabc <RadioSetRxGenericConfig+0x2c4>)
 801aab4:	2200      	movs	r2, #0
 801aab6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801aaba:	e00a      	b.n	801aad2 <RadioSetRxGenericConfig+0x2da>
 801aabc:	20001be8 	.word	0x20001be8
 801aac0:	20001be4 	.word	0x20001be4
 801aac4:	20001c5c 	.word	0x20001c5c
 801aac8:	20001c20 	.word	0x20001c20
 801aacc:	20001bf6 	.word	0x20001bf6
            break;
 801aad0:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801aad2:	4b28      	ldr	r3, [pc, #160]	; (801ab74 <RadioSetRxGenericConfig+0x37c>)
 801aad4:	2201      	movs	r2, #1
 801aad6:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801aad8:	68bb      	ldr	r3, [r7, #8]
 801aada:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 801aadc:	4b25      	ldr	r3, [pc, #148]	; (801ab74 <RadioSetRxGenericConfig+0x37c>)
 801aade:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801aae0:	68bb      	ldr	r3, [r7, #8]
 801aae2:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 801aae6:	4b23      	ldr	r3, [pc, #140]	; (801ab74 <RadioSetRxGenericConfig+0x37c>)
 801aae8:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801aaea:	4a22      	ldr	r2, [pc, #136]	; (801ab74 <RadioSetRxGenericConfig+0x37c>)
 801aaec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801aaf0:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801aaf2:	68bb      	ldr	r3, [r7, #8]
 801aaf4:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 801aaf8:	4b1e      	ldr	r3, [pc, #120]	; (801ab74 <RadioSetRxGenericConfig+0x37c>)
 801aafa:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801aafe:	68bb      	ldr	r3, [r7, #8]
 801ab00:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 801ab04:	4b1b      	ldr	r3, [pc, #108]	; (801ab74 <RadioSetRxGenericConfig+0x37c>)
 801ab06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 801ab0a:	f7ff f98c 	bl	8019e26 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801ab0e:	2001      	movs	r0, #1
 801ab10:	f7fe fb20 	bl	8019154 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801ab14:	4818      	ldr	r0, [pc, #96]	; (801ab78 <RadioSetRxGenericConfig+0x380>)
 801ab16:	f000 ff7d 	bl	801ba14 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ab1a:	4818      	ldr	r0, [pc, #96]	; (801ab7c <RadioSetRxGenericConfig+0x384>)
 801ab1c:	f001 f84c 	bl	801bbb8 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801ab20:	4b14      	ldr	r3, [pc, #80]	; (801ab74 <RadioSetRxGenericConfig+0x37c>)
 801ab22:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801ab26:	2b01      	cmp	r3, #1
 801ab28:	d10d      	bne.n	801ab46 <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801ab2a:	f240 7036 	movw	r0, #1846	; 0x736
 801ab2e:	f001 f99f 	bl	801be70 <SUBGRF_ReadRegister>
 801ab32:	4603      	mov	r3, r0
 801ab34:	f023 0304 	bic.w	r3, r3, #4
 801ab38:	b2db      	uxtb	r3, r3
 801ab3a:	4619      	mov	r1, r3
 801ab3c:	f240 7036 	movw	r0, #1846	; 0x736
 801ab40:	f001 f982 	bl	801be48 <SUBGRF_WriteRegister>
 801ab44:	e00c      	b.n	801ab60 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801ab46:	f240 7036 	movw	r0, #1846	; 0x736
 801ab4a:	f001 f991 	bl	801be70 <SUBGRF_ReadRegister>
 801ab4e:	4603      	mov	r3, r0
 801ab50:	f043 0304 	orr.w	r3, r3, #4
 801ab54:	b2db      	uxtb	r3, r3
 801ab56:	4619      	mov	r1, r3
 801ab58:	f240 7036 	movw	r0, #1846	; 0x736
 801ab5c:	f001 f974 	bl	801be48 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 801ab60:	4b04      	ldr	r3, [pc, #16]	; (801ab74 <RadioSetRxGenericConfig+0x37c>)
 801ab62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ab66:	609a      	str	r2, [r3, #8]
        break;
 801ab68:	bf00      	nop
    }
    return status;
 801ab6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801ab6c:	4618      	mov	r0, r3
 801ab6e:	3730      	adds	r7, #48	; 0x30
 801ab70:	46bd      	mov	sp, r7
 801ab72:	bd80      	pop	{r7, pc}
 801ab74:	20001be8 	.word	0x20001be8
 801ab78:	20001c20 	.word	0x20001c20
 801ab7c:	20001bf6 	.word	0x20001bf6

0801ab80 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 801ab80:	b580      	push	{r7, lr}
 801ab82:	b08e      	sub	sp, #56	; 0x38
 801ab84:	af00      	add	r7, sp, #0
 801ab86:	60b9      	str	r1, [r7, #8]
 801ab88:	607b      	str	r3, [r7, #4]
 801ab8a:	4603      	mov	r3, r0
 801ab8c:	73fb      	strb	r3, [r7, #15]
 801ab8e:	4613      	mov	r3, r2
 801ab90:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 801ab92:	2300      	movs	r3, #0
 801ab94:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ab96:	2300      	movs	r3, #0
 801ab98:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801ab9a:	f001 fc3c 	bl	801c416 <RFW_DeInit>
    switch( modem )
 801ab9e:	7bfb      	ldrb	r3, [r7, #15]
 801aba0:	2b03      	cmp	r3, #3
 801aba2:	f200 8204 	bhi.w	801afae <RadioSetTxGenericConfig+0x42e>
 801aba6:	a201      	add	r2, pc, #4	; (adr r2, 801abac <RadioSetTxGenericConfig+0x2c>)
 801aba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801abac:	0801ad31 	.word	0x0801ad31
 801abb0:	0801ae79 	.word	0x0801ae79
 801abb4:	0801af71 	.word	0x0801af71
 801abb8:	0801abbd 	.word	0x0801abbd
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 801abbc:	68bb      	ldr	r3, [r7, #8]
 801abbe:	7c9b      	ldrb	r3, [r3, #18]
 801abc0:	2b08      	cmp	r3, #8
 801abc2:	d902      	bls.n	801abca <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 801abc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801abc8:	e206      	b.n	801afd8 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 801abca:	68bb      	ldr	r3, [r7, #8]
 801abcc:	6899      	ldr	r1, [r3, #8]
 801abce:	68bb      	ldr	r3, [r7, #8]
 801abd0:	7c9b      	ldrb	r3, [r3, #18]
 801abd2:	b29a      	uxth	r2, r3
 801abd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801abd8:	4618      	mov	r0, r3
 801abda:	f001 fd0f 	bl	801c5fc <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 801abde:	68bb      	ldr	r3, [r7, #8]
 801abe0:	681b      	ldr	r3, [r3, #0]
 801abe2:	2b00      	cmp	r3, #0
 801abe4:	d102      	bne.n	801abec <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 801abe6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801abea:	e1f5      	b.n	801afd8 <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 801abec:	68bb      	ldr	r3, [r7, #8]
 801abee:	681b      	ldr	r3, [r3, #0]
 801abf0:	f242 7210 	movw	r2, #10000	; 0x2710
 801abf4:	4293      	cmp	r3, r2
 801abf6:	d813      	bhi.n	801ac20 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 801abf8:	2302      	movs	r3, #2
 801abfa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 801abfe:	4b99      	ldr	r3, [pc, #612]	; (801ae64 <RadioSetTxGenericConfig+0x2e4>)
 801ac00:	2203      	movs	r2, #3
 801ac02:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 801ac04:	4b97      	ldr	r3, [pc, #604]	; (801ae64 <RadioSetTxGenericConfig+0x2e4>)
 801ac06:	2203      	movs	r2, #3
 801ac08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801ac0c:	68bb      	ldr	r3, [r7, #8]
 801ac0e:	681b      	ldr	r3, [r3, #0]
 801ac10:	4a94      	ldr	r2, [pc, #592]	; (801ae64 <RadioSetTxGenericConfig+0x2e4>)
 801ac12:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801ac14:	68bb      	ldr	r3, [r7, #8]
 801ac16:	7cda      	ldrb	r2, [r3, #19]
 801ac18:	4b92      	ldr	r3, [pc, #584]	; (801ae64 <RadioSetTxGenericConfig+0x2e4>)
 801ac1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801ac1e:	e017      	b.n	801ac50 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 801ac20:	2300      	movs	r3, #0
 801ac22:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801ac26:	4b8f      	ldr	r3, [pc, #572]	; (801ae64 <RadioSetTxGenericConfig+0x2e4>)
 801ac28:	2200      	movs	r2, #0
 801ac2a:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801ac2c:	4b8d      	ldr	r3, [pc, #564]	; (801ae64 <RadioSetTxGenericConfig+0x2e4>)
 801ac2e:	2200      	movs	r2, #0
 801ac30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801ac34:	68bb      	ldr	r3, [r7, #8]
 801ac36:	681b      	ldr	r3, [r3, #0]
 801ac38:	4a8a      	ldr	r2, [pc, #552]	; (801ae64 <RadioSetTxGenericConfig+0x2e4>)
 801ac3a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801ac3c:	68bb      	ldr	r3, [r7, #8]
 801ac3e:	7cda      	ldrb	r2, [r3, #19]
 801ac40:	4b88      	ldr	r3, [pc, #544]	; (801ae64 <RadioSetTxGenericConfig+0x2e4>)
 801ac42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 801ac46:	68bb      	ldr	r3, [r7, #8]
 801ac48:	681b      	ldr	r3, [r3, #0]
 801ac4a:	089b      	lsrs	r3, r3, #2
 801ac4c:	4a85      	ldr	r2, [pc, #532]	; (801ae64 <RadioSetTxGenericConfig+0x2e4>)
 801ac4e:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 801ac50:	68bb      	ldr	r3, [r7, #8]
 801ac52:	685b      	ldr	r3, [r3, #4]
 801ac54:	b29b      	uxth	r3, r3
 801ac56:	00db      	lsls	r3, r3, #3
 801ac58:	b29a      	uxth	r2, r3
 801ac5a:	4b82      	ldr	r3, [pc, #520]	; (801ae64 <RadioSetTxGenericConfig+0x2e4>)
 801ac5c:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801ac5e:	4b81      	ldr	r3, [pc, #516]	; (801ae64 <RadioSetTxGenericConfig+0x2e4>)
 801ac60:	2204      	movs	r2, #4
 801ac62:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 801ac64:	68bb      	ldr	r3, [r7, #8]
 801ac66:	7c9b      	ldrb	r3, [r3, #18]
 801ac68:	00db      	lsls	r3, r3, #3
 801ac6a:	b2da      	uxtb	r2, r3
 801ac6c:	4b7d      	ldr	r3, [pc, #500]	; (801ae64 <RadioSetTxGenericConfig+0x2e4>)
 801ac6e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801ac70:	4b7c      	ldr	r3, [pc, #496]	; (801ae64 <RadioSetTxGenericConfig+0x2e4>)
 801ac72:	2200      	movs	r2, #0
 801ac74:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801ac76:	68bb      	ldr	r3, [r7, #8]
 801ac78:	7d9b      	ldrb	r3, [r3, #22]
 801ac7a:	2b02      	cmp	r3, #2
 801ac7c:	d003      	beq.n	801ac86 <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801ac7e:	68bb      	ldr	r3, [r7, #8]
 801ac80:	7d1b      	ldrb	r3, [r3, #20]
 801ac82:	2b02      	cmp	r3, #2
 801ac84:	d12b      	bne.n	801acde <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801ac86:	68bb      	ldr	r3, [r7, #8]
 801ac88:	7d5b      	ldrb	r3, [r3, #21]
 801ac8a:	2bf1      	cmp	r3, #241	; 0xf1
 801ac8c:	d00a      	beq.n	801aca4 <RadioSetTxGenericConfig+0x124>
 801ac8e:	68bb      	ldr	r3, [r7, #8]
 801ac90:	7d5b      	ldrb	r3, [r3, #21]
 801ac92:	2bf2      	cmp	r3, #242	; 0xf2
 801ac94:	d006      	beq.n	801aca4 <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801ac96:	68bb      	ldr	r3, [r7, #8]
 801ac98:	7d5b      	ldrb	r3, [r3, #21]
 801ac9a:	2b01      	cmp	r3, #1
 801ac9c:	d002      	beq.n	801aca4 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 801ac9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801aca2:	e199      	b.n	801afd8 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 801aca4:	68bb      	ldr	r3, [r7, #8]
 801aca6:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 801aca8:	2301      	movs	r3, #1
 801acaa:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801acae:	4b6e      	ldr	r3, [pc, #440]	; (801ae68 <RadioSetTxGenericConfig+0x2e8>)
 801acb0:	6819      	ldr	r1, [r3, #0]
 801acb2:	f107 0320 	add.w	r3, r7, #32
 801acb6:	4a6d      	ldr	r2, [pc, #436]	; (801ae6c <RadioSetTxGenericConfig+0x2ec>)
 801acb8:	4618      	mov	r0, r3
 801acba:	f001 fb9f 	bl	801c3fc <RFW_Init>
 801acbe:	4603      	mov	r3, r0
 801acc0:	2b00      	cmp	r3, #0
 801acc2:	d002      	beq.n	801acca <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 801acc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801acc8:	e186      	b.n	801afd8 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801acca:	4b66      	ldr	r3, [pc, #408]	; (801ae64 <RadioSetTxGenericConfig+0x2e4>)
 801accc:	2200      	movs	r2, #0
 801acce:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801acd0:	4b64      	ldr	r3, [pc, #400]	; (801ae64 <RadioSetTxGenericConfig+0x2e4>)
 801acd2:	2201      	movs	r2, #1
 801acd4:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801acd6:	4b63      	ldr	r3, [pc, #396]	; (801ae64 <RadioSetTxGenericConfig+0x2e4>)
 801acd8:	2200      	movs	r2, #0
 801acda:	755a      	strb	r2, [r3, #21]
        {
 801acdc:	e00b      	b.n	801acf6 <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 801acde:	68bb      	ldr	r3, [r7, #8]
 801ace0:	7d5a      	ldrb	r2, [r3, #21]
 801ace2:	4b60      	ldr	r3, [pc, #384]	; (801ae64 <RadioSetTxGenericConfig+0x2e4>)
 801ace4:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 801ace6:	68bb      	ldr	r3, [r7, #8]
 801ace8:	7d9a      	ldrb	r2, [r3, #22]
 801acea:	4b5e      	ldr	r3, [pc, #376]	; (801ae64 <RadioSetTxGenericConfig+0x2e4>)
 801acec:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 801acee:	68bb      	ldr	r3, [r7, #8]
 801acf0:	7d1a      	ldrb	r2, [r3, #20]
 801acf2:	4b5c      	ldr	r3, [pc, #368]	; (801ae64 <RadioSetTxGenericConfig+0x2e4>)
 801acf4:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801acf6:	f7ff f896 	bl	8019e26 <RadioStandby>
        RadioSetModem( radio_modem );
 801acfa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801acfe:	4618      	mov	r0, r3
 801ad00:	f7fe fa28 	bl	8019154 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801ad04:	485a      	ldr	r0, [pc, #360]	; (801ae70 <RadioSetTxGenericConfig+0x2f0>)
 801ad06:	f000 fe85 	bl	801ba14 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ad0a:	485a      	ldr	r0, [pc, #360]	; (801ae74 <RadioSetTxGenericConfig+0x2f4>)
 801ad0c:	f000 ff54 	bl	801bbb8 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801ad10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801ad14:	4618      	mov	r0, r3
 801ad16:	f000 fa18 	bl	801b14a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 801ad1a:	68bb      	ldr	r3, [r7, #8]
 801ad1c:	8a1b      	ldrh	r3, [r3, #16]
 801ad1e:	4618      	mov	r0, r3
 801ad20:	f000 fa62 	bl	801b1e8 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 801ad24:	68bb      	ldr	r3, [r7, #8]
 801ad26:	899b      	ldrh	r3, [r3, #12]
 801ad28:	4618      	mov	r0, r3
 801ad2a:	f000 fa3d 	bl	801b1a8 <SUBGRF_SetCrcPolynomial>
        break;
 801ad2e:	e13f      	b.n	801afb0 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 801ad30:	68bb      	ldr	r3, [r7, #8]
 801ad32:	681b      	ldr	r3, [r3, #0]
 801ad34:	2b00      	cmp	r3, #0
 801ad36:	d102      	bne.n	801ad3e <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 801ad38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ad3c:	e14c      	b.n	801afd8 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 801ad3e:	68bb      	ldr	r3, [r7, #8]
 801ad40:	7c9b      	ldrb	r3, [r3, #18]
 801ad42:	2b08      	cmp	r3, #8
 801ad44:	d902      	bls.n	801ad4c <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 801ad46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ad4a:	e145      	b.n	801afd8 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801ad4c:	68bb      	ldr	r3, [r7, #8]
 801ad4e:	6899      	ldr	r1, [r3, #8]
 801ad50:	68bb      	ldr	r3, [r7, #8]
 801ad52:	7c9b      	ldrb	r3, [r3, #18]
 801ad54:	b29a      	uxth	r2, r3
 801ad56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801ad5a:	4618      	mov	r0, r3
 801ad5c:	f001 fc4e 	bl	801c5fc <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801ad60:	4b40      	ldr	r3, [pc, #256]	; (801ae64 <RadioSetTxGenericConfig+0x2e4>)
 801ad62:	2200      	movs	r2, #0
 801ad64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801ad68:	68bb      	ldr	r3, [r7, #8]
 801ad6a:	681b      	ldr	r3, [r3, #0]
 801ad6c:	4a3d      	ldr	r2, [pc, #244]	; (801ae64 <RadioSetTxGenericConfig+0x2e4>)
 801ad6e:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801ad70:	68bb      	ldr	r3, [r7, #8]
 801ad72:	7cda      	ldrb	r2, [r3, #19]
 801ad74:	4b3b      	ldr	r3, [pc, #236]	; (801ae64 <RadioSetTxGenericConfig+0x2e4>)
 801ad76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801ad7a:	68bb      	ldr	r3, [r7, #8]
 801ad7c:	699b      	ldr	r3, [r3, #24]
 801ad7e:	4a39      	ldr	r2, [pc, #228]	; (801ae64 <RadioSetTxGenericConfig+0x2e4>)
 801ad80:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801ad82:	4b38      	ldr	r3, [pc, #224]	; (801ae64 <RadioSetTxGenericConfig+0x2e4>)
 801ad84:	2200      	movs	r2, #0
 801ad86:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 801ad88:	68bb      	ldr	r3, [r7, #8]
 801ad8a:	685b      	ldr	r3, [r3, #4]
 801ad8c:	b29b      	uxth	r3, r3
 801ad8e:	00db      	lsls	r3, r3, #3
 801ad90:	b29a      	uxth	r2, r3
 801ad92:	4b34      	ldr	r3, [pc, #208]	; (801ae64 <RadioSetTxGenericConfig+0x2e4>)
 801ad94:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801ad96:	4b33      	ldr	r3, [pc, #204]	; (801ae64 <RadioSetTxGenericConfig+0x2e4>)
 801ad98:	2204      	movs	r2, #4
 801ad9a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801ad9c:	68bb      	ldr	r3, [r7, #8]
 801ad9e:	7c9b      	ldrb	r3, [r3, #18]
 801ada0:	00db      	lsls	r3, r3, #3
 801ada2:	b2da      	uxtb	r2, r3
 801ada4:	4b2f      	ldr	r3, [pc, #188]	; (801ae64 <RadioSetTxGenericConfig+0x2e4>)
 801ada6:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801ada8:	4b2e      	ldr	r3, [pc, #184]	; (801ae64 <RadioSetTxGenericConfig+0x2e4>)
 801adaa:	2200      	movs	r2, #0
 801adac:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801adae:	68bb      	ldr	r3, [r7, #8]
 801adb0:	7d9b      	ldrb	r3, [r3, #22]
 801adb2:	2b02      	cmp	r3, #2
 801adb4:	d003      	beq.n	801adbe <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801adb6:	68bb      	ldr	r3, [r7, #8]
 801adb8:	7d1b      	ldrb	r3, [r3, #20]
 801adba:	2b02      	cmp	r3, #2
 801adbc:	d12a      	bne.n	801ae14 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801adbe:	68bb      	ldr	r3, [r7, #8]
 801adc0:	7d5b      	ldrb	r3, [r3, #21]
 801adc2:	2bf1      	cmp	r3, #241	; 0xf1
 801adc4:	d00a      	beq.n	801addc <RadioSetTxGenericConfig+0x25c>
 801adc6:	68bb      	ldr	r3, [r7, #8]
 801adc8:	7d5b      	ldrb	r3, [r3, #21]
 801adca:	2bf2      	cmp	r3, #242	; 0xf2
 801adcc:	d006      	beq.n	801addc <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801adce:	68bb      	ldr	r3, [r7, #8]
 801add0:	7d5b      	ldrb	r3, [r3, #21]
 801add2:	2b01      	cmp	r3, #1
 801add4:	d002      	beq.n	801addc <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 801add6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801adda:	e0fd      	b.n	801afd8 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 801addc:	2301      	movs	r3, #1
 801adde:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 801ade0:	68bb      	ldr	r3, [r7, #8]
 801ade2:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801ade4:	4b20      	ldr	r3, [pc, #128]	; (801ae68 <RadioSetTxGenericConfig+0x2e8>)
 801ade6:	6819      	ldr	r1, [r3, #0]
 801ade8:	f107 0314 	add.w	r3, r7, #20
 801adec:	4a1f      	ldr	r2, [pc, #124]	; (801ae6c <RadioSetTxGenericConfig+0x2ec>)
 801adee:	4618      	mov	r0, r3
 801adf0:	f001 fb04 	bl	801c3fc <RFW_Init>
 801adf4:	4603      	mov	r3, r0
 801adf6:	2b00      	cmp	r3, #0
 801adf8:	d002      	beq.n	801ae00 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 801adfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801adfe:	e0eb      	b.n	801afd8 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801ae00:	4b18      	ldr	r3, [pc, #96]	; (801ae64 <RadioSetTxGenericConfig+0x2e4>)
 801ae02:	2200      	movs	r2, #0
 801ae04:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801ae06:	4b17      	ldr	r3, [pc, #92]	; (801ae64 <RadioSetTxGenericConfig+0x2e4>)
 801ae08:	2201      	movs	r2, #1
 801ae0a:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801ae0c:	4b15      	ldr	r3, [pc, #84]	; (801ae64 <RadioSetTxGenericConfig+0x2e4>)
 801ae0e:	2200      	movs	r2, #0
 801ae10:	755a      	strb	r2, [r3, #21]
        {
 801ae12:	e00b      	b.n	801ae2c <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801ae14:	68bb      	ldr	r3, [r7, #8]
 801ae16:	7d5a      	ldrb	r2, [r3, #21]
 801ae18:	4b12      	ldr	r3, [pc, #72]	; (801ae64 <RadioSetTxGenericConfig+0x2e4>)
 801ae1a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801ae1c:	68bb      	ldr	r3, [r7, #8]
 801ae1e:	7d9a      	ldrb	r2, [r3, #22]
 801ae20:	4b10      	ldr	r3, [pc, #64]	; (801ae64 <RadioSetTxGenericConfig+0x2e4>)
 801ae22:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 801ae24:	68bb      	ldr	r3, [r7, #8]
 801ae26:	7d1a      	ldrb	r2, [r3, #20]
 801ae28:	4b0e      	ldr	r3, [pc, #56]	; (801ae64 <RadioSetTxGenericConfig+0x2e4>)
 801ae2a:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801ae2c:	f7fe fffb 	bl	8019e26 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801ae30:	2000      	movs	r0, #0
 801ae32:	f7fe f98f 	bl	8019154 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801ae36:	480e      	ldr	r0, [pc, #56]	; (801ae70 <RadioSetTxGenericConfig+0x2f0>)
 801ae38:	f000 fdec 	bl	801ba14 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ae3c:	480d      	ldr	r0, [pc, #52]	; (801ae74 <RadioSetTxGenericConfig+0x2f4>)
 801ae3e:	f000 febb 	bl	801bbb8 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801ae42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801ae46:	4618      	mov	r0, r3
 801ae48:	f000 f97f 	bl	801b14a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801ae4c:	68bb      	ldr	r3, [r7, #8]
 801ae4e:	8a1b      	ldrh	r3, [r3, #16]
 801ae50:	4618      	mov	r0, r3
 801ae52:	f000 f9c9 	bl	801b1e8 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801ae56:	68bb      	ldr	r3, [r7, #8]
 801ae58:	899b      	ldrh	r3, [r3, #12]
 801ae5a:	4618      	mov	r0, r3
 801ae5c:	f000 f9a4 	bl	801b1a8 <SUBGRF_SetCrcPolynomial>
        break;
 801ae60:	e0a6      	b.n	801afb0 <RadioSetTxGenericConfig+0x430>
 801ae62:	bf00      	nop
 801ae64:	20001be8 	.word	0x20001be8
 801ae68:	20001be4 	.word	0x20001be4
 801ae6c:	20001c44 	.word	0x20001c44
 801ae70:	20001c20 	.word	0x20001c20
 801ae74:	20001bf6 	.word	0x20001bf6
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801ae78:	4b59      	ldr	r3, [pc, #356]	; (801afe0 <RadioSetTxGenericConfig+0x460>)
 801ae7a:	2201      	movs	r2, #1
 801ae7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801ae80:	68bb      	ldr	r3, [r7, #8]
 801ae82:	781a      	ldrb	r2, [r3, #0]
 801ae84:	4b56      	ldr	r3, [pc, #344]	; (801afe0 <RadioSetTxGenericConfig+0x460>)
 801ae86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801ae8a:	68bb      	ldr	r3, [r7, #8]
 801ae8c:	785a      	ldrb	r2, [r3, #1]
 801ae8e:	4b54      	ldr	r3, [pc, #336]	; (801afe0 <RadioSetTxGenericConfig+0x460>)
 801ae90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801ae94:	68bb      	ldr	r3, [r7, #8]
 801ae96:	789a      	ldrb	r2, [r3, #2]
 801ae98:	4b51      	ldr	r3, [pc, #324]	; (801afe0 <RadioSetTxGenericConfig+0x460>)
 801ae9a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801ae9e:	68bb      	ldr	r3, [r7, #8]
 801aea0:	78db      	ldrb	r3, [r3, #3]
 801aea2:	2b02      	cmp	r3, #2
 801aea4:	d010      	beq.n	801aec8 <RadioSetTxGenericConfig+0x348>
 801aea6:	2b02      	cmp	r3, #2
 801aea8:	dc20      	bgt.n	801aeec <RadioSetTxGenericConfig+0x36c>
 801aeaa:	2b00      	cmp	r3, #0
 801aeac:	d002      	beq.n	801aeb4 <RadioSetTxGenericConfig+0x334>
 801aeae:	2b01      	cmp	r3, #1
 801aeb0:	d005      	beq.n	801aebe <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 801aeb2:	e01b      	b.n	801aeec <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801aeb4:	4b4a      	ldr	r3, [pc, #296]	; (801afe0 <RadioSetTxGenericConfig+0x460>)
 801aeb6:	2200      	movs	r2, #0
 801aeb8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801aebc:	e017      	b.n	801aeee <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801aebe:	4b48      	ldr	r3, [pc, #288]	; (801afe0 <RadioSetTxGenericConfig+0x460>)
 801aec0:	2201      	movs	r2, #1
 801aec2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801aec6:	e012      	b.n	801aeee <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801aec8:	68bb      	ldr	r3, [r7, #8]
 801aeca:	781b      	ldrb	r3, [r3, #0]
 801aecc:	2b0b      	cmp	r3, #11
 801aece:	d003      	beq.n	801aed8 <RadioSetTxGenericConfig+0x358>
 801aed0:	68bb      	ldr	r3, [r7, #8]
 801aed2:	781b      	ldrb	r3, [r3, #0]
 801aed4:	2b0c      	cmp	r3, #12
 801aed6:	d104      	bne.n	801aee2 <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801aed8:	4b41      	ldr	r3, [pc, #260]	; (801afe0 <RadioSetTxGenericConfig+0x460>)
 801aeda:	2201      	movs	r2, #1
 801aedc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801aee0:	e005      	b.n	801aeee <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801aee2:	4b3f      	ldr	r3, [pc, #252]	; (801afe0 <RadioSetTxGenericConfig+0x460>)
 801aee4:	2200      	movs	r2, #0
 801aee6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801aeea:	e000      	b.n	801aeee <RadioSetTxGenericConfig+0x36e>
            break;
 801aeec:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801aeee:	4b3c      	ldr	r3, [pc, #240]	; (801afe0 <RadioSetTxGenericConfig+0x460>)
 801aef0:	2201      	movs	r2, #1
 801aef2:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801aef4:	68bb      	ldr	r3, [r7, #8]
 801aef6:	889a      	ldrh	r2, [r3, #4]
 801aef8:	4b39      	ldr	r3, [pc, #228]	; (801afe0 <RadioSetTxGenericConfig+0x460>)
 801aefa:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801aefc:	68bb      	ldr	r3, [r7, #8]
 801aefe:	799a      	ldrb	r2, [r3, #6]
 801af00:	4b37      	ldr	r3, [pc, #220]	; (801afe0 <RadioSetTxGenericConfig+0x460>)
 801af02:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801af04:	68bb      	ldr	r3, [r7, #8]
 801af06:	79da      	ldrb	r2, [r3, #7]
 801af08:	4b35      	ldr	r3, [pc, #212]	; (801afe0 <RadioSetTxGenericConfig+0x460>)
 801af0a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801af0e:	68bb      	ldr	r3, [r7, #8]
 801af10:	7a1a      	ldrb	r2, [r3, #8]
 801af12:	4b33      	ldr	r3, [pc, #204]	; (801afe0 <RadioSetTxGenericConfig+0x460>)
 801af14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 801af18:	f7fe ff85 	bl	8019e26 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801af1c:	2001      	movs	r0, #1
 801af1e:	f7fe f919 	bl	8019154 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801af22:	4830      	ldr	r0, [pc, #192]	; (801afe4 <RadioSetTxGenericConfig+0x464>)
 801af24:	f000 fd76 	bl	801ba14 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801af28:	482f      	ldr	r0, [pc, #188]	; (801afe8 <RadioSetTxGenericConfig+0x468>)
 801af2a:	f000 fe45 	bl	801bbb8 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801af2e:	4b2c      	ldr	r3, [pc, #176]	; (801afe0 <RadioSetTxGenericConfig+0x460>)
 801af30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801af34:	2b06      	cmp	r3, #6
 801af36:	d10d      	bne.n	801af54 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801af38:	f640 0089 	movw	r0, #2185	; 0x889
 801af3c:	f000 ff98 	bl	801be70 <SUBGRF_ReadRegister>
 801af40:	4603      	mov	r3, r0
 801af42:	f023 0304 	bic.w	r3, r3, #4
 801af46:	b2db      	uxtb	r3, r3
 801af48:	4619      	mov	r1, r3
 801af4a:	f640 0089 	movw	r0, #2185	; 0x889
 801af4e:	f000 ff7b 	bl	801be48 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 801af52:	e02d      	b.n	801afb0 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801af54:	f640 0089 	movw	r0, #2185	; 0x889
 801af58:	f000 ff8a 	bl	801be70 <SUBGRF_ReadRegister>
 801af5c:	4603      	mov	r3, r0
 801af5e:	f043 0304 	orr.w	r3, r3, #4
 801af62:	b2db      	uxtb	r3, r3
 801af64:	4619      	mov	r1, r3
 801af66:	f640 0089 	movw	r0, #2185	; 0x889
 801af6a:	f000 ff6d 	bl	801be48 <SUBGRF_WriteRegister>
        break;
 801af6e:	e01f      	b.n	801afb0 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801af70:	68bb      	ldr	r3, [r7, #8]
 801af72:	681b      	ldr	r3, [r3, #0]
 801af74:	2b00      	cmp	r3, #0
 801af76:	d004      	beq.n	801af82 <RadioSetTxGenericConfig+0x402>
 801af78:	68bb      	ldr	r3, [r7, #8]
 801af7a:	681b      	ldr	r3, [r3, #0]
 801af7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801af80:	d902      	bls.n	801af88 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 801af82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801af86:	e027      	b.n	801afd8 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 801af88:	2003      	movs	r0, #3
 801af8a:	f7fe f8e3 	bl	8019154 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801af8e:	4b14      	ldr	r3, [pc, #80]	; (801afe0 <RadioSetTxGenericConfig+0x460>)
 801af90:	2202      	movs	r2, #2
 801af92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 801af96:	68bb      	ldr	r3, [r7, #8]
 801af98:	681b      	ldr	r3, [r3, #0]
 801af9a:	4a11      	ldr	r2, [pc, #68]	; (801afe0 <RadioSetTxGenericConfig+0x460>)
 801af9c:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801af9e:	4b10      	ldr	r3, [pc, #64]	; (801afe0 <RadioSetTxGenericConfig+0x460>)
 801afa0:	2216      	movs	r2, #22
 801afa2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801afa6:	480f      	ldr	r0, [pc, #60]	; (801afe4 <RadioSetTxGenericConfig+0x464>)
 801afa8:	f000 fd34 	bl	801ba14 <SUBGRF_SetModulationParams>
        break;
 801afac:	e000      	b.n	801afb0 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 801afae:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801afb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801afb4:	4618      	mov	r0, r3
 801afb6:	f001 f863 	bl	801c080 <SUBGRF_SetRfTxPower>
 801afba:	4603      	mov	r3, r0
 801afbc:	461a      	mov	r2, r3
 801afbe:	4b08      	ldr	r3, [pc, #32]	; (801afe0 <RadioSetTxGenericConfig+0x460>)
 801afc0:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801afc4:	4b06      	ldr	r3, [pc, #24]	; (801afe0 <RadioSetTxGenericConfig+0x460>)
 801afc6:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801afca:	4618      	mov	r0, r3
 801afcc:	f001 fa37 	bl	801c43e <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801afd0:	4a03      	ldr	r2, [pc, #12]	; (801afe0 <RadioSetTxGenericConfig+0x460>)
 801afd2:	687b      	ldr	r3, [r7, #4]
 801afd4:	6053      	str	r3, [r2, #4]
    return 0;
 801afd6:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801afd8:	4618      	mov	r0, r3
 801afda:	3738      	adds	r7, #56	; 0x38
 801afdc:	46bd      	mov	sp, r7
 801afde:	bd80      	pop	{r7, pc}
 801afe0:	20001be8 	.word	0x20001be8
 801afe4:	20001c20 	.word	0x20001c20
 801afe8:	20001bf6 	.word	0x20001bf6

0801afec <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 801afec:	b480      	push	{r7}
 801afee:	b085      	sub	sp, #20
 801aff0:	af00      	add	r7, sp, #0
 801aff2:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 801aff4:	2301      	movs	r3, #1
 801aff6:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 801aff8:	7bfb      	ldrb	r3, [r7, #15]
}
 801affa:	4618      	mov	r0, r3
 801affc:	3714      	adds	r7, #20
 801affe:	46bd      	mov	sp, r7
 801b000:	bc80      	pop	{r7}
 801b002:	4770      	bx	lr

0801b004 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 801b004:	b480      	push	{r7}
 801b006:	b083      	sub	sp, #12
 801b008:	af00      	add	r7, sp, #0
 801b00a:	6078      	str	r0, [r7, #4]
 801b00c:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 801b00e:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 801b010:	4618      	mov	r0, r3
 801b012:	370c      	adds	r7, #12
 801b014:	46bd      	mov	sp, r7
 801b016:	bc80      	pop	{r7}
 801b018:	4770      	bx	lr
	...

0801b01c <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 801b01c:	b580      	push	{r7, lr}
 801b01e:	b084      	sub	sp, #16
 801b020:	af00      	add	r7, sp, #0
 801b022:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 801b024:	687b      	ldr	r3, [r7, #4]
 801b026:	2b00      	cmp	r3, #0
 801b028:	d002      	beq.n	801b030 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801b02a:	4a1d      	ldr	r2, [pc, #116]	; (801b0a0 <SUBGRF_Init+0x84>)
 801b02c:	687b      	ldr	r3, [r7, #4]
 801b02e:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 801b030:	f7e6 ff2e 	bl	8001e90 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801b034:	2002      	movs	r0, #2
 801b036:	f001 f8ff 	bl	801c238 <Radio_SMPS_Set>

    ImageCalibrated = false;
 801b03a:	4b1a      	ldr	r3, [pc, #104]	; (801b0a4 <SUBGRF_Init+0x88>)
 801b03c:	2200      	movs	r2, #0
 801b03e:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 801b040:	2000      	movs	r0, #0
 801b042:	f000 f97d 	bl	801b340 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801b046:	f7ef ff73 	bl	800af30 <RBI_IsTCXO>
 801b04a:	4603      	mov	r3, r0
 801b04c:	2b01      	cmp	r3, #1
 801b04e:	d10e      	bne.n	801b06e <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801b050:	2140      	movs	r1, #64	; 0x40
 801b052:	2001      	movs	r0, #1
 801b054:	f000 fb82 	bl	801b75c <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801b058:	2100      	movs	r1, #0
 801b05a:	f640 1011 	movw	r0, #2321	; 0x911
 801b05e:	f000 fef3 	bl	801be48 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801b062:	237f      	movs	r3, #127	; 0x7f
 801b064:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801b066:	7b38      	ldrb	r0, [r7, #12]
 801b068:	f000 fa8b 	bl	801b582 <SUBGRF_Calibrate>
 801b06c:	e009      	b.n	801b082 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801b06e:	2120      	movs	r1, #32
 801b070:	f640 1011 	movw	r0, #2321	; 0x911
 801b074:	f000 fee8 	bl	801be48 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801b078:	2120      	movs	r1, #32
 801b07a:	f640 1012 	movw	r0, #2322	; 0x912
 801b07e:	f000 fee3 	bl	801be48 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801b082:	210e      	movs	r1, #14
 801b084:	f640 101f 	movw	r0, #2335	; 0x91f
 801b088:	f000 fede 	bl	801be48 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 801b08c:	f7ef ff34 	bl	800aef8 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801b090:	4b05      	ldr	r3, [pc, #20]	; (801b0a8 <SUBGRF_Init+0x8c>)
 801b092:	2201      	movs	r2, #1
 801b094:	701a      	strb	r2, [r3, #0]
}
 801b096:	bf00      	nop
 801b098:	3710      	adds	r7, #16
 801b09a:	46bd      	mov	sp, r7
 801b09c:	bd80      	pop	{r7, pc}
 801b09e:	bf00      	nop
 801b0a0:	20001c80 	.word	0x20001c80
 801b0a4:	20001c7c 	.word	0x20001c7c
 801b0a8:	20001c74 	.word	0x20001c74

0801b0ac <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801b0ac:	b480      	push	{r7}
 801b0ae:	af00      	add	r7, sp, #0
    return OperatingMode;
 801b0b0:	4b02      	ldr	r3, [pc, #8]	; (801b0bc <SUBGRF_GetOperatingMode+0x10>)
 801b0b2:	781b      	ldrb	r3, [r3, #0]
}
 801b0b4:	4618      	mov	r0, r3
 801b0b6:	46bd      	mov	sp, r7
 801b0b8:	bc80      	pop	{r7}
 801b0ba:	4770      	bx	lr
 801b0bc:	20001c74 	.word	0x20001c74

0801b0c0 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 801b0c0:	b580      	push	{r7, lr}
 801b0c2:	b082      	sub	sp, #8
 801b0c4:	af00      	add	r7, sp, #0
 801b0c6:	6078      	str	r0, [r7, #4]
 801b0c8:	460b      	mov	r3, r1
 801b0ca:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801b0cc:	78fb      	ldrb	r3, [r7, #3]
 801b0ce:	461a      	mov	r2, r3
 801b0d0:	6879      	ldr	r1, [r7, #4]
 801b0d2:	2000      	movs	r0, #0
 801b0d4:	f000 ff24 	bl	801bf20 <SUBGRF_WriteBuffer>
}
 801b0d8:	bf00      	nop
 801b0da:	3708      	adds	r7, #8
 801b0dc:	46bd      	mov	sp, r7
 801b0de:	bd80      	pop	{r7, pc}

0801b0e0 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 801b0e0:	b580      	push	{r7, lr}
 801b0e2:	b086      	sub	sp, #24
 801b0e4:	af00      	add	r7, sp, #0
 801b0e6:	60f8      	str	r0, [r7, #12]
 801b0e8:	60b9      	str	r1, [r7, #8]
 801b0ea:	4613      	mov	r3, r2
 801b0ec:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801b0ee:	2300      	movs	r3, #0
 801b0f0:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801b0f2:	f107 0317 	add.w	r3, r7, #23
 801b0f6:	4619      	mov	r1, r3
 801b0f8:	68b8      	ldr	r0, [r7, #8]
 801b0fa:	f000 fe27 	bl	801bd4c <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801b0fe:	68bb      	ldr	r3, [r7, #8]
 801b100:	781b      	ldrb	r3, [r3, #0]
 801b102:	79fa      	ldrb	r2, [r7, #7]
 801b104:	429a      	cmp	r2, r3
 801b106:	d201      	bcs.n	801b10c <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801b108:	2301      	movs	r3, #1
 801b10a:	e007      	b.n	801b11c <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801b10c:	7df8      	ldrb	r0, [r7, #23]
 801b10e:	68bb      	ldr	r3, [r7, #8]
 801b110:	781b      	ldrb	r3, [r3, #0]
 801b112:	461a      	mov	r2, r3
 801b114:	68f9      	ldr	r1, [r7, #12]
 801b116:	f000 ff25 	bl	801bf64 <SUBGRF_ReadBuffer>

    return 0;
 801b11a:	2300      	movs	r3, #0
}
 801b11c:	4618      	mov	r0, r3
 801b11e:	3718      	adds	r7, #24
 801b120:	46bd      	mov	sp, r7
 801b122:	bd80      	pop	{r7, pc}

0801b124 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 801b124:	b580      	push	{r7, lr}
 801b126:	b084      	sub	sp, #16
 801b128:	af00      	add	r7, sp, #0
 801b12a:	60f8      	str	r0, [r7, #12]
 801b12c:	460b      	mov	r3, r1
 801b12e:	607a      	str	r2, [r7, #4]
 801b130:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801b132:	7afb      	ldrb	r3, [r7, #11]
 801b134:	4619      	mov	r1, r3
 801b136:	68f8      	ldr	r0, [r7, #12]
 801b138:	f7ff ffc2 	bl	801b0c0 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801b13c:	6878      	ldr	r0, [r7, #4]
 801b13e:	f000 f91b 	bl	801b378 <SUBGRF_SetTx>
}
 801b142:	bf00      	nop
 801b144:	3710      	adds	r7, #16
 801b146:	46bd      	mov	sp, r7
 801b148:	bd80      	pop	{r7, pc}

0801b14a <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801b14a:	b580      	push	{r7, lr}
 801b14c:	b082      	sub	sp, #8
 801b14e:	af00      	add	r7, sp, #0
 801b150:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801b152:	2208      	movs	r2, #8
 801b154:	6879      	ldr	r1, [r7, #4]
 801b156:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 801b15a:	f000 fe9d 	bl	801be98 <SUBGRF_WriteRegisters>
    return 0;
 801b15e:	2300      	movs	r3, #0
}
 801b160:	4618      	mov	r0, r3
 801b162:	3708      	adds	r7, #8
 801b164:	46bd      	mov	sp, r7
 801b166:	bd80      	pop	{r7, pc}

0801b168 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 801b168:	b580      	push	{r7, lr}
 801b16a:	b084      	sub	sp, #16
 801b16c:	af00      	add	r7, sp, #0
 801b16e:	4603      	mov	r3, r0
 801b170:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801b172:	88fb      	ldrh	r3, [r7, #6]
 801b174:	0a1b      	lsrs	r3, r3, #8
 801b176:	b29b      	uxth	r3, r3
 801b178:	b2db      	uxtb	r3, r3
 801b17a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801b17c:	88fb      	ldrh	r3, [r7, #6]
 801b17e:	b2db      	uxtb	r3, r3
 801b180:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801b182:	f000 fb6f 	bl	801b864 <SUBGRF_GetPacketType>
 801b186:	4603      	mov	r3, r0
 801b188:	2b00      	cmp	r3, #0
 801b18a:	d108      	bne.n	801b19e <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801b18c:	f107 030c 	add.w	r3, r7, #12
 801b190:	2202      	movs	r2, #2
 801b192:	4619      	mov	r1, r3
 801b194:	f240 60bc 	movw	r0, #1724	; 0x6bc
 801b198:	f000 fe7e 	bl	801be98 <SUBGRF_WriteRegisters>
            break;
 801b19c:	e000      	b.n	801b1a0 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801b19e:	bf00      	nop
    }
}
 801b1a0:	bf00      	nop
 801b1a2:	3710      	adds	r7, #16
 801b1a4:	46bd      	mov	sp, r7
 801b1a6:	bd80      	pop	{r7, pc}

0801b1a8 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 801b1a8:	b580      	push	{r7, lr}
 801b1aa:	b084      	sub	sp, #16
 801b1ac:	af00      	add	r7, sp, #0
 801b1ae:	4603      	mov	r3, r0
 801b1b0:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801b1b2:	88fb      	ldrh	r3, [r7, #6]
 801b1b4:	0a1b      	lsrs	r3, r3, #8
 801b1b6:	b29b      	uxth	r3, r3
 801b1b8:	b2db      	uxtb	r3, r3
 801b1ba:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801b1bc:	88fb      	ldrh	r3, [r7, #6]
 801b1be:	b2db      	uxtb	r3, r3
 801b1c0:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801b1c2:	f000 fb4f 	bl	801b864 <SUBGRF_GetPacketType>
 801b1c6:	4603      	mov	r3, r0
 801b1c8:	2b00      	cmp	r3, #0
 801b1ca:	d108      	bne.n	801b1de <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801b1cc:	f107 030c 	add.w	r3, r7, #12
 801b1d0:	2202      	movs	r2, #2
 801b1d2:	4619      	mov	r1, r3
 801b1d4:	f240 60be 	movw	r0, #1726	; 0x6be
 801b1d8:	f000 fe5e 	bl	801be98 <SUBGRF_WriteRegisters>
            break;
 801b1dc:	e000      	b.n	801b1e0 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 801b1de:	bf00      	nop
    }
}
 801b1e0:	bf00      	nop
 801b1e2:	3710      	adds	r7, #16
 801b1e4:	46bd      	mov	sp, r7
 801b1e6:	bd80      	pop	{r7, pc}

0801b1e8 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 801b1e8:	b580      	push	{r7, lr}
 801b1ea:	b084      	sub	sp, #16
 801b1ec:	af00      	add	r7, sp, #0
 801b1ee:	4603      	mov	r3, r0
 801b1f0:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801b1f2:	2300      	movs	r3, #0
 801b1f4:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801b1f6:	f000 fb35 	bl	801b864 <SUBGRF_GetPacketType>
 801b1fa:	4603      	mov	r3, r0
 801b1fc:	2b00      	cmp	r3, #0
 801b1fe:	d121      	bne.n	801b244 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801b200:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801b204:	f000 fe34 	bl	801be70 <SUBGRF_ReadRegister>
 801b208:	4603      	mov	r3, r0
 801b20a:	f023 0301 	bic.w	r3, r3, #1
 801b20e:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801b210:	88fb      	ldrh	r3, [r7, #6]
 801b212:	0a1b      	lsrs	r3, r3, #8
 801b214:	b29b      	uxth	r3, r3
 801b216:	b25b      	sxtb	r3, r3
 801b218:	f003 0301 	and.w	r3, r3, #1
 801b21c:	b25a      	sxtb	r2, r3
 801b21e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b222:	4313      	orrs	r3, r2
 801b224:	b25b      	sxtb	r3, r3
 801b226:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801b228:	7bfb      	ldrb	r3, [r7, #15]
 801b22a:	4619      	mov	r1, r3
 801b22c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801b230:	f000 fe0a 	bl	801be48 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801b234:	88fb      	ldrh	r3, [r7, #6]
 801b236:	b2db      	uxtb	r3, r3
 801b238:	4619      	mov	r1, r3
 801b23a:	f240 60b9 	movw	r0, #1721	; 0x6b9
 801b23e:	f000 fe03 	bl	801be48 <SUBGRF_WriteRegister>
            break;
 801b242:	e000      	b.n	801b246 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801b244:	bf00      	nop
    }
}
 801b246:	bf00      	nop
 801b248:	3710      	adds	r7, #16
 801b24a:	46bd      	mov	sp, r7
 801b24c:	bd80      	pop	{r7, pc}

0801b24e <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801b24e:	b580      	push	{r7, lr}
 801b250:	b082      	sub	sp, #8
 801b252:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801b254:	2300      	movs	r3, #0
 801b256:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 801b258:	2300      	movs	r3, #0
 801b25a:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801b25c:	2300      	movs	r3, #0
 801b25e:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801b260:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801b264:	f000 fe04 	bl	801be70 <SUBGRF_ReadRegister>
 801b268:	4603      	mov	r3, r0
 801b26a:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801b26c:	79fb      	ldrb	r3, [r7, #7]
 801b26e:	f023 0301 	bic.w	r3, r3, #1
 801b272:	b2db      	uxtb	r3, r3
 801b274:	4619      	mov	r1, r3
 801b276:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801b27a:	f000 fde5 	bl	801be48 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801b27e:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801b282:	f000 fdf5 	bl	801be70 <SUBGRF_ReadRegister>
 801b286:	4603      	mov	r3, r0
 801b288:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801b28a:	79bb      	ldrb	r3, [r7, #6]
 801b28c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801b290:	b2db      	uxtb	r3, r3
 801b292:	4619      	mov	r1, r3
 801b294:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801b298:	f000 fdd6 	bl	801be48 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801b29c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801b2a0:	f000 f88a 	bl	801b3b8 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801b2a4:	463b      	mov	r3, r7
 801b2a6:	2204      	movs	r2, #4
 801b2a8:	4619      	mov	r1, r3
 801b2aa:	f640 0019 	movw	r0, #2073	; 0x819
 801b2ae:	f000 fe15 	bl	801bedc <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801b2b2:	2000      	movs	r0, #0
 801b2b4:	f000 f844 	bl	801b340 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801b2b8:	79fb      	ldrb	r3, [r7, #7]
 801b2ba:	4619      	mov	r1, r3
 801b2bc:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801b2c0:	f000 fdc2 	bl	801be48 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801b2c4:	79bb      	ldrb	r3, [r7, #6]
 801b2c6:	4619      	mov	r1, r3
 801b2c8:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801b2cc:	f000 fdbc 	bl	801be48 <SUBGRF_WriteRegister>

    return number;
 801b2d0:	683b      	ldr	r3, [r7, #0]
}
 801b2d2:	4618      	mov	r0, r3
 801b2d4:	3708      	adds	r7, #8
 801b2d6:	46bd      	mov	sp, r7
 801b2d8:	bd80      	pop	{r7, pc}
	...

0801b2dc <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 801b2dc:	b580      	push	{r7, lr}
 801b2de:	b084      	sub	sp, #16
 801b2e0:	af00      	add	r7, sp, #0
 801b2e2:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801b2e4:	2000      	movs	r0, #0
 801b2e6:	f7ef fe0e 	bl	800af06 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801b2ea:	2002      	movs	r0, #2
 801b2ec:	f000 ffa4 	bl	801c238 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801b2f0:	793b      	ldrb	r3, [r7, #4]
 801b2f2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801b2f6:	b2db      	uxtb	r3, r3
 801b2f8:	009b      	lsls	r3, r3, #2
 801b2fa:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801b2fc:	793b      	ldrb	r3, [r7, #4]
 801b2fe:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801b302:	b2db      	uxtb	r3, r3
 801b304:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801b306:	b25b      	sxtb	r3, r3
 801b308:	4313      	orrs	r3, r2
 801b30a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801b30c:	793b      	ldrb	r3, [r7, #4]
 801b30e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801b312:	b2db      	uxtb	r3, r3
 801b314:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801b316:	4313      	orrs	r3, r2
 801b318:	b25b      	sxtb	r3, r3
 801b31a:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801b31c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801b31e:	f107 030f 	add.w	r3, r7, #15
 801b322:	2201      	movs	r2, #1
 801b324:	4619      	mov	r1, r3
 801b326:	2084      	movs	r0, #132	; 0x84
 801b328:	f000 fe3e 	bl	801bfa8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801b32c:	4b03      	ldr	r3, [pc, #12]	; (801b33c <SUBGRF_SetSleep+0x60>)
 801b32e:	2200      	movs	r2, #0
 801b330:	701a      	strb	r2, [r3, #0]
}
 801b332:	bf00      	nop
 801b334:	3710      	adds	r7, #16
 801b336:	46bd      	mov	sp, r7
 801b338:	bd80      	pop	{r7, pc}
 801b33a:	bf00      	nop
 801b33c:	20001c74 	.word	0x20001c74

0801b340 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801b340:	b580      	push	{r7, lr}
 801b342:	b082      	sub	sp, #8
 801b344:	af00      	add	r7, sp, #0
 801b346:	4603      	mov	r3, r0
 801b348:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801b34a:	1dfb      	adds	r3, r7, #7
 801b34c:	2201      	movs	r2, #1
 801b34e:	4619      	mov	r1, r3
 801b350:	2080      	movs	r0, #128	; 0x80
 801b352:	f000 fe29 	bl	801bfa8 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801b356:	79fb      	ldrb	r3, [r7, #7]
 801b358:	2b00      	cmp	r3, #0
 801b35a:	d103      	bne.n	801b364 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 801b35c:	4b05      	ldr	r3, [pc, #20]	; (801b374 <SUBGRF_SetStandby+0x34>)
 801b35e:	2201      	movs	r2, #1
 801b360:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801b362:	e002      	b.n	801b36a <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 801b364:	4b03      	ldr	r3, [pc, #12]	; (801b374 <SUBGRF_SetStandby+0x34>)
 801b366:	2202      	movs	r2, #2
 801b368:	701a      	strb	r2, [r3, #0]
}
 801b36a:	bf00      	nop
 801b36c:	3708      	adds	r7, #8
 801b36e:	46bd      	mov	sp, r7
 801b370:	bd80      	pop	{r7, pc}
 801b372:	bf00      	nop
 801b374:	20001c74 	.word	0x20001c74

0801b378 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 801b378:	b580      	push	{r7, lr}
 801b37a:	b084      	sub	sp, #16
 801b37c:	af00      	add	r7, sp, #0
 801b37e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 801b380:	4b0c      	ldr	r3, [pc, #48]	; (801b3b4 <SUBGRF_SetTx+0x3c>)
 801b382:	2204      	movs	r2, #4
 801b384:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801b386:	687b      	ldr	r3, [r7, #4]
 801b388:	0c1b      	lsrs	r3, r3, #16
 801b38a:	b2db      	uxtb	r3, r3
 801b38c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801b38e:	687b      	ldr	r3, [r7, #4]
 801b390:	0a1b      	lsrs	r3, r3, #8
 801b392:	b2db      	uxtb	r3, r3
 801b394:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801b396:	687b      	ldr	r3, [r7, #4]
 801b398:	b2db      	uxtb	r3, r3
 801b39a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801b39c:	f107 030c 	add.w	r3, r7, #12
 801b3a0:	2203      	movs	r2, #3
 801b3a2:	4619      	mov	r1, r3
 801b3a4:	2083      	movs	r0, #131	; 0x83
 801b3a6:	f000 fdff 	bl	801bfa8 <SUBGRF_WriteCommand>
}
 801b3aa:	bf00      	nop
 801b3ac:	3710      	adds	r7, #16
 801b3ae:	46bd      	mov	sp, r7
 801b3b0:	bd80      	pop	{r7, pc}
 801b3b2:	bf00      	nop
 801b3b4:	20001c74 	.word	0x20001c74

0801b3b8 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801b3b8:	b580      	push	{r7, lr}
 801b3ba:	b084      	sub	sp, #16
 801b3bc:	af00      	add	r7, sp, #0
 801b3be:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801b3c0:	4b0c      	ldr	r3, [pc, #48]	; (801b3f4 <SUBGRF_SetRx+0x3c>)
 801b3c2:	2205      	movs	r2, #5
 801b3c4:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801b3c6:	687b      	ldr	r3, [r7, #4]
 801b3c8:	0c1b      	lsrs	r3, r3, #16
 801b3ca:	b2db      	uxtb	r3, r3
 801b3cc:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801b3ce:	687b      	ldr	r3, [r7, #4]
 801b3d0:	0a1b      	lsrs	r3, r3, #8
 801b3d2:	b2db      	uxtb	r3, r3
 801b3d4:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801b3d6:	687b      	ldr	r3, [r7, #4]
 801b3d8:	b2db      	uxtb	r3, r3
 801b3da:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801b3dc:	f107 030c 	add.w	r3, r7, #12
 801b3e0:	2203      	movs	r2, #3
 801b3e2:	4619      	mov	r1, r3
 801b3e4:	2082      	movs	r0, #130	; 0x82
 801b3e6:	f000 fddf 	bl	801bfa8 <SUBGRF_WriteCommand>
}
 801b3ea:	bf00      	nop
 801b3ec:	3710      	adds	r7, #16
 801b3ee:	46bd      	mov	sp, r7
 801b3f0:	bd80      	pop	{r7, pc}
 801b3f2:	bf00      	nop
 801b3f4:	20001c74 	.word	0x20001c74

0801b3f8 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 801b3f8:	b580      	push	{r7, lr}
 801b3fa:	b084      	sub	sp, #16
 801b3fc:	af00      	add	r7, sp, #0
 801b3fe:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801b400:	4b0e      	ldr	r3, [pc, #56]	; (801b43c <SUBGRF_SetRxBoosted+0x44>)
 801b402:	2205      	movs	r2, #5
 801b404:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801b406:	2197      	movs	r1, #151	; 0x97
 801b408:	f640 00ac 	movw	r0, #2220	; 0x8ac
 801b40c:	f000 fd1c 	bl	801be48 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801b410:	687b      	ldr	r3, [r7, #4]
 801b412:	0c1b      	lsrs	r3, r3, #16
 801b414:	b2db      	uxtb	r3, r3
 801b416:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801b418:	687b      	ldr	r3, [r7, #4]
 801b41a:	0a1b      	lsrs	r3, r3, #8
 801b41c:	b2db      	uxtb	r3, r3
 801b41e:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801b420:	687b      	ldr	r3, [r7, #4]
 801b422:	b2db      	uxtb	r3, r3
 801b424:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801b426:	f107 030c 	add.w	r3, r7, #12
 801b42a:	2203      	movs	r2, #3
 801b42c:	4619      	mov	r1, r3
 801b42e:	2082      	movs	r0, #130	; 0x82
 801b430:	f000 fdba 	bl	801bfa8 <SUBGRF_WriteCommand>
}
 801b434:	bf00      	nop
 801b436:	3710      	adds	r7, #16
 801b438:	46bd      	mov	sp, r7
 801b43a:	bd80      	pop	{r7, pc}
 801b43c:	20001c74 	.word	0x20001c74

0801b440 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801b440:	b580      	push	{r7, lr}
 801b442:	b084      	sub	sp, #16
 801b444:	af00      	add	r7, sp, #0
 801b446:	6078      	str	r0, [r7, #4]
 801b448:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801b44a:	687b      	ldr	r3, [r7, #4]
 801b44c:	0c1b      	lsrs	r3, r3, #16
 801b44e:	b2db      	uxtb	r3, r3
 801b450:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801b452:	687b      	ldr	r3, [r7, #4]
 801b454:	0a1b      	lsrs	r3, r3, #8
 801b456:	b2db      	uxtb	r3, r3
 801b458:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801b45a:	687b      	ldr	r3, [r7, #4]
 801b45c:	b2db      	uxtb	r3, r3
 801b45e:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801b460:	683b      	ldr	r3, [r7, #0]
 801b462:	0c1b      	lsrs	r3, r3, #16
 801b464:	b2db      	uxtb	r3, r3
 801b466:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801b468:	683b      	ldr	r3, [r7, #0]
 801b46a:	0a1b      	lsrs	r3, r3, #8
 801b46c:	b2db      	uxtb	r3, r3
 801b46e:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801b470:	683b      	ldr	r3, [r7, #0]
 801b472:	b2db      	uxtb	r3, r3
 801b474:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801b476:	f107 0308 	add.w	r3, r7, #8
 801b47a:	2206      	movs	r2, #6
 801b47c:	4619      	mov	r1, r3
 801b47e:	2094      	movs	r0, #148	; 0x94
 801b480:	f000 fd92 	bl	801bfa8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801b484:	4b03      	ldr	r3, [pc, #12]	; (801b494 <SUBGRF_SetRxDutyCycle+0x54>)
 801b486:	2206      	movs	r2, #6
 801b488:	701a      	strb	r2, [r3, #0]
}
 801b48a:	bf00      	nop
 801b48c:	3710      	adds	r7, #16
 801b48e:	46bd      	mov	sp, r7
 801b490:	bd80      	pop	{r7, pc}
 801b492:	bf00      	nop
 801b494:	20001c74 	.word	0x20001c74

0801b498 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801b498:	b580      	push	{r7, lr}
 801b49a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801b49c:	2200      	movs	r2, #0
 801b49e:	2100      	movs	r1, #0
 801b4a0:	20c5      	movs	r0, #197	; 0xc5
 801b4a2:	f000 fd81 	bl	801bfa8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801b4a6:	4b02      	ldr	r3, [pc, #8]	; (801b4b0 <SUBGRF_SetCad+0x18>)
 801b4a8:	2207      	movs	r2, #7
 801b4aa:	701a      	strb	r2, [r3, #0]
}
 801b4ac:	bf00      	nop
 801b4ae:	bd80      	pop	{r7, pc}
 801b4b0:	20001c74 	.word	0x20001c74

0801b4b4 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801b4b4:	b580      	push	{r7, lr}
 801b4b6:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801b4b8:	2200      	movs	r2, #0
 801b4ba:	2100      	movs	r1, #0
 801b4bc:	20d1      	movs	r0, #209	; 0xd1
 801b4be:	f000 fd73 	bl	801bfa8 <SUBGRF_WriteCommand>
}
 801b4c2:	bf00      	nop
 801b4c4:	bd80      	pop	{r7, pc}

0801b4c6 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801b4c6:	b580      	push	{r7, lr}
 801b4c8:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801b4ca:	2200      	movs	r2, #0
 801b4cc:	2100      	movs	r1, #0
 801b4ce:	20d2      	movs	r0, #210	; 0xd2
 801b4d0:	f000 fd6a 	bl	801bfa8 <SUBGRF_WriteCommand>
}
 801b4d4:	bf00      	nop
 801b4d6:	bd80      	pop	{r7, pc}

0801b4d8 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 801b4d8:	b580      	push	{r7, lr}
 801b4da:	b082      	sub	sp, #8
 801b4dc:	af00      	add	r7, sp, #0
 801b4de:	4603      	mov	r3, r0
 801b4e0:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801b4e2:	1dfb      	adds	r3, r7, #7
 801b4e4:	2201      	movs	r2, #1
 801b4e6:	4619      	mov	r1, r3
 801b4e8:	209f      	movs	r0, #159	; 0x9f
 801b4ea:	f000 fd5d 	bl	801bfa8 <SUBGRF_WriteCommand>
}
 801b4ee:	bf00      	nop
 801b4f0:	3708      	adds	r7, #8
 801b4f2:	46bd      	mov	sp, r7
 801b4f4:	bd80      	pop	{r7, pc}

0801b4f6 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801b4f6:	b580      	push	{r7, lr}
 801b4f8:	b084      	sub	sp, #16
 801b4fa:	af00      	add	r7, sp, #0
 801b4fc:	4603      	mov	r3, r0
 801b4fe:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801b500:	1dfb      	adds	r3, r7, #7
 801b502:	2201      	movs	r2, #1
 801b504:	4619      	mov	r1, r3
 801b506:	20a0      	movs	r0, #160	; 0xa0
 801b508:	f000 fd4e 	bl	801bfa8 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 801b50c:	79fb      	ldrb	r3, [r7, #7]
 801b50e:	2b3f      	cmp	r3, #63	; 0x3f
 801b510:	d91c      	bls.n	801b54c <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801b512:	79fb      	ldrb	r3, [r7, #7]
 801b514:	085b      	lsrs	r3, r3, #1
 801b516:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 801b518:	2300      	movs	r3, #0
 801b51a:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 801b51c:	2300      	movs	r3, #0
 801b51e:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801b520:	e005      	b.n	801b52e <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801b522:	7bfb      	ldrb	r3, [r7, #15]
 801b524:	089b      	lsrs	r3, r3, #2
 801b526:	73fb      	strb	r3, [r7, #15]
            exp++;
 801b528:	7bbb      	ldrb	r3, [r7, #14]
 801b52a:	3301      	adds	r3, #1
 801b52c:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801b52e:	7bfb      	ldrb	r3, [r7, #15]
 801b530:	2b1f      	cmp	r3, #31
 801b532:	d8f6      	bhi.n	801b522 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801b534:	7bfb      	ldrb	r3, [r7, #15]
 801b536:	00db      	lsls	r3, r3, #3
 801b538:	b2da      	uxtb	r2, r3
 801b53a:	7bbb      	ldrb	r3, [r7, #14]
 801b53c:	4413      	add	r3, r2
 801b53e:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801b540:	7b7b      	ldrb	r3, [r7, #13]
 801b542:	4619      	mov	r1, r3
 801b544:	f240 7006 	movw	r0, #1798	; 0x706
 801b548:	f000 fc7e 	bl	801be48 <SUBGRF_WriteRegister>
    }
}
 801b54c:	bf00      	nop
 801b54e:	3710      	adds	r7, #16
 801b550:	46bd      	mov	sp, r7
 801b552:	bd80      	pop	{r7, pc}

0801b554 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801b554:	b580      	push	{r7, lr}
 801b556:	b082      	sub	sp, #8
 801b558:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801b55a:	f7ef fcf0 	bl	800af3e <RBI_IsDCDC>
 801b55e:	4603      	mov	r3, r0
 801b560:	2b01      	cmp	r3, #1
 801b562:	d102      	bne.n	801b56a <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801b564:	2301      	movs	r3, #1
 801b566:	71fb      	strb	r3, [r7, #7]
 801b568:	e001      	b.n	801b56e <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801b56a:	2300      	movs	r3, #0
 801b56c:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801b56e:	1dfb      	adds	r3, r7, #7
 801b570:	2201      	movs	r2, #1
 801b572:	4619      	mov	r1, r3
 801b574:	2096      	movs	r0, #150	; 0x96
 801b576:	f000 fd17 	bl	801bfa8 <SUBGRF_WriteCommand>
}
 801b57a:	bf00      	nop
 801b57c:	3708      	adds	r7, #8
 801b57e:	46bd      	mov	sp, r7
 801b580:	bd80      	pop	{r7, pc}

0801b582 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801b582:	b580      	push	{r7, lr}
 801b584:	b084      	sub	sp, #16
 801b586:	af00      	add	r7, sp, #0
 801b588:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801b58a:	793b      	ldrb	r3, [r7, #4]
 801b58c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801b590:	b2db      	uxtb	r3, r3
 801b592:	019b      	lsls	r3, r3, #6
 801b594:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801b596:	793b      	ldrb	r3, [r7, #4]
 801b598:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801b59c:	b2db      	uxtb	r3, r3
 801b59e:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801b5a0:	b25b      	sxtb	r3, r3
 801b5a2:	4313      	orrs	r3, r2
 801b5a4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801b5a6:	793b      	ldrb	r3, [r7, #4]
 801b5a8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801b5ac:	b2db      	uxtb	r3, r3
 801b5ae:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801b5b0:	b25b      	sxtb	r3, r3
 801b5b2:	4313      	orrs	r3, r2
 801b5b4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801b5b6:	793b      	ldrb	r3, [r7, #4]
 801b5b8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801b5bc:	b2db      	uxtb	r3, r3
 801b5be:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801b5c0:	b25b      	sxtb	r3, r3
 801b5c2:	4313      	orrs	r3, r2
 801b5c4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801b5c6:	793b      	ldrb	r3, [r7, #4]
 801b5c8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801b5cc:	b2db      	uxtb	r3, r3
 801b5ce:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801b5d0:	b25b      	sxtb	r3, r3
 801b5d2:	4313      	orrs	r3, r2
 801b5d4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801b5d6:	793b      	ldrb	r3, [r7, #4]
 801b5d8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801b5dc:	b2db      	uxtb	r3, r3
 801b5de:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801b5e0:	b25b      	sxtb	r3, r3
 801b5e2:	4313      	orrs	r3, r2
 801b5e4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801b5e6:	793b      	ldrb	r3, [r7, #4]
 801b5e8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801b5ec:	b2db      	uxtb	r3, r3
 801b5ee:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801b5f0:	4313      	orrs	r3, r2
 801b5f2:	b25b      	sxtb	r3, r3
 801b5f4:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801b5f6:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801b5f8:	f107 030f 	add.w	r3, r7, #15
 801b5fc:	2201      	movs	r2, #1
 801b5fe:	4619      	mov	r1, r3
 801b600:	2089      	movs	r0, #137	; 0x89
 801b602:	f000 fcd1 	bl	801bfa8 <SUBGRF_WriteCommand>
}
 801b606:	bf00      	nop
 801b608:	3710      	adds	r7, #16
 801b60a:	46bd      	mov	sp, r7
 801b60c:	bd80      	pop	{r7, pc}
	...

0801b610 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 801b610:	b580      	push	{r7, lr}
 801b612:	b084      	sub	sp, #16
 801b614:	af00      	add	r7, sp, #0
 801b616:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801b618:	687b      	ldr	r3, [r7, #4]
 801b61a:	4a1d      	ldr	r2, [pc, #116]	; (801b690 <SUBGRF_CalibrateImage+0x80>)
 801b61c:	4293      	cmp	r3, r2
 801b61e:	d904      	bls.n	801b62a <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 801b620:	23e1      	movs	r3, #225	; 0xe1
 801b622:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801b624:	23e9      	movs	r3, #233	; 0xe9
 801b626:	737b      	strb	r3, [r7, #13]
 801b628:	e027      	b.n	801b67a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 801b62a:	687b      	ldr	r3, [r7, #4]
 801b62c:	4a19      	ldr	r2, [pc, #100]	; (801b694 <SUBGRF_CalibrateImage+0x84>)
 801b62e:	4293      	cmp	r3, r2
 801b630:	d904      	bls.n	801b63c <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801b632:	23d7      	movs	r3, #215	; 0xd7
 801b634:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801b636:	23db      	movs	r3, #219	; 0xdb
 801b638:	737b      	strb	r3, [r7, #13]
 801b63a:	e01e      	b.n	801b67a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 801b63c:	687b      	ldr	r3, [r7, #4]
 801b63e:	4a16      	ldr	r2, [pc, #88]	; (801b698 <SUBGRF_CalibrateImage+0x88>)
 801b640:	4293      	cmp	r3, r2
 801b642:	d904      	bls.n	801b64e <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801b644:	23c1      	movs	r3, #193	; 0xc1
 801b646:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 801b648:	23c5      	movs	r3, #197	; 0xc5
 801b64a:	737b      	strb	r3, [r7, #13]
 801b64c:	e015      	b.n	801b67a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 801b64e:	687b      	ldr	r3, [r7, #4]
 801b650:	4a12      	ldr	r2, [pc, #72]	; (801b69c <SUBGRF_CalibrateImage+0x8c>)
 801b652:	4293      	cmp	r3, r2
 801b654:	d904      	bls.n	801b660 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801b656:	2375      	movs	r3, #117	; 0x75
 801b658:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801b65a:	2381      	movs	r3, #129	; 0x81
 801b65c:	737b      	strb	r3, [r7, #13]
 801b65e:	e00c      	b.n	801b67a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 801b660:	687b      	ldr	r3, [r7, #4]
 801b662:	4a0f      	ldr	r2, [pc, #60]	; (801b6a0 <SUBGRF_CalibrateImage+0x90>)
 801b664:	4293      	cmp	r3, r2
 801b666:	d904      	bls.n	801b672 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 801b668:	236b      	movs	r3, #107	; 0x6b
 801b66a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801b66c:	236f      	movs	r3, #111	; 0x6f
 801b66e:	737b      	strb	r3, [r7, #13]
 801b670:	e003      	b.n	801b67a <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 801b672:	2329      	movs	r3, #41	; 0x29
 801b674:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 801b676:	232b      	movs	r3, #43	; 0x2b
 801b678:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801b67a:	f107 030c 	add.w	r3, r7, #12
 801b67e:	2202      	movs	r2, #2
 801b680:	4619      	mov	r1, r3
 801b682:	2098      	movs	r0, #152	; 0x98
 801b684:	f000 fc90 	bl	801bfa8 <SUBGRF_WriteCommand>
}
 801b688:	bf00      	nop
 801b68a:	3710      	adds	r7, #16
 801b68c:	46bd      	mov	sp, r7
 801b68e:	bd80      	pop	{r7, pc}
 801b690:	35a4e900 	.word	0x35a4e900
 801b694:	32a9f880 	.word	0x32a9f880
 801b698:	2de54480 	.word	0x2de54480
 801b69c:	1b6b0b00 	.word	0x1b6b0b00
 801b6a0:	1954fc40 	.word	0x1954fc40

0801b6a4 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801b6a4:	b590      	push	{r4, r7, lr}
 801b6a6:	b085      	sub	sp, #20
 801b6a8:	af00      	add	r7, sp, #0
 801b6aa:	4604      	mov	r4, r0
 801b6ac:	4608      	mov	r0, r1
 801b6ae:	4611      	mov	r1, r2
 801b6b0:	461a      	mov	r2, r3
 801b6b2:	4623      	mov	r3, r4
 801b6b4:	71fb      	strb	r3, [r7, #7]
 801b6b6:	4603      	mov	r3, r0
 801b6b8:	71bb      	strb	r3, [r7, #6]
 801b6ba:	460b      	mov	r3, r1
 801b6bc:	717b      	strb	r3, [r7, #5]
 801b6be:	4613      	mov	r3, r2
 801b6c0:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801b6c2:	79fb      	ldrb	r3, [r7, #7]
 801b6c4:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801b6c6:	79bb      	ldrb	r3, [r7, #6]
 801b6c8:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801b6ca:	797b      	ldrb	r3, [r7, #5]
 801b6cc:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801b6ce:	793b      	ldrb	r3, [r7, #4]
 801b6d0:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801b6d2:	f107 030c 	add.w	r3, r7, #12
 801b6d6:	2204      	movs	r2, #4
 801b6d8:	4619      	mov	r1, r3
 801b6da:	2095      	movs	r0, #149	; 0x95
 801b6dc:	f000 fc64 	bl	801bfa8 <SUBGRF_WriteCommand>
}
 801b6e0:	bf00      	nop
 801b6e2:	3714      	adds	r7, #20
 801b6e4:	46bd      	mov	sp, r7
 801b6e6:	bd90      	pop	{r4, r7, pc}

0801b6e8 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801b6e8:	b590      	push	{r4, r7, lr}
 801b6ea:	b085      	sub	sp, #20
 801b6ec:	af00      	add	r7, sp, #0
 801b6ee:	4604      	mov	r4, r0
 801b6f0:	4608      	mov	r0, r1
 801b6f2:	4611      	mov	r1, r2
 801b6f4:	461a      	mov	r2, r3
 801b6f6:	4623      	mov	r3, r4
 801b6f8:	80fb      	strh	r3, [r7, #6]
 801b6fa:	4603      	mov	r3, r0
 801b6fc:	80bb      	strh	r3, [r7, #4]
 801b6fe:	460b      	mov	r3, r1
 801b700:	807b      	strh	r3, [r7, #2]
 801b702:	4613      	mov	r3, r2
 801b704:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801b706:	88fb      	ldrh	r3, [r7, #6]
 801b708:	0a1b      	lsrs	r3, r3, #8
 801b70a:	b29b      	uxth	r3, r3
 801b70c:	b2db      	uxtb	r3, r3
 801b70e:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801b710:	88fb      	ldrh	r3, [r7, #6]
 801b712:	b2db      	uxtb	r3, r3
 801b714:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801b716:	88bb      	ldrh	r3, [r7, #4]
 801b718:	0a1b      	lsrs	r3, r3, #8
 801b71a:	b29b      	uxth	r3, r3
 801b71c:	b2db      	uxtb	r3, r3
 801b71e:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801b720:	88bb      	ldrh	r3, [r7, #4]
 801b722:	b2db      	uxtb	r3, r3
 801b724:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801b726:	887b      	ldrh	r3, [r7, #2]
 801b728:	0a1b      	lsrs	r3, r3, #8
 801b72a:	b29b      	uxth	r3, r3
 801b72c:	b2db      	uxtb	r3, r3
 801b72e:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801b730:	887b      	ldrh	r3, [r7, #2]
 801b732:	b2db      	uxtb	r3, r3
 801b734:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801b736:	883b      	ldrh	r3, [r7, #0]
 801b738:	0a1b      	lsrs	r3, r3, #8
 801b73a:	b29b      	uxth	r3, r3
 801b73c:	b2db      	uxtb	r3, r3
 801b73e:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801b740:	883b      	ldrh	r3, [r7, #0]
 801b742:	b2db      	uxtb	r3, r3
 801b744:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801b746:	f107 0308 	add.w	r3, r7, #8
 801b74a:	2208      	movs	r2, #8
 801b74c:	4619      	mov	r1, r3
 801b74e:	2008      	movs	r0, #8
 801b750:	f000 fc2a 	bl	801bfa8 <SUBGRF_WriteCommand>
}
 801b754:	bf00      	nop
 801b756:	3714      	adds	r7, #20
 801b758:	46bd      	mov	sp, r7
 801b75a:	bd90      	pop	{r4, r7, pc}

0801b75c <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801b75c:	b580      	push	{r7, lr}
 801b75e:	b084      	sub	sp, #16
 801b760:	af00      	add	r7, sp, #0
 801b762:	4603      	mov	r3, r0
 801b764:	6039      	str	r1, [r7, #0]
 801b766:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 801b768:	79fb      	ldrb	r3, [r7, #7]
 801b76a:	f003 0307 	and.w	r3, r3, #7
 801b76e:	b2db      	uxtb	r3, r3
 801b770:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801b772:	683b      	ldr	r3, [r7, #0]
 801b774:	0c1b      	lsrs	r3, r3, #16
 801b776:	b2db      	uxtb	r3, r3
 801b778:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801b77a:	683b      	ldr	r3, [r7, #0]
 801b77c:	0a1b      	lsrs	r3, r3, #8
 801b77e:	b2db      	uxtb	r3, r3
 801b780:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801b782:	683b      	ldr	r3, [r7, #0]
 801b784:	b2db      	uxtb	r3, r3
 801b786:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801b788:	f107 030c 	add.w	r3, r7, #12
 801b78c:	2204      	movs	r2, #4
 801b78e:	4619      	mov	r1, r3
 801b790:	2097      	movs	r0, #151	; 0x97
 801b792:	f000 fc09 	bl	801bfa8 <SUBGRF_WriteCommand>
}
 801b796:	bf00      	nop
 801b798:	3710      	adds	r7, #16
 801b79a:	46bd      	mov	sp, r7
 801b79c:	bd80      	pop	{r7, pc}
	...

0801b7a0 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801b7a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801b7a4:	b084      	sub	sp, #16
 801b7a6:	af00      	add	r7, sp, #0
 801b7a8:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801b7aa:	2300      	movs	r3, #0
 801b7ac:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801b7ae:	4b1d      	ldr	r3, [pc, #116]	; (801b824 <SUBGRF_SetRfFrequency+0x84>)
 801b7b0:	781b      	ldrb	r3, [r3, #0]
 801b7b2:	f083 0301 	eor.w	r3, r3, #1
 801b7b6:	b2db      	uxtb	r3, r3
 801b7b8:	2b00      	cmp	r3, #0
 801b7ba:	d005      	beq.n	801b7c8 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801b7bc:	6878      	ldr	r0, [r7, #4]
 801b7be:	f7ff ff27 	bl	801b610 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801b7c2:	4b18      	ldr	r3, [pc, #96]	; (801b824 <SUBGRF_SetRfFrequency+0x84>)
 801b7c4:	2201      	movs	r2, #1
 801b7c6:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801b7c8:	687b      	ldr	r3, [r7, #4]
 801b7ca:	2200      	movs	r2, #0
 801b7cc:	461c      	mov	r4, r3
 801b7ce:	4615      	mov	r5, r2
 801b7d0:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801b7d4:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801b7d8:	4a13      	ldr	r2, [pc, #76]	; (801b828 <SUBGRF_SetRfFrequency+0x88>)
 801b7da:	f04f 0300 	mov.w	r3, #0
 801b7de:	4640      	mov	r0, r8
 801b7e0:	4649      	mov	r1, r9
 801b7e2:	f7e5 f9e1 	bl	8000ba8 <__aeabi_uldivmod>
 801b7e6:	4602      	mov	r2, r0
 801b7e8:	460b      	mov	r3, r1
 801b7ea:	4613      	mov	r3, r2
 801b7ec:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801b7ee:	68fb      	ldr	r3, [r7, #12]
 801b7f0:	0e1b      	lsrs	r3, r3, #24
 801b7f2:	b2db      	uxtb	r3, r3
 801b7f4:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801b7f6:	68fb      	ldr	r3, [r7, #12]
 801b7f8:	0c1b      	lsrs	r3, r3, #16
 801b7fa:	b2db      	uxtb	r3, r3
 801b7fc:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801b7fe:	68fb      	ldr	r3, [r7, #12]
 801b800:	0a1b      	lsrs	r3, r3, #8
 801b802:	b2db      	uxtb	r3, r3
 801b804:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801b806:	68fb      	ldr	r3, [r7, #12]
 801b808:	b2db      	uxtb	r3, r3
 801b80a:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801b80c:	f107 0308 	add.w	r3, r7, #8
 801b810:	2204      	movs	r2, #4
 801b812:	4619      	mov	r1, r3
 801b814:	2086      	movs	r0, #134	; 0x86
 801b816:	f000 fbc7 	bl	801bfa8 <SUBGRF_WriteCommand>
}
 801b81a:	bf00      	nop
 801b81c:	3710      	adds	r7, #16
 801b81e:	46bd      	mov	sp, r7
 801b820:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801b824:	20001c7c 	.word	0x20001c7c
 801b828:	01e84800 	.word	0x01e84800

0801b82c <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801b82c:	b580      	push	{r7, lr}
 801b82e:	b082      	sub	sp, #8
 801b830:	af00      	add	r7, sp, #0
 801b832:	4603      	mov	r3, r0
 801b834:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801b836:	79fa      	ldrb	r2, [r7, #7]
 801b838:	4b09      	ldr	r3, [pc, #36]	; (801b860 <SUBGRF_SetPacketType+0x34>)
 801b83a:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801b83c:	79fb      	ldrb	r3, [r7, #7]
 801b83e:	2b00      	cmp	r3, #0
 801b840:	d104      	bne.n	801b84c <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801b842:	2100      	movs	r1, #0
 801b844:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801b848:	f000 fafe 	bl	801be48 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801b84c:	1dfb      	adds	r3, r7, #7
 801b84e:	2201      	movs	r2, #1
 801b850:	4619      	mov	r1, r3
 801b852:	208a      	movs	r0, #138	; 0x8a
 801b854:	f000 fba8 	bl	801bfa8 <SUBGRF_WriteCommand>
}
 801b858:	bf00      	nop
 801b85a:	3708      	adds	r7, #8
 801b85c:	46bd      	mov	sp, r7
 801b85e:	bd80      	pop	{r7, pc}
 801b860:	20001c75 	.word	0x20001c75

0801b864 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801b864:	b480      	push	{r7}
 801b866:	af00      	add	r7, sp, #0
    return PacketType;
 801b868:	4b02      	ldr	r3, [pc, #8]	; (801b874 <SUBGRF_GetPacketType+0x10>)
 801b86a:	781b      	ldrb	r3, [r3, #0]
}
 801b86c:	4618      	mov	r0, r3
 801b86e:	46bd      	mov	sp, r7
 801b870:	bc80      	pop	{r7}
 801b872:	4770      	bx	lr
 801b874:	20001c75 	.word	0x20001c75

0801b878 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 801b878:	b580      	push	{r7, lr}
 801b87a:	b084      	sub	sp, #16
 801b87c:	af00      	add	r7, sp, #0
 801b87e:	4603      	mov	r3, r0
 801b880:	71fb      	strb	r3, [r7, #7]
 801b882:	460b      	mov	r3, r1
 801b884:	71bb      	strb	r3, [r7, #6]
 801b886:	4613      	mov	r3, r2
 801b888:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 801b88a:	79fb      	ldrb	r3, [r7, #7]
 801b88c:	2b01      	cmp	r3, #1
 801b88e:	d149      	bne.n	801b924 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801b890:	2000      	movs	r0, #0
 801b892:	f7ef fb5b 	bl	800af4c <RBI_GetRFOMaxPowerConfig>
 801b896:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 801b898:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b89c:	68fa      	ldr	r2, [r7, #12]
 801b89e:	429a      	cmp	r2, r3
 801b8a0:	da01      	bge.n	801b8a6 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801b8a2:	68fb      	ldr	r3, [r7, #12]
 801b8a4:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 801b8a6:	68fb      	ldr	r3, [r7, #12]
 801b8a8:	2b0e      	cmp	r3, #14
 801b8aa:	d10e      	bne.n	801b8ca <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801b8ac:	2301      	movs	r3, #1
 801b8ae:	2201      	movs	r2, #1
 801b8b0:	2100      	movs	r1, #0
 801b8b2:	2004      	movs	r0, #4
 801b8b4:	f7ff fef6 	bl	801b6a4 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801b8b8:	79ba      	ldrb	r2, [r7, #6]
 801b8ba:	68fb      	ldr	r3, [r7, #12]
 801b8bc:	b2db      	uxtb	r3, r3
 801b8be:	1ad3      	subs	r3, r2, r3
 801b8c0:	b2db      	uxtb	r3, r3
 801b8c2:	330e      	adds	r3, #14
 801b8c4:	b2db      	uxtb	r3, r3
 801b8c6:	71bb      	strb	r3, [r7, #6]
 801b8c8:	e01f      	b.n	801b90a <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 801b8ca:	68fb      	ldr	r3, [r7, #12]
 801b8cc:	2b0a      	cmp	r3, #10
 801b8ce:	d10e      	bne.n	801b8ee <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801b8d0:	2301      	movs	r3, #1
 801b8d2:	2201      	movs	r2, #1
 801b8d4:	2100      	movs	r1, #0
 801b8d6:	2001      	movs	r0, #1
 801b8d8:	f7ff fee4 	bl	801b6a4 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801b8dc:	79ba      	ldrb	r2, [r7, #6]
 801b8de:	68fb      	ldr	r3, [r7, #12]
 801b8e0:	b2db      	uxtb	r3, r3
 801b8e2:	1ad3      	subs	r3, r2, r3
 801b8e4:	b2db      	uxtb	r3, r3
 801b8e6:	330d      	adds	r3, #13
 801b8e8:	b2db      	uxtb	r3, r3
 801b8ea:	71bb      	strb	r3, [r7, #6]
 801b8ec:	e00d      	b.n	801b90a <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 801b8ee:	2301      	movs	r3, #1
 801b8f0:	2201      	movs	r2, #1
 801b8f2:	2100      	movs	r1, #0
 801b8f4:	2007      	movs	r0, #7
 801b8f6:	f7ff fed5 	bl	801b6a4 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801b8fa:	79ba      	ldrb	r2, [r7, #6]
 801b8fc:	68fb      	ldr	r3, [r7, #12]
 801b8fe:	b2db      	uxtb	r3, r3
 801b900:	1ad3      	subs	r3, r2, r3
 801b902:	b2db      	uxtb	r3, r3
 801b904:	330e      	adds	r3, #14
 801b906:	b2db      	uxtb	r3, r3
 801b908:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801b90a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b90e:	f113 0f11 	cmn.w	r3, #17
 801b912:	da01      	bge.n	801b918 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 801b914:	23ef      	movs	r3, #239	; 0xef
 801b916:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801b918:	2118      	movs	r1, #24
 801b91a:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801b91e:	f000 fa93 	bl	801be48 <SUBGRF_WriteRegister>
 801b922:	e067      	b.n	801b9f4 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801b924:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801b928:	f000 faa2 	bl	801be70 <SUBGRF_ReadRegister>
 801b92c:	4603      	mov	r3, r0
 801b92e:	f043 031e 	orr.w	r3, r3, #30
 801b932:	b2db      	uxtb	r3, r3
 801b934:	4619      	mov	r1, r3
 801b936:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801b93a:	f000 fa85 	bl	801be48 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801b93e:	2001      	movs	r0, #1
 801b940:	f7ef fb04 	bl	800af4c <RBI_GetRFOMaxPowerConfig>
 801b944:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801b946:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b94a:	68fa      	ldr	r2, [r7, #12]
 801b94c:	429a      	cmp	r2, r3
 801b94e:	da01      	bge.n	801b954 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 801b950:	68fb      	ldr	r3, [r7, #12]
 801b952:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801b954:	68fb      	ldr	r3, [r7, #12]
 801b956:	2b14      	cmp	r3, #20
 801b958:	d10e      	bne.n	801b978 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801b95a:	2301      	movs	r3, #1
 801b95c:	2200      	movs	r2, #0
 801b95e:	2105      	movs	r1, #5
 801b960:	2003      	movs	r0, #3
 801b962:	f7ff fe9f 	bl	801b6a4 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801b966:	79ba      	ldrb	r2, [r7, #6]
 801b968:	68fb      	ldr	r3, [r7, #12]
 801b96a:	b2db      	uxtb	r3, r3
 801b96c:	1ad3      	subs	r3, r2, r3
 801b96e:	b2db      	uxtb	r3, r3
 801b970:	3316      	adds	r3, #22
 801b972:	b2db      	uxtb	r3, r3
 801b974:	71bb      	strb	r3, [r7, #6]
 801b976:	e031      	b.n	801b9dc <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 801b978:	68fb      	ldr	r3, [r7, #12]
 801b97a:	2b11      	cmp	r3, #17
 801b97c:	d10e      	bne.n	801b99c <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801b97e:	2301      	movs	r3, #1
 801b980:	2200      	movs	r2, #0
 801b982:	2103      	movs	r1, #3
 801b984:	2002      	movs	r0, #2
 801b986:	f7ff fe8d 	bl	801b6a4 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801b98a:	79ba      	ldrb	r2, [r7, #6]
 801b98c:	68fb      	ldr	r3, [r7, #12]
 801b98e:	b2db      	uxtb	r3, r3
 801b990:	1ad3      	subs	r3, r2, r3
 801b992:	b2db      	uxtb	r3, r3
 801b994:	3316      	adds	r3, #22
 801b996:	b2db      	uxtb	r3, r3
 801b998:	71bb      	strb	r3, [r7, #6]
 801b99a:	e01f      	b.n	801b9dc <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 801b99c:	68fb      	ldr	r3, [r7, #12]
 801b99e:	2b0e      	cmp	r3, #14
 801b9a0:	d10e      	bne.n	801b9c0 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801b9a2:	2301      	movs	r3, #1
 801b9a4:	2200      	movs	r2, #0
 801b9a6:	2102      	movs	r1, #2
 801b9a8:	2002      	movs	r0, #2
 801b9aa:	f7ff fe7b 	bl	801b6a4 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801b9ae:	79ba      	ldrb	r2, [r7, #6]
 801b9b0:	68fb      	ldr	r3, [r7, #12]
 801b9b2:	b2db      	uxtb	r3, r3
 801b9b4:	1ad3      	subs	r3, r2, r3
 801b9b6:	b2db      	uxtb	r3, r3
 801b9b8:	330e      	adds	r3, #14
 801b9ba:	b2db      	uxtb	r3, r3
 801b9bc:	71bb      	strb	r3, [r7, #6]
 801b9be:	e00d      	b.n	801b9dc <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801b9c0:	2301      	movs	r3, #1
 801b9c2:	2200      	movs	r2, #0
 801b9c4:	2107      	movs	r1, #7
 801b9c6:	2004      	movs	r0, #4
 801b9c8:	f7ff fe6c 	bl	801b6a4 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801b9cc:	79ba      	ldrb	r2, [r7, #6]
 801b9ce:	68fb      	ldr	r3, [r7, #12]
 801b9d0:	b2db      	uxtb	r3, r3
 801b9d2:	1ad3      	subs	r3, r2, r3
 801b9d4:	b2db      	uxtb	r3, r3
 801b9d6:	3316      	adds	r3, #22
 801b9d8:	b2db      	uxtb	r3, r3
 801b9da:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 801b9dc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b9e0:	f113 0f09 	cmn.w	r3, #9
 801b9e4:	da01      	bge.n	801b9ea <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 801b9e6:	23f7      	movs	r3, #247	; 0xf7
 801b9e8:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801b9ea:	2138      	movs	r1, #56	; 0x38
 801b9ec:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801b9f0:	f000 fa2a 	bl	801be48 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801b9f4:	79bb      	ldrb	r3, [r7, #6]
 801b9f6:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 801b9f8:	797b      	ldrb	r3, [r7, #5]
 801b9fa:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801b9fc:	f107 0308 	add.w	r3, r7, #8
 801ba00:	2202      	movs	r2, #2
 801ba02:	4619      	mov	r1, r3
 801ba04:	208e      	movs	r0, #142	; 0x8e
 801ba06:	f000 facf 	bl	801bfa8 <SUBGRF_WriteCommand>
}
 801ba0a:	bf00      	nop
 801ba0c:	3710      	adds	r7, #16
 801ba0e:	46bd      	mov	sp, r7
 801ba10:	bd80      	pop	{r7, pc}
	...

0801ba14 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801ba14:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801ba18:	b086      	sub	sp, #24
 801ba1a:	af00      	add	r7, sp, #0
 801ba1c:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801ba1e:	2300      	movs	r3, #0
 801ba20:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801ba22:	4a61      	ldr	r2, [pc, #388]	; (801bba8 <SUBGRF_SetModulationParams+0x194>)
 801ba24:	f107 0308 	add.w	r3, r7, #8
 801ba28:	e892 0003 	ldmia.w	r2, {r0, r1}
 801ba2c:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801ba30:	687b      	ldr	r3, [r7, #4]
 801ba32:	781a      	ldrb	r2, [r3, #0]
 801ba34:	4b5d      	ldr	r3, [pc, #372]	; (801bbac <SUBGRF_SetModulationParams+0x198>)
 801ba36:	781b      	ldrb	r3, [r3, #0]
 801ba38:	429a      	cmp	r2, r3
 801ba3a:	d004      	beq.n	801ba46 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801ba3c:	687b      	ldr	r3, [r7, #4]
 801ba3e:	781b      	ldrb	r3, [r3, #0]
 801ba40:	4618      	mov	r0, r3
 801ba42:	f7ff fef3 	bl	801b82c <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801ba46:	687b      	ldr	r3, [r7, #4]
 801ba48:	781b      	ldrb	r3, [r3, #0]
 801ba4a:	2b03      	cmp	r3, #3
 801ba4c:	f200 80a5 	bhi.w	801bb9a <SUBGRF_SetModulationParams+0x186>
 801ba50:	a201      	add	r2, pc, #4	; (adr r2, 801ba58 <SUBGRF_SetModulationParams+0x44>)
 801ba52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ba56:	bf00      	nop
 801ba58:	0801ba69 	.word	0x0801ba69
 801ba5c:	0801bb29 	.word	0x0801bb29
 801ba60:	0801baeb 	.word	0x0801baeb
 801ba64:	0801bb57 	.word	0x0801bb57
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801ba68:	2308      	movs	r3, #8
 801ba6a:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801ba6c:	687b      	ldr	r3, [r7, #4]
 801ba6e:	685b      	ldr	r3, [r3, #4]
 801ba70:	4a4f      	ldr	r2, [pc, #316]	; (801bbb0 <SUBGRF_SetModulationParams+0x19c>)
 801ba72:	fbb2 f3f3 	udiv	r3, r2, r3
 801ba76:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801ba78:	697b      	ldr	r3, [r7, #20]
 801ba7a:	0c1b      	lsrs	r3, r3, #16
 801ba7c:	b2db      	uxtb	r3, r3
 801ba7e:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801ba80:	697b      	ldr	r3, [r7, #20]
 801ba82:	0a1b      	lsrs	r3, r3, #8
 801ba84:	b2db      	uxtb	r3, r3
 801ba86:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801ba88:	697b      	ldr	r3, [r7, #20]
 801ba8a:	b2db      	uxtb	r3, r3
 801ba8c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801ba8e:	687b      	ldr	r3, [r7, #4]
 801ba90:	7b1b      	ldrb	r3, [r3, #12]
 801ba92:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801ba94:	687b      	ldr	r3, [r7, #4]
 801ba96:	7b5b      	ldrb	r3, [r3, #13]
 801ba98:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801ba9a:	687b      	ldr	r3, [r7, #4]
 801ba9c:	689b      	ldr	r3, [r3, #8]
 801ba9e:	2200      	movs	r2, #0
 801baa0:	461c      	mov	r4, r3
 801baa2:	4615      	mov	r5, r2
 801baa4:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801baa8:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801baac:	4a41      	ldr	r2, [pc, #260]	; (801bbb4 <SUBGRF_SetModulationParams+0x1a0>)
 801baae:	f04f 0300 	mov.w	r3, #0
 801bab2:	4640      	mov	r0, r8
 801bab4:	4649      	mov	r1, r9
 801bab6:	f7e5 f877 	bl	8000ba8 <__aeabi_uldivmod>
 801baba:	4602      	mov	r2, r0
 801babc:	460b      	mov	r3, r1
 801babe:	4613      	mov	r3, r2
 801bac0:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801bac2:	697b      	ldr	r3, [r7, #20]
 801bac4:	0c1b      	lsrs	r3, r3, #16
 801bac6:	b2db      	uxtb	r3, r3
 801bac8:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801baca:	697b      	ldr	r3, [r7, #20]
 801bacc:	0a1b      	lsrs	r3, r3, #8
 801bace:	b2db      	uxtb	r3, r3
 801bad0:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801bad2:	697b      	ldr	r3, [r7, #20]
 801bad4:	b2db      	uxtb	r3, r3
 801bad6:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801bad8:	7cfb      	ldrb	r3, [r7, #19]
 801bada:	b29a      	uxth	r2, r3
 801badc:	f107 0308 	add.w	r3, r7, #8
 801bae0:	4619      	mov	r1, r3
 801bae2:	208b      	movs	r0, #139	; 0x8b
 801bae4:	f000 fa60 	bl	801bfa8 <SUBGRF_WriteCommand>
        break;
 801bae8:	e058      	b.n	801bb9c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 801baea:	2304      	movs	r3, #4
 801baec:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801baee:	687b      	ldr	r3, [r7, #4]
 801baf0:	691b      	ldr	r3, [r3, #16]
 801baf2:	4a2f      	ldr	r2, [pc, #188]	; (801bbb0 <SUBGRF_SetModulationParams+0x19c>)
 801baf4:	fbb2 f3f3 	udiv	r3, r2, r3
 801baf8:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801bafa:	697b      	ldr	r3, [r7, #20]
 801bafc:	0c1b      	lsrs	r3, r3, #16
 801bafe:	b2db      	uxtb	r3, r3
 801bb00:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801bb02:	697b      	ldr	r3, [r7, #20]
 801bb04:	0a1b      	lsrs	r3, r3, #8
 801bb06:	b2db      	uxtb	r3, r3
 801bb08:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801bb0a:	697b      	ldr	r3, [r7, #20]
 801bb0c:	b2db      	uxtb	r3, r3
 801bb0e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801bb10:	687b      	ldr	r3, [r7, #4]
 801bb12:	7d1b      	ldrb	r3, [r3, #20]
 801bb14:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801bb16:	7cfb      	ldrb	r3, [r7, #19]
 801bb18:	b29a      	uxth	r2, r3
 801bb1a:	f107 0308 	add.w	r3, r7, #8
 801bb1e:	4619      	mov	r1, r3
 801bb20:	208b      	movs	r0, #139	; 0x8b
 801bb22:	f000 fa41 	bl	801bfa8 <SUBGRF_WriteCommand>
        break;
 801bb26:	e039      	b.n	801bb9c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 801bb28:	2304      	movs	r3, #4
 801bb2a:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801bb2c:	687b      	ldr	r3, [r7, #4]
 801bb2e:	7e1b      	ldrb	r3, [r3, #24]
 801bb30:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801bb32:	687b      	ldr	r3, [r7, #4]
 801bb34:	7e5b      	ldrb	r3, [r3, #25]
 801bb36:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801bb38:	687b      	ldr	r3, [r7, #4]
 801bb3a:	7e9b      	ldrb	r3, [r3, #26]
 801bb3c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801bb3e:	687b      	ldr	r3, [r7, #4]
 801bb40:	7edb      	ldrb	r3, [r3, #27]
 801bb42:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801bb44:	7cfb      	ldrb	r3, [r7, #19]
 801bb46:	b29a      	uxth	r2, r3
 801bb48:	f107 0308 	add.w	r3, r7, #8
 801bb4c:	4619      	mov	r1, r3
 801bb4e:	208b      	movs	r0, #139	; 0x8b
 801bb50:	f000 fa2a 	bl	801bfa8 <SUBGRF_WriteCommand>

        break;
 801bb54:	e022      	b.n	801bb9c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 801bb56:	2305      	movs	r3, #5
 801bb58:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801bb5a:	687b      	ldr	r3, [r7, #4]
 801bb5c:	685b      	ldr	r3, [r3, #4]
 801bb5e:	4a14      	ldr	r2, [pc, #80]	; (801bbb0 <SUBGRF_SetModulationParams+0x19c>)
 801bb60:	fbb2 f3f3 	udiv	r3, r2, r3
 801bb64:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801bb66:	697b      	ldr	r3, [r7, #20]
 801bb68:	0c1b      	lsrs	r3, r3, #16
 801bb6a:	b2db      	uxtb	r3, r3
 801bb6c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801bb6e:	697b      	ldr	r3, [r7, #20]
 801bb70:	0a1b      	lsrs	r3, r3, #8
 801bb72:	b2db      	uxtb	r3, r3
 801bb74:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801bb76:	697b      	ldr	r3, [r7, #20]
 801bb78:	b2db      	uxtb	r3, r3
 801bb7a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801bb7c:	687b      	ldr	r3, [r7, #4]
 801bb7e:	7b1b      	ldrb	r3, [r3, #12]
 801bb80:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801bb82:	687b      	ldr	r3, [r7, #4]
 801bb84:	7b5b      	ldrb	r3, [r3, #13]
 801bb86:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801bb88:	7cfb      	ldrb	r3, [r7, #19]
 801bb8a:	b29a      	uxth	r2, r3
 801bb8c:	f107 0308 	add.w	r3, r7, #8
 801bb90:	4619      	mov	r1, r3
 801bb92:	208b      	movs	r0, #139	; 0x8b
 801bb94:	f000 fa08 	bl	801bfa8 <SUBGRF_WriteCommand>
        break;
 801bb98:	e000      	b.n	801bb9c <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 801bb9a:	bf00      	nop
    }
}
 801bb9c:	bf00      	nop
 801bb9e:	3718      	adds	r7, #24
 801bba0:	46bd      	mov	sp, r7
 801bba2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801bba6:	bf00      	nop
 801bba8:	0801e584 	.word	0x0801e584
 801bbac:	20001c75 	.word	0x20001c75
 801bbb0:	3d090000 	.word	0x3d090000
 801bbb4:	01e84800 	.word	0x01e84800

0801bbb8 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801bbb8:	b580      	push	{r7, lr}
 801bbba:	b086      	sub	sp, #24
 801bbbc:	af00      	add	r7, sp, #0
 801bbbe:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801bbc0:	2300      	movs	r3, #0
 801bbc2:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801bbc4:	4a48      	ldr	r2, [pc, #288]	; (801bce8 <SUBGRF_SetPacketParams+0x130>)
 801bbc6:	f107 030c 	add.w	r3, r7, #12
 801bbca:	ca07      	ldmia	r2, {r0, r1, r2}
 801bbcc:	c303      	stmia	r3!, {r0, r1}
 801bbce:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801bbd0:	687b      	ldr	r3, [r7, #4]
 801bbd2:	781a      	ldrb	r2, [r3, #0]
 801bbd4:	4b45      	ldr	r3, [pc, #276]	; (801bcec <SUBGRF_SetPacketParams+0x134>)
 801bbd6:	781b      	ldrb	r3, [r3, #0]
 801bbd8:	429a      	cmp	r2, r3
 801bbda:	d004      	beq.n	801bbe6 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801bbdc:	687b      	ldr	r3, [r7, #4]
 801bbde:	781b      	ldrb	r3, [r3, #0]
 801bbe0:	4618      	mov	r0, r3
 801bbe2:	f7ff fe23 	bl	801b82c <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801bbe6:	687b      	ldr	r3, [r7, #4]
 801bbe8:	781b      	ldrb	r3, [r3, #0]
 801bbea:	2b03      	cmp	r3, #3
 801bbec:	d878      	bhi.n	801bce0 <SUBGRF_SetPacketParams+0x128>
 801bbee:	a201      	add	r2, pc, #4	; (adr r2, 801bbf4 <SUBGRF_SetPacketParams+0x3c>)
 801bbf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bbf4:	0801bc05 	.word	0x0801bc05
 801bbf8:	0801bc95 	.word	0x0801bc95
 801bbfc:	0801bc89 	.word	0x0801bc89
 801bc00:	0801bc05 	.word	0x0801bc05
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801bc04:	687b      	ldr	r3, [r7, #4]
 801bc06:	7a5b      	ldrb	r3, [r3, #9]
 801bc08:	2bf1      	cmp	r3, #241	; 0xf1
 801bc0a:	d10a      	bne.n	801bc22 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801bc0c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801bc10:	f7ff faaa 	bl	801b168 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801bc14:	f248 0005 	movw	r0, #32773	; 0x8005
 801bc18:	f7ff fac6 	bl	801b1a8 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801bc1c:	2302      	movs	r3, #2
 801bc1e:	75bb      	strb	r3, [r7, #22]
 801bc20:	e011      	b.n	801bc46 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801bc22:	687b      	ldr	r3, [r7, #4]
 801bc24:	7a5b      	ldrb	r3, [r3, #9]
 801bc26:	2bf2      	cmp	r3, #242	; 0xf2
 801bc28:	d10a      	bne.n	801bc40 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801bc2a:	f641 500f 	movw	r0, #7439	; 0x1d0f
 801bc2e:	f7ff fa9b 	bl	801b168 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801bc32:	f241 0021 	movw	r0, #4129	; 0x1021
 801bc36:	f7ff fab7 	bl	801b1a8 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801bc3a:	2306      	movs	r3, #6
 801bc3c:	75bb      	strb	r3, [r7, #22]
 801bc3e:	e002      	b.n	801bc46 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801bc40:	687b      	ldr	r3, [r7, #4]
 801bc42:	7a5b      	ldrb	r3, [r3, #9]
 801bc44:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801bc46:	2309      	movs	r3, #9
 801bc48:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801bc4a:	687b      	ldr	r3, [r7, #4]
 801bc4c:	885b      	ldrh	r3, [r3, #2]
 801bc4e:	0a1b      	lsrs	r3, r3, #8
 801bc50:	b29b      	uxth	r3, r3
 801bc52:	b2db      	uxtb	r3, r3
 801bc54:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801bc56:	687b      	ldr	r3, [r7, #4]
 801bc58:	885b      	ldrh	r3, [r3, #2]
 801bc5a:	b2db      	uxtb	r3, r3
 801bc5c:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801bc5e:	687b      	ldr	r3, [r7, #4]
 801bc60:	791b      	ldrb	r3, [r3, #4]
 801bc62:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801bc64:	687b      	ldr	r3, [r7, #4]
 801bc66:	795b      	ldrb	r3, [r3, #5]
 801bc68:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801bc6a:	687b      	ldr	r3, [r7, #4]
 801bc6c:	799b      	ldrb	r3, [r3, #6]
 801bc6e:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801bc70:	687b      	ldr	r3, [r7, #4]
 801bc72:	79db      	ldrb	r3, [r3, #7]
 801bc74:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801bc76:	687b      	ldr	r3, [r7, #4]
 801bc78:	7a1b      	ldrb	r3, [r3, #8]
 801bc7a:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801bc7c:	7dbb      	ldrb	r3, [r7, #22]
 801bc7e:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801bc80:	687b      	ldr	r3, [r7, #4]
 801bc82:	7a9b      	ldrb	r3, [r3, #10]
 801bc84:	753b      	strb	r3, [r7, #20]
        break;
 801bc86:	e022      	b.n	801bcce <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801bc88:	2301      	movs	r3, #1
 801bc8a:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801bc8c:	687b      	ldr	r3, [r7, #4]
 801bc8e:	7b1b      	ldrb	r3, [r3, #12]
 801bc90:	733b      	strb	r3, [r7, #12]
        break;
 801bc92:	e01c      	b.n	801bcce <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801bc94:	2306      	movs	r3, #6
 801bc96:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801bc98:	687b      	ldr	r3, [r7, #4]
 801bc9a:	89db      	ldrh	r3, [r3, #14]
 801bc9c:	0a1b      	lsrs	r3, r3, #8
 801bc9e:	b29b      	uxth	r3, r3
 801bca0:	b2db      	uxtb	r3, r3
 801bca2:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801bca4:	687b      	ldr	r3, [r7, #4]
 801bca6:	89db      	ldrh	r3, [r3, #14]
 801bca8:	b2db      	uxtb	r3, r3
 801bcaa:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801bcac:	687b      	ldr	r3, [r7, #4]
 801bcae:	7c1a      	ldrb	r2, [r3, #16]
 801bcb0:	4b0f      	ldr	r3, [pc, #60]	; (801bcf0 <SUBGRF_SetPacketParams+0x138>)
 801bcb2:	4611      	mov	r1, r2
 801bcb4:	7019      	strb	r1, [r3, #0]
 801bcb6:	4613      	mov	r3, r2
 801bcb8:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801bcba:	687b      	ldr	r3, [r7, #4]
 801bcbc:	7c5b      	ldrb	r3, [r3, #17]
 801bcbe:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801bcc0:	687b      	ldr	r3, [r7, #4]
 801bcc2:	7c9b      	ldrb	r3, [r3, #18]
 801bcc4:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801bcc6:	687b      	ldr	r3, [r7, #4]
 801bcc8:	7cdb      	ldrb	r3, [r3, #19]
 801bcca:	747b      	strb	r3, [r7, #17]
        break;
 801bccc:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801bcce:	7dfb      	ldrb	r3, [r7, #23]
 801bcd0:	b29a      	uxth	r2, r3
 801bcd2:	f107 030c 	add.w	r3, r7, #12
 801bcd6:	4619      	mov	r1, r3
 801bcd8:	208c      	movs	r0, #140	; 0x8c
 801bcda:	f000 f965 	bl	801bfa8 <SUBGRF_WriteCommand>
 801bcde:	e000      	b.n	801bce2 <SUBGRF_SetPacketParams+0x12a>
        return;
 801bce0:	bf00      	nop
}
 801bce2:	3718      	adds	r7, #24
 801bce4:	46bd      	mov	sp, r7
 801bce6:	bd80      	pop	{r7, pc}
 801bce8:	0801e58c 	.word	0x0801e58c
 801bcec:	20001c75 	.word	0x20001c75
 801bcf0:	20001c76 	.word	0x20001c76

0801bcf4 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801bcf4:	b580      	push	{r7, lr}
 801bcf6:	b084      	sub	sp, #16
 801bcf8:	af00      	add	r7, sp, #0
 801bcfa:	4603      	mov	r3, r0
 801bcfc:	460a      	mov	r2, r1
 801bcfe:	71fb      	strb	r3, [r7, #7]
 801bd00:	4613      	mov	r3, r2
 801bd02:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801bd04:	79fb      	ldrb	r3, [r7, #7]
 801bd06:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801bd08:	79bb      	ldrb	r3, [r7, #6]
 801bd0a:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801bd0c:	f107 030c 	add.w	r3, r7, #12
 801bd10:	2202      	movs	r2, #2
 801bd12:	4619      	mov	r1, r3
 801bd14:	208f      	movs	r0, #143	; 0x8f
 801bd16:	f000 f947 	bl	801bfa8 <SUBGRF_WriteCommand>
}
 801bd1a:	bf00      	nop
 801bd1c:	3710      	adds	r7, #16
 801bd1e:	46bd      	mov	sp, r7
 801bd20:	bd80      	pop	{r7, pc}

0801bd22 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801bd22:	b580      	push	{r7, lr}
 801bd24:	b082      	sub	sp, #8
 801bd26:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801bd28:	2300      	movs	r3, #0
 801bd2a:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801bd2c:	1d3b      	adds	r3, r7, #4
 801bd2e:	2201      	movs	r2, #1
 801bd30:	4619      	mov	r1, r3
 801bd32:	2015      	movs	r0, #21
 801bd34:	f000 f95a 	bl	801bfec <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801bd38:	793b      	ldrb	r3, [r7, #4]
 801bd3a:	425b      	negs	r3, r3
 801bd3c:	105b      	asrs	r3, r3, #1
 801bd3e:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801bd40:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801bd44:	4618      	mov	r0, r3
 801bd46:	3708      	adds	r7, #8
 801bd48:	46bd      	mov	sp, r7
 801bd4a:	bd80      	pop	{r7, pc}

0801bd4c <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801bd4c:	b580      	push	{r7, lr}
 801bd4e:	b084      	sub	sp, #16
 801bd50:	af00      	add	r7, sp, #0
 801bd52:	6078      	str	r0, [r7, #4]
 801bd54:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801bd56:	f107 030c 	add.w	r3, r7, #12
 801bd5a:	2202      	movs	r2, #2
 801bd5c:	4619      	mov	r1, r3
 801bd5e:	2013      	movs	r0, #19
 801bd60:	f000 f944 	bl	801bfec <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801bd64:	f7ff fd7e 	bl	801b864 <SUBGRF_GetPacketType>
 801bd68:	4603      	mov	r3, r0
 801bd6a:	2b01      	cmp	r3, #1
 801bd6c:	d10d      	bne.n	801bd8a <SUBGRF_GetRxBufferStatus+0x3e>
 801bd6e:	4b0c      	ldr	r3, [pc, #48]	; (801bda0 <SUBGRF_GetRxBufferStatus+0x54>)
 801bd70:	781b      	ldrb	r3, [r3, #0]
 801bd72:	b2db      	uxtb	r3, r3
 801bd74:	2b01      	cmp	r3, #1
 801bd76:	d108      	bne.n	801bd8a <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801bd78:	f240 7002 	movw	r0, #1794	; 0x702
 801bd7c:	f000 f878 	bl	801be70 <SUBGRF_ReadRegister>
 801bd80:	4603      	mov	r3, r0
 801bd82:	461a      	mov	r2, r3
 801bd84:	687b      	ldr	r3, [r7, #4]
 801bd86:	701a      	strb	r2, [r3, #0]
 801bd88:	e002      	b.n	801bd90 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801bd8a:	7b3a      	ldrb	r2, [r7, #12]
 801bd8c:	687b      	ldr	r3, [r7, #4]
 801bd8e:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801bd90:	7b7a      	ldrb	r2, [r7, #13]
 801bd92:	683b      	ldr	r3, [r7, #0]
 801bd94:	701a      	strb	r2, [r3, #0]
}
 801bd96:	bf00      	nop
 801bd98:	3710      	adds	r7, #16
 801bd9a:	46bd      	mov	sp, r7
 801bd9c:	bd80      	pop	{r7, pc}
 801bd9e:	bf00      	nop
 801bda0:	20001c76 	.word	0x20001c76

0801bda4 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801bda4:	b580      	push	{r7, lr}
 801bda6:	b084      	sub	sp, #16
 801bda8:	af00      	add	r7, sp, #0
 801bdaa:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801bdac:	f107 030c 	add.w	r3, r7, #12
 801bdb0:	2203      	movs	r2, #3
 801bdb2:	4619      	mov	r1, r3
 801bdb4:	2014      	movs	r0, #20
 801bdb6:	f000 f919 	bl	801bfec <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801bdba:	f7ff fd53 	bl	801b864 <SUBGRF_GetPacketType>
 801bdbe:	4603      	mov	r3, r0
 801bdc0:	461a      	mov	r2, r3
 801bdc2:	687b      	ldr	r3, [r7, #4]
 801bdc4:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801bdc6:	687b      	ldr	r3, [r7, #4]
 801bdc8:	781b      	ldrb	r3, [r3, #0]
 801bdca:	2b00      	cmp	r3, #0
 801bdcc:	d002      	beq.n	801bdd4 <SUBGRF_GetPacketStatus+0x30>
 801bdce:	2b01      	cmp	r3, #1
 801bdd0:	d013      	beq.n	801bdfa <SUBGRF_GetPacketStatus+0x56>
 801bdd2:	e02a      	b.n	801be2a <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801bdd4:	7b3a      	ldrb	r2, [r7, #12]
 801bdd6:	687b      	ldr	r3, [r7, #4]
 801bdd8:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801bdda:	7b7b      	ldrb	r3, [r7, #13]
 801bddc:	425b      	negs	r3, r3
 801bdde:	105b      	asrs	r3, r3, #1
 801bde0:	b25a      	sxtb	r2, r3
 801bde2:	687b      	ldr	r3, [r7, #4]
 801bde4:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801bde6:	7bbb      	ldrb	r3, [r7, #14]
 801bde8:	425b      	negs	r3, r3
 801bdea:	105b      	asrs	r3, r3, #1
 801bdec:	b25a      	sxtb	r2, r3
 801bdee:	687b      	ldr	r3, [r7, #4]
 801bdf0:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801bdf2:	687b      	ldr	r3, [r7, #4]
 801bdf4:	2200      	movs	r2, #0
 801bdf6:	609a      	str	r2, [r3, #8]
            break;
 801bdf8:	e020      	b.n	801be3c <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801bdfa:	7b3b      	ldrb	r3, [r7, #12]
 801bdfc:	425b      	negs	r3, r3
 801bdfe:	105b      	asrs	r3, r3, #1
 801be00:	b25a      	sxtb	r2, r3
 801be02:	687b      	ldr	r3, [r7, #4]
 801be04:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801be06:	7b7b      	ldrb	r3, [r7, #13]
 801be08:	b25b      	sxtb	r3, r3
 801be0a:	3302      	adds	r3, #2
 801be0c:	109b      	asrs	r3, r3, #2
 801be0e:	b25a      	sxtb	r2, r3
 801be10:	687b      	ldr	r3, [r7, #4]
 801be12:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801be14:	7bbb      	ldrb	r3, [r7, #14]
 801be16:	425b      	negs	r3, r3
 801be18:	105b      	asrs	r3, r3, #1
 801be1a:	b25a      	sxtb	r2, r3
 801be1c:	687b      	ldr	r3, [r7, #4]
 801be1e:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801be20:	4b08      	ldr	r3, [pc, #32]	; (801be44 <SUBGRF_GetPacketStatus+0xa0>)
 801be22:	681a      	ldr	r2, [r3, #0]
 801be24:	687b      	ldr	r3, [r7, #4]
 801be26:	611a      	str	r2, [r3, #16]
            break;
 801be28:	e008      	b.n	801be3c <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801be2a:	2214      	movs	r2, #20
 801be2c:	2100      	movs	r1, #0
 801be2e:	6878      	ldr	r0, [r7, #4]
 801be30:	f000 fc03 	bl	801c63a <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801be34:	687b      	ldr	r3, [r7, #4]
 801be36:	220f      	movs	r2, #15
 801be38:	701a      	strb	r2, [r3, #0]
            break;
 801be3a:	bf00      	nop
    }
}
 801be3c:	bf00      	nop
 801be3e:	3710      	adds	r7, #16
 801be40:	46bd      	mov	sp, r7
 801be42:	bd80      	pop	{r7, pc}
 801be44:	20001c78 	.word	0x20001c78

0801be48 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801be48:	b580      	push	{r7, lr}
 801be4a:	b082      	sub	sp, #8
 801be4c:	af00      	add	r7, sp, #0
 801be4e:	4603      	mov	r3, r0
 801be50:	460a      	mov	r2, r1
 801be52:	80fb      	strh	r3, [r7, #6]
 801be54:	4613      	mov	r3, r2
 801be56:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801be58:	1d7a      	adds	r2, r7, #5
 801be5a:	88f9      	ldrh	r1, [r7, #6]
 801be5c:	2301      	movs	r3, #1
 801be5e:	4803      	ldr	r0, [pc, #12]	; (801be6c <SUBGRF_WriteRegister+0x24>)
 801be60:	f7eb fc14 	bl	800768c <HAL_SUBGHZ_WriteRegisters>
}
 801be64:	bf00      	nop
 801be66:	3708      	adds	r7, #8
 801be68:	46bd      	mov	sp, r7
 801be6a:	bd80      	pop	{r7, pc}
 801be6c:	200002bc 	.word	0x200002bc

0801be70 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801be70:	b580      	push	{r7, lr}
 801be72:	b084      	sub	sp, #16
 801be74:	af00      	add	r7, sp, #0
 801be76:	4603      	mov	r3, r0
 801be78:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801be7a:	f107 020f 	add.w	r2, r7, #15
 801be7e:	88f9      	ldrh	r1, [r7, #6]
 801be80:	2301      	movs	r3, #1
 801be82:	4804      	ldr	r0, [pc, #16]	; (801be94 <SUBGRF_ReadRegister+0x24>)
 801be84:	f7eb fc61 	bl	800774a <HAL_SUBGHZ_ReadRegisters>
    return data;
 801be88:	7bfb      	ldrb	r3, [r7, #15]
}
 801be8a:	4618      	mov	r0, r3
 801be8c:	3710      	adds	r7, #16
 801be8e:	46bd      	mov	sp, r7
 801be90:	bd80      	pop	{r7, pc}
 801be92:	bf00      	nop
 801be94:	200002bc 	.word	0x200002bc

0801be98 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801be98:	b580      	push	{r7, lr}
 801be9a:	b086      	sub	sp, #24
 801be9c:	af00      	add	r7, sp, #0
 801be9e:	4603      	mov	r3, r0
 801bea0:	6039      	str	r1, [r7, #0]
 801bea2:	80fb      	strh	r3, [r7, #6]
 801bea4:	4613      	mov	r3, r2
 801bea6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bea8:	f3ef 8310 	mrs	r3, PRIMASK
 801beac:	60fb      	str	r3, [r7, #12]
  return(result);
 801beae:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801beb0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801beb2:	b672      	cpsid	i
}
 801beb4:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801beb6:	88bb      	ldrh	r3, [r7, #4]
 801beb8:	88f9      	ldrh	r1, [r7, #6]
 801beba:	683a      	ldr	r2, [r7, #0]
 801bebc:	4806      	ldr	r0, [pc, #24]	; (801bed8 <SUBGRF_WriteRegisters+0x40>)
 801bebe:	f7eb fbe5 	bl	800768c <HAL_SUBGHZ_WriteRegisters>
 801bec2:	697b      	ldr	r3, [r7, #20]
 801bec4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bec6:	693b      	ldr	r3, [r7, #16]
 801bec8:	f383 8810 	msr	PRIMASK, r3
}
 801becc:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801bece:	bf00      	nop
 801bed0:	3718      	adds	r7, #24
 801bed2:	46bd      	mov	sp, r7
 801bed4:	bd80      	pop	{r7, pc}
 801bed6:	bf00      	nop
 801bed8:	200002bc 	.word	0x200002bc

0801bedc <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801bedc:	b580      	push	{r7, lr}
 801bede:	b086      	sub	sp, #24
 801bee0:	af00      	add	r7, sp, #0
 801bee2:	4603      	mov	r3, r0
 801bee4:	6039      	str	r1, [r7, #0]
 801bee6:	80fb      	strh	r3, [r7, #6]
 801bee8:	4613      	mov	r3, r2
 801beea:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801beec:	f3ef 8310 	mrs	r3, PRIMASK
 801bef0:	60fb      	str	r3, [r7, #12]
  return(result);
 801bef2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801bef4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bef6:	b672      	cpsid	i
}
 801bef8:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801befa:	88bb      	ldrh	r3, [r7, #4]
 801befc:	88f9      	ldrh	r1, [r7, #6]
 801befe:	683a      	ldr	r2, [r7, #0]
 801bf00:	4806      	ldr	r0, [pc, #24]	; (801bf1c <SUBGRF_ReadRegisters+0x40>)
 801bf02:	f7eb fc22 	bl	800774a <HAL_SUBGHZ_ReadRegisters>
 801bf06:	697b      	ldr	r3, [r7, #20]
 801bf08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bf0a:	693b      	ldr	r3, [r7, #16]
 801bf0c:	f383 8810 	msr	PRIMASK, r3
}
 801bf10:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801bf12:	bf00      	nop
 801bf14:	3718      	adds	r7, #24
 801bf16:	46bd      	mov	sp, r7
 801bf18:	bd80      	pop	{r7, pc}
 801bf1a:	bf00      	nop
 801bf1c:	200002bc 	.word	0x200002bc

0801bf20 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801bf20:	b580      	push	{r7, lr}
 801bf22:	b086      	sub	sp, #24
 801bf24:	af00      	add	r7, sp, #0
 801bf26:	4603      	mov	r3, r0
 801bf28:	6039      	str	r1, [r7, #0]
 801bf2a:	71fb      	strb	r3, [r7, #7]
 801bf2c:	4613      	mov	r3, r2
 801bf2e:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bf30:	f3ef 8310 	mrs	r3, PRIMASK
 801bf34:	60fb      	str	r3, [r7, #12]
  return(result);
 801bf36:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801bf38:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bf3a:	b672      	cpsid	i
}
 801bf3c:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801bf3e:	79bb      	ldrb	r3, [r7, #6]
 801bf40:	b29b      	uxth	r3, r3
 801bf42:	79f9      	ldrb	r1, [r7, #7]
 801bf44:	683a      	ldr	r2, [r7, #0]
 801bf46:	4806      	ldr	r0, [pc, #24]	; (801bf60 <SUBGRF_WriteBuffer+0x40>)
 801bf48:	f7eb fd13 	bl	8007972 <HAL_SUBGHZ_WriteBuffer>
 801bf4c:	697b      	ldr	r3, [r7, #20]
 801bf4e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bf50:	693b      	ldr	r3, [r7, #16]
 801bf52:	f383 8810 	msr	PRIMASK, r3
}
 801bf56:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801bf58:	bf00      	nop
 801bf5a:	3718      	adds	r7, #24
 801bf5c:	46bd      	mov	sp, r7
 801bf5e:	bd80      	pop	{r7, pc}
 801bf60:	200002bc 	.word	0x200002bc

0801bf64 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801bf64:	b580      	push	{r7, lr}
 801bf66:	b086      	sub	sp, #24
 801bf68:	af00      	add	r7, sp, #0
 801bf6a:	4603      	mov	r3, r0
 801bf6c:	6039      	str	r1, [r7, #0]
 801bf6e:	71fb      	strb	r3, [r7, #7]
 801bf70:	4613      	mov	r3, r2
 801bf72:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bf74:	f3ef 8310 	mrs	r3, PRIMASK
 801bf78:	60fb      	str	r3, [r7, #12]
  return(result);
 801bf7a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801bf7c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bf7e:	b672      	cpsid	i
}
 801bf80:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801bf82:	79bb      	ldrb	r3, [r7, #6]
 801bf84:	b29b      	uxth	r3, r3
 801bf86:	79f9      	ldrb	r1, [r7, #7]
 801bf88:	683a      	ldr	r2, [r7, #0]
 801bf8a:	4806      	ldr	r0, [pc, #24]	; (801bfa4 <SUBGRF_ReadBuffer+0x40>)
 801bf8c:	f7eb fd44 	bl	8007a18 <HAL_SUBGHZ_ReadBuffer>
 801bf90:	697b      	ldr	r3, [r7, #20]
 801bf92:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bf94:	693b      	ldr	r3, [r7, #16]
 801bf96:	f383 8810 	msr	PRIMASK, r3
}
 801bf9a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801bf9c:	bf00      	nop
 801bf9e:	3718      	adds	r7, #24
 801bfa0:	46bd      	mov	sp, r7
 801bfa2:	bd80      	pop	{r7, pc}
 801bfa4:	200002bc 	.word	0x200002bc

0801bfa8 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801bfa8:	b580      	push	{r7, lr}
 801bfaa:	b086      	sub	sp, #24
 801bfac:	af00      	add	r7, sp, #0
 801bfae:	4603      	mov	r3, r0
 801bfb0:	6039      	str	r1, [r7, #0]
 801bfb2:	71fb      	strb	r3, [r7, #7]
 801bfb4:	4613      	mov	r3, r2
 801bfb6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bfb8:	f3ef 8310 	mrs	r3, PRIMASK
 801bfbc:	60fb      	str	r3, [r7, #12]
  return(result);
 801bfbe:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801bfc0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bfc2:	b672      	cpsid	i
}
 801bfc4:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801bfc6:	88bb      	ldrh	r3, [r7, #4]
 801bfc8:	79f9      	ldrb	r1, [r7, #7]
 801bfca:	683a      	ldr	r2, [r7, #0]
 801bfcc:	4806      	ldr	r0, [pc, #24]	; (801bfe8 <SUBGRF_WriteCommand+0x40>)
 801bfce:	f7eb fc1d 	bl	800780c <HAL_SUBGHZ_ExecSetCmd>
 801bfd2:	697b      	ldr	r3, [r7, #20]
 801bfd4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bfd6:	693b      	ldr	r3, [r7, #16]
 801bfd8:	f383 8810 	msr	PRIMASK, r3
}
 801bfdc:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801bfde:	bf00      	nop
 801bfe0:	3718      	adds	r7, #24
 801bfe2:	46bd      	mov	sp, r7
 801bfe4:	bd80      	pop	{r7, pc}
 801bfe6:	bf00      	nop
 801bfe8:	200002bc 	.word	0x200002bc

0801bfec <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801bfec:	b580      	push	{r7, lr}
 801bfee:	b086      	sub	sp, #24
 801bff0:	af00      	add	r7, sp, #0
 801bff2:	4603      	mov	r3, r0
 801bff4:	6039      	str	r1, [r7, #0]
 801bff6:	71fb      	strb	r3, [r7, #7]
 801bff8:	4613      	mov	r3, r2
 801bffa:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bffc:	f3ef 8310 	mrs	r3, PRIMASK
 801c000:	60fb      	str	r3, [r7, #12]
  return(result);
 801c002:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801c004:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c006:	b672      	cpsid	i
}
 801c008:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801c00a:	88bb      	ldrh	r3, [r7, #4]
 801c00c:	79f9      	ldrb	r1, [r7, #7]
 801c00e:	683a      	ldr	r2, [r7, #0]
 801c010:	4806      	ldr	r0, [pc, #24]	; (801c02c <SUBGRF_ReadCommand+0x40>)
 801c012:	f7eb fc5a 	bl	80078ca <HAL_SUBGHZ_ExecGetCmd>
 801c016:	697b      	ldr	r3, [r7, #20]
 801c018:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c01a:	693b      	ldr	r3, [r7, #16]
 801c01c:	f383 8810 	msr	PRIMASK, r3
}
 801c020:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801c022:	bf00      	nop
 801c024:	3718      	adds	r7, #24
 801c026:	46bd      	mov	sp, r7
 801c028:	bd80      	pop	{r7, pc}
 801c02a:	bf00      	nop
 801c02c:	200002bc 	.word	0x200002bc

0801c030 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801c030:	b580      	push	{r7, lr}
 801c032:	b084      	sub	sp, #16
 801c034:	af00      	add	r7, sp, #0
 801c036:	4603      	mov	r3, r0
 801c038:	460a      	mov	r2, r1
 801c03a:	71fb      	strb	r3, [r7, #7]
 801c03c:	4613      	mov	r3, r2
 801c03e:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801c040:	2301      	movs	r3, #1
 801c042:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801c044:	79bb      	ldrb	r3, [r7, #6]
 801c046:	2b01      	cmp	r3, #1
 801c048:	d10d      	bne.n	801c066 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801c04a:	79fb      	ldrb	r3, [r7, #7]
 801c04c:	2b01      	cmp	r3, #1
 801c04e:	d104      	bne.n	801c05a <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801c050:	2302      	movs	r3, #2
 801c052:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801c054:	2004      	movs	r0, #4
 801c056:	f000 f8ef 	bl	801c238 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801c05a:	79fb      	ldrb	r3, [r7, #7]
 801c05c:	2b02      	cmp	r3, #2
 801c05e:	d107      	bne.n	801c070 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801c060:	2303      	movs	r3, #3
 801c062:	73fb      	strb	r3, [r7, #15]
 801c064:	e004      	b.n	801c070 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801c066:	79bb      	ldrb	r3, [r7, #6]
 801c068:	2b00      	cmp	r3, #0
 801c06a:	d101      	bne.n	801c070 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801c06c:	2301      	movs	r3, #1
 801c06e:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801c070:	7bfb      	ldrb	r3, [r7, #15]
 801c072:	4618      	mov	r0, r3
 801c074:	f7ee ff47 	bl	800af06 <RBI_ConfigRFSwitch>
}
 801c078:	bf00      	nop
 801c07a:	3710      	adds	r7, #16
 801c07c:	46bd      	mov	sp, r7
 801c07e:	bd80      	pop	{r7, pc}

0801c080 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801c080:	b580      	push	{r7, lr}
 801c082:	b084      	sub	sp, #16
 801c084:	af00      	add	r7, sp, #0
 801c086:	4603      	mov	r3, r0
 801c088:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801c08a:	2301      	movs	r3, #1
 801c08c:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801c08e:	f7ee ff48 	bl	800af22 <RBI_GetTxConfig>
 801c092:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801c094:	68bb      	ldr	r3, [r7, #8]
 801c096:	2b02      	cmp	r3, #2
 801c098:	d016      	beq.n	801c0c8 <SUBGRF_SetRfTxPower+0x48>
 801c09a:	68bb      	ldr	r3, [r7, #8]
 801c09c:	2b02      	cmp	r3, #2
 801c09e:	dc16      	bgt.n	801c0ce <SUBGRF_SetRfTxPower+0x4e>
 801c0a0:	68bb      	ldr	r3, [r7, #8]
 801c0a2:	2b00      	cmp	r3, #0
 801c0a4:	d003      	beq.n	801c0ae <SUBGRF_SetRfTxPower+0x2e>
 801c0a6:	68bb      	ldr	r3, [r7, #8]
 801c0a8:	2b01      	cmp	r3, #1
 801c0aa:	d00a      	beq.n	801c0c2 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801c0ac:	e00f      	b.n	801c0ce <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801c0ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c0b2:	2b0f      	cmp	r3, #15
 801c0b4:	dd02      	ble.n	801c0bc <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801c0b6:	2302      	movs	r3, #2
 801c0b8:	73fb      	strb	r3, [r7, #15]
            break;
 801c0ba:	e009      	b.n	801c0d0 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801c0bc:	2301      	movs	r3, #1
 801c0be:	73fb      	strb	r3, [r7, #15]
            break;
 801c0c0:	e006      	b.n	801c0d0 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801c0c2:	2301      	movs	r3, #1
 801c0c4:	73fb      	strb	r3, [r7, #15]
            break;
 801c0c6:	e003      	b.n	801c0d0 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801c0c8:	2302      	movs	r3, #2
 801c0ca:	73fb      	strb	r3, [r7, #15]
            break;
 801c0cc:	e000      	b.n	801c0d0 <SUBGRF_SetRfTxPower+0x50>
            break;
 801c0ce:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801c0d0:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801c0d4:	7bfb      	ldrb	r3, [r7, #15]
 801c0d6:	2202      	movs	r2, #2
 801c0d8:	4618      	mov	r0, r3
 801c0da:	f7ff fbcd 	bl	801b878 <SUBGRF_SetTxParams>

    return paSelect;
 801c0de:	7bfb      	ldrb	r3, [r7, #15]
}
 801c0e0:	4618      	mov	r0, r3
 801c0e2:	3710      	adds	r7, #16
 801c0e4:	46bd      	mov	sp, r7
 801c0e6:	bd80      	pop	{r7, pc}

0801c0e8 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801c0e8:	b480      	push	{r7}
 801c0ea:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801c0ec:	2301      	movs	r3, #1
}
 801c0ee:	4618      	mov	r0, r3
 801c0f0:	46bd      	mov	sp, r7
 801c0f2:	bc80      	pop	{r7}
 801c0f4:	4770      	bx	lr
	...

0801c0f8 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c0f8:	b580      	push	{r7, lr}
 801c0fa:	b082      	sub	sp, #8
 801c0fc:	af00      	add	r7, sp, #0
 801c0fe:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801c100:	4b03      	ldr	r3, [pc, #12]	; (801c110 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801c102:	681b      	ldr	r3, [r3, #0]
 801c104:	2001      	movs	r0, #1
 801c106:	4798      	blx	r3
}
 801c108:	bf00      	nop
 801c10a:	3708      	adds	r7, #8
 801c10c:	46bd      	mov	sp, r7
 801c10e:	bd80      	pop	{r7, pc}
 801c110:	20001c80 	.word	0x20001c80

0801c114 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c114:	b580      	push	{r7, lr}
 801c116:	b082      	sub	sp, #8
 801c118:	af00      	add	r7, sp, #0
 801c11a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801c11c:	4b03      	ldr	r3, [pc, #12]	; (801c12c <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801c11e:	681b      	ldr	r3, [r3, #0]
 801c120:	2002      	movs	r0, #2
 801c122:	4798      	blx	r3
}
 801c124:	bf00      	nop
 801c126:	3708      	adds	r7, #8
 801c128:	46bd      	mov	sp, r7
 801c12a:	bd80      	pop	{r7, pc}
 801c12c:	20001c80 	.word	0x20001c80

0801c130 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801c130:	b580      	push	{r7, lr}
 801c132:	b082      	sub	sp, #8
 801c134:	af00      	add	r7, sp, #0
 801c136:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801c138:	4b03      	ldr	r3, [pc, #12]	; (801c148 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801c13a:	681b      	ldr	r3, [r3, #0]
 801c13c:	2040      	movs	r0, #64	; 0x40
 801c13e:	4798      	blx	r3
}
 801c140:	bf00      	nop
 801c142:	3708      	adds	r7, #8
 801c144:	46bd      	mov	sp, r7
 801c146:	bd80      	pop	{r7, pc}
 801c148:	20001c80 	.word	0x20001c80

0801c14c <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801c14c:	b580      	push	{r7, lr}
 801c14e:	b082      	sub	sp, #8
 801c150:	af00      	add	r7, sp, #0
 801c152:	6078      	str	r0, [r7, #4]
 801c154:	460b      	mov	r3, r1
 801c156:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801c158:	78fb      	ldrb	r3, [r7, #3]
 801c15a:	2b00      	cmp	r3, #0
 801c15c:	d002      	beq.n	801c164 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801c15e:	2b01      	cmp	r3, #1
 801c160:	d005      	beq.n	801c16e <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801c162:	e00a      	b.n	801c17a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801c164:	4b07      	ldr	r3, [pc, #28]	; (801c184 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801c166:	681b      	ldr	r3, [r3, #0]
 801c168:	2080      	movs	r0, #128	; 0x80
 801c16a:	4798      	blx	r3
            break;
 801c16c:	e005      	b.n	801c17a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801c16e:	4b05      	ldr	r3, [pc, #20]	; (801c184 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801c170:	681b      	ldr	r3, [r3, #0]
 801c172:	f44f 7080 	mov.w	r0, #256	; 0x100
 801c176:	4798      	blx	r3
            break;
 801c178:	bf00      	nop
    }
}
 801c17a:	bf00      	nop
 801c17c:	3708      	adds	r7, #8
 801c17e:	46bd      	mov	sp, r7
 801c180:	bd80      	pop	{r7, pc}
 801c182:	bf00      	nop
 801c184:	20001c80 	.word	0x20001c80

0801c188 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c188:	b580      	push	{r7, lr}
 801c18a:	b082      	sub	sp, #8
 801c18c:	af00      	add	r7, sp, #0
 801c18e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801c190:	4b04      	ldr	r3, [pc, #16]	; (801c1a4 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801c192:	681b      	ldr	r3, [r3, #0]
 801c194:	f44f 7000 	mov.w	r0, #512	; 0x200
 801c198:	4798      	blx	r3
}
 801c19a:	bf00      	nop
 801c19c:	3708      	adds	r7, #8
 801c19e:	46bd      	mov	sp, r7
 801c1a0:	bd80      	pop	{r7, pc}
 801c1a2:	bf00      	nop
 801c1a4:	20001c80 	.word	0x20001c80

0801c1a8 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c1a8:	b580      	push	{r7, lr}
 801c1aa:	b082      	sub	sp, #8
 801c1ac:	af00      	add	r7, sp, #0
 801c1ae:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801c1b0:	4b03      	ldr	r3, [pc, #12]	; (801c1c0 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801c1b2:	681b      	ldr	r3, [r3, #0]
 801c1b4:	2020      	movs	r0, #32
 801c1b6:	4798      	blx	r3
}
 801c1b8:	bf00      	nop
 801c1ba:	3708      	adds	r7, #8
 801c1bc:	46bd      	mov	sp, r7
 801c1be:	bd80      	pop	{r7, pc}
 801c1c0:	20001c80 	.word	0x20001c80

0801c1c4 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c1c4:	b580      	push	{r7, lr}
 801c1c6:	b082      	sub	sp, #8
 801c1c8:	af00      	add	r7, sp, #0
 801c1ca:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801c1cc:	4b03      	ldr	r3, [pc, #12]	; (801c1dc <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801c1ce:	681b      	ldr	r3, [r3, #0]
 801c1d0:	2004      	movs	r0, #4
 801c1d2:	4798      	blx	r3
}
 801c1d4:	bf00      	nop
 801c1d6:	3708      	adds	r7, #8
 801c1d8:	46bd      	mov	sp, r7
 801c1da:	bd80      	pop	{r7, pc}
 801c1dc:	20001c80 	.word	0x20001c80

0801c1e0 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c1e0:	b580      	push	{r7, lr}
 801c1e2:	b082      	sub	sp, #8
 801c1e4:	af00      	add	r7, sp, #0
 801c1e6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801c1e8:	4b03      	ldr	r3, [pc, #12]	; (801c1f8 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801c1ea:	681b      	ldr	r3, [r3, #0]
 801c1ec:	2008      	movs	r0, #8
 801c1ee:	4798      	blx	r3
}
 801c1f0:	bf00      	nop
 801c1f2:	3708      	adds	r7, #8
 801c1f4:	46bd      	mov	sp, r7
 801c1f6:	bd80      	pop	{r7, pc}
 801c1f8:	20001c80 	.word	0x20001c80

0801c1fc <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c1fc:	b580      	push	{r7, lr}
 801c1fe:	b082      	sub	sp, #8
 801c200:	af00      	add	r7, sp, #0
 801c202:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801c204:	4b03      	ldr	r3, [pc, #12]	; (801c214 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801c206:	681b      	ldr	r3, [r3, #0]
 801c208:	2010      	movs	r0, #16
 801c20a:	4798      	blx	r3
}
 801c20c:	bf00      	nop
 801c20e:	3708      	adds	r7, #8
 801c210:	46bd      	mov	sp, r7
 801c212:	bd80      	pop	{r7, pc}
 801c214:	20001c80 	.word	0x20001c80

0801c218 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c218:	b580      	push	{r7, lr}
 801c21a:	b082      	sub	sp, #8
 801c21c:	af00      	add	r7, sp, #0
 801c21e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 801c220:	4b04      	ldr	r3, [pc, #16]	; (801c234 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 801c222:	681b      	ldr	r3, [r3, #0]
 801c224:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 801c228:	4798      	blx	r3
}
 801c22a:	bf00      	nop
 801c22c:	3708      	adds	r7, #8
 801c22e:	46bd      	mov	sp, r7
 801c230:	bd80      	pop	{r7, pc}
 801c232:	bf00      	nop
 801c234:	20001c80 	.word	0x20001c80

0801c238 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801c238:	b580      	push	{r7, lr}
 801c23a:	b084      	sub	sp, #16
 801c23c:	af00      	add	r7, sp, #0
 801c23e:	4603      	mov	r3, r0
 801c240:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801c242:	f7ee fe7c 	bl	800af3e <RBI_IsDCDC>
 801c246:	4603      	mov	r3, r0
 801c248:	2b01      	cmp	r3, #1
 801c24a:	d112      	bne.n	801c272 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801c24c:	f640 1023 	movw	r0, #2339	; 0x923
 801c250:	f7ff fe0e 	bl	801be70 <SUBGRF_ReadRegister>
 801c254:	4603      	mov	r3, r0
 801c256:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801c258:	7bfb      	ldrb	r3, [r7, #15]
 801c25a:	f023 0306 	bic.w	r3, r3, #6
 801c25e:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801c260:	7bfa      	ldrb	r2, [r7, #15]
 801c262:	79fb      	ldrb	r3, [r7, #7]
 801c264:	4313      	orrs	r3, r2
 801c266:	b2db      	uxtb	r3, r3
 801c268:	4619      	mov	r1, r3
 801c26a:	f640 1023 	movw	r0, #2339	; 0x923
 801c26e:	f7ff fdeb 	bl	801be48 <SUBGRF_WriteRegister>
  }
}
 801c272:	bf00      	nop
 801c274:	3710      	adds	r7, #16
 801c276:	46bd      	mov	sp, r7
 801c278:	bd80      	pop	{r7, pc}
	...

0801c27c <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801c27c:	b480      	push	{r7}
 801c27e:	b085      	sub	sp, #20
 801c280:	af00      	add	r7, sp, #0
 801c282:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801c284:	687b      	ldr	r3, [r7, #4]
 801c286:	2b00      	cmp	r3, #0
 801c288:	d101      	bne.n	801c28e <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801c28a:	231f      	movs	r3, #31
 801c28c:	e016      	b.n	801c2bc <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801c28e:	2300      	movs	r3, #0
 801c290:	73fb      	strb	r3, [r7, #15]
 801c292:	e00f      	b.n	801c2b4 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801c294:	7bfb      	ldrb	r3, [r7, #15]
 801c296:	4a0c      	ldr	r2, [pc, #48]	; (801c2c8 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801c298:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801c29c:	687a      	ldr	r2, [r7, #4]
 801c29e:	429a      	cmp	r2, r3
 801c2a0:	d205      	bcs.n	801c2ae <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801c2a2:	7bfb      	ldrb	r3, [r7, #15]
 801c2a4:	4a08      	ldr	r2, [pc, #32]	; (801c2c8 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801c2a6:	00db      	lsls	r3, r3, #3
 801c2a8:	4413      	add	r3, r2
 801c2aa:	791b      	ldrb	r3, [r3, #4]
 801c2ac:	e006      	b.n	801c2bc <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801c2ae:	7bfb      	ldrb	r3, [r7, #15]
 801c2b0:	3301      	adds	r3, #1
 801c2b2:	73fb      	strb	r3, [r7, #15]
 801c2b4:	7bfb      	ldrb	r3, [r7, #15]
 801c2b6:	2b15      	cmp	r3, #21
 801c2b8:	d9ec      	bls.n	801c294 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 801c2ba:	e7fe      	b.n	801c2ba <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801c2bc:	4618      	mov	r0, r3
 801c2be:	3714      	adds	r7, #20
 801c2c0:	46bd      	mov	sp, r7
 801c2c2:	bc80      	pop	{r7}
 801c2c4:	4770      	bx	lr
 801c2c6:	bf00      	nop
 801c2c8:	0801ec00 	.word	0x0801ec00

0801c2cc <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801c2cc:	b580      	push	{r7, lr}
 801c2ce:	b08a      	sub	sp, #40	; 0x28
 801c2d0:	af00      	add	r7, sp, #0
 801c2d2:	6078      	str	r0, [r7, #4]
 801c2d4:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801c2d6:	4b35      	ldr	r3, [pc, #212]	; (801c3ac <SUBGRF_GetCFO+0xe0>)
 801c2d8:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801c2da:	f640 0007 	movw	r0, #2055	; 0x807
 801c2de:	f7ff fdc7 	bl	801be70 <SUBGRF_ReadRegister>
 801c2e2:	4603      	mov	r3, r0
 801c2e4:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801c2e6:	7ffb      	ldrb	r3, [r7, #31]
 801c2e8:	08db      	lsrs	r3, r3, #3
 801c2ea:	b2db      	uxtb	r3, r3
 801c2ec:	f003 0303 	and.w	r3, r3, #3
 801c2f0:	3328      	adds	r3, #40	; 0x28
 801c2f2:	443b      	add	r3, r7
 801c2f4:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801c2f8:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801c2fa:	7ffb      	ldrb	r3, [r7, #31]
 801c2fc:	f003 0307 	and.w	r3, r3, #7
 801c300:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 801c302:	7fba      	ldrb	r2, [r7, #30]
 801c304:	7f7b      	ldrb	r3, [r7, #29]
 801c306:	3301      	adds	r3, #1
 801c308:	fa02 f303 	lsl.w	r3, r2, r3
 801c30c:	461a      	mov	r2, r3
 801c30e:	4b28      	ldr	r3, [pc, #160]	; (801c3b0 <SUBGRF_GetCFO+0xe4>)
 801c310:	fbb3 f3f2 	udiv	r3, r3, r2
 801c314:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801c316:	69ba      	ldr	r2, [r7, #24]
 801c318:	687b      	ldr	r3, [r7, #4]
 801c31a:	fbb2 f3f3 	udiv	r3, r2, r3
 801c31e:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801c320:	2301      	movs	r3, #1
 801c322:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801c326:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c32a:	697a      	ldr	r2, [r7, #20]
 801c32c:	fb02 f303 	mul.w	r3, r2, r3
 801c330:	2b07      	cmp	r3, #7
 801c332:	d802      	bhi.n	801c33a <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801c334:	2302      	movs	r3, #2
 801c336:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 801c33a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c33e:	697a      	ldr	r2, [r7, #20]
 801c340:	fb02 f303 	mul.w	r3, r2, r3
 801c344:	2b03      	cmp	r3, #3
 801c346:	d802      	bhi.n	801c34e <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801c348:	2304      	movs	r3, #4
 801c34a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801c34e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801c352:	69bb      	ldr	r3, [r7, #24]
 801c354:	fb02 f303 	mul.w	r3, r2, r3
 801c358:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801c35a:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 801c35e:	f7ff fd87 	bl	801be70 <SUBGRF_ReadRegister>
 801c362:	4603      	mov	r3, r0
 801c364:	021b      	lsls	r3, r3, #8
 801c366:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801c36a:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801c36c:	f240 60b1 	movw	r0, #1713	; 0x6b1
 801c370:	f7ff fd7e 	bl	801be70 <SUBGRF_ReadRegister>
 801c374:	4603      	mov	r3, r0
 801c376:	461a      	mov	r2, r3
 801c378:	6a3b      	ldr	r3, [r7, #32]
 801c37a:	4313      	orrs	r3, r2
 801c37c:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801c37e:	6a3b      	ldr	r3, [r7, #32]
 801c380:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801c384:	2b00      	cmp	r3, #0
 801c386:	d005      	beq.n	801c394 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801c388:	6a3b      	ldr	r3, [r7, #32]
 801c38a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801c38e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801c392:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801c394:	693b      	ldr	r3, [r7, #16]
 801c396:	095b      	lsrs	r3, r3, #5
 801c398:	6a3a      	ldr	r2, [r7, #32]
 801c39a:	fb02 f303 	mul.w	r3, r2, r3
 801c39e:	11da      	asrs	r2, r3, #7
 801c3a0:	683b      	ldr	r3, [r7, #0]
 801c3a2:	601a      	str	r2, [r3, #0]
}
 801c3a4:	bf00      	nop
 801c3a6:	3728      	adds	r7, #40	; 0x28
 801c3a8:	46bd      	mov	sp, r7
 801c3aa:	bd80      	pop	{r7, pc}
 801c3ac:	0c0a0804 	.word	0x0c0a0804
 801c3b0:	01e84800 	.word	0x01e84800

0801c3b4 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 801c3b4:	b480      	push	{r7}
 801c3b6:	b087      	sub	sp, #28
 801c3b8:	af00      	add	r7, sp, #0
 801c3ba:	4603      	mov	r3, r0
 801c3bc:	60b9      	str	r1, [r7, #8]
 801c3be:	607a      	str	r2, [r7, #4]
 801c3c0:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 801c3c2:	2300      	movs	r3, #0
 801c3c4:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 801c3c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c3ca:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801c3cc:	697b      	ldr	r3, [r7, #20]
}
 801c3ce:	4618      	mov	r0, r3
 801c3d0:	371c      	adds	r7, #28
 801c3d2:	46bd      	mov	sp, r7
 801c3d4:	bc80      	pop	{r7}
 801c3d6:	4770      	bx	lr

0801c3d8 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 801c3d8:	b480      	push	{r7}
 801c3da:	b087      	sub	sp, #28
 801c3dc:	af00      	add	r7, sp, #0
 801c3de:	4603      	mov	r3, r0
 801c3e0:	60b9      	str	r1, [r7, #8]
 801c3e2:	607a      	str	r2, [r7, #4]
 801c3e4:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 801c3e6:	2300      	movs	r3, #0
 801c3e8:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 801c3ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c3ee:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801c3f0:	697b      	ldr	r3, [r7, #20]
}
 801c3f2:	4618      	mov	r0, r3
 801c3f4:	371c      	adds	r7, #28
 801c3f6:	46bd      	mov	sp, r7
 801c3f8:	bc80      	pop	{r7}
 801c3fa:	4770      	bx	lr

0801c3fc <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 801c3fc:	b480      	push	{r7}
 801c3fe:	b085      	sub	sp, #20
 801c400:	af00      	add	r7, sp, #0
 801c402:	60f8      	str	r0, [r7, #12]
 801c404:	60b9      	str	r1, [r7, #8]
 801c406:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 801c408:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 801c40c:	4618      	mov	r0, r3
 801c40e:	3714      	adds	r7, #20
 801c410:	46bd      	mov	sp, r7
 801c412:	bc80      	pop	{r7}
 801c414:	4770      	bx	lr

0801c416 <RFW_DeInit>:

void RFW_DeInit( void )
{
 801c416:	b480      	push	{r7}
 801c418:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 801c41a:	bf00      	nop
 801c41c:	46bd      	mov	sp, r7
 801c41e:	bc80      	pop	{r7}
 801c420:	4770      	bx	lr

0801c422 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 801c422:	b480      	push	{r7}
 801c424:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 801c426:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801c428:	4618      	mov	r0, r3
 801c42a:	46bd      	mov	sp, r7
 801c42c:	bc80      	pop	{r7}
 801c42e:	4770      	bx	lr

0801c430 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 801c430:	b480      	push	{r7}
 801c432:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 801c434:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801c436:	4618      	mov	r0, r3
 801c438:	46bd      	mov	sp, r7
 801c43a:	bc80      	pop	{r7}
 801c43c:	4770      	bx	lr

0801c43e <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 801c43e:	b480      	push	{r7}
 801c440:	b083      	sub	sp, #12
 801c442:	af00      	add	r7, sp, #0
 801c444:	4603      	mov	r3, r0
 801c446:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 801c448:	bf00      	nop
 801c44a:	370c      	adds	r7, #12
 801c44c:	46bd      	mov	sp, r7
 801c44e:	bc80      	pop	{r7}
 801c450:	4770      	bx	lr

0801c452 <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 801c452:	b480      	push	{r7}
 801c454:	b087      	sub	sp, #28
 801c456:	af00      	add	r7, sp, #0
 801c458:	60f8      	str	r0, [r7, #12]
 801c45a:	460b      	mov	r3, r1
 801c45c:	607a      	str	r2, [r7, #4]
 801c45e:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 801c460:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c464:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 801c466:	697b      	ldr	r3, [r7, #20]
}
 801c468:	4618      	mov	r0, r3
 801c46a:	371c      	adds	r7, #28
 801c46c:	46bd      	mov	sp, r7
 801c46e:	bc80      	pop	{r7}
 801c470:	4770      	bx	lr

0801c472 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801c472:	b480      	push	{r7}
 801c474:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 801c476:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 801c47a:	4618      	mov	r0, r3
 801c47c:	46bd      	mov	sp, r7
 801c47e:	bc80      	pop	{r7}
 801c480:	4770      	bx	lr

0801c482 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 801c482:	b480      	push	{r7}
 801c484:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 801c486:	bf00      	nop
 801c488:	46bd      	mov	sp, r7
 801c48a:	bc80      	pop	{r7}
 801c48c:	4770      	bx	lr

0801c48e <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801c48e:	b480      	push	{r7}
 801c490:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 801c492:	bf00      	nop
 801c494:	46bd      	mov	sp, r7
 801c496:	bc80      	pop	{r7}
 801c498:	4770      	bx	lr

0801c49a <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 801c49a:	b480      	push	{r7}
 801c49c:	b083      	sub	sp, #12
 801c49e:	af00      	add	r7, sp, #0
 801c4a0:	4603      	mov	r3, r0
 801c4a2:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 801c4a4:	bf00      	nop
 801c4a6:	370c      	adds	r7, #12
 801c4a8:	46bd      	mov	sp, r7
 801c4aa:	bc80      	pop	{r7}
 801c4ac:	4770      	bx	lr
	...

0801c4b0 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801c4b0:	b480      	push	{r7}
 801c4b2:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801c4b4:	4b04      	ldr	r3, [pc, #16]	; (801c4c8 <UTIL_LPM_Init+0x18>)
 801c4b6:	2200      	movs	r2, #0
 801c4b8:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801c4ba:	4b04      	ldr	r3, [pc, #16]	; (801c4cc <UTIL_LPM_Init+0x1c>)
 801c4bc:	2200      	movs	r2, #0
 801c4be:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801c4c0:	bf00      	nop
 801c4c2:	46bd      	mov	sp, r7
 801c4c4:	bc80      	pop	{r7}
 801c4c6:	4770      	bx	lr
 801c4c8:	20001c84 	.word	0x20001c84
 801c4cc:	20001c88 	.word	0x20001c88

0801c4d0 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801c4d0:	b480      	push	{r7}
 801c4d2:	b087      	sub	sp, #28
 801c4d4:	af00      	add	r7, sp, #0
 801c4d6:	6078      	str	r0, [r7, #4]
 801c4d8:	460b      	mov	r3, r1
 801c4da:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c4dc:	f3ef 8310 	mrs	r3, PRIMASK
 801c4e0:	613b      	str	r3, [r7, #16]
  return(result);
 801c4e2:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801c4e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c4e6:	b672      	cpsid	i
}
 801c4e8:	bf00      	nop
  
  switch( state )
 801c4ea:	78fb      	ldrb	r3, [r7, #3]
 801c4ec:	2b00      	cmp	r3, #0
 801c4ee:	d008      	beq.n	801c502 <UTIL_LPM_SetStopMode+0x32>
 801c4f0:	2b01      	cmp	r3, #1
 801c4f2:	d10e      	bne.n	801c512 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801c4f4:	4b0d      	ldr	r3, [pc, #52]	; (801c52c <UTIL_LPM_SetStopMode+0x5c>)
 801c4f6:	681a      	ldr	r2, [r3, #0]
 801c4f8:	687b      	ldr	r3, [r7, #4]
 801c4fa:	4313      	orrs	r3, r2
 801c4fc:	4a0b      	ldr	r2, [pc, #44]	; (801c52c <UTIL_LPM_SetStopMode+0x5c>)
 801c4fe:	6013      	str	r3, [r2, #0]
      break;
 801c500:	e008      	b.n	801c514 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801c502:	687b      	ldr	r3, [r7, #4]
 801c504:	43da      	mvns	r2, r3
 801c506:	4b09      	ldr	r3, [pc, #36]	; (801c52c <UTIL_LPM_SetStopMode+0x5c>)
 801c508:	681b      	ldr	r3, [r3, #0]
 801c50a:	4013      	ands	r3, r2
 801c50c:	4a07      	ldr	r2, [pc, #28]	; (801c52c <UTIL_LPM_SetStopMode+0x5c>)
 801c50e:	6013      	str	r3, [r2, #0]
      break;
 801c510:	e000      	b.n	801c514 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801c512:	bf00      	nop
 801c514:	697b      	ldr	r3, [r7, #20]
 801c516:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c518:	68fb      	ldr	r3, [r7, #12]
 801c51a:	f383 8810 	msr	PRIMASK, r3
}
 801c51e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801c520:	bf00      	nop
 801c522:	371c      	adds	r7, #28
 801c524:	46bd      	mov	sp, r7
 801c526:	bc80      	pop	{r7}
 801c528:	4770      	bx	lr
 801c52a:	bf00      	nop
 801c52c:	20001c84 	.word	0x20001c84

0801c530 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801c530:	b480      	push	{r7}
 801c532:	b087      	sub	sp, #28
 801c534:	af00      	add	r7, sp, #0
 801c536:	6078      	str	r0, [r7, #4]
 801c538:	460b      	mov	r3, r1
 801c53a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c53c:	f3ef 8310 	mrs	r3, PRIMASK
 801c540:	613b      	str	r3, [r7, #16]
  return(result);
 801c542:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801c544:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c546:	b672      	cpsid	i
}
 801c548:	bf00      	nop
  
  switch(state)
 801c54a:	78fb      	ldrb	r3, [r7, #3]
 801c54c:	2b00      	cmp	r3, #0
 801c54e:	d008      	beq.n	801c562 <UTIL_LPM_SetOffMode+0x32>
 801c550:	2b01      	cmp	r3, #1
 801c552:	d10e      	bne.n	801c572 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801c554:	4b0d      	ldr	r3, [pc, #52]	; (801c58c <UTIL_LPM_SetOffMode+0x5c>)
 801c556:	681a      	ldr	r2, [r3, #0]
 801c558:	687b      	ldr	r3, [r7, #4]
 801c55a:	4313      	orrs	r3, r2
 801c55c:	4a0b      	ldr	r2, [pc, #44]	; (801c58c <UTIL_LPM_SetOffMode+0x5c>)
 801c55e:	6013      	str	r3, [r2, #0]
      break;
 801c560:	e008      	b.n	801c574 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801c562:	687b      	ldr	r3, [r7, #4]
 801c564:	43da      	mvns	r2, r3
 801c566:	4b09      	ldr	r3, [pc, #36]	; (801c58c <UTIL_LPM_SetOffMode+0x5c>)
 801c568:	681b      	ldr	r3, [r3, #0]
 801c56a:	4013      	ands	r3, r2
 801c56c:	4a07      	ldr	r2, [pc, #28]	; (801c58c <UTIL_LPM_SetOffMode+0x5c>)
 801c56e:	6013      	str	r3, [r2, #0]
      break;
 801c570:	e000      	b.n	801c574 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801c572:	bf00      	nop
 801c574:	697b      	ldr	r3, [r7, #20]
 801c576:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c578:	68fb      	ldr	r3, [r7, #12]
 801c57a:	f383 8810 	msr	PRIMASK, r3
}
 801c57e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801c580:	bf00      	nop
 801c582:	371c      	adds	r7, #28
 801c584:	46bd      	mov	sp, r7
 801c586:	bc80      	pop	{r7}
 801c588:	4770      	bx	lr
 801c58a:	bf00      	nop
 801c58c:	20001c88 	.word	0x20001c88

0801c590 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801c590:	b580      	push	{r7, lr}
 801c592:	b084      	sub	sp, #16
 801c594:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c596:	f3ef 8310 	mrs	r3, PRIMASK
 801c59a:	60bb      	str	r3, [r7, #8]
  return(result);
 801c59c:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801c59e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801c5a0:	b672      	cpsid	i
}
 801c5a2:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801c5a4:	4b12      	ldr	r3, [pc, #72]	; (801c5f0 <UTIL_LPM_EnterLowPower+0x60>)
 801c5a6:	681b      	ldr	r3, [r3, #0]
 801c5a8:	2b00      	cmp	r3, #0
 801c5aa:	d006      	beq.n	801c5ba <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801c5ac:	4b11      	ldr	r3, [pc, #68]	; (801c5f4 <UTIL_LPM_EnterLowPower+0x64>)
 801c5ae:	681b      	ldr	r3, [r3, #0]
 801c5b0:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801c5b2:	4b10      	ldr	r3, [pc, #64]	; (801c5f4 <UTIL_LPM_EnterLowPower+0x64>)
 801c5b4:	685b      	ldr	r3, [r3, #4]
 801c5b6:	4798      	blx	r3
 801c5b8:	e010      	b.n	801c5dc <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801c5ba:	4b0f      	ldr	r3, [pc, #60]	; (801c5f8 <UTIL_LPM_EnterLowPower+0x68>)
 801c5bc:	681b      	ldr	r3, [r3, #0]
 801c5be:	2b00      	cmp	r3, #0
 801c5c0:	d006      	beq.n	801c5d0 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801c5c2:	4b0c      	ldr	r3, [pc, #48]	; (801c5f4 <UTIL_LPM_EnterLowPower+0x64>)
 801c5c4:	689b      	ldr	r3, [r3, #8]
 801c5c6:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801c5c8:	4b0a      	ldr	r3, [pc, #40]	; (801c5f4 <UTIL_LPM_EnterLowPower+0x64>)
 801c5ca:	68db      	ldr	r3, [r3, #12]
 801c5cc:	4798      	blx	r3
 801c5ce:	e005      	b.n	801c5dc <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801c5d0:	4b08      	ldr	r3, [pc, #32]	; (801c5f4 <UTIL_LPM_EnterLowPower+0x64>)
 801c5d2:	691b      	ldr	r3, [r3, #16]
 801c5d4:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801c5d6:	4b07      	ldr	r3, [pc, #28]	; (801c5f4 <UTIL_LPM_EnterLowPower+0x64>)
 801c5d8:	695b      	ldr	r3, [r3, #20]
 801c5da:	4798      	blx	r3
 801c5dc:	68fb      	ldr	r3, [r7, #12]
 801c5de:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c5e0:	687b      	ldr	r3, [r7, #4]
 801c5e2:	f383 8810 	msr	PRIMASK, r3
}
 801c5e6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801c5e8:	bf00      	nop
 801c5ea:	3710      	adds	r7, #16
 801c5ec:	46bd      	mov	sp, r7
 801c5ee:	bd80      	pop	{r7, pc}
 801c5f0:	20001c84 	.word	0x20001c84
 801c5f4:	0801e5f0 	.word	0x0801e5f0
 801c5f8:	20001c88 	.word	0x20001c88

0801c5fc <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801c5fc:	b480      	push	{r7}
 801c5fe:	b087      	sub	sp, #28
 801c600:	af00      	add	r7, sp, #0
 801c602:	60f8      	str	r0, [r7, #12]
 801c604:	60b9      	str	r1, [r7, #8]
 801c606:	4613      	mov	r3, r2
 801c608:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801c60a:	68fb      	ldr	r3, [r7, #12]
 801c60c:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801c60e:	68bb      	ldr	r3, [r7, #8]
 801c610:	613b      	str	r3, [r7, #16]

  while( size-- )
 801c612:	e007      	b.n	801c624 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801c614:	693a      	ldr	r2, [r7, #16]
 801c616:	1c53      	adds	r3, r2, #1
 801c618:	613b      	str	r3, [r7, #16]
 801c61a:	697b      	ldr	r3, [r7, #20]
 801c61c:	1c59      	adds	r1, r3, #1
 801c61e:	6179      	str	r1, [r7, #20]
 801c620:	7812      	ldrb	r2, [r2, #0]
 801c622:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801c624:	88fb      	ldrh	r3, [r7, #6]
 801c626:	1e5a      	subs	r2, r3, #1
 801c628:	80fa      	strh	r2, [r7, #6]
 801c62a:	2b00      	cmp	r3, #0
 801c62c:	d1f2      	bne.n	801c614 <UTIL_MEM_cpy_8+0x18>
    }
}
 801c62e:	bf00      	nop
 801c630:	bf00      	nop
 801c632:	371c      	adds	r7, #28
 801c634:	46bd      	mov	sp, r7
 801c636:	bc80      	pop	{r7}
 801c638:	4770      	bx	lr

0801c63a <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801c63a:	b480      	push	{r7}
 801c63c:	b085      	sub	sp, #20
 801c63e:	af00      	add	r7, sp, #0
 801c640:	6078      	str	r0, [r7, #4]
 801c642:	460b      	mov	r3, r1
 801c644:	70fb      	strb	r3, [r7, #3]
 801c646:	4613      	mov	r3, r2
 801c648:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801c64a:	687b      	ldr	r3, [r7, #4]
 801c64c:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801c64e:	e004      	b.n	801c65a <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801c650:	68fb      	ldr	r3, [r7, #12]
 801c652:	1c5a      	adds	r2, r3, #1
 801c654:	60fa      	str	r2, [r7, #12]
 801c656:	78fa      	ldrb	r2, [r7, #3]
 801c658:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801c65a:	883b      	ldrh	r3, [r7, #0]
 801c65c:	1e5a      	subs	r2, r3, #1
 801c65e:	803a      	strh	r2, [r7, #0]
 801c660:	2b00      	cmp	r3, #0
 801c662:	d1f5      	bne.n	801c650 <UTIL_MEM_set_8+0x16>
  }
}
 801c664:	bf00      	nop
 801c666:	bf00      	nop
 801c668:	3714      	adds	r7, #20
 801c66a:	46bd      	mov	sp, r7
 801c66c:	bc80      	pop	{r7}
 801c66e:	4770      	bx	lr

0801c670 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801c670:	b082      	sub	sp, #8
 801c672:	b480      	push	{r7}
 801c674:	b087      	sub	sp, #28
 801c676:	af00      	add	r7, sp, #0
 801c678:	60f8      	str	r0, [r7, #12]
 801c67a:	1d38      	adds	r0, r7, #4
 801c67c:	e880 0006 	stmia.w	r0, {r1, r2}
 801c680:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801c682:	2300      	movs	r3, #0
 801c684:	613b      	str	r3, [r7, #16]
 801c686:	2300      	movs	r3, #0
 801c688:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801c68a:	687a      	ldr	r2, [r7, #4]
 801c68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c68e:	4413      	add	r3, r2
 801c690:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801c692:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801c696:	b29a      	uxth	r2, r3
 801c698:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801c69c:	b29b      	uxth	r3, r3
 801c69e:	4413      	add	r3, r2
 801c6a0:	b29b      	uxth	r3, r3
 801c6a2:	b21b      	sxth	r3, r3
 801c6a4:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801c6a6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801c6aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801c6ae:	db0a      	blt.n	801c6c6 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801c6b0:	693b      	ldr	r3, [r7, #16]
 801c6b2:	3301      	adds	r3, #1
 801c6b4:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801c6b6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801c6ba:	b29b      	uxth	r3, r3
 801c6bc:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 801c6c0:	b29b      	uxth	r3, r3
 801c6c2:	b21b      	sxth	r3, r3
 801c6c4:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801c6c6:	68fb      	ldr	r3, [r7, #12]
 801c6c8:	461a      	mov	r2, r3
 801c6ca:	f107 0310 	add.w	r3, r7, #16
 801c6ce:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c6d2:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801c6d6:	68f8      	ldr	r0, [r7, #12]
 801c6d8:	371c      	adds	r7, #28
 801c6da:	46bd      	mov	sp, r7
 801c6dc:	bc80      	pop	{r7}
 801c6de:	b002      	add	sp, #8
 801c6e0:	4770      	bx	lr

0801c6e2 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801c6e2:	b082      	sub	sp, #8
 801c6e4:	b480      	push	{r7}
 801c6e6:	b087      	sub	sp, #28
 801c6e8:	af00      	add	r7, sp, #0
 801c6ea:	60f8      	str	r0, [r7, #12]
 801c6ec:	1d38      	adds	r0, r7, #4
 801c6ee:	e880 0006 	stmia.w	r0, {r1, r2}
 801c6f2:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801c6f4:	2300      	movs	r3, #0
 801c6f6:	613b      	str	r3, [r7, #16]
 801c6f8:	2300      	movs	r3, #0
 801c6fa:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801c6fc:	687a      	ldr	r2, [r7, #4]
 801c6fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c700:	1ad3      	subs	r3, r2, r3
 801c702:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801c704:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801c708:	b29a      	uxth	r2, r3
 801c70a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801c70e:	b29b      	uxth	r3, r3
 801c710:	1ad3      	subs	r3, r2, r3
 801c712:	b29b      	uxth	r3, r3
 801c714:	b21b      	sxth	r3, r3
 801c716:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801c718:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801c71c:	2b00      	cmp	r3, #0
 801c71e:	da0a      	bge.n	801c736 <SysTimeSub+0x54>
  {
    c.Seconds--;
 801c720:	693b      	ldr	r3, [r7, #16]
 801c722:	3b01      	subs	r3, #1
 801c724:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801c726:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801c72a:	b29b      	uxth	r3, r3
 801c72c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801c730:	b29b      	uxth	r3, r3
 801c732:	b21b      	sxth	r3, r3
 801c734:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801c736:	68fb      	ldr	r3, [r7, #12]
 801c738:	461a      	mov	r2, r3
 801c73a:	f107 0310 	add.w	r3, r7, #16
 801c73e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c742:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801c746:	68f8      	ldr	r0, [r7, #12]
 801c748:	371c      	adds	r7, #28
 801c74a:	46bd      	mov	sp, r7
 801c74c:	bc80      	pop	{r7}
 801c74e:	b002      	add	sp, #8
 801c750:	4770      	bx	lr
	...

0801c754 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801c754:	b580      	push	{r7, lr}
 801c756:	b088      	sub	sp, #32
 801c758:	af02      	add	r7, sp, #8
 801c75a:	463b      	mov	r3, r7
 801c75c:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801c760:	2300      	movs	r3, #0
 801c762:	60bb      	str	r3, [r7, #8]
 801c764:	2300      	movs	r3, #0
 801c766:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801c768:	4b10      	ldr	r3, [pc, #64]	; (801c7ac <SysTimeSet+0x58>)
 801c76a:	691b      	ldr	r3, [r3, #16]
 801c76c:	f107 0208 	add.w	r2, r7, #8
 801c770:	3204      	adds	r2, #4
 801c772:	4610      	mov	r0, r2
 801c774:	4798      	blx	r3
 801c776:	4603      	mov	r3, r0
 801c778:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801c77a:	f107 0010 	add.w	r0, r7, #16
 801c77e:	68fb      	ldr	r3, [r7, #12]
 801c780:	9300      	str	r3, [sp, #0]
 801c782:	68bb      	ldr	r3, [r7, #8]
 801c784:	463a      	mov	r2, r7
 801c786:	ca06      	ldmia	r2, {r1, r2}
 801c788:	f7ff ffab 	bl	801c6e2 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801c78c:	4b07      	ldr	r3, [pc, #28]	; (801c7ac <SysTimeSet+0x58>)
 801c78e:	681b      	ldr	r3, [r3, #0]
 801c790:	693a      	ldr	r2, [r7, #16]
 801c792:	4610      	mov	r0, r2
 801c794:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801c796:	4b05      	ldr	r3, [pc, #20]	; (801c7ac <SysTimeSet+0x58>)
 801c798:	689b      	ldr	r3, [r3, #8]
 801c79a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801c79e:	4610      	mov	r0, r2
 801c7a0:	4798      	blx	r3
}
 801c7a2:	bf00      	nop
 801c7a4:	3718      	adds	r7, #24
 801c7a6:	46bd      	mov	sp, r7
 801c7a8:	bd80      	pop	{r7, pc}
 801c7aa:	bf00      	nop
 801c7ac:	0801e6d4 	.word	0x0801e6d4

0801c7b0 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801c7b0:	b580      	push	{r7, lr}
 801c7b2:	b08a      	sub	sp, #40	; 0x28
 801c7b4:	af02      	add	r7, sp, #8
 801c7b6:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801c7b8:	2300      	movs	r3, #0
 801c7ba:	61bb      	str	r3, [r7, #24]
 801c7bc:	2300      	movs	r3, #0
 801c7be:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801c7c0:	2300      	movs	r3, #0
 801c7c2:	613b      	str	r3, [r7, #16]
 801c7c4:	2300      	movs	r3, #0
 801c7c6:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801c7c8:	4b14      	ldr	r3, [pc, #80]	; (801c81c <SysTimeGet+0x6c>)
 801c7ca:	691b      	ldr	r3, [r3, #16]
 801c7cc:	f107 0218 	add.w	r2, r7, #24
 801c7d0:	3204      	adds	r2, #4
 801c7d2:	4610      	mov	r0, r2
 801c7d4:	4798      	blx	r3
 801c7d6:	4603      	mov	r3, r0
 801c7d8:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801c7da:	4b10      	ldr	r3, [pc, #64]	; (801c81c <SysTimeGet+0x6c>)
 801c7dc:	68db      	ldr	r3, [r3, #12]
 801c7de:	4798      	blx	r3
 801c7e0:	4603      	mov	r3, r0
 801c7e2:	b21b      	sxth	r3, r3
 801c7e4:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801c7e6:	4b0d      	ldr	r3, [pc, #52]	; (801c81c <SysTimeGet+0x6c>)
 801c7e8:	685b      	ldr	r3, [r3, #4]
 801c7ea:	4798      	blx	r3
 801c7ec:	4603      	mov	r3, r0
 801c7ee:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801c7f0:	f107 0010 	add.w	r0, r7, #16
 801c7f4:	69fb      	ldr	r3, [r7, #28]
 801c7f6:	9300      	str	r3, [sp, #0]
 801c7f8:	69bb      	ldr	r3, [r7, #24]
 801c7fa:	f107 0208 	add.w	r2, r7, #8
 801c7fe:	ca06      	ldmia	r2, {r1, r2}
 801c800:	f7ff ff36 	bl	801c670 <SysTimeAdd>

  return sysTime;
 801c804:	687b      	ldr	r3, [r7, #4]
 801c806:	461a      	mov	r2, r3
 801c808:	f107 0310 	add.w	r3, r7, #16
 801c80c:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c810:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801c814:	6878      	ldr	r0, [r7, #4]
 801c816:	3720      	adds	r7, #32
 801c818:	46bd      	mov	sp, r7
 801c81a:	bd80      	pop	{r7, pc}
 801c81c:	0801e6d4 	.word	0x0801e6d4

0801c820 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801c820:	b580      	push	{r7, lr}
 801c822:	b084      	sub	sp, #16
 801c824:	af00      	add	r7, sp, #0
 801c826:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801c828:	2300      	movs	r3, #0
 801c82a:	60bb      	str	r3, [r7, #8]
 801c82c:	2300      	movs	r3, #0
 801c82e:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801c830:	4b0a      	ldr	r3, [pc, #40]	; (801c85c <SysTimeGetMcuTime+0x3c>)
 801c832:	691b      	ldr	r3, [r3, #16]
 801c834:	f107 0208 	add.w	r2, r7, #8
 801c838:	3204      	adds	r2, #4
 801c83a:	4610      	mov	r0, r2
 801c83c:	4798      	blx	r3
 801c83e:	4603      	mov	r3, r0
 801c840:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801c842:	687b      	ldr	r3, [r7, #4]
 801c844:	461a      	mov	r2, r3
 801c846:	f107 0308 	add.w	r3, r7, #8
 801c84a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c84e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801c852:	6878      	ldr	r0, [r7, #4]
 801c854:	3710      	adds	r7, #16
 801c856:	46bd      	mov	sp, r7
 801c858:	bd80      	pop	{r7, pc}
 801c85a:	bf00      	nop
 801c85c:	0801e6d4 	.word	0x0801e6d4

0801c860 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801c860:	b580      	push	{r7, lr}
 801c862:	b088      	sub	sp, #32
 801c864:	af02      	add	r7, sp, #8
 801c866:	463b      	mov	r3, r7
 801c868:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801c86c:	4b0f      	ldr	r3, [pc, #60]	; (801c8ac <SysTimeToMs+0x4c>)
 801c86e:	68db      	ldr	r3, [r3, #12]
 801c870:	4798      	blx	r3
 801c872:	4603      	mov	r3, r0
 801c874:	b21b      	sxth	r3, r3
 801c876:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801c878:	4b0c      	ldr	r3, [pc, #48]	; (801c8ac <SysTimeToMs+0x4c>)
 801c87a:	685b      	ldr	r3, [r3, #4]
 801c87c:	4798      	blx	r3
 801c87e:	4603      	mov	r3, r0
 801c880:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801c882:	f107 0008 	add.w	r0, r7, #8
 801c886:	697b      	ldr	r3, [r7, #20]
 801c888:	9300      	str	r3, [sp, #0]
 801c88a:	693b      	ldr	r3, [r7, #16]
 801c88c:	463a      	mov	r2, r7
 801c88e:	ca06      	ldmia	r2, {r1, r2}
 801c890:	f7ff ff27 	bl	801c6e2 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801c894:	68bb      	ldr	r3, [r7, #8]
 801c896:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801c89a:	fb02 f303 	mul.w	r3, r2, r3
 801c89e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801c8a2:	4413      	add	r3, r2
}
 801c8a4:	4618      	mov	r0, r3
 801c8a6:	3718      	adds	r7, #24
 801c8a8:	46bd      	mov	sp, r7
 801c8aa:	bd80      	pop	{r7, pc}
 801c8ac:	0801e6d4 	.word	0x0801e6d4

0801c8b0 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801c8b0:	b580      	push	{r7, lr}
 801c8b2:	b08a      	sub	sp, #40	; 0x28
 801c8b4:	af02      	add	r7, sp, #8
 801c8b6:	6078      	str	r0, [r7, #4]
 801c8b8:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801c8ba:	683b      	ldr	r3, [r7, #0]
 801c8bc:	4a19      	ldr	r2, [pc, #100]	; (801c924 <SysTimeFromMs+0x74>)
 801c8be:	fba2 2303 	umull	r2, r3, r2, r3
 801c8c2:	099b      	lsrs	r3, r3, #6
 801c8c4:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801c8c6:	69fb      	ldr	r3, [r7, #28]
 801c8c8:	617b      	str	r3, [r7, #20]
 801c8ca:	683b      	ldr	r3, [r7, #0]
 801c8cc:	b29a      	uxth	r2, r3
 801c8ce:	69fb      	ldr	r3, [r7, #28]
 801c8d0:	b29b      	uxth	r3, r3
 801c8d2:	4619      	mov	r1, r3
 801c8d4:	0149      	lsls	r1, r1, #5
 801c8d6:	1ac9      	subs	r1, r1, r3
 801c8d8:	0089      	lsls	r1, r1, #2
 801c8da:	440b      	add	r3, r1
 801c8dc:	00db      	lsls	r3, r3, #3
 801c8de:	b29b      	uxth	r3, r3
 801c8e0:	1ad3      	subs	r3, r2, r3
 801c8e2:	b29b      	uxth	r3, r3
 801c8e4:	b21b      	sxth	r3, r3
 801c8e6:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801c8e8:	f107 030c 	add.w	r3, r7, #12
 801c8ec:	2200      	movs	r2, #0
 801c8ee:	601a      	str	r2, [r3, #0]
 801c8f0:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801c8f2:	4b0d      	ldr	r3, [pc, #52]	; (801c928 <SysTimeFromMs+0x78>)
 801c8f4:	68db      	ldr	r3, [r3, #12]
 801c8f6:	4798      	blx	r3
 801c8f8:	4603      	mov	r3, r0
 801c8fa:	b21b      	sxth	r3, r3
 801c8fc:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801c8fe:	4b0a      	ldr	r3, [pc, #40]	; (801c928 <SysTimeFromMs+0x78>)
 801c900:	685b      	ldr	r3, [r3, #4]
 801c902:	4798      	blx	r3
 801c904:	4603      	mov	r3, r0
 801c906:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801c908:	6878      	ldr	r0, [r7, #4]
 801c90a:	693b      	ldr	r3, [r7, #16]
 801c90c:	9300      	str	r3, [sp, #0]
 801c90e:	68fb      	ldr	r3, [r7, #12]
 801c910:	f107 0214 	add.w	r2, r7, #20
 801c914:	ca06      	ldmia	r2, {r1, r2}
 801c916:	f7ff feab 	bl	801c670 <SysTimeAdd>
}
 801c91a:	6878      	ldr	r0, [r7, #4]
 801c91c:	3720      	adds	r7, #32
 801c91e:	46bd      	mov	sp, r7
 801c920:	bd80      	pop	{r7, pc}
 801c922:	bf00      	nop
 801c924:	10624dd3 	.word	0x10624dd3
 801c928:	0801e6d4 	.word	0x0801e6d4

0801c92c <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801c92c:	b480      	push	{r7}
 801c92e:	b085      	sub	sp, #20
 801c930:	af00      	add	r7, sp, #0
 801c932:	6078      	str	r0, [r7, #4]
  int i = 0;
 801c934:	2300      	movs	r3, #0
 801c936:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801c938:	e00e      	b.n	801c958 <ee_skip_atoi+0x2c>
 801c93a:	68fa      	ldr	r2, [r7, #12]
 801c93c:	4613      	mov	r3, r2
 801c93e:	009b      	lsls	r3, r3, #2
 801c940:	4413      	add	r3, r2
 801c942:	005b      	lsls	r3, r3, #1
 801c944:	4618      	mov	r0, r3
 801c946:	687b      	ldr	r3, [r7, #4]
 801c948:	681b      	ldr	r3, [r3, #0]
 801c94a:	1c59      	adds	r1, r3, #1
 801c94c:	687a      	ldr	r2, [r7, #4]
 801c94e:	6011      	str	r1, [r2, #0]
 801c950:	781b      	ldrb	r3, [r3, #0]
 801c952:	4403      	add	r3, r0
 801c954:	3b30      	subs	r3, #48	; 0x30
 801c956:	60fb      	str	r3, [r7, #12]
 801c958:	687b      	ldr	r3, [r7, #4]
 801c95a:	681b      	ldr	r3, [r3, #0]
 801c95c:	781b      	ldrb	r3, [r3, #0]
 801c95e:	2b2f      	cmp	r3, #47	; 0x2f
 801c960:	d904      	bls.n	801c96c <ee_skip_atoi+0x40>
 801c962:	687b      	ldr	r3, [r7, #4]
 801c964:	681b      	ldr	r3, [r3, #0]
 801c966:	781b      	ldrb	r3, [r3, #0]
 801c968:	2b39      	cmp	r3, #57	; 0x39
 801c96a:	d9e6      	bls.n	801c93a <ee_skip_atoi+0xe>
  return i;
 801c96c:	68fb      	ldr	r3, [r7, #12]
}
 801c96e:	4618      	mov	r0, r3
 801c970:	3714      	adds	r7, #20
 801c972:	46bd      	mov	sp, r7
 801c974:	bc80      	pop	{r7}
 801c976:	4770      	bx	lr

0801c978 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801c978:	b480      	push	{r7}
 801c97a:	b099      	sub	sp, #100	; 0x64
 801c97c:	af00      	add	r7, sp, #0
 801c97e:	60f8      	str	r0, [r7, #12]
 801c980:	60b9      	str	r1, [r7, #8]
 801c982:	607a      	str	r2, [r7, #4]
 801c984:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801c986:	4b71      	ldr	r3, [pc, #452]	; (801cb4c <ee_number+0x1d4>)
 801c988:	681b      	ldr	r3, [r3, #0]
 801c98a:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801c98c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c98e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c992:	2b00      	cmp	r3, #0
 801c994:	d002      	beq.n	801c99c <ee_number+0x24>
 801c996:	4b6e      	ldr	r3, [pc, #440]	; (801cb50 <ee_number+0x1d8>)
 801c998:	681b      	ldr	r3, [r3, #0]
 801c99a:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801c99c:	683b      	ldr	r3, [r7, #0]
 801c99e:	2b01      	cmp	r3, #1
 801c9a0:	dd02      	ble.n	801c9a8 <ee_number+0x30>
 801c9a2:	683b      	ldr	r3, [r7, #0]
 801c9a4:	2b24      	cmp	r3, #36	; 0x24
 801c9a6:	dd01      	ble.n	801c9ac <ee_number+0x34>
 801c9a8:	2300      	movs	r3, #0
 801c9aa:	e0ca      	b.n	801cb42 <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801c9ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c9ae:	f003 0301 	and.w	r3, r3, #1
 801c9b2:	2b00      	cmp	r3, #0
 801c9b4:	d001      	beq.n	801c9ba <ee_number+0x42>
 801c9b6:	2330      	movs	r3, #48	; 0x30
 801c9b8:	e000      	b.n	801c9bc <ee_number+0x44>
 801c9ba:	2320      	movs	r3, #32
 801c9bc:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 801c9c0:	2300      	movs	r3, #0
 801c9c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 801c9c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c9c8:	f003 0302 	and.w	r3, r3, #2
 801c9cc:	2b00      	cmp	r3, #0
 801c9ce:	d00b      	beq.n	801c9e8 <ee_number+0x70>
  {
    if (num < 0)
 801c9d0:	687b      	ldr	r3, [r7, #4]
 801c9d2:	2b00      	cmp	r3, #0
 801c9d4:	da08      	bge.n	801c9e8 <ee_number+0x70>
    {
      sign = '-';
 801c9d6:	232d      	movs	r3, #45	; 0x2d
 801c9d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 801c9dc:	687b      	ldr	r3, [r7, #4]
 801c9de:	425b      	negs	r3, r3
 801c9e0:	607b      	str	r3, [r7, #4]
      size--;
 801c9e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c9e4:	3b01      	subs	r3, #1
 801c9e6:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801c9e8:	2300      	movs	r3, #0
 801c9ea:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 801c9ec:	687b      	ldr	r3, [r7, #4]
 801c9ee:	2b00      	cmp	r3, #0
 801c9f0:	d11e      	bne.n	801ca30 <ee_number+0xb8>
    tmp[i++] = '0';
 801c9f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c9f4:	1c5a      	adds	r2, r3, #1
 801c9f6:	657a      	str	r2, [r7, #84]	; 0x54
 801c9f8:	3360      	adds	r3, #96	; 0x60
 801c9fa:	443b      	add	r3, r7
 801c9fc:	2230      	movs	r2, #48	; 0x30
 801c9fe:	f803 2c50 	strb.w	r2, [r3, #-80]
 801ca02:	e018      	b.n	801ca36 <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801ca04:	687b      	ldr	r3, [r7, #4]
 801ca06:	683a      	ldr	r2, [r7, #0]
 801ca08:	fbb3 f1f2 	udiv	r1, r3, r2
 801ca0c:	fb01 f202 	mul.w	r2, r1, r2
 801ca10:	1a9b      	subs	r3, r3, r2
 801ca12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801ca14:	441a      	add	r2, r3
 801ca16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ca18:	1c59      	adds	r1, r3, #1
 801ca1a:	6579      	str	r1, [r7, #84]	; 0x54
 801ca1c:	7812      	ldrb	r2, [r2, #0]
 801ca1e:	3360      	adds	r3, #96	; 0x60
 801ca20:	443b      	add	r3, r7
 801ca22:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801ca26:	687a      	ldr	r2, [r7, #4]
 801ca28:	683b      	ldr	r3, [r7, #0]
 801ca2a:	fbb2 f3f3 	udiv	r3, r2, r3
 801ca2e:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801ca30:	687b      	ldr	r3, [r7, #4]
 801ca32:	2b00      	cmp	r3, #0
 801ca34:	d1e6      	bne.n	801ca04 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801ca36:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801ca38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ca3a:	429a      	cmp	r2, r3
 801ca3c:	dd01      	ble.n	801ca42 <ee_number+0xca>
 801ca3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ca40:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 801ca42:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801ca44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ca46:	1ad3      	subs	r3, r2, r3
 801ca48:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801ca4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ca4c:	f003 0301 	and.w	r3, r3, #1
 801ca50:	2b00      	cmp	r3, #0
 801ca52:	d112      	bne.n	801ca7a <ee_number+0x102>
 801ca54:	e00c      	b.n	801ca70 <ee_number+0xf8>
 801ca56:	68fb      	ldr	r3, [r7, #12]
 801ca58:	1c5a      	adds	r2, r3, #1
 801ca5a:	60fa      	str	r2, [r7, #12]
 801ca5c:	2220      	movs	r2, #32
 801ca5e:	701a      	strb	r2, [r3, #0]
 801ca60:	68bb      	ldr	r3, [r7, #8]
 801ca62:	3b01      	subs	r3, #1
 801ca64:	60bb      	str	r3, [r7, #8]
 801ca66:	68bb      	ldr	r3, [r7, #8]
 801ca68:	2b00      	cmp	r3, #0
 801ca6a:	d101      	bne.n	801ca70 <ee_number+0xf8>
 801ca6c:	68fb      	ldr	r3, [r7, #12]
 801ca6e:	e068      	b.n	801cb42 <ee_number+0x1ca>
 801ca70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801ca72:	1e5a      	subs	r2, r3, #1
 801ca74:	66ba      	str	r2, [r7, #104]	; 0x68
 801ca76:	2b00      	cmp	r3, #0
 801ca78:	dced      	bgt.n	801ca56 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801ca7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801ca7e:	2b00      	cmp	r3, #0
 801ca80:	d01b      	beq.n	801caba <ee_number+0x142>
 801ca82:	68fb      	ldr	r3, [r7, #12]
 801ca84:	1c5a      	adds	r2, r3, #1
 801ca86:	60fa      	str	r2, [r7, #12]
 801ca88:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801ca8c:	701a      	strb	r2, [r3, #0]
 801ca8e:	68bb      	ldr	r3, [r7, #8]
 801ca90:	3b01      	subs	r3, #1
 801ca92:	60bb      	str	r3, [r7, #8]
 801ca94:	68bb      	ldr	r3, [r7, #8]
 801ca96:	2b00      	cmp	r3, #0
 801ca98:	d10f      	bne.n	801caba <ee_number+0x142>
 801ca9a:	68fb      	ldr	r3, [r7, #12]
 801ca9c:	e051      	b.n	801cb42 <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801ca9e:	68fb      	ldr	r3, [r7, #12]
 801caa0:	1c5a      	adds	r2, r3, #1
 801caa2:	60fa      	str	r2, [r7, #12]
 801caa4:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 801caa8:	701a      	strb	r2, [r3, #0]
 801caaa:	68bb      	ldr	r3, [r7, #8]
 801caac:	3b01      	subs	r3, #1
 801caae:	60bb      	str	r3, [r7, #8]
 801cab0:	68bb      	ldr	r3, [r7, #8]
 801cab2:	2b00      	cmp	r3, #0
 801cab4:	d101      	bne.n	801caba <ee_number+0x142>
 801cab6:	68fb      	ldr	r3, [r7, #12]
 801cab8:	e043      	b.n	801cb42 <ee_number+0x1ca>
 801caba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801cabc:	1e5a      	subs	r2, r3, #1
 801cabe:	66ba      	str	r2, [r7, #104]	; 0x68
 801cac0:	2b00      	cmp	r3, #0
 801cac2:	dcec      	bgt.n	801ca9e <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801cac4:	e00c      	b.n	801cae0 <ee_number+0x168>
 801cac6:	68fb      	ldr	r3, [r7, #12]
 801cac8:	1c5a      	adds	r2, r3, #1
 801caca:	60fa      	str	r2, [r7, #12]
 801cacc:	2230      	movs	r2, #48	; 0x30
 801cace:	701a      	strb	r2, [r3, #0]
 801cad0:	68bb      	ldr	r3, [r7, #8]
 801cad2:	3b01      	subs	r3, #1
 801cad4:	60bb      	str	r3, [r7, #8]
 801cad6:	68bb      	ldr	r3, [r7, #8]
 801cad8:	2b00      	cmp	r3, #0
 801cada:	d101      	bne.n	801cae0 <ee_number+0x168>
 801cadc:	68fb      	ldr	r3, [r7, #12]
 801cade:	e030      	b.n	801cb42 <ee_number+0x1ca>
 801cae0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801cae2:	1e5a      	subs	r2, r3, #1
 801cae4:	66fa      	str	r2, [r7, #108]	; 0x6c
 801cae6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801cae8:	429a      	cmp	r2, r3
 801caea:	dbec      	blt.n	801cac6 <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801caec:	e010      	b.n	801cb10 <ee_number+0x198>
 801caee:	68fb      	ldr	r3, [r7, #12]
 801caf0:	1c5a      	adds	r2, r3, #1
 801caf2:	60fa      	str	r2, [r7, #12]
 801caf4:	f107 0110 	add.w	r1, r7, #16
 801caf8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801cafa:	440a      	add	r2, r1
 801cafc:	7812      	ldrb	r2, [r2, #0]
 801cafe:	701a      	strb	r2, [r3, #0]
 801cb00:	68bb      	ldr	r3, [r7, #8]
 801cb02:	3b01      	subs	r3, #1
 801cb04:	60bb      	str	r3, [r7, #8]
 801cb06:	68bb      	ldr	r3, [r7, #8]
 801cb08:	2b00      	cmp	r3, #0
 801cb0a:	d101      	bne.n	801cb10 <ee_number+0x198>
 801cb0c:	68fb      	ldr	r3, [r7, #12]
 801cb0e:	e018      	b.n	801cb42 <ee_number+0x1ca>
 801cb10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cb12:	1e5a      	subs	r2, r3, #1
 801cb14:	657a      	str	r2, [r7, #84]	; 0x54
 801cb16:	2b00      	cmp	r3, #0
 801cb18:	dce9      	bgt.n	801caee <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801cb1a:	e00c      	b.n	801cb36 <ee_number+0x1be>
 801cb1c:	68fb      	ldr	r3, [r7, #12]
 801cb1e:	1c5a      	adds	r2, r3, #1
 801cb20:	60fa      	str	r2, [r7, #12]
 801cb22:	2220      	movs	r2, #32
 801cb24:	701a      	strb	r2, [r3, #0]
 801cb26:	68bb      	ldr	r3, [r7, #8]
 801cb28:	3b01      	subs	r3, #1
 801cb2a:	60bb      	str	r3, [r7, #8]
 801cb2c:	68bb      	ldr	r3, [r7, #8]
 801cb2e:	2b00      	cmp	r3, #0
 801cb30:	d101      	bne.n	801cb36 <ee_number+0x1be>
 801cb32:	68fb      	ldr	r3, [r7, #12]
 801cb34:	e005      	b.n	801cb42 <ee_number+0x1ca>
 801cb36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801cb38:	1e5a      	subs	r2, r3, #1
 801cb3a:	66ba      	str	r2, [r7, #104]	; 0x68
 801cb3c:	2b00      	cmp	r3, #0
 801cb3e:	dced      	bgt.n	801cb1c <ee_number+0x1a4>

  return str;
 801cb40:	68fb      	ldr	r3, [r7, #12]
}
 801cb42:	4618      	mov	r0, r3
 801cb44:	3764      	adds	r7, #100	; 0x64
 801cb46:	46bd      	mov	sp, r7
 801cb48:	bc80      	pop	{r7}
 801cb4a:	4770      	bx	lr
 801cb4c:	20000138 	.word	0x20000138
 801cb50:	2000013c 	.word	0x2000013c

0801cb54 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801cb54:	b580      	push	{r7, lr}
 801cb56:	b092      	sub	sp, #72	; 0x48
 801cb58:	af04      	add	r7, sp, #16
 801cb5a:	60f8      	str	r0, [r7, #12]
 801cb5c:	60b9      	str	r1, [r7, #8]
 801cb5e:	607a      	str	r2, [r7, #4]
 801cb60:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801cb62:	68bb      	ldr	r3, [r7, #8]
 801cb64:	2b00      	cmp	r3, #0
 801cb66:	dc01      	bgt.n	801cb6c <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801cb68:	2300      	movs	r3, #0
 801cb6a:	e13e      	b.n	801cdea <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801cb6c:	68fb      	ldr	r3, [r7, #12]
 801cb6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801cb70:	e128      	b.n	801cdc4 <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 801cb72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cb74:	68fb      	ldr	r3, [r7, #12]
 801cb76:	1ad2      	subs	r2, r2, r3
 801cb78:	68bb      	ldr	r3, [r7, #8]
 801cb7a:	3b01      	subs	r3, #1
 801cb7c:	429a      	cmp	r2, r3
 801cb7e:	f280 812e 	bge.w	801cdde <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 801cb82:	687b      	ldr	r3, [r7, #4]
 801cb84:	781b      	ldrb	r3, [r3, #0]
 801cb86:	2b25      	cmp	r3, #37	; 0x25
 801cb88:	d006      	beq.n	801cb98 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801cb8a:	687a      	ldr	r2, [r7, #4]
 801cb8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cb8e:	1c59      	adds	r1, r3, #1
 801cb90:	62f9      	str	r1, [r7, #44]	; 0x2c
 801cb92:	7812      	ldrb	r2, [r2, #0]
 801cb94:	701a      	strb	r2, [r3, #0]
      continue;
 801cb96:	e112      	b.n	801cdbe <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 801cb98:	2300      	movs	r3, #0
 801cb9a:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801cb9c:	687b      	ldr	r3, [r7, #4]
 801cb9e:	3301      	adds	r3, #1
 801cba0:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801cba2:	687b      	ldr	r3, [r7, #4]
 801cba4:	781b      	ldrb	r3, [r3, #0]
 801cba6:	2b30      	cmp	r3, #48	; 0x30
 801cba8:	d103      	bne.n	801cbb2 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801cbaa:	6a3b      	ldr	r3, [r7, #32]
 801cbac:	f043 0301 	orr.w	r3, r3, #1
 801cbb0:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801cbb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801cbb6:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801cbb8:	687b      	ldr	r3, [r7, #4]
 801cbba:	781b      	ldrb	r3, [r3, #0]
 801cbbc:	2b2f      	cmp	r3, #47	; 0x2f
 801cbbe:	d908      	bls.n	801cbd2 <tiny_vsnprintf_like+0x7e>
 801cbc0:	687b      	ldr	r3, [r7, #4]
 801cbc2:	781b      	ldrb	r3, [r3, #0]
 801cbc4:	2b39      	cmp	r3, #57	; 0x39
 801cbc6:	d804      	bhi.n	801cbd2 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801cbc8:	1d3b      	adds	r3, r7, #4
 801cbca:	4618      	mov	r0, r3
 801cbcc:	f7ff feae 	bl	801c92c <ee_skip_atoi>
 801cbd0:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801cbd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801cbd6:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801cbd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801cbdc:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801cbde:	230a      	movs	r3, #10
 801cbe0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801cbe2:	687b      	ldr	r3, [r7, #4]
 801cbe4:	781b      	ldrb	r3, [r3, #0]
 801cbe6:	3b58      	subs	r3, #88	; 0x58
 801cbe8:	2b20      	cmp	r3, #32
 801cbea:	f200 8094 	bhi.w	801cd16 <tiny_vsnprintf_like+0x1c2>
 801cbee:	a201      	add	r2, pc, #4	; (adr r2, 801cbf4 <tiny_vsnprintf_like+0xa0>)
 801cbf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cbf4:	0801ccff 	.word	0x0801ccff
 801cbf8:	0801cd17 	.word	0x0801cd17
 801cbfc:	0801cd17 	.word	0x0801cd17
 801cc00:	0801cd17 	.word	0x0801cd17
 801cc04:	0801cd17 	.word	0x0801cd17
 801cc08:	0801cd17 	.word	0x0801cd17
 801cc0c:	0801cd17 	.word	0x0801cd17
 801cc10:	0801cd17 	.word	0x0801cd17
 801cc14:	0801cd17 	.word	0x0801cd17
 801cc18:	0801cd17 	.word	0x0801cd17
 801cc1c:	0801cd17 	.word	0x0801cd17
 801cc20:	0801cc83 	.word	0x0801cc83
 801cc24:	0801cd0d 	.word	0x0801cd0d
 801cc28:	0801cd17 	.word	0x0801cd17
 801cc2c:	0801cd17 	.word	0x0801cd17
 801cc30:	0801cd17 	.word	0x0801cd17
 801cc34:	0801cd17 	.word	0x0801cd17
 801cc38:	0801cd0d 	.word	0x0801cd0d
 801cc3c:	0801cd17 	.word	0x0801cd17
 801cc40:	0801cd17 	.word	0x0801cd17
 801cc44:	0801cd17 	.word	0x0801cd17
 801cc48:	0801cd17 	.word	0x0801cd17
 801cc4c:	0801cd17 	.word	0x0801cd17
 801cc50:	0801cd17 	.word	0x0801cd17
 801cc54:	0801cd17 	.word	0x0801cd17
 801cc58:	0801cd17 	.word	0x0801cd17
 801cc5c:	0801cd17 	.word	0x0801cd17
 801cc60:	0801cca3 	.word	0x0801cca3
 801cc64:	0801cd17 	.word	0x0801cd17
 801cc68:	0801cd63 	.word	0x0801cd63
 801cc6c:	0801cd17 	.word	0x0801cd17
 801cc70:	0801cd17 	.word	0x0801cd17
 801cc74:	0801cd07 	.word	0x0801cd07
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801cc78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cc7a:	1c5a      	adds	r2, r3, #1
 801cc7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 801cc7e:	2220      	movs	r2, #32
 801cc80:	701a      	strb	r2, [r3, #0]
 801cc82:	69fb      	ldr	r3, [r7, #28]
 801cc84:	3b01      	subs	r3, #1
 801cc86:	61fb      	str	r3, [r7, #28]
 801cc88:	69fb      	ldr	r3, [r7, #28]
 801cc8a:	2b00      	cmp	r3, #0
 801cc8c:	dcf4      	bgt.n	801cc78 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801cc8e:	683b      	ldr	r3, [r7, #0]
 801cc90:	1d1a      	adds	r2, r3, #4
 801cc92:	603a      	str	r2, [r7, #0]
 801cc94:	6819      	ldr	r1, [r3, #0]
 801cc96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cc98:	1c5a      	adds	r2, r3, #1
 801cc9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801cc9c:	b2ca      	uxtb	r2, r1
 801cc9e:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801cca0:	e08d      	b.n	801cdbe <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 801cca2:	683b      	ldr	r3, [r7, #0]
 801cca4:	1d1a      	adds	r2, r3, #4
 801cca6:	603a      	str	r2, [r7, #0]
 801cca8:	681b      	ldr	r3, [r3, #0]
 801ccaa:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801ccac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ccae:	2b00      	cmp	r3, #0
 801ccb0:	d101      	bne.n	801ccb6 <tiny_vsnprintf_like+0x162>
 801ccb2:	4b50      	ldr	r3, [pc, #320]	; (801cdf4 <tiny_vsnprintf_like+0x2a0>)
 801ccb4:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801ccb6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ccb8:	f7e3 fa5e 	bl	8000178 <strlen>
 801ccbc:	4603      	mov	r3, r0
 801ccbe:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801ccc0:	e004      	b.n	801cccc <tiny_vsnprintf_like+0x178>
 801ccc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ccc4:	1c5a      	adds	r2, r3, #1
 801ccc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 801ccc8:	2220      	movs	r2, #32
 801ccca:	701a      	strb	r2, [r3, #0]
 801cccc:	69fb      	ldr	r3, [r7, #28]
 801ccce:	1e5a      	subs	r2, r3, #1
 801ccd0:	61fa      	str	r2, [r7, #28]
 801ccd2:	693a      	ldr	r2, [r7, #16]
 801ccd4:	429a      	cmp	r2, r3
 801ccd6:	dbf4      	blt.n	801ccc2 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801ccd8:	2300      	movs	r3, #0
 801ccda:	62bb      	str	r3, [r7, #40]	; 0x28
 801ccdc:	e00a      	b.n	801ccf4 <tiny_vsnprintf_like+0x1a0>
 801ccde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cce0:	1c53      	adds	r3, r2, #1
 801cce2:	627b      	str	r3, [r7, #36]	; 0x24
 801cce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cce6:	1c59      	adds	r1, r3, #1
 801cce8:	62f9      	str	r1, [r7, #44]	; 0x2c
 801ccea:	7812      	ldrb	r2, [r2, #0]
 801ccec:	701a      	strb	r2, [r3, #0]
 801ccee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ccf0:	3301      	adds	r3, #1
 801ccf2:	62bb      	str	r3, [r7, #40]	; 0x28
 801ccf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ccf6:	693b      	ldr	r3, [r7, #16]
 801ccf8:	429a      	cmp	r2, r3
 801ccfa:	dbf0      	blt.n	801ccde <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801ccfc:	e05f      	b.n	801cdbe <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801ccfe:	6a3b      	ldr	r3, [r7, #32]
 801cd00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cd04:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801cd06:	2310      	movs	r3, #16
 801cd08:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801cd0a:	e02b      	b.n	801cd64 <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 801cd0c:	6a3b      	ldr	r3, [r7, #32]
 801cd0e:	f043 0302 	orr.w	r3, r3, #2
 801cd12:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801cd14:	e025      	b.n	801cd62 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801cd16:	687b      	ldr	r3, [r7, #4]
 801cd18:	781b      	ldrb	r3, [r3, #0]
 801cd1a:	2b25      	cmp	r3, #37	; 0x25
 801cd1c:	d004      	beq.n	801cd28 <tiny_vsnprintf_like+0x1d4>
 801cd1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cd20:	1c5a      	adds	r2, r3, #1
 801cd22:	62fa      	str	r2, [r7, #44]	; 0x2c
 801cd24:	2225      	movs	r2, #37	; 0x25
 801cd26:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801cd28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cd2a:	68fb      	ldr	r3, [r7, #12]
 801cd2c:	1ad2      	subs	r2, r2, r3
 801cd2e:	68bb      	ldr	r3, [r7, #8]
 801cd30:	3b01      	subs	r3, #1
 801cd32:	429a      	cmp	r2, r3
 801cd34:	da16      	bge.n	801cd64 <tiny_vsnprintf_like+0x210>
        if (*fmt)
 801cd36:	687b      	ldr	r3, [r7, #4]
 801cd38:	781b      	ldrb	r3, [r3, #0]
 801cd3a:	2b00      	cmp	r3, #0
 801cd3c:	d006      	beq.n	801cd4c <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801cd3e:	687a      	ldr	r2, [r7, #4]
 801cd40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cd42:	1c59      	adds	r1, r3, #1
 801cd44:	62f9      	str	r1, [r7, #44]	; 0x2c
 801cd46:	7812      	ldrb	r2, [r2, #0]
 801cd48:	701a      	strb	r2, [r3, #0]
 801cd4a:	e002      	b.n	801cd52 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801cd4c:	687b      	ldr	r3, [r7, #4]
 801cd4e:	3b01      	subs	r3, #1
 801cd50:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801cd52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cd54:	68fb      	ldr	r3, [r7, #12]
 801cd56:	1ad2      	subs	r2, r2, r3
 801cd58:	68bb      	ldr	r3, [r7, #8]
 801cd5a:	3b01      	subs	r3, #1
 801cd5c:	429a      	cmp	r2, r3
 801cd5e:	db2d      	blt.n	801cdbc <tiny_vsnprintf_like+0x268>
 801cd60:	e000      	b.n	801cd64 <tiny_vsnprintf_like+0x210>
        break;
 801cd62:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801cd64:	697b      	ldr	r3, [r7, #20]
 801cd66:	2b6c      	cmp	r3, #108	; 0x6c
 801cd68:	d105      	bne.n	801cd76 <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 801cd6a:	683b      	ldr	r3, [r7, #0]
 801cd6c:	1d1a      	adds	r2, r3, #4
 801cd6e:	603a      	str	r2, [r7, #0]
 801cd70:	681b      	ldr	r3, [r3, #0]
 801cd72:	637b      	str	r3, [r7, #52]	; 0x34
 801cd74:	e00f      	b.n	801cd96 <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 801cd76:	6a3b      	ldr	r3, [r7, #32]
 801cd78:	f003 0302 	and.w	r3, r3, #2
 801cd7c:	2b00      	cmp	r3, #0
 801cd7e:	d005      	beq.n	801cd8c <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 801cd80:	683b      	ldr	r3, [r7, #0]
 801cd82:	1d1a      	adds	r2, r3, #4
 801cd84:	603a      	str	r2, [r7, #0]
 801cd86:	681b      	ldr	r3, [r3, #0]
 801cd88:	637b      	str	r3, [r7, #52]	; 0x34
 801cd8a:	e004      	b.n	801cd96 <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 801cd8c:	683b      	ldr	r3, [r7, #0]
 801cd8e:	1d1a      	adds	r2, r3, #4
 801cd90:	603a      	str	r2, [r7, #0]
 801cd92:	681b      	ldr	r3, [r3, #0]
 801cd94:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801cd96:	68bb      	ldr	r3, [r7, #8]
 801cd98:	1e5a      	subs	r2, r3, #1
 801cd9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801cd9c:	68fb      	ldr	r3, [r7, #12]
 801cd9e:	1acb      	subs	r3, r1, r3
 801cda0:	1ad1      	subs	r1, r2, r3
 801cda2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801cda4:	6a3b      	ldr	r3, [r7, #32]
 801cda6:	9302      	str	r3, [sp, #8]
 801cda8:	69bb      	ldr	r3, [r7, #24]
 801cdaa:	9301      	str	r3, [sp, #4]
 801cdac:	69fb      	ldr	r3, [r7, #28]
 801cdae:	9300      	str	r3, [sp, #0]
 801cdb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cdb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801cdb4:	f7ff fde0 	bl	801c978 <ee_number>
 801cdb8:	62f8      	str	r0, [r7, #44]	; 0x2c
 801cdba:	e000      	b.n	801cdbe <tiny_vsnprintf_like+0x26a>
        continue;
 801cdbc:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801cdbe:	687b      	ldr	r3, [r7, #4]
 801cdc0:	3301      	adds	r3, #1
 801cdc2:	607b      	str	r3, [r7, #4]
 801cdc4:	687b      	ldr	r3, [r7, #4]
 801cdc6:	781b      	ldrb	r3, [r3, #0]
 801cdc8:	2b00      	cmp	r3, #0
 801cdca:	f47f aed2 	bne.w	801cb72 <tiny_vsnprintf_like+0x1e>
 801cdce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cdd0:	68fb      	ldr	r3, [r7, #12]
 801cdd2:	1ad2      	subs	r2, r2, r3
 801cdd4:	68bb      	ldr	r3, [r7, #8]
 801cdd6:	3b01      	subs	r3, #1
 801cdd8:	429a      	cmp	r2, r3
 801cdda:	f6bf aeca 	bge.w	801cb72 <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 801cdde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cde0:	2200      	movs	r2, #0
 801cde2:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801cde4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cde6:	68fb      	ldr	r3, [r7, #12]
 801cde8:	1ad3      	subs	r3, r2, r3
}
 801cdea:	4618      	mov	r0, r3
 801cdec:	3738      	adds	r7, #56	; 0x38
 801cdee:	46bd      	mov	sp, r7
 801cdf0:	bd80      	pop	{r7, pc}
 801cdf2:	bf00      	nop
 801cdf4:	0801e5e8 	.word	0x0801e5e8

0801cdf8 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801cdf8:	b580      	push	{r7, lr}
 801cdfa:	b090      	sub	sp, #64	; 0x40
 801cdfc:	af00      	add	r7, sp, #0
 801cdfe:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801ce00:	4b73      	ldr	r3, [pc, #460]	; (801cfd0 <UTIL_SEQ_Run+0x1d8>)
 801ce02:	681b      	ldr	r3, [r3, #0]
 801ce04:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801ce06:	4b72      	ldr	r3, [pc, #456]	; (801cfd0 <UTIL_SEQ_Run+0x1d8>)
 801ce08:	681a      	ldr	r2, [r3, #0]
 801ce0a:	687b      	ldr	r3, [r7, #4]
 801ce0c:	4013      	ands	r3, r2
 801ce0e:	4a70      	ldr	r2, [pc, #448]	; (801cfd0 <UTIL_SEQ_Run+0x1d8>)
 801ce10:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801ce12:	4b70      	ldr	r3, [pc, #448]	; (801cfd4 <UTIL_SEQ_Run+0x1dc>)
 801ce14:	681b      	ldr	r3, [r3, #0]
 801ce16:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801ce18:	4b6f      	ldr	r3, [pc, #444]	; (801cfd8 <UTIL_SEQ_Run+0x1e0>)
 801ce1a:	681b      	ldr	r3, [r3, #0]
 801ce1c:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801ce1e:	4b6f      	ldr	r3, [pc, #444]	; (801cfdc <UTIL_SEQ_Run+0x1e4>)
 801ce20:	681b      	ldr	r3, [r3, #0]
 801ce22:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 801ce24:	4b6e      	ldr	r3, [pc, #440]	; (801cfe0 <UTIL_SEQ_Run+0x1e8>)
 801ce26:	681b      	ldr	r3, [r3, #0]
 801ce28:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801ce2a:	e08d      	b.n	801cf48 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801ce2c:	2300      	movs	r3, #0
 801ce2e:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801ce30:	e002      	b.n	801ce38 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801ce32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ce34:	3301      	adds	r3, #1
 801ce36:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801ce38:	4a6a      	ldr	r2, [pc, #424]	; (801cfe4 <UTIL_SEQ_Run+0x1ec>)
 801ce3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ce3c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801ce40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ce42:	401a      	ands	r2, r3
 801ce44:	4b62      	ldr	r3, [pc, #392]	; (801cfd0 <UTIL_SEQ_Run+0x1d8>)
 801ce46:	681b      	ldr	r3, [r3, #0]
 801ce48:	4013      	ands	r3, r2
 801ce4a:	2b00      	cmp	r3, #0
 801ce4c:	d0f1      	beq.n	801ce32 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801ce4e:	4a65      	ldr	r2, [pc, #404]	; (801cfe4 <UTIL_SEQ_Run+0x1ec>)
 801ce50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ce52:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801ce56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ce58:	401a      	ands	r2, r3
 801ce5a:	4b5d      	ldr	r3, [pc, #372]	; (801cfd0 <UTIL_SEQ_Run+0x1d8>)
 801ce5c:	681b      	ldr	r3, [r3, #0]
 801ce5e:	4013      	ands	r3, r2
 801ce60:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801ce62:	4a60      	ldr	r2, [pc, #384]	; (801cfe4 <UTIL_SEQ_Run+0x1ec>)
 801ce64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ce66:	00db      	lsls	r3, r3, #3
 801ce68:	4413      	add	r3, r2
 801ce6a:	685a      	ldr	r2, [r3, #4]
 801ce6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce6e:	4013      	ands	r3, r2
 801ce70:	2b00      	cmp	r3, #0
 801ce72:	d106      	bne.n	801ce82 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801ce74:	4a5b      	ldr	r2, [pc, #364]	; (801cfe4 <UTIL_SEQ_Run+0x1ec>)
 801ce76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ce78:	00db      	lsls	r3, r3, #3
 801ce7a:	4413      	add	r3, r2
 801ce7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801ce80:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801ce82:	4a58      	ldr	r2, [pc, #352]	; (801cfe4 <UTIL_SEQ_Run+0x1ec>)
 801ce84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ce86:	00db      	lsls	r3, r3, #3
 801ce88:	4413      	add	r3, r2
 801ce8a:	685a      	ldr	r2, [r3, #4]
 801ce8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce8e:	4013      	ands	r3, r2
 801ce90:	4618      	mov	r0, r3
 801ce92:	f000 f907 	bl	801d0a4 <SEQ_BitPosition>
 801ce96:	4603      	mov	r3, r0
 801ce98:	461a      	mov	r2, r3
 801ce9a:	4b53      	ldr	r3, [pc, #332]	; (801cfe8 <UTIL_SEQ_Run+0x1f0>)
 801ce9c:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801ce9e:	4a51      	ldr	r2, [pc, #324]	; (801cfe4 <UTIL_SEQ_Run+0x1ec>)
 801cea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cea2:	00db      	lsls	r3, r3, #3
 801cea4:	4413      	add	r3, r2
 801cea6:	685a      	ldr	r2, [r3, #4]
 801cea8:	4b4f      	ldr	r3, [pc, #316]	; (801cfe8 <UTIL_SEQ_Run+0x1f0>)
 801ceaa:	681b      	ldr	r3, [r3, #0]
 801ceac:	2101      	movs	r1, #1
 801ceae:	fa01 f303 	lsl.w	r3, r1, r3
 801ceb2:	43db      	mvns	r3, r3
 801ceb4:	401a      	ands	r2, r3
 801ceb6:	494b      	ldr	r1, [pc, #300]	; (801cfe4 <UTIL_SEQ_Run+0x1ec>)
 801ceb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ceba:	00db      	lsls	r3, r3, #3
 801cebc:	440b      	add	r3, r1
 801cebe:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cec0:	f3ef 8310 	mrs	r3, PRIMASK
 801cec4:	61bb      	str	r3, [r7, #24]
  return(result);
 801cec6:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801cec8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801ceca:	b672      	cpsid	i
}
 801cecc:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801cece:	4b46      	ldr	r3, [pc, #280]	; (801cfe8 <UTIL_SEQ_Run+0x1f0>)
 801ced0:	681b      	ldr	r3, [r3, #0]
 801ced2:	2201      	movs	r2, #1
 801ced4:	fa02 f303 	lsl.w	r3, r2, r3
 801ced8:	43da      	mvns	r2, r3
 801ceda:	4b3e      	ldr	r3, [pc, #248]	; (801cfd4 <UTIL_SEQ_Run+0x1dc>)
 801cedc:	681b      	ldr	r3, [r3, #0]
 801cede:	4013      	ands	r3, r2
 801cee0:	4a3c      	ldr	r2, [pc, #240]	; (801cfd4 <UTIL_SEQ_Run+0x1dc>)
 801cee2:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801cee4:	2301      	movs	r3, #1
 801cee6:	63fb      	str	r3, [r7, #60]	; 0x3c
 801cee8:	e013      	b.n	801cf12 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801ceea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ceec:	3b01      	subs	r3, #1
 801ceee:	4a3d      	ldr	r2, [pc, #244]	; (801cfe4 <UTIL_SEQ_Run+0x1ec>)
 801cef0:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801cef4:	4b3c      	ldr	r3, [pc, #240]	; (801cfe8 <UTIL_SEQ_Run+0x1f0>)
 801cef6:	681b      	ldr	r3, [r3, #0]
 801cef8:	2201      	movs	r2, #1
 801cefa:	fa02 f303 	lsl.w	r3, r2, r3
 801cefe:	43da      	mvns	r2, r3
 801cf00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cf02:	3b01      	subs	r3, #1
 801cf04:	400a      	ands	r2, r1
 801cf06:	4937      	ldr	r1, [pc, #220]	; (801cfe4 <UTIL_SEQ_Run+0x1ec>)
 801cf08:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801cf0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cf0e:	3b01      	subs	r3, #1
 801cf10:	63fb      	str	r3, [r7, #60]	; 0x3c
 801cf12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cf14:	2b00      	cmp	r3, #0
 801cf16:	d1e8      	bne.n	801ceea <UTIL_SEQ_Run+0xf2>
 801cf18:	6a3b      	ldr	r3, [r7, #32]
 801cf1a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cf1c:	697b      	ldr	r3, [r7, #20]
 801cf1e:	f383 8810 	msr	PRIMASK, r3
}
 801cf22:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801cf24:	4b30      	ldr	r3, [pc, #192]	; (801cfe8 <UTIL_SEQ_Run+0x1f0>)
 801cf26:	681b      	ldr	r3, [r3, #0]
 801cf28:	4a30      	ldr	r2, [pc, #192]	; (801cfec <UTIL_SEQ_Run+0x1f4>)
 801cf2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cf2e:	4798      	blx	r3

    local_taskset = TaskSet;
 801cf30:	4b28      	ldr	r3, [pc, #160]	; (801cfd4 <UTIL_SEQ_Run+0x1dc>)
 801cf32:	681b      	ldr	r3, [r3, #0]
 801cf34:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 801cf36:	4b28      	ldr	r3, [pc, #160]	; (801cfd8 <UTIL_SEQ_Run+0x1e0>)
 801cf38:	681b      	ldr	r3, [r3, #0]
 801cf3a:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 801cf3c:	4b27      	ldr	r3, [pc, #156]	; (801cfdc <UTIL_SEQ_Run+0x1e4>)
 801cf3e:	681b      	ldr	r3, [r3, #0]
 801cf40:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 801cf42:	4b27      	ldr	r3, [pc, #156]	; (801cfe0 <UTIL_SEQ_Run+0x1e8>)
 801cf44:	681b      	ldr	r3, [r3, #0]
 801cf46:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801cf48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801cf4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cf4c:	401a      	ands	r2, r3
 801cf4e:	4b20      	ldr	r3, [pc, #128]	; (801cfd0 <UTIL_SEQ_Run+0x1d8>)
 801cf50:	681b      	ldr	r3, [r3, #0]
 801cf52:	4013      	ands	r3, r2
 801cf54:	2b00      	cmp	r3, #0
 801cf56:	d005      	beq.n	801cf64 <UTIL_SEQ_Run+0x16c>
 801cf58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801cf5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cf5c:	4013      	ands	r3, r2
 801cf5e:	2b00      	cmp	r3, #0
 801cf60:	f43f af64 	beq.w	801ce2c <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801cf64:	4b20      	ldr	r3, [pc, #128]	; (801cfe8 <UTIL_SEQ_Run+0x1f0>)
 801cf66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801cf6a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801cf6c:	f000 f88e 	bl	801d08c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cf70:	f3ef 8310 	mrs	r3, PRIMASK
 801cf74:	613b      	str	r3, [r7, #16]
  return(result);
 801cf76:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801cf78:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801cf7a:	b672      	cpsid	i
}
 801cf7c:	bf00      	nop
  local_taskset = TaskSet;
 801cf7e:	4b15      	ldr	r3, [pc, #84]	; (801cfd4 <UTIL_SEQ_Run+0x1dc>)
 801cf80:	681b      	ldr	r3, [r3, #0]
 801cf82:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801cf84:	4b14      	ldr	r3, [pc, #80]	; (801cfd8 <UTIL_SEQ_Run+0x1e0>)
 801cf86:	681b      	ldr	r3, [r3, #0]
 801cf88:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801cf8a:	4b14      	ldr	r3, [pc, #80]	; (801cfdc <UTIL_SEQ_Run+0x1e4>)
 801cf8c:	681b      	ldr	r3, [r3, #0]
 801cf8e:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801cf90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801cf92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cf94:	401a      	ands	r2, r3
 801cf96:	4b0e      	ldr	r3, [pc, #56]	; (801cfd0 <UTIL_SEQ_Run+0x1d8>)
 801cf98:	681b      	ldr	r3, [r3, #0]
 801cf9a:	4013      	ands	r3, r2
 801cf9c:	2b00      	cmp	r3, #0
 801cf9e:	d107      	bne.n	801cfb0 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801cfa0:	4b0f      	ldr	r3, [pc, #60]	; (801cfe0 <UTIL_SEQ_Run+0x1e8>)
 801cfa2:	681a      	ldr	r2, [r3, #0]
 801cfa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cfa6:	4013      	ands	r3, r2
 801cfa8:	2b00      	cmp	r3, #0
 801cfaa:	d101      	bne.n	801cfb0 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801cfac:	f7e4 fff4 	bl	8001f98 <UTIL_SEQ_Idle>
 801cfb0:	69fb      	ldr	r3, [r7, #28]
 801cfb2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cfb4:	68fb      	ldr	r3, [r7, #12]
 801cfb6:	f383 8810 	msr	PRIMASK, r3
}
 801cfba:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801cfbc:	f000 f86c 	bl	801d098 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801cfc0:	4a03      	ldr	r2, [pc, #12]	; (801cfd0 <UTIL_SEQ_Run+0x1d8>)
 801cfc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cfc4:	6013      	str	r3, [r2, #0]

  return;
 801cfc6:	bf00      	nop
}
 801cfc8:	3740      	adds	r7, #64	; 0x40
 801cfca:	46bd      	mov	sp, r7
 801cfcc:	bd80      	pop	{r7, pc}
 801cfce:	bf00      	nop
 801cfd0:	20000144 	.word	0x20000144
 801cfd4:	20001c8c 	.word	0x20001c8c
 801cfd8:	20001c90 	.word	0x20001c90
 801cfdc:	20000140 	.word	0x20000140
 801cfe0:	20001c94 	.word	0x20001c94
 801cfe4:	20001cac 	.word	0x20001cac
 801cfe8:	20001c98 	.word	0x20001c98
 801cfec:	20001c9c 	.word	0x20001c9c

0801cff0 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801cff0:	b580      	push	{r7, lr}
 801cff2:	b088      	sub	sp, #32
 801cff4:	af00      	add	r7, sp, #0
 801cff6:	60f8      	str	r0, [r7, #12]
 801cff8:	60b9      	str	r1, [r7, #8]
 801cffa:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cffc:	f3ef 8310 	mrs	r3, PRIMASK
 801d000:	617b      	str	r3, [r7, #20]
  return(result);
 801d002:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801d004:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801d006:	b672      	cpsid	i
}
 801d008:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801d00a:	68f8      	ldr	r0, [r7, #12]
 801d00c:	f000 f84a 	bl	801d0a4 <SEQ_BitPosition>
 801d010:	4603      	mov	r3, r0
 801d012:	4619      	mov	r1, r3
 801d014:	4a06      	ldr	r2, [pc, #24]	; (801d030 <UTIL_SEQ_RegTask+0x40>)
 801d016:	687b      	ldr	r3, [r7, #4]
 801d018:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801d01c:	69fb      	ldr	r3, [r7, #28]
 801d01e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d020:	69bb      	ldr	r3, [r7, #24]
 801d022:	f383 8810 	msr	PRIMASK, r3
}
 801d026:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801d028:	bf00      	nop
}
 801d02a:	3720      	adds	r7, #32
 801d02c:	46bd      	mov	sp, r7
 801d02e:	bd80      	pop	{r7, pc}
 801d030:	20001c9c 	.word	0x20001c9c

0801d034 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801d034:	b480      	push	{r7}
 801d036:	b087      	sub	sp, #28
 801d038:	af00      	add	r7, sp, #0
 801d03a:	6078      	str	r0, [r7, #4]
 801d03c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d03e:	f3ef 8310 	mrs	r3, PRIMASK
 801d042:	60fb      	str	r3, [r7, #12]
  return(result);
 801d044:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801d046:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d048:	b672      	cpsid	i
}
 801d04a:	bf00      	nop

  TaskSet |= TaskId_bm;
 801d04c:	4b0d      	ldr	r3, [pc, #52]	; (801d084 <UTIL_SEQ_SetTask+0x50>)
 801d04e:	681a      	ldr	r2, [r3, #0]
 801d050:	687b      	ldr	r3, [r7, #4]
 801d052:	4313      	orrs	r3, r2
 801d054:	4a0b      	ldr	r2, [pc, #44]	; (801d084 <UTIL_SEQ_SetTask+0x50>)
 801d056:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801d058:	4a0b      	ldr	r2, [pc, #44]	; (801d088 <UTIL_SEQ_SetTask+0x54>)
 801d05a:	683b      	ldr	r3, [r7, #0]
 801d05c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801d060:	687b      	ldr	r3, [r7, #4]
 801d062:	431a      	orrs	r2, r3
 801d064:	4908      	ldr	r1, [pc, #32]	; (801d088 <UTIL_SEQ_SetTask+0x54>)
 801d066:	683b      	ldr	r3, [r7, #0]
 801d068:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801d06c:	697b      	ldr	r3, [r7, #20]
 801d06e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d070:	693b      	ldr	r3, [r7, #16]
 801d072:	f383 8810 	msr	PRIMASK, r3
}
 801d076:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801d078:	bf00      	nop
}
 801d07a:	371c      	adds	r7, #28
 801d07c:	46bd      	mov	sp, r7
 801d07e:	bc80      	pop	{r7}
 801d080:	4770      	bx	lr
 801d082:	bf00      	nop
 801d084:	20001c8c 	.word	0x20001c8c
 801d088:	20001cac 	.word	0x20001cac

0801d08c <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801d08c:	b480      	push	{r7}
 801d08e:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801d090:	bf00      	nop
}
 801d092:	46bd      	mov	sp, r7
 801d094:	bc80      	pop	{r7}
 801d096:	4770      	bx	lr

0801d098 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801d098:	b480      	push	{r7}
 801d09a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801d09c:	bf00      	nop
}
 801d09e:	46bd      	mov	sp, r7
 801d0a0:	bc80      	pop	{r7}
 801d0a2:	4770      	bx	lr

0801d0a4 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801d0a4:	b480      	push	{r7}
 801d0a6:	b085      	sub	sp, #20
 801d0a8:	af00      	add	r7, sp, #0
 801d0aa:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801d0ac:	2300      	movs	r3, #0
 801d0ae:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801d0b0:	687b      	ldr	r3, [r7, #4]
 801d0b2:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801d0b4:	68bb      	ldr	r3, [r7, #8]
 801d0b6:	0c1b      	lsrs	r3, r3, #16
 801d0b8:	041b      	lsls	r3, r3, #16
 801d0ba:	2b00      	cmp	r3, #0
 801d0bc:	d104      	bne.n	801d0c8 <SEQ_BitPosition+0x24>
 801d0be:	2310      	movs	r3, #16
 801d0c0:	73fb      	strb	r3, [r7, #15]
 801d0c2:	68bb      	ldr	r3, [r7, #8]
 801d0c4:	041b      	lsls	r3, r3, #16
 801d0c6:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801d0c8:	68bb      	ldr	r3, [r7, #8]
 801d0ca:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801d0ce:	2b00      	cmp	r3, #0
 801d0d0:	d105      	bne.n	801d0de <SEQ_BitPosition+0x3a>
 801d0d2:	7bfb      	ldrb	r3, [r7, #15]
 801d0d4:	3308      	adds	r3, #8
 801d0d6:	73fb      	strb	r3, [r7, #15]
 801d0d8:	68bb      	ldr	r3, [r7, #8]
 801d0da:	021b      	lsls	r3, r3, #8
 801d0dc:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801d0de:	68bb      	ldr	r3, [r7, #8]
 801d0e0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801d0e4:	2b00      	cmp	r3, #0
 801d0e6:	d105      	bne.n	801d0f4 <SEQ_BitPosition+0x50>
 801d0e8:	7bfb      	ldrb	r3, [r7, #15]
 801d0ea:	3304      	adds	r3, #4
 801d0ec:	73fb      	strb	r3, [r7, #15]
 801d0ee:	68bb      	ldr	r3, [r7, #8]
 801d0f0:	011b      	lsls	r3, r3, #4
 801d0f2:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801d0f4:	68bb      	ldr	r3, [r7, #8]
 801d0f6:	0f1b      	lsrs	r3, r3, #28
 801d0f8:	4a06      	ldr	r2, [pc, #24]	; (801d114 <SEQ_BitPosition+0x70>)
 801d0fa:	5cd2      	ldrb	r2, [r2, r3]
 801d0fc:	7bfb      	ldrb	r3, [r7, #15]
 801d0fe:	4413      	add	r3, r2
 801d100:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801d102:	7bfb      	ldrb	r3, [r7, #15]
 801d104:	f1c3 031f 	rsb	r3, r3, #31
 801d108:	b2db      	uxtb	r3, r3
}
 801d10a:	4618      	mov	r0, r3
 801d10c:	3714      	adds	r7, #20
 801d10e:	46bd      	mov	sp, r7
 801d110:	bc80      	pop	{r7}
 801d112:	4770      	bx	lr
 801d114:	0801ecb0 	.word	0x0801ecb0

0801d118 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801d118:	b580      	push	{r7, lr}
 801d11a:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801d11c:	4b04      	ldr	r3, [pc, #16]	; (801d130 <UTIL_TIMER_Init+0x18>)
 801d11e:	2200      	movs	r2, #0
 801d120:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801d122:	4b04      	ldr	r3, [pc, #16]	; (801d134 <UTIL_TIMER_Init+0x1c>)
 801d124:	681b      	ldr	r3, [r3, #0]
 801d126:	4798      	blx	r3
 801d128:	4603      	mov	r3, r0
}
 801d12a:	4618      	mov	r0, r3
 801d12c:	bd80      	pop	{r7, pc}
 801d12e:	bf00      	nop
 801d130:	20001cb4 	.word	0x20001cb4
 801d134:	0801e6a8 	.word	0x0801e6a8

0801d138 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801d138:	b580      	push	{r7, lr}
 801d13a:	b084      	sub	sp, #16
 801d13c:	af00      	add	r7, sp, #0
 801d13e:	60f8      	str	r0, [r7, #12]
 801d140:	60b9      	str	r1, [r7, #8]
 801d142:	603b      	str	r3, [r7, #0]
 801d144:	4613      	mov	r3, r2
 801d146:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801d148:	68fb      	ldr	r3, [r7, #12]
 801d14a:	2b00      	cmp	r3, #0
 801d14c:	d023      	beq.n	801d196 <UTIL_TIMER_Create+0x5e>
 801d14e:	683b      	ldr	r3, [r7, #0]
 801d150:	2b00      	cmp	r3, #0
 801d152:	d020      	beq.n	801d196 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801d154:	68fb      	ldr	r3, [r7, #12]
 801d156:	2200      	movs	r2, #0
 801d158:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801d15a:	4b11      	ldr	r3, [pc, #68]	; (801d1a0 <UTIL_TIMER_Create+0x68>)
 801d15c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d15e:	68b8      	ldr	r0, [r7, #8]
 801d160:	4798      	blx	r3
 801d162:	4602      	mov	r2, r0
 801d164:	68fb      	ldr	r3, [r7, #12]
 801d166:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801d168:	68fb      	ldr	r3, [r7, #12]
 801d16a:	2200      	movs	r2, #0
 801d16c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801d16e:	68fb      	ldr	r3, [r7, #12]
 801d170:	2200      	movs	r2, #0
 801d172:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801d174:	68fb      	ldr	r3, [r7, #12]
 801d176:	2200      	movs	r2, #0
 801d178:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801d17a:	68fb      	ldr	r3, [r7, #12]
 801d17c:	683a      	ldr	r2, [r7, #0]
 801d17e:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801d180:	68fb      	ldr	r3, [r7, #12]
 801d182:	69ba      	ldr	r2, [r7, #24]
 801d184:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801d186:	68fb      	ldr	r3, [r7, #12]
 801d188:	79fa      	ldrb	r2, [r7, #7]
 801d18a:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801d18c:	68fb      	ldr	r3, [r7, #12]
 801d18e:	2200      	movs	r2, #0
 801d190:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801d192:	2300      	movs	r3, #0
 801d194:	e000      	b.n	801d198 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801d196:	2301      	movs	r3, #1
  }
}
 801d198:	4618      	mov	r0, r3
 801d19a:	3710      	adds	r7, #16
 801d19c:	46bd      	mov	sp, r7
 801d19e:	bd80      	pop	{r7, pc}
 801d1a0:	0801e6a8 	.word	0x0801e6a8

0801d1a4 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801d1a4:	b580      	push	{r7, lr}
 801d1a6:	b08a      	sub	sp, #40	; 0x28
 801d1a8:	af00      	add	r7, sp, #0
 801d1aa:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801d1ac:	2300      	movs	r3, #0
 801d1ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801d1b2:	687b      	ldr	r3, [r7, #4]
 801d1b4:	2b00      	cmp	r3, #0
 801d1b6:	d056      	beq.n	801d266 <UTIL_TIMER_Start+0xc2>
 801d1b8:	6878      	ldr	r0, [r7, #4]
 801d1ba:	f000 f9a9 	bl	801d510 <TimerExists>
 801d1be:	4603      	mov	r3, r0
 801d1c0:	f083 0301 	eor.w	r3, r3, #1
 801d1c4:	b2db      	uxtb	r3, r3
 801d1c6:	2b00      	cmp	r3, #0
 801d1c8:	d04d      	beq.n	801d266 <UTIL_TIMER_Start+0xc2>
 801d1ca:	687b      	ldr	r3, [r7, #4]
 801d1cc:	7a5b      	ldrb	r3, [r3, #9]
 801d1ce:	2b00      	cmp	r3, #0
 801d1d0:	d149      	bne.n	801d266 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d1d2:	f3ef 8310 	mrs	r3, PRIMASK
 801d1d6:	613b      	str	r3, [r7, #16]
  return(result);
 801d1d8:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801d1da:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801d1dc:	b672      	cpsid	i
}
 801d1de:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801d1e0:	687b      	ldr	r3, [r7, #4]
 801d1e2:	685b      	ldr	r3, [r3, #4]
 801d1e4:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801d1e6:	4b24      	ldr	r3, [pc, #144]	; (801d278 <UTIL_TIMER_Start+0xd4>)
 801d1e8:	6a1b      	ldr	r3, [r3, #32]
 801d1ea:	4798      	blx	r3
 801d1ec:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801d1ee:	6a3a      	ldr	r2, [r7, #32]
 801d1f0:	69bb      	ldr	r3, [r7, #24]
 801d1f2:	429a      	cmp	r2, r3
 801d1f4:	d201      	bcs.n	801d1fa <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801d1f6:	69bb      	ldr	r3, [r7, #24]
 801d1f8:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801d1fa:	687b      	ldr	r3, [r7, #4]
 801d1fc:	6a3a      	ldr	r2, [r7, #32]
 801d1fe:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801d200:	687b      	ldr	r3, [r7, #4]
 801d202:	2200      	movs	r2, #0
 801d204:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801d206:	687b      	ldr	r3, [r7, #4]
 801d208:	2201      	movs	r2, #1
 801d20a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801d20c:	687b      	ldr	r3, [r7, #4]
 801d20e:	2200      	movs	r2, #0
 801d210:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801d212:	4b1a      	ldr	r3, [pc, #104]	; (801d27c <UTIL_TIMER_Start+0xd8>)
 801d214:	681b      	ldr	r3, [r3, #0]
 801d216:	2b00      	cmp	r3, #0
 801d218:	d106      	bne.n	801d228 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801d21a:	4b17      	ldr	r3, [pc, #92]	; (801d278 <UTIL_TIMER_Start+0xd4>)
 801d21c:	691b      	ldr	r3, [r3, #16]
 801d21e:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801d220:	6878      	ldr	r0, [r7, #4]
 801d222:	f000 f9eb 	bl	801d5fc <TimerInsertNewHeadTimer>
 801d226:	e017      	b.n	801d258 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801d228:	4b13      	ldr	r3, [pc, #76]	; (801d278 <UTIL_TIMER_Start+0xd4>)
 801d22a:	699b      	ldr	r3, [r3, #24]
 801d22c:	4798      	blx	r3
 801d22e:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801d230:	687b      	ldr	r3, [r7, #4]
 801d232:	681a      	ldr	r2, [r3, #0]
 801d234:	697b      	ldr	r3, [r7, #20]
 801d236:	441a      	add	r2, r3
 801d238:	687b      	ldr	r3, [r7, #4]
 801d23a:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801d23c:	687b      	ldr	r3, [r7, #4]
 801d23e:	681a      	ldr	r2, [r3, #0]
 801d240:	4b0e      	ldr	r3, [pc, #56]	; (801d27c <UTIL_TIMER_Start+0xd8>)
 801d242:	681b      	ldr	r3, [r3, #0]
 801d244:	681b      	ldr	r3, [r3, #0]
 801d246:	429a      	cmp	r2, r3
 801d248:	d203      	bcs.n	801d252 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801d24a:	6878      	ldr	r0, [r7, #4]
 801d24c:	f000 f9d6 	bl	801d5fc <TimerInsertNewHeadTimer>
 801d250:	e002      	b.n	801d258 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801d252:	6878      	ldr	r0, [r7, #4]
 801d254:	f000 f9a2 	bl	801d59c <TimerInsertTimer>
 801d258:	69fb      	ldr	r3, [r7, #28]
 801d25a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d25c:	68fb      	ldr	r3, [r7, #12]
 801d25e:	f383 8810 	msr	PRIMASK, r3
}
 801d262:	bf00      	nop
  {
 801d264:	e002      	b.n	801d26c <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801d266:	2301      	movs	r3, #1
 801d268:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 801d26c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801d270:	4618      	mov	r0, r3
 801d272:	3728      	adds	r7, #40	; 0x28
 801d274:	46bd      	mov	sp, r7
 801d276:	bd80      	pop	{r7, pc}
 801d278:	0801e6a8 	.word	0x0801e6a8
 801d27c:	20001cb4 	.word	0x20001cb4

0801d280 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801d280:	b580      	push	{r7, lr}
 801d282:	b088      	sub	sp, #32
 801d284:	af00      	add	r7, sp, #0
 801d286:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801d288:	2300      	movs	r3, #0
 801d28a:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801d28c:	687b      	ldr	r3, [r7, #4]
 801d28e:	2b00      	cmp	r3, #0
 801d290:	d05b      	beq.n	801d34a <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d292:	f3ef 8310 	mrs	r3, PRIMASK
 801d296:	60fb      	str	r3, [r7, #12]
  return(result);
 801d298:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801d29a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801d29c:	b672      	cpsid	i
}
 801d29e:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801d2a0:	4b2d      	ldr	r3, [pc, #180]	; (801d358 <UTIL_TIMER_Stop+0xd8>)
 801d2a2:	681b      	ldr	r3, [r3, #0]
 801d2a4:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801d2a6:	4b2c      	ldr	r3, [pc, #176]	; (801d358 <UTIL_TIMER_Stop+0xd8>)
 801d2a8:	681b      	ldr	r3, [r3, #0]
 801d2aa:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801d2ac:	687b      	ldr	r3, [r7, #4]
 801d2ae:	2201      	movs	r2, #1
 801d2b0:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801d2b2:	4b29      	ldr	r3, [pc, #164]	; (801d358 <UTIL_TIMER_Stop+0xd8>)
 801d2b4:	681b      	ldr	r3, [r3, #0]
 801d2b6:	2b00      	cmp	r3, #0
 801d2b8:	d041      	beq.n	801d33e <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801d2ba:	687b      	ldr	r3, [r7, #4]
 801d2bc:	2200      	movs	r2, #0
 801d2be:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801d2c0:	4b25      	ldr	r3, [pc, #148]	; (801d358 <UTIL_TIMER_Stop+0xd8>)
 801d2c2:	681b      	ldr	r3, [r3, #0]
 801d2c4:	687a      	ldr	r2, [r7, #4]
 801d2c6:	429a      	cmp	r2, r3
 801d2c8:	d134      	bne.n	801d334 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801d2ca:	4b23      	ldr	r3, [pc, #140]	; (801d358 <UTIL_TIMER_Stop+0xd8>)
 801d2cc:	681b      	ldr	r3, [r3, #0]
 801d2ce:	2200      	movs	r2, #0
 801d2d0:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801d2d2:	4b21      	ldr	r3, [pc, #132]	; (801d358 <UTIL_TIMER_Stop+0xd8>)
 801d2d4:	681b      	ldr	r3, [r3, #0]
 801d2d6:	695b      	ldr	r3, [r3, #20]
 801d2d8:	2b00      	cmp	r3, #0
 801d2da:	d00a      	beq.n	801d2f2 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801d2dc:	4b1e      	ldr	r3, [pc, #120]	; (801d358 <UTIL_TIMER_Stop+0xd8>)
 801d2de:	681b      	ldr	r3, [r3, #0]
 801d2e0:	695b      	ldr	r3, [r3, #20]
 801d2e2:	4a1d      	ldr	r2, [pc, #116]	; (801d358 <UTIL_TIMER_Stop+0xd8>)
 801d2e4:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801d2e6:	4b1c      	ldr	r3, [pc, #112]	; (801d358 <UTIL_TIMER_Stop+0xd8>)
 801d2e8:	681b      	ldr	r3, [r3, #0]
 801d2ea:	4618      	mov	r0, r3
 801d2ec:	f000 f92c 	bl	801d548 <TimerSetTimeout>
 801d2f0:	e023      	b.n	801d33a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801d2f2:	4b1a      	ldr	r3, [pc, #104]	; (801d35c <UTIL_TIMER_Stop+0xdc>)
 801d2f4:	68db      	ldr	r3, [r3, #12]
 801d2f6:	4798      	blx	r3
            TimerListHead = NULL;
 801d2f8:	4b17      	ldr	r3, [pc, #92]	; (801d358 <UTIL_TIMER_Stop+0xd8>)
 801d2fa:	2200      	movs	r2, #0
 801d2fc:	601a      	str	r2, [r3, #0]
 801d2fe:	e01c      	b.n	801d33a <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801d300:	697a      	ldr	r2, [r7, #20]
 801d302:	687b      	ldr	r3, [r7, #4]
 801d304:	429a      	cmp	r2, r3
 801d306:	d110      	bne.n	801d32a <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801d308:	697b      	ldr	r3, [r7, #20]
 801d30a:	695b      	ldr	r3, [r3, #20]
 801d30c:	2b00      	cmp	r3, #0
 801d30e:	d006      	beq.n	801d31e <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801d310:	697b      	ldr	r3, [r7, #20]
 801d312:	695b      	ldr	r3, [r3, #20]
 801d314:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801d316:	69bb      	ldr	r3, [r7, #24]
 801d318:	697a      	ldr	r2, [r7, #20]
 801d31a:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801d31c:	e00d      	b.n	801d33a <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801d31e:	2300      	movs	r3, #0
 801d320:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801d322:	69bb      	ldr	r3, [r7, #24]
 801d324:	697a      	ldr	r2, [r7, #20]
 801d326:	615a      	str	r2, [r3, #20]
            break;
 801d328:	e007      	b.n	801d33a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801d32a:	697b      	ldr	r3, [r7, #20]
 801d32c:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801d32e:	697b      	ldr	r3, [r7, #20]
 801d330:	695b      	ldr	r3, [r3, #20]
 801d332:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801d334:	697b      	ldr	r3, [r7, #20]
 801d336:	2b00      	cmp	r3, #0
 801d338:	d1e2      	bne.n	801d300 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801d33a:	2300      	movs	r3, #0
 801d33c:	77fb      	strb	r3, [r7, #31]
 801d33e:	693b      	ldr	r3, [r7, #16]
 801d340:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d342:	68bb      	ldr	r3, [r7, #8]
 801d344:	f383 8810 	msr	PRIMASK, r3
}
 801d348:	e001      	b.n	801d34e <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801d34a:	2301      	movs	r3, #1
 801d34c:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801d34e:	7ffb      	ldrb	r3, [r7, #31]
}
 801d350:	4618      	mov	r0, r3
 801d352:	3720      	adds	r7, #32
 801d354:	46bd      	mov	sp, r7
 801d356:	bd80      	pop	{r7, pc}
 801d358:	20001cb4 	.word	0x20001cb4
 801d35c:	0801e6a8 	.word	0x0801e6a8

0801d360 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801d360:	b580      	push	{r7, lr}
 801d362:	b084      	sub	sp, #16
 801d364:	af00      	add	r7, sp, #0
 801d366:	6078      	str	r0, [r7, #4]
 801d368:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801d36a:	2300      	movs	r3, #0
 801d36c:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801d36e:	687b      	ldr	r3, [r7, #4]
 801d370:	2b00      	cmp	r3, #0
 801d372:	d102      	bne.n	801d37a <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801d374:	2301      	movs	r3, #1
 801d376:	73fb      	strb	r3, [r7, #15]
 801d378:	e014      	b.n	801d3a4 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801d37a:	4b0d      	ldr	r3, [pc, #52]	; (801d3b0 <UTIL_TIMER_SetPeriod+0x50>)
 801d37c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d37e:	6838      	ldr	r0, [r7, #0]
 801d380:	4798      	blx	r3
 801d382:	4602      	mov	r2, r0
 801d384:	687b      	ldr	r3, [r7, #4]
 801d386:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801d388:	6878      	ldr	r0, [r7, #4]
 801d38a:	f000 f8c1 	bl	801d510 <TimerExists>
 801d38e:	4603      	mov	r3, r0
 801d390:	2b00      	cmp	r3, #0
 801d392:	d007      	beq.n	801d3a4 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801d394:	6878      	ldr	r0, [r7, #4]
 801d396:	f7ff ff73 	bl	801d280 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801d39a:	6878      	ldr	r0, [r7, #4]
 801d39c:	f7ff ff02 	bl	801d1a4 <UTIL_TIMER_Start>
 801d3a0:	4603      	mov	r3, r0
 801d3a2:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801d3a4:	7bfb      	ldrb	r3, [r7, #15]
}
 801d3a6:	4618      	mov	r0, r3
 801d3a8:	3710      	adds	r7, #16
 801d3aa:	46bd      	mov	sp, r7
 801d3ac:	bd80      	pop	{r7, pc}
 801d3ae:	bf00      	nop
 801d3b0:	0801e6a8 	.word	0x0801e6a8

0801d3b4 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801d3b4:	b590      	push	{r4, r7, lr}
 801d3b6:	b089      	sub	sp, #36	; 0x24
 801d3b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d3ba:	f3ef 8310 	mrs	r3, PRIMASK
 801d3be:	60bb      	str	r3, [r7, #8]
  return(result);
 801d3c0:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801d3c2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801d3c4:	b672      	cpsid	i
}
 801d3c6:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801d3c8:	4b38      	ldr	r3, [pc, #224]	; (801d4ac <UTIL_TIMER_IRQ_Handler+0xf8>)
 801d3ca:	695b      	ldr	r3, [r3, #20]
 801d3cc:	4798      	blx	r3
 801d3ce:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801d3d0:	4b36      	ldr	r3, [pc, #216]	; (801d4ac <UTIL_TIMER_IRQ_Handler+0xf8>)
 801d3d2:	691b      	ldr	r3, [r3, #16]
 801d3d4:	4798      	blx	r3
 801d3d6:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801d3d8:	693a      	ldr	r2, [r7, #16]
 801d3da:	697b      	ldr	r3, [r7, #20]
 801d3dc:	1ad3      	subs	r3, r2, r3
 801d3de:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801d3e0:	4b33      	ldr	r3, [pc, #204]	; (801d4b0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d3e2:	681b      	ldr	r3, [r3, #0]
 801d3e4:	2b00      	cmp	r3, #0
 801d3e6:	d037      	beq.n	801d458 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801d3e8:	4b31      	ldr	r3, [pc, #196]	; (801d4b0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d3ea:	681b      	ldr	r3, [r3, #0]
 801d3ec:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801d3ee:	69fb      	ldr	r3, [r7, #28]
 801d3f0:	681b      	ldr	r3, [r3, #0]
 801d3f2:	68fa      	ldr	r2, [r7, #12]
 801d3f4:	429a      	cmp	r2, r3
 801d3f6:	d206      	bcs.n	801d406 <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801d3f8:	69fb      	ldr	r3, [r7, #28]
 801d3fa:	681a      	ldr	r2, [r3, #0]
 801d3fc:	68fb      	ldr	r3, [r7, #12]
 801d3fe:	1ad2      	subs	r2, r2, r3
 801d400:	69fb      	ldr	r3, [r7, #28]
 801d402:	601a      	str	r2, [r3, #0]
 801d404:	e002      	b.n	801d40c <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801d406:	69fb      	ldr	r3, [r7, #28]
 801d408:	2200      	movs	r2, #0
 801d40a:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801d40c:	69fb      	ldr	r3, [r7, #28]
 801d40e:	695b      	ldr	r3, [r3, #20]
 801d410:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801d412:	69fb      	ldr	r3, [r7, #28]
 801d414:	2b00      	cmp	r3, #0
 801d416:	d1ea      	bne.n	801d3ee <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801d418:	e01e      	b.n	801d458 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801d41a:	4b25      	ldr	r3, [pc, #148]	; (801d4b0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d41c:	681b      	ldr	r3, [r3, #0]
 801d41e:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801d420:	4b23      	ldr	r3, [pc, #140]	; (801d4b0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d422:	681b      	ldr	r3, [r3, #0]
 801d424:	695b      	ldr	r3, [r3, #20]
 801d426:	4a22      	ldr	r2, [pc, #136]	; (801d4b0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d428:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801d42a:	69fb      	ldr	r3, [r7, #28]
 801d42c:	2200      	movs	r2, #0
 801d42e:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801d430:	69fb      	ldr	r3, [r7, #28]
 801d432:	2200      	movs	r2, #0
 801d434:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801d436:	69fb      	ldr	r3, [r7, #28]
 801d438:	68db      	ldr	r3, [r3, #12]
 801d43a:	69fa      	ldr	r2, [r7, #28]
 801d43c:	6912      	ldr	r2, [r2, #16]
 801d43e:	4610      	mov	r0, r2
 801d440:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801d442:	69fb      	ldr	r3, [r7, #28]
 801d444:	7adb      	ldrb	r3, [r3, #11]
 801d446:	2b01      	cmp	r3, #1
 801d448:	d106      	bne.n	801d458 <UTIL_TIMER_IRQ_Handler+0xa4>
 801d44a:	69fb      	ldr	r3, [r7, #28]
 801d44c:	7a9b      	ldrb	r3, [r3, #10]
 801d44e:	2b00      	cmp	r3, #0
 801d450:	d102      	bne.n	801d458 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801d452:	69f8      	ldr	r0, [r7, #28]
 801d454:	f7ff fea6 	bl	801d1a4 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801d458:	4b15      	ldr	r3, [pc, #84]	; (801d4b0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d45a:	681b      	ldr	r3, [r3, #0]
 801d45c:	2b00      	cmp	r3, #0
 801d45e:	d00d      	beq.n	801d47c <UTIL_TIMER_IRQ_Handler+0xc8>
 801d460:	4b13      	ldr	r3, [pc, #76]	; (801d4b0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d462:	681b      	ldr	r3, [r3, #0]
 801d464:	681b      	ldr	r3, [r3, #0]
 801d466:	2b00      	cmp	r3, #0
 801d468:	d0d7      	beq.n	801d41a <UTIL_TIMER_IRQ_Handler+0x66>
 801d46a:	4b11      	ldr	r3, [pc, #68]	; (801d4b0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d46c:	681b      	ldr	r3, [r3, #0]
 801d46e:	681c      	ldr	r4, [r3, #0]
 801d470:	4b0e      	ldr	r3, [pc, #56]	; (801d4ac <UTIL_TIMER_IRQ_Handler+0xf8>)
 801d472:	699b      	ldr	r3, [r3, #24]
 801d474:	4798      	blx	r3
 801d476:	4603      	mov	r3, r0
 801d478:	429c      	cmp	r4, r3
 801d47a:	d3ce      	bcc.n	801d41a <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801d47c:	4b0c      	ldr	r3, [pc, #48]	; (801d4b0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d47e:	681b      	ldr	r3, [r3, #0]
 801d480:	2b00      	cmp	r3, #0
 801d482:	d009      	beq.n	801d498 <UTIL_TIMER_IRQ_Handler+0xe4>
 801d484:	4b0a      	ldr	r3, [pc, #40]	; (801d4b0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d486:	681b      	ldr	r3, [r3, #0]
 801d488:	7a1b      	ldrb	r3, [r3, #8]
 801d48a:	2b00      	cmp	r3, #0
 801d48c:	d104      	bne.n	801d498 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801d48e:	4b08      	ldr	r3, [pc, #32]	; (801d4b0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d490:	681b      	ldr	r3, [r3, #0]
 801d492:	4618      	mov	r0, r3
 801d494:	f000 f858 	bl	801d548 <TimerSetTimeout>
 801d498:	69bb      	ldr	r3, [r7, #24]
 801d49a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d49c:	687b      	ldr	r3, [r7, #4]
 801d49e:	f383 8810 	msr	PRIMASK, r3
}
 801d4a2:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801d4a4:	bf00      	nop
 801d4a6:	3724      	adds	r7, #36	; 0x24
 801d4a8:	46bd      	mov	sp, r7
 801d4aa:	bd90      	pop	{r4, r7, pc}
 801d4ac:	0801e6a8 	.word	0x0801e6a8
 801d4b0:	20001cb4 	.word	0x20001cb4

0801d4b4 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801d4b4:	b580      	push	{r7, lr}
 801d4b6:	b082      	sub	sp, #8
 801d4b8:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801d4ba:	4b06      	ldr	r3, [pc, #24]	; (801d4d4 <UTIL_TIMER_GetCurrentTime+0x20>)
 801d4bc:	69db      	ldr	r3, [r3, #28]
 801d4be:	4798      	blx	r3
 801d4c0:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801d4c2:	4b04      	ldr	r3, [pc, #16]	; (801d4d4 <UTIL_TIMER_GetCurrentTime+0x20>)
 801d4c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d4c6:	6878      	ldr	r0, [r7, #4]
 801d4c8:	4798      	blx	r3
 801d4ca:	4603      	mov	r3, r0
}
 801d4cc:	4618      	mov	r0, r3
 801d4ce:	3708      	adds	r7, #8
 801d4d0:	46bd      	mov	sp, r7
 801d4d2:	bd80      	pop	{r7, pc}
 801d4d4:	0801e6a8 	.word	0x0801e6a8

0801d4d8 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801d4d8:	b580      	push	{r7, lr}
 801d4da:	b084      	sub	sp, #16
 801d4dc:	af00      	add	r7, sp, #0
 801d4de:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801d4e0:	4b0a      	ldr	r3, [pc, #40]	; (801d50c <UTIL_TIMER_GetElapsedTime+0x34>)
 801d4e2:	69db      	ldr	r3, [r3, #28]
 801d4e4:	4798      	blx	r3
 801d4e6:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801d4e8:	4b08      	ldr	r3, [pc, #32]	; (801d50c <UTIL_TIMER_GetElapsedTime+0x34>)
 801d4ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d4ec:	6878      	ldr	r0, [r7, #4]
 801d4ee:	4798      	blx	r3
 801d4f0:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801d4f2:	4b06      	ldr	r3, [pc, #24]	; (801d50c <UTIL_TIMER_GetElapsedTime+0x34>)
 801d4f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d4f6:	68f9      	ldr	r1, [r7, #12]
 801d4f8:	68ba      	ldr	r2, [r7, #8]
 801d4fa:	1a8a      	subs	r2, r1, r2
 801d4fc:	4610      	mov	r0, r2
 801d4fe:	4798      	blx	r3
 801d500:	4603      	mov	r3, r0
}
 801d502:	4618      	mov	r0, r3
 801d504:	3710      	adds	r7, #16
 801d506:	46bd      	mov	sp, r7
 801d508:	bd80      	pop	{r7, pc}
 801d50a:	bf00      	nop
 801d50c:	0801e6a8 	.word	0x0801e6a8

0801d510 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801d510:	b480      	push	{r7}
 801d512:	b085      	sub	sp, #20
 801d514:	af00      	add	r7, sp, #0
 801d516:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801d518:	4b0a      	ldr	r3, [pc, #40]	; (801d544 <TimerExists+0x34>)
 801d51a:	681b      	ldr	r3, [r3, #0]
 801d51c:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801d51e:	e008      	b.n	801d532 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801d520:	68fa      	ldr	r2, [r7, #12]
 801d522:	687b      	ldr	r3, [r7, #4]
 801d524:	429a      	cmp	r2, r3
 801d526:	d101      	bne.n	801d52c <TimerExists+0x1c>
    {
      return true;
 801d528:	2301      	movs	r3, #1
 801d52a:	e006      	b.n	801d53a <TimerExists+0x2a>
    }
    cur = cur->Next;
 801d52c:	68fb      	ldr	r3, [r7, #12]
 801d52e:	695b      	ldr	r3, [r3, #20]
 801d530:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801d532:	68fb      	ldr	r3, [r7, #12]
 801d534:	2b00      	cmp	r3, #0
 801d536:	d1f3      	bne.n	801d520 <TimerExists+0x10>
  }
  return false;
 801d538:	2300      	movs	r3, #0
}
 801d53a:	4618      	mov	r0, r3
 801d53c:	3714      	adds	r7, #20
 801d53e:	46bd      	mov	sp, r7
 801d540:	bc80      	pop	{r7}
 801d542:	4770      	bx	lr
 801d544:	20001cb4 	.word	0x20001cb4

0801d548 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801d548:	b590      	push	{r4, r7, lr}
 801d54a:	b085      	sub	sp, #20
 801d54c:	af00      	add	r7, sp, #0
 801d54e:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801d550:	4b11      	ldr	r3, [pc, #68]	; (801d598 <TimerSetTimeout+0x50>)
 801d552:	6a1b      	ldr	r3, [r3, #32]
 801d554:	4798      	blx	r3
 801d556:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801d558:	687b      	ldr	r3, [r7, #4]
 801d55a:	2201      	movs	r2, #1
 801d55c:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801d55e:	687b      	ldr	r3, [r7, #4]
 801d560:	681c      	ldr	r4, [r3, #0]
 801d562:	4b0d      	ldr	r3, [pc, #52]	; (801d598 <TimerSetTimeout+0x50>)
 801d564:	699b      	ldr	r3, [r3, #24]
 801d566:	4798      	blx	r3
 801d568:	4602      	mov	r2, r0
 801d56a:	68fb      	ldr	r3, [r7, #12]
 801d56c:	4413      	add	r3, r2
 801d56e:	429c      	cmp	r4, r3
 801d570:	d207      	bcs.n	801d582 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801d572:	4b09      	ldr	r3, [pc, #36]	; (801d598 <TimerSetTimeout+0x50>)
 801d574:	699b      	ldr	r3, [r3, #24]
 801d576:	4798      	blx	r3
 801d578:	4602      	mov	r2, r0
 801d57a:	68fb      	ldr	r3, [r7, #12]
 801d57c:	441a      	add	r2, r3
 801d57e:	687b      	ldr	r3, [r7, #4]
 801d580:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801d582:	4b05      	ldr	r3, [pc, #20]	; (801d598 <TimerSetTimeout+0x50>)
 801d584:	689b      	ldr	r3, [r3, #8]
 801d586:	687a      	ldr	r2, [r7, #4]
 801d588:	6812      	ldr	r2, [r2, #0]
 801d58a:	4610      	mov	r0, r2
 801d58c:	4798      	blx	r3
}
 801d58e:	bf00      	nop
 801d590:	3714      	adds	r7, #20
 801d592:	46bd      	mov	sp, r7
 801d594:	bd90      	pop	{r4, r7, pc}
 801d596:	bf00      	nop
 801d598:	0801e6a8 	.word	0x0801e6a8

0801d59c <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801d59c:	b480      	push	{r7}
 801d59e:	b085      	sub	sp, #20
 801d5a0:	af00      	add	r7, sp, #0
 801d5a2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801d5a4:	4b14      	ldr	r3, [pc, #80]	; (801d5f8 <TimerInsertTimer+0x5c>)
 801d5a6:	681b      	ldr	r3, [r3, #0]
 801d5a8:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801d5aa:	4b13      	ldr	r3, [pc, #76]	; (801d5f8 <TimerInsertTimer+0x5c>)
 801d5ac:	681b      	ldr	r3, [r3, #0]
 801d5ae:	695b      	ldr	r3, [r3, #20]
 801d5b0:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801d5b2:	e012      	b.n	801d5da <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801d5b4:	687b      	ldr	r3, [r7, #4]
 801d5b6:	681a      	ldr	r2, [r3, #0]
 801d5b8:	68bb      	ldr	r3, [r7, #8]
 801d5ba:	681b      	ldr	r3, [r3, #0]
 801d5bc:	429a      	cmp	r2, r3
 801d5be:	d905      	bls.n	801d5cc <TimerInsertTimer+0x30>
    {
        cur = next;
 801d5c0:	68bb      	ldr	r3, [r7, #8]
 801d5c2:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801d5c4:	68bb      	ldr	r3, [r7, #8]
 801d5c6:	695b      	ldr	r3, [r3, #20]
 801d5c8:	60bb      	str	r3, [r7, #8]
 801d5ca:	e006      	b.n	801d5da <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801d5cc:	68fb      	ldr	r3, [r7, #12]
 801d5ce:	687a      	ldr	r2, [r7, #4]
 801d5d0:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801d5d2:	687b      	ldr	r3, [r7, #4]
 801d5d4:	68ba      	ldr	r2, [r7, #8]
 801d5d6:	615a      	str	r2, [r3, #20]
        return;
 801d5d8:	e009      	b.n	801d5ee <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801d5da:	68fb      	ldr	r3, [r7, #12]
 801d5dc:	695b      	ldr	r3, [r3, #20]
 801d5de:	2b00      	cmp	r3, #0
 801d5e0:	d1e8      	bne.n	801d5b4 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801d5e2:	68fb      	ldr	r3, [r7, #12]
 801d5e4:	687a      	ldr	r2, [r7, #4]
 801d5e6:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801d5e8:	687b      	ldr	r3, [r7, #4]
 801d5ea:	2200      	movs	r2, #0
 801d5ec:	615a      	str	r2, [r3, #20]
}
 801d5ee:	3714      	adds	r7, #20
 801d5f0:	46bd      	mov	sp, r7
 801d5f2:	bc80      	pop	{r7}
 801d5f4:	4770      	bx	lr
 801d5f6:	bf00      	nop
 801d5f8:	20001cb4 	.word	0x20001cb4

0801d5fc <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801d5fc:	b580      	push	{r7, lr}
 801d5fe:	b084      	sub	sp, #16
 801d600:	af00      	add	r7, sp, #0
 801d602:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801d604:	4b0b      	ldr	r3, [pc, #44]	; (801d634 <TimerInsertNewHeadTimer+0x38>)
 801d606:	681b      	ldr	r3, [r3, #0]
 801d608:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801d60a:	68fb      	ldr	r3, [r7, #12]
 801d60c:	2b00      	cmp	r3, #0
 801d60e:	d002      	beq.n	801d616 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801d610:	68fb      	ldr	r3, [r7, #12]
 801d612:	2200      	movs	r2, #0
 801d614:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801d616:	687b      	ldr	r3, [r7, #4]
 801d618:	68fa      	ldr	r2, [r7, #12]
 801d61a:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801d61c:	4a05      	ldr	r2, [pc, #20]	; (801d634 <TimerInsertNewHeadTimer+0x38>)
 801d61e:	687b      	ldr	r3, [r7, #4]
 801d620:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801d622:	4b04      	ldr	r3, [pc, #16]	; (801d634 <TimerInsertNewHeadTimer+0x38>)
 801d624:	681b      	ldr	r3, [r3, #0]
 801d626:	4618      	mov	r0, r3
 801d628:	f7ff ff8e 	bl	801d548 <TimerSetTimeout>
}
 801d62c:	bf00      	nop
 801d62e:	3710      	adds	r7, #16
 801d630:	46bd      	mov	sp, r7
 801d632:	bd80      	pop	{r7, pc}
 801d634:	20001cb4 	.word	0x20001cb4

0801d638 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801d638:	b580      	push	{r7, lr}
 801d63a:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801d63c:	2218      	movs	r2, #24
 801d63e:	2100      	movs	r1, #0
 801d640:	4807      	ldr	r0, [pc, #28]	; (801d660 <UTIL_ADV_TRACE_Init+0x28>)
 801d642:	f7fe fffa 	bl	801c63a <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801d646:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801d64a:	2100      	movs	r1, #0
 801d64c:	4805      	ldr	r0, [pc, #20]	; (801d664 <UTIL_ADV_TRACE_Init+0x2c>)
 801d64e:	f7fe fff4 	bl	801c63a <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801d652:	4b05      	ldr	r3, [pc, #20]	; (801d668 <UTIL_ADV_TRACE_Init+0x30>)
 801d654:	681b      	ldr	r3, [r3, #0]
 801d656:	4805      	ldr	r0, [pc, #20]	; (801d66c <UTIL_ADV_TRACE_Init+0x34>)
 801d658:	4798      	blx	r3
 801d65a:	4603      	mov	r3, r0
}
 801d65c:	4618      	mov	r0, r3
 801d65e:	bd80      	pop	{r7, pc}
 801d660:	20001cb8 	.word	0x20001cb8
 801d664:	20001cd0 	.word	0x20001cd0
 801d668:	0801e6e8 	.word	0x0801e6e8
 801d66c:	0801d8d9 	.word	0x0801d8d9

0801d670 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801d670:	b480      	push	{r7}
 801d672:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801d674:	4b06      	ldr	r3, [pc, #24]	; (801d690 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801d676:	8a5a      	ldrh	r2, [r3, #18]
 801d678:	4b05      	ldr	r3, [pc, #20]	; (801d690 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801d67a:	8a1b      	ldrh	r3, [r3, #16]
 801d67c:	429a      	cmp	r2, r3
 801d67e:	d101      	bne.n	801d684 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801d680:	2301      	movs	r3, #1
 801d682:	e000      	b.n	801d686 <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801d684:	2300      	movs	r3, #0
}
 801d686:	4618      	mov	r0, r3
 801d688:	46bd      	mov	sp, r7
 801d68a:	bc80      	pop	{r7}
 801d68c:	4770      	bx	lr
 801d68e:	bf00      	nop
 801d690:	20001cb8 	.word	0x20001cb8

0801d694 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801d694:	b408      	push	{r3}
 801d696:	b580      	push	{r7, lr}
 801d698:	b08d      	sub	sp, #52	; 0x34
 801d69a:	af00      	add	r7, sp, #0
 801d69c:	60f8      	str	r0, [r7, #12]
 801d69e:	60b9      	str	r1, [r7, #8]
 801d6a0:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801d6a2:	2300      	movs	r3, #0
 801d6a4:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801d6a6:	2300      	movs	r3, #0
 801d6a8:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801d6aa:	4b37      	ldr	r3, [pc, #220]	; (801d788 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801d6ac:	7a1b      	ldrb	r3, [r3, #8]
 801d6ae:	461a      	mov	r2, r3
 801d6b0:	68fb      	ldr	r3, [r7, #12]
 801d6b2:	4293      	cmp	r3, r2
 801d6b4:	d902      	bls.n	801d6bc <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801d6b6:	f06f 0304 	mvn.w	r3, #4
 801d6ba:	e05e      	b.n	801d77a <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801d6bc:	4b32      	ldr	r3, [pc, #200]	; (801d788 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801d6be:	68da      	ldr	r2, [r3, #12]
 801d6c0:	68bb      	ldr	r3, [r7, #8]
 801d6c2:	4013      	ands	r3, r2
 801d6c4:	68ba      	ldr	r2, [r7, #8]
 801d6c6:	429a      	cmp	r2, r3
 801d6c8:	d002      	beq.n	801d6d0 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801d6ca:	f06f 0305 	mvn.w	r3, #5
 801d6ce:	e054      	b.n	801d77a <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801d6d0:	4b2d      	ldr	r3, [pc, #180]	; (801d788 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801d6d2:	685b      	ldr	r3, [r3, #4]
 801d6d4:	2b00      	cmp	r3, #0
 801d6d6:	d00a      	beq.n	801d6ee <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801d6d8:	687b      	ldr	r3, [r7, #4]
 801d6da:	2b00      	cmp	r3, #0
 801d6dc:	d007      	beq.n	801d6ee <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801d6de:	4b2a      	ldr	r3, [pc, #168]	; (801d788 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801d6e0:	685b      	ldr	r3, [r3, #4]
 801d6e2:	f107 0116 	add.w	r1, r7, #22
 801d6e6:	f107 0218 	add.w	r2, r7, #24
 801d6ea:	4610      	mov	r0, r2
 801d6ec:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801d6ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d6f2:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801d6f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d6f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801d6f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 801d6fc:	4823      	ldr	r0, [pc, #140]	; (801d78c <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801d6fe:	f7ff fa29 	bl	801cb54 <tiny_vsnprintf_like>
 801d702:	4603      	mov	r3, r0
 801d704:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 801d706:	f000 f9f1 	bl	801daec <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801d70a:	8afa      	ldrh	r2, [r7, #22]
 801d70c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801d70e:	4413      	add	r3, r2
 801d710:	b29b      	uxth	r3, r3
 801d712:	f107 0214 	add.w	r2, r7, #20
 801d716:	4611      	mov	r1, r2
 801d718:	4618      	mov	r0, r3
 801d71a:	f000 f969 	bl	801d9f0 <TRACE_AllocateBufer>
 801d71e:	4603      	mov	r3, r0
 801d720:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801d724:	d025      	beq.n	801d772 <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801d726:	2300      	movs	r3, #0
 801d728:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801d72a:	e00e      	b.n	801d74a <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801d72c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801d72e:	8aba      	ldrh	r2, [r7, #20]
 801d730:	3330      	adds	r3, #48	; 0x30
 801d732:	443b      	add	r3, r7
 801d734:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801d738:	4b15      	ldr	r3, [pc, #84]	; (801d790 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801d73a:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801d73c:	8abb      	ldrh	r3, [r7, #20]
 801d73e:	3301      	adds	r3, #1
 801d740:	b29b      	uxth	r3, r3
 801d742:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801d744:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801d746:	3301      	adds	r3, #1
 801d748:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801d74a:	8afb      	ldrh	r3, [r7, #22]
 801d74c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801d74e:	429a      	cmp	r2, r3
 801d750:	d3ec      	bcc.n	801d72c <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801d752:	8abb      	ldrh	r3, [r7, #20]
 801d754:	461a      	mov	r2, r3
 801d756:	4b0e      	ldr	r3, [pc, #56]	; (801d790 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801d758:	18d0      	adds	r0, r2, r3
 801d75a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d75c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801d75e:	f44f 7100 	mov.w	r1, #512	; 0x200
 801d762:	f7ff f9f7 	bl	801cb54 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801d766:	f000 f9df 	bl	801db28 <TRACE_UnLock>

    return TRACE_Send();
 801d76a:	f000 f831 	bl	801d7d0 <TRACE_Send>
 801d76e:	4603      	mov	r3, r0
 801d770:	e003      	b.n	801d77a <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801d772:	f000 f9d9 	bl	801db28 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801d776:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801d77a:	4618      	mov	r0, r3
 801d77c:	3734      	adds	r7, #52	; 0x34
 801d77e:	46bd      	mov	sp, r7
 801d780:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801d784:	b001      	add	sp, #4
 801d786:	4770      	bx	lr
 801d788:	20001cb8 	.word	0x20001cb8
 801d78c:	200020d0 	.word	0x200020d0
 801d790:	20001cd0 	.word	0x20001cd0

0801d794 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801d794:	b480      	push	{r7}
 801d796:	b083      	sub	sp, #12
 801d798:	af00      	add	r7, sp, #0
 801d79a:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801d79c:	4a03      	ldr	r2, [pc, #12]	; (801d7ac <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801d79e:	687b      	ldr	r3, [r7, #4]
 801d7a0:	6053      	str	r3, [r2, #4]
}
 801d7a2:	bf00      	nop
 801d7a4:	370c      	adds	r7, #12
 801d7a6:	46bd      	mov	sp, r7
 801d7a8:	bc80      	pop	{r7}
 801d7aa:	4770      	bx	lr
 801d7ac:	20001cb8 	.word	0x20001cb8

0801d7b0 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801d7b0:	b480      	push	{r7}
 801d7b2:	b083      	sub	sp, #12
 801d7b4:	af00      	add	r7, sp, #0
 801d7b6:	4603      	mov	r3, r0
 801d7b8:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801d7ba:	4a04      	ldr	r2, [pc, #16]	; (801d7cc <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801d7bc:	79fb      	ldrb	r3, [r7, #7]
 801d7be:	7213      	strb	r3, [r2, #8]
}
 801d7c0:	bf00      	nop
 801d7c2:	370c      	adds	r7, #12
 801d7c4:	46bd      	mov	sp, r7
 801d7c6:	bc80      	pop	{r7}
 801d7c8:	4770      	bx	lr
 801d7ca:	bf00      	nop
 801d7cc:	20001cb8 	.word	0x20001cb8

0801d7d0 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801d7d0:	b580      	push	{r7, lr}
 801d7d2:	b088      	sub	sp, #32
 801d7d4:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801d7d6:	2300      	movs	r3, #0
 801d7d8:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801d7da:	2300      	movs	r3, #0
 801d7dc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d7de:	f3ef 8310 	mrs	r3, PRIMASK
 801d7e2:	613b      	str	r3, [r7, #16]
  return(result);
 801d7e4:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801d7e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d7e8:	b672      	cpsid	i
}
 801d7ea:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801d7ec:	f000 f9ba 	bl	801db64 <TRACE_IsLocked>
 801d7f0:	4603      	mov	r3, r0
 801d7f2:	2b00      	cmp	r3, #0
 801d7f4:	d15d      	bne.n	801d8b2 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801d7f6:	f000 f979 	bl	801daec <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801d7fa:	4b34      	ldr	r3, [pc, #208]	; (801d8cc <TRACE_Send+0xfc>)
 801d7fc:	8a1a      	ldrh	r2, [r3, #16]
 801d7fe:	4b33      	ldr	r3, [pc, #204]	; (801d8cc <TRACE_Send+0xfc>)
 801d800:	8a5b      	ldrh	r3, [r3, #18]
 801d802:	429a      	cmp	r2, r3
 801d804:	d04d      	beq.n	801d8a2 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801d806:	4b31      	ldr	r3, [pc, #196]	; (801d8cc <TRACE_Send+0xfc>)
 801d808:	789b      	ldrb	r3, [r3, #2]
 801d80a:	2b01      	cmp	r3, #1
 801d80c:	d117      	bne.n	801d83e <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801d80e:	4b2f      	ldr	r3, [pc, #188]	; (801d8cc <TRACE_Send+0xfc>)
 801d810:	881a      	ldrh	r2, [r3, #0]
 801d812:	4b2e      	ldr	r3, [pc, #184]	; (801d8cc <TRACE_Send+0xfc>)
 801d814:	8a1b      	ldrh	r3, [r3, #16]
 801d816:	1ad3      	subs	r3, r2, r3
 801d818:	b29a      	uxth	r2, r3
 801d81a:	4b2c      	ldr	r3, [pc, #176]	; (801d8cc <TRACE_Send+0xfc>)
 801d81c:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801d81e:	4b2b      	ldr	r3, [pc, #172]	; (801d8cc <TRACE_Send+0xfc>)
 801d820:	2202      	movs	r2, #2
 801d822:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801d824:	4b29      	ldr	r3, [pc, #164]	; (801d8cc <TRACE_Send+0xfc>)
 801d826:	2200      	movs	r2, #0
 801d828:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801d82a:	4b28      	ldr	r3, [pc, #160]	; (801d8cc <TRACE_Send+0xfc>)
 801d82c:	8a9b      	ldrh	r3, [r3, #20]
 801d82e:	2b00      	cmp	r3, #0
 801d830:	d105      	bne.n	801d83e <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801d832:	4b26      	ldr	r3, [pc, #152]	; (801d8cc <TRACE_Send+0xfc>)
 801d834:	2200      	movs	r2, #0
 801d836:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801d838:	4b24      	ldr	r3, [pc, #144]	; (801d8cc <TRACE_Send+0xfc>)
 801d83a:	2200      	movs	r2, #0
 801d83c:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801d83e:	4b23      	ldr	r3, [pc, #140]	; (801d8cc <TRACE_Send+0xfc>)
 801d840:	789b      	ldrb	r3, [r3, #2]
 801d842:	2b00      	cmp	r3, #0
 801d844:	d115      	bne.n	801d872 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801d846:	4b21      	ldr	r3, [pc, #132]	; (801d8cc <TRACE_Send+0xfc>)
 801d848:	8a5a      	ldrh	r2, [r3, #18]
 801d84a:	4b20      	ldr	r3, [pc, #128]	; (801d8cc <TRACE_Send+0xfc>)
 801d84c:	8a1b      	ldrh	r3, [r3, #16]
 801d84e:	429a      	cmp	r2, r3
 801d850:	d908      	bls.n	801d864 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801d852:	4b1e      	ldr	r3, [pc, #120]	; (801d8cc <TRACE_Send+0xfc>)
 801d854:	8a5a      	ldrh	r2, [r3, #18]
 801d856:	4b1d      	ldr	r3, [pc, #116]	; (801d8cc <TRACE_Send+0xfc>)
 801d858:	8a1b      	ldrh	r3, [r3, #16]
 801d85a:	1ad3      	subs	r3, r2, r3
 801d85c:	b29a      	uxth	r2, r3
 801d85e:	4b1b      	ldr	r3, [pc, #108]	; (801d8cc <TRACE_Send+0xfc>)
 801d860:	829a      	strh	r2, [r3, #20]
 801d862:	e006      	b.n	801d872 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801d864:	4b19      	ldr	r3, [pc, #100]	; (801d8cc <TRACE_Send+0xfc>)
 801d866:	8a1b      	ldrh	r3, [r3, #16]
 801d868:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801d86c:	b29a      	uxth	r2, r3
 801d86e:	4b17      	ldr	r3, [pc, #92]	; (801d8cc <TRACE_Send+0xfc>)
 801d870:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801d872:	4b16      	ldr	r3, [pc, #88]	; (801d8cc <TRACE_Send+0xfc>)
 801d874:	8a1b      	ldrh	r3, [r3, #16]
 801d876:	461a      	mov	r2, r3
 801d878:	4b15      	ldr	r3, [pc, #84]	; (801d8d0 <TRACE_Send+0x100>)
 801d87a:	4413      	add	r3, r2
 801d87c:	61bb      	str	r3, [r7, #24]
 801d87e:	697b      	ldr	r3, [r7, #20]
 801d880:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d882:	68fb      	ldr	r3, [r7, #12]
 801d884:	f383 8810 	msr	PRIMASK, r3
}
 801d888:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801d88a:	f7e4 fc8b 	bl	80021a4 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801d88e:	4b11      	ldr	r3, [pc, #68]	; (801d8d4 <TRACE_Send+0x104>)
 801d890:	68db      	ldr	r3, [r3, #12]
 801d892:	4a0e      	ldr	r2, [pc, #56]	; (801d8cc <TRACE_Send+0xfc>)
 801d894:	8a92      	ldrh	r2, [r2, #20]
 801d896:	4611      	mov	r1, r2
 801d898:	69b8      	ldr	r0, [r7, #24]
 801d89a:	4798      	blx	r3
 801d89c:	4603      	mov	r3, r0
 801d89e:	77fb      	strb	r3, [r7, #31]
 801d8a0:	e00d      	b.n	801d8be <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801d8a2:	f000 f941 	bl	801db28 <TRACE_UnLock>
 801d8a6:	697b      	ldr	r3, [r7, #20]
 801d8a8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d8aa:	68bb      	ldr	r3, [r7, #8]
 801d8ac:	f383 8810 	msr	PRIMASK, r3
}
 801d8b0:	e005      	b.n	801d8be <TRACE_Send+0xee>
 801d8b2:	697b      	ldr	r3, [r7, #20]
 801d8b4:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d8b6:	687b      	ldr	r3, [r7, #4]
 801d8b8:	f383 8810 	msr	PRIMASK, r3
}
 801d8bc:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801d8be:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801d8c2:	4618      	mov	r0, r3
 801d8c4:	3720      	adds	r7, #32
 801d8c6:	46bd      	mov	sp, r7
 801d8c8:	bd80      	pop	{r7, pc}
 801d8ca:	bf00      	nop
 801d8cc:	20001cb8 	.word	0x20001cb8
 801d8d0:	20001cd0 	.word	0x20001cd0
 801d8d4:	0801e6e8 	.word	0x0801e6e8

0801d8d8 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801d8d8:	b580      	push	{r7, lr}
 801d8da:	b088      	sub	sp, #32
 801d8dc:	af00      	add	r7, sp, #0
 801d8de:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801d8e0:	2300      	movs	r3, #0
 801d8e2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d8e4:	f3ef 8310 	mrs	r3, PRIMASK
 801d8e8:	617b      	str	r3, [r7, #20]
  return(result);
 801d8ea:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801d8ec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801d8ee:	b672      	cpsid	i
}
 801d8f0:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801d8f2:	4b3c      	ldr	r3, [pc, #240]	; (801d9e4 <TRACE_TxCpltCallback+0x10c>)
 801d8f4:	789b      	ldrb	r3, [r3, #2]
 801d8f6:	2b02      	cmp	r3, #2
 801d8f8:	d106      	bne.n	801d908 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801d8fa:	4b3a      	ldr	r3, [pc, #232]	; (801d9e4 <TRACE_TxCpltCallback+0x10c>)
 801d8fc:	2200      	movs	r2, #0
 801d8fe:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801d900:	4b38      	ldr	r3, [pc, #224]	; (801d9e4 <TRACE_TxCpltCallback+0x10c>)
 801d902:	2200      	movs	r2, #0
 801d904:	821a      	strh	r2, [r3, #16]
 801d906:	e00a      	b.n	801d91e <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801d908:	4b36      	ldr	r3, [pc, #216]	; (801d9e4 <TRACE_TxCpltCallback+0x10c>)
 801d90a:	8a1a      	ldrh	r2, [r3, #16]
 801d90c:	4b35      	ldr	r3, [pc, #212]	; (801d9e4 <TRACE_TxCpltCallback+0x10c>)
 801d90e:	8a9b      	ldrh	r3, [r3, #20]
 801d910:	4413      	add	r3, r2
 801d912:	b29b      	uxth	r3, r3
 801d914:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801d918:	b29a      	uxth	r2, r3
 801d91a:	4b32      	ldr	r3, [pc, #200]	; (801d9e4 <TRACE_TxCpltCallback+0x10c>)
 801d91c:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801d91e:	4b31      	ldr	r3, [pc, #196]	; (801d9e4 <TRACE_TxCpltCallback+0x10c>)
 801d920:	8a1a      	ldrh	r2, [r3, #16]
 801d922:	4b30      	ldr	r3, [pc, #192]	; (801d9e4 <TRACE_TxCpltCallback+0x10c>)
 801d924:	8a5b      	ldrh	r3, [r3, #18]
 801d926:	429a      	cmp	r2, r3
 801d928:	d04d      	beq.n	801d9c6 <TRACE_TxCpltCallback+0xee>
 801d92a:	4b2e      	ldr	r3, [pc, #184]	; (801d9e4 <TRACE_TxCpltCallback+0x10c>)
 801d92c:	8adb      	ldrh	r3, [r3, #22]
 801d92e:	2b01      	cmp	r3, #1
 801d930:	d149      	bne.n	801d9c6 <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801d932:	4b2c      	ldr	r3, [pc, #176]	; (801d9e4 <TRACE_TxCpltCallback+0x10c>)
 801d934:	789b      	ldrb	r3, [r3, #2]
 801d936:	2b01      	cmp	r3, #1
 801d938:	d117      	bne.n	801d96a <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801d93a:	4b2a      	ldr	r3, [pc, #168]	; (801d9e4 <TRACE_TxCpltCallback+0x10c>)
 801d93c:	881a      	ldrh	r2, [r3, #0]
 801d93e:	4b29      	ldr	r3, [pc, #164]	; (801d9e4 <TRACE_TxCpltCallback+0x10c>)
 801d940:	8a1b      	ldrh	r3, [r3, #16]
 801d942:	1ad3      	subs	r3, r2, r3
 801d944:	b29a      	uxth	r2, r3
 801d946:	4b27      	ldr	r3, [pc, #156]	; (801d9e4 <TRACE_TxCpltCallback+0x10c>)
 801d948:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801d94a:	4b26      	ldr	r3, [pc, #152]	; (801d9e4 <TRACE_TxCpltCallback+0x10c>)
 801d94c:	2202      	movs	r2, #2
 801d94e:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801d950:	4b24      	ldr	r3, [pc, #144]	; (801d9e4 <TRACE_TxCpltCallback+0x10c>)
 801d952:	2200      	movs	r2, #0
 801d954:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801d956:	4b23      	ldr	r3, [pc, #140]	; (801d9e4 <TRACE_TxCpltCallback+0x10c>)
 801d958:	8a9b      	ldrh	r3, [r3, #20]
 801d95a:	2b00      	cmp	r3, #0
 801d95c:	d105      	bne.n	801d96a <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801d95e:	4b21      	ldr	r3, [pc, #132]	; (801d9e4 <TRACE_TxCpltCallback+0x10c>)
 801d960:	2200      	movs	r2, #0
 801d962:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801d964:	4b1f      	ldr	r3, [pc, #124]	; (801d9e4 <TRACE_TxCpltCallback+0x10c>)
 801d966:	2200      	movs	r2, #0
 801d968:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801d96a:	4b1e      	ldr	r3, [pc, #120]	; (801d9e4 <TRACE_TxCpltCallback+0x10c>)
 801d96c:	789b      	ldrb	r3, [r3, #2]
 801d96e:	2b00      	cmp	r3, #0
 801d970:	d115      	bne.n	801d99e <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801d972:	4b1c      	ldr	r3, [pc, #112]	; (801d9e4 <TRACE_TxCpltCallback+0x10c>)
 801d974:	8a5a      	ldrh	r2, [r3, #18]
 801d976:	4b1b      	ldr	r3, [pc, #108]	; (801d9e4 <TRACE_TxCpltCallback+0x10c>)
 801d978:	8a1b      	ldrh	r3, [r3, #16]
 801d97a:	429a      	cmp	r2, r3
 801d97c:	d908      	bls.n	801d990 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801d97e:	4b19      	ldr	r3, [pc, #100]	; (801d9e4 <TRACE_TxCpltCallback+0x10c>)
 801d980:	8a5a      	ldrh	r2, [r3, #18]
 801d982:	4b18      	ldr	r3, [pc, #96]	; (801d9e4 <TRACE_TxCpltCallback+0x10c>)
 801d984:	8a1b      	ldrh	r3, [r3, #16]
 801d986:	1ad3      	subs	r3, r2, r3
 801d988:	b29a      	uxth	r2, r3
 801d98a:	4b16      	ldr	r3, [pc, #88]	; (801d9e4 <TRACE_TxCpltCallback+0x10c>)
 801d98c:	829a      	strh	r2, [r3, #20]
 801d98e:	e006      	b.n	801d99e <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801d990:	4b14      	ldr	r3, [pc, #80]	; (801d9e4 <TRACE_TxCpltCallback+0x10c>)
 801d992:	8a1b      	ldrh	r3, [r3, #16]
 801d994:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801d998:	b29a      	uxth	r2, r3
 801d99a:	4b12      	ldr	r3, [pc, #72]	; (801d9e4 <TRACE_TxCpltCallback+0x10c>)
 801d99c:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801d99e:	4b11      	ldr	r3, [pc, #68]	; (801d9e4 <TRACE_TxCpltCallback+0x10c>)
 801d9a0:	8a1b      	ldrh	r3, [r3, #16]
 801d9a2:	461a      	mov	r2, r3
 801d9a4:	4b10      	ldr	r3, [pc, #64]	; (801d9e8 <TRACE_TxCpltCallback+0x110>)
 801d9a6:	4413      	add	r3, r2
 801d9a8:	61fb      	str	r3, [r7, #28]
 801d9aa:	69bb      	ldr	r3, [r7, #24]
 801d9ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d9ae:	693b      	ldr	r3, [r7, #16]
 801d9b0:	f383 8810 	msr	PRIMASK, r3
}
 801d9b4:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801d9b6:	4b0d      	ldr	r3, [pc, #52]	; (801d9ec <TRACE_TxCpltCallback+0x114>)
 801d9b8:	68db      	ldr	r3, [r3, #12]
 801d9ba:	4a0a      	ldr	r2, [pc, #40]	; (801d9e4 <TRACE_TxCpltCallback+0x10c>)
 801d9bc:	8a92      	ldrh	r2, [r2, #20]
 801d9be:	4611      	mov	r1, r2
 801d9c0:	69f8      	ldr	r0, [r7, #28]
 801d9c2:	4798      	blx	r3
 801d9c4:	e00a      	b.n	801d9dc <TRACE_TxCpltCallback+0x104>
 801d9c6:	69bb      	ldr	r3, [r7, #24]
 801d9c8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d9ca:	68fb      	ldr	r3, [r7, #12]
 801d9cc:	f383 8810 	msr	PRIMASK, r3
}
 801d9d0:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801d9d2:	f7e4 fbef 	bl	80021b4 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801d9d6:	f000 f8a7 	bl	801db28 <TRACE_UnLock>
  }
}
 801d9da:	bf00      	nop
 801d9dc:	bf00      	nop
 801d9de:	3720      	adds	r7, #32
 801d9e0:	46bd      	mov	sp, r7
 801d9e2:	bd80      	pop	{r7, pc}
 801d9e4:	20001cb8 	.word	0x20001cb8
 801d9e8:	20001cd0 	.word	0x20001cd0
 801d9ec:	0801e6e8 	.word	0x0801e6e8

0801d9f0 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801d9f0:	b480      	push	{r7}
 801d9f2:	b087      	sub	sp, #28
 801d9f4:	af00      	add	r7, sp, #0
 801d9f6:	4603      	mov	r3, r0
 801d9f8:	6039      	str	r1, [r7, #0]
 801d9fa:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801d9fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801da00:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801da02:	f3ef 8310 	mrs	r3, PRIMASK
 801da06:	60fb      	str	r3, [r7, #12]
  return(result);
 801da08:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801da0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801da0c:	b672      	cpsid	i
}
 801da0e:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801da10:	4b35      	ldr	r3, [pc, #212]	; (801dae8 <TRACE_AllocateBufer+0xf8>)
 801da12:	8a5a      	ldrh	r2, [r3, #18]
 801da14:	4b34      	ldr	r3, [pc, #208]	; (801dae8 <TRACE_AllocateBufer+0xf8>)
 801da16:	8a1b      	ldrh	r3, [r3, #16]
 801da18:	429a      	cmp	r2, r3
 801da1a:	d11b      	bne.n	801da54 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801da1c:	4b32      	ldr	r3, [pc, #200]	; (801dae8 <TRACE_AllocateBufer+0xf8>)
 801da1e:	8a5b      	ldrh	r3, [r3, #18]
 801da20:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801da24:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801da26:	88fa      	ldrh	r2, [r7, #6]
 801da28:	8afb      	ldrh	r3, [r7, #22]
 801da2a:	429a      	cmp	r2, r3
 801da2c:	d33a      	bcc.n	801daa4 <TRACE_AllocateBufer+0xb4>
 801da2e:	4b2e      	ldr	r3, [pc, #184]	; (801dae8 <TRACE_AllocateBufer+0xf8>)
 801da30:	8a1b      	ldrh	r3, [r3, #16]
 801da32:	88fa      	ldrh	r2, [r7, #6]
 801da34:	429a      	cmp	r2, r3
 801da36:	d235      	bcs.n	801daa4 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801da38:	4b2b      	ldr	r3, [pc, #172]	; (801dae8 <TRACE_AllocateBufer+0xf8>)
 801da3a:	2201      	movs	r2, #1
 801da3c:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801da3e:	4b2a      	ldr	r3, [pc, #168]	; (801dae8 <TRACE_AllocateBufer+0xf8>)
 801da40:	8a5a      	ldrh	r2, [r3, #18]
 801da42:	4b29      	ldr	r3, [pc, #164]	; (801dae8 <TRACE_AllocateBufer+0xf8>)
 801da44:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801da46:	4b28      	ldr	r3, [pc, #160]	; (801dae8 <TRACE_AllocateBufer+0xf8>)
 801da48:	8a1b      	ldrh	r3, [r3, #16]
 801da4a:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801da4c:	4b26      	ldr	r3, [pc, #152]	; (801dae8 <TRACE_AllocateBufer+0xf8>)
 801da4e:	2200      	movs	r2, #0
 801da50:	825a      	strh	r2, [r3, #18]
 801da52:	e027      	b.n	801daa4 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801da54:	4b24      	ldr	r3, [pc, #144]	; (801dae8 <TRACE_AllocateBufer+0xf8>)
 801da56:	8a5a      	ldrh	r2, [r3, #18]
 801da58:	4b23      	ldr	r3, [pc, #140]	; (801dae8 <TRACE_AllocateBufer+0xf8>)
 801da5a:	8a1b      	ldrh	r3, [r3, #16]
 801da5c:	429a      	cmp	r2, r3
 801da5e:	d91b      	bls.n	801da98 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801da60:	4b21      	ldr	r3, [pc, #132]	; (801dae8 <TRACE_AllocateBufer+0xf8>)
 801da62:	8a5b      	ldrh	r3, [r3, #18]
 801da64:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801da68:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801da6a:	88fa      	ldrh	r2, [r7, #6]
 801da6c:	8afb      	ldrh	r3, [r7, #22]
 801da6e:	429a      	cmp	r2, r3
 801da70:	d318      	bcc.n	801daa4 <TRACE_AllocateBufer+0xb4>
 801da72:	4b1d      	ldr	r3, [pc, #116]	; (801dae8 <TRACE_AllocateBufer+0xf8>)
 801da74:	8a1b      	ldrh	r3, [r3, #16]
 801da76:	88fa      	ldrh	r2, [r7, #6]
 801da78:	429a      	cmp	r2, r3
 801da7a:	d213      	bcs.n	801daa4 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801da7c:	4b1a      	ldr	r3, [pc, #104]	; (801dae8 <TRACE_AllocateBufer+0xf8>)
 801da7e:	2201      	movs	r2, #1
 801da80:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801da82:	4b19      	ldr	r3, [pc, #100]	; (801dae8 <TRACE_AllocateBufer+0xf8>)
 801da84:	8a5a      	ldrh	r2, [r3, #18]
 801da86:	4b18      	ldr	r3, [pc, #96]	; (801dae8 <TRACE_AllocateBufer+0xf8>)
 801da88:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801da8a:	4b17      	ldr	r3, [pc, #92]	; (801dae8 <TRACE_AllocateBufer+0xf8>)
 801da8c:	8a1b      	ldrh	r3, [r3, #16]
 801da8e:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801da90:	4b15      	ldr	r3, [pc, #84]	; (801dae8 <TRACE_AllocateBufer+0xf8>)
 801da92:	2200      	movs	r2, #0
 801da94:	825a      	strh	r2, [r3, #18]
 801da96:	e005      	b.n	801daa4 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801da98:	4b13      	ldr	r3, [pc, #76]	; (801dae8 <TRACE_AllocateBufer+0xf8>)
 801da9a:	8a1a      	ldrh	r2, [r3, #16]
 801da9c:	4b12      	ldr	r3, [pc, #72]	; (801dae8 <TRACE_AllocateBufer+0xf8>)
 801da9e:	8a5b      	ldrh	r3, [r3, #18]
 801daa0:	1ad3      	subs	r3, r2, r3
 801daa2:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801daa4:	8afa      	ldrh	r2, [r7, #22]
 801daa6:	88fb      	ldrh	r3, [r7, #6]
 801daa8:	429a      	cmp	r2, r3
 801daaa:	d90f      	bls.n	801dacc <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801daac:	4b0e      	ldr	r3, [pc, #56]	; (801dae8 <TRACE_AllocateBufer+0xf8>)
 801daae:	8a5a      	ldrh	r2, [r3, #18]
 801dab0:	683b      	ldr	r3, [r7, #0]
 801dab2:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801dab4:	4b0c      	ldr	r3, [pc, #48]	; (801dae8 <TRACE_AllocateBufer+0xf8>)
 801dab6:	8a5a      	ldrh	r2, [r3, #18]
 801dab8:	88fb      	ldrh	r3, [r7, #6]
 801daba:	4413      	add	r3, r2
 801dabc:	b29b      	uxth	r3, r3
 801dabe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801dac2:	b29a      	uxth	r2, r3
 801dac4:	4b08      	ldr	r3, [pc, #32]	; (801dae8 <TRACE_AllocateBufer+0xf8>)
 801dac6:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801dac8:	2300      	movs	r3, #0
 801daca:	82bb      	strh	r3, [r7, #20]
 801dacc:	693b      	ldr	r3, [r7, #16]
 801dace:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dad0:	68bb      	ldr	r3, [r7, #8]
 801dad2:	f383 8810 	msr	PRIMASK, r3
}
 801dad6:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801dad8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801dadc:	4618      	mov	r0, r3
 801dade:	371c      	adds	r7, #28
 801dae0:	46bd      	mov	sp, r7
 801dae2:	bc80      	pop	{r7}
 801dae4:	4770      	bx	lr
 801dae6:	bf00      	nop
 801dae8:	20001cb8 	.word	0x20001cb8

0801daec <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801daec:	b480      	push	{r7}
 801daee:	b085      	sub	sp, #20
 801daf0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801daf2:	f3ef 8310 	mrs	r3, PRIMASK
 801daf6:	607b      	str	r3, [r7, #4]
  return(result);
 801daf8:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801dafa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801dafc:	b672      	cpsid	i
}
 801dafe:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801db00:	4b08      	ldr	r3, [pc, #32]	; (801db24 <TRACE_Lock+0x38>)
 801db02:	8adb      	ldrh	r3, [r3, #22]
 801db04:	3301      	adds	r3, #1
 801db06:	b29a      	uxth	r2, r3
 801db08:	4b06      	ldr	r3, [pc, #24]	; (801db24 <TRACE_Lock+0x38>)
 801db0a:	82da      	strh	r2, [r3, #22]
 801db0c:	68fb      	ldr	r3, [r7, #12]
 801db0e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801db10:	68bb      	ldr	r3, [r7, #8]
 801db12:	f383 8810 	msr	PRIMASK, r3
}
 801db16:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801db18:	bf00      	nop
 801db1a:	3714      	adds	r7, #20
 801db1c:	46bd      	mov	sp, r7
 801db1e:	bc80      	pop	{r7}
 801db20:	4770      	bx	lr
 801db22:	bf00      	nop
 801db24:	20001cb8 	.word	0x20001cb8

0801db28 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801db28:	b480      	push	{r7}
 801db2a:	b085      	sub	sp, #20
 801db2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801db2e:	f3ef 8310 	mrs	r3, PRIMASK
 801db32:	607b      	str	r3, [r7, #4]
  return(result);
 801db34:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801db36:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801db38:	b672      	cpsid	i
}
 801db3a:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801db3c:	4b08      	ldr	r3, [pc, #32]	; (801db60 <TRACE_UnLock+0x38>)
 801db3e:	8adb      	ldrh	r3, [r3, #22]
 801db40:	3b01      	subs	r3, #1
 801db42:	b29a      	uxth	r2, r3
 801db44:	4b06      	ldr	r3, [pc, #24]	; (801db60 <TRACE_UnLock+0x38>)
 801db46:	82da      	strh	r2, [r3, #22]
 801db48:	68fb      	ldr	r3, [r7, #12]
 801db4a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801db4c:	68bb      	ldr	r3, [r7, #8]
 801db4e:	f383 8810 	msr	PRIMASK, r3
}
 801db52:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801db54:	bf00      	nop
 801db56:	3714      	adds	r7, #20
 801db58:	46bd      	mov	sp, r7
 801db5a:	bc80      	pop	{r7}
 801db5c:	4770      	bx	lr
 801db5e:	bf00      	nop
 801db60:	20001cb8 	.word	0x20001cb8

0801db64 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801db64:	b480      	push	{r7}
 801db66:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801db68:	4b05      	ldr	r3, [pc, #20]	; (801db80 <TRACE_IsLocked+0x1c>)
 801db6a:	8adb      	ldrh	r3, [r3, #22]
 801db6c:	2b00      	cmp	r3, #0
 801db6e:	bf14      	ite	ne
 801db70:	2301      	movne	r3, #1
 801db72:	2300      	moveq	r3, #0
 801db74:	b2db      	uxtb	r3, r3
}
 801db76:	4618      	mov	r0, r3
 801db78:	46bd      	mov	sp, r7
 801db7a:	bc80      	pop	{r7}
 801db7c:	4770      	bx	lr
 801db7e:	bf00      	nop
 801db80:	20001cb8 	.word	0x20001cb8

0801db84 <memset>:
 801db84:	4402      	add	r2, r0
 801db86:	4603      	mov	r3, r0
 801db88:	4293      	cmp	r3, r2
 801db8a:	d100      	bne.n	801db8e <memset+0xa>
 801db8c:	4770      	bx	lr
 801db8e:	f803 1b01 	strb.w	r1, [r3], #1
 801db92:	e7f9      	b.n	801db88 <memset+0x4>

0801db94 <__libc_init_array>:
 801db94:	b570      	push	{r4, r5, r6, lr}
 801db96:	4d0d      	ldr	r5, [pc, #52]	; (801dbcc <__libc_init_array+0x38>)
 801db98:	4c0d      	ldr	r4, [pc, #52]	; (801dbd0 <__libc_init_array+0x3c>)
 801db9a:	1b64      	subs	r4, r4, r5
 801db9c:	10a4      	asrs	r4, r4, #2
 801db9e:	2600      	movs	r6, #0
 801dba0:	42a6      	cmp	r6, r4
 801dba2:	d109      	bne.n	801dbb8 <__libc_init_array+0x24>
 801dba4:	4d0b      	ldr	r5, [pc, #44]	; (801dbd4 <__libc_init_array+0x40>)
 801dba6:	4c0c      	ldr	r4, [pc, #48]	; (801dbd8 <__libc_init_array+0x44>)
 801dba8:	f000 f89a 	bl	801dce0 <_init>
 801dbac:	1b64      	subs	r4, r4, r5
 801dbae:	10a4      	asrs	r4, r4, #2
 801dbb0:	2600      	movs	r6, #0
 801dbb2:	42a6      	cmp	r6, r4
 801dbb4:	d105      	bne.n	801dbc2 <__libc_init_array+0x2e>
 801dbb6:	bd70      	pop	{r4, r5, r6, pc}
 801dbb8:	f855 3b04 	ldr.w	r3, [r5], #4
 801dbbc:	4798      	blx	r3
 801dbbe:	3601      	adds	r6, #1
 801dbc0:	e7ee      	b.n	801dba0 <__libc_init_array+0xc>
 801dbc2:	f855 3b04 	ldr.w	r3, [r5], #4
 801dbc6:	4798      	blx	r3
 801dbc8:	3601      	adds	r6, #1
 801dbca:	e7f2      	b.n	801dbb2 <__libc_init_array+0x1e>
 801dbcc:	0801eda0 	.word	0x0801eda0
 801dbd0:	0801eda0 	.word	0x0801eda0
 801dbd4:	0801eda0 	.word	0x0801eda0
 801dbd8:	0801eda4 	.word	0x0801eda4
 801dbdc:	00000000 	.word	0x00000000

0801dbe0 <floor>:
 801dbe0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801dbe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dbe8:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801dbec:	2e13      	cmp	r6, #19
 801dbee:	460b      	mov	r3, r1
 801dbf0:	4607      	mov	r7, r0
 801dbf2:	460c      	mov	r4, r1
 801dbf4:	4605      	mov	r5, r0
 801dbf6:	dc32      	bgt.n	801dc5e <floor+0x7e>
 801dbf8:	2e00      	cmp	r6, #0
 801dbfa:	da14      	bge.n	801dc26 <floor+0x46>
 801dbfc:	a334      	add	r3, pc, #208	; (adr r3, 801dcd0 <floor+0xf0>)
 801dbfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dc02:	f7e2 fac7 	bl	8000194 <__adddf3>
 801dc06:	2200      	movs	r2, #0
 801dc08:	2300      	movs	r3, #0
 801dc0a:	f7e2 fcf7 	bl	80005fc <__aeabi_dcmpgt>
 801dc0e:	b138      	cbz	r0, 801dc20 <floor+0x40>
 801dc10:	2c00      	cmp	r4, #0
 801dc12:	da56      	bge.n	801dcc2 <floor+0xe2>
 801dc14:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801dc18:	4325      	orrs	r5, r4
 801dc1a:	d055      	beq.n	801dcc8 <floor+0xe8>
 801dc1c:	4c2e      	ldr	r4, [pc, #184]	; (801dcd8 <floor+0xf8>)
 801dc1e:	2500      	movs	r5, #0
 801dc20:	4623      	mov	r3, r4
 801dc22:	462f      	mov	r7, r5
 801dc24:	e025      	b.n	801dc72 <floor+0x92>
 801dc26:	4a2d      	ldr	r2, [pc, #180]	; (801dcdc <floor+0xfc>)
 801dc28:	fa42 f806 	asr.w	r8, r2, r6
 801dc2c:	ea01 0208 	and.w	r2, r1, r8
 801dc30:	4302      	orrs	r2, r0
 801dc32:	d01e      	beq.n	801dc72 <floor+0x92>
 801dc34:	a326      	add	r3, pc, #152	; (adr r3, 801dcd0 <floor+0xf0>)
 801dc36:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dc3a:	f7e2 faab 	bl	8000194 <__adddf3>
 801dc3e:	2200      	movs	r2, #0
 801dc40:	2300      	movs	r3, #0
 801dc42:	f7e2 fcdb 	bl	80005fc <__aeabi_dcmpgt>
 801dc46:	2800      	cmp	r0, #0
 801dc48:	d0ea      	beq.n	801dc20 <floor+0x40>
 801dc4a:	2c00      	cmp	r4, #0
 801dc4c:	bfbe      	ittt	lt
 801dc4e:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801dc52:	4133      	asrlt	r3, r6
 801dc54:	18e4      	addlt	r4, r4, r3
 801dc56:	ea24 0408 	bic.w	r4, r4, r8
 801dc5a:	2500      	movs	r5, #0
 801dc5c:	e7e0      	b.n	801dc20 <floor+0x40>
 801dc5e:	2e33      	cmp	r6, #51	; 0x33
 801dc60:	dd0b      	ble.n	801dc7a <floor+0x9a>
 801dc62:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801dc66:	d104      	bne.n	801dc72 <floor+0x92>
 801dc68:	4602      	mov	r2, r0
 801dc6a:	f7e2 fa93 	bl	8000194 <__adddf3>
 801dc6e:	4607      	mov	r7, r0
 801dc70:	460b      	mov	r3, r1
 801dc72:	4638      	mov	r0, r7
 801dc74:	4619      	mov	r1, r3
 801dc76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dc7a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801dc7e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801dc82:	fa28 f802 	lsr.w	r8, r8, r2
 801dc86:	ea10 0f08 	tst.w	r0, r8
 801dc8a:	d0f2      	beq.n	801dc72 <floor+0x92>
 801dc8c:	a310      	add	r3, pc, #64	; (adr r3, 801dcd0 <floor+0xf0>)
 801dc8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dc92:	f7e2 fa7f 	bl	8000194 <__adddf3>
 801dc96:	2200      	movs	r2, #0
 801dc98:	2300      	movs	r3, #0
 801dc9a:	f7e2 fcaf 	bl	80005fc <__aeabi_dcmpgt>
 801dc9e:	2800      	cmp	r0, #0
 801dca0:	d0be      	beq.n	801dc20 <floor+0x40>
 801dca2:	2c00      	cmp	r4, #0
 801dca4:	da0a      	bge.n	801dcbc <floor+0xdc>
 801dca6:	2e14      	cmp	r6, #20
 801dca8:	d101      	bne.n	801dcae <floor+0xce>
 801dcaa:	3401      	adds	r4, #1
 801dcac:	e006      	b.n	801dcbc <floor+0xdc>
 801dcae:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801dcb2:	2301      	movs	r3, #1
 801dcb4:	40b3      	lsls	r3, r6
 801dcb6:	441d      	add	r5, r3
 801dcb8:	42af      	cmp	r7, r5
 801dcba:	d8f6      	bhi.n	801dcaa <floor+0xca>
 801dcbc:	ea25 0508 	bic.w	r5, r5, r8
 801dcc0:	e7ae      	b.n	801dc20 <floor+0x40>
 801dcc2:	2500      	movs	r5, #0
 801dcc4:	462c      	mov	r4, r5
 801dcc6:	e7ab      	b.n	801dc20 <floor+0x40>
 801dcc8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801dccc:	e7a8      	b.n	801dc20 <floor+0x40>
 801dcce:	bf00      	nop
 801dcd0:	8800759c 	.word	0x8800759c
 801dcd4:	7e37e43c 	.word	0x7e37e43c
 801dcd8:	bff00000 	.word	0xbff00000
 801dcdc:	000fffff 	.word	0x000fffff

0801dce0 <_init>:
 801dce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dce2:	bf00      	nop
 801dce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801dce6:	bc08      	pop	{r3}
 801dce8:	469e      	mov	lr, r3
 801dcea:	4770      	bx	lr

0801dcec <_fini>:
 801dcec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dcee:	bf00      	nop
 801dcf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801dcf2:	bc08      	pop	{r3}
 801dcf4:	469e      	mov	lr, r3
 801dcf6:	4770      	bx	lr
