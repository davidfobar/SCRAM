
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001daf8  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f74  0801dc30  0801dc30  0002dc30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000d8  0801eba4  0801eba4  0002eba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801ec7c  0801ec7c  00030148  2**0
                  CONTENTS
  5 .ARM          00000008  0801ec7c  0801ec7c  0002ec7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801ec84  0801ec84  00030148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0801ec84  0801ec84  0002ec84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801ec88  0801ec88  0002ec88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000148  20000000  0801ec8c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00002188  20000148  0801edd4  00030148  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200022d0  0801edd4  000322d0  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00030148  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030172  2**0
                  CONTENTS, READONLY
 14 .debug_info   00048593  00000000  00000000  000301b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000b1c4  00000000  00000000  00078748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003928  00000000  00000000  00083910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002b7a  00000000  00000000  00087238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002acf3  00000000  00000000  00089db2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00045ff1  00000000  00000000  000b4aa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d1866  00000000  00000000  000faa96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000ebec  00000000  00000000  001cc2fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  001daee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000148 	.word	0x20000148
 8000154:	00000000 	.word	0x00000000
 8000158:	0801dc18 	.word	0x0801dc18

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	2000014c 	.word	0x2000014c
 8000174:	0801dc18 	.word	0x0801dc18

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__gedf2>:
 8000500:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000504:	e006      	b.n	8000514 <__cmpdf2+0x4>
 8000506:	bf00      	nop

08000508 <__ledf2>:
 8000508:	f04f 0c01 	mov.w	ip, #1
 800050c:	e002      	b.n	8000514 <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__cmpdf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000518:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800051c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000520:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000524:	bf18      	it	ne
 8000526:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800052a:	d01b      	beq.n	8000564 <__cmpdf2+0x54>
 800052c:	b001      	add	sp, #4
 800052e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000532:	bf0c      	ite	eq
 8000534:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000538:	ea91 0f03 	teqne	r1, r3
 800053c:	bf02      	ittt	eq
 800053e:	ea90 0f02 	teqeq	r0, r2
 8000542:	2000      	moveq	r0, #0
 8000544:	4770      	bxeq	lr
 8000546:	f110 0f00 	cmn.w	r0, #0
 800054a:	ea91 0f03 	teq	r1, r3
 800054e:	bf58      	it	pl
 8000550:	4299      	cmppl	r1, r3
 8000552:	bf08      	it	eq
 8000554:	4290      	cmpeq	r0, r2
 8000556:	bf2c      	ite	cs
 8000558:	17d8      	asrcs	r0, r3, #31
 800055a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800055e:	f040 0001 	orr.w	r0, r0, #1
 8000562:	4770      	bx	lr
 8000564:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800056c:	d102      	bne.n	8000574 <__cmpdf2+0x64>
 800056e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000572:	d107      	bne.n	8000584 <__cmpdf2+0x74>
 8000574:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800057c:	d1d6      	bne.n	800052c <__cmpdf2+0x1c>
 800057e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000582:	d0d3      	beq.n	800052c <__cmpdf2+0x1c>
 8000584:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <__aeabi_cdrcmple>:
 800058c:	4684      	mov	ip, r0
 800058e:	4610      	mov	r0, r2
 8000590:	4662      	mov	r2, ip
 8000592:	468c      	mov	ip, r1
 8000594:	4619      	mov	r1, r3
 8000596:	4663      	mov	r3, ip
 8000598:	e000      	b.n	800059c <__aeabi_cdcmpeq>
 800059a:	bf00      	nop

0800059c <__aeabi_cdcmpeq>:
 800059c:	b501      	push	{r0, lr}
 800059e:	f7ff ffb7 	bl	8000510 <__cmpdf2>
 80005a2:	2800      	cmp	r0, #0
 80005a4:	bf48      	it	mi
 80005a6:	f110 0f00 	cmnmi.w	r0, #0
 80005aa:	bd01      	pop	{r0, pc}

080005ac <__aeabi_dcmpeq>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff fff4 	bl	800059c <__aeabi_cdcmpeq>
 80005b4:	bf0c      	ite	eq
 80005b6:	2001      	moveq	r0, #1
 80005b8:	2000      	movne	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmplt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffea 	bl	800059c <__aeabi_cdcmpeq>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmple>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffe0 	bl	800059c <__aeabi_cdcmpeq>
 80005dc:	bf94      	ite	ls
 80005de:	2001      	movls	r0, #1
 80005e0:	2000      	movhi	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_dcmpge>:
 80005e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ec:	f7ff ffce 	bl	800058c <__aeabi_cdrcmple>
 80005f0:	bf94      	ite	ls
 80005f2:	2001      	movls	r0, #1
 80005f4:	2000      	movhi	r0, #0
 80005f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fa:	bf00      	nop

080005fc <__aeabi_dcmpgt>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff ffc4 	bl	800058c <__aeabi_cdrcmple>
 8000604:	bf34      	ite	cc
 8000606:	2001      	movcc	r0, #1
 8000608:	2000      	movcs	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_d2iz>:
 8000610:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000614:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000618:	d215      	bcs.n	8000646 <__aeabi_d2iz+0x36>
 800061a:	d511      	bpl.n	8000640 <__aeabi_d2iz+0x30>
 800061c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000620:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000624:	d912      	bls.n	800064c <__aeabi_d2iz+0x3c>
 8000626:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800062a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800062e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000632:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000636:	fa23 f002 	lsr.w	r0, r3, r2
 800063a:	bf18      	it	ne
 800063c:	4240      	negne	r0, r0
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d105      	bne.n	8000658 <__aeabi_d2iz+0x48>
 800064c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000650:	bf08      	it	eq
 8000652:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000656:	4770      	bx	lr
 8000658:	f04f 0000 	mov.w	r0, #0
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <__aeabi_frsub>:
 8000660:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000664:	e002      	b.n	800066c <__addsf3>
 8000666:	bf00      	nop

08000668 <__aeabi_fsub>:
 8000668:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800066c <__addsf3>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	bf1f      	itttt	ne
 8000670:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000674:	ea92 0f03 	teqne	r2, r3
 8000678:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800067c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000680:	d06a      	beq.n	8000758 <__addsf3+0xec>
 8000682:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000686:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800068a:	bfc1      	itttt	gt
 800068c:	18d2      	addgt	r2, r2, r3
 800068e:	4041      	eorgt	r1, r0
 8000690:	4048      	eorgt	r0, r1
 8000692:	4041      	eorgt	r1, r0
 8000694:	bfb8      	it	lt
 8000696:	425b      	neglt	r3, r3
 8000698:	2b19      	cmp	r3, #25
 800069a:	bf88      	it	hi
 800069c:	4770      	bxhi	lr
 800069e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006aa:	bf18      	it	ne
 80006ac:	4240      	negne	r0, r0
 80006ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006ba:	bf18      	it	ne
 80006bc:	4249      	negne	r1, r1
 80006be:	ea92 0f03 	teq	r2, r3
 80006c2:	d03f      	beq.n	8000744 <__addsf3+0xd8>
 80006c4:	f1a2 0201 	sub.w	r2, r2, #1
 80006c8:	fa41 fc03 	asr.w	ip, r1, r3
 80006cc:	eb10 000c 	adds.w	r0, r0, ip
 80006d0:	f1c3 0320 	rsb	r3, r3, #32
 80006d4:	fa01 f103 	lsl.w	r1, r1, r3
 80006d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006dc:	d502      	bpl.n	80006e4 <__addsf3+0x78>
 80006de:	4249      	negs	r1, r1
 80006e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006e8:	d313      	bcc.n	8000712 <__addsf3+0xa6>
 80006ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ee:	d306      	bcc.n	80006fe <__addsf3+0x92>
 80006f0:	0840      	lsrs	r0, r0, #1
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	f102 0201 	add.w	r2, r2, #1
 80006fa:	2afe      	cmp	r2, #254	; 0xfe
 80006fc:	d251      	bcs.n	80007a2 <__addsf3+0x136>
 80006fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000702:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000706:	bf08      	it	eq
 8000708:	f020 0001 	biceq.w	r0, r0, #1
 800070c:	ea40 0003 	orr.w	r0, r0, r3
 8000710:	4770      	bx	lr
 8000712:	0049      	lsls	r1, r1, #1
 8000714:	eb40 0000 	adc.w	r0, r0, r0
 8000718:	3a01      	subs	r2, #1
 800071a:	bf28      	it	cs
 800071c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000720:	d2ed      	bcs.n	80006fe <__addsf3+0x92>
 8000722:	fab0 fc80 	clz	ip, r0
 8000726:	f1ac 0c08 	sub.w	ip, ip, #8
 800072a:	ebb2 020c 	subs.w	r2, r2, ip
 800072e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000732:	bfaa      	itet	ge
 8000734:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000738:	4252      	neglt	r2, r2
 800073a:	4318      	orrge	r0, r3
 800073c:	bfbc      	itt	lt
 800073e:	40d0      	lsrlt	r0, r2
 8000740:	4318      	orrlt	r0, r3
 8000742:	4770      	bx	lr
 8000744:	f092 0f00 	teq	r2, #0
 8000748:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800074c:	bf06      	itte	eq
 800074e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000752:	3201      	addeq	r2, #1
 8000754:	3b01      	subne	r3, #1
 8000756:	e7b5      	b.n	80006c4 <__addsf3+0x58>
 8000758:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800075c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000760:	bf18      	it	ne
 8000762:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000766:	d021      	beq.n	80007ac <__addsf3+0x140>
 8000768:	ea92 0f03 	teq	r2, r3
 800076c:	d004      	beq.n	8000778 <__addsf3+0x10c>
 800076e:	f092 0f00 	teq	r2, #0
 8000772:	bf08      	it	eq
 8000774:	4608      	moveq	r0, r1
 8000776:	4770      	bx	lr
 8000778:	ea90 0f01 	teq	r0, r1
 800077c:	bf1c      	itt	ne
 800077e:	2000      	movne	r0, #0
 8000780:	4770      	bxne	lr
 8000782:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000786:	d104      	bne.n	8000792 <__addsf3+0x126>
 8000788:	0040      	lsls	r0, r0, #1
 800078a:	bf28      	it	cs
 800078c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000790:	4770      	bx	lr
 8000792:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000796:	bf3c      	itt	cc
 8000798:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800079c:	4770      	bxcc	lr
 800079e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007aa:	4770      	bx	lr
 80007ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b0:	bf16      	itet	ne
 80007b2:	4608      	movne	r0, r1
 80007b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007b8:	4601      	movne	r1, r0
 80007ba:	0242      	lsls	r2, r0, #9
 80007bc:	bf06      	itte	eq
 80007be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007c2:	ea90 0f01 	teqeq	r0, r1
 80007c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007ca:	4770      	bx	lr

080007cc <__aeabi_ui2f>:
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	e004      	b.n	80007dc <__aeabi_i2f+0x8>
 80007d2:	bf00      	nop

080007d4 <__aeabi_i2f>:
 80007d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007d8:	bf48      	it	mi
 80007da:	4240      	negmi	r0, r0
 80007dc:	ea5f 0c00 	movs.w	ip, r0
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007e8:	4601      	mov	r1, r0
 80007ea:	f04f 0000 	mov.w	r0, #0
 80007ee:	e01c      	b.n	800082a <__aeabi_l2f+0x2a>

080007f0 <__aeabi_ul2f>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e00a      	b.n	8000814 <__aeabi_l2f+0x14>
 80007fe:	bf00      	nop

08000800 <__aeabi_l2f>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800080c:	d502      	bpl.n	8000814 <__aeabi_l2f+0x14>
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	ea5f 0c01 	movs.w	ip, r1
 8000818:	bf02      	ittt	eq
 800081a:	4684      	moveq	ip, r0
 800081c:	4601      	moveq	r1, r0
 800081e:	2000      	moveq	r0, #0
 8000820:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000824:	bf08      	it	eq
 8000826:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800082a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800082e:	fabc f28c 	clz	r2, ip
 8000832:	3a08      	subs	r2, #8
 8000834:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000838:	db10      	blt.n	800085c <__aeabi_l2f+0x5c>
 800083a:	fa01 fc02 	lsl.w	ip, r1, r2
 800083e:	4463      	add	r3, ip
 8000840:	fa00 fc02 	lsl.w	ip, r0, r2
 8000844:	f1c2 0220 	rsb	r2, r2, #32
 8000848:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800084c:	fa20 f202 	lsr.w	r2, r0, r2
 8000850:	eb43 0002 	adc.w	r0, r3, r2
 8000854:	bf08      	it	eq
 8000856:	f020 0001 	biceq.w	r0, r0, #1
 800085a:	4770      	bx	lr
 800085c:	f102 0220 	add.w	r2, r2, #32
 8000860:	fa01 fc02 	lsl.w	ip, r1, r2
 8000864:	f1c2 0220 	rsb	r2, r2, #32
 8000868:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800086c:	fa21 f202 	lsr.w	r2, r1, r2
 8000870:	eb43 0002 	adc.w	r0, r3, r2
 8000874:	bf08      	it	eq
 8000876:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800087a:	4770      	bx	lr

0800087c <__aeabi_fmul>:
 800087c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000880:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000884:	bf1e      	ittt	ne
 8000886:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800088a:	ea92 0f0c 	teqne	r2, ip
 800088e:	ea93 0f0c 	teqne	r3, ip
 8000892:	d06f      	beq.n	8000974 <__aeabi_fmul+0xf8>
 8000894:	441a      	add	r2, r3
 8000896:	ea80 0c01 	eor.w	ip, r0, r1
 800089a:	0240      	lsls	r0, r0, #9
 800089c:	bf18      	it	ne
 800089e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008a2:	d01e      	beq.n	80008e2 <__aeabi_fmul+0x66>
 80008a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008b0:	fba0 3101 	umull	r3, r1, r0, r1
 80008b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80008b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80008bc:	bf3e      	ittt	cc
 80008be:	0049      	lslcc	r1, r1, #1
 80008c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008c4:	005b      	lslcc	r3, r3, #1
 80008c6:	ea40 0001 	orr.w	r0, r0, r1
 80008ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80008ce:	2afd      	cmp	r2, #253	; 0xfd
 80008d0:	d81d      	bhi.n	800090e <__aeabi_fmul+0x92>
 80008d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80008d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008da:	bf08      	it	eq
 80008dc:	f020 0001 	biceq.w	r0, r0, #1
 80008e0:	4770      	bx	lr
 80008e2:	f090 0f00 	teq	r0, #0
 80008e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008ea:	bf08      	it	eq
 80008ec:	0249      	lsleq	r1, r1, #9
 80008ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008f6:	3a7f      	subs	r2, #127	; 0x7f
 80008f8:	bfc2      	ittt	gt
 80008fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80008fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000902:	4770      	bxgt	lr
 8000904:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000908:	f04f 0300 	mov.w	r3, #0
 800090c:	3a01      	subs	r2, #1
 800090e:	dc5d      	bgt.n	80009cc <__aeabi_fmul+0x150>
 8000910:	f112 0f19 	cmn.w	r2, #25
 8000914:	bfdc      	itt	le
 8000916:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800091a:	4770      	bxle	lr
 800091c:	f1c2 0200 	rsb	r2, r2, #0
 8000920:	0041      	lsls	r1, r0, #1
 8000922:	fa21 f102 	lsr.w	r1, r1, r2
 8000926:	f1c2 0220 	rsb	r2, r2, #32
 800092a:	fa00 fc02 	lsl.w	ip, r0, r2
 800092e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000932:	f140 0000 	adc.w	r0, r0, #0
 8000936:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800093a:	bf08      	it	eq
 800093c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000940:	4770      	bx	lr
 8000942:	f092 0f00 	teq	r2, #0
 8000946:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800094a:	bf02      	ittt	eq
 800094c:	0040      	lsleq	r0, r0, #1
 800094e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000952:	3a01      	subeq	r2, #1
 8000954:	d0f9      	beq.n	800094a <__aeabi_fmul+0xce>
 8000956:	ea40 000c 	orr.w	r0, r0, ip
 800095a:	f093 0f00 	teq	r3, #0
 800095e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000962:	bf02      	ittt	eq
 8000964:	0049      	lsleq	r1, r1, #1
 8000966:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800096a:	3b01      	subeq	r3, #1
 800096c:	d0f9      	beq.n	8000962 <__aeabi_fmul+0xe6>
 800096e:	ea41 010c 	orr.w	r1, r1, ip
 8000972:	e78f      	b.n	8000894 <__aeabi_fmul+0x18>
 8000974:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000978:	ea92 0f0c 	teq	r2, ip
 800097c:	bf18      	it	ne
 800097e:	ea93 0f0c 	teqne	r3, ip
 8000982:	d00a      	beq.n	800099a <__aeabi_fmul+0x11e>
 8000984:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000988:	bf18      	it	ne
 800098a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800098e:	d1d8      	bne.n	8000942 <__aeabi_fmul+0xc6>
 8000990:	ea80 0001 	eor.w	r0, r0, r1
 8000994:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000998:	4770      	bx	lr
 800099a:	f090 0f00 	teq	r0, #0
 800099e:	bf17      	itett	ne
 80009a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80009a4:	4608      	moveq	r0, r1
 80009a6:	f091 0f00 	teqne	r1, #0
 80009aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80009ae:	d014      	beq.n	80009da <__aeabi_fmul+0x15e>
 80009b0:	ea92 0f0c 	teq	r2, ip
 80009b4:	d101      	bne.n	80009ba <__aeabi_fmul+0x13e>
 80009b6:	0242      	lsls	r2, r0, #9
 80009b8:	d10f      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009ba:	ea93 0f0c 	teq	r3, ip
 80009be:	d103      	bne.n	80009c8 <__aeabi_fmul+0x14c>
 80009c0:	024b      	lsls	r3, r1, #9
 80009c2:	bf18      	it	ne
 80009c4:	4608      	movne	r0, r1
 80009c6:	d108      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009c8:	ea80 0001 	eor.w	r0, r0, r1
 80009cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d8:	4770      	bx	lr
 80009da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_fdiv>:
 80009e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009ec:	bf1e      	ittt	ne
 80009ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009f2:	ea92 0f0c 	teqne	r2, ip
 80009f6:	ea93 0f0c 	teqne	r3, ip
 80009fa:	d069      	beq.n	8000ad0 <__aeabi_fdiv+0xec>
 80009fc:	eba2 0203 	sub.w	r2, r2, r3
 8000a00:	ea80 0c01 	eor.w	ip, r0, r1
 8000a04:	0249      	lsls	r1, r1, #9
 8000a06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a0a:	d037      	beq.n	8000a7c <__aeabi_fdiv+0x98>
 8000a0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	bf38      	it	cc
 8000a20:	005b      	lslcc	r3, r3, #1
 8000a22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000a26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	bf24      	itt	cs
 8000a2e:	1a5b      	subcs	r3, r3, r1
 8000a30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a38:	bf24      	itt	cs
 8000a3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a46:	bf24      	itt	cs
 8000a48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a54:	bf24      	itt	cs
 8000a56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a5e:	011b      	lsls	r3, r3, #4
 8000a60:	bf18      	it	ne
 8000a62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a66:	d1e0      	bne.n	8000a2a <__aeabi_fdiv+0x46>
 8000a68:	2afd      	cmp	r2, #253	; 0xfd
 8000a6a:	f63f af50 	bhi.w	800090e <__aeabi_fmul+0x92>
 8000a6e:	428b      	cmp	r3, r1
 8000a70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a84:	327f      	adds	r2, #127	; 0x7f
 8000a86:	bfc2      	ittt	gt
 8000a88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a90:	4770      	bxgt	lr
 8000a92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a96:	f04f 0300 	mov.w	r3, #0
 8000a9a:	3a01      	subs	r2, #1
 8000a9c:	e737      	b.n	800090e <__aeabi_fmul+0x92>
 8000a9e:	f092 0f00 	teq	r2, #0
 8000aa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0040      	lsleq	r0, r0, #1
 8000aaa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000aae:	3a01      	subeq	r2, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fdiv+0xc2>
 8000ab2:	ea40 000c 	orr.w	r0, r0, ip
 8000ab6:	f093 0f00 	teq	r3, #0
 8000aba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0049      	lsleq	r1, r1, #1
 8000ac2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ac6:	3b01      	subeq	r3, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fdiv+0xda>
 8000aca:	ea41 010c 	orr.w	r1, r1, ip
 8000ace:	e795      	b.n	80009fc <__aeabi_fdiv+0x18>
 8000ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad4:	ea92 0f0c 	teq	r2, ip
 8000ad8:	d108      	bne.n	8000aec <__aeabi_fdiv+0x108>
 8000ada:	0242      	lsls	r2, r0, #9
 8000adc:	f47f af7d 	bne.w	80009da <__aeabi_fmul+0x15e>
 8000ae0:	ea93 0f0c 	teq	r3, ip
 8000ae4:	f47f af70 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000ae8:	4608      	mov	r0, r1
 8000aea:	e776      	b.n	80009da <__aeabi_fmul+0x15e>
 8000aec:	ea93 0f0c 	teq	r3, ip
 8000af0:	d104      	bne.n	8000afc <__aeabi_fdiv+0x118>
 8000af2:	024b      	lsls	r3, r1, #9
 8000af4:	f43f af4c 	beq.w	8000990 <__aeabi_fmul+0x114>
 8000af8:	4608      	mov	r0, r1
 8000afa:	e76e      	b.n	80009da <__aeabi_fmul+0x15e>
 8000afc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b00:	bf18      	it	ne
 8000b02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b06:	d1ca      	bne.n	8000a9e <__aeabi_fdiv+0xba>
 8000b08:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000b0c:	f47f af5c 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000b10:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000b14:	f47f af3c 	bne.w	8000990 <__aeabi_fmul+0x114>
 8000b18:	e75f      	b.n	80009da <__aeabi_fmul+0x15e>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_f2iz>:
 8000b1c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b20:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b24:	d30f      	bcc.n	8000b46 <__aeabi_f2iz+0x2a>
 8000b26:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b2a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b2e:	d90d      	bls.n	8000b4c <__aeabi_f2iz+0x30>
 8000b30:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b38:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b3c:	fa23 f002 	lsr.w	r0, r3, r2
 8000b40:	bf18      	it	ne
 8000b42:	4240      	negne	r0, r0
 8000b44:	4770      	bx	lr
 8000b46:	f04f 0000 	mov.w	r0, #0
 8000b4a:	4770      	bx	lr
 8000b4c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b50:	d101      	bne.n	8000b56 <__aeabi_f2iz+0x3a>
 8000b52:	0242      	lsls	r2, r0, #9
 8000b54:	d105      	bne.n	8000b62 <__aeabi_f2iz+0x46>
 8000b56:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000b5a:	bf08      	it	eq
 8000b5c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0000 	mov.w	r0, #0
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_f2uiz>:
 8000b68:	0042      	lsls	r2, r0, #1
 8000b6a:	d20e      	bcs.n	8000b8a <__aeabi_f2uiz+0x22>
 8000b6c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b70:	d30b      	bcc.n	8000b8a <__aeabi_f2uiz+0x22>
 8000b72:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b76:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b7a:	d409      	bmi.n	8000b90 <__aeabi_f2uiz+0x28>
 8000b7c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b84:	fa23 f002 	lsr.w	r0, r3, r2
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0000 	mov.w	r0, #0
 8000b8e:	4770      	bx	lr
 8000b90:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b94:	d101      	bne.n	8000b9a <__aeabi_f2uiz+0x32>
 8000b96:	0242      	lsls	r2, r0, #9
 8000b98:	d102      	bne.n	8000ba0 <__aeabi_f2uiz+0x38>
 8000b9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c2c:	f080 811b 	bcs.w	8000e66 <__udivmoddi4+0x28e>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8118 	bls.w	8000e66 <__udivmoddi4+0x28e>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c5a:	f080 8106 	bcs.w	8000e6a <__udivmoddi4+0x292>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8103 	bls.w	8000e6a <__udivmoddi4+0x292>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ec 	beq.w	8000e60 <__udivmoddi4+0x288>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f7 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 808f 	bne.w	8000de6 <__udivmoddi4+0x20e>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80ca 	bhi.w	8000e8e <__udivmoddi4+0x2b6>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80ba 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	4323      	orrs	r3, r4
 8000d4a:	fa00 f901 	lsl.w	r9, r0, r1
 8000d4e:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fbb5 f8f0 	udiv	r8, r5, r0
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	fb00 5518 	mls	r5, r0, r8, r5
 8000d60:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d64:	fb08 f50e 	mul.w	r5, r8, lr
 8000d68:	42a5      	cmp	r5, r4
 8000d6a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d78:	f080 8087 	bcs.w	8000e8a <__udivmoddi4+0x2b2>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8084 	bls.w	8000e8a <__udivmoddi4+0x2b2>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d90:	fb00 4413 	mls	r4, r0, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8000da8:	d26b      	bcs.n	8000e82 <__udivmoddi4+0x2aa>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d969      	bls.n	8000e82 <__udivmoddi4+0x2aa>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000db6:	fba0 8302 	umull	r8, r3, r0, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	429c      	cmp	r4, r3
 8000dc0:	46c6      	mov	lr, r8
 8000dc2:	461d      	mov	r5, r3
 8000dc4:	d355      	bcc.n	8000e72 <__udivmoddi4+0x29a>
 8000dc6:	d052      	beq.n	8000e6e <__udivmoddi4+0x296>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb9 030e 	subs.w	r3, r9, lr
 8000dce:	eb64 0405 	sbc.w	r4, r4, r5
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40cb      	lsrs	r3, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	431f      	orrs	r7, r3
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	2100      	movs	r1, #0
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	f1c3 0120 	rsb	r1, r3, #32
 8000dea:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dee:	fa20 f201 	lsr.w	r2, r0, r1
 8000df2:	fa25 f101 	lsr.w	r1, r5, r1
 8000df6:	409d      	lsls	r5, r3
 8000df8:	432a      	orrs	r2, r5
 8000dfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dfe:	fa1f fe8c 	uxth.w	lr, ip
 8000e02:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e06:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0a:	0c11      	lsrs	r1, r2, #16
 8000e0c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e10:	fb00 f50e 	mul.w	r5, r0, lr
 8000e14:	428d      	cmp	r5, r1
 8000e16:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x256>
 8000e1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e20:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e24:	d22f      	bcs.n	8000e86 <__udivmoddi4+0x2ae>
 8000e26:	428d      	cmp	r5, r1
 8000e28:	d92d      	bls.n	8000e86 <__udivmoddi4+0x2ae>
 8000e2a:	3802      	subs	r0, #2
 8000e2c:	4461      	add	r1, ip
 8000e2e:	1b49      	subs	r1, r1, r5
 8000e30:	b292      	uxth	r2, r2
 8000e32:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e36:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e3e:	fb05 f10e 	mul.w	r1, r5, lr
 8000e42:	4291      	cmp	r1, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x280>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e4e:	d216      	bcs.n	8000e7e <__udivmoddi4+0x2a6>
 8000e50:	4291      	cmp	r1, r2
 8000e52:	d914      	bls.n	8000e7e <__udivmoddi4+0x2a6>
 8000e54:	3d02      	subs	r5, #2
 8000e56:	4462      	add	r2, ip
 8000e58:	1a52      	subs	r2, r2, r1
 8000e5a:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e5e:	e739      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e60:	4631      	mov	r1, r6
 8000e62:	4630      	mov	r0, r6
 8000e64:	e709      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e66:	4639      	mov	r1, r7
 8000e68:	e6e7      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6a:	4610      	mov	r0, r2
 8000e6c:	e6fc      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e6e:	45c1      	cmp	r9, r8
 8000e70:	d2aa      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e72:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e76:	eb63 050c 	sbc.w	r5, r3, ip
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a4      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e7e:	4645      	mov	r5, r8
 8000e80:	e7ea      	b.n	8000e58 <__udivmoddi4+0x280>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e795      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e86:	4640      	mov	r0, r8
 8000e88:	e7d1      	b.n	8000e2e <__udivmoddi4+0x256>
 8000e8a:	46d0      	mov	r8, sl
 8000e8c:	e77c      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e8e:	3d02      	subs	r5, #2
 8000e90:	4462      	add	r2, ip
 8000e92:	e733      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e94:	4608      	mov	r0, r1
 8000e96:	e70b      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e98:	4464      	add	r4, ip
 8000e9a:	3802      	subs	r0, #2
 8000e9c:	e743      	b.n	8000d26 <__udivmoddi4+0x14e>
 8000e9e:	bf00      	nop

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000eac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eb0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000eb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ec0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
}
 8000eca:	bf00      	nop
 8000ecc:	3714      	adds	r7, #20
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr

08000ed4 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ee0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ee2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000eec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ef0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
}
 8000efa:	bf00      	nop
 8000efc:	3714      	adds	r7, #20
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr

08000f04 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000f0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f10:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	43db      	mvns	r3, r3
 8000f16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	660b      	str	r3, [r1, #96]	; 0x60
}
 8000f1e:	bf00      	nop
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr

08000f28 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000f2c:	4b23      	ldr	r3, [pc, #140]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f2e:	4a24      	ldr	r2, [pc, #144]	; (8000fc0 <MX_ADC_Init+0x98>)
 8000f30:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f32:	4b22      	ldr	r3, [pc, #136]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f34:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000f38:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000f3a:	4b20      	ldr	r3, [pc, #128]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f40:	4b1e      	ldr	r3, [pc, #120]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f46:	4b1d      	ldr	r3, [pc, #116]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f4c:	4b1b      	ldr	r3, [pc, #108]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f4e:	2204      	movs	r2, #4
 8000f50:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000f52:	4b1a      	ldr	r3, [pc, #104]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000f58:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000f5e:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8000f64:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000f6a:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f72:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f78:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000f7e:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f86:	4b0d      	ldr	r3, [pc, #52]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f8c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000f8e:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f90:	2207      	movs	r2, #7
 8000f92:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000f94:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f96:	2207      	movs	r2, #7
 8000f98:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000f9a:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <MX_ADC_Init+0x94>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000fa2:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <MX_ADC_Init+0x94>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000fa8:	4804      	ldr	r0, [pc, #16]	; (8000fbc <MX_ADC_Init+0x94>)
 8000faa:	f002 f8f3 	bl	8003194 <HAL_ADC_Init>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8000fb4:	f000 fd0a 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000164 	.word	0x20000164
 8000fc0:	40012400 	.word	0x40012400

08000fc4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b088      	sub	sp, #32
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f107 030c 	add.w	r3, r7, #12
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a0d      	ldr	r2, [pc, #52]	; (8001018 <HAL_ADC_MspInit+0x54>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d113      	bne.n	800100e <HAL_ADC_MspInit+0x4a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000fe6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fea:	f7ff ff73 	bl	8000ed4 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fee:	2002      	movs	r0, #2
 8000ff0:	f7ff ff58 	bl	8000ea4 <LL_AHB2_GRP1_EnableClock>
    /**ADC GPIO Configuration
    PB3     ------> ADC_IN2
    PB4     ------> ADC_IN3
    PB13     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = SiPM_temp_ADC_Pin|GPIO_PIN_4|Battery_Monitor_ADC_Pin;
 8000ff4:	f242 0318 	movw	r3, #8216	; 0x2018
 8000ff8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001002:	f107 030c 	add.w	r3, r7, #12
 8001006:	4619      	mov	r1, r3
 8001008:	4804      	ldr	r0, [pc, #16]	; (800101c <HAL_ADC_MspInit+0x58>)
 800100a:	f003 fec3 	bl	8004d94 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 800100e:	bf00      	nop
 8001010:	3720      	adds	r7, #32
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40012400 	.word	0x40012400
 800101c:	48000400 	.word	0x48000400

08001020 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a07      	ldr	r2, [pc, #28]	; (800104c <HAL_ADC_MspDeInit+0x2c>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d108      	bne.n	8001044 <HAL_ADC_MspDeInit+0x24>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8001032:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001036:	f7ff ff65 	bl	8000f04 <LL_APB2_GRP1_DisableClock>
    /**ADC GPIO Configuration
    PB3     ------> ADC_IN2
    PB4     ------> ADC_IN3
    PB13     ------> ADC_IN0
    */
    HAL_GPIO_DeInit(GPIOB, SiPM_temp_ADC_Pin|GPIO_PIN_4|Battery_Monitor_ADC_Pin);
 800103a:	f242 0118 	movw	r1, #8216	; 0x2018
 800103e:	4804      	ldr	r0, [pc, #16]	; (8001050 <HAL_ADC_MspDeInit+0x30>)
 8001040:	f004 f808 	bl	8005054 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8001044:	bf00      	nop
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40012400 	.word	0x40012400
 8001050:	48000400 	.word	0x48000400

08001054 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 8001058:	4b03      	ldr	r3, [pc, #12]	; (8001068 <SYS_InitMeasurement+0x14>)
 800105a:	4a04      	ldr	r2, [pc, #16]	; (800106c <SYS_InitMeasurement+0x18>)
 800105c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 800105e:	bf00      	nop
 8001060:	46bd      	mov	sp, r7
 8001062:	bc80      	pop	{r7}
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	20000164 	.word	0x20000164
 800106c:	40012400 	.word	0x40012400

08001070 <SYS_GetBatteryLevel>:

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}

uint16_t SYS_GetBatteryLevel(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 800107e:	4813      	ldr	r0, [pc, #76]	; (80010cc <SYS_GetBatteryLevel+0x5c>)
 8001080:	f000 f82a 	bl	80010d8 <ADC_ReadChannels>
 8001084:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d102      	bne.n	8001092 <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	80fb      	strh	r3, [r7, #6]
 8001090:	e016      	b.n	80010c0 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8001092:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <SYS_GetBatteryLevel+0x60>)
 8001094:	881b      	ldrh	r3, [r3, #0]
 8001096:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800109a:	4293      	cmp	r3, r2
 800109c:	d00b      	beq.n	80010b6 <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 800109e:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <SYS_GetBatteryLevel+0x60>)
 80010a0:	881b      	ldrh	r3, [r3, #0]
 80010a2:	461a      	mov	r2, r3
 80010a4:	f640 43e4 	movw	r3, #3300	; 0xce4
 80010a8:	fb03 f202 	mul.w	r2, r3, r2
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b2:	80fb      	strh	r3, [r7, #6]
 80010b4:	e004      	b.n	80010c0 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 80010b6:	4a07      	ldr	r2, [pc, #28]	; (80010d4 <SYS_GetBatteryLevel+0x64>)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80010be:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 80010c0:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	b4002000 	.word	0xb4002000
 80010d0:	1fff75aa 	.word	0x1fff75aa
 80010d4:	004c08d8 	.word	0x004c08d8

080010d8 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010e4:	f107 0308 	add.w	r3, r7, #8
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 80010f0:	f7ff ff1a 	bl	8000f28 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 80010f4:	481a      	ldr	r0, [pc, #104]	; (8001160 <ADC_ReadChannels+0x88>)
 80010f6:	f002 fe6c 	bl	8003dd2 <HAL_ADCEx_Calibration_Start>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 8001100:	f000 fc64 	bl	80019cc <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001108:	2300      	movs	r3, #0
 800110a:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800110c:	2300      	movs	r3, #0
 800110e:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001110:	f107 0308 	add.w	r3, r7, #8
 8001114:	4619      	mov	r1, r3
 8001116:	4812      	ldr	r0, [pc, #72]	; (8001160 <ADC_ReadChannels+0x88>)
 8001118:	f002 fb78 	bl	800380c <HAL_ADC_ConfigChannel>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 8001122:	f000 fc53 	bl	80019cc <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8001126:	480e      	ldr	r0, [pc, #56]	; (8001160 <ADC_ReadChannels+0x88>)
 8001128:	f002 fa54 	bl	80035d4 <HAL_ADC_Start>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 8001132:	f000 fc4b 	bl	80019cc <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8001136:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800113a:	4809      	ldr	r0, [pc, #36]	; (8001160 <ADC_ReadChannels+0x88>)
 800113c:	f002 fac2 	bl	80036c4 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8001140:	4807      	ldr	r0, [pc, #28]	; (8001160 <ADC_ReadChannels+0x88>)
 8001142:	f002 fa8d 	bl	8003660 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8001146:	4806      	ldr	r0, [pc, #24]	; (8001160 <ADC_ReadChannels+0x88>)
 8001148:	f002 fb53 	bl	80037f2 <HAL_ADC_GetValue>
 800114c:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 800114e:	4804      	ldr	r0, [pc, #16]	; (8001160 <ADC_ReadChannels+0x88>)
 8001150:	f002 f9b4 	bl	80034bc <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 8001154:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8001156:	4618      	mov	r0, r3
 8001158:	3718      	adds	r7, #24
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000164 	.word	0x20000164

08001164 <LL_AHB1_GRP1_EnableClock>:
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800116c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001170:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001172:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4313      	orrs	r3, r2
 800117a:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800117c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001180:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4013      	ands	r3, r2
 8001186:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001188:	68fb      	ldr	r3, [r7, #12]
}
 800118a:	bf00      	nop
 800118c:	3714      	adds	r7, #20
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr

08001194 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001198:	2004      	movs	r0, #4
 800119a:	f7ff ffe3 	bl	8001164 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800119e:	2001      	movs	r0, #1
 80011a0:	f7ff ffe0 	bl	8001164 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 80011a4:	2200      	movs	r2, #0
 80011a6:	2102      	movs	r1, #2
 80011a8:	200b      	movs	r0, #11
 80011aa:	f002 ffb8 	bl	800411e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80011ae:	200b      	movs	r0, #11
 80011b0:	f002 ffcf 	bl	8004152 <HAL_NVIC_EnableIRQ>

}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <FLASH_IF_Write>:
  /* USER CODE END FLASH_IF_DeInit_2 */
  return ret_status;
}

FLASH_IF_StatusTypedef FLASH_IF_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80011c4:	23ff      	movs	r3, #255	; 0xff
 80011c6:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80011ce:	d311      	bcc.n	80011f4 <FLASH_IF_Write+0x3c>
 80011d0:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <FLASH_IF_Write+0x48>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	029a      	lsls	r2, r3, #10
 80011d6:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <FLASH_IF_Write+0x4c>)
 80011d8:	4013      	ands	r3, r2
 80011da:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80011de:	3b01      	subs	r3, #1
 80011e0:	68fa      	ldr	r2, [r7, #12]
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d306      	bcc.n	80011f4 <FLASH_IF_Write+0x3c>
  {
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	68b9      	ldr	r1, [r7, #8]
 80011ea:	68f8      	ldr	r0, [r7, #12]
 80011ec:	f000 f85a 	bl	80012a4 <FLASH_IF_INT_Write>
 80011f0:	4603      	mov	r3, r0
 80011f2:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
  return ret_status;
 80011f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3718      	adds	r7, #24
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	1fff75e0 	.word	0x1fff75e0
 8001204:	03fffc00 	.word	0x03fffc00

08001208 <FLASH_IF_Read>:

FLASH_IF_StatusTypedef FLASH_IF_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001214:	23ff      	movs	r3, #255	; 0xff
 8001216:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Read_1 */

  /* USER CODE END FLASH_IF_Read_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800121e:	d311      	bcc.n	8001244 <FLASH_IF_Read+0x3c>
 8001220:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <FLASH_IF_Read+0x48>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	029a      	lsls	r2, r3, #10
 8001226:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <FLASH_IF_Read+0x4c>)
 8001228:	4013      	ands	r3, r2
 800122a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800122e:	3b01      	subs	r3, #1
 8001230:	68ba      	ldr	r2, [r7, #8]
 8001232:	4293      	cmp	r3, r2
 8001234:	d306      	bcc.n	8001244 <FLASH_IF_Read+0x3c>
  {
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	68b9      	ldr	r1, [r7, #8]
 800123a:	68f8      	ldr	r0, [r7, #12]
 800123c:	f000 f93a 	bl	80014b4 <FLASH_IF_INT_Read>
 8001240:	4603      	mov	r3, r0
 8001242:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Read_2 */

  /* USER CODE END FLASH_IF_Read_2 */
  return ret_status;
 8001244:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001248:	4618      	mov	r0, r3
 800124a:	3718      	adds	r7, #24
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	1fff75e0 	.word	0x1fff75e0
 8001254:	03fffc00 	.word	0x03fffc00

08001258 <FLASH_IF_Erase>:

FLASH_IF_StatusTypedef FLASH_IF_Erase(void *pStart, uint32_t uLength)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001262:	23ff      	movs	r3, #255	; 0xff
 8001264:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN FLASH_IF_Erase_1 */

  /* USER CODE END FLASH_IF_Erase_1 */
  /* Check Flash start address */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800126c:	d310      	bcc.n	8001290 <FLASH_IF_Erase+0x38>
 800126e:	4b0b      	ldr	r3, [pc, #44]	; (800129c <FLASH_IF_Erase+0x44>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	029a      	lsls	r2, r3, #10
 8001274:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <FLASH_IF_Erase+0x48>)
 8001276:	4013      	ands	r3, r2
 8001278:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800127c:	3b01      	subs	r3, #1
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	4293      	cmp	r3, r2
 8001282:	d305      	bcc.n	8001290 <FLASH_IF_Erase+0x38>
  {
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 8001284:	6839      	ldr	r1, [r7, #0]
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f000 f932 	bl	80014f0 <FLASH_IF_INT_Erase>
 800128c:	4603      	mov	r3, r0
 800128e:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE BEGIN FLASH_IF_Erase_2 */

  /* USER CODE END FLASH_IF_Erase_2 */
  return ret_status;
 8001290:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001294:	4618      	mov	r0, r3
 8001296:	3710      	adds	r7, #16
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	1fff75e0 	.word	0x1fff75e0
 80012a0:	03fffc00 	.word	0x03fffc00

080012a4 <FLASH_IF_INT_Write>:

/* Private Functions Definition -----------------------------------------------*/

/* Private Functions : internal flash -----------------------------------------*/
static FLASH_IF_StatusTypedef FLASH_IF_INT_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b090      	sub	sp, #64	; 0x40
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 80012b0:	2300      	movs	r3, #0
 80012b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  /* USER CODE BEGIN FLASH_IF_INT_Write_1 */

  /* USER CODE END FLASH_IF_INT_Write_1 */
  uint32_t uDest = (uint32_t)pDestination;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t uSource = (uint32_t)pSource;
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t length = uLength;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t number_pages;
  uint32_t current_dest;
  uint32_t current_source;
  uint32_t current_length;

  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d00c      	beq.n	80012e2 <FLASH_IF_INT_Write+0x3e>
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d009      	beq.n	80012e2 <FLASH_IF_INT_Write+0x3e>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	f003 0307 	and.w	r3, r3, #7
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d104      	bne.n	80012e2 <FLASH_IF_INT_Write+0x3e>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d002      	beq.n	80012e8 <FLASH_IF_INT_Write+0x44>
  {
    return FLASH_IF_PARAM_ERROR;
 80012e2:	f06f 0305 	mvn.w	r3, #5
 80012e6:	e0da      	b.n	800149e <FLASH_IF_INT_Write+0x1fa>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 80012e8:	f000 f992 	bl	8001610 <FLASH_IF_INT_Clear_Error>
 80012ec:	4603      	mov	r3, r0
 80012ee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (ret_status == FLASH_IF_OK)
 80012f2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f040 80cf 	bne.w	800149a <FLASH_IF_INT_Write+0x1f6>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 80012fc:	f003 fb74 	bl	80049e8 <HAL_FLASH_Unlock>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	f040 80c6 	bne.w	8001494 <FLASH_IF_INT_Write+0x1f0>
    {
      start_page_index = PAGE_INDEX(uDest);
 8001308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800130a:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 800130e:	4b66      	ldr	r3, [pc, #408]	; (80014a8 <FLASH_IF_INT_Write+0x204>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	0299      	lsls	r1, r3, #10
 8001314:	4b65      	ldr	r3, [pc, #404]	; (80014ac <FLASH_IF_INT_Write+0x208>)
 8001316:	400b      	ands	r3, r1
 8001318:	fbb2 f1f3 	udiv	r1, r2, r3
 800131c:	fb01 f303 	mul.w	r3, r1, r3
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	0adb      	lsrs	r3, r3, #11
 8001324:	61bb      	str	r3, [r7, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 8001326:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4413      	add	r3, r2
 800132c:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001330:	3b01      	subs	r3, #1
 8001332:	4a5d      	ldr	r2, [pc, #372]	; (80014a8 <FLASH_IF_INT_Write+0x204>)
 8001334:	6812      	ldr	r2, [r2, #0]
 8001336:	0291      	lsls	r1, r2, #10
 8001338:	4a5c      	ldr	r2, [pc, #368]	; (80014ac <FLASH_IF_INT_Write+0x208>)
 800133a:	400a      	ands	r2, r1
 800133c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001340:	fb01 f202 	mul.w	r2, r1, r2
 8001344:	1a9b      	subs	r3, r3, r2
 8001346:	0ada      	lsrs	r2, r3, #11
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	3301      	adds	r3, #1
 800134e:	617b      	str	r3, [r7, #20]

      if (number_pages > 1)
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	2b01      	cmp	r3, #1
 8001354:	d905      	bls.n	8001362 <FLASH_IF_INT_Write+0xbe>
      {
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 8001356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001358:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800135c:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001360:	633b      	str	r3, [r7, #48]	; 0x30
      }

      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001366:	e089      	b.n	800147c <FLASH_IF_INT_Write+0x1d8>
      {
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 8001368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800136a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800136e:	02db      	lsls	r3, r3, #11
 8001370:	613b      	str	r3, [r7, #16]
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 8001372:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001374:	68f8      	ldr	r0, [r7, #12]
 8001376:	f000 f925 	bl	80015c4 <FLASH_IF_INT_IsEmpty>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d031      	beq.n	80013e4 <FLASH_IF_INT_Write+0x140>
        {
          if (pAllocatedBuffer == NULL)
 8001380:	4b4b      	ldr	r3, [pc, #300]	; (80014b0 <FLASH_IF_INT_Write+0x20c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d103      	bne.n	8001390 <FLASH_IF_INT_Write+0xec>
          {
            ret_status = FLASH_IF_PARAM_ERROR;
 8001388:	23fa      	movs	r3, #250	; 0xfa
 800138a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break; /* exit for loop */
 800138e:	e07e      	b.n	800148e <FLASH_IF_INT_Write+0x1ea>
          }

          /* backup initial Flash page data in RAM area */
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 8001390:	4b47      	ldr	r3, [pc, #284]	; (80014b0 <FLASH_IF_INT_Write+0x20c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6939      	ldr	r1, [r7, #16]
 8001396:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800139a:	4618      	mov	r0, r3
 800139c:	f000 f88a 	bl	80014b4 <FLASH_IF_INT_Read>
          /* copy fragment into RAM area */
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 80013a0:	4b43      	ldr	r3, [pc, #268]	; (80014b0 <FLASH_IF_INT_Write+0x20c>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013aa:	4413      	add	r3, r2
 80013ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80013ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013b0:	b292      	uxth	r2, r2
 80013b2:	4618      	mov	r0, r3
 80013b4:	f01b f8be 	bl	801c534 <UTIL_MEM_cpy_8>

          /*  erase the Flash sector, to avoid writing twice in RAM */
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013be:	4618      	mov	r0, r3
 80013c0:	f000 f896 	bl	80014f0 <FLASH_IF_INT_Erase>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d003      	beq.n	80013d2 <FLASH_IF_INT_Write+0x12e>
          {
            ret_status = FLASH_IF_ERASE_ERROR;
 80013ca:	23fe      	movs	r3, #254	; 0xfe
 80013cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break; /* exit for loop */
 80013d0:	e05d      	b.n	800148e <FLASH_IF_INT_Write+0x1ea>
          }

          /* copy the whole flash sector including fragment from RAM to Flash */
          current_dest = page_address;
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
          current_source = (uint32_t)pAllocatedBuffer;
 80013d6:	4b36      	ldr	r3, [pc, #216]	; (80014b0 <FLASH_IF_INT_Write+0x20c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	623b      	str	r3, [r7, #32]
          current_length = FLASH_PAGE_SIZE;
 80013dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013e0:	61fb      	str	r3, [r7, #28]
 80013e2:	e005      	b.n	80013f0 <FLASH_IF_INT_Write+0x14c>
        }
        else
        {
          /* write a part of flash page from selected source data */
          current_dest = uDest;
 80013e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
          current_source = uSource;
 80013e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013ea:	623b      	str	r3, [r7, #32]
          current_length = length;
 80013ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013ee:	61fb      	str	r3, [r7, #28]
        }

        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 80013f0:	2300      	movs	r3, #0
 80013f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80013f4:	e026      	b.n	8001444 <FLASH_IF_INT_Write+0x1a0>
        {
          /* Device voltage range supposed to be [2.7V to 3.6V], the operation will be done by word */
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 80013f6:	6a3a      	ldr	r2, [r7, #32]
 80013f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013fa:	4413      	add	r3, r2
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 80013fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001400:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001402:	2001      	movs	r0, #1
 8001404:	f003 faac 	bl	8004960 <HAL_FLASH_Program>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d113      	bne.n	8001436 <FLASH_IF_INT_Write+0x192>
          {
            /* Check the written value */
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 800140e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001410:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001414:	6a3a      	ldr	r2, [r7, #32]
 8001416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001418:	4413      	add	r3, r2
 800141a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141e:	4299      	cmp	r1, r3
 8001420:	bf08      	it	eq
 8001422:	4290      	cmpeq	r0, r2
 8001424:	d003      	beq.n	800142e <FLASH_IF_INT_Write+0x18a>
            {
              /* Flash content doesn't match SRAM content */
              ret_status = FLASH_IF_WRITE_ERROR;
 8001426:	23fc      	movs	r3, #252	; 0xfc
 8001428:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              break;
 800142c:	e00e      	b.n	800144c <FLASH_IF_INT_Write+0x1a8>
            }
            /* Increment FLASH Destination address */
            current_dest = current_dest + 8U;
 800142e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001430:	3308      	adds	r3, #8
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
 8001434:	e003      	b.n	800143e <FLASH_IF_INT_Write+0x19a>
          }
          else
          {
            /* Error occurred while writing data in Flash memory */
            ret_status = FLASH_IF_WRITE_ERROR;
 8001436:	23fc      	movs	r3, #252	; 0xfc
 8001438:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break;
 800143c:	e006      	b.n	800144c <FLASH_IF_INT_Write+0x1a8>
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 800143e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001440:	3308      	adds	r3, #8
 8001442:	62bb      	str	r3, [r7, #40]	; 0x28
 8001444:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	429a      	cmp	r2, r3
 800144a:	d3d4      	bcc.n	80013f6 <FLASH_IF_INT_Write+0x152>
          }
        }

        if (ret_status != FLASH_IF_OK)
 800144c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001450:	2b00      	cmp	r3, #0
 8001452:	d11b      	bne.n	800148c <FLASH_IF_INT_Write+0x1e8>
          /* Error occurred while writing data in Flash memory */
          break;
        }

        /* Increment FLASH destination address, source address, and decrease remaining length */
        uDest += length;
 8001454:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001458:	4413      	add	r3, r2
 800145a:	63bb      	str	r3, [r7, #56]	; 0x38
        uSource += length;
 800145c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800145e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001460:	4413      	add	r3, r2
 8001462:	637b      	str	r3, [r7, #52]	; 0x34
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800146e:	bf28      	it	cs
 8001470:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 8001474:	633b      	str	r3, [r7, #48]	; 0x30
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 8001476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001478:	3301      	adds	r3, #1
 800147a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	4413      	add	r3, r2
 8001482:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001484:	429a      	cmp	r2, r3
 8001486:	f4ff af6f 	bcc.w	8001368 <FLASH_IF_INT_Write+0xc4>
 800148a:	e000      	b.n	800148e <FLASH_IF_INT_Write+0x1ea>
          break;
 800148c:	bf00      	nop
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 800148e:	f003 facd 	bl	8004a2c <HAL_FLASH_Lock>
 8001492:	e002      	b.n	800149a <FLASH_IF_INT_Write+0x1f6>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 8001494:	23fb      	movs	r3, #251	; 0xfb
 8001496:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Write_2 */

  /* USER CODE END FLASH_IF_INT_Write_2 */
  return ret_status;
 800149a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3740      	adds	r7, #64	; 0x40
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	1fff75e0 	.word	0x1fff75e0
 80014ac:	03fffc00 	.word	0x03fffc00
 80014b0:	200001c8 	.word	0x200001c8

080014b4 <FLASH_IF_INT_Read>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 80014c0:	2300      	movs	r3, #0
 80014c2:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_INT_Read_1 */

  /* USER CODE END FLASH_IF_INT_Read_1 */
  if ((pDestination == NULL) || (pSource == NULL))
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d002      	beq.n	80014d0 <FLASH_IF_INT_Read+0x1c>
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d102      	bne.n	80014d6 <FLASH_IF_INT_Read+0x22>
  {
    return FLASH_IF_PARAM_ERROR;
 80014d0:	f06f 0305 	mvn.w	r3, #5
 80014d4:	e008      	b.n	80014e8 <FLASH_IF_INT_Read+0x34>
  }

  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	b29b      	uxth	r3, r3
 80014da:	461a      	mov	r2, r3
 80014dc:	68b9      	ldr	r1, [r7, #8]
 80014de:	68f8      	ldr	r0, [r7, #12]
 80014e0:	f01b f828 	bl	801c534 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN FLASH_IF_INT_Read_2 */

  /* USER CODE END FLASH_IF_INT_Read_2 */
  return ret_status;
 80014e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3718      	adds	r7, #24
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <FLASH_IF_INT_Erase>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Erase(void *pStart, uint32_t uLength)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b088      	sub	sp, #32
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 80014fa:	2300      	movs	r3, #0
 80014fc:	77fb      	strb	r3, [r7, #31]
  /* USER CODE BEGIN FLASH_IF_INT_Erase_1 */

  /* USER CODE END FLASH_IF_INT_Erase_1 */
  HAL_StatusTypeDef hal_status = HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	77bb      	strb	r3, [r7, #30]
  uint32_t page_error = 0U;
 8001502:	2300      	movs	r3, #0
 8001504:	617b      	str	r3, [r7, #20]
  uint32_t uStart = (uint32_t)pStart;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef erase_init;

  if (pStart == NULL)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d102      	bne.n	8001516 <FLASH_IF_INT_Erase+0x26>
  {
    return FLASH_IF_PARAM_ERROR;
 8001510:	f06f 0305 	mvn.w	r3, #5
 8001514:	e04e      	b.n	80015b4 <FLASH_IF_INT_Erase+0xc4>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 8001516:	f000 f87b 	bl	8001610 <FLASH_IF_INT_Clear_Error>
 800151a:	4603      	mov	r3, r0
 800151c:	77fb      	strb	r3, [r7, #31]

  if (ret_status == FLASH_IF_OK)
 800151e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d144      	bne.n	80015b0 <FLASH_IF_INT_Erase+0xc0>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001526:	f003 fa5f 	bl	80049e8 <HAL_FLASH_Unlock>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d13d      	bne.n	80015ac <FLASH_IF_INT_Erase+0xbc>
    {
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8001530:	2302      	movs	r3, #2
 8001532:	60bb      	str	r3, [r7, #8]
      erase_init.Page = PAGE_INDEX(uStart);
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 800153a:	4b20      	ldr	r3, [pc, #128]	; (80015bc <FLASH_IF_INT_Erase+0xcc>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	0299      	lsls	r1, r3, #10
 8001540:	4b1f      	ldr	r3, [pc, #124]	; (80015c0 <FLASH_IF_INT_Erase+0xd0>)
 8001542:	400b      	ands	r3, r1
 8001544:	fbb2 f1f3 	udiv	r1, r2, r3
 8001548:	fb01 f303 	mul.w	r3, r1, r3
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	0adb      	lsrs	r3, r3, #11
 8001550:	60fb      	str	r3, [r7, #12]
      /* Get the number of pages to erase from 1st page */
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	4413      	add	r3, r2
 8001558:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800155c:	3b01      	subs	r3, #1
 800155e:	4a17      	ldr	r2, [pc, #92]	; (80015bc <FLASH_IF_INT_Erase+0xcc>)
 8001560:	6812      	ldr	r2, [r2, #0]
 8001562:	0291      	lsls	r1, r2, #10
 8001564:	4a16      	ldr	r2, [pc, #88]	; (80015c0 <FLASH_IF_INT_Erase+0xd0>)
 8001566:	400a      	ands	r2, r1
 8001568:	fbb3 f1f2 	udiv	r1, r3, r2
 800156c:	fb01 f202 	mul.w	r2, r1, r2
 8001570:	1a9b      	subs	r3, r3, r2
 8001572:	0ada      	lsrs	r2, r3, #11
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	3301      	adds	r3, #1
 800157a:	613b      	str	r3, [r7, #16]

      /* Erase the Page */
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 800157c:	f107 0214 	add.w	r2, r7, #20
 8001580:	f107 0308 	add.w	r3, r7, #8
 8001584:	4611      	mov	r1, r2
 8001586:	4618      	mov	r0, r3
 8001588:	f003 fb30 	bl	8004bec <HAL_FLASHEx_Erase>
 800158c:	4603      	mov	r3, r0
 800158e:	77bb      	strb	r3, [r7, #30]

      if (hal_status != HAL_OK)
 8001590:	7fbb      	ldrb	r3, [r7, #30]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d007      	beq.n	80015a6 <FLASH_IF_INT_Erase+0xb6>
      {
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 8001596:	7fbb      	ldrb	r3, [r7, #30]
 8001598:	2b02      	cmp	r3, #2
 800159a:	d101      	bne.n	80015a0 <FLASH_IF_INT_Erase+0xb0>
 800159c:	2301      	movs	r3, #1
 800159e:	e001      	b.n	80015a4 <FLASH_IF_INT_Erase+0xb4>
 80015a0:	f06f 0301 	mvn.w	r3, #1
 80015a4:	77fb      	strb	r3, [r7, #31]
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 80015a6:	f003 fa41 	bl	8004a2c <HAL_FLASH_Lock>
 80015aa:	e001      	b.n	80015b0 <FLASH_IF_INT_Erase+0xc0>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 80015ac:	23fb      	movs	r3, #251	; 0xfb
 80015ae:	77fb      	strb	r3, [r7, #31]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Erase_2 */

  /* USER CODE END FLASH_IF_INT_Erase_2 */
  return ret_status;
 80015b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3720      	adds	r7, #32
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	1fff75e0 	.word	0x1fff75e0
 80015c0:	03fffc00 	.word	0x03fffc00

080015c4 <FLASH_IF_INT_IsEmpty>:

static int32_t FLASH_IF_INT_IsEmpty(void *pStart, uint32_t uLength)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  int32_t status = FLASH_IF_MEM_EMPTY;
 80015ce:	2300      	movs	r3, #0
 80015d0:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 80015d2:	2300      	movs	r3, #0
 80015d4:	60bb      	str	r3, [r7, #8]
 80015d6:	e011      	b.n	80015fc <FLASH_IF_INT_IsEmpty+0x38>
  {
    if (*(uint64_t *)pStart != UINT64_MAX)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015e2:	bf08      	it	eq
 80015e4:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 80015e8:	d002      	beq.n	80015f0 <FLASH_IF_INT_IsEmpty+0x2c>
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
 80015ea:	2301      	movs	r3, #1
 80015ec:	60fb      	str	r3, [r7, #12]
      break;
 80015ee:	e009      	b.n	8001604 <FLASH_IF_INT_IsEmpty+0x40>
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	3308      	adds	r3, #8
 80015f4:	607b      	str	r3, [r7, #4]
  for (index = 0; index < uLength; index += 8)
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	3308      	adds	r3, #8
 80015fa:	60bb      	str	r3, [r7, #8]
 80015fc:	68ba      	ldr	r2, [r7, #8]
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	429a      	cmp	r2, r3
 8001602:	d3e9      	bcc.n	80015d8 <FLASH_IF_INT_IsEmpty+0x14>
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
 8001604:	68fb      	ldr	r3, [r7, #12]
}
 8001606:	4618      	mov	r0, r3
 8001608:	3714      	adds	r7, #20
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr

08001610 <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 8001616:	23fb      	movs	r3, #251	; 0xfb
 8001618:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 800161a:	f003 f9e5 	bl	80049e8 <HAL_FLASH_Unlock>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d110      	bne.n	8001646 <FLASH_IF_INT_Clear_Error+0x36>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001624:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <FLASH_IF_INT_Clear_Error+0x44>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	4a0a      	ldr	r2, [pc, #40]	; (8001654 <FLASH_IF_INT_Clear_Error+0x44>)
 800162a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800162e:	6193      	str	r3, [r2, #24]
 8001630:	4b08      	ldr	r3, [pc, #32]	; (8001654 <FLASH_IF_INT_Clear_Error+0x44>)
 8001632:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 8001636:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 8001638:	f003 f9f8 	bl	8004a2c <HAL_FLASH_Lock>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d101      	bne.n	8001646 <FLASH_IF_INT_Clear_Error+0x36>
    {
      ret_status = FLASH_IF_OK;
 8001642:	2300      	movs	r3, #0
 8001644:	71fb      	strb	r3, [r7, #7]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
 8001646:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800164a:	4618      	mov	r0, r3
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	58004000 	.word	0x58004000

08001658 <LL_AHB2_GRP1_EnableClock>:
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001660:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001664:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001666:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4313      	orrs	r3, r2
 800166e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001670:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001674:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4013      	ands	r3, r2
 800167a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800167c:	68fb      	ldr	r3, [r7, #12]
}
 800167e:	bf00      	nop
 8001680:	3714      	adds	r7, #20
 8001682:	46bd      	mov	sp, r7
 8001684:	bc80      	pop	{r7}
 8001686:	4770      	bx	lr

08001688 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168e:	1d3b      	adds	r3, r7, #4
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800169c:	2001      	movs	r0, #1
 800169e:	f7ff ffdb 	bl	8001658 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a2:	2002      	movs	r0, #2
 80016a4:	f7ff ffd8 	bl	8001658 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a8:	2004      	movs	r0, #4
 80016aa:	f7ff ffd5 	bl	8001658 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Memory_CS_Pin|Status_LED_Pin, GPIO_PIN_RESET);
 80016ae:	2200      	movs	r2, #0
 80016b0:	f44f 7108 	mov.w	r1, #544	; 0x220
 80016b4:	481c      	ldr	r0, [pc, #112]	; (8001728 <MX_GPIO_Init+0xa0>)
 80016b6:	f003 fd9b 	bl	80051f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Bias_CS_Pin|Anneal_Enable_Pin|Bias_Enable_Pin|Stim_Enable_Pin
 80016ba:	2200      	movs	r2, #0
 80016bc:	f240 413d 	movw	r1, #1085	; 0x43d
 80016c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c4:	f003 fd94 	bl	80051f0 <HAL_GPIO_WritePin>
                          |RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Memory_CS_Pin|Status_LED_Pin;
 80016c8:	f44f 7308 	mov.w	r3, #544	; 0x220
 80016cc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ce:	2301      	movs	r3, #1
 80016d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d6:	2300      	movs	r3, #0
 80016d8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016da:	1d3b      	adds	r3, r7, #4
 80016dc:	4619      	mov	r1, r3
 80016de:	4812      	ldr	r0, [pc, #72]	; (8001728 <MX_GPIO_Init+0xa0>)
 80016e0:	f003 fb58 	bl	8004d94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Bias_CS_Pin|Anneal_Enable_Pin|Bias_Enable_Pin|Stim_Enable_Pin;
 80016e4:	f240 430d 	movw	r3, #1037	; 0x40d
 80016e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ea:	2301      	movs	r3, #1
 80016ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f2:	2300      	movs	r3, #0
 80016f4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f6:	1d3b      	adds	r3, r7, #4
 80016f8:	4619      	mov	r1, r3
 80016fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016fe:	f003 fb49 	bl	8004d94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RF_CTRL1_Pin|RF_CTRL2_Pin;
 8001702:	2330      	movs	r3, #48	; 0x30
 8001704:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001706:	2301      	movs	r3, #1
 8001708:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170e:	2303      	movs	r3, #3
 8001710:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001712:	1d3b      	adds	r3, r7, #4
 8001714:	4619      	mov	r1, r3
 8001716:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800171a:	f003 fb3b 	bl	8004d94 <HAL_GPIO_Init>

}
 800171e:	bf00      	nop
 8001720:	3718      	adds	r7, #24
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	48000400 	.word	0x48000400

0800172c <LL_AHB2_GRP1_EnableClock>:
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001734:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001738:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800173a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4313      	orrs	r3, r2
 8001742:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001744:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001748:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4013      	ands	r3, r2
 800174e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001750:	68fb      	ldr	r3, [r7, #12]
}
 8001752:	bf00      	nop
 8001754:	3714      	adds	r7, #20
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr

0800175c <LL_APB1_GRP1_EnableClock>:
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001764:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001768:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800176a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4313      	orrs	r3, r2
 8001772:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001774:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001778:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4013      	ands	r3, r2
 800177e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001780:	68fb      	ldr	r3, [r7, #12]
}
 8001782:	bf00      	nop
 8001784:	3714      	adds	r7, #20
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr

0800178c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001790:	4b1b      	ldr	r3, [pc, #108]	; (8001800 <MX_I2C2_Init+0x74>)
 8001792:	4a1c      	ldr	r2, [pc, #112]	; (8001804 <MX_I2C2_Init+0x78>)
 8001794:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001796:	4b1a      	ldr	r3, [pc, #104]	; (8001800 <MX_I2C2_Init+0x74>)
 8001798:	4a1b      	ldr	r2, [pc, #108]	; (8001808 <MX_I2C2_Init+0x7c>)
 800179a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800179c:	4b18      	ldr	r3, [pc, #96]	; (8001800 <MX_I2C2_Init+0x74>)
 800179e:	2200      	movs	r2, #0
 80017a0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017a2:	4b17      	ldr	r3, [pc, #92]	; (8001800 <MX_I2C2_Init+0x74>)
 80017a4:	2201      	movs	r2, #1
 80017a6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017a8:	4b15      	ldr	r3, [pc, #84]	; (8001800 <MX_I2C2_Init+0x74>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80017ae:	4b14      	ldr	r3, [pc, #80]	; (8001800 <MX_I2C2_Init+0x74>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017b4:	4b12      	ldr	r3, [pc, #72]	; (8001800 <MX_I2C2_Init+0x74>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017ba:	4b11      	ldr	r3, [pc, #68]	; (8001800 <MX_I2C2_Init+0x74>)
 80017bc:	2200      	movs	r2, #0
 80017be:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017c0:	4b0f      	ldr	r3, [pc, #60]	; (8001800 <MX_I2C2_Init+0x74>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80017c6:	480e      	ldr	r0, [pc, #56]	; (8001800 <MX_I2C2_Init+0x74>)
 80017c8:	f003 fd29 	bl	800521e <HAL_I2C_Init>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80017d2:	f000 f8fb 	bl	80019cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017d6:	2100      	movs	r1, #0
 80017d8:	4809      	ldr	r0, [pc, #36]	; (8001800 <MX_I2C2_Init+0x74>)
 80017da:	f003 fdaf 	bl	800533c <HAL_I2CEx_ConfigAnalogFilter>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80017e4:	f000 f8f2 	bl	80019cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80017e8:	2100      	movs	r1, #0
 80017ea:	4805      	ldr	r0, [pc, #20]	; (8001800 <MX_I2C2_Init+0x74>)
 80017ec:	f003 fdf0 	bl	80053d0 <HAL_I2CEx_ConfigDigitalFilter>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80017f6:	f000 f8e9 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	200001cc 	.word	0x200001cc
 8001804:	40005800 	.word	0x40005800
 8001808:	20303e5d 	.word	0x20303e5d

0800180c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b096      	sub	sp, #88	; 0x58
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001814:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	609a      	str	r2, [r3, #8]
 8001820:	60da      	str	r2, [r3, #12]
 8001822:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001824:	f107 030c 	add.w	r3, r7, #12
 8001828:	2238      	movs	r2, #56	; 0x38
 800182a:	2100      	movs	r1, #0
 800182c:	4618      	mov	r0, r3
 800182e:	f01c f945 	bl	801dabc <memset>
  if(i2cHandle->Instance==I2C2)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a21      	ldr	r2, [pc, #132]	; (80018bc <HAL_I2C_MspInit+0xb0>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d13b      	bne.n	80018b4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800183c:	2380      	movs	r3, #128	; 0x80
 800183e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001840:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001844:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001846:	f107 030c 	add.w	r3, r7, #12
 800184a:	4618      	mov	r0, r3
 800184c:	f005 f87c 	bl	8006948 <HAL_RCCEx_PeriphCLKConfig>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001856:	f000 f8b9 	bl	80019cc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800185a:	2001      	movs	r0, #1
 800185c:	f7ff ff66 	bl	800172c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001860:	2002      	movs	r0, #2
 8001862:	f7ff ff63 	bl	800172c <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001866:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800186a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800186c:	2312      	movs	r3, #18
 800186e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001874:	2300      	movs	r3, #0
 8001876:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001878:	2304      	movs	r3, #4
 800187a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800187c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001880:	4619      	mov	r1, r3
 8001882:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001886:	f003 fa85 	bl	8004d94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800188a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800188e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001890:	2312      	movs	r3, #18
 8001892:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001898:	2300      	movs	r3, #0
 800189a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800189c:	2304      	movs	r3, #4
 800189e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80018a4:	4619      	mov	r1, r3
 80018a6:	4806      	ldr	r0, [pc, #24]	; (80018c0 <HAL_I2C_MspInit+0xb4>)
 80018a8:	f003 fa74 	bl	8004d94 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80018ac:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80018b0:	f7ff ff54 	bl	800175c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80018b4:	bf00      	nop
 80018b6:	3758      	adds	r7, #88	; 0x58
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40005800 	.word	0x40005800
 80018c0:	48000400 	.word	0x48000400

080018c4 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80018cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018d4:	f023 0218 	bic.w	r2, r3, #24
 80018d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4313      	orrs	r3, r2
 80018e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bc80      	pop	{r7}
 80018ec:	4770      	bx	lr

080018ee <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018f2:	f001 fa61 	bl	8002db8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018f6:	f000 f80b 	bl	8001910 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018fa:	f7ff fec5 	bl	8001688 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 80018fe:	f008 fc8f 	bl	800a220 <MX_LoRaWAN_Init>
  MX_I2C2_Init();
 8001902:	f7ff ff43 	bl	800178c <MX_I2C2_Init>
  MX_SPI2_Init();
 8001906:	f000 f94d 	bl	8001ba4 <MX_SPI2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 800190a:	f008 fc91 	bl	800a230 <MX_LoRaWAN_Process>
 800190e:	e7fc      	b.n	800190a <main+0x1c>

08001910 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b09a      	sub	sp, #104	; 0x68
 8001914:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001916:	f107 0320 	add.w	r3, r7, #32
 800191a:	2248      	movs	r2, #72	; 0x48
 800191c:	2100      	movs	r1, #0
 800191e:	4618      	mov	r0, r3
 8001920:	f01c f8cc 	bl	801dabc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001924:	f107 0308 	add.w	r3, r7, #8
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
 8001934:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001936:	f003 fd97 	bl	8005468 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800193a:	2000      	movs	r0, #0
 800193c:	f7ff ffc2 	bl	80018c4 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001940:	4b21      	ldr	r3, [pc, #132]	; (80019c8 <SystemClock_Config+0xb8>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001948:	4a1f      	ldr	r2, [pc, #124]	; (80019c8 <SystemClock_Config+0xb8>)
 800194a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800194e:	6013      	str	r3, [r2, #0]
 8001950:	4b1d      	ldr	r3, [pc, #116]	; (80019c8 <SystemClock_Config+0xb8>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001958:	607b      	str	r3, [r7, #4]
 800195a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 800195c:	2326      	movs	r3, #38	; 0x26
 800195e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001960:	2381      	movs	r3, #129	; 0x81
 8001962:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001964:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001968:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800196a:	2301      	movs	r3, #1
 800196c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800196e:	2340      	movs	r3, #64	; 0x40
 8001970:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001972:	2300      	movs	r3, #0
 8001974:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001976:	23b0      	movs	r3, #176	; 0xb0
 8001978:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800197a:	2300      	movs	r3, #0
 800197c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800197e:	f107 0320 	add.w	r3, r7, #32
 8001982:	4618      	mov	r0, r3
 8001984:	f004 f8bc 	bl	8005b00 <HAL_RCC_OscConfig>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800198e:	f000 f81d 	bl	80019cc <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001992:	234f      	movs	r3, #79	; 0x4f
 8001994:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001996:	2300      	movs	r3, #0
 8001998:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800199a:	2300      	movs	r3, #0
 800199c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800199e:	2300      	movs	r3, #0
 80019a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019a2:	2300      	movs	r3, #0
 80019a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80019a6:	2300      	movs	r3, #0
 80019a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019aa:	f107 0308 	add.w	r3, r7, #8
 80019ae:	2102      	movs	r1, #2
 80019b0:	4618      	mov	r0, r3
 80019b2:	f004 fc27 	bl	8006204 <HAL_RCC_ClockConfig>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80019bc:	f000 f806 	bl	80019cc <Error_Handler>
  }
}
 80019c0:	bf00      	nop
 80019c2:	3768      	adds	r7, #104	; 0x68
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	58000400 	.word	0x58000400

080019cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019d0:	b672      	cpsid	i
}
 80019d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019d4:	e7fe      	b.n	80019d4 <Error_Handler+0x8>

080019d6 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80019d6:	b480      	push	{r7}
 80019d8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80019da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80019ee:	bf00      	nop
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bc80      	pop	{r7}
 80019f4:	4770      	bx	lr

080019f6 <LL_APB1_GRP1_EnableClock>:
{
 80019f6:	b480      	push	{r7}
 80019f8:	b085      	sub	sp, #20
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80019fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a02:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001a0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a12:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4013      	ands	r3, r2
 8001a18:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
}
 8001a1c:	bf00      	nop
 8001a1e:	3714      	adds	r7, #20
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bc80      	pop	{r7}
 8001a24:	4770      	bx	lr
	...

08001a28 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08c      	sub	sp, #48	; 0x30
 8001a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001a2e:	1d3b      	adds	r3, r7, #4
 8001a30:	222c      	movs	r2, #44	; 0x2c
 8001a32:	2100      	movs	r1, #0
 8001a34:	4618      	mov	r0, r3
 8001a36:	f01c f841 	bl	801dabc <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001a3a:	4b22      	ldr	r3, [pc, #136]	; (8001ac4 <MX_RTC_Init+0x9c>)
 8001a3c:	4a22      	ldr	r2, [pc, #136]	; (8001ac8 <MX_RTC_Init+0xa0>)
 8001a3e:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001a40:	4b20      	ldr	r3, [pc, #128]	; (8001ac4 <MX_RTC_Init+0x9c>)
 8001a42:	221f      	movs	r2, #31
 8001a44:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a46:	4b1f      	ldr	r3, [pc, #124]	; (8001ac4 <MX_RTC_Init+0x9c>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001a4c:	4b1d      	ldr	r3, [pc, #116]	; (8001ac4 <MX_RTC_Init+0x9c>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a52:	4b1c      	ldr	r3, [pc, #112]	; (8001ac4 <MX_RTC_Init+0x9c>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a58:	4b1a      	ldr	r3, [pc, #104]	; (8001ac4 <MX_RTC_Init+0x9c>)
 8001a5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a5e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001a60:	4b18      	ldr	r3, [pc, #96]	; (8001ac4 <MX_RTC_Init+0x9c>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001a66:	4b17      	ldr	r3, [pc, #92]	; (8001ac4 <MX_RTC_Init+0x9c>)
 8001a68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a6c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a6e:	4815      	ldr	r0, [pc, #84]	; (8001ac4 <MX_RTC_Init+0x9c>)
 8001a70:	f005 f884 	bl	8006b7c <HAL_RTC_Init>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8001a7a:	f7ff ffa7 	bl	80019cc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001a7e:	4811      	ldr	r0, [pc, #68]	; (8001ac4 <MX_RTC_Init+0x9c>)
 8001a80:	f005 fb7a 	bl	8007178 <HAL_RTCEx_SetSSRU_IT>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001a8a:	f7ff ff9f 	bl	80019cc <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001a92:	2300      	movs	r3, #0
 8001a94:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001a96:	2300      	movs	r3, #0
 8001a98:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001a9a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001a9e:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001aa0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001aa6:	1d3b      	adds	r3, r7, #4
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4805      	ldr	r0, [pc, #20]	; (8001ac4 <MX_RTC_Init+0x9c>)
 8001aae:	f005 f8e7 	bl	8006c80 <HAL_RTC_SetAlarm_IT>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001ab8:	f7ff ff88 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001abc:	bf00      	nop
 8001abe:	3730      	adds	r7, #48	; 0x30
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	20000220 	.word	0x20000220
 8001ac8:	40002800 	.word	0x40002800

08001acc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b090      	sub	sp, #64	; 0x40
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ad4:	f107 0308 	add.w	r3, r7, #8
 8001ad8:	2238      	movs	r2, #56	; 0x38
 8001ada:	2100      	movs	r1, #0
 8001adc:	4618      	mov	r0, r3
 8001ade:	f01b ffed 	bl	801dabc <memset>
  if(rtcHandle->Instance==RTC)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a16      	ldr	r2, [pc, #88]	; (8001b40 <HAL_RTC_MspInit+0x74>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d125      	bne.n	8001b38 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001aec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001af0:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001af2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001af6:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001af8:	f107 0308 	add.w	r3, r7, #8
 8001afc:	4618      	mov	r0, r3
 8001afe:	f004 ff23 	bl	8006948 <HAL_RCCEx_PeriphCLKConfig>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001b08:	f7ff ff60 	bl	80019cc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001b0c:	f7ff ff63 	bl	80019d6 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001b10:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001b14:	f7ff ff6f 	bl	80019f6 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	2002      	movs	r0, #2
 8001b1e:	f002 fafe 	bl	800411e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001b22:	2002      	movs	r0, #2
 8001b24:	f002 fb15 	bl	8004152 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001b28:	2200      	movs	r2, #0
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	202a      	movs	r0, #42	; 0x2a
 8001b2e:	f002 faf6 	bl	800411e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001b32:	202a      	movs	r0, #42	; 0x2a
 8001b34:	f002 fb0d 	bl	8004152 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001b38:	bf00      	nop
 8001b3a:	3740      	adds	r7, #64	; 0x40
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40002800 	.word	0x40002800

08001b44 <LL_AHB2_GRP1_EnableClock>:
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001b4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4013      	ands	r3, r2
 8001b66:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b68:	68fb      	ldr	r3, [r7, #12]
}
 8001b6a:	bf00      	nop
 8001b6c:	3714      	adds	r7, #20
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bc80      	pop	{r7}
 8001b72:	4770      	bx	lr

08001b74 <LL_APB1_GRP1_EnableClock>:
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001b7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b80:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001b8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b90:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4013      	ands	r3, r2
 8001b96:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b98:	68fb      	ldr	r3, [r7, #12]
}
 8001b9a:	bf00      	nop
 8001b9c:	3714      	adds	r7, #20
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bc80      	pop	{r7}
 8001ba2:	4770      	bx	lr

08001ba4 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001ba8:	4b1b      	ldr	r3, [pc, #108]	; (8001c18 <MX_SPI2_Init+0x74>)
 8001baa:	4a1c      	ldr	r2, [pc, #112]	; (8001c1c <MX_SPI2_Init+0x78>)
 8001bac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001bae:	4b1a      	ldr	r3, [pc, #104]	; (8001c18 <MX_SPI2_Init+0x74>)
 8001bb0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bb4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001bb6:	4b18      	ldr	r3, [pc, #96]	; (8001c18 <MX_SPI2_Init+0x74>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001bbc:	4b16      	ldr	r3, [pc, #88]	; (8001c18 <MX_SPI2_Init+0x74>)
 8001bbe:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001bc2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bc4:	4b14      	ldr	r3, [pc, #80]	; (8001c18 <MX_SPI2_Init+0x74>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bca:	4b13      	ldr	r3, [pc, #76]	; (8001c18 <MX_SPI2_Init+0x74>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001bd0:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <MX_SPI2_Init+0x74>)
 8001bd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bd6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001bd8:	4b0f      	ldr	r3, [pc, #60]	; (8001c18 <MX_SPI2_Init+0x74>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bde:	4b0e      	ldr	r3, [pc, #56]	; (8001c18 <MX_SPI2_Init+0x74>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001be4:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <MX_SPI2_Init+0x74>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bea:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <MX_SPI2_Init+0x74>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001bf0:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <MX_SPI2_Init+0x74>)
 8001bf2:	2207      	movs	r2, #7
 8001bf4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001bf6:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <MX_SPI2_Init+0x74>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001bfc:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <MX_SPI2_Init+0x74>)
 8001bfe:	2208      	movs	r2, #8
 8001c00:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001c02:	4805      	ldr	r0, [pc, #20]	; (8001c18 <MX_SPI2_Init+0x74>)
 8001c04:	f005 fb46 	bl	8007294 <HAL_SPI_Init>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001c0e:	f7ff fedd 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	20000258 	.word	0x20000258
 8001c1c:	40003800 	.word	0x40003800

08001c20 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b096      	sub	sp, #88	; 0x58
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c28:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
 8001c36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c38:	f107 030c 	add.w	r3, r7, #12
 8001c3c:	2238      	movs	r2, #56	; 0x38
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4618      	mov	r0, r3
 8001c42:	f01b ff3b 	bl	801dabc <memset>
  if(spiHandle->Instance==SPI2)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a2b      	ldr	r2, [pc, #172]	; (8001cf8 <HAL_SPI_MspInit+0xd8>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d14e      	bne.n	8001cee <HAL_SPI_MspInit+0xce>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S2;
 8001c50:	2310      	movs	r3, #16
 8001c52:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2s2ClockSelection = RCC_I2S2CLKSOURCE_HSI;
 8001c54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c58:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c5a:	f107 030c 	add.w	r3, r7, #12
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f004 fe72 	bl	8006948 <HAL_RCCEx_PeriphCLKConfig>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001c6a:	f7ff feaf 	bl	80019cc <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001c6e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001c72:	f7ff ff7f 	bl	8001b74 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c76:	2002      	movs	r0, #2
 8001c78:	f7ff ff64 	bl	8001b44 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7c:	2001      	movs	r0, #1
 8001c7e:	f7ff ff61 	bl	8001b44 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c82:	2004      	movs	r0, #4
 8001c84:	f7ff ff5e 	bl	8001b44 <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PB14     ------> SPI2_MISO
    PA9     ------> SPI2_SCK
    PC1     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001c88:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c8c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c92:	2300      	movs	r3, #0
 8001c94:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c96:	2300      	movs	r3, #0
 8001c98:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c9a:	2305      	movs	r3, #5
 8001c9c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c9e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4815      	ldr	r0, [pc, #84]	; (8001cfc <HAL_SPI_MspInit+0xdc>)
 8001ca6:	f003 f875 	bl	8004d94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001caa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cae:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001cbc:	2305      	movs	r3, #5
 8001cbe:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cca:	f003 f863 	bl	8004d94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ce2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4805      	ldr	r0, [pc, #20]	; (8001d00 <HAL_SPI_MspInit+0xe0>)
 8001cea:	f003 f853 	bl	8004d94 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001cee:	bf00      	nop
 8001cf0:	3758      	adds	r7, #88	; 0x58
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40003800 	.word	0x40003800
 8001cfc:	48000400 	.word	0x48000400
 8001d00:	48000800 	.word	0x48000800

08001d04 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001d08:	4b03      	ldr	r3, [pc, #12]	; (8001d18 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bc80      	pop	{r7}
 8001d16:	4770      	bx	lr
 8001d18:	58000400 	.word	0x58000400

08001d1c <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001d20:	bf00      	nop
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr

08001d28 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8001d2c:	bf00      	nop
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr

08001d34 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001d38:	f001 f85e 	bl	8002df8 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8001d3c:	f7ff ffe2 	bl	8001d04 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001d40:	2001      	movs	r0, #1
 8001d42:	f003 fc23 	bl	800558c <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 8001d4e:	f001 f861 	bl	8002e14 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8001d52:	f000 fec7 	bl	8002ae4 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 8001d5e:	f001 f84b 	bl	8002df8 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001d62:	2101      	movs	r1, #1
 8001d64:	2000      	movs	r0, #0
 8001d66:	f003 fb8d 	bl	8005484 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8001d72:	f001 f84f 	bl	8002e14 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bc80      	pop	{r7}
 8001d84:	4770      	bx	lr

08001d86 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d86:	b480      	push	{r7}
 8001d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d8a:	e7fe      	b.n	8001d8a <NMI_Handler+0x4>

08001d8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d90:	e7fe      	b.n	8001d90 <HardFault_Handler+0x4>

08001d92 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d92:	b480      	push	{r7}
 8001d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d96:	e7fe      	b.n	8001d96 <MemManage_Handler+0x4>

08001d98 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d9c:	e7fe      	b.n	8001d9c <BusFault_Handler+0x4>

08001d9e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001da2:	e7fe      	b.n	8001da2 <UsageFault_Handler+0x4>

08001da4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001da8:	bf00      	nop
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr

08001db0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001db4:	bf00      	nop
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr

08001dbc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bc80      	pop	{r7}
 8001dc6:	4770      	bx	lr

08001dc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dcc:	bf00      	nop
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bc80      	pop	{r7}
 8001dd2:	4770      	bx	lr

08001dd4 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001dd8:	4802      	ldr	r0, [pc, #8]	; (8001de4 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8001dda:	f005 fa09 	bl	80071f0 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20000220 	.word	0x20000220

08001de8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001dec:	4802      	ldr	r0, [pc, #8]	; (8001df8 <DMA1_Channel1_IRQHandler+0x10>)
 8001dee:	f002 fc47 	bl	8004680 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	20000364 	.word	0x20000364

08001dfc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e00:	4802      	ldr	r0, [pc, #8]	; (8001e0c <USART1_IRQHandler+0x10>)
 8001e02:	f006 f913 	bl	800802c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	200002d0 	.word	0x200002d0

08001e10 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001e14:	4802      	ldr	r0, [pc, #8]	; (8001e20 <RTC_Alarm_IRQHandler+0x10>)
 8001e16:	f005 f89b 	bl	8006f50 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000220 	.word	0x20000220

08001e24 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001e28:	4802      	ldr	r0, [pc, #8]	; (8001e34 <SUBGHZ_Radio_IRQHandler+0x10>)
 8001e2a:	f005 fe23 	bl	8007a74 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	200002bc 	.word	0x200002bc

08001e38 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e44:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001e46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001e50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e54:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
}
 8001e5e:	bf00      	nop
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr

08001e68 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001e6c:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <MX_SUBGHZ_Init+0x20>)
 8001e6e:	2208      	movs	r2, #8
 8001e70:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001e72:	4805      	ldr	r0, [pc, #20]	; (8001e88 <MX_SUBGHZ_Init+0x20>)
 8001e74:	f005 fb7c 	bl	8007570 <HAL_SUBGHZ_Init>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8001e7e:	f7ff fda5 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	200002bc 	.word	0x200002bc

08001e8c <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001e94:	2001      	movs	r0, #1
 8001e96:	f7ff ffcf 	bl	8001e38 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	2032      	movs	r0, #50	; 0x32
 8001ea0:	f002 f93d 	bl	800411e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001ea4:	2032      	movs	r0, #50	; 0x32
 8001ea6:	f002 f954 	bl	8004152 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <LL_RCC_SetClkAfterWakeFromStop>:
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b083      	sub	sp, #12
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001eba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001ec4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	608b      	str	r3, [r1, #8]
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr

08001ed8 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001edc:	4b02      	ldr	r3, [pc, #8]	; (8001ee8 <LL_FLASH_GetUDN+0x10>)
 8001ede:	681b      	ldr	r3, [r3, #0]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bc80      	pop	{r7}
 8001ee6:	4770      	bx	lr
 8001ee8:	1fff7580 	.word	0x1fff7580

08001eec <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001ef0:	4b03      	ldr	r3, [pc, #12]	; (8001f00 <LL_FLASH_GetDeviceID+0x14>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	b2db      	uxtb	r3, r3
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bc80      	pop	{r7}
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	1fff7584 	.word	0x1fff7584

08001f04 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001f08:	4b03      	ldr	r3, [pc, #12]	; (8001f18 <LL_FLASH_GetSTCompanyID+0x14>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	0a1b      	lsrs	r3, r3, #8
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bc80      	pop	{r7}
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	1fff7584 	.word	0x1fff7584

08001f1c <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8001f20:	2000      	movs	r0, #0
 8001f22:	f7ff ffc6 	bl	8001eb2 <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8001f26:	f01b f893 	bl	801d050 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8001f2a:	4b0e      	ldr	r3, [pc, #56]	; (8001f64 <SystemApp_Init+0x48>)
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8001f30:	f000 f974 	bl	800221c <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8001f34:	f01b fb1c 	bl	801d570 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001f38:	480b      	ldr	r0, [pc, #44]	; (8001f68 <SystemApp_Init+0x4c>)
 8001f3a:	f01b fbc7 	bl	801d6cc <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001f3e:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <SystemApp_Init+0x50>)
 8001f40:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001f44:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001f46:	2002      	movs	r0, #2
 8001f48:	f01b fbce 	bl	801d6e8 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8001f4c:	f7ff f882 	bl	8001054 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8001f50:	f000 f998 	bl	8002284 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8001f54:	f01a fa48 	bl	801c3e8 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001f58:	2101      	movs	r1, #1
 8001f5a:	2001      	movs	r0, #1
 8001f5c:	f01a fa84 	bl	801c468 <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8001f60:	bf00      	nop
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	200002c8 	.word	0x200002c8
 8001f68:	0800213d 	.word	0x0800213d
 8001f6c:	58004000 	.word	0x58004000

08001f70 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8001f74:	f01a faa8 	bl	801c4c8 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8001f78:	bf00      	nop
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 8001f82:	2300      	movs	r3, #0
 8001f84:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8001f86:	f7ff f873 	bl	8001070 <SYS_GetBatteryLevel>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8001f8e:	88bb      	ldrh	r3, [r7, #4]
 8001f90:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d902      	bls.n	8001f9e <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8001f98:	23fe      	movs	r3, #254	; 0xfe
 8001f9a:	71fb      	strb	r3, [r7, #7]
 8001f9c:	e014      	b.n	8001fc8 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 8001f9e:	88bb      	ldrh	r3, [r7, #4]
 8001fa0:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8001fa4:	d202      	bcs.n	8001fac <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	71fb      	strb	r3, [r7, #7]
 8001faa:	e00d      	b.n	8001fc8 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001fac:	88bb      	ldrh	r3, [r7, #4]
 8001fae:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	01db      	lsls	r3, r3, #7
 8001fb8:	1a9b      	subs	r3, r3, r2
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	4b05      	ldr	r3, [pc, #20]	; (8001fd4 <GetBatteryLevel+0x58>)
 8001fc0:	fba3 2302 	umull	r2, r3, r3, r2
 8001fc4:	09db      	lsrs	r3, r3, #7
 8001fc6:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8001fc8:	79fb      	ldrb	r3, [r7, #7]
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	1b4e81b5 	.word	0x1b4e81b5

08001fd8 <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b088      	sub	sp, #32
 8001fdc:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 8001fe2:	1d3b      	adds	r3, r7, #4
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f000 f923 	bl	8002230 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7fe fd95 	bl	8000b1c <__aeabi_f2iz>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8001ff6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3720      	adds	r7, #32
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8002002:	b590      	push	{r4, r7, lr}
 8002004:	b087      	sub	sp, #28
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 800200a:	2300      	movs	r3, #0
 800200c:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 800200e:	f7ff ff63 	bl	8001ed8 <LL_FLASH_GetUDN>
 8002012:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800201a:	d138      	bne.n	800208e <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 800201c:	f000 ff08 	bl	8002e30 <HAL_GetUIDw0>
 8002020:	4604      	mov	r4, r0
 8002022:	f000 ff19 	bl	8002e58 <HAL_GetUIDw2>
 8002026:	4603      	mov	r3, r0
 8002028:	4423      	add	r3, r4
 800202a:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 800202c:	f000 ff0a 	bl	8002e44 <HAL_GetUIDw1>
 8002030:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	0e1a      	lsrs	r2, r3, #24
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	3307      	adds	r3, #7
 800203a:	b2d2      	uxtb	r2, r2
 800203c:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	0c1a      	lsrs	r2, r3, #16
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	3306      	adds	r3, #6
 8002046:	b2d2      	uxtb	r2, r2
 8002048:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	0a1a      	lsrs	r2, r3, #8
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	3305      	adds	r3, #5
 8002052:	b2d2      	uxtb	r2, r2
 8002054:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	3304      	adds	r3, #4
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	b2d2      	uxtb	r2, r2
 800205e:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	0e1a      	lsrs	r2, r3, #24
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	3303      	adds	r3, #3
 8002068:	b2d2      	uxtb	r2, r2
 800206a:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	0c1a      	lsrs	r2, r3, #16
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3302      	adds	r3, #2
 8002074:	b2d2      	uxtb	r2, r2
 8002076:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	0a1a      	lsrs	r2, r3, #8
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3301      	adds	r3, #1
 8002080:	b2d2      	uxtb	r2, r2
 8002082:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	b2da      	uxtb	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 800208c:	e031      	b.n	80020f2 <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	3307      	adds	r3, #7
 8002092:	697a      	ldr	r2, [r7, #20]
 8002094:	b2d2      	uxtb	r2, r2
 8002096:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	0a1a      	lsrs	r2, r3, #8
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	3306      	adds	r3, #6
 80020a0:	b2d2      	uxtb	r2, r2
 80020a2:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	0c1a      	lsrs	r2, r3, #16
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3305      	adds	r3, #5
 80020ac:	b2d2      	uxtb	r2, r2
 80020ae:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	0e1a      	lsrs	r2, r3, #24
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	3304      	adds	r3, #4
 80020b8:	b2d2      	uxtb	r2, r2
 80020ba:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 80020bc:	f7ff ff16 	bl	8001eec <LL_FLASH_GetDeviceID>
 80020c0:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	3303      	adds	r3, #3
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	b2d2      	uxtb	r2, r2
 80020ca:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 80020cc:	f7ff ff1a 	bl	8001f04 <LL_FLASH_GetSTCompanyID>
 80020d0:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	3302      	adds	r3, #2
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	b2d2      	uxtb	r2, r2
 80020da:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	0a1a      	lsrs	r2, r3, #8
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3301      	adds	r3, #1
 80020e4:	b2d2      	uxtb	r2, r2
 80020e6:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	0c1b      	lsrs	r3, r3, #16
 80020ec:	b2da      	uxtb	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	701a      	strb	r2, [r3, #0]
}
 80020f2:	bf00      	nop
 80020f4:	371c      	adds	r7, #28
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd90      	pop	{r4, r7, pc}

080020fa <GetDevAddr>:

void GetDevAddr(uint32_t *devAddr)
{
 80020fa:	b590      	push	{r4, r7, lr}
 80020fc:	b083      	sub	sp, #12
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  *devAddr = LL_FLASH_GetUDN();
 8002102:	f7ff fee9 	bl	8001ed8 <LL_FLASH_GetUDN>
 8002106:	4602      	mov	r2, r0
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	601a      	str	r2, [r3, #0]
  if (*devAddr == 0xFFFFFFFF)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002114:	d10d      	bne.n	8002132 <GetDevAddr+0x38>
  {
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8002116:	f000 fe8b 	bl	8002e30 <HAL_GetUIDw0>
 800211a:	4604      	mov	r4, r0
 800211c:	f000 fe92 	bl	8002e44 <HAL_GetUIDw1>
 8002120:	4603      	mov	r3, r0
 8002122:	405c      	eors	r4, r3
 8002124:	f000 fe98 	bl	8002e58 <HAL_GetUIDw2>
 8002128:	4603      	mov	r3, r0
 800212a:	ea84 0203 	eor.w	r2, r4, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	bd90      	pop	{r4, r7, pc}
	...

0800213c <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af02      	add	r7, sp, #8
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8002146:	f107 0308 	add.w	r3, r7, #8
 800214a:	4618      	mov	r0, r3
 800214c:	f01a facc 	bl	801c6e8 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002156:	9200      	str	r2, [sp, #0]
 8002158:	4a07      	ldr	r2, [pc, #28]	; (8002178 <TimestampNow+0x3c>)
 800215a:	2110      	movs	r1, #16
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f000 f81d 	bl	800219c <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f7fe f808 	bl	8000178 <strlen>
 8002168:	4603      	mov	r3, r0
 800216a:	b29a      	uxth	r2, r3
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8002170:	bf00      	nop
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	0801dc30 	.word	0x0801dc30

0800217c <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8002180:	2101      	movs	r1, #1
 8002182:	2002      	movs	r0, #2
 8002184:	f01a f940 	bl	801c408 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8002188:	bf00      	nop
 800218a:	bd80      	pop	{r7, pc}

0800218c <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8002190:	2100      	movs	r1, #0
 8002192:	2002      	movs	r0, #2
 8002194:	f01a f938 	bl	801c408 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8002198:	bf00      	nop
 800219a:	bd80      	pop	{r7, pc}

0800219c <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 800219c:	b40c      	push	{r2, r3}
 800219e:	b580      	push	{r7, lr}
 80021a0:	b084      	sub	sp, #16
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
 80021a6:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 80021a8:	f107 031c 	add.w	r3, r7, #28
 80021ac:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80021ae:	6839      	ldr	r1, [r7, #0]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f01a fc69 	bl	801ca8c <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 80021ba:	bf00      	nop
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80021c4:	b002      	add	sp, #8
 80021c6:	4770      	bx	lr

080021c8 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bc80      	pop	{r7}
 80021da:	4770      	bx	lr

080021dc <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80021e2:	2300      	movs	r3, #0
 80021e4:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 80021e6:	4b06      	ldr	r3, [pc, #24]	; (8002200 <HAL_GetTick+0x24>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d002      	beq.n	80021f4 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 80021ee:	f000 f915 	bl	800241c <TIMER_IF_GetTimerValue>
 80021f2:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 80021f4:	687b      	ldr	r3, [r7, #4]
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	200002c8 	.word	0x200002c8

08002204 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4618      	mov	r0, r3
 8002210:	f000 f98b 	bl	800252a <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8002214:	bf00      	nop
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 8002220:	f000 fe24 	bl	8002e6c <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8002224:	f000 fe28 	bl	8002e78 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8002228:	f000 fe2c 	bl	8002e84 <HAL_DBGMCU_DisableDBGStandbyMode>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 800222c:	bf00      	nop
 800222e:	bd80      	pop	{r7, pc}

08002230 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8002230:	b480      	push	{r7}
 8002232:	b087      	sub	sp, #28
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8002238:	4b0d      	ldr	r3, [pc, #52]	; (8002270 <EnvSensors_Read+0x40>)
 800223a:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 800223c:	4b0d      	ldr	r3, [pc, #52]	; (8002274 <EnvSensors_Read+0x44>)
 800223e:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8002240:	4b0d      	ldr	r3, [pc, #52]	; (8002278 <EnvSensors_Read+0x48>)
 8002242:	60fb      	str	r3, [r7, #12]

  sensor_data->humidity    = HUMIDITY_Value;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a08      	ldr	r2, [pc, #32]	; (800227c <EnvSensors_Read+0x4c>)
 800225a:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a08      	ldr	r2, [pc, #32]	; (8002280 <EnvSensors_Read+0x50>)
 8002260:	611a      	str	r2, [r3, #16]

  //TODO: check for BMA400 flag
  //if flag is present, resample GPS

  return 0;
 8002262:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8002264:	4618      	mov	r0, r3
 8002266:	371c      	adds	r7, #28
 8002268:	46bd      	mov	sp, r7
 800226a:	bc80      	pop	{r7}
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	42480000 	.word	0x42480000
 8002274:	41900000 	.word	0x41900000
 8002278:	447a0000 	.word	0x447a0000
 800227c:	003e090d 	.word	0x003e090d
 8002280:	000503ab 	.word	0x000503ab

08002284 <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
  int32_t ret = 0;
 800228a:	2300      	movs	r3, #0
 800228c:	607b      	str	r3, [r7, #4]

  //TODO: initialize LSM303DLHC compass and Accelerometer
  //TODO: initialize BME280 pressure and temp

  /* USER CODE END EnvSensors_Init */
  return ret;
 800228e:	687b      	ldr	r3, [r7, #4]
}
 8002290:	4618      	mov	r0, r3
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	bc80      	pop	{r7}
 8002298:	4770      	bx	lr

0800229a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800229a:	b480      	push	{r7}
 800229c:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 800229e:	bf00      	nop
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bc80      	pop	{r7}
 80022a4:	4770      	bx	lr

080022a6 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 80022a6:	b480      	push	{r7}
 80022a8:	b083      	sub	sp, #12
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689b      	ldr	r3, [r3, #8]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bc80      	pop	{r7}
 80022ba:	4770      	bx	lr

080022bc <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80022c2:	2300      	movs	r3, #0
 80022c4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 80022c6:	4b14      	ldr	r3, [pc, #80]	; (8002318 <TIMER_IF_Init+0x5c>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	f083 0301 	eor.w	r3, r3, #1
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d01b      	beq.n	800230c <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80022d4:	4b11      	ldr	r3, [pc, #68]	; (800231c <TIMER_IF_Init+0x60>)
 80022d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022da:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 80022dc:	f7ff fba4 	bl	8001a28 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 80022e0:	f000 f856 	bl	8002390 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80022e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022e8:	480c      	ldr	r0, [pc, #48]	; (800231c <TIMER_IF_Init+0x60>)
 80022ea:	f004 fdd5 	bl	8006e98 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80022ee:	4b0b      	ldr	r3, [pc, #44]	; (800231c <TIMER_IF_Init+0x60>)
 80022f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022f4:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 80022f6:	4809      	ldr	r0, [pc, #36]	; (800231c <TIMER_IF_Init+0x60>)
 80022f8:	f004 ff0c 	bl	8007114 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 80022fc:	2000      	movs	r0, #0
 80022fe:	f000 f9d3 	bl	80026a8 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8002302:	f000 f85f 	bl	80023c4 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8002306:	4b04      	ldr	r3, [pc, #16]	; (8002318 <TIMER_IF_Init+0x5c>)
 8002308:	2201      	movs	r2, #1
 800230a:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 800230c:	79fb      	ldrb	r3, [r7, #7]
}
 800230e:	4618      	mov	r0, r3
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	200002c9 	.word	0x200002c9
 800231c:	20000220 	.word	0x20000220

08002320 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b08e      	sub	sp, #56	; 0x38
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002328:	2300      	movs	r3, #0
 800232a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 800232e:	f107 0308 	add.w	r3, r7, #8
 8002332:	222c      	movs	r2, #44	; 0x2c
 8002334:	2100      	movs	r1, #0
 8002336:	4618      	mov	r0, r3
 8002338:	f01b fbc0 	bl	801dabc <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 800233c:	f000 f828 	bl	8002390 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8002340:	4b11      	ldr	r3, [pc, #68]	; (8002388 <TIMER_IF_StartTimer+0x68>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	4413      	add	r3, r2
 8002348:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800234a:	2300      	movs	r3, #0
 800234c:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	43db      	mvns	r3, r3
 8002352:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002354:	2300      	movs	r3, #0
 8002356:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002358:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800235c:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800235e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002362:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002364:	f107 0308 	add.w	r3, r7, #8
 8002368:	2201      	movs	r2, #1
 800236a:	4619      	mov	r1, r3
 800236c:	4807      	ldr	r0, [pc, #28]	; (800238c <TIMER_IF_StartTimer+0x6c>)
 800236e:	f004 fc87 	bl	8006c80 <HAL_RTC_SetAlarm_IT>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8002378:	f7ff fb28 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 800237c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002380:	4618      	mov	r0, r3
 8002382:	3738      	adds	r7, #56	; 0x38
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	200002cc 	.word	0x200002cc
 800238c:	20000220 	.word	0x20000220

08002390 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002396:	2300      	movs	r3, #0
 8002398:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 800239a:	4b08      	ldr	r3, [pc, #32]	; (80023bc <TIMER_IF_StopTimer+0x2c>)
 800239c:	2201      	movs	r2, #1
 800239e:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80023a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023a4:	4806      	ldr	r0, [pc, #24]	; (80023c0 <TIMER_IF_StopTimer+0x30>)
 80023a6:	f004 fd77 	bl	8006e98 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80023aa:	4b05      	ldr	r3, [pc, #20]	; (80023c0 <TIMER_IF_StopTimer+0x30>)
 80023ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023b0:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 80023b2:	79fb      	ldrb	r3, [r7, #7]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3708      	adds	r7, #8
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40002800 	.word	0x40002800
 80023c0:	20000220 	.word	0x20000220

080023c4 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 80023c8:	f000 f98e 	bl	80026e8 <GetTimerTicks>
 80023cc:	4603      	mov	r3, r0
 80023ce:	4a03      	ldr	r2, [pc, #12]	; (80023dc <TIMER_IF_SetTimerContext+0x18>)
 80023d0:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 80023d2:	4b02      	ldr	r3, [pc, #8]	; (80023dc <TIMER_IF_SetTimerContext+0x18>)
 80023d4:	681b      	ldr	r3, [r3, #0]
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	200002cc 	.word	0x200002cc

080023e0 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 80023e4:	4b02      	ldr	r3, [pc, #8]	; (80023f0 <TIMER_IF_GetTimerContext+0x10>)
 80023e6:	681b      	ldr	r3, [r3, #0]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr
 80023f0:	200002cc 	.word	0x200002cc

080023f4 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80023fa:	2300      	movs	r3, #0
 80023fc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 80023fe:	f000 f973 	bl	80026e8 <GetTimerTicks>
 8002402:	4602      	mov	r2, r0
 8002404:	4b04      	ldr	r3, [pc, #16]	; (8002418 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 800240c:	687b      	ldr	r3, [r7, #4]
}
 800240e:	4618      	mov	r0, r3
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	200002cc 	.word	0x200002cc

0800241c <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002422:	2300      	movs	r3, #0
 8002424:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8002426:	4b06      	ldr	r3, [pc, #24]	; (8002440 <TIMER_IF_GetTimerValue+0x24>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d002      	beq.n	8002434 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 800242e:	f000 f95b 	bl	80026e8 <GetTimerTicks>
 8002432:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8002434:	687b      	ldr	r3, [r7, #4]
}
 8002436:	4618      	mov	r0, r3
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	200002c9 	.word	0x200002c9

08002444 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800244a:	2300      	movs	r3, #0
 800244c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 800244e:	2303      	movs	r3, #3
 8002450:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8002452:	687b      	ldr	r3, [r7, #4]
}
 8002454:	4618      	mov	r0, r3
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	bc80      	pop	{r7}
 800245c:	4770      	bx	lr

0800245e <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 800245e:	b5b0      	push	{r4, r5, r7, lr}
 8002460:	b084      	sub	sp, #16
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002466:	2100      	movs	r1, #0
 8002468:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 800246a:	6879      	ldr	r1, [r7, #4]
 800246c:	2000      	movs	r0, #0
 800246e:	460a      	mov	r2, r1
 8002470:	4603      	mov	r3, r0
 8002472:	0d95      	lsrs	r5, r2, #22
 8002474:	0294      	lsls	r4, r2, #10
 8002476:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800247a:	f04f 0300 	mov.w	r3, #0
 800247e:	4620      	mov	r0, r4
 8002480:	4629      	mov	r1, r5
 8002482:	f7fe fb91 	bl	8000ba8 <__aeabi_uldivmod>
 8002486:	4602      	mov	r2, r0
 8002488:	460b      	mov	r3, r1
 800248a:	4613      	mov	r3, r2
 800248c:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 800248e:	68fb      	ldr	r3, [r7, #12]
}
 8002490:	4618      	mov	r0, r3
 8002492:	3710      	adds	r7, #16
 8002494:	46bd      	mov	sp, r7
 8002496:	bdb0      	pop	{r4, r5, r7, pc}

08002498 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8002498:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800249c:	b085      	sub	sp, #20
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80024a2:	2100      	movs	r1, #0
 80024a4:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	2000      	movs	r0, #0
 80024aa:	460c      	mov	r4, r1
 80024ac:	4605      	mov	r5, r0
 80024ae:	4620      	mov	r0, r4
 80024b0:	4629      	mov	r1, r5
 80024b2:	f04f 0a00 	mov.w	sl, #0
 80024b6:	f04f 0b00 	mov.w	fp, #0
 80024ba:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 80024be:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 80024c2:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 80024c6:	4650      	mov	r0, sl
 80024c8:	4659      	mov	r1, fp
 80024ca:	1b02      	subs	r2, r0, r4
 80024cc:	eb61 0305 	sbc.w	r3, r1, r5
 80024d0:	f04f 0000 	mov.w	r0, #0
 80024d4:	f04f 0100 	mov.w	r1, #0
 80024d8:	0099      	lsls	r1, r3, #2
 80024da:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80024de:	0090      	lsls	r0, r2, #2
 80024e0:	4602      	mov	r2, r0
 80024e2:	460b      	mov	r3, r1
 80024e4:	eb12 0804 	adds.w	r8, r2, r4
 80024e8:	eb43 0905 	adc.w	r9, r3, r5
 80024ec:	f04f 0200 	mov.w	r2, #0
 80024f0:	f04f 0300 	mov.w	r3, #0
 80024f4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024f8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024fc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002500:	4690      	mov	r8, r2
 8002502:	4699      	mov	r9, r3
 8002504:	4640      	mov	r0, r8
 8002506:	4649      	mov	r1, r9
 8002508:	f04f 0200 	mov.w	r2, #0
 800250c:	f04f 0300 	mov.w	r3, #0
 8002510:	0a82      	lsrs	r2, r0, #10
 8002512:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002516:	0a8b      	lsrs	r3, r1, #10
 8002518:	4613      	mov	r3, r2
 800251a:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 800251c:	68fb      	ldr	r3, [r7, #12]
}
 800251e:	4618      	mov	r0, r3
 8002520:	3714      	adds	r7, #20
 8002522:	46bd      	mov	sp, r7
 8002524:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002528:	4770      	bx	lr

0800252a <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b084      	sub	sp, #16
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f7ff ff93 	bl	800245e <TIMER_IF_Convert_ms2Tick>
 8002538:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 800253a:	f000 f8d5 	bl	80026e8 <GetTimerTicks>
 800253e:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002540:	e000      	b.n	8002544 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8002542:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002544:	f000 f8d0 	bl	80026e8 <GetTimerTicks>
 8002548:	4602      	mov	r2, r0
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	429a      	cmp	r2, r3
 8002552:	d8f6      	bhi.n	8002542 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8002554:	bf00      	nop
 8002556:	bf00      	nop
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b082      	sub	sp, #8
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8002566:	f01a fec1 	bl	801d2ec <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 800256a:	bf00      	nop
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b084      	sub	sp, #16
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 800257a:	f000 f8a5 	bl	80026c8 <TIMER_IF_BkUp_Read_MSBticks>
 800257e:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	3301      	adds	r3, #1
 8002584:	4618      	mov	r0, r3
 8002586:	f000 f88f 	bl	80026a8 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 800258a:	bf00      	nop
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8002592:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002596:	b08c      	sub	sp, #48	; 0x30
 8002598:	af00      	add	r7, sp, #0
 800259a:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 800259c:	2300      	movs	r3, #0
 800259e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 80025a0:	f000 f8a2 	bl	80026e8 <GetTimerTicks>
 80025a4:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 80025a6:	f000 f88f 	bl	80026c8 <TIMER_IF_BkUp_Read_MSBticks>
 80025aa:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 80025ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ae:	2200      	movs	r2, #0
 80025b0:	60bb      	str	r3, [r7, #8]
 80025b2:	60fa      	str	r2, [r7, #12]
 80025b4:	f04f 0200 	mov.w	r2, #0
 80025b8:	f04f 0300 	mov.w	r3, #0
 80025bc:	68b9      	ldr	r1, [r7, #8]
 80025be:	000b      	movs	r3, r1
 80025c0:	2200      	movs	r2, #0
 80025c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025c4:	2000      	movs	r0, #0
 80025c6:	460c      	mov	r4, r1
 80025c8:	4605      	mov	r5, r0
 80025ca:	eb12 0804 	adds.w	r8, r2, r4
 80025ce:	eb43 0905 	adc.w	r9, r3, r5
 80025d2:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 80025d6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80025da:	f04f 0200 	mov.w	r2, #0
 80025de:	f04f 0300 	mov.w	r3, #0
 80025e2:	0a82      	lsrs	r2, r0, #10
 80025e4:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80025e8:	0a8b      	lsrs	r3, r1, #10
 80025ea:	4613      	mov	r3, r2
 80025ec:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	2200      	movs	r2, #0
 80025f2:	603b      	str	r3, [r7, #0]
 80025f4:	607a      	str	r2, [r7, #4]
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 80025fc:	f04f 0b00 	mov.w	fp, #0
 8002600:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff ff46 	bl	8002498 <TIMER_IF_Convert_Tick2ms>
 800260c:	4603      	mov	r3, r0
 800260e:	b29a      	uxth	r2, r3
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8002614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002616:	4618      	mov	r0, r3
 8002618:	3730      	adds	r7, #48	; 0x30
 800261a:	46bd      	mov	sp, r7
 800261c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002620 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	2100      	movs	r1, #0
 800262c:	4803      	ldr	r0, [pc, #12]	; (800263c <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 800262e:	f004 fe03 	bl	8007238 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8002632:	bf00      	nop
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	20000220 	.word	0x20000220

08002640 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	2101      	movs	r1, #1
 800264c:	4803      	ldr	r0, [pc, #12]	; (800265c <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 800264e:	f004 fdf3 	bl	8007238 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8002652:	bf00      	nop
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	20000220 	.word	0x20000220

08002660 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002666:	2300      	movs	r3, #0
 8002668:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 800266a:	2100      	movs	r1, #0
 800266c:	4804      	ldr	r0, [pc, #16]	; (8002680 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 800266e:	f004 fdfb 	bl	8007268 <HAL_RTCEx_BKUPRead>
 8002672:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8002674:	687b      	ldr	r3, [r7, #4]
}
 8002676:	4618      	mov	r0, r3
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	20000220 	.word	0x20000220

08002684 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800268a:	2300      	movs	r3, #0
 800268c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 800268e:	2101      	movs	r1, #1
 8002690:	4804      	ldr	r0, [pc, #16]	; (80026a4 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8002692:	f004 fde9 	bl	8007268 <HAL_RTCEx_BKUPRead>
 8002696:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8002698:	687b      	ldr	r3, [r7, #4]
}
 800269a:	4618      	mov	r0, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	20000220 	.word	0x20000220

080026a8 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	2102      	movs	r1, #2
 80026b4:	4803      	ldr	r0, [pc, #12]	; (80026c4 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 80026b6:	f004 fdbf 	bl	8007238 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 80026ba:	bf00      	nop
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	20000220 	.word	0x20000220

080026c8 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 80026ce:	2102      	movs	r1, #2
 80026d0:	4804      	ldr	r0, [pc, #16]	; (80026e4 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 80026d2:	f004 fdc9 	bl	8007268 <HAL_RTCEx_BKUPRead>
 80026d6:	6078      	str	r0, [r7, #4]
  return MSBticks;
 80026d8:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	20000220 	.word	0x20000220

080026e8 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 80026ee:	480b      	ldr	r0, [pc, #44]	; (800271c <GetTimerTicks+0x34>)
 80026f0:	f7ff fdd9 	bl	80022a6 <LL_RTC_TIME_GetSubSecond>
 80026f4:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80026f6:	e003      	b.n	8002700 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 80026f8:	4808      	ldr	r0, [pc, #32]	; (800271c <GetTimerTicks+0x34>)
 80026fa:	f7ff fdd4 	bl	80022a6 <LL_RTC_TIME_GetSubSecond>
 80026fe:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002700:	4806      	ldr	r0, [pc, #24]	; (800271c <GetTimerTicks+0x34>)
 8002702:	f7ff fdd0 	bl	80022a6 <LL_RTC_TIME_GetSubSecond>
 8002706:	4602      	mov	r2, r0
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4293      	cmp	r3, r2
 800270c:	d1f4      	bne.n	80026f8 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8002712:	4618      	mov	r0, r3
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40002800 	.word	0x40002800

08002720 <LL_AHB2_GRP1_EnableClock>:
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002728:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800272c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800272e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4313      	orrs	r3, r2
 8002736:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002738:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800273c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4013      	ands	r3, r2
 8002742:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002744:	68fb      	ldr	r3, [r7, #12]
}
 8002746:	bf00      	nop
 8002748:	3714      	adds	r7, #20
 800274a:	46bd      	mov	sp, r7
 800274c:	bc80      	pop	{r7}
 800274e:	4770      	bx	lr

08002750 <LL_APB2_GRP1_EnableClock>:
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002758:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800275c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800275e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4313      	orrs	r3, r2
 8002766:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002768:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800276c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4013      	ands	r3, r2
 8002772:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002774:	68fb      	ldr	r3, [r7, #12]
}
 8002776:	bf00      	nop
 8002778:	3714      	adds	r7, #20
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr

08002780 <LL_APB2_GRP1_DisableClock>:
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8002788:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800278c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	43db      	mvns	r3, r3
 8002792:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002796:	4013      	ands	r3, r2
 8002798:	660b      	str	r3, [r1, #96]	; 0x60
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr

080027a4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80027a8:	4b22      	ldr	r3, [pc, #136]	; (8002834 <MX_USART1_UART_Init+0x90>)
 80027aa:	4a23      	ldr	r2, [pc, #140]	; (8002838 <MX_USART1_UART_Init+0x94>)
 80027ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80027ae:	4b21      	ldr	r3, [pc, #132]	; (8002834 <MX_USART1_UART_Init+0x90>)
 80027b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027b6:	4b1f      	ldr	r3, [pc, #124]	; (8002834 <MX_USART1_UART_Init+0x90>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80027bc:	4b1d      	ldr	r3, [pc, #116]	; (8002834 <MX_USART1_UART_Init+0x90>)
 80027be:	2200      	movs	r2, #0
 80027c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80027c2:	4b1c      	ldr	r3, [pc, #112]	; (8002834 <MX_USART1_UART_Init+0x90>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027c8:	4b1a      	ldr	r3, [pc, #104]	; (8002834 <MX_USART1_UART_Init+0x90>)
 80027ca:	220c      	movs	r2, #12
 80027cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027ce:	4b19      	ldr	r3, [pc, #100]	; (8002834 <MX_USART1_UART_Init+0x90>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80027d4:	4b17      	ldr	r3, [pc, #92]	; (8002834 <MX_USART1_UART_Init+0x90>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027da:	4b16      	ldr	r3, [pc, #88]	; (8002834 <MX_USART1_UART_Init+0x90>)
 80027dc:	2200      	movs	r2, #0
 80027de:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80027e0:	4b14      	ldr	r3, [pc, #80]	; (8002834 <MX_USART1_UART_Init+0x90>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027e6:	4b13      	ldr	r3, [pc, #76]	; (8002834 <MX_USART1_UART_Init+0x90>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027ec:	4811      	ldr	r0, [pc, #68]	; (8002834 <MX_USART1_UART_Init+0x90>)
 80027ee:	f005 fb00 	bl	8007df2 <HAL_UART_Init>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80027f8:	f7ff f8e8 	bl	80019cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027fc:	2100      	movs	r1, #0
 80027fe:	480d      	ldr	r0, [pc, #52]	; (8002834 <MX_USART1_UART_Init+0x90>)
 8002800:	f007 fc23 	bl	800a04a <HAL_UARTEx_SetTxFifoThreshold>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800280a:	f7ff f8df 	bl	80019cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800280e:	2100      	movs	r1, #0
 8002810:	4808      	ldr	r0, [pc, #32]	; (8002834 <MX_USART1_UART_Init+0x90>)
 8002812:	f007 fc58 	bl	800a0c6 <HAL_UARTEx_SetRxFifoThreshold>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800281c:	f7ff f8d6 	bl	80019cc <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8002820:	4804      	ldr	r0, [pc, #16]	; (8002834 <MX_USART1_UART_Init+0x90>)
 8002822:	f007 fbd7 	bl	8009fd4 <HAL_UARTEx_EnableFifoMode>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800282c:	f7ff f8ce 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002830:	bf00      	nop
 8002832:	bd80      	pop	{r7, pc}
 8002834:	200002d0 	.word	0x200002d0
 8002838:	40013800 	.word	0x40013800

0800283c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b096      	sub	sp, #88	; 0x58
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002844:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	605a      	str	r2, [r3, #4]
 800284e:	609a      	str	r2, [r3, #8]
 8002850:	60da      	str	r2, [r3, #12]
 8002852:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002854:	f107 030c 	add.w	r3, r7, #12
 8002858:	2238      	movs	r2, #56	; 0x38
 800285a:	2100      	movs	r1, #0
 800285c:	4618      	mov	r0, r3
 800285e:	f01b f92d 	bl	801dabc <memset>
  if(uartHandle->Instance==USART1)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a2f      	ldr	r2, [pc, #188]	; (8002924 <HAL_UART_MspInit+0xe8>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d156      	bne.n	800291a <HAL_UART_MspInit+0xde>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800286c:	2301      	movs	r3, #1
 800286e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002870:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002874:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002876:	f107 030c 	add.w	r3, r7, #12
 800287a:	4618      	mov	r0, r3
 800287c:	f004 f864 	bl	8006948 <HAL_RCCEx_PeriphCLKConfig>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002886:	f7ff f8a1 	bl	80019cc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800288a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800288e:	f7ff ff5f 	bl	8002750 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002892:	2002      	movs	r0, #2
 8002894:	f7ff ff44 	bl	8002720 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8002898:	23c0      	movs	r3, #192	; 0xc0
 800289a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289c:	2302      	movs	r3, #2
 800289e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a0:	2300      	movs	r3, #0
 80028a2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028a4:	2303      	movs	r3, #3
 80028a6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028a8:	2307      	movs	r3, #7
 80028aa:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80028b0:	4619      	mov	r1, r3
 80028b2:	481d      	ldr	r0, [pc, #116]	; (8002928 <HAL_UART_MspInit+0xec>)
 80028b4:	f002 fa6e 	bl	8004d94 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 80028b8:	4b1c      	ldr	r3, [pc, #112]	; (800292c <HAL_UART_MspInit+0xf0>)
 80028ba:	4a1d      	ldr	r2, [pc, #116]	; (8002930 <HAL_UART_MspInit+0xf4>)
 80028bc:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80028be:	4b1b      	ldr	r3, [pc, #108]	; (800292c <HAL_UART_MspInit+0xf0>)
 80028c0:	2212      	movs	r2, #18
 80028c2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028c4:	4b19      	ldr	r3, [pc, #100]	; (800292c <HAL_UART_MspInit+0xf0>)
 80028c6:	2210      	movs	r2, #16
 80028c8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028ca:	4b18      	ldr	r3, [pc, #96]	; (800292c <HAL_UART_MspInit+0xf0>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80028d0:	4b16      	ldr	r3, [pc, #88]	; (800292c <HAL_UART_MspInit+0xf0>)
 80028d2:	2280      	movs	r2, #128	; 0x80
 80028d4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028d6:	4b15      	ldr	r3, [pc, #84]	; (800292c <HAL_UART_MspInit+0xf0>)
 80028d8:	2200      	movs	r2, #0
 80028da:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028dc:	4b13      	ldr	r3, [pc, #76]	; (800292c <HAL_UART_MspInit+0xf0>)
 80028de:	2200      	movs	r2, #0
 80028e0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80028e2:	4b12      	ldr	r3, [pc, #72]	; (800292c <HAL_UART_MspInit+0xf0>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80028e8:	4b10      	ldr	r3, [pc, #64]	; (800292c <HAL_UART_MspInit+0xf0>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80028ee:	480f      	ldr	r0, [pc, #60]	; (800292c <HAL_UART_MspInit+0xf0>)
 80028f0:	f001 fc4c 	bl	800418c <HAL_DMA_Init>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 80028fa:	f7ff f867 	bl	80019cc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a0a      	ldr	r2, [pc, #40]	; (800292c <HAL_UART_MspInit+0xf0>)
 8002902:	67da      	str	r2, [r3, #124]	; 0x7c
 8002904:	4a09      	ldr	r2, [pc, #36]	; (800292c <HAL_UART_MspInit+0xf0>)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 800290a:	2200      	movs	r2, #0
 800290c:	2102      	movs	r1, #2
 800290e:	2024      	movs	r0, #36	; 0x24
 8002910:	f001 fc05 	bl	800411e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002914:	2024      	movs	r0, #36	; 0x24
 8002916:	f001 fc1c 	bl	8004152 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800291a:	bf00      	nop
 800291c:	3758      	adds	r7, #88	; 0x58
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	40013800 	.word	0x40013800
 8002928:	48000400 	.word	0x48000400
 800292c:	20000364 	.word	0x20000364
 8002930:	40020008 	.word	0x40020008

08002934 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a0b      	ldr	r2, [pc, #44]	; (8002970 <HAL_UART_MspDeInit+0x3c>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d10f      	bne.n	8002966 <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002946:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800294a:	f7ff ff19 	bl	8002780 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 800294e:	21c0      	movs	r1, #192	; 0xc0
 8002950:	4808      	ldr	r0, [pc, #32]	; (8002974 <HAL_UART_MspDeInit+0x40>)
 8002952:	f002 fb7f 	bl	8005054 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800295a:	4618      	mov	r0, r3
 800295c:	f001 fcbe 	bl	80042dc <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002960:	2024      	movs	r0, #36	; 0x24
 8002962:	f001 fc04 	bl	800416e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8002966:	bf00      	nop
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40013800 	.word	0x40013800
 8002974:	48000400 	.word	0x48000400

08002978 <LL_APB2_GRP1_ForceReset>:
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8002980:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002984:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002986:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4313      	orrs	r3, r2
 800298e:	640b      	str	r3, [r1, #64]	; 0x40
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	bc80      	pop	{r7}
 8002998:	4770      	bx	lr

0800299a <LL_APB2_GRP1_ReleaseReset>:
{
 800299a:	b480      	push	{r7}
 800299c:	b083      	sub	sp, #12
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 80029a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	43db      	mvns	r3, r3
 80029ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029b0:	4013      	ands	r3, r2
 80029b2:	640b      	str	r3, [r1, #64]	; 0x40
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bc80      	pop	{r7}
 80029bc:	4770      	bx	lr
	...

080029c0 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80029c8:	4b06      	ldr	r3, [pc, #24]	; (80029e4 <LL_EXTI_EnableIT_0_31+0x24>)
 80029ca:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80029ce:	4905      	ldr	r1, [pc, #20]	; (80029e4 <LL_EXTI_EnableIT_0_31+0x24>)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	bc80      	pop	{r7}
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	58000800 	.word	0x58000800

080029e8 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 80029f0:	4a07      	ldr	r2, [pc, #28]	; (8002a10 <vcom_Init+0x28>)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 80029f6:	f7fe fbcd 	bl	8001194 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80029fa:	f7ff fed3 	bl	80027a4 <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 80029fe:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002a02:	f7ff ffdd 	bl	80029c0 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8002a06:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3708      	adds	r7, #8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	200003c8 	.word	0x200003c8

08002a14 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 8002a18:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002a1c:	f7ff ffac 	bl	8002978 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 8002a20:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002a24:	f7ff ffb9 	bl	800299a <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8002a28:	4804      	ldr	r0, [pc, #16]	; (8002a3c <vcom_DeInit+0x28>)
 8002a2a:	f7ff ff83 	bl	8002934 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8002a2e:	200f      	movs	r0, #15
 8002a30:	f001 fb9d 	bl	800416e <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8002a34:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	200002d0 	.word	0x200002d0

08002a40 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	460b      	mov	r3, r1
 8002a4a:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8002a4c:	887b      	ldrh	r3, [r7, #2]
 8002a4e:	461a      	mov	r2, r3
 8002a50:	6879      	ldr	r1, [r7, #4]
 8002a52:	4804      	ldr	r0, [pc, #16]	; (8002a64 <vcom_Trace_DMA+0x24>)
 8002a54:	f005 fa6a 	bl	8007f2c <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8002a58:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	200002d0 	.word	0x200002d0

08002a68 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002a70:	4a19      	ldr	r2, [pc, #100]	; (8002ad8 <vcom_ReceiveInit+0x70>)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002a76:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a7a:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8002a7c:	f107 0308 	add.w	r3, r7, #8
 8002a80:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002a84:	4815      	ldr	r0, [pc, #84]	; (8002adc <vcom_ReceiveInit+0x74>)
 8002a86:	f007 fa18 	bl	8009eba <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8002a8a:	bf00      	nop
 8002a8c:	4b13      	ldr	r3, [pc, #76]	; (8002adc <vcom_ReceiveInit+0x74>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a9a:	d0f7      	beq.n	8002a8c <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8002a9c:	bf00      	nop
 8002a9e:	4b0f      	ldr	r3, [pc, #60]	; (8002adc <vcom_ReceiveInit+0x74>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	69db      	ldr	r3, [r3, #28]
 8002aa4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aa8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002aac:	d1f7      	bne.n	8002a9e <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8002aae:	4b0b      	ldr	r3, [pc, #44]	; (8002adc <vcom_ReceiveInit+0x74>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	4b09      	ldr	r3, [pc, #36]	; (8002adc <vcom_ReceiveInit+0x74>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002abc:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 8002abe:	4807      	ldr	r0, [pc, #28]	; (8002adc <vcom_ReceiveInit+0x74>)
 8002ac0:	f007 fa56 	bl	8009f70 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	4906      	ldr	r1, [pc, #24]	; (8002ae0 <vcom_ReceiveInit+0x78>)
 8002ac8:	4804      	ldr	r0, [pc, #16]	; (8002adc <vcom_ReceiveInit+0x74>)
 8002aca:	f005 f9e3 	bl	8007e94 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8002ace:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	200003cc 	.word	0x200003cc
 8002adc:	200002d0 	.word	0x200002d0
 8002ae0:	200003c4 	.word	0x200003c4

08002ae4 <vcom_Resume>:

void vcom_Resume(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ae8:	4808      	ldr	r0, [pc, #32]	; (8002b0c <vcom_Resume+0x28>)
 8002aea:	f005 f982 	bl	8007df2 <HAL_UART_Init>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <vcom_Resume+0x14>
  {
    Error_Handler();
 8002af4:	f7fe ff6a 	bl	80019cc <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002af8:	4805      	ldr	r0, [pc, #20]	; (8002b10 <vcom_Resume+0x2c>)
 8002afa:	f001 fb47 	bl	800418c <HAL_DMA_Init>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <vcom_Resume+0x24>
  {
    Error_Handler();
 8002b04:	f7fe ff62 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8002b08:	bf00      	nop
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	200002d0 	.word	0x200002d0
 8002b10:	20000364 	.word	0x20000364

08002b14 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a05      	ldr	r2, [pc, #20]	; (8002b38 <HAL_UART_TxCpltCallback+0x24>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d103      	bne.n	8002b2e <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 8002b26:	4b05      	ldr	r3, [pc, #20]	; (8002b3c <HAL_UART_TxCpltCallback+0x28>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2000      	movs	r0, #0
 8002b2c:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002b2e:	bf00      	nop
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	40013800 	.word	0x40013800
 8002b3c:	200003c8 	.word	0x200003c8

08002b40 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a0d      	ldr	r2, [pc, #52]	; (8002b84 <HAL_UART_RxCpltCallback+0x44>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d113      	bne.n	8002b7a <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8002b52:	4b0d      	ldr	r3, [pc, #52]	; (8002b88 <HAL_UART_RxCpltCallback+0x48>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00a      	beq.n	8002b70 <HAL_UART_RxCpltCallback+0x30>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d105      	bne.n	8002b70 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 8002b64:	4b08      	ldr	r3, [pc, #32]	; (8002b88 <HAL_UART_RxCpltCallback+0x48>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	4807      	ldr	r0, [pc, #28]	; (8002b8c <HAL_UART_RxCpltCallback+0x4c>)
 8002b6e:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8002b70:	2201      	movs	r2, #1
 8002b72:	4906      	ldr	r1, [pc, #24]	; (8002b8c <HAL_UART_RxCpltCallback+0x4c>)
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f005 f98d 	bl	8007e94 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8002b7a:	bf00      	nop
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	40013800 	.word	0x40013800
 8002b88:	200003cc 	.word	0x200003cc
 8002b8c:	200003c4 	.word	0x200003c4

08002b90 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002b90:	480d      	ldr	r0, [pc, #52]	; (8002bc8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002b92:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002b94:	f7ff fb81 	bl	800229a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b98:	480c      	ldr	r0, [pc, #48]	; (8002bcc <LoopForever+0x6>)
  ldr r1, =_edata
 8002b9a:	490d      	ldr	r1, [pc, #52]	; (8002bd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b9c:	4a0d      	ldr	r2, [pc, #52]	; (8002bd4 <LoopForever+0xe>)
  movs r3, #0
 8002b9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ba0:	e002      	b.n	8002ba8 <LoopCopyDataInit>

08002ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ba6:	3304      	adds	r3, #4

08002ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bac:	d3f9      	bcc.n	8002ba2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bae:	4a0a      	ldr	r2, [pc, #40]	; (8002bd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002bb0:	4c0a      	ldr	r4, [pc, #40]	; (8002bdc <LoopForever+0x16>)
  movs r3, #0
 8002bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bb4:	e001      	b.n	8002bba <LoopFillZerobss>

08002bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bb8:	3204      	adds	r2, #4

08002bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bbc:	d3fb      	bcc.n	8002bb6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002bbe:	f01a ff85 	bl	801dacc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002bc2:	f7fe fe94 	bl	80018ee <main>

08002bc6 <LoopForever>:

LoopForever:
    b LoopForever
 8002bc6:	e7fe      	b.n	8002bc6 <LoopForever>
  ldr   r0, =_estack
 8002bc8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002bcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bd0:	20000148 	.word	0x20000148
  ldr r2, =_sidata
 8002bd4:	0801ec8c 	.word	0x0801ec8c
  ldr r2, =_sbss
 8002bd8:	20000148 	.word	0x20000148
  ldr r4, =_ebss
 8002bdc:	200022d0 	.word	0x200022d0

08002be0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002be0:	e7fe      	b.n	8002be0 <ADC_IRQHandler>
	...

08002be4 <Status_LED_Off>:
void Disable_Bias_CS(void) {
	HAL_GPIO_WritePin(Bias_CS_GPIO_Port, Bias_CS_Pin, GPIO_PIN_RESET);
}

// Staus LED
void Status_LED_Off(void) {
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Status_LED_GPIO_Port, Status_LED_Pin, GPIO_PIN_SET);
 8002be8:	2201      	movs	r2, #1
 8002bea:	2120      	movs	r1, #32
 8002bec:	4802      	ldr	r0, [pc, #8]	; (8002bf8 <Status_LED_Off+0x14>)
 8002bee:	f002 faff 	bl	80051f0 <HAL_GPIO_WritePin>
}
 8002bf2:	bf00      	nop
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	48000400 	.word	0x48000400

08002bfc <Status_LED_On>:

void Status_LED_On(void) {
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Status_LED_GPIO_Port, Status_LED_Pin, GPIO_PIN_RESET);
 8002c00:	2200      	movs	r2, #0
 8002c02:	2120      	movs	r1, #32
 8002c04:	4802      	ldr	r0, [pc, #8]	; (8002c10 <Status_LED_On+0x14>)
 8002c06:	f002 faf3 	bl	80051f0 <HAL_GPIO_WritePin>
}
 8002c0a:	bf00      	nop
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	48000400 	.word	0x48000400

08002c14 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002c1a:	1d3b      	adds	r3, r7, #4
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	605a      	str	r2, [r3, #4]
 8002c22:	609a      	str	r2, [r3, #8]
 8002c24:	60da      	str	r2, [r3, #12]
 8002c26:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8002c28:	2310      	movs	r3, #16
 8002c2a:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8002c30:	2300      	movs	r3, #0
 8002c32:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c34:	2303      	movs	r3, #3
 8002c36:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8002c38:	1d3b      	adds	r3, r7, #4
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c40:	f002 f8a8 	bl	8004d94 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8002c44:	2320      	movs	r3, #32
 8002c46:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8002c48:	1d3b      	adds	r3, r7, #4
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c50:	f002 f8a0 	bl	8004d94 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002c54:	2200      	movs	r2, #0
 8002c56:	2120      	movs	r1, #32
 8002c58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c5c:	f002 fac8 	bl	80051f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002c60:	2200      	movs	r2, #0
 8002c62:	2110      	movs	r1, #16
 8002c64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c68:	f002 fac2 	bl	80051f0 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3718      	adds	r7, #24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
	...

08002c78 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	4603      	mov	r3, r0
 8002c80:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8002c82:	79fb      	ldrb	r3, [r7, #7]
 8002c84:	2b03      	cmp	r3, #3
 8002c86:	d83f      	bhi.n	8002d08 <BSP_RADIO_ConfigRFSwitch+0x90>
 8002c88:	a201      	add	r2, pc, #4	; (adr r2, 8002c90 <BSP_RADIO_ConfigRFSwitch+0x18>)
 8002c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c8e:	bf00      	nop
 8002c90:	08002ca1 	.word	0x08002ca1
 8002c94:	08002cbb 	.word	0x08002cbb
 8002c98:	08002cd5 	.word	0x08002cd5
 8002c9c:	08002cef 	.word	0x08002cef
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	2110      	movs	r1, #16
 8002ca4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ca8:	f002 faa2 	bl	80051f0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002cac:	2200      	movs	r2, #0
 8002cae:	2120      	movs	r1, #32
 8002cb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cb4:	f002 fa9c 	bl	80051f0 <HAL_GPIO_WritePin>
      break;      
 8002cb8:	e027      	b.n	8002d0a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002cba:	2201      	movs	r2, #1
 8002cbc:	2110      	movs	r1, #16
 8002cbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cc2:	f002 fa95 	bl	80051f0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	2120      	movs	r1, #32
 8002cca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cce:	f002 fa8f 	bl	80051f0 <HAL_GPIO_WritePin>
      break;
 8002cd2:	e01a      	b.n	8002d0a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	2110      	movs	r1, #16
 8002cd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cdc:	f002 fa88 	bl	80051f0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	2120      	movs	r1, #32
 8002ce4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ce8:	f002 fa82 	bl	80051f0 <HAL_GPIO_WritePin>
      break;
 8002cec:	e00d      	b.n	8002d0a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002cee:	2200      	movs	r2, #0
 8002cf0:	2110      	movs	r1, #16
 8002cf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cf6:	f002 fa7b 	bl	80051f0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	2120      	movs	r1, #32
 8002cfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d02:	f002 fa75 	bl	80051f0 <HAL_GPIO_WritePin>
      break;
 8002d06:	e000      	b.n	8002d0a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 8002d08:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3708      	adds	r7, #8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 8002d18:	2302      	movs	r3, #2
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bc80      	pop	{r7}
 8002d20:	4770      	bx	lr

08002d22 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8002d22:	b480      	push	{r7}
 8002d24:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8002d26:	2301      	movs	r3, #1
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bc80      	pop	{r7}
 8002d2e:	4770      	bx	lr

08002d30 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8002d34:	2301      	movs	r3, #1
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bc80      	pop	{r7}
 8002d3c:	4770      	bx	lr

08002d3e <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b085      	sub	sp, #20
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	4603      	mov	r3, r0
 8002d46:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8002d48:	79fb      	ldrb	r3, [r7, #7]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d102      	bne.n	8002d54 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8002d4e:	230f      	movs	r3, #15
 8002d50:	60fb      	str	r3, [r7, #12]
 8002d52:	e001      	b.n	8002d58 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8002d54:	2316      	movs	r3, #22
 8002d56:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002d58:	68fb      	ldr	r3, [r7, #12]
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3714      	adds	r7, #20
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bc80      	pop	{r7}
 8002d62:	4770      	bx	lr

08002d64 <LL_DBGMCU_DisableDBGSleepMode>:
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002d68:	4b04      	ldr	r3, [pc, #16]	; (8002d7c <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	4a03      	ldr	r2, [pc, #12]	; (8002d7c <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8002d6e:	f023 0301 	bic.w	r3, r3, #1
 8002d72:	6053      	str	r3, [r2, #4]
}
 8002d74:	bf00      	nop
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc80      	pop	{r7}
 8002d7a:	4770      	bx	lr
 8002d7c:	e0042000 	.word	0xe0042000

08002d80 <LL_DBGMCU_DisableDBGStopMode>:
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002d84:	4b04      	ldr	r3, [pc, #16]	; (8002d98 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	4a03      	ldr	r2, [pc, #12]	; (8002d98 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002d8a:	f023 0302 	bic.w	r3, r3, #2
 8002d8e:	6053      	str	r3, [r2, #4]
}
 8002d90:	bf00      	nop
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bc80      	pop	{r7}
 8002d96:	4770      	bx	lr
 8002d98:	e0042000 	.word	0xe0042000

08002d9c <LL_DBGMCU_DisableDBGStandbyMode>:
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002da0:	4b04      	ldr	r3, [pc, #16]	; (8002db4 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	4a03      	ldr	r2, [pc, #12]	; (8002db4 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002da6:	f023 0304 	bic.w	r3, r3, #4
 8002daa:	6053      	str	r3, [r2, #4]
}
 8002dac:	bf00      	nop
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bc80      	pop	{r7}
 8002db2:	4770      	bx	lr
 8002db4:	e0042000 	.word	0xe0042000

08002db8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dc2:	2003      	movs	r0, #3
 8002dc4:	f001 f9a0 	bl	8004108 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002dc8:	f003 fbe0 	bl	800658c <HAL_RCC_GetHCLKFreq>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	4a09      	ldr	r2, [pc, #36]	; (8002df4 <HAL_Init+0x3c>)
 8002dd0:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002dd2:	200f      	movs	r0, #15
 8002dd4:	f7ff f9f8 	bl	80021c8 <HAL_InitTick>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d002      	beq.n	8002de4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	71fb      	strb	r3, [r7, #7]
 8002de2:	e001      	b.n	8002de8 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002de4:	f7fe ffc9 	bl	8001d7a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002de8:	79fb      	ldrb	r3, [r7, #7]
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	20000000 	.word	0x20000000

08002df8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002dfc:	4b04      	ldr	r3, [pc, #16]	; (8002e10 <HAL_SuspendTick+0x18>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a03      	ldr	r2, [pc, #12]	; (8002e10 <HAL_SuspendTick+0x18>)
 8002e02:	f023 0302 	bic.w	r3, r3, #2
 8002e06:	6013      	str	r3, [r2, #0]
}
 8002e08:	bf00      	nop
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bc80      	pop	{r7}
 8002e0e:	4770      	bx	lr
 8002e10:	e000e010 	.word	0xe000e010

08002e14 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002e18:	4b04      	ldr	r3, [pc, #16]	; (8002e2c <HAL_ResumeTick+0x18>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a03      	ldr	r2, [pc, #12]	; (8002e2c <HAL_ResumeTick+0x18>)
 8002e1e:	f043 0302 	orr.w	r3, r3, #2
 8002e22:	6013      	str	r3, [r2, #0]
}
 8002e24:	bf00      	nop
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bc80      	pop	{r7}
 8002e2a:	4770      	bx	lr
 8002e2c:	e000e010 	.word	0xe000e010

08002e30 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8002e34:	4b02      	ldr	r3, [pc, #8]	; (8002e40 <HAL_GetUIDw0+0x10>)
 8002e36:	681b      	ldr	r3, [r3, #0]
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bc80      	pop	{r7}
 8002e3e:	4770      	bx	lr
 8002e40:	1fff7590 	.word	0x1fff7590

08002e44 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8002e48:	4b02      	ldr	r3, [pc, #8]	; (8002e54 <HAL_GetUIDw1+0x10>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bc80      	pop	{r7}
 8002e52:	4770      	bx	lr
 8002e54:	1fff7594 	.word	0x1fff7594

08002e58 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002e5c:	4b02      	ldr	r3, [pc, #8]	; (8002e68 <HAL_GetUIDw2+0x10>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bc80      	pop	{r7}
 8002e66:	4770      	bx	lr
 8002e68:	1fff7598 	.word	0x1fff7598

08002e6c <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 8002e70:	f7ff ff78 	bl	8002d64 <LL_DBGMCU_DisableDBGSleepMode>
}
 8002e74:	bf00      	nop
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 8002e7c:	f7ff ff80 	bl	8002d80 <LL_DBGMCU_DisableDBGStopMode>
}
 8002e80:	bf00      	nop
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 8002e88:	f7ff ff88 	bl	8002d9c <LL_DBGMCU_DisableDBGStandbyMode>
}
 8002e8c:	bf00      	nop
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	601a      	str	r2, [r3, #0]
}
 8002eaa:	bf00      	nop
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bc80      	pop	{r7}
 8002eb2:	4770      	bx	lr

08002eb4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bc80      	pop	{r7}
 8002ecc:	4770      	bx	lr

08002ece <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b085      	sub	sp, #20
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	60f8      	str	r0, [r7, #12]
 8002ed6:	60b9      	str	r1, [r7, #8]
 8002ed8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	695a      	ldr	r2, [r3, #20]
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	f003 0304 	and.w	r3, r3, #4
 8002ee4:	2107      	movs	r1, #7
 8002ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eea:	43db      	mvns	r3, r3
 8002eec:	401a      	ands	r2, r3
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	f003 0304 	and.w	r3, r3, #4
 8002ef4:	6879      	ldr	r1, [r7, #4]
 8002ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8002efa:	431a      	orrs	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002f00:	bf00      	nop
 8002f02:	3714      	adds	r7, #20
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bc80      	pop	{r7}
 8002f08:	4770      	bx	lr

08002f0a <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	b083      	sub	sp, #12
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
 8002f12:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	695a      	ldr	r2, [r3, #20]
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	f003 0304 	and.w	r3, r3, #4
 8002f1e:	2107      	movs	r1, #7
 8002f20:	fa01 f303 	lsl.w	r3, r1, r3
 8002f24:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002f2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bc80      	pop	{r7}
 8002f38:	4770      	bx	lr

08002f3a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b083      	sub	sp, #12
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d101      	bne.n	8002f52 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e000      	b.n	8002f54 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bc80      	pop	{r7}
 8002f5c:	4770      	bx	lr

08002f5e <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b085      	sub	sp, #20
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	60f8      	str	r0, [r7, #12]
 8002f66:	60b9      	str	r1, [r7, #8]
 8002f68:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	f003 031f 	and.w	r3, r3, #31
 8002f74:	210f      	movs	r1, #15
 8002f76:	fa01 f303 	lsl.w	r3, r1, r3
 8002f7a:	43db      	mvns	r3, r3
 8002f7c:	401a      	ands	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	0e9b      	lsrs	r3, r3, #26
 8002f82:	f003 010f 	and.w	r1, r3, #15
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	f003 031f 	and.w	r3, r3, #31
 8002f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f90:	431a      	orrs	r2, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002f96:	bf00      	nop
 8002f98:	3714      	adds	r7, #20
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bc80      	pop	{r7}
 8002f9e:	4770      	bx	lr

08002fa0 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002fb4:	431a      	orrs	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002fba:	bf00      	nop
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bc80      	pop	{r7}
 8002fc2:	4770      	bx	lr

08002fc4 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002fd8:	43db      	mvns	r3, r3
 8002fda:	401a      	ands	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bc80      	pop	{r7}
 8002fe8:	4770      	bx	lr

08002fea <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002fea:	b480      	push	{r7}
 8002fec:	b085      	sub	sp, #20
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	60f8      	str	r0, [r7, #12]
 8002ff2:	60b9      	str	r1, [r7, #8]
 8002ff4:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	695a      	ldr	r2, [r3, #20]
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	021b      	lsls	r3, r3, #8
 8002ffe:	43db      	mvns	r3, r3
 8003000:	401a      	ands	r2, r3
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	0219      	lsls	r1, r3, #8
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	400b      	ands	r3, r1
 800300a:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 800300e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003012:	431a      	orrs	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003018:	bf00      	nop
 800301a:	3714      	adds	r7, #20
 800301c:	46bd      	mov	sp, r7
 800301e:	bc80      	pop	{r7}
 8003020:	4770      	bx	lr

08003022 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003022:	b480      	push	{r7}
 8003024:	b083      	sub	sp, #12
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003032:	f023 0317 	bic.w	r3, r3, #23
 8003036:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800303e:	bf00      	nop
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	bc80      	pop	{r7}
 8003046:	4770      	bx	lr

08003048 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003058:	f023 0317 	bic.w	r3, r3, #23
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	6093      	str	r3, [r2, #8]
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	bc80      	pop	{r7}
 8003068:	4770      	bx	lr

0800306a <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800306a:	b480      	push	{r7}
 800306c:	b083      	sub	sp, #12
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800307a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800307e:	d101      	bne.n	8003084 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003080:	2301      	movs	r3, #1
 8003082:	e000      	b.n	8003086 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	bc80      	pop	{r7}
 800308e:	4770      	bx	lr

08003090 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80030a0:	f023 0317 	bic.w	r3, r3, #23
 80030a4:	f043 0201 	orr.w	r2, r3, #1
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bc80      	pop	{r7}
 80030b4:	4770      	bx	lr

080030b6 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80030b6:	b480      	push	{r7}
 80030b8:	b083      	sub	sp, #12
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80030c6:	f023 0317 	bic.w	r3, r3, #23
 80030ca:	f043 0202 	orr.w	r2, r3, #2
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80030d2:	bf00      	nop
 80030d4:	370c      	adds	r7, #12
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bc80      	pop	{r7}
 80030da:	4770      	bx	lr

080030dc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d101      	bne.n	80030f4 <LL_ADC_IsEnabled+0x18>
 80030f0:	2301      	movs	r3, #1
 80030f2:	e000      	b.n	80030f6 <LL_ADC_IsEnabled+0x1a>
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bc80      	pop	{r7}
 80030fe:	4770      	bx	lr

08003100 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	2b02      	cmp	r3, #2
 8003112:	d101      	bne.n	8003118 <LL_ADC_IsDisableOngoing+0x18>
 8003114:	2301      	movs	r3, #1
 8003116:	e000      	b.n	800311a <LL_ADC_IsDisableOngoing+0x1a>
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	bc80      	pop	{r7}
 8003122:	4770      	bx	lr

08003124 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003134:	f023 0317 	bic.w	r3, r3, #23
 8003138:	f043 0204 	orr.w	r2, r3, #4
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	bc80      	pop	{r7}
 8003148:	4770      	bx	lr

0800314a <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800314a:	b480      	push	{r7}
 800314c:	b083      	sub	sp, #12
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800315a:	f023 0317 	bic.w	r3, r3, #23
 800315e:	f043 0210 	orr.w	r2, r3, #16
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003166:	bf00      	nop
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	bc80      	pop	{r7}
 800316e:	4770      	bx	lr

08003170 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f003 0304 	and.w	r3, r3, #4
 8003180:	2b04      	cmp	r3, #4
 8003182:	d101      	bne.n	8003188 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003184:	2301      	movs	r3, #1
 8003186:	e000      	b.n	800318a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	bc80      	pop	{r7}
 8003192:	4770      	bx	lr

08003194 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b088      	sub	sp, #32
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800319c:	2300      	movs	r3, #0
 800319e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 80031a0:	2300      	movs	r3, #0
 80031a2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80031a4:	2300      	movs	r3, #0
 80031a6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80031a8:	2300      	movs	r3, #0
 80031aa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e17e      	b.n	80034b4 <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d109      	bne.n	80031d8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f7fd fefd 	bl	8000fc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff ff44 	bl	800306a <LL_ADC_IsInternalRegulatorEnabled>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d115      	bne.n	8003214 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff ff18 	bl	8003022 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031f2:	4b9e      	ldr	r3, [pc, #632]	; (800346c <HAL_ADC_Init+0x2d8>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	099b      	lsrs	r3, r3, #6
 80031f8:	4a9d      	ldr	r2, [pc, #628]	; (8003470 <HAL_ADC_Init+0x2dc>)
 80031fa:	fba2 2303 	umull	r2, r3, r2, r3
 80031fe:	099b      	lsrs	r3, r3, #6
 8003200:	3301      	adds	r3, #1
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003206:	e002      	b.n	800320e <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	3b01      	subs	r3, #1
 800320c:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d1f9      	bne.n	8003208 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff ff26 	bl	800306a <LL_ADC_IsInternalRegulatorEnabled>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d10d      	bne.n	8003240 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003228:	f043 0210 	orr.w	r2, r3, #16
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003234:	f043 0201 	orr.w	r2, r3, #1
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4618      	mov	r0, r3
 8003246:	f7ff ff93 	bl	8003170 <LL_ADC_REG_IsConversionOngoing>
 800324a:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003250:	f003 0310 	and.w	r3, r3, #16
 8003254:	2b00      	cmp	r3, #0
 8003256:	f040 8124 	bne.w	80034a2 <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	2b00      	cmp	r3, #0
 800325e:	f040 8120 	bne.w	80034a2 <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003266:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800326a:	f043 0202 	orr.w	r2, r3, #2
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f7ff ff30 	bl	80030dc <LL_ADC_IsEnabled>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	f040 80a7 	bne.w	80033d2 <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	7e1b      	ldrb	r3, [r3, #24]
 800328c:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800328e:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	7e5b      	ldrb	r3, [r3, #25]
 8003294:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003296:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	7e9b      	ldrb	r3, [r3, #26]
 800329c:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800329e:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80032a4:	2a00      	cmp	r2, #0
 80032a6:	d002      	beq.n	80032ae <HAL_ADC_Init+0x11a>
 80032a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80032ac:	e000      	b.n	80032b0 <HAL_ADC_Init+0x11c>
 80032ae:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80032b0:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80032b6:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	da04      	bge.n	80032ca <HAL_ADC_Init+0x136>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80032c8:	e001      	b.n	80032ce <HAL_ADC_Init+0x13a>
 80032ca:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 80032ce:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80032d6:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80032d8:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80032da:	69ba      	ldr	r2, [r7, #24]
 80032dc:	4313      	orrs	r3, r2
 80032de:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d114      	bne.n	8003314 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	7e9b      	ldrb	r3, [r3, #26]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d104      	bne.n	80032fc <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032f8:	61bb      	str	r3, [r7, #24]
 80032fa:	e00b      	b.n	8003314 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003300:	f043 0220 	orr.w	r2, r3, #32
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800330c:	f043 0201 	orr.w	r2, r3, #1
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003318:	2b00      	cmp	r3, #0
 800331a:	d009      	beq.n	8003330 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003320:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003328:	4313      	orrs	r3, r2
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	4313      	orrs	r3, r2
 800332e:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 800333a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	6812      	ldr	r2, [r2, #0]
 8003342:	69b9      	ldr	r1, [r7, #24]
 8003344:	430b      	orrs	r3, r1
 8003346:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003354:	4313      	orrs	r3, r2
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	4313      	orrs	r3, r2
 800335a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003362:	2b01      	cmp	r3, #1
 8003364:	d111      	bne.n	800338a <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003372:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003378:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800337e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	4313      	orrs	r3, r2
 8003384:	f043 0301 	orr.w	r3, r3, #1
 8003388:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	691a      	ldr	r2, [r3, #16]
 8003390:	4b38      	ldr	r3, [pc, #224]	; (8003474 <HAL_ADC_Init+0x2e0>)
 8003392:	4013      	ands	r3, r2
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	6812      	ldr	r2, [r2, #0]
 8003398:	6979      	ldr	r1, [r7, #20]
 800339a:	430b      	orrs	r3, r1
 800339c:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80033a6:	d014      	beq.n	80033d2 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80033ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033b0:	d00f      	beq.n	80033d2 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80033b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033ba:	d00a      	beq.n	80033d2 <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 80033bc:	4b2e      	ldr	r3, [pc, #184]	; (8003478 <HAL_ADC_Init+0x2e4>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80033cc:	492a      	ldr	r1, [pc, #168]	; (8003478 <HAL_ADC_Init+0x2e4>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6818      	ldr	r0, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033da:	461a      	mov	r2, r3
 80033dc:	2100      	movs	r1, #0
 80033de:	f7ff fd76 	bl	8002ece <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6818      	ldr	r0, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ea:	461a      	mov	r2, r3
 80033ec:	4923      	ldr	r1, [pc, #140]	; (800347c <HAL_ADC_Init+0x2e8>)
 80033ee:	f7ff fd6e 	bl	8002ece <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d108      	bne.n	800340c <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f062 020f 	orn	r2, r2, #15
 8003408:	629a      	str	r2, [r3, #40]	; 0x28
 800340a:	e017      	b.n	800343c <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003414:	d112      	bne.n	800343c <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	69db      	ldr	r3, [r3, #28]
 8003420:	3b01      	subs	r3, #1
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	f003 031c 	and.w	r3, r3, #28
 8003428:	f06f 020f 	mvn.w	r2, #15
 800342c:	fa02 f103 	lsl.w	r1, r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	430a      	orrs	r2, r1
 800343a:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2100      	movs	r1, #0
 8003442:	4618      	mov	r0, r3
 8003444:	f7ff fd61 	bl	8002f0a <LL_ADC_GetSamplingTimeCommonChannels>
 8003448:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800344e:	429a      	cmp	r2, r3
 8003450:	d116      	bne.n	8003480 <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345c:	f023 0303 	bic.w	r3, r3, #3
 8003460:	f043 0201 	orr.w	r2, r3, #1
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003468:	e023      	b.n	80034b2 <HAL_ADC_Init+0x31e>
 800346a:	bf00      	nop
 800346c:	20000000 	.word	0x20000000
 8003470:	053e2d63 	.word	0x053e2d63
 8003474:	1ffffc02 	.word	0x1ffffc02
 8003478:	40012708 	.word	0x40012708
 800347c:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003484:	f023 0312 	bic.w	r3, r3, #18
 8003488:	f043 0210 	orr.w	r2, r3, #16
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003494:	f043 0201 	orr.w	r2, r3, #1
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80034a0:	e007      	b.n	80034b2 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a6:	f043 0210 	orr.w	r2, r3, #16
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 80034b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3720      	adds	r7, #32
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e07a      	b.n	80035c4 <HAL_ADC_DeInit+0x108>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d2:	f043 0202 	orr.w	r2, r3, #2
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 face 	bl	8003a7c <ADC_ConversionStop>
 80034e0:	4603      	mov	r3, r0
 80034e2:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80034e4:	7bfb      	ldrb	r3, [r7, #15]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d10f      	bne.n	800350a <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 fb92 	bl	8003c14 <ADC_Disable>
 80034f0:	4603      	mov	r3, r0
 80034f2:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80034f4:	7bfb      	ldrb	r3, [r7, #15]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d102      	bne.n	8003500 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2201      	movs	r2, #1
 80034fe:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4618      	mov	r0, r3
 8003506:	f7ff fd9f 	bl	8003048 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	6812      	ldr	r2, [r2, #0]
 8003514:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 8003518:	f023 0303 	bic.w	r3, r3, #3
 800351c:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f240 329f 	movw	r2, #927	; 0x39f
 8003526:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68d9      	ldr	r1, [r3, #12]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	4b26      	ldr	r3, [pc, #152]	; (80035cc <HAL_ADC_DeInit+0x110>)
 8003534:	400b      	ands	r3, r1
 8003536:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	691a      	ldr	r2, [r3, #16]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8003546:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	695a      	ldr	r2, [r3, #20]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 0207 	bic.w	r2, r2, #7
 8003556:	615a      	str	r2, [r3, #20]

  /* Reset registers AWDxTR */
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6a1a      	ldr	r2, [r3, #32]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8003566:	621a      	str	r2, [r3, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8003576:	625a      	str	r2, [r3, #36]	; 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8003586:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2200      	movs	r2, #0
 8003594:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8003596:	4b0e      	ldr	r3, [pc, #56]	; (80035d0 <HAL_ADC_DeInit+0x114>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a0d      	ldr	r2, [pc, #52]	; (80035d0 <HAL_ADC_DeInit+0x114>)
 800359c:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 80035a0:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f7fd fd3c 	bl	8001020 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80035c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	833e0200 	.word	0x833e0200
 80035d0:	40012708 	.word	0x40012708

080035d4 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7ff fdc5 	bl	8003170 <LL_ADC_REG_IsConversionOngoing>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d132      	bne.n	8003652 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d101      	bne.n	80035fa <HAL_ADC_Start+0x26>
 80035f6:	2302      	movs	r3, #2
 80035f8:	e02e      	b.n	8003658 <HAL_ADC_Start+0x84>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 fa80 	bl	8003b08 <ADC_Enable>
 8003608:	4603      	mov	r3, r0
 800360a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800360c:	7bfb      	ldrb	r3, [r7, #15]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d11a      	bne.n	8003648 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003616:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800361a:	f023 0301 	bic.w	r3, r3, #1
 800361e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	221c      	movs	r2, #28
 8003632:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4618      	mov	r0, r3
 8003642:	f7ff fd6f 	bl	8003124 <LL_ADC_REG_StartConversion>
 8003646:	e006      	b.n	8003656 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8003650:	e001      	b.n	8003656 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003652:	2302      	movs	r3, #2
 8003654:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8003656:	7bfb      	ldrb	r3, [r7, #15]
}
 8003658:	4618      	mov	r0, r3
 800365a:	3710      	adds	r7, #16
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800366e:	2b01      	cmp	r3, #1
 8003670:	d101      	bne.n	8003676 <HAL_ADC_Stop+0x16>
 8003672:	2302      	movs	r3, #2
 8003674:	e022      	b.n	80036bc <HAL_ADC_Stop+0x5c>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2201      	movs	r2, #1
 800367a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f9fc 	bl	8003a7c <ADC_ConversionStop>
 8003684:	4603      	mov	r3, r0
 8003686:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003688:	7bfb      	ldrb	r3, [r7, #15]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d111      	bne.n	80036b2 <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 fac0 	bl	8003c14 <ADC_Disable>
 8003694:	4603      	mov	r3, r0
 8003696:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003698:	7bfb      	ldrb	r3, [r7, #15]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d109      	bne.n	80036b2 <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036a6:	f023 0301 	bic.w	r3, r3, #1
 80036aa:	f043 0201 	orr.w	r2, r3, #1
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80036ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3710      	adds	r7, #16
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	2b08      	cmp	r3, #8
 80036d4:	d102      	bne.n	80036dc <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80036d6:	2308      	movs	r3, #8
 80036d8:	60fb      	str	r3, [r7, #12]
 80036da:	e010      	b.n	80036fe <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d007      	beq.n	80036fa <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ee:	f043 0220 	orr.w	r2, r3, #32
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e077      	b.n	80037ea <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80036fa:	2304      	movs	r3, #4
 80036fc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80036fe:	f7fe fd6d 	bl	80021dc <HAL_GetTick>
 8003702:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003704:	e021      	b.n	800374a <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800370c:	d01d      	beq.n	800374a <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800370e:	f7fe fd65 	bl	80021dc <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	683a      	ldr	r2, [r7, #0]
 800371a:	429a      	cmp	r2, r3
 800371c:	d302      	bcc.n	8003724 <HAL_ADC_PollForConversion+0x60>
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d112      	bne.n	800374a <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	4013      	ands	r3, r2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d10b      	bne.n	800374a <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003736:	f043 0204 	orr.w	r2, r3, #4
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e04f      	b.n	80037ea <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	4013      	ands	r3, r2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d0d6      	beq.n	8003706 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800375c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4618      	mov	r0, r3
 800376a:	f7ff fbe6 	bl	8002f3a <LL_ADC_REG_IsTriggerSourceSWStart>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d031      	beq.n	80037d8 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	7e9b      	ldrb	r3, [r3, #26]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d12d      	bne.n	80037d8 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0308 	and.w	r3, r3, #8
 8003786:	2b08      	cmp	r3, #8
 8003788:	d126      	bne.n	80037d8 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4618      	mov	r0, r3
 8003790:	f7ff fcee 	bl	8003170 <LL_ADC_REG_IsConversionOngoing>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d112      	bne.n	80037c0 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	685a      	ldr	r2, [r3, #4]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 020c 	bic.w	r2, r2, #12
 80037a8:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037b2:	f023 0301 	bic.w	r3, r3, #1
 80037b6:	f043 0201 	orr.w	r2, r3, #1
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	659a      	str	r2, [r3, #88]	; 0x58
 80037be:	e00b      	b.n	80037d8 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c4:	f043 0220 	orr.w	r2, r3, #32
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d0:	f043 0201 	orr.w	r2, r3, #1
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	7e1b      	ldrb	r3, [r3, #24]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d103      	bne.n	80037e8 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	220c      	movs	r2, #12
 80037e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80037f2:	b480      	push	{r7}
 80037f4:	b083      	sub	sp, #12
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003800:	4618      	mov	r0, r3
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	bc80      	pop	{r7}
 8003808:	4770      	bx	lr
	...

0800380c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b088      	sub	sp, #32
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003816:	2300      	movs	r3, #0
 8003818:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800381a:	2300      	movs	r3, #0
 800381c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800382c:	2b01      	cmp	r3, #1
 800382e:	d101      	bne.n	8003834 <HAL_ADC_ConfigChannel+0x28>
 8003830:	2302      	movs	r3, #2
 8003832:	e110      	b.n	8003a56 <HAL_ADC_ConfigChannel+0x24a>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4618      	mov	r0, r3
 8003842:	f7ff fc95 	bl	8003170 <LL_ADC_REG_IsConversionOngoing>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	f040 80f7 	bne.w	8003a3c <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	2b02      	cmp	r3, #2
 8003854:	f000 80b1 	beq.w	80039ba <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003860:	d004      	beq.n	800386c <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003866:	4a7e      	ldr	r2, [pc, #504]	; (8003a60 <HAL_ADC_ConfigChannel+0x254>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d108      	bne.n	800387e <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4619      	mov	r1, r3
 8003876:	4610      	mov	r0, r2
 8003878:	f7ff fb92 	bl	8002fa0 <LL_ADC_REG_SetSequencerChAdd>
 800387c:	e041      	b.n	8003902 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f003 031f 	and.w	r3, r3, #31
 800388a:	210f      	movs	r1, #15
 800388c:	fa01 f303 	lsl.w	r3, r1, r3
 8003890:	43db      	mvns	r3, r3
 8003892:	401a      	ands	r2, r3
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800389c:	2b00      	cmp	r3, #0
 800389e:	d105      	bne.n	80038ac <HAL_ADC_ConfigChannel+0xa0>
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	0e9b      	lsrs	r3, r3, #26
 80038a6:	f003 031f 	and.w	r3, r3, #31
 80038aa:	e011      	b.n	80038d0 <HAL_ADC_ConfigChannel+0xc4>
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	fa93 f3a3 	rbit	r3, r3
 80038b8:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d101      	bne.n	80038c8 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 80038c4:	2320      	movs	r3, #32
 80038c6:	e003      	b.n	80038d0 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	fab3 f383 	clz	r3, r3
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	6839      	ldr	r1, [r7, #0]
 80038d2:	6849      	ldr	r1, [r1, #4]
 80038d4:	f001 011f 	and.w	r1, r1, #31
 80038d8:	408b      	lsls	r3, r1
 80038da:	431a      	orrs	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	089b      	lsrs	r3, r3, #2
 80038e6:	1c5a      	adds	r2, r3, #1
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	69db      	ldr	r3, [r3, #28]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d808      	bhi.n	8003902 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6818      	ldr	r0, [r3, #0]
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	6859      	ldr	r1, [r3, #4]
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	461a      	mov	r2, r3
 80038fe:	f7ff fb2e 	bl	8002f5e <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6818      	ldr	r0, [r3, #0]
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	6819      	ldr	r1, [r3, #0]
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	461a      	mov	r2, r3
 8003910:	f7ff fb6b 	bl	8002fea <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	f280 8097 	bge.w	8003a4c <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800391e:	4851      	ldr	r0, [pc, #324]	; (8003a64 <HAL_ADC_ConfigChannel+0x258>)
 8003920:	f7ff fac8 	bl	8002eb4 <LL_ADC_GetCommonPathInternalCh>
 8003924:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a4f      	ldr	r2, [pc, #316]	; (8003a68 <HAL_ADC_ConfigChannel+0x25c>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d120      	bne.n	8003972 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003936:	2b00      	cmp	r3, #0
 8003938:	d11b      	bne.n	8003972 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003940:	4619      	mov	r1, r3
 8003942:	4848      	ldr	r0, [pc, #288]	; (8003a64 <HAL_ADC_ConfigChannel+0x258>)
 8003944:	f7ff faa4 	bl	8002e90 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003948:	4b48      	ldr	r3, [pc, #288]	; (8003a6c <HAL_ADC_ConfigChannel+0x260>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	099b      	lsrs	r3, r3, #6
 800394e:	4a48      	ldr	r2, [pc, #288]	; (8003a70 <HAL_ADC_ConfigChannel+0x264>)
 8003950:	fba2 2303 	umull	r2, r3, r2, r3
 8003954:	099b      	lsrs	r3, r3, #6
 8003956:	1c5a      	adds	r2, r3, #1
 8003958:	4613      	mov	r3, r2
 800395a:	005b      	lsls	r3, r3, #1
 800395c:	4413      	add	r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003962:	e002      	b.n	800396a <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	3b01      	subs	r3, #1
 8003968:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1f9      	bne.n	8003964 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003970:	e06c      	b.n	8003a4c <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a3f      	ldr	r2, [pc, #252]	; (8003a74 <HAL_ADC_ConfigChannel+0x268>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d10c      	bne.n	8003996 <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d107      	bne.n	8003996 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800398c:	4619      	mov	r1, r3
 800398e:	4835      	ldr	r0, [pc, #212]	; (8003a64 <HAL_ADC_ConfigChannel+0x258>)
 8003990:	f7ff fa7e 	bl	8002e90 <LL_ADC_SetCommonPathInternalCh>
 8003994:	e05a      	b.n	8003a4c <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a37      	ldr	r2, [pc, #220]	; (8003a78 <HAL_ADC_ConfigChannel+0x26c>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d155      	bne.n	8003a4c <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d150      	bne.n	8003a4c <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80039b0:	4619      	mov	r1, r3
 80039b2:	482c      	ldr	r0, [pc, #176]	; (8003a64 <HAL_ADC_ConfigChannel+0x258>)
 80039b4:	f7ff fa6c 	bl	8002e90 <LL_ADC_SetCommonPathInternalCh>
 80039b8:	e048      	b.n	8003a4c <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039c2:	d004      	beq.n	80039ce <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80039c8:	4a25      	ldr	r2, [pc, #148]	; (8003a60 <HAL_ADC_ConfigChannel+0x254>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d107      	bne.n	80039de <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4619      	mov	r1, r3
 80039d8:	4610      	mov	r0, r2
 80039da:	f7ff faf3 	bl	8002fc4 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	da32      	bge.n	8003a4c <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80039e6:	481f      	ldr	r0, [pc, #124]	; (8003a64 <HAL_ADC_ConfigChannel+0x258>)
 80039e8:	f7ff fa64 	bl	8002eb4 <LL_ADC_GetCommonPathInternalCh>
 80039ec:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a1d      	ldr	r2, [pc, #116]	; (8003a68 <HAL_ADC_ConfigChannel+0x25c>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d107      	bne.n	8003a08 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80039fe:	4619      	mov	r1, r3
 8003a00:	4818      	ldr	r0, [pc, #96]	; (8003a64 <HAL_ADC_ConfigChannel+0x258>)
 8003a02:	f7ff fa45 	bl	8002e90 <LL_ADC_SetCommonPathInternalCh>
 8003a06:	e021      	b.n	8003a4c <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a19      	ldr	r2, [pc, #100]	; (8003a74 <HAL_ADC_ConfigChannel+0x268>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d107      	bne.n	8003a22 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a18:	4619      	mov	r1, r3
 8003a1a:	4812      	ldr	r0, [pc, #72]	; (8003a64 <HAL_ADC_ConfigChannel+0x258>)
 8003a1c:	f7ff fa38 	bl	8002e90 <LL_ADC_SetCommonPathInternalCh>
 8003a20:	e014      	b.n	8003a4c <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a14      	ldr	r2, [pc, #80]	; (8003a78 <HAL_ADC_ConfigChannel+0x26c>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d10f      	bne.n	8003a4c <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003a32:	4619      	mov	r1, r3
 8003a34:	480b      	ldr	r0, [pc, #44]	; (8003a64 <HAL_ADC_ConfigChannel+0x258>)
 8003a36:	f7ff fa2b 	bl	8002e90 <LL_ADC_SetCommonPathInternalCh>
 8003a3a:	e007      	b.n	8003a4c <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a40:	f043 0220 	orr.w	r2, r3, #32
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003a54:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3720      	adds	r7, #32
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	80000004 	.word	0x80000004
 8003a64:	40012708 	.word	0x40012708
 8003a68:	b0001000 	.word	0xb0001000
 8003a6c:	20000000 	.word	0x20000000
 8003a70:	053e2d63 	.word	0x053e2d63
 8003a74:	b8004000 	.word	0xb8004000
 8003a78:	b4002000 	.word	0xb4002000

08003a7c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7ff fb71 	bl	8003170 <LL_ADC_REG_IsConversionOngoing>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d033      	beq.n	8003afc <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7ff fb31 	bl	8003100 <LL_ADC_IsDisableOngoing>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d104      	bne.n	8003aae <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7ff fb4e 	bl	800314a <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003aae:	f7fe fb95 	bl	80021dc <HAL_GetTick>
 8003ab2:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003ab4:	e01b      	b.n	8003aee <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003ab6:	f7fe fb91 	bl	80021dc <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d914      	bls.n	8003aee <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f003 0304 	and.w	r3, r3, #4
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00d      	beq.n	8003aee <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad6:	f043 0210 	orr.w	r2, r3, #16
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae2:	f043 0201 	orr.w	r2, r3, #1
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e007      	b.n	8003afe <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f003 0304 	and.w	r3, r3, #4
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1dc      	bne.n	8003ab6 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3710      	adds	r7, #16
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
	...

08003b08 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003b10:	2300      	movs	r3, #0
 8003b12:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7ff fadf 	bl	80030dc <LL_ADC_IsEnabled>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d169      	bne.n	8003bf8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	689a      	ldr	r2, [r3, #8]
 8003b2a:	4b36      	ldr	r3, [pc, #216]	; (8003c04 <ADC_Enable+0xfc>)
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00d      	beq.n	8003b4e <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b36:	f043 0210 	orr.w	r2, r3, #16
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b42:	f043 0201 	orr.w	r2, r3, #1
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e055      	b.n	8003bfa <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7ff fa9c 	bl	8003090 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8003b58:	482b      	ldr	r0, [pc, #172]	; (8003c08 <ADC_Enable+0x100>)
 8003b5a:	f7ff f9ab 	bl	8002eb4 <LL_ADC_GetCommonPathInternalCh>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00f      	beq.n	8003b88 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b68:	4b28      	ldr	r3, [pc, #160]	; (8003c0c <ADC_Enable+0x104>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	099b      	lsrs	r3, r3, #6
 8003b6e:	4a28      	ldr	r2, [pc, #160]	; (8003c10 <ADC_Enable+0x108>)
 8003b70:	fba2 2303 	umull	r2, r3, r2, r3
 8003b74:	099b      	lsrs	r3, r3, #6
 8003b76:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8003b78:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003b7a:	e002      	b.n	8003b82 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1f9      	bne.n	8003b7c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	7e5b      	ldrb	r3, [r3, #25]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d033      	beq.n	8003bf8 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003b90:	f7fe fb24 	bl	80021dc <HAL_GetTick>
 8003b94:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b96:	e028      	b.n	8003bea <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7ff fa9d 	bl	80030dc <LL_ADC_IsEnabled>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d104      	bne.n	8003bb2 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7ff fa6f 	bl	8003090 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003bb2:	f7fe fb13 	bl	80021dc <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d914      	bls.n	8003bea <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d00d      	beq.n	8003bea <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd2:	f043 0210 	orr.w	r2, r3, #16
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bde:	f043 0201 	orr.w	r2, r3, #1
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e007      	b.n	8003bfa <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d1cf      	bne.n	8003b98 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	80000017 	.word	0x80000017
 8003c08:	40012708 	.word	0x40012708
 8003c0c:	20000000 	.word	0x20000000
 8003c10:	053e2d63 	.word	0x053e2d63

08003c14 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7ff fa6d 	bl	8003100 <LL_ADC_IsDisableOngoing>
 8003c26:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f7ff fa55 	bl	80030dc <LL_ADC_IsEnabled>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d047      	beq.n	8003cc8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d144      	bne.n	8003cc8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f003 0305 	and.w	r3, r3, #5
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d10c      	bne.n	8003c66 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7ff fa30 	bl	80030b6 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2203      	movs	r2, #3
 8003c5c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c5e:	f7fe fabd 	bl	80021dc <HAL_GetTick>
 8003c62:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c64:	e029      	b.n	8003cba <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c6a:	f043 0210 	orr.w	r2, r3, #16
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c76:	f043 0201 	orr.w	r2, r3, #1
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e023      	b.n	8003cca <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003c82:	f7fe faab 	bl	80021dc <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d914      	bls.n	8003cba <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00d      	beq.n	8003cba <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca2:	f043 0210 	orr.w	r2, r3, #16
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cae:	f043 0201 	orr.w	r2, r3, #1
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e007      	b.n	8003cca <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f003 0301 	and.w	r3, r3, #1
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1dc      	bne.n	8003c82 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3710      	adds	r7, #16
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <LL_ADC_SetCalibrationFactor>:
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	b083      	sub	sp, #12
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
 8003cda:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003ce2:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	431a      	orrs	r2, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bc80      	pop	{r7}
 8003cf8:	4770      	bx	lr

08003cfa <LL_ADC_GetCalibrationFactor>:
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b083      	sub	sp, #12
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bc80      	pop	{r7}
 8003d14:	4770      	bx	lr

08003d16 <LL_ADC_Enable>:
{
 8003d16:	b480      	push	{r7}
 8003d18:	b083      	sub	sp, #12
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d26:	f023 0317 	bic.w	r3, r3, #23
 8003d2a:	f043 0201 	orr.w	r2, r3, #1
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	609a      	str	r2, [r3, #8]
}
 8003d32:	bf00      	nop
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bc80      	pop	{r7}
 8003d3a:	4770      	bx	lr

08003d3c <LL_ADC_Disable>:
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d4c:	f023 0317 	bic.w	r3, r3, #23
 8003d50:	f043 0202 	orr.w	r2, r3, #2
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	609a      	str	r2, [r3, #8]
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bc80      	pop	{r7}
 8003d60:	4770      	bx	lr

08003d62 <LL_ADC_IsEnabled>:
{
 8003d62:	b480      	push	{r7}
 8003d64:	b083      	sub	sp, #12
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d101      	bne.n	8003d7a <LL_ADC_IsEnabled+0x18>
 8003d76:	2301      	movs	r3, #1
 8003d78:	e000      	b.n	8003d7c <LL_ADC_IsEnabled+0x1a>
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bc80      	pop	{r7}
 8003d84:	4770      	bx	lr

08003d86 <LL_ADC_StartCalibration>:
{
 8003d86:	b480      	push	{r7}
 8003d88:	b083      	sub	sp, #12
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d96:	f023 0317 	bic.w	r3, r3, #23
 8003d9a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	609a      	str	r2, [r3, #8]
}
 8003da2:	bf00      	nop
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bc80      	pop	{r7}
 8003daa:	4770      	bx	lr

08003dac <LL_ADC_IsCalibrationOnGoing>:
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003dbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003dc0:	d101      	bne.n	8003dc6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e000      	b.n	8003dc8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bc80      	pop	{r7}
 8003dd0:	4770      	bx	lr

08003dd2 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b088      	sub	sp, #32
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8003dde:	2300      	movs	r3, #0
 8003de0:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d101      	bne.n	8003df0 <HAL_ADCEx_Calibration_Start+0x1e>
 8003dec:	2302      	movs	r3, #2
 8003dee:	e0b9      	b.n	8003f64 <HAL_ADCEx_Calibration_Start+0x192>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f7ff ff0b 	bl	8003c14 <ADC_Disable>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7ff ffab 	bl	8003d62 <LL_ADC_IsEnabled>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f040 809d 	bne.w	8003f4e <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e18:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003e1c:	f043 0202 	orr.w	r2, r3, #2
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68da      	ldr	r2, [r3, #12]
 8003e2a:	f248 0303 	movw	r3, #32771	; 0x8003
 8003e2e:	4013      	ands	r3, r2
 8003e30:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	6812      	ldr	r2, [r2, #0]
 8003e3c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003e40:	f023 0303 	bic.w	r3, r3, #3
 8003e44:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003e46:	2300      	movs	r3, #0
 8003e48:	61fb      	str	r3, [r7, #28]
 8003e4a:	e02e      	b.n	8003eaa <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7ff ff98 	bl	8003d86 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003e56:	e014      	b.n	8003e82 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8003e64:	d30d      	bcc.n	8003e82 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e6a:	f023 0312 	bic.w	r3, r3, #18
 8003e6e:	f043 0210 	orr.w	r2, r3, #16
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e070      	b.n	8003f64 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7ff ff90 	bl	8003dac <LL_ADC_IsCalibrationOnGoing>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1e2      	bne.n	8003e58 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7ff ff2f 	bl	8003cfa <LL_ADC_GetCalibrationFactor>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	61fb      	str	r3, [r7, #28]
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	2b07      	cmp	r3, #7
 8003eae:	d9cd      	bls.n	8003e4c <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb8:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7ff ff29 	bl	8003d16 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	69b9      	ldr	r1, [r7, #24]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7ff ff01 	bl	8003cd2 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7ff ff31 	bl	8003d3c <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003eda:	f7fe f97f 	bl	80021dc <HAL_GetTick>
 8003ede:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003ee0:	e01c      	b.n	8003f1c <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003ee2:	f7fe f97b 	bl	80021dc <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d915      	bls.n	8003f1c <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7ff ff34 	bl	8003d62 <LL_ADC_IsEnabled>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00d      	beq.n	8003f1c <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f04:	f043 0210 	orr.w	r2, r3, #16
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f10:	f043 0201 	orr.w	r2, r3, #1
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e023      	b.n	8003f64 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7ff ff1e 	bl	8003d62 <LL_ADC_IsEnabled>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1da      	bne.n	8003ee2 <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68d9      	ldr	r1, [r3, #12]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	693a      	ldr	r2, [r7, #16]
 8003f38:	430a      	orrs	r2, r1
 8003f3a:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f40:	f023 0303 	bic.w	r3, r3, #3
 8003f44:	f043 0201 	orr.w	r2, r3, #1
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	659a      	str	r2, [r3, #88]	; 0x58
 8003f4c:	e005      	b.n	8003f5a <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f52:	f043 0210 	orr.w	r2, r3, #16
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3720      	adds	r7, #32
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b085      	sub	sp, #20
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f003 0307 	and.w	r3, r3, #7
 8003f7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f7c:	4b0c      	ldr	r3, [pc, #48]	; (8003fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f82:	68ba      	ldr	r2, [r7, #8]
 8003f84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f88:	4013      	ands	r3, r2
 8003f8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f9e:	4a04      	ldr	r2, [pc, #16]	; (8003fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	60d3      	str	r3, [r2, #12]
}
 8003fa4:	bf00      	nop
 8003fa6:	3714      	adds	r7, #20
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bc80      	pop	{r7}
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	e000ed00 	.word	0xe000ed00

08003fb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fb8:	4b04      	ldr	r3, [pc, #16]	; (8003fcc <__NVIC_GetPriorityGrouping+0x18>)
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	0a1b      	lsrs	r3, r3, #8
 8003fbe:	f003 0307 	and.w	r3, r3, #7
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bc80      	pop	{r7}
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	e000ed00 	.word	0xe000ed00

08003fd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	db0b      	blt.n	8003ffa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fe2:	79fb      	ldrb	r3, [r7, #7]
 8003fe4:	f003 021f 	and.w	r2, r3, #31
 8003fe8:	4906      	ldr	r1, [pc, #24]	; (8004004 <__NVIC_EnableIRQ+0x34>)
 8003fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fee:	095b      	lsrs	r3, r3, #5
 8003ff0:	2001      	movs	r0, #1
 8003ff2:	fa00 f202 	lsl.w	r2, r0, r2
 8003ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003ffa:	bf00      	nop
 8003ffc:	370c      	adds	r7, #12
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bc80      	pop	{r7}
 8004002:	4770      	bx	lr
 8004004:	e000e100 	.word	0xe000e100

08004008 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	4603      	mov	r3, r0
 8004010:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004016:	2b00      	cmp	r3, #0
 8004018:	db12      	blt.n	8004040 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800401a:	79fb      	ldrb	r3, [r7, #7]
 800401c:	f003 021f 	and.w	r2, r3, #31
 8004020:	490a      	ldr	r1, [pc, #40]	; (800404c <__NVIC_DisableIRQ+0x44>)
 8004022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004026:	095b      	lsrs	r3, r3, #5
 8004028:	2001      	movs	r0, #1
 800402a:	fa00 f202 	lsl.w	r2, r0, r2
 800402e:	3320      	adds	r3, #32
 8004030:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004034:	f3bf 8f4f 	dsb	sy
}
 8004038:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800403a:	f3bf 8f6f 	isb	sy
}
 800403e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	bc80      	pop	{r7}
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	e000e100 	.word	0xe000e100

08004050 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	4603      	mov	r3, r0
 8004058:	6039      	str	r1, [r7, #0]
 800405a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800405c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004060:	2b00      	cmp	r3, #0
 8004062:	db0a      	blt.n	800407a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	b2da      	uxtb	r2, r3
 8004068:	490c      	ldr	r1, [pc, #48]	; (800409c <__NVIC_SetPriority+0x4c>)
 800406a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800406e:	0112      	lsls	r2, r2, #4
 8004070:	b2d2      	uxtb	r2, r2
 8004072:	440b      	add	r3, r1
 8004074:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004078:	e00a      	b.n	8004090 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	b2da      	uxtb	r2, r3
 800407e:	4908      	ldr	r1, [pc, #32]	; (80040a0 <__NVIC_SetPriority+0x50>)
 8004080:	79fb      	ldrb	r3, [r7, #7]
 8004082:	f003 030f 	and.w	r3, r3, #15
 8004086:	3b04      	subs	r3, #4
 8004088:	0112      	lsls	r2, r2, #4
 800408a:	b2d2      	uxtb	r2, r2
 800408c:	440b      	add	r3, r1
 800408e:	761a      	strb	r2, [r3, #24]
}
 8004090:	bf00      	nop
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	bc80      	pop	{r7}
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	e000e100 	.word	0xe000e100
 80040a0:	e000ed00 	.word	0xe000ed00

080040a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b089      	sub	sp, #36	; 0x24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f003 0307 	and.w	r3, r3, #7
 80040b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	f1c3 0307 	rsb	r3, r3, #7
 80040be:	2b04      	cmp	r3, #4
 80040c0:	bf28      	it	cs
 80040c2:	2304      	movcs	r3, #4
 80040c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	3304      	adds	r3, #4
 80040ca:	2b06      	cmp	r3, #6
 80040cc:	d902      	bls.n	80040d4 <NVIC_EncodePriority+0x30>
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	3b03      	subs	r3, #3
 80040d2:	e000      	b.n	80040d6 <NVIC_EncodePriority+0x32>
 80040d4:	2300      	movs	r3, #0
 80040d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	fa02 f303 	lsl.w	r3, r2, r3
 80040e2:	43da      	mvns	r2, r3
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	401a      	ands	r2, r3
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	fa01 f303 	lsl.w	r3, r1, r3
 80040f6:	43d9      	mvns	r1, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040fc:	4313      	orrs	r3, r2
         );
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3724      	adds	r7, #36	; 0x24
 8004102:	46bd      	mov	sp, r7
 8004104:	bc80      	pop	{r7}
 8004106:	4770      	bx	lr

08004108 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f7ff ff2b 	bl	8003f6c <__NVIC_SetPriorityGrouping>
}
 8004116:	bf00      	nop
 8004118:	3708      	adds	r7, #8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800411e:	b580      	push	{r7, lr}
 8004120:	b086      	sub	sp, #24
 8004122:	af00      	add	r7, sp, #0
 8004124:	4603      	mov	r3, r0
 8004126:	60b9      	str	r1, [r7, #8]
 8004128:	607a      	str	r2, [r7, #4]
 800412a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800412c:	f7ff ff42 	bl	8003fb4 <__NVIC_GetPriorityGrouping>
 8004130:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	68b9      	ldr	r1, [r7, #8]
 8004136:	6978      	ldr	r0, [r7, #20]
 8004138:	f7ff ffb4 	bl	80040a4 <NVIC_EncodePriority>
 800413c:	4602      	mov	r2, r0
 800413e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004142:	4611      	mov	r1, r2
 8004144:	4618      	mov	r0, r3
 8004146:	f7ff ff83 	bl	8004050 <__NVIC_SetPriority>
}
 800414a:	bf00      	nop
 800414c:	3718      	adds	r7, #24
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004152:	b580      	push	{r7, lr}
 8004154:	b082      	sub	sp, #8
 8004156:	af00      	add	r7, sp, #0
 8004158:	4603      	mov	r3, r0
 800415a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800415c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004160:	4618      	mov	r0, r3
 8004162:	f7ff ff35 	bl	8003fd0 <__NVIC_EnableIRQ>
}
 8004166:	bf00      	nop
 8004168:	3708      	adds	r7, #8
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	b082      	sub	sp, #8
 8004172:	af00      	add	r7, sp, #0
 8004174:	4603      	mov	r3, r0
 8004176:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800417c:	4618      	mov	r0, r3
 800417e:	f7ff ff43 	bl	8004008 <__NVIC_DisableIRQ>
}
 8004182:	bf00      	nop
 8004184:	3708      	adds	r7, #8
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
	...

0800418c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e08e      	b.n	80042bc <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	461a      	mov	r2, r3
 80041a4:	4b47      	ldr	r3, [pc, #284]	; (80042c4 <HAL_DMA_Init+0x138>)
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d80f      	bhi.n	80041ca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	461a      	mov	r2, r3
 80041b0:	4b45      	ldr	r3, [pc, #276]	; (80042c8 <HAL_DMA_Init+0x13c>)
 80041b2:	4413      	add	r3, r2
 80041b4:	4a45      	ldr	r2, [pc, #276]	; (80042cc <HAL_DMA_Init+0x140>)
 80041b6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ba:	091b      	lsrs	r3, r3, #4
 80041bc:	009a      	lsls	r2, r3, #2
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a42      	ldr	r2, [pc, #264]	; (80042d0 <HAL_DMA_Init+0x144>)
 80041c6:	641a      	str	r2, [r3, #64]	; 0x40
 80041c8:	e00e      	b.n	80041e8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	461a      	mov	r2, r3
 80041d0:	4b40      	ldr	r3, [pc, #256]	; (80042d4 <HAL_DMA_Init+0x148>)
 80041d2:	4413      	add	r3, r2
 80041d4:	4a3d      	ldr	r2, [pc, #244]	; (80042cc <HAL_DMA_Init+0x140>)
 80041d6:	fba2 2303 	umull	r2, r3, r2, r3
 80041da:	091b      	lsrs	r3, r3, #4
 80041dc:	009a      	lsls	r2, r3, #2
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a3c      	ldr	r2, [pc, #240]	; (80042d8 <HAL_DMA_Init+0x14c>)
 80041e6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2202      	movs	r2, #2
 80041ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	6812      	ldr	r2, [r2, #0]
 80041fa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80041fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004202:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	6819      	ldr	r1, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	689a      	ldr	r2, [r3, #8]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	431a      	orrs	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	431a      	orrs	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	431a      	orrs	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	431a      	orrs	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	69db      	ldr	r3, [r3, #28]
 800422a:	431a      	orrs	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a1b      	ldr	r3, [r3, #32]
 8004230:	431a      	orrs	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	430a      	orrs	r2, r1
 8004238:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 fb24 	bl	8004888 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004248:	d102      	bne.n	8004250 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685a      	ldr	r2, [r3, #4]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004258:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800425c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004266:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d010      	beq.n	8004292 <HAL_DMA_Init+0x106>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	2b04      	cmp	r3, #4
 8004276:	d80c      	bhi.n	8004292 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f000 fb4d 	bl	8004918 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004282:	2200      	movs	r2, #0
 8004284:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800428e:	605a      	str	r2, [r3, #4]
 8004290:	e008      	b.n	80042a4 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3708      	adds	r7, #8
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	40020407 	.word	0x40020407
 80042c8:	bffdfff8 	.word	0xbffdfff8
 80042cc:	cccccccd 	.word	0xcccccccd
 80042d0:	40020000 	.word	0x40020000
 80042d4:	bffdfbf8 	.word	0xbffdfbf8
 80042d8:	40020400 	.word	0x40020400

080042dc <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d101      	bne.n	80042ee <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e07b      	b.n	80043e6 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f022 0201 	bic.w	r2, r2, #1
 80042fc:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	461a      	mov	r2, r3
 8004304:	4b3a      	ldr	r3, [pc, #232]	; (80043f0 <HAL_DMA_DeInit+0x114>)
 8004306:	429a      	cmp	r2, r3
 8004308:	d80f      	bhi.n	800432a <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	461a      	mov	r2, r3
 8004310:	4b38      	ldr	r3, [pc, #224]	; (80043f4 <HAL_DMA_DeInit+0x118>)
 8004312:	4413      	add	r3, r2
 8004314:	4a38      	ldr	r2, [pc, #224]	; (80043f8 <HAL_DMA_DeInit+0x11c>)
 8004316:	fba2 2303 	umull	r2, r3, r2, r3
 800431a:	091b      	lsrs	r3, r3, #4
 800431c:	009a      	lsls	r2, r3, #2
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a35      	ldr	r2, [pc, #212]	; (80043fc <HAL_DMA_DeInit+0x120>)
 8004326:	641a      	str	r2, [r3, #64]	; 0x40
 8004328:	e00e      	b.n	8004348 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	461a      	mov	r2, r3
 8004330:	4b33      	ldr	r3, [pc, #204]	; (8004400 <HAL_DMA_DeInit+0x124>)
 8004332:	4413      	add	r3, r2
 8004334:	4a30      	ldr	r2, [pc, #192]	; (80043f8 <HAL_DMA_DeInit+0x11c>)
 8004336:	fba2 2303 	umull	r2, r3, r2, r3
 800433a:	091b      	lsrs	r3, r3, #4
 800433c:	009a      	lsls	r2, r3, #2
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a2f      	ldr	r2, [pc, #188]	; (8004404 <HAL_DMA_DeInit+0x128>)
 8004346:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2200      	movs	r2, #0
 800434e:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004354:	f003 021c 	and.w	r2, r3, #28
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435c:	2101      	movs	r1, #1
 800435e:	fa01 f202 	lsl.w	r2, r1, r2
 8004362:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f000 fa8f 	bl	8004888 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800436e:	2200      	movs	r2, #0
 8004370:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800437a:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d00f      	beq.n	80043a4 <HAL_DMA_DeInit+0xc8>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	2b04      	cmp	r3, #4
 800438a:	d80b      	bhi.n	80043a4 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 fac3 	bl	8004918 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004396:	2200      	movs	r2, #0
 8004398:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80043a2:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3708      	adds	r7, #8
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	40020407 	.word	0x40020407
 80043f4:	bffdfff8 	.word	0xbffdfff8
 80043f8:	cccccccd 	.word	0xcccccccd
 80043fc:	40020000 	.word	0x40020000
 8004400:	bffdfbf8 	.word	0xbffdfbf8
 8004404:	40020400 	.word	0x40020400

08004408 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b086      	sub	sp, #24
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]
 8004414:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004416:	2300      	movs	r3, #0
 8004418:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004420:	2b01      	cmp	r3, #1
 8004422:	d101      	bne.n	8004428 <HAL_DMA_Start_IT+0x20>
 8004424:	2302      	movs	r3, #2
 8004426:	e069      	b.n	80044fc <HAL_DMA_Start_IT+0xf4>
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004436:	b2db      	uxtb	r3, r3
 8004438:	2b01      	cmp	r3, #1
 800443a:	d155      	bne.n	80044e8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2202      	movs	r2, #2
 8004440:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f022 0201 	bic.w	r2, r2, #1
 8004458:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	68b9      	ldr	r1, [r7, #8]
 8004460:	68f8      	ldr	r0, [r7, #12]
 8004462:	f000 f9d3 	bl	800480c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446a:	2b00      	cmp	r3, #0
 800446c:	d008      	beq.n	8004480 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f042 020e 	orr.w	r2, r2, #14
 800447c:	601a      	str	r2, [r3, #0]
 800447e:	e00f      	b.n	80044a0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 0204 	bic.w	r2, r2, #4
 800448e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f042 020a 	orr.w	r2, r2, #10
 800449e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d007      	beq.n	80044be <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044bc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d007      	beq.n	80044d6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044d4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f042 0201 	orr.w	r2, r2, #1
 80044e4:	601a      	str	r2, [r3, #0]
 80044e6:	e008      	b.n	80044fa <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2280      	movs	r2, #128	; 0x80
 80044ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80044fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3718      	adds	r7, #24
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e04f      	b.n	80045b6 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b02      	cmp	r3, #2
 8004520:	d008      	beq.n	8004534 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2204      	movs	r2, #4
 8004526:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e040      	b.n	80045b6 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f022 020e 	bic.w	r2, r2, #14
 8004542:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800454e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004552:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f022 0201 	bic.w	r2, r2, #1
 8004562:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004568:	f003 021c 	and.w	r2, r3, #28
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004570:	2101      	movs	r1, #1
 8004572:	fa01 f202 	lsl.w	r2, r1, r2
 8004576:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004580:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00c      	beq.n	80045a4 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004594:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004598:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80045a2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bc80      	pop	{r7}
 80045be:	4770      	bx	lr

080045c0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045c8:	2300      	movs	r3, #0
 80045ca:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d005      	beq.n	80045e4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2204      	movs	r2, #4
 80045dc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	73fb      	strb	r3, [r7, #15]
 80045e2:	e047      	b.n	8004674 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f022 020e 	bic.w	r2, r2, #14
 80045f2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f022 0201 	bic.w	r2, r2, #1
 8004602:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800460e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004612:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004618:	f003 021c 	and.w	r2, r3, #28
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004620:	2101      	movs	r1, #1
 8004622:	fa01 f202 	lsl.w	r2, r1, r2
 8004626:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004630:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00c      	beq.n	8004654 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004644:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004648:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004652:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004668:	2b00      	cmp	r3, #0
 800466a:	d003      	beq.n	8004674 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	4798      	blx	r3
    }
  }
  return status;
 8004674:	7bfb      	ldrb	r3, [r7, #15]
}
 8004676:	4618      	mov	r0, r3
 8004678:	3710      	adds	r7, #16
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
	...

08004680 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800469c:	f003 031c 	and.w	r3, r3, #28
 80046a0:	2204      	movs	r2, #4
 80046a2:	409a      	lsls	r2, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	4013      	ands	r3, r2
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d027      	beq.n	80046fc <HAL_DMA_IRQHandler+0x7c>
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	f003 0304 	and.w	r3, r3, #4
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d022      	beq.n	80046fc <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0320 	and.w	r3, r3, #32
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d107      	bne.n	80046d4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f022 0204 	bic.w	r2, r2, #4
 80046d2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d8:	f003 021c 	and.w	r2, r3, #28
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e0:	2104      	movs	r1, #4
 80046e2:	fa01 f202 	lsl.w	r2, r1, r2
 80046e6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f000 8081 	beq.w	80047f4 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80046fa:	e07b      	b.n	80047f4 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004700:	f003 031c 	and.w	r3, r3, #28
 8004704:	2202      	movs	r2, #2
 8004706:	409a      	lsls	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	4013      	ands	r3, r2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d03d      	beq.n	800478c <HAL_DMA_IRQHandler+0x10c>
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	f003 0302 	and.w	r3, r3, #2
 8004716:	2b00      	cmp	r3, #0
 8004718:	d038      	beq.n	800478c <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0320 	and.w	r3, r3, #32
 8004724:	2b00      	cmp	r3, #0
 8004726:	d10b      	bne.n	8004740 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f022 020a 	bic.w	r2, r2, #10
 8004736:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	461a      	mov	r2, r3
 8004746:	4b2e      	ldr	r3, [pc, #184]	; (8004800 <HAL_DMA_IRQHandler+0x180>)
 8004748:	429a      	cmp	r2, r3
 800474a:	d909      	bls.n	8004760 <HAL_DMA_IRQHandler+0xe0>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004750:	f003 031c 	and.w	r3, r3, #28
 8004754:	4a2b      	ldr	r2, [pc, #172]	; (8004804 <HAL_DMA_IRQHandler+0x184>)
 8004756:	2102      	movs	r1, #2
 8004758:	fa01 f303 	lsl.w	r3, r1, r3
 800475c:	6053      	str	r3, [r2, #4]
 800475e:	e008      	b.n	8004772 <HAL_DMA_IRQHandler+0xf2>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004764:	f003 031c 	and.w	r3, r3, #28
 8004768:	4a27      	ldr	r2, [pc, #156]	; (8004808 <HAL_DMA_IRQHandler+0x188>)
 800476a:	2102      	movs	r1, #2
 800476c:	fa01 f303 	lsl.w	r3, r1, r3
 8004770:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477e:	2b00      	cmp	r3, #0
 8004780:	d038      	beq.n	80047f4 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800478a:	e033      	b.n	80047f4 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004790:	f003 031c 	and.w	r3, r3, #28
 8004794:	2208      	movs	r2, #8
 8004796:	409a      	lsls	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4013      	ands	r3, r2
 800479c:	2b00      	cmp	r3, #0
 800479e:	d02a      	beq.n	80047f6 <HAL_DMA_IRQHandler+0x176>
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	f003 0308 	and.w	r3, r3, #8
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d025      	beq.n	80047f6 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f022 020e 	bic.w	r2, r2, #14
 80047b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047be:	f003 021c 	and.w	r2, r3, #28
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c6:	2101      	movs	r1, #1
 80047c8:	fa01 f202 	lsl.w	r2, r1, r2
 80047cc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d004      	beq.n	80047f6 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80047f4:	bf00      	nop
 80047f6:	bf00      	nop
}
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	40020080 	.word	0x40020080
 8004804:	40020400 	.word	0x40020400
 8004808:	40020000 	.word	0x40020000

0800480c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
 8004818:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004822:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004828:	2b00      	cmp	r3, #0
 800482a:	d004      	beq.n	8004836 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004834:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800483a:	f003 021c 	and.w	r2, r3, #28
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004842:	2101      	movs	r1, #1
 8004844:	fa01 f202 	lsl.w	r2, r1, r2
 8004848:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	683a      	ldr	r2, [r7, #0]
 8004850:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	2b10      	cmp	r3, #16
 8004858:	d108      	bne.n	800486c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68ba      	ldr	r2, [r7, #8]
 8004868:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800486a:	e007      	b.n	800487c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68ba      	ldr	r2, [r7, #8]
 8004872:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	60da      	str	r2, [r3, #12]
}
 800487c:	bf00      	nop
 800487e:	3714      	adds	r7, #20
 8004880:	46bd      	mov	sp, r7
 8004882:	bc80      	pop	{r7}
 8004884:	4770      	bx	lr
	...

08004888 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004888:	b480      	push	{r7}
 800488a:	b085      	sub	sp, #20
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	461a      	mov	r2, r3
 8004896:	4b1c      	ldr	r3, [pc, #112]	; (8004908 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8004898:	429a      	cmp	r2, r3
 800489a:	d813      	bhi.n	80048c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a0:	089b      	lsrs	r3, r3, #2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80048a8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	3b08      	subs	r3, #8
 80048b8:	4a14      	ldr	r2, [pc, #80]	; (800490c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80048ba:	fba2 2303 	umull	r2, r3, r2, r3
 80048be:	091b      	lsrs	r3, r3, #4
 80048c0:	60fb      	str	r3, [r7, #12]
 80048c2:	e011      	b.n	80048e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c8:	089b      	lsrs	r3, r3, #2
 80048ca:	009a      	lsls	r2, r3, #2
 80048cc:	4b10      	ldr	r3, [pc, #64]	; (8004910 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80048ce:	4413      	add	r3, r2
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	3b08      	subs	r3, #8
 80048dc:	4a0b      	ldr	r2, [pc, #44]	; (800490c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80048de:	fba2 2303 	umull	r2, r3, r2, r3
 80048e2:	091b      	lsrs	r3, r3, #4
 80048e4:	3307      	adds	r3, #7
 80048e6:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a0a      	ldr	r2, [pc, #40]	; (8004914 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80048ec:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f003 031f 	and.w	r3, r3, #31
 80048f4:	2201      	movs	r2, #1
 80048f6:	409a      	lsls	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	651a      	str	r2, [r3, #80]	; 0x50
}
 80048fc:	bf00      	nop
 80048fe:	3714      	adds	r7, #20
 8004900:	46bd      	mov	sp, r7
 8004902:	bc80      	pop	{r7}
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	40020407 	.word	0x40020407
 800490c:	cccccccd 	.word	0xcccccccd
 8004910:	4002081c 	.word	0x4002081c
 8004914:	40020880 	.word	0x40020880

08004918 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004928:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	4b0a      	ldr	r3, [pc, #40]	; (8004958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800492e:	4413      	add	r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	461a      	mov	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a08      	ldr	r2, [pc, #32]	; (800495c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800493c:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	3b01      	subs	r3, #1
 8004942:	f003 0303 	and.w	r3, r3, #3
 8004946:	2201      	movs	r2, #1
 8004948:	409a      	lsls	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800494e:	bf00      	nop
 8004950:	3714      	adds	r7, #20
 8004952:	46bd      	mov	sp, r7
 8004954:	bc80      	pop	{r7}
 8004956:	4770      	bx	lr
 8004958:	1000823f 	.word	0x1000823f
 800495c:	40020940 	.word	0x40020940

08004960 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b086      	sub	sp, #24
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800496e:	4b1c      	ldr	r3, [pc, #112]	; (80049e0 <HAL_FLASH_Program+0x80>)
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d101      	bne.n	800497a <HAL_FLASH_Program+0x1a>
 8004976:	2302      	movs	r3, #2
 8004978:	e02d      	b.n	80049d6 <HAL_FLASH_Program+0x76>
 800497a:	4b19      	ldr	r3, [pc, #100]	; (80049e0 <HAL_FLASH_Program+0x80>)
 800497c:	2201      	movs	r2, #1
 800497e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004980:	4b17      	ldr	r3, [pc, #92]	; (80049e0 <HAL_FLASH_Program+0x80>)
 8004982:	2200      	movs	r2, #0
 8004984:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004986:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800498a:	f000 f869 	bl	8004a60 <FLASH_WaitForLastOperation>
 800498e:	4603      	mov	r3, r0
 8004990:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8004992:	7dfb      	ldrb	r3, [r7, #23]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d11a      	bne.n	80049ce <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d105      	bne.n	80049aa <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800499e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049a2:	68b8      	ldr	r0, [r7, #8]
 80049a4:	f000 f8be 	bl	8004b24 <FLASH_Program_DoubleWord>
 80049a8:	e004      	b.n	80049b4 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	4619      	mov	r1, r3
 80049ae:	68b8      	ldr	r0, [r7, #8]
 80049b0:	f000 f8de 	bl	8004b70 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80049b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80049b8:	f000 f852 	bl	8004a60 <FLASH_WaitForLastOperation>
 80049bc:	4603      	mov	r3, r0
 80049be:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80049c0:	4b08      	ldr	r3, [pc, #32]	; (80049e4 <HAL_FLASH_Program+0x84>)
 80049c2:	695a      	ldr	r2, [r3, #20]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	43db      	mvns	r3, r3
 80049c8:	4906      	ldr	r1, [pc, #24]	; (80049e4 <HAL_FLASH_Program+0x84>)
 80049ca:	4013      	ands	r3, r2
 80049cc:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80049ce:	4b04      	ldr	r3, [pc, #16]	; (80049e0 <HAL_FLASH_Program+0x80>)
 80049d0:	2200      	movs	r2, #0
 80049d2:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80049d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3718      	adds	r7, #24
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	200003d0 	.word	0x200003d0
 80049e4:	58004000 	.word	0x58004000

080049e8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80049ee:	2300      	movs	r3, #0
 80049f0:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80049f2:	4b0b      	ldr	r3, [pc, #44]	; (8004a20 <HAL_FLASH_Unlock+0x38>)
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	da0b      	bge.n	8004a12 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80049fa:	4b09      	ldr	r3, [pc, #36]	; (8004a20 <HAL_FLASH_Unlock+0x38>)
 80049fc:	4a09      	ldr	r2, [pc, #36]	; (8004a24 <HAL_FLASH_Unlock+0x3c>)
 80049fe:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004a00:	4b07      	ldr	r3, [pc, #28]	; (8004a20 <HAL_FLASH_Unlock+0x38>)
 8004a02:	4a09      	ldr	r2, [pc, #36]	; (8004a28 <HAL_FLASH_Unlock+0x40>)
 8004a04:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004a06:	4b06      	ldr	r3, [pc, #24]	; (8004a20 <HAL_FLASH_Unlock+0x38>)
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	da01      	bge.n	8004a12 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004a12:	79fb      	ldrb	r3, [r7, #7]
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bc80      	pop	{r7}
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	58004000 	.word	0x58004000
 8004a24:	45670123 	.word	0x45670123
 8004a28:	cdef89ab 	.word	0xcdef89ab

08004a2c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004a32:	2300      	movs	r3, #0
 8004a34:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004a36:	4b09      	ldr	r3, [pc, #36]	; (8004a5c <HAL_FLASH_Lock+0x30>)
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	4a08      	ldr	r2, [pc, #32]	; (8004a5c <HAL_FLASH_Lock+0x30>)
 8004a3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a40:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8004a42:	4b06      	ldr	r3, [pc, #24]	; (8004a5c <HAL_FLASH_Lock+0x30>)
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	db01      	blt.n	8004a4e <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8004a4e:	79fb      	ldrb	r3, [r7, #7]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bc80      	pop	{r7}
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	58004000 	.word	0x58004000

08004a60 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8004a68:	f7fd fbb8 	bl	80021dc <HAL_GetTick>
 8004a6c:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004a6e:	e009      	b.n	8004a84 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004a70:	f7fd fbb4 	bl	80021dc <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d801      	bhi.n	8004a84 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e047      	b.n	8004b14 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004a84:	4b25      	ldr	r3, [pc, #148]	; (8004b1c <FLASH_WaitForLastOperation+0xbc>)
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a90:	d0ee      	beq.n	8004a70 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 8004a92:	4b22      	ldr	r3, [pc, #136]	; (8004b1c <FLASH_WaitForLastOperation+0xbc>)
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	f003 0301 	and.w	r3, r3, #1
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d002      	beq.n	8004aa8 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004aa2:	4b1e      	ldr	r3, [pc, #120]	; (8004b1c <FLASH_WaitForLastOperation+0xbc>)
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8004aa8:	68ba      	ldr	r2, [r7, #8]
 8004aaa:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8004aae:	4013      	ands	r3, r2
 8004ab0:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d007      	beq.n	8004acc <FLASH_WaitForLastOperation+0x6c>
 8004abc:	4b17      	ldr	r3, [pc, #92]	; (8004b1c <FLASH_WaitForLastOperation+0xbc>)
 8004abe:	699a      	ldr	r2, [r3, #24]
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004ac6:	4915      	ldr	r1, [pc, #84]	; (8004b1c <FLASH_WaitForLastOperation+0xbc>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	618b      	str	r3, [r1, #24]
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d004      	beq.n	8004ae0 <FLASH_WaitForLastOperation+0x80>
 8004ad6:	4a11      	ldr	r2, [pc, #68]	; (8004b1c <FLASH_WaitForLastOperation+0xbc>)
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004ade:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d00e      	beq.n	8004b04 <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8004ae6:	4a0e      	ldr	r2, [pc, #56]	; (8004b20 <FLASH_WaitForLastOperation+0xc0>)
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e011      	b.n	8004b14 <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004af0:	f7fd fb74 	bl	80021dc <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d801      	bhi.n	8004b04 <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	e007      	b.n	8004b14 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8004b04:	4b05      	ldr	r3, [pc, #20]	; (8004b1c <FLASH_WaitForLastOperation+0xbc>)
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b10:	d0ee      	beq.n	8004af0 <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3710      	adds	r7, #16
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	58004000 	.word	0x58004000
 8004b20:	200003d0 	.word	0x200003d0

08004b24 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004b30:	4b0e      	ldr	r3, [pc, #56]	; (8004b6c <FLASH_Program_DoubleWord+0x48>)
 8004b32:	695b      	ldr	r3, [r3, #20]
 8004b34:	4a0d      	ldr	r2, [pc, #52]	; (8004b6c <FLASH_Program_DoubleWord+0x48>)
 8004b36:	f043 0301 	orr.w	r3, r3, #1
 8004b3a:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	683a      	ldr	r2, [r7, #0]
 8004b40:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004b42:	f3bf 8f6f 	isb	sy
}
 8004b46:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8004b48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b4c:	f04f 0200 	mov.w	r2, #0
 8004b50:	f04f 0300 	mov.w	r3, #0
 8004b54:	000a      	movs	r2, r1
 8004b56:	2300      	movs	r3, #0
 8004b58:	68f9      	ldr	r1, [r7, #12]
 8004b5a:	3104      	adds	r1, #4
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	600b      	str	r3, [r1, #0]
}
 8004b60:	bf00      	nop
 8004b62:	3714      	adds	r7, #20
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bc80      	pop	{r7}
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	58004000 	.word	0x58004000

08004b70 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8004b70:	b480      	push	{r7}
 8004b72:	b089      	sub	sp, #36	; 0x24
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8004b7a:	2340      	movs	r3, #64	; 0x40
 8004b7c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8004b86:	4b18      	ldr	r3, [pc, #96]	; (8004be8 <FLASH_Program_Fast+0x78>)
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	4a17      	ldr	r2, [pc, #92]	; (8004be8 <FLASH_Program_Fast+0x78>)
 8004b8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b90:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b92:	f3ef 8310 	mrs	r3, PRIMASK
 8004b96:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b98:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 8004b9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004b9c:	b672      	cpsid	i
}
 8004b9e:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	3304      	adds	r3, #4
 8004bac:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	3304      	adds	r3, #4
 8004bb2:	617b      	str	r3, [r7, #20]
    row_index--;
 8004bb4:	7ffb      	ldrb	r3, [r7, #31]
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8004bba:	7ffb      	ldrb	r3, [r7, #31]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1ef      	bne.n	8004ba0 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8004bc0:	bf00      	nop
 8004bc2:	4b09      	ldr	r3, [pc, #36]	; (8004be8 <FLASH_Program_Fast+0x78>)
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bce:	d0f8      	beq.n	8004bc2 <FLASH_Program_Fast+0x52>
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	f383 8810 	msr	PRIMASK, r3
}
 8004bda:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8004bdc:	bf00      	nop
 8004bde:	3724      	adds	r7, #36	; 0x24
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bc80      	pop	{r7}
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	58004000 	.word	0x58004000

08004bec <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004bf6:	4b28      	ldr	r3, [pc, #160]	; (8004c98 <HAL_FLASHEx_Erase+0xac>)
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d101      	bne.n	8004c02 <HAL_FLASHEx_Erase+0x16>
 8004bfe:	2302      	movs	r3, #2
 8004c00:	e046      	b.n	8004c90 <HAL_FLASHEx_Erase+0xa4>
 8004c02:	4b25      	ldr	r3, [pc, #148]	; (8004c98 <HAL_FLASHEx_Erase+0xac>)
 8004c04:	2201      	movs	r2, #1
 8004c06:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004c08:	4b23      	ldr	r3, [pc, #140]	; (8004c98 <HAL_FLASHEx_Erase+0xac>)
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004c0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c12:	f7ff ff25 	bl	8004a60 <FLASH_WaitForLastOperation>
 8004c16:	4603      	mov	r3, r0
 8004c18:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004c1a:	7bfb      	ldrb	r3, [r7, #15]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d133      	bne.n	8004c88 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2b04      	cmp	r3, #4
 8004c26:	d108      	bne.n	8004c3a <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8004c28:	f000 f838 	bl	8004c9c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004c2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c30:	f7ff ff16 	bl	8004a60 <FLASH_WaitForLastOperation>
 8004c34:	4603      	mov	r3, r0
 8004c36:	73fb      	strb	r3, [r7, #15]
 8004c38:	e024      	b.n	8004c84 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c40:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	60bb      	str	r3, [r7, #8]
 8004c48:	e012      	b.n	8004c70 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8004c4a:	68b8      	ldr	r0, [r7, #8]
 8004c4c:	f000 f836 	bl	8004cbc <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004c50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c54:	f7ff ff04 	bl	8004a60 <FLASH_WaitForLastOperation>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8004c5c:	7bfb      	ldrb	r3, [r7, #15]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d003      	beq.n	8004c6a <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	68ba      	ldr	r2, [r7, #8]
 8004c66:	601a      	str	r2, [r3, #0]
          break;
 8004c68:	e00a      	b.n	8004c80 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	60bb      	str	r3, [r7, #8]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685a      	ldr	r2, [r3, #4]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	4413      	add	r3, r2
 8004c7a:	68ba      	ldr	r2, [r7, #8]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d3e4      	bcc.n	8004c4a <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8004c80:	f000 f878 	bl	8004d74 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004c84:	f000 f832 	bl	8004cec <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004c88:	4b03      	ldr	r3, [pc, #12]	; (8004c98 <HAL_FLASHEx_Erase+0xac>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	701a      	strb	r2, [r3, #0]

  return status;
 8004c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3710      	adds	r7, #16
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	200003d0 	.word	0x200003d0

08004c9c <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8004ca0:	4b05      	ldr	r3, [pc, #20]	; (8004cb8 <FLASH_MassErase+0x1c>)
 8004ca2:	695b      	ldr	r3, [r3, #20]
 8004ca4:	4a04      	ldr	r2, [pc, #16]	; (8004cb8 <FLASH_MassErase+0x1c>)
 8004ca6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004caa:	f043 0304 	orr.w	r3, r3, #4
 8004cae:	6153      	str	r3, [r2, #20]
#endif
}
 8004cb0:	bf00      	nop
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bc80      	pop	{r7}
 8004cb6:	4770      	bx	lr
 8004cb8:	58004000 	.word	0x58004000

08004cbc <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8004cc4:	4b08      	ldr	r3, [pc, #32]	; (8004ce8 <FLASH_PageErase+0x2c>)
 8004cc6:	695b      	ldr	r3, [r3, #20]
 8004cc8:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	00db      	lsls	r3, r3, #3
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	4a05      	ldr	r2, [pc, #20]	; (8004ce8 <FLASH_PageErase+0x2c>)
 8004cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cd8:	f043 0302 	orr.w	r3, r3, #2
 8004cdc:	6153      	str	r3, [r2, #20]
#endif
}
 8004cde:	bf00      	nop
 8004ce0:	370c      	adds	r7, #12
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bc80      	pop	{r7}
 8004ce6:	4770      	bx	lr
 8004ce8:	58004000 	.word	0x58004000

08004cec <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004cec:	b480      	push	{r7}
 8004cee:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8004cf0:	4b1f      	ldr	r3, [pc, #124]	; (8004d70 <FLASH_FlushCaches+0x84>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d117      	bne.n	8004d2c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004cfc:	4b1c      	ldr	r3, [pc, #112]	; (8004d70 <FLASH_FlushCaches+0x84>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a1b      	ldr	r2, [pc, #108]	; (8004d70 <FLASH_FlushCaches+0x84>)
 8004d02:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d06:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004d08:	4b19      	ldr	r3, [pc, #100]	; (8004d70 <FLASH_FlushCaches+0x84>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a18      	ldr	r2, [pc, #96]	; (8004d70 <FLASH_FlushCaches+0x84>)
 8004d0e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004d12:	6013      	str	r3, [r2, #0]
 8004d14:	4b16      	ldr	r3, [pc, #88]	; (8004d70 <FLASH_FlushCaches+0x84>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a15      	ldr	r2, [pc, #84]	; (8004d70 <FLASH_FlushCaches+0x84>)
 8004d1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d1e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004d20:	4b13      	ldr	r3, [pc, #76]	; (8004d70 <FLASH_FlushCaches+0x84>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a12      	ldr	r2, [pc, #72]	; (8004d70 <FLASH_FlushCaches+0x84>)
 8004d26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d2a:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8004d2c:	4b10      	ldr	r3, [pc, #64]	; (8004d70 <FLASH_FlushCaches+0x84>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d117      	bne.n	8004d68 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004d38:	4b0d      	ldr	r3, [pc, #52]	; (8004d70 <FLASH_FlushCaches+0x84>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a0c      	ldr	r2, [pc, #48]	; (8004d70 <FLASH_FlushCaches+0x84>)
 8004d3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d42:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004d44:	4b0a      	ldr	r3, [pc, #40]	; (8004d70 <FLASH_FlushCaches+0x84>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a09      	ldr	r2, [pc, #36]	; (8004d70 <FLASH_FlushCaches+0x84>)
 8004d4a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004d4e:	6013      	str	r3, [r2, #0]
 8004d50:	4b07      	ldr	r3, [pc, #28]	; (8004d70 <FLASH_FlushCaches+0x84>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a06      	ldr	r2, [pc, #24]	; (8004d70 <FLASH_FlushCaches+0x84>)
 8004d56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d5a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004d5c:	4b04      	ldr	r3, [pc, #16]	; (8004d70 <FLASH_FlushCaches+0x84>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a03      	ldr	r2, [pc, #12]	; (8004d70 <FLASH_FlushCaches+0x84>)
 8004d62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d66:	6013      	str	r3, [r2, #0]
  }
#endif
}
 8004d68:	bf00      	nop
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bc80      	pop	{r7}
 8004d6e:	4770      	bx	lr
 8004d70:	58004000 	.word	0x58004000

08004d74 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8004d74:	b480      	push	{r7}
 8004d76:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8004d78:	4b05      	ldr	r3, [pc, #20]	; (8004d90 <FLASH_AcknowledgePageErase+0x1c>)
 8004d7a:	695b      	ldr	r3, [r3, #20]
 8004d7c:	4a04      	ldr	r2, [pc, #16]	; (8004d90 <FLASH_AcknowledgePageErase+0x1c>)
 8004d7e:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8004d82:	f023 0302 	bic.w	r3, r3, #2
 8004d86:	6153      	str	r3, [r2, #20]
#endif
}
 8004d88:	bf00      	nop
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bc80      	pop	{r7}
 8004d8e:	4770      	bx	lr
 8004d90:	58004000 	.word	0x58004000

08004d94 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b087      	sub	sp, #28
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004da2:	e140      	b.n	8005026 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	2101      	movs	r1, #1
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	fa01 f303 	lsl.w	r3, r1, r3
 8004db0:	4013      	ands	r3, r2
 8004db2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	f000 8132 	beq.w	8005020 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f003 0303 	and.w	r3, r3, #3
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d005      	beq.n	8004dd4 <HAL_GPIO_Init+0x40>
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f003 0303 	and.w	r3, r3, #3
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d130      	bne.n	8004e36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	005b      	lsls	r3, r3, #1
 8004dde:	2203      	movs	r2, #3
 8004de0:	fa02 f303 	lsl.w	r3, r2, r3
 8004de4:	43db      	mvns	r3, r3
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	4013      	ands	r3, r2
 8004dea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	68da      	ldr	r2, [r3, #12]
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	005b      	lsls	r3, r3, #1
 8004df4:	fa02 f303 	lsl.w	r3, r2, r3
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	693a      	ldr	r2, [r7, #16]
 8004e02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e12:	43db      	mvns	r3, r3
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	4013      	ands	r3, r2
 8004e18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	091b      	lsrs	r3, r3, #4
 8004e20:	f003 0201 	and.w	r2, r3, #1
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2a:	693a      	ldr	r2, [r7, #16]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	693a      	ldr	r2, [r7, #16]
 8004e34:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	f003 0303 	and.w	r3, r3, #3
 8004e3e:	2b03      	cmp	r3, #3
 8004e40:	d017      	beq.n	8004e72 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	005b      	lsls	r3, r3, #1
 8004e4c:	2203      	movs	r2, #3
 8004e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e52:	43db      	mvns	r3, r3
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	4013      	ands	r3, r2
 8004e58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	689a      	ldr	r2, [r3, #8]
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	005b      	lsls	r3, r3, #1
 8004e62:	fa02 f303 	lsl.w	r3, r2, r3
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	693a      	ldr	r2, [r7, #16]
 8004e70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	f003 0303 	and.w	r3, r3, #3
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d123      	bne.n	8004ec6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	08da      	lsrs	r2, r3, #3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	3208      	adds	r2, #8
 8004e86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	f003 0307 	and.w	r3, r3, #7
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	220f      	movs	r2, #15
 8004e96:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9a:	43db      	mvns	r3, r3
 8004e9c:	693a      	ldr	r2, [r7, #16]
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	691a      	ldr	r2, [r3, #16]
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	f003 0307 	and.w	r3, r3, #7
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb2:	693a      	ldr	r2, [r7, #16]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	08da      	lsrs	r2, r3, #3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	3208      	adds	r2, #8
 8004ec0:	6939      	ldr	r1, [r7, #16]
 8004ec2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	005b      	lsls	r3, r3, #1
 8004ed0:	2203      	movs	r2, #3
 8004ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed6:	43db      	mvns	r3, r3
 8004ed8:	693a      	ldr	r2, [r7, #16]
 8004eda:	4013      	ands	r3, r2
 8004edc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f003 0203 	and.w	r2, r3, #3
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	005b      	lsls	r3, r3, #1
 8004eea:	fa02 f303 	lsl.w	r3, r2, r3
 8004eee:	693a      	ldr	r2, [r7, #16]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	f000 808c 	beq.w	8005020 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004f08:	4a4e      	ldr	r2, [pc, #312]	; (8005044 <HAL_GPIO_Init+0x2b0>)
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	089b      	lsrs	r3, r3, #2
 8004f0e:	3302      	adds	r3, #2
 8004f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	f003 0303 	and.w	r3, r3, #3
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	2207      	movs	r2, #7
 8004f20:	fa02 f303 	lsl.w	r3, r2, r3
 8004f24:	43db      	mvns	r3, r3
 8004f26:	693a      	ldr	r2, [r7, #16]
 8004f28:	4013      	ands	r3, r2
 8004f2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004f32:	d00d      	beq.n	8004f50 <HAL_GPIO_Init+0x1bc>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a44      	ldr	r2, [pc, #272]	; (8005048 <HAL_GPIO_Init+0x2b4>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d007      	beq.n	8004f4c <HAL_GPIO_Init+0x1b8>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a43      	ldr	r2, [pc, #268]	; (800504c <HAL_GPIO_Init+0x2b8>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d101      	bne.n	8004f48 <HAL_GPIO_Init+0x1b4>
 8004f44:	2302      	movs	r3, #2
 8004f46:	e004      	b.n	8004f52 <HAL_GPIO_Init+0x1be>
 8004f48:	2307      	movs	r3, #7
 8004f4a:	e002      	b.n	8004f52 <HAL_GPIO_Init+0x1be>
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e000      	b.n	8004f52 <HAL_GPIO_Init+0x1be>
 8004f50:	2300      	movs	r3, #0
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	f002 0203 	and.w	r2, r2, #3
 8004f58:	0092      	lsls	r2, r2, #2
 8004f5a:	4093      	lsls	r3, r2
 8004f5c:	693a      	ldr	r2, [r7, #16]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004f62:	4938      	ldr	r1, [pc, #224]	; (8005044 <HAL_GPIO_Init+0x2b0>)
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	089b      	lsrs	r3, r3, #2
 8004f68:	3302      	adds	r3, #2
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004f70:	4b37      	ldr	r3, [pc, #220]	; (8005050 <HAL_GPIO_Init+0x2bc>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	43db      	mvns	r3, r3
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d003      	beq.n	8004f94 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004f94:	4a2e      	ldr	r2, [pc, #184]	; (8005050 <HAL_GPIO_Init+0x2bc>)
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004f9a:	4b2d      	ldr	r3, [pc, #180]	; (8005050 <HAL_GPIO_Init+0x2bc>)
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	43db      	mvns	r3, r3
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d003      	beq.n	8004fbe <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8004fb6:	693a      	ldr	r2, [r7, #16]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004fbe:	4a24      	ldr	r2, [pc, #144]	; (8005050 <HAL_GPIO_Init+0x2bc>)
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8004fc4:	4b22      	ldr	r3, [pc, #136]	; (8005050 <HAL_GPIO_Init+0x2bc>)
 8004fc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fca:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	43db      	mvns	r3, r3
 8004fd0:	693a      	ldr	r2, [r7, #16]
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d003      	beq.n	8004fea <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8004fe2:	693a      	ldr	r2, [r7, #16]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8004fea:	4a19      	ldr	r2, [pc, #100]	; (8005050 <HAL_GPIO_Init+0x2bc>)
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8004ff2:	4b17      	ldr	r3, [pc, #92]	; (8005050 <HAL_GPIO_Init+0x2bc>)
 8004ff4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ff8:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	43db      	mvns	r3, r3
 8004ffe:	693a      	ldr	r2, [r7, #16]
 8005000:	4013      	ands	r3, r2
 8005002:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d003      	beq.n	8005018 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	4313      	orrs	r3, r2
 8005016:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8005018:	4a0d      	ldr	r2, [pc, #52]	; (8005050 <HAL_GPIO_Init+0x2bc>)
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	3301      	adds	r3, #1
 8005024:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	fa22 f303 	lsr.w	r3, r2, r3
 8005030:	2b00      	cmp	r3, #0
 8005032:	f47f aeb7 	bne.w	8004da4 <HAL_GPIO_Init+0x10>
  }
}
 8005036:	bf00      	nop
 8005038:	bf00      	nop
 800503a:	371c      	adds	r7, #28
 800503c:	46bd      	mov	sp, r7
 800503e:	bc80      	pop	{r7}
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	40010000 	.word	0x40010000
 8005048:	48000400 	.word	0x48000400
 800504c:	48000800 	.word	0x48000800
 8005050:	58000800 	.word	0x58000800

08005054 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005054:	b480      	push	{r7}
 8005056:	b087      	sub	sp, #28
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800505e:	2300      	movs	r3, #0
 8005060:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005062:	e0af      	b.n	80051c4 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005064:	2201      	movs	r2, #1
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	fa02 f303 	lsl.w	r3, r2, r3
 800506c:	683a      	ldr	r2, [r7, #0]
 800506e:	4013      	ands	r3, r2
 8005070:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	2b00      	cmp	r3, #0
 8005076:	f000 80a2 	beq.w	80051be <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800507a:	4a59      	ldr	r2, [pc, #356]	; (80051e0 <HAL_GPIO_DeInit+0x18c>)
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	089b      	lsrs	r3, r3, #2
 8005080:	3302      	adds	r3, #2
 8005082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005086:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	f003 0303 	and.w	r3, r3, #3
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	2207      	movs	r2, #7
 8005092:	fa02 f303 	lsl.w	r3, r2, r3
 8005096:	68fa      	ldr	r2, [r7, #12]
 8005098:	4013      	ands	r3, r2
 800509a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80050a2:	d00d      	beq.n	80050c0 <HAL_GPIO_DeInit+0x6c>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a4f      	ldr	r2, [pc, #316]	; (80051e4 <HAL_GPIO_DeInit+0x190>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d007      	beq.n	80050bc <HAL_GPIO_DeInit+0x68>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a4e      	ldr	r2, [pc, #312]	; (80051e8 <HAL_GPIO_DeInit+0x194>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d101      	bne.n	80050b8 <HAL_GPIO_DeInit+0x64>
 80050b4:	2302      	movs	r3, #2
 80050b6:	e004      	b.n	80050c2 <HAL_GPIO_DeInit+0x6e>
 80050b8:	2307      	movs	r3, #7
 80050ba:	e002      	b.n	80050c2 <HAL_GPIO_DeInit+0x6e>
 80050bc:	2301      	movs	r3, #1
 80050be:	e000      	b.n	80050c2 <HAL_GPIO_DeInit+0x6e>
 80050c0:	2300      	movs	r3, #0
 80050c2:	697a      	ldr	r2, [r7, #20]
 80050c4:	f002 0203 	and.w	r2, r2, #3
 80050c8:	0092      	lsls	r2, r2, #2
 80050ca:	4093      	lsls	r3, r2
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d136      	bne.n	8005140 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 80050d2:	4b46      	ldr	r3, [pc, #280]	; (80051ec <HAL_GPIO_DeInit+0x198>)
 80050d4:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	43db      	mvns	r3, r3
 80050dc:	4943      	ldr	r1, [pc, #268]	; (80051ec <HAL_GPIO_DeInit+0x198>)
 80050de:	4013      	ands	r3, r2
 80050e0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 80050e4:	4b41      	ldr	r3, [pc, #260]	; (80051ec <HAL_GPIO_DeInit+0x198>)
 80050e6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	43db      	mvns	r3, r3
 80050ee:	493f      	ldr	r1, [pc, #252]	; (80051ec <HAL_GPIO_DeInit+0x198>)
 80050f0:	4013      	ands	r3, r2
 80050f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80050f6:	4b3d      	ldr	r3, [pc, #244]	; (80051ec <HAL_GPIO_DeInit+0x198>)
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	43db      	mvns	r3, r3
 80050fe:	493b      	ldr	r1, [pc, #236]	; (80051ec <HAL_GPIO_DeInit+0x198>)
 8005100:	4013      	ands	r3, r2
 8005102:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8005104:	4b39      	ldr	r3, [pc, #228]	; (80051ec <HAL_GPIO_DeInit+0x198>)
 8005106:	685a      	ldr	r2, [r3, #4]
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	43db      	mvns	r3, r3
 800510c:	4937      	ldr	r1, [pc, #220]	; (80051ec <HAL_GPIO_DeInit+0x198>)
 800510e:	4013      	ands	r3, r2
 8005110:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	f003 0303 	and.w	r3, r3, #3
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	2207      	movs	r2, #7
 800511c:	fa02 f303 	lsl.w	r3, r2, r3
 8005120:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005122:	4a2f      	ldr	r2, [pc, #188]	; (80051e0 <HAL_GPIO_DeInit+0x18c>)
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	089b      	lsrs	r3, r3, #2
 8005128:	3302      	adds	r3, #2
 800512a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	43da      	mvns	r2, r3
 8005132:	482b      	ldr	r0, [pc, #172]	; (80051e0 <HAL_GPIO_DeInit+0x18c>)
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	089b      	lsrs	r3, r3, #2
 8005138:	400a      	ands	r2, r1
 800513a:	3302      	adds	r3, #2
 800513c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	005b      	lsls	r3, r3, #1
 8005148:	2103      	movs	r1, #3
 800514a:	fa01 f303 	lsl.w	r3, r1, r3
 800514e:	431a      	orrs	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	08da      	lsrs	r2, r3, #3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	3208      	adds	r2, #8
 800515c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	f003 0307 	and.w	r3, r3, #7
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	220f      	movs	r2, #15
 800516a:	fa02 f303 	lsl.w	r3, r2, r3
 800516e:	43db      	mvns	r3, r3
 8005170:	697a      	ldr	r2, [r7, #20]
 8005172:	08d2      	lsrs	r2, r2, #3
 8005174:	4019      	ands	r1, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	3208      	adds	r2, #8
 800517a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	689a      	ldr	r2, [r3, #8]
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	005b      	lsls	r3, r3, #1
 8005186:	2103      	movs	r1, #3
 8005188:	fa01 f303 	lsl.w	r3, r1, r3
 800518c:	43db      	mvns	r3, r3
 800518e:	401a      	ands	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685a      	ldr	r2, [r3, #4]
 8005198:	2101      	movs	r1, #1
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	fa01 f303 	lsl.w	r3, r1, r3
 80051a0:	43db      	mvns	r3, r3
 80051a2:	401a      	ands	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	68da      	ldr	r2, [r3, #12]
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	005b      	lsls	r3, r3, #1
 80051b0:	2103      	movs	r1, #3
 80051b2:	fa01 f303 	lsl.w	r3, r1, r3
 80051b6:	43db      	mvns	r3, r3
 80051b8:	401a      	ands	r2, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	60da      	str	r2, [r3, #12]
    }

    position++;
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	3301      	adds	r3, #1
 80051c2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80051c4:	683a      	ldr	r2, [r7, #0]
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	fa22 f303 	lsr.w	r3, r2, r3
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	f47f af49 	bne.w	8005064 <HAL_GPIO_DeInit+0x10>
  }
}
 80051d2:	bf00      	nop
 80051d4:	bf00      	nop
 80051d6:	371c      	adds	r7, #28
 80051d8:	46bd      	mov	sp, r7
 80051da:	bc80      	pop	{r7}
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	40010000 	.word	0x40010000
 80051e4:	48000400 	.word	0x48000400
 80051e8:	48000800 	.word	0x48000800
 80051ec:	58000800 	.word	0x58000800

080051f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	460b      	mov	r3, r1
 80051fa:	807b      	strh	r3, [r7, #2]
 80051fc:	4613      	mov	r3, r2
 80051fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005200:	787b      	ldrb	r3, [r7, #1]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d003      	beq.n	800520e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005206:	887a      	ldrh	r2, [r7, #2]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800520c:	e002      	b.n	8005214 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800520e:	887a      	ldrh	r2, [r7, #2]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005214:	bf00      	nop
 8005216:	370c      	adds	r7, #12
 8005218:	46bd      	mov	sp, r7
 800521a:	bc80      	pop	{r7}
 800521c:	4770      	bx	lr

0800521e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800521e:	b580      	push	{r7, lr}
 8005220:	b082      	sub	sp, #8
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d101      	bne.n	8005230 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e081      	b.n	8005334 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005236:	b2db      	uxtb	r3, r3
 8005238:	2b00      	cmp	r3, #0
 800523a:	d106      	bne.n	800524a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f7fc fae1 	bl	800180c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2224      	movs	r2, #36	; 0x24
 800524e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f022 0201 	bic.w	r2, r2, #1
 8005260:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685a      	ldr	r2, [r3, #4]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800526e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	689a      	ldr	r2, [r3, #8]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800527e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	2b01      	cmp	r3, #1
 8005286:	d107      	bne.n	8005298 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	689a      	ldr	r2, [r3, #8]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005294:	609a      	str	r2, [r3, #8]
 8005296:	e006      	b.n	80052a6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	689a      	ldr	r2, [r3, #8]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80052a4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d104      	bne.n	80052b8 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052b6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	6812      	ldr	r2, [r2, #0]
 80052c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80052c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052ca:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68da      	ldr	r2, [r3, #12]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80052da:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	691a      	ldr	r2, [r3, #16]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	695b      	ldr	r3, [r3, #20]
 80052e4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	699b      	ldr	r3, [r3, #24]
 80052ec:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	430a      	orrs	r2, r1
 80052f4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	69d9      	ldr	r1, [r3, #28]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a1a      	ldr	r2, [r3, #32]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	430a      	orrs	r2, r1
 8005304:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f042 0201 	orr.w	r2, r2, #1
 8005314:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2220      	movs	r2, #32
 8005320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	3708      	adds	r7, #8
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800534c:	b2db      	uxtb	r3, r3
 800534e:	2b20      	cmp	r3, #32
 8005350:	d138      	bne.n	80053c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005358:	2b01      	cmp	r3, #1
 800535a:	d101      	bne.n	8005360 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800535c:	2302      	movs	r3, #2
 800535e:	e032      	b.n	80053c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2224      	movs	r2, #36	; 0x24
 800536c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f022 0201 	bic.w	r2, r2, #1
 800537e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800538e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	6819      	ldr	r1, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	683a      	ldr	r2, [r7, #0]
 800539c:	430a      	orrs	r2, r1
 800539e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f042 0201 	orr.w	r2, r2, #1
 80053ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2220      	movs	r2, #32
 80053b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80053c0:	2300      	movs	r3, #0
 80053c2:	e000      	b.n	80053c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80053c4:	2302      	movs	r3, #2
  }
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	370c      	adds	r7, #12
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bc80      	pop	{r7}
 80053ce:	4770      	bx	lr

080053d0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b085      	sub	sp, #20
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	2b20      	cmp	r3, #32
 80053e4:	d139      	bne.n	800545a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d101      	bne.n	80053f4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80053f0:	2302      	movs	r3, #2
 80053f2:	e033      	b.n	800545c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2224      	movs	r2, #36	; 0x24
 8005400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f022 0201 	bic.w	r2, r2, #1
 8005412:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005422:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	021b      	lsls	r3, r3, #8
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	4313      	orrs	r3, r2
 800542c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f042 0201 	orr.w	r2, r2, #1
 8005444:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2220      	movs	r2, #32
 800544a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005456:	2300      	movs	r3, #0
 8005458:	e000      	b.n	800545c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800545a:	2302      	movs	r3, #2
  }
}
 800545c:	4618      	mov	r0, r3
 800545e:	3714      	adds	r7, #20
 8005460:	46bd      	mov	sp, r7
 8005462:	bc80      	pop	{r7}
 8005464:	4770      	bx	lr
	...

08005468 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005468:	b480      	push	{r7}
 800546a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800546c:	4b04      	ldr	r3, [pc, #16]	; (8005480 <HAL_PWR_EnableBkUpAccess+0x18>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a03      	ldr	r2, [pc, #12]	; (8005480 <HAL_PWR_EnableBkUpAccess+0x18>)
 8005472:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005476:	6013      	str	r3, [r2, #0]
}
 8005478:	bf00      	nop
 800547a:	46bd      	mov	sp, r7
 800547c:	bc80      	pop	{r7}
 800547e:	4770      	bx	lr
 8005480:	58000400 	.word	0x58000400

08005484 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	460b      	mov	r3, r1
 800548e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d10c      	bne.n	80054b0 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8005496:	4b13      	ldr	r3, [pc, #76]	; (80054e4 <HAL_PWR_EnterSLEEPMode+0x60>)
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800549e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054a2:	d10d      	bne.n	80054c0 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 80054a4:	f000 f83c 	bl	8005520 <HAL_PWREx_DisableLowPowerRunMode>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d008      	beq.n	80054c0 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 80054ae:	e015      	b.n	80054dc <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 80054b0:	4b0c      	ldr	r3, [pc, #48]	; (80054e4 <HAL_PWR_EnterSLEEPMode+0x60>)
 80054b2:	695b      	ldr	r3, [r3, #20]
 80054b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d101      	bne.n	80054c0 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 80054bc:	f000 f822 	bl	8005504 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80054c0:	4b09      	ldr	r3, [pc, #36]	; (80054e8 <HAL_PWR_EnterSLEEPMode+0x64>)
 80054c2:	691b      	ldr	r3, [r3, #16]
 80054c4:	4a08      	ldr	r2, [pc, #32]	; (80054e8 <HAL_PWR_EnterSLEEPMode+0x64>)
 80054c6:	f023 0304 	bic.w	r3, r3, #4
 80054ca:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80054cc:	78fb      	ldrb	r3, [r7, #3]
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d101      	bne.n	80054d6 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80054d2:	bf30      	wfi
 80054d4:	e002      	b.n	80054dc <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80054d6:	bf40      	sev
    __WFE();
 80054d8:	bf20      	wfe
    __WFE();
 80054da:	bf20      	wfe
  }
}
 80054dc:	3708      	adds	r7, #8
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	58000400 	.word	0x58000400
 80054e8:	e000ed00 	.word	0xe000ed00

080054ec <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80054ec:	b480      	push	{r7}
 80054ee:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80054f0:	4b03      	ldr	r3, [pc, #12]	; (8005500 <HAL_PWREx_GetVoltageRange+0x14>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bc80      	pop	{r7}
 80054fe:	4770      	bx	lr
 8005500:	58000400 	.word	0x58000400

08005504 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8005504:	b480      	push	{r7}
 8005506:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8005508:	4b04      	ldr	r3, [pc, #16]	; (800551c <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a03      	ldr	r2, [pc, #12]	; (800551c <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 800550e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005512:	6013      	str	r3, [r2, #0]
}
 8005514:	bf00      	nop
 8005516:	46bd      	mov	sp, r7
 8005518:	bc80      	pop	{r7}
 800551a:	4770      	bx	lr
 800551c:	58000400 	.word	0x58000400

08005520 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8005526:	4b16      	ldr	r3, [pc, #88]	; (8005580 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a15      	ldr	r2, [pc, #84]	; (8005580 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 800552c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005530:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8005532:	4b14      	ldr	r3, [pc, #80]	; (8005584 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2232      	movs	r2, #50	; 0x32
 8005538:	fb02 f303 	mul.w	r3, r2, r3
 800553c:	4a12      	ldr	r2, [pc, #72]	; (8005588 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 800553e:	fba2 2303 	umull	r2, r3, r2, r3
 8005542:	0c9b      	lsrs	r3, r3, #18
 8005544:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005546:	e002      	b.n	800554e <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	3b01      	subs	r3, #1
 800554c:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800554e:	4b0c      	ldr	r3, [pc, #48]	; (8005580 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005556:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800555a:	d102      	bne.n	8005562 <HAL_PWREx_DisableLowPowerRunMode+0x42>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d1f2      	bne.n	8005548 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8005562:	4b07      	ldr	r3, [pc, #28]	; (8005580 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800556a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800556e:	d101      	bne.n	8005574 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e000      	b.n	8005576 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	370c      	adds	r7, #12
 800557a:	46bd      	mov	sp, r7
 800557c:	bc80      	pop	{r7}
 800557e:	4770      	bx	lr
 8005580:	58000400 	.word	0x58000400
 8005584:	20000000 	.word	0x20000000
 8005588:	431bde83 	.word	0x431bde83

0800558c <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	4603      	mov	r3, r0
 8005594:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8005596:	4b10      	ldr	r3, [pc, #64]	; (80055d8 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f023 0307 	bic.w	r3, r3, #7
 800559e:	4a0e      	ldr	r2, [pc, #56]	; (80055d8 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80055a0:	f043 0302 	orr.w	r3, r3, #2
 80055a4:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80055a6:	4b0d      	ldr	r3, [pc, #52]	; (80055dc <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	4a0c      	ldr	r2, [pc, #48]	; (80055dc <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80055ac:	f043 0304 	orr.w	r3, r3, #4
 80055b0:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80055b2:	79fb      	ldrb	r3, [r7, #7]
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d101      	bne.n	80055bc <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80055b8:	bf30      	wfi
 80055ba:	e002      	b.n	80055c2 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80055bc:	bf40      	sev
    __WFE();
 80055be:	bf20      	wfe
    __WFE();
 80055c0:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80055c2:	4b06      	ldr	r3, [pc, #24]	; (80055dc <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	4a05      	ldr	r2, [pc, #20]	; (80055dc <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80055c8:	f023 0304 	bic.w	r3, r3, #4
 80055cc:	6113      	str	r3, [r2, #16]
}
 80055ce:	bf00      	nop
 80055d0:	370c      	adds	r7, #12
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bc80      	pop	{r7}
 80055d6:	4770      	bx	lr
 80055d8:	58000400 	.word	0x58000400
 80055dc:	e000ed00 	.word	0xe000ed00

080055e0 <LL_PWR_IsEnabledBkUpAccess>:
{
 80055e0:	b480      	push	{r7}
 80055e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80055e4:	4b06      	ldr	r3, [pc, #24]	; (8005600 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055f0:	d101      	bne.n	80055f6 <LL_PWR_IsEnabledBkUpAccess+0x16>
 80055f2:	2301      	movs	r3, #1
 80055f4:	e000      	b.n	80055f8 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bc80      	pop	{r7}
 80055fe:	4770      	bx	lr
 8005600:	58000400 	.word	0x58000400

08005604 <LL_RCC_HSE_EnableTcxo>:
{
 8005604:	b480      	push	{r7}
 8005606:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005608:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005612:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005616:	6013      	str	r3, [r2, #0]
}
 8005618:	bf00      	nop
 800561a:	46bd      	mov	sp, r7
 800561c:	bc80      	pop	{r7}
 800561e:	4770      	bx	lr

08005620 <LL_RCC_HSE_DisableTcxo>:
{
 8005620:	b480      	push	{r7}
 8005622:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005624:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800562e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005632:	6013      	str	r3, [r2, #0]
}
 8005634:	bf00      	nop
 8005636:	46bd      	mov	sp, r7
 8005638:	bc80      	pop	{r7}
 800563a:	4770      	bx	lr

0800563c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800563c:	b480      	push	{r7}
 800563e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800564a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800564e:	d101      	bne.n	8005654 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005650:	2301      	movs	r3, #1
 8005652:	e000      	b.n	8005656 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	46bd      	mov	sp, r7
 800565a:	bc80      	pop	{r7}
 800565c:	4770      	bx	lr

0800565e <LL_RCC_HSE_Enable>:
{
 800565e:	b480      	push	{r7}
 8005660:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800566c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005670:	6013      	str	r3, [r2, #0]
}
 8005672:	bf00      	nop
 8005674:	46bd      	mov	sp, r7
 8005676:	bc80      	pop	{r7}
 8005678:	4770      	bx	lr

0800567a <LL_RCC_HSE_Disable>:
{
 800567a:	b480      	push	{r7}
 800567c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800567e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005688:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800568c:	6013      	str	r3, [r2, #0]
}
 800568e:	bf00      	nop
 8005690:	46bd      	mov	sp, r7
 8005692:	bc80      	pop	{r7}
 8005694:	4770      	bx	lr

08005696 <LL_RCC_HSE_IsReady>:
{
 8005696:	b480      	push	{r7}
 8005698:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800569a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056a8:	d101      	bne.n	80056ae <LL_RCC_HSE_IsReady+0x18>
 80056aa:	2301      	movs	r3, #1
 80056ac:	e000      	b.n	80056b0 <LL_RCC_HSE_IsReady+0x1a>
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bc80      	pop	{r7}
 80056b6:	4770      	bx	lr

080056b8 <LL_RCC_HSI_Enable>:
{
 80056b8:	b480      	push	{r7}
 80056ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80056bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056ca:	6013      	str	r3, [r2, #0]
}
 80056cc:	bf00      	nop
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bc80      	pop	{r7}
 80056d2:	4770      	bx	lr

080056d4 <LL_RCC_HSI_Disable>:
{
 80056d4:	b480      	push	{r7}
 80056d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80056d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056e6:	6013      	str	r3, [r2, #0]
}
 80056e8:	bf00      	nop
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bc80      	pop	{r7}
 80056ee:	4770      	bx	lr

080056f0 <LL_RCC_HSI_IsReady>:
{
 80056f0:	b480      	push	{r7}
 80056f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80056f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005702:	d101      	bne.n	8005708 <LL_RCC_HSI_IsReady+0x18>
 8005704:	2301      	movs	r3, #1
 8005706:	e000      	b.n	800570a <LL_RCC_HSI_IsReady+0x1a>
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	46bd      	mov	sp, r7
 800570e:	bc80      	pop	{r7}
 8005710:	4770      	bx	lr

08005712 <LL_RCC_HSI_SetCalibTrimming>:
{
 8005712:	b480      	push	{r7}
 8005714:	b083      	sub	sp, #12
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800571a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	061b      	lsls	r3, r3, #24
 8005728:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800572c:	4313      	orrs	r3, r2
 800572e:	604b      	str	r3, [r1, #4]
}
 8005730:	bf00      	nop
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	bc80      	pop	{r7}
 8005738:	4770      	bx	lr

0800573a <LL_RCC_LSE_IsReady>:
{
 800573a:	b480      	push	{r7}
 800573c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800573e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005746:	f003 0302 	and.w	r3, r3, #2
 800574a:	2b02      	cmp	r3, #2
 800574c:	d101      	bne.n	8005752 <LL_RCC_LSE_IsReady+0x18>
 800574e:	2301      	movs	r3, #1
 8005750:	e000      	b.n	8005754 <LL_RCC_LSE_IsReady+0x1a>
 8005752:	2300      	movs	r3, #0
}
 8005754:	4618      	mov	r0, r3
 8005756:	46bd      	mov	sp, r7
 8005758:	bc80      	pop	{r7}
 800575a:	4770      	bx	lr

0800575c <LL_RCC_LSI_Enable>:
{
 800575c:	b480      	push	{r7}
 800575e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8005760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005764:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005768:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800576c:	f043 0301 	orr.w	r3, r3, #1
 8005770:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005774:	bf00      	nop
 8005776:	46bd      	mov	sp, r7
 8005778:	bc80      	pop	{r7}
 800577a:	4770      	bx	lr

0800577c <LL_RCC_LSI_Disable>:
{
 800577c:	b480      	push	{r7}
 800577e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005780:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005784:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005788:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800578c:	f023 0301 	bic.w	r3, r3, #1
 8005790:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005794:	bf00      	nop
 8005796:	46bd      	mov	sp, r7
 8005798:	bc80      	pop	{r7}
 800579a:	4770      	bx	lr

0800579c <LL_RCC_LSI_IsReady>:
{
 800579c:	b480      	push	{r7}
 800579e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80057a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057a8:	f003 0302 	and.w	r3, r3, #2
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d101      	bne.n	80057b4 <LL_RCC_LSI_IsReady+0x18>
 80057b0:	2301      	movs	r3, #1
 80057b2:	e000      	b.n	80057b6 <LL_RCC_LSI_IsReady+0x1a>
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bc80      	pop	{r7}
 80057bc:	4770      	bx	lr

080057be <LL_RCC_MSI_Enable>:
{
 80057be:	b480      	push	{r7}
 80057c0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80057c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057cc:	f043 0301 	orr.w	r3, r3, #1
 80057d0:	6013      	str	r3, [r2, #0]
}
 80057d2:	bf00      	nop
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bc80      	pop	{r7}
 80057d8:	4770      	bx	lr

080057da <LL_RCC_MSI_Disable>:
{
 80057da:	b480      	push	{r7}
 80057dc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80057de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057e8:	f023 0301 	bic.w	r3, r3, #1
 80057ec:	6013      	str	r3, [r2, #0]
}
 80057ee:	bf00      	nop
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bc80      	pop	{r7}
 80057f4:	4770      	bx	lr

080057f6 <LL_RCC_MSI_IsReady>:
{
 80057f6:	b480      	push	{r7}
 80057f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80057fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0302 	and.w	r3, r3, #2
 8005804:	2b02      	cmp	r3, #2
 8005806:	d101      	bne.n	800580c <LL_RCC_MSI_IsReady+0x16>
 8005808:	2301      	movs	r3, #1
 800580a:	e000      	b.n	800580e <LL_RCC_MSI_IsReady+0x18>
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	46bd      	mov	sp, r7
 8005812:	bc80      	pop	{r7}
 8005814:	4770      	bx	lr

08005816 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8005816:	b480      	push	{r7}
 8005818:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800581a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 0308 	and.w	r3, r3, #8
 8005824:	2b08      	cmp	r3, #8
 8005826:	d101      	bne.n	800582c <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8005828:	2301      	movs	r3, #1
 800582a:	e000      	b.n	800582e <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 800582c:	2300      	movs	r3, #0
}
 800582e:	4618      	mov	r0, r3
 8005830:	46bd      	mov	sp, r7
 8005832:	bc80      	pop	{r7}
 8005834:	4770      	bx	lr

08005836 <LL_RCC_MSI_GetRange>:
{
 8005836:	b480      	push	{r7}
 8005838:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800583a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005844:	4618      	mov	r0, r3
 8005846:	46bd      	mov	sp, r7
 8005848:	bc80      	pop	{r7}
 800584a:	4770      	bx	lr

0800584c <LL_RCC_MSI_GetRangeAfterStandby>:
{
 800584c:	b480      	push	{r7}
 800584e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005850:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005854:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005858:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 800585c:	4618      	mov	r0, r3
 800585e:	46bd      	mov	sp, r7
 8005860:	bc80      	pop	{r7}
 8005862:	4770      	bx	lr

08005864 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800586c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	021b      	lsls	r3, r3, #8
 800587a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800587e:	4313      	orrs	r3, r2
 8005880:	604b      	str	r3, [r1, #4]
}
 8005882:	bf00      	nop
 8005884:	370c      	adds	r7, #12
 8005886:	46bd      	mov	sp, r7
 8005888:	bc80      	pop	{r7}
 800588a:	4770      	bx	lr

0800588c <LL_RCC_SetSysClkSource>:
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005894:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	f023 0203 	bic.w	r2, r3, #3
 800589e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	608b      	str	r3, [r1, #8]
}
 80058a8:	bf00      	nop
 80058aa:	370c      	adds	r7, #12
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bc80      	pop	{r7}
 80058b0:	4770      	bx	lr

080058b2 <LL_RCC_GetSysClkSource>:
{
 80058b2:	b480      	push	{r7}
 80058b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80058b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	f003 030c 	and.w	r3, r3, #12
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bc80      	pop	{r7}
 80058c6:	4770      	bx	lr

080058c8 <LL_RCC_SetAHBPrescaler>:
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80058d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	608b      	str	r3, [r1, #8]
}
 80058e4:	bf00      	nop
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bc80      	pop	{r7}
 80058ec:	4770      	bx	lr

080058ee <LL_RCC_SetAHB3Prescaler>:
{
 80058ee:	b480      	push	{r7}
 80058f0:	b083      	sub	sp, #12
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80058f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058fa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80058fe:	f023 020f 	bic.w	r2, r3, #15
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	091b      	lsrs	r3, r3, #4
 8005906:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800590a:	4313      	orrs	r3, r2
 800590c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005910:	bf00      	nop
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	bc80      	pop	{r7}
 8005918:	4770      	bx	lr

0800591a <LL_RCC_SetAPB1Prescaler>:
{
 800591a:	b480      	push	{r7}
 800591c:	b083      	sub	sp, #12
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005922:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800592c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4313      	orrs	r3, r2
 8005934:	608b      	str	r3, [r1, #8]
}
 8005936:	bf00      	nop
 8005938:	370c      	adds	r7, #12
 800593a:	46bd      	mov	sp, r7
 800593c:	bc80      	pop	{r7}
 800593e:	4770      	bx	lr

08005940 <LL_RCC_SetAPB2Prescaler>:
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005948:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005952:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4313      	orrs	r3, r2
 800595a:	608b      	str	r3, [r1, #8]
}
 800595c:	bf00      	nop
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	bc80      	pop	{r7}
 8005964:	4770      	bx	lr

08005966 <LL_RCC_GetAHBPrescaler>:
{
 8005966:	b480      	push	{r7}
 8005968:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800596a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005974:	4618      	mov	r0, r3
 8005976:	46bd      	mov	sp, r7
 8005978:	bc80      	pop	{r7}
 800597a:	4770      	bx	lr

0800597c <LL_RCC_GetAHB3Prescaler>:
{
 800597c:	b480      	push	{r7}
 800597e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005980:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005984:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005988:	011b      	lsls	r3, r3, #4
 800598a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800598e:	4618      	mov	r0, r3
 8005990:	46bd      	mov	sp, r7
 8005992:	bc80      	pop	{r7}
 8005994:	4770      	bx	lr

08005996 <LL_RCC_GetAPB1Prescaler>:
{
 8005996:	b480      	push	{r7}
 8005998:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800599a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bc80      	pop	{r7}
 80059aa:	4770      	bx	lr

080059ac <LL_RCC_GetAPB2Prescaler>:
{
 80059ac:	b480      	push	{r7}
 80059ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80059b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	46bd      	mov	sp, r7
 80059be:	bc80      	pop	{r7}
 80059c0:	4770      	bx	lr

080059c2 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80059c2:	b480      	push	{r7}
 80059c4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80059c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059d4:	6013      	str	r3, [r2, #0]
}
 80059d6:	bf00      	nop
 80059d8:	46bd      	mov	sp, r7
 80059da:	bc80      	pop	{r7}
 80059dc:	4770      	bx	lr

080059de <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80059de:	b480      	push	{r7}
 80059e0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80059e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059f0:	6013      	str	r3, [r2, #0]
}
 80059f2:	bf00      	nop
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bc80      	pop	{r7}
 80059f8:	4770      	bx	lr

080059fa <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80059fa:	b480      	push	{r7}
 80059fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80059fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a0c:	d101      	bne.n	8005a12 <LL_RCC_PLL_IsReady+0x18>
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e000      	b.n	8005a14 <LL_RCC_PLL_IsReady+0x1a>
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bc80      	pop	{r7}
 8005a1a:	4770      	bx	lr

08005a1c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005a20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	0a1b      	lsrs	r3, r3, #8
 8005a28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bc80      	pop	{r7}
 8005a32:	4770      	bx	lr

08005a34 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005a34:	b480      	push	{r7}
 8005a36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005a38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bc80      	pop	{r7}
 8005a48:	4770      	bx	lr

08005a4a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005a4a:	b480      	push	{r7}
 8005a4c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005a4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bc80      	pop	{r7}
 8005a5e:	4770      	bx	lr

08005a60 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005a60:	b480      	push	{r7}
 8005a62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005a64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	f003 0303 	and.w	r3, r3, #3
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bc80      	pop	{r7}
 8005a74:	4770      	bx	lr

08005a76 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005a76:	b480      	push	{r7}
 8005a78:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005a7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a88:	d101      	bne.n	8005a8e <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e000      	b.n	8005a90 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bc80      	pop	{r7}
 8005a96:	4770      	bx	lr

08005a98 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005a9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aa0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005aa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aac:	d101      	bne.n	8005ab2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e000      	b.n	8005ab4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005ab2:	2300      	movs	r3, #0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bc80      	pop	{r7}
 8005aba:	4770      	bx	lr

08005abc <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005abc:	b480      	push	{r7}
 8005abe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005ac0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ace:	d101      	bne.n	8005ad4 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e000      	b.n	8005ad6 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bc80      	pop	{r7}
 8005adc:	4770      	bx	lr

08005ade <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8005ade:	b480      	push	{r7}
 8005ae0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005ae2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005aec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005af0:	d101      	bne.n	8005af6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005af2:	2301      	movs	r3, #1
 8005af4:	e000      	b.n	8005af8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005af6:	2300      	movs	r3, #0
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bc80      	pop	{r7}
 8005afe:	4770      	bx	lr

08005b00 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b088      	sub	sp, #32
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d101      	bne.n	8005b12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e36f      	b.n	80061f2 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b12:	f7ff fece 	bl	80058b2 <LL_RCC_GetSysClkSource>
 8005b16:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b18:	f7ff ffa2 	bl	8005a60 <LL_RCC_PLL_GetMainSource>
 8005b1c:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 0320 	and.w	r3, r3, #32
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	f000 80c4 	beq.w	8005cb4 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d005      	beq.n	8005b3e <HAL_RCC_OscConfig+0x3e>
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	2b0c      	cmp	r3, #12
 8005b36:	d176      	bne.n	8005c26 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d173      	bne.n	8005c26 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a1b      	ldr	r3, [r3, #32]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d101      	bne.n	8005b4a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e353      	b.n	80061f2 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 0308 	and.w	r3, r3, #8
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d005      	beq.n	8005b68 <HAL_RCC_OscConfig+0x68>
 8005b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b66:	e006      	b.n	8005b76 <HAL_RCC_OscConfig+0x76>
 8005b68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b70:	091b      	lsrs	r3, r3, #4
 8005b72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d222      	bcs.n	8005bc0 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f000 fd3c 	bl	80065fc <RCC_SetFlashLatencyFromMSIRange>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d001      	beq.n	8005b8e <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e331      	b.n	80061f2 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b98:	f043 0308 	orr.w	r3, r3, #8
 8005b9c:	6013      	str	r3, [r2, #0]
 8005b9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f7ff fe53 	bl	8005864 <LL_RCC_MSI_SetCalibTrimming>
 8005bbe:	e021      	b.n	8005c04 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bca:	f043 0308 	orr.w	r3, r3, #8
 8005bce:	6013      	str	r3, [r2, #0]
 8005bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005be2:	4313      	orrs	r3, r2
 8005be4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bea:	4618      	mov	r0, r3
 8005bec:	f7ff fe3a 	bl	8005864 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f000 fd01 	bl	80065fc <RCC_SetFlashLatencyFromMSIRange>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d001      	beq.n	8005c04 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e2f6      	b.n	80061f2 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005c04:	f000 fcc2 	bl	800658c <HAL_RCC_GetHCLKFreq>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	4aa7      	ldr	r2, [pc, #668]	; (8005ea8 <HAL_RCC_OscConfig+0x3a8>)
 8005c0c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8005c0e:	4ba7      	ldr	r3, [pc, #668]	; (8005eac <HAL_RCC_OscConfig+0x3ac>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4618      	mov	r0, r3
 8005c14:	f7fc fad8 	bl	80021c8 <HAL_InitTick>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8005c1c:	7cfb      	ldrb	r3, [r7, #19]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d047      	beq.n	8005cb2 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8005c22:	7cfb      	ldrb	r3, [r7, #19]
 8005c24:	e2e5      	b.n	80061f2 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a1b      	ldr	r3, [r3, #32]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d02c      	beq.n	8005c88 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005c2e:	f7ff fdc6 	bl	80057be <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005c32:	f7fc fad3 	bl	80021dc <HAL_GetTick>
 8005c36:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005c38:	e008      	b.n	8005c4c <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005c3a:	f7fc facf 	bl	80021dc <HAL_GetTick>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	1ad3      	subs	r3, r2, r3
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	d901      	bls.n	8005c4c <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e2d2      	b.n	80061f2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005c4c:	f7ff fdd3 	bl	80057f6 <LL_RCC_MSI_IsReady>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d0f1      	beq.n	8005c3a <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005c56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c60:	f043 0308 	orr.w	r3, r3, #8
 8005c64:	6013      	str	r3, [r2, #0]
 8005c66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c80:	4618      	mov	r0, r3
 8005c82:	f7ff fdef 	bl	8005864 <LL_RCC_MSI_SetCalibTrimming>
 8005c86:	e015      	b.n	8005cb4 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005c88:	f7ff fda7 	bl	80057da <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005c8c:	f7fc faa6 	bl	80021dc <HAL_GetTick>
 8005c90:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005c92:	e008      	b.n	8005ca6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005c94:	f7fc faa2 	bl	80021dc <HAL_GetTick>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	2b02      	cmp	r3, #2
 8005ca0:	d901      	bls.n	8005ca6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	e2a5      	b.n	80061f2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005ca6:	f7ff fda6 	bl	80057f6 <LL_RCC_MSI_IsReady>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d1f1      	bne.n	8005c94 <HAL_RCC_OscConfig+0x194>
 8005cb0:	e000      	b.n	8005cb4 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005cb2:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0301 	and.w	r3, r3, #1
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d058      	beq.n	8005d72 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	2b08      	cmp	r3, #8
 8005cc4:	d005      	beq.n	8005cd2 <HAL_RCC_OscConfig+0x1d2>
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	2b0c      	cmp	r3, #12
 8005cca:	d108      	bne.n	8005cde <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	2b03      	cmp	r3, #3
 8005cd0:	d105      	bne.n	8005cde <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d14b      	bne.n	8005d72 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e289      	b.n	80061f2 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8005cde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cfc:	d102      	bne.n	8005d04 <HAL_RCC_OscConfig+0x204>
 8005cfe:	f7ff fcae 	bl	800565e <LL_RCC_HSE_Enable>
 8005d02:	e00d      	b.n	8005d20 <HAL_RCC_OscConfig+0x220>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8005d0c:	d104      	bne.n	8005d18 <HAL_RCC_OscConfig+0x218>
 8005d0e:	f7ff fc79 	bl	8005604 <LL_RCC_HSE_EnableTcxo>
 8005d12:	f7ff fca4 	bl	800565e <LL_RCC_HSE_Enable>
 8005d16:	e003      	b.n	8005d20 <HAL_RCC_OscConfig+0x220>
 8005d18:	f7ff fcaf 	bl	800567a <LL_RCC_HSE_Disable>
 8005d1c:	f7ff fc80 	bl	8005620 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d012      	beq.n	8005d4e <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d28:	f7fc fa58 	bl	80021dc <HAL_GetTick>
 8005d2c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005d2e:	e008      	b.n	8005d42 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d30:	f7fc fa54 	bl	80021dc <HAL_GetTick>
 8005d34:	4602      	mov	r2, r0
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	2b64      	cmp	r3, #100	; 0x64
 8005d3c:	d901      	bls.n	8005d42 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e257      	b.n	80061f2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005d42:	f7ff fca8 	bl	8005696 <LL_RCC_HSE_IsReady>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d0f1      	beq.n	8005d30 <HAL_RCC_OscConfig+0x230>
 8005d4c:	e011      	b.n	8005d72 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d4e:	f7fc fa45 	bl	80021dc <HAL_GetTick>
 8005d52:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005d54:	e008      	b.n	8005d68 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d56:	f7fc fa41 	bl	80021dc <HAL_GetTick>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	1ad3      	subs	r3, r2, r3
 8005d60:	2b64      	cmp	r3, #100	; 0x64
 8005d62:	d901      	bls.n	8005d68 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8005d64:	2303      	movs	r3, #3
 8005d66:	e244      	b.n	80061f2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005d68:	f7ff fc95 	bl	8005696 <LL_RCC_HSE_IsReady>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d1f1      	bne.n	8005d56 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 0302 	and.w	r3, r3, #2
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d046      	beq.n	8005e0c <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	2b04      	cmp	r3, #4
 8005d82:	d005      	beq.n	8005d90 <HAL_RCC_OscConfig+0x290>
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	2b0c      	cmp	r3, #12
 8005d88:	d10e      	bne.n	8005da8 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	d10b      	bne.n	8005da8 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d101      	bne.n	8005d9c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e22a      	b.n	80061f2 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	695b      	ldr	r3, [r3, #20]
 8005da0:	4618      	mov	r0, r3
 8005da2:	f7ff fcb6 	bl	8005712 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005da6:	e031      	b.n	8005e0c <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	691b      	ldr	r3, [r3, #16]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d019      	beq.n	8005de4 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005db0:	f7ff fc82 	bl	80056b8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005db4:	f7fc fa12 	bl	80021dc <HAL_GetTick>
 8005db8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005dba:	e008      	b.n	8005dce <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005dbc:	f7fc fa0e 	bl	80021dc <HAL_GetTick>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d901      	bls.n	8005dce <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e211      	b.n	80061f2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005dce:	f7ff fc8f 	bl	80056f0 <LL_RCC_HSI_IsReady>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d0f1      	beq.n	8005dbc <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	695b      	ldr	r3, [r3, #20]
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f7ff fc98 	bl	8005712 <LL_RCC_HSI_SetCalibTrimming>
 8005de2:	e013      	b.n	8005e0c <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005de4:	f7ff fc76 	bl	80056d4 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005de8:	f7fc f9f8 	bl	80021dc <HAL_GetTick>
 8005dec:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005dee:	e008      	b.n	8005e02 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005df0:	f7fc f9f4 	bl	80021dc <HAL_GetTick>
 8005df4:	4602      	mov	r2, r0
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d901      	bls.n	8005e02 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e1f7      	b.n	80061f2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005e02:	f7ff fc75 	bl	80056f0 <LL_RCC_HSI_IsReady>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d1f1      	bne.n	8005df0 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0308 	and.w	r3, r3, #8
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d06e      	beq.n	8005ef6 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	699b      	ldr	r3, [r3, #24]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d056      	beq.n	8005ece <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8005e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e28:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	69da      	ldr	r2, [r3, #28]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f003 0310 	and.w	r3, r3, #16
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d031      	beq.n	8005e9c <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f003 0302 	and.w	r3, r3, #2
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d006      	beq.n	8005e50 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d101      	bne.n	8005e50 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e1d0      	b.n	80061f2 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f003 0301 	and.w	r3, r3, #1
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d013      	beq.n	8005e82 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8005e5a:	f7ff fc8f 	bl	800577c <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005e5e:	f7fc f9bd 	bl	80021dc <HAL_GetTick>
 8005e62:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8005e64:	e008      	b.n	8005e78 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e66:	f7fc f9b9 	bl	80021dc <HAL_GetTick>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	1ad3      	subs	r3, r2, r3
 8005e70:	2b11      	cmp	r3, #17
 8005e72:	d901      	bls.n	8005e78 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8005e74:	2303      	movs	r3, #3
 8005e76:	e1bc      	b.n	80061f2 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8005e78:	f7ff fc90 	bl	800579c <LL_RCC_LSI_IsReady>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d1f1      	bne.n	8005e66 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8005e82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e8a:	f023 0210 	bic.w	r2, r3, #16
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	69db      	ldr	r3, [r3, #28]
 8005e92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e96:	4313      	orrs	r3, r2
 8005e98:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e9c:	f7ff fc5e 	bl	800575c <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ea0:	f7fc f99c 	bl	80021dc <HAL_GetTick>
 8005ea4:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8005ea6:	e00c      	b.n	8005ec2 <HAL_RCC_OscConfig+0x3c2>
 8005ea8:	20000000 	.word	0x20000000
 8005eac:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005eb0:	f7fc f994 	bl	80021dc <HAL_GetTick>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	2b11      	cmp	r3, #17
 8005ebc:	d901      	bls.n	8005ec2 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	e197      	b.n	80061f2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8005ec2:	f7ff fc6b 	bl	800579c <LL_RCC_LSI_IsReady>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d0f1      	beq.n	8005eb0 <HAL_RCC_OscConfig+0x3b0>
 8005ecc:	e013      	b.n	8005ef6 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ece:	f7ff fc55 	bl	800577c <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ed2:	f7fc f983 	bl	80021dc <HAL_GetTick>
 8005ed6:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8005ed8:	e008      	b.n	8005eec <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005eda:	f7fc f97f 	bl	80021dc <HAL_GetTick>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	1ad3      	subs	r3, r2, r3
 8005ee4:	2b11      	cmp	r3, #17
 8005ee6:	d901      	bls.n	8005eec <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8005ee8:	2303      	movs	r3, #3
 8005eea:	e182      	b.n	80061f2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8005eec:	f7ff fc56 	bl	800579c <LL_RCC_LSI_IsReady>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d1f1      	bne.n	8005eda <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 0304 	and.w	r3, r3, #4
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	f000 80d8 	beq.w	80060b4 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005f04:	f7ff fb6c 	bl	80055e0 <LL_PWR_IsEnabledBkUpAccess>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d113      	bne.n	8005f36 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005f0e:	f7ff faab 	bl	8005468 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f12:	f7fc f963 	bl	80021dc <HAL_GetTick>
 8005f16:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005f18:	e008      	b.n	8005f2c <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f1a:	f7fc f95f 	bl	80021dc <HAL_GetTick>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	1ad3      	subs	r3, r2, r3
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d901      	bls.n	8005f2c <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8005f28:	2303      	movs	r3, #3
 8005f2a:	e162      	b.n	80061f2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005f2c:	f7ff fb58 	bl	80055e0 <LL_PWR_IsEnabledBkUpAccess>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d0f1      	beq.n	8005f1a <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d07b      	beq.n	8006036 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	2b85      	cmp	r3, #133	; 0x85
 8005f44:	d003      	beq.n	8005f4e <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	2b05      	cmp	r3, #5
 8005f4c:	d109      	bne.n	8005f62 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005f4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f5a:	f043 0304 	orr.w	r3, r3, #4
 8005f5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f62:	f7fc f93b 	bl	80021dc <HAL_GetTick>
 8005f66:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005f68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f74:	f043 0301 	orr.w	r3, r3, #1
 8005f78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005f7c:	e00a      	b.n	8005f94 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f7e:	f7fc f92d 	bl	80021dc <HAL_GetTick>
 8005f82:	4602      	mov	r2, r0
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	1ad3      	subs	r3, r2, r3
 8005f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d901      	bls.n	8005f94 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8005f90:	2303      	movs	r3, #3
 8005f92:	e12e      	b.n	80061f2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005f94:	f7ff fbd1 	bl	800573a <LL_RCC_LSE_IsReady>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d0ef      	beq.n	8005f7e <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	2b81      	cmp	r3, #129	; 0x81
 8005fa4:	d003      	beq.n	8005fae <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	2b85      	cmp	r3, #133	; 0x85
 8005fac:	d121      	bne.n	8005ff2 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fae:	f7fc f915 	bl	80021dc <HAL_GetTick>
 8005fb2:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005fb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005fc8:	e00a      	b.n	8005fe0 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fca:	f7fc f907 	bl	80021dc <HAL_GetTick>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	1ad3      	subs	r3, r2, r3
 8005fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d901      	bls.n	8005fe0 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8005fdc:	2303      	movs	r3, #3
 8005fde:	e108      	b.n	80061f2 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fe8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d0ec      	beq.n	8005fca <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005ff0:	e060      	b.n	80060b4 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ff2:	f7fc f8f3 	bl	80021dc <HAL_GetTick>
 8005ff6:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005ff8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006000:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006004:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006008:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800600c:	e00a      	b.n	8006024 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800600e:	f7fc f8e5 	bl	80021dc <HAL_GetTick>
 8006012:	4602      	mov	r2, r0
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	1ad3      	subs	r3, r2, r3
 8006018:	f241 3288 	movw	r2, #5000	; 0x1388
 800601c:	4293      	cmp	r3, r2
 800601e:	d901      	bls.n	8006024 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8006020:	2303      	movs	r3, #3
 8006022:	e0e6      	b.n	80061f2 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006024:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800602c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1ec      	bne.n	800600e <HAL_RCC_OscConfig+0x50e>
 8006034:	e03e      	b.n	80060b4 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006036:	f7fc f8d1 	bl	80021dc <HAL_GetTick>
 800603a:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800603c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006044:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006048:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800604c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006050:	e00a      	b.n	8006068 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006052:	f7fc f8c3 	bl	80021dc <HAL_GetTick>
 8006056:	4602      	mov	r2, r0
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	1ad3      	subs	r3, r2, r3
 800605c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006060:	4293      	cmp	r3, r2
 8006062:	d901      	bls.n	8006068 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8006064:	2303      	movs	r3, #3
 8006066:	e0c4      	b.n	80061f2 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006068:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800606c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006070:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006074:	2b00      	cmp	r3, #0
 8006076:	d1ec      	bne.n	8006052 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006078:	f7fc f8b0 	bl	80021dc <HAL_GetTick>
 800607c:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800607e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006086:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800608a:	f023 0301 	bic.w	r3, r3, #1
 800608e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8006092:	e00a      	b.n	80060aa <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006094:	f7fc f8a2 	bl	80021dc <HAL_GetTick>
 8006098:	4602      	mov	r2, r0
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	1ad3      	subs	r3, r2, r3
 800609e:	f241 3288 	movw	r2, #5000	; 0x1388
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d901      	bls.n	80060aa <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	e0a3      	b.n	80061f2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 80060aa:	f7ff fb46 	bl	800573a <LL_RCC_LSE_IsReady>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d1ef      	bne.n	8006094 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	f000 8099 	beq.w	80061f0 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	2b0c      	cmp	r3, #12
 80060c2:	d06c      	beq.n	800619e <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	d14b      	bne.n	8006164 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060cc:	f7ff fc87 	bl	80059de <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060d0:	f7fc f884 	bl	80021dc <HAL_GetTick>
 80060d4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80060d6:	e008      	b.n	80060ea <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060d8:	f7fc f880 	bl	80021dc <HAL_GetTick>
 80060dc:	4602      	mov	r2, r0
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	2b0a      	cmp	r3, #10
 80060e4:	d901      	bls.n	80060ea <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	e083      	b.n	80061f2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80060ea:	f7ff fc86 	bl	80059fa <LL_RCC_PLL_IsReady>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d1f1      	bne.n	80060d8 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80060f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060f8:	68da      	ldr	r2, [r3, #12]
 80060fa:	4b40      	ldr	r3, [pc, #256]	; (80061fc <HAL_RCC_OscConfig+0x6fc>)
 80060fc:	4013      	ands	r3, r2
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006106:	4311      	orrs	r1, r2
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800610c:	0212      	lsls	r2, r2, #8
 800610e:	4311      	orrs	r1, r2
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006114:	4311      	orrs	r1, r2
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800611a:	4311      	orrs	r1, r2
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006120:	430a      	orrs	r2, r1
 8006122:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006126:	4313      	orrs	r3, r2
 8006128:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800612a:	f7ff fc4a 	bl	80059c2 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800612e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800613c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800613e:	f7fc f84d 	bl	80021dc <HAL_GetTick>
 8006142:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8006144:	e008      	b.n	8006158 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006146:	f7fc f849 	bl	80021dc <HAL_GetTick>
 800614a:	4602      	mov	r2, r0
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	2b0a      	cmp	r3, #10
 8006152:	d901      	bls.n	8006158 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8006154:	2303      	movs	r3, #3
 8006156:	e04c      	b.n	80061f2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8006158:	f7ff fc4f 	bl	80059fa <LL_RCC_PLL_IsReady>
 800615c:	4603      	mov	r3, r0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d0f1      	beq.n	8006146 <HAL_RCC_OscConfig+0x646>
 8006162:	e045      	b.n	80061f0 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006164:	f7ff fc3b 	bl	80059de <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006168:	f7fc f838 	bl	80021dc <HAL_GetTick>
 800616c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800616e:	e008      	b.n	8006182 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006170:	f7fc f834 	bl	80021dc <HAL_GetTick>
 8006174:	4602      	mov	r2, r0
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	2b0a      	cmp	r3, #10
 800617c:	d901      	bls.n	8006182 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800617e:	2303      	movs	r3, #3
 8006180:	e037      	b.n	80061f2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8006182:	f7ff fc3a 	bl	80059fa <LL_RCC_PLL_IsReady>
 8006186:	4603      	mov	r3, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	d1f1      	bne.n	8006170 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800618c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006190:	68da      	ldr	r2, [r3, #12]
 8006192:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006196:	4b1a      	ldr	r3, [pc, #104]	; (8006200 <HAL_RCC_OscConfig+0x700>)
 8006198:	4013      	ands	r3, r2
 800619a:	60cb      	str	r3, [r1, #12]
 800619c:	e028      	b.n	80061f0 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d101      	bne.n	80061aa <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	e023      	b.n	80061f2 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80061aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	f003 0203 	and.w	r2, r3, #3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061bc:	429a      	cmp	r2, r3
 80061be:	d115      	bne.n	80061ec <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d10e      	bne.n	80061ec <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d8:	021b      	lsls	r3, r3, #8
 80061da:	429a      	cmp	r2, r3
 80061dc:	d106      	bne.n	80061ec <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d001      	beq.n	80061f0 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 80061ec:	2301      	movs	r3, #1
 80061ee:	e000      	b.n	80061f2 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3720      	adds	r7, #32
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	11c1808c 	.word	0x11c1808c
 8006200:	eefefffc 	.word	0xeefefffc

08006204 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d101      	bne.n	8006218 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	e10f      	b.n	8006438 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006218:	4b89      	ldr	r3, [pc, #548]	; (8006440 <HAL_RCC_ClockConfig+0x23c>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 0307 	and.w	r3, r3, #7
 8006220:	683a      	ldr	r2, [r7, #0]
 8006222:	429a      	cmp	r2, r3
 8006224:	d91b      	bls.n	800625e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006226:	4b86      	ldr	r3, [pc, #536]	; (8006440 <HAL_RCC_ClockConfig+0x23c>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f023 0207 	bic.w	r2, r3, #7
 800622e:	4984      	ldr	r1, [pc, #528]	; (8006440 <HAL_RCC_ClockConfig+0x23c>)
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	4313      	orrs	r3, r2
 8006234:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006236:	f7fb ffd1 	bl	80021dc <HAL_GetTick>
 800623a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800623c:	e008      	b.n	8006250 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800623e:	f7fb ffcd 	bl	80021dc <HAL_GetTick>
 8006242:	4602      	mov	r2, r0
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	1ad3      	subs	r3, r2, r3
 8006248:	2b02      	cmp	r3, #2
 800624a:	d901      	bls.n	8006250 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800624c:	2303      	movs	r3, #3
 800624e:	e0f3      	b.n	8006438 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006250:	4b7b      	ldr	r3, [pc, #492]	; (8006440 <HAL_RCC_ClockConfig+0x23c>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 0307 	and.w	r3, r3, #7
 8006258:	683a      	ldr	r2, [r7, #0]
 800625a:	429a      	cmp	r2, r3
 800625c:	d1ef      	bne.n	800623e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 0302 	and.w	r3, r3, #2
 8006266:	2b00      	cmp	r3, #0
 8006268:	d016      	beq.n	8006298 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	4618      	mov	r0, r3
 8006270:	f7ff fb2a 	bl	80058c8 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006274:	f7fb ffb2 	bl	80021dc <HAL_GetTick>
 8006278:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800627a:	e008      	b.n	800628e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800627c:	f7fb ffae 	bl	80021dc <HAL_GetTick>
 8006280:	4602      	mov	r2, r0
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	2b02      	cmp	r3, #2
 8006288:	d901      	bls.n	800628e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	e0d4      	b.n	8006438 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800628e:	f7ff fbf2 	bl	8005a76 <LL_RCC_IsActiveFlag_HPRE>
 8006292:	4603      	mov	r3, r0
 8006294:	2b00      	cmp	r3, #0
 8006296:	d0f1      	beq.n	800627c <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d016      	beq.n	80062d2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	695b      	ldr	r3, [r3, #20]
 80062a8:	4618      	mov	r0, r3
 80062aa:	f7ff fb20 	bl	80058ee <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80062ae:	f7fb ff95 	bl	80021dc <HAL_GetTick>
 80062b2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80062b4:	e008      	b.n	80062c8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80062b6:	f7fb ff91 	bl	80021dc <HAL_GetTick>
 80062ba:	4602      	mov	r2, r0
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	1ad3      	subs	r3, r2, r3
 80062c0:	2b02      	cmp	r3, #2
 80062c2:	d901      	bls.n	80062c8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80062c4:	2303      	movs	r3, #3
 80062c6:	e0b7      	b.n	8006438 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80062c8:	f7ff fbe6 	bl	8005a98 <LL_RCC_IsActiveFlag_SHDHPRE>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d0f1      	beq.n	80062b6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 0304 	and.w	r3, r3, #4
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d016      	beq.n	800630c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	4618      	mov	r0, r3
 80062e4:	f7ff fb19 	bl	800591a <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80062e8:	f7fb ff78 	bl	80021dc <HAL_GetTick>
 80062ec:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80062ee:	e008      	b.n	8006302 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80062f0:	f7fb ff74 	bl	80021dc <HAL_GetTick>
 80062f4:	4602      	mov	r2, r0
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	1ad3      	subs	r3, r2, r3
 80062fa:	2b02      	cmp	r3, #2
 80062fc:	d901      	bls.n	8006302 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80062fe:	2303      	movs	r3, #3
 8006300:	e09a      	b.n	8006438 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006302:	f7ff fbdb 	bl	8005abc <LL_RCC_IsActiveFlag_PPRE1>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d0f1      	beq.n	80062f0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 0308 	and.w	r3, r3, #8
 8006314:	2b00      	cmp	r3, #0
 8006316:	d017      	beq.n	8006348 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	00db      	lsls	r3, r3, #3
 800631e:	4618      	mov	r0, r3
 8006320:	f7ff fb0e 	bl	8005940 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006324:	f7fb ff5a 	bl	80021dc <HAL_GetTick>
 8006328:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800632a:	e008      	b.n	800633e <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800632c:	f7fb ff56 	bl	80021dc <HAL_GetTick>
 8006330:	4602      	mov	r2, r0
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	2b02      	cmp	r3, #2
 8006338:	d901      	bls.n	800633e <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 800633a:	2303      	movs	r3, #3
 800633c:	e07c      	b.n	8006438 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800633e:	f7ff fbce 	bl	8005ade <LL_RCC_IsActiveFlag_PPRE2>
 8006342:	4603      	mov	r3, r0
 8006344:	2b00      	cmp	r3, #0
 8006346:	d0f1      	beq.n	800632c <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 0301 	and.w	r3, r3, #1
 8006350:	2b00      	cmp	r3, #0
 8006352:	d043      	beq.n	80063dc <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	2b02      	cmp	r3, #2
 800635a:	d106      	bne.n	800636a <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800635c:	f7ff f99b 	bl	8005696 <LL_RCC_HSE_IsReady>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d11e      	bne.n	80063a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e066      	b.n	8006438 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	2b03      	cmp	r3, #3
 8006370:	d106      	bne.n	8006380 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006372:	f7ff fb42 	bl	80059fa <LL_RCC_PLL_IsReady>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d113      	bne.n	80063a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	e05b      	b.n	8006438 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d106      	bne.n	8006396 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006388:	f7ff fa35 	bl	80057f6 <LL_RCC_MSI_IsReady>
 800638c:	4603      	mov	r3, r0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d108      	bne.n	80063a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e050      	b.n	8006438 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006396:	f7ff f9ab 	bl	80056f0 <LL_RCC_HSI_IsReady>
 800639a:	4603      	mov	r3, r0
 800639c:	2b00      	cmp	r3, #0
 800639e:	d101      	bne.n	80063a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	e049      	b.n	8006438 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	4618      	mov	r0, r3
 80063aa:	f7ff fa6f 	bl	800588c <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80063ae:	f7fb ff15 	bl	80021dc <HAL_GetTick>
 80063b2:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063b4:	e00a      	b.n	80063cc <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063b6:	f7fb ff11 	bl	80021dc <HAL_GetTick>
 80063ba:	4602      	mov	r2, r0
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	1ad3      	subs	r3, r2, r3
 80063c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d901      	bls.n	80063cc <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 80063c8:	2303      	movs	r3, #3
 80063ca:	e035      	b.n	8006438 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063cc:	f7ff fa71 	bl	80058b2 <LL_RCC_GetSysClkSource>
 80063d0:	4602      	mov	r2, r0
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	429a      	cmp	r2, r3
 80063da:	d1ec      	bne.n	80063b6 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80063dc:	4b18      	ldr	r3, [pc, #96]	; (8006440 <HAL_RCC_ClockConfig+0x23c>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 0307 	and.w	r3, r3, #7
 80063e4:	683a      	ldr	r2, [r7, #0]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d21b      	bcs.n	8006422 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063ea:	4b15      	ldr	r3, [pc, #84]	; (8006440 <HAL_RCC_ClockConfig+0x23c>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f023 0207 	bic.w	r2, r3, #7
 80063f2:	4913      	ldr	r1, [pc, #76]	; (8006440 <HAL_RCC_ClockConfig+0x23c>)
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80063fa:	f7fb feef 	bl	80021dc <HAL_GetTick>
 80063fe:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006400:	e008      	b.n	8006414 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006402:	f7fb feeb 	bl	80021dc <HAL_GetTick>
 8006406:	4602      	mov	r2, r0
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	1ad3      	subs	r3, r2, r3
 800640c:	2b02      	cmp	r3, #2
 800640e:	d901      	bls.n	8006414 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8006410:	2303      	movs	r3, #3
 8006412:	e011      	b.n	8006438 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006414:	4b0a      	ldr	r3, [pc, #40]	; (8006440 <HAL_RCC_ClockConfig+0x23c>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 0307 	and.w	r3, r3, #7
 800641c:	683a      	ldr	r2, [r7, #0]
 800641e:	429a      	cmp	r2, r3
 8006420:	d1ef      	bne.n	8006402 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006422:	f000 f8b3 	bl	800658c <HAL_RCC_GetHCLKFreq>
 8006426:	4603      	mov	r3, r0
 8006428:	4a06      	ldr	r2, [pc, #24]	; (8006444 <HAL_RCC_ClockConfig+0x240>)
 800642a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 800642c:	4b06      	ldr	r3, [pc, #24]	; (8006448 <HAL_RCC_ClockConfig+0x244>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4618      	mov	r0, r3
 8006432:	f7fb fec9 	bl	80021c8 <HAL_InitTick>
 8006436:	4603      	mov	r3, r0
}
 8006438:	4618      	mov	r0, r3
 800643a:	3710      	adds	r7, #16
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}
 8006440:	58004000 	.word	0x58004000
 8006444:	20000000 	.word	0x20000000
 8006448:	20000004 	.word	0x20000004

0800644c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800644c:	b590      	push	{r4, r7, lr}
 800644e:	b087      	sub	sp, #28
 8006450:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8006452:	2300      	movs	r3, #0
 8006454:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8006456:	2300      	movs	r3, #0
 8006458:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800645a:	f7ff fa2a 	bl	80058b2 <LL_RCC_GetSysClkSource>
 800645e:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006460:	f7ff fafe 	bl	8005a60 <LL_RCC_PLL_GetMainSource>
 8006464:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d005      	beq.n	8006478 <HAL_RCC_GetSysClockFreq+0x2c>
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	2b0c      	cmp	r3, #12
 8006470:	d139      	bne.n	80064e6 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2b01      	cmp	r3, #1
 8006476:	d136      	bne.n	80064e6 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006478:	f7ff f9cd 	bl	8005816 <LL_RCC_MSI_IsEnabledRangeSelect>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d115      	bne.n	80064ae <HAL_RCC_GetSysClockFreq+0x62>
 8006482:	f7ff f9c8 	bl	8005816 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006486:	4603      	mov	r3, r0
 8006488:	2b01      	cmp	r3, #1
 800648a:	d106      	bne.n	800649a <HAL_RCC_GetSysClockFreq+0x4e>
 800648c:	f7ff f9d3 	bl	8005836 <LL_RCC_MSI_GetRange>
 8006490:	4603      	mov	r3, r0
 8006492:	0a1b      	lsrs	r3, r3, #8
 8006494:	f003 030f 	and.w	r3, r3, #15
 8006498:	e005      	b.n	80064a6 <HAL_RCC_GetSysClockFreq+0x5a>
 800649a:	f7ff f9d7 	bl	800584c <LL_RCC_MSI_GetRangeAfterStandby>
 800649e:	4603      	mov	r3, r0
 80064a0:	0a1b      	lsrs	r3, r3, #8
 80064a2:	f003 030f 	and.w	r3, r3, #15
 80064a6:	4a36      	ldr	r2, [pc, #216]	; (8006580 <HAL_RCC_GetSysClockFreq+0x134>)
 80064a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064ac:	e014      	b.n	80064d8 <HAL_RCC_GetSysClockFreq+0x8c>
 80064ae:	f7ff f9b2 	bl	8005816 <LL_RCC_MSI_IsEnabledRangeSelect>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d106      	bne.n	80064c6 <HAL_RCC_GetSysClockFreq+0x7a>
 80064b8:	f7ff f9bd 	bl	8005836 <LL_RCC_MSI_GetRange>
 80064bc:	4603      	mov	r3, r0
 80064be:	091b      	lsrs	r3, r3, #4
 80064c0:	f003 030f 	and.w	r3, r3, #15
 80064c4:	e005      	b.n	80064d2 <HAL_RCC_GetSysClockFreq+0x86>
 80064c6:	f7ff f9c1 	bl	800584c <LL_RCC_MSI_GetRangeAfterStandby>
 80064ca:	4603      	mov	r3, r0
 80064cc:	091b      	lsrs	r3, r3, #4
 80064ce:	f003 030f 	and.w	r3, r3, #15
 80064d2:	4a2b      	ldr	r2, [pc, #172]	; (8006580 <HAL_RCC_GetSysClockFreq+0x134>)
 80064d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064d8:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d115      	bne.n	800650c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80064e4:	e012      	b.n	800650c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	2b04      	cmp	r3, #4
 80064ea:	d102      	bne.n	80064f2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80064ec:	4b25      	ldr	r3, [pc, #148]	; (8006584 <HAL_RCC_GetSysClockFreq+0x138>)
 80064ee:	617b      	str	r3, [r7, #20]
 80064f0:	e00c      	b.n	800650c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	2b08      	cmp	r3, #8
 80064f6:	d109      	bne.n	800650c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80064f8:	f7ff f8a0 	bl	800563c <LL_RCC_HSE_IsEnabledDiv2>
 80064fc:	4603      	mov	r3, r0
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d102      	bne.n	8006508 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006502:	4b20      	ldr	r3, [pc, #128]	; (8006584 <HAL_RCC_GetSysClockFreq+0x138>)
 8006504:	617b      	str	r3, [r7, #20]
 8006506:	e001      	b.n	800650c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006508:	4b1f      	ldr	r3, [pc, #124]	; (8006588 <HAL_RCC_GetSysClockFreq+0x13c>)
 800650a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800650c:	f7ff f9d1 	bl	80058b2 <LL_RCC_GetSysClkSource>
 8006510:	4603      	mov	r3, r0
 8006512:	2b0c      	cmp	r3, #12
 8006514:	d12f      	bne.n	8006576 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006516:	f7ff faa3 	bl	8005a60 <LL_RCC_PLL_GetMainSource>
 800651a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2b02      	cmp	r3, #2
 8006520:	d003      	beq.n	800652a <HAL_RCC_GetSysClockFreq+0xde>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2b03      	cmp	r3, #3
 8006526:	d003      	beq.n	8006530 <HAL_RCC_GetSysClockFreq+0xe4>
 8006528:	e00d      	b.n	8006546 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800652a:	4b16      	ldr	r3, [pc, #88]	; (8006584 <HAL_RCC_GetSysClockFreq+0x138>)
 800652c:	60fb      	str	r3, [r7, #12]
        break;
 800652e:	e00d      	b.n	800654c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006530:	f7ff f884 	bl	800563c <LL_RCC_HSE_IsEnabledDiv2>
 8006534:	4603      	mov	r3, r0
 8006536:	2b01      	cmp	r3, #1
 8006538:	d102      	bne.n	8006540 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800653a:	4b12      	ldr	r3, [pc, #72]	; (8006584 <HAL_RCC_GetSysClockFreq+0x138>)
 800653c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800653e:	e005      	b.n	800654c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8006540:	4b11      	ldr	r3, [pc, #68]	; (8006588 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006542:	60fb      	str	r3, [r7, #12]
        break;
 8006544:	e002      	b.n	800654c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	60fb      	str	r3, [r7, #12]
        break;
 800654a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800654c:	f7ff fa66 	bl	8005a1c <LL_RCC_PLL_GetN>
 8006550:	4602      	mov	r2, r0
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	fb03 f402 	mul.w	r4, r3, r2
 8006558:	f7ff fa77 	bl	8005a4a <LL_RCC_PLL_GetDivider>
 800655c:	4603      	mov	r3, r0
 800655e:	091b      	lsrs	r3, r3, #4
 8006560:	3301      	adds	r3, #1
 8006562:	fbb4 f4f3 	udiv	r4, r4, r3
 8006566:	f7ff fa65 	bl	8005a34 <LL_RCC_PLL_GetR>
 800656a:	4603      	mov	r3, r0
 800656c:	0f5b      	lsrs	r3, r3, #29
 800656e:	3301      	adds	r3, #1
 8006570:	fbb4 f3f3 	udiv	r3, r4, r3
 8006574:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8006576:	697b      	ldr	r3, [r7, #20]
}
 8006578:	4618      	mov	r0, r3
 800657a:	371c      	adds	r7, #28
 800657c:	46bd      	mov	sp, r7
 800657e:	bd90      	pop	{r4, r7, pc}
 8006580:	0801e54c 	.word	0x0801e54c
 8006584:	00f42400 	.word	0x00f42400
 8006588:	01e84800 	.word	0x01e84800

0800658c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800658c:	b598      	push	{r3, r4, r7, lr}
 800658e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006590:	f7ff ff5c 	bl	800644c <HAL_RCC_GetSysClockFreq>
 8006594:	4604      	mov	r4, r0
 8006596:	f7ff f9e6 	bl	8005966 <LL_RCC_GetAHBPrescaler>
 800659a:	4603      	mov	r3, r0
 800659c:	091b      	lsrs	r3, r3, #4
 800659e:	f003 030f 	and.w	r3, r3, #15
 80065a2:	4a03      	ldr	r2, [pc, #12]	; (80065b0 <HAL_RCC_GetHCLKFreq+0x24>)
 80065a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065a8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	bd98      	pop	{r3, r4, r7, pc}
 80065b0:	0801e4ec 	.word	0x0801e4ec

080065b4 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065b4:	b598      	push	{r3, r4, r7, lr}
 80065b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80065b8:	f7ff ffe8 	bl	800658c <HAL_RCC_GetHCLKFreq>
 80065bc:	4604      	mov	r4, r0
 80065be:	f7ff f9ea 	bl	8005996 <LL_RCC_GetAPB1Prescaler>
 80065c2:	4603      	mov	r3, r0
 80065c4:	0a1b      	lsrs	r3, r3, #8
 80065c6:	4a03      	ldr	r2, [pc, #12]	; (80065d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80065c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065cc:	fa24 f303 	lsr.w	r3, r4, r3
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	bd98      	pop	{r3, r4, r7, pc}
 80065d4:	0801e52c 	.word	0x0801e52c

080065d8 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80065d8:	b598      	push	{r3, r4, r7, lr}
 80065da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80065dc:	f7ff ffd6 	bl	800658c <HAL_RCC_GetHCLKFreq>
 80065e0:	4604      	mov	r4, r0
 80065e2:	f7ff f9e3 	bl	80059ac <LL_RCC_GetAPB2Prescaler>
 80065e6:	4603      	mov	r3, r0
 80065e8:	0adb      	lsrs	r3, r3, #11
 80065ea:	4a03      	ldr	r2, [pc, #12]	; (80065f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80065ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065f0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	bd98      	pop	{r3, r4, r7, pc}
 80065f8:	0801e52c 	.word	0x0801e52c

080065fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80065fc:	b590      	push	{r4, r7, lr}
 80065fe:	b085      	sub	sp, #20
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	091b      	lsrs	r3, r3, #4
 8006608:	f003 030f 	and.w	r3, r3, #15
 800660c:	4a10      	ldr	r2, [pc, #64]	; (8006650 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800660e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006612:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8006614:	f7ff f9b2 	bl	800597c <LL_RCC_GetAHB3Prescaler>
 8006618:	4603      	mov	r3, r0
 800661a:	091b      	lsrs	r3, r3, #4
 800661c:	f003 030f 	and.w	r3, r3, #15
 8006620:	4a0c      	ldr	r2, [pc, #48]	; (8006654 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8006622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006626:	68fa      	ldr	r2, [r7, #12]
 8006628:	fbb2 f3f3 	udiv	r3, r2, r3
 800662c:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	4a09      	ldr	r2, [pc, #36]	; (8006658 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8006632:	fba2 2303 	umull	r2, r3, r2, r3
 8006636:	0c9c      	lsrs	r4, r3, #18
 8006638:	f7fe ff58 	bl	80054ec <HAL_PWREx_GetVoltageRange>
 800663c:	4603      	mov	r3, r0
 800663e:	4619      	mov	r1, r3
 8006640:	4620      	mov	r0, r4
 8006642:	f000 f80b 	bl	800665c <RCC_SetFlashLatency>
 8006646:	4603      	mov	r3, r0
}
 8006648:	4618      	mov	r0, r3
 800664a:	3714      	adds	r7, #20
 800664c:	46bd      	mov	sp, r7
 800664e:	bd90      	pop	{r4, r7, pc}
 8006650:	0801e54c 	.word	0x0801e54c
 8006654:	0801e4ec 	.word	0x0801e4ec
 8006658:	431bde83 	.word	0x431bde83

0800665c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b08e      	sub	sp, #56	; 0x38
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8006666:	4a3a      	ldr	r2, [pc, #232]	; (8006750 <RCC_SetFlashLatency+0xf4>)
 8006668:	f107 0320 	add.w	r3, r7, #32
 800666c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006670:	6018      	str	r0, [r3, #0]
 8006672:	3304      	adds	r3, #4
 8006674:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8006676:	4a37      	ldr	r2, [pc, #220]	; (8006754 <RCC_SetFlashLatency+0xf8>)
 8006678:	f107 0318 	add.w	r3, r7, #24
 800667c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006680:	6018      	str	r0, [r3, #0]
 8006682:	3304      	adds	r3, #4
 8006684:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8006686:	4a34      	ldr	r2, [pc, #208]	; (8006758 <RCC_SetFlashLatency+0xfc>)
 8006688:	f107 030c 	add.w	r3, r7, #12
 800668c:	ca07      	ldmia	r2, {r0, r1, r2}
 800668e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006692:	2300      	movs	r3, #0
 8006694:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800669c:	d11b      	bne.n	80066d6 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800669e:	2300      	movs	r3, #0
 80066a0:	633b      	str	r3, [r7, #48]	; 0x30
 80066a2:	e014      	b.n	80066ce <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80066a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a6:	005b      	lsls	r3, r3, #1
 80066a8:	3338      	adds	r3, #56	; 0x38
 80066aa:	443b      	add	r3, r7
 80066ac:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80066b0:	461a      	mov	r2, r3
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d807      	bhi.n	80066c8 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80066b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	3338      	adds	r3, #56	; 0x38
 80066be:	443b      	add	r3, r7
 80066c0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80066c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066c6:	e021      	b.n	800670c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80066c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ca:	3301      	adds	r3, #1
 80066cc:	633b      	str	r3, [r7, #48]	; 0x30
 80066ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d9e7      	bls.n	80066a4 <RCC_SetFlashLatency+0x48>
 80066d4:	e01a      	b.n	800670c <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80066d6:	2300      	movs	r3, #0
 80066d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066da:	e014      	b.n	8006706 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80066dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066de:	005b      	lsls	r3, r3, #1
 80066e0:	3338      	adds	r3, #56	; 0x38
 80066e2:	443b      	add	r3, r7
 80066e4:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80066e8:	461a      	mov	r2, r3
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d807      	bhi.n	8006700 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80066f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	3338      	adds	r3, #56	; 0x38
 80066f6:	443b      	add	r3, r7
 80066f8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80066fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066fe:	e005      	b.n	800670c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006702:	3301      	adds	r3, #1
 8006704:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006708:	2b02      	cmp	r3, #2
 800670a:	d9e7      	bls.n	80066dc <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800670c:	4b13      	ldr	r3, [pc, #76]	; (800675c <RCC_SetFlashLatency+0x100>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f023 0207 	bic.w	r2, r3, #7
 8006714:	4911      	ldr	r1, [pc, #68]	; (800675c <RCC_SetFlashLatency+0x100>)
 8006716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006718:	4313      	orrs	r3, r2
 800671a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800671c:	f7fb fd5e 	bl	80021dc <HAL_GetTick>
 8006720:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006722:	e008      	b.n	8006736 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006724:	f7fb fd5a 	bl	80021dc <HAL_GetTick>
 8006728:	4602      	mov	r2, r0
 800672a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800672c:	1ad3      	subs	r3, r2, r3
 800672e:	2b02      	cmp	r3, #2
 8006730:	d901      	bls.n	8006736 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8006732:	2303      	movs	r3, #3
 8006734:	e007      	b.n	8006746 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006736:	4b09      	ldr	r3, [pc, #36]	; (800675c <RCC_SetFlashLatency+0x100>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 0307 	and.w	r3, r3, #7
 800673e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006740:	429a      	cmp	r2, r3
 8006742:	d1ef      	bne.n	8006724 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8006744:	2300      	movs	r3, #0
}
 8006746:	4618      	mov	r0, r3
 8006748:	3738      	adds	r7, #56	; 0x38
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	0801dc3c 	.word	0x0801dc3c
 8006754:	0801dc44 	.word	0x0801dc44
 8006758:	0801dc4c 	.word	0x0801dc4c
 800675c:	58004000 	.word	0x58004000

08006760 <LL_RCC_LSE_IsReady>:
{
 8006760:	b480      	push	{r7}
 8006762:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006764:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800676c:	f003 0302 	and.w	r3, r3, #2
 8006770:	2b02      	cmp	r3, #2
 8006772:	d101      	bne.n	8006778 <LL_RCC_LSE_IsReady+0x18>
 8006774:	2301      	movs	r3, #1
 8006776:	e000      	b.n	800677a <LL_RCC_LSE_IsReady+0x1a>
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	46bd      	mov	sp, r7
 800677e:	bc80      	pop	{r7}
 8006780:	4770      	bx	lr

08006782 <LL_RCC_SetUSARTClockSource>:
{
 8006782:	b480      	push	{r7}
 8006784:	b083      	sub	sp, #12
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800678a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800678e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	0c1b      	lsrs	r3, r3, #16
 8006796:	43db      	mvns	r3, r3
 8006798:	401a      	ands	r2, r3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	b29b      	uxth	r3, r3
 800679e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067a2:	4313      	orrs	r3, r2
 80067a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80067a8:	bf00      	nop
 80067aa:	370c      	adds	r7, #12
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bc80      	pop	{r7}
 80067b0:	4770      	bx	lr

080067b2 <LL_RCC_SetI2SClockSource>:
{
 80067b2:	b480      	push	{r7}
 80067b4:	b083      	sub	sp, #12
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80067ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80067d2:	bf00      	nop
 80067d4:	370c      	adds	r7, #12
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bc80      	pop	{r7}
 80067da:	4770      	bx	lr

080067dc <LL_RCC_SetLPUARTClockSource>:
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80067e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80067f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80067fc:	bf00      	nop
 80067fe:	370c      	adds	r7, #12
 8006800:	46bd      	mov	sp, r7
 8006802:	bc80      	pop	{r7}
 8006804:	4770      	bx	lr

08006806 <LL_RCC_SetI2CClockSource>:
{
 8006806:	b480      	push	{r7}
 8006808:	b083      	sub	sp, #12
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800680e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006812:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	091b      	lsrs	r3, r3, #4
 800681a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800681e:	43db      	mvns	r3, r3
 8006820:	401a      	ands	r2, r3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	011b      	lsls	r3, r3, #4
 8006826:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800682a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800682e:	4313      	orrs	r3, r2
 8006830:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006834:	bf00      	nop
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	bc80      	pop	{r7}
 800683c:	4770      	bx	lr

0800683e <LL_RCC_SetLPTIMClockSource>:
{
 800683e:	b480      	push	{r7}
 8006840:	b083      	sub	sp, #12
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006846:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800684a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	0c1b      	lsrs	r3, r3, #16
 8006852:	041b      	lsls	r3, r3, #16
 8006854:	43db      	mvns	r3, r3
 8006856:	401a      	ands	r2, r3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	041b      	lsls	r3, r3, #16
 800685c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006860:	4313      	orrs	r3, r2
 8006862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006866:	bf00      	nop
 8006868:	370c      	adds	r7, #12
 800686a:	46bd      	mov	sp, r7
 800686c:	bc80      	pop	{r7}
 800686e:	4770      	bx	lr

08006870 <LL_RCC_SetRNGClockSource>:
{
 8006870:	b480      	push	{r7}
 8006872:	b083      	sub	sp, #12
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006878:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800687c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006880:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006884:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4313      	orrs	r3, r2
 800688c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006890:	bf00      	nop
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	bc80      	pop	{r7}
 8006898:	4770      	bx	lr

0800689a <LL_RCC_SetADCClockSource>:
{
 800689a:	b480      	push	{r7}
 800689c:	b083      	sub	sp, #12
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80068a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80068ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80068ba:	bf00      	nop
 80068bc:	370c      	adds	r7, #12
 80068be:	46bd      	mov	sp, r7
 80068c0:	bc80      	pop	{r7}
 80068c2:	4770      	bx	lr

080068c4 <LL_RCC_SetRTCClockSource>:
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80068cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80068d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4313      	orrs	r3, r2
 80068e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80068e4:	bf00      	nop
 80068e6:	370c      	adds	r7, #12
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bc80      	pop	{r7}
 80068ec:	4770      	bx	lr

080068ee <LL_RCC_GetRTCClockSource>:
{
 80068ee:	b480      	push	{r7}
 80068f0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80068f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80068fe:	4618      	mov	r0, r3
 8006900:	46bd      	mov	sp, r7
 8006902:	bc80      	pop	{r7}
 8006904:	4770      	bx	lr

08006906 <LL_RCC_ForceBackupDomainReset>:
{
 8006906:	b480      	push	{r7}
 8006908:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800690a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800690e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006912:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006916:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800691a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800691e:	bf00      	nop
 8006920:	46bd      	mov	sp, r7
 8006922:	bc80      	pop	{r7}
 8006924:	4770      	bx	lr

08006926 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006926:	b480      	push	{r7}
 8006928:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800692a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800692e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006932:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006936:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800693a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800693e:	bf00      	nop
 8006940:	46bd      	mov	sp, r7
 8006942:	bc80      	pop	{r7}
 8006944:	4770      	bx	lr
	...

08006948 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b086      	sub	sp, #24
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8006950:	2300      	movs	r3, #0
 8006952:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8006954:	2300      	movs	r3, #0
 8006956:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006958:	2300      	movs	r3, #0
 800695a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006964:	2b00      	cmp	r3, #0
 8006966:	d058      	beq.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8006968:	f7fe fd7e 	bl	8005468 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800696c:	f7fb fc36 	bl	80021dc <HAL_GetTick>
 8006970:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006972:	e009      	b.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006974:	f7fb fc32 	bl	80021dc <HAL_GetTick>
 8006978:	4602      	mov	r2, r0
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	2b02      	cmp	r3, #2
 8006980:	d902      	bls.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8006982:	2303      	movs	r3, #3
 8006984:	74fb      	strb	r3, [r7, #19]
        break;
 8006986:	e006      	b.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006988:	4b7b      	ldr	r3, [pc, #492]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006990:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006994:	d1ee      	bne.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8006996:	7cfb      	ldrb	r3, [r7, #19]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d13c      	bne.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 800699c:	f7ff ffa7 	bl	80068ee <LL_RCC_GetRTCClockSource>
 80069a0:	4602      	mov	r2, r0
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d00f      	beq.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80069aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069b6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80069b8:	f7ff ffa5 	bl	8006906 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80069bc:	f7ff ffb3 	bl	8006926 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80069c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	f003 0302 	and.w	r3, r3, #2
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d014      	beq.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069d4:	f7fb fc02 	bl	80021dc <HAL_GetTick>
 80069d8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80069da:	e00b      	b.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069dc:	f7fb fbfe 	bl	80021dc <HAL_GetTick>
 80069e0:	4602      	mov	r2, r0
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	1ad3      	subs	r3, r2, r3
 80069e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d902      	bls.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80069ee:	2303      	movs	r3, #3
 80069f0:	74fb      	strb	r3, [r7, #19]
            break;
 80069f2:	e004      	b.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80069f4:	f7ff feb4 	bl	8006760 <LL_RCC_LSE_IsReady>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d1ee      	bne.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80069fe:	7cfb      	ldrb	r3, [r7, #19]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d105      	bne.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f7ff ff5b 	bl	80068c4 <LL_RCC_SetRTCClockSource>
 8006a0e:	e004      	b.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006a10:	7cfb      	ldrb	r3, [r7, #19]
 8006a12:	74bb      	strb	r3, [r7, #18]
 8006a14:	e001      	b.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a16:	7cfb      	ldrb	r3, [r7, #19]
 8006a18:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 0301 	and.w	r3, r3, #1
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d004      	beq.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7ff fea9 	bl	8006782 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f003 0302 	and.w	r3, r3, #2
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d004      	beq.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	4618      	mov	r0, r3
 8006a42:	f7ff fe9e 	bl	8006782 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 0320 	and.w	r3, r3, #32
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d004      	beq.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	4618      	mov	r0, r3
 8006a58:	f7ff fec0 	bl	80067dc <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d004      	beq.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6a1b      	ldr	r3, [r3, #32]
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f7ff fee6 	bl	800683e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d004      	beq.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a82:	4618      	mov	r0, r3
 8006a84:	f7ff fedb 	bl	800683e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d004      	beq.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f7ff fed0 	bl	800683e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d004      	beq.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	695b      	ldr	r3, [r3, #20]
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f7ff fea9 	bl	8006806 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d004      	beq.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	699b      	ldr	r3, [r3, #24]
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f7ff fe9e 	bl	8006806 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d004      	beq.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	69db      	ldr	r3, [r3, #28]
 8006ada:	4618      	mov	r0, r3
 8006adc:	f7ff fe93 	bl	8006806 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 0310 	and.w	r3, r3, #16
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d011      	beq.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	4618      	mov	r0, r3
 8006af2:	f7ff fe5e 	bl	80067b2 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006afe:	d107      	bne.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8006b00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b0e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d010      	beq.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b20:	4618      	mov	r0, r3
 8006b22:	f7ff fea5 	bl	8006870 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d107      	bne.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006b2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b3c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d011      	beq.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f7ff fea3 	bl	800689a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b5c:	d107      	bne.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006b5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b6c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8006b6e:	7cbb      	ldrb	r3, [r7, #18]
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3718      	adds	r7, #24
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	58000400 	.word	0x58000400

08006b7c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d071      	beq.n	8006c72 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d106      	bne.n	8006ba8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f7fa ff92 	bl	8001acc <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2202      	movs	r2, #2
 8006bac:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006bb0:	4b32      	ldr	r3, [pc, #200]	; (8006c7c <HAL_RTC_Init+0x100>)
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	f003 0310 	and.w	r3, r3, #16
 8006bb8:	2b10      	cmp	r3, #16
 8006bba:	d051      	beq.n	8006c60 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006bbc:	4b2f      	ldr	r3, [pc, #188]	; (8006c7c <HAL_RTC_Init+0x100>)
 8006bbe:	22ca      	movs	r2, #202	; 0xca
 8006bc0:	625a      	str	r2, [r3, #36]	; 0x24
 8006bc2:	4b2e      	ldr	r3, [pc, #184]	; (8006c7c <HAL_RTC_Init+0x100>)
 8006bc4:	2253      	movs	r2, #83	; 0x53
 8006bc6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f000 fa11 	bl	8006ff0 <RTC_EnterInitMode>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8006bd2:	7bfb      	ldrb	r3, [r7, #15]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d13f      	bne.n	8006c58 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006bd8:	4b28      	ldr	r3, [pc, #160]	; (8006c7c <HAL_RTC_Init+0x100>)
 8006bda:	699b      	ldr	r3, [r3, #24]
 8006bdc:	4a27      	ldr	r2, [pc, #156]	; (8006c7c <HAL_RTC_Init+0x100>)
 8006bde:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8006be2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006be6:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006be8:	4b24      	ldr	r3, [pc, #144]	; (8006c7c <HAL_RTC_Init+0x100>)
 8006bea:	699a      	ldr	r2, [r3, #24]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6859      	ldr	r1, [r3, #4]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	691b      	ldr	r3, [r3, #16]
 8006bf4:	4319      	orrs	r1, r3
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	699b      	ldr	r3, [r3, #24]
 8006bfa:	430b      	orrs	r3, r1
 8006bfc:	491f      	ldr	r1, [pc, #124]	; (8006c7c <HAL_RTC_Init+0x100>)
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	68da      	ldr	r2, [r3, #12]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	041b      	lsls	r3, r3, #16
 8006c0c:	491b      	ldr	r1, [pc, #108]	; (8006c7c <HAL_RTC_Init+0x100>)
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8006c12:	4b1a      	ldr	r3, [pc, #104]	; (8006c7c <HAL_RTC_Init+0x100>)
 8006c14:	68db      	ldr	r3, [r3, #12]
 8006c16:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c22:	430b      	orrs	r3, r1
 8006c24:	4915      	ldr	r1, [pc, #84]	; (8006c7c <HAL_RTC_Init+0x100>)
 8006c26:	4313      	orrs	r3, r2
 8006c28:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 fa14 	bl	8007058 <RTC_ExitInitMode>
 8006c30:	4603      	mov	r3, r0
 8006c32:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8006c34:	7bfb      	ldrb	r3, [r7, #15]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d10e      	bne.n	8006c58 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8006c3a:	4b10      	ldr	r3, [pc, #64]	; (8006c7c <HAL_RTC_Init+0x100>)
 8006c3c:	699b      	ldr	r3, [r3, #24]
 8006c3e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a19      	ldr	r1, [r3, #32]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	69db      	ldr	r3, [r3, #28]
 8006c4a:	4319      	orrs	r1, r3
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	695b      	ldr	r3, [r3, #20]
 8006c50:	430b      	orrs	r3, r1
 8006c52:	490a      	ldr	r1, [pc, #40]	; (8006c7c <HAL_RTC_Init+0x100>)
 8006c54:	4313      	orrs	r3, r2
 8006c56:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c58:	4b08      	ldr	r3, [pc, #32]	; (8006c7c <HAL_RTC_Init+0x100>)
 8006c5a:	22ff      	movs	r2, #255	; 0xff
 8006c5c:	625a      	str	r2, [r3, #36]	; 0x24
 8006c5e:	e001      	b.n	8006c64 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8006c60:	2300      	movs	r3, #0
 8006c62:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006c64:	7bfb      	ldrb	r3, [r7, #15]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d103      	bne.n	8006c72 <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8006c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3710      	adds	r7, #16
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	40002800 	.word	0x40002800

08006c80 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006c80:	b590      	push	{r4, r7, lr}
 8006c82:	b087      	sub	sp, #28
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d101      	bne.n	8006c9e <HAL_RTC_SetAlarm_IT+0x1e>
 8006c9a:	2302      	movs	r3, #2
 8006c9c:	e0f3      	b.n	8006e86 <HAL_RTC_SetAlarm_IT+0x206>
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2202      	movs	r2, #2
 8006caa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8006cae:	4b78      	ldr	r3, [pc, #480]	; (8006e90 <HAL_RTC_SetAlarm_IT+0x210>)
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cb6:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cbe:	d06a      	beq.n	8006d96 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d13a      	bne.n	8006d3c <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006cc6:	4b72      	ldr	r3, [pc, #456]	; (8006e90 <HAL_RTC_SetAlarm_IT+0x210>)
 8006cc8:	699b      	ldr	r3, [r3, #24]
 8006cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d102      	bne.n	8006cd8 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	695b      	ldr	r3, [r3, #20]
 8006cdc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f000 f9f5 	bl	80070d4 <RTC_ByteToBcd2>
 8006cea:	4603      	mov	r3, r0
 8006cec:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	785b      	ldrb	r3, [r3, #1]
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f000 f9ee 	bl	80070d4 <RTC_ByteToBcd2>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006cfc:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	789b      	ldrb	r3, [r3, #2]
 8006d02:	4618      	mov	r0, r3
 8006d04:	f000 f9e6 	bl	80070d4 <RTC_ByteToBcd2>
 8006d08:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006d0a:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	78db      	ldrb	r3, [r3, #3]
 8006d12:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006d14:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f000 f9d8 	bl	80070d4 <RTC_ByteToBcd2>
 8006d24:	4603      	mov	r3, r0
 8006d26:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006d28:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006d30:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006d36:	4313      	orrs	r3, r2
 8006d38:	617b      	str	r3, [r7, #20]
 8006d3a:	e02c      	b.n	8006d96 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	695b      	ldr	r3, [r3, #20]
 8006d40:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8006d44:	d00d      	beq.n	8006d62 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	695b      	ldr	r3, [r3, #20]
 8006d4a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006d4e:	d008      	beq.n	8006d62 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006d50:	4b4f      	ldr	r3, [pc, #316]	; (8006e90 <HAL_RTC_SetAlarm_IT+0x210>)
 8006d52:	699b      	ldr	r3, [r3, #24]
 8006d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d102      	bne.n	8006d62 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	785b      	ldrb	r3, [r3, #1]
 8006d6c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006d6e:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006d70:	68ba      	ldr	r2, [r7, #8]
 8006d72:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006d74:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	78db      	ldrb	r3, [r3, #3]
 8006d7a:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006d7c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006d84:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006d86:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006d8c:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006d92:	4313      	orrs	r3, r2
 8006d94:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d96:	4b3e      	ldr	r3, [pc, #248]	; (8006e90 <HAL_RTC_SetAlarm_IT+0x210>)
 8006d98:	22ca      	movs	r2, #202	; 0xca
 8006d9a:	625a      	str	r2, [r3, #36]	; 0x24
 8006d9c:	4b3c      	ldr	r3, [pc, #240]	; (8006e90 <HAL_RTC_SetAlarm_IT+0x210>)
 8006d9e:	2253      	movs	r2, #83	; 0x53
 8006da0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006da6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006daa:	d12c      	bne.n	8006e06 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006dac:	4b38      	ldr	r3, [pc, #224]	; (8006e90 <HAL_RTC_SetAlarm_IT+0x210>)
 8006dae:	699b      	ldr	r3, [r3, #24]
 8006db0:	4a37      	ldr	r2, [pc, #220]	; (8006e90 <HAL_RTC_SetAlarm_IT+0x210>)
 8006db2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006db6:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006db8:	4b35      	ldr	r3, [pc, #212]	; (8006e90 <HAL_RTC_SetAlarm_IT+0x210>)
 8006dba:	2201      	movs	r2, #1
 8006dbc:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dc4:	d107      	bne.n	8006dd6 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	699a      	ldr	r2, [r3, #24]
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	69db      	ldr	r3, [r3, #28]
 8006dce:	4930      	ldr	r1, [pc, #192]	; (8006e90 <HAL_RTC_SetAlarm_IT+0x210>)
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	644b      	str	r3, [r1, #68]	; 0x44
 8006dd4:	e006      	b.n	8006de4 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8006dd6:	4a2e      	ldr	r2, [pc, #184]	; (8006e90 <HAL_RTC_SetAlarm_IT+0x210>)
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8006ddc:	4a2c      	ldr	r2, [pc, #176]	; (8006e90 <HAL_RTC_SetAlarm_IT+0x210>)
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	699b      	ldr	r3, [r3, #24]
 8006de2:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8006de4:	4a2a      	ldr	r2, [pc, #168]	; (8006e90 <HAL_RTC_SetAlarm_IT+0x210>)
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006df0:	f043 0201 	orr.w	r2, r3, #1
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006df8:	4b25      	ldr	r3, [pc, #148]	; (8006e90 <HAL_RTC_SetAlarm_IT+0x210>)
 8006dfa:	699b      	ldr	r3, [r3, #24]
 8006dfc:	4a24      	ldr	r2, [pc, #144]	; (8006e90 <HAL_RTC_SetAlarm_IT+0x210>)
 8006dfe:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8006e02:	6193      	str	r3, [r2, #24]
 8006e04:	e02b      	b.n	8006e5e <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006e06:	4b22      	ldr	r3, [pc, #136]	; (8006e90 <HAL_RTC_SetAlarm_IT+0x210>)
 8006e08:	699b      	ldr	r3, [r3, #24]
 8006e0a:	4a21      	ldr	r2, [pc, #132]	; (8006e90 <HAL_RTC_SetAlarm_IT+0x210>)
 8006e0c:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8006e10:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006e12:	4b1f      	ldr	r3, [pc, #124]	; (8006e90 <HAL_RTC_SetAlarm_IT+0x210>)
 8006e14:	2202      	movs	r2, #2
 8006e16:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e1e:	d107      	bne.n	8006e30 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	699a      	ldr	r2, [r3, #24]
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	69db      	ldr	r3, [r3, #28]
 8006e28:	4919      	ldr	r1, [pc, #100]	; (8006e90 <HAL_RTC_SetAlarm_IT+0x210>)
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006e2e:	e006      	b.n	8006e3e <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8006e30:	4a17      	ldr	r2, [pc, #92]	; (8006e90 <HAL_RTC_SetAlarm_IT+0x210>)
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8006e36:	4a16      	ldr	r2, [pc, #88]	; (8006e90 <HAL_RTC_SetAlarm_IT+0x210>)
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	699b      	ldr	r3, [r3, #24]
 8006e3c:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8006e3e:	4a14      	ldr	r2, [pc, #80]	; (8006e90 <HAL_RTC_SetAlarm_IT+0x210>)
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e4a:	f043 0202 	orr.w	r2, r3, #2
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006e52:	4b0f      	ldr	r3, [pc, #60]	; (8006e90 <HAL_RTC_SetAlarm_IT+0x210>)
 8006e54:	699b      	ldr	r3, [r3, #24]
 8006e56:	4a0e      	ldr	r2, [pc, #56]	; (8006e90 <HAL_RTC_SetAlarm_IT+0x210>)
 8006e58:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8006e5c:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006e5e:	4b0d      	ldr	r3, [pc, #52]	; (8006e94 <HAL_RTC_SetAlarm_IT+0x214>)
 8006e60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e64:	4a0b      	ldr	r2, [pc, #44]	; (8006e94 <HAL_RTC_SetAlarm_IT+0x214>)
 8006e66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e6a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e6e:	4b08      	ldr	r3, [pc, #32]	; (8006e90 <HAL_RTC_SetAlarm_IT+0x210>)
 8006e70:	22ff      	movs	r2, #255	; 0xff
 8006e72:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	371c      	adds	r7, #28
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd90      	pop	{r4, r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	40002800 	.word	0x40002800
 8006e94:	58000800 	.word	0x58000800

08006e98 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d101      	bne.n	8006eb0 <HAL_RTC_DeactivateAlarm+0x18>
 8006eac:	2302      	movs	r3, #2
 8006eae:	e048      	b.n	8006f42 <HAL_RTC_DeactivateAlarm+0xaa>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2202      	movs	r2, #2
 8006ebc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006ec0:	4b22      	ldr	r3, [pc, #136]	; (8006f4c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006ec2:	22ca      	movs	r2, #202	; 0xca
 8006ec4:	625a      	str	r2, [r3, #36]	; 0x24
 8006ec6:	4b21      	ldr	r3, [pc, #132]	; (8006f4c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006ec8:	2253      	movs	r2, #83	; 0x53
 8006eca:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ed2:	d115      	bne.n	8006f00 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006ed4:	4b1d      	ldr	r3, [pc, #116]	; (8006f4c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006ed6:	699b      	ldr	r3, [r3, #24]
 8006ed8:	4a1c      	ldr	r2, [pc, #112]	; (8006f4c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006eda:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006ede:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8006ee0:	4b1a      	ldr	r3, [pc, #104]	; (8006f4c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ee4:	4a19      	ldr	r2, [pc, #100]	; (8006f4c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006ee6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006eea:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef0:	f023 0201 	bic.w	r2, r3, #1
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006ef8:	4b14      	ldr	r3, [pc, #80]	; (8006f4c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006efa:	2201      	movs	r2, #1
 8006efc:	65da      	str	r2, [r3, #92]	; 0x5c
 8006efe:	e014      	b.n	8006f2a <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006f00:	4b12      	ldr	r3, [pc, #72]	; (8006f4c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006f02:	699b      	ldr	r3, [r3, #24]
 8006f04:	4a11      	ldr	r2, [pc, #68]	; (8006f4c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006f06:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8006f0a:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8006f0c:	4b0f      	ldr	r3, [pc, #60]	; (8006f4c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f10:	4a0e      	ldr	r2, [pc, #56]	; (8006f4c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006f12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f16:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f1c:	f023 0202 	bic.w	r2, r3, #2
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006f24:	4b09      	ldr	r3, [pc, #36]	; (8006f4c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006f26:	2202      	movs	r2, #2
 8006f28:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f2a:	4b08      	ldr	r3, [pc, #32]	; (8006f4c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006f2c:	22ff      	movs	r2, #255	; 0xff
 8006f2e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	370c      	adds	r7, #12
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bc80      	pop	{r7}
 8006f4a:	4770      	bx	lr
 8006f4c:	40002800 	.word	0x40002800

08006f50 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8006f58:	4b11      	ldr	r3, [pc, #68]	; (8006fa0 <HAL_RTC_AlarmIRQHandler+0x50>)
 8006f5a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f60:	4013      	ands	r3, r2
 8006f62:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f003 0301 	and.w	r3, r3, #1
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d005      	beq.n	8006f7a <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006f6e:	4b0c      	ldr	r3, [pc, #48]	; (8006fa0 <HAL_RTC_AlarmIRQHandler+0x50>)
 8006f70:	2201      	movs	r2, #1
 8006f72:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f7fb faf2 	bl	800255e <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f003 0302 	and.w	r3, r3, #2
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d005      	beq.n	8006f90 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006f84:	4b06      	ldr	r3, [pc, #24]	; (8006fa0 <HAL_RTC_AlarmIRQHandler+0x50>)
 8006f86:	2202      	movs	r2, #2
 8006f88:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 f94a 	bl	8007224 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8006f98:	bf00      	nop
 8006f9a:	3710      	adds	r7, #16
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}
 8006fa0:	40002800 	.word	0x40002800

08006fa4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8006fac:	4b0f      	ldr	r3, [pc, #60]	; (8006fec <HAL_RTC_WaitForSynchro+0x48>)
 8006fae:	68db      	ldr	r3, [r3, #12]
 8006fb0:	4a0e      	ldr	r2, [pc, #56]	; (8006fec <HAL_RTC_WaitForSynchro+0x48>)
 8006fb2:	f023 0320 	bic.w	r3, r3, #32
 8006fb6:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8006fb8:	f7fb f910 	bl	80021dc <HAL_GetTick>
 8006fbc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006fbe:	e009      	b.n	8006fd4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006fc0:	f7fb f90c 	bl	80021dc <HAL_GetTick>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	1ad3      	subs	r3, r2, r3
 8006fca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006fce:	d901      	bls.n	8006fd4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006fd0:	2303      	movs	r3, #3
 8006fd2:	e006      	b.n	8006fe2 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006fd4:	4b05      	ldr	r3, [pc, #20]	; (8006fec <HAL_RTC_WaitForSynchro+0x48>)
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	f003 0320 	and.w	r3, r3, #32
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d0ef      	beq.n	8006fc0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8006fe0:	2300      	movs	r3, #0
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3710      	adds	r7, #16
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	40002800 	.word	0x40002800

08006ff0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006ffc:	4b15      	ldr	r3, [pc, #84]	; (8007054 <RTC_EnterInitMode+0x64>)
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007004:	2b00      	cmp	r3, #0
 8007006:	d120      	bne.n	800704a <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007008:	4b12      	ldr	r3, [pc, #72]	; (8007054 <RTC_EnterInitMode+0x64>)
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	4a11      	ldr	r2, [pc, #68]	; (8007054 <RTC_EnterInitMode+0x64>)
 800700e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007012:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8007014:	f7fb f8e2 	bl	80021dc <HAL_GetTick>
 8007018:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800701a:	e00d      	b.n	8007038 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800701c:	f7fb f8de 	bl	80021dc <HAL_GetTick>
 8007020:	4602      	mov	r2, r0
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	1ad3      	subs	r3, r2, r3
 8007026:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800702a:	d905      	bls.n	8007038 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800702c:	2303      	movs	r3, #3
 800702e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2203      	movs	r2, #3
 8007034:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007038:	4b06      	ldr	r3, [pc, #24]	; (8007054 <RTC_EnterInitMode+0x64>)
 800703a:	68db      	ldr	r3, [r3, #12]
 800703c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007040:	2b00      	cmp	r3, #0
 8007042:	d102      	bne.n	800704a <RTC_EnterInitMode+0x5a>
 8007044:	7bfb      	ldrb	r3, [r7, #15]
 8007046:	2b03      	cmp	r3, #3
 8007048:	d1e8      	bne.n	800701c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800704a:	7bfb      	ldrb	r3, [r7, #15]
}
 800704c:	4618      	mov	r0, r3
 800704e:	3710      	adds	r7, #16
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}
 8007054:	40002800 	.word	0x40002800

08007058 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007060:	2300      	movs	r3, #0
 8007062:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007064:	4b1a      	ldr	r3, [pc, #104]	; (80070d0 <RTC_ExitInitMode+0x78>)
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	4a19      	ldr	r2, [pc, #100]	; (80070d0 <RTC_ExitInitMode+0x78>)
 800706a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800706e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007070:	4b17      	ldr	r3, [pc, #92]	; (80070d0 <RTC_ExitInitMode+0x78>)
 8007072:	699b      	ldr	r3, [r3, #24]
 8007074:	f003 0320 	and.w	r3, r3, #32
 8007078:	2b00      	cmp	r3, #0
 800707a:	d10c      	bne.n	8007096 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f7ff ff91 	bl	8006fa4 <HAL_RTC_WaitForSynchro>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d01e      	beq.n	80070c6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2203      	movs	r2, #3
 800708c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8007090:	2303      	movs	r3, #3
 8007092:	73fb      	strb	r3, [r7, #15]
 8007094:	e017      	b.n	80070c6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007096:	4b0e      	ldr	r3, [pc, #56]	; (80070d0 <RTC_ExitInitMode+0x78>)
 8007098:	699b      	ldr	r3, [r3, #24]
 800709a:	4a0d      	ldr	r2, [pc, #52]	; (80070d0 <RTC_ExitInitMode+0x78>)
 800709c:	f023 0320 	bic.w	r3, r3, #32
 80070a0:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f7ff ff7e 	bl	8006fa4 <HAL_RTC_WaitForSynchro>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d005      	beq.n	80070ba <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2203      	movs	r2, #3
 80070b2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80070b6:	2303      	movs	r3, #3
 80070b8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80070ba:	4b05      	ldr	r3, [pc, #20]	; (80070d0 <RTC_ExitInitMode+0x78>)
 80070bc:	699b      	ldr	r3, [r3, #24]
 80070be:	4a04      	ldr	r2, [pc, #16]	; (80070d0 <RTC_ExitInitMode+0x78>)
 80070c0:	f043 0320 	orr.w	r3, r3, #32
 80070c4:	6193      	str	r3, [r2, #24]
  }

  return status;
 80070c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3710      	adds	r7, #16
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	40002800 	.word	0x40002800

080070d4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b085      	sub	sp, #20
 80070d8:	af00      	add	r7, sp, #0
 80070da:	4603      	mov	r3, r0
 80070dc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80070de:	2300      	movs	r3, #0
 80070e0:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 80070e2:	79fb      	ldrb	r3, [r7, #7]
 80070e4:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 80070e6:	e005      	b.n	80070f4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	3301      	adds	r3, #1
 80070ec:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 80070ee:	7afb      	ldrb	r3, [r7, #11]
 80070f0:	3b0a      	subs	r3, #10
 80070f2:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 80070f4:	7afb      	ldrb	r3, [r7, #11]
 80070f6:	2b09      	cmp	r3, #9
 80070f8:	d8f6      	bhi.n	80070e8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	011b      	lsls	r3, r3, #4
 8007100:	b2da      	uxtb	r2, r3
 8007102:	7afb      	ldrb	r3, [r7, #11]
 8007104:	4313      	orrs	r3, r2
 8007106:	b2db      	uxtb	r3, r3
}
 8007108:	4618      	mov	r0, r3
 800710a:	3714      	adds	r7, #20
 800710c:	46bd      	mov	sp, r7
 800710e:	bc80      	pop	{r7}
 8007110:	4770      	bx	lr
	...

08007114 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007122:	2b01      	cmp	r3, #1
 8007124:	d101      	bne.n	800712a <HAL_RTCEx_EnableBypassShadow+0x16>
 8007126:	2302      	movs	r3, #2
 8007128:	e01f      	b.n	800716a <HAL_RTCEx_EnableBypassShadow+0x56>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2201      	movs	r2, #1
 800712e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2202      	movs	r2, #2
 8007136:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800713a:	4b0e      	ldr	r3, [pc, #56]	; (8007174 <HAL_RTCEx_EnableBypassShadow+0x60>)
 800713c:	22ca      	movs	r2, #202	; 0xca
 800713e:	625a      	str	r2, [r3, #36]	; 0x24
 8007140:	4b0c      	ldr	r3, [pc, #48]	; (8007174 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007142:	2253      	movs	r2, #83	; 0x53
 8007144:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007146:	4b0b      	ldr	r3, [pc, #44]	; (8007174 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007148:	699b      	ldr	r3, [r3, #24]
 800714a:	4a0a      	ldr	r2, [pc, #40]	; (8007174 <HAL_RTCEx_EnableBypassShadow+0x60>)
 800714c:	f043 0320 	orr.w	r3, r3, #32
 8007150:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007152:	4b08      	ldr	r3, [pc, #32]	; (8007174 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007154:	22ff      	movs	r2, #255	; 0xff
 8007156:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2201      	movs	r2, #1
 800715c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007168:	2300      	movs	r3, #0
}
 800716a:	4618      	mov	r0, r3
 800716c:	370c      	adds	r7, #12
 800716e:	46bd      	mov	sp, r7
 8007170:	bc80      	pop	{r7}
 8007172:	4770      	bx	lr
 8007174:	40002800 	.word	0x40002800

08007178 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8007178:	b480      	push	{r7}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007186:	2b01      	cmp	r3, #1
 8007188:	d101      	bne.n	800718e <HAL_RTCEx_SetSSRU_IT+0x16>
 800718a:	2302      	movs	r3, #2
 800718c:	e027      	b.n	80071de <HAL_RTCEx_SetSSRU_IT+0x66>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2201      	movs	r2, #1
 8007192:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2202      	movs	r2, #2
 800719a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800719e:	4b12      	ldr	r3, [pc, #72]	; (80071e8 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80071a0:	22ca      	movs	r2, #202	; 0xca
 80071a2:	625a      	str	r2, [r3, #36]	; 0x24
 80071a4:	4b10      	ldr	r3, [pc, #64]	; (80071e8 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80071a6:	2253      	movs	r2, #83	; 0x53
 80071a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 80071aa:	4b0f      	ldr	r3, [pc, #60]	; (80071e8 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80071ac:	699b      	ldr	r3, [r3, #24]
 80071ae:	4a0e      	ldr	r2, [pc, #56]	; (80071e8 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80071b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071b4:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 80071b6:	4b0d      	ldr	r3, [pc, #52]	; (80071ec <HAL_RTCEx_SetSSRU_IT+0x74>)
 80071b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071bc:	4a0b      	ldr	r2, [pc, #44]	; (80071ec <HAL_RTCEx_SetSSRU_IT+0x74>)
 80071be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80071c2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071c6:	4b08      	ldr	r3, [pc, #32]	; (80071e8 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80071c8:	22ff      	movs	r2, #255	; 0xff
 80071ca:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80071dc:	2300      	movs	r3, #0
}
 80071de:	4618      	mov	r0, r3
 80071e0:	370c      	adds	r7, #12
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bc80      	pop	{r7}
 80071e6:	4770      	bx	lr
 80071e8:	40002800 	.word	0x40002800
 80071ec:	58000800 	.word	0x58000800

080071f0 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b082      	sub	sp, #8
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 80071f8:	4b09      	ldr	r3, [pc, #36]	; (8007220 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80071fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007200:	2b00      	cmp	r3, #0
 8007202:	d005      	beq.n	8007210 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8007204:	4b06      	ldr	r3, [pc, #24]	; (8007220 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8007206:	2240      	movs	r2, #64	; 0x40
 8007208:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f7fb f9b1 	bl	8002572 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8007218:	bf00      	nop
 800721a:	3708      	adds	r7, #8
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}
 8007220:	40002800 	.word	0x40002800

08007224 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800722c:	bf00      	nop
 800722e:	370c      	adds	r7, #12
 8007230:	46bd      	mov	sp, r7
 8007232:	bc80      	pop	{r7}
 8007234:	4770      	bx	lr
	...

08007238 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8007238:	b480      	push	{r7}
 800723a:	b087      	sub	sp, #28
 800723c:	af00      	add	r7, sp, #0
 800723e:	60f8      	str	r0, [r7, #12]
 8007240:	60b9      	str	r1, [r7, #8]
 8007242:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8007244:	4b07      	ldr	r3, [pc, #28]	; (8007264 <HAL_RTCEx_BKUPWrite+0x2c>)
 8007246:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	697a      	ldr	r2, [r7, #20]
 800724e:	4413      	add	r3, r2
 8007250:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	687a      	ldr	r2, [r7, #4]
 8007256:	601a      	str	r2, [r3, #0]
}
 8007258:	bf00      	nop
 800725a:	371c      	adds	r7, #28
 800725c:	46bd      	mov	sp, r7
 800725e:	bc80      	pop	{r7}
 8007260:	4770      	bx	lr
 8007262:	bf00      	nop
 8007264:	4000b100 	.word	0x4000b100

08007268 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8007268:	b480      	push	{r7}
 800726a:	b085      	sub	sp, #20
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8007272:	4b07      	ldr	r3, [pc, #28]	; (8007290 <HAL_RTCEx_BKUPRead+0x28>)
 8007274:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	68fa      	ldr	r2, [r7, #12]
 800727c:	4413      	add	r3, r2
 800727e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
}
 8007284:	4618      	mov	r0, r3
 8007286:	3714      	adds	r7, #20
 8007288:	46bd      	mov	sp, r7
 800728a:	bc80      	pop	{r7}
 800728c:	4770      	bx	lr
 800728e:	bf00      	nop
 8007290:	4000b100 	.word	0x4000b100

08007294 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d101      	bne.n	80072a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80072a2:	2301      	movs	r3, #1
 80072a4:	e0c6      	b.n	8007434 <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d108      	bne.n	80072c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072b6:	d009      	beq.n	80072cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2200      	movs	r2, #0
 80072bc:	61da      	str	r2, [r3, #28]
 80072be:	e005      	b.n	80072cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2200      	movs	r2, #0
 80072c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d106      	bne.n	80072e6 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2200      	movs	r2, #0
 80072dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f7fa fc9d 	bl	8001c20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2202      	movs	r2, #2
 80072ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072fc:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007306:	d902      	bls.n	800730e <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007308:	2300      	movs	r3, #0
 800730a:	60fb      	str	r3, [r7, #12]
 800730c:	e002      	b.n	8007314 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800730e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007312:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	68db      	ldr	r3, [r3, #12]
 8007318:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800731c:	d007      	beq.n	800732e <HAL_SPI_Init+0x9a>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	68db      	ldr	r3, [r3, #12]
 8007322:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007326:	d002      	beq.n	800732e <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2200      	movs	r2, #0
 800732c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800733e:	431a      	orrs	r2, r3
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	691b      	ldr	r3, [r3, #16]
 8007344:	f003 0302 	and.w	r3, r3, #2
 8007348:	431a      	orrs	r2, r3
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	695b      	ldr	r3, [r3, #20]
 800734e:	f003 0301 	and.w	r3, r3, #1
 8007352:	431a      	orrs	r2, r3
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	699b      	ldr	r3, [r3, #24]
 8007358:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800735c:	431a      	orrs	r2, r3
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	69db      	ldr	r3, [r3, #28]
 8007362:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007366:	431a      	orrs	r2, r3
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6a1b      	ldr	r3, [r3, #32]
 800736c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007370:	ea42 0103 	orr.w	r1, r2, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007378:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	430a      	orrs	r2, r1
 8007382:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007388:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800738c:	d11b      	bne.n	80073c6 <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007392:	2b00      	cmp	r3, #0
 8007394:	d10b      	bne.n	80073ae <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	68db      	ldr	r3, [r3, #12]
 800739a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800739e:	d903      	bls.n	80073a8 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2202      	movs	r2, #2
 80073a4:	631a      	str	r2, [r3, #48]	; 0x30
 80073a6:	e002      	b.n	80073ae <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2201      	movs	r2, #1
 80073ac:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073b2:	2b02      	cmp	r3, #2
 80073b4:	d107      	bne.n	80073c6 <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073c4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	699b      	ldr	r3, [r3, #24]
 80073ca:	0c1b      	lsrs	r3, r3, #16
 80073cc:	f003 0204 	and.w	r2, r3, #4
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d4:	f003 0310 	and.w	r3, r3, #16
 80073d8:	431a      	orrs	r2, r3
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073de:	f003 0308 	and.w	r3, r3, #8
 80073e2:	431a      	orrs	r2, r3
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80073ec:	ea42 0103 	orr.w	r1, r2, r3
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	430a      	orrs	r2, r1
 80073fc:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007402:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007406:	d105      	bne.n	8007414 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	b292      	uxth	r2, r2
 8007412:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	69da      	ldr	r2, [r3, #28]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007422:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2201      	movs	r2, #1
 800742e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007432:	2300      	movs	r3, #0
}
 8007434:	4618      	mov	r0, r3
 8007436:	3710      	adds	r7, #16
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <LL_PWR_SetRadioBusyTrigger>:
{
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8007444:	4b06      	ldr	r3, [pc, #24]	; (8007460 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800744c:	4904      	ldr	r1, [pc, #16]	; (8007460 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	4313      	orrs	r3, r2
 8007452:	608b      	str	r3, [r1, #8]
}
 8007454:	bf00      	nop
 8007456:	370c      	adds	r7, #12
 8007458:	46bd      	mov	sp, r7
 800745a:	bc80      	pop	{r7}
 800745c:	4770      	bx	lr
 800745e:	bf00      	nop
 8007460:	58000400 	.word	0x58000400

08007464 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 8007464:	b480      	push	{r7}
 8007466:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007468:	4b05      	ldr	r3, [pc, #20]	; (8007480 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800746a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800746e:	4a04      	ldr	r2, [pc, #16]	; (8007480 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8007470:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007474:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007478:	bf00      	nop
 800747a:	46bd      	mov	sp, r7
 800747c:	bc80      	pop	{r7}
 800747e:	4770      	bx	lr
 8007480:	58000400 	.word	0x58000400

08007484 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8007484:	b480      	push	{r7}
 8007486:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007488:	4b05      	ldr	r3, [pc, #20]	; (80074a0 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800748a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800748e:	4a04      	ldr	r2, [pc, #16]	; (80074a0 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8007490:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007494:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007498:	bf00      	nop
 800749a:	46bd      	mov	sp, r7
 800749c:	bc80      	pop	{r7}
 800749e:	4770      	bx	lr
 80074a0:	58000400 	.word	0x58000400

080074a4 <LL_PWR_ClearFlag_RFBUSY>:
{
 80074a4:	b480      	push	{r7}
 80074a6:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80074a8:	4b03      	ldr	r3, [pc, #12]	; (80074b8 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 80074aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80074ae:	619a      	str	r2, [r3, #24]
}
 80074b0:	bf00      	nop
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bc80      	pop	{r7}
 80074b6:	4770      	bx	lr
 80074b8:	58000400 	.word	0x58000400

080074bc <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 80074bc:	b480      	push	{r7}
 80074be:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80074c0:	4b06      	ldr	r3, [pc, #24]	; (80074dc <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 80074c2:	695b      	ldr	r3, [r3, #20]
 80074c4:	f003 0302 	and.w	r3, r3, #2
 80074c8:	2b02      	cmp	r3, #2
 80074ca:	d101      	bne.n	80074d0 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 80074cc:	2301      	movs	r3, #1
 80074ce:	e000      	b.n	80074d2 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 80074d0:	2300      	movs	r3, #0
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bc80      	pop	{r7}
 80074d8:	4770      	bx	lr
 80074da:	bf00      	nop
 80074dc:	58000400 	.word	0x58000400

080074e0 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 80074e0:	b480      	push	{r7}
 80074e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 80074e4:	4b06      	ldr	r3, [pc, #24]	; (8007500 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 80074e6:	695b      	ldr	r3, [r3, #20]
 80074e8:	f003 0304 	and.w	r3, r3, #4
 80074ec:	2b04      	cmp	r3, #4
 80074ee:	d101      	bne.n	80074f4 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 80074f0:	2301      	movs	r3, #1
 80074f2:	e000      	b.n	80074f6 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bc80      	pop	{r7}
 80074fc:	4770      	bx	lr
 80074fe:	bf00      	nop
 8007500:	58000400 	.word	0x58000400

08007504 <LL_RCC_RF_DisableReset>:
{
 8007504:	b480      	push	{r7}
 8007506:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8007508:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800750c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007510:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007514:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007518:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800751c:	bf00      	nop
 800751e:	46bd      	mov	sp, r7
 8007520:	bc80      	pop	{r7}
 8007522:	4770      	bx	lr

08007524 <LL_RCC_IsRFUnderReset>:
{
 8007524:	b480      	push	{r7}
 8007526:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8007528:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800752c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007530:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007534:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007538:	d101      	bne.n	800753e <LL_RCC_IsRFUnderReset+0x1a>
 800753a:	2301      	movs	r3, #1
 800753c:	e000      	b.n	8007540 <LL_RCC_IsRFUnderReset+0x1c>
 800753e:	2300      	movs	r3, #0
}
 8007540:	4618      	mov	r0, r3
 8007542:	46bd      	mov	sp, r7
 8007544:	bc80      	pop	{r7}
 8007546:	4770      	bx	lr

08007548 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8007548:	b480      	push	{r7}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8007550:	4b06      	ldr	r3, [pc, #24]	; (800756c <LL_EXTI_EnableIT_32_63+0x24>)
 8007552:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007556:	4905      	ldr	r1, [pc, #20]	; (800756c <LL_EXTI_EnableIT_32_63+0x24>)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	4313      	orrs	r3, r2
 800755c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8007560:	bf00      	nop
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	bc80      	pop	{r7}
 8007568:	4770      	bx	lr
 800756a:	bf00      	nop
 800756c:	58000800 	.word	0x58000800

08007570 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b084      	sub	sp, #16
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d103      	bne.n	8007586 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	73fb      	strb	r3, [r7, #15]
    return status;
 8007582:	7bfb      	ldrb	r3, [r7, #15]
 8007584:	e052      	b.n	800762c <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8007586:	2300      	movs	r3, #0
 8007588:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	799b      	ldrb	r3, [r3, #6]
 800758e:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8007590:	7bbb      	ldrb	r3, [r7, #14]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d002      	beq.n	800759c <HAL_SUBGHZ_Init+0x2c>
 8007596:	7bbb      	ldrb	r3, [r7, #14]
 8007598:	2b03      	cmp	r3, #3
 800759a:	d109      	bne.n	80075b0 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f7fa fc72 	bl	8001e8c <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 80075a8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80075ac:	f7ff ffcc 	bl	8007548 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 80075b0:	7bbb      	ldrb	r3, [r7, #14]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d126      	bne.n	8007604 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2202      	movs	r2, #2
 80075ba:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 80075bc:	f7ff ffa2 	bl	8007504 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80075c0:	4b1c      	ldr	r3, [pc, #112]	; (8007634 <HAL_SUBGHZ_Init+0xc4>)
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	4613      	mov	r3, r2
 80075c6:	00db      	lsls	r3, r3, #3
 80075c8:	1a9b      	subs	r3, r3, r2
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	0cdb      	lsrs	r3, r3, #19
 80075ce:	2264      	movs	r2, #100	; 0x64
 80075d0:	fb02 f303 	mul.w	r3, r2, r3
 80075d4:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d105      	bne.n	80075e8 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 80075dc:	2301      	movs	r3, #1
 80075de:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2201      	movs	r2, #1
 80075e4:	609a      	str	r2, [r3, #8]
        break;
 80075e6:	e007      	b.n	80075f8 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	3b01      	subs	r3, #1
 80075ec:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 80075ee:	f7ff ff99 	bl	8007524 <LL_RCC_IsRFUnderReset>
 80075f2:	4603      	mov	r3, r0
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d1ee      	bne.n	80075d6 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80075f8:	f7ff ff34 	bl	8007464 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 80075fc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007600:	f7ff ff1c 	bl	800743c <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8007604:	f7ff ff4e 	bl	80074a4 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8007608:	7bfb      	ldrb	r3, [r7, #15]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d10a      	bne.n	8007624 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4618      	mov	r0, r3
 8007614:	f000 faac 	bl	8007b70 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2201      	movs	r2, #1
 800761c:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2201      	movs	r2, #1
 8007628:	719a      	strb	r2, [r3, #6]

  return status;
 800762a:	7bfb      	ldrb	r3, [r7, #15]
}
 800762c:	4618      	mov	r0, r3
 800762e:	3710      	adds	r7, #16
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}
 8007634:	20000000 	.word	0x20000000

08007638 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b086      	sub	sp, #24
 800763c:	af00      	add	r7, sp, #0
 800763e:	60f8      	str	r0, [r7, #12]
 8007640:	607a      	str	r2, [r7, #4]
 8007642:	461a      	mov	r2, r3
 8007644:	460b      	mov	r3, r1
 8007646:	817b      	strh	r3, [r7, #10]
 8007648:	4613      	mov	r3, r2
 800764a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	799b      	ldrb	r3, [r3, #6]
 8007650:	b2db      	uxtb	r3, r3
 8007652:	2b01      	cmp	r3, #1
 8007654:	d14a      	bne.n	80076ec <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	795b      	ldrb	r3, [r3, #5]
 800765a:	2b01      	cmp	r3, #1
 800765c:	d101      	bne.n	8007662 <HAL_SUBGHZ_WriteRegisters+0x2a>
 800765e:	2302      	movs	r3, #2
 8007660:	e045      	b.n	80076ee <HAL_SUBGHZ_WriteRegisters+0xb6>
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2201      	movs	r2, #1
 8007666:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2202      	movs	r2, #2
 800766c:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800766e:	68f8      	ldr	r0, [r7, #12]
 8007670:	f000 fb4c 	bl	8007d0c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007674:	f7ff ff06 	bl	8007484 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8007678:	210d      	movs	r1, #13
 800767a:	68f8      	ldr	r0, [r7, #12]
 800767c:	f000 fa98 	bl	8007bb0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8007680:	897b      	ldrh	r3, [r7, #10]
 8007682:	0a1b      	lsrs	r3, r3, #8
 8007684:	b29b      	uxth	r3, r3
 8007686:	b2db      	uxtb	r3, r3
 8007688:	4619      	mov	r1, r3
 800768a:	68f8      	ldr	r0, [r7, #12]
 800768c:	f000 fa90 	bl	8007bb0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8007690:	897b      	ldrh	r3, [r7, #10]
 8007692:	b2db      	uxtb	r3, r3
 8007694:	4619      	mov	r1, r3
 8007696:	68f8      	ldr	r0, [r7, #12]
 8007698:	f000 fa8a 	bl	8007bb0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800769c:	2300      	movs	r3, #0
 800769e:	82bb      	strh	r3, [r7, #20]
 80076a0:	e00a      	b.n	80076b8 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80076a2:	8abb      	ldrh	r3, [r7, #20]
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	4413      	add	r3, r2
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	4619      	mov	r1, r3
 80076ac:	68f8      	ldr	r0, [r7, #12]
 80076ae:	f000 fa7f 	bl	8007bb0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80076b2:	8abb      	ldrh	r3, [r7, #20]
 80076b4:	3301      	adds	r3, #1
 80076b6:	82bb      	strh	r3, [r7, #20]
 80076b8:	8aba      	ldrh	r2, [r7, #20]
 80076ba:	893b      	ldrh	r3, [r7, #8]
 80076bc:	429a      	cmp	r2, r3
 80076be:	d3f0      	bcc.n	80076a2 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80076c0:	f7ff fed0 	bl	8007464 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80076c4:	68f8      	ldr	r0, [r7, #12]
 80076c6:	f000 fb45 	bl	8007d54 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d002      	beq.n	80076d8 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	75fb      	strb	r3, [r7, #23]
 80076d6:	e001      	b.n	80076dc <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 80076d8:	2300      	movs	r3, #0
 80076da:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2201      	movs	r2, #1
 80076e0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2200      	movs	r2, #0
 80076e6:	715a      	strb	r2, [r3, #5]

    return status;
 80076e8:	7dfb      	ldrb	r3, [r7, #23]
 80076ea:	e000      	b.n	80076ee <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80076ec:	2302      	movs	r3, #2
  }
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3718      	adds	r7, #24
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}

080076f6 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b088      	sub	sp, #32
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	60f8      	str	r0, [r7, #12]
 80076fe:	607a      	str	r2, [r7, #4]
 8007700:	461a      	mov	r2, r3
 8007702:	460b      	mov	r3, r1
 8007704:	817b      	strh	r3, [r7, #10]
 8007706:	4613      	mov	r3, r2
 8007708:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	799b      	ldrb	r3, [r3, #6]
 8007712:	b2db      	uxtb	r3, r3
 8007714:	2b01      	cmp	r3, #1
 8007716:	d14a      	bne.n	80077ae <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	795b      	ldrb	r3, [r3, #5]
 800771c:	2b01      	cmp	r3, #1
 800771e:	d101      	bne.n	8007724 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8007720:	2302      	movs	r3, #2
 8007722:	e045      	b.n	80077b0 <HAL_SUBGHZ_ReadRegisters+0xba>
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2201      	movs	r2, #1
 8007728:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800772a:	68f8      	ldr	r0, [r7, #12]
 800772c:	f000 faee 	bl	8007d0c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007730:	f7ff fea8 	bl	8007484 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8007734:	211d      	movs	r1, #29
 8007736:	68f8      	ldr	r0, [r7, #12]
 8007738:	f000 fa3a 	bl	8007bb0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800773c:	897b      	ldrh	r3, [r7, #10]
 800773e:	0a1b      	lsrs	r3, r3, #8
 8007740:	b29b      	uxth	r3, r3
 8007742:	b2db      	uxtb	r3, r3
 8007744:	4619      	mov	r1, r3
 8007746:	68f8      	ldr	r0, [r7, #12]
 8007748:	f000 fa32 	bl	8007bb0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800774c:	897b      	ldrh	r3, [r7, #10]
 800774e:	b2db      	uxtb	r3, r3
 8007750:	4619      	mov	r1, r3
 8007752:	68f8      	ldr	r0, [r7, #12]
 8007754:	f000 fa2c 	bl	8007bb0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8007758:	2100      	movs	r1, #0
 800775a:	68f8      	ldr	r0, [r7, #12]
 800775c:	f000 fa28 	bl	8007bb0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007760:	2300      	movs	r3, #0
 8007762:	82fb      	strh	r3, [r7, #22]
 8007764:	e009      	b.n	800777a <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007766:	69b9      	ldr	r1, [r7, #24]
 8007768:	68f8      	ldr	r0, [r7, #12]
 800776a:	f000 fa77 	bl	8007c5c <SUBGHZSPI_Receive>
      pData++;
 800776e:	69bb      	ldr	r3, [r7, #24]
 8007770:	3301      	adds	r3, #1
 8007772:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007774:	8afb      	ldrh	r3, [r7, #22]
 8007776:	3301      	adds	r3, #1
 8007778:	82fb      	strh	r3, [r7, #22]
 800777a:	8afa      	ldrh	r2, [r7, #22]
 800777c:	893b      	ldrh	r3, [r7, #8]
 800777e:	429a      	cmp	r2, r3
 8007780:	d3f1      	bcc.n	8007766 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007782:	f7ff fe6f 	bl	8007464 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007786:	68f8      	ldr	r0, [r7, #12]
 8007788:	f000 fae4 	bl	8007d54 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d002      	beq.n	800779a <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8007794:	2301      	movs	r3, #1
 8007796:	77fb      	strb	r3, [r7, #31]
 8007798:	e001      	b.n	800779e <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 800779a:	2300      	movs	r3, #0
 800779c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2201      	movs	r2, #1
 80077a2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2200      	movs	r2, #0
 80077a8:	715a      	strb	r2, [r3, #5]

    return status;
 80077aa:	7ffb      	ldrb	r3, [r7, #31]
 80077ac:	e000      	b.n	80077b0 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 80077ae:	2302      	movs	r3, #2
  }
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3720      	adds	r7, #32
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b086      	sub	sp, #24
 80077bc:	af00      	add	r7, sp, #0
 80077be:	60f8      	str	r0, [r7, #12]
 80077c0:	607a      	str	r2, [r7, #4]
 80077c2:	461a      	mov	r2, r3
 80077c4:	460b      	mov	r3, r1
 80077c6:	72fb      	strb	r3, [r7, #11]
 80077c8:	4613      	mov	r3, r2
 80077ca:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	799b      	ldrb	r3, [r3, #6]
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d14a      	bne.n	800786c <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	795b      	ldrb	r3, [r3, #5]
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d101      	bne.n	80077e2 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 80077de:	2302      	movs	r3, #2
 80077e0:	e045      	b.n	800786e <HAL_SUBGHZ_ExecSetCmd+0xb6>
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2201      	movs	r2, #1
 80077e6:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80077e8:	68f8      	ldr	r0, [r7, #12]
 80077ea:	f000 fa8f 	bl	8007d0c <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 80077ee:	7afb      	ldrb	r3, [r7, #11]
 80077f0:	2b84      	cmp	r3, #132	; 0x84
 80077f2:	d002      	beq.n	80077fa <HAL_SUBGHZ_ExecSetCmd+0x42>
 80077f4:	7afb      	ldrb	r3, [r7, #11]
 80077f6:	2b94      	cmp	r3, #148	; 0x94
 80077f8:	d103      	bne.n	8007802 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2201      	movs	r2, #1
 80077fe:	711a      	strb	r2, [r3, #4]
 8007800:	e002      	b.n	8007808 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2200      	movs	r2, #0
 8007806:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007808:	f7ff fe3c 	bl	8007484 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800780c:	7afb      	ldrb	r3, [r7, #11]
 800780e:	4619      	mov	r1, r3
 8007810:	68f8      	ldr	r0, [r7, #12]
 8007812:	f000 f9cd 	bl	8007bb0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007816:	2300      	movs	r3, #0
 8007818:	82bb      	strh	r3, [r7, #20]
 800781a:	e00a      	b.n	8007832 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800781c:	8abb      	ldrh	r3, [r7, #20]
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	4413      	add	r3, r2
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	4619      	mov	r1, r3
 8007826:	68f8      	ldr	r0, [r7, #12]
 8007828:	f000 f9c2 	bl	8007bb0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800782c:	8abb      	ldrh	r3, [r7, #20]
 800782e:	3301      	adds	r3, #1
 8007830:	82bb      	strh	r3, [r7, #20]
 8007832:	8aba      	ldrh	r2, [r7, #20]
 8007834:	893b      	ldrh	r3, [r7, #8]
 8007836:	429a      	cmp	r2, r3
 8007838:	d3f0      	bcc.n	800781c <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800783a:	f7ff fe13 	bl	8007464 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 800783e:	7afb      	ldrb	r3, [r7, #11]
 8007840:	2b84      	cmp	r3, #132	; 0x84
 8007842:	d002      	beq.n	800784a <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007844:	68f8      	ldr	r0, [r7, #12]
 8007846:	f000 fa85 	bl	8007d54 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d002      	beq.n	8007858 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	75fb      	strb	r3, [r7, #23]
 8007856:	e001      	b.n	800785c <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8007858:	2300      	movs	r3, #0
 800785a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2201      	movs	r2, #1
 8007860:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2200      	movs	r2, #0
 8007866:	715a      	strb	r2, [r3, #5]

    return status;
 8007868:	7dfb      	ldrb	r3, [r7, #23]
 800786a:	e000      	b.n	800786e <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800786c:	2302      	movs	r3, #2
  }
}
 800786e:	4618      	mov	r0, r3
 8007870:	3718      	adds	r7, #24
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}

08007876 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007876:	b580      	push	{r7, lr}
 8007878:	b088      	sub	sp, #32
 800787a:	af00      	add	r7, sp, #0
 800787c:	60f8      	str	r0, [r7, #12]
 800787e:	607a      	str	r2, [r7, #4]
 8007880:	461a      	mov	r2, r3
 8007882:	460b      	mov	r3, r1
 8007884:	72fb      	strb	r3, [r7, #11]
 8007886:	4613      	mov	r3, r2
 8007888:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	799b      	ldrb	r3, [r3, #6]
 8007892:	b2db      	uxtb	r3, r3
 8007894:	2b01      	cmp	r3, #1
 8007896:	d13d      	bne.n	8007914 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	795b      	ldrb	r3, [r3, #5]
 800789c:	2b01      	cmp	r3, #1
 800789e:	d101      	bne.n	80078a4 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 80078a0:	2302      	movs	r3, #2
 80078a2:	e038      	b.n	8007916 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2201      	movs	r2, #1
 80078a8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80078aa:	68f8      	ldr	r0, [r7, #12]
 80078ac:	f000 fa2e 	bl	8007d0c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80078b0:	f7ff fde8 	bl	8007484 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80078b4:	7afb      	ldrb	r3, [r7, #11]
 80078b6:	4619      	mov	r1, r3
 80078b8:	68f8      	ldr	r0, [r7, #12]
 80078ba:	f000 f979 	bl	8007bb0 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80078be:	2100      	movs	r1, #0
 80078c0:	68f8      	ldr	r0, [r7, #12]
 80078c2:	f000 f975 	bl	8007bb0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80078c6:	2300      	movs	r3, #0
 80078c8:	82fb      	strh	r3, [r7, #22]
 80078ca:	e009      	b.n	80078e0 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80078cc:	69b9      	ldr	r1, [r7, #24]
 80078ce:	68f8      	ldr	r0, [r7, #12]
 80078d0:	f000 f9c4 	bl	8007c5c <SUBGHZSPI_Receive>
      pData++;
 80078d4:	69bb      	ldr	r3, [r7, #24]
 80078d6:	3301      	adds	r3, #1
 80078d8:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80078da:	8afb      	ldrh	r3, [r7, #22]
 80078dc:	3301      	adds	r3, #1
 80078de:	82fb      	strh	r3, [r7, #22]
 80078e0:	8afa      	ldrh	r2, [r7, #22]
 80078e2:	893b      	ldrh	r3, [r7, #8]
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d3f1      	bcc.n	80078cc <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80078e8:	f7ff fdbc 	bl	8007464 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80078ec:	68f8      	ldr	r0, [r7, #12]
 80078ee:	f000 fa31 	bl	8007d54 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d002      	beq.n	8007900 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	77fb      	strb	r3, [r7, #31]
 80078fe:	e001      	b.n	8007904 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8007900:	2300      	movs	r3, #0
 8007902:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2201      	movs	r2, #1
 8007908:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2200      	movs	r2, #0
 800790e:	715a      	strb	r2, [r3, #5]

    return status;
 8007910:	7ffb      	ldrb	r3, [r7, #31]
 8007912:	e000      	b.n	8007916 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007914:	2302      	movs	r3, #2
  }
}
 8007916:	4618      	mov	r0, r3
 8007918:	3720      	adds	r7, #32
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}

0800791e <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 800791e:	b580      	push	{r7, lr}
 8007920:	b086      	sub	sp, #24
 8007922:	af00      	add	r7, sp, #0
 8007924:	60f8      	str	r0, [r7, #12]
 8007926:	607a      	str	r2, [r7, #4]
 8007928:	461a      	mov	r2, r3
 800792a:	460b      	mov	r3, r1
 800792c:	72fb      	strb	r3, [r7, #11]
 800792e:	4613      	mov	r3, r2
 8007930:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	799b      	ldrb	r3, [r3, #6]
 8007936:	b2db      	uxtb	r3, r3
 8007938:	2b01      	cmp	r3, #1
 800793a:	d13e      	bne.n	80079ba <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	795b      	ldrb	r3, [r3, #5]
 8007940:	2b01      	cmp	r3, #1
 8007942:	d101      	bne.n	8007948 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8007944:	2302      	movs	r3, #2
 8007946:	e039      	b.n	80079bc <HAL_SUBGHZ_WriteBuffer+0x9e>
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2201      	movs	r2, #1
 800794c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800794e:	68f8      	ldr	r0, [r7, #12]
 8007950:	f000 f9dc 	bl	8007d0c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007954:	f7ff fd96 	bl	8007484 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8007958:	210e      	movs	r1, #14
 800795a:	68f8      	ldr	r0, [r7, #12]
 800795c:	f000 f928 	bl	8007bb0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007960:	7afb      	ldrb	r3, [r7, #11]
 8007962:	4619      	mov	r1, r3
 8007964:	68f8      	ldr	r0, [r7, #12]
 8007966:	f000 f923 	bl	8007bb0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800796a:	2300      	movs	r3, #0
 800796c:	82bb      	strh	r3, [r7, #20]
 800796e:	e00a      	b.n	8007986 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007970:	8abb      	ldrh	r3, [r7, #20]
 8007972:	687a      	ldr	r2, [r7, #4]
 8007974:	4413      	add	r3, r2
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	4619      	mov	r1, r3
 800797a:	68f8      	ldr	r0, [r7, #12]
 800797c:	f000 f918 	bl	8007bb0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007980:	8abb      	ldrh	r3, [r7, #20]
 8007982:	3301      	adds	r3, #1
 8007984:	82bb      	strh	r3, [r7, #20]
 8007986:	8aba      	ldrh	r2, [r7, #20]
 8007988:	893b      	ldrh	r3, [r7, #8]
 800798a:	429a      	cmp	r2, r3
 800798c:	d3f0      	bcc.n	8007970 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800798e:	f7ff fd69 	bl	8007464 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007992:	68f8      	ldr	r0, [r7, #12]
 8007994:	f000 f9de 	bl	8007d54 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d002      	beq.n	80079a6 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 80079a0:	2301      	movs	r3, #1
 80079a2:	75fb      	strb	r3, [r7, #23]
 80079a4:	e001      	b.n	80079aa <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 80079a6:	2300      	movs	r3, #0
 80079a8:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2201      	movs	r2, #1
 80079ae:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2200      	movs	r2, #0
 80079b4:	715a      	strb	r2, [r3, #5]

    return status;
 80079b6:	7dfb      	ldrb	r3, [r7, #23]
 80079b8:	e000      	b.n	80079bc <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80079ba:	2302      	movs	r3, #2
  }
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3718      	adds	r7, #24
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b088      	sub	sp, #32
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	607a      	str	r2, [r7, #4]
 80079ce:	461a      	mov	r2, r3
 80079d0:	460b      	mov	r3, r1
 80079d2:	72fb      	strb	r3, [r7, #11]
 80079d4:	4613      	mov	r3, r2
 80079d6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	799b      	ldrb	r3, [r3, #6]
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d141      	bne.n	8007a6a <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	795b      	ldrb	r3, [r3, #5]
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d101      	bne.n	80079f2 <HAL_SUBGHZ_ReadBuffer+0x2e>
 80079ee:	2302      	movs	r3, #2
 80079f0:	e03c      	b.n	8007a6c <HAL_SUBGHZ_ReadBuffer+0xa8>
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2201      	movs	r2, #1
 80079f6:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80079f8:	68f8      	ldr	r0, [r7, #12]
 80079fa:	f000 f987 	bl	8007d0c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80079fe:	f7ff fd41 	bl	8007484 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8007a02:	211e      	movs	r1, #30
 8007a04:	68f8      	ldr	r0, [r7, #12]
 8007a06:	f000 f8d3 	bl	8007bb0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007a0a:	7afb      	ldrb	r3, [r7, #11]
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	68f8      	ldr	r0, [r7, #12]
 8007a10:	f000 f8ce 	bl	8007bb0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007a14:	2100      	movs	r1, #0
 8007a16:	68f8      	ldr	r0, [r7, #12]
 8007a18:	f000 f8ca 	bl	8007bb0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	82fb      	strh	r3, [r7, #22]
 8007a20:	e009      	b.n	8007a36 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007a22:	69b9      	ldr	r1, [r7, #24]
 8007a24:	68f8      	ldr	r0, [r7, #12]
 8007a26:	f000 f919 	bl	8007c5c <SUBGHZSPI_Receive>
      pData++;
 8007a2a:	69bb      	ldr	r3, [r7, #24]
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007a30:	8afb      	ldrh	r3, [r7, #22]
 8007a32:	3301      	adds	r3, #1
 8007a34:	82fb      	strh	r3, [r7, #22]
 8007a36:	8afa      	ldrh	r2, [r7, #22]
 8007a38:	893b      	ldrh	r3, [r7, #8]
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d3f1      	bcc.n	8007a22 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007a3e:	f7ff fd11 	bl	8007464 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007a42:	68f8      	ldr	r0, [r7, #12]
 8007a44:	f000 f986 	bl	8007d54 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d002      	beq.n	8007a56 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8007a50:	2301      	movs	r3, #1
 8007a52:	77fb      	strb	r3, [r7, #31]
 8007a54:	e001      	b.n	8007a5a <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8007a56:	2300      	movs	r3, #0
 8007a58:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2200      	movs	r2, #0
 8007a64:	715a      	strb	r2, [r3, #5]

    return status;
 8007a66:	7ffb      	ldrb	r3, [r7, #31]
 8007a68:	e000      	b.n	8007a6c <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8007a6a:	2302      	movs	r3, #2
  }
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3720      	adds	r7, #32
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8007a80:	f107 020c 	add.w	r2, r7, #12
 8007a84:	2302      	movs	r3, #2
 8007a86:	2112      	movs	r1, #18
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f7ff fef4 	bl	8007876 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8007a8e:	7b3b      	ldrb	r3, [r7, #12]
 8007a90:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8007a92:	89fb      	ldrh	r3, [r7, #14]
 8007a94:	021b      	lsls	r3, r3, #8
 8007a96:	b21a      	sxth	r2, r3
 8007a98:	7b7b      	ldrb	r3, [r7, #13]
 8007a9a:	b21b      	sxth	r3, r3
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	b21b      	sxth	r3, r3
 8007aa0:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8007aa2:	f107 020c 	add.w	r2, r7, #12
 8007aa6:	2302      	movs	r3, #2
 8007aa8:	2102      	movs	r1, #2
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f7ff fe84 	bl	80077b8 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8007ab0:	89fb      	ldrh	r3, [r7, #14]
 8007ab2:	f003 0301 	and.w	r3, r3, #1
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d002      	beq.n	8007ac0 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f014 fab8 	bl	801c030 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8007ac0:	89fb      	ldrh	r3, [r7, #14]
 8007ac2:	f003 0302 	and.w	r3, r3, #2
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d002      	beq.n	8007ad0 <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f014 fabe 	bl	801c04c <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8007ad0:	89fb      	ldrh	r3, [r7, #14]
 8007ad2:	f003 0304 	and.w	r3, r3, #4
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d002      	beq.n	8007ae0 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f014 fb0e 	bl	801c0fc <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8007ae0:	89fb      	ldrh	r3, [r7, #14]
 8007ae2:	f003 0308 	and.w	r3, r3, #8
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d002      	beq.n	8007af0 <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f014 fb14 	bl	801c118 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8007af0:	89fb      	ldrh	r3, [r7, #14]
 8007af2:	f003 0310 	and.w	r3, r3, #16
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d002      	beq.n	8007b00 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f014 fb1a 	bl	801c134 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8007b00:	89fb      	ldrh	r3, [r7, #14]
 8007b02:	f003 0320 	and.w	r3, r3, #32
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d002      	beq.n	8007b10 <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f014 fae8 	bl	801c0e0 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8007b10:	89fb      	ldrh	r3, [r7, #14]
 8007b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d002      	beq.n	8007b20 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f014 faa4 	bl	801c068 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8007b20:	89fb      	ldrh	r3, [r7, #14]
 8007b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d00d      	beq.n	8007b46 <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8007b2a:	89fb      	ldrh	r3, [r7, #14]
 8007b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d004      	beq.n	8007b3e <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8007b34:	2101      	movs	r1, #1
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f014 faa4 	bl	801c084 <HAL_SUBGHZ_CADStatusCallback>
 8007b3c:	e003      	b.n	8007b46 <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8007b3e:	2100      	movs	r1, #0
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f014 fa9f 	bl	801c084 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8007b46:	89fb      	ldrh	r3, [r7, #14]
 8007b48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d002      	beq.n	8007b56 <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f014 fab5 	bl	801c0c0 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8007b56:	89fb      	ldrh	r3, [r7, #14]
 8007b58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d002      	beq.n	8007b66 <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f014 faf5 	bl	801c150 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8007b66:	bf00      	nop
 8007b68:	3710      	adds	r7, #16
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}
	...

08007b70 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007b78:	4b0c      	ldr	r3, [pc, #48]	; (8007bac <SUBGHZSPI_Init+0x3c>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a0b      	ldr	r2, [pc, #44]	; (8007bac <SUBGHZSPI_Init+0x3c>)
 8007b7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b82:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8007b84:	4a09      	ldr	r2, [pc, #36]	; (8007bac <SUBGHZSPI_Init+0x3c>)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8007b8c:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8007b8e:	4b07      	ldr	r3, [pc, #28]	; (8007bac <SUBGHZSPI_Init+0x3c>)
 8007b90:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8007b94:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007b96:	4b05      	ldr	r3, [pc, #20]	; (8007bac <SUBGHZSPI_Init+0x3c>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a04      	ldr	r2, [pc, #16]	; (8007bac <SUBGHZSPI_Init+0x3c>)
 8007b9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ba0:	6013      	str	r3, [r2, #0]
}
 8007ba2:	bf00      	nop
 8007ba4:	370c      	adds	r7, #12
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bc80      	pop	{r7}
 8007baa:	4770      	bx	lr
 8007bac:	58010000 	.word	0x58010000

08007bb0 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b087      	sub	sp, #28
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	460b      	mov	r3, r1
 8007bba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007bc0:	4b23      	ldr	r3, [pc, #140]	; (8007c50 <SUBGHZSPI_Transmit+0xa0>)
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	4613      	mov	r3, r2
 8007bc6:	00db      	lsls	r3, r3, #3
 8007bc8:	1a9b      	subs	r3, r3, r2
 8007bca:	009b      	lsls	r3, r3, #2
 8007bcc:	0cdb      	lsrs	r3, r3, #19
 8007bce:	2264      	movs	r2, #100	; 0x64
 8007bd0:	fb02 f303 	mul.w	r3, r2, r3
 8007bd4:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d105      	bne.n	8007be8 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2201      	movs	r2, #1
 8007be4:	609a      	str	r2, [r3, #8]
      break;
 8007be6:	e008      	b.n	8007bfa <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	3b01      	subs	r3, #1
 8007bec:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007bee:	4b19      	ldr	r3, [pc, #100]	; (8007c54 <SUBGHZSPI_Transmit+0xa4>)
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	f003 0302 	and.w	r3, r3, #2
 8007bf6:	2b02      	cmp	r3, #2
 8007bf8:	d1ed      	bne.n	8007bd6 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007bfa:	4b17      	ldr	r3, [pc, #92]	; (8007c58 <SUBGHZSPI_Transmit+0xa8>)
 8007bfc:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	78fa      	ldrb	r2, [r7, #3]
 8007c02:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007c04:	4b12      	ldr	r3, [pc, #72]	; (8007c50 <SUBGHZSPI_Transmit+0xa0>)
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	4613      	mov	r3, r2
 8007c0a:	00db      	lsls	r3, r3, #3
 8007c0c:	1a9b      	subs	r3, r3, r2
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	0cdb      	lsrs	r3, r3, #19
 8007c12:	2264      	movs	r2, #100	; 0x64
 8007c14:	fb02 f303 	mul.w	r3, r2, r3
 8007c18:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d105      	bne.n	8007c2c <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8007c20:	2301      	movs	r3, #1
 8007c22:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2201      	movs	r2, #1
 8007c28:	609a      	str	r2, [r3, #8]
      break;
 8007c2a:	e008      	b.n	8007c3e <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	3b01      	subs	r3, #1
 8007c30:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007c32:	4b08      	ldr	r3, [pc, #32]	; (8007c54 <SUBGHZSPI_Transmit+0xa4>)
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	f003 0301 	and.w	r3, r3, #1
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d1ed      	bne.n	8007c1a <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8007c3e:	4b05      	ldr	r3, [pc, #20]	; (8007c54 <SUBGHZSPI_Transmit+0xa4>)
 8007c40:	68db      	ldr	r3, [r3, #12]

  return status;
 8007c42:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	371c      	adds	r7, #28
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bc80      	pop	{r7}
 8007c4c:	4770      	bx	lr
 8007c4e:	bf00      	nop
 8007c50:	20000000 	.word	0x20000000
 8007c54:	58010000 	.word	0x58010000
 8007c58:	5801000c 	.word	0x5801000c

08007c5c <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b087      	sub	sp, #28
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c66:	2300      	movs	r3, #0
 8007c68:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007c6a:	4b25      	ldr	r3, [pc, #148]	; (8007d00 <SUBGHZSPI_Receive+0xa4>)
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	4613      	mov	r3, r2
 8007c70:	00db      	lsls	r3, r3, #3
 8007c72:	1a9b      	subs	r3, r3, r2
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	0cdb      	lsrs	r3, r3, #19
 8007c78:	2264      	movs	r2, #100	; 0x64
 8007c7a:	fb02 f303 	mul.w	r3, r2, r3
 8007c7e:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d105      	bne.n	8007c92 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	609a      	str	r2, [r3, #8]
      break;
 8007c90:	e008      	b.n	8007ca4 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	3b01      	subs	r3, #1
 8007c96:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007c98:	4b1a      	ldr	r3, [pc, #104]	; (8007d04 <SUBGHZSPI_Receive+0xa8>)
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	f003 0302 	and.w	r3, r3, #2
 8007ca0:	2b02      	cmp	r3, #2
 8007ca2:	d1ed      	bne.n	8007c80 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007ca4:	4b18      	ldr	r3, [pc, #96]	; (8007d08 <SUBGHZSPI_Receive+0xac>)
 8007ca6:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	22ff      	movs	r2, #255	; 0xff
 8007cac:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007cae:	4b14      	ldr	r3, [pc, #80]	; (8007d00 <SUBGHZSPI_Receive+0xa4>)
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	4613      	mov	r3, r2
 8007cb4:	00db      	lsls	r3, r3, #3
 8007cb6:	1a9b      	subs	r3, r3, r2
 8007cb8:	009b      	lsls	r3, r3, #2
 8007cba:	0cdb      	lsrs	r3, r3, #19
 8007cbc:	2264      	movs	r2, #100	; 0x64
 8007cbe:	fb02 f303 	mul.w	r3, r2, r3
 8007cc2:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d105      	bne.n	8007cd6 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	609a      	str	r2, [r3, #8]
      break;
 8007cd4:	e008      	b.n	8007ce8 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	3b01      	subs	r3, #1
 8007cda:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007cdc:	4b09      	ldr	r3, [pc, #36]	; (8007d04 <SUBGHZSPI_Receive+0xa8>)
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	f003 0301 	and.w	r3, r3, #1
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d1ed      	bne.n	8007cc4 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8007ce8:	4b06      	ldr	r3, [pc, #24]	; (8007d04 <SUBGHZSPI_Receive+0xa8>)
 8007cea:	68db      	ldr	r3, [r3, #12]
 8007cec:	b2da      	uxtb	r2, r3
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	701a      	strb	r2, [r3, #0]

  return status;
 8007cf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	371c      	adds	r7, #28
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bc80      	pop	{r7}
 8007cfc:	4770      	bx	lr
 8007cfe:	bf00      	nop
 8007d00:	20000000 	.word	0x20000000
 8007d04:	58010000 	.word	0x58010000
 8007d08:	5801000c 	.word	0x5801000c

08007d0c <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b084      	sub	sp, #16
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	791b      	ldrb	r3, [r3, #4]
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d111      	bne.n	8007d40 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8007d1c:	4b0c      	ldr	r3, [pc, #48]	; (8007d50 <SUBGHZ_CheckDeviceReady+0x44>)
 8007d1e:	681a      	ldr	r2, [r3, #0]
 8007d20:	4613      	mov	r3, r2
 8007d22:	005b      	lsls	r3, r3, #1
 8007d24:	4413      	add	r3, r2
 8007d26:	00db      	lsls	r3, r3, #3
 8007d28:	0c1b      	lsrs	r3, r3, #16
 8007d2a:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007d2c:	f7ff fbaa 	bl	8007484 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	3b01      	subs	r3, #1
 8007d34:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d1f9      	bne.n	8007d30 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007d3c:	f7ff fb92 	bl	8007464 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 f807 	bl	8007d54 <SUBGHZ_WaitOnBusy>
 8007d46:	4603      	mov	r3, r0
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3710      	adds	r7, #16
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}
 8007d50:	20000000 	.word	0x20000000

08007d54 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b086      	sub	sp, #24
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8007d60:	4b12      	ldr	r3, [pc, #72]	; (8007dac <SUBGHZ_WaitOnBusy+0x58>)
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	4613      	mov	r3, r2
 8007d66:	005b      	lsls	r3, r3, #1
 8007d68:	4413      	add	r3, r2
 8007d6a:	00db      	lsls	r3, r3, #3
 8007d6c:	0d1b      	lsrs	r3, r3, #20
 8007d6e:	2264      	movs	r2, #100	; 0x64
 8007d70:	fb02 f303 	mul.w	r3, r2, r3
 8007d74:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8007d76:	f7ff fbb3 	bl	80074e0 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8007d7a:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d105      	bne.n	8007d8e <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8007d82:	2301      	movs	r3, #1
 8007d84:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2202      	movs	r2, #2
 8007d8a:	609a      	str	r2, [r3, #8]
      break;
 8007d8c:	e009      	b.n	8007da2 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	3b01      	subs	r3, #1
 8007d92:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8007d94:	f7ff fb92 	bl	80074bc <LL_PWR_IsActiveFlag_RFBUSYS>
 8007d98:	4602      	mov	r2, r0
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	4013      	ands	r3, r2
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d0e9      	beq.n	8007d76 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8007da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3718      	adds	r7, #24
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}
 8007dac:	20000000 	.word	0x20000000

08007db0 <LL_RCC_GetUSARTClockSource>:
{
 8007db0:	b480      	push	{r7}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8007db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007dbc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	401a      	ands	r2, r3
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	041b      	lsls	r3, r3, #16
 8007dc8:	4313      	orrs	r3, r2
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	370c      	adds	r7, #12
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bc80      	pop	{r7}
 8007dd2:	4770      	bx	lr

08007dd4 <LL_RCC_GetLPUARTClockSource>:
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007de0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	4013      	ands	r3, r2
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	370c      	adds	r7, #12
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bc80      	pop	{r7}
 8007df0:	4770      	bx	lr

08007df2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007df2:	b580      	push	{r7, lr}
 8007df4:	b082      	sub	sp, #8
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d101      	bne.n	8007e04 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e00:	2301      	movs	r3, #1
 8007e02:	e042      	b.n	8007e8a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d106      	bne.n	8007e1c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2200      	movs	r2, #0
 8007e12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f7fa fd10 	bl	800283c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2224      	movs	r2, #36	; 0x24
 8007e20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f022 0201 	bic.w	r2, r2, #1
 8007e32:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 fc3b 	bl	80086b0 <UART_SetConfig>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d101      	bne.n	8007e44 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007e40:	2301      	movs	r3, #1
 8007e42:	e022      	b.n	8007e8a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d002      	beq.n	8007e52 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f000 fea3 	bl	8008b98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	685a      	ldr	r2, [r3, #4]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e60:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	689a      	ldr	r2, [r3, #8]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e70:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	681a      	ldr	r2, [r3, #0]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f042 0201 	orr.w	r2, r2, #1
 8007e80:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 ff29 	bl	8008cda <UART_CheckIdleState>
 8007e88:	4603      	mov	r3, r0
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3708      	adds	r7, #8
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
	...

08007e94 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b08a      	sub	sp, #40	; 0x28
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	60b9      	str	r1, [r7, #8]
 8007e9e:	4613      	mov	r3, r2
 8007ea0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ea8:	2b20      	cmp	r3, #32
 8007eaa:	d137      	bne.n	8007f1c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d002      	beq.n	8007eb8 <HAL_UART_Receive_IT+0x24>
 8007eb2:	88fb      	ldrh	r3, [r7, #6]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d101      	bne.n	8007ebc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	e030      	b.n	8007f1e <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a18      	ldr	r2, [pc, #96]	; (8007f28 <HAL_UART_Receive_IT+0x94>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d01f      	beq.n	8007f0c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d018      	beq.n	8007f0c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	e853 3f00 	ldrex	r3, [r3]
 8007ee6:	613b      	str	r3, [r7, #16]
   return(result);
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007eee:	627b      	str	r3, [r7, #36]	; 0x24
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef8:	623b      	str	r3, [r7, #32]
 8007efa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007efc:	69f9      	ldr	r1, [r7, #28]
 8007efe:	6a3a      	ldr	r2, [r7, #32]
 8007f00:	e841 2300 	strex	r3, r2, [r1]
 8007f04:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f06:	69bb      	ldr	r3, [r7, #24]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d1e6      	bne.n	8007eda <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007f0c:	88fb      	ldrh	r3, [r7, #6]
 8007f0e:	461a      	mov	r2, r3
 8007f10:	68b9      	ldr	r1, [r7, #8]
 8007f12:	68f8      	ldr	r0, [r7, #12]
 8007f14:	f000 fff8 	bl	8008f08 <UART_Start_Receive_IT>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	e000      	b.n	8007f1e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007f1c:	2302      	movs	r3, #2
  }
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3728      	adds	r7, #40	; 0x28
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}
 8007f26:	bf00      	nop
 8007f28:	40008000 	.word	0x40008000

08007f2c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b08a      	sub	sp, #40	; 0x28
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	60f8      	str	r0, [r7, #12]
 8007f34:	60b9      	str	r1, [r7, #8]
 8007f36:	4613      	mov	r3, r2
 8007f38:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f40:	2b20      	cmp	r3, #32
 8007f42:	d167      	bne.n	8008014 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d002      	beq.n	8007f50 <HAL_UART_Transmit_DMA+0x24>
 8007f4a:	88fb      	ldrh	r3, [r7, #6]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d101      	bne.n	8007f54 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007f50:	2301      	movs	r3, #1
 8007f52:	e060      	b.n	8008016 <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	68ba      	ldr	r2, [r7, #8]
 8007f58:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	88fa      	ldrh	r2, [r7, #6]
 8007f5e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	88fa      	ldrh	r2, [r7, #6]
 8007f66:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2221      	movs	r2, #33	; 0x21
 8007f76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d028      	beq.n	8007fd4 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f86:	4a26      	ldr	r2, [pc, #152]	; (8008020 <HAL_UART_Transmit_DMA+0xf4>)
 8007f88:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f8e:	4a25      	ldr	r2, [pc, #148]	; (8008024 <HAL_UART_Transmit_DMA+0xf8>)
 8007f90:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f96:	4a24      	ldr	r2, [pc, #144]	; (8008028 <HAL_UART_Transmit_DMA+0xfc>)
 8007f98:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007faa:	4619      	mov	r1, r3
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	3328      	adds	r3, #40	; 0x28
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	88fb      	ldrh	r3, [r7, #6]
 8007fb6:	f7fc fa27 	bl	8004408 <HAL_DMA_Start_IT>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d009      	beq.n	8007fd4 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2210      	movs	r2, #16
 8007fc4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2220      	movs	r2, #32
 8007fcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	e020      	b.n	8008016 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	2240      	movs	r2, #64	; 0x40
 8007fda:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	3308      	adds	r3, #8
 8007fe2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	e853 3f00 	ldrex	r3, [r3]
 8007fea:	613b      	str	r3, [r7, #16]
   return(result);
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ff2:	627b      	str	r3, [r7, #36]	; 0x24
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	3308      	adds	r3, #8
 8007ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ffc:	623a      	str	r2, [r7, #32]
 8007ffe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008000:	69f9      	ldr	r1, [r7, #28]
 8008002:	6a3a      	ldr	r2, [r7, #32]
 8008004:	e841 2300 	strex	r3, r2, [r1]
 8008008:	61bb      	str	r3, [r7, #24]
   return(result);
 800800a:	69bb      	ldr	r3, [r7, #24]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d1e5      	bne.n	8007fdc <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008010:	2300      	movs	r3, #0
 8008012:	e000      	b.n	8008016 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008014:	2302      	movs	r3, #2
  }
}
 8008016:	4618      	mov	r0, r3
 8008018:	3728      	adds	r7, #40	; 0x28
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
 800801e:	bf00      	nop
 8008020:	08009293 	.word	0x08009293
 8008024:	0800932d 	.word	0x0800932d
 8008028:	08009349 	.word	0x08009349

0800802c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b0ba      	sub	sp, #232	; 0xe8
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	69db      	ldr	r3, [r3, #28]
 800803a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008052:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008056:	f640 030f 	movw	r3, #2063	; 0x80f
 800805a:	4013      	ands	r3, r2
 800805c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008060:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008064:	2b00      	cmp	r3, #0
 8008066:	d11b      	bne.n	80080a0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008068:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800806c:	f003 0320 	and.w	r3, r3, #32
 8008070:	2b00      	cmp	r3, #0
 8008072:	d015      	beq.n	80080a0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008078:	f003 0320 	and.w	r3, r3, #32
 800807c:	2b00      	cmp	r3, #0
 800807e:	d105      	bne.n	800808c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008080:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008088:	2b00      	cmp	r3, #0
 800808a:	d009      	beq.n	80080a0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008090:	2b00      	cmp	r3, #0
 8008092:	f000 82e3 	beq.w	800865c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	4798      	blx	r3
      }
      return;
 800809e:	e2dd      	b.n	800865c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80080a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	f000 8123 	beq.w	80082f0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80080aa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80080ae:	4b8d      	ldr	r3, [pc, #564]	; (80082e4 <HAL_UART_IRQHandler+0x2b8>)
 80080b0:	4013      	ands	r3, r2
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d106      	bne.n	80080c4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80080b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80080ba:	4b8b      	ldr	r3, [pc, #556]	; (80082e8 <HAL_UART_IRQHandler+0x2bc>)
 80080bc:	4013      	ands	r3, r2
 80080be:	2b00      	cmp	r3, #0
 80080c0:	f000 8116 	beq.w	80082f0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80080c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080c8:	f003 0301 	and.w	r3, r3, #1
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d011      	beq.n	80080f4 <HAL_UART_IRQHandler+0xc8>
 80080d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d00b      	beq.n	80080f4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	2201      	movs	r2, #1
 80080e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080ea:	f043 0201 	orr.w	r2, r3, #1
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80080f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080f8:	f003 0302 	and.w	r3, r3, #2
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d011      	beq.n	8008124 <HAL_UART_IRQHandler+0xf8>
 8008100:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008104:	f003 0301 	and.w	r3, r3, #1
 8008108:	2b00      	cmp	r3, #0
 800810a:	d00b      	beq.n	8008124 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	2202      	movs	r2, #2
 8008112:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800811a:	f043 0204 	orr.w	r2, r3, #4
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008128:	f003 0304 	and.w	r3, r3, #4
 800812c:	2b00      	cmp	r3, #0
 800812e:	d011      	beq.n	8008154 <HAL_UART_IRQHandler+0x128>
 8008130:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008134:	f003 0301 	and.w	r3, r3, #1
 8008138:	2b00      	cmp	r3, #0
 800813a:	d00b      	beq.n	8008154 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	2204      	movs	r2, #4
 8008142:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800814a:	f043 0202 	orr.w	r2, r3, #2
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008158:	f003 0308 	and.w	r3, r3, #8
 800815c:	2b00      	cmp	r3, #0
 800815e:	d017      	beq.n	8008190 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008164:	f003 0320 	and.w	r3, r3, #32
 8008168:	2b00      	cmp	r3, #0
 800816a:	d105      	bne.n	8008178 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800816c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008170:	4b5c      	ldr	r3, [pc, #368]	; (80082e4 <HAL_UART_IRQHandler+0x2b8>)
 8008172:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008174:	2b00      	cmp	r3, #0
 8008176:	d00b      	beq.n	8008190 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	2208      	movs	r2, #8
 800817e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008186:	f043 0208 	orr.w	r2, r3, #8
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008194:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008198:	2b00      	cmp	r3, #0
 800819a:	d012      	beq.n	80081c2 <HAL_UART_IRQHandler+0x196>
 800819c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d00c      	beq.n	80081c2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80081b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081b8:	f043 0220 	orr.w	r2, r3, #32
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	f000 8249 	beq.w	8008660 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80081ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081d2:	f003 0320 	and.w	r3, r3, #32
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d013      	beq.n	8008202 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80081da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081de:	f003 0320 	and.w	r3, r3, #32
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d105      	bne.n	80081f2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80081e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d007      	beq.n	8008202 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d003      	beq.n	8008202 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008208:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008216:	2b40      	cmp	r3, #64	; 0x40
 8008218:	d005      	beq.n	8008226 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800821a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800821e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008222:	2b00      	cmp	r3, #0
 8008224:	d054      	beq.n	80082d0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 ffce 	bl	80091c8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	689b      	ldr	r3, [r3, #8]
 8008232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008236:	2b40      	cmp	r3, #64	; 0x40
 8008238:	d146      	bne.n	80082c8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	3308      	adds	r3, #8
 8008240:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008244:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008248:	e853 3f00 	ldrex	r3, [r3]
 800824c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008250:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008254:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008258:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	3308      	adds	r3, #8
 8008262:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008266:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800826a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800826e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008272:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008276:	e841 2300 	strex	r3, r2, [r1]
 800827a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800827e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008282:	2b00      	cmp	r3, #0
 8008284:	d1d9      	bne.n	800823a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800828c:	2b00      	cmp	r3, #0
 800828e:	d017      	beq.n	80082c0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008296:	4a15      	ldr	r2, [pc, #84]	; (80082ec <HAL_UART_IRQHandler+0x2c0>)
 8008298:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082a0:	4618      	mov	r0, r3
 80082a2:	f7fc f98d 	bl	80045c0 <HAL_DMA_Abort_IT>
 80082a6:	4603      	mov	r3, r0
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d019      	beq.n	80082e0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082b4:	687a      	ldr	r2, [r7, #4]
 80082b6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80082ba:	4610      	mov	r0, r2
 80082bc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082be:	e00f      	b.n	80082e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 f9e0 	bl	8008686 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082c6:	e00b      	b.n	80082e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 f9dc 	bl	8008686 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082ce:	e007      	b.n	80082e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f000 f9d8 	bl	8008686 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2200      	movs	r2, #0
 80082da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80082de:	e1bf      	b.n	8008660 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082e0:	bf00      	nop
    return;
 80082e2:	e1bd      	b.n	8008660 <HAL_UART_IRQHandler+0x634>
 80082e4:	10000001 	.word	0x10000001
 80082e8:	04000120 	.word	0x04000120
 80082ec:	080093c9 	.word	0x080093c9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	f040 8153 	bne.w	80085a0 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80082fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082fe:	f003 0310 	and.w	r3, r3, #16
 8008302:	2b00      	cmp	r3, #0
 8008304:	f000 814c 	beq.w	80085a0 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800830c:	f003 0310 	and.w	r3, r3, #16
 8008310:	2b00      	cmp	r3, #0
 8008312:	f000 8145 	beq.w	80085a0 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	2210      	movs	r2, #16
 800831c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	689b      	ldr	r3, [r3, #8]
 8008324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008328:	2b40      	cmp	r3, #64	; 0x40
 800832a:	f040 80bb 	bne.w	80084a4 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800833c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008340:	2b00      	cmp	r3, #0
 8008342:	f000 818f 	beq.w	8008664 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800834c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008350:	429a      	cmp	r2, r3
 8008352:	f080 8187 	bcs.w	8008664 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800835c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f003 0320 	and.w	r3, r3, #32
 800836e:	2b00      	cmp	r3, #0
 8008370:	f040 8087 	bne.w	8008482 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800837c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008380:	e853 3f00 	ldrex	r3, [r3]
 8008384:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008388:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800838c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008390:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	461a      	mov	r2, r3
 800839a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800839e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80083a2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80083aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80083ae:	e841 2300 	strex	r3, r2, [r1]
 80083b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80083b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d1da      	bne.n	8008374 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	3308      	adds	r3, #8
 80083c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083c8:	e853 3f00 	ldrex	r3, [r3]
 80083cc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80083ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80083d0:	f023 0301 	bic.w	r3, r3, #1
 80083d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	3308      	adds	r3, #8
 80083de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80083e2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80083e6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80083ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80083ee:	e841 2300 	strex	r3, r2, [r1]
 80083f2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80083f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d1e1      	bne.n	80083be <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	3308      	adds	r3, #8
 8008400:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008402:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008404:	e853 3f00 	ldrex	r3, [r3]
 8008408:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800840a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800840c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008410:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	3308      	adds	r3, #8
 800841a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800841e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008420:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008422:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008424:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008426:	e841 2300 	strex	r3, r2, [r1]
 800842a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800842c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800842e:	2b00      	cmp	r3, #0
 8008430:	d1e3      	bne.n	80083fa <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2220      	movs	r2, #32
 8008436:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2200      	movs	r2, #0
 800843e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008448:	e853 3f00 	ldrex	r3, [r3]
 800844c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800844e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008450:	f023 0310 	bic.w	r3, r3, #16
 8008454:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	461a      	mov	r2, r3
 800845e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008462:	65bb      	str	r3, [r7, #88]	; 0x58
 8008464:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008466:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008468:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800846a:	e841 2300 	strex	r3, r2, [r1]
 800846e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008470:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008472:	2b00      	cmp	r3, #0
 8008474:	d1e4      	bne.n	8008440 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800847c:	4618      	mov	r0, r3
 800847e:	f7fc f841 	bl	8004504 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2202      	movs	r2, #2
 8008486:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008494:	b29b      	uxth	r3, r3
 8008496:	1ad3      	subs	r3, r2, r3
 8008498:	b29b      	uxth	r3, r3
 800849a:	4619      	mov	r1, r3
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 f8fb 	bl	8008698 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80084a2:	e0df      	b.n	8008664 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	1ad3      	subs	r3, r2, r3
 80084b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80084be:	b29b      	uxth	r3, r3
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	f000 80d1 	beq.w	8008668 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80084c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	f000 80cc 	beq.w	8008668 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d8:	e853 3f00 	ldrex	r3, [r3]
 80084dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80084de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	461a      	mov	r2, r3
 80084ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80084f2:	647b      	str	r3, [r7, #68]	; 0x44
 80084f4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80084f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80084fa:	e841 2300 	strex	r3, r2, [r1]
 80084fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008502:	2b00      	cmp	r3, #0
 8008504:	d1e4      	bne.n	80084d0 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	3308      	adds	r3, #8
 800850c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800850e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008510:	e853 3f00 	ldrex	r3, [r3]
 8008514:	623b      	str	r3, [r7, #32]
   return(result);
 8008516:	6a3b      	ldr	r3, [r7, #32]
 8008518:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800851c:	f023 0301 	bic.w	r3, r3, #1
 8008520:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	3308      	adds	r3, #8
 800852a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800852e:	633a      	str	r2, [r7, #48]	; 0x30
 8008530:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008532:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008534:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008536:	e841 2300 	strex	r3, r2, [r1]
 800853a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800853c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800853e:	2b00      	cmp	r3, #0
 8008540:	d1e1      	bne.n	8008506 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2220      	movs	r2, #32
 8008546:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2200      	movs	r2, #0
 800854e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2200      	movs	r2, #0
 8008554:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	e853 3f00 	ldrex	r3, [r3]
 8008562:	60fb      	str	r3, [r7, #12]
   return(result);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f023 0310 	bic.w	r3, r3, #16
 800856a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	461a      	mov	r2, r3
 8008574:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008578:	61fb      	str	r3, [r7, #28]
 800857a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800857c:	69b9      	ldr	r1, [r7, #24]
 800857e:	69fa      	ldr	r2, [r7, #28]
 8008580:	e841 2300 	strex	r3, r2, [r1]
 8008584:	617b      	str	r3, [r7, #20]
   return(result);
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d1e4      	bne.n	8008556 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2202      	movs	r2, #2
 8008590:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008592:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008596:	4619      	mov	r1, r3
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 f87d 	bl	8008698 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800859e:	e063      	b.n	8008668 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80085a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d00e      	beq.n	80085ca <HAL_UART_IRQHandler+0x59e>
 80085ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80085b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d008      	beq.n	80085ca <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80085c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f001 fc5e 	bl	8009e84 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80085c8:	e051      	b.n	800866e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80085ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d014      	beq.n	8008600 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80085d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d105      	bne.n	80085ee <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80085e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80085e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d008      	beq.n	8008600 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d03a      	beq.n	800866c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	4798      	blx	r3
    }
    return;
 80085fe:	e035      	b.n	800866c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008608:	2b00      	cmp	r3, #0
 800860a:	d009      	beq.n	8008620 <HAL_UART_IRQHandler+0x5f4>
 800860c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008614:	2b00      	cmp	r3, #0
 8008616:	d003      	beq.n	8008620 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 feeb 	bl	80093f4 <UART_EndTransmit_IT>
    return;
 800861e:	e026      	b.n	800866e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008624:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008628:	2b00      	cmp	r3, #0
 800862a:	d009      	beq.n	8008640 <HAL_UART_IRQHandler+0x614>
 800862c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008630:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008634:	2b00      	cmp	r3, #0
 8008636:	d003      	beq.n	8008640 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f001 fc35 	bl	8009ea8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800863e:	e016      	b.n	800866e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008644:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008648:	2b00      	cmp	r3, #0
 800864a:	d010      	beq.n	800866e <HAL_UART_IRQHandler+0x642>
 800864c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008650:	2b00      	cmp	r3, #0
 8008652:	da0c      	bge.n	800866e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f001 fc1e 	bl	8009e96 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800865a:	e008      	b.n	800866e <HAL_UART_IRQHandler+0x642>
      return;
 800865c:	bf00      	nop
 800865e:	e006      	b.n	800866e <HAL_UART_IRQHandler+0x642>
    return;
 8008660:	bf00      	nop
 8008662:	e004      	b.n	800866e <HAL_UART_IRQHandler+0x642>
      return;
 8008664:	bf00      	nop
 8008666:	e002      	b.n	800866e <HAL_UART_IRQHandler+0x642>
      return;
 8008668:	bf00      	nop
 800866a:	e000      	b.n	800866e <HAL_UART_IRQHandler+0x642>
    return;
 800866c:	bf00      	nop
  }
}
 800866e:	37e8      	adds	r7, #232	; 0xe8
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008674:	b480      	push	{r7}
 8008676:	b083      	sub	sp, #12
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800867c:	bf00      	nop
 800867e:	370c      	adds	r7, #12
 8008680:	46bd      	mov	sp, r7
 8008682:	bc80      	pop	{r7}
 8008684:	4770      	bx	lr

08008686 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008686:	b480      	push	{r7}
 8008688:	b083      	sub	sp, #12
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800868e:	bf00      	nop
 8008690:	370c      	adds	r7, #12
 8008692:	46bd      	mov	sp, r7
 8008694:	bc80      	pop	{r7}
 8008696:	4770      	bx	lr

08008698 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008698:	b480      	push	{r7}
 800869a:	b083      	sub	sp, #12
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	460b      	mov	r3, r1
 80086a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80086a4:	bf00      	nop
 80086a6:	370c      	adds	r7, #12
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bc80      	pop	{r7}
 80086ac:	4770      	bx	lr
	...

080086b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80086b4:	b08c      	sub	sp, #48	; 0x30
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80086ba:	2300      	movs	r3, #0
 80086bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	689a      	ldr	r2, [r3, #8]
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	691b      	ldr	r3, [r3, #16]
 80086c8:	431a      	orrs	r2, r3
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	695b      	ldr	r3, [r3, #20]
 80086ce:	431a      	orrs	r2, r3
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	69db      	ldr	r3, [r3, #28]
 80086d4:	4313      	orrs	r3, r2
 80086d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	681a      	ldr	r2, [r3, #0]
 80086de:	4b94      	ldr	r3, [pc, #592]	; (8008930 <UART_SetConfig+0x280>)
 80086e0:	4013      	ands	r3, r2
 80086e2:	697a      	ldr	r2, [r7, #20]
 80086e4:	6812      	ldr	r2, [r2, #0]
 80086e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80086e8:	430b      	orrs	r3, r1
 80086ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	68da      	ldr	r2, [r3, #12]
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	430a      	orrs	r2, r1
 8008700:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	699b      	ldr	r3, [r3, #24]
 8008706:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a89      	ldr	r2, [pc, #548]	; (8008934 <UART_SetConfig+0x284>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d004      	beq.n	800871c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	6a1b      	ldr	r3, [r3, #32]
 8008716:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008718:	4313      	orrs	r3, r2
 800871a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008726:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800872a:	697a      	ldr	r2, [r7, #20]
 800872c:	6812      	ldr	r2, [r2, #0]
 800872e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008730:	430b      	orrs	r3, r1
 8008732:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800873a:	f023 010f 	bic.w	r1, r3, #15
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	430a      	orrs	r2, r1
 8008748:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a7a      	ldr	r2, [pc, #488]	; (8008938 <UART_SetConfig+0x288>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d127      	bne.n	80087a4 <UART_SetConfig+0xf4>
 8008754:	2003      	movs	r0, #3
 8008756:	f7ff fb2b 	bl	8007db0 <LL_RCC_GetUSARTClockSource>
 800875a:	4603      	mov	r3, r0
 800875c:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8008760:	2b03      	cmp	r3, #3
 8008762:	d81b      	bhi.n	800879c <UART_SetConfig+0xec>
 8008764:	a201      	add	r2, pc, #4	; (adr r2, 800876c <UART_SetConfig+0xbc>)
 8008766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800876a:	bf00      	nop
 800876c:	0800877d 	.word	0x0800877d
 8008770:	0800878d 	.word	0x0800878d
 8008774:	08008785 	.word	0x08008785
 8008778:	08008795 	.word	0x08008795
 800877c:	2301      	movs	r3, #1
 800877e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008782:	e080      	b.n	8008886 <UART_SetConfig+0x1d6>
 8008784:	2302      	movs	r3, #2
 8008786:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800878a:	e07c      	b.n	8008886 <UART_SetConfig+0x1d6>
 800878c:	2304      	movs	r3, #4
 800878e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008792:	e078      	b.n	8008886 <UART_SetConfig+0x1d6>
 8008794:	2308      	movs	r3, #8
 8008796:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800879a:	e074      	b.n	8008886 <UART_SetConfig+0x1d6>
 800879c:	2310      	movs	r3, #16
 800879e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087a2:	e070      	b.n	8008886 <UART_SetConfig+0x1d6>
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a64      	ldr	r2, [pc, #400]	; (800893c <UART_SetConfig+0x28c>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d138      	bne.n	8008820 <UART_SetConfig+0x170>
 80087ae:	200c      	movs	r0, #12
 80087b0:	f7ff fafe 	bl	8007db0 <LL_RCC_GetUSARTClockSource>
 80087b4:	4603      	mov	r3, r0
 80087b6:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80087ba:	2b0c      	cmp	r3, #12
 80087bc:	d82c      	bhi.n	8008818 <UART_SetConfig+0x168>
 80087be:	a201      	add	r2, pc, #4	; (adr r2, 80087c4 <UART_SetConfig+0x114>)
 80087c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087c4:	080087f9 	.word	0x080087f9
 80087c8:	08008819 	.word	0x08008819
 80087cc:	08008819 	.word	0x08008819
 80087d0:	08008819 	.word	0x08008819
 80087d4:	08008809 	.word	0x08008809
 80087d8:	08008819 	.word	0x08008819
 80087dc:	08008819 	.word	0x08008819
 80087e0:	08008819 	.word	0x08008819
 80087e4:	08008801 	.word	0x08008801
 80087e8:	08008819 	.word	0x08008819
 80087ec:	08008819 	.word	0x08008819
 80087f0:	08008819 	.word	0x08008819
 80087f4:	08008811 	.word	0x08008811
 80087f8:	2300      	movs	r3, #0
 80087fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087fe:	e042      	b.n	8008886 <UART_SetConfig+0x1d6>
 8008800:	2302      	movs	r3, #2
 8008802:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008806:	e03e      	b.n	8008886 <UART_SetConfig+0x1d6>
 8008808:	2304      	movs	r3, #4
 800880a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800880e:	e03a      	b.n	8008886 <UART_SetConfig+0x1d6>
 8008810:	2308      	movs	r3, #8
 8008812:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008816:	e036      	b.n	8008886 <UART_SetConfig+0x1d6>
 8008818:	2310      	movs	r3, #16
 800881a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800881e:	e032      	b.n	8008886 <UART_SetConfig+0x1d6>
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4a43      	ldr	r2, [pc, #268]	; (8008934 <UART_SetConfig+0x284>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d12a      	bne.n	8008880 <UART_SetConfig+0x1d0>
 800882a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800882e:	f7ff fad1 	bl	8007dd4 <LL_RCC_GetLPUARTClockSource>
 8008832:	4603      	mov	r3, r0
 8008834:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008838:	d01a      	beq.n	8008870 <UART_SetConfig+0x1c0>
 800883a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800883e:	d81b      	bhi.n	8008878 <UART_SetConfig+0x1c8>
 8008840:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008844:	d00c      	beq.n	8008860 <UART_SetConfig+0x1b0>
 8008846:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800884a:	d815      	bhi.n	8008878 <UART_SetConfig+0x1c8>
 800884c:	2b00      	cmp	r3, #0
 800884e:	d003      	beq.n	8008858 <UART_SetConfig+0x1a8>
 8008850:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008854:	d008      	beq.n	8008868 <UART_SetConfig+0x1b8>
 8008856:	e00f      	b.n	8008878 <UART_SetConfig+0x1c8>
 8008858:	2300      	movs	r3, #0
 800885a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800885e:	e012      	b.n	8008886 <UART_SetConfig+0x1d6>
 8008860:	2302      	movs	r3, #2
 8008862:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008866:	e00e      	b.n	8008886 <UART_SetConfig+0x1d6>
 8008868:	2304      	movs	r3, #4
 800886a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800886e:	e00a      	b.n	8008886 <UART_SetConfig+0x1d6>
 8008870:	2308      	movs	r3, #8
 8008872:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008876:	e006      	b.n	8008886 <UART_SetConfig+0x1d6>
 8008878:	2310      	movs	r3, #16
 800887a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800887e:	e002      	b.n	8008886 <UART_SetConfig+0x1d6>
 8008880:	2310      	movs	r3, #16
 8008882:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a2a      	ldr	r2, [pc, #168]	; (8008934 <UART_SetConfig+0x284>)
 800888c:	4293      	cmp	r3, r2
 800888e:	f040 80a4 	bne.w	80089da <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008892:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008896:	2b08      	cmp	r3, #8
 8008898:	d823      	bhi.n	80088e2 <UART_SetConfig+0x232>
 800889a:	a201      	add	r2, pc, #4	; (adr r2, 80088a0 <UART_SetConfig+0x1f0>)
 800889c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088a0:	080088c5 	.word	0x080088c5
 80088a4:	080088e3 	.word	0x080088e3
 80088a8:	080088cd 	.word	0x080088cd
 80088ac:	080088e3 	.word	0x080088e3
 80088b0:	080088d3 	.word	0x080088d3
 80088b4:	080088e3 	.word	0x080088e3
 80088b8:	080088e3 	.word	0x080088e3
 80088bc:	080088e3 	.word	0x080088e3
 80088c0:	080088db 	.word	0x080088db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80088c4:	f7fd fe76 	bl	80065b4 <HAL_RCC_GetPCLK1Freq>
 80088c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80088ca:	e010      	b.n	80088ee <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80088cc:	4b1c      	ldr	r3, [pc, #112]	; (8008940 <UART_SetConfig+0x290>)
 80088ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80088d0:	e00d      	b.n	80088ee <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80088d2:	f7fd fdbb 	bl	800644c <HAL_RCC_GetSysClockFreq>
 80088d6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80088d8:	e009      	b.n	80088ee <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80088e0:	e005      	b.n	80088ee <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80088e2:	2300      	movs	r3, #0
 80088e4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80088e6:	2301      	movs	r3, #1
 80088e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80088ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80088ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	f000 8137 	beq.w	8008b64 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088fa:	4a12      	ldr	r2, [pc, #72]	; (8008944 <UART_SetConfig+0x294>)
 80088fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008900:	461a      	mov	r2, r3
 8008902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008904:	fbb3 f3f2 	udiv	r3, r3, r2
 8008908:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	685a      	ldr	r2, [r3, #4]
 800890e:	4613      	mov	r3, r2
 8008910:	005b      	lsls	r3, r3, #1
 8008912:	4413      	add	r3, r2
 8008914:	69ba      	ldr	r2, [r7, #24]
 8008916:	429a      	cmp	r2, r3
 8008918:	d305      	bcc.n	8008926 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008920:	69ba      	ldr	r2, [r7, #24]
 8008922:	429a      	cmp	r2, r3
 8008924:	d910      	bls.n	8008948 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8008926:	2301      	movs	r3, #1
 8008928:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800892c:	e11a      	b.n	8008b64 <UART_SetConfig+0x4b4>
 800892e:	bf00      	nop
 8008930:	cfff69f3 	.word	0xcfff69f3
 8008934:	40008000 	.word	0x40008000
 8008938:	40013800 	.word	0x40013800
 800893c:	40004400 	.word	0x40004400
 8008940:	00f42400 	.word	0x00f42400
 8008944:	0801e5dc 	.word	0x0801e5dc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894a:	2200      	movs	r2, #0
 800894c:	60bb      	str	r3, [r7, #8]
 800894e:	60fa      	str	r2, [r7, #12]
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008954:	4a8e      	ldr	r2, [pc, #568]	; (8008b90 <UART_SetConfig+0x4e0>)
 8008956:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800895a:	b29b      	uxth	r3, r3
 800895c:	2200      	movs	r2, #0
 800895e:	603b      	str	r3, [r7, #0]
 8008960:	607a      	str	r2, [r7, #4]
 8008962:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008966:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800896a:	f7f8 f91d 	bl	8000ba8 <__aeabi_uldivmod>
 800896e:	4602      	mov	r2, r0
 8008970:	460b      	mov	r3, r1
 8008972:	4610      	mov	r0, r2
 8008974:	4619      	mov	r1, r3
 8008976:	f04f 0200 	mov.w	r2, #0
 800897a:	f04f 0300 	mov.w	r3, #0
 800897e:	020b      	lsls	r3, r1, #8
 8008980:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008984:	0202      	lsls	r2, r0, #8
 8008986:	6979      	ldr	r1, [r7, #20]
 8008988:	6849      	ldr	r1, [r1, #4]
 800898a:	0849      	lsrs	r1, r1, #1
 800898c:	2000      	movs	r0, #0
 800898e:	460c      	mov	r4, r1
 8008990:	4605      	mov	r5, r0
 8008992:	eb12 0804 	adds.w	r8, r2, r4
 8008996:	eb43 0905 	adc.w	r9, r3, r5
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	2200      	movs	r2, #0
 80089a0:	469a      	mov	sl, r3
 80089a2:	4693      	mov	fp, r2
 80089a4:	4652      	mov	r2, sl
 80089a6:	465b      	mov	r3, fp
 80089a8:	4640      	mov	r0, r8
 80089aa:	4649      	mov	r1, r9
 80089ac:	f7f8 f8fc 	bl	8000ba8 <__aeabi_uldivmod>
 80089b0:	4602      	mov	r2, r0
 80089b2:	460b      	mov	r3, r1
 80089b4:	4613      	mov	r3, r2
 80089b6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80089b8:	6a3b      	ldr	r3, [r7, #32]
 80089ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089be:	d308      	bcc.n	80089d2 <UART_SetConfig+0x322>
 80089c0:	6a3b      	ldr	r3, [r7, #32]
 80089c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089c6:	d204      	bcs.n	80089d2 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	6a3a      	ldr	r2, [r7, #32]
 80089ce:	60da      	str	r2, [r3, #12]
 80089d0:	e0c8      	b.n	8008b64 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80089d2:	2301      	movs	r3, #1
 80089d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80089d8:	e0c4      	b.n	8008b64 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	69db      	ldr	r3, [r3, #28]
 80089de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089e2:	d167      	bne.n	8008ab4 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 80089e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80089e8:	2b08      	cmp	r3, #8
 80089ea:	d828      	bhi.n	8008a3e <UART_SetConfig+0x38e>
 80089ec:	a201      	add	r2, pc, #4	; (adr r2, 80089f4 <UART_SetConfig+0x344>)
 80089ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089f2:	bf00      	nop
 80089f4:	08008a19 	.word	0x08008a19
 80089f8:	08008a21 	.word	0x08008a21
 80089fc:	08008a29 	.word	0x08008a29
 8008a00:	08008a3f 	.word	0x08008a3f
 8008a04:	08008a2f 	.word	0x08008a2f
 8008a08:	08008a3f 	.word	0x08008a3f
 8008a0c:	08008a3f 	.word	0x08008a3f
 8008a10:	08008a3f 	.word	0x08008a3f
 8008a14:	08008a37 	.word	0x08008a37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a18:	f7fd fdcc 	bl	80065b4 <HAL_RCC_GetPCLK1Freq>
 8008a1c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a1e:	e014      	b.n	8008a4a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a20:	f7fd fdda 	bl	80065d8 <HAL_RCC_GetPCLK2Freq>
 8008a24:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a26:	e010      	b.n	8008a4a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a28:	4b5a      	ldr	r3, [pc, #360]	; (8008b94 <UART_SetConfig+0x4e4>)
 8008a2a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008a2c:	e00d      	b.n	8008a4a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a2e:	f7fd fd0d 	bl	800644c <HAL_RCC_GetSysClockFreq>
 8008a32:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a34:	e009      	b.n	8008a4a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008a3c:	e005      	b.n	8008a4a <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008a42:	2301      	movs	r3, #1
 8008a44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008a48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	f000 8089 	beq.w	8008b64 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a56:	4a4e      	ldr	r2, [pc, #312]	; (8008b90 <UART_SetConfig+0x4e0>)
 8008a58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a60:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a64:	005a      	lsls	r2, r3, #1
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	085b      	lsrs	r3, r3, #1
 8008a6c:	441a      	add	r2, r3
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a76:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a78:	6a3b      	ldr	r3, [r7, #32]
 8008a7a:	2b0f      	cmp	r3, #15
 8008a7c:	d916      	bls.n	8008aac <UART_SetConfig+0x3fc>
 8008a7e:	6a3b      	ldr	r3, [r7, #32]
 8008a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a84:	d212      	bcs.n	8008aac <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008a86:	6a3b      	ldr	r3, [r7, #32]
 8008a88:	b29b      	uxth	r3, r3
 8008a8a:	f023 030f 	bic.w	r3, r3, #15
 8008a8e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008a90:	6a3b      	ldr	r3, [r7, #32]
 8008a92:	085b      	lsrs	r3, r3, #1
 8008a94:	b29b      	uxth	r3, r3
 8008a96:	f003 0307 	and.w	r3, r3, #7
 8008a9a:	b29a      	uxth	r2, r3
 8008a9c:	8bfb      	ldrh	r3, [r7, #30]
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	8bfa      	ldrh	r2, [r7, #30]
 8008aa8:	60da      	str	r2, [r3, #12]
 8008aaa:	e05b      	b.n	8008b64 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8008aac:	2301      	movs	r3, #1
 8008aae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008ab2:	e057      	b.n	8008b64 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008ab4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008ab8:	2b08      	cmp	r3, #8
 8008aba:	d828      	bhi.n	8008b0e <UART_SetConfig+0x45e>
 8008abc:	a201      	add	r2, pc, #4	; (adr r2, 8008ac4 <UART_SetConfig+0x414>)
 8008abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ac2:	bf00      	nop
 8008ac4:	08008ae9 	.word	0x08008ae9
 8008ac8:	08008af1 	.word	0x08008af1
 8008acc:	08008af9 	.word	0x08008af9
 8008ad0:	08008b0f 	.word	0x08008b0f
 8008ad4:	08008aff 	.word	0x08008aff
 8008ad8:	08008b0f 	.word	0x08008b0f
 8008adc:	08008b0f 	.word	0x08008b0f
 8008ae0:	08008b0f 	.word	0x08008b0f
 8008ae4:	08008b07 	.word	0x08008b07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ae8:	f7fd fd64 	bl	80065b4 <HAL_RCC_GetPCLK1Freq>
 8008aec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008aee:	e014      	b.n	8008b1a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008af0:	f7fd fd72 	bl	80065d8 <HAL_RCC_GetPCLK2Freq>
 8008af4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008af6:	e010      	b.n	8008b1a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008af8:	4b26      	ldr	r3, [pc, #152]	; (8008b94 <UART_SetConfig+0x4e4>)
 8008afa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008afc:	e00d      	b.n	8008b1a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008afe:	f7fd fca5 	bl	800644c <HAL_RCC_GetSysClockFreq>
 8008b02:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008b04:	e009      	b.n	8008b1a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008b0c:	e005      	b.n	8008b1a <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008b12:	2301      	movs	r3, #1
 8008b14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008b18:	bf00      	nop
    }

    if (pclk != 0U)
 8008b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d021      	beq.n	8008b64 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b24:	4a1a      	ldr	r2, [pc, #104]	; (8008b90 <UART_SetConfig+0x4e0>)
 8008b26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	085b      	lsrs	r3, r3, #1
 8008b38:	441a      	add	r2, r3
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b42:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b44:	6a3b      	ldr	r3, [r7, #32]
 8008b46:	2b0f      	cmp	r3, #15
 8008b48:	d909      	bls.n	8008b5e <UART_SetConfig+0x4ae>
 8008b4a:	6a3b      	ldr	r3, [r7, #32]
 8008b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b50:	d205      	bcs.n	8008b5e <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008b52:	6a3b      	ldr	r3, [r7, #32]
 8008b54:	b29a      	uxth	r2, r3
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	60da      	str	r2, [r3, #12]
 8008b5c:	e002      	b.n	8008b64 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8008b5e:	2301      	movs	r3, #1
 8008b60:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	2201      	movs	r2, #1
 8008b68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	2201      	movs	r2, #1
 8008b70:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	2200      	movs	r2, #0
 8008b78:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008b80:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3730      	adds	r7, #48	; 0x30
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b8e:	bf00      	nop
 8008b90:	0801e5dc 	.word	0x0801e5dc
 8008b94:	00f42400 	.word	0x00f42400

08008b98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b083      	sub	sp, #12
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ba4:	f003 0301 	and.w	r3, r3, #1
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d00a      	beq.n	8008bc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	430a      	orrs	r2, r1
 8008bc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bc6:	f003 0302 	and.w	r3, r3, #2
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d00a      	beq.n	8008be4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	430a      	orrs	r2, r1
 8008be2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008be8:	f003 0304 	and.w	r3, r3, #4
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d00a      	beq.n	8008c06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	430a      	orrs	r2, r1
 8008c04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c0a:	f003 0308 	and.w	r3, r3, #8
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d00a      	beq.n	8008c28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	430a      	orrs	r2, r1
 8008c26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c2c:	f003 0310 	and.w	r3, r3, #16
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d00a      	beq.n	8008c4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	689b      	ldr	r3, [r3, #8]
 8008c3a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	430a      	orrs	r2, r1
 8008c48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c4e:	f003 0320 	and.w	r3, r3, #32
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d00a      	beq.n	8008c6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	689b      	ldr	r3, [r3, #8]
 8008c5c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	430a      	orrs	r2, r1
 8008c6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d01a      	beq.n	8008cae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	430a      	orrs	r2, r1
 8008c8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c96:	d10a      	bne.n	8008cae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	430a      	orrs	r2, r1
 8008cac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d00a      	beq.n	8008cd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	685b      	ldr	r3, [r3, #4]
 8008cc0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	430a      	orrs	r2, r1
 8008cce:	605a      	str	r2, [r3, #4]
  }
}
 8008cd0:	bf00      	nop
 8008cd2:	370c      	adds	r7, #12
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bc80      	pop	{r7}
 8008cd8:	4770      	bx	lr

08008cda <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008cda:	b580      	push	{r7, lr}
 8008cdc:	b086      	sub	sp, #24
 8008cde:	af02      	add	r7, sp, #8
 8008ce0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008cea:	f7f9 fa77 	bl	80021dc <HAL_GetTick>
 8008cee:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f003 0308 	and.w	r3, r3, #8
 8008cfa:	2b08      	cmp	r3, #8
 8008cfc:	d10e      	bne.n	8008d1c <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008cfe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d02:	9300      	str	r3, [sp, #0]
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2200      	movs	r2, #0
 8008d08:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f000 f832 	bl	8008d76 <UART_WaitOnFlagUntilTimeout>
 8008d12:	4603      	mov	r3, r0
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d001      	beq.n	8008d1c <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d18:	2303      	movs	r3, #3
 8008d1a:	e028      	b.n	8008d6e <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f003 0304 	and.w	r3, r3, #4
 8008d26:	2b04      	cmp	r3, #4
 8008d28:	d10e      	bne.n	8008d48 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d2a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d2e:	9300      	str	r3, [sp, #0]
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	2200      	movs	r2, #0
 8008d34:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 f81c 	bl	8008d76 <UART_WaitOnFlagUntilTimeout>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d001      	beq.n	8008d48 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d44:	2303      	movs	r3, #3
 8008d46:	e012      	b.n	8008d6e <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2220      	movs	r2, #32
 8008d4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2220      	movs	r2, #32
 8008d54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2200      	movs	r2, #0
 8008d62:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2200      	movs	r2, #0
 8008d68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008d6c:	2300      	movs	r3, #0
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3710      	adds	r7, #16
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}

08008d76 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008d76:	b580      	push	{r7, lr}
 8008d78:	b09c      	sub	sp, #112	; 0x70
 8008d7a:	af00      	add	r7, sp, #0
 8008d7c:	60f8      	str	r0, [r7, #12]
 8008d7e:	60b9      	str	r1, [r7, #8]
 8008d80:	603b      	str	r3, [r7, #0]
 8008d82:	4613      	mov	r3, r2
 8008d84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d86:	e0a9      	b.n	8008edc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d8e:	f000 80a5 	beq.w	8008edc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d92:	f7f9 fa23 	bl	80021dc <HAL_GetTick>
 8008d96:	4602      	mov	r2, r0
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	1ad3      	subs	r3, r2, r3
 8008d9c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d302      	bcc.n	8008da8 <UART_WaitOnFlagUntilTimeout+0x32>
 8008da2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d140      	bne.n	8008e2a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008db0:	e853 3f00 	ldrex	r3, [r3]
 8008db4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008db6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008db8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008dbc:	667b      	str	r3, [r7, #100]	; 0x64
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	461a      	mov	r2, r3
 8008dc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008dc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008dc8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008dcc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008dce:	e841 2300 	strex	r3, r2, [r1]
 8008dd2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008dd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d1e6      	bne.n	8008da8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	3308      	adds	r3, #8
 8008de0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008de4:	e853 3f00 	ldrex	r3, [r3]
 8008de8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dec:	f023 0301 	bic.w	r3, r3, #1
 8008df0:	663b      	str	r3, [r7, #96]	; 0x60
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	3308      	adds	r3, #8
 8008df8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008dfa:	64ba      	str	r2, [r7, #72]	; 0x48
 8008dfc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dfe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008e00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e02:	e841 2300 	strex	r3, r2, [r1]
 8008e06:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008e08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d1e5      	bne.n	8008dda <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	2220      	movs	r2, #32
 8008e12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2220      	movs	r2, #32
 8008e1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2200      	movs	r2, #0
 8008e22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8008e26:	2303      	movs	r3, #3
 8008e28:	e069      	b.n	8008efe <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f003 0304 	and.w	r3, r3, #4
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d051      	beq.n	8008edc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	69db      	ldr	r3, [r3, #28]
 8008e3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e46:	d149      	bne.n	8008edc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008e50:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e5a:	e853 3f00 	ldrex	r3, [r3]
 8008e5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e62:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008e66:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	461a      	mov	r2, r3
 8008e6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e70:	637b      	str	r3, [r7, #52]	; 0x34
 8008e72:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008e76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e78:	e841 2300 	strex	r3, r2, [r1]
 8008e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d1e6      	bne.n	8008e52 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	3308      	adds	r3, #8
 8008e8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	e853 3f00 	ldrex	r3, [r3]
 8008e92:	613b      	str	r3, [r7, #16]
   return(result);
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	f023 0301 	bic.w	r3, r3, #1
 8008e9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	3308      	adds	r3, #8
 8008ea2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008ea4:	623a      	str	r2, [r7, #32]
 8008ea6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea8:	69f9      	ldr	r1, [r7, #28]
 8008eaa:	6a3a      	ldr	r2, [r7, #32]
 8008eac:	e841 2300 	strex	r3, r2, [r1]
 8008eb0:	61bb      	str	r3, [r7, #24]
   return(result);
 8008eb2:	69bb      	ldr	r3, [r7, #24]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d1e5      	bne.n	8008e84 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2220      	movs	r2, #32
 8008ebc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	2220      	movs	r2, #32
 8008ec4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2220      	movs	r2, #32
 8008ecc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008ed8:	2303      	movs	r3, #3
 8008eda:	e010      	b.n	8008efe <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	69da      	ldr	r2, [r3, #28]
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	4013      	ands	r3, r2
 8008ee6:	68ba      	ldr	r2, [r7, #8]
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	bf0c      	ite	eq
 8008eec:	2301      	moveq	r3, #1
 8008eee:	2300      	movne	r3, #0
 8008ef0:	b2db      	uxtb	r3, r3
 8008ef2:	461a      	mov	r2, r3
 8008ef4:	79fb      	ldrb	r3, [r7, #7]
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	f43f af46 	beq.w	8008d88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008efc:	2300      	movs	r3, #0
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3770      	adds	r7, #112	; 0x70
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}
	...

08008f08 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b0a3      	sub	sp, #140	; 0x8c
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	60f8      	str	r0, [r7, #12]
 8008f10:	60b9      	str	r1, [r7, #8]
 8008f12:	4613      	mov	r3, r2
 8008f14:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	68ba      	ldr	r2, [r7, #8]
 8008f1a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	88fa      	ldrh	r2, [r7, #6]
 8008f20:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	88fa      	ldrh	r2, [r7, #6]
 8008f28:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	689b      	ldr	r3, [r3, #8]
 8008f36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f3a:	d10e      	bne.n	8008f5a <UART_Start_Receive_IT+0x52>
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	691b      	ldr	r3, [r3, #16]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d105      	bne.n	8008f50 <UART_Start_Receive_IT+0x48>
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008f4a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f4e:	e02d      	b.n	8008fac <UART_Start_Receive_IT+0xa4>
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	22ff      	movs	r2, #255	; 0xff
 8008f54:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f58:	e028      	b.n	8008fac <UART_Start_Receive_IT+0xa4>
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	689b      	ldr	r3, [r3, #8]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d10d      	bne.n	8008f7e <UART_Start_Receive_IT+0x76>
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	691b      	ldr	r3, [r3, #16]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d104      	bne.n	8008f74 <UART_Start_Receive_IT+0x6c>
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	22ff      	movs	r2, #255	; 0xff
 8008f6e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f72:	e01b      	b.n	8008fac <UART_Start_Receive_IT+0xa4>
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	227f      	movs	r2, #127	; 0x7f
 8008f78:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f7c:	e016      	b.n	8008fac <UART_Start_Receive_IT+0xa4>
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	689b      	ldr	r3, [r3, #8]
 8008f82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f86:	d10d      	bne.n	8008fa4 <UART_Start_Receive_IT+0x9c>
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	691b      	ldr	r3, [r3, #16]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d104      	bne.n	8008f9a <UART_Start_Receive_IT+0x92>
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	227f      	movs	r2, #127	; 0x7f
 8008f94:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f98:	e008      	b.n	8008fac <UART_Start_Receive_IT+0xa4>
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	223f      	movs	r2, #63	; 0x3f
 8008f9e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008fa2:	e003      	b.n	8008fac <UART_Start_Receive_IT+0xa4>
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	2222      	movs	r2, #34	; 0x22
 8008fb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	3308      	adds	r3, #8
 8008fc2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008fc6:	e853 3f00 	ldrex	r3, [r3]
 8008fca:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008fcc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008fce:	f043 0301 	orr.w	r3, r3, #1
 8008fd2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	3308      	adds	r3, #8
 8008fdc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008fe0:	673a      	str	r2, [r7, #112]	; 0x70
 8008fe2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008fe6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008fe8:	e841 2300 	strex	r3, r2, [r1]
 8008fec:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008fee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d1e3      	bne.n	8008fbc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ff8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ffc:	d14f      	bne.n	800909e <UART_Start_Receive_IT+0x196>
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009004:	88fa      	ldrh	r2, [r7, #6]
 8009006:	429a      	cmp	r2, r3
 8009008:	d349      	bcc.n	800909e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	689b      	ldr	r3, [r3, #8]
 800900e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009012:	d107      	bne.n	8009024 <UART_Start_Receive_IT+0x11c>
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	691b      	ldr	r3, [r3, #16]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d103      	bne.n	8009024 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	4a46      	ldr	r2, [pc, #280]	; (8009138 <UART_Start_Receive_IT+0x230>)
 8009020:	675a      	str	r2, [r3, #116]	; 0x74
 8009022:	e002      	b.n	800902a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	4a45      	ldr	r2, [pc, #276]	; (800913c <UART_Start_Receive_IT+0x234>)
 8009028:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	691b      	ldr	r3, [r3, #16]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d01a      	beq.n	8009068 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009038:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800903a:	e853 3f00 	ldrex	r3, [r3]
 800903e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009040:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009042:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009046:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	461a      	mov	r2, r3
 8009050:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009054:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009056:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009058:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800905a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800905c:	e841 2300 	strex	r3, r2, [r1]
 8009060:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009062:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009064:	2b00      	cmp	r3, #0
 8009066:	d1e4      	bne.n	8009032 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	3308      	adds	r3, #8
 800906e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009072:	e853 3f00 	ldrex	r3, [r3]
 8009076:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800907a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800907e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	3308      	adds	r3, #8
 8009086:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009088:	64ba      	str	r2, [r7, #72]	; 0x48
 800908a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800908c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800908e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009090:	e841 2300 	strex	r3, r2, [r1]
 8009094:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009098:	2b00      	cmp	r3, #0
 800909a:	d1e5      	bne.n	8009068 <UART_Start_Receive_IT+0x160>
 800909c:	e046      	b.n	800912c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	689b      	ldr	r3, [r3, #8]
 80090a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090a6:	d107      	bne.n	80090b8 <UART_Start_Receive_IT+0x1b0>
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	691b      	ldr	r3, [r3, #16]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d103      	bne.n	80090b8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	4a23      	ldr	r2, [pc, #140]	; (8009140 <UART_Start_Receive_IT+0x238>)
 80090b4:	675a      	str	r2, [r3, #116]	; 0x74
 80090b6:	e002      	b.n	80090be <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	4a22      	ldr	r2, [pc, #136]	; (8009144 <UART_Start_Receive_IT+0x23c>)
 80090bc:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	691b      	ldr	r3, [r3, #16]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d019      	beq.n	80090fa <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ce:	e853 3f00 	ldrex	r3, [r3]
 80090d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80090d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80090da:	677b      	str	r3, [r7, #116]	; 0x74
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	461a      	mov	r2, r3
 80090e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090e4:	637b      	str	r3, [r7, #52]	; 0x34
 80090e6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80090ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80090ec:	e841 2300 	strex	r3, r2, [r1]
 80090f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80090f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d1e6      	bne.n	80090c6 <UART_Start_Receive_IT+0x1be>
 80090f8:	e018      	b.n	800912c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	e853 3f00 	ldrex	r3, [r3]
 8009106:	613b      	str	r3, [r7, #16]
   return(result);
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	f043 0320 	orr.w	r3, r3, #32
 800910e:	67bb      	str	r3, [r7, #120]	; 0x78
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	461a      	mov	r2, r3
 8009116:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009118:	623b      	str	r3, [r7, #32]
 800911a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800911c:	69f9      	ldr	r1, [r7, #28]
 800911e:	6a3a      	ldr	r2, [r7, #32]
 8009120:	e841 2300 	strex	r3, r2, [r1]
 8009124:	61bb      	str	r3, [r7, #24]
   return(result);
 8009126:	69bb      	ldr	r3, [r7, #24]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d1e6      	bne.n	80090fa <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800912c:	2300      	movs	r3, #0
}
 800912e:	4618      	mov	r0, r3
 8009130:	378c      	adds	r7, #140	; 0x8c
 8009132:	46bd      	mov	sp, r7
 8009134:	bc80      	pop	{r7}
 8009136:	4770      	bx	lr
 8009138:	08009b1d 	.word	0x08009b1d
 800913c:	080097bd 	.word	0x080097bd
 8009140:	08009605 	.word	0x08009605
 8009144:	0800944d 	.word	0x0800944d

08009148 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009148:	b480      	push	{r7}
 800914a:	b08f      	sub	sp, #60	; 0x3c
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009156:	6a3b      	ldr	r3, [r7, #32]
 8009158:	e853 3f00 	ldrex	r3, [r3]
 800915c:	61fb      	str	r3, [r7, #28]
   return(result);
 800915e:	69fb      	ldr	r3, [r7, #28]
 8009160:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009164:	637b      	str	r3, [r7, #52]	; 0x34
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	461a      	mov	r2, r3
 800916c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800916e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009170:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009172:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009174:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009176:	e841 2300 	strex	r3, r2, [r1]
 800917a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800917c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800917e:	2b00      	cmp	r3, #0
 8009180:	d1e6      	bne.n	8009150 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	3308      	adds	r3, #8
 8009188:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	e853 3f00 	ldrex	r3, [r3]
 8009190:	60bb      	str	r3, [r7, #8]
   return(result);
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009198:	633b      	str	r3, [r7, #48]	; 0x30
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	3308      	adds	r3, #8
 80091a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091a2:	61ba      	str	r2, [r7, #24]
 80091a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a6:	6979      	ldr	r1, [r7, #20]
 80091a8:	69ba      	ldr	r2, [r7, #24]
 80091aa:	e841 2300 	strex	r3, r2, [r1]
 80091ae:	613b      	str	r3, [r7, #16]
   return(result);
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d1e5      	bne.n	8009182 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2220      	movs	r2, #32
 80091ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80091be:	bf00      	nop
 80091c0:	373c      	adds	r7, #60	; 0x3c
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bc80      	pop	{r7}
 80091c6:	4770      	bx	lr

080091c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b095      	sub	sp, #84	; 0x54
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091d8:	e853 3f00 	ldrex	r3, [r3]
 80091dc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80091de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80091e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	461a      	mov	r2, r3
 80091ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091ee:	643b      	str	r3, [r7, #64]	; 0x40
 80091f0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80091f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80091f6:	e841 2300 	strex	r3, r2, [r1]
 80091fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80091fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d1e6      	bne.n	80091d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	3308      	adds	r3, #8
 8009208:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800920a:	6a3b      	ldr	r3, [r7, #32]
 800920c:	e853 3f00 	ldrex	r3, [r3]
 8009210:	61fb      	str	r3, [r7, #28]
   return(result);
 8009212:	69fb      	ldr	r3, [r7, #28]
 8009214:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009218:	f023 0301 	bic.w	r3, r3, #1
 800921c:	64bb      	str	r3, [r7, #72]	; 0x48
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	3308      	adds	r3, #8
 8009224:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009226:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009228:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800922a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800922c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800922e:	e841 2300 	strex	r3, r2, [r1]
 8009232:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009236:	2b00      	cmp	r3, #0
 8009238:	d1e3      	bne.n	8009202 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800923e:	2b01      	cmp	r3, #1
 8009240:	d118      	bne.n	8009274 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	e853 3f00 	ldrex	r3, [r3]
 800924e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	f023 0310 	bic.w	r3, r3, #16
 8009256:	647b      	str	r3, [r7, #68]	; 0x44
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	461a      	mov	r2, r3
 800925e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009260:	61bb      	str	r3, [r7, #24]
 8009262:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009264:	6979      	ldr	r1, [r7, #20]
 8009266:	69ba      	ldr	r2, [r7, #24]
 8009268:	e841 2300 	strex	r3, r2, [r1]
 800926c:	613b      	str	r3, [r7, #16]
   return(result);
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d1e6      	bne.n	8009242 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2220      	movs	r2, #32
 8009278:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2200      	movs	r2, #0
 8009280:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2200      	movs	r2, #0
 8009286:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009288:	bf00      	nop
 800928a:	3754      	adds	r7, #84	; 0x54
 800928c:	46bd      	mov	sp, r7
 800928e:	bc80      	pop	{r7}
 8009290:	4770      	bx	lr

08009292 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009292:	b580      	push	{r7, lr}
 8009294:	b090      	sub	sp, #64	; 0x40
 8009296:	af00      	add	r7, sp, #0
 8009298:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800929e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f003 0320 	and.w	r3, r3, #32
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d137      	bne.n	800931e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80092ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092b0:	2200      	movs	r2, #0
 80092b2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80092b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	3308      	adds	r3, #8
 80092bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c0:	e853 3f00 	ldrex	r3, [r3]
 80092c4:	623b      	str	r3, [r7, #32]
   return(result);
 80092c6:	6a3b      	ldr	r3, [r7, #32]
 80092c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80092cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80092ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	3308      	adds	r3, #8
 80092d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092d6:	633a      	str	r2, [r7, #48]	; 0x30
 80092d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80092dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092de:	e841 2300 	strex	r3, r2, [r1]
 80092e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80092e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d1e5      	bne.n	80092b6 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80092ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	e853 3f00 	ldrex	r3, [r3]
 80092f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092fe:	637b      	str	r3, [r7, #52]	; 0x34
 8009300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	461a      	mov	r2, r3
 8009306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009308:	61fb      	str	r3, [r7, #28]
 800930a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800930c:	69b9      	ldr	r1, [r7, #24]
 800930e:	69fa      	ldr	r2, [r7, #28]
 8009310:	e841 2300 	strex	r3, r2, [r1]
 8009314:	617b      	str	r3, [r7, #20]
   return(result);
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d1e6      	bne.n	80092ea <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800931c:	e002      	b.n	8009324 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800931e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009320:	f7f9 fbf8 	bl	8002b14 <HAL_UART_TxCpltCallback>
}
 8009324:	bf00      	nop
 8009326:	3740      	adds	r7, #64	; 0x40
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b084      	sub	sp, #16
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009338:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800933a:	68f8      	ldr	r0, [r7, #12]
 800933c:	f7ff f99a 	bl	8008674 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009340:	bf00      	nop
 8009342:	3710      	adds	r7, #16
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}

08009348 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b086      	sub	sp, #24
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009354:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800935c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009364:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	689b      	ldr	r3, [r3, #8]
 800936c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009370:	2b80      	cmp	r3, #128	; 0x80
 8009372:	d109      	bne.n	8009388 <UART_DMAError+0x40>
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	2b21      	cmp	r3, #33	; 0x21
 8009378:	d106      	bne.n	8009388 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	2200      	movs	r2, #0
 800937e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8009382:	6978      	ldr	r0, [r7, #20]
 8009384:	f7ff fee0 	bl	8009148 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	689b      	ldr	r3, [r3, #8]
 800938e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009392:	2b40      	cmp	r3, #64	; 0x40
 8009394:	d109      	bne.n	80093aa <UART_DMAError+0x62>
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2b22      	cmp	r3, #34	; 0x22
 800939a:	d106      	bne.n	80093aa <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	2200      	movs	r2, #0
 80093a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80093a4:	6978      	ldr	r0, [r7, #20]
 80093a6:	f7ff ff0f 	bl	80091c8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093b0:	f043 0210 	orr.w	r2, r3, #16
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80093ba:	6978      	ldr	r0, [r7, #20]
 80093bc:	f7ff f963 	bl	8008686 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093c0:	bf00      	nop
 80093c2:	3718      	adds	r7, #24
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}

080093c8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b084      	sub	sp, #16
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	2200      	movs	r2, #0
 80093da:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	2200      	movs	r2, #0
 80093e2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80093e6:	68f8      	ldr	r0, [r7, #12]
 80093e8:	f7ff f94d 	bl	8008686 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093ec:	bf00      	nop
 80093ee:	3710      	adds	r7, #16
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b088      	sub	sp, #32
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	e853 3f00 	ldrex	r3, [r3]
 8009408:	60bb      	str	r3, [r7, #8]
   return(result);
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009410:	61fb      	str	r3, [r7, #28]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	461a      	mov	r2, r3
 8009418:	69fb      	ldr	r3, [r7, #28]
 800941a:	61bb      	str	r3, [r7, #24]
 800941c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800941e:	6979      	ldr	r1, [r7, #20]
 8009420:	69ba      	ldr	r2, [r7, #24]
 8009422:	e841 2300 	strex	r3, r2, [r1]
 8009426:	613b      	str	r3, [r7, #16]
   return(result);
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d1e6      	bne.n	80093fc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2220      	movs	r2, #32
 8009432:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2200      	movs	r2, #0
 800943a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f7f9 fb69 	bl	8002b14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009442:	bf00      	nop
 8009444:	3720      	adds	r7, #32
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}
	...

0800944c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b09c      	sub	sp, #112	; 0x70
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800945a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009464:	2b22      	cmp	r3, #34	; 0x22
 8009466:	f040 80be 	bne.w	80095e6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009470:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009474:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009478:	b2d9      	uxtb	r1, r3
 800947a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800947e:	b2da      	uxtb	r2, r3
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009484:	400a      	ands	r2, r1
 8009486:	b2d2      	uxtb	r2, r2
 8009488:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800948e:	1c5a      	adds	r2, r3, #1
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800949a:	b29b      	uxth	r3, r3
 800949c:	3b01      	subs	r3, #1
 800949e:	b29a      	uxth	r2, r3
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80094ac:	b29b      	uxth	r3, r3
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	f040 80a1 	bne.w	80095f6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094bc:	e853 3f00 	ldrex	r3, [r3]
 80094c0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80094c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80094c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	461a      	mov	r2, r3
 80094d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80094d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80094d4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80094d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80094da:	e841 2300 	strex	r3, r2, [r1]
 80094de:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80094e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d1e6      	bne.n	80094b4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	3308      	adds	r3, #8
 80094ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f0:	e853 3f00 	ldrex	r3, [r3]
 80094f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80094f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094f8:	f023 0301 	bic.w	r3, r3, #1
 80094fc:	667b      	str	r3, [r7, #100]	; 0x64
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	3308      	adds	r3, #8
 8009504:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009506:	647a      	str	r2, [r7, #68]	; 0x44
 8009508:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800950a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800950c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800950e:	e841 2300 	strex	r3, r2, [r1]
 8009512:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009516:	2b00      	cmp	r3, #0
 8009518:	d1e5      	bne.n	80094e6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2220      	movs	r2, #32
 800951e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2200      	movs	r2, #0
 8009526:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2200      	movs	r2, #0
 800952c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	4a33      	ldr	r2, [pc, #204]	; (8009600 <UART_RxISR_8BIT+0x1b4>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d01f      	beq.n	8009578 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	685b      	ldr	r3, [r3, #4]
 800953e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009542:	2b00      	cmp	r3, #0
 8009544:	d018      	beq.n	8009578 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800954c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800954e:	e853 3f00 	ldrex	r3, [r3]
 8009552:	623b      	str	r3, [r7, #32]
   return(result);
 8009554:	6a3b      	ldr	r3, [r7, #32]
 8009556:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800955a:	663b      	str	r3, [r7, #96]	; 0x60
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	461a      	mov	r2, r3
 8009562:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009564:	633b      	str	r3, [r7, #48]	; 0x30
 8009566:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009568:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800956a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800956c:	e841 2300 	strex	r3, r2, [r1]
 8009570:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009574:	2b00      	cmp	r3, #0
 8009576:	d1e6      	bne.n	8009546 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800957c:	2b01      	cmp	r3, #1
 800957e:	d12e      	bne.n	80095de <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2200      	movs	r2, #0
 8009584:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	e853 3f00 	ldrex	r3, [r3]
 8009592:	60fb      	str	r3, [r7, #12]
   return(result);
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	f023 0310 	bic.w	r3, r3, #16
 800959a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	461a      	mov	r2, r3
 80095a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80095a4:	61fb      	str	r3, [r7, #28]
 80095a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a8:	69b9      	ldr	r1, [r7, #24]
 80095aa:	69fa      	ldr	r2, [r7, #28]
 80095ac:	e841 2300 	strex	r3, r2, [r1]
 80095b0:	617b      	str	r3, [r7, #20]
   return(result);
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d1e6      	bne.n	8009586 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	69db      	ldr	r3, [r3, #28]
 80095be:	f003 0310 	and.w	r3, r3, #16
 80095c2:	2b10      	cmp	r3, #16
 80095c4:	d103      	bne.n	80095ce <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	2210      	movs	r2, #16
 80095cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80095d4:	4619      	mov	r1, r3
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f7ff f85e 	bl	8008698 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80095dc:	e00b      	b.n	80095f6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f7f9 faae 	bl	8002b40 <HAL_UART_RxCpltCallback>
}
 80095e4:	e007      	b.n	80095f6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	699a      	ldr	r2, [r3, #24]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f042 0208 	orr.w	r2, r2, #8
 80095f4:	619a      	str	r2, [r3, #24]
}
 80095f6:	bf00      	nop
 80095f8:	3770      	adds	r7, #112	; 0x70
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}
 80095fe:	bf00      	nop
 8009600:	40008000 	.word	0x40008000

08009604 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b09c      	sub	sp, #112	; 0x70
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009612:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800961c:	2b22      	cmp	r3, #34	; 0x22
 800961e:	f040 80be 	bne.w	800979e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009628:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009630:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009632:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8009636:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800963a:	4013      	ands	r3, r2
 800963c:	b29a      	uxth	r2, r3
 800963e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009640:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009646:	1c9a      	adds	r2, r3, #2
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009652:	b29b      	uxth	r3, r3
 8009654:	3b01      	subs	r3, #1
 8009656:	b29a      	uxth	r2, r3
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009664:	b29b      	uxth	r3, r3
 8009666:	2b00      	cmp	r3, #0
 8009668:	f040 80a1 	bne.w	80097ae <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009672:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009674:	e853 3f00 	ldrex	r3, [r3]
 8009678:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800967a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800967c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009680:	667b      	str	r3, [r7, #100]	; 0x64
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	461a      	mov	r2, r3
 8009688:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800968a:	657b      	str	r3, [r7, #84]	; 0x54
 800968c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800968e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009690:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009692:	e841 2300 	strex	r3, r2, [r1]
 8009696:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009698:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800969a:	2b00      	cmp	r3, #0
 800969c:	d1e6      	bne.n	800966c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	3308      	adds	r3, #8
 80096a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096a8:	e853 3f00 	ldrex	r3, [r3]
 80096ac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80096ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b0:	f023 0301 	bic.w	r3, r3, #1
 80096b4:	663b      	str	r3, [r7, #96]	; 0x60
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	3308      	adds	r3, #8
 80096bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80096be:	643a      	str	r2, [r7, #64]	; 0x40
 80096c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80096c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80096c6:	e841 2300 	strex	r3, r2, [r1]
 80096ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80096cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d1e5      	bne.n	800969e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2220      	movs	r2, #32
 80096d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2200      	movs	r2, #0
 80096de:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2200      	movs	r2, #0
 80096e4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	4a33      	ldr	r2, [pc, #204]	; (80097b8 <UART_RxISR_16BIT+0x1b4>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d01f      	beq.n	8009730 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	685b      	ldr	r3, [r3, #4]
 80096f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d018      	beq.n	8009730 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009704:	6a3b      	ldr	r3, [r7, #32]
 8009706:	e853 3f00 	ldrex	r3, [r3]
 800970a:	61fb      	str	r3, [r7, #28]
   return(result);
 800970c:	69fb      	ldr	r3, [r7, #28]
 800970e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009712:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	461a      	mov	r2, r3
 800971a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800971c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800971e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009720:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009722:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009724:	e841 2300 	strex	r3, r2, [r1]
 8009728:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800972a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800972c:	2b00      	cmp	r3, #0
 800972e:	d1e6      	bne.n	80096fe <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009734:	2b01      	cmp	r3, #1
 8009736:	d12e      	bne.n	8009796 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2200      	movs	r2, #0
 800973c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	e853 3f00 	ldrex	r3, [r3]
 800974a:	60bb      	str	r3, [r7, #8]
   return(result);
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	f023 0310 	bic.w	r3, r3, #16
 8009752:	65bb      	str	r3, [r7, #88]	; 0x58
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	461a      	mov	r2, r3
 800975a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800975c:	61bb      	str	r3, [r7, #24]
 800975e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009760:	6979      	ldr	r1, [r7, #20]
 8009762:	69ba      	ldr	r2, [r7, #24]
 8009764:	e841 2300 	strex	r3, r2, [r1]
 8009768:	613b      	str	r3, [r7, #16]
   return(result);
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d1e6      	bne.n	800973e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	69db      	ldr	r3, [r3, #28]
 8009776:	f003 0310 	and.w	r3, r3, #16
 800977a:	2b10      	cmp	r3, #16
 800977c:	d103      	bne.n	8009786 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	2210      	movs	r2, #16
 8009784:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800978c:	4619      	mov	r1, r3
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f7fe ff82 	bl	8008698 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009794:	e00b      	b.n	80097ae <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f7f9 f9d2 	bl	8002b40 <HAL_UART_RxCpltCallback>
}
 800979c:	e007      	b.n	80097ae <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	699a      	ldr	r2, [r3, #24]
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f042 0208 	orr.w	r2, r2, #8
 80097ac:	619a      	str	r2, [r3, #24]
}
 80097ae:	bf00      	nop
 80097b0:	3770      	adds	r7, #112	; 0x70
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}
 80097b6:	bf00      	nop
 80097b8:	40008000 	.word	0x40008000

080097bc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b0ac      	sub	sp, #176	; 0xb0
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80097ca:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	69db      	ldr	r3, [r3, #28]
 80097d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	689b      	ldr	r3, [r3, #8]
 80097e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097f2:	2b22      	cmp	r3, #34	; 0x22
 80097f4:	f040 8182 	bne.w	8009afc <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80097fe:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009802:	e125      	b.n	8009a50 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800980a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800980e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8009812:	b2d9      	uxtb	r1, r3
 8009814:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009818:	b2da      	uxtb	r2, r3
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800981e:	400a      	ands	r2, r1
 8009820:	b2d2      	uxtb	r2, r2
 8009822:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009828:	1c5a      	adds	r2, r3, #1
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009834:	b29b      	uxth	r3, r3
 8009836:	3b01      	subs	r3, #1
 8009838:	b29a      	uxth	r2, r3
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	69db      	ldr	r3, [r3, #28]
 8009846:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800984a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800984e:	f003 0307 	and.w	r3, r3, #7
 8009852:	2b00      	cmp	r3, #0
 8009854:	d053      	beq.n	80098fe <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009856:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800985a:	f003 0301 	and.w	r3, r3, #1
 800985e:	2b00      	cmp	r3, #0
 8009860:	d011      	beq.n	8009886 <UART_RxISR_8BIT_FIFOEN+0xca>
 8009862:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800986a:	2b00      	cmp	r3, #0
 800986c:	d00b      	beq.n	8009886 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	2201      	movs	r2, #1
 8009874:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800987c:	f043 0201 	orr.w	r2, r3, #1
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009886:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800988a:	f003 0302 	and.w	r3, r3, #2
 800988e:	2b00      	cmp	r3, #0
 8009890:	d011      	beq.n	80098b6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009892:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009896:	f003 0301 	and.w	r3, r3, #1
 800989a:	2b00      	cmp	r3, #0
 800989c:	d00b      	beq.n	80098b6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	2202      	movs	r2, #2
 80098a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098ac:	f043 0204 	orr.w	r2, r3, #4
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80098b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80098ba:	f003 0304 	and.w	r3, r3, #4
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d011      	beq.n	80098e6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80098c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80098c6:	f003 0301 	and.w	r3, r3, #1
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d00b      	beq.n	80098e6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	2204      	movs	r2, #4
 80098d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098dc:	f043 0202 	orr.w	r2, r3, #2
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d006      	beq.n	80098fe <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f7fe fec8 	bl	8008686 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2200      	movs	r2, #0
 80098fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009904:	b29b      	uxth	r3, r3
 8009906:	2b00      	cmp	r3, #0
 8009908:	f040 80a2 	bne.w	8009a50 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009912:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009914:	e853 3f00 	ldrex	r3, [r3]
 8009918:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800991a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800991c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009920:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	461a      	mov	r2, r3
 800992a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800992e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009930:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009932:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8009934:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009936:	e841 2300 	strex	r3, r2, [r1]
 800993a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800993c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800993e:	2b00      	cmp	r3, #0
 8009940:	d1e4      	bne.n	800990c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	3308      	adds	r3, #8
 8009948:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800994a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800994c:	e853 3f00 	ldrex	r3, [r3]
 8009950:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8009952:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009954:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009958:	f023 0301 	bic.w	r3, r3, #1
 800995c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	3308      	adds	r3, #8
 8009966:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800996a:	66ba      	str	r2, [r7, #104]	; 0x68
 800996c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800996e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009970:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009972:	e841 2300 	strex	r3, r2, [r1]
 8009976:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009978:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800997a:	2b00      	cmp	r3, #0
 800997c:	d1e1      	bne.n	8009942 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2220      	movs	r2, #32
 8009982:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2200      	movs	r2, #0
 800998a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2200      	movs	r2, #0
 8009990:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4a5f      	ldr	r2, [pc, #380]	; (8009b14 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d021      	beq.n	80099e0 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	685b      	ldr	r3, [r3, #4]
 80099a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d01a      	beq.n	80099e0 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099b2:	e853 3f00 	ldrex	r3, [r3]
 80099b6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80099b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80099be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	461a      	mov	r2, r3
 80099c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80099cc:	657b      	str	r3, [r7, #84]	; 0x54
 80099ce:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80099d2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80099d4:	e841 2300 	strex	r3, r2, [r1]
 80099d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80099da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d1e4      	bne.n	80099aa <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d130      	bne.n	8009a4a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2200      	movs	r2, #0
 80099ec:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099f6:	e853 3f00 	ldrex	r3, [r3]
 80099fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80099fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099fe:	f023 0310 	bic.w	r3, r3, #16
 8009a02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	461a      	mov	r2, r3
 8009a0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009a10:	643b      	str	r3, [r7, #64]	; 0x40
 8009a12:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009a16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a18:	e841 2300 	strex	r3, r2, [r1]
 8009a1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d1e4      	bne.n	80099ee <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	69db      	ldr	r3, [r3, #28]
 8009a2a:	f003 0310 	and.w	r3, r3, #16
 8009a2e:	2b10      	cmp	r3, #16
 8009a30:	d103      	bne.n	8009a3a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	2210      	movs	r2, #16
 8009a38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009a40:	4619      	mov	r1, r3
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f7fe fe28 	bl	8008698 <HAL_UARTEx_RxEventCallback>
 8009a48:	e002      	b.n	8009a50 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f7f9 f878 	bl	8002b40 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009a50:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d006      	beq.n	8009a66 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8009a58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009a5c:	f003 0320 	and.w	r3, r3, #32
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	f47f aecf 	bne.w	8009804 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009a6c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009a70:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d049      	beq.n	8009b0c <UART_RxISR_8BIT_FIFOEN+0x350>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009a7e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8009a82:	429a      	cmp	r2, r3
 8009a84:	d242      	bcs.n	8009b0c <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	3308      	adds	r3, #8
 8009a8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a8e:	6a3b      	ldr	r3, [r7, #32]
 8009a90:	e853 3f00 	ldrex	r3, [r3]
 8009a94:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a96:	69fb      	ldr	r3, [r7, #28]
 8009a98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009a9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	3308      	adds	r3, #8
 8009aa6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009aaa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009aac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009ab0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ab2:	e841 2300 	strex	r3, r2, [r1]
 8009ab6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d1e3      	bne.n	8009a86 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	4a15      	ldr	r2, [pc, #84]	; (8009b18 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009ac2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	e853 3f00 	ldrex	r3, [r3]
 8009ad0:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	f043 0320 	orr.w	r3, r3, #32
 8009ad8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	461a      	mov	r2, r3
 8009ae2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009ae6:	61bb      	str	r3, [r7, #24]
 8009ae8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aea:	6979      	ldr	r1, [r7, #20]
 8009aec:	69ba      	ldr	r2, [r7, #24]
 8009aee:	e841 2300 	strex	r3, r2, [r1]
 8009af2:	613b      	str	r3, [r7, #16]
   return(result);
 8009af4:	693b      	ldr	r3, [r7, #16]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d1e4      	bne.n	8009ac4 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009afa:	e007      	b.n	8009b0c <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	699a      	ldr	r2, [r3, #24]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f042 0208 	orr.w	r2, r2, #8
 8009b0a:	619a      	str	r2, [r3, #24]
}
 8009b0c:	bf00      	nop
 8009b0e:	37b0      	adds	r7, #176	; 0xb0
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}
 8009b14:	40008000 	.word	0x40008000
 8009b18:	0800944d 	.word	0x0800944d

08009b1c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b0ae      	sub	sp, #184	; 0xb8
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009b2a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	69db      	ldr	r3, [r3, #28]
 8009b34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	689b      	ldr	r3, [r3, #8]
 8009b48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b52:	2b22      	cmp	r3, #34	; 0x22
 8009b54:	f040 8186 	bne.w	8009e64 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009b5e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009b62:	e129      	b.n	8009db8 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b6a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009b76:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8009b7a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8009b7e:	4013      	ands	r3, r2
 8009b80:	b29a      	uxth	r2, r3
 8009b82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009b86:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b8c:	1c9a      	adds	r2, r3, #2
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009b98:	b29b      	uxth	r3, r3
 8009b9a:	3b01      	subs	r3, #1
 8009b9c:	b29a      	uxth	r2, r3
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	69db      	ldr	r3, [r3, #28]
 8009baa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009bae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009bb2:	f003 0307 	and.w	r3, r3, #7
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d053      	beq.n	8009c62 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009bba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009bbe:	f003 0301 	and.w	r3, r3, #1
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d011      	beq.n	8009bea <UART_RxISR_16BIT_FIFOEN+0xce>
 8009bc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d00b      	beq.n	8009bea <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009be0:	f043 0201 	orr.w	r2, r3, #1
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009bea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009bee:	f003 0302 	and.w	r3, r3, #2
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d011      	beq.n	8009c1a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009bf6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009bfa:	f003 0301 	and.w	r3, r3, #1
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d00b      	beq.n	8009c1a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	2202      	movs	r2, #2
 8009c08:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c10:	f043 0204 	orr.w	r2, r3, #4
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009c1e:	f003 0304 	and.w	r3, r3, #4
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d011      	beq.n	8009c4a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009c26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009c2a:	f003 0301 	and.w	r3, r3, #1
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d00b      	beq.n	8009c4a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	2204      	movs	r2, #4
 8009c38:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c40:	f043 0202 	orr.w	r2, r3, #2
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d006      	beq.n	8009c62 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f7fe fd16 	bl	8008686 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009c68:	b29b      	uxth	r3, r3
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	f040 80a4 	bne.w	8009db8 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c78:	e853 3f00 	ldrex	r3, [r3]
 8009c7c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009c7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009c80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	461a      	mov	r2, r3
 8009c8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009c92:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009c96:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c98:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009c9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009c9e:	e841 2300 	strex	r3, r2, [r1]
 8009ca2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009ca4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d1e2      	bne.n	8009c70 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	3308      	adds	r3, #8
 8009cb0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009cb4:	e853 3f00 	ldrex	r3, [r3]
 8009cb8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009cba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009cbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009cc0:	f023 0301 	bic.w	r3, r3, #1
 8009cc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	3308      	adds	r3, #8
 8009cce:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009cd2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009cd4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cd6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009cd8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009cda:	e841 2300 	strex	r3, r2, [r1]
 8009cde:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009ce0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d1e1      	bne.n	8009caa <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2220      	movs	r2, #32
 8009cea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	4a5f      	ldr	r2, [pc, #380]	; (8009e7c <UART_RxISR_16BIT_FIFOEN+0x360>)
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d021      	beq.n	8009d48 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	685b      	ldr	r3, [r3, #4]
 8009d0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d01a      	beq.n	8009d48 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d1a:	e853 3f00 	ldrex	r3, [r3]
 8009d1e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009d20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d22:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009d26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	461a      	mov	r2, r3
 8009d30:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009d34:	65bb      	str	r3, [r7, #88]	; 0x58
 8009d36:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d38:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009d3a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009d3c:	e841 2300 	strex	r3, r2, [r1]
 8009d40:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009d42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d1e4      	bne.n	8009d12 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d4c:	2b01      	cmp	r3, #1
 8009d4e:	d130      	bne.n	8009db2 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2200      	movs	r2, #0
 8009d54:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d5e:	e853 3f00 	ldrex	r3, [r3]
 8009d62:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d66:	f023 0310 	bic.w	r3, r3, #16
 8009d6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	461a      	mov	r2, r3
 8009d74:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009d78:	647b      	str	r3, [r7, #68]	; 0x44
 8009d7a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d7c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009d7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d80:	e841 2300 	strex	r3, r2, [r1]
 8009d84:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009d86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d1e4      	bne.n	8009d56 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	69db      	ldr	r3, [r3, #28]
 8009d92:	f003 0310 	and.w	r3, r3, #16
 8009d96:	2b10      	cmp	r3, #16
 8009d98:	d103      	bne.n	8009da2 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	2210      	movs	r2, #16
 8009da0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009da8:	4619      	mov	r1, r3
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f7fe fc74 	bl	8008698 <HAL_UARTEx_RxEventCallback>
 8009db0:	e002      	b.n	8009db8 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f7f8 fec4 	bl	8002b40 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009db8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d006      	beq.n	8009dce <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8009dc0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009dc4:	f003 0320 	and.w	r3, r3, #32
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	f47f aecb 	bne.w	8009b64 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009dd4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009dd8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d049      	beq.n	8009e74 <UART_RxISR_16BIT_FIFOEN+0x358>
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009de6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8009dea:	429a      	cmp	r2, r3
 8009dec:	d242      	bcs.n	8009e74 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	3308      	adds	r3, #8
 8009df4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df8:	e853 3f00 	ldrex	r3, [r3]
 8009dfc:	623b      	str	r3, [r7, #32]
   return(result);
 8009dfe:	6a3b      	ldr	r3, [r7, #32]
 8009e00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009e04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	3308      	adds	r3, #8
 8009e0e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009e12:	633a      	str	r2, [r7, #48]	; 0x30
 8009e14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e1a:	e841 2300 	strex	r3, r2, [r1]
 8009e1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d1e3      	bne.n	8009dee <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	4a15      	ldr	r2, [pc, #84]	; (8009e80 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009e2a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e32:	693b      	ldr	r3, [r7, #16]
 8009e34:	e853 3f00 	ldrex	r3, [r3]
 8009e38:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	f043 0320 	orr.w	r3, r3, #32
 8009e40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	461a      	mov	r2, r3
 8009e4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009e4e:	61fb      	str	r3, [r7, #28]
 8009e50:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e52:	69b9      	ldr	r1, [r7, #24]
 8009e54:	69fa      	ldr	r2, [r7, #28]
 8009e56:	e841 2300 	strex	r3, r2, [r1]
 8009e5a:	617b      	str	r3, [r7, #20]
   return(result);
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d1e4      	bne.n	8009e2c <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009e62:	e007      	b.n	8009e74 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	699a      	ldr	r2, [r3, #24]
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f042 0208 	orr.w	r2, r2, #8
 8009e72:	619a      	str	r2, [r3, #24]
}
 8009e74:	bf00      	nop
 8009e76:	37b8      	adds	r7, #184	; 0xb8
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}
 8009e7c:	40008000 	.word	0x40008000
 8009e80:	08009605 	.word	0x08009605

08009e84 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b083      	sub	sp, #12
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009e8c:	bf00      	nop
 8009e8e:	370c      	adds	r7, #12
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bc80      	pop	{r7}
 8009e94:	4770      	bx	lr

08009e96 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009e96:	b480      	push	{r7}
 8009e98:	b083      	sub	sp, #12
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009e9e:	bf00      	nop
 8009ea0:	370c      	adds	r7, #12
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bc80      	pop	{r7}
 8009ea6:	4770      	bx	lr

08009ea8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b083      	sub	sp, #12
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009eb0:	bf00      	nop
 8009eb2:	370c      	adds	r7, #12
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bc80      	pop	{r7}
 8009eb8:	4770      	bx	lr

08009eba <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8009eba:	b580      	push	{r7, lr}
 8009ebc:	b088      	sub	sp, #32
 8009ebe:	af02      	add	r7, sp, #8
 8009ec0:	60f8      	str	r0, [r7, #12]
 8009ec2:	1d3b      	adds	r3, r7, #4
 8009ec4:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009ed2:	2b01      	cmp	r3, #1
 8009ed4:	d101      	bne.n	8009eda <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 8009ed6:	2302      	movs	r3, #2
 8009ed8:	e046      	b.n	8009f68 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	2201      	movs	r2, #1
 8009ede:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	2224      	movs	r2, #36	; 0x24
 8009ee6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	681a      	ldr	r2, [r3, #0]
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f022 0201 	bic.w	r2, r2, #1
 8009ef8:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	689b      	ldr	r3, [r3, #8]
 8009f00:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009f04:	687a      	ldr	r2, [r7, #4]
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	430a      	orrs	r2, r1
 8009f0c:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d105      	bne.n	8009f20 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8009f14:	1d3b      	adds	r3, r7, #4
 8009f16:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009f1a:	68f8      	ldr	r0, [r7, #12]
 8009f1c:	f000 f911 	bl	800a142 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	681a      	ldr	r2, [r3, #0]
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	f042 0201 	orr.w	r2, r2, #1
 8009f2e:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009f30:	f7f8 f954 	bl	80021dc <HAL_GetTick>
 8009f34:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f36:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009f3a:	9300      	str	r3, [sp, #0]
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009f44:	68f8      	ldr	r0, [r7, #12]
 8009f46:	f7fe ff16 	bl	8008d76 <UART_WaitOnFlagUntilTimeout>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d002      	beq.n	8009f56 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 8009f50:	2303      	movs	r3, #3
 8009f52:	75fb      	strb	r3, [r7, #23]
 8009f54:	e003      	b.n	8009f5e <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	2220      	movs	r2, #32
 8009f5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	2200      	movs	r2, #0
 8009f62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return status;
 8009f66:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3718      	adds	r7, #24
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}

08009f70 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b089      	sub	sp, #36	; 0x24
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009f7e:	2b01      	cmp	r3, #1
 8009f80:	d101      	bne.n	8009f86 <HAL_UARTEx_EnableStopMode+0x16>
 8009f82:	2302      	movs	r3, #2
 8009f84:	e021      	b.n	8009fca <HAL_UARTEx_EnableStopMode+0x5a>
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2201      	movs	r2, #1
 8009f8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	e853 3f00 	ldrex	r3, [r3]
 8009f9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	f043 0302 	orr.w	r3, r3, #2
 8009fa2:	61fb      	str	r3, [r7, #28]
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	461a      	mov	r2, r3
 8009faa:	69fb      	ldr	r3, [r7, #28]
 8009fac:	61bb      	str	r3, [r7, #24]
 8009fae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fb0:	6979      	ldr	r1, [r7, #20]
 8009fb2:	69ba      	ldr	r2, [r7, #24]
 8009fb4:	e841 2300 	strex	r3, r2, [r1]
 8009fb8:	613b      	str	r3, [r7, #16]
   return(result);
 8009fba:	693b      	ldr	r3, [r7, #16]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d1e6      	bne.n	8009f8e <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009fc8:	2300      	movs	r3, #0
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3724      	adds	r7, #36	; 0x24
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bc80      	pop	{r7}
 8009fd2:	4770      	bx	lr

08009fd4 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b084      	sub	sp, #16
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009fe2:	2b01      	cmp	r3, #1
 8009fe4:	d101      	bne.n	8009fea <HAL_UARTEx_EnableFifoMode+0x16>
 8009fe6:	2302      	movs	r3, #2
 8009fe8:	e02b      	b.n	800a042 <HAL_UARTEx_EnableFifoMode+0x6e>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2201      	movs	r2, #1
 8009fee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2224      	movs	r2, #36	; 0x24
 8009ff6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	681a      	ldr	r2, [r3, #0]
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f022 0201 	bic.w	r2, r2, #1
 800a010:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a018:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800a020:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	68fa      	ldr	r2, [r7, #12]
 800a028:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f000 f8ac 	bl	800a188 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2220      	movs	r2, #32
 800a034:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2200      	movs	r2, #0
 800a03c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a040:	2300      	movs	r3, #0
}
 800a042:	4618      	mov	r0, r3
 800a044:	3710      	adds	r7, #16
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}

0800a04a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a04a:	b580      	push	{r7, lr}
 800a04c:	b084      	sub	sp, #16
 800a04e:	af00      	add	r7, sp, #0
 800a050:	6078      	str	r0, [r7, #4]
 800a052:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a05a:	2b01      	cmp	r3, #1
 800a05c:	d101      	bne.n	800a062 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a05e:	2302      	movs	r3, #2
 800a060:	e02d      	b.n	800a0be <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2201      	movs	r2, #1
 800a066:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2224      	movs	r2, #36	; 0x24
 800a06e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	681a      	ldr	r2, [r3, #0]
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f022 0201 	bic.w	r2, r2, #1
 800a088:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	689b      	ldr	r3, [r3, #8]
 800a090:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	683a      	ldr	r2, [r7, #0]
 800a09a:	430a      	orrs	r2, r1
 800a09c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f000 f872 	bl	800a188 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	68fa      	ldr	r2, [r7, #12]
 800a0aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2220      	movs	r2, #32
 800a0b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a0bc:	2300      	movs	r3, #0
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	3710      	adds	r7, #16
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}

0800a0c6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a0c6:	b580      	push	{r7, lr}
 800a0c8:	b084      	sub	sp, #16
 800a0ca:	af00      	add	r7, sp, #0
 800a0cc:	6078      	str	r0, [r7, #4]
 800a0ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a0d6:	2b01      	cmp	r3, #1
 800a0d8:	d101      	bne.n	800a0de <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a0da:	2302      	movs	r3, #2
 800a0dc:	e02d      	b.n	800a13a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2201      	movs	r2, #1
 800a0e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2224      	movs	r2, #36	; 0x24
 800a0ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	681a      	ldr	r2, [r3, #0]
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f022 0201 	bic.w	r2, r2, #1
 800a104:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	689b      	ldr	r3, [r3, #8]
 800a10c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	683a      	ldr	r2, [r7, #0]
 800a116:	430a      	orrs	r2, r1
 800a118:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f000 f834 	bl	800a188 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	68fa      	ldr	r2, [r7, #12]
 800a126:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2220      	movs	r2, #32
 800a12c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2200      	movs	r2, #0
 800a134:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a138:	2300      	movs	r3, #0
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3710      	adds	r7, #16
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}

0800a142 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800a142:	b480      	push	{r7}
 800a144:	b085      	sub	sp, #20
 800a146:	af00      	add	r7, sp, #0
 800a148:	60f8      	str	r0, [r7, #12]
 800a14a:	1d3b      	adds	r3, r7, #4
 800a14c:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	685b      	ldr	r3, [r3, #4]
 800a156:	f023 0210 	bic.w	r2, r3, #16
 800a15a:	893b      	ldrh	r3, [r7, #8]
 800a15c:	4619      	mov	r1, r3
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	430a      	orrs	r2, r1
 800a164:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800a170:	7abb      	ldrb	r3, [r7, #10]
 800a172:	061a      	lsls	r2, r3, #24
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	430a      	orrs	r2, r1
 800a17a:	605a      	str	r2, [r3, #4]
}
 800a17c:	bf00      	nop
 800a17e:	3714      	adds	r7, #20
 800a180:	46bd      	mov	sp, r7
 800a182:	bc80      	pop	{r7}
 800a184:	4770      	bx	lr
	...

0800a188 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a188:	b480      	push	{r7}
 800a18a:	b085      	sub	sp, #20
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a194:	2b00      	cmp	r3, #0
 800a196:	d108      	bne.n	800a1aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2201      	movs	r2, #1
 800a19c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2201      	movs	r2, #1
 800a1a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a1a8:	e031      	b.n	800a20e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a1aa:	2308      	movs	r3, #8
 800a1ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a1ae:	2308      	movs	r3, #8
 800a1b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	689b      	ldr	r3, [r3, #8]
 800a1b8:	0e5b      	lsrs	r3, r3, #25
 800a1ba:	b2db      	uxtb	r3, r3
 800a1bc:	f003 0307 	and.w	r3, r3, #7
 800a1c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	689b      	ldr	r3, [r3, #8]
 800a1c8:	0f5b      	lsrs	r3, r3, #29
 800a1ca:	b2db      	uxtb	r3, r3
 800a1cc:	f003 0307 	and.w	r3, r3, #7
 800a1d0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a1d2:	7bbb      	ldrb	r3, [r7, #14]
 800a1d4:	7b3a      	ldrb	r2, [r7, #12]
 800a1d6:	4910      	ldr	r1, [pc, #64]	; (800a218 <UARTEx_SetNbDataToProcess+0x90>)
 800a1d8:	5c8a      	ldrb	r2, [r1, r2]
 800a1da:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a1de:	7b3a      	ldrb	r2, [r7, #12]
 800a1e0:	490e      	ldr	r1, [pc, #56]	; (800a21c <UARTEx_SetNbDataToProcess+0x94>)
 800a1e2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a1e4:	fb93 f3f2 	sdiv	r3, r3, r2
 800a1e8:	b29a      	uxth	r2, r3
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a1f0:	7bfb      	ldrb	r3, [r7, #15]
 800a1f2:	7b7a      	ldrb	r2, [r7, #13]
 800a1f4:	4908      	ldr	r1, [pc, #32]	; (800a218 <UARTEx_SetNbDataToProcess+0x90>)
 800a1f6:	5c8a      	ldrb	r2, [r1, r2]
 800a1f8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a1fc:	7b7a      	ldrb	r2, [r7, #13]
 800a1fe:	4907      	ldr	r1, [pc, #28]	; (800a21c <UARTEx_SetNbDataToProcess+0x94>)
 800a200:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a202:	fb93 f3f2 	sdiv	r3, r3, r2
 800a206:	b29a      	uxth	r2, r3
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a20e:	bf00      	nop
 800a210:	3714      	adds	r7, #20
 800a212:	46bd      	mov	sp, r7
 800a214:	bc80      	pop	{r7}
 800a216:	4770      	bx	lr
 800a218:	0801e5f4 	.word	0x0801e5f4
 800a21c:	0801e5fc 	.word	0x0801e5fc

0800a220 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800a224:	f7f7 fe7a 	bl	8001f1c <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800a228:	f000 f820 	bl	800a26c <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800a22c:	bf00      	nop
 800a22e:	bd80      	pop	{r7, pc}

0800a230 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800a234:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a238:	f012 fd7a 	bl	801cd30 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800a23c:	bf00      	nop
 800a23e:	bd80      	pop	{r7, pc}

0800a240 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800a240:	b480      	push	{r7}
 800a242:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800a244:	f3bf 8f4f 	dsb	sy
}
 800a248:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800a24a:	4b06      	ldr	r3, [pc, #24]	; (800a264 <__NVIC_SystemReset+0x24>)
 800a24c:	68db      	ldr	r3, [r3, #12]
 800a24e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800a252:	4904      	ldr	r1, [pc, #16]	; (800a264 <__NVIC_SystemReset+0x24>)
 800a254:	4b04      	ldr	r3, [pc, #16]	; (800a268 <__NVIC_SystemReset+0x28>)
 800a256:	4313      	orrs	r3, r2
 800a258:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800a25a:	f3bf 8f4f 	dsb	sy
}
 800a25e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800a260:	bf00      	nop
 800a262:	e7fd      	b.n	800a260 <__NVIC_SystemReset+0x20>
 800a264:	e000ed00 	.word	0xe000ed00
 800a268:	05fa0004 	.word	0x05fa0004

0800a26c <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b086      	sub	sp, #24
 800a270:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 800a272:	2300      	movs	r3, #0
 800a274:	607b      	str	r3, [r7, #4]
  /* USER CODE END LoRaWAN_Init_LV */

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* Get LoRaWAN APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800a276:	2300      	movs	r3, #0
 800a278:	9302      	str	r3, [sp, #8]
 800a27a:	2303      	movs	r3, #3
 800a27c:	9301      	str	r3, [sp, #4]
 800a27e:	2301      	movs	r3, #1
 800a280:	9300      	str	r3, [sp, #0]
 800a282:	4b5b      	ldr	r3, [pc, #364]	; (800a3f0 <LoRaWAN_Init+0x184>)
 800a284:	2200      	movs	r2, #0
 800a286:	2100      	movs	r1, #0
 800a288:	2002      	movs	r0, #2
 800a28a:	f013 f99f 	bl	801d5cc <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW LoRaWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 800a28e:	2300      	movs	r3, #0
 800a290:	9302      	str	r3, [sp, #8]
 800a292:	2305      	movs	r3, #5
 800a294:	9301      	str	r3, [sp, #4]
 800a296:	2302      	movs	r3, #2
 800a298:	9300      	str	r3, [sp, #0]
 800a29a:	4b56      	ldr	r3, [pc, #344]	; (800a3f4 <LoRaWAN_Init+0x188>)
 800a29c:	2200      	movs	r2, #0
 800a29e:	2100      	movs	r1, #0
 800a2a0:	2002      	movs	r0, #2
 800a2a2:	f013 f993 	bl	801d5cc <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(LORAWAN_VERSION_MAIN),
          (uint8_t)(LORAWAN_VERSION_SUB1),
          (uint8_t)(LORAWAN_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	9302      	str	r3, [sp, #8]
 800a2aa:	2303      	movs	r3, #3
 800a2ac:	9301      	str	r3, [sp, #4]
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	9300      	str	r3, [sp, #0]
 800a2b2:	4b51      	ldr	r3, [pc, #324]	; (800a3f8 <LoRaWAN_Init+0x18c>)
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	2100      	movs	r1, #0
 800a2b8:	2002      	movs	r0, #2
 800a2ba:	f013 f987 	bl	801d5cc <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 800a2be:	1d3b      	adds	r3, r7, #4
 800a2c0:	4619      	mov	r1, r3
 800a2c2:	2000      	movs	r0, #0
 800a2c4:	f003 fa1a 	bl	800d6fc <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	0e1b      	lsrs	r3, r3, #24
 800a2cc:	b2db      	uxtb	r3, r3
 800a2ce:	461a      	mov	r2, r3
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	0c1b      	lsrs	r3, r3, #16
 800a2d4:	b2db      	uxtb	r3, r3
 800a2d6:	4619      	mov	r1, r3
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	0a1b      	lsrs	r3, r3, #8
 800a2dc:	b2db      	uxtb	r3, r3
 800a2de:	9302      	str	r3, [sp, #8]
 800a2e0:	9101      	str	r1, [sp, #4]
 800a2e2:	9200      	str	r2, [sp, #0]
 800a2e4:	4b45      	ldr	r3, [pc, #276]	; (800a3fc <LoRaWAN_Init+0x190>)
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	2100      	movs	r1, #0
 800a2ea:	2002      	movs	r0, #2
 800a2ec:	f013 f96e 	bl	801d5cc <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800a2f0:	1d3b      	adds	r3, r7, #4
 800a2f2:	4619      	mov	r1, r3
 800a2f4:	2001      	movs	r0, #1
 800a2f6:	f003 fa01 	bl	800d6fc <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	0e1b      	lsrs	r3, r3, #24
 800a2fe:	b2db      	uxtb	r3, r3
 800a300:	461a      	mov	r2, r3
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	0c1b      	lsrs	r3, r3, #16
 800a306:	b2db      	uxtb	r3, r3
 800a308:	4619      	mov	r1, r3
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	0a1b      	lsrs	r3, r3, #8
 800a30e:	b2db      	uxtb	r3, r3
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	b2c0      	uxtb	r0, r0
 800a314:	9003      	str	r0, [sp, #12]
 800a316:	9302      	str	r3, [sp, #8]
 800a318:	9101      	str	r1, [sp, #4]
 800a31a:	9200      	str	r2, [sp, #0]
 800a31c:	4b38      	ldr	r3, [pc, #224]	; (800a400 <LoRaWAN_Init+0x194>)
 800a31e:	2200      	movs	r2, #0
 800a320:	2100      	movs	r1, #0
 800a322:	2002      	movs	r0, #2
 800a324:	f013 f952 	bl	801d5cc <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800a328:	2300      	movs	r3, #0
 800a32a:	9300      	str	r3, [sp, #0]
 800a32c:	4b35      	ldr	r3, [pc, #212]	; (800a404 <LoRaWAN_Init+0x198>)
 800a32e:	2200      	movs	r2, #0
 800a330:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a334:	4834      	ldr	r0, [pc, #208]	; (800a408 <LoRaWAN_Init+0x19c>)
 800a336:	f012 fe9b 	bl	801d070 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800a33a:	2300      	movs	r3, #0
 800a33c:	9300      	str	r3, [sp, #0]
 800a33e:	4b33      	ldr	r3, [pc, #204]	; (800a40c <LoRaWAN_Init+0x1a0>)
 800a340:	2200      	movs	r2, #0
 800a342:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a346:	4832      	ldr	r0, [pc, #200]	; (800a410 <LoRaWAN_Init+0x1a4>)
 800a348:	f012 fe92 	bl	801d070 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800a34c:	2300      	movs	r3, #0
 800a34e:	9300      	str	r3, [sp, #0]
 800a350:	4b30      	ldr	r3, [pc, #192]	; (800a414 <LoRaWAN_Init+0x1a8>)
 800a352:	2201      	movs	r2, #1
 800a354:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a358:	482f      	ldr	r0, [pc, #188]	; (800a418 <LoRaWAN_Init+0x1ac>)
 800a35a:	f012 fe89 	bl	801d070 <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800a35e:	2300      	movs	r3, #0
 800a360:	9300      	str	r3, [sp, #0]
 800a362:	4b2e      	ldr	r3, [pc, #184]	; (800a41c <LoRaWAN_Init+0x1b0>)
 800a364:	2200      	movs	r2, #0
 800a366:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800a36a:	482d      	ldr	r0, [pc, #180]	; (800a420 <LoRaWAN_Init+0x1b4>)
 800a36c:	f012 fe80 	bl	801d070 <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800a370:	4a2c      	ldr	r2, [pc, #176]	; (800a424 <LoRaWAN_Init+0x1b8>)
 800a372:	2100      	movs	r1, #0
 800a374:	2001      	movs	r0, #1
 800a376:	f012 fdd7 	bl	801cf28 <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800a37a:	4a2b      	ldr	r2, [pc, #172]	; (800a428 <LoRaWAN_Init+0x1bc>)
 800a37c:	2100      	movs	r1, #0
 800a37e:	2002      	movs	r0, #2
 800a380:	f012 fdd2 	bl	801cf28 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 800a384:	4a29      	ldr	r2, [pc, #164]	; (800a42c <LoRaWAN_Init+0x1c0>)
 800a386:	2100      	movs	r1, #0
 800a388:	2004      	movs	r0, #4
 800a38a:	f012 fdcd 	bl	801cf28 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 800a38e:	4a28      	ldr	r2, [pc, #160]	; (800a430 <LoRaWAN_Init+0x1c4>)
 800a390:	2100      	movs	r1, #0
 800a392:	2008      	movs	r0, #8
 800a394:	f012 fdc8 	bl	801cf28 <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800a398:	f000 fd08 	bl	800adac <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800a39c:	4925      	ldr	r1, [pc, #148]	; (800a434 <LoRaWAN_Init+0x1c8>)
 800a39e:	4826      	ldr	r0, [pc, #152]	; (800a438 <LoRaWAN_Init+0x1cc>)
 800a3a0:	f002 fa1e 	bl	800c7e0 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800a3a4:	4825      	ldr	r0, [pc, #148]	; (800a43c <LoRaWAN_Init+0x1d0>)
 800a3a6:	f002 fa89 	bl	800c8bc <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800a3aa:	481b      	ldr	r0, [pc, #108]	; (800a418 <LoRaWAN_Init+0x1ac>)
 800a3ac:	f012 fe96 	bl	801d0dc <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 800a3b0:	4b23      	ldr	r3, [pc, #140]	; (800a440 <LoRaWAN_Init+0x1d4>)
 800a3b2:	781b      	ldrb	r3, [r3, #0]
 800a3b4:	4a23      	ldr	r2, [pc, #140]	; (800a444 <LoRaWAN_Init+0x1d8>)
 800a3b6:	7812      	ldrb	r2, [r2, #0]
 800a3b8:	4611      	mov	r1, r2
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f002 fbd6 	bl	800cb6c <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800a3c0:	4b21      	ldr	r3, [pc, #132]	; (800a448 <LoRaWAN_Init+0x1dc>)
 800a3c2:	781b      	ldrb	r3, [r3, #0]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d10c      	bne.n	800a3e2 <LoRaWAN_Init+0x176>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800a3c8:	4b20      	ldr	r3, [pc, #128]	; (800a44c <LoRaWAN_Init+0x1e0>)
 800a3ca:	6819      	ldr	r1, [r3, #0]
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	9300      	str	r3, [sp, #0]
 800a3d0:	4b1f      	ldr	r3, [pc, #124]	; (800a450 <LoRaWAN_Init+0x1e4>)
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	481f      	ldr	r0, [pc, #124]	; (800a454 <LoRaWAN_Init+0x1e8>)
 800a3d6:	f012 fe4b 	bl	801d070 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800a3da:	481e      	ldr	r0, [pc, #120]	; (800a454 <LoRaWAN_Init+0x1e8>)
 800a3dc:	f012 fe7e 	bl	801d0dc <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800a3e0:	e001      	b.n	800a3e6 <LoRaWAN_Init+0x17a>
	EnvSensors_Init();
 800a3e2:	f7f7 ff4f 	bl	8002284 <EnvSensors_Init>
}
 800a3e6:	bf00      	nop
 800a3e8:	3708      	adds	r7, #8
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
 800a3ee:	bf00      	nop
 800a3f0:	0801dc78 	.word	0x0801dc78
 800a3f4:	0801dc9c 	.word	0x0801dc9c
 800a3f8:	0801dcc0 	.word	0x0801dcc0
 800a3fc:	0801dce4 	.word	0x0801dce4
 800a400:	0801dd08 	.word	0x0801dd08
 800a404:	0800a8cd 	.word	0x0800a8cd
 800a408:	20000510 	.word	0x20000510
 800a40c:	0800a8df 	.word	0x0800a8df
 800a410:	20000528 	.word	0x20000528
 800a414:	0800a8f1 	.word	0x0800a8f1
 800a418:	20000540 	.word	0x20000540
 800a41c:	0800acad 	.word	0x0800acad
 800a420:	20000404 	.word	0x20000404
 800a424:	0800cb01 	.word	0x0800cb01
 800a428:	0800a58d 	.word	0x0800a58d
 800a42c:	0800acd1 	.word	0x0800acd1
 800a430:	0800ac2d 	.word	0x0800ac2d
 800a434:	01030000 	.word	0x01030000
 800a438:	20000024 	.word	0x20000024
 800a43c:	20000070 	.word	0x20000070
 800a440:	20000020 	.word	0x20000020
 800a444:	20000021 	.word	0x20000021
 800a448:	200003e8 	.word	0x200003e8
 800a44c:	20000088 	.word	0x20000088
 800a450:	0800a8a9 	.word	0x0800a8a9
 800a454:	200003ec 	.word	0x200003ec

0800a458 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800a458:	b5b0      	push	{r4, r5, r7, lr}
 800a45a:	b08a      	sub	sp, #40	; 0x28
 800a45c:	af06      	add	r7, sp, #24
 800a45e:	6078      	str	r0, [r7, #4]
 800a460:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  uint8_t RxPort = 0;
 800a462:	2300      	movs	r3, #0
 800a464:	73fb      	strb	r3, [r7, #15]

  if (params != NULL)
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d07f      	beq.n	800a56c <OnRxData+0x114>
  {

    UTIL_TIMER_Start(&RxLedTimer);
 800a46c:	4841      	ldr	r0, [pc, #260]	; (800a574 <OnRxData+0x11c>)
 800a46e:	f012 fe35 	bl	801d0dc <UTIL_TIMER_Start>

    if (params->IsMcpsIndication)
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	781b      	ldrb	r3, [r3, #0]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d054      	beq.n	800a524 <OnRxData+0xcc>
    {
      if (appData != NULL)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d051      	beq.n	800a524 <OnRxData+0xcc>
      {
        RxPort = appData->Port;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	781b      	ldrb	r3, [r3, #0]
 800a484:	73fb      	strb	r3, [r7, #15]
        if (appData->Buffer != NULL)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	685b      	ldr	r3, [r3, #4]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d04a      	beq.n	800a524 <OnRxData+0xcc>
        {
          switch (appData->Port)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	781b      	ldrb	r3, [r3, #0]
 800a492:	2b02      	cmp	r3, #2
 800a494:	d01f      	beq.n	800a4d6 <OnRxData+0x7e>
 800a496:	2b03      	cmp	r3, #3
 800a498:	d13f      	bne.n	800a51a <OnRxData+0xc2>
          {
            case LORAWAN_SWITCH_CLASS_PORT:
              /*this port switches the class*/
              if (appData->BufferSize == 1)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	785b      	ldrb	r3, [r3, #1]
 800a49e:	2b01      	cmp	r3, #1
 800a4a0:	d13d      	bne.n	800a51e <OnRxData+0xc6>
              {
                switch (appData->Buffer[0])
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	685b      	ldr	r3, [r3, #4]
 800a4a6:	781b      	ldrb	r3, [r3, #0]
 800a4a8:	2b02      	cmp	r3, #2
 800a4aa:	d00e      	beq.n	800a4ca <OnRxData+0x72>
 800a4ac:	2b02      	cmp	r3, #2
 800a4ae:	dc10      	bgt.n	800a4d2 <OnRxData+0x7a>
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d002      	beq.n	800a4ba <OnRxData+0x62>
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	d004      	beq.n	800a4c2 <OnRxData+0x6a>
                  {
                    LmHandlerRequestClass(CLASS_C);
                    break;
                  }
                  default:
                    break;
 800a4b8:	e00b      	b.n	800a4d2 <OnRxData+0x7a>
                    LmHandlerRequestClass(CLASS_A);
 800a4ba:	2000      	movs	r0, #0
 800a4bc:	f002 fd0a 	bl	800ced4 <LmHandlerRequestClass>
                    break;
 800a4c0:	e008      	b.n	800a4d4 <OnRxData+0x7c>
                    LmHandlerRequestClass(CLASS_B);
 800a4c2:	2001      	movs	r0, #1
 800a4c4:	f002 fd06 	bl	800ced4 <LmHandlerRequestClass>
                    break;
 800a4c8:	e004      	b.n	800a4d4 <OnRxData+0x7c>
                    LmHandlerRequestClass(CLASS_C);
 800a4ca:	2002      	movs	r0, #2
 800a4cc:	f002 fd02 	bl	800ced4 <LmHandlerRequestClass>
                    break;
 800a4d0:	e000      	b.n	800a4d4 <OnRxData+0x7c>
                    break;
 800a4d2:	bf00      	nop
                }
              }
              break;
 800a4d4:	e023      	b.n	800a51e <OnRxData+0xc6>
            case LORAWAN_USER_APP_PORT:
              if (appData->BufferSize == 1)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	785b      	ldrb	r3, [r3, #1]
 800a4da:	2b01      	cmp	r3, #1
 800a4dc:	d121      	bne.n	800a522 <OnRxData+0xca>
              {
                AppLedStateOn = appData->Buffer[0] & 0x01;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	781b      	ldrb	r3, [r3, #0]
 800a4e4:	f003 0301 	and.w	r3, r3, #1
 800a4e8:	b2da      	uxtb	r2, r3
 800a4ea:	4b23      	ldr	r3, [pc, #140]	; (800a578 <OnRxData+0x120>)
 800a4ec:	701a      	strb	r2, [r3, #0]
                if (AppLedStateOn == RESET)
 800a4ee:	4b22      	ldr	r3, [pc, #136]	; (800a578 <OnRxData+0x120>)
 800a4f0:	781b      	ldrb	r3, [r3, #0]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d108      	bne.n	800a508 <OnRxData+0xb0>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 800a4f6:	4b21      	ldr	r3, [pc, #132]	; (800a57c <OnRxData+0x124>)
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	2100      	movs	r1, #0
 800a4fc:	2003      	movs	r0, #3
 800a4fe:	f013 f865 	bl	801d5cc <UTIL_ADV_TRACE_COND_FSend>
                  Status_LED_Off();
 800a502:	f7f8 fb6f 	bl	8002be4 <Status_LED_Off>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
                  Status_LED_On();
                }
              }
              break;
 800a506:	e00c      	b.n	800a522 <OnRxData+0xca>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800a508:	4b1d      	ldr	r3, [pc, #116]	; (800a580 <OnRxData+0x128>)
 800a50a:	2200      	movs	r2, #0
 800a50c:	2100      	movs	r1, #0
 800a50e:	2003      	movs	r0, #3
 800a510:	f013 f85c 	bl	801d5cc <UTIL_ADV_TRACE_COND_FSend>
                  Status_LED_On();
 800a514:	f7f8 fb72 	bl	8002bfc <Status_LED_On>
              break;
 800a518:	e003      	b.n	800a522 <OnRxData+0xca>

            default:

              break;
 800a51a:	bf00      	nop
 800a51c:	e002      	b.n	800a524 <OnRxData+0xcc>
              break;
 800a51e:	bf00      	nop
 800a520:	e000      	b.n	800a524 <OnRxData+0xcc>
              break;
 800a522:	bf00      	nop
          }
        }
      }
    }
    if (params->RxSlot < RX_SLOT_NONE)
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	7c1b      	ldrb	r3, [r3, #16]
 800a528:	2b05      	cmp	r3, #5
 800a52a:	d81f      	bhi.n	800a56c <OnRxData+0x114>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	68db      	ldr	r3, [r3, #12]
 800a530:	7bfa      	ldrb	r2, [r7, #15]
 800a532:	6839      	ldr	r1, [r7, #0]
 800a534:	f991 1008 	ldrsb.w	r1, [r1, #8]
 800a538:	460c      	mov	r4, r1
 800a53a:	6839      	ldr	r1, [r7, #0]
 800a53c:	7c09      	ldrb	r1, [r1, #16]
 800a53e:	4608      	mov	r0, r1
 800a540:	4910      	ldr	r1, [pc, #64]	; (800a584 <OnRxData+0x12c>)
 800a542:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800a546:	6838      	ldr	r0, [r7, #0]
 800a548:	f990 0009 	ldrsb.w	r0, [r0, #9]
 800a54c:	4605      	mov	r5, r0
 800a54e:	6838      	ldr	r0, [r7, #0]
 800a550:	f990 000a 	ldrsb.w	r0, [r0, #10]
 800a554:	9005      	str	r0, [sp, #20]
 800a556:	9504      	str	r5, [sp, #16]
 800a558:	9103      	str	r1, [sp, #12]
 800a55a:	9402      	str	r4, [sp, #8]
 800a55c:	9201      	str	r2, [sp, #4]
 800a55e:	9300      	str	r3, [sp, #0]
 800a560:	4b09      	ldr	r3, [pc, #36]	; (800a588 <OnRxData+0x130>)
 800a562:	2200      	movs	r2, #0
 800a564:	2100      	movs	r1, #0
 800a566:	2003      	movs	r0, #3
 800a568:	f013 f830 	bl	801d5cc <UTIL_ADV_TRACE_COND_FSend>
              params->DownlinkCounter, RxPort, params->Datarate, slotStrings[params->RxSlot], params->Rssi, params->Snr);
    }
  }
  /* USER CODE END OnRxData_1 */
}
 800a56c:	bf00      	nop
 800a56e:	3710      	adds	r7, #16
 800a570:	46bd      	mov	sp, r7
 800a572:	bdb0      	pop	{r4, r5, r7, pc}
 800a574:	20000528 	.word	0x20000528
 800a578:	2000050e 	.word	0x2000050e
 800a57c:	0801dd2c 	.word	0x0801dd2c
 800a580:	0801dd38 	.word	0x0801dd38
 800a584:	20000008 	.word	0x20000008
 800a588:	0801dd44 	.word	0x0801dd44

0800a58c <SendTxData>:

static void SendTxData(void)
{
 800a58c:	b590      	push	{r4, r7, lr}
 800a58e:	b091      	sub	sp, #68	; 0x44
 800a590:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800a592:	23ff      	movs	r3, #255	; 0xff
 800a594:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t batteryLevel = GetBatteryLevel();
 800a598:	f7f7 fcf0 	bl	8001f7c <GetBatteryLevel>
 800a59c:	4603      	mov	r3, r0
 800a59e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	637b      	str	r3, [r7, #52]	; 0x34

  uint16_t pressure = 0;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	85bb      	strh	r3, [r7, #44]	; 0x2c
  int16_t temperature = 0;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t humidity = 0;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	853b      	strh	r3, [r7, #40]	; 0x28
  uint32_t i = 0;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	633b      	str	r3, [r7, #48]	; 0x30
  int32_t latitude = 0;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	627b      	str	r3, [r7, #36]	; 0x24
  int32_t longitude = 0;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	623b      	str	r3, [r7, #32]
  uint16_t altitudeGps = 0;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	83fb      	strh	r3, [r7, #30]

  EnvSensors_Read(&sensor_data);
 800a5c2:	1d3b      	adds	r3, r7, #4
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f7f7 fe33 	bl	8002230 <EnvSensors_Read>

  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 800a5ca:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a5ce:	9300      	str	r3, [sp, #0]
 800a5d0:	4b8f      	ldr	r3, [pc, #572]	; (800a810 <SendTxData+0x284>)
 800a5d2:	2201      	movs	r2, #1
 800a5d4:	2100      	movs	r1, #0
 800a5d6:	2002      	movs	r0, #2
 800a5d8:	f012 fff8 	bl	801d5cc <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f7f6 fa9c 	bl	8000b1c <__aeabi_f2iz>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	b21b      	sxth	r3, r3
 800a5e8:	9300      	str	r3, [sp, #0]
 800a5ea:	4b8a      	ldr	r3, [pc, #552]	; (800a814 <SendTxData+0x288>)
 800a5ec:	2201      	movs	r2, #1
 800a5ee:	2100      	movs	r1, #0
 800a5f0:	2002      	movs	r0, #2
 800a5f2:	f012 ffeb 	bl	801d5cc <UTIL_ADV_TRACE_COND_FSend>

  AppData.Port = LORAWAN_USER_APP_PORT;
 800a5f6:	4b88      	ldr	r3, [pc, #544]	; (800a818 <SendTxData+0x28c>)
 800a5f8:	2202      	movs	r2, #2
 800a5fa:	701a      	strb	r2, [r3, #0]

  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	4987      	ldr	r1, [pc, #540]	; (800a81c <SendTxData+0x290>)
 800a600:	4618      	mov	r0, r3
 800a602:	f7f6 f93b 	bl	800087c <__aeabi_fmul>
 800a606:	4603      	mov	r3, r0
 800a608:	4618      	mov	r0, r3
 800a60a:	f7f6 faad 	bl	8000b68 <__aeabi_f2uiz>
 800a60e:	4603      	mov	r3, r0
 800a610:	853b      	strh	r3, [r7, #40]	; 0x28
  temperature = (int16_t)(sensor_data.temperature);
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	4618      	mov	r0, r3
 800a616:	f7f6 fa81 	bl	8000b1c <__aeabi_f2iz>
 800a61a:	4603      	mov	r3, r0
 800a61c:	857b      	strh	r3, [r7, #42]	; 0x2a
  pressure = (uint16_t)(sensor_data.pressure * 100 / 10); /* in hPa / 10 */
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	497f      	ldr	r1, [pc, #508]	; (800a820 <SendTxData+0x294>)
 800a622:	4618      	mov	r0, r3
 800a624:	f7f6 f92a 	bl	800087c <__aeabi_fmul>
 800a628:	4603      	mov	r3, r0
 800a62a:	497c      	ldr	r1, [pc, #496]	; (800a81c <SendTxData+0x290>)
 800a62c:	4618      	mov	r0, r3
 800a62e:	f7f6 f9d9 	bl	80009e4 <__aeabi_fdiv>
 800a632:	4603      	mov	r3, r0
 800a634:	4618      	mov	r0, r3
 800a636:	f7f6 fa97 	bl	8000b68 <__aeabi_f2uiz>
 800a63a:	4603      	mov	r3, r0
 800a63c:	85bb      	strh	r3, [r7, #44]	; 0x2c

  AppData.Buffer[i++] = AppLedStateOn;
 800a63e:	4b76      	ldr	r3, [pc, #472]	; (800a818 <SendTxData+0x28c>)
 800a640:	685a      	ldr	r2, [r3, #4]
 800a642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a644:	1c59      	adds	r1, r3, #1
 800a646:	6339      	str	r1, [r7, #48]	; 0x30
 800a648:	4413      	add	r3, r2
 800a64a:	4a76      	ldr	r2, [pc, #472]	; (800a824 <SendTxData+0x298>)
 800a64c:	7812      	ldrb	r2, [r2, #0]
 800a64e:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 800a650:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a652:	0a1b      	lsrs	r3, r3, #8
 800a654:	b298      	uxth	r0, r3
 800a656:	4b70      	ldr	r3, [pc, #448]	; (800a818 <SendTxData+0x28c>)
 800a658:	685a      	ldr	r2, [r3, #4]
 800a65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a65c:	1c59      	adds	r1, r3, #1
 800a65e:	6339      	str	r1, [r7, #48]	; 0x30
 800a660:	4413      	add	r3, r2
 800a662:	b2c2      	uxtb	r2, r0
 800a664:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 800a666:	4b6c      	ldr	r3, [pc, #432]	; (800a818 <SendTxData+0x28c>)
 800a668:	685a      	ldr	r2, [r3, #4]
 800a66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a66c:	1c59      	adds	r1, r3, #1
 800a66e:	6339      	str	r1, [r7, #48]	; 0x30
 800a670:	4413      	add	r3, r2
 800a672:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800a674:	b2d2      	uxtb	r2, r2
 800a676:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 800a678:	4b67      	ldr	r3, [pc, #412]	; (800a818 <SendTxData+0x28c>)
 800a67a:	685a      	ldr	r2, [r3, #4]
 800a67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a67e:	1c59      	adds	r1, r3, #1
 800a680:	6339      	str	r1, [r7, #48]	; 0x30
 800a682:	4413      	add	r3, r2
 800a684:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800a686:	b2d2      	uxtb	r2, r2
 800a688:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 800a68a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a68c:	0a1b      	lsrs	r3, r3, #8
 800a68e:	b298      	uxth	r0, r3
 800a690:	4b61      	ldr	r3, [pc, #388]	; (800a818 <SendTxData+0x28c>)
 800a692:	685a      	ldr	r2, [r3, #4]
 800a694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a696:	1c59      	adds	r1, r3, #1
 800a698:	6339      	str	r1, [r7, #48]	; 0x30
 800a69a:	4413      	add	r3, r2
 800a69c:	b2c2      	uxtb	r2, r0
 800a69e:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 800a6a0:	4b5d      	ldr	r3, [pc, #372]	; (800a818 <SendTxData+0x28c>)
 800a6a2:	685a      	ldr	r2, [r3, #4]
 800a6a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a6:	1c59      	adds	r1, r3, #1
 800a6a8:	6339      	str	r1, [r7, #48]	; 0x30
 800a6aa:	4413      	add	r3, r2
 800a6ac:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800a6ae:	b2d2      	uxtb	r2, r2
 800a6b0:	701a      	strb	r2, [r3, #0]

  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 800a6b2:	4b5d      	ldr	r3, [pc, #372]	; (800a828 <SendTxData+0x29c>)
 800a6b4:	781b      	ldrb	r3, [r3, #0]
 800a6b6:	2b08      	cmp	r3, #8
 800a6b8:	d007      	beq.n	800a6ca <SendTxData+0x13e>
 800a6ba:	4b5b      	ldr	r3, [pc, #364]	; (800a828 <SendTxData+0x29c>)
 800a6bc:	781b      	ldrb	r3, [r3, #0]
 800a6be:	2b01      	cmp	r3, #1
 800a6c0:	d003      	beq.n	800a6ca <SendTxData+0x13e>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 800a6c2:	4b59      	ldr	r3, [pc, #356]	; (800a828 <SendTxData+0x29c>)
 800a6c4:	781b      	ldrb	r3, [r3, #0]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d120      	bne.n	800a70c <SendTxData+0x180>
  {
    AppData.Buffer[i++] = 0;
 800a6ca:	4b53      	ldr	r3, [pc, #332]	; (800a818 <SendTxData+0x28c>)
 800a6cc:	685a      	ldr	r2, [r3, #4]
 800a6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6d0:	1c59      	adds	r1, r3, #1
 800a6d2:	6339      	str	r1, [r7, #48]	; 0x30
 800a6d4:	4413      	add	r3, r2
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800a6da:	4b4f      	ldr	r3, [pc, #316]	; (800a818 <SendTxData+0x28c>)
 800a6dc:	685a      	ldr	r2, [r3, #4]
 800a6de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e0:	1c59      	adds	r1, r3, #1
 800a6e2:	6339      	str	r1, [r7, #48]	; 0x30
 800a6e4:	4413      	add	r3, r2
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800a6ea:	4b4b      	ldr	r3, [pc, #300]	; (800a818 <SendTxData+0x28c>)
 800a6ec:	685a      	ldr	r2, [r3, #4]
 800a6ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f0:	1c59      	adds	r1, r3, #1
 800a6f2:	6339      	str	r1, [r7, #48]	; 0x30
 800a6f4:	4413      	add	r3, r2
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800a6fa:	4b47      	ldr	r3, [pc, #284]	; (800a818 <SendTxData+0x28c>)
 800a6fc:	685a      	ldr	r2, [r3, #4]
 800a6fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a700:	1c59      	adds	r1, r3, #1
 800a702:	6339      	str	r1, [r7, #48]	; 0x30
 800a704:	4413      	add	r3, r2
 800a706:	2200      	movs	r2, #0
 800a708:	701a      	strb	r2, [r3, #0]
 800a70a:	e05b      	b.n	800a7c4 <SendTxData+0x238>
  }
  else
  {
    latitude = sensor_data.latitude;
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	627b      	str	r3, [r7, #36]	; 0x24
    longitude = sensor_data.longitude;
 800a710:	697b      	ldr	r3, [r7, #20]
 800a712:	623b      	str	r3, [r7, #32]

    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 800a714:	4b40      	ldr	r3, [pc, #256]	; (800a818 <SendTxData+0x28c>)
 800a716:	685a      	ldr	r2, [r3, #4]
 800a718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a71a:	1c59      	adds	r1, r3, #1
 800a71c:	6339      	str	r1, [r7, #48]	; 0x30
 800a71e:	18d4      	adds	r4, r2, r3
 800a720:	f7f7 fc2c 	bl	8001f7c <GetBatteryLevel>
 800a724:	4603      	mov	r3, r0
 800a726:	7023      	strb	r3, [r4, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 800a728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a72a:	1418      	asrs	r0, r3, #16
 800a72c:	4b3a      	ldr	r3, [pc, #232]	; (800a818 <SendTxData+0x28c>)
 800a72e:	685a      	ldr	r2, [r3, #4]
 800a730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a732:	1c59      	adds	r1, r3, #1
 800a734:	6339      	str	r1, [r7, #48]	; 0x30
 800a736:	4413      	add	r3, r2
 800a738:	b2c2      	uxtb	r2, r0
 800a73a:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 800a73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a73e:	1218      	asrs	r0, r3, #8
 800a740:	4b35      	ldr	r3, [pc, #212]	; (800a818 <SendTxData+0x28c>)
 800a742:	685a      	ldr	r2, [r3, #4]
 800a744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a746:	1c59      	adds	r1, r3, #1
 800a748:	6339      	str	r1, [r7, #48]	; 0x30
 800a74a:	4413      	add	r3, r2
 800a74c:	b2c2      	uxtb	r2, r0
 800a74e:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 800a750:	4b31      	ldr	r3, [pc, #196]	; (800a818 <SendTxData+0x28c>)
 800a752:	685a      	ldr	r2, [r3, #4]
 800a754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a756:	1c59      	adds	r1, r3, #1
 800a758:	6339      	str	r1, [r7, #48]	; 0x30
 800a75a:	4413      	add	r3, r2
 800a75c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a75e:	b2d2      	uxtb	r2, r2
 800a760:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 800a762:	6a3b      	ldr	r3, [r7, #32]
 800a764:	1418      	asrs	r0, r3, #16
 800a766:	4b2c      	ldr	r3, [pc, #176]	; (800a818 <SendTxData+0x28c>)
 800a768:	685a      	ldr	r2, [r3, #4]
 800a76a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a76c:	1c59      	adds	r1, r3, #1
 800a76e:	6339      	str	r1, [r7, #48]	; 0x30
 800a770:	4413      	add	r3, r2
 800a772:	b2c2      	uxtb	r2, r0
 800a774:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 800a776:	6a3b      	ldr	r3, [r7, #32]
 800a778:	1218      	asrs	r0, r3, #8
 800a77a:	4b27      	ldr	r3, [pc, #156]	; (800a818 <SendTxData+0x28c>)
 800a77c:	685a      	ldr	r2, [r3, #4]
 800a77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a780:	1c59      	adds	r1, r3, #1
 800a782:	6339      	str	r1, [r7, #48]	; 0x30
 800a784:	4413      	add	r3, r2
 800a786:	b2c2      	uxtb	r2, r0
 800a788:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 800a78a:	4b23      	ldr	r3, [pc, #140]	; (800a818 <SendTxData+0x28c>)
 800a78c:	685a      	ldr	r2, [r3, #4]
 800a78e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a790:	1c59      	adds	r1, r3, #1
 800a792:	6339      	str	r1, [r7, #48]	; 0x30
 800a794:	4413      	add	r3, r2
 800a796:	6a3a      	ldr	r2, [r7, #32]
 800a798:	b2d2      	uxtb	r2, r2
 800a79a:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 800a79c:	8bfb      	ldrh	r3, [r7, #30]
 800a79e:	0a1b      	lsrs	r3, r3, #8
 800a7a0:	b298      	uxth	r0, r3
 800a7a2:	4b1d      	ldr	r3, [pc, #116]	; (800a818 <SendTxData+0x28c>)
 800a7a4:	685a      	ldr	r2, [r3, #4]
 800a7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a8:	1c59      	adds	r1, r3, #1
 800a7aa:	6339      	str	r1, [r7, #48]	; 0x30
 800a7ac:	4413      	add	r3, r2
 800a7ae:	b2c2      	uxtb	r2, r0
 800a7b0:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 800a7b2:	4b19      	ldr	r3, [pc, #100]	; (800a818 <SendTxData+0x28c>)
 800a7b4:	685a      	ldr	r2, [r3, #4]
 800a7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b8:	1c59      	adds	r1, r3, #1
 800a7ba:	6339      	str	r1, [r7, #48]	; 0x30
 800a7bc:	4413      	add	r3, r2
 800a7be:	8bfa      	ldrh	r2, [r7, #30]
 800a7c0:	b2d2      	uxtb	r2, r2
 800a7c2:	701a      	strb	r2, [r3, #0]
  }

  AppData.BufferSize = i;
 800a7c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c6:	b2da      	uxtb	r2, r3
 800a7c8:	4b13      	ldr	r3, [pc, #76]	; (800a818 <SendTxData+0x28c>)
 800a7ca:	705a      	strb	r2, [r3, #1]

  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800a7cc:	4b17      	ldr	r3, [pc, #92]	; (800a82c <SendTxData+0x2a0>)
 800a7ce:	7a5b      	ldrb	r3, [r3, #9]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d007      	beq.n	800a7e4 <SendTxData+0x258>
 800a7d4:	f002 fa6c 	bl	800ccb0 <LmHandlerJoinStatus>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	2b01      	cmp	r3, #1
 800a7dc:	d102      	bne.n	800a7e4 <SendTxData+0x258>
  {
    UTIL_TIMER_Stop(&JoinLedTimer);
 800a7de:	4813      	ldr	r0, [pc, #76]	; (800a82c <SendTxData+0x2a0>)
 800a7e0:	f012 fcea 	bl	801d1b8 <UTIL_TIMER_Stop>
  }

  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800a7e4:	4b10      	ldr	r3, [pc, #64]	; (800a828 <SendTxData+0x29c>)
 800a7e6:	78db      	ldrb	r3, [r3, #3]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	4619      	mov	r1, r3
 800a7ec:	480a      	ldr	r0, [pc, #40]	; (800a818 <SendTxData+0x28c>)
 800a7ee:	f002 fa7b 	bl	800cce8 <LmHandlerSend>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (LORAMAC_HANDLER_SUCCESS == status)
 800a7f8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d119      	bne.n	800a834 <SendTxData+0x2a8>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800a800:	4b0b      	ldr	r3, [pc, #44]	; (800a830 <SendTxData+0x2a4>)
 800a802:	2201      	movs	r2, #1
 800a804:	2100      	movs	r1, #0
 800a806:	2001      	movs	r0, #1
 800a808:	f012 fee0 	bl	801d5cc <UTIL_ADV_TRACE_COND_FSend>
 800a80c:	e029      	b.n	800a862 <SendTxData+0x2d6>
 800a80e:	bf00      	nop
 800a810:	0801dd8c 	.word	0x0801dd8c
 800a814:	0801dd98 	.word	0x0801dd98
 800a818:	2000008c 	.word	0x2000008c
 800a81c:	41200000 	.word	0x41200000
 800a820:	42c80000 	.word	0x42c80000
 800a824:	2000050e 	.word	0x2000050e
 800a828:	20000070 	.word	0x20000070
 800a82c:	20000540 	.word	0x20000540
 800a830:	0801dda4 	.word	0x0801dda4
  }
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800a834:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a838:	f113 0f06 	cmn.w	r3, #6
 800a83c:	d111      	bne.n	800a862 <SendTxData+0x2d6>
  {
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800a83e:	f002 f98b 	bl	800cb58 <LmHandlerGetDutyCycleWaitTime>
 800a842:	6378      	str	r0, [r7, #52]	; 0x34
    if (nextTxIn > 0)
 800a844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a846:	2b00      	cmp	r3, #0
 800a848:	d00b      	beq.n	800a862 <SendTxData+0x2d6>
    {
      APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800a84a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a84c:	4a11      	ldr	r2, [pc, #68]	; (800a894 <SendTxData+0x308>)
 800a84e:	fba2 2303 	umull	r2, r3, r2, r3
 800a852:	099b      	lsrs	r3, r3, #6
 800a854:	9300      	str	r3, [sp, #0]
 800a856:	4b10      	ldr	r3, [pc, #64]	; (800a898 <SendTxData+0x30c>)
 800a858:	2201      	movs	r2, #1
 800a85a:	2100      	movs	r1, #0
 800a85c:	2001      	movs	r0, #1
 800a85e:	f012 feb5 	bl	801d5cc <UTIL_ADV_TRACE_COND_FSend>
    }
  }

  if (EventType == TX_ON_TIMER)
 800a862:	4b0e      	ldr	r3, [pc, #56]	; (800a89c <SendTxData+0x310>)
 800a864:	781b      	ldrb	r3, [r3, #0]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d10f      	bne.n	800a88a <SendTxData+0x2fe>
  {
    UTIL_TIMER_Stop(&TxTimer);
 800a86a:	480d      	ldr	r0, [pc, #52]	; (800a8a0 <SendTxData+0x314>)
 800a86c:	f012 fca4 	bl	801d1b8 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 800a870:	4b0c      	ldr	r3, [pc, #48]	; (800a8a4 <SendTxData+0x318>)
 800a872:	681a      	ldr	r2, [r3, #0]
 800a874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a876:	4293      	cmp	r3, r2
 800a878:	bf38      	it	cc
 800a87a:	4613      	movcc	r3, r2
 800a87c:	4619      	mov	r1, r3
 800a87e:	4808      	ldr	r0, [pc, #32]	; (800a8a0 <SendTxData+0x314>)
 800a880:	f012 fd0a 	bl	801d298 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800a884:	4806      	ldr	r0, [pc, #24]	; (800a8a0 <SendTxData+0x314>)
 800a886:	f012 fc29 	bl	801d0dc <UTIL_TIMER_Start>
  }

  /* USER CODE END SendTxData_1 */
}
 800a88a:	bf00      	nop
 800a88c:	373c      	adds	r7, #60	; 0x3c
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd90      	pop	{r4, r7, pc}
 800a892:	bf00      	nop
 800a894:	10624dd3 	.word	0x10624dd3
 800a898:	0801ddb4 	.word	0x0801ddb4
 800a89c:	200003e8 	.word	0x200003e8
 800a8a0:	200003ec 	.word	0x200003ec
 800a8a4:	20000088 	.word	0x20000088

0800a8a8 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b082      	sub	sp, #8
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800a8b0:	2100      	movs	r1, #0
 800a8b2:	2002      	movs	r0, #2
 800a8b4:	f012 fb5a 	bl	801cf6c <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800a8b8:	4803      	ldr	r0, [pc, #12]	; (800a8c8 <OnTxTimerEvent+0x20>)
 800a8ba:	f012 fc0f 	bl	801d0dc <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800a8be:	bf00      	nop
 800a8c0:	3708      	adds	r7, #8
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}
 800a8c6:	bf00      	nop
 800a8c8:	200003ec 	.word	0x200003ec

0800a8cc <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context) { }
 800a8cc:	b480      	push	{r7}
 800a8ce:	b083      	sub	sp, #12
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
 800a8d4:	bf00      	nop
 800a8d6:	370c      	adds	r7, #12
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bc80      	pop	{r7}
 800a8dc:	4770      	bx	lr

0800a8de <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context) { }
 800a8de:	b480      	push	{r7}
 800a8e0:	b083      	sub	sp, #12
 800a8e2:	af00      	add	r7, sp, #0
 800a8e4:	6078      	str	r0, [r7, #4]
 800a8e6:	bf00      	nop
 800a8e8:	370c      	adds	r7, #12
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bc80      	pop	{r7}
 800a8ee:	4770      	bx	lr

0800a8f0 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context) { }
 800a8f0:	b480      	push	{r7}
 800a8f2:	b083      	sub	sp, #12
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
 800a8f8:	bf00      	nop
 800a8fa:	370c      	adds	r7, #12
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bc80      	pop	{r7}
 800a900:	4770      	bx	lr
	...

0800a904 <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b086      	sub	sp, #24
 800a908:	af04      	add	r7, sp, #16
 800a90a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d041      	beq.n	800a996 <OnTxData+0x92>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	781b      	ldrb	r3, [r3, #0]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d03d      	beq.n	800a996 <OnTxData+0x92>
    {
      UTIL_TIMER_Start(&TxLedTimer);
 800a91a:	4821      	ldr	r0, [pc, #132]	; (800a9a0 <OnTxData+0x9c>)
 800a91c:	f012 fbde 	bl	801d0dc <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800a920:	4b20      	ldr	r3, [pc, #128]	; (800a9a4 <OnTxData+0xa0>)
 800a922:	2200      	movs	r2, #0
 800a924:	2100      	movs	r1, #0
 800a926:	2002      	movs	r0, #2
 800a928:	f012 fe50 	bl	801d5cc <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	68db      	ldr	r3, [r3, #12]
 800a930:	687a      	ldr	r2, [r7, #4]
 800a932:	7c12      	ldrb	r2, [r2, #16]
 800a934:	4611      	mov	r1, r2
 800a936:	687a      	ldr	r2, [r7, #4]
 800a938:	f992 200a 	ldrsb.w	r2, [r2, #10]
 800a93c:	4610      	mov	r0, r2
 800a93e:	687a      	ldr	r2, [r7, #4]
 800a940:	f992 2018 	ldrsb.w	r2, [r2, #24]
 800a944:	9203      	str	r2, [sp, #12]
 800a946:	9002      	str	r0, [sp, #8]
 800a948:	9101      	str	r1, [sp, #4]
 800a94a:	9300      	str	r3, [sp, #0]
 800a94c:	4b16      	ldr	r3, [pc, #88]	; (800a9a8 <OnTxData+0xa4>)
 800a94e:	2200      	movs	r2, #0
 800a950:	2100      	movs	r1, #0
 800a952:	2003      	movs	r0, #3
 800a954:	f012 fe3a 	bl	801d5cc <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800a958:	4b14      	ldr	r3, [pc, #80]	; (800a9ac <OnTxData+0xa8>)
 800a95a:	2200      	movs	r2, #0
 800a95c:	2100      	movs	r1, #0
 800a95e:	2003      	movs	r0, #3
 800a960:	f012 fe34 	bl	801d5cc <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	7a1b      	ldrb	r3, [r3, #8]
 800a968:	2b01      	cmp	r3, #1
 800a96a:	d10e      	bne.n	800a98a <OnTxData+0x86>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	7a5b      	ldrb	r3, [r3, #9]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d001      	beq.n	800a978 <OnTxData+0x74>
 800a974:	4b0e      	ldr	r3, [pc, #56]	; (800a9b0 <OnTxData+0xac>)
 800a976:	e000      	b.n	800a97a <OnTxData+0x76>
 800a978:	4b0e      	ldr	r3, [pc, #56]	; (800a9b4 <OnTxData+0xb0>)
 800a97a:	9300      	str	r3, [sp, #0]
 800a97c:	4b0e      	ldr	r3, [pc, #56]	; (800a9b8 <OnTxData+0xb4>)
 800a97e:	2200      	movs	r2, #0
 800a980:	2100      	movs	r1, #0
 800a982:	2003      	movs	r0, #3
 800a984:	f012 fe22 	bl	801d5cc <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800a988:	e005      	b.n	800a996 <OnTxData+0x92>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800a98a:	4b0c      	ldr	r3, [pc, #48]	; (800a9bc <OnTxData+0xb8>)
 800a98c:	2200      	movs	r2, #0
 800a98e:	2100      	movs	r1, #0
 800a990:	2003      	movs	r0, #3
 800a992:	f012 fe1b 	bl	801d5cc <UTIL_ADV_TRACE_COND_FSend>
}
 800a996:	bf00      	nop
 800a998:	3708      	adds	r7, #8
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}
 800a99e:	bf00      	nop
 800a9a0:	20000510 	.word	0x20000510
 800a9a4:	0801ddd4 	.word	0x0801ddd4
 800a9a8:	0801de08 	.word	0x0801de08
 800a9ac:	0801de3c 	.word	0x0801de3c
 800a9b0:	0801de4c 	.word	0x0801de4c
 800a9b4:	0801de50 	.word	0x0801de50
 800a9b8:	0801de58 	.word	0x0801de58
 800a9bc:	0801de6c 	.word	0x0801de6c

0800a9c0 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b082      	sub	sp, #8
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d039      	beq.n	800aa42 <OnJoinRequest+0x82>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d11e      	bne.n	800aa16 <OnJoinRequest+0x56>
    {
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), CFG_SEQ_Prio_0);
 800a9d8:	2100      	movs	r1, #0
 800a9da:	2004      	movs	r0, #4
 800a9dc:	f012 fac6 	bl	801cf6c <UTIL_SEQ_SetTask>

      UTIL_TIMER_Stop(&JoinLedTimer);
 800a9e0:	481a      	ldr	r0, [pc, #104]	; (800aa4c <OnJoinRequest+0x8c>)
 800a9e2:	f012 fbe9 	bl	801d1b8 <UTIL_TIMER_Stop>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800a9e6:	4b1a      	ldr	r3, [pc, #104]	; (800aa50 <OnJoinRequest+0x90>)
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	2100      	movs	r1, #0
 800a9ec:	2002      	movs	r0, #2
 800a9ee:	f012 fded 	bl	801d5cc <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	79db      	ldrb	r3, [r3, #7]
 800a9f6:	2b01      	cmp	r3, #1
 800a9f8:	d106      	bne.n	800aa08 <OnJoinRequest+0x48>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800a9fa:	4b16      	ldr	r3, [pc, #88]	; (800aa54 <OnJoinRequest+0x94>)
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	2100      	movs	r1, #0
 800aa00:	2002      	movs	r0, #2
 800aa02:	f012 fde3 	bl	801d5cc <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
      }
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800aa06:	e01c      	b.n	800aa42 <OnJoinRequest+0x82>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800aa08:	4b13      	ldr	r3, [pc, #76]	; (800aa58 <OnJoinRequest+0x98>)
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	2100      	movs	r1, #0
 800aa0e:	2002      	movs	r0, #2
 800aa10:	f012 fddc 	bl	801d5cc <UTIL_ADV_TRACE_COND_FSend>
}
 800aa14:	e015      	b.n	800aa42 <OnJoinRequest+0x82>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800aa16:	4b11      	ldr	r3, [pc, #68]	; (800aa5c <OnJoinRequest+0x9c>)
 800aa18:	2200      	movs	r2, #0
 800aa1a:	2100      	movs	r1, #0
 800aa1c:	2002      	movs	r0, #2
 800aa1e:	f012 fdd5 	bl	801d5cc <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA) {
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	79db      	ldrb	r3, [r3, #7]
 800aa26:	2b02      	cmp	r3, #2
 800aa28:	d10b      	bne.n	800aa42 <OnJoinRequest+0x82>
          APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = RE-TRYING OTAA JOIN\r\n");
 800aa2a:	4b0d      	ldr	r3, [pc, #52]	; (800aa60 <OnJoinRequest+0xa0>)
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	2100      	movs	r1, #0
 800aa30:	2002      	movs	r0, #2
 800aa32:	f012 fdcb 	bl	801d5cc <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 800aa36:	4b0b      	ldr	r3, [pc, #44]	; (800aa64 <OnJoinRequest+0xa4>)
 800aa38:	781b      	ldrb	r3, [r3, #0]
 800aa3a:	2101      	movs	r1, #1
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f002 f895 	bl	800cb6c <LmHandlerJoin>
}
 800aa42:	bf00      	nop
 800aa44:	3708      	adds	r7, #8
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}
 800aa4a:	bf00      	nop
 800aa4c:	20000540 	.word	0x20000540
 800aa50:	0801de7c 	.word	0x0801de7c
 800aa54:	0801de94 	.word	0x0801de94
 800aa58:	0801deb4 	.word	0x0801deb4
 800aa5c:	0801ded4 	.word	0x0801ded4
 800aa60:	0801def0 	.word	0x0801def0
 800aa64:	20000020 	.word	0x20000020

0800aa68 <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800aa68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa6a:	b093      	sub	sp, #76	; 0x4c
 800aa6c:	af0c      	add	r7, sp, #48	; 0x30
 800aa6e:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d056      	beq.n	800ab24 <OnBeaconStatusChange+0xbc>
  {
    switch (params->State)
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	785b      	ldrb	r3, [r3, #1]
 800aa7a:	2b02      	cmp	r3, #2
 800aa7c:	d008      	beq.n	800aa90 <OnBeaconStatusChange+0x28>
 800aa7e:	2b03      	cmp	r3, #3
 800aa80:	d049      	beq.n	800ab16 <OnBeaconStatusChange+0xae>
    {
      default:
      case LORAMAC_HANDLER_BEACON_LOST:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800aa82:	4b2a      	ldr	r3, [pc, #168]	; (800ab2c <OnBeaconStatusChange+0xc4>)
 800aa84:	2200      	movs	r2, #0
 800aa86:	2100      	movs	r1, #0
 800aa88:	2002      	movs	r0, #2
 800aa8a:	f012 fd9f 	bl	801d5cc <UTIL_ADV_TRACE_COND_FSend>
        break;
 800aa8e:	e049      	b.n	800ab24 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_RX:
      {
        APP_LOG(TS_OFF, VLEVEL_M,
 800aa90:	697b      	ldr	r3, [r7, #20]
 800aa92:	7c1b      	ldrb	r3, [r3, #16]
 800aa94:	4618      	mov	r0, r3
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800aa9c:	461c      	mov	r4, r3
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800aaa4:	461d      	mov	r5, r3
 800aaa6:	697b      	ldr	r3, [r7, #20]
 800aaa8:	68db      	ldr	r3, [r3, #12]
 800aaaa:	697a      	ldr	r2, [r7, #20]
 800aaac:	6852      	ldr	r2, [r2, #4]
 800aaae:	6979      	ldr	r1, [r7, #20]
 800aab0:	7d89      	ldrb	r1, [r1, #22]
 800aab2:	460e      	mov	r6, r1
 800aab4:	6979      	ldr	r1, [r7, #20]
 800aab6:	7dc9      	ldrb	r1, [r1, #23]
 800aab8:	6139      	str	r1, [r7, #16]
 800aaba:	6979      	ldr	r1, [r7, #20]
 800aabc:	7e09      	ldrb	r1, [r1, #24]
 800aabe:	60f9      	str	r1, [r7, #12]
 800aac0:	6979      	ldr	r1, [r7, #20]
 800aac2:	7e49      	ldrb	r1, [r1, #25]
 800aac4:	60b9      	str	r1, [r7, #8]
 800aac6:	6979      	ldr	r1, [r7, #20]
 800aac8:	7e89      	ldrb	r1, [r1, #26]
 800aaca:	6079      	str	r1, [r7, #4]
 800aacc:	6979      	ldr	r1, [r7, #20]
 800aace:	7ec9      	ldrb	r1, [r1, #27]
 800aad0:	6039      	str	r1, [r7, #0]
 800aad2:	6979      	ldr	r1, [r7, #20]
 800aad4:	7f09      	ldrb	r1, [r1, #28]
 800aad6:	910b      	str	r1, [sp, #44]	; 0x2c
 800aad8:	f8d7 c000 	ldr.w	ip, [r7]
 800aadc:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800aae0:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800aae4:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800aae8:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800aaec:	f8cd c020 	str.w	ip, [sp, #32]
 800aaf0:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800aaf4:	f8cd c01c 	str.w	ip, [sp, #28]
 800aaf8:	6939      	ldr	r1, [r7, #16]
 800aafa:	9106      	str	r1, [sp, #24]
 800aafc:	9605      	str	r6, [sp, #20]
 800aafe:	9204      	str	r2, [sp, #16]
 800ab00:	9303      	str	r3, [sp, #12]
 800ab02:	9502      	str	r5, [sp, #8]
 800ab04:	9401      	str	r4, [sp, #4]
 800ab06:	9000      	str	r0, [sp, #0]
 800ab08:	4b09      	ldr	r3, [pc, #36]	; (800ab30 <OnBeaconStatusChange+0xc8>)
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	2100      	movs	r1, #0
 800ab0e:	2002      	movs	r0, #2
 800ab10:	f012 fd5c 	bl	801d5cc <UTIL_ADV_TRACE_COND_FSend>
                params->Info.Datarate, params->Info.Rssi, params->Info.Snr, params->Info.Frequency,
                params->Info.Time.Seconds, params->Info.GwSpecific.InfoDesc,
                params->Info.GwSpecific.Info[0], params->Info.GwSpecific.Info[1],
                params->Info.GwSpecific.Info[2], params->Info.GwSpecific.Info[3],
                params->Info.GwSpecific.Info[4], params->Info.GwSpecific.Info[5]);
        break;
 800ab14:	e006      	b.n	800ab24 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800ab16:	4b07      	ldr	r3, [pc, #28]	; (800ab34 <OnBeaconStatusChange+0xcc>)
 800ab18:	2200      	movs	r2, #0
 800ab1a:	2100      	movs	r1, #0
 800ab1c:	2002      	movs	r0, #2
 800ab1e:	f012 fd55 	bl	801d5cc <UTIL_ADV_TRACE_COND_FSend>
        break;
 800ab22:	bf00      	nop
      }
    }
  }
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800ab24:	bf00      	nop
 800ab26:	371c      	adds	r7, #28
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab2c:	0801df14 	.word	0x0801df14
 800ab30:	0801df2c 	.word	0x0801df2c
 800ab34:	0801dfa0 	.word	0x0801dfa0

0800ab38 <OnSysTimeUpdate>:

static void OnSysTimeUpdate(void)
{
 800ab38:	b480      	push	{r7}
 800ab3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 800ab3c:	bf00      	nop
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bc80      	pop	{r7}
 800ab42:	4770      	bx	lr

0800ab44 <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b084      	sub	sp, #16
 800ab48:	af02      	add	r7, sp, #8
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800ab4e:	79fb      	ldrb	r3, [r7, #7]
 800ab50:	4a06      	ldr	r2, [pc, #24]	; (800ab6c <OnClassChange+0x28>)
 800ab52:	5cd3      	ldrb	r3, [r2, r3]
 800ab54:	9300      	str	r3, [sp, #0]
 800ab56:	4b06      	ldr	r3, [pc, #24]	; (800ab70 <OnClassChange+0x2c>)
 800ab58:	2200      	movs	r2, #0
 800ab5a:	2100      	movs	r1, #0
 800ab5c:	2002      	movs	r0, #2
 800ab5e:	f012 fd35 	bl	801d5cc <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END OnClassChange_1 */
}
 800ab62:	bf00      	nop
 800ab64:	3708      	adds	r7, #8
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}
 800ab6a:	bf00      	nop
 800ab6c:	0801dfdc 	.word	0x0801dfdc
 800ab70:	0801dfc0 	.word	0x0801dfc0

0800ab74 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800ab78:	2100      	movs	r1, #0
 800ab7a:	2001      	movs	r0, #1
 800ab7c:	f012 f9f6 	bl	801cf6c <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800ab80:	bf00      	nop
 800ab82:	bd80      	pop	{r7, pc}

0800ab84 <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b082      	sub	sp, #8
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800ab8c:	4a0d      	ldr	r2, [pc, #52]	; (800abc4 <OnTxPeriodicityChanged+0x40>)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800ab92:	4b0c      	ldr	r3, [pc, #48]	; (800abc4 <OnTxPeriodicityChanged+0x40>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d103      	bne.n	800aba2 <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800ab9a:	4b0a      	ldr	r3, [pc, #40]	; (800abc4 <OnTxPeriodicityChanged+0x40>)
 800ab9c:	f242 7210 	movw	r2, #10000	; 0x2710
 800aba0:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800aba2:	4809      	ldr	r0, [pc, #36]	; (800abc8 <OnTxPeriodicityChanged+0x44>)
 800aba4:	f012 fb08 	bl	801d1b8 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800aba8:	4b06      	ldr	r3, [pc, #24]	; (800abc4 <OnTxPeriodicityChanged+0x40>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	4619      	mov	r1, r3
 800abae:	4806      	ldr	r0, [pc, #24]	; (800abc8 <OnTxPeriodicityChanged+0x44>)
 800abb0:	f012 fb72 	bl	801d298 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800abb4:	4804      	ldr	r0, [pc, #16]	; (800abc8 <OnTxPeriodicityChanged+0x44>)
 800abb6:	f012 fa91 	bl	801d0dc <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800abba:	bf00      	nop
 800abbc:	3708      	adds	r7, #8
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}
 800abc2:	bf00      	nop
 800abc4:	20000088 	.word	0x20000088
 800abc8:	200003ec 	.word	0x200003ec

0800abcc <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800abcc:	b480      	push	{r7}
 800abce:	b083      	sub	sp, #12
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	4603      	mov	r3, r0
 800abd4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800abd6:	4a04      	ldr	r2, [pc, #16]	; (800abe8 <OnTxFrameCtrlChanged+0x1c>)
 800abd8:	79fb      	ldrb	r3, [r7, #7]
 800abda:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800abdc:	bf00      	nop
 800abde:	370c      	adds	r7, #12
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bc80      	pop	{r7}
 800abe4:	4770      	bx	lr
 800abe6:	bf00      	nop
 800abe8:	20000070 	.word	0x20000070

0800abec <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800abec:	b480      	push	{r7}
 800abee:	b083      	sub	sp, #12
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	4603      	mov	r3, r0
 800abf4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800abf6:	4a04      	ldr	r2, [pc, #16]	; (800ac08 <OnPingSlotPeriodicityChanged+0x1c>)
 800abf8:	79fb      	ldrb	r3, [r7, #7]
 800abfa:	7413      	strb	r3, [r2, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800abfc:	bf00      	nop
 800abfe:	370c      	adds	r7, #12
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bc80      	pop	{r7}
 800ac04:	4770      	bx	lr
 800ac06:	bf00      	nop
 800ac08:	20000070 	.word	0x20000070

0800ac0c <OnSystemReset>:

static void OnSystemReset(void)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800ac10:	f002 fda5 	bl	800d75e <LmHandlerHalt>
 800ac14:	4603      	mov	r3, r0
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d106      	bne.n	800ac28 <OnSystemReset+0x1c>
 800ac1a:	f002 f849 	bl	800ccb0 <LmHandlerJoinStatus>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	2b01      	cmp	r3, #1
 800ac22:	d101      	bne.n	800ac28 <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800ac24:	f7ff fb0c 	bl	800a240 <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800ac28:	bf00      	nop
 800ac2a:	bd80      	pop	{r7, pc}

0800ac2c <StopJoin>:

static void StopJoin(void)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN StopJoin_1 */

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800ac30:	4817      	ldr	r0, [pc, #92]	; (800ac90 <StopJoin+0x64>)
 800ac32:	f012 fac1 	bl	801d1b8 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800ac36:	f002 fd85 	bl	800d744 <LmHandlerStop>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d006      	beq.n	800ac4e <StopJoin+0x22>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800ac40:	4b14      	ldr	r3, [pc, #80]	; (800ac94 <StopJoin+0x68>)
 800ac42:	2200      	movs	r2, #0
 800ac44:	2100      	movs	r1, #0
 800ac46:	2002      	movs	r0, #2
 800ac48:	f012 fcc0 	bl	801d5cc <UTIL_ADV_TRACE_COND_FSend>
 800ac4c:	e01a      	b.n	800ac84 <StopJoin+0x58>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800ac4e:	4b12      	ldr	r3, [pc, #72]	; (800ac98 <StopJoin+0x6c>)
 800ac50:	2200      	movs	r2, #0
 800ac52:	2100      	movs	r1, #0
 800ac54:	2002      	movs	r0, #2
 800ac56:	f012 fcb9 	bl	801d5cc <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800ac5a:	4b10      	ldr	r3, [pc, #64]	; (800ac9c <StopJoin+0x70>)
 800ac5c:	2201      	movs	r2, #1
 800ac5e:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800ac60:	4b0f      	ldr	r3, [pc, #60]	; (800aca0 <StopJoin+0x74>)
 800ac62:	2200      	movs	r2, #0
 800ac64:	2100      	movs	r1, #0
 800ac66:	2002      	movs	r0, #2
 800ac68:	f012 fcb0 	bl	801d5cc <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 800ac6c:	480d      	ldr	r0, [pc, #52]	; (800aca4 <StopJoin+0x78>)
 800ac6e:	f001 fe25 	bl	800c8bc <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800ac72:	4b0a      	ldr	r3, [pc, #40]	; (800ac9c <StopJoin+0x70>)
 800ac74:	781b      	ldrb	r3, [r3, #0]
 800ac76:	2101      	movs	r1, #1
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f001 ff77 	bl	800cb6c <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800ac7e:	4804      	ldr	r0, [pc, #16]	; (800ac90 <StopJoin+0x64>)
 800ac80:	f012 fa2c 	bl	801d0dc <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800ac84:	4808      	ldr	r0, [pc, #32]	; (800aca8 <StopJoin+0x7c>)
 800ac86:	f012 fa29 	bl	801d0dc <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800ac8a:	bf00      	nop
 800ac8c:	bd80      	pop	{r7, pc}
 800ac8e:	bf00      	nop
 800ac90:	200003ec 	.word	0x200003ec
 800ac94:	0801dfe0 	.word	0x0801dfe0
 800ac98:	0801e000 	.word	0x0801e000
 800ac9c:	20000020 	.word	0x20000020
 800aca0:	0801e014 	.word	0x0801e014
 800aca4:	20000070 	.word	0x20000070
 800aca8:	20000404 	.word	0x20000404

0800acac <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b082      	sub	sp, #8
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800acb4:	4b05      	ldr	r3, [pc, #20]	; (800accc <OnStopJoinTimerEvent+0x20>)
 800acb6:	781b      	ldrb	r3, [r3, #0]
 800acb8:	2b02      	cmp	r3, #2
 800acba:	d103      	bne.n	800acc4 <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800acbc:	2100      	movs	r1, #0
 800acbe:	2008      	movs	r0, #8
 800acc0:	f012 f954 	bl	801cf6c <UTIL_SEQ_SetTask>
  }
  /* USER CODE BEGIN OnStopJoinTimerEvent_Last */

  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800acc4:	bf00      	nop
 800acc6:	3708      	adds	r7, #8
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}
 800accc:	20000020 	.word	0x20000020

0800acd0 <StoreContext>:

static void StoreContext(void)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b082      	sub	sp, #8
 800acd4:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800acd6:	23ff      	movs	r3, #255	; 0xff
 800acd8:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800acda:	f002 fd75 	bl	800d7c8 <LmHandlerNvmDataStore>
 800acde:	4603      	mov	r3, r0
 800ace0:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800ace2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ace6:	f113 0f08 	cmn.w	r3, #8
 800acea:	d106      	bne.n	800acfa <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800acec:	4b0a      	ldr	r3, [pc, #40]	; (800ad18 <StoreContext+0x48>)
 800acee:	2200      	movs	r2, #0
 800acf0:	2100      	movs	r1, #0
 800acf2:	2002      	movs	r0, #2
 800acf4:	f012 fc6a 	bl	801d5cc <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800acf8:	e00a      	b.n	800ad10 <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 800acfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800acfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad02:	d105      	bne.n	800ad10 <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800ad04:	4b05      	ldr	r3, [pc, #20]	; (800ad1c <StoreContext+0x4c>)
 800ad06:	2200      	movs	r2, #0
 800ad08:	2100      	movs	r1, #0
 800ad0a:	2002      	movs	r0, #2
 800ad0c:	f012 fc5e 	bl	801d5cc <UTIL_ADV_TRACE_COND_FSend>
}
 800ad10:	bf00      	nop
 800ad12:	3708      	adds	r7, #8
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}
 800ad18:	0801e034 	.word	0x0801e034
 800ad1c:	0801e04c 	.word	0x0801e04c

0800ad20 <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b082      	sub	sp, #8
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	4603      	mov	r3, r0
 800ad28:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800ad2a:	79fb      	ldrb	r3, [r7, #7]
 800ad2c:	2b01      	cmp	r3, #1
 800ad2e:	d106      	bne.n	800ad3e <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800ad30:	4b08      	ldr	r3, [pc, #32]	; (800ad54 <OnNvmDataChange+0x34>)
 800ad32:	2200      	movs	r2, #0
 800ad34:	2100      	movs	r1, #0
 800ad36:	2002      	movs	r0, #2
 800ad38:	f012 fc48 	bl	801d5cc <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800ad3c:	e005      	b.n	800ad4a <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800ad3e:	4b06      	ldr	r3, [pc, #24]	; (800ad58 <OnNvmDataChange+0x38>)
 800ad40:	2200      	movs	r2, #0
 800ad42:	2100      	movs	r1, #0
 800ad44:	2002      	movs	r0, #2
 800ad46:	f012 fc41 	bl	801d5cc <UTIL_ADV_TRACE_COND_FSend>
}
 800ad4a:	bf00      	nop
 800ad4c:	3708      	adds	r7, #8
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}
 800ad52:	bf00      	nop
 800ad54:	0801e064 	.word	0x0801e064
 800ad58:	0801e078 	.word	0x0801e078

0800ad5c <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b082      	sub	sp, #8
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
 800ad64:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 800ad66:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ad6a:	4807      	ldr	r0, [pc, #28]	; (800ad88 <OnStoreContextRequest+0x2c>)
 800ad6c:	f7f6 fa74 	bl	8001258 <FLASH_IF_Erase>
 800ad70:	4603      	mov	r3, r0
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d104      	bne.n	800ad80 <OnStoreContextRequest+0x24>
  {
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 800ad76:	683a      	ldr	r2, [r7, #0]
 800ad78:	6879      	ldr	r1, [r7, #4]
 800ad7a:	4803      	ldr	r0, [pc, #12]	; (800ad88 <OnStoreContextRequest+0x2c>)
 800ad7c:	f7f6 fa1c 	bl	80011b8 <FLASH_IF_Write>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800ad80:	bf00      	nop
 800ad82:	3708      	adds	r7, #8
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}
 800ad88:	0803f000 	.word	0x0803f000

0800ad8c <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b082      	sub	sp, #8
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
 800ad94:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800ad96:	683a      	ldr	r2, [r7, #0]
 800ad98:	4903      	ldr	r1, [pc, #12]	; (800ada8 <OnRestoreContextRequest+0x1c>)
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f7f6 fa34 	bl	8001208 <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800ada0:	bf00      	nop
 800ada2:	3708      	adds	r7, #8
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}
 800ada8:	0803f000 	.word	0x0803f000

0800adac <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	af00      	add	r7, sp, #0
  loraInfo.ContextManagement = 0;
 800adb0:	4b18      	ldr	r3, [pc, #96]	; (800ae14 <LoraInfo_Init+0x68>)
 800adb2:	2200      	movs	r2, #0
 800adb4:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800adb6:	4b17      	ldr	r3, [pc, #92]	; (800ae14 <LoraInfo_Init+0x68>)
 800adb8:	2200      	movs	r2, #0
 800adba:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800adbc:	4b15      	ldr	r3, [pc, #84]	; (800ae14 <LoraInfo_Init+0x68>)
 800adbe:	2200      	movs	r2, #0
 800adc0:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800adc2:	4b14      	ldr	r3, [pc, #80]	; (800ae14 <LoraInfo_Init+0x68>)
 800adc4:	2200      	movs	r2, #0
 800adc6:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 800adc8:	4b12      	ldr	r3, [pc, #72]	; (800ae14 <LoraInfo_Init+0x68>)
 800adca:	685b      	ldr	r3, [r3, #4]
 800adcc:	f043 0320 	orr.w	r3, r3, #32
 800add0:	4a10      	ldr	r2, [pc, #64]	; (800ae14 <LoraInfo_Init+0x68>)
 800add2:	6053      	str	r3, [r2, #4]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865);
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915);
 800add4:	4b0f      	ldr	r3, [pc, #60]	; (800ae14 <LoraInfo_Init+0x68>)
 800add6:	685b      	ldr	r3, [r3, #4]
 800add8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800addc:	4a0d      	ldr	r2, [pc, #52]	; (800ae14 <LoraInfo_Init+0x68>)
 800adde:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800ade0:	4b0c      	ldr	r3, [pc, #48]	; (800ae14 <LoraInfo_Init+0x68>)
 800ade2:	685b      	ldr	r3, [r3, #4]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d10c      	bne.n	800ae02 <LoraInfo_Init+0x56>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800ade8:	4b0b      	ldr	r3, [pc, #44]	; (800ae18 <LoraInfo_Init+0x6c>)
 800adea:	2200      	movs	r2, #0
 800adec:	2100      	movs	r1, #0
 800adee:	2000      	movs	r0, #0
 800adf0:	f012 fbec 	bl	801d5cc <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800adf4:	bf00      	nop
 800adf6:	f012 fbd7 	bl	801d5a8 <UTIL_ADV_TRACE_IsBufferEmpty>
 800adfa:	4603      	mov	r3, r0
 800adfc:	2b01      	cmp	r3, #1
 800adfe:	d1fa      	bne.n	800adf6 <LoraInfo_Init+0x4a>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800ae00:	e7fe      	b.n	800ae00 <LoraInfo_Init+0x54>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800ae02:	4b04      	ldr	r3, [pc, #16]	; (800ae14 <LoraInfo_Init+0x68>)
 800ae04:	2200      	movs	r2, #0
 800ae06:	60da      	str	r2, [r3, #12]
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
#else /* CONTEXT_MANAGEMENT_ENABLED == 1 */
  loraInfo.ContextManagement = 1;
 800ae08:	4b02      	ldr	r3, [pc, #8]	; (800ae14 <LoraInfo_Init+0x68>)
 800ae0a:	2201      	movs	r2, #1
 800ae0c:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800ae0e:	bf00      	nop
 800ae10:	bd80      	pop	{r7, pc}
 800ae12:	bf00      	nop
 800ae14:	20000558 	.word	0x20000558
 800ae18:	0801e08c 	.word	0x0801e08c

0800ae1c <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800ae20:	4b02      	ldr	r3, [pc, #8]	; (800ae2c <LoraInfo_GetPtr+0x10>)
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bc80      	pop	{r7}
 800ae28:	4770      	bx	lr
 800ae2a:	bf00      	nop
 800ae2c:	20000558 	.word	0x20000558

0800ae30 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800ae34:	f7f7 feee 	bl	8002c14 <BSP_RADIO_Init>
 800ae38:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	bd80      	pop	{r7, pc}

0800ae3e <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800ae3e:	b580      	push	{r7, lr}
 800ae40:	b082      	sub	sp, #8
 800ae42:	af00      	add	r7, sp, #0
 800ae44:	4603      	mov	r3, r0
 800ae46:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800ae48:	79fb      	ldrb	r3, [r7, #7]
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f7f7 ff14 	bl	8002c78 <BSP_RADIO_ConfigRFSwitch>
 800ae50:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	3708      	adds	r7, #8
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}

0800ae5a <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800ae5a:	b580      	push	{r7, lr}
 800ae5c:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800ae5e:	f7f7 ff59 	bl	8002d14 <BSP_RADIO_GetTxConfig>
 800ae62:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	bd80      	pop	{r7, pc}

0800ae68 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800ae6c:	f7f7 ff59 	bl	8002d22 <BSP_RADIO_IsTCXO>
 800ae70:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	bd80      	pop	{r7, pc}

0800ae76 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800ae76:	b580      	push	{r7, lr}
 800ae78:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800ae7a:	f7f7 ff59 	bl	8002d30 <BSP_RADIO_IsDCDC>
 800ae7e:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	bd80      	pop	{r7, pc}

0800ae84 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b082      	sub	sp, #8
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800ae8e:	79fb      	ldrb	r3, [r7, #7]
 800ae90:	4618      	mov	r0, r3
 800ae92:	f7f7 ff54 	bl	8002d3e <BSP_RADIO_GetRFOMaxPowerConfig>
 800ae96:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	3708      	adds	r7, #8
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}

0800aea0 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b082      	sub	sp, #8
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	33f1      	adds	r3, #241	; 0xf1
 800aeac:	2210      	movs	r2, #16
 800aeae:	2100      	movs	r1, #0
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f00e f821 	bl	8018ef8 <memset1>
    ctx->M_n = 0;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2200      	movs	r2, #0
 800aeba:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	22f0      	movs	r2, #240	; 0xf0
 800aec2:	2100      	movs	r1, #0
 800aec4:	4618      	mov	r0, r3
 800aec6:	f00e f817 	bl	8018ef8 <memset1>
}
 800aeca:	bf00      	nop
 800aecc:	3708      	adds	r7, #8
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}

0800aed2 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800aed2:	b580      	push	{r7, lr}
 800aed4:	b082      	sub	sp, #8
 800aed6:	af00      	add	r7, sp, #0
 800aed8:	6078      	str	r0, [r7, #4]
 800aeda:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	461a      	mov	r2, r3
 800aee0:	2110      	movs	r1, #16
 800aee2:	6838      	ldr	r0, [r7, #0]
 800aee4:	f000 fe5c 	bl	800bba0 <lorawan_aes_set_key>
}
 800aee8:	bf00      	nop
 800aeea:	3708      	adds	r7, #8
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}

0800aef0 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b08c      	sub	sp, #48	; 0x30
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	60f8      	str	r0, [r7, #12]
 800aef8:	60b9      	str	r1, [r7, #8]
 800aefa:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800af02:	2b00      	cmp	r3, #0
 800af04:	f000 80a1 	beq.w	800b04a <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800af0e:	f1c3 0310 	rsb	r3, r3, #16
 800af12:	687a      	ldr	r2, [r7, #4]
 800af14:	4293      	cmp	r3, r2
 800af16:	bf28      	it	cs
 800af18:	4613      	movcs	r3, r2
 800af1a:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	f203 1201 	addw	r2, r3, #257	; 0x101
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800af28:	4413      	add	r3, r2
 800af2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af2c:	b292      	uxth	r2, r2
 800af2e:	68b9      	ldr	r1, [r7, #8]
 800af30:	4618      	mov	r0, r3
 800af32:	f00d ffa6 	bl	8018e82 <memcpy1>
        ctx->M_n += mlen;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800af3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af3e:	441a      	add	r2, r3
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800af4c:	2b0f      	cmp	r3, #15
 800af4e:	f240 808d 	bls.w	800b06c <AES_CMAC_Update+0x17c>
 800af52:	687a      	ldr	r2, [r7, #4]
 800af54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af56:	429a      	cmp	r2, r3
 800af58:	f000 8088 	beq.w	800b06c <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800af5c:	2300      	movs	r3, #0
 800af5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af60:	e015      	b.n	800af8e <AES_CMAC_Update+0x9e>
 800af62:	68fa      	ldr	r2, [r7, #12]
 800af64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af66:	4413      	add	r3, r2
 800af68:	33f1      	adds	r3, #241	; 0xf1
 800af6a:	781a      	ldrb	r2, [r3, #0]
 800af6c:	68f9      	ldr	r1, [r7, #12]
 800af6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af70:	440b      	add	r3, r1
 800af72:	f203 1301 	addw	r3, r3, #257	; 0x101
 800af76:	781b      	ldrb	r3, [r3, #0]
 800af78:	4053      	eors	r3, r2
 800af7a:	b2d9      	uxtb	r1, r3
 800af7c:	68fa      	ldr	r2, [r7, #12]
 800af7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af80:	4413      	add	r3, r2
 800af82:	33f1      	adds	r3, #241	; 0xf1
 800af84:	460a      	mov	r2, r1
 800af86:	701a      	strb	r2, [r3, #0]
 800af88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af8a:	3301      	adds	r3, #1
 800af8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af90:	2b0f      	cmp	r3, #15
 800af92:	dde6      	ble.n	800af62 <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800af9a:	f107 0314 	add.w	r3, r7, #20
 800af9e:	2210      	movs	r2, #16
 800afa0:	4618      	mov	r0, r3
 800afa2:	f00d ff6e 	bl	8018e82 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800afa6:	68fa      	ldr	r2, [r7, #12]
 800afa8:	f107 0114 	add.w	r1, r7, #20
 800afac:	f107 0314 	add.w	r3, r7, #20
 800afb0:	4618      	mov	r0, r3
 800afb2:	f000 fed3 	bl	800bd5c <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	33f1      	adds	r3, #241	; 0xf1
 800afba:	f107 0114 	add.w	r1, r7, #20
 800afbe:	2210      	movs	r2, #16
 800afc0:	4618      	mov	r0, r3
 800afc2:	f00d ff5e 	bl	8018e82 <memcpy1>

        data += mlen;
 800afc6:	68ba      	ldr	r2, [r7, #8]
 800afc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afca:	4413      	add	r3, r2
 800afcc:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800afce:	687a      	ldr	r2, [r7, #4]
 800afd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd2:	1ad3      	subs	r3, r2, r3
 800afd4:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800afd6:	e038      	b.n	800b04a <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800afd8:	2300      	movs	r3, #0
 800afda:	62bb      	str	r3, [r7, #40]	; 0x28
 800afdc:	e013      	b.n	800b006 <AES_CMAC_Update+0x116>
 800afde:	68fa      	ldr	r2, [r7, #12]
 800afe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afe2:	4413      	add	r3, r2
 800afe4:	33f1      	adds	r3, #241	; 0xf1
 800afe6:	781a      	ldrb	r2, [r3, #0]
 800afe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afea:	68b9      	ldr	r1, [r7, #8]
 800afec:	440b      	add	r3, r1
 800afee:	781b      	ldrb	r3, [r3, #0]
 800aff0:	4053      	eors	r3, r2
 800aff2:	b2d9      	uxtb	r1, r3
 800aff4:	68fa      	ldr	r2, [r7, #12]
 800aff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aff8:	4413      	add	r3, r2
 800affa:	33f1      	adds	r3, #241	; 0xf1
 800affc:	460a      	mov	r2, r1
 800affe:	701a      	strb	r2, [r3, #0]
 800b000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b002:	3301      	adds	r3, #1
 800b004:	62bb      	str	r3, [r7, #40]	; 0x28
 800b006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b008:	2b0f      	cmp	r3, #15
 800b00a:	dde8      	ble.n	800afde <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800b012:	f107 0314 	add.w	r3, r7, #20
 800b016:	2210      	movs	r2, #16
 800b018:	4618      	mov	r0, r3
 800b01a:	f00d ff32 	bl	8018e82 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800b01e:	68fa      	ldr	r2, [r7, #12]
 800b020:	f107 0114 	add.w	r1, r7, #20
 800b024:	f107 0314 	add.w	r3, r7, #20
 800b028:	4618      	mov	r0, r3
 800b02a:	f000 fe97 	bl	800bd5c <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	33f1      	adds	r3, #241	; 0xf1
 800b032:	f107 0114 	add.w	r1, r7, #20
 800b036:	2210      	movs	r2, #16
 800b038:	4618      	mov	r0, r3
 800b03a:	f00d ff22 	bl	8018e82 <memcpy1>

        data += 16;
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	3310      	adds	r3, #16
 800b042:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	3b10      	subs	r3, #16
 800b048:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2b10      	cmp	r3, #16
 800b04e:	d8c3      	bhi.n	800afd8 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b056:	687a      	ldr	r2, [r7, #4]
 800b058:	b292      	uxth	r2, r2
 800b05a:	68b9      	ldr	r1, [r7, #8]
 800b05c:	4618      	mov	r0, r3
 800b05e:	f00d ff10 	bl	8018e82 <memcpy1>
    ctx->M_n = len;
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	687a      	ldr	r2, [r7, #4]
 800b066:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800b06a:	e000      	b.n	800b06e <AES_CMAC_Update+0x17e>
            return;
 800b06c:	bf00      	nop
}
 800b06e:	3730      	adds	r7, #48	; 0x30
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}

0800b074 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b092      	sub	sp, #72	; 0x48
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
 800b07c:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800b07e:	f107 031c 	add.w	r3, r7, #28
 800b082:	2210      	movs	r2, #16
 800b084:	2100      	movs	r1, #0
 800b086:	4618      	mov	r0, r3
 800b088:	f00d ff36 	bl	8018ef8 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800b08c:	683a      	ldr	r2, [r7, #0]
 800b08e:	f107 011c 	add.w	r1, r7, #28
 800b092:	f107 031c 	add.w	r3, r7, #28
 800b096:	4618      	mov	r0, r3
 800b098:	f000 fe60 	bl	800bd5c <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800b09c:	7f3b      	ldrb	r3, [r7, #28]
 800b09e:	b25b      	sxtb	r3, r3
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	da30      	bge.n	800b106 <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	647b      	str	r3, [r7, #68]	; 0x44
 800b0a8:	e01b      	b.n	800b0e2 <AES_CMAC_Final+0x6e>
 800b0aa:	f107 021c 	add.w	r2, r7, #28
 800b0ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0b0:	4413      	add	r3, r2
 800b0b2:	781b      	ldrb	r3, [r3, #0]
 800b0b4:	005b      	lsls	r3, r3, #1
 800b0b6:	b25a      	sxtb	r2, r3
 800b0b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0ba:	3301      	adds	r3, #1
 800b0bc:	3348      	adds	r3, #72	; 0x48
 800b0be:	443b      	add	r3, r7
 800b0c0:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800b0c4:	09db      	lsrs	r3, r3, #7
 800b0c6:	b2db      	uxtb	r3, r3
 800b0c8:	b25b      	sxtb	r3, r3
 800b0ca:	4313      	orrs	r3, r2
 800b0cc:	b25b      	sxtb	r3, r3
 800b0ce:	b2d9      	uxtb	r1, r3
 800b0d0:	f107 021c 	add.w	r2, r7, #28
 800b0d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0d6:	4413      	add	r3, r2
 800b0d8:	460a      	mov	r2, r1
 800b0da:	701a      	strb	r2, [r3, #0]
 800b0dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0de:	3301      	adds	r3, #1
 800b0e0:	647b      	str	r3, [r7, #68]	; 0x44
 800b0e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0e4:	2b0e      	cmp	r3, #14
 800b0e6:	dde0      	ble.n	800b0aa <AES_CMAC_Final+0x36>
 800b0e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b0ec:	005b      	lsls	r3, r3, #1
 800b0ee:	b2db      	uxtb	r3, r3
 800b0f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800b0f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b0f8:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800b0fc:	43db      	mvns	r3, r3
 800b0fe:	b2db      	uxtb	r3, r3
 800b100:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b104:	e027      	b.n	800b156 <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800b106:	2300      	movs	r3, #0
 800b108:	643b      	str	r3, [r7, #64]	; 0x40
 800b10a:	e01b      	b.n	800b144 <AES_CMAC_Final+0xd0>
 800b10c:	f107 021c 	add.w	r2, r7, #28
 800b110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b112:	4413      	add	r3, r2
 800b114:	781b      	ldrb	r3, [r3, #0]
 800b116:	005b      	lsls	r3, r3, #1
 800b118:	b25a      	sxtb	r2, r3
 800b11a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b11c:	3301      	adds	r3, #1
 800b11e:	3348      	adds	r3, #72	; 0x48
 800b120:	443b      	add	r3, r7
 800b122:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800b126:	09db      	lsrs	r3, r3, #7
 800b128:	b2db      	uxtb	r3, r3
 800b12a:	b25b      	sxtb	r3, r3
 800b12c:	4313      	orrs	r3, r2
 800b12e:	b25b      	sxtb	r3, r3
 800b130:	b2d9      	uxtb	r1, r3
 800b132:	f107 021c 	add.w	r2, r7, #28
 800b136:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b138:	4413      	add	r3, r2
 800b13a:	460a      	mov	r2, r1
 800b13c:	701a      	strb	r2, [r3, #0]
 800b13e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b140:	3301      	adds	r3, #1
 800b142:	643b      	str	r3, [r7, #64]	; 0x40
 800b144:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b146:	2b0e      	cmp	r3, #14
 800b148:	dde0      	ble.n	800b10c <AES_CMAC_Final+0x98>
 800b14a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b14e:	005b      	lsls	r3, r3, #1
 800b150:	b2db      	uxtb	r3, r3
 800b152:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b15c:	2b10      	cmp	r3, #16
 800b15e:	d11d      	bne.n	800b19c <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800b160:	2300      	movs	r3, #0
 800b162:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b164:	e016      	b.n	800b194 <AES_CMAC_Final+0x120>
 800b166:	683a      	ldr	r2, [r7, #0]
 800b168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b16a:	4413      	add	r3, r2
 800b16c:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b170:	781a      	ldrb	r2, [r3, #0]
 800b172:	f107 011c 	add.w	r1, r7, #28
 800b176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b178:	440b      	add	r3, r1
 800b17a:	781b      	ldrb	r3, [r3, #0]
 800b17c:	4053      	eors	r3, r2
 800b17e:	b2d9      	uxtb	r1, r3
 800b180:	683a      	ldr	r2, [r7, #0]
 800b182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b184:	4413      	add	r3, r2
 800b186:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b18a:	460a      	mov	r2, r1
 800b18c:	701a      	strb	r2, [r3, #0]
 800b18e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b190:	3301      	adds	r3, #1
 800b192:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b196:	2b0f      	cmp	r3, #15
 800b198:	dde5      	ble.n	800b166 <AES_CMAC_Final+0xf2>
 800b19a:	e096      	b.n	800b2ca <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800b19c:	7f3b      	ldrb	r3, [r7, #28]
 800b19e:	b25b      	sxtb	r3, r3
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	da30      	bge.n	800b206 <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	63bb      	str	r3, [r7, #56]	; 0x38
 800b1a8:	e01b      	b.n	800b1e2 <AES_CMAC_Final+0x16e>
 800b1aa:	f107 021c 	add.w	r2, r7, #28
 800b1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1b0:	4413      	add	r3, r2
 800b1b2:	781b      	ldrb	r3, [r3, #0]
 800b1b4:	005b      	lsls	r3, r3, #1
 800b1b6:	b25a      	sxtb	r2, r3
 800b1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ba:	3301      	adds	r3, #1
 800b1bc:	3348      	adds	r3, #72	; 0x48
 800b1be:	443b      	add	r3, r7
 800b1c0:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800b1c4:	09db      	lsrs	r3, r3, #7
 800b1c6:	b2db      	uxtb	r3, r3
 800b1c8:	b25b      	sxtb	r3, r3
 800b1ca:	4313      	orrs	r3, r2
 800b1cc:	b25b      	sxtb	r3, r3
 800b1ce:	b2d9      	uxtb	r1, r3
 800b1d0:	f107 021c 	add.w	r2, r7, #28
 800b1d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d6:	4413      	add	r3, r2
 800b1d8:	460a      	mov	r2, r1
 800b1da:	701a      	strb	r2, [r3, #0]
 800b1dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1de:	3301      	adds	r3, #1
 800b1e0:	63bb      	str	r3, [r7, #56]	; 0x38
 800b1e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1e4:	2b0e      	cmp	r3, #14
 800b1e6:	dde0      	ble.n	800b1aa <AES_CMAC_Final+0x136>
 800b1e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b1ec:	005b      	lsls	r3, r3, #1
 800b1ee:	b2db      	uxtb	r3, r3
 800b1f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800b1f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b1f8:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800b1fc:	43db      	mvns	r3, r3
 800b1fe:	b2db      	uxtb	r3, r3
 800b200:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b204:	e027      	b.n	800b256 <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800b206:	2300      	movs	r3, #0
 800b208:	637b      	str	r3, [r7, #52]	; 0x34
 800b20a:	e01b      	b.n	800b244 <AES_CMAC_Final+0x1d0>
 800b20c:	f107 021c 	add.w	r2, r7, #28
 800b210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b212:	4413      	add	r3, r2
 800b214:	781b      	ldrb	r3, [r3, #0]
 800b216:	005b      	lsls	r3, r3, #1
 800b218:	b25a      	sxtb	r2, r3
 800b21a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b21c:	3301      	adds	r3, #1
 800b21e:	3348      	adds	r3, #72	; 0x48
 800b220:	443b      	add	r3, r7
 800b222:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800b226:	09db      	lsrs	r3, r3, #7
 800b228:	b2db      	uxtb	r3, r3
 800b22a:	b25b      	sxtb	r3, r3
 800b22c:	4313      	orrs	r3, r2
 800b22e:	b25b      	sxtb	r3, r3
 800b230:	b2d9      	uxtb	r1, r3
 800b232:	f107 021c 	add.w	r2, r7, #28
 800b236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b238:	4413      	add	r3, r2
 800b23a:	460a      	mov	r2, r1
 800b23c:	701a      	strb	r2, [r3, #0]
 800b23e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b240:	3301      	adds	r3, #1
 800b242:	637b      	str	r3, [r7, #52]	; 0x34
 800b244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b246:	2b0e      	cmp	r3, #14
 800b248:	dde0      	ble.n	800b20c <AES_CMAC_Final+0x198>
 800b24a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b24e:	005b      	lsls	r3, r3, #1
 800b250:	b2db      	uxtb	r3, r3
 800b252:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b25c:	683a      	ldr	r2, [r7, #0]
 800b25e:	4413      	add	r3, r2
 800b260:	2280      	movs	r2, #128	; 0x80
 800b262:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800b266:	e007      	b.n	800b278 <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b26e:	683a      	ldr	r2, [r7, #0]
 800b270:	4413      	add	r3, r2
 800b272:	2200      	movs	r2, #0
 800b274:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b27e:	1c5a      	adds	r2, r3, #1
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b28c:	2b0f      	cmp	r3, #15
 800b28e:	d9eb      	bls.n	800b268 <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800b290:	2300      	movs	r3, #0
 800b292:	633b      	str	r3, [r7, #48]	; 0x30
 800b294:	e016      	b.n	800b2c4 <AES_CMAC_Final+0x250>
 800b296:	683a      	ldr	r2, [r7, #0]
 800b298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b29a:	4413      	add	r3, r2
 800b29c:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b2a0:	781a      	ldrb	r2, [r3, #0]
 800b2a2:	f107 011c 	add.w	r1, r7, #28
 800b2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2a8:	440b      	add	r3, r1
 800b2aa:	781b      	ldrb	r3, [r3, #0]
 800b2ac:	4053      	eors	r3, r2
 800b2ae:	b2d9      	uxtb	r1, r3
 800b2b0:	683a      	ldr	r2, [r7, #0]
 800b2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2b4:	4413      	add	r3, r2
 800b2b6:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b2ba:	460a      	mov	r2, r1
 800b2bc:	701a      	strb	r2, [r3, #0]
 800b2be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2c0:	3301      	adds	r3, #1
 800b2c2:	633b      	str	r3, [r7, #48]	; 0x30
 800b2c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2c6:	2b0f      	cmp	r3, #15
 800b2c8:	dde5      	ble.n	800b296 <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b2ce:	e015      	b.n	800b2fc <AES_CMAC_Final+0x288>
 800b2d0:	683a      	ldr	r2, [r7, #0]
 800b2d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2d4:	4413      	add	r3, r2
 800b2d6:	33f1      	adds	r3, #241	; 0xf1
 800b2d8:	781a      	ldrb	r2, [r3, #0]
 800b2da:	6839      	ldr	r1, [r7, #0]
 800b2dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2de:	440b      	add	r3, r1
 800b2e0:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b2e4:	781b      	ldrb	r3, [r3, #0]
 800b2e6:	4053      	eors	r3, r2
 800b2e8:	b2d9      	uxtb	r1, r3
 800b2ea:	683a      	ldr	r2, [r7, #0]
 800b2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2ee:	4413      	add	r3, r2
 800b2f0:	33f1      	adds	r3, #241	; 0xf1
 800b2f2:	460a      	mov	r2, r1
 800b2f4:	701a      	strb	r2, [r3, #0]
 800b2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2f8:	3301      	adds	r3, #1
 800b2fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b2fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2fe:	2b0f      	cmp	r3, #15
 800b300:	dde6      	ble.n	800b2d0 <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800b308:	f107 030c 	add.w	r3, r7, #12
 800b30c:	2210      	movs	r2, #16
 800b30e:	4618      	mov	r0, r3
 800b310:	f00d fdb7 	bl	8018e82 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800b314:	683a      	ldr	r2, [r7, #0]
 800b316:	f107 030c 	add.w	r3, r7, #12
 800b31a:	6879      	ldr	r1, [r7, #4]
 800b31c:	4618      	mov	r0, r3
 800b31e:	f000 fd1d 	bl	800bd5c <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800b322:	f107 031c 	add.w	r3, r7, #28
 800b326:	2210      	movs	r2, #16
 800b328:	2100      	movs	r1, #0
 800b32a:	4618      	mov	r0, r3
 800b32c:	f00d fde4 	bl	8018ef8 <memset1>
}
 800b330:	bf00      	nop
 800b332:	3748      	adds	r7, #72	; 0x48
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}

0800b338 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800b338:	b480      	push	{r7}
 800b33a:	b083      	sub	sp, #12
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
 800b340:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	781a      	ldrb	r2, [r3, #0]
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	3301      	adds	r3, #1
 800b34e:	683a      	ldr	r2, [r7, #0]
 800b350:	7852      	ldrb	r2, [r2, #1]
 800b352:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	3302      	adds	r3, #2
 800b358:	683a      	ldr	r2, [r7, #0]
 800b35a:	7892      	ldrb	r2, [r2, #2]
 800b35c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	3303      	adds	r3, #3
 800b362:	683a      	ldr	r2, [r7, #0]
 800b364:	78d2      	ldrb	r2, [r2, #3]
 800b366:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	3304      	adds	r3, #4
 800b36c:	683a      	ldr	r2, [r7, #0]
 800b36e:	7912      	ldrb	r2, [r2, #4]
 800b370:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	3305      	adds	r3, #5
 800b376:	683a      	ldr	r2, [r7, #0]
 800b378:	7952      	ldrb	r2, [r2, #5]
 800b37a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	3306      	adds	r3, #6
 800b380:	683a      	ldr	r2, [r7, #0]
 800b382:	7992      	ldrb	r2, [r2, #6]
 800b384:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	3307      	adds	r3, #7
 800b38a:	683a      	ldr	r2, [r7, #0]
 800b38c:	79d2      	ldrb	r2, [r2, #7]
 800b38e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	3308      	adds	r3, #8
 800b394:	683a      	ldr	r2, [r7, #0]
 800b396:	7a12      	ldrb	r2, [r2, #8]
 800b398:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	3309      	adds	r3, #9
 800b39e:	683a      	ldr	r2, [r7, #0]
 800b3a0:	7a52      	ldrb	r2, [r2, #9]
 800b3a2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	330a      	adds	r3, #10
 800b3a8:	683a      	ldr	r2, [r7, #0]
 800b3aa:	7a92      	ldrb	r2, [r2, #10]
 800b3ac:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	330b      	adds	r3, #11
 800b3b2:	683a      	ldr	r2, [r7, #0]
 800b3b4:	7ad2      	ldrb	r2, [r2, #11]
 800b3b6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	330c      	adds	r3, #12
 800b3bc:	683a      	ldr	r2, [r7, #0]
 800b3be:	7b12      	ldrb	r2, [r2, #12]
 800b3c0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	330d      	adds	r3, #13
 800b3c6:	683a      	ldr	r2, [r7, #0]
 800b3c8:	7b52      	ldrb	r2, [r2, #13]
 800b3ca:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	330e      	adds	r3, #14
 800b3d0:	683a      	ldr	r2, [r7, #0]
 800b3d2:	7b92      	ldrb	r2, [r2, #14]
 800b3d4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	330f      	adds	r3, #15
 800b3da:	683a      	ldr	r2, [r7, #0]
 800b3dc:	7bd2      	ldrb	r2, [r2, #15]
 800b3de:	701a      	strb	r2, [r3, #0]
#endif
}
 800b3e0:	bf00      	nop
 800b3e2:	370c      	adds	r7, #12
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bc80      	pop	{r7}
 800b3e8:	4770      	bx	lr

0800b3ea <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800b3ea:	b480      	push	{r7}
 800b3ec:	b085      	sub	sp, #20
 800b3ee:	af00      	add	r7, sp, #0
 800b3f0:	60f8      	str	r0, [r7, #12]
 800b3f2:	60b9      	str	r1, [r7, #8]
 800b3f4:	4613      	mov	r3, r2
 800b3f6:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800b3f8:	e007      	b.n	800b40a <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800b3fa:	68ba      	ldr	r2, [r7, #8]
 800b3fc:	1c53      	adds	r3, r2, #1
 800b3fe:	60bb      	str	r3, [r7, #8]
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	1c59      	adds	r1, r3, #1
 800b404:	60f9      	str	r1, [r7, #12]
 800b406:	7812      	ldrb	r2, [r2, #0]
 800b408:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800b40a:	79fb      	ldrb	r3, [r7, #7]
 800b40c:	1e5a      	subs	r2, r3, #1
 800b40e:	71fa      	strb	r2, [r7, #7]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d1f2      	bne.n	800b3fa <copy_block_nn+0x10>
}
 800b414:	bf00      	nop
 800b416:	bf00      	nop
 800b418:	3714      	adds	r7, #20
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bc80      	pop	{r7}
 800b41e:	4770      	bx	lr

0800b420 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800b420:	b480      	push	{r7}
 800b422:	b083      	sub	sp, #12
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
 800b428:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	781a      	ldrb	r2, [r3, #0]
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	781b      	ldrb	r3, [r3, #0]
 800b432:	4053      	eors	r3, r2
 800b434:	b2da      	uxtb	r2, r3
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	3301      	adds	r3, #1
 800b43e:	7819      	ldrb	r1, [r3, #0]
 800b440:	683b      	ldr	r3, [r7, #0]
 800b442:	3301      	adds	r3, #1
 800b444:	781a      	ldrb	r2, [r3, #0]
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	3301      	adds	r3, #1
 800b44a:	404a      	eors	r2, r1
 800b44c:	b2d2      	uxtb	r2, r2
 800b44e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	3302      	adds	r3, #2
 800b454:	7819      	ldrb	r1, [r3, #0]
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	3302      	adds	r3, #2
 800b45a:	781a      	ldrb	r2, [r3, #0]
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	3302      	adds	r3, #2
 800b460:	404a      	eors	r2, r1
 800b462:	b2d2      	uxtb	r2, r2
 800b464:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	3303      	adds	r3, #3
 800b46a:	7819      	ldrb	r1, [r3, #0]
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	3303      	adds	r3, #3
 800b470:	781a      	ldrb	r2, [r3, #0]
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	3303      	adds	r3, #3
 800b476:	404a      	eors	r2, r1
 800b478:	b2d2      	uxtb	r2, r2
 800b47a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	3304      	adds	r3, #4
 800b480:	7819      	ldrb	r1, [r3, #0]
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	3304      	adds	r3, #4
 800b486:	781a      	ldrb	r2, [r3, #0]
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	3304      	adds	r3, #4
 800b48c:	404a      	eors	r2, r1
 800b48e:	b2d2      	uxtb	r2, r2
 800b490:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	3305      	adds	r3, #5
 800b496:	7819      	ldrb	r1, [r3, #0]
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	3305      	adds	r3, #5
 800b49c:	781a      	ldrb	r2, [r3, #0]
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	3305      	adds	r3, #5
 800b4a2:	404a      	eors	r2, r1
 800b4a4:	b2d2      	uxtb	r2, r2
 800b4a6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	3306      	adds	r3, #6
 800b4ac:	7819      	ldrb	r1, [r3, #0]
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	3306      	adds	r3, #6
 800b4b2:	781a      	ldrb	r2, [r3, #0]
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	3306      	adds	r3, #6
 800b4b8:	404a      	eors	r2, r1
 800b4ba:	b2d2      	uxtb	r2, r2
 800b4bc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	3307      	adds	r3, #7
 800b4c2:	7819      	ldrb	r1, [r3, #0]
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	3307      	adds	r3, #7
 800b4c8:	781a      	ldrb	r2, [r3, #0]
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	3307      	adds	r3, #7
 800b4ce:	404a      	eors	r2, r1
 800b4d0:	b2d2      	uxtb	r2, r2
 800b4d2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	3308      	adds	r3, #8
 800b4d8:	7819      	ldrb	r1, [r3, #0]
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	3308      	adds	r3, #8
 800b4de:	781a      	ldrb	r2, [r3, #0]
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	3308      	adds	r3, #8
 800b4e4:	404a      	eors	r2, r1
 800b4e6:	b2d2      	uxtb	r2, r2
 800b4e8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	3309      	adds	r3, #9
 800b4ee:	7819      	ldrb	r1, [r3, #0]
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	3309      	adds	r3, #9
 800b4f4:	781a      	ldrb	r2, [r3, #0]
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	3309      	adds	r3, #9
 800b4fa:	404a      	eors	r2, r1
 800b4fc:	b2d2      	uxtb	r2, r2
 800b4fe:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	330a      	adds	r3, #10
 800b504:	7819      	ldrb	r1, [r3, #0]
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	330a      	adds	r3, #10
 800b50a:	781a      	ldrb	r2, [r3, #0]
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	330a      	adds	r3, #10
 800b510:	404a      	eors	r2, r1
 800b512:	b2d2      	uxtb	r2, r2
 800b514:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	330b      	adds	r3, #11
 800b51a:	7819      	ldrb	r1, [r3, #0]
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	330b      	adds	r3, #11
 800b520:	781a      	ldrb	r2, [r3, #0]
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	330b      	adds	r3, #11
 800b526:	404a      	eors	r2, r1
 800b528:	b2d2      	uxtb	r2, r2
 800b52a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	330c      	adds	r3, #12
 800b530:	7819      	ldrb	r1, [r3, #0]
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	330c      	adds	r3, #12
 800b536:	781a      	ldrb	r2, [r3, #0]
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	330c      	adds	r3, #12
 800b53c:	404a      	eors	r2, r1
 800b53e:	b2d2      	uxtb	r2, r2
 800b540:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	330d      	adds	r3, #13
 800b546:	7819      	ldrb	r1, [r3, #0]
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	330d      	adds	r3, #13
 800b54c:	781a      	ldrb	r2, [r3, #0]
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	330d      	adds	r3, #13
 800b552:	404a      	eors	r2, r1
 800b554:	b2d2      	uxtb	r2, r2
 800b556:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	330e      	adds	r3, #14
 800b55c:	7819      	ldrb	r1, [r3, #0]
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	330e      	adds	r3, #14
 800b562:	781a      	ldrb	r2, [r3, #0]
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	330e      	adds	r3, #14
 800b568:	404a      	eors	r2, r1
 800b56a:	b2d2      	uxtb	r2, r2
 800b56c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	330f      	adds	r3, #15
 800b572:	7819      	ldrb	r1, [r3, #0]
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	330f      	adds	r3, #15
 800b578:	781a      	ldrb	r2, [r3, #0]
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	330f      	adds	r3, #15
 800b57e:	404a      	eors	r2, r1
 800b580:	b2d2      	uxtb	r2, r2
 800b582:	701a      	strb	r2, [r3, #0]
#endif
}
 800b584:	bf00      	nop
 800b586:	370c      	adds	r7, #12
 800b588:	46bd      	mov	sp, r7
 800b58a:	bc80      	pop	{r7}
 800b58c:	4770      	bx	lr

0800b58e <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800b58e:	b480      	push	{r7}
 800b590:	b085      	sub	sp, #20
 800b592:	af00      	add	r7, sp, #0
 800b594:	60f8      	str	r0, [r7, #12]
 800b596:	60b9      	str	r1, [r7, #8]
 800b598:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	781a      	ldrb	r2, [r3, #0]
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	781b      	ldrb	r3, [r3, #0]
 800b5a2:	4053      	eors	r3, r2
 800b5a4:	b2da      	uxtb	r2, r3
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	3301      	adds	r3, #1
 800b5ae:	7819      	ldrb	r1, [r3, #0]
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	3301      	adds	r3, #1
 800b5b4:	781a      	ldrb	r2, [r3, #0]
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	3301      	adds	r3, #1
 800b5ba:	404a      	eors	r2, r1
 800b5bc:	b2d2      	uxtb	r2, r2
 800b5be:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	3302      	adds	r3, #2
 800b5c4:	7819      	ldrb	r1, [r3, #0]
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	3302      	adds	r3, #2
 800b5ca:	781a      	ldrb	r2, [r3, #0]
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	3302      	adds	r3, #2
 800b5d0:	404a      	eors	r2, r1
 800b5d2:	b2d2      	uxtb	r2, r2
 800b5d4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	3303      	adds	r3, #3
 800b5da:	7819      	ldrb	r1, [r3, #0]
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	3303      	adds	r3, #3
 800b5e0:	781a      	ldrb	r2, [r3, #0]
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	3303      	adds	r3, #3
 800b5e6:	404a      	eors	r2, r1
 800b5e8:	b2d2      	uxtb	r2, r2
 800b5ea:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	3304      	adds	r3, #4
 800b5f0:	7819      	ldrb	r1, [r3, #0]
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	3304      	adds	r3, #4
 800b5f6:	781a      	ldrb	r2, [r3, #0]
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	3304      	adds	r3, #4
 800b5fc:	404a      	eors	r2, r1
 800b5fe:	b2d2      	uxtb	r2, r2
 800b600:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	3305      	adds	r3, #5
 800b606:	7819      	ldrb	r1, [r3, #0]
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	3305      	adds	r3, #5
 800b60c:	781a      	ldrb	r2, [r3, #0]
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	3305      	adds	r3, #5
 800b612:	404a      	eors	r2, r1
 800b614:	b2d2      	uxtb	r2, r2
 800b616:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	3306      	adds	r3, #6
 800b61c:	7819      	ldrb	r1, [r3, #0]
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	3306      	adds	r3, #6
 800b622:	781a      	ldrb	r2, [r3, #0]
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	3306      	adds	r3, #6
 800b628:	404a      	eors	r2, r1
 800b62a:	b2d2      	uxtb	r2, r2
 800b62c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	3307      	adds	r3, #7
 800b632:	7819      	ldrb	r1, [r3, #0]
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	3307      	adds	r3, #7
 800b638:	781a      	ldrb	r2, [r3, #0]
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	3307      	adds	r3, #7
 800b63e:	404a      	eors	r2, r1
 800b640:	b2d2      	uxtb	r2, r2
 800b642:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	3308      	adds	r3, #8
 800b648:	7819      	ldrb	r1, [r3, #0]
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	3308      	adds	r3, #8
 800b64e:	781a      	ldrb	r2, [r3, #0]
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	3308      	adds	r3, #8
 800b654:	404a      	eors	r2, r1
 800b656:	b2d2      	uxtb	r2, r2
 800b658:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800b65a:	68bb      	ldr	r3, [r7, #8]
 800b65c:	3309      	adds	r3, #9
 800b65e:	7819      	ldrb	r1, [r3, #0]
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	3309      	adds	r3, #9
 800b664:	781a      	ldrb	r2, [r3, #0]
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	3309      	adds	r3, #9
 800b66a:	404a      	eors	r2, r1
 800b66c:	b2d2      	uxtb	r2, r2
 800b66e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800b670:	68bb      	ldr	r3, [r7, #8]
 800b672:	330a      	adds	r3, #10
 800b674:	7819      	ldrb	r1, [r3, #0]
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	330a      	adds	r3, #10
 800b67a:	781a      	ldrb	r2, [r3, #0]
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	330a      	adds	r3, #10
 800b680:	404a      	eors	r2, r1
 800b682:	b2d2      	uxtb	r2, r2
 800b684:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	330b      	adds	r3, #11
 800b68a:	7819      	ldrb	r1, [r3, #0]
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	330b      	adds	r3, #11
 800b690:	781a      	ldrb	r2, [r3, #0]
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	330b      	adds	r3, #11
 800b696:	404a      	eors	r2, r1
 800b698:	b2d2      	uxtb	r2, r2
 800b69a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800b69c:	68bb      	ldr	r3, [r7, #8]
 800b69e:	330c      	adds	r3, #12
 800b6a0:	7819      	ldrb	r1, [r3, #0]
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	330c      	adds	r3, #12
 800b6a6:	781a      	ldrb	r2, [r3, #0]
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	330c      	adds	r3, #12
 800b6ac:	404a      	eors	r2, r1
 800b6ae:	b2d2      	uxtb	r2, r2
 800b6b0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	330d      	adds	r3, #13
 800b6b6:	7819      	ldrb	r1, [r3, #0]
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	330d      	adds	r3, #13
 800b6bc:	781a      	ldrb	r2, [r3, #0]
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	330d      	adds	r3, #13
 800b6c2:	404a      	eors	r2, r1
 800b6c4:	b2d2      	uxtb	r2, r2
 800b6c6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	330e      	adds	r3, #14
 800b6cc:	7819      	ldrb	r1, [r3, #0]
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	330e      	adds	r3, #14
 800b6d2:	781a      	ldrb	r2, [r3, #0]
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	330e      	adds	r3, #14
 800b6d8:	404a      	eors	r2, r1
 800b6da:	b2d2      	uxtb	r2, r2
 800b6dc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800b6de:	68bb      	ldr	r3, [r7, #8]
 800b6e0:	330f      	adds	r3, #15
 800b6e2:	7819      	ldrb	r1, [r3, #0]
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	330f      	adds	r3, #15
 800b6e8:	781a      	ldrb	r2, [r3, #0]
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	330f      	adds	r3, #15
 800b6ee:	404a      	eors	r2, r1
 800b6f0:	b2d2      	uxtb	r2, r2
 800b6f2:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800b6f4:	bf00      	nop
 800b6f6:	3714      	adds	r7, #20
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bc80      	pop	{r7}
 800b6fc:	4770      	bx	lr

0800b6fe <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800b6fe:	b580      	push	{r7, lr}
 800b700:	b082      	sub	sp, #8
 800b702:	af00      	add	r7, sp, #0
 800b704:	6078      	str	r0, [r7, #4]
 800b706:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800b708:	6839      	ldr	r1, [r7, #0]
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f7ff fe88 	bl	800b420 <xor_block>
}
 800b710:	bf00      	nop
 800b712:	3708      	adds	r7, #8
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}

0800b718 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800b718:	b480      	push	{r7}
 800b71a:	b085      	sub	sp, #20
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	781b      	ldrb	r3, [r3, #0]
 800b724:	461a      	mov	r2, r3
 800b726:	4b48      	ldr	r3, [pc, #288]	; (800b848 <shift_sub_rows+0x130>)
 800b728:	5c9a      	ldrb	r2, [r3, r2]
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	701a      	strb	r2, [r3, #0]
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	3304      	adds	r3, #4
 800b732:	781b      	ldrb	r3, [r3, #0]
 800b734:	4619      	mov	r1, r3
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	3304      	adds	r3, #4
 800b73a:	4a43      	ldr	r2, [pc, #268]	; (800b848 <shift_sub_rows+0x130>)
 800b73c:	5c52      	ldrb	r2, [r2, r1]
 800b73e:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	3308      	adds	r3, #8
 800b744:	781b      	ldrb	r3, [r3, #0]
 800b746:	4619      	mov	r1, r3
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	3308      	adds	r3, #8
 800b74c:	4a3e      	ldr	r2, [pc, #248]	; (800b848 <shift_sub_rows+0x130>)
 800b74e:	5c52      	ldrb	r2, [r2, r1]
 800b750:	701a      	strb	r2, [r3, #0]
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	330c      	adds	r3, #12
 800b756:	781b      	ldrb	r3, [r3, #0]
 800b758:	4619      	mov	r1, r3
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	330c      	adds	r3, #12
 800b75e:	4a3a      	ldr	r2, [pc, #232]	; (800b848 <shift_sub_rows+0x130>)
 800b760:	5c52      	ldrb	r2, [r2, r1]
 800b762:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	785b      	ldrb	r3, [r3, #1]
 800b768:	73fb      	strb	r3, [r7, #15]
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	3305      	adds	r3, #5
 800b76e:	781b      	ldrb	r3, [r3, #0]
 800b770:	4619      	mov	r1, r3
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	3301      	adds	r3, #1
 800b776:	4a34      	ldr	r2, [pc, #208]	; (800b848 <shift_sub_rows+0x130>)
 800b778:	5c52      	ldrb	r2, [r2, r1]
 800b77a:	701a      	strb	r2, [r3, #0]
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	3309      	adds	r3, #9
 800b780:	781b      	ldrb	r3, [r3, #0]
 800b782:	4619      	mov	r1, r3
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	3305      	adds	r3, #5
 800b788:	4a2f      	ldr	r2, [pc, #188]	; (800b848 <shift_sub_rows+0x130>)
 800b78a:	5c52      	ldrb	r2, [r2, r1]
 800b78c:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	330d      	adds	r3, #13
 800b792:	781b      	ldrb	r3, [r3, #0]
 800b794:	4619      	mov	r1, r3
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	3309      	adds	r3, #9
 800b79a:	4a2b      	ldr	r2, [pc, #172]	; (800b848 <shift_sub_rows+0x130>)
 800b79c:	5c52      	ldrb	r2, [r2, r1]
 800b79e:	701a      	strb	r2, [r3, #0]
 800b7a0:	7bfa      	ldrb	r2, [r7, #15]
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	330d      	adds	r3, #13
 800b7a6:	4928      	ldr	r1, [pc, #160]	; (800b848 <shift_sub_rows+0x130>)
 800b7a8:	5c8a      	ldrb	r2, [r1, r2]
 800b7aa:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	789b      	ldrb	r3, [r3, #2]
 800b7b0:	73fb      	strb	r3, [r7, #15]
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	330a      	adds	r3, #10
 800b7b6:	781b      	ldrb	r3, [r3, #0]
 800b7b8:	4619      	mov	r1, r3
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	3302      	adds	r3, #2
 800b7be:	4a22      	ldr	r2, [pc, #136]	; (800b848 <shift_sub_rows+0x130>)
 800b7c0:	5c52      	ldrb	r2, [r2, r1]
 800b7c2:	701a      	strb	r2, [r3, #0]
 800b7c4:	7bfa      	ldrb	r2, [r7, #15]
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	330a      	adds	r3, #10
 800b7ca:	491f      	ldr	r1, [pc, #124]	; (800b848 <shift_sub_rows+0x130>)
 800b7cc:	5c8a      	ldrb	r2, [r1, r2]
 800b7ce:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	799b      	ldrb	r3, [r3, #6]
 800b7d4:	73fb      	strb	r3, [r7, #15]
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	330e      	adds	r3, #14
 800b7da:	781b      	ldrb	r3, [r3, #0]
 800b7dc:	4619      	mov	r1, r3
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	3306      	adds	r3, #6
 800b7e2:	4a19      	ldr	r2, [pc, #100]	; (800b848 <shift_sub_rows+0x130>)
 800b7e4:	5c52      	ldrb	r2, [r2, r1]
 800b7e6:	701a      	strb	r2, [r3, #0]
 800b7e8:	7bfa      	ldrb	r2, [r7, #15]
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	330e      	adds	r3, #14
 800b7ee:	4916      	ldr	r1, [pc, #88]	; (800b848 <shift_sub_rows+0x130>)
 800b7f0:	5c8a      	ldrb	r2, [r1, r2]
 800b7f2:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	7bdb      	ldrb	r3, [r3, #15]
 800b7f8:	73fb      	strb	r3, [r7, #15]
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	330b      	adds	r3, #11
 800b7fe:	781b      	ldrb	r3, [r3, #0]
 800b800:	4619      	mov	r1, r3
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	330f      	adds	r3, #15
 800b806:	4a10      	ldr	r2, [pc, #64]	; (800b848 <shift_sub_rows+0x130>)
 800b808:	5c52      	ldrb	r2, [r2, r1]
 800b80a:	701a      	strb	r2, [r3, #0]
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	3307      	adds	r3, #7
 800b810:	781b      	ldrb	r3, [r3, #0]
 800b812:	4619      	mov	r1, r3
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	330b      	adds	r3, #11
 800b818:	4a0b      	ldr	r2, [pc, #44]	; (800b848 <shift_sub_rows+0x130>)
 800b81a:	5c52      	ldrb	r2, [r2, r1]
 800b81c:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	3303      	adds	r3, #3
 800b822:	781b      	ldrb	r3, [r3, #0]
 800b824:	4619      	mov	r1, r3
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	3307      	adds	r3, #7
 800b82a:	4a07      	ldr	r2, [pc, #28]	; (800b848 <shift_sub_rows+0x130>)
 800b82c:	5c52      	ldrb	r2, [r2, r1]
 800b82e:	701a      	strb	r2, [r3, #0]
 800b830:	7bfa      	ldrb	r2, [r7, #15]
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	3303      	adds	r3, #3
 800b836:	4904      	ldr	r1, [pc, #16]	; (800b848 <shift_sub_rows+0x130>)
 800b838:	5c8a      	ldrb	r2, [r1, r2]
 800b83a:	701a      	strb	r2, [r3, #0]
}
 800b83c:	bf00      	nop
 800b83e:	3714      	adds	r7, #20
 800b840:	46bd      	mov	sp, r7
 800b842:	bc80      	pop	{r7}
 800b844:	4770      	bx	lr
 800b846:	bf00      	nop
 800b848:	0801e604 	.word	0x0801e604

0800b84c <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b086      	sub	sp, #24
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800b854:	f107 0308 	add.w	r3, r7, #8
 800b858:	6879      	ldr	r1, [r7, #4]
 800b85a:	4618      	mov	r0, r3
 800b85c:	f7ff fd6c 	bl	800b338 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800b860:	7a3b      	ldrb	r3, [r7, #8]
 800b862:	461a      	mov	r2, r3
 800b864:	4b9a      	ldr	r3, [pc, #616]	; (800bad0 <mix_sub_columns+0x284>)
 800b866:	5c9a      	ldrb	r2, [r3, r2]
 800b868:	7b7b      	ldrb	r3, [r7, #13]
 800b86a:	4619      	mov	r1, r3
 800b86c:	4b99      	ldr	r3, [pc, #612]	; (800bad4 <mix_sub_columns+0x288>)
 800b86e:	5c5b      	ldrb	r3, [r3, r1]
 800b870:	4053      	eors	r3, r2
 800b872:	b2da      	uxtb	r2, r3
 800b874:	7cbb      	ldrb	r3, [r7, #18]
 800b876:	4619      	mov	r1, r3
 800b878:	4b97      	ldr	r3, [pc, #604]	; (800bad8 <mix_sub_columns+0x28c>)
 800b87a:	5c5b      	ldrb	r3, [r3, r1]
 800b87c:	4053      	eors	r3, r2
 800b87e:	b2da      	uxtb	r2, r3
 800b880:	7dfb      	ldrb	r3, [r7, #23]
 800b882:	4619      	mov	r1, r3
 800b884:	4b94      	ldr	r3, [pc, #592]	; (800bad8 <mix_sub_columns+0x28c>)
 800b886:	5c5b      	ldrb	r3, [r3, r1]
 800b888:	4053      	eors	r3, r2
 800b88a:	b2da      	uxtb	r2, r3
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800b890:	7a3b      	ldrb	r3, [r7, #8]
 800b892:	461a      	mov	r2, r3
 800b894:	4b90      	ldr	r3, [pc, #576]	; (800bad8 <mix_sub_columns+0x28c>)
 800b896:	5c9a      	ldrb	r2, [r3, r2]
 800b898:	7b7b      	ldrb	r3, [r7, #13]
 800b89a:	4619      	mov	r1, r3
 800b89c:	4b8c      	ldr	r3, [pc, #560]	; (800bad0 <mix_sub_columns+0x284>)
 800b89e:	5c5b      	ldrb	r3, [r3, r1]
 800b8a0:	4053      	eors	r3, r2
 800b8a2:	b2da      	uxtb	r2, r3
 800b8a4:	7cbb      	ldrb	r3, [r7, #18]
 800b8a6:	4619      	mov	r1, r3
 800b8a8:	4b8a      	ldr	r3, [pc, #552]	; (800bad4 <mix_sub_columns+0x288>)
 800b8aa:	5c5b      	ldrb	r3, [r3, r1]
 800b8ac:	4053      	eors	r3, r2
 800b8ae:	b2d9      	uxtb	r1, r3
 800b8b0:	7dfb      	ldrb	r3, [r7, #23]
 800b8b2:	461a      	mov	r2, r3
 800b8b4:	4b88      	ldr	r3, [pc, #544]	; (800bad8 <mix_sub_columns+0x28c>)
 800b8b6:	5c9a      	ldrb	r2, [r3, r2]
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	3301      	adds	r3, #1
 800b8bc:	404a      	eors	r2, r1
 800b8be:	b2d2      	uxtb	r2, r2
 800b8c0:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800b8c2:	7a3b      	ldrb	r3, [r7, #8]
 800b8c4:	461a      	mov	r2, r3
 800b8c6:	4b84      	ldr	r3, [pc, #528]	; (800bad8 <mix_sub_columns+0x28c>)
 800b8c8:	5c9a      	ldrb	r2, [r3, r2]
 800b8ca:	7b7b      	ldrb	r3, [r7, #13]
 800b8cc:	4619      	mov	r1, r3
 800b8ce:	4b82      	ldr	r3, [pc, #520]	; (800bad8 <mix_sub_columns+0x28c>)
 800b8d0:	5c5b      	ldrb	r3, [r3, r1]
 800b8d2:	4053      	eors	r3, r2
 800b8d4:	b2da      	uxtb	r2, r3
 800b8d6:	7cbb      	ldrb	r3, [r7, #18]
 800b8d8:	4619      	mov	r1, r3
 800b8da:	4b7d      	ldr	r3, [pc, #500]	; (800bad0 <mix_sub_columns+0x284>)
 800b8dc:	5c5b      	ldrb	r3, [r3, r1]
 800b8de:	4053      	eors	r3, r2
 800b8e0:	b2d9      	uxtb	r1, r3
 800b8e2:	7dfb      	ldrb	r3, [r7, #23]
 800b8e4:	461a      	mov	r2, r3
 800b8e6:	4b7b      	ldr	r3, [pc, #492]	; (800bad4 <mix_sub_columns+0x288>)
 800b8e8:	5c9a      	ldrb	r2, [r3, r2]
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	3302      	adds	r3, #2
 800b8ee:	404a      	eors	r2, r1
 800b8f0:	b2d2      	uxtb	r2, r2
 800b8f2:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800b8f4:	7a3b      	ldrb	r3, [r7, #8]
 800b8f6:	461a      	mov	r2, r3
 800b8f8:	4b76      	ldr	r3, [pc, #472]	; (800bad4 <mix_sub_columns+0x288>)
 800b8fa:	5c9a      	ldrb	r2, [r3, r2]
 800b8fc:	7b7b      	ldrb	r3, [r7, #13]
 800b8fe:	4619      	mov	r1, r3
 800b900:	4b75      	ldr	r3, [pc, #468]	; (800bad8 <mix_sub_columns+0x28c>)
 800b902:	5c5b      	ldrb	r3, [r3, r1]
 800b904:	4053      	eors	r3, r2
 800b906:	b2da      	uxtb	r2, r3
 800b908:	7cbb      	ldrb	r3, [r7, #18]
 800b90a:	4619      	mov	r1, r3
 800b90c:	4b72      	ldr	r3, [pc, #456]	; (800bad8 <mix_sub_columns+0x28c>)
 800b90e:	5c5b      	ldrb	r3, [r3, r1]
 800b910:	4053      	eors	r3, r2
 800b912:	b2d9      	uxtb	r1, r3
 800b914:	7dfb      	ldrb	r3, [r7, #23]
 800b916:	461a      	mov	r2, r3
 800b918:	4b6d      	ldr	r3, [pc, #436]	; (800bad0 <mix_sub_columns+0x284>)
 800b91a:	5c9a      	ldrb	r2, [r3, r2]
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	3303      	adds	r3, #3
 800b920:	404a      	eors	r2, r1
 800b922:	b2d2      	uxtb	r2, r2
 800b924:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800b926:	7b3b      	ldrb	r3, [r7, #12]
 800b928:	461a      	mov	r2, r3
 800b92a:	4b69      	ldr	r3, [pc, #420]	; (800bad0 <mix_sub_columns+0x284>)
 800b92c:	5c9a      	ldrb	r2, [r3, r2]
 800b92e:	7c7b      	ldrb	r3, [r7, #17]
 800b930:	4619      	mov	r1, r3
 800b932:	4b68      	ldr	r3, [pc, #416]	; (800bad4 <mix_sub_columns+0x288>)
 800b934:	5c5b      	ldrb	r3, [r3, r1]
 800b936:	4053      	eors	r3, r2
 800b938:	b2da      	uxtb	r2, r3
 800b93a:	7dbb      	ldrb	r3, [r7, #22]
 800b93c:	4619      	mov	r1, r3
 800b93e:	4b66      	ldr	r3, [pc, #408]	; (800bad8 <mix_sub_columns+0x28c>)
 800b940:	5c5b      	ldrb	r3, [r3, r1]
 800b942:	4053      	eors	r3, r2
 800b944:	b2d9      	uxtb	r1, r3
 800b946:	7afb      	ldrb	r3, [r7, #11]
 800b948:	461a      	mov	r2, r3
 800b94a:	4b63      	ldr	r3, [pc, #396]	; (800bad8 <mix_sub_columns+0x28c>)
 800b94c:	5c9a      	ldrb	r2, [r3, r2]
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	3304      	adds	r3, #4
 800b952:	404a      	eors	r2, r1
 800b954:	b2d2      	uxtb	r2, r2
 800b956:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800b958:	7b3b      	ldrb	r3, [r7, #12]
 800b95a:	461a      	mov	r2, r3
 800b95c:	4b5e      	ldr	r3, [pc, #376]	; (800bad8 <mix_sub_columns+0x28c>)
 800b95e:	5c9a      	ldrb	r2, [r3, r2]
 800b960:	7c7b      	ldrb	r3, [r7, #17]
 800b962:	4619      	mov	r1, r3
 800b964:	4b5a      	ldr	r3, [pc, #360]	; (800bad0 <mix_sub_columns+0x284>)
 800b966:	5c5b      	ldrb	r3, [r3, r1]
 800b968:	4053      	eors	r3, r2
 800b96a:	b2da      	uxtb	r2, r3
 800b96c:	7dbb      	ldrb	r3, [r7, #22]
 800b96e:	4619      	mov	r1, r3
 800b970:	4b58      	ldr	r3, [pc, #352]	; (800bad4 <mix_sub_columns+0x288>)
 800b972:	5c5b      	ldrb	r3, [r3, r1]
 800b974:	4053      	eors	r3, r2
 800b976:	b2d9      	uxtb	r1, r3
 800b978:	7afb      	ldrb	r3, [r7, #11]
 800b97a:	461a      	mov	r2, r3
 800b97c:	4b56      	ldr	r3, [pc, #344]	; (800bad8 <mix_sub_columns+0x28c>)
 800b97e:	5c9a      	ldrb	r2, [r3, r2]
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	3305      	adds	r3, #5
 800b984:	404a      	eors	r2, r1
 800b986:	b2d2      	uxtb	r2, r2
 800b988:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800b98a:	7b3b      	ldrb	r3, [r7, #12]
 800b98c:	461a      	mov	r2, r3
 800b98e:	4b52      	ldr	r3, [pc, #328]	; (800bad8 <mix_sub_columns+0x28c>)
 800b990:	5c9a      	ldrb	r2, [r3, r2]
 800b992:	7c7b      	ldrb	r3, [r7, #17]
 800b994:	4619      	mov	r1, r3
 800b996:	4b50      	ldr	r3, [pc, #320]	; (800bad8 <mix_sub_columns+0x28c>)
 800b998:	5c5b      	ldrb	r3, [r3, r1]
 800b99a:	4053      	eors	r3, r2
 800b99c:	b2da      	uxtb	r2, r3
 800b99e:	7dbb      	ldrb	r3, [r7, #22]
 800b9a0:	4619      	mov	r1, r3
 800b9a2:	4b4b      	ldr	r3, [pc, #300]	; (800bad0 <mix_sub_columns+0x284>)
 800b9a4:	5c5b      	ldrb	r3, [r3, r1]
 800b9a6:	4053      	eors	r3, r2
 800b9a8:	b2d9      	uxtb	r1, r3
 800b9aa:	7afb      	ldrb	r3, [r7, #11]
 800b9ac:	461a      	mov	r2, r3
 800b9ae:	4b49      	ldr	r3, [pc, #292]	; (800bad4 <mix_sub_columns+0x288>)
 800b9b0:	5c9a      	ldrb	r2, [r3, r2]
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	3306      	adds	r3, #6
 800b9b6:	404a      	eors	r2, r1
 800b9b8:	b2d2      	uxtb	r2, r2
 800b9ba:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800b9bc:	7b3b      	ldrb	r3, [r7, #12]
 800b9be:	461a      	mov	r2, r3
 800b9c0:	4b44      	ldr	r3, [pc, #272]	; (800bad4 <mix_sub_columns+0x288>)
 800b9c2:	5c9a      	ldrb	r2, [r3, r2]
 800b9c4:	7c7b      	ldrb	r3, [r7, #17]
 800b9c6:	4619      	mov	r1, r3
 800b9c8:	4b43      	ldr	r3, [pc, #268]	; (800bad8 <mix_sub_columns+0x28c>)
 800b9ca:	5c5b      	ldrb	r3, [r3, r1]
 800b9cc:	4053      	eors	r3, r2
 800b9ce:	b2da      	uxtb	r2, r3
 800b9d0:	7dbb      	ldrb	r3, [r7, #22]
 800b9d2:	4619      	mov	r1, r3
 800b9d4:	4b40      	ldr	r3, [pc, #256]	; (800bad8 <mix_sub_columns+0x28c>)
 800b9d6:	5c5b      	ldrb	r3, [r3, r1]
 800b9d8:	4053      	eors	r3, r2
 800b9da:	b2d9      	uxtb	r1, r3
 800b9dc:	7afb      	ldrb	r3, [r7, #11]
 800b9de:	461a      	mov	r2, r3
 800b9e0:	4b3b      	ldr	r3, [pc, #236]	; (800bad0 <mix_sub_columns+0x284>)
 800b9e2:	5c9a      	ldrb	r2, [r3, r2]
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	3307      	adds	r3, #7
 800b9e8:	404a      	eors	r2, r1
 800b9ea:	b2d2      	uxtb	r2, r2
 800b9ec:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800b9ee:	7c3b      	ldrb	r3, [r7, #16]
 800b9f0:	461a      	mov	r2, r3
 800b9f2:	4b37      	ldr	r3, [pc, #220]	; (800bad0 <mix_sub_columns+0x284>)
 800b9f4:	5c9a      	ldrb	r2, [r3, r2]
 800b9f6:	7d7b      	ldrb	r3, [r7, #21]
 800b9f8:	4619      	mov	r1, r3
 800b9fa:	4b36      	ldr	r3, [pc, #216]	; (800bad4 <mix_sub_columns+0x288>)
 800b9fc:	5c5b      	ldrb	r3, [r3, r1]
 800b9fe:	4053      	eors	r3, r2
 800ba00:	b2da      	uxtb	r2, r3
 800ba02:	7abb      	ldrb	r3, [r7, #10]
 800ba04:	4619      	mov	r1, r3
 800ba06:	4b34      	ldr	r3, [pc, #208]	; (800bad8 <mix_sub_columns+0x28c>)
 800ba08:	5c5b      	ldrb	r3, [r3, r1]
 800ba0a:	4053      	eors	r3, r2
 800ba0c:	b2d9      	uxtb	r1, r3
 800ba0e:	7bfb      	ldrb	r3, [r7, #15]
 800ba10:	461a      	mov	r2, r3
 800ba12:	4b31      	ldr	r3, [pc, #196]	; (800bad8 <mix_sub_columns+0x28c>)
 800ba14:	5c9a      	ldrb	r2, [r3, r2]
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	3308      	adds	r3, #8
 800ba1a:	404a      	eors	r2, r1
 800ba1c:	b2d2      	uxtb	r2, r2
 800ba1e:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800ba20:	7c3b      	ldrb	r3, [r7, #16]
 800ba22:	461a      	mov	r2, r3
 800ba24:	4b2c      	ldr	r3, [pc, #176]	; (800bad8 <mix_sub_columns+0x28c>)
 800ba26:	5c9a      	ldrb	r2, [r3, r2]
 800ba28:	7d7b      	ldrb	r3, [r7, #21]
 800ba2a:	4619      	mov	r1, r3
 800ba2c:	4b28      	ldr	r3, [pc, #160]	; (800bad0 <mix_sub_columns+0x284>)
 800ba2e:	5c5b      	ldrb	r3, [r3, r1]
 800ba30:	4053      	eors	r3, r2
 800ba32:	b2da      	uxtb	r2, r3
 800ba34:	7abb      	ldrb	r3, [r7, #10]
 800ba36:	4619      	mov	r1, r3
 800ba38:	4b26      	ldr	r3, [pc, #152]	; (800bad4 <mix_sub_columns+0x288>)
 800ba3a:	5c5b      	ldrb	r3, [r3, r1]
 800ba3c:	4053      	eors	r3, r2
 800ba3e:	b2d9      	uxtb	r1, r3
 800ba40:	7bfb      	ldrb	r3, [r7, #15]
 800ba42:	461a      	mov	r2, r3
 800ba44:	4b24      	ldr	r3, [pc, #144]	; (800bad8 <mix_sub_columns+0x28c>)
 800ba46:	5c9a      	ldrb	r2, [r3, r2]
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	3309      	adds	r3, #9
 800ba4c:	404a      	eors	r2, r1
 800ba4e:	b2d2      	uxtb	r2, r2
 800ba50:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800ba52:	7c3b      	ldrb	r3, [r7, #16]
 800ba54:	461a      	mov	r2, r3
 800ba56:	4b20      	ldr	r3, [pc, #128]	; (800bad8 <mix_sub_columns+0x28c>)
 800ba58:	5c9a      	ldrb	r2, [r3, r2]
 800ba5a:	7d7b      	ldrb	r3, [r7, #21]
 800ba5c:	4619      	mov	r1, r3
 800ba5e:	4b1e      	ldr	r3, [pc, #120]	; (800bad8 <mix_sub_columns+0x28c>)
 800ba60:	5c5b      	ldrb	r3, [r3, r1]
 800ba62:	4053      	eors	r3, r2
 800ba64:	b2da      	uxtb	r2, r3
 800ba66:	7abb      	ldrb	r3, [r7, #10]
 800ba68:	4619      	mov	r1, r3
 800ba6a:	4b19      	ldr	r3, [pc, #100]	; (800bad0 <mix_sub_columns+0x284>)
 800ba6c:	5c5b      	ldrb	r3, [r3, r1]
 800ba6e:	4053      	eors	r3, r2
 800ba70:	b2d9      	uxtb	r1, r3
 800ba72:	7bfb      	ldrb	r3, [r7, #15]
 800ba74:	461a      	mov	r2, r3
 800ba76:	4b17      	ldr	r3, [pc, #92]	; (800bad4 <mix_sub_columns+0x288>)
 800ba78:	5c9a      	ldrb	r2, [r3, r2]
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	330a      	adds	r3, #10
 800ba7e:	404a      	eors	r2, r1
 800ba80:	b2d2      	uxtb	r2, r2
 800ba82:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800ba84:	7c3b      	ldrb	r3, [r7, #16]
 800ba86:	461a      	mov	r2, r3
 800ba88:	4b12      	ldr	r3, [pc, #72]	; (800bad4 <mix_sub_columns+0x288>)
 800ba8a:	5c9a      	ldrb	r2, [r3, r2]
 800ba8c:	7d7b      	ldrb	r3, [r7, #21]
 800ba8e:	4619      	mov	r1, r3
 800ba90:	4b11      	ldr	r3, [pc, #68]	; (800bad8 <mix_sub_columns+0x28c>)
 800ba92:	5c5b      	ldrb	r3, [r3, r1]
 800ba94:	4053      	eors	r3, r2
 800ba96:	b2da      	uxtb	r2, r3
 800ba98:	7abb      	ldrb	r3, [r7, #10]
 800ba9a:	4619      	mov	r1, r3
 800ba9c:	4b0e      	ldr	r3, [pc, #56]	; (800bad8 <mix_sub_columns+0x28c>)
 800ba9e:	5c5b      	ldrb	r3, [r3, r1]
 800baa0:	4053      	eors	r3, r2
 800baa2:	b2d9      	uxtb	r1, r3
 800baa4:	7bfb      	ldrb	r3, [r7, #15]
 800baa6:	461a      	mov	r2, r3
 800baa8:	4b09      	ldr	r3, [pc, #36]	; (800bad0 <mix_sub_columns+0x284>)
 800baaa:	5c9a      	ldrb	r2, [r3, r2]
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	330b      	adds	r3, #11
 800bab0:	404a      	eors	r2, r1
 800bab2:	b2d2      	uxtb	r2, r2
 800bab4:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800bab6:	7d3b      	ldrb	r3, [r7, #20]
 800bab8:	461a      	mov	r2, r3
 800baba:	4b05      	ldr	r3, [pc, #20]	; (800bad0 <mix_sub_columns+0x284>)
 800babc:	5c9a      	ldrb	r2, [r3, r2]
 800babe:	7a7b      	ldrb	r3, [r7, #9]
 800bac0:	4619      	mov	r1, r3
 800bac2:	4b04      	ldr	r3, [pc, #16]	; (800bad4 <mix_sub_columns+0x288>)
 800bac4:	5c5b      	ldrb	r3, [r3, r1]
 800bac6:	4053      	eors	r3, r2
 800bac8:	b2da      	uxtb	r2, r3
 800baca:	7bbb      	ldrb	r3, [r7, #14]
 800bacc:	4619      	mov	r1, r3
 800bace:	e005      	b.n	800badc <mix_sub_columns+0x290>
 800bad0:	0801e704 	.word	0x0801e704
 800bad4:	0801e804 	.word	0x0801e804
 800bad8:	0801e604 	.word	0x0801e604
 800badc:	4b2d      	ldr	r3, [pc, #180]	; (800bb94 <mix_sub_columns+0x348>)
 800bade:	5c5b      	ldrb	r3, [r3, r1]
 800bae0:	4053      	eors	r3, r2
 800bae2:	b2d9      	uxtb	r1, r3
 800bae4:	7cfb      	ldrb	r3, [r7, #19]
 800bae6:	461a      	mov	r2, r3
 800bae8:	4b2a      	ldr	r3, [pc, #168]	; (800bb94 <mix_sub_columns+0x348>)
 800baea:	5c9a      	ldrb	r2, [r3, r2]
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	330c      	adds	r3, #12
 800baf0:	404a      	eors	r2, r1
 800baf2:	b2d2      	uxtb	r2, r2
 800baf4:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800baf6:	7d3b      	ldrb	r3, [r7, #20]
 800baf8:	461a      	mov	r2, r3
 800bafa:	4b26      	ldr	r3, [pc, #152]	; (800bb94 <mix_sub_columns+0x348>)
 800bafc:	5c9a      	ldrb	r2, [r3, r2]
 800bafe:	7a7b      	ldrb	r3, [r7, #9]
 800bb00:	4619      	mov	r1, r3
 800bb02:	4b25      	ldr	r3, [pc, #148]	; (800bb98 <mix_sub_columns+0x34c>)
 800bb04:	5c5b      	ldrb	r3, [r3, r1]
 800bb06:	4053      	eors	r3, r2
 800bb08:	b2da      	uxtb	r2, r3
 800bb0a:	7bbb      	ldrb	r3, [r7, #14]
 800bb0c:	4619      	mov	r1, r3
 800bb0e:	4b23      	ldr	r3, [pc, #140]	; (800bb9c <mix_sub_columns+0x350>)
 800bb10:	5c5b      	ldrb	r3, [r3, r1]
 800bb12:	4053      	eors	r3, r2
 800bb14:	b2d9      	uxtb	r1, r3
 800bb16:	7cfb      	ldrb	r3, [r7, #19]
 800bb18:	461a      	mov	r2, r3
 800bb1a:	4b1e      	ldr	r3, [pc, #120]	; (800bb94 <mix_sub_columns+0x348>)
 800bb1c:	5c9a      	ldrb	r2, [r3, r2]
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	330d      	adds	r3, #13
 800bb22:	404a      	eors	r2, r1
 800bb24:	b2d2      	uxtb	r2, r2
 800bb26:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800bb28:	7d3b      	ldrb	r3, [r7, #20]
 800bb2a:	461a      	mov	r2, r3
 800bb2c:	4b19      	ldr	r3, [pc, #100]	; (800bb94 <mix_sub_columns+0x348>)
 800bb2e:	5c9a      	ldrb	r2, [r3, r2]
 800bb30:	7a7b      	ldrb	r3, [r7, #9]
 800bb32:	4619      	mov	r1, r3
 800bb34:	4b17      	ldr	r3, [pc, #92]	; (800bb94 <mix_sub_columns+0x348>)
 800bb36:	5c5b      	ldrb	r3, [r3, r1]
 800bb38:	4053      	eors	r3, r2
 800bb3a:	b2da      	uxtb	r2, r3
 800bb3c:	7bbb      	ldrb	r3, [r7, #14]
 800bb3e:	4619      	mov	r1, r3
 800bb40:	4b15      	ldr	r3, [pc, #84]	; (800bb98 <mix_sub_columns+0x34c>)
 800bb42:	5c5b      	ldrb	r3, [r3, r1]
 800bb44:	4053      	eors	r3, r2
 800bb46:	b2d9      	uxtb	r1, r3
 800bb48:	7cfb      	ldrb	r3, [r7, #19]
 800bb4a:	461a      	mov	r2, r3
 800bb4c:	4b13      	ldr	r3, [pc, #76]	; (800bb9c <mix_sub_columns+0x350>)
 800bb4e:	5c9a      	ldrb	r2, [r3, r2]
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	330e      	adds	r3, #14
 800bb54:	404a      	eors	r2, r1
 800bb56:	b2d2      	uxtb	r2, r2
 800bb58:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800bb5a:	7d3b      	ldrb	r3, [r7, #20]
 800bb5c:	461a      	mov	r2, r3
 800bb5e:	4b0f      	ldr	r3, [pc, #60]	; (800bb9c <mix_sub_columns+0x350>)
 800bb60:	5c9a      	ldrb	r2, [r3, r2]
 800bb62:	7a7b      	ldrb	r3, [r7, #9]
 800bb64:	4619      	mov	r1, r3
 800bb66:	4b0b      	ldr	r3, [pc, #44]	; (800bb94 <mix_sub_columns+0x348>)
 800bb68:	5c5b      	ldrb	r3, [r3, r1]
 800bb6a:	4053      	eors	r3, r2
 800bb6c:	b2da      	uxtb	r2, r3
 800bb6e:	7bbb      	ldrb	r3, [r7, #14]
 800bb70:	4619      	mov	r1, r3
 800bb72:	4b08      	ldr	r3, [pc, #32]	; (800bb94 <mix_sub_columns+0x348>)
 800bb74:	5c5b      	ldrb	r3, [r3, r1]
 800bb76:	4053      	eors	r3, r2
 800bb78:	b2d9      	uxtb	r1, r3
 800bb7a:	7cfb      	ldrb	r3, [r7, #19]
 800bb7c:	461a      	mov	r2, r3
 800bb7e:	4b06      	ldr	r3, [pc, #24]	; (800bb98 <mix_sub_columns+0x34c>)
 800bb80:	5c9a      	ldrb	r2, [r3, r2]
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	330f      	adds	r3, #15
 800bb86:	404a      	eors	r2, r1
 800bb88:	b2d2      	uxtb	r2, r2
 800bb8a:	701a      	strb	r2, [r3, #0]
  }
 800bb8c:	bf00      	nop
 800bb8e:	3718      	adds	r7, #24
 800bb90:	46bd      	mov	sp, r7
 800bb92:	bd80      	pop	{r7, pc}
 800bb94:	0801e604 	.word	0x0801e604
 800bb98:	0801e704 	.word	0x0801e704
 800bb9c:	0801e804 	.word	0x0801e804

0800bba0 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b086      	sub	sp, #24
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	60f8      	str	r0, [r7, #12]
 800bba8:	460b      	mov	r3, r1
 800bbaa:	607a      	str	r2, [r7, #4]
 800bbac:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800bbae:	7afb      	ldrb	r3, [r7, #11]
 800bbb0:	3b10      	subs	r3, #16
 800bbb2:	2b10      	cmp	r3, #16
 800bbb4:	bf8c      	ite	hi
 800bbb6:	2201      	movhi	r2, #1
 800bbb8:	2200      	movls	r2, #0
 800bbba:	b2d2      	uxtb	r2, r2
 800bbbc:	2a00      	cmp	r2, #0
 800bbbe:	d10b      	bne.n	800bbd8 <lorawan_aes_set_key+0x38>
 800bbc0:	4a64      	ldr	r2, [pc, #400]	; (800bd54 <lorawan_aes_set_key+0x1b4>)
 800bbc2:	fa22 f303 	lsr.w	r3, r2, r3
 800bbc6:	f003 0301 	and.w	r3, r3, #1
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	bf14      	ite	ne
 800bbce:	2301      	movne	r3, #1
 800bbd0:	2300      	moveq	r3, #0
 800bbd2:	b2db      	uxtb	r3, r3
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d105      	bne.n	800bbe4 <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800bbe0:	23ff      	movs	r3, #255	; 0xff
 800bbe2:	e0b2      	b.n	800bd4a <lorawan_aes_set_key+0x1aa>
        break;
 800bbe4:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	7afa      	ldrb	r2, [r7, #11]
 800bbea:	68f9      	ldr	r1, [r7, #12]
 800bbec:	4618      	mov	r0, r3
 800bbee:	f7ff fbfc 	bl	800b3ea <copy_block_nn>
    hi = (keylen + 28) << 2;
 800bbf2:	7afb      	ldrb	r3, [r7, #11]
 800bbf4:	331c      	adds	r3, #28
 800bbf6:	b2db      	uxtb	r3, r3
 800bbf8:	009b      	lsls	r3, r3, #2
 800bbfa:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800bbfc:	7c7b      	ldrb	r3, [r7, #17]
 800bbfe:	091b      	lsrs	r3, r3, #4
 800bc00:	b2db      	uxtb	r3, r3
 800bc02:	3b01      	subs	r3, #1
 800bc04:	b2da      	uxtb	r2, r3
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800bc0c:	7afb      	ldrb	r3, [r7, #11]
 800bc0e:	75fb      	strb	r3, [r7, #23]
 800bc10:	2301      	movs	r3, #1
 800bc12:	75bb      	strb	r3, [r7, #22]
 800bc14:	e093      	b.n	800bd3e <lorawan_aes_set_key+0x19e>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800bc16:	7dfb      	ldrb	r3, [r7, #23]
 800bc18:	3b04      	subs	r3, #4
 800bc1a:	687a      	ldr	r2, [r7, #4]
 800bc1c:	5cd3      	ldrb	r3, [r2, r3]
 800bc1e:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800bc20:	7dfb      	ldrb	r3, [r7, #23]
 800bc22:	3b03      	subs	r3, #3
 800bc24:	687a      	ldr	r2, [r7, #4]
 800bc26:	5cd3      	ldrb	r3, [r2, r3]
 800bc28:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800bc2a:	7dfb      	ldrb	r3, [r7, #23]
 800bc2c:	3b02      	subs	r3, #2
 800bc2e:	687a      	ldr	r2, [r7, #4]
 800bc30:	5cd3      	ldrb	r3, [r2, r3]
 800bc32:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800bc34:	7dfb      	ldrb	r3, [r7, #23]
 800bc36:	3b01      	subs	r3, #1
 800bc38:	687a      	ldr	r2, [r7, #4]
 800bc3a:	5cd3      	ldrb	r3, [r2, r3]
 800bc3c:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800bc3e:	7dfb      	ldrb	r3, [r7, #23]
 800bc40:	7afa      	ldrb	r2, [r7, #11]
 800bc42:	fbb3 f1f2 	udiv	r1, r3, r2
 800bc46:	fb01 f202 	mul.w	r2, r1, r2
 800bc4a:	1a9b      	subs	r3, r3, r2
 800bc4c:	b2db      	uxtb	r3, r3
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d127      	bne.n	800bca2 <lorawan_aes_set_key+0x102>
        {
            tt = t0;
 800bc52:	7d7b      	ldrb	r3, [r7, #21]
 800bc54:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800bc56:	7d3b      	ldrb	r3, [r7, #20]
 800bc58:	4a3f      	ldr	r2, [pc, #252]	; (800bd58 <lorawan_aes_set_key+0x1b8>)
 800bc5a:	5cd2      	ldrb	r2, [r2, r3]
 800bc5c:	7dbb      	ldrb	r3, [r7, #22]
 800bc5e:	4053      	eors	r3, r2
 800bc60:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800bc62:	7cfb      	ldrb	r3, [r7, #19]
 800bc64:	4a3c      	ldr	r2, [pc, #240]	; (800bd58 <lorawan_aes_set_key+0x1b8>)
 800bc66:	5cd3      	ldrb	r3, [r2, r3]
 800bc68:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800bc6a:	7cbb      	ldrb	r3, [r7, #18]
 800bc6c:	4a3a      	ldr	r2, [pc, #232]	; (800bd58 <lorawan_aes_set_key+0x1b8>)
 800bc6e:	5cd3      	ldrb	r3, [r2, r3]
 800bc70:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800bc72:	7c3b      	ldrb	r3, [r7, #16]
 800bc74:	4a38      	ldr	r2, [pc, #224]	; (800bd58 <lorawan_aes_set_key+0x1b8>)
 800bc76:	5cd3      	ldrb	r3, [r2, r3]
 800bc78:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800bc7a:	7dbb      	ldrb	r3, [r7, #22]
 800bc7c:	005b      	lsls	r3, r3, #1
 800bc7e:	b25a      	sxtb	r2, r3
 800bc80:	7dbb      	ldrb	r3, [r7, #22]
 800bc82:	09db      	lsrs	r3, r3, #7
 800bc84:	b2db      	uxtb	r3, r3
 800bc86:	4619      	mov	r1, r3
 800bc88:	0049      	lsls	r1, r1, #1
 800bc8a:	440b      	add	r3, r1
 800bc8c:	4619      	mov	r1, r3
 800bc8e:	00c8      	lsls	r0, r1, #3
 800bc90:	4619      	mov	r1, r3
 800bc92:	4603      	mov	r3, r0
 800bc94:	440b      	add	r3, r1
 800bc96:	b2db      	uxtb	r3, r3
 800bc98:	b25b      	sxtb	r3, r3
 800bc9a:	4053      	eors	r3, r2
 800bc9c:	b25b      	sxtb	r3, r3
 800bc9e:	75bb      	strb	r3, [r7, #22]
 800bca0:	e01c      	b.n	800bcdc <lorawan_aes_set_key+0x13c>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800bca2:	7afb      	ldrb	r3, [r7, #11]
 800bca4:	2b18      	cmp	r3, #24
 800bca6:	d919      	bls.n	800bcdc <lorawan_aes_set_key+0x13c>
 800bca8:	7dfb      	ldrb	r3, [r7, #23]
 800bcaa:	7afa      	ldrb	r2, [r7, #11]
 800bcac:	fbb3 f1f2 	udiv	r1, r3, r2
 800bcb0:	fb01 f202 	mul.w	r2, r1, r2
 800bcb4:	1a9b      	subs	r3, r3, r2
 800bcb6:	b2db      	uxtb	r3, r3
 800bcb8:	2b10      	cmp	r3, #16
 800bcba:	d10f      	bne.n	800bcdc <lorawan_aes_set_key+0x13c>
        {
            t0 = s_box(t0);
 800bcbc:	7d7b      	ldrb	r3, [r7, #21]
 800bcbe:	4a26      	ldr	r2, [pc, #152]	; (800bd58 <lorawan_aes_set_key+0x1b8>)
 800bcc0:	5cd3      	ldrb	r3, [r2, r3]
 800bcc2:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800bcc4:	7d3b      	ldrb	r3, [r7, #20]
 800bcc6:	4a24      	ldr	r2, [pc, #144]	; (800bd58 <lorawan_aes_set_key+0x1b8>)
 800bcc8:	5cd3      	ldrb	r3, [r2, r3]
 800bcca:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800bccc:	7cfb      	ldrb	r3, [r7, #19]
 800bcce:	4a22      	ldr	r2, [pc, #136]	; (800bd58 <lorawan_aes_set_key+0x1b8>)
 800bcd0:	5cd3      	ldrb	r3, [r2, r3]
 800bcd2:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800bcd4:	7cbb      	ldrb	r3, [r7, #18]
 800bcd6:	4a20      	ldr	r2, [pc, #128]	; (800bd58 <lorawan_aes_set_key+0x1b8>)
 800bcd8:	5cd3      	ldrb	r3, [r2, r3]
 800bcda:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800bcdc:	7dfa      	ldrb	r2, [r7, #23]
 800bcde:	7afb      	ldrb	r3, [r7, #11]
 800bce0:	1ad3      	subs	r3, r2, r3
 800bce2:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800bce4:	7c3b      	ldrb	r3, [r7, #16]
 800bce6:	687a      	ldr	r2, [r7, #4]
 800bce8:	5cd1      	ldrb	r1, [r2, r3]
 800bcea:	7dfb      	ldrb	r3, [r7, #23]
 800bcec:	7d7a      	ldrb	r2, [r7, #21]
 800bcee:	404a      	eors	r2, r1
 800bcf0:	b2d1      	uxtb	r1, r2
 800bcf2:	687a      	ldr	r2, [r7, #4]
 800bcf4:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800bcf6:	7c3b      	ldrb	r3, [r7, #16]
 800bcf8:	3301      	adds	r3, #1
 800bcfa:	687a      	ldr	r2, [r7, #4]
 800bcfc:	5cd1      	ldrb	r1, [r2, r3]
 800bcfe:	7dfb      	ldrb	r3, [r7, #23]
 800bd00:	3301      	adds	r3, #1
 800bd02:	7d3a      	ldrb	r2, [r7, #20]
 800bd04:	404a      	eors	r2, r1
 800bd06:	b2d1      	uxtb	r1, r2
 800bd08:	687a      	ldr	r2, [r7, #4]
 800bd0a:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800bd0c:	7c3b      	ldrb	r3, [r7, #16]
 800bd0e:	3302      	adds	r3, #2
 800bd10:	687a      	ldr	r2, [r7, #4]
 800bd12:	5cd1      	ldrb	r1, [r2, r3]
 800bd14:	7dfb      	ldrb	r3, [r7, #23]
 800bd16:	3302      	adds	r3, #2
 800bd18:	7cfa      	ldrb	r2, [r7, #19]
 800bd1a:	404a      	eors	r2, r1
 800bd1c:	b2d1      	uxtb	r1, r2
 800bd1e:	687a      	ldr	r2, [r7, #4]
 800bd20:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800bd22:	7c3b      	ldrb	r3, [r7, #16]
 800bd24:	3303      	adds	r3, #3
 800bd26:	687a      	ldr	r2, [r7, #4]
 800bd28:	5cd1      	ldrb	r1, [r2, r3]
 800bd2a:	7dfb      	ldrb	r3, [r7, #23]
 800bd2c:	3303      	adds	r3, #3
 800bd2e:	7cba      	ldrb	r2, [r7, #18]
 800bd30:	404a      	eors	r2, r1
 800bd32:	b2d1      	uxtb	r1, r2
 800bd34:	687a      	ldr	r2, [r7, #4]
 800bd36:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800bd38:	7dfb      	ldrb	r3, [r7, #23]
 800bd3a:	3304      	adds	r3, #4
 800bd3c:	75fb      	strb	r3, [r7, #23]
 800bd3e:	7dfa      	ldrb	r2, [r7, #23]
 800bd40:	7c7b      	ldrb	r3, [r7, #17]
 800bd42:	429a      	cmp	r2, r3
 800bd44:	f4ff af67 	bcc.w	800bc16 <lorawan_aes_set_key+0x76>
    }
    return 0;
 800bd48:	2300      	movs	r3, #0
}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	3718      	adds	r7, #24
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}
 800bd52:	bf00      	nop
 800bd54:	00010101 	.word	0x00010101
 800bd58:	0801e604 	.word	0x0801e604

0800bd5c <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b08a      	sub	sp, #40	; 0x28
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	60f8      	str	r0, [r7, #12]
 800bd64:	60b9      	str	r1, [r7, #8]
 800bd66:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d038      	beq.n	800bde4 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800bd72:	687a      	ldr	r2, [r7, #4]
 800bd74:	f107 0314 	add.w	r3, r7, #20
 800bd78:	68f9      	ldr	r1, [r7, #12]
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f7ff fc07 	bl	800b58e <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800bd80:	2301      	movs	r3, #1
 800bd82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bd86:	e014      	b.n	800bdb2 <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800bd88:	f107 0314 	add.w	r3, r7, #20
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	f7ff fd5d 	bl	800b84c <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bd98:	0112      	lsls	r2, r2, #4
 800bd9a:	441a      	add	r2, r3
 800bd9c:	f107 0314 	add.w	r3, r7, #20
 800bda0:	4611      	mov	r1, r2
 800bda2:	4618      	mov	r0, r3
 800bda4:	f7ff fcab 	bl	800b6fe <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800bda8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bdac:	3301      	adds	r3, #1
 800bdae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800bdb8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bdbc:	429a      	cmp	r2, r3
 800bdbe:	d3e3      	bcc.n	800bd88 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800bdc0:	f107 0314 	add.w	r3, r7, #20
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	f7ff fca7 	bl	800b718 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bdd0:	0112      	lsls	r2, r2, #4
 800bdd2:	441a      	add	r2, r3
 800bdd4:	f107 0314 	add.w	r3, r7, #20
 800bdd8:	4619      	mov	r1, r3
 800bdda:	68b8      	ldr	r0, [r7, #8]
 800bddc:	f7ff fbd7 	bl	800b58e <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800bde0:	2300      	movs	r3, #0
 800bde2:	e000      	b.n	800bde6 <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800bde4:	23ff      	movs	r3, #255	; 0xff
}
 800bde6:	4618      	mov	r0, r3
 800bde8:	3728      	adds	r7, #40	; 0x28
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}
	...

0800bdf0 <PrintKey>:
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac );

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t keyID )
{
 800bdf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdf2:	b0a1      	sub	sp, #132	; 0x84
 800bdf4:	af12      	add	r7, sp, #72	; 0x48
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#if (KEY_EXTRACTABLE == 1)
#if (LORAWAN_KMS == 0)
    Key_t *keyItem;
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 800bdfc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800be00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800be04:	4611      	mov	r1, r2
 800be06:	4618      	mov	r0, r3
 800be08:	f000 fa12 	bl	800c230 <SecureElementGetKeyByID>
 800be0c:	4603      	mov	r3, r0
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d174      	bne.n	800befc <PrintKey+0x10c>
#else
    uint8_t extractable_key[SE_KEY_SIZE] = {0};
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, ( uint8_t * )extractable_key ) )
#endif /* LORAWAN_KMS */
    {
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800be12:	2300      	movs	r3, #0
 800be14:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800be18:	e06c      	b.n	800bef4 <PrintKey+0x104>
        {
            if( KeyLabel[i].keyID == keyID )
 800be1a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800be1e:	4939      	ldr	r1, [pc, #228]	; (800bf04 <PrintKey+0x114>)
 800be20:	4613      	mov	r3, r2
 800be22:	005b      	lsls	r3, r3, #1
 800be24:	4413      	add	r3, r2
 800be26:	009b      	lsls	r3, r3, #2
 800be28:	440b      	add	r3, r1
 800be2a:	781b      	ldrb	r3, [r3, #0]
 800be2c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800be30:	429a      	cmp	r2, r3
 800be32:	d15a      	bne.n	800beea <PrintKey+0xfa>
            {
#if (LORAWAN_KMS == 0)
                MW_LOG( TS_OFF, VLEVEL_M,
 800be34:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800be38:	4932      	ldr	r1, [pc, #200]	; (800bf04 <PrintKey+0x114>)
 800be3a:	4613      	mov	r3, r2
 800be3c:	005b      	lsls	r3, r3, #1
 800be3e:	4413      	add	r3, r2
 800be40:	009b      	lsls	r3, r3, #2
 800be42:	440b      	add	r3, r1
 800be44:	3308      	adds	r3, #8
 800be46:	6819      	ldr	r1, [r3, #0]
 800be48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be4a:	785b      	ldrb	r3, [r3, #1]
 800be4c:	461d      	mov	r5, r3
 800be4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be50:	789b      	ldrb	r3, [r3, #2]
 800be52:	461e      	mov	r6, r3
 800be54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be56:	78db      	ldrb	r3, [r3, #3]
 800be58:	62bb      	str	r3, [r7, #40]	; 0x28
 800be5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be5c:	791b      	ldrb	r3, [r3, #4]
 800be5e:	627b      	str	r3, [r7, #36]	; 0x24
 800be60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be62:	795b      	ldrb	r3, [r3, #5]
 800be64:	623b      	str	r3, [r7, #32]
 800be66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be68:	799b      	ldrb	r3, [r3, #6]
 800be6a:	61fb      	str	r3, [r7, #28]
 800be6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be6e:	79db      	ldrb	r3, [r3, #7]
 800be70:	61bb      	str	r3, [r7, #24]
 800be72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be74:	7a1b      	ldrb	r3, [r3, #8]
 800be76:	617b      	str	r3, [r7, #20]
 800be78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be7a:	7a5b      	ldrb	r3, [r3, #9]
 800be7c:	613b      	str	r3, [r7, #16]
 800be7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be80:	7a9b      	ldrb	r3, [r3, #10]
 800be82:	60fb      	str	r3, [r7, #12]
 800be84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be86:	7adb      	ldrb	r3, [r3, #11]
 800be88:	60bb      	str	r3, [r7, #8]
 800be8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be8c:	7b1b      	ldrb	r3, [r3, #12]
 800be8e:	607b      	str	r3, [r7, #4]
 800be90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be92:	7b5b      	ldrb	r3, [r3, #13]
 800be94:	461c      	mov	r4, r3
 800be96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be98:	7b9b      	ldrb	r3, [r3, #14]
 800be9a:	4618      	mov	r0, r3
 800be9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be9e:	7bdb      	ldrb	r3, [r3, #15]
 800bea0:	461a      	mov	r2, r3
 800bea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bea4:	7c1b      	ldrb	r3, [r3, #16]
 800bea6:	9310      	str	r3, [sp, #64]	; 0x40
 800bea8:	920f      	str	r2, [sp, #60]	; 0x3c
 800beaa:	900e      	str	r0, [sp, #56]	; 0x38
 800beac:	940d      	str	r4, [sp, #52]	; 0x34
 800beae:	687a      	ldr	r2, [r7, #4]
 800beb0:	920c      	str	r2, [sp, #48]	; 0x30
 800beb2:	68ba      	ldr	r2, [r7, #8]
 800beb4:	920b      	str	r2, [sp, #44]	; 0x2c
 800beb6:	68fa      	ldr	r2, [r7, #12]
 800beb8:	920a      	str	r2, [sp, #40]	; 0x28
 800beba:	693a      	ldr	r2, [r7, #16]
 800bebc:	9209      	str	r2, [sp, #36]	; 0x24
 800bebe:	697a      	ldr	r2, [r7, #20]
 800bec0:	9208      	str	r2, [sp, #32]
 800bec2:	69ba      	ldr	r2, [r7, #24]
 800bec4:	9207      	str	r2, [sp, #28]
 800bec6:	69fa      	ldr	r2, [r7, #28]
 800bec8:	9206      	str	r2, [sp, #24]
 800beca:	6a3a      	ldr	r2, [r7, #32]
 800becc:	9205      	str	r2, [sp, #20]
 800bece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bed0:	9204      	str	r2, [sp, #16]
 800bed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bed4:	9303      	str	r3, [sp, #12]
 800bed6:	9602      	str	r6, [sp, #8]
 800bed8:	9501      	str	r5, [sp, #4]
 800beda:	9100      	str	r1, [sp, #0]
 800bedc:	4b0a      	ldr	r3, [pc, #40]	; (800bf08 <PrintKey+0x118>)
 800bede:	2200      	movs	r2, #0
 800bee0:	2100      	movs	r1, #0
 800bee2:	2002      	movs	r0, #2
 800bee4:	f011 fb72 	bl	801d5cc <UTIL_ADV_TRACE_COND_FSend>
 800bee8:	e008      	b.n	800befc <PrintKey+0x10c>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800beea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800beee:	3301      	adds	r3, #1
 800bef0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800bef4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bef8:	2b0a      	cmp	r3, #10
 800befa:	d98e      	bls.n	800be1a <PrintKey+0x2a>
                return;
            }
        }
    }
#endif /* KEY_EXTRACTABLE */
}
 800befc:	373c      	adds	r7, #60	; 0x3c
 800befe:	46bd      	mov	sp, r7
 800bf00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf02:	bf00      	nop
 800bf04:	0801e904 	.word	0x0801e904
 800bf08:	0801e170 	.word	0x0801e170

0800bf0c <PrintIds>:

static void PrintIds( ActivationType_t mode )
{
 800bf0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf0e:	b091      	sub	sp, #68	; 0x44
 800bf10:	af08      	add	r7, sp, #32
 800bf12:	4603      	mov	r3, r0
 800bf14:	71fb      	strb	r3, [r7, #7]
    uint8_t joinEui[SE_EUI_SIZE];
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddr = 0;
 800bf16:	2300      	movs	r3, #0
 800bf18:	60fb      	str	r3, [r7, #12]

    SecureElementGetDevEui( devEui );
 800bf1a:	f107 0310 	add.w	r3, r7, #16
 800bf1e:	4618      	mov	r0, r3
 800bf20:	f000 fbda 	bl	800c6d8 <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 800bf24:	7c3b      	ldrb	r3, [r7, #16]
 800bf26:	7c7a      	ldrb	r2, [r7, #17]
 800bf28:	7cb9      	ldrb	r1, [r7, #18]
 800bf2a:	7cf8      	ldrb	r0, [r7, #19]
 800bf2c:	7d3c      	ldrb	r4, [r7, #20]
 800bf2e:	7d7d      	ldrb	r5, [r7, #21]
 800bf30:	7dbe      	ldrb	r6, [r7, #22]
 800bf32:	f897 c017 	ldrb.w	ip, [r7, #23]
 800bf36:	f8cd c01c 	str.w	ip, [sp, #28]
 800bf3a:	9606      	str	r6, [sp, #24]
 800bf3c:	9505      	str	r5, [sp, #20]
 800bf3e:	9404      	str	r4, [sp, #16]
 800bf40:	9003      	str	r0, [sp, #12]
 800bf42:	9102      	str	r1, [sp, #8]
 800bf44:	9201      	str	r2, [sp, #4]
 800bf46:	9300      	str	r3, [sp, #0]
 800bf48:	4b24      	ldr	r3, [pc, #144]	; (800bfdc <PrintIds+0xd0>)
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	2100      	movs	r1, #0
 800bf4e:	2002      	movs	r0, #2
 800bf50:	f011 fb3c 	bl	801d5cc <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetJoinEui( joinEui );
 800bf54:	f107 0318 	add.w	r3, r7, #24
 800bf58:	4618      	mov	r0, r3
 800bf5a:	f000 fbed 	bl	800c738 <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 800bf5e:	7e3b      	ldrb	r3, [r7, #24]
 800bf60:	7e7a      	ldrb	r2, [r7, #25]
 800bf62:	7eb9      	ldrb	r1, [r7, #26]
 800bf64:	7ef8      	ldrb	r0, [r7, #27]
 800bf66:	7f3c      	ldrb	r4, [r7, #28]
 800bf68:	7f7d      	ldrb	r5, [r7, #29]
 800bf6a:	7fbe      	ldrb	r6, [r7, #30]
 800bf6c:	f897 c01f 	ldrb.w	ip, [r7, #31]
 800bf70:	f8cd c01c 	str.w	ip, [sp, #28]
 800bf74:	9606      	str	r6, [sp, #24]
 800bf76:	9505      	str	r5, [sp, #20]
 800bf78:	9404      	str	r4, [sp, #16]
 800bf7a:	9003      	str	r0, [sp, #12]
 800bf7c:	9102      	str	r1, [sp, #8]
 800bf7e:	9201      	str	r2, [sp, #4]
 800bf80:	9300      	str	r3, [sp, #0]
 800bf82:	4b17      	ldr	r3, [pc, #92]	; (800bfe0 <PrintIds+0xd4>)
 800bf84:	2200      	movs	r2, #0
 800bf86:	2100      	movs	r1, #0
 800bf88:	2002      	movs	r0, #2
 800bf8a:	f011 fb1f 	bl	801d5cc <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetDevAddr( mode, &devAddr );
 800bf8e:	f107 020c 	add.w	r2, r7, #12
 800bf92:	79fb      	ldrb	r3, [r7, #7]
 800bf94:	4611      	mov	r1, r2
 800bf96:	4618      	mov	r0, r3
 800bf98:	f000 fc00 	bl	800c79c <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800bf9c:	f107 030c 	add.w	r3, r7, #12
 800bfa0:	3303      	adds	r3, #3
 800bfa2:	781b      	ldrb	r3, [r3, #0]
 800bfa4:	461a      	mov	r2, r3
 800bfa6:	f107 030c 	add.w	r3, r7, #12
 800bfaa:	3302      	adds	r3, #2
 800bfac:	781b      	ldrb	r3, [r3, #0]
 800bfae:	4619      	mov	r1, r3
 800bfb0:	f107 030c 	add.w	r3, r7, #12
 800bfb4:	3301      	adds	r3, #1
 800bfb6:	781b      	ldrb	r3, [r3, #0]
 800bfb8:	4618      	mov	r0, r3
 800bfba:	f107 030c 	add.w	r3, r7, #12
 800bfbe:	781b      	ldrb	r3, [r3, #0]
 800bfc0:	9303      	str	r3, [sp, #12]
 800bfc2:	9002      	str	r0, [sp, #8]
 800bfc4:	9101      	str	r1, [sp, #4]
 800bfc6:	9200      	str	r2, [sp, #0]
 800bfc8:	4b06      	ldr	r3, [pc, #24]	; (800bfe4 <PrintIds+0xd8>)
 800bfca:	2200      	movs	r2, #0
 800bfcc:	2100      	movs	r1, #0
 800bfce:	2002      	movs	r0, #2
 800bfd0:	f011 fafc 	bl	801d5cc <UTIL_ADV_TRACE_COND_FSend>
            ( unsigned )( ( unsigned char * )( &devAddr ) )[3],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[2],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[1],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[0] );
}
 800bfd4:	bf00      	nop
 800bfd6:	3724      	adds	r7, #36	; 0x24
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfdc:	0801e1cc 	.word	0x0801e1cc
 800bfe0:	0801e20c 	.word	0x0801e20c
 800bfe4:	0801e24c 	.word	0x0801e24c

0800bfe8 <GetKeyByID>:

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800bfe8:	b480      	push	{r7}
 800bfea:	b085      	sub	sp, #20
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	4603      	mov	r3, r0
 800bff0:	6039      	str	r1, [r7, #0]
 800bff2:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800bff4:	2300      	movs	r3, #0
 800bff6:	73fb      	strb	r3, [r7, #15]
 800bff8:	e01a      	b.n	800c030 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800bffa:	4b12      	ldr	r3, [pc, #72]	; (800c044 <GetKeyByID+0x5c>)
 800bffc:	6819      	ldr	r1, [r3, #0]
 800bffe:	7bfa      	ldrb	r2, [r7, #15]
 800c000:	4613      	mov	r3, r2
 800c002:	011b      	lsls	r3, r3, #4
 800c004:	4413      	add	r3, r2
 800c006:	440b      	add	r3, r1
 800c008:	3318      	adds	r3, #24
 800c00a:	781b      	ldrb	r3, [r3, #0]
 800c00c:	79fa      	ldrb	r2, [r7, #7]
 800c00e:	429a      	cmp	r2, r3
 800c010:	d10b      	bne.n	800c02a <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800c012:	4b0c      	ldr	r3, [pc, #48]	; (800c044 <GetKeyByID+0x5c>)
 800c014:	6819      	ldr	r1, [r3, #0]
 800c016:	7bfa      	ldrb	r2, [r7, #15]
 800c018:	4613      	mov	r3, r2
 800c01a:	011b      	lsls	r3, r3, #4
 800c01c:	4413      	add	r3, r2
 800c01e:	3318      	adds	r3, #24
 800c020:	18ca      	adds	r2, r1, r3
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800c026:	2300      	movs	r3, #0
 800c028:	e006      	b.n	800c038 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c02a:	7bfb      	ldrb	r3, [r7, #15]
 800c02c:	3301      	adds	r3, #1
 800c02e:	73fb      	strb	r3, [r7, #15]
 800c030:	7bfb      	ldrb	r3, [r7, #15]
 800c032:	2b0a      	cmp	r3, #10
 800c034:	d9e1      	bls.n	800bffa <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c036:	2303      	movs	r3, #3
}
 800c038:	4618      	mov	r0, r3
 800c03a:	3714      	adds	r7, #20
 800c03c:	46bd      	mov	sp, r7
 800c03e:	bc80      	pop	{r7}
 800c040:	4770      	bx	lr
 800c042:	bf00      	nop
 800c044:	20000568 	.word	0x20000568

0800c048 <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 800c048:	b590      	push	{r4, r7, lr}
 800c04a:	b0d1      	sub	sp, #324	; 0x144
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 800c052:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 800c056:	6020      	str	r0, [r4, #0]
 800c058:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800c05c:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800c060:	6001      	str	r1, [r0, #0]
 800c062:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800c066:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 800c06a:	600a      	str	r2, [r1, #0]
 800c06c:	461a      	mov	r2, r3
 800c06e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c072:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800c076:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800c078:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c07c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d003      	beq.n	800c08e <ComputeCmac+0x46>
 800c086:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d101      	bne.n	800c092 <ComputeCmac+0x4a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c08e:	2302      	movs	r3, #2
 800c090:	e05d      	b.n	800c14e <ComputeCmac+0x106>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800c092:	f107 0314 	add.w	r3, r7, #20
 800c096:	4618      	mov	r0, r3
 800c098:	f7fe ff02 	bl	800aea0 <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800c09c:	f107 0210 	add.w	r2, r7, #16
 800c0a0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c0a4:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800c0a8:	781b      	ldrb	r3, [r3, #0]
 800c0aa:	4611      	mov	r1, r2
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	f7ff ff9b 	bl	800bfe8 <GetKeyByID>
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800c0b8:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d144      	bne.n	800c14a <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800c0c0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c0c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	1c5a      	adds	r2, r3, #1
 800c0cc:	f107 0314 	add.w	r3, r7, #20
 800c0d0:	4611      	mov	r1, r2
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	f7fe fefd 	bl	800aed2 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800c0d8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c0dc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d009      	beq.n	800c0fa <ComputeCmac+0xb2>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 800c0e6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c0ea:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800c0ee:	f107 0014 	add.w	r0, r7, #20
 800c0f2:	2210      	movs	r2, #16
 800c0f4:	6819      	ldr	r1, [r3, #0]
 800c0f6:	f7fe fefb 	bl	800aef0 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800c0fa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c0fe:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 800c102:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c106:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800c10a:	f107 0014 	add.w	r0, r7, #20
 800c10e:	6812      	ldr	r2, [r2, #0]
 800c110:	6819      	ldr	r1, [r3, #0]
 800c112:	f7fe feed 	bl	800aef0 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800c116:	f107 0214 	add.w	r2, r7, #20
 800c11a:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800c11e:	4611      	mov	r1, r2
 800c120:	4618      	mov	r0, r3
 800c122:	f7fe ffa7 	bl	800b074 <AES_CMAC_Final>

        /* Bring into the required format */
        *cmac = GET_UINT32_LE( Cmac, 0 );
 800c126:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 800c12a:	461a      	mov	r2, r3
 800c12c:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800c130:	021b      	lsls	r3, r3, #8
 800c132:	431a      	orrs	r2, r3
 800c134:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800c138:	041b      	lsls	r3, r3, #16
 800c13a:	431a      	orrs	r2, r3
 800c13c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800c140:	061b      	lsls	r3, r3, #24
 800c142:	431a      	orrs	r2, r3
 800c144:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800c148:	601a      	str	r2, [r3, #0]
    if( rv != CKR_OK )
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800c14a:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800c14e:	4618      	mov	r0, r3
 800c150:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800c154:	46bd      	mov	sp, r7
 800c156:	bd90      	pop	{r4, r7, pc}

0800c158 <SecureElementInit>:
/* Exported functions ---------------------------------------------------------*/
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b082      	sub	sp, #8
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d101      	bne.n	800c16a <SecureElementInit+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c166:	2302      	movs	r3, #2
 800c168:	e00a      	b.n	800c180 <SecureElementInit+0x28>
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 800c16a:	4a07      	ldr	r2, [pc, #28]	; (800c188 <SecureElementInit+0x30>)
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	6013      	str	r3, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 800c170:	4b05      	ldr	r3, [pc, #20]	; (800c188 <SecureElementInit+0x30>)
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	22d8      	movs	r2, #216	; 0xd8
 800c176:	4905      	ldr	r1, [pc, #20]	; (800c18c <SecureElementInit+0x34>)
 800c178:	4618      	mov	r0, r3
 800c17a:	f00c fe82 	bl	8018e82 <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 800c17e:	2300      	movs	r3, #0
}
 800c180:	4618      	mov	r0, r3
 800c182:	3708      	adds	r7, #8
 800c184:	46bd      	mov	sp, r7
 800c186:	bd80      	pop	{r7, pc}
 800c188:	20000568 	.word	0x20000568
 800c18c:	0801eba4 	.word	0x0801eba4

0800c190 <SecureElementInitMcuID>:

SecureElementStatus_t SecureElementInitMcuID( SecureElementGetUniqueId_t seGetUniqueId,
                                              SecureElementGetDevAddr_t seGetDevAddr )
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b086      	sub	sp, #24
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
 800c198:	6039      	str	r1, [r7, #0]
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddrABP = 0;
 800c19a:	2300      	movs	r3, #0
 800c19c:	60bb      	str	r3, [r7, #8]

    SecureElementGetDevEui( devEui );
 800c19e:	f107 030c 	add.w	r3, r7, #12
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	f000 fa98 	bl	800c6d8 <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 800c1a8:	f107 0308 	add.w	r3, r7, #8
 800c1ac:	4619      	mov	r1, r3
 800c1ae:	2001      	movs	r0, #1
 800c1b0:	f000 faf4 	bl	800c79c <SecureElementGetDevAddr>

    if( seGetUniqueId != NULL )
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d024      	beq.n	800c204 <SecureElementInitMcuID+0x74>
    {
        bool id_init = false;
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	75fb      	strb	r3, [r7, #23]
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800c1be:	2300      	movs	r3, #0
 800c1c0:	75bb      	strb	r3, [r7, #22]
 800c1c2:	e00c      	b.n	800c1de <SecureElementInitMcuID+0x4e>
        {
            if( devEui[index] != 0 )
 800c1c4:	7dbb      	ldrb	r3, [r7, #22]
 800c1c6:	3318      	adds	r3, #24
 800c1c8:	443b      	add	r3, r7
 800c1ca:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d002      	beq.n	800c1d8 <SecureElementInitMcuID+0x48>
            {
                id_init = true;
 800c1d2:	2301      	movs	r3, #1
 800c1d4:	75fb      	strb	r3, [r7, #23]
                break;
 800c1d6:	e005      	b.n	800c1e4 <SecureElementInitMcuID+0x54>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800c1d8:	7dbb      	ldrb	r3, [r7, #22]
 800c1da:	3301      	adds	r3, #1
 800c1dc:	75bb      	strb	r3, [r7, #22]
 800c1de:	7dbb      	ldrb	r3, [r7, #22]
 800c1e0:	2b07      	cmp	r3, #7
 800c1e2:	d9ef      	bls.n	800c1c4 <SecureElementInitMcuID+0x34>
            }
        }
        if( id_init == false )
 800c1e4:	7dfb      	ldrb	r3, [r7, #23]
 800c1e6:	f083 0301 	eor.w	r3, r3, #1
 800c1ea:	b2db      	uxtb	r3, r3
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d009      	beq.n	800c204 <SecureElementInitMcuID+0x74>
        {
            /* Get a DevEUI from MCU unique ID */
            seGetUniqueId( devEui );
 800c1f0:	f107 020c 	add.w	r2, r7, #12
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	4610      	mov	r0, r2
 800c1f8:	4798      	blx	r3
            SecureElementSetDevEui( devEui );
 800c1fa:	f107 030c 	add.w	r3, r7, #12
 800c1fe:	4618      	mov	r0, r3
 800c200:	f000 fa52 	bl	800c6a8 <SecureElementSetDevEui>
        }
    }

    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d00c      	beq.n	800c224 <SecureElementInitMcuID+0x94>
 800c20a:	68bb      	ldr	r3, [r7, #8]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d109      	bne.n	800c224 <SecureElementInitMcuID+0x94>
    {
        /* callback to dynamic DevAddr generation */
        seGetDevAddr( &devAddrABP );
 800c210:	f107 0208 	add.w	r2, r7, #8
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	4610      	mov	r0, r2
 800c218:	4798      	blx	r3
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 800c21a:	68bb      	ldr	r3, [r7, #8]
 800c21c:	4619      	mov	r1, r3
 800c21e:	2001      	movs	r0, #1
 800c220:	f000 faa2 	bl	800c768 <SecureElementSetDevAddr>
    }

    return SECURE_ELEMENT_SUCCESS;
 800c224:	2300      	movs	r3, #0
}
 800c226:	4618      	mov	r0, r3
 800c228:	3718      	adds	r7, #24
 800c22a:	46bd      	mov	sp, r7
 800c22c:	bd80      	pop	{r7, pc}
	...

0800c230 <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800c230:	b480      	push	{r7}
 800c232:	b085      	sub	sp, #20
 800c234:	af00      	add	r7, sp, #0
 800c236:	4603      	mov	r3, r0
 800c238:	6039      	str	r1, [r7, #0]
 800c23a:	71fb      	strb	r3, [r7, #7]
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c23c:	2300      	movs	r3, #0
 800c23e:	73fb      	strb	r3, [r7, #15]
 800c240:	e01a      	b.n	800c278 <SecureElementGetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800c242:	4b12      	ldr	r3, [pc, #72]	; (800c28c <SecureElementGetKeyByID+0x5c>)
 800c244:	6819      	ldr	r1, [r3, #0]
 800c246:	7bfa      	ldrb	r2, [r7, #15]
 800c248:	4613      	mov	r3, r2
 800c24a:	011b      	lsls	r3, r3, #4
 800c24c:	4413      	add	r3, r2
 800c24e:	440b      	add	r3, r1
 800c250:	3318      	adds	r3, #24
 800c252:	781b      	ldrb	r3, [r3, #0]
 800c254:	79fa      	ldrb	r2, [r7, #7]
 800c256:	429a      	cmp	r2, r3
 800c258:	d10b      	bne.n	800c272 <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800c25a:	4b0c      	ldr	r3, [pc, #48]	; (800c28c <SecureElementGetKeyByID+0x5c>)
 800c25c:	6819      	ldr	r1, [r3, #0]
 800c25e:	7bfa      	ldrb	r2, [r7, #15]
 800c260:	4613      	mov	r3, r2
 800c262:	011b      	lsls	r3, r3, #4
 800c264:	4413      	add	r3, r2
 800c266:	3318      	adds	r3, #24
 800c268:	18ca      	adds	r2, r1, r3
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800c26e:	2300      	movs	r3, #0
 800c270:	e006      	b.n	800c280 <SecureElementGetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c272:	7bfb      	ldrb	r3, [r7, #15]
 800c274:	3301      	adds	r3, #1
 800c276:	73fb      	strb	r3, [r7, #15]
 800c278:	7bfb      	ldrb	r3, [r7, #15]
 800c27a:	2b0a      	cmp	r3, #10
 800c27c:	d9e1      	bls.n	800c242 <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c27e:	2303      	movs	r3, #3
}
 800c280:	4618      	mov	r0, r3
 800c282:	3714      	adds	r7, #20
 800c284:	46bd      	mov	sp, r7
 800c286:	bc80      	pop	{r7}
 800c288:	4770      	bx	lr
 800c28a:	bf00      	nop
 800c28c:	20000568 	.word	0x20000568

0800c290 <SecureElementPrintKeys>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAWAN_KMS */

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800c290:	b580      	push	{r7, lr}
 800c292:	af00      	add	r7, sp, #0
    PrintKey( APP_KEY );
 800c294:	2000      	movs	r0, #0
 800c296:	f7ff fdab 	bl	800bdf0 <PrintKey>
    PrintKey( NWK_KEY );
 800c29a:	2001      	movs	r0, #1
 800c29c:	f7ff fda8 	bl	800bdf0 <PrintKey>
    PrintKey( APP_S_KEY );
 800c2a0:	2009      	movs	r0, #9
 800c2a2:	f7ff fda5 	bl	800bdf0 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800c2a6:	2008      	movs	r0, #8
 800c2a8:	f7ff fda2 	bl	800bdf0 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintIds( ACTIVATION_TYPE_NONE );
 800c2ac:	2000      	movs	r0, #0
 800c2ae:	f7ff fe2d 	bl	800bf0c <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800c2b2:	2300      	movs	r3, #0
}
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	bd80      	pop	{r7, pc}

0800c2b8 <SecureElementPrintSessionKeys>:

SecureElementStatus_t SecureElementPrintSessionKeys( ActivationType_t mode )
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b082      	sub	sp, #8
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	4603      	mov	r3, r0
 800c2c0:	71fb      	strb	r3, [r7, #7]
    PrintKey( MC_ROOT_KEY );
 800c2c2:	200b      	movs	r0, #11
 800c2c4:	f7ff fd94 	bl	800bdf0 <PrintKey>
    PrintKey( MC_KE_KEY );
 800c2c8:	200c      	movs	r0, #12
 800c2ca:	f7ff fd91 	bl	800bdf0 <PrintKey>
    PrintKey( APP_S_KEY );
 800c2ce:	2009      	movs	r0, #9
 800c2d0:	f7ff fd8e 	bl	800bdf0 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800c2d4:	2008      	movs	r0, #8
 800c2d6:	f7ff fd8b 	bl	800bdf0 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintKey( DATABLOCK_INT_KEY );
 800c2da:	200a      	movs	r0, #10
 800c2dc:	f7ff fd88 	bl	800bdf0 <PrintKey>
    PrintIds( mode );
 800c2e0:	79fb      	ldrb	r3, [r7, #7]
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f7ff fe12 	bl	800bf0c <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800c2e8:	2300      	movs	r3, #0
}
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	3708      	adds	r7, #8
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}
	...

0800c2f4 <SecureElementSetKey>:
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t *key )
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b088      	sub	sp, #32
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	6039      	str	r1, [r7, #0]
 800c2fe:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d101      	bne.n	800c30a <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c306:	2302      	movs	r3, #2
 800c308:	e04c      	b.n	800c3a4 <SecureElementSetKey+0xb0>
    }

#if (LORAWAN_KMS == 0)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c30a:	2300      	movs	r3, #0
 800c30c:	77fb      	strb	r3, [r7, #31]
 800c30e:	e045      	b.n	800c39c <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800c310:	4b26      	ldr	r3, [pc, #152]	; (800c3ac <SecureElementSetKey+0xb8>)
 800c312:	6819      	ldr	r1, [r3, #0]
 800c314:	7ffa      	ldrb	r2, [r7, #31]
 800c316:	4613      	mov	r3, r2
 800c318:	011b      	lsls	r3, r3, #4
 800c31a:	4413      	add	r3, r2
 800c31c:	440b      	add	r3, r1
 800c31e:	3318      	adds	r3, #24
 800c320:	781b      	ldrb	r3, [r3, #0]
 800c322:	79fa      	ldrb	r2, [r7, #7]
 800c324:	429a      	cmp	r2, r3
 800c326:	d136      	bne.n	800c396 <SecureElementSetKey+0xa2>
        {
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if( keyID == MC_KEY_0 )
 800c328:	79fb      	ldrb	r3, [r7, #7]
 800c32a:	2b0d      	cmp	r3, #13
 800c32c:	d123      	bne.n	800c376 <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            {
                /* Decrypt the key if its a Mckey */
                SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800c32e:	2306      	movs	r3, #6
 800c330:	77bb      	strb	r3, [r7, #30]
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 800c332:	2300      	movs	r3, #0
 800c334:	60fb      	str	r3, [r7, #12]
 800c336:	f107 0310 	add.w	r3, r7, #16
 800c33a:	2200      	movs	r2, #0
 800c33c:	601a      	str	r2, [r3, #0]
 800c33e:	605a      	str	r2, [r3, #4]
 800c340:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 800c342:	f107 030c 	add.w	r3, r7, #12
 800c346:	220c      	movs	r2, #12
 800c348:	2110      	movs	r1, #16
 800c34a:	6838      	ldr	r0, [r7, #0]
 800c34c:	f000 f876 	bl	800c43c <SecureElementAesEncrypt>
 800c350:	4603      	mov	r3, r0
 800c352:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800c354:	4b15      	ldr	r3, [pc, #84]	; (800c3ac <SecureElementSetKey+0xb8>)
 800c356:	6819      	ldr	r1, [r3, #0]
 800c358:	7ffa      	ldrb	r2, [r7, #31]
 800c35a:	4613      	mov	r3, r2
 800c35c:	011b      	lsls	r3, r3, #4
 800c35e:	4413      	add	r3, r2
 800c360:	3318      	adds	r3, #24
 800c362:	440b      	add	r3, r1
 800c364:	3301      	adds	r3, #1
 800c366:	f107 010c 	add.w	r1, r7, #12
 800c36a:	2210      	movs	r2, #16
 800c36c:	4618      	mov	r0, r3
 800c36e:	f00c fd88 	bl	8018e82 <memcpy1>
                return retval;
 800c372:	7fbb      	ldrb	r3, [r7, #30]
 800c374:	e016      	b.n	800c3a4 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800c376:	4b0d      	ldr	r3, [pc, #52]	; (800c3ac <SecureElementSetKey+0xb8>)
 800c378:	6819      	ldr	r1, [r3, #0]
 800c37a:	7ffa      	ldrb	r2, [r7, #31]
 800c37c:	4613      	mov	r3, r2
 800c37e:	011b      	lsls	r3, r3, #4
 800c380:	4413      	add	r3, r2
 800c382:	3318      	adds	r3, #24
 800c384:	440b      	add	r3, r1
 800c386:	3301      	adds	r3, #1
 800c388:	2210      	movs	r2, #16
 800c38a:	6839      	ldr	r1, [r7, #0]
 800c38c:	4618      	mov	r0, r3
 800c38e:	f00c fd78 	bl	8018e82 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800c392:	2300      	movs	r3, #0
 800c394:	e006      	b.n	800c3a4 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c396:	7ffb      	ldrb	r3, [r7, #31]
 800c398:	3301      	adds	r3, #1
 800c39a:	77fb      	strb	r3, [r7, #31]
 800c39c:	7ffb      	ldrb	r3, [r7, #31]
 800c39e:	2b0a      	cmp	r3, #10
 800c3a0:	d9b6      	bls.n	800c310 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c3a2:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	3720      	adds	r7, #32
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	bd80      	pop	{r7, pc}
 800c3ac:	20000568 	.word	0x20000568

0800c3b0 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b086      	sub	sp, #24
 800c3b4:	af02      	add	r7, sp, #8
 800c3b6:	60f8      	str	r0, [r7, #12]
 800c3b8:	60b9      	str	r1, [r7, #8]
 800c3ba:	607a      	str	r2, [r7, #4]
 800c3bc:	70fb      	strb	r3, [r7, #3]
    if( keyID >= MC_KE_KEY )
 800c3be:	78fb      	ldrb	r3, [r7, #3]
 800c3c0:	2b0b      	cmp	r3, #11
 800c3c2:	d901      	bls.n	800c3c8 <SecureElementComputeAesCmac+0x18>
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c3c4:	2303      	movs	r3, #3
 800c3c6:	e009      	b.n	800c3dc <SecureElementComputeAesCmac+0x2c>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800c3c8:	78fa      	ldrb	r2, [r7, #3]
 800c3ca:	69bb      	ldr	r3, [r7, #24]
 800c3cc:	9300      	str	r3, [sp, #0]
 800c3ce:	4613      	mov	r3, r2
 800c3d0:	687a      	ldr	r2, [r7, #4]
 800c3d2:	68b9      	ldr	r1, [r7, #8]
 800c3d4:	68f8      	ldr	r0, [r7, #12]
 800c3d6:	f7ff fe37 	bl	800c048 <ComputeCmac>
 800c3da:	4603      	mov	r3, r0
}
 800c3dc:	4618      	mov	r0, r3
 800c3de:	3710      	adds	r7, #16
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	bd80      	pop	{r7, pc}

0800c3e4 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b088      	sub	sp, #32
 800c3e8:	af02      	add	r7, sp, #8
 800c3ea:	60f8      	str	r0, [r7, #12]
 800c3ec:	60b9      	str	r1, [r7, #8]
 800c3ee:	607a      	str	r2, [r7, #4]
 800c3f0:	70fb      	strb	r3, [r7, #3]
    if( buffer == NULL )
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d101      	bne.n	800c3fc <SecureElementVerifyAesCmac+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c3f8:	2302      	movs	r3, #2
 800c3fa:	e01b      	b.n	800c434 <SecureElementVerifyAesCmac+0x50>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800c3fc:	2306      	movs	r3, #6
 800c3fe:	75fb      	strb	r3, [r7, #23]
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 800c400:	2300      	movs	r3, #0
 800c402:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800c404:	78fa      	ldrb	r2, [r7, #3]
 800c406:	f107 0310 	add.w	r3, r7, #16
 800c40a:	9300      	str	r3, [sp, #0]
 800c40c:	4613      	mov	r3, r2
 800c40e:	68ba      	ldr	r2, [r7, #8]
 800c410:	68f9      	ldr	r1, [r7, #12]
 800c412:	2000      	movs	r0, #0
 800c414:	f7ff fe18 	bl	800c048 <ComputeCmac>
 800c418:	4603      	mov	r3, r0
 800c41a:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c41c:	7dfb      	ldrb	r3, [r7, #23]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d001      	beq.n	800c426 <SecureElementVerifyAesCmac+0x42>
    {
        return retval;
 800c422:	7dfb      	ldrb	r3, [r7, #23]
 800c424:	e006      	b.n	800c434 <SecureElementVerifyAesCmac+0x50>
    }

    if( expectedCmac != compCmac )
 800c426:	693b      	ldr	r3, [r7, #16]
 800c428:	687a      	ldr	r2, [r7, #4]
 800c42a:	429a      	cmp	r2, r3
 800c42c:	d001      	beq.n	800c432 <SecureElementVerifyAesCmac+0x4e>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800c42e:	2301      	movs	r3, #1
 800c430:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800c432:	7dfb      	ldrb	r3, [r7, #23]
}
 800c434:	4618      	mov	r0, r3
 800c436:	3718      	adds	r7, #24
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}

0800c43c <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b0c2      	sub	sp, #264	; 0x108
 800c440:	af00      	add	r7, sp, #0
 800c442:	60f8      	str	r0, [r7, #12]
 800c444:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c448:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 800c44c:	6001      	str	r1, [r0, #0]
 800c44e:	4611      	mov	r1, r2
 800c450:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800c454:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800c458:	6013      	str	r3, [r2, #0]
 800c45a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c45e:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 800c462:	460a      	mov	r2, r1
 800c464:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d006      	beq.n	800c47a <SecureElementAesEncrypt+0x3e>
 800c46c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c470:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d101      	bne.n	800c47e <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c47a:	2302      	movs	r3, #2
 800c47c:	e059      	b.n	800c532 <SecureElementAesEncrypt+0xf6>
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 800c47e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c482:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	f003 030f 	and.w	r3, r3, #15
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d001      	beq.n	800c494 <SecureElementAesEncrypt+0x58>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800c490:	2305      	movs	r3, #5
 800c492:	e04e      	b.n	800c532 <SecureElementAesEncrypt+0xf6>
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800c494:	f107 0314 	add.w	r3, r7, #20
 800c498:	22f0      	movs	r2, #240	; 0xf0
 800c49a:	2100      	movs	r1, #0
 800c49c:	4618      	mov	r0, r3
 800c49e:	f00c fd2b 	bl	8018ef8 <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800c4a2:	f107 0210 	add.w	r2, r7, #16
 800c4a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4aa:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 800c4ae:	781b      	ldrb	r3, [r3, #0]
 800c4b0:	4611      	mov	r1, r2
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	f7ff fd98 	bl	800bfe8 <GetKeyByID>
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800c4be:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d133      	bne.n	800c52e <SecureElementAesEncrypt+0xf2>
    {
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 800c4c6:	693b      	ldr	r3, [r7, #16]
 800c4c8:	3301      	adds	r3, #1
 800c4ca:	f107 0214 	add.w	r2, r7, #20
 800c4ce:	2110      	movs	r1, #16
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	f7ff fb65 	bl	800bba0 <lorawan_aes_set_key>

        uint8_t block = 0;
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800c4dc:	e020      	b.n	800c520 <SecureElementAesEncrypt+0xe4>
        {
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 800c4de:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800c4e2:	68fa      	ldr	r2, [r7, #12]
 800c4e4:	18d0      	adds	r0, r2, r3
 800c4e6:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800c4ea:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800c4ee:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800c4f2:	6812      	ldr	r2, [r2, #0]
 800c4f4:	4413      	add	r3, r2
 800c4f6:	f107 0214 	add.w	r2, r7, #20
 800c4fa:	4619      	mov	r1, r3
 800c4fc:	f7ff fc2e 	bl	800bd5c <lorawan_aes_encrypt>
            block = block + 16;
 800c500:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800c504:	3310      	adds	r3, #16
 800c506:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800c50a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c50e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800c512:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800c516:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800c51a:	6812      	ldr	r2, [r2, #0]
 800c51c:	3a10      	subs	r2, #16
 800c51e:	601a      	str	r2, [r3, #0]
        while( size != 0 )
 800c520:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c524:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d1d7      	bne.n	800c4de <SecureElementAesEncrypt+0xa2>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800c52e:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800c532:	4618      	mov	r0, r3
 800c534:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800c538:	46bd      	mov	sp, r7
 800c53a:	bd80      	pop	{r7, pc}

0800c53c <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b088      	sub	sp, #32
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
 800c544:	460b      	mov	r3, r1
 800c546:	70fb      	strb	r3, [r7, #3]
 800c548:	4613      	mov	r3, r2
 800c54a:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d101      	bne.n	800c556 <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c552:	2302      	movs	r3, #2
 800c554:	e02e      	b.n	800c5b4 <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800c556:	2306      	movs	r3, #6
 800c558:	77fb      	strb	r3, [r7, #31]

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 800c55a:	78bb      	ldrb	r3, [r7, #2]
 800c55c:	2b0c      	cmp	r3, #12
 800c55e:	d104      	bne.n	800c56a <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800c560:	78fb      	ldrb	r3, [r7, #3]
 800c562:	2b0b      	cmp	r3, #11
 800c564:	d001      	beq.n	800c56a <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c566:	2303      	movs	r3, #3
 800c568:	e024      	b.n	800c5b4 <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 800c56a:	2300      	movs	r3, #0
 800c56c:	60fb      	str	r3, [r7, #12]
 800c56e:	f107 0310 	add.w	r3, r7, #16
 800c572:	2200      	movs	r2, #0
 800c574:	601a      	str	r2, [r3, #0]
 800c576:	605a      	str	r2, [r3, #4]
 800c578:	609a      	str	r2, [r3, #8]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 800c57a:	f107 030c 	add.w	r3, r7, #12
 800c57e:	78fa      	ldrb	r2, [r7, #3]
 800c580:	2110      	movs	r1, #16
 800c582:	6878      	ldr	r0, [r7, #4]
 800c584:	f7ff ff5a 	bl	800c43c <SecureElementAesEncrypt>
 800c588:	4603      	mov	r3, r0
 800c58a:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c58c:	7ffb      	ldrb	r3, [r7, #31]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d001      	beq.n	800c596 <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800c592:	7ffb      	ldrb	r3, [r7, #31]
 800c594:	e00e      	b.n	800c5b4 <SecureElementDeriveAndStoreKey+0x78>
    }

    /* Store key */
    retval = SecureElementSetKey( targetKeyID, key );
 800c596:	f107 020c 	add.w	r2, r7, #12
 800c59a:	78bb      	ldrb	r3, [r7, #2]
 800c59c:	4611      	mov	r1, r2
 800c59e:	4618      	mov	r0, r3
 800c5a0:	f7ff fea8 	bl	800c2f4 <SecureElementSetKey>
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c5a8:	7ffb      	ldrb	r3, [r7, #31]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d001      	beq.n	800c5b2 <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800c5ae:	7ffb      	ldrb	r3, [r7, #31]
 800c5b0:	e000      	b.n	800c5b4 <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800c5b2:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	3720      	adds	r7, #32
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	bd80      	pop	{r7, pc}

0800c5bc <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b086      	sub	sp, #24
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	60b9      	str	r1, [r7, #8]
 800c5c4:	607b      	str	r3, [r7, #4]
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	73fb      	strb	r3, [r7, #15]
 800c5ca:	4613      	mov	r3, r2
 800c5cc:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d005      	beq.n	800c5e0 <SecureElementProcessJoinAccept+0x24>
 800c5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d002      	beq.n	800c5e0 <SecureElementProcessJoinAccept+0x24>
 800c5da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d101      	bne.n	800c5e4 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c5e0:	2302      	movs	r3, #2
 800c5e2:	e05c      	b.n	800c69e <SecureElementProcessJoinAccept+0xe2>
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800c5e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c5e8:	2b21      	cmp	r3, #33	; 0x21
 800c5ea:	d901      	bls.n	800c5f0 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800c5ec:	2305      	movs	r3, #5
 800c5ee:	e056      	b.n	800c69e <SecureElementProcessJoinAccept+0xe2>
    }

    /* Determine decryption key */
    KeyIdentifier_t encKeyID = NWK_KEY;
 800c5f0:	2301      	movs	r3, #1
 800c5f2:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800c5f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c5f8:	b29b      	uxth	r3, r3
 800c5fa:	461a      	mov	r2, r3
 800c5fc:	6879      	ldr	r1, [r7, #4]
 800c5fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c600:	f00c fc3f 	bl	8018e82 <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	1c58      	adds	r0, r3, #1
 800c608:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c60c:	3b01      	subs	r3, #1
 800c60e:	4619      	mov	r1, r3
 800c610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c612:	3301      	adds	r3, #1
 800c614:	7dfa      	ldrb	r2, [r7, #23]
 800c616:	f7ff ff11 	bl	800c43c <SecureElementAesEncrypt>
 800c61a:	4603      	mov	r3, r0
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d001      	beq.n	800c624 <SecureElementProcessJoinAccept+0x68>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800c620:	2307      	movs	r3, #7
 800c622:	e03c      	b.n	800c69e <SecureElementProcessJoinAccept+0xe2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800c624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c626:	330b      	adds	r3, #11
 800c628:	781b      	ldrb	r3, [r3, #0]
 800c62a:	09db      	lsrs	r3, r3, #7
 800c62c:	b2da      	uxtb	r2, r3
 800c62e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c630:	701a      	strb	r2, [r3, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 800c632:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c636:	3b04      	subs	r3, #4
 800c638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c63a:	4413      	add	r3, r2
 800c63c:	781b      	ldrb	r3, [r3, #0]
 800c63e:	4619      	mov	r1, r3
 800c640:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c644:	3b03      	subs	r3, #3
 800c646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c648:	4413      	add	r3, r2
 800c64a:	781b      	ldrb	r3, [r3, #0]
 800c64c:	021b      	lsls	r3, r3, #8
 800c64e:	ea41 0203 	orr.w	r2, r1, r3
 800c652:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c656:	3b02      	subs	r3, #2
 800c658:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c65a:	440b      	add	r3, r1
 800c65c:	781b      	ldrb	r3, [r3, #0]
 800c65e:	041b      	lsls	r3, r3, #16
 800c660:	431a      	orrs	r2, r3
 800c662:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c666:	3b01      	subs	r3, #1
 800c668:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c66a:	440b      	add	r3, r1
 800c66c:	781b      	ldrb	r3, [r3, #0]
 800c66e:	061b      	lsls	r3, r3, #24
 800c670:	4313      	orrs	r3, r2
 800c672:	613b      	str	r3, [r7, #16]
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 800c674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c676:	781b      	ldrb	r3, [r3, #0]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d10d      	bne.n	800c698 <SecureElementProcessJoinAccept+0xdc>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800c67c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c680:	3b04      	subs	r3, #4
 800c682:	4619      	mov	r1, r3
 800c684:	2301      	movs	r3, #1
 800c686:	693a      	ldr	r2, [r7, #16]
 800c688:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c68a:	f7ff feab 	bl	800c3e4 <SecureElementVerifyAesCmac>
 800c68e:	4603      	mov	r3, r0
 800c690:	2b00      	cmp	r3, #0
 800c692:	d003      	beq.n	800c69c <SecureElementProcessJoinAccept+0xe0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800c694:	2301      	movs	r3, #1
 800c696:	e002      	b.n	800c69e <SecureElementProcessJoinAccept+0xe2>
        }
    }
#endif /* LORAMAC_VERSION */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800c698:	2304      	movs	r3, #4
 800c69a:	e000      	b.n	800c69e <SecureElementProcessJoinAccept+0xe2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800c69c:	2300      	movs	r3, #0
}
 800c69e:	4618      	mov	r0, r3
 800c6a0:	3718      	adds	r7, #24
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	bd80      	pop	{r7, pc}
	...

0800c6a8 <SecureElementSetDevEui>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b082      	sub	sp, #8
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d101      	bne.n	800c6ba <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c6b6:	2302      	movs	r3, #2
 800c6b8:	e007      	b.n	800c6ca <SecureElementSetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 800c6ba:	4b06      	ldr	r3, [pc, #24]	; (800c6d4 <SecureElementSetDevEui+0x2c>)
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	2208      	movs	r2, #8
 800c6c0:	6879      	ldr	r1, [r7, #4]
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	f00c fbdd 	bl	8018e82 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c6c8:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	3708      	adds	r7, #8
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}
 800c6d2:	bf00      	nop
 800c6d4:	20000568 	.word	0x20000568

0800c6d8 <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b082      	sub	sp, #8
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d101      	bne.n	800c6ea <SecureElementGetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c6e6:	2302      	movs	r3, #2
 800c6e8:	e007      	b.n	800c6fa <SecureElementGetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 800c6ea:	4b06      	ldr	r3, [pc, #24]	; (800c704 <SecureElementGetDevEui+0x2c>)
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	2208      	movs	r2, #8
 800c6f0:	4619      	mov	r1, r3
 800c6f2:	6878      	ldr	r0, [r7, #4]
 800c6f4:	f00c fbc5 	bl	8018e82 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c6f8:	2300      	movs	r3, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	3708      	adds	r7, #8
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd80      	pop	{r7, pc}
 800c702:	bf00      	nop
 800c704:	20000568 	.word	0x20000568

0800c708 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b082      	sub	sp, #8
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d101      	bne.n	800c71a <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c716:	2302      	movs	r3, #2
 800c718:	e008      	b.n	800c72c <SecureElementSetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 800c71a:	4b06      	ldr	r3, [pc, #24]	; (800c734 <SecureElementSetJoinEui+0x2c>)
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	3308      	adds	r3, #8
 800c720:	2208      	movs	r2, #8
 800c722:	6879      	ldr	r1, [r7, #4]
 800c724:	4618      	mov	r0, r3
 800c726:	f00c fbac 	bl	8018e82 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c72a:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800c72c:	4618      	mov	r0, r3
 800c72e:	3708      	adds	r7, #8
 800c730:	46bd      	mov	sp, r7
 800c732:	bd80      	pop	{r7, pc}
 800c734:	20000568 	.word	0x20000568

0800c738 <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b082      	sub	sp, #8
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d101      	bne.n	800c74a <SecureElementGetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c746:	2302      	movs	r3, #2
 800c748:	e008      	b.n	800c75c <SecureElementGetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 800c74a:	4b06      	ldr	r3, [pc, #24]	; (800c764 <SecureElementGetJoinEui+0x2c>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	3308      	adds	r3, #8
 800c750:	2208      	movs	r2, #8
 800c752:	4619      	mov	r1, r3
 800c754:	6878      	ldr	r0, [r7, #4]
 800c756:	f00c fb94 	bl	8018e82 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c75a:	2300      	movs	r3, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800c75c:	4618      	mov	r0, r3
 800c75e:	3708      	adds	r7, #8
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}
 800c764:	20000568 	.word	0x20000568

0800c768 <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
 800c768:	b480      	push	{r7}
 800c76a:	b083      	sub	sp, #12
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	4603      	mov	r3, r0
 800c770:	6039      	str	r1, [r7, #0]
 800c772:	71fb      	strb	r3, [r7, #7]
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 800c774:	79fb      	ldrb	r3, [r7, #7]
 800c776:	2b02      	cmp	r3, #2
 800c778:	d104      	bne.n	800c784 <SecureElementSetDevAddr+0x1c>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 800c77a:	4b07      	ldr	r3, [pc, #28]	; (800c798 <SecureElementSetDevAddr+0x30>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	683a      	ldr	r2, [r7, #0]
 800c780:	611a      	str	r2, [r3, #16]
 800c782:	e003      	b.n	800c78c <SecureElementSetDevAddr+0x24>
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 800c784:	4b04      	ldr	r3, [pc, #16]	; (800c798 <SecureElementSetDevAddr+0x30>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	683a      	ldr	r2, [r7, #0]
 800c78a:	615a      	str	r2, [r3, #20]
    }

    return SECURE_ELEMENT_SUCCESS;
 800c78c:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800c78e:	4618      	mov	r0, r3
 800c790:	370c      	adds	r7, #12
 800c792:	46bd      	mov	sp, r7
 800c794:	bc80      	pop	{r7}
 800c796:	4770      	bx	lr
 800c798:	20000568 	.word	0x20000568

0800c79c <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
 800c79c:	b480      	push	{r7}
 800c79e:	b083      	sub	sp, #12
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	6039      	str	r1, [r7, #0]
 800c7a6:	71fb      	strb	r3, [r7, #7]
    if( devAddr == NULL )
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d101      	bne.n	800c7b2 <SecureElementGetDevAddr+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c7ae:	2302      	movs	r3, #2
 800c7b0:	e00e      	b.n	800c7d0 <SecureElementGetDevAddr+0x34>
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 800c7b2:	79fb      	ldrb	r3, [r7, #7]
 800c7b4:	2b02      	cmp	r3, #2
 800c7b6:	d105      	bne.n	800c7c4 <SecureElementGetDevAddr+0x28>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 800c7b8:	4b08      	ldr	r3, [pc, #32]	; (800c7dc <SecureElementGetDevAddr+0x40>)
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	691a      	ldr	r2, [r3, #16]
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	601a      	str	r2, [r3, #0]
 800c7c2:	e004      	b.n	800c7ce <SecureElementGetDevAddr+0x32>
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 800c7c4:	4b05      	ldr	r3, [pc, #20]	; (800c7dc <SecureElementGetDevAddr+0x40>)
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	695a      	ldr	r2, [r3, #20]
 800c7ca:	683b      	ldr	r3, [r7, #0]
 800c7cc:	601a      	str	r2, [r3, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 800c7ce:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	370c      	adds	r7, #12
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bc80      	pop	{r7}
 800c7d8:	4770      	bx	lr
 800c7da:	bf00      	nop
 800c7dc:	20000568 	.word	0x20000568

0800c7e0 <LmHandlerInit>:
static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity );
#endif /* LORAMAC_VERSION */

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b082      	sub	sp, #8
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
 800c7e8:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800c7ea:	4a29      	ldr	r2, [pc, #164]	; (800c890 <LmHandlerInit+0xb0>)
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800c7f0:	4b28      	ldr	r3, [pc, #160]	; (800c894 <LmHandlerInit+0xb4>)
 800c7f2:	4a29      	ldr	r2, [pc, #164]	; (800c898 <LmHandlerInit+0xb8>)
 800c7f4:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800c7f6:	4b27      	ldr	r3, [pc, #156]	; (800c894 <LmHandlerInit+0xb4>)
 800c7f8:	4a28      	ldr	r2, [pc, #160]	; (800c89c <LmHandlerInit+0xbc>)
 800c7fa:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800c7fc:	4b25      	ldr	r3, [pc, #148]	; (800c894 <LmHandlerInit+0xb4>)
 800c7fe:	4a28      	ldr	r2, [pc, #160]	; (800c8a0 <LmHandlerInit+0xc0>)
 800c800:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800c802:	4b24      	ldr	r3, [pc, #144]	; (800c894 <LmHandlerInit+0xb4>)
 800c804:	4a27      	ldr	r2, [pc, #156]	; (800c8a4 <LmHandlerInit+0xc4>)
 800c806:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800c808:	4b21      	ldr	r3, [pc, #132]	; (800c890 <LmHandlerInit+0xb0>)
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	4a26      	ldr	r2, [pc, #152]	; (800c8a8 <LmHandlerInit+0xc8>)
 800c810:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800c812:	4b1f      	ldr	r3, [pc, #124]	; (800c890 <LmHandlerInit+0xb0>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	685b      	ldr	r3, [r3, #4]
 800c818:	4a23      	ldr	r2, [pc, #140]	; (800c8a8 <LmHandlerInit+0xc8>)
 800c81a:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800c81c:	4b1c      	ldr	r3, [pc, #112]	; (800c890 <LmHandlerInit+0xb0>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	689b      	ldr	r3, [r3, #8]
 800c822:	4a21      	ldr	r2, [pc, #132]	; (800c8a8 <LmHandlerInit+0xc8>)
 800c824:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 800c826:	4b1a      	ldr	r3, [pc, #104]	; (800c890 <LmHandlerInit+0xb0>)
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	68db      	ldr	r3, [r3, #12]
 800c82c:	4a1e      	ldr	r2, [pc, #120]	; (800c8a8 <LmHandlerInit+0xc8>)
 800c82e:	60d3      	str	r3, [r2, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800c830:	4b1d      	ldr	r3, [pc, #116]	; (800c8a8 <LmHandlerInit+0xc8>)
 800c832:	4a1e      	ldr	r2, [pc, #120]	; (800c8ac <LmHandlerInit+0xcc>)
 800c834:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800c836:	4b16      	ldr	r3, [pc, #88]	; (800c890 <LmHandlerInit+0xb0>)
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	699b      	ldr	r3, [r3, #24]
 800c83c:	4a1a      	ldr	r2, [pc, #104]	; (800c8a8 <LmHandlerInit+0xc8>)
 800c83e:	6153      	str	r3, [r2, #20]

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	4a1b      	ldr	r2, [pc, #108]	; (800c8b0 <LmHandlerInit+0xd0>)
 800c844:	6013      	str	r3, [r2, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 800c846:	4b12      	ldr	r3, [pc, #72]	; (800c890 <LmHandlerInit+0xb0>)
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c84c:	4a18      	ldr	r2, [pc, #96]	; (800c8b0 <LmHandlerInit+0xd0>)
 800c84e:	6053      	str	r3, [r2, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
 800c850:	4b17      	ldr	r3, [pc, #92]	; (800c8b0 <LmHandlerInit+0xd0>)
 800c852:	4a18      	ldr	r2, [pc, #96]	; (800c8b4 <LmHandlerInit+0xd4>)
 800c854:	609a      	str	r2, [r3, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
 800c856:	4b16      	ldr	r3, [pc, #88]	; (800c8b0 <LmHandlerInit+0xd0>)
 800c858:	4a17      	ldr	r2, [pc, #92]	; (800c8b8 <LmHandlerInit+0xd8>)
 800c85a:	60da      	str	r2, [r3, #12]
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 800c85c:	4914      	ldr	r1, [pc, #80]	; (800c8b0 <LmHandlerInit+0xd0>)
 800c85e:	2000      	movs	r0, #0
 800c860:	f000 fdb4 	bl	800d3cc <LmHandlerPackageRegister>
 800c864:	4603      	mov	r3, r0
 800c866:	2b00      	cmp	r3, #0
 800c868:	d002      	beq.n	800c870 <LmHandlerInit+0x90>
    {
        return LORAMAC_HANDLER_ERROR;
 800c86a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c86e:	e00a      	b.n	800c886 <LmHandlerInit+0xa6>
    }

    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 800c870:	463b      	mov	r3, r7
 800c872:	4618      	mov	r0, r3
 800c874:	f001 fd2a 	bl	800e2cc <LmhpPackagesRegistrationInit>
 800c878:	4603      	mov	r3, r0
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d002      	beq.n	800c884 <LmHandlerInit+0xa4>
    {
        return LORAMAC_HANDLER_ERROR;
 800c87e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c882:	e000      	b.n	800c886 <LmHandlerInit+0xa6>
    }

    return LORAMAC_HANDLER_SUCCESS;
 800c884:	2300      	movs	r3, #0
}
 800c886:	4618      	mov	r0, r3
 800c888:	3708      	adds	r7, #8
 800c88a:	46bd      	mov	sp, r7
 800c88c:	bd80      	pop	{r7, pc}
 800c88e:	bf00      	nop
 800c890:	200005c0 	.word	0x200005c0
 800c894:	200005c4 	.word	0x200005c4
 800c898:	0800d0a5 	.word	0x0800d0a5
 800c89c:	0800d119 	.word	0x0800d119
 800c8a0:	0800d1e9 	.word	0x0800d1e9
 800c8a4:	0800d339 	.word	0x0800d339
 800c8a8:	200005d4 	.word	0x200005d4
 800c8ac:	0800d879 	.word	0x0800d879
 800c8b0:	20000584 	.word	0x20000584
 800c8b4:	0800d68d 	.word	0x0800d68d
 800c8b8:	0800d6c5 	.word	0x0800d6c5

0800c8bc <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b092      	sub	sp, #72	; 0x48
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 800c8c4:	2218      	movs	r2, #24
 800c8c6:	6879      	ldr	r1, [r7, #4]
 800c8c8:	4884      	ldr	r0, [pc, #528]	; (800cadc <LmHandlerConfigure+0x220>)
 800c8ca:	f00c fada 	bl	8018e82 <memcpy1>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    IsUplinkTxPending = false;
 800c8ce:	4b84      	ldr	r3, [pc, #528]	; (800cae0 <LmHandlerConfigure+0x224>)
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800c8d4:	f7fe faa2 	bl	800ae1c <LoraInfo_GetPtr>
 800c8d8:	6478      	str	r0, [r7, #68]	; 0x44

    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 800c8da:	4b80      	ldr	r3, [pc, #512]	; (800cadc <LmHandlerConfigure+0x220>)
 800c8dc:	781b      	ldrb	r3, [r3, #0]
 800c8de:	461a      	mov	r2, r3
 800c8e0:	2301      	movs	r3, #1
 800c8e2:	4093      	lsls	r3, r2
 800c8e4:	461a      	mov	r2, r3
 800c8e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c8e8:	685b      	ldr	r3, [r3, #4]
 800c8ea:	4013      	ands	r3, r2
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d106      	bne.n	800c8fe <LmHandlerConfigure+0x42>
    {
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 800c8f0:	4b7c      	ldr	r3, [pc, #496]	; (800cae4 <LmHandlerConfigure+0x228>)
 800c8f2:	2201      	movs	r2, #1
 800c8f4:	2100      	movs	r1, #0
 800c8f6:	2000      	movs	r0, #0
 800c8f8:	f010 fe68 	bl	801d5cc <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 800c8fc:	e7fe      	b.n	800c8fc <LmHandlerConfigure+0x40>
    }

    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 800c8fe:	4b77      	ldr	r3, [pc, #476]	; (800cadc <LmHandlerConfigure+0x220>)
 800c900:	781b      	ldrb	r3, [r3, #0]
 800c902:	461a      	mov	r2, r3
 800c904:	4978      	ldr	r1, [pc, #480]	; (800cae8 <LmHandlerConfigure+0x22c>)
 800c906:	4879      	ldr	r0, [pc, #484]	; (800caec <LmHandlerConfigure+0x230>)
 800c908:	f004 ffd4 	bl	80118b4 <LoRaMacInitialization>
 800c90c:	4603      	mov	r3, r0
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d002      	beq.n	800c918 <LmHandlerConfigure+0x5c>
    {
        return LORAMAC_HANDLER_ERROR;
 800c912:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c916:	e0dc      	b.n	800cad2 <LmHandlerConfigure+0x216>
    }

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    /* Try the restore context from the Backup RAM structure if data retention is available */
    mibReq.Type = MIB_NVM_CTXS;
 800c918:	2327      	movs	r3, #39	; 0x27
 800c91a:	763b      	strb	r3, [r7, #24]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800c91c:	f107 0318 	add.w	r3, r7, #24
 800c920:	4618      	mov	r0, r3
 800c922:	f005 fd53 	bl	80123cc <LoRaMacMibSetRequestConfirm>
 800c926:	4603      	mov	r3, r0
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d103      	bne.n	800c934 <LmHandlerConfigure+0x78>
    {
        CtxRestoreDone = true;
 800c92c:	4b70      	ldr	r3, [pc, #448]	; (800caf0 <LmHandlerConfigure+0x234>)
 800c92e:	2201      	movs	r2, #1
 800c930:	701a      	strb	r2, [r3, #0]
 800c932:	e02a      	b.n	800c98a <LmHandlerConfigure+0xce>
    }
    else
    {
        /* Restore context data backup from user callback (stored in FLASH) */
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800c934:	2328      	movs	r3, #40	; 0x28
 800c936:	763b      	strb	r3, [r7, #24]
        if( LmHandlerCallbacks->OnRestoreContextRequest != NULL )
 800c938:	4b6e      	ldr	r3, [pc, #440]	; (800caf4 <LmHandlerConfigure+0x238>)
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	691b      	ldr	r3, [r3, #16]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d00c      	beq.n	800c95c <LmHandlerConfigure+0xa0>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 800c942:	f107 0318 	add.w	r3, r7, #24
 800c946:	4618      	mov	r0, r3
 800c948:	f005 fb68 	bl	801201c <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest( mibReq.Param.BackupContexts, sizeof( LoRaMacNvmData_t ) );
 800c94c:	4b69      	ldr	r3, [pc, #420]	; (800caf4 <LmHandlerConfigure+0x238>)
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	691b      	ldr	r3, [r3, #16]
 800c952:	69fa      	ldr	r2, [r7, #28]
 800c954:	f240 51cc 	movw	r1, #1484	; 0x5cc
 800c958:	4610      	mov	r0, r2
 800c95a:	4798      	blx	r3
        }
        /* Restore context data from backup to main nvm structure */
        mibReq.Type = MIB_NVM_CTXS;
 800c95c:	2327      	movs	r3, #39	; 0x27
 800c95e:	763b      	strb	r3, [r7, #24]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800c960:	f107 0318 	add.w	r3, r7, #24
 800c964:	4618      	mov	r0, r3
 800c966:	f005 fd31 	bl	80123cc <LoRaMacMibSetRequestConfirm>
 800c96a:	4603      	mov	r3, r0
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d10c      	bne.n	800c98a <LmHandlerConfigure+0xce>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c970:	2301      	movs	r3, #1
 800c972:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800c974:	f107 0318 	add.w	r3, r7, #24
 800c978:	4618      	mov	r0, r3
 800c97a:	f005 fb4f 	bl	801201c <LoRaMacMibGetRequestConfirm>
            if( mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE )
 800c97e:	7f3b      	ldrb	r3, [r7, #28]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d002      	beq.n	800c98a <LmHandlerConfigure+0xce>
            {
                CtxRestoreDone = true;
 800c984:	4b5a      	ldr	r3, [pc, #360]	; (800caf0 <LmHandlerConfigure+0x234>)
 800c986:	2201      	movs	r2, #1
 800c988:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if( CtxRestoreDone == true )
 800c98a:	4b59      	ldr	r3, [pc, #356]	; (800caf0 <LmHandlerConfigure+0x234>)
 800c98c:	781b      	ldrb	r3, [r3, #0]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d022      	beq.n	800c9d8 <LmHandlerConfigure+0x11c>
    {
        if( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800c992:	4b58      	ldr	r3, [pc, #352]	; (800caf4 <LmHandlerConfigure+0x238>)
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	69db      	ldr	r3, [r3, #28]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d004      	beq.n	800c9a6 <LmHandlerConfigure+0xea>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800c99c:	4b55      	ldr	r3, [pc, #340]	; (800caf4 <LmHandlerConfigure+0x238>)
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	69db      	ldr	r3, [r3, #28]
 800c9a2:	2000      	movs	r0, #0
 800c9a4:	4798      	blx	r3
        }

        mibReq.Type = MIB_NVM_CTXS;
 800c9a6:	2327      	movs	r3, #39	; 0x27
 800c9a8:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800c9aa:	f107 0318 	add.w	r3, r7, #24
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	f005 fb34 	bl	801201c <LoRaMacMibGetRequestConfirm>
        LoRaMacNvmData_t *current_nvm = mibReq.Param.Contexts;
 800c9b4:	69fb      	ldr	r3, [r7, #28]
 800c9b6:	643b      	str	r3, [r7, #64]	; 0x40

        LmHandlerParams.ActiveRegion = current_nvm->MacGroup2.Region;
 800c9b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9ba:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800c9be:	4b47      	ldr	r3, [pc, #284]	; (800cadc <LmHandlerConfigure+0x220>)
 800c9c0:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = current_nvm->MacGroup2.DeviceClass;
 800c9c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9c4:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 800c9c8:	4b44      	ldr	r3, [pc, #272]	; (800cadc <LmHandlerConfigure+0x220>)
 800c9ca:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
 800c9cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9ce:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 800c9d2:	4b42      	ldr	r3, [pc, #264]	; (800cadc <LmHandlerConfigure+0x220>)
 800c9d4:	709a      	strb	r2, [r3, #2]
 800c9d6:	e008      	b.n	800c9ea <LmHandlerConfigure+0x12e>
    }
    else
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
    {
        mibReq.Type = MIB_NET_ID;
 800c9d8:	2305      	movs	r3, #5
 800c9da:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800c9dc:	2300      	movs	r3, #0
 800c9de:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800c9e0:	f107 0318 	add.w	r3, r7, #24
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	f005 fcf1 	bl	80123cc <LoRaMacMibSetRequestConfirm>
    }

    /* Restore ID struct from NVM or Init from callbacks */
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 800c9ea:	4b3f      	ldr	r3, [pc, #252]	; (800cae8 <LmHandlerConfigure+0x22c>)
 800c9ec:	689b      	ldr	r3, [r3, #8]
 800c9ee:	4a3e      	ldr	r2, [pc, #248]	; (800cae8 <LmHandlerConfigure+0x22c>)
 800c9f0:	68d2      	ldr	r2, [r2, #12]
 800c9f2:	4611      	mov	r1, r2
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	f7ff fbcb 	bl	800c190 <SecureElementInitMcuID>
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d002      	beq.n	800ca06 <LmHandlerConfigure+0x14a>
    {
        return LORAMAC_HANDLER_ERROR;
 800ca00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ca04:	e065      	b.n	800cad2 <LmHandlerConfigure+0x216>
    }

    /* Read secure-element DEV_EUI, JOIN_EUI and DEV_ADDR values. */
    mibReq.Type = MIB_DEV_ADDR;
 800ca06:	2306      	movs	r3, #6
 800ca08:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800ca0a:	f107 0318 	add.w	r3, r7, #24
 800ca0e:	4618      	mov	r0, r3
 800ca10:	f005 fb04 	bl	801201c <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800ca14:	69fb      	ldr	r3, [r7, #28]
 800ca16:	4a38      	ldr	r2, [pc, #224]	; (800caf8 <LmHandlerConfigure+0x23c>)
 800ca18:	6153      	str	r3, [r2, #20]

    /* Override DevAddress value after init from callbacks */
    LoRaMacMibSetRequestConfirm( &mibReq );
 800ca1a:	f107 0318 	add.w	r3, r7, #24
 800ca1e:	4618      	mov	r0, r3
 800ca20:	f005 fcd4 	bl	80123cc <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_DEV_EUI;
 800ca24:	2302      	movs	r3, #2
 800ca26:	763b      	strb	r3, [r7, #24]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 800ca28:	4b33      	ldr	r3, [pc, #204]	; (800caf8 <LmHandlerConfigure+0x23c>)
 800ca2a:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800ca2c:	f107 0318 	add.w	r3, r7, #24
 800ca30:	4618      	mov	r0, r3
 800ca32:	f005 faf3 	bl	801201c <LoRaMacMibGetRequestConfirm>

    mibReq.Type = MIB_JOIN_EUI;
 800ca36:	2303      	movs	r3, #3
 800ca38:	763b      	strb	r3, [r7, #24]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 800ca3a:	4b30      	ldr	r3, [pc, #192]	; (800cafc <LmHandlerConfigure+0x240>)
 800ca3c:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800ca3e:	f107 0318 	add.w	r3, r7, #24
 800ca42:	4618      	mov	r0, r3
 800ca44:	f005 faea 	bl	801201c <LoRaMacMibGetRequestConfirm>

    SecureElementPrintKeys();
 800ca48:	f7ff fc22 	bl	800c290 <SecureElementPrintKeys>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG( TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n" );
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800ca4c:	230f      	movs	r3, #15
 800ca4e:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800ca50:	2301      	movs	r3, #1
 800ca52:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800ca54:	f107 0318 	add.w	r3, r7, #24
 800ca58:	4618      	mov	r0, r3
 800ca5a:	f005 fcb7 	bl	80123cc <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800ca5e:	2310      	movs	r3, #16
 800ca60:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800ca62:	2300      	movs	r3, #0
 800ca64:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800ca66:	f107 0318 	add.w	r3, r7, #24
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f005 fcae 	bl	80123cc <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800ca70:	2304      	movs	r3, #4
 800ca72:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800ca74:	4b19      	ldr	r3, [pc, #100]	; (800cadc <LmHandlerConfigure+0x220>)
 800ca76:	789b      	ldrb	r3, [r3, #2]
 800ca78:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800ca7a:	f107 0318 	add.w	r3, r7, #24
 800ca7e:	4618      	mov	r0, r3
 800ca80:	f005 fca4 	bl	80123cc <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800ca84:	233a      	movs	r3, #58	; 0x3a
 800ca86:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800ca88:	4b14      	ldr	r3, [pc, #80]	; (800cadc <LmHandlerConfigure+0x220>)
 800ca8a:	695b      	ldr	r3, [r3, #20]
 800ca8c:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800ca8e:	f107 0318 	add.w	r3, r7, #24
 800ca92:	4618      	mov	r0, r3
 800ca94:	f005 fc9a 	bl	80123cc <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800ca98:	230f      	movs	r3, #15
 800ca9a:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800ca9c:	4b0f      	ldr	r3, [pc, #60]	; (800cadc <LmHandlerConfigure+0x220>)
 800ca9e:	781b      	ldrb	r3, [r3, #0]
 800caa0:	f107 0210 	add.w	r2, r7, #16
 800caa4:	4611      	mov	r1, r2
 800caa6:	4618      	mov	r0, r3
 800caa8:	f008 fbea 	bl	8015280 <RegionGetPhyParam>
 800caac:	4603      	mov	r3, r0
 800caae:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	bf14      	ite	ne
 800cab6:	2301      	movne	r3, #1
 800cab8:	2300      	moveq	r3, #0
 800caba:	b2da      	uxtb	r2, r3
 800cabc:	4b07      	ldr	r3, [pc, #28]	; (800cadc <LmHandlerConfigure+0x220>)
 800cabe:	71da      	strb	r2, [r3, #7]

    /* Set system maximum tolerated rx error in milliseconds */
    LmHandlerSetSystemMaxRxError( 20 );
 800cac0:	2014      	movs	r0, #20
 800cac2:	f000 fad7 	bl	800d074 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800cac6:	4b05      	ldr	r3, [pc, #20]	; (800cadc <LmHandlerConfigure+0x220>)
 800cac8:	79db      	ldrb	r3, [r3, #7]
 800caca:	4618      	mov	r0, r3
 800cacc:	f006 faf8 	bl	80130c0 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800cad0:	2300      	movs	r3, #0
}
 800cad2:	4618      	mov	r0, r3
 800cad4:	3748      	adds	r7, #72	; 0x48
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bd80      	pop	{r7, pc}
 800cada:	bf00      	nop
 800cadc:	200005a8 	.word	0x200005a8
 800cae0:	200005f0 	.word	0x200005f0
 800cae4:	0801e278 	.word	0x0801e278
 800cae8:	200005d4 	.word	0x200005d4
 800caec:	200005c4 	.word	0x200005c4
 800caf0:	200006e6 	.word	0x200006e6
 800caf4:	200005c0 	.word	0x200005c0
 800caf8:	2000056c 	.word	0x2000056c
 800cafc:	20000574 	.word	0x20000574

0800cb00 <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b082      	sub	sp, #8
 800cb04:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    /* Processes the LoRaMac events */
    LoRaMacProcess( );
 800cb06:	f002 fe49 	bl	800f79c <LoRaMacProcess>

    /* Call all packages process functions */
    LmHandlerPackagesProcess( );
 800cb0a:	f000 fd8b 	bl	800d624 <LmHandlerPackagesProcess>

    /* Check if a package transmission is pending. */
    /* If it is the case exit function earlier */
    if( LmHandlerPackageIsTxPending( ) == true )
 800cb0e:	f000 fd5f 	bl	800d5d0 <LmHandlerPackageIsTxPending>
 800cb12:	4603      	mov	r3, r0
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d117      	bne.n	800cb48 <LmHandlerProcess+0x48>
        return;
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    /* If a MAC layer scheduled uplink is still pending try to send it. */
    if( IsUplinkTxPending == true )
 800cb18:	4b0d      	ldr	r3, [pc, #52]	; (800cb50 <LmHandlerProcess+0x50>)
 800cb1a:	781b      	ldrb	r3, [r3, #0]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d014      	beq.n	800cb4a <LmHandlerProcess+0x4a>
    {
        /* Send an empty message */
        LmHandlerAppData_t appData =
 800cb20:	2300      	movs	r3, #0
 800cb22:	703b      	strb	r3, [r7, #0]
 800cb24:	2300      	movs	r3, #0
 800cb26:	707b      	strb	r3, [r7, #1]
 800cb28:	2300      	movs	r3, #0
 800cb2a:	607b      	str	r3, [r7, #4]
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0,
        };

        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 800cb2c:	4b09      	ldr	r3, [pc, #36]	; (800cb54 <LmHandlerProcess+0x54>)
 800cb2e:	78d9      	ldrb	r1, [r3, #3]
 800cb30:	463b      	mov	r3, r7
 800cb32:	2200      	movs	r2, #0
 800cb34:	4618      	mov	r0, r3
 800cb36:	f000 f8d7 	bl	800cce8 <LmHandlerSend>
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d104      	bne.n	800cb4a <LmHandlerProcess+0x4a>
        {
            IsUplinkTxPending = false;
 800cb40:	4b03      	ldr	r3, [pc, #12]	; (800cb50 <LmHandlerProcess+0x50>)
 800cb42:	2200      	movs	r2, #0
 800cb44:	701a      	strb	r2, [r3, #0]
 800cb46:	e000      	b.n	800cb4a <LmHandlerProcess+0x4a>
        return;
 800cb48:	bf00      	nop
        }
    }
#endif /* LORAMAC_VERSION */
}
 800cb4a:	3708      	adds	r7, #8
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}
 800cb50:	200005f0 	.word	0x200005f0
 800cb54:	200005a8 	.word	0x200005a8

0800cb58 <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800cb58:	b480      	push	{r7}
 800cb5a:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800cb5c:	4b02      	ldr	r3, [pc, #8]	; (800cb68 <LmHandlerGetDutyCycleWaitTime+0x10>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
}
 800cb60:	4618      	mov	r0, r3
 800cb62:	46bd      	mov	sp, r7
 800cb64:	bc80      	pop	{r7}
 800cb66:	4770      	bx	lr
 800cb68:	200005ec 	.word	0x200005ec

0800cb6c <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b092      	sub	sp, #72	; 0x48
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	4603      	mov	r3, r0
 800cb74:	460a      	mov	r2, r1
 800cb76:	71fb      	strb	r3, [r7, #7]
 800cb78:	4613      	mov	r3, r2
 800cb7a:	71bb      	strb	r3, [r7, #6]
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800cb7c:	2301      	movs	r3, #1
 800cb7e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800cb82:	4b46      	ldr	r3, [pc, #280]	; (800cc9c <LmHandlerJoin+0x130>)
 800cb84:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800cb88:	b2db      	uxtb	r3, r3
 800cb8a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 800cb8e:	4b43      	ldr	r3, [pc, #268]	; (800cc9c <LmHandlerJoin+0x130>)
 800cb90:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800cb94:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

    if( mode == ACTIVATION_TYPE_OTAA )
 800cb98:	79fb      	ldrb	r3, [r7, #7]
 800cb9a:	2b02      	cmp	r3, #2
 800cb9c:	d10b      	bne.n	800cbb6 <LmHandlerJoin+0x4a>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800cb9e:	2302      	movs	r3, #2
 800cba0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800cba4:	4b3e      	ldr	r3, [pc, #248]	; (800cca0 <LmHandlerJoin+0x134>)
 800cba6:	2202      	movs	r2, #2
 800cba8:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 800cbaa:	4a3d      	ldr	r2, [pc, #244]	; (800cca0 <LmHandlerJoin+0x134>)
 800cbac:	79bb      	ldrb	r3, [r7, #6]
 800cbae:	7213      	strb	r3, [r2, #8]
        LoRaMacStart();
 800cbb0:	f005 f936 	bl	8011e20 <LoRaMacStart>
 800cbb4:	e05c      	b.n	800cc70 <LmHandlerJoin+0x104>
    }
    else
    {
        MibRequestConfirm_t mibReq;

        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800cbb6:	2301      	movs	r3, #1
 800cbb8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800cbbc:	4b38      	ldr	r3, [pc, #224]	; (800cca0 <LmHandlerJoin+0x134>)
 800cbbe:	2201      	movs	r2, #1
 800cbc0:	71da      	strb	r2, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800cbc2:	4b36      	ldr	r3, [pc, #216]	; (800cc9c <LmHandlerJoin+0x130>)
 800cbc4:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800cbc8:	4b35      	ldr	r3, [pc, #212]	; (800cca0 <LmHandlerJoin+0x134>)
 800cbca:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 800cbcc:	4b33      	ldr	r3, [pc, #204]	; (800cc9c <LmHandlerJoin+0x130>)
 800cbce:	f993 2005 	ldrsb.w	r2, [r3, #5]
 800cbd2:	4b33      	ldr	r3, [pc, #204]	; (800cca0 <LmHandlerJoin+0x134>)
 800cbd4:	715a      	strb	r2, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800cbd6:	4b32      	ldr	r3, [pc, #200]	; (800cca0 <LmHandlerJoin+0x134>)
 800cbd8:	2200      	movs	r2, #0
 800cbda:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800cbdc:	4a30      	ldr	r2, [pc, #192]	; (800cca0 <LmHandlerJoin+0x134>)
 800cbde:	79bb      	ldrb	r3, [r7, #6]
 800cbe0:	7213      	strb	r3, [r2, #8]

        if( CtxRestoreDone == false )
 800cbe2:	4b30      	ldr	r3, [pc, #192]	; (800cca4 <LmHandlerJoin+0x138>)
 800cbe4:	781b      	ldrb	r3, [r3, #0]
 800cbe6:	f083 0301 	eor.w	r3, r3, #1
 800cbea:	b2db      	uxtb	r3, r3
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d034      	beq.n	800cc5a <LmHandlerJoin+0xee>
        {
            /* Configure the default datarate */
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800cbf0:	231f      	movs	r3, #31
 800cbf2:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800cbf4:	4b29      	ldr	r3, [pc, #164]	; (800cc9c <LmHandlerJoin+0x130>)
 800cbf6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800cbfa:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800cbfc:	f107 030c 	add.w	r3, r7, #12
 800cc00:	4618      	mov	r0, r3
 800cc02:	f005 fbe3 	bl	80123cc <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_DATARATE;
 800cc06:	2320      	movs	r3, #32
 800cc08:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800cc0a:	4b24      	ldr	r3, [pc, #144]	; (800cc9c <LmHandlerJoin+0x130>)
 800cc0c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800cc10:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800cc12:	f107 030c 	add.w	r3, r7, #12
 800cc16:	4618      	mov	r0, r3
 800cc18:	f005 fbd8 	bl	80123cc <LoRaMacMibSetRequestConfirm>

            /* Configure the default Tx Power */
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 800cc1c:	2322      	movs	r3, #34	; 0x22
 800cc1e:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 800cc20:	4b1e      	ldr	r3, [pc, #120]	; (800cc9c <LmHandlerJoin+0x130>)
 800cc22:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800cc26:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800cc28:	f107 030c 	add.w	r3, r7, #12
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	f005 fbcd 	bl	80123cc <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_TX_POWER;
 800cc32:	2321      	movs	r3, #33	; 0x21
 800cc34:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 800cc36:	4b19      	ldr	r3, [pc, #100]	; (800cc9c <LmHandlerJoin+0x130>)
 800cc38:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800cc3c:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800cc3e:	f107 030c 	add.w	r3, r7, #12
 800cc42:	4618      	mov	r0, r3
 800cc44:	f005 fbc2 	bl	80123cc <LoRaMacMibSetRequestConfirm>

            /* Tell the MAC layer which network server version are we connecting too. */
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800cc48:	2329      	movs	r3, #41	; 0x29
 800cc4a:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800cc4c:	4b16      	ldr	r3, [pc, #88]	; (800cca8 <LmHandlerJoin+0x13c>)
 800cc4e:	613b      	str	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800cc50:	f107 030c 	add.w	r3, r7, #12
 800cc54:	4618      	mov	r0, r3
 800cc56:	f005 fbb9 	bl	80123cc <LoRaMacMibSetRequestConfirm>
        }

        LoRaMacStart();
 800cc5a:	f005 f8e1 	bl	8011e20 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800cc5e:	2301      	movs	r3, #1
 800cc60:	733b      	strb	r3, [r7, #12]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800cc62:	2301      	movs	r3, #1
 800cc64:	743b      	strb	r3, [r7, #16]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800cc66:	f107 030c 	add.w	r3, r7, #12
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	f005 fbae 	bl	80123cc <LoRaMacMibSetRequestConfirm>
        LmHandlerRequestClass( LmHandlerParams.DefaultClass );
#endif /* LORAMAC_VERSION */
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( ( CtxRestoreDone == false ) || ( forceRejoin == true ) )
 800cc70:	4b0c      	ldr	r3, [pc, #48]	; (800cca4 <LmHandlerJoin+0x138>)
 800cc72:	781b      	ldrb	r3, [r3, #0]
 800cc74:	f083 0301 	eor.w	r3, r3, #1
 800cc78:	b2db      	uxtb	r3, r3
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d102      	bne.n	800cc84 <LmHandlerJoin+0x118>
 800cc7e:	79bb      	ldrb	r3, [r7, #6]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d004      	beq.n	800cc8e <LmHandlerJoin+0x122>
    {
        /* Starts the join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
 800cc84:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800cc88:	4618      	mov	r0, r3
 800cc8a:	f005 ff49 	bl	8012b20 <LoRaMacMlmeRequest>
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800cc8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc90:	4a06      	ldr	r2, [pc, #24]	; (800ccac <LmHandlerJoin+0x140>)
 800cc92:	6013      	str	r3, [r2, #0]
#endif /* LORAMAC_VERSION */
}
 800cc94:	bf00      	nop
 800cc96:	3748      	adds	r7, #72	; 0x48
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	bd80      	pop	{r7, pc}
 800cc9c:	200005a8 	.word	0x200005a8
 800cca0:	20000094 	.word	0x20000094
 800cca4:	200006e6 	.word	0x200006e6
 800cca8:	01000400 	.word	0x01000400
 800ccac:	200005ec 	.word	0x200005ec

0800ccb0 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b08c      	sub	sp, #48	; 0x30
 800ccb4:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800ccb6:	2301      	movs	r3, #1
 800ccb8:	713b      	strb	r3, [r7, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800ccba:	1d3b      	adds	r3, r7, #4
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	f005 f9ad 	bl	801201c <LoRaMacMibGetRequestConfirm>
 800ccc2:	4603      	mov	r3, r0
 800ccc4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if( status == LORAMAC_STATUS_OK )
 800ccc8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d106      	bne.n	800ccde <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800ccd0:	7a3b      	ldrb	r3, [r7, #8]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d101      	bne.n	800ccda <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	e002      	b.n	800cce0 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800ccda:	2301      	movs	r3, #1
 800ccdc:	e000      	b.n	800cce0 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800ccde:	2300      	movs	r3, #0
    }
}
 800cce0:	4618      	mov	r0, r3
 800cce2:	3730      	adds	r7, #48	; 0x30
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bd80      	pop	{r7, pc}

0800cce8 <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      bool allowDelayedTx )
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b08a      	sub	sp, #40	; 0x28
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
 800ccf0:	460b      	mov	r3, r1
 800ccf2:	70fb      	strb	r3, [r7, #3]
 800ccf4:	4613      	mov	r3, r2
 800ccf6:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800ccf8:	23ff      	movs	r3, #255	; 0xff
 800ccfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if( LoRaMacIsBusy() == true )
 800ccfe:	f002 faa7 	bl	800f250 <LoRaMacIsBusy>
 800cd02:	4603      	mov	r3, r0
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d002      	beq.n	800cd0e <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800cd08:	f06f 0301 	mvn.w	r3, #1
 800cd0c:	e0ab      	b.n	800ce66 <LmHandlerSend+0x17e>
    }

    if( LoRaMacIsStopped() == true )
 800cd0e:	f002 fac7 	bl	800f2a0 <LoRaMacIsStopped>
 800cd12:	4603      	mov	r3, r0
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d002      	beq.n	800cd1e <LmHandlerSend+0x36>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800cd18:	f06f 0302 	mvn.w	r3, #2
 800cd1c:	e0a3      	b.n	800ce66 <LmHandlerSend+0x17e>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800cd1e:	f7ff ffc7 	bl	800ccb0 <LmHandlerJoinStatus>
 800cd22:	4603      	mov	r3, r0
 800cd24:	2b01      	cmp	r3, #1
 800cd26:	d00a      	beq.n	800cd3e <LmHandlerSend+0x56>
    {
        /* The network isn't joined, try again. */
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800cd28:	4b51      	ldr	r3, [pc, #324]	; (800ce70 <LmHandlerSend+0x188>)
 800cd2a:	79db      	ldrb	r3, [r3, #7]
 800cd2c:	4a50      	ldr	r2, [pc, #320]	; (800ce70 <LmHandlerSend+0x188>)
 800cd2e:	7a12      	ldrb	r2, [r2, #8]
 800cd30:	4611      	mov	r1, r2
 800cd32:	4618      	mov	r0, r3
 800cd34:	f7ff ff1a 	bl	800cb6c <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800cd38:	f06f 0302 	mvn.w	r3, #2
 800cd3c:	e093      	b.n	800ce66 <LmHandlerSend+0x17e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800cd3e:	4a4d      	ldr	r2, [pc, #308]	; (800ce74 <LmHandlerSend+0x18c>)
 800cd40:	78fb      	ldrb	r3, [r7, #3]
 800cd42:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800cd44:	78fb      	ldrb	r3, [r7, #3]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	bf14      	ite	ne
 800cd4a:	2301      	movne	r3, #1
 800cd4c:	2300      	moveq	r3, #0
 800cd4e:	b2db      	uxtb	r3, r3
 800cd50:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800cd52:	4b49      	ldr	r3, [pc, #292]	; (800ce78 <LmHandlerSend+0x190>)
 800cd54:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800cd58:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	785b      	ldrb	r3, [r3, #1]
 800cd5e:	f107 020c 	add.w	r2, r7, #12
 800cd62:	4611      	mov	r1, r2
 800cd64:	4618      	mov	r0, r3
 800cd66:	f005 f8c9 	bl	8011efc <LoRaMacQueryTxPossible>
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d009      	beq.n	800cd84 <LmHandlerSend+0x9c>
    {
        /* Send empty frame in order to flush MAC commands */
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800cd70:	2300      	movs	r3, #0
 800cd72:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800cd74:	2300      	movs	r3, #0
 800cd76:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800cd78:	2300      	movs	r3, #0
 800cd7a:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800cd7c:	23f9      	movs	r3, #249	; 0xf9
 800cd7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cd82:	e009      	b.n	800cd98 <LmHandlerSend+0xb0>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	781b      	ldrb	r3, [r3, #0]
 800cd88:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	785b      	ldrb	r3, [r3, #1]
 800cd8e:	b29b      	uxth	r3, r3
 800cd90:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	685b      	ldr	r3, [r3, #4]
 800cd96:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800cd98:	4b36      	ldr	r3, [pc, #216]	; (800ce74 <LmHandlerSend+0x18c>)
 800cd9a:	687a      	ldr	r2, [r7, #4]
 800cd9c:	3310      	adds	r3, #16
 800cd9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cda2:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800cda6:	4b34      	ldr	r3, [pc, #208]	; (800ce78 <LmHandlerSend+0x190>)
 800cda8:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800cdac:	4b31      	ldr	r3, [pc, #196]	; (800ce74 <LmHandlerSend+0x18c>)
 800cdae:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 800cdb0:	78ba      	ldrb	r2, [r7, #2]
 800cdb2:	f107 0310 	add.w	r3, r7, #16
 800cdb6:	4611      	mov	r1, r2
 800cdb8:	4618      	mov	r0, r3
 800cdba:	f006 f849 	bl	8012e50 <LoRaMacMcpsRequest>
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800cdc4:	6a3b      	ldr	r3, [r7, #32]
 800cdc6:	4a2d      	ldr	r2, [pc, #180]	; (800ce7c <LmHandlerSend+0x194>)
 800cdc8:	6013      	str	r3, [r2, #0]

    switch( status )
 800cdca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cdce:	2b11      	cmp	r3, #17
 800cdd0:	d842      	bhi.n	800ce58 <LmHandlerSend+0x170>
 800cdd2:	a201      	add	r2, pc, #4	; (adr r2, 800cdd8 <LmHandlerSend+0xf0>)
 800cdd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdd8:	0800ce21 	.word	0x0800ce21
 800cddc:	0800ce39 	.word	0x0800ce39
 800cde0:	0800ce59 	.word	0x0800ce59
 800cde4:	0800ce59 	.word	0x0800ce59
 800cde8:	0800ce59 	.word	0x0800ce59
 800cdec:	0800ce59 	.word	0x0800ce59
 800cdf0:	0800ce59 	.word	0x0800ce59
 800cdf4:	0800ce41 	.word	0x0800ce41
 800cdf8:	0800ce59 	.word	0x0800ce59
 800cdfc:	0800ce59 	.word	0x0800ce59
 800ce00:	0800ce59 	.word	0x0800ce59
 800ce04:	0800ce51 	.word	0x0800ce51
 800ce08:	0800ce59 	.word	0x0800ce59
 800ce0c:	0800ce59 	.word	0x0800ce59
 800ce10:	0800ce39 	.word	0x0800ce39
 800ce14:	0800ce39 	.word	0x0800ce39
 800ce18:	0800ce39 	.word	0x0800ce39
 800ce1c:	0800ce49 	.word	0x0800ce49
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            IsUplinkTxPending = false;
 800ce20:	4b17      	ldr	r3, [pc, #92]	; (800ce80 <LmHandlerSend+0x198>)
 800ce22:	2200      	movs	r2, #0
 800ce24:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 800ce26:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ce2a:	f113 0f07 	cmn.w	r3, #7
 800ce2e:	d017      	beq.n	800ce60 <LmHandlerSend+0x178>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800ce30:	2300      	movs	r3, #0
 800ce32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 800ce36:	e013      	b.n	800ce60 <LmHandlerSend+0x178>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800ce38:	23fe      	movs	r3, #254	; 0xfe
 800ce3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800ce3e:	e010      	b.n	800ce62 <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800ce40:	23fd      	movs	r3, #253	; 0xfd
 800ce42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800ce46:	e00c      	b.n	800ce62 <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800ce48:	23fb      	movs	r3, #251	; 0xfb
 800ce4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800ce4e:	e008      	b.n	800ce62 <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800ce50:	23fa      	movs	r3, #250	; 0xfa
 800ce52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800ce56:	e004      	b.n	800ce62 <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800ce58:	23ff      	movs	r3, #255	; 0xff
 800ce5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800ce5e:	e000      	b.n	800ce62 <LmHandlerSend+0x17a>
            break;
 800ce60:	bf00      	nop
    }

    return lmhStatus;
 800ce62:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800ce66:	4618      	mov	r0, r3
 800ce68:	3728      	adds	r7, #40	; 0x28
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	bd80      	pop	{r7, pc}
 800ce6e:	bf00      	nop
 800ce70:	20000094 	.word	0x20000094
 800ce74:	200000a0 	.word	0x200000a0
 800ce78:	200005a8 	.word	0x200005a8
 800ce7c:	200005ec 	.word	0x200005ec
 800ce80:	200005f0 	.word	0x200005f0

0800ce84 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b086      	sub	sp, #24
 800ce88:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800ce8a:	2309      	movs	r3, #9
 800ce8c:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800ce8e:	463b      	mov	r3, r7
 800ce90:	4618      	mov	r0, r3
 800ce92:	f005 fe45 	bl	8012b20 <LoRaMacMlmeRequest>
 800ce96:	4603      	mov	r3, r0
 800ce98:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800ce9a:	693b      	ldr	r3, [r7, #16]
 800ce9c:	4a06      	ldr	r2, [pc, #24]	; (800ceb8 <LmHandlerDeviceTimeReq+0x34>)
 800ce9e:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800cea0:	7dfb      	ldrb	r3, [r7, #23]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d101      	bne.n	800ceaa <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800cea6:	2300      	movs	r3, #0
 800cea8:	e001      	b.n	800ceae <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800ceaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
 800ceae:	4618      	mov	r0, r3
 800ceb0:	3718      	adds	r7, #24
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	bd80      	pop	{r7, pc}
 800ceb6:	bf00      	nop
 800ceb8:	200005ec 	.word	0x200005ec

0800cebc <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800cebc:	b480      	push	{r7}
 800cebe:	b083      	sub	sp, #12
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	4603      	mov	r3, r0
 800cec4:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800cec6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
 800ceca:	4618      	mov	r0, r3
 800cecc:	370c      	adds	r7, #12
 800cece:	46bd      	mov	sp, r7
 800ced0:	bc80      	pop	{r7}
 800ced2:	4770      	bx	lr

0800ced4 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b08e      	sub	sp, #56	; 0x38
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	4603      	mov	r3, r0
 800cedc:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800cede:	2300      	movs	r3, #0
 800cee0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( LoRaMacIsBusy() == true )
 800cee4:	f002 f9b4 	bl	800f250 <LoRaMacIsBusy>
 800cee8:	4603      	mov	r3, r0
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d002      	beq.n	800cef4 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800ceee:	f06f 0301 	mvn.w	r3, #1
 800cef2:	e071      	b.n	800cfd8 <LmHandlerRequestClass+0x104>
    }

    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 800cef4:	f7ff fedc 	bl	800ccb0 <LmHandlerJoinStatus>
 800cef8:	4603      	mov	r3, r0
 800cefa:	2b01      	cmp	r3, #1
 800cefc:	d002      	beq.n	800cf04 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800cefe:	f06f 0302 	mvn.w	r3, #2
 800cf02:	e069      	b.n	800cfd8 <LmHandlerRequestClass+0x104>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800cf04:	2300      	movs	r3, #0
 800cf06:	733b      	strb	r3, [r7, #12]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800cf08:	f107 030c 	add.w	r3, r7, #12
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	f005 f885 	bl	801201c <LoRaMacMibGetRequestConfirm>
 800cf12:	4603      	mov	r3, r0
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d002      	beq.n	800cf1e <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800cf18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cf1c:	e05c      	b.n	800cfd8 <LmHandlerRequestClass+0x104>
    }
    currentClass = mibReq.Param.Class;
 800cf1e:	7c3b      	ldrb	r3, [r7, #16]
 800cf20:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Attempt to switch only if class update */
    if( currentClass != newClass )
 800cf24:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800cf28:	79fb      	ldrb	r3, [r7, #7]
 800cf2a:	429a      	cmp	r2, r3
 800cf2c:	d052      	beq.n	800cfd4 <LmHandlerRequestClass+0x100>
    {
        switch( newClass )
 800cf2e:	79fb      	ldrb	r3, [r7, #7]
 800cf30:	2b02      	cmp	r3, #2
 800cf32:	d028      	beq.n	800cf86 <LmHandlerRequestClass+0xb2>
 800cf34:	2b02      	cmp	r3, #2
 800cf36:	dc48      	bgt.n	800cfca <LmHandlerRequestClass+0xf6>
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d002      	beq.n	800cf42 <LmHandlerRequestClass+0x6e>
 800cf3c:	2b01      	cmp	r3, #1
 800cf3e:	d01e      	beq.n	800cf7e <LmHandlerRequestClass+0xaa>
                        }
                    }
                }
                break;
            default:
                break;
 800cf40:	e043      	b.n	800cfca <LmHandlerRequestClass+0xf6>
                    if( currentClass != CLASS_A )
 800cf42:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d041      	beq.n	800cfce <LmHandlerRequestClass+0xfa>
                        mibReq.Param.Class = newClass;
 800cf4a:	79fb      	ldrb	r3, [r7, #7]
 800cf4c:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800cf4e:	f107 030c 	add.w	r3, r7, #12
 800cf52:	4618      	mov	r0, r3
 800cf54:	f005 fa3a 	bl	80123cc <LoRaMacMibSetRequestConfirm>
 800cf58:	4603      	mov	r3, r0
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d10b      	bne.n	800cf76 <LmHandlerRequestClass+0xa2>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800cf5e:	4b20      	ldr	r3, [pc, #128]	; (800cfe0 <LmHandlerRequestClass+0x10c>)
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d032      	beq.n	800cfce <LmHandlerRequestClass+0xfa>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800cf68:	4b1d      	ldr	r3, [pc, #116]	; (800cfe0 <LmHandlerRequestClass+0x10c>)
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf6e:	79fa      	ldrb	r2, [r7, #7]
 800cf70:	4610      	mov	r0, r2
 800cf72:	4798      	blx	r3
                break;
 800cf74:	e02b      	b.n	800cfce <LmHandlerRequestClass+0xfa>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800cf76:	23ff      	movs	r3, #255	; 0xff
 800cf78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800cf7c:	e027      	b.n	800cfce <LmHandlerRequestClass+0xfa>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800cf7e:	23ff      	movs	r3, #255	; 0xff
 800cf80:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800cf84:	e026      	b.n	800cfd4 <LmHandlerRequestClass+0x100>
                    if( currentClass != CLASS_A )
 800cf86:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d003      	beq.n	800cf96 <LmHandlerRequestClass+0xc2>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800cf8e:	23ff      	movs	r3, #255	; 0xff
 800cf90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800cf94:	e01d      	b.n	800cfd2 <LmHandlerRequestClass+0xfe>
                        mibReq.Param.Class = newClass;
 800cf96:	79fb      	ldrb	r3, [r7, #7]
 800cf98:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800cf9a:	f107 030c 	add.w	r3, r7, #12
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	f005 fa14 	bl	80123cc <LoRaMacMibSetRequestConfirm>
 800cfa4:	4603      	mov	r3, r0
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d10b      	bne.n	800cfc2 <LmHandlerRequestClass+0xee>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800cfaa:	4b0d      	ldr	r3, [pc, #52]	; (800cfe0 <LmHandlerRequestClass+0x10c>)
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d00e      	beq.n	800cfd2 <LmHandlerRequestClass+0xfe>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800cfb4:	4b0a      	ldr	r3, [pc, #40]	; (800cfe0 <LmHandlerRequestClass+0x10c>)
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfba:	79fa      	ldrb	r2, [r7, #7]
 800cfbc:	4610      	mov	r0, r2
 800cfbe:	4798      	blx	r3
                break;
 800cfc0:	e007      	b.n	800cfd2 <LmHandlerRequestClass+0xfe>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800cfc2:	23ff      	movs	r3, #255	; 0xff
 800cfc4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800cfc8:	e003      	b.n	800cfd2 <LmHandlerRequestClass+0xfe>
                break;
 800cfca:	bf00      	nop
 800cfcc:	e002      	b.n	800cfd4 <LmHandlerRequestClass+0x100>
                break;
 800cfce:	bf00      	nop
 800cfd0:	e000      	b.n	800cfd4 <LmHandlerRequestClass+0x100>
                break;
 800cfd2:	bf00      	nop
        }
    }
    return errorStatus;
 800cfd4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800cfd8:	4618      	mov	r0, r3
 800cfda:	3738      	adds	r7, #56	; 0x38
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	bd80      	pop	{r7, pc}
 800cfe0:	200005c0 	.word	0x200005c0

0800cfe4 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b08c      	sub	sp, #48	; 0x30
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( deviceClass == NULL )
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d102      	bne.n	800cff8 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800cff2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cff6:	e010      	b.n	800d01a <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800cff8:	2300      	movs	r3, #0
 800cffa:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800cffc:	f107 0308 	add.w	r3, r7, #8
 800d000:	4618      	mov	r0, r3
 800d002:	f005 f80b 	bl	801201c <LoRaMacMibGetRequestConfirm>
 800d006:	4603      	mov	r3, r0
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d002      	beq.n	800d012 <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800d00c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d010:	e003      	b.n	800d01a <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800d012:	7b3a      	ldrb	r2, [r7, #12]
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800d018:	2300      	movs	r3, #0
}
 800d01a:	4618      	mov	r0, r3
 800d01c:	3730      	adds	r7, #48	; 0x30
 800d01e:	46bd      	mov	sp, r7
 800d020:	bd80      	pop	{r7, pc}
	...

0800d024 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b08c      	sub	sp, #48	; 0x30
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if( txDatarate == NULL )
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d102      	bne.n	800d038 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800d032:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d036:	e016      	b.n	800d066 <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800d038:	2320      	movs	r3, #32
 800d03a:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 800d03c:	f107 0308 	add.w	r3, r7, #8
 800d040:	4618      	mov	r0, r3
 800d042:	f004 ffeb 	bl	801201c <LoRaMacMibGetRequestConfirm>
 800d046:	4603      	mov	r3, r0
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d002      	beq.n	800d052 <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800d04c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d050:	e009      	b.n	800d066 <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800d052:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	f993 2000 	ldrsb.w	r2, [r3]
 800d060:	4b03      	ldr	r3, [pc, #12]	; (800d070 <LmHandlerGetTxDatarate+0x4c>)
 800d062:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800d064:	2300      	movs	r3, #0
}
 800d066:	4618      	mov	r0, r3
 800d068:	3730      	adds	r7, #48	; 0x30
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd80      	pop	{r7, pc}
 800d06e:	bf00      	nop
 800d070:	200005a8 	.word	0x200005a8

0800d074 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b08c      	sub	sp, #48	; 0x30
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800d07c:	2323      	movs	r3, #35	; 0x23
 800d07e:	723b      	strb	r3, [r7, #8]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	60fb      	str	r3, [r7, #12]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800d084:	f107 0308 	add.w	r3, r7, #8
 800d088:	4618      	mov	r0, r3
 800d08a:	f005 f99f 	bl	80123cc <LoRaMacMibSetRequestConfirm>
 800d08e:	4603      	mov	r3, r0
 800d090:	2b00      	cmp	r3, #0
 800d092:	d002      	beq.n	800d09a <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800d094:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d098:	e000      	b.n	800d09c <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800d09a:	2300      	movs	r3, #0
}
 800d09c:	4618      	mov	r0, r3
 800d09e:	3730      	adds	r7, #48	; 0x30
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	bd80      	pop	{r7, pc}

0800d0a4 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b082      	sub	sp, #8
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800d0ac:	4b18      	ldr	r3, [pc, #96]	; (800d110 <McpsConfirm+0x6c>)
 800d0ae:	2201      	movs	r2, #1
 800d0b0:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	785a      	ldrb	r2, [r3, #1]
 800d0b6:	4b16      	ldr	r3, [pc, #88]	; (800d110 <McpsConfirm+0x6c>)
 800d0b8:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	789b      	ldrb	r3, [r3, #2]
 800d0be:	b25a      	sxtb	r2, r3
 800d0c0:	4b13      	ldr	r3, [pc, #76]	; (800d110 <McpsConfirm+0x6c>)
 800d0c2:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	68db      	ldr	r3, [r3, #12]
 800d0c8:	4a11      	ldr	r2, [pc, #68]	; (800d110 <McpsConfirm+0x6c>)
 800d0ca:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800d0d2:	4b0f      	ldr	r3, [pc, #60]	; (800d110 <McpsConfirm+0x6c>)
 800d0d4:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	691b      	ldr	r3, [r3, #16]
 800d0da:	b2da      	uxtb	r2, r3
 800d0dc:	4b0c      	ldr	r3, [pc, #48]	; (800d110 <McpsConfirm+0x6c>)
 800d0de:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	791b      	ldrb	r3, [r3, #4]
 800d0e4:	461a      	mov	r2, r3
 800d0e6:	4b0a      	ldr	r3, [pc, #40]	; (800d110 <McpsConfirm+0x6c>)
 800d0e8:	725a      	strb	r2, [r3, #9]

    if( LmHandlerCallbacks->OnTxData != NULL )
 800d0ea:	4b0a      	ldr	r3, [pc, #40]	; (800d114 <McpsConfirm+0x70>)
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d004      	beq.n	800d0fe <McpsConfirm+0x5a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800d0f4:	4b07      	ldr	r3, [pc, #28]	; (800d114 <McpsConfirm+0x70>)
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0fa:	4805      	ldr	r0, [pc, #20]	; (800d110 <McpsConfirm+0x6c>)
 800d0fc:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800d0fe:	6879      	ldr	r1, [r7, #4]
 800d100:	2000      	movs	r0, #0
 800d102:	f000 f9e9 	bl	800d4d8 <LmHandlerPackagesNotify>
}
 800d106:	bf00      	nop
 800d108:	3708      	adds	r7, #8
 800d10a:	46bd      	mov	sp, r7
 800d10c:	bd80      	pop	{r7, pc}
 800d10e:	bf00      	nop
 800d110:	200000a0 	.word	0x200000a0
 800d114:	200005c0 	.word	0x200005c0

0800d118 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b086      	sub	sp, #24
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
 800d120:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800d122:	2300      	movs	r3, #0
 800d124:	73fb      	strb	r3, [r7, #15]
    RxParams.IsMcpsIndication = 1;
 800d126:	4b2d      	ldr	r3, [pc, #180]	; (800d1dc <McpsIndication+0xc4>)
 800d128:	2201      	movs	r2, #1
 800d12a:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	785a      	ldrb	r2, [r3, #1]
 800d130:	4b2a      	ldr	r3, [pc, #168]	; (800d1dc <McpsIndication+0xc4>)
 800d132:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800d134:	4b29      	ldr	r3, [pc, #164]	; (800d1dc <McpsIndication+0xc4>)
 800d136:	785b      	ldrb	r3, [r3, #1]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d14b      	bne.n	800d1d4 <McpsIndication+0xbc>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	791b      	ldrb	r3, [r3, #4]
 800d140:	b25a      	sxtb	r2, r3
 800d142:	4b26      	ldr	r3, [pc, #152]	; (800d1dc <McpsIndication+0xc4>)
 800d144:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d14c:	b25a      	sxtb	r2, r3
 800d14e:	4b23      	ldr	r3, [pc, #140]	; (800d1dc <McpsIndication+0xc4>)
 800d150:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800d152:	683b      	ldr	r3, [r7, #0]
 800d154:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800d158:	4b20      	ldr	r3, [pc, #128]	; (800d1dc <McpsIndication+0xc4>)
 800d15a:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800d15c:	683b      	ldr	r3, [r7, #0]
 800d15e:	78da      	ldrb	r2, [r3, #3]
 800d160:	4b1e      	ldr	r3, [pc, #120]	; (800d1dc <McpsIndication+0xc4>)
 800d162:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	691b      	ldr	r3, [r3, #16]
 800d168:	4a1c      	ldr	r2, [pc, #112]	; (800d1dc <McpsIndication+0xc4>)
 800d16a:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	78db      	ldrb	r3, [r3, #3]
 800d170:	743b      	strb	r3, [r7, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	7b1b      	ldrb	r3, [r3, #12]
 800d176:	747b      	strb	r3, [r7, #17]
    appData.Buffer = mcpsIndication->Buffer;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	689b      	ldr	r3, [r3, #8]
 800d17c:	617b      	str	r3, [r7, #20]

    if( LmHandlerCallbacks->OnRxData != NULL )
 800d17e:	4b18      	ldr	r3, [pc, #96]	; (800d1e0 <McpsIndication+0xc8>)
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d184:	2b00      	cmp	r3, #0
 800d186:	d007      	beq.n	800d198 <McpsIndication+0x80>
    {
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800d188:	4b15      	ldr	r3, [pc, #84]	; (800d1e0 <McpsIndication+0xc8>)
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d18e:	f107 0210 	add.w	r2, r7, #16
 800d192:	4912      	ldr	r1, [pc, #72]	; (800d1dc <McpsIndication+0xc4>)
 800d194:	4610      	mov	r0, r2
 800d196:	4798      	blx	r3
    }

    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 800d198:	4b11      	ldr	r3, [pc, #68]	; (800d1e0 <McpsIndication+0xc8>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d007      	beq.n	800d1b2 <McpsIndication+0x9a>
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	7e1b      	ldrb	r3, [r3, #24]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d003      	beq.n	800d1b2 <McpsIndication+0x9a>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800d1aa:	4b0d      	ldr	r3, [pc, #52]	; (800d1e0 <McpsIndication+0xc8>)
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1b0:	4798      	blx	r3
    }
    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800d1b2:	6879      	ldr	r1, [r7, #4]
 800d1b4:	2001      	movs	r0, #1
 800d1b6:	f000 f98f 	bl	800d4d8 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800d1ba:	f107 030f 	add.w	r3, r7, #15
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f7ff ff10 	bl	800cfe4 <LmHandlerGetCurrentClass>
            .Port = 0
        };
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( mcpsIndication->IsUplinkTxPending != 0 )
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	795b      	ldrb	r3, [r3, #5]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d004      	beq.n	800d1d6 <McpsIndication+0xbe>
    {
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */
        IsUplinkTxPending = true;
 800d1cc:	4b05      	ldr	r3, [pc, #20]	; (800d1e4 <McpsIndication+0xcc>)
 800d1ce:	2201      	movs	r2, #1
 800d1d0:	701a      	strb	r2, [r3, #0]
 800d1d2:	e000      	b.n	800d1d6 <McpsIndication+0xbe>
        return;
 800d1d4:	bf00      	nop
    }
#endif /* LORAMAC_VERSION */
}
 800d1d6:	3718      	adds	r7, #24
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	bd80      	pop	{r7, pc}
 800d1dc:	200000bc 	.word	0x200000bc
 800d1e0:	200005c0 	.word	0x200005c0
 800d1e4:	200005f0 	.word	0x200005f0

0800d1e8 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b08c      	sub	sp, #48	; 0x30
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800d1f0:	4b49      	ldr	r3, [pc, #292]	; (800d318 <MlmeConfirm+0x130>)
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	785a      	ldrb	r2, [r3, #1]
 800d1fa:	4b47      	ldr	r3, [pc, #284]	; (800d318 <MlmeConfirm+0x130>)
 800d1fc:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 800d1fe:	4b47      	ldr	r3, [pc, #284]	; (800d31c <MlmeConfirm+0x134>)
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d204:	2b00      	cmp	r3, #0
 800d206:	d004      	beq.n	800d212 <MlmeConfirm+0x2a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800d208:	4b44      	ldr	r3, [pc, #272]	; (800d31c <MlmeConfirm+0x134>)
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d20e:	4842      	ldr	r0, [pc, #264]	; (800d318 <MlmeConfirm+0x130>)
 800d210:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800d212:	6879      	ldr	r1, [r7, #4]
 800d214:	2002      	movs	r0, #2
 800d216:	f000 f95f 	bl	800d4d8 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	781b      	ldrb	r3, [r3, #0]
 800d21e:	3b01      	subs	r3, #1
 800d220:	2b0b      	cmp	r3, #11
 800d222:	d872      	bhi.n	800d30a <MlmeConfirm+0x122>
 800d224:	a201      	add	r2, pc, #4	; (adr r2, 800d22c <MlmeConfirm+0x44>)
 800d226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d22a:	bf00      	nop
 800d22c:	0800d25d 	.word	0x0800d25d
 800d230:	0800d30b 	.word	0x0800d30b
 800d234:	0800d30b 	.word	0x0800d30b
 800d238:	0800d30b 	.word	0x0800d30b
 800d23c:	0800d2d9 	.word	0x0800d2d9
 800d240:	0800d30b 	.word	0x0800d30b
 800d244:	0800d30b 	.word	0x0800d30b
 800d248:	0800d30b 	.word	0x0800d30b
 800d24c:	0800d30b 	.word	0x0800d30b
 800d250:	0800d30b 	.word	0x0800d30b
 800d254:	0800d2f1 	.word	0x0800d2f1
 800d258:	0800d30b 	.word	0x0800d30b
    {
        case MLME_JOIN:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type = MIB_DEV_ADDR;
 800d25c:	2306      	movs	r3, #6
 800d25e:	723b      	strb	r3, [r7, #8]
                LoRaMacMibGetRequestConfirm( &mibReq );
 800d260:	f107 0308 	add.w	r3, r7, #8
 800d264:	4618      	mov	r0, r3
 800d266:	f004 fed9 	bl	801201c <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 800d26a:	4b2d      	ldr	r3, [pc, #180]	; (800d320 <MlmeConfirm+0x138>)
 800d26c:	79db      	ldrb	r3, [r3, #7]
 800d26e:	68fa      	ldr	r2, [r7, #12]
 800d270:	4611      	mov	r1, r2
 800d272:	4618      	mov	r0, r3
 800d274:	f7ff fa78 	bl	800c768 <SecureElementSetDevAddr>
 800d278:	4603      	mov	r3, r0
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d102      	bne.n	800d284 <MlmeConfirm+0x9c>
                {
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	4a28      	ldr	r2, [pc, #160]	; (800d324 <MlmeConfirm+0x13c>)
 800d282:	6153      	str	r3, [r2, #20]
                }
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800d284:	4828      	ldr	r0, [pc, #160]	; (800d328 <MlmeConfirm+0x140>)
 800d286:	f7ff fecd 	bl	800d024 <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 800d28a:	4828      	ldr	r0, [pc, #160]	; (800d32c <MlmeConfirm+0x144>)
 800d28c:	f000 fa74 	bl	800d778 <LmHandlerGetTxPower>

                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800d290:	4b21      	ldr	r3, [pc, #132]	; (800d318 <MlmeConfirm+0x130>)
 800d292:	785b      	ldrb	r3, [r3, #1]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d108      	bne.n	800d2aa <MlmeConfirm+0xc2>
                {
                    /* Status is OK, node has joined the network */
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800d298:	4b21      	ldr	r3, [pc, #132]	; (800d320 <MlmeConfirm+0x138>)
 800d29a:	2200      	movs	r2, #0
 800d29c:	719a      	strb	r2, [r3, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800d29e:	4b24      	ldr	r3, [pc, #144]	; (800d330 <MlmeConfirm+0x148>)
 800d2a0:	785b      	ldrb	r3, [r3, #1]
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	f7ff fe16 	bl	800ced4 <LmHandlerRequestClass>
 800d2a8:	e002      	b.n	800d2b0 <MlmeConfirm+0xc8>
                }
                else
                {
                    /* Join was not successful. Try to join again */
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800d2aa:	4b1d      	ldr	r3, [pc, #116]	; (800d320 <MlmeConfirm+0x138>)
 800d2ac:	22ff      	movs	r2, #255	; 0xff
 800d2ae:	719a      	strb	r2, [r3, #6]
                }
                /* Notify upper layer */
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800d2b0:	4b1a      	ldr	r3, [pc, #104]	; (800d31c <MlmeConfirm+0x134>)
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d004      	beq.n	800d2c4 <MlmeConfirm+0xdc>
                {
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800d2ba:	4b18      	ldr	r3, [pc, #96]	; (800d31c <MlmeConfirm+0x134>)
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2c0:	4817      	ldr	r0, [pc, #92]	; (800d320 <MlmeConfirm+0x138>)
 800d2c2:	4798      	blx	r3
                }
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800d2c4:	4b14      	ldr	r3, [pc, #80]	; (800d318 <MlmeConfirm+0x130>)
 800d2c6:	785b      	ldrb	r3, [r3, #1]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d120      	bne.n	800d30e <MlmeConfirm+0x126>
                {
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 800d2cc:	4b14      	ldr	r3, [pc, #80]	; (800d320 <MlmeConfirm+0x138>)
 800d2ce:	79db      	ldrb	r3, [r3, #7]
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f7fe fff1 	bl	800c2b8 <SecureElementPrintSessionKeys>
                }
            }
            break;
 800d2d6:	e01a      	b.n	800d30e <MlmeConfirm+0x126>
        case MLME_LINK_CHECK:
            {
                RxParams.LinkCheck = true;
 800d2d8:	4b16      	ldr	r3, [pc, #88]	; (800d334 <MlmeConfirm+0x14c>)
 800d2da:	2201      	movs	r2, #1
 800d2dc:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	7a1a      	ldrb	r2, [r3, #8]
 800d2e2:	4b14      	ldr	r3, [pc, #80]	; (800d334 <MlmeConfirm+0x14c>)
 800d2e4:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	7a5a      	ldrb	r2, [r3, #9]
 800d2ea:	4b12      	ldr	r3, [pc, #72]	; (800d334 <MlmeConfirm+0x14c>)
 800d2ec:	74da      	strb	r2, [r3, #19]
            }
            break;
 800d2ee:	e00f      	b.n	800d310 <MlmeConfirm+0x128>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        case MLME_BEACON_ACQUISITION:
            {
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	785b      	ldrb	r3, [r3, #1]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d105      	bne.n	800d304 <MlmeConfirm+0x11c>
                {
                    /* Beacon has been acquired */
                    /* Request server for ping slot */
                    LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800d2f8:	4b0d      	ldr	r3, [pc, #52]	; (800d330 <MlmeConfirm+0x148>)
 800d2fa:	7c1b      	ldrb	r3, [r3, #16]
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	f7ff fddd 	bl	800cebc <LmHandlerPingSlotReq>
                    /* Beacon not acquired */
                    /* Request Device Time again. */
                    LmHandlerDeviceTimeReq( );
                }
            }
            break;
 800d302:	e005      	b.n	800d310 <MlmeConfirm+0x128>
                    LmHandlerDeviceTimeReq( );
 800d304:	f7ff fdbe 	bl	800ce84 <LmHandlerDeviceTimeReq>
            break;
 800d308:	e002      	b.n	800d310 <MlmeConfirm+0x128>
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800d30a:	bf00      	nop
 800d30c:	e000      	b.n	800d310 <MlmeConfirm+0x128>
            break;
 800d30e:	bf00      	nop
    }
}
 800d310:	bf00      	nop
 800d312:	3730      	adds	r7, #48	; 0x30
 800d314:	46bd      	mov	sp, r7
 800d316:	bd80      	pop	{r7, pc}
 800d318:	200000a0 	.word	0x200000a0
 800d31c:	200005c0 	.word	0x200005c0
 800d320:	20000094 	.word	0x20000094
 800d324:	2000056c 	.word	0x2000056c
 800d328:	20000098 	.word	0x20000098
 800d32c:	20000099 	.word	0x20000099
 800d330:	200005a8 	.word	0x200005a8
 800d334:	200000bc 	.word	0x200000bc

0800d338 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800d338:	b580      	push	{r7, lr}
 800d33a:	b082      	sub	sp, #8
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
 800d340:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800d342:	4b20      	ldr	r3, [pc, #128]	; (800d3c4 <MlmeIndication+0x8c>)
 800d344:	2200      	movs	r2, #0
 800d346:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	785a      	ldrb	r2, [r3, #1]
 800d34c:	4b1d      	ldr	r3, [pc, #116]	; (800d3c4 <MlmeIndication+0x8c>)
 800d34e:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	789b      	ldrb	r3, [r3, #2]
 800d354:	b25a      	sxtb	r2, r3
 800d356:	4b1b      	ldr	r3, [pc, #108]	; (800d3c4 <MlmeIndication+0x8c>)
 800d358:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800d35a:	683b      	ldr	r3, [r7, #0]
 800d35c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d360:	b25a      	sxtb	r2, r3
 800d362:	4b18      	ldr	r3, [pc, #96]	; (800d3c4 <MlmeIndication+0x8c>)
 800d364:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800d366:	683b      	ldr	r3, [r7, #0]
 800d368:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800d36c:	4b15      	ldr	r3, [pc, #84]	; (800d3c4 <MlmeIndication+0x8c>)
 800d36e:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800d370:	683b      	ldr	r3, [r7, #0]
 800d372:	78da      	ldrb	r2, [r3, #3]
 800d374:	4b13      	ldr	r3, [pc, #76]	; (800d3c4 <MlmeIndication+0x8c>)
 800d376:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	685b      	ldr	r3, [r3, #4]
 800d37c:	4a11      	ldr	r2, [pc, #68]	; (800d3c4 <MlmeIndication+0x8c>)
 800d37e:	60d3      	str	r3, [r2, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 800d380:	4b11      	ldr	r3, [pc, #68]	; (800d3c8 <MlmeIndication+0x90>)
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d386:	2b00      	cmp	r3, #0
 800d388:	d00d      	beq.n	800d3a6 <MlmeIndication+0x6e>
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	781b      	ldrb	r3, [r3, #0]
 800d38e:	2b0a      	cmp	r3, #10
 800d390:	d009      	beq.n	800d3a6 <MlmeIndication+0x6e>
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	781b      	ldrb	r3, [r3, #0]
 800d396:	2b0e      	cmp	r3, #14
 800d398:	d005      	beq.n	800d3a6 <MlmeIndication+0x6e>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800d39a:	4b0b      	ldr	r3, [pc, #44]	; (800d3c8 <MlmeIndication+0x90>)
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3a0:	4908      	ldr	r1, [pc, #32]	; (800d3c4 <MlmeIndication+0x8c>)
 800d3a2:	2000      	movs	r0, #0
 800d3a4:	4798      	blx	r3
    }

    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800d3a6:	6879      	ldr	r1, [r7, #4]
 800d3a8:	2003      	movs	r0, #3
 800d3aa:	f000 f895 	bl	800d4d8 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	781b      	ldrb	r3, [r3, #0]
 800d3b2:	2b0a      	cmp	r3, #10
 800d3b4:	d001      	beq.n	800d3ba <MlmeIndication+0x82>
 800d3b6:	2b0e      	cmp	r3, #14
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800d3b8:	e000      	b.n	800d3bc <MlmeIndication+0x84>
            break;
 800d3ba:	bf00      	nop
    }
}
 800d3bc:	bf00      	nop
 800d3be:	3708      	adds	r7, #8
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	bd80      	pop	{r7, pc}
 800d3c4:	200000bc 	.word	0x200000bc
 800d3c8:	200005c0 	.word	0x200005c0

0800d3cc <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b084      	sub	sp, #16
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	4603      	mov	r3, r0
 800d3d4:	6039      	str	r1, [r7, #0]
 800d3d6:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800d3d8:	2300      	movs	r3, #0
 800d3da:	60fb      	str	r3, [r7, #12]
    switch( id )
 800d3dc:	79fb      	ldrb	r3, [r7, #7]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d104      	bne.n	800d3ec <LmHandlerPackageRegister+0x20>
    {
        case PACKAGE_ID_COMPLIANCE:
            {
                package = LmhpCompliancePackageFactory( );
 800d3e2:	f000 fa8b 	bl	800d8fc <LmhpCompliancePackageFactory>
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	60fb      	str	r3, [r7, #12]
                break;
 800d3ea:	e00d      	b.n	800d408 <LmHandlerPackageRegister+0x3c>
            }
        default:
            {
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 800d3ec:	f107 020c 	add.w	r2, r7, #12
 800d3f0:	79fb      	ldrb	r3, [r7, #7]
 800d3f2:	4611      	mov	r1, r2
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	f000 ff73 	bl	800e2e0 <LmhpPackagesRegister>
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d002      	beq.n	800d406 <LmHandlerPackageRegister+0x3a>
                {
                    return LORAMAC_HANDLER_ERROR;
 800d400:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d404:	e03b      	b.n	800d47e <LmHandlerPackageRegister+0xb2>
                }
                break;
 800d406:	bf00      	nop
            }
    }
    if( package != NULL )
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d035      	beq.n	800d47a <LmHandlerPackageRegister+0xae>
    {
        LmHandlerPackages[id] = package;
 800d40e:	79fb      	ldrb	r3, [r7, #7]
 800d410:	68fa      	ldr	r2, [r7, #12]
 800d412:	491d      	ldr	r1, [pc, #116]	; (800d488 <LmHandlerPackageRegister+0xbc>)
 800d414:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800d418:	79fb      	ldrb	r3, [r7, #7]
 800d41a:	4a1b      	ldr	r2, [pc, #108]	; (800d488 <LmHandlerPackageRegister+0xbc>)
 800d41c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d420:	4a1a      	ldr	r2, [pc, #104]	; (800d48c <LmHandlerPackageRegister+0xc0>)
 800d422:	629a      	str	r2, [r3, #40]	; 0x28
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 800d424:	4b1a      	ldr	r3, [pc, #104]	; (800d490 <LmHandlerPackageRegister+0xc4>)
 800d426:	681a      	ldr	r2, [r3, #0]
 800d428:	79fb      	ldrb	r3, [r7, #7]
 800d42a:	4917      	ldr	r1, [pc, #92]	; (800d488 <LmHandlerPackageRegister+0xbc>)
 800d42c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d430:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d432:	631a      	str	r2, [r3, #48]	; 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 800d434:	4b16      	ldr	r3, [pc, #88]	; (800d490 <LmHandlerPackageRegister+0xc4>)
 800d436:	681a      	ldr	r2, [r3, #0]
 800d438:	79fb      	ldrb	r3, [r7, #7]
 800d43a:	4913      	ldr	r1, [pc, #76]	; (800d488 <LmHandlerPackageRegister+0xbc>)
 800d43c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d440:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d442:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800d444:	79fb      	ldrb	r3, [r7, #7]
 800d446:	4a10      	ldr	r2, [pc, #64]	; (800d488 <LmHandlerPackageRegister+0xbc>)
 800d448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d44c:	4a11      	ldr	r2, [pc, #68]	; (800d494 <LmHandlerPackageRegister+0xc8>)
 800d44e:	62da      	str	r2, [r3, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800d450:	4b0f      	ldr	r3, [pc, #60]	; (800d490 <LmHandlerPackageRegister+0xc4>)
 800d452:	681a      	ldr	r2, [r3, #0]
 800d454:	79fb      	ldrb	r3, [r7, #7]
 800d456:	490c      	ldr	r1, [pc, #48]	; (800d488 <LmHandlerPackageRegister+0xbc>)
 800d458:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d45c:	6992      	ldr	r2, [r2, #24]
 800d45e:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800d460:	79fb      	ldrb	r3, [r7, #7]
 800d462:	4a09      	ldr	r2, [pc, #36]	; (800d488 <LmHandlerPackageRegister+0xbc>)
 800d464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d468:	685b      	ldr	r3, [r3, #4]
 800d46a:	4a0b      	ldr	r2, [pc, #44]	; (800d498 <LmHandlerPackageRegister+0xcc>)
 800d46c:	6851      	ldr	r1, [r2, #4]
 800d46e:	4a0a      	ldr	r2, [pc, #40]	; (800d498 <LmHandlerPackageRegister+0xcc>)
 800d470:	7852      	ldrb	r2, [r2, #1]
 800d472:	6838      	ldr	r0, [r7, #0]
 800d474:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800d476:	2300      	movs	r3, #0
 800d478:	e001      	b.n	800d47e <LmHandlerPackageRegister+0xb2>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800d47a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
 800d47e:	4618      	mov	r0, r3
 800d480:	3710      	adds	r7, #16
 800d482:	46bd      	mov	sp, r7
 800d484:	bd80      	pop	{r7, pc}
 800d486:	bf00      	nop
 800d488:	20000594 	.word	0x20000594
 800d48c:	0800cb6d 	.word	0x0800cb6d
 800d490:	200005c0 	.word	0x200005c0
 800d494:	0800ce85 	.word	0x0800ce85
 800d498:	200000d0 	.word	0x200000d0

0800d49c <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b082      	sub	sp, #8
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	4603      	mov	r3, r0
 800d4a4:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800d4a6:	79fb      	ldrb	r3, [r7, #7]
 800d4a8:	2b04      	cmp	r3, #4
 800d4aa:	d80e      	bhi.n	800d4ca <LmHandlerPackageIsInitialized+0x2e>
 800d4ac:	79fb      	ldrb	r3, [r7, #7]
 800d4ae:	4a09      	ldr	r2, [pc, #36]	; (800d4d4 <LmHandlerPackageIsInitialized+0x38>)
 800d4b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d4b4:	689b      	ldr	r3, [r3, #8]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d007      	beq.n	800d4ca <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800d4ba:	79fb      	ldrb	r3, [r7, #7]
 800d4bc:	4a05      	ldr	r2, [pc, #20]	; (800d4d4 <LmHandlerPackageIsInitialized+0x38>)
 800d4be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d4c2:	689b      	ldr	r3, [r3, #8]
 800d4c4:	4798      	blx	r3
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	e000      	b.n	800d4cc <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800d4ca:	2300      	movs	r3, #0
    }
}
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	3708      	adds	r7, #8
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	bd80      	pop	{r7, pc}
 800d4d4:	20000594 	.word	0x20000594

0800d4d8 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b084      	sub	sp, #16
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	4603      	mov	r3, r0
 800d4e0:	6039      	str	r1, [r7, #0]
 800d4e2:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	73fb      	strb	r3, [r7, #15]
 800d4e8:	e067      	b.n	800d5ba <LmHandlerPackagesNotify+0xe2>
    {
        if( LmHandlerPackages[i] != NULL )
 800d4ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d4ee:	4a37      	ldr	r2, [pc, #220]	; (800d5cc <LmHandlerPackagesNotify+0xf4>)
 800d4f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d05a      	beq.n	800d5ae <LmHandlerPackagesNotify+0xd6>
        {
            switch( notifyType )
 800d4f8:	79fb      	ldrb	r3, [r7, #7]
 800d4fa:	2b03      	cmp	r3, #3
 800d4fc:	d84e      	bhi.n	800d59c <LmHandlerPackagesNotify+0xc4>
 800d4fe:	a201      	add	r2, pc, #4	; (adr r2, 800d504 <LmHandlerPackagesNotify+0x2c>)
 800d500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d504:	0800d515 	.word	0x0800d515
 800d508:	0800d537 	.word	0x0800d537
 800d50c:	0800d559 	.word	0x0800d559
 800d510:	0800d57b 	.word	0x0800d57b
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800d514:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d518:	4a2c      	ldr	r2, [pc, #176]	; (800d5cc <LmHandlerPackagesNotify+0xf4>)
 800d51a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d51e:	699b      	ldr	r3, [r3, #24]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d03d      	beq.n	800d5a0 <LmHandlerPackagesNotify+0xc8>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 800d524:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d528:	4a28      	ldr	r2, [pc, #160]	; (800d5cc <LmHandlerPackagesNotify+0xf4>)
 800d52a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d52e:	699b      	ldr	r3, [r3, #24]
 800d530:	6838      	ldr	r0, [r7, #0]
 800d532:	4798      	blx	r3
                        }
                        break;
 800d534:	e034      	b.n	800d5a0 <LmHandlerPackagesNotify+0xc8>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 800d536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d53a:	4a24      	ldr	r2, [pc, #144]	; (800d5cc <LmHandlerPackagesNotify+0xf4>)
 800d53c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d540:	69db      	ldr	r3, [r3, #28]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d02e      	beq.n	800d5a4 <LmHandlerPackagesNotify+0xcc>
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 800d546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d54a:	4a20      	ldr	r2, [pc, #128]	; (800d5cc <LmHandlerPackagesNotify+0xf4>)
 800d54c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d550:	69db      	ldr	r3, [r3, #28]
 800d552:	6838      	ldr	r0, [r7, #0]
 800d554:	4798      	blx	r3
                        }
                        break;
 800d556:	e025      	b.n	800d5a4 <LmHandlerPackagesNotify+0xcc>
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800d558:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d55c:	4a1b      	ldr	r2, [pc, #108]	; (800d5cc <LmHandlerPackagesNotify+0xf4>)
 800d55e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d562:	6a1b      	ldr	r3, [r3, #32]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d01f      	beq.n	800d5a8 <LmHandlerPackagesNotify+0xd0>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 800d568:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d56c:	4a17      	ldr	r2, [pc, #92]	; (800d5cc <LmHandlerPackagesNotify+0xf4>)
 800d56e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d572:	6a1b      	ldr	r3, [r3, #32]
 800d574:	6838      	ldr	r0, [r7, #0]
 800d576:	4798      	blx	r3
                        }
                        break;
 800d578:	e016      	b.n	800d5a8 <LmHandlerPackagesNotify+0xd0>
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800d57a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d57e:	4a13      	ldr	r2, [pc, #76]	; (800d5cc <LmHandlerPackagesNotify+0xf4>)
 800d580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d586:	2b00      	cmp	r3, #0
 800d588:	d010      	beq.n	800d5ac <LmHandlerPackagesNotify+0xd4>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800d58a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d58e:	4a0f      	ldr	r2, [pc, #60]	; (800d5cc <LmHandlerPackagesNotify+0xf4>)
 800d590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d596:	6838      	ldr	r0, [r7, #0]
 800d598:	4798      	blx	r3
                        }
                        break;
 800d59a:	e007      	b.n	800d5ac <LmHandlerPackagesNotify+0xd4>
                    }
                default:
                    {
                        break;
 800d59c:	bf00      	nop
 800d59e:	e006      	b.n	800d5ae <LmHandlerPackagesNotify+0xd6>
                        break;
 800d5a0:	bf00      	nop
 800d5a2:	e004      	b.n	800d5ae <LmHandlerPackagesNotify+0xd6>
                        break;
 800d5a4:	bf00      	nop
 800d5a6:	e002      	b.n	800d5ae <LmHandlerPackagesNotify+0xd6>
                        break;
 800d5a8:	bf00      	nop
 800d5aa:	e000      	b.n	800d5ae <LmHandlerPackagesNotify+0xd6>
                        break;
 800d5ac:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d5ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d5b2:	b2db      	uxtb	r3, r3
 800d5b4:	3301      	adds	r3, #1
 800d5b6:	b2db      	uxtb	r3, r3
 800d5b8:	73fb      	strb	r3, [r7, #15]
 800d5ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d5be:	2b04      	cmp	r3, #4
 800d5c0:	dd93      	ble.n	800d4ea <LmHandlerPackagesNotify+0x12>
                    }
            }
        }
    }
}
 800d5c2:	bf00      	nop
 800d5c4:	bf00      	nop
 800d5c6:	3710      	adds	r7, #16
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bd80      	pop	{r7, pc}
 800d5cc:	20000594 	.word	0x20000594

0800d5d0 <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b082      	sub	sp, #8
 800d5d4:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	71fb      	strb	r3, [r7, #7]
 800d5da:	e018      	b.n	800d60e <LmHandlerPackageIsTxPending+0x3e>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
#else
        if( LmHandlerPackages[i] != NULL )
 800d5dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d5e0:	4a0f      	ldr	r2, [pc, #60]	; (800d620 <LmHandlerPackageIsTxPending+0x50>)
 800d5e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d00b      	beq.n	800d602 <LmHandlerPackageIsTxPending+0x32>
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800d5ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d5ee:	4a0c      	ldr	r2, [pc, #48]	; (800d620 <LmHandlerPackageIsTxPending+0x50>)
 800d5f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5f4:	68db      	ldr	r3, [r3, #12]
 800d5f6:	4798      	blx	r3
 800d5f8:	4603      	mov	r3, r0
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d001      	beq.n	800d602 <LmHandlerPackageIsTxPending+0x32>
            {
                return true;
 800d5fe:	2301      	movs	r3, #1
 800d600:	e00a      	b.n	800d618 <LmHandlerPackageIsTxPending+0x48>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d606:	b2db      	uxtb	r3, r3
 800d608:	3301      	adds	r3, #1
 800d60a:	b2db      	uxtb	r3, r3
 800d60c:	71fb      	strb	r3, [r7, #7]
 800d60e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d612:	2b04      	cmp	r3, #4
 800d614:	dde2      	ble.n	800d5dc <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 800d616:	2300      	movs	r3, #0
}
 800d618:	4618      	mov	r0, r3
 800d61a:	3708      	adds	r7, #8
 800d61c:	46bd      	mov	sp, r7
 800d61e:	bd80      	pop	{r7, pc}
 800d620:	20000594 	.word	0x20000594

0800d624 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b082      	sub	sp, #8
 800d628:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d62a:	2300      	movs	r3, #0
 800d62c:	71fb      	strb	r3, [r7, #7]
 800d62e:	e022      	b.n	800d676 <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800d630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d634:	4a14      	ldr	r2, [pc, #80]	; (800d688 <LmHandlerPackagesProcess+0x64>)
 800d636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d015      	beq.n	800d66a <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800d63e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d642:	4a11      	ldr	r2, [pc, #68]	; (800d688 <LmHandlerPackagesProcess+0x64>)
 800d644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d648:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d00d      	beq.n	800d66a <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800d64e:	79fb      	ldrb	r3, [r7, #7]
 800d650:	4618      	mov	r0, r3
 800d652:	f7ff ff23 	bl	800d49c <LmHandlerPackageIsInitialized>
 800d656:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d006      	beq.n	800d66a <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800d65c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d660:	4a09      	ldr	r2, [pc, #36]	; (800d688 <LmHandlerPackagesProcess+0x64>)
 800d662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d666:	691b      	ldr	r3, [r3, #16]
 800d668:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d66a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d66e:	b2db      	uxtb	r3, r3
 800d670:	3301      	adds	r3, #1
 800d672:	b2db      	uxtb	r3, r3
 800d674:	71fb      	strb	r3, [r7, #7]
 800d676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d67a:	2b04      	cmp	r3, #4
 800d67c:	ddd8      	ble.n	800d630 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800d67e:	bf00      	nop
 800d680:	bf00      	nop
 800d682:	3708      	adds	r7, #8
 800d684:	46bd      	mov	sp, r7
 800d686:	bd80      	pop	{r7, pc}
 800d688:	20000594 	.word	0x20000594

0800d68c <LmHandlerOnTxFrameCtrlChanged>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void LmHandlerOnTxFrameCtrlChanged( LmHandlerMsgTypes_t isTxConfirmed )
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b082      	sub	sp, #8
 800d690:	af00      	add	r7, sp, #0
 800d692:	4603      	mov	r3, r0
 800d694:	71fb      	strb	r3, [r7, #7]
    LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800d696:	4a09      	ldr	r2, [pc, #36]	; (800d6bc <LmHandlerOnTxFrameCtrlChanged+0x30>)
 800d698:	79fb      	ldrb	r3, [r7, #7]
 800d69a:	70d3      	strb	r3, [r2, #3]

    if (LmHandlerCallbacks->OnTxFrameCtrlChanged != NULL)
 800d69c:	4b08      	ldr	r3, [pc, #32]	; (800d6c0 <LmHandlerOnTxFrameCtrlChanged+0x34>)
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d005      	beq.n	800d6b2 <LmHandlerOnTxFrameCtrlChanged+0x26>
    {
        LmHandlerCallbacks->OnTxFrameCtrlChanged( isTxConfirmed );
 800d6a6:	4b06      	ldr	r3, [pc, #24]	; (800d6c0 <LmHandlerOnTxFrameCtrlChanged+0x34>)
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6ac:	79fa      	ldrb	r2, [r7, #7]
 800d6ae:	4610      	mov	r0, r2
 800d6b0:	4798      	blx	r3
    }
}
 800d6b2:	bf00      	nop
 800d6b4:	3708      	adds	r7, #8
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	bd80      	pop	{r7, pc}
 800d6ba:	bf00      	nop
 800d6bc:	200005a8 	.word	0x200005a8
 800d6c0:	200005c0 	.word	0x200005c0

0800d6c4 <LmHandlerOnPingSlotPeriodicityChanged>:

static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity )
{
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b082      	sub	sp, #8
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	71fb      	strb	r3, [r7, #7]
    LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800d6ce:	4a09      	ldr	r2, [pc, #36]	; (800d6f4 <LmHandlerOnPingSlotPeriodicityChanged+0x30>)
 800d6d0:	79fb      	ldrb	r3, [r7, #7]
 800d6d2:	7413      	strb	r3, [r2, #16]

    if (LmHandlerCallbacks->OnPingSlotPeriodicityChanged != NULL)
 800d6d4:	4b08      	ldr	r3, [pc, #32]	; (800d6f8 <LmHandlerOnPingSlotPeriodicityChanged+0x34>)
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d005      	beq.n	800d6ea <LmHandlerOnPingSlotPeriodicityChanged+0x26>
    {
        LmHandlerCallbacks->OnPingSlotPeriodicityChanged( pingSlotPeriodicity );
 800d6de:	4b06      	ldr	r3, [pc, #24]	; (800d6f8 <LmHandlerOnPingSlotPeriodicityChanged+0x34>)
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d6e4:	79fa      	ldrb	r2, [r7, #7]
 800d6e6:	4610      	mov	r0, r2
 800d6e8:	4798      	blx	r3
    }
}
 800d6ea:	bf00      	nop
 800d6ec:	3708      	adds	r7, #8
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	bd80      	pop	{r7, pc}
 800d6f2:	bf00      	nop
 800d6f4:	200005a8 	.word	0x200005a8
 800d6f8:	200005c0 	.word	0x200005c0

0800d6fc <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion( LmHandlerVersionType_t lmhType, uint32_t *featureVersion )
{
 800d6fc:	b480      	push	{r7}
 800d6fe:	b083      	sub	sp, #12
 800d700:	af00      	add	r7, sp, #0
 800d702:	4603      	mov	r3, r0
 800d704:	6039      	str	r1, [r7, #0]
 800d706:	71fb      	strb	r3, [r7, #7]
    if( featureVersion == NULL )
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d102      	bne.n	800d714 <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 800d70e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d712:	e00e      	b.n	800d732 <LmHandlerGetVersion+0x36>
    }

    switch( lmhType )
 800d714:	79fb      	ldrb	r3, [r7, #7]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d002      	beq.n	800d720 <LmHandlerGetVersion+0x24>
 800d71a:	2b01      	cmp	r3, #1
 800d71c:	d004      	beq.n	800d728 <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
            break;
 800d71e:	e007      	b.n	800d730 <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 800d720:	683b      	ldr	r3, [r7, #0]
 800d722:	4a06      	ldr	r2, [pc, #24]	; (800d73c <LmHandlerGetVersion+0x40>)
 800d724:	601a      	str	r2, [r3, #0]
            break;
 800d726:	e003      	b.n	800d730 <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 800d728:	683b      	ldr	r3, [r7, #0]
 800d72a:	4a05      	ldr	r2, [pc, #20]	; (800d740 <LmHandlerGetVersion+0x44>)
 800d72c:	601a      	str	r2, [r3, #0]
            break;
 800d72e:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 800d730:	2300      	movs	r3, #0
}
 800d732:	4618      	mov	r0, r3
 800d734:	370c      	adds	r7, #12
 800d736:	46bd      	mov	sp, r7
 800d738:	bc80      	pop	{r7}
 800d73a:	4770      	bx	lr
 800d73c:	01000400 	.word	0x01000400
 800d740:	02010001 	.word	0x02010001

0800d744 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 800d744:	b580      	push	{r7, lr}
 800d746:	af00      	add	r7, sp, #0
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 800d748:	f005 fce0 	bl	801310c <LoRaMacDeInitialization>
 800d74c:	4603      	mov	r3, r0
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d101      	bne.n	800d756 <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800d752:	2300      	movs	r3, #0
 800d754:	e001      	b.n	800d75a <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800d756:	f06f 0301 	mvn.w	r3, #1
    }
}
 800d75a:	4618      	mov	r0, r3
 800d75c:	bd80      	pop	{r7, pc}

0800d75e <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 800d75e:	b580      	push	{r7, lr}
 800d760:	af00      	add	r7, sp, #0
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 800d762:	f004 fb93 	bl	8011e8c <LoRaMacHalt>
 800d766:	4603      	mov	r3, r0
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d101      	bne.n	800d770 <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800d76c:	2300      	movs	r3, #0
 800d76e:	e001      	b.n	800d774 <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800d770:	f06f 0301 	mvn.w	r3, #1
    }
}
 800d774:	4618      	mov	r0, r3
 800d776:	bd80      	pop	{r7, pc}

0800d778 <LmHandlerGetTxPower>:
    rxParams->Datarate = mibReq.Param.Rx2Channel.Datarate;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b08c      	sub	sp, #48	; 0x30
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d102      	bne.n	800d78c <LmHandlerGetTxPower+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800d786:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d78a:	e016      	b.n	800d7ba <LmHandlerGetTxPower+0x42>
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 800d78c:	2321      	movs	r3, #33	; 0x21
 800d78e:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800d790:	f107 0308 	add.w	r3, r7, #8
 800d794:	4618      	mov	r0, r3
 800d796:	f004 fc41 	bl	801201c <LoRaMacMibGetRequestConfirm>
 800d79a:	4603      	mov	r3, r0
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d002      	beq.n	800d7a6 <LmHandlerGetTxPower+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800d7a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d7a4:	e009      	b.n	800d7ba <LmHandlerGetTxPower+0x42>
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 800d7a6:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxPower = *txPower;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	f993 2000 	ldrsb.w	r2, [r3]
 800d7b4:	4b03      	ldr	r3, [pc, #12]	; (800d7c4 <LmHandlerGetTxPower+0x4c>)
 800d7b6:	715a      	strb	r2, [r3, #5]
    return LORAMAC_HANDLER_SUCCESS;
 800d7b8:	2300      	movs	r3, #0
}
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	3730      	adds	r7, #48	; 0x30
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	bd80      	pop	{r7, pc}
 800d7c2:	bf00      	nop
 800d7c4:	200005a8 	.word	0x200005a8

0800d7c8 <LmHandlerNvmDataStore>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b08e      	sub	sp, #56	; 0x38
 800d7cc:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    int32_t status = NVM_DATA_OK;
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	633b      	str	r3, [r7, #48]	; 0x30

    lmhStatus = LmHandlerHalt();
 800d7d8:	f7ff ffc1 	bl	800d75e <LmHandlerHalt>
 800d7dc:	4603      	mov	r3, r0
 800d7de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( lmhStatus == LORAMAC_HANDLER_SUCCESS )
 800d7e2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d12f      	bne.n	800d84a <LmHandlerNvmDataStore+0x82>
    {
        status = NvmDataMgmtStoreBegin();
 800d7ea:	f000 f859 	bl	800d8a0 <NvmDataMgmtStoreBegin>
 800d7ee:	6338      	str	r0, [r7, #48]	; 0x30

        if( status == NVM_DATA_NO_UPDATED_DATA )
 800d7f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7f2:	f113 0f02 	cmn.w	r3, #2
 800d7f6:	d103      	bne.n	800d800 <LmHandlerNvmDataStore+0x38>
        {
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800d7f8:	23f8      	movs	r3, #248	; 0xf8
 800d7fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d7fe:	e01c      	b.n	800d83a <LmHandlerNvmDataStore+0x72>
        }
        else if( ( status != NVM_DATA_OK ) || ( LmHandlerCallbacks->OnStoreContextRequest == NULL ) )
 800d800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d802:	2b00      	cmp	r3, #0
 800d804:	d104      	bne.n	800d810 <LmHandlerNvmDataStore+0x48>
 800d806:	4b1b      	ldr	r3, [pc, #108]	; (800d874 <LmHandlerNvmDataStore+0xac>)
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	695b      	ldr	r3, [r3, #20]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d103      	bne.n	800d818 <LmHandlerNvmDataStore+0x50>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800d810:	23ff      	movs	r3, #255	; 0xff
 800d812:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d816:	e010      	b.n	800d83a <LmHandlerNvmDataStore+0x72>
        }
        else
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_NVM_CTXS;
 800d818:	2327      	movs	r3, #39	; 0x27
 800d81a:	703b      	strb	r3, [r7, #0]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800d81c:	463b      	mov	r3, r7
 800d81e:	4618      	mov	r0, r3
 800d820:	f004 fbfc 	bl	801201c <LoRaMacMibGetRequestConfirm>
            nvm = ( LoRaMacNvmData_t * )mibReq.Param.Contexts;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	62fb      	str	r3, [r7, #44]	; 0x2c
            nvm_size = ( ( sizeof( LoRaMacNvmData_t ) + 7 ) & ~0x07 );
 800d828:	f44f 63ba 	mov.w	r3, #1488	; 0x5d0
 800d82c:	62bb      	str	r3, [r7, #40]	; 0x28
            LmHandlerCallbacks->OnStoreContextRequest( nvm, nvm_size );
 800d82e:	4b11      	ldr	r3, [pc, #68]	; (800d874 <LmHandlerNvmDataStore+0xac>)
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	695b      	ldr	r3, [r3, #20]
 800d834:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d836:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d838:	4798      	blx	r3
        }

        if( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 800d83a:	f000 f847 	bl	800d8cc <NvmDataMgmtStoreEnd>
 800d83e:	4603      	mov	r3, r0
 800d840:	2b00      	cmp	r3, #0
 800d842:	d002      	beq.n	800d84a <LmHandlerNvmDataStore+0x82>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800d844:	23ff      	movs	r3, #255	; 0xff
 800d846:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }

    if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) && ( LmHandlerCallbacks->OnNvmDataChange != NULL ) )
 800d84a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d109      	bne.n	800d866 <LmHandlerNvmDataStore+0x9e>
 800d852:	4b08      	ldr	r3, [pc, #32]	; (800d874 <LmHandlerNvmDataStore+0xac>)
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	69db      	ldr	r3, [r3, #28]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d004      	beq.n	800d866 <LmHandlerNvmDataStore+0x9e>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800d85c:	4b05      	ldr	r3, [pc, #20]	; (800d874 <LmHandlerNvmDataStore+0xac>)
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	69db      	ldr	r3, [r3, #28]
 800d862:	2001      	movs	r0, #1
 800d864:	4798      	blx	r3
    }

    return lmhStatus;
 800d866:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800d86a:	4618      	mov	r0, r3
 800d86c:	3738      	adds	r7, #56	; 0x38
 800d86e:	46bd      	mov	sp, r7
 800d870:	bd80      	pop	{r7, pc}
 800d872:	bf00      	nop
 800d874:	200005c0 	.word	0x200005c0

0800d878 <NvmDataMgmtEvent>:
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800d878:	b480      	push	{r7}
 800d87a:	b083      	sub	sp, #12
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	4603      	mov	r3, r0
 800d880:	80fb      	strh	r3, [r7, #6]
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800d882:	4b06      	ldr	r3, [pc, #24]	; (800d89c <NvmDataMgmtEvent+0x24>)
 800d884:	881a      	ldrh	r2, [r3, #0]
 800d886:	88fb      	ldrh	r3, [r7, #6]
 800d888:	4313      	orrs	r3, r2
 800d88a:	b29a      	uxth	r2, r3
 800d88c:	4b03      	ldr	r3, [pc, #12]	; (800d89c <NvmDataMgmtEvent+0x24>)
 800d88e:	801a      	strh	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800d890:	bf00      	nop
 800d892:	370c      	adds	r7, #12
 800d894:	46bd      	mov	sp, r7
 800d896:	bc80      	pop	{r7}
 800d898:	4770      	bx	lr
 800d89a:	bf00      	nop
 800d89c:	200006e8 	.word	0x200006e8

0800d8a0 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	af00      	add	r7, sp, #0
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Input checks */
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800d8a4:	4b08      	ldr	r3, [pc, #32]	; (800d8c8 <NvmDataMgmtStoreBegin+0x28>)
 800d8a6:	881b      	ldrh	r3, [r3, #0]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d102      	bne.n	800d8b2 <NvmDataMgmtStoreBegin+0x12>
    {
        /* There was no update. */
        return NVM_DATA_NO_UPDATED_DATA;
 800d8ac:	f06f 0301 	mvn.w	r3, #1
 800d8b0:	e008      	b.n	800d8c4 <NvmDataMgmtStoreBegin+0x24>
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800d8b2:	f004 fac3 	bl	8011e3c <LoRaMacStop>
 800d8b6:	4603      	mov	r3, r0
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d002      	beq.n	800d8c2 <NvmDataMgmtStoreBegin+0x22>
    {
        return NVM_DATA_NOT_AVAILABLE;
 800d8bc:	f06f 0302 	mvn.w	r3, #2
 800d8c0:	e000      	b.n	800d8c4 <NvmDataMgmtStoreBegin+0x24>
    }
    return NVM_DATA_OK;
 800d8c2:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	bd80      	pop	{r7, pc}
 800d8c8:	200006e8 	.word	0x200006e8

0800d8cc <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	af00      	add	r7, sp, #0
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Reset notification flags */
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800d8d0:	4b03      	ldr	r3, [pc, #12]	; (800d8e0 <NvmDataMgmtStoreEnd+0x14>)
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	801a      	strh	r2, [r3, #0]

    /* Resume LoRaMac */
    LoRaMacStart( );
 800d8d6:	f004 faa3 	bl	8011e20 <LoRaMacStart>
    return NVM_DATA_OK;
 800d8da:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800d8dc:	4618      	mov	r0, r3
 800d8de:	bd80      	pop	{r7, pc}
 800d8e0:	200006e8 	.word	0x200006e8

0800d8e4 <ClassBStatusReset>:

/*!
 * Reset Beacon status structure
 */
static inline void ClassBStatusReset( void )
{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	af00      	add	r7, sp, #0
    memset1( ( uint8_t * ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 800d8e8:	2220      	movs	r2, #32
 800d8ea:	2100      	movs	r1, #0
 800d8ec:	4802      	ldr	r0, [pc, #8]	; (800d8f8 <ClassBStatusReset+0x14>)
 800d8ee:	f00b fb03 	bl	8018ef8 <memset1>
}
 800d8f2:	bf00      	nop
 800d8f4:	bd80      	pop	{r7, pc}
 800d8f6:	bf00      	nop
 800d8f8:	20000700 	.word	0x20000700

0800d8fc <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate         = NULL,  /* To be initialized by LmHandler */
    .OnSystemReset           = NULL,  /* To be initialized by LmHandler */
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800d8fc:	b480      	push	{r7}
 800d8fe:	af00      	add	r7, sp, #0
    return &CompliancePackage;
 800d900:	4b02      	ldr	r3, [pc, #8]	; (800d90c <LmhpCompliancePackageFactory+0x10>)
}
 800d902:	4618      	mov	r0, r3
 800d904:	46bd      	mov	sp, r7
 800d906:	bc80      	pop	{r7}
 800d908:	4770      	bx	lr
 800d90a:	bf00      	nop
 800d90c:	200000d8 	.word	0x200000d8

0800d910 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800d910:	b580      	push	{r7, lr}
 800d912:	b086      	sub	sp, #24
 800d914:	af02      	add	r7, sp, #8
 800d916:	60f8      	str	r0, [r7, #12]
 800d918:	60b9      	str	r1, [r7, #8]
 800d91a:	4613      	mov	r3, r2
 800d91c:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d018      	beq.n	800d956 <LmhpComplianceInit+0x46>
 800d924:	68bb      	ldr	r3, [r7, #8]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d015      	beq.n	800d956 <LmhpComplianceInit+0x46>
    {
        ComplianceParams                      = ( LmhpComplianceParams_t * ) params;
 800d92a:	4a19      	ldr	r2, [pc, #100]	; (800d990 <LmhpComplianceInit+0x80>)
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 800d930:	4a18      	ldr	r2, [pc, #96]	; (800d994 <LmhpComplianceInit+0x84>)
 800d932:	68bb      	ldr	r3, [r7, #8]
 800d934:	60d3      	str	r3, [r2, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800d936:	4a17      	ldr	r2, [pc, #92]	; (800d994 <LmhpComplianceInit+0x84>)
 800d938:	79fb      	ldrb	r3, [r7, #7]
 800d93a:	7253      	strb	r3, [r2, #9]
        ComplianceTestState.Initialized       = true;
 800d93c:	4b15      	ldr	r3, [pc, #84]	; (800d994 <LmhpComplianceInit+0x84>)
 800d93e:	2201      	movs	r2, #1
 800d940:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 800d942:	2300      	movs	r3, #0
 800d944:	9300      	str	r3, [sp, #0]
 800d946:	4b14      	ldr	r3, [pc, #80]	; (800d998 <LmhpComplianceInit+0x88>)
 800d948:	2200      	movs	r2, #0
 800d94a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800d94e:	4813      	ldr	r0, [pc, #76]	; (800d99c <LmhpComplianceInit+0x8c>)
 800d950:	f00f fb8e 	bl	801d070 <UTIL_TIMER_Create>
 800d954:	e005      	b.n	800d962 <LmhpComplianceInit+0x52>
    }
    else
    {
        ComplianceParams                = NULL;
 800d956:	4b0e      	ldr	r3, [pc, #56]	; (800d990 <LmhpComplianceInit+0x80>)
 800d958:	2200      	movs	r2, #0
 800d95a:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800d95c:	4b0d      	ldr	r3, [pc, #52]	; (800d994 <LmhpComplianceInit+0x84>)
 800d95e:	2200      	movs	r2, #0
 800d960:	701a      	strb	r2, [r3, #0]
    }
    ComplianceTestState.RxAppCnt = 0;
 800d962:	4b0c      	ldr	r3, [pc, #48]	; (800d994 <LmhpComplianceInit+0x84>)
 800d964:	2200      	movs	r2, #0
 800d966:	821a      	strh	r2, [r3, #16]
    ClassBStatusReset( );
 800d968:	f7ff ffbc 	bl	800d8e4 <ClassBStatusReset>
    ComplianceTestState.IsTxPending = false;
 800d96c:	4b09      	ldr	r3, [pc, #36]	; (800d994 <LmhpComplianceInit+0x84>)
 800d96e:	2200      	movs	r2, #0
 800d970:	705a      	strb	r2, [r3, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 800d972:	4b08      	ldr	r3, [pc, #32]	; (800d994 <LmhpComplianceInit+0x84>)
 800d974:	2200      	movs	r2, #0
 800d976:	749a      	strb	r2, [r3, #18]
    ComplianceTestState.IsResetCmdPending = false;
 800d978:	4b06      	ldr	r3, [pc, #24]	; (800d994 <LmhpComplianceInit+0x84>)
 800d97a:	2200      	movs	r2, #0
 800d97c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 800d980:	4b04      	ldr	r3, [pc, #16]	; (800d994 <LmhpComplianceInit+0x84>)
 800d982:	2200      	movs	r2, #0
 800d984:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 800d988:	bf00      	nop
 800d98a:	3710      	adds	r7, #16
 800d98c:	46bd      	mov	sp, r7
 800d98e:	bd80      	pop	{r7, pc}
 800d990:	20000724 	.word	0x20000724
 800d994:	200006ec 	.word	0x200006ec
 800d998:	0800e299 	.word	0x0800e299
 800d99c:	20000728 	.word	0x20000728

0800d9a0 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800d9a0:	b480      	push	{r7}
 800d9a2:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800d9a4:	4b02      	ldr	r3, [pc, #8]	; (800d9b0 <LmhpComplianceIsInitialized+0x10>)
 800d9a6:	781b      	ldrb	r3, [r3, #0]
}
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	bc80      	pop	{r7}
 800d9ae:	4770      	bx	lr
 800d9b0:	200006ec 	.word	0x200006ec

0800d9b4 <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
 800d9b4:	b480      	push	{r7}
 800d9b6:	af00      	add	r7, sp, #0
    return ComplianceTestState.IsTxPending;
 800d9b8:	4b02      	ldr	r3, [pc, #8]	; (800d9c4 <LmhpComplianceIsTxPending+0x10>)
 800d9ba:	785b      	ldrb	r3, [r3, #1]
}
 800d9bc:	4618      	mov	r0, r3
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	bc80      	pop	{r7}
 800d9c2:	4770      	bx	lr
 800d9c4:	200006ec 	.word	0x200006ec

0800d9c8 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800d9c8:	b590      	push	{r4, r7, lr}
 800d9ca:	b085      	sub	sp, #20
 800d9cc:	af00      	add	r7, sp, #0
    if( ComplianceTestState.IsTxPending == true )
 800d9ce:	4b33      	ldr	r3, [pc, #204]	; (800da9c <LmhpComplianceProcess+0xd4>)
 800d9d0:	785b      	ldrb	r3, [r3, #1]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d03e      	beq.n	800da54 <LmhpComplianceProcess+0x8c>
    {
        TimerTime_t now = TimerGetCurrentTime( );
 800d9d6:	f00f fd09 	bl	801d3ec <UTIL_TIMER_GetCurrentTime>
 800d9da:	60f8      	str	r0, [r7, #12]
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 800d9dc:	4b2f      	ldr	r3, [pc, #188]	; (800da9c <LmhpComplianceProcess+0xd4>)
 800d9de:	685c      	ldr	r4, [r3, #4]
 800d9e0:	f7ff f8ba 	bl	800cb58 <LmHandlerGetDutyCycleWaitTime>
 800d9e4:	4603      	mov	r3, r0
 800d9e6:	4423      	add	r3, r4
 800d9e8:	68fa      	ldr	r2, [r7, #12]
 800d9ea:	429a      	cmp	r2, r3
 800d9ec:	d941      	bls.n	800da72 <LmhpComplianceProcess+0xaa>
        {
            if( ComplianceTestState.DataBufferSize != 0 )
 800d9ee:	4b2b      	ldr	r3, [pc, #172]	; (800da9c <LmhpComplianceProcess+0xd4>)
 800d9f0:	7a9b      	ldrb	r3, [r3, #10]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d03d      	beq.n	800da72 <LmhpComplianceProcess+0xaa>
            {
                /* Answer commands */
                LmHandlerAppData_t appData =
 800d9f6:	23e0      	movs	r3, #224	; 0xe0
 800d9f8:	703b      	strb	r3, [r7, #0]
                {
                    .Buffer     = ComplianceTestState.DataBuffer,
                    .BufferSize = ComplianceTestState.DataBufferSize,
 800d9fa:	4b28      	ldr	r3, [pc, #160]	; (800da9c <LmhpComplianceProcess+0xd4>)
 800d9fc:	7a9b      	ldrb	r3, [r3, #10]
                LmHandlerAppData_t appData =
 800d9fe:	707b      	strb	r3, [r7, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 800da00:	4b26      	ldr	r3, [pc, #152]	; (800da9c <LmhpComplianceProcess+0xd4>)
 800da02:	68db      	ldr	r3, [r3, #12]
                LmHandlerAppData_t appData =
 800da04:	607b      	str	r3, [r7, #4]
                    .Port       = COMPLIANCE_PORT,
                };

                LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800da06:	23ff      	movs	r3, #255	; 0xff
 800da08:	72fb      	strb	r3, [r7, #11]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 800da0a:	4b24      	ldr	r3, [pc, #144]	; (800da9c <LmhpComplianceProcess+0xd4>)
 800da0c:	7a19      	ldrb	r1, [r3, #8]
 800da0e:	463b      	mov	r3, r7
 800da10:	2201      	movs	r2, #1
 800da12:	4618      	mov	r0, r3
 800da14:	f7ff f968 	bl	800cce8 <LmHandlerSend>
 800da18:	4603      	mov	r3, r0
 800da1a:	72fb      	strb	r3, [r7, #11]
                if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) || ( lmhStatus == LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED ) )
 800da1c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d004      	beq.n	800da2e <LmhpComplianceProcess+0x66>
 800da24:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800da28:	f113 0f07 	cmn.w	r3, #7
 800da2c:	d106      	bne.n	800da3c <LmhpComplianceProcess+0x74>
                {
                    ComplianceTestState.IsTxPending = false;
 800da2e:	4b1b      	ldr	r3, [pc, #108]	; (800da9c <LmhpComplianceProcess+0xd4>)
 800da30:	2200      	movs	r2, #0
 800da32:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 800da34:	4b19      	ldr	r3, [pc, #100]	; (800da9c <LmhpComplianceProcess+0xd4>)
 800da36:	2200      	movs	r2, #0
 800da38:	729a      	strb	r2, [r3, #10]
 800da3a:	e007      	b.n	800da4c <LmhpComplianceProcess+0x84>
                }
                else
                {
                    /* try to send the message again */
                    TimerSetValue( &ProcessTimer, 1500 );
 800da3c:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800da40:	4817      	ldr	r0, [pc, #92]	; (800daa0 <LmhpComplianceProcess+0xd8>)
 800da42:	f00f fc29 	bl	801d298 <UTIL_TIMER_SetPeriod>
                    TimerStart( &ProcessTimer );
 800da46:	4816      	ldr	r0, [pc, #88]	; (800daa0 <LmhpComplianceProcess+0xd8>)
 800da48:	f00f fb48 	bl	801d0dc <UTIL_TIMER_Start>
                }

                ComplianceTestState.TxPendingTimestamp = now;
 800da4c:	4a13      	ldr	r2, [pc, #76]	; (800da9c <LmhpComplianceProcess+0xd4>)
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	6053      	str	r3, [r2, #4]
 800da52:	e00e      	b.n	800da72 <LmhpComplianceProcess+0xaa>
        }
    }
    else
    {
        /* If no Tx is pending process other commands */
        if( ComplianceTestState.IsClassReqCmdPending == true )
 800da54:	4b11      	ldr	r3, [pc, #68]	; (800da9c <LmhpComplianceProcess+0xd4>)
 800da56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d009      	beq.n	800da72 <LmhpComplianceProcess+0xaa>
        {
            ComplianceTestState.IsClassReqCmdPending = false;
 800da5e:	4b0f      	ldr	r3, [pc, #60]	; (800da9c <LmhpComplianceProcess+0xd4>)
 800da60:	2200      	movs	r2, #0
 800da62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 800da66:	4b0d      	ldr	r3, [pc, #52]	; (800da9c <LmhpComplianceProcess+0xd4>)
 800da68:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800da6c:	4618      	mov	r0, r3
 800da6e:	f7ff fa31 	bl	800ced4 <LmHandlerRequestClass>
        }
    }

    if( ComplianceTestState.IsResetCmdPending == true )
 800da72:	4b0a      	ldr	r3, [pc, #40]	; (800da9c <LmhpComplianceProcess+0xd4>)
 800da74:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d00a      	beq.n	800da92 <LmhpComplianceProcess+0xca>
    {
        ComplianceTestState.IsResetCmdPending = false;
 800da7c:	4b07      	ldr	r3, [pc, #28]	; (800da9c <LmhpComplianceProcess+0xd4>)
 800da7e:	2200      	movs	r2, #0
 800da80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Call platform MCU reset API */
        if( CompliancePackage.OnSystemReset != NULL )
 800da84:	4b07      	ldr	r3, [pc, #28]	; (800daa4 <LmhpComplianceProcess+0xdc>)
 800da86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d002      	beq.n	800da92 <LmhpComplianceProcess+0xca>
        {
            CompliancePackage.OnSystemReset( );
 800da8c:	4b05      	ldr	r3, [pc, #20]	; (800daa4 <LmhpComplianceProcess+0xdc>)
 800da8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da90:	4798      	blx	r3
        }
    }
}
 800da92:	bf00      	nop
 800da94:	3714      	adds	r7, #20
 800da96:	46bd      	mov	sp, r7
 800da98:	bd90      	pop	{r4, r7, pc}
 800da9a:	bf00      	nop
 800da9c:	200006ec 	.word	0x200006ec
 800daa0:	20000728 	.word	0x20000728
 800daa4:	200000d8 	.word	0x200000d8

0800daa8 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t *mcpsIndication )
{
 800daa8:	b5b0      	push	{r4, r5, r7, lr}
 800daaa:	b0a4      	sub	sp, #144	; 0x90
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
    uint8_t cmdIndex        = 0;
 800dab0:	2300      	movs	r3, #0
 800dab2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    MibRequestConfirm_t mibReq;

    if( ComplianceTestState.Initialized == false )
 800dab6:	4bd0      	ldr	r3, [pc, #832]	; (800ddf8 <LmhpComplianceOnMcpsIndication+0x350>)
 800dab8:	781b      	ldrb	r3, [r3, #0]
 800daba:	f083 0301 	eor.w	r3, r3, #1
 800dabe:	b2db      	uxtb	r3, r3
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	f040 83bf 	bne.w	800e244 <LmhpComplianceOnMcpsIndication+0x79c>
        return;
    }

    /* Increment the compliance certification protocol downlink counter */
    /* Not counting downlinks on FPort 0 */
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	78db      	ldrb	r3, [r3, #3]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d103      	bne.n	800dad6 <LmhpComplianceOnMcpsIndication+0x2e>
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	7b9b      	ldrb	r3, [r3, #14]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d005      	beq.n	800dae2 <LmhpComplianceOnMcpsIndication+0x3a>
    {
        ComplianceTestState.RxAppCnt++;
 800dad6:	4bc8      	ldr	r3, [pc, #800]	; (800ddf8 <LmhpComplianceOnMcpsIndication+0x350>)
 800dad8:	8a1b      	ldrh	r3, [r3, #16]
 800dada:	3301      	adds	r3, #1
 800dadc:	b29a      	uxth	r2, r3
 800dade:	4bc6      	ldr	r3, [pc, #792]	; (800ddf8 <LmhpComplianceOnMcpsIndication+0x350>)
 800dae0:	821a      	strh	r2, [r3, #16]
    }

    if( mcpsIndication->RxData == false )
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	7b5b      	ldrb	r3, [r3, #13]
 800dae6:	f083 0301 	eor.w	r3, r3, #1
 800daea:	b2db      	uxtb	r3, r3
 800daec:	2b00      	cmp	r3, #0
 800daee:	f040 83ab 	bne.w	800e248 <LmhpComplianceOnMcpsIndication+0x7a0>
    {
        return;
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	78db      	ldrb	r3, [r3, #3]
 800daf6:	2be0      	cmp	r3, #224	; 0xe0
 800daf8:	f040 83a8 	bne.w	800e24c <LmhpComplianceOnMcpsIndication+0x7a4>
    {
        return;
    }

    ComplianceTestState.DataBufferSize = 0;
 800dafc:	4bbe      	ldr	r3, [pc, #760]	; (800ddf8 <LmhpComplianceOnMcpsIndication+0x350>)
 800dafe:	2200      	movs	r2, #0
 800db00:	729a      	strb	r2, [r3, #10]

    switch( mcpsIndication->Buffer[cmdIndex++] )
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	689a      	ldr	r2, [r3, #8]
 800db06:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800db0a:	1c59      	adds	r1, r3, #1
 800db0c:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800db10:	4413      	add	r3, r2
 800db12:	781b      	ldrb	r3, [r3, #0]
 800db14:	2b7f      	cmp	r3, #127	; 0x7f
 800db16:	f200 8372 	bhi.w	800e1fe <LmhpComplianceOnMcpsIndication+0x756>
 800db1a:	a201      	add	r2, pc, #4	; (adr r2, 800db20 <LmhpComplianceOnMcpsIndication+0x78>)
 800db1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db20:	0800dd21 	.word	0x0800dd21
 800db24:	0800dd65 	.word	0x0800dd65
 800db28:	0800dd6f 	.word	0x0800dd6f
 800db2c:	0800dd85 	.word	0x0800dd85
 800db30:	0800dda7 	.word	0x0800dda7
 800db34:	0800ddd5 	.word	0x0800ddd5
 800db38:	0800de01 	.word	0x0800de01
 800db3c:	0800de5f 	.word	0x0800de5f
 800db40:	0800deb7 	.word	0x0800deb7
 800db44:	0800df23 	.word	0x0800df23
 800db48:	0800df73 	.word	0x0800df73
 800db4c:	0800e1ff 	.word	0x0800e1ff
 800db50:	0800e1ff 	.word	0x0800e1ff
 800db54:	0800e1ff 	.word	0x0800e1ff
 800db58:	0800e1ff 	.word	0x0800e1ff
 800db5c:	0800e1ff 	.word	0x0800e1ff
 800db60:	0800e1ff 	.word	0x0800e1ff
 800db64:	0800e1ff 	.word	0x0800e1ff
 800db68:	0800e1ff 	.word	0x0800e1ff
 800db6c:	0800e1ff 	.word	0x0800e1ff
 800db70:	0800e1ff 	.word	0x0800e1ff
 800db74:	0800e1ff 	.word	0x0800e1ff
 800db78:	0800e1ff 	.word	0x0800e1ff
 800db7c:	0800e1ff 	.word	0x0800e1ff
 800db80:	0800e1ff 	.word	0x0800e1ff
 800db84:	0800e1ff 	.word	0x0800e1ff
 800db88:	0800e1ff 	.word	0x0800e1ff
 800db8c:	0800e1ff 	.word	0x0800e1ff
 800db90:	0800e1ff 	.word	0x0800e1ff
 800db94:	0800e1ff 	.word	0x0800e1ff
 800db98:	0800e1ff 	.word	0x0800e1ff
 800db9c:	0800e1ff 	.word	0x0800e1ff
 800dba0:	0800df7b 	.word	0x0800df7b
 800dba4:	0800df8d 	.word	0x0800df8d
 800dba8:	0800df95 	.word	0x0800df95
 800dbac:	0800e1ff 	.word	0x0800e1ff
 800dbb0:	0800e1ff 	.word	0x0800e1ff
 800dbb4:	0800e1ff 	.word	0x0800e1ff
 800dbb8:	0800e1ff 	.word	0x0800e1ff
 800dbbc:	0800e1ff 	.word	0x0800e1ff
 800dbc0:	0800e1ff 	.word	0x0800e1ff
 800dbc4:	0800e1ff 	.word	0x0800e1ff
 800dbc8:	0800e1ff 	.word	0x0800e1ff
 800dbcc:	0800e1ff 	.word	0x0800e1ff
 800dbd0:	0800e1ff 	.word	0x0800e1ff
 800dbd4:	0800e1ff 	.word	0x0800e1ff
 800dbd8:	0800e1ff 	.word	0x0800e1ff
 800dbdc:	0800e1ff 	.word	0x0800e1ff
 800dbe0:	0800e1ff 	.word	0x0800e1ff
 800dbe4:	0800e1ff 	.word	0x0800e1ff
 800dbe8:	0800e1ff 	.word	0x0800e1ff
 800dbec:	0800e1ff 	.word	0x0800e1ff
 800dbf0:	0800e1ff 	.word	0x0800e1ff
 800dbf4:	0800e1ff 	.word	0x0800e1ff
 800dbf8:	0800e1ff 	.word	0x0800e1ff
 800dbfc:	0800e1ff 	.word	0x0800e1ff
 800dc00:	0800e1ff 	.word	0x0800e1ff
 800dc04:	0800e1ff 	.word	0x0800e1ff
 800dc08:	0800e1ff 	.word	0x0800e1ff
 800dc0c:	0800e1ff 	.word	0x0800e1ff
 800dc10:	0800e1ff 	.word	0x0800e1ff
 800dc14:	0800e1ff 	.word	0x0800e1ff
 800dc18:	0800e1ff 	.word	0x0800e1ff
 800dc1c:	0800e1ff 	.word	0x0800e1ff
 800dc20:	0800e1ff 	.word	0x0800e1ff
 800dc24:	0800e1ff 	.word	0x0800e1ff
 800dc28:	0800e1ff 	.word	0x0800e1ff
 800dc2c:	0800e1ff 	.word	0x0800e1ff
 800dc30:	0800e1ff 	.word	0x0800e1ff
 800dc34:	0800e1ff 	.word	0x0800e1ff
 800dc38:	0800e1ff 	.word	0x0800e1ff
 800dc3c:	0800e1ff 	.word	0x0800e1ff
 800dc40:	0800e1ff 	.word	0x0800e1ff
 800dc44:	0800e1ff 	.word	0x0800e1ff
 800dc48:	0800e1ff 	.word	0x0800e1ff
 800dc4c:	0800e1ff 	.word	0x0800e1ff
 800dc50:	0800e1ff 	.word	0x0800e1ff
 800dc54:	0800e1ff 	.word	0x0800e1ff
 800dc58:	0800e1ff 	.word	0x0800e1ff
 800dc5c:	0800e1ff 	.word	0x0800e1ff
 800dc60:	0800e1ff 	.word	0x0800e1ff
 800dc64:	0800e1ff 	.word	0x0800e1ff
 800dc68:	0800e1ff 	.word	0x0800e1ff
 800dc6c:	0800e1ff 	.word	0x0800e1ff
 800dc70:	0800e1ff 	.word	0x0800e1ff
 800dc74:	0800e1ff 	.word	0x0800e1ff
 800dc78:	0800e1ff 	.word	0x0800e1ff
 800dc7c:	0800e1ff 	.word	0x0800e1ff
 800dc80:	0800e1ff 	.word	0x0800e1ff
 800dc84:	0800e1ff 	.word	0x0800e1ff
 800dc88:	0800e1ff 	.word	0x0800e1ff
 800dc8c:	0800e1ff 	.word	0x0800e1ff
 800dc90:	0800e1ff 	.word	0x0800e1ff
 800dc94:	0800e1ff 	.word	0x0800e1ff
 800dc98:	0800e1ff 	.word	0x0800e1ff
 800dc9c:	0800e1ff 	.word	0x0800e1ff
 800dca0:	0800e1ff 	.word	0x0800e1ff
 800dca4:	0800e1ff 	.word	0x0800e1ff
 800dca8:	0800e1ff 	.word	0x0800e1ff
 800dcac:	0800e1ff 	.word	0x0800e1ff
 800dcb0:	0800e1ff 	.word	0x0800e1ff
 800dcb4:	0800e1ff 	.word	0x0800e1ff
 800dcb8:	0800e1ff 	.word	0x0800e1ff
 800dcbc:	0800e1ff 	.word	0x0800e1ff
 800dcc0:	0800e1ff 	.word	0x0800e1ff
 800dcc4:	0800e1ff 	.word	0x0800e1ff
 800dcc8:	0800e1ff 	.word	0x0800e1ff
 800dccc:	0800e1ff 	.word	0x0800e1ff
 800dcd0:	0800e1ff 	.word	0x0800e1ff
 800dcd4:	0800e1ff 	.word	0x0800e1ff
 800dcd8:	0800e1ff 	.word	0x0800e1ff
 800dcdc:	0800e1ff 	.word	0x0800e1ff
 800dce0:	0800e1ff 	.word	0x0800e1ff
 800dce4:	0800e1ff 	.word	0x0800e1ff
 800dce8:	0800e1ff 	.word	0x0800e1ff
 800dcec:	0800e1ff 	.word	0x0800e1ff
 800dcf0:	0800e1ff 	.word	0x0800e1ff
 800dcf4:	0800e1ff 	.word	0x0800e1ff
 800dcf8:	0800e1ff 	.word	0x0800e1ff
 800dcfc:	0800e1ff 	.word	0x0800e1ff
 800dd00:	0800e1ff 	.word	0x0800e1ff
 800dd04:	0800e1ff 	.word	0x0800e1ff
 800dd08:	0800e1ff 	.word	0x0800e1ff
 800dd0c:	0800e1ff 	.word	0x0800e1ff
 800dd10:	0800e1ff 	.word	0x0800e1ff
 800dd14:	0800dfc7 	.word	0x0800dfc7
 800dd18:	0800e077 	.word	0x0800e077
 800dd1c:	0800e0a9 	.word	0x0800e0a9
    {
        case COMPLIANCE_PKG_VERSION_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 800dd20:	4b35      	ldr	r3, [pc, #212]	; (800ddf8 <LmhpComplianceOnMcpsIndication+0x350>)
 800dd22:	68da      	ldr	r2, [r3, #12]
 800dd24:	4b34      	ldr	r3, [pc, #208]	; (800ddf8 <LmhpComplianceOnMcpsIndication+0x350>)
 800dd26:	7a9b      	ldrb	r3, [r3, #10]
 800dd28:	1c59      	adds	r1, r3, #1
 800dd2a:	b2c8      	uxtb	r0, r1
 800dd2c:	4932      	ldr	r1, [pc, #200]	; (800ddf8 <LmhpComplianceOnMcpsIndication+0x350>)
 800dd2e:	7288      	strb	r0, [r1, #10]
 800dd30:	4413      	add	r3, r2
 800dd32:	2200      	movs	r2, #0
 800dd34:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 800dd36:	4b30      	ldr	r3, [pc, #192]	; (800ddf8 <LmhpComplianceOnMcpsIndication+0x350>)
 800dd38:	68da      	ldr	r2, [r3, #12]
 800dd3a:	4b2f      	ldr	r3, [pc, #188]	; (800ddf8 <LmhpComplianceOnMcpsIndication+0x350>)
 800dd3c:	7a9b      	ldrb	r3, [r3, #10]
 800dd3e:	1c59      	adds	r1, r3, #1
 800dd40:	b2c8      	uxtb	r0, r1
 800dd42:	492d      	ldr	r1, [pc, #180]	; (800ddf8 <LmhpComplianceOnMcpsIndication+0x350>)
 800dd44:	7288      	strb	r0, [r1, #10]
 800dd46:	4413      	add	r3, r2
 800dd48:	2206      	movs	r2, #6
 800dd4a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 800dd4c:	4b2a      	ldr	r3, [pc, #168]	; (800ddf8 <LmhpComplianceOnMcpsIndication+0x350>)
 800dd4e:	68da      	ldr	r2, [r3, #12]
 800dd50:	4b29      	ldr	r3, [pc, #164]	; (800ddf8 <LmhpComplianceOnMcpsIndication+0x350>)
 800dd52:	7a9b      	ldrb	r3, [r3, #10]
 800dd54:	1c59      	adds	r1, r3, #1
 800dd56:	b2c8      	uxtb	r0, r1
 800dd58:	4927      	ldr	r1, [pc, #156]	; (800ddf8 <LmhpComplianceOnMcpsIndication+0x350>)
 800dd5a:	7288      	strb	r0, [r1, #10]
 800dd5c:	4413      	add	r3, r2
 800dd5e:	2201      	movs	r2, #1
 800dd60:	701a      	strb	r2, [r3, #0]
                break;
 800dd62:	e257      	b.n	800e214 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DUT_RESET_REQ:
            {
                ComplianceTestState.IsResetCmdPending = true;
 800dd64:	4b24      	ldr	r3, [pc, #144]	; (800ddf8 <LmhpComplianceOnMcpsIndication+0x350>)
 800dd66:	2201      	movs	r2, #1
 800dd68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                break;
 800dd6c:	e252      	b.n	800e214 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DUT_JOIN_REQ:
            {
                if( CompliancePackage.OnJoinRequest != NULL )
 800dd6e:	4b23      	ldr	r3, [pc, #140]	; (800ddfc <LmhpComplianceOnMcpsIndication+0x354>)
 800dd70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	f000 8245 	beq.w	800e202 <LmhpComplianceOnMcpsIndication+0x75a>
                {
                    CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800dd78:	4b20      	ldr	r3, [pc, #128]	; (800ddfc <LmhpComplianceOnMcpsIndication+0x354>)
 800dd7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd7c:	2101      	movs	r1, #1
 800dd7e:	2002      	movs	r0, #2
 800dd80:	4798      	blx	r3
                }
                break;
 800dd82:	e23e      	b.n	800e202 <LmhpComplianceOnMcpsIndication+0x75a>
            }
        case COMPLIANCE_SWITCH_CLASS_REQ:
            {
                /* CLASS_A = 0, CLASS_B = 1, CLASS_C = 2 */
                ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	689a      	ldr	r2, [r3, #8]
 800dd88:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800dd8c:	1c59      	adds	r1, r3, #1
 800dd8e:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800dd92:	4413      	add	r3, r2
 800dd94:	781a      	ldrb	r2, [r3, #0]
 800dd96:	4b18      	ldr	r3, [pc, #96]	; (800ddf8 <LmhpComplianceOnMcpsIndication+0x350>)
 800dd98:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                ComplianceTestState.IsClassReqCmdPending = true;
 800dd9c:	4b16      	ldr	r3, [pc, #88]	; (800ddf8 <LmhpComplianceOnMcpsIndication+0x350>)
 800dd9e:	2201      	movs	r2, #1
 800dda0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                break;
 800dda4:	e236      	b.n	800e214 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_ADR_BIT_CHANGE_REQ:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type            = MIB_ADR;
 800dda6:	2304      	movs	r3, #4
 800dda8:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	689a      	ldr	r2, [r3, #8]
 800ddae:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800ddb2:	1c59      	adds	r1, r3, #1
 800ddb4:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800ddb8:	4413      	add	r3, r2
 800ddba:	781b      	ldrb	r3, [r3, #0]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	bf14      	ite	ne
 800ddc0:	2301      	movne	r3, #1
 800ddc2:	2300      	moveq	r3, #0
 800ddc4:	b2db      	uxtb	r3, r3
 800ddc6:	733b      	strb	r3, [r7, #12]

                LoRaMacMibSetRequestConfirm( &mibReq );
 800ddc8:	f107 0308 	add.w	r3, r7, #8
 800ddcc:	4618      	mov	r0, r3
 800ddce:	f004 fafd 	bl	80123cc <LoRaMacMibSetRequestConfirm>
                break;
 800ddd2:	e21f      	b.n	800e214 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_REGIONAL_DUTY_CYCLE_CTRL_REQ:
            {
                LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	689a      	ldr	r2, [r3, #8]
 800ddd8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800dddc:	1c59      	adds	r1, r3, #1
 800ddde:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800dde2:	4413      	add	r3, r2
 800dde4:	781b      	ldrb	r3, [r3, #0]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	bf14      	ite	ne
 800ddea:	2301      	movne	r3, #1
 800ddec:	2300      	moveq	r3, #0
 800ddee:	b2db      	uxtb	r3, r3
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	f005 f965 	bl	80130c0 <LoRaMacTestSetDutyCycleOn>
                break;
 800ddf6:	e20d      	b.n	800e214 <LmhpComplianceOnMcpsIndication+0x76c>
 800ddf8:	200006ec 	.word	0x200006ec
 800ddfc:	200000d8 	.word	0x200000d8
            }
        case COMPLIANCE_TX_PERIODICITY_CHANGE_REQ:
            {
                /* Periodicity in milli-seconds */
                uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 800de00:	4ba5      	ldr	r3, [pc, #660]	; (800e098 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800de02:	f107 0408 	add.w	r4, r7, #8
 800de06:	461d      	mov	r5, r3
 800de08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800de0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800de0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800de0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800de10:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800de14:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	689a      	ldr	r2, [r3, #8]
 800de1c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800de20:	1c59      	adds	r1, r3, #1
 800de22:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800de26:	4413      	add	r3, r2
 800de28:	781b      	ldrb	r3, [r3, #0]
 800de2a:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

                if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 800de2e:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800de32:	2b0a      	cmp	r3, #10
 800de34:	f200 81e7 	bhi.w	800e206 <LmhpComplianceOnMcpsIndication+0x75e>
                {
                    if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 800de38:	4b98      	ldr	r3, [pc, #608]	; (800e09c <LmhpComplianceOnMcpsIndication+0x5f4>)
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	685b      	ldr	r3, [r3, #4]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	f000 81e1 	beq.w	800e206 <LmhpComplianceOnMcpsIndication+0x75e>
                    {
                        ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 800de44:	4b95      	ldr	r3, [pc, #596]	; (800e09c <LmhpComplianceOnMcpsIndication+0x5f4>)
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	685a      	ldr	r2, [r3, #4]
 800de4a:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800de4e:	009b      	lsls	r3, r3, #2
 800de50:	3390      	adds	r3, #144	; 0x90
 800de52:	443b      	add	r3, r7
 800de54:	f853 3c88 	ldr.w	r3, [r3, #-136]
 800de58:	4618      	mov	r0, r3
 800de5a:	4790      	blx	r2
                    }
                }
                break;
 800de5c:	e1d3      	b.n	800e206 <LmhpComplianceOnMcpsIndication+0x75e>
            }
        case COMPLIANCE_TX_FRAMES_CTRL_REQ:
            {
                uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	689a      	ldr	r2, [r3, #8]
 800de62:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800de66:	1c59      	adds	r1, r3, #1
 800de68:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800de6c:	4413      	add	r3, r2
 800de6e:	781b      	ldrb	r3, [r3, #0]
 800de70:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

                if( ( frameType == 1 ) || ( frameType == 2 ) )
 800de74:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800de78:	2b01      	cmp	r3, #1
 800de7a:	d004      	beq.n	800de86 <LmhpComplianceOnMcpsIndication+0x3de>
 800de7c:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800de80:	2b02      	cmp	r3, #2
 800de82:	f040 81c2 	bne.w	800e20a <LmhpComplianceOnMcpsIndication+0x762>
                {
                    ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800de86:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800de8a:	2b01      	cmp	r3, #1
 800de8c:	bf14      	ite	ne
 800de8e:	2301      	movne	r3, #1
 800de90:	2300      	moveq	r3, #0
 800de92:	b2db      	uxtb	r3, r3
 800de94:	461a      	mov	r2, r3
 800de96:	4b82      	ldr	r3, [pc, #520]	; (800e0a0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800de98:	721a      	strb	r2, [r3, #8]

                    if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 800de9a:	4b80      	ldr	r3, [pc, #512]	; (800e09c <LmhpComplianceOnMcpsIndication+0x5f4>)
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	689b      	ldr	r3, [r3, #8]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	f000 81b2 	beq.w	800e20a <LmhpComplianceOnMcpsIndication+0x762>
                    {
                        ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 800dea6:	4b7d      	ldr	r3, [pc, #500]	; (800e09c <LmhpComplianceOnMcpsIndication+0x5f4>)
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	689b      	ldr	r3, [r3, #8]
 800deac:	4a7c      	ldr	r2, [pc, #496]	; (800e0a0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800deae:	7a12      	ldrb	r2, [r2, #8]
 800deb0:	4610      	mov	r0, r2
 800deb2:	4798      	blx	r3
                    }
                }
                break;
 800deb4:	e1a9      	b.n	800e20a <LmhpComplianceOnMcpsIndication+0x762>
            }
        case COMPLIANCE_ECHO_PAYLOAD_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 800deb6:	4b7a      	ldr	r3, [pc, #488]	; (800e0a0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800deb8:	68da      	ldr	r2, [r3, #12]
 800deba:	4b79      	ldr	r3, [pc, #484]	; (800e0a0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800debc:	7a9b      	ldrb	r3, [r3, #10]
 800debe:	1c59      	adds	r1, r3, #1
 800dec0:	b2c8      	uxtb	r0, r1
 800dec2:	4977      	ldr	r1, [pc, #476]	; (800e0a0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800dec4:	7288      	strb	r0, [r1, #10]
 800dec6:	4413      	add	r3, r2
 800dec8:	2208      	movs	r2, #8
 800deca:	701a      	strb	r2, [r3, #0]

                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800decc:	2301      	movs	r3, #1
 800dece:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 800ded2:	e019      	b.n	800df08 <LmhpComplianceOnMcpsIndication+0x460>
                     i++ )
                {
                    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	689a      	ldr	r2, [r3, #8]
 800ded8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800dedc:	1c59      	adds	r1, r3, #1
 800dede:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800dee2:	4413      	add	r3, r2
 800dee4:	781a      	ldrb	r2, [r3, #0]
 800dee6:	4b6e      	ldr	r3, [pc, #440]	; (800e0a0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800dee8:	68d9      	ldr	r1, [r3, #12]
 800deea:	4b6d      	ldr	r3, [pc, #436]	; (800e0a0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800deec:	7a9b      	ldrb	r3, [r3, #10]
 800deee:	1c58      	adds	r0, r3, #1
 800def0:	b2c4      	uxtb	r4, r0
 800def2:	486b      	ldr	r0, [pc, #428]	; (800e0a0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800def4:	7284      	strb	r4, [r0, #10]
 800def6:	440b      	add	r3, r1
 800def8:	3201      	adds	r2, #1
 800defa:	b2d2      	uxtb	r2, r2
 800defc:	701a      	strb	r2, [r3, #0]
                     i++ )
 800defe:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800df02:	3301      	adds	r3, #1
 800df04:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800df08:	4b65      	ldr	r3, [pc, #404]	; (800e0a0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800df0a:	7a5a      	ldrb	r2, [r3, #9]
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	7b1b      	ldrb	r3, [r3, #12]
 800df10:	4293      	cmp	r3, r2
 800df12:	bf28      	it	cs
 800df14:	4613      	movcs	r3, r2
 800df16:	b2db      	uxtb	r3, r3
 800df18:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 800df1c:	429a      	cmp	r2, r3
 800df1e:	d3d9      	bcc.n	800ded4 <LmhpComplianceOnMcpsIndication+0x42c>
                }
                break;
 800df20:	e178      	b.n	800e214 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_RX_APP_CNT_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 800df22:	4b5f      	ldr	r3, [pc, #380]	; (800e0a0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800df24:	68da      	ldr	r2, [r3, #12]
 800df26:	4b5e      	ldr	r3, [pc, #376]	; (800e0a0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800df28:	7a9b      	ldrb	r3, [r3, #10]
 800df2a:	1c59      	adds	r1, r3, #1
 800df2c:	b2c8      	uxtb	r0, r1
 800df2e:	495c      	ldr	r1, [pc, #368]	; (800e0a0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800df30:	7288      	strb	r0, [r1, #10]
 800df32:	4413      	add	r3, r2
 800df34:	2209      	movs	r2, #9
 800df36:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 800df38:	4b59      	ldr	r3, [pc, #356]	; (800e0a0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800df3a:	8a18      	ldrh	r0, [r3, #16]
 800df3c:	4b58      	ldr	r3, [pc, #352]	; (800e0a0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800df3e:	68da      	ldr	r2, [r3, #12]
 800df40:	4b57      	ldr	r3, [pc, #348]	; (800e0a0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800df42:	7a9b      	ldrb	r3, [r3, #10]
 800df44:	1c59      	adds	r1, r3, #1
 800df46:	b2cc      	uxtb	r4, r1
 800df48:	4955      	ldr	r1, [pc, #340]	; (800e0a0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800df4a:	728c      	strb	r4, [r1, #10]
 800df4c:	4413      	add	r3, r2
 800df4e:	b2c2      	uxtb	r2, r0
 800df50:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 800df52:	4b53      	ldr	r3, [pc, #332]	; (800e0a0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800df54:	8a1b      	ldrh	r3, [r3, #16]
 800df56:	0a1b      	lsrs	r3, r3, #8
 800df58:	b298      	uxth	r0, r3
 800df5a:	4b51      	ldr	r3, [pc, #324]	; (800e0a0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800df5c:	68da      	ldr	r2, [r3, #12]
 800df5e:	4b50      	ldr	r3, [pc, #320]	; (800e0a0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800df60:	7a9b      	ldrb	r3, [r3, #10]
 800df62:	1c59      	adds	r1, r3, #1
 800df64:	b2cc      	uxtb	r4, r1
 800df66:	494e      	ldr	r1, [pc, #312]	; (800e0a0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800df68:	728c      	strb	r4, [r1, #10]
 800df6a:	4413      	add	r3, r2
 800df6c:	b2c2      	uxtb	r2, r0
 800df6e:	701a      	strb	r2, [r3, #0]
                break;
 800df70:	e150      	b.n	800e214 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_RX_APP_CNT_RESET_REQ:
            {
                ComplianceTestState.RxAppCnt = 0;
 800df72:	4b4b      	ldr	r3, [pc, #300]	; (800e0a0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800df74:	2200      	movs	r2, #0
 800df76:	821a      	strh	r2, [r3, #16]
                break;
 800df78:	e14c      	b.n	800e214 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_LINK_CHECK_REQ:
            {
                MlmeReq_t mlmeReq;
                mlmeReq.Type = MLME_LINK_CHECK;
 800df7a:	2305      	movs	r3, #5
 800df7c:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50

                LoRaMacMlmeRequest( &mlmeReq );
 800df80:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800df84:	4618      	mov	r0, r3
 800df86:	f004 fdcb 	bl	8012b20 <LoRaMacMlmeRequest>
                break;
 800df8a:	e143      	b.n	800e214 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DEVICE_TIME_REQ:
            {
                CompliancePackage.OnDeviceTimeRequest( );
 800df8c:	4b45      	ldr	r3, [pc, #276]	; (800e0a4 <LmhpComplianceOnMcpsIndication+0x5fc>)
 800df8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df90:	4798      	blx	r3
                break;
 800df92:	e13f      	b.n	800e214 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_PING_SLOT_INFO_REQ:
            {
                ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	689a      	ldr	r2, [r3, #8]
 800df98:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800df9c:	1c59      	adds	r1, r3, #1
 800df9e:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800dfa2:	4413      	add	r3, r2
 800dfa4:	781a      	ldrb	r2, [r3, #0]
 800dfa6:	4b3e      	ldr	r3, [pc, #248]	; (800e0a0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800dfa8:	755a      	strb	r2, [r3, #21]
                if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 800dfaa:	4b3c      	ldr	r3, [pc, #240]	; (800e09c <LmhpComplianceOnMcpsIndication+0x5f4>)
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	68db      	ldr	r3, [r3, #12]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	f000 812c 	beq.w	800e20e <LmhpComplianceOnMcpsIndication+0x766>
                {
                    ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 800dfb6:	4b39      	ldr	r3, [pc, #228]	; (800e09c <LmhpComplianceOnMcpsIndication+0x5f4>)
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	68db      	ldr	r3, [r3, #12]
 800dfbc:	4a38      	ldr	r2, [pc, #224]	; (800e0a0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800dfbe:	7d52      	ldrb	r2, [r2, #21]
 800dfc0:	4610      	mov	r0, r2
 800dfc2:	4798      	blx	r3
                }
                break;
 800dfc4:	e123      	b.n	800e20e <LmhpComplianceOnMcpsIndication+0x766>
            }
#endif /* CLASS_B not available */
        case COMPLIANCE_TX_CW_REQ:
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 7 )
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	7b1b      	ldrb	r3, [r3, #12]
 800dfca:	2b07      	cmp	r3, #7
 800dfcc:	f040 8121 	bne.w	800e212 <LmhpComplianceOnMcpsIndication+0x76a>
                {
                    mlmeReq.Type = MLME_TXCW;
 800dfd0:	2306      	movs	r3, #6
 800dfd2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
                    mlmeReq.Req.TxCw.Timeout =
                        ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	689a      	ldr	r2, [r3, #8]
 800dfda:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800dfde:	4413      	add	r3, r2
 800dfe0:	781b      	ldrb	r3, [r3, #0]
 800dfe2:	b21a      	sxth	r2, r3
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	6899      	ldr	r1, [r3, #8]
 800dfe8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800dfec:	3301      	adds	r3, #1
 800dfee:	440b      	add	r3, r1
 800dff0:	781b      	ldrb	r3, [r3, #0]
 800dff2:	021b      	lsls	r3, r3, #8
 800dff4:	b21b      	sxth	r3, r3
 800dff6:	4313      	orrs	r3, r2
 800dff8:	b21b      	sxth	r3, r3
 800dffa:	b29b      	uxth	r3, r3
                    mlmeReq.Req.TxCw.Timeout =
 800dffc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                    cmdIndex += 2;
 800e000:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e004:	3302      	adds	r3, #2
 800e006:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                    mlmeReq.Req.TxCw.Frequency =
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	689a      	ldr	r2, [r3, #8]
 800e00e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e012:	4413      	add	r3, r2
 800e014:	781b      	ldrb	r3, [r3, #0]
 800e016:	4619      	mov	r1, r3
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	689a      	ldr	r2, [r3, #8]
 800e01c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e020:	3301      	adds	r3, #1
 800e022:	4413      	add	r3, r2
 800e024:	781b      	ldrb	r3, [r3, #0]
 800e026:	021b      	lsls	r3, r3, #8
 800e028:	ea41 0203 	orr.w	r2, r1, r3
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	6899      	ldr	r1, [r3, #8]
 800e030:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e034:	3302      	adds	r3, #2
 800e036:	440b      	add	r3, r1
 800e038:	781b      	ldrb	r3, [r3, #0]
 800e03a:	041b      	lsls	r3, r3, #16
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800e03c:	4313      	orrs	r3, r2
 800e03e:	461a      	mov	r2, r3
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800e040:	2364      	movs	r3, #100	; 0x64
 800e042:	fb02 f303 	mul.w	r3, r2, r3
                    mlmeReq.Req.TxCw.Frequency =
 800e046:	647b      	str	r3, [r7, #68]	; 0x44
                        100;
                    cmdIndex += 3;
 800e048:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e04c:	3303      	adds	r3, #3
 800e04e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	689a      	ldr	r2, [r3, #8]
 800e056:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e05a:	1c59      	adds	r1, r3, #1
 800e05c:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800e060:	4413      	add	r3, r2
 800e062:	781b      	ldrb	r3, [r3, #0]
 800e064:	b25b      	sxtb	r3, r3
 800e066:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

                    LoRaMacMlmeRequest( &mlmeReq );
 800e06a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800e06e:	4618      	mov	r0, r3
 800e070:	f004 fd56 	bl	8012b20 <LoRaMacMlmeRequest>
                }
                break;
 800e074:	e0cd      	b.n	800e212 <LmhpComplianceOnMcpsIndication+0x76a>
            }
        case COMPLIANCE_DUT_FPORT_224_DISABLE_REQ:
            {
                mibReq.Type = MIB_IS_CERT_FPORT_ON;
 800e076:	233b      	movs	r3, #59	; 0x3b
 800e078:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                mibReq.Param.IsCertPortOn = false;
 800e07c:	2300      	movs	r3, #0
 800e07e:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacMibSetRequestConfirm( &mibReq );
 800e082:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e086:	4618      	mov	r0, r3
 800e088:	f004 f9a0 	bl	80123cc <LoRaMacMibSetRequestConfirm>

                ComplianceTestState.IsResetCmdPending = true;
 800e08c:	4b04      	ldr	r3, [pc, #16]	; (800e0a0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800e08e:	2201      	movs	r2, #1
 800e090:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                break;
 800e094:	e0be      	b.n	800e214 <LmhpComplianceOnMcpsIndication+0x76c>
 800e096:	bf00      	nop
 800e098:	0801e2c4 	.word	0x0801e2c4
 800e09c:	20000724 	.word	0x20000724
 800e0a0:	200006ec 	.word	0x200006ec
 800e0a4:	200000d8 	.word	0x200000d8
            {
                Version_t           lrwanVersion;
                Version_t           lrwanRpVersion;
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_LORAWAN_VERSION;
 800e0a8:	232a      	movs	r3, #42	; 0x2a
 800e0aa:	723b      	strb	r3, [r7, #8]

                LoRaMacMibGetRequestConfirm( &mibReq );
 800e0ac:	f107 0308 	add.w	r3, r7, #8
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	f003 ffb3 	bl	801201c <LoRaMacMibGetRequestConfirm>
                lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	63bb      	str	r3, [r7, #56]	; 0x38
                lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 800e0ba:	693b      	ldr	r3, [r7, #16]
 800e0bc:	637b      	str	r3, [r7, #52]	; 0x34

                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 800e0be:	4b65      	ldr	r3, [pc, #404]	; (800e254 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e0c0:	68da      	ldr	r2, [r3, #12]
 800e0c2:	4b64      	ldr	r3, [pc, #400]	; (800e254 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e0c4:	7a9b      	ldrb	r3, [r3, #10]
 800e0c6:	1c59      	adds	r1, r3, #1
 800e0c8:	b2c8      	uxtb	r0, r1
 800e0ca:	4962      	ldr	r1, [pc, #392]	; (800e254 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e0cc:	7288      	strb	r0, [r1, #10]
 800e0ce:	4413      	add	r3, r2
 800e0d0:	227f      	movs	r2, #127	; 0x7f
 800e0d2:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 800e0d4:	4b60      	ldr	r3, [pc, #384]	; (800e258 <LmhpComplianceOnMcpsIndication+0x7b0>)
 800e0d6:	681a      	ldr	r2, [r3, #0]
 800e0d8:	4b5e      	ldr	r3, [pc, #376]	; (800e254 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e0da:	68d9      	ldr	r1, [r3, #12]
 800e0dc:	4b5d      	ldr	r3, [pc, #372]	; (800e254 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e0de:	7a9b      	ldrb	r3, [r3, #10]
 800e0e0:	1c58      	adds	r0, r3, #1
 800e0e2:	b2c4      	uxtb	r4, r0
 800e0e4:	485b      	ldr	r0, [pc, #364]	; (800e254 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e0e6:	7284      	strb	r4, [r0, #10]
 800e0e8:	440b      	add	r3, r1
 800e0ea:	78d2      	ldrb	r2, [r2, #3]
 800e0ec:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 800e0ee:	4b5a      	ldr	r3, [pc, #360]	; (800e258 <LmhpComplianceOnMcpsIndication+0x7b0>)
 800e0f0:	681a      	ldr	r2, [r3, #0]
 800e0f2:	4b58      	ldr	r3, [pc, #352]	; (800e254 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e0f4:	68d9      	ldr	r1, [r3, #12]
 800e0f6:	4b57      	ldr	r3, [pc, #348]	; (800e254 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e0f8:	7a9b      	ldrb	r3, [r3, #10]
 800e0fa:	1c58      	adds	r0, r3, #1
 800e0fc:	b2c4      	uxtb	r4, r0
 800e0fe:	4855      	ldr	r0, [pc, #340]	; (800e254 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e100:	7284      	strb	r4, [r0, #10]
 800e102:	440b      	add	r3, r1
 800e104:	7892      	ldrb	r2, [r2, #2]
 800e106:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 800e108:	4b53      	ldr	r3, [pc, #332]	; (800e258 <LmhpComplianceOnMcpsIndication+0x7b0>)
 800e10a:	681a      	ldr	r2, [r3, #0]
 800e10c:	4b51      	ldr	r3, [pc, #324]	; (800e254 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e10e:	68d9      	ldr	r1, [r3, #12]
 800e110:	4b50      	ldr	r3, [pc, #320]	; (800e254 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e112:	7a9b      	ldrb	r3, [r3, #10]
 800e114:	1c58      	adds	r0, r3, #1
 800e116:	b2c4      	uxtb	r4, r0
 800e118:	484e      	ldr	r0, [pc, #312]	; (800e254 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e11a:	7284      	strb	r4, [r0, #10]
 800e11c:	440b      	add	r3, r1
 800e11e:	7852      	ldrb	r2, [r2, #1]
 800e120:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 800e122:	4b4d      	ldr	r3, [pc, #308]	; (800e258 <LmhpComplianceOnMcpsIndication+0x7b0>)
 800e124:	681a      	ldr	r2, [r3, #0]
 800e126:	4b4b      	ldr	r3, [pc, #300]	; (800e254 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e128:	68d9      	ldr	r1, [r3, #12]
 800e12a:	4b4a      	ldr	r3, [pc, #296]	; (800e254 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e12c:	7a9b      	ldrb	r3, [r3, #10]
 800e12e:	1c58      	adds	r0, r3, #1
 800e130:	b2c4      	uxtb	r4, r0
 800e132:	4848      	ldr	r0, [pc, #288]	; (800e254 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e134:	7284      	strb	r4, [r0, #10]
 800e136:	440b      	add	r3, r1
 800e138:	7812      	ldrb	r2, [r2, #0]
 800e13a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 800e13c:	4b45      	ldr	r3, [pc, #276]	; (800e254 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e13e:	68da      	ldr	r2, [r3, #12]
 800e140:	4b44      	ldr	r3, [pc, #272]	; (800e254 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e142:	7a9b      	ldrb	r3, [r3, #10]
 800e144:	1c59      	adds	r1, r3, #1
 800e146:	b2c8      	uxtb	r0, r1
 800e148:	4942      	ldr	r1, [pc, #264]	; (800e254 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e14a:	7288      	strb	r0, [r1, #10]
 800e14c:	4413      	add	r3, r2
 800e14e:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800e152:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 800e154:	4b3f      	ldr	r3, [pc, #252]	; (800e254 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e156:	68da      	ldr	r2, [r3, #12]
 800e158:	4b3e      	ldr	r3, [pc, #248]	; (800e254 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e15a:	7a9b      	ldrb	r3, [r3, #10]
 800e15c:	1c59      	adds	r1, r3, #1
 800e15e:	b2c8      	uxtb	r0, r1
 800e160:	493c      	ldr	r1, [pc, #240]	; (800e254 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e162:	7288      	strb	r0, [r1, #10]
 800e164:	4413      	add	r3, r2
 800e166:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800e16a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 800e16c:	4b39      	ldr	r3, [pc, #228]	; (800e254 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e16e:	68da      	ldr	r2, [r3, #12]
 800e170:	4b38      	ldr	r3, [pc, #224]	; (800e254 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e172:	7a9b      	ldrb	r3, [r3, #10]
 800e174:	1c59      	adds	r1, r3, #1
 800e176:	b2c8      	uxtb	r0, r1
 800e178:	4936      	ldr	r1, [pc, #216]	; (800e254 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e17a:	7288      	strb	r0, [r1, #10]
 800e17c:	4413      	add	r3, r2
 800e17e:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 800e182:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 800e184:	4b33      	ldr	r3, [pc, #204]	; (800e254 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e186:	68da      	ldr	r2, [r3, #12]
 800e188:	4b32      	ldr	r3, [pc, #200]	; (800e254 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e18a:	7a9b      	ldrb	r3, [r3, #10]
 800e18c:	1c59      	adds	r1, r3, #1
 800e18e:	b2c8      	uxtb	r0, r1
 800e190:	4930      	ldr	r1, [pc, #192]	; (800e254 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e192:	7288      	strb	r0, [r1, #10]
 800e194:	4413      	add	r3, r2
 800e196:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e19a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 800e19c:	4b2d      	ldr	r3, [pc, #180]	; (800e254 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e19e:	68da      	ldr	r2, [r3, #12]
 800e1a0:	4b2c      	ldr	r3, [pc, #176]	; (800e254 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e1a2:	7a9b      	ldrb	r3, [r3, #10]
 800e1a4:	1c59      	adds	r1, r3, #1
 800e1a6:	b2c8      	uxtb	r0, r1
 800e1a8:	492a      	ldr	r1, [pc, #168]	; (800e254 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e1aa:	7288      	strb	r0, [r1, #10]
 800e1ac:	4413      	add	r3, r2
 800e1ae:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e1b2:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 800e1b4:	4b27      	ldr	r3, [pc, #156]	; (800e254 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e1b6:	68da      	ldr	r2, [r3, #12]
 800e1b8:	4b26      	ldr	r3, [pc, #152]	; (800e254 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e1ba:	7a9b      	ldrb	r3, [r3, #10]
 800e1bc:	1c59      	adds	r1, r3, #1
 800e1be:	b2c8      	uxtb	r0, r1
 800e1c0:	4924      	ldr	r1, [pc, #144]	; (800e254 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e1c2:	7288      	strb	r0, [r1, #10]
 800e1c4:	4413      	add	r3, r2
 800e1c6:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800e1ca:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 800e1cc:	4b21      	ldr	r3, [pc, #132]	; (800e254 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e1ce:	68da      	ldr	r2, [r3, #12]
 800e1d0:	4b20      	ldr	r3, [pc, #128]	; (800e254 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e1d2:	7a9b      	ldrb	r3, [r3, #10]
 800e1d4:	1c59      	adds	r1, r3, #1
 800e1d6:	b2c8      	uxtb	r0, r1
 800e1d8:	491e      	ldr	r1, [pc, #120]	; (800e254 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e1da:	7288      	strb	r0, [r1, #10]
 800e1dc:	4413      	add	r3, r2
 800e1de:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800e1e2:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 800e1e4:	4b1b      	ldr	r3, [pc, #108]	; (800e254 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e1e6:	68da      	ldr	r2, [r3, #12]
 800e1e8:	4b1a      	ldr	r3, [pc, #104]	; (800e254 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e1ea:	7a9b      	ldrb	r3, [r3, #10]
 800e1ec:	1c59      	adds	r1, r3, #1
 800e1ee:	b2c8      	uxtb	r0, r1
 800e1f0:	4918      	ldr	r1, [pc, #96]	; (800e254 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e1f2:	7288      	strb	r0, [r1, #10]
 800e1f4:	4413      	add	r3, r2
 800e1f6:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800e1fa:	701a      	strb	r2, [r3, #0]
                break;
 800e1fc:	e00a      	b.n	800e214 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        default:
            {
                break;
 800e1fe:	bf00      	nop
 800e200:	e008      	b.n	800e214 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800e202:	bf00      	nop
 800e204:	e006      	b.n	800e214 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800e206:	bf00      	nop
 800e208:	e004      	b.n	800e214 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800e20a:	bf00      	nop
 800e20c:	e002      	b.n	800e214 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800e20e:	bf00      	nop
 800e210:	e000      	b.n	800e214 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800e212:	bf00      	nop
            }
    }

    if( ComplianceTestState.DataBufferSize != 0 )
 800e214:	4b0f      	ldr	r3, [pc, #60]	; (800e254 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e216:	7a9b      	ldrb	r3, [r3, #10]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d00c      	beq.n	800e236 <LmhpComplianceOnMcpsIndication+0x78e>
    {
        if( ProcessTimer.IsRunning == 0U)
 800e21c:	4b0f      	ldr	r3, [pc, #60]	; (800e25c <LmhpComplianceOnMcpsIndication+0x7b4>)
 800e21e:	7a5b      	ldrb	r3, [r3, #9]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d114      	bne.n	800e24e <LmhpComplianceOnMcpsIndication+0x7a6>
        {
            TimerSetValue( &ProcessTimer, 1000 );
 800e224:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800e228:	480c      	ldr	r0, [pc, #48]	; (800e25c <LmhpComplianceOnMcpsIndication+0x7b4>)
 800e22a:	f00f f835 	bl	801d298 <UTIL_TIMER_SetPeriod>
            TimerStart( &ProcessTimer );
 800e22e:	480b      	ldr	r0, [pc, #44]	; (800e25c <LmhpComplianceOnMcpsIndication+0x7b4>)
 800e230:	f00e ff54 	bl	801d0dc <UTIL_TIMER_Start>
 800e234:	e00b      	b.n	800e24e <LmhpComplianceOnMcpsIndication+0x7a6>
        }
    }
    else
    {
        /* Abort any pending Tx as a new command has been processed */
        TimerStop( &ProcessTimer );
 800e236:	4809      	ldr	r0, [pc, #36]	; (800e25c <LmhpComplianceOnMcpsIndication+0x7b4>)
 800e238:	f00e ffbe 	bl	801d1b8 <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 800e23c:	4b05      	ldr	r3, [pc, #20]	; (800e254 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800e23e:	2200      	movs	r2, #0
 800e240:	705a      	strb	r2, [r3, #1]
 800e242:	e004      	b.n	800e24e <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 800e244:	bf00      	nop
 800e246:	e002      	b.n	800e24e <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 800e248:	bf00      	nop
 800e24a:	e000      	b.n	800e24e <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 800e24c:	bf00      	nop
    }
}
 800e24e:	3790      	adds	r7, #144	; 0x90
 800e250:	46bd      	mov	sp, r7
 800e252:	bdb0      	pop	{r4, r5, r7, pc}
 800e254:	200006ec 	.word	0x200006ec
 800e258:	20000724 	.word	0x20000724
 800e25c:	20000728 	.word	0x20000728

0800e260 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800e260:	b480      	push	{r7}
 800e262:	b083      	sub	sp, #12
 800e264:	af00      	add	r7, sp, #0
 800e266:	6078      	str	r0, [r7, #4]
                }
                break;
            }
#endif /* CLASS_B not available */
        default:
            break;
 800e268:	bf00      	nop
    }
}
 800e26a:	bf00      	nop
 800e26c:	370c      	adds	r7, #12
 800e26e:	46bd      	mov	sp, r7
 800e270:	bc80      	pop	{r7}
 800e272:	4770      	bx	lr

0800e274 <LmhpComplianceOnMlmeIndication>:

static void LmhpComplianceOnMlmeIndication( MlmeIndication_t *mlmeIndication )
{
 800e274:	b480      	push	{r7}
 800e276:	b083      	sub	sp, #12
 800e278:	af00      	add	r7, sp, #0
 800e27a:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800e27c:	4b05      	ldr	r3, [pc, #20]	; (800e294 <LmhpComplianceOnMlmeIndication+0x20>)
 800e27e:	781b      	ldrb	r3, [r3, #0]
 800e280:	f083 0301 	eor.w	r3, r3, #1
 800e284:	b2db      	uxtb	r3, r3
 800e286:	2b00      	cmp	r3, #0
    {
        return;
 800e288:	bf00      	nop
            }
#endif /* CLASS_B not available */
        default:
            break;
    }
}
 800e28a:	370c      	adds	r7, #12
 800e28c:	46bd      	mov	sp, r7
 800e28e:	bc80      	pop	{r7}
 800e290:	4770      	bx	lr
 800e292:	bf00      	nop
 800e294:	200006ec 	.word	0x200006ec

0800e298 <OnProcessTimer>:
    }
}
#endif /* CLASS_B not available */

static void OnProcessTimer( void *context )
{
 800e298:	b580      	push	{r7, lr}
 800e29a:	b082      	sub	sp, #8
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.DataBufferSize != 0 )
 800e2a0:	4b08      	ldr	r3, [pc, #32]	; (800e2c4 <OnProcessTimer+0x2c>)
 800e2a2:	7a9b      	ldrb	r3, [r3, #10]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d002      	beq.n	800e2ae <OnProcessTimer+0x16>
    {
        ComplianceTestState.IsTxPending = true;
 800e2a8:	4b06      	ldr	r3, [pc, #24]	; (800e2c4 <OnProcessTimer+0x2c>)
 800e2aa:	2201      	movs	r2, #1
 800e2ac:	705a      	strb	r2, [r3, #1]
    }
    if( CompliancePackage.OnPackageProcessEvent != NULL )
 800e2ae:	4b06      	ldr	r3, [pc, #24]	; (800e2c8 <OnProcessTimer+0x30>)
 800e2b0:	695b      	ldr	r3, [r3, #20]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d002      	beq.n	800e2bc <OnProcessTimer+0x24>
    {
        CompliancePackage.OnPackageProcessEvent();
 800e2b6:	4b04      	ldr	r3, [pc, #16]	; (800e2c8 <OnProcessTimer+0x30>)
 800e2b8:	695b      	ldr	r3, [r3, #20]
 800e2ba:	4798      	blx	r3
    }
}
 800e2bc:	bf00      	nop
 800e2be:	3708      	adds	r7, #8
 800e2c0:	46bd      	mov	sp, r7
 800e2c2:	bd80      	pop	{r7, pc}
 800e2c4:	200006ec 	.word	0x200006ec
 800e2c8:	200000d8 	.word	0x200000d8

0800e2cc <LmhpPackagesRegistrationInit>:

/* Private variables ---------------------------------------------------------*/

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmhpPackagesRegistrationInit( Version_t *fwVersion )
{
 800e2cc:	b480      	push	{r7}
 800e2ce:	b083      	sub	sp, #12
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
        return LORAMAC_HANDLER_ERROR;
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
 800e2d4:	2300      	movs	r3, #0
}
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	370c      	adds	r7, #12
 800e2da:	46bd      	mov	sp, r7
 800e2dc:	bc80      	pop	{r7}
 800e2de:	4770      	bx	lr

0800e2e0 <LmhpPackagesRegister>:

LmHandlerErrorStatus_t LmhpPackagesRegister( uint8_t id, LmhPackage_t **package )
{
 800e2e0:	b480      	push	{r7}
 800e2e2:	b083      	sub	sp, #12
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	6039      	str	r1, [r7, #0]
 800e2ea:	71fb      	strb	r3, [r7, #7]
                break;
            }
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
 800e2ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	370c      	adds	r7, #12
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	bc80      	pop	{r7}
 800e2f8:	4770      	bx	lr
	...

0800e2fc <OnRadioTxDone>:
}RxDoneParams_t;

static RxDoneParams_t RxDoneParams;

static void OnRadioTxDone( void )
{
 800e2fc:	b590      	push	{r4, r7, lr}
 800e2fe:	b083      	sub	sp, #12
 800e300:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800e302:	f00f f873 	bl	801d3ec <UTIL_TIMER_GetCurrentTime>
 800e306:	4603      	mov	r3, r0
 800e308:	4a0f      	ldr	r2, [pc, #60]	; (800e348 <OnRadioTxDone+0x4c>)
 800e30a:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800e30c:	4c0f      	ldr	r4, [pc, #60]	; (800e34c <OnRadioTxDone+0x50>)
 800e30e:	463b      	mov	r3, r7
 800e310:	4618      	mov	r0, r3
 800e312:	f00e f9e9 	bl	801c6e8 <SysTimeGet>
 800e316:	f504 734e 	add.w	r3, r4, #824	; 0x338
 800e31a:	463a      	mov	r2, r7
 800e31c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e320:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800e324:	4a0a      	ldr	r2, [pc, #40]	; (800e350 <OnRadioTxDone+0x54>)
 800e326:	7813      	ldrb	r3, [r2, #0]
 800e328:	f043 0320 	orr.w	r3, r3, #32
 800e32c:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800e32e:	f003 fa71 	bl	8011814 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800e332:	4b08      	ldr	r3, [pc, #32]	; (800e354 <OnRadioTxDone+0x58>)
 800e334:	2201      	movs	r2, #1
 800e336:	2100      	movs	r1, #0
 800e338:	2002      	movs	r0, #2
 800e33a:	f00f f947 	bl	801d5cc <UTIL_ADV_TRACE_COND_FSend>
}
 800e33e:	bf00      	nop
 800e340:	370c      	adds	r7, #12
 800e342:	46bd      	mov	sp, r7
 800e344:	bd90      	pop	{r4, r7, pc}
 800e346:	bf00      	nop
 800e348:	20001888 	.word	0x20001888
 800e34c:	20000740 	.word	0x20000740
 800e350:	20001884 	.word	0x20001884
 800e354:	0801e2f0 	.word	0x0801e2f0

0800e358 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b084      	sub	sp, #16
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	60f8      	str	r0, [r7, #12]
 800e360:	4608      	mov	r0, r1
 800e362:	4611      	mov	r1, r2
 800e364:	461a      	mov	r2, r3
 800e366:	4603      	mov	r3, r0
 800e368:	817b      	strh	r3, [r7, #10]
 800e36a:	460b      	mov	r3, r1
 800e36c:	813b      	strh	r3, [r7, #8]
 800e36e:	4613      	mov	r3, r2
 800e370:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800e372:	f00f f83b 	bl	801d3ec <UTIL_TIMER_GetCurrentTime>
 800e376:	4603      	mov	r3, r0
 800e378:	4a11      	ldr	r2, [pc, #68]	; (800e3c0 <OnRadioRxDone+0x68>)
 800e37a:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800e37c:	4a10      	ldr	r2, [pc, #64]	; (800e3c0 <OnRadioRxDone+0x68>)
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800e382:	4a0f      	ldr	r2, [pc, #60]	; (800e3c0 <OnRadioRxDone+0x68>)
 800e384:	897b      	ldrh	r3, [r7, #10]
 800e386:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800e388:	4a0d      	ldr	r2, [pc, #52]	; (800e3c0 <OnRadioRxDone+0x68>)
 800e38a:	893b      	ldrh	r3, [r7, #8]
 800e38c:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800e38e:	4a0c      	ldr	r2, [pc, #48]	; (800e3c0 <OnRadioRxDone+0x68>)
 800e390:	79fb      	ldrb	r3, [r7, #7]
 800e392:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800e394:	4a0b      	ldr	r2, [pc, #44]	; (800e3c4 <OnRadioRxDone+0x6c>)
 800e396:	7813      	ldrb	r3, [r2, #0]
 800e398:	f043 0310 	orr.w	r3, r3, #16
 800e39c:	7013      	strb	r3, [r2, #0]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 800e39e:	4a09      	ldr	r2, [pc, #36]	; (800e3c4 <OnRadioRxDone+0x6c>)
 800e3a0:	7813      	ldrb	r3, [r2, #0]
 800e3a2:	f043 0301 	orr.w	r3, r3, #1
 800e3a6:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    OnMacProcessNotify( );
 800e3a8:	f003 fa34 	bl	8011814 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800e3ac:	4b06      	ldr	r3, [pc, #24]	; (800e3c8 <OnRadioRxDone+0x70>)
 800e3ae:	2201      	movs	r2, #1
 800e3b0:	2100      	movs	r1, #0
 800e3b2:	2002      	movs	r0, #2
 800e3b4:	f00f f90a 	bl	801d5cc <UTIL_ADV_TRACE_COND_FSend>
}
 800e3b8:	bf00      	nop
 800e3ba:	3710      	adds	r7, #16
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	bd80      	pop	{r7, pc}
 800e3c0:	2000188c 	.word	0x2000188c
 800e3c4:	20001884 	.word	0x20001884
 800e3c8:	0801e300 	.word	0x0801e300

0800e3cc <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800e3d0:	4a07      	ldr	r2, [pc, #28]	; (800e3f0 <OnRadioTxTimeout+0x24>)
 800e3d2:	7813      	ldrb	r3, [r2, #0]
 800e3d4:	f043 0308 	orr.w	r3, r3, #8
 800e3d8:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800e3da:	f003 fa1b 	bl	8011814 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800e3de:	4b05      	ldr	r3, [pc, #20]	; (800e3f4 <OnRadioTxTimeout+0x28>)
 800e3e0:	2201      	movs	r2, #1
 800e3e2:	2100      	movs	r1, #0
 800e3e4:	2002      	movs	r0, #2
 800e3e6:	f00f f8f1 	bl	801d5cc <UTIL_ADV_TRACE_COND_FSend>
}
 800e3ea:	bf00      	nop
 800e3ec:	bd80      	pop	{r7, pc}
 800e3ee:	bf00      	nop
 800e3f0:	20001884 	.word	0x20001884
 800e3f4:	0801e310 	.word	0x0801e310

0800e3f8 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800e3fc:	4a04      	ldr	r2, [pc, #16]	; (800e410 <OnRadioRxError+0x18>)
 800e3fe:	7813      	ldrb	r3, [r2, #0]
 800e400:	f043 0304 	orr.w	r3, r3, #4
 800e404:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800e406:	f003 fa05 	bl	8011814 <OnMacProcessNotify>
}
 800e40a:	bf00      	nop
 800e40c:	bd80      	pop	{r7, pc}
 800e40e:	bf00      	nop
 800e410:	20001884 	.word	0x20001884

0800e414 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800e414:	b580      	push	{r7, lr}
 800e416:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800e418:	4a07      	ldr	r2, [pc, #28]	; (800e438 <OnRadioRxTimeout+0x24>)
 800e41a:	7813      	ldrb	r3, [r2, #0]
 800e41c:	f043 0302 	orr.w	r3, r3, #2
 800e420:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800e422:	f003 f9f7 	bl	8011814 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800e426:	4b05      	ldr	r3, [pc, #20]	; (800e43c <OnRadioRxTimeout+0x28>)
 800e428:	2201      	movs	r2, #1
 800e42a:	2100      	movs	r1, #0
 800e42c:	2002      	movs	r0, #2
 800e42e:	f00f f8cd 	bl	801d5cc <UTIL_ADV_TRACE_COND_FSend>
}
 800e432:	bf00      	nop
 800e434:	bd80      	pop	{r7, pc}
 800e436:	bf00      	nop
 800e438:	20001884 	.word	0x20001884
 800e43c:	0801e320 	.word	0x0801e320

0800e440 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800e440:	b480      	push	{r7}
 800e442:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e444:	4b08      	ldr	r3, [pc, #32]	; (800e468 <UpdateRxSlotIdleState+0x28>)
 800e446:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800e44a:	2b02      	cmp	r3, #2
 800e44c:	d004      	beq.n	800e458 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800e44e:	4b07      	ldr	r3, [pc, #28]	; (800e46c <UpdateRxSlotIdleState+0x2c>)
 800e450:	2206      	movs	r2, #6
 800e452:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800e456:	e003      	b.n	800e460 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800e458:	4b04      	ldr	r3, [pc, #16]	; (800e46c <UpdateRxSlotIdleState+0x2c>)
 800e45a:	2202      	movs	r2, #2
 800e45c:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
}
 800e460:	bf00      	nop
 800e462:	46bd      	mov	sp, r7
 800e464:	bc80      	pop	{r7}
 800e466:	4770      	bx	lr
 800e468:	20000c5c 	.word	0x20000c5c
 800e46c:	20000740 	.word	0x20000740

0800e470 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800e470:	b580      	push	{r7, lr}
 800e472:	b092      	sub	sp, #72	; 0x48
 800e474:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e476:	4b4a      	ldr	r3, [pc, #296]	; (800e5a0 <ProcessRadioTxDone+0x130>)
 800e478:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800e47c:	2b02      	cmp	r3, #2
 800e47e:	d002      	beq.n	800e486 <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800e480:	4b48      	ldr	r3, [pc, #288]	; (800e5a4 <ProcessRadioTxDone+0x134>)
 800e482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e484:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e486:	f3ef 8310 	mrs	r3, PRIMASK
 800e48a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800e48c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    CRITICAL_SECTION_BEGIN( );
 800e48e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
 800e490:	b672      	cpsid	i
}
 800e492:	bf00      	nop
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 800e494:	f00e ffaa 	bl	801d3ec <UTIL_TIMER_GetCurrentTime>
 800e498:	4602      	mov	r2, r0
 800e49a:	4b43      	ldr	r3, [pc, #268]	; (800e5a8 <ProcessRadioTxDone+0x138>)
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	1ad3      	subs	r3, r2, r3
 800e4a0:	63bb      	str	r3, [r7, #56]	; 0x38
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 800e4a2:	4b42      	ldr	r3, [pc, #264]	; (800e5ac <ProcessRadioTxDone+0x13c>)
 800e4a4:	f8d3 23b0 	ldr.w	r2, [r3, #944]	; 0x3b0
 800e4a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4aa:	1ad3      	subs	r3, r2, r3
 800e4ac:	4619      	mov	r1, r3
 800e4ae:	4840      	ldr	r0, [pc, #256]	; (800e5b0 <ProcessRadioTxDone+0x140>)
 800e4b0:	f00e fef2 	bl	801d298 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800e4b4:	483e      	ldr	r0, [pc, #248]	; (800e5b0 <ProcessRadioTxDone+0x140>)
 800e4b6:	f00e fe11 	bl	801d0dc <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 800e4ba:	4b3c      	ldr	r3, [pc, #240]	; (800e5ac <ProcessRadioTxDone+0x13c>)
 800e4bc:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 800e4c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4c2:	1ad3      	subs	r3, r2, r3
 800e4c4:	4619      	mov	r1, r3
 800e4c6:	483b      	ldr	r0, [pc, #236]	; (800e5b4 <ProcessRadioTxDone+0x144>)
 800e4c8:	f00e fee6 	bl	801d298 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800e4cc:	4839      	ldr	r0, [pc, #228]	; (800e5b4 <ProcessRadioTxDone+0x144>)
 800e4ce:	f00e fe05 	bl	801d0dc <UTIL_TIMER_Start>
 800e4d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4d4:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e4d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4d8:	f383 8810 	msr	PRIMASK, r3
}
 800e4dc:	bf00      	nop
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
        TimerStart( &MacCtx.AckTimeoutTimer );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.NodeAckRequested == true )
 800e4de:	4b33      	ldr	r3, [pc, #204]	; (800e5ac <ProcessRadioTxDone+0x13c>)
 800e4e0:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d01a      	beq.n	800e51e <ProcessRadioTxDone+0xae>
    {
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 800e4e8:	2315      	movs	r3, #21
 800e4ea:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e4ee:	4b2c      	ldr	r3, [pc, #176]	; (800e5a0 <ProcessRadioTxDone+0x130>)
 800e4f0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800e4f4:	f107 0220 	add.w	r2, r7, #32
 800e4f8:	4611      	mov	r1, r2
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	f006 fec0 	bl	8015280 <RegionGetPhyParam>
 800e500:	4603      	mov	r3, r0
 800e502:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800e504:	4b29      	ldr	r3, [pc, #164]	; (800e5ac <ProcessRadioTxDone+0x13c>)
 800e506:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 800e50a:	69fb      	ldr	r3, [r7, #28]
 800e50c:	4413      	add	r3, r2
 800e50e:	4619      	mov	r1, r3
 800e510:	4829      	ldr	r0, [pc, #164]	; (800e5b8 <ProcessRadioTxDone+0x148>)
 800e512:	f00e fec1 	bl	801d298 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 800e516:	4828      	ldr	r0, [pc, #160]	; (800e5b8 <ProcessRadioTxDone+0x148>)
 800e518:	f00e fde0 	bl	801d0dc <UTIL_TIMER_Start>
 800e51c:	e003      	b.n	800e526 <ProcessRadioTxDone+0xb6>
    }
    else
    {
        // Transmission successful, setup status directly
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e51e:	4b23      	ldr	r3, [pc, #140]	; (800e5ac <ProcessRadioTxDone+0x13c>)
 800e520:	2200      	movs	r2, #0
 800e522:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800e526:	4b20      	ldr	r3, [pc, #128]	; (800e5a8 <ProcessRadioTxDone+0x138>)
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	4a1d      	ldr	r2, [pc, #116]	; (800e5a0 <ProcessRadioTxDone+0x130>)
 800e52c:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800e52e:	4b1f      	ldr	r3, [pc, #124]	; (800e5ac <ProcessRadioTxDone+0x13c>)
 800e530:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 800e534:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800e536:	4b1c      	ldr	r3, [pc, #112]	; (800e5a8 <ProcessRadioTxDone+0x138>)
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800e53c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e540:	4618      	mov	r0, r3
 800e542:	f00e f909 	bl	801c758 <SysTimeGetMcuTime>
 800e546:	4638      	mov	r0, r7
 800e548:	4b15      	ldr	r3, [pc, #84]	; (800e5a0 <ProcessRadioTxDone+0x130>)
 800e54a:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 800e54e:	9200      	str	r2, [sp, #0]
 800e550:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800e554:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800e558:	ca06      	ldmia	r2, {r1, r2}
 800e55a:	f00e f85e 	bl	801c61a <SysTimeSub>
 800e55e:	f107 0314 	add.w	r3, r7, #20
 800e562:	463a      	mov	r2, r7
 800e564:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e568:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800e56c:	4b0f      	ldr	r3, [pc, #60]	; (800e5ac <ProcessRadioTxDone+0x13c>)
 800e56e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800e572:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800e574:	2301      	movs	r3, #1
 800e576:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800e578:	4b09      	ldr	r3, [pc, #36]	; (800e5a0 <ProcessRadioTxDone+0x130>)
 800e57a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d101      	bne.n	800e586 <ProcessRadioTxDone+0x116>
    {
        txDone.Joined  = false;
 800e582:	2300      	movs	r3, #0
 800e584:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800e586:	4b06      	ldr	r3, [pc, #24]	; (800e5a0 <ProcessRadioTxDone+0x130>)
 800e588:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800e58c:	f107 0208 	add.w	r2, r7, #8
 800e590:	4611      	mov	r1, r2
 800e592:	4618      	mov	r0, r3
 800e594:	f006 fe95 	bl	80152c2 <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */
}
 800e598:	bf00      	nop
 800e59a:	3740      	adds	r7, #64	; 0x40
 800e59c:	46bd      	mov	sp, r7
 800e59e:	bd80      	pop	{r7, pc}
 800e5a0:	20000c5c 	.word	0x20000c5c
 800e5a4:	0801ea54 	.word	0x0801ea54
 800e5a8:	20001888 	.word	0x20001888
 800e5ac:	20000740 	.word	0x20000740
 800e5b0:	20000ac0 	.word	0x20000ac0
 800e5b4:	20000ad8 	.word	0x20000ad8
 800e5b8:	20000b40 	.word	0x20000b40

0800e5bc <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800e5c0:	4b10      	ldr	r3, [pc, #64]	; (800e604 <PrepareRxDoneAbort+0x48>)
 800e5c2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e5c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e5ca:	4a0e      	ldr	r2, [pc, #56]	; (800e604 <PrepareRxDoneAbort+0x48>)
 800e5cc:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 800e5d0:	4b0c      	ldr	r3, [pc, #48]	; (800e604 <PrepareRxDoneAbort+0x48>)
 800e5d2:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d002      	beq.n	800e5e0 <PrepareRxDoneAbort+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        OnRetransmitTimeoutTimerEvent( NULL );
 800e5da:	2000      	movs	r0, #0
 800e5dc:	f001 f9fa 	bl	800f9d4 <OnRetransmitTimeoutTimerEvent>
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800e5e0:	4a08      	ldr	r2, [pc, #32]	; (800e604 <PrepareRxDoneAbort+0x48>)
 800e5e2:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800e5e6:	f043 0302 	orr.w	r3, r3, #2
 800e5ea:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    MacCtx.MacFlags.Bits.MacDone = 1;
 800e5ee:	4a05      	ldr	r2, [pc, #20]	; (800e604 <PrepareRxDoneAbort+0x48>)
 800e5f0:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800e5f4:	f043 0310 	orr.w	r3, r3, #16
 800e5f8:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491

    UpdateRxSlotIdleState( );
 800e5fc:	f7ff ff20 	bl	800e440 <UpdateRxSlotIdleState>
}
 800e600:	bf00      	nop
 800e602:	bd80      	pop	{r7, pc}
 800e604:	20000740 	.word	0x20000740

0800e608 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800e608:	b590      	push	{r4, r7, lr}
 800e60a:	b0ab      	sub	sp, #172	; 0xac
 800e60c:	af02      	add	r7, sp, #8
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800e60e:	2312      	movs	r3, #18
 800e610:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800e614:	4b81      	ldr	r3, [pc, #516]	; (800e81c <ProcessRadioRxDone+0x214>)
 800e616:	685b      	ldr	r3, [r3, #4]
 800e618:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    uint16_t size = RxDoneParams.Size;
 800e61c:	4b7f      	ldr	r3, [pc, #508]	; (800e81c <ProcessRadioRxDone+0x214>)
 800e61e:	891b      	ldrh	r3, [r3, #8]
 800e620:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
    int16_t rssi = RxDoneParams.Rssi;
 800e624:	4b7d      	ldr	r3, [pc, #500]	; (800e81c <ProcessRadioRxDone+0x214>)
 800e626:	895b      	ldrh	r3, [r3, #10]
 800e628:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
    int8_t snr = RxDoneParams.Snr;
 800e62c:	4b7b      	ldr	r3, [pc, #492]	; (800e81c <ProcessRadioRxDone+0x214>)
 800e62e:	7b1b      	ldrb	r3, [r3, #12]
 800e630:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

    uint8_t pktHeaderLen = 0;
 800e634:	2300      	movs	r3, #0
 800e636:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e

    uint32_t downLinkCounter = 0;
 800e63a:	2300      	movs	r3, #0
 800e63c:	617b      	str	r3, [r7, #20]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800e63e:	4b78      	ldr	r3, [pc, #480]	; (800e820 <ProcessRadioRxDone+0x218>)
 800e640:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e644:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    uint8_t multicast = 0;
 800e648:	2300      	movs	r3, #0
 800e64a:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800e64e:	2301      	movs	r3, #1
 800e650:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
    FCntIdentifier_t fCntID;
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    uint8_t macCmdPayload[2] = { 0 };
#endif /* LORAMAC_VERSION */
    Mlme_t joinType = MLME_JOIN;
 800e654:	2301      	movs	r3, #1
 800e656:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 800e65a:	4a72      	ldr	r2, [pc, #456]	; (800e824 <ProcessRadioRxDone+0x21c>)
 800e65c:	7813      	ldrb	r3, [r2, #0]
 800e65e:	f36f 0300 	bfc	r3, #0, #1
 800e662:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 800e664:	4b70      	ldr	r3, [pc, #448]	; (800e828 <ProcessRadioRxDone+0x220>)
 800e666:	2200      	movs	r2, #0
 800e668:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
    MacCtx.RxStatus.Rssi = rssi;
 800e66c:	4a6e      	ldr	r2, [pc, #440]	; (800e828 <ProcessRadioRxDone+0x220>)
 800e66e:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800e672:	f8a2 348c 	strh.w	r3, [r2, #1164]	; 0x48c
    MacCtx.RxStatus.Snr = snr;
 800e676:	4a6c      	ldr	r2, [pc, #432]	; (800e828 <ProcessRadioRxDone+0x220>)
 800e678:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e67c:	f882 348e 	strb.w	r3, [r2, #1166]	; 0x48e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800e680:	4b69      	ldr	r3, [pc, #420]	; (800e828 <ProcessRadioRxDone+0x220>)
 800e682:	f893 2490 	ldrb.w	r2, [r3, #1168]	; 0x490
 800e686:	4b68      	ldr	r3, [pc, #416]	; (800e828 <ProcessRadioRxDone+0x220>)
 800e688:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
    MacCtx.McpsIndication.Port = 0;
 800e68c:	4b66      	ldr	r3, [pc, #408]	; (800e828 <ProcessRadioRxDone+0x220>)
 800e68e:	2200      	movs	r2, #0
 800e690:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
    MacCtx.McpsIndication.Multicast = 0;
 800e694:	4b64      	ldr	r3, [pc, #400]	; (800e828 <ProcessRadioRxDone+0x220>)
 800e696:	2200      	movs	r2, #0
 800e698:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 800e69c:	4b62      	ldr	r3, [pc, #392]	; (800e828 <ProcessRadioRxDone+0x220>)
 800e69e:	2200      	movs	r2, #0
 800e6a0:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
    MacCtx.McpsIndication.Buffer = NULL;
 800e6a4:	4b60      	ldr	r3, [pc, #384]	; (800e828 <ProcessRadioRxDone+0x220>)
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
    MacCtx.McpsIndication.BufferSize = 0;
 800e6ac:	4b5e      	ldr	r3, [pc, #376]	; (800e828 <ProcessRadioRxDone+0x220>)
 800e6ae:	2200      	movs	r2, #0
 800e6b0:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.RxData = false;
 800e6b4:	4b5c      	ldr	r3, [pc, #368]	; (800e828 <ProcessRadioRxDone+0x220>)
 800e6b6:	2200      	movs	r2, #0
 800e6b8:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
    MacCtx.McpsIndication.AckReceived = false;
 800e6bc:	4b5a      	ldr	r3, [pc, #360]	; (800e828 <ProcessRadioRxDone+0x220>)
 800e6be:	2200      	movs	r2, #0
 800e6c0:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800e6c4:	4b58      	ldr	r3, [pc, #352]	; (800e828 <ProcessRadioRxDone+0x220>)
 800e6c6:	2200      	movs	r2, #0
 800e6c8:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800e6cc:	4b56      	ldr	r3, [pc, #344]	; (800e828 <ProcessRadioRxDone+0x220>)
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
    MacCtx.McpsIndication.DevAddress = 0;
 800e6d4:	4b54      	ldr	r3, [pc, #336]	; (800e828 <ProcessRadioRxDone+0x220>)
 800e6d6:	2200      	movs	r2, #0
 800e6d8:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800e6dc:	4b52      	ldr	r3, [pc, #328]	; (800e828 <ProcessRadioRxDone+0x220>)
 800e6de:	2200      	movs	r2, #0
 800e6e0:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.McpsIndication.ResponseTimeout = 0;
 800e6e4:	4b50      	ldr	r3, [pc, #320]	; (800e828 <ProcessRadioRxDone+0x220>)
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 800e6ec:	4b4f      	ldr	r3, [pc, #316]	; (800e82c <ProcessRadioRxDone+0x224>)
 800e6ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6f0:	4798      	blx	r3

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800e6f2:	4b4d      	ldr	r3, [pc, #308]	; (800e828 <ProcessRadioRxDone+0x220>)
 800e6f4:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d102      	bne.n	800e702 <ProcessRadioRxDone+0xfa>
    {
        TimerStop( &MacCtx.RxWindowTimer2 );
 800e6fc:	484c      	ldr	r0, [pc, #304]	; (800e830 <ProcessRadioRxDone+0x228>)
 800e6fe:	f00e fd5b 	bl	801d1b8 <UTIL_TIMER_Stop>
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800e702:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800e706:	4619      	mov	r1, r3
 800e708:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800e70c:	f004 fe28 	bl	8013360 <LoRaMacClassBRxBeacon>
 800e710:	4603      	mov	r3, r0
 800e712:	2b00      	cmp	r3, #0
 800e714:	d00b      	beq.n	800e72e <ProcessRadioRxDone+0x126>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800e716:	4a44      	ldr	r2, [pc, #272]	; (800e828 <ProcessRadioRxDone+0x220>)
 800e718:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800e71c:	f8a2 347e 	strh.w	r3, [r2, #1150]	; 0x47e
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800e720:	4a41      	ldr	r2, [pc, #260]	; (800e828 <ProcessRadioRxDone+0x220>)
 800e722:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e726:	f882 3480 	strb.w	r3, [r2, #1152]	; 0x480
        return;
 800e72a:	f000 bc75 	b.w	800f018 <ProcessRadioRxDone+0xa10>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800e72e:	4b3c      	ldr	r3, [pc, #240]	; (800e820 <ProcessRadioRxDone+0x218>)
 800e730:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800e734:	2b01      	cmp	r3, #1
 800e736:	d11e      	bne.n	800e776 <ProcessRadioRxDone+0x16e>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800e738:	f004 fe25 	bl	8013386 <LoRaMacClassBIsPingExpected>
 800e73c:	4603      	mov	r3, r0
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d00a      	beq.n	800e758 <ProcessRadioRxDone+0x150>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e742:	2000      	movs	r0, #0
 800e744:	f004 fdd6 	bl	80132f4 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800e748:	2000      	movs	r0, #0
 800e74a:	f004 fdf7 	bl	801333c <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800e74e:	4b36      	ldr	r3, [pc, #216]	; (800e828 <ProcessRadioRxDone+0x220>)
 800e750:	2204      	movs	r2, #4
 800e752:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
 800e756:	e00e      	b.n	800e776 <ProcessRadioRxDone+0x16e>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800e758:	f004 fe1c 	bl	8013394 <LoRaMacClassBIsMulticastExpected>
 800e75c:	4603      	mov	r3, r0
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d009      	beq.n	800e776 <ProcessRadioRxDone+0x16e>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e762:	2000      	movs	r0, #0
 800e764:	f004 fdd0 	bl	8013308 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800e768:	2000      	movs	r0, #0
 800e76a:	f004 fdf0 	bl	801334e <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800e76e:	4b2e      	ldr	r3, [pc, #184]	; (800e828 <ProcessRadioRxDone+0x220>)
 800e770:	2205      	movs	r2, #5
 800e772:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
        }
    }

    // Abort on empty radio frames
    if( size == 0 )
 800e776:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d107      	bne.n	800e78e <ProcessRadioRxDone+0x186>
    {
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e77e:	4b2a      	ldr	r3, [pc, #168]	; (800e828 <ProcessRadioRxDone+0x220>)
 800e780:	2201      	movs	r2, #1
 800e782:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
        PrepareRxDoneAbort( );
 800e786:	f7ff ff19 	bl	800e5bc <PrepareRxDoneAbort>
        return;
 800e78a:	f000 bc45 	b.w	800f018 <ProcessRadioRxDone+0xa10>
    }

    macHdr.Value = payload[pktHeaderLen++];
 800e78e:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800e792:	1c5a      	adds	r2, r3, #1
 800e794:	f887 208e 	strb.w	r2, [r7, #142]	; 0x8e
 800e798:	461a      	mov	r2, r3
 800e79a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e79e:	4413      	add	r3, r2
 800e7a0:	781b      	ldrb	r3, [r3, #0]
 800e7a2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
        PrepareRxDoneAbort( );
        return;
    }
#endif /* LORAMAC_VERSION */

    switch( macHdr.Bits.MType )
 800e7a6:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800e7aa:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800e7ae:	b2db      	uxtb	r3, r3
 800e7b0:	3b01      	subs	r3, #1
 800e7b2:	2b06      	cmp	r3, #6
 800e7b4:	f200 8403 	bhi.w	800efbe <ProcessRadioRxDone+0x9b6>
 800e7b8:	a201      	add	r2, pc, #4	; (adr r2, 800e7c0 <ProcessRadioRxDone+0x1b8>)
 800e7ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7be:	bf00      	nop
 800e7c0:	0800e7dd 	.word	0x0800e7dd
 800e7c4:	0800efbf 	.word	0x0800efbf
 800e7c8:	0800e9db 	.word	0x0800e9db
 800e7cc:	0800efbf 	.word	0x0800efbf
 800e7d0:	0800e9d3 	.word	0x0800e9d3
 800e7d4:	0800efbf 	.word	0x0800efbf
 800e7d8:	0800ef63 	.word	0x0800ef63
    {
        case FRAME_TYPE_JOIN_ACCEPT:
        {
            uint8_t joinEui[SE_EUI_SIZE];
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800e7dc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800e7e0:	2b10      	cmp	r3, #16
 800e7e2:	d807      	bhi.n	800e7f4 <ProcessRadioRxDone+0x1ec>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e7e4:	4b10      	ldr	r3, [pc, #64]	; (800e828 <ProcessRadioRxDone+0x220>)
 800e7e6:	2201      	movs	r2, #1
 800e7e8:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800e7ec:	f7ff fee6 	bl	800e5bc <PrepareRxDoneAbort>
                return;
 800e7f0:	f000 bc12 	b.w	800f018 <ProcessRadioRxDone+0xa10>
            }
            macMsgJoinAccept.Buffer = payload;
 800e7f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e7f8:	61bb      	str	r3, [r7, #24]
            macMsgJoinAccept.BufSize = size;
 800e7fa:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800e7fe:	b2db      	uxtb	r3, r3
 800e800:	773b      	strb	r3, [r7, #28]

            // Abort in case if the device is already joined and no rejoin request is ongoing.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
            if( ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) && ( Nvm.MacGroup2.IsRejoinAcceptPending == false ) )
#else
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800e802:	4b07      	ldr	r3, [pc, #28]	; (800e820 <ProcessRadioRxDone+0x218>)
 800e804:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d013      	beq.n	800e834 <ProcessRadioRxDone+0x22c>
#endif /* LORAMAC_VERSION */
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e80c:	4b06      	ldr	r3, [pc, #24]	; (800e828 <ProcessRadioRxDone+0x220>)
 800e80e:	2201      	movs	r2, #1
 800e810:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800e814:	f7ff fed2 	bl	800e5bc <PrepareRxDoneAbort>
                return;
 800e818:	e3fe      	b.n	800f018 <ProcessRadioRxDone+0xa10>
 800e81a:	bf00      	nop
 800e81c:	2000188c 	.word	0x2000188c
 800e820:	20000c5c 	.word	0x20000c5c
 800e824:	20001884 	.word	0x20001884
 800e828:	20000740 	.word	0x20000740
 800e82c:	0801ea54 	.word	0x0801ea54
 800e830:	20000ad8 	.word	0x20000ad8
            }

            SecureElementGetJoinEui( joinEui );
 800e834:	f107 0308 	add.w	r3, r7, #8
 800e838:	4618      	mov	r0, r3
 800e83a:	f7fd ff7d 	bl	800c738 <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 800e83e:	f107 0218 	add.w	r2, r7, #24
 800e842:	f107 0308 	add.w	r3, r7, #8
 800e846:	4619      	mov	r1, r3
 800e848:	20ff      	movs	r0, #255	; 0xff
 800e84a:	f005 ff95 	bl	8014778 <LoRaMacCryptoHandleJoinAccept>
 800e84e:	4603      	mov	r3, r0
 800e850:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
                joinType = MLME_REJOIN_2;
            }
#endif /* LORAMAC_VERSION */

            VerifyParams_t verifyRxDr;
            bool rxDrValid = false;
 800e854:	2300      	movs	r3, #0
 800e856:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800e85a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e85e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e862:	b2db      	uxtb	r3, r3
 800e864:	b25b      	sxtb	r3, r3
 800e866:	713b      	strb	r3, [r7, #4]
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e868:	4bb1      	ldr	r3, [pc, #708]	; (800eb30 <ProcessRadioRxDone+0x528>)
 800e86a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800e86e:	717b      	strb	r3, [r7, #5]
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 800e870:	4baf      	ldr	r3, [pc, #700]	; (800eb30 <ProcessRadioRxDone+0x528>)
 800e872:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800e876:	1d39      	adds	r1, r7, #4
 800e878:	2207      	movs	r2, #7
 800e87a:	4618      	mov	r0, r3
 800e87c:	f006 fd4e 	bl	801531c <RegionVerify>
 800e880:	4603      	mov	r3, r0
 800e882:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
 800e886:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	f040 8095 	bne.w	800e9ba <ProcessRadioRxDone+0x3b2>
 800e890:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800e894:	2b00      	cmp	r3, #0
 800e896:	f000 8090 	beq.w	800e9ba <ProcessRadioRxDone+0x3b2>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800e89a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e89e:	461a      	mov	r2, r3
 800e8a0:	4ba3      	ldr	r3, [pc, #652]	; (800eb30 <ProcessRadioRxDone+0x528>)
 800e8a2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800e8a6:	4ba2      	ldr	r3, [pc, #648]	; (800eb30 <ProcessRadioRxDone+0x528>)
 800e8a8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800e8ac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e8b0:	021b      	lsls	r3, r3, #8
 800e8b2:	4313      	orrs	r3, r2
 800e8b4:	4a9e      	ldr	r2, [pc, #632]	; (800eb30 <ProcessRadioRxDone+0x528>)
 800e8b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800e8ba:	4b9d      	ldr	r3, [pc, #628]	; (800eb30 <ProcessRadioRxDone+0x528>)
 800e8bc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800e8c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e8c4:	041b      	lsls	r3, r3, #16
 800e8c6:	4313      	orrs	r3, r2
 800e8c8:	4a99      	ldr	r2, [pc, #612]	; (800eb30 <ProcessRadioRxDone+0x528>)
 800e8ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800e8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8d0:	4a97      	ldr	r2, [pc, #604]	; (800eb30 <ProcessRadioRxDone+0x528>)
 800e8d2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
                // Update NVM DevAddrOTAA with network value
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 800e8d6:	4b96      	ldr	r3, [pc, #600]	; (800eb30 <ProcessRadioRxDone+0x528>)
 800e8d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e8dc:	4619      	mov	r1, r3
 800e8de:	2002      	movs	r0, #2
 800e8e0:	f7fd ff42 	bl	800c768 <SecureElementSetDevAddr>

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800e8e4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e8e8:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800e8ec:	b2db      	uxtb	r3, r3
 800e8ee:	461a      	mov	r2, r3
 800e8f0:	4b8f      	ldr	r3, [pc, #572]	; (800eb30 <ProcessRadioRxDone+0x528>)
 800e8f2:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800e8f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e8fa:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e8fe:	b2db      	uxtb	r3, r3
 800e900:	461a      	mov	r2, r3
 800e902:	4b8b      	ldr	r3, [pc, #556]	; (800eb30 <ProcessRadioRxDone+0x528>)
 800e904:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800e908:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e90c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e910:	b2db      	uxtb	r3, r3
 800e912:	461a      	mov	r2, r3
 800e914:	4b86      	ldr	r3, [pc, #536]	; (800eb30 <ProcessRadioRxDone+0x528>)
 800e916:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800e91a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800e91e:	461a      	mov	r2, r3
 800e920:	4b83      	ldr	r3, [pc, #524]	; (800eb30 <ProcessRadioRxDone+0x528>)
 800e922:	659a      	str	r2, [r3, #88]	; 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800e924:	4b82      	ldr	r3, [pc, #520]	; (800eb30 <ProcessRadioRxDone+0x528>)
 800e926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d102      	bne.n	800e932 <ProcessRadioRxDone+0x32a>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800e92c:	4b80      	ldr	r3, [pc, #512]	; (800eb30 <ProcessRadioRxDone+0x528>)
 800e92e:	2201      	movs	r2, #1
 800e930:	659a      	str	r2, [r3, #88]	; 0x58
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800e932:	4b7f      	ldr	r3, [pc, #508]	; (800eb30 <ProcessRadioRxDone+0x528>)
 800e934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e936:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e93a:	fb02 f303 	mul.w	r3, r2, r3
 800e93e:	4a7c      	ldr	r2, [pc, #496]	; (800eb30 <ProcessRadioRxDone+0x528>)
 800e940:	6593      	str	r3, [r2, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800e942:	4b7b      	ldr	r3, [pc, #492]	; (800eb30 <ProcessRadioRxDone+0x528>)
 800e944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e946:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800e94a:	4a79      	ldr	r2, [pc, #484]	; (800eb30 <ProcessRadioRxDone+0x528>)
 800e94c:	65d3      	str	r3, [r2, #92]	; 0x5c

                // Reset NbTrans to default value
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 800e94e:	4b78      	ldr	r3, [pc, #480]	; (800eb30 <ProcessRadioRxDone+0x528>)
 800e950:	2201      	movs	r2, #1
 800e952:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                else
                {
                    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
                }
#else
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800e956:	4b76      	ldr	r3, [pc, #472]	; (800eb30 <ProcessRadioRxDone+0x528>)
 800e958:	2200      	movs	r2, #0
 800e95a:	f883 212e 	strb.w	r2, [r3, #302]	; 0x12e
#endif /* LORAMAC_VERSION */

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800e95e:	f107 0318 	add.w	r3, r7, #24
 800e962:	3312      	adds	r3, #18
 800e964:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800e968:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800e96c:	b2db      	uxtb	r3, r3
 800e96e:	3b11      	subs	r3, #17
 800e970:	b2db      	uxtb	r3, r3
 800e972:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
 800e976:	4b6f      	ldr	r3, [pc, #444]	; (800eb34 <ProcessRadioRxDone+0x52c>)
 800e978:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 800e97c:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800e980:	4b6b      	ldr	r3, [pc, #428]	; (800eb30 <ProcessRadioRxDone+0x528>)
 800e982:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800e986:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 800e98a:	4611      	mov	r1, r2
 800e98c:	4618      	mov	r0, r3
 800e98e:	f006 fce6 	bl	801535e <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800e992:	4b67      	ldr	r3, [pc, #412]	; (800eb30 <ProcessRadioRxDone+0x528>)
 800e994:	2202      	movs	r2, #2
 800e996:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
                }
#endif /* LORAMAC_VERSION */

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 800e99a:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800e99e:	4618      	mov	r0, r3
 800e9a0:	f005 f9f4 	bl	8013d8c <LoRaMacConfirmQueueIsCmdActive>
 800e9a4:	4603      	mov	r3, r0
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	f000 8311 	beq.w	800efce <ProcessRadioRxDone+0x9c6>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 800e9ac:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800e9b0:	4619      	mov	r1, r3
 800e9b2:	2000      	movs	r0, #0
 800e9b4:	f005 f95e 	bl	8013c74 <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 800e9b8:	e309      	b.n	800efce <ProcessRadioRxDone+0x9c6>
#endif /* LORAMAC_VERSION */
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800e9ba:	2001      	movs	r0, #1
 800e9bc:	f005 f9e6 	bl	8013d8c <LoRaMacConfirmQueueIsCmdActive>
 800e9c0:	4603      	mov	r3, r0
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	f000 8302 	beq.w	800efcc <ProcessRadioRxDone+0x9c4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800e9c8:	2101      	movs	r1, #1
 800e9ca:	2007      	movs	r0, #7
 800e9cc:	f005 f952 	bl	8013c74 <LoRaMacConfirmQueueSetStatus>
                }
            }

            break;
 800e9d0:	e2fc      	b.n	800efcc <ProcessRadioRxDone+0x9c4>
        }
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800e9d2:	4b58      	ldr	r3, [pc, #352]	; (800eb34 <ProcessRadioRxDone+0x52c>)
 800e9d4:	2201      	movs	r2, #1
 800e9d6:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e9da:	4b55      	ldr	r3, [pc, #340]	; (800eb30 <ProcessRadioRxDone+0x528>)
 800e9dc:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800e9e0:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800e9e4:	4b53      	ldr	r3, [pc, #332]	; (800eb34 <ProcessRadioRxDone+0x52c>)
 800e9e6:	f893 3424 	ldrb.w	r3, [r3, #1060]	; 0x424
 800e9ea:	b25b      	sxtb	r3, r3
 800e9ec:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800e9f0:	230d      	movs	r3, #13
 800e9f2:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800e9f6:	4b4e      	ldr	r3, [pc, #312]	; (800eb30 <ProcessRadioRxDone+0x528>)
 800e9f8:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d002      	beq.n	800ea06 <ProcessRadioRxDone+0x3fe>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800ea00:	230e      	movs	r3, #14
 800ea02:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
            }

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ea06:	4b4a      	ldr	r3, [pc, #296]	; (800eb30 <ProcessRadioRxDone+0x528>)
 800ea08:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ea0c:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800ea10:	4611      	mov	r1, r2
 800ea12:	4618      	mov	r0, r3
 800ea14:	f006 fc34 	bl	8015280 <RegionGetPhyParam>
 800ea18:	4603      	mov	r3, r0
 800ea1a:	673b      	str	r3, [r7, #112]	; 0x70
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800ea1c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800ea20:	3b0d      	subs	r3, #13
 800ea22:	b29b      	uxth	r3, r3
 800ea24:	b21b      	sxth	r3, r3
 800ea26:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ea2a:	b21a      	sxth	r2, r3
 800ea2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ea2e:	b21b      	sxth	r3, r3
 800ea30:	429a      	cmp	r2, r3
 800ea32:	dc03      	bgt.n	800ea3c <ProcessRadioRxDone+0x434>
 800ea34:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800ea38:	2b0b      	cmp	r3, #11
 800ea3a:	d806      	bhi.n	800ea4a <ProcessRadioRxDone+0x442>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ea3c:	4b3d      	ldr	r3, [pc, #244]	; (800eb34 <ProcessRadioRxDone+0x52c>)
 800ea3e:	2201      	movs	r2, #1
 800ea40:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800ea44:	f7ff fdba 	bl	800e5bc <PrepareRxDoneAbort>
                return;
 800ea48:	e2e6      	b.n	800f018 <ProcessRadioRxDone+0xa10>
            }
            macMsgData.Buffer = payload;
 800ea4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ea4e:	643b      	str	r3, [r7, #64]	; 0x40
            macMsgData.BufSize = size;
 800ea50:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800ea54:	b2db      	uxtb	r3, r3
 800ea56:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800ea5a:	4b37      	ldr	r3, [pc, #220]	; (800eb38 <ProcessRadioRxDone+0x530>)
 800ea5c:	667b      	str	r3, [r7, #100]	; 0x64
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800ea5e:	23ff      	movs	r3, #255	; 0xff
 800ea60:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800ea64:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ea68:	4618      	mov	r0, r3
 800ea6a:	f006 f987 	bl	8014d7c <LoRaMacParserData>
 800ea6e:	4603      	mov	r3, r0
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d006      	beq.n	800ea82 <ProcessRadioRxDone+0x47a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ea74:	4b2f      	ldr	r3, [pc, #188]	; (800eb34 <ProcessRadioRxDone+0x52c>)
 800ea76:	2201      	movs	r2, #1
 800ea78:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800ea7c:	f7ff fd9e 	bl	800e5bc <PrepareRxDoneAbort>
                return;
 800ea80:	e2ca      	b.n	800f018 <ProcessRadioRxDone+0xa10>
            }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Handle Class B
            // Check if we expect a ping or a multicast slot.
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800ea82:	4b2b      	ldr	r3, [pc, #172]	; (800eb30 <ProcessRadioRxDone+0x528>)
 800ea84:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800ea88:	2b01      	cmp	r3, #1
 800ea8a:	d132      	bne.n	800eaf2 <ProcessRadioRxDone+0x4ea>
            {
                if( LoRaMacClassBIsPingExpected( ) == true )
 800ea8c:	f004 fc7b 	bl	8013386 <LoRaMacClassBIsPingExpected>
 800ea90:	4603      	mov	r3, r0
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d014      	beq.n	800eac0 <ProcessRadioRxDone+0x4b8>
                {
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ea96:	2000      	movs	r0, #0
 800ea98:	f004 fc2c 	bl	80132f4 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 800ea9c:	2000      	movs	r0, #0
 800ea9e:	f004 fc4d 	bl	801333c <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800eaa2:	4b24      	ldr	r3, [pc, #144]	; (800eb34 <ProcessRadioRxDone+0x52c>)
 800eaa4:	2204      	movs	r2, #4
 800eaa6:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800eaaa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eaac:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800eab0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800eab4:	b2db      	uxtb	r3, r3
 800eab6:	4619      	mov	r1, r3
 800eab8:	4610      	mov	r0, r2
 800eaba:	f004 fced 	bl	8013498 <LoRaMacClassBSetFPendingBit>
 800eabe:	e018      	b.n	800eaf2 <ProcessRadioRxDone+0x4ea>
                }
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800eac0:	f004 fc68 	bl	8013394 <LoRaMacClassBIsMulticastExpected>
 800eac4:	4603      	mov	r3, r0
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d013      	beq.n	800eaf2 <ProcessRadioRxDone+0x4ea>
                {
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800eaca:	2000      	movs	r0, #0
 800eacc:	f004 fc1c 	bl	8013308 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800ead0:	2000      	movs	r0, #0
 800ead2:	f004 fc3c 	bl	801334e <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800ead6:	4b17      	ldr	r3, [pc, #92]	; (800eb34 <ProcessRadioRxDone+0x52c>)
 800ead8:	2205      	movs	r2, #5
 800eada:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800eade:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eae0:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800eae4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800eae8:	b2db      	uxtb	r3, r3
 800eaea:	4619      	mov	r1, r3
 800eaec:	4610      	mov	r0, r2
 800eaee:	f004 fcd3 	bl	8013498 <LoRaMacClassBSetFPendingBit>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800eaf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eaf4:	4a0f      	ldr	r2, [pc, #60]	; (800eb34 <ProcessRadioRxDone+0x52c>)
 800eaf6:	f8c2 3434 	str.w	r3, [r2, #1076]	; 0x434

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800eafa:	f107 0212 	add.w	r2, r7, #18
 800eafe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800eb02:	4611      	mov	r1, r2
 800eb04:	4618      	mov	r0, r3
 800eb06:	f002 fd81 	bl	801160c <DetermineFrameType>
 800eb0a:	4603      	mov	r3, r0
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d006      	beq.n	800eb1e <ProcessRadioRxDone+0x516>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800eb10:	4b08      	ldr	r3, [pc, #32]	; (800eb34 <ProcessRadioRxDone+0x52c>)
 800eb12:	2201      	movs	r2, #1
 800eb14:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800eb18:	f7ff fd50 	bl	800e5bc <PrepareRxDoneAbort>
                return;
 800eb1c:	e27c      	b.n	800f018 <ProcessRadioRxDone+0xa10>
            }

            //Check if it is a multicast message
            multicast = 0;
 800eb1e:	2300      	movs	r3, #0
 800eb20:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
            downLinkCounter = 0;
 800eb24:	2300      	movs	r3, #0
 800eb26:	617b      	str	r3, [r7, #20]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800eb28:	2300      	movs	r3, #0
 800eb2a:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
 800eb2e:	e055      	b.n	800ebdc <ProcessRadioRxDone+0x5d4>
 800eb30:	20000c5c 	.word	0x20000c5c
 800eb34:	20000740 	.word	0x20000740
 800eb38:	20000978 	.word	0x20000978
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800eb3c:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 800eb40:	499f      	ldr	r1, [pc, #636]	; (800edc0 <ProcessRadioRxDone+0x7b8>)
 800eb42:	4613      	mov	r3, r2
 800eb44:	005b      	lsls	r3, r3, #1
 800eb46:	4413      	add	r3, r2
 800eb48:	011b      	lsls	r3, r3, #4
 800eb4a:	440b      	add	r3, r1
 800eb4c:	33ec      	adds	r3, #236	; 0xec
 800eb4e:	681a      	ldr	r2, [r3, #0]
 800eb50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb52:	429a      	cmp	r2, r3
 800eb54:	d13d      	bne.n	800ebd2 <ProcessRadioRxDone+0x5ca>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800eb56:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 800eb5a:	4999      	ldr	r1, [pc, #612]	; (800edc0 <ProcessRadioRxDone+0x7b8>)
 800eb5c:	4613      	mov	r3, r2
 800eb5e:	005b      	lsls	r3, r3, #1
 800eb60:	4413      	add	r3, r2
 800eb62:	011b      	lsls	r3, r3, #4
 800eb64:	440b      	add	r3, r1
 800eb66:	33e9      	adds	r3, #233	; 0xe9
 800eb68:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d031      	beq.n	800ebd2 <ProcessRadioRxDone+0x5ca>
                {
                    multicast = 1;
 800eb6e:	2301      	movs	r3, #1
 800eb70:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800eb74:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 800eb78:	4991      	ldr	r1, [pc, #580]	; (800edc0 <ProcessRadioRxDone+0x7b8>)
 800eb7a:	4613      	mov	r3, r2
 800eb7c:	005b      	lsls	r3, r3, #1
 800eb7e:	4413      	add	r3, r2
 800eb80:	011b      	lsls	r3, r3, #4
 800eb82:	440b      	add	r3, r1
 800eb84:	33ea      	adds	r3, #234	; 0xea
 800eb86:	781b      	ldrb	r3, [r3, #0]
 800eb88:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800eb8c:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 800eb90:	498b      	ldr	r1, [pc, #556]	; (800edc0 <ProcessRadioRxDone+0x7b8>)
 800eb92:	4613      	mov	r3, r2
 800eb94:	005b      	lsls	r3, r3, #1
 800eb96:	4413      	add	r3, r2
 800eb98:	011b      	lsls	r3, r3, #4
 800eb9a:	440b      	add	r3, r1
 800eb9c:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	617b      	str	r3, [r7, #20]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800eba6:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 800ebaa:	4985      	ldr	r1, [pc, #532]	; (800edc0 <ProcessRadioRxDone+0x7b8>)
 800ebac:	4613      	mov	r3, r2
 800ebae:	005b      	lsls	r3, r3, #1
 800ebb0:	4413      	add	r3, r2
 800ebb2:	011b      	lsls	r3, r3, #4
 800ebb4:	440b      	add	r3, r1
 800ebb6:	33ec      	adds	r3, #236	; 0xec
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800ebbe:	4b80      	ldr	r3, [pc, #512]	; (800edc0 <ProcessRadioRxDone+0x7b8>)
 800ebc0:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800ebc4:	2b02      	cmp	r3, #2
 800ebc6:	d10e      	bne.n	800ebe6 <ProcessRadioRxDone+0x5de>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800ebc8:	4b7e      	ldr	r3, [pc, #504]	; (800edc4 <ProcessRadioRxDone+0x7bc>)
 800ebca:	2203      	movs	r2, #3
 800ebcc:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    }
                    break;
 800ebd0:	e009      	b.n	800ebe6 <ProcessRadioRxDone+0x5de>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ebd2:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 800ebd6:	3301      	adds	r3, #1
 800ebd8:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
 800ebdc:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d0ab      	beq.n	800eb3c <ProcessRadioRxDone+0x534>
 800ebe4:	e000      	b.n	800ebe8 <ProcessRadioRxDone+0x5e0>
                    break;
 800ebe6:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800ebe8:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800ebec:	2b01      	cmp	r3, #1
 800ebee:	d117      	bne.n	800ec20 <ProcessRadioRxDone+0x618>
 800ebf0:	7cbb      	ldrb	r3, [r7, #18]
 800ebf2:	2b03      	cmp	r3, #3
 800ebf4:	d10d      	bne.n	800ec12 <ProcessRadioRxDone+0x60a>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800ebf6:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800ebfa:	f003 0320 	and.w	r3, r3, #32
 800ebfe:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d106      	bne.n	800ec12 <ProcessRadioRxDone+0x60a>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800ec04:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800ec08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec0c:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d006      	beq.n	800ec20 <ProcessRadioRxDone+0x618>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ec12:	4b6c      	ldr	r3, [pc, #432]	; (800edc4 <ProcessRadioRxDone+0x7bc>)
 800ec14:	2201      	movs	r2, #1
 800ec16:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800ec1a:	f7ff fccf 	bl	800e5bc <PrepareRxDoneAbort>
                return;
 800ec1e:	e1fb      	b.n	800f018 <ProcessRadioRxDone+0xa10>
                PrepareRxDoneAbort( );
                return;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 800ec20:	7cb9      	ldrb	r1, [r7, #18]
 800ec22:	4c67      	ldr	r4, [pc, #412]	; (800edc0 <ProcessRadioRxDone+0x7b8>)
 800ec24:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800ec28:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 800ec2c:	f107 0314 	add.w	r3, r7, #20
 800ec30:	9301      	str	r3, [sp, #4]
 800ec32:	f107 0313 	add.w	r3, r7, #19
 800ec36:	9300      	str	r3, [sp, #0]
 800ec38:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 800ec3c:	f000 fee4 	bl	800fa08 <GetFCntDown>
 800ec40:	4603      	mov	r3, r0
 800ec42:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800ec46:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d017      	beq.n	800ec7e <ProcessRadioRxDone+0x676>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800ec4e:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 800ec52:	2b07      	cmp	r3, #7
 800ec54:	d104      	bne.n	800ec60 <ProcessRadioRxDone+0x658>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800ec56:	4b5b      	ldr	r3, [pc, #364]	; (800edc4 <ProcessRadioRxDone+0x7bc>)
 800ec58:	2208      	movs	r2, #8
 800ec5a:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 800ec5e:	e003      	b.n	800ec68 <ProcessRadioRxDone+0x660>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ec60:	4b58      	ldr	r3, [pc, #352]	; (800edc4 <ProcessRadioRxDone+0x7bc>)
 800ec62:	2201      	movs	r2, #1
 800ec64:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800ec68:	697b      	ldr	r3, [r7, #20]
 800ec6a:	4a56      	ldr	r2, [pc, #344]	; (800edc4 <ProcessRadioRxDone+0x7bc>)
 800ec6c:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800ec70:	697b      	ldr	r3, [r7, #20]
 800ec72:	4a54      	ldr	r2, [pc, #336]	; (800edc4 <ProcessRadioRxDone+0x7bc>)
 800ec74:	f8c2 346c 	str.w	r3, [r2, #1132]	; 0x46c
                PrepareRxDoneAbort( );
 800ec78:	f7ff fca0 	bl	800e5bc <PrepareRxDoneAbort>
                return;
 800ec7c:	e1cc      	b.n	800f018 <ProcessRadioRxDone+0xa10>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800ec7e:	7cfa      	ldrb	r2, [r7, #19]
 800ec80:	6979      	ldr	r1, [r7, #20]
 800ec82:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 800ec86:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ec8a:	9300      	str	r3, [sp, #0]
 800ec8c:	460b      	mov	r3, r1
 800ec8e:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800ec92:	f005 fed3 	bl	8014a3c <LoRaMacCryptoUnsecureMessage>
 800ec96:	4603      	mov	r3, r0
 800ec98:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800ec9c:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d00f      	beq.n	800ecc4 <ProcessRadioRxDone+0x6bc>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800eca4:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 800eca8:	2b02      	cmp	r3, #2
 800ecaa:	d104      	bne.n	800ecb6 <ProcessRadioRxDone+0x6ae>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800ecac:	4b45      	ldr	r3, [pc, #276]	; (800edc4 <ProcessRadioRxDone+0x7bc>)
 800ecae:	220a      	movs	r2, #10
 800ecb0:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 800ecb4:	e003      	b.n	800ecbe <ProcessRadioRxDone+0x6b6>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800ecb6:	4b43      	ldr	r3, [pc, #268]	; (800edc4 <ProcessRadioRxDone+0x7bc>)
 800ecb8:	220b      	movs	r2, #11
 800ecba:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                }
                PrepareRxDoneAbort( );
 800ecbe:	f7ff fc7d 	bl	800e5bc <PrepareRxDoneAbort>
                return;
 800ecc2:	e1a9      	b.n	800f018 <ProcessRadioRxDone+0xa10>
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800ecc4:	4b3f      	ldr	r3, [pc, #252]	; (800edc4 <ProcessRadioRxDone+0x7bc>)
 800ecc6:	2200      	movs	r2, #0
 800ecc8:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Multicast = multicast;
 800eccc:	4a3d      	ldr	r2, [pc, #244]	; (800edc4 <ProcessRadioRxDone+0x7bc>)
 800ecce:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800ecd2:	f882 3422 	strb.w	r3, [r2, #1058]	; 0x422
            MacCtx.McpsIndication.Buffer = NULL;
 800ecd6:	4b3b      	ldr	r3, [pc, #236]	; (800edc4 <ProcessRadioRxDone+0x7bc>)
 800ecd8:	2200      	movs	r2, #0
 800ecda:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = 0;
 800ecde:	4b39      	ldr	r3, [pc, #228]	; (800edc4 <ProcessRadioRxDone+0x7bc>)
 800ece0:	2200      	movs	r2, #0
 800ece2:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800ece6:	697b      	ldr	r3, [r7, #20]
 800ece8:	4a36      	ldr	r2, [pc, #216]	; (800edc4 <ProcessRadioRxDone+0x7bc>)
 800ecea:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800ecee:	697b      	ldr	r3, [r7, #20]
 800ecf0:	4a34      	ldr	r2, [pc, #208]	; (800edc4 <ProcessRadioRxDone+0x7bc>)
 800ecf2:	f8c2 346c 	str.w	r3, [r2, #1132]	; 0x46c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800ecf6:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800ecfa:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ecfe:	b2db      	uxtb	r3, r3
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	bf14      	ite	ne
 800ed04:	2301      	movne	r3, #1
 800ed06:	2300      	moveq	r3, #0
 800ed08:	b2da      	uxtb	r2, r3
 800ed0a:	4b2e      	ldr	r3, [pc, #184]	; (800edc4 <ProcessRadioRxDone+0x7bc>)
 800ed0c:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800ed10:	4b2c      	ldr	r3, [pc, #176]	; (800edc4 <ProcessRadioRxDone+0x7bc>)
 800ed12:	2200      	movs	r2, #0
 800ed14:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800ed18:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800ed1c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ed20:	b2db      	uxtb	r3, r3
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	bf14      	ite	ne
 800ed26:	2301      	movne	r3, #1
 800ed28:	2300      	moveq	r3, #0
 800ed2a:	b2da      	uxtb	r2, r3
 800ed2c:	4b25      	ldr	r3, [pc, #148]	; (800edc4 <ProcessRadioRxDone+0x7bc>)
 800ed2e:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800ed32:	4b24      	ldr	r3, [pc, #144]	; (800edc4 <ProcessRadioRxDone+0x7bc>)
 800ed34:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d004      	beq.n	800ed46 <ProcessRadioRxDone+0x73e>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800ed3c:	4b21      	ldr	r3, [pc, #132]	; (800edc4 <ProcessRadioRxDone+0x7bc>)
 800ed3e:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800ed42:	2b01      	cmp	r3, #1
 800ed44:	d106      	bne.n	800ed54 <ProcessRadioRxDone+0x74c>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800ed46:	4b1e      	ldr	r3, [pc, #120]	; (800edc0 <ProcessRadioRxDone+0x7b8>)
 800ed48:	2200      	movs	r2, #0
 800ed4a:	629a      	str	r2, [r3, #40]	; 0x28
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                Nvm.MacGroup2.DownlinkReceived = true;
 800ed4c:	4b1c      	ldr	r3, [pc, #112]	; (800edc0 <ProcessRadioRxDone+0x7b8>)
 800ed4e:	2201      	movs	r2, #1
 800ed50:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800ed54:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800ed58:	2b01      	cmp	r3, #1
 800ed5a:	d104      	bne.n	800ed66 <ProcessRadioRxDone+0x75e>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800ed5c:	4b19      	ldr	r3, [pc, #100]	; (800edc4 <ProcessRadioRxDone+0x7bc>)
 800ed5e:	2202      	movs	r2, #2
 800ed60:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 800ed64:	e03a      	b.n	800eddc <ProcessRadioRxDone+0x7d4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800ed66:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800ed6a:	f023 031f 	bic.w	r3, r3, #31
 800ed6e:	b2db      	uxtb	r3, r3
 800ed70:	2ba0      	cmp	r3, #160	; 0xa0
 800ed72:	d12b      	bne.n	800edcc <ProcessRadioRxDone+0x7c4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800ed74:	4b12      	ldr	r3, [pc, #72]	; (800edc0 <ProcessRadioRxDone+0x7b8>)
 800ed76:	2201      	movs	r2, #1
 800ed78:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800ed7c:	4b10      	ldr	r3, [pc, #64]	; (800edc0 <ProcessRadioRxDone+0x7b8>)
 800ed7e:	f893 312e 	ldrb.w	r3, [r3, #302]	; 0x12e
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d102      	bne.n	800ed8c <ProcessRadioRxDone+0x784>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800ed86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed88:	4a0d      	ldr	r2, [pc, #52]	; (800edc0 <ProcessRadioRxDone+0x7b8>)
 800ed8a:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800ed8c:	4b0d      	ldr	r3, [pc, #52]	; (800edc4 <ProcessRadioRxDone+0x7bc>)
 800ed8e:	2201      	movs	r2, #1
 800ed90:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // Handle response timeout for class c and class b downlinks
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800ed94:	4b0b      	ldr	r3, [pc, #44]	; (800edc4 <ProcessRadioRxDone+0x7bc>)
 800ed96:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d01e      	beq.n	800eddc <ProcessRadioRxDone+0x7d4>
                        ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) )
 800ed9e:	4b09      	ldr	r3, [pc, #36]	; (800edc4 <ProcessRadioRxDone+0x7bc>)
 800eda0:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800eda4:	2b01      	cmp	r3, #1
 800eda6:	d019      	beq.n	800eddc <ProcessRadioRxDone+0x7d4>
                    {
                        // Calculate timeout
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800eda8:	4b05      	ldr	r3, [pc, #20]	; (800edc0 <ProcessRadioRxDone+0x7b8>)
 800edaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800edae:	4a05      	ldr	r2, [pc, #20]	; (800edc4 <ProcessRadioRxDone+0x7bc>)
 800edb0:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 800edb4:	4b04      	ldr	r3, [pc, #16]	; (800edc8 <ProcessRadioRxDone+0x7c0>)
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	4a02      	ldr	r2, [pc, #8]	; (800edc4 <ProcessRadioRxDone+0x7bc>)
 800edba:	f8c2 3498 	str.w	r3, [r2, #1176]	; 0x498
 800edbe:	e00d      	b.n	800eddc <ProcessRadioRxDone+0x7d4>
 800edc0:	20000c5c 	.word	0x20000c5c
 800edc4:	20000740 	.word	0x20000740
 800edc8:	2000188c 	.word	0x2000188c
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800edcc:	4b94      	ldr	r3, [pc, #592]	; (800f020 <ProcessRadioRxDone+0xa18>)
 800edce:	2200      	movs	r2, #0
 800edd0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800edd4:	4b93      	ldr	r3, [pc, #588]	; (800f024 <ProcessRadioRxDone+0xa1c>)
 800edd6:	2200      	movs	r2, #0
 800edd8:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
            }

            // Set the pending status
            /* if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
                ( MacCtx.McpsIndication.ResponseTimeout > 0 ) ) */
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 800eddc:	4b90      	ldr	r3, [pc, #576]	; (800f020 <ProcessRadioRxDone+0xa18>)
 800edde:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d106      	bne.n	800edf4 <ProcessRadioRxDone+0x7ec>
 800ede6:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800edea:	f003 0310 	and.w	r3, r3, #16
 800edee:	b2db      	uxtb	r3, r3
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d008      	beq.n	800ee06 <ProcessRadioRxDone+0x7fe>
 800edf4:	4b8a      	ldr	r3, [pc, #552]	; (800f020 <ProcessRadioRxDone+0xa18>)
 800edf6:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d103      	bne.n	800ee06 <ProcessRadioRxDone+0x7fe>
            {
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 800edfe:	4b89      	ldr	r3, [pc, #548]	; (800f024 <ProcessRadioRxDone+0xa1c>)
 800ee00:	2201      	movs	r2, #1
 800ee02:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800ee06:	4b87      	ldr	r3, [pc, #540]	; (800f024 <ProcessRadioRxDone+0xa1c>)
 800ee08:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800ee0c:	4a85      	ldr	r2, [pc, #532]	; (800f024 <ProcessRadioRxDone+0xa1c>)
 800ee0e:	f892 2440 	ldrb.w	r2, [r2, #1088]	; 0x440
 800ee12:	f897 104c 	ldrb.w	r1, [r7, #76]	; 0x4c
 800ee16:	4618      	mov	r0, r3
 800ee18:	f001 ff8a 	bl	8010d30 <RemoveMacCommands>

            switch( fType )
 800ee1c:	7cbb      	ldrb	r3, [r7, #18]
 800ee1e:	2b03      	cmp	r3, #3
 800ee20:	d873      	bhi.n	800ef0a <ProcessRadioRxDone+0x902>
 800ee22:	a201      	add	r2, pc, #4	; (adr r2, 800ee28 <ProcessRadioRxDone+0x820>)
 800ee24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee28:	0800ee39 	.word	0x0800ee39
 800ee2c:	0800ee89 	.word	0x0800ee89
 800ee30:	0800eebf 	.word	0x0800eebf
 800ee34:	0800eee5 	.word	0x0800eee5
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800ee38:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800ee3c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800ee40:	b2db      	uxtb	r3, r3
 800ee42:	461c      	mov	r4, r3
 800ee44:	4b77      	ldr	r3, [pc, #476]	; (800f024 <ProcessRadioRxDone+0xa1c>)
 800ee46:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800ee4a:	f997 108f 	ldrsb.w	r1, [r7, #143]	; 0x8f
 800ee4e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800ee52:	f102 0010 	add.w	r0, r2, #16
 800ee56:	9300      	str	r3, [sp, #0]
 800ee58:	460b      	mov	r3, r1
 800ee5a:	4622      	mov	r2, r4
 800ee5c:	2100      	movs	r1, #0
 800ee5e:	f000 ff4f 	bl	800fd00 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800ee62:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800ee66:	4b6f      	ldr	r3, [pc, #444]	; (800f024 <ProcessRadioRxDone+0xa1c>)
 800ee68:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800ee6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ee6e:	4a6d      	ldr	r2, [pc, #436]	; (800f024 <ProcessRadioRxDone+0xa1c>)
 800ee70:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800ee74:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 800ee78:	4b6a      	ldr	r3, [pc, #424]	; (800f024 <ProcessRadioRxDone+0xa1c>)
 800ee7a:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 800ee7e:	4b69      	ldr	r3, [pc, #420]	; (800f024 <ProcessRadioRxDone+0xa1c>)
 800ee80:	2201      	movs	r2, #1
 800ee82:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
                    break;
 800ee86:	e047      	b.n	800ef18 <ProcessRadioRxDone+0x910>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800ee88:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800ee8c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800ee90:	b2db      	uxtb	r3, r3
 800ee92:	461c      	mov	r4, r3
 800ee94:	4b63      	ldr	r3, [pc, #396]	; (800f024 <ProcessRadioRxDone+0xa1c>)
 800ee96:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800ee9a:	f997 108f 	ldrsb.w	r1, [r7, #143]	; 0x8f
 800ee9e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800eea2:	f102 0010 	add.w	r0, r2, #16
 800eea6:	9300      	str	r3, [sp, #0]
 800eea8:	460b      	mov	r3, r1
 800eeaa:	4622      	mov	r2, r4
 800eeac:	2100      	movs	r1, #0
 800eeae:	f000 ff27 	bl	800fd00 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800eeb2:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800eeb6:	4b5b      	ldr	r3, [pc, #364]	; (800f024 <ProcessRadioRxDone+0xa1c>)
 800eeb8:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    break;
 800eebc:	e02c      	b.n	800ef18 <ProcessRadioRxDone+0x910>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800eebe:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800eec0:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 800eec4:	4b57      	ldr	r3, [pc, #348]	; (800f024 <ProcessRadioRxDone+0xa1c>)
 800eec6:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800eeca:	f997 108f 	ldrsb.w	r1, [r7, #143]	; 0x8f
 800eece:	9300      	str	r3, [sp, #0]
 800eed0:	460b      	mov	r3, r1
 800eed2:	2100      	movs	r1, #0
 800eed4:	f000 ff14 	bl	800fd00 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800eed8:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800eedc:	4b51      	ldr	r3, [pc, #324]	; (800f024 <ProcessRadioRxDone+0xa1c>)
 800eede:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    break;
 800eee2:	e019      	b.n	800ef18 <ProcessRadioRxDone+0x910>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800eee4:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800eee8:	4b4e      	ldr	r3, [pc, #312]	; (800f024 <ProcessRadioRxDone+0xa1c>)
 800eeea:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800eeee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eef0:	4a4c      	ldr	r2, [pc, #304]	; (800f024 <ProcessRadioRxDone+0xa1c>)
 800eef2:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800eef6:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 800eefa:	4b4a      	ldr	r3, [pc, #296]	; (800f024 <ProcessRadioRxDone+0xa1c>)
 800eefc:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 800ef00:	4b48      	ldr	r3, [pc, #288]	; (800f024 <ProcessRadioRxDone+0xa1c>)
 800ef02:	2201      	movs	r2, #1
 800ef04:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
                    break;
 800ef08:	e006      	b.n	800ef18 <ProcessRadioRxDone+0x910>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ef0a:	4b46      	ldr	r3, [pc, #280]	; (800f024 <ProcessRadioRxDone+0xa1c>)
 800ef0c:	2201      	movs	r2, #1
 800ef0e:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                    PrepareRxDoneAbort( );
 800ef12:	f7ff fb53 	bl	800e5bc <PrepareRxDoneAbort>
                    break;
 800ef16:	bf00      	nop
                }
            }
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800ef18:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800ef1c:	2be0      	cmp	r3, #224	; 0xe0
 800ef1e:	d118      	bne.n	800ef52 <ProcessRadioRxDone+0x94a>
 800ef20:	4b3f      	ldr	r3, [pc, #252]	; (800f020 <ProcessRadioRxDone+0xa18>)
 800ef22:	f893 311f 	ldrb.w	r3, [r3, #287]	; 0x11f
 800ef26:	f083 0301 	eor.w	r3, r3, #1
 800ef2a:	b2db      	uxtb	r3, r3
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d010      	beq.n	800ef52 <ProcessRadioRxDone+0x94a>
            { // Do not notify the upper layer of data reception on FPort LORAMAC_CERT_FPORT if the port
              // handling is disabled.
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 800ef30:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800ef34:	4b3b      	ldr	r3, [pc, #236]	; (800f024 <ProcessRadioRxDone+0xa1c>)
 800ef36:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                MacCtx.McpsIndication.Buffer = NULL;
 800ef3a:	4b3a      	ldr	r3, [pc, #232]	; (800f024 <ProcessRadioRxDone+0xa1c>)
 800ef3c:	2200      	movs	r2, #0
 800ef3e:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
                MacCtx.McpsIndication.BufferSize = 0;
 800ef42:	4b38      	ldr	r3, [pc, #224]	; (800f024 <ProcessRadioRxDone+0xa1c>)
 800ef44:	2200      	movs	r2, #0
 800ef46:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
                MacCtx.McpsIndication.RxData = false;
 800ef4a:	4b36      	ldr	r3, [pc, #216]	; (800f024 <ProcessRadioRxDone+0xa1c>)
 800ef4c:	2200      	movs	r2, #0
 800ef4e:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800ef52:	4a34      	ldr	r2, [pc, #208]	; (800f024 <ProcessRadioRxDone+0xa1c>)
 800ef54:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800ef58:	f043 0302 	orr.w	r3, r3, #2
 800ef5c:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491

            break;
 800ef60:	e035      	b.n	800efce <ProcessRadioRxDone+0x9c6>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800ef62:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800ef66:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ef6a:	18d1      	adds	r1, r2, r3
 800ef6c:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800ef70:	b29b      	uxth	r3, r3
 800ef72:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 800ef76:	1ad3      	subs	r3, r2, r3
 800ef78:	b29b      	uxth	r3, r3
 800ef7a:	461a      	mov	r2, r3
 800ef7c:	482a      	ldr	r0, [pc, #168]	; (800f028 <ProcessRadioRxDone+0xa20>)
 800ef7e:	f009 ff80 	bl	8018e82 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800ef82:	4b28      	ldr	r3, [pc, #160]	; (800f024 <ProcessRadioRxDone+0xa1c>)
 800ef84:	2203      	movs	r2, #3
 800ef86:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800ef8a:	4b26      	ldr	r3, [pc, #152]	; (800f024 <ProcessRadioRxDone+0xa1c>)
 800ef8c:	2200      	movs	r2, #0
 800ef8e:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800ef92:	4b24      	ldr	r3, [pc, #144]	; (800f024 <ProcessRadioRxDone+0xa1c>)
 800ef94:	4a24      	ldr	r2, [pc, #144]	; (800f028 <ProcessRadioRxDone+0xa20>)
 800ef96:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800ef9a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800ef9e:	b2da      	uxtb	r2, r3
 800efa0:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800efa4:	1ad3      	subs	r3, r2, r3
 800efa6:	b2da      	uxtb	r2, r3
 800efa8:	4b1e      	ldr	r3, [pc, #120]	; (800f024 <ProcessRadioRxDone+0xa1c>)
 800efaa:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800efae:	4a1d      	ldr	r2, [pc, #116]	; (800f024 <ProcessRadioRxDone+0xa1c>)
 800efb0:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800efb4:	f043 0302 	orr.w	r3, r3, #2
 800efb8:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
            break;
 800efbc:	e007      	b.n	800efce <ProcessRadioRxDone+0x9c6>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800efbe:	4b19      	ldr	r3, [pc, #100]	; (800f024 <ProcessRadioRxDone+0xa1c>)
 800efc0:	2201      	movs	r2, #1
 800efc2:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            PrepareRxDoneAbort( );
 800efc6:	f7ff faf9 	bl	800e5bc <PrepareRxDoneAbort>
            break;
 800efca:	e000      	b.n	800efce <ProcessRadioRxDone+0x9c6>
            break;
 800efcc:	bf00      	nop
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Verify if we need to disable the RetransmitTimeoutTimer
    // Only applies if downlink is received on Rx1 or Rx2 windows.
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800efce:	4b15      	ldr	r3, [pc, #84]	; (800f024 <ProcessRadioRxDone+0xa1c>)
 800efd0:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d004      	beq.n	800efe2 <ProcessRadioRxDone+0x9da>
        ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800efd8:	4b12      	ldr	r3, [pc, #72]	; (800f024 <ProcessRadioRxDone+0xa1c>)
 800efda:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800efde:	2b01      	cmp	r3, #1
 800efe0:	d10c      	bne.n	800effc <ProcessRadioRxDone+0x9f4>
    {
        if( MacCtx.NodeAckRequested == true )
 800efe2:	4b10      	ldr	r3, [pc, #64]	; (800f024 <ProcessRadioRxDone+0xa1c>)
 800efe4:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d007      	beq.n	800effc <ProcessRadioRxDone+0x9f4>
        {
            if( MacCtx.McpsConfirm.AckReceived == true )
 800efec:	4b0d      	ldr	r3, [pc, #52]	; (800f024 <ProcessRadioRxDone+0xa1c>)
 800efee:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d002      	beq.n	800effc <ProcessRadioRxDone+0x9f4>
            {
                OnRetransmitTimeoutTimerEvent( NULL );
 800eff6:	2000      	movs	r0, #0
 800eff8:	f000 fcec 	bl	800f9d4 <OnRetransmitTimeoutTimerEvent>
            }
        }
    }

    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 800effc:	4b09      	ldr	r3, [pc, #36]	; (800f024 <ProcessRadioRxDone+0xa1c>)
 800effe:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800f002:	2b02      	cmp	r3, #2
 800f004:	d006      	beq.n	800f014 <ProcessRadioRxDone+0xa0c>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800f006:	4a07      	ldr	r2, [pc, #28]	; (800f024 <ProcessRadioRxDone+0xa1c>)
 800f008:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f00c:	f043 0310 	orr.w	r3, r3, #16
 800f010:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 800f014:	f7ff fa14 	bl	800e440 <UpdateRxSlotIdleState>
}
 800f018:	37a4      	adds	r7, #164	; 0xa4
 800f01a:	46bd      	mov	sp, r7
 800f01c:	bd90      	pop	{r4, r7, pc}
 800f01e:	bf00      	nop
 800f020:	20000c5c 	.word	0x20000c5c
 800f024:	20000740 	.word	0x20000740
 800f028:	20000978 	.word	0x20000978

0800f02c <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800f02c:	b580      	push	{r7, lr}
 800f02e:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f030:	4b11      	ldr	r3, [pc, #68]	; (800f078 <ProcessRadioTxTimeout+0x4c>)
 800f032:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800f036:	2b02      	cmp	r3, #2
 800f038:	d002      	beq.n	800f040 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800f03a:	4b10      	ldr	r3, [pc, #64]	; (800f07c <ProcessRadioTxTimeout+0x50>)
 800f03c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f03e:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800f040:	f7ff f9fe 	bl	800e440 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800f044:	4b0e      	ldr	r3, [pc, #56]	; (800f080 <ProcessRadioTxTimeout+0x54>)
 800f046:	2202      	movs	r2, #2
 800f048:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800f04c:	2002      	movs	r0, #2
 800f04e:	f004 fe69 	bl	8013d24 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800f052:	4b0b      	ldr	r3, [pc, #44]	; (800f080 <ProcessRadioTxTimeout+0x54>)
 800f054:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d003      	beq.n	800f064 <ProcessRadioTxTimeout+0x38>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        MacCtx.RetransmitTimeoutRetry = true;
 800f05c:	4b08      	ldr	r3, [pc, #32]	; (800f080 <ProcessRadioTxTimeout+0x54>)
 800f05e:	2201      	movs	r2, #1
 800f060:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800f064:	4a06      	ldr	r2, [pc, #24]	; (800f080 <ProcessRadioTxTimeout+0x54>)
 800f066:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f06a:	f043 0310 	orr.w	r3, r3, #16
 800f06e:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
}
 800f072:	bf00      	nop
 800f074:	bd80      	pop	{r7, pc}
 800f076:	bf00      	nop
 800f078:	20000c5c 	.word	0x20000c5c
 800f07c:	0801ea54 	.word	0x0801ea54
 800f080:	20000740 	.word	0x20000740

0800f084 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800f084:	b580      	push	{r7, lr}
 800f086:	b084      	sub	sp, #16
 800f088:	af00      	add	r7, sp, #0
 800f08a:	4603      	mov	r3, r0
 800f08c:	460a      	mov	r2, r1
 800f08e:	71fb      	strb	r3, [r7, #7]
 800f090:	4613      	mov	r3, r2
 800f092:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800f094:	2300      	movs	r3, #0
 800f096:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f098:	4b3d      	ldr	r3, [pc, #244]	; (800f190 <HandleRadioRxErrorTimeout+0x10c>)
 800f09a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800f09e:	2b02      	cmp	r3, #2
 800f0a0:	d002      	beq.n	800f0a8 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800f0a2:	4b3c      	ldr	r3, [pc, #240]	; (800f194 <HandleRadioRxErrorTimeout+0x110>)
 800f0a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0a6:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800f0a8:	f004 f966 	bl	8013378 <LoRaMacClassBIsBeaconExpected>
 800f0ac:	4603      	mov	r3, r0
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d007      	beq.n	800f0c2 <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800f0b2:	2002      	movs	r0, #2
 800f0b4:	f004 f914 	bl	80132e0 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800f0b8:	2000      	movs	r0, #0
 800f0ba:	f004 f936 	bl	801332a <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800f0be:	2301      	movs	r3, #1
 800f0c0:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f0c2:	4b33      	ldr	r3, [pc, #204]	; (800f190 <HandleRadioRxErrorTimeout+0x10c>)
 800f0c4:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800f0c8:	2b01      	cmp	r3, #1
 800f0ca:	d119      	bne.n	800f100 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800f0cc:	f004 f95b 	bl	8013386 <LoRaMacClassBIsPingExpected>
 800f0d0:	4603      	mov	r3, r0
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d007      	beq.n	800f0e6 <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f0d6:	2000      	movs	r0, #0
 800f0d8:	f004 f90c 	bl	80132f4 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800f0dc:	2000      	movs	r0, #0
 800f0de:	f004 f92d 	bl	801333c <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800f0e2:	2301      	movs	r3, #1
 800f0e4:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800f0e6:	f004 f955 	bl	8013394 <LoRaMacClassBIsMulticastExpected>
 800f0ea:	4603      	mov	r3, r0
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d007      	beq.n	800f100 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f0f0:	2000      	movs	r0, #0
 800f0f2:	f004 f909 	bl	8013308 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800f0f6:	2000      	movs	r0, #0
 800f0f8:	f004 f929 	bl	801334e <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800f0fc:	2301      	movs	r3, #1
 800f0fe:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800f100:	7bfb      	ldrb	r3, [r7, #15]
 800f102:	f083 0301 	eor.w	r3, r3, #1
 800f106:	b2db      	uxtb	r3, r3
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d03b      	beq.n	800f184 <HandleRadioRxErrorTimeout+0x100>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800f10c:	4b22      	ldr	r3, [pc, #136]	; (800f198 <HandleRadioRxErrorTimeout+0x114>)
 800f10e:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 800f112:	2b00      	cmp	r3, #0
 800f114:	d122      	bne.n	800f15c <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800f116:	4b20      	ldr	r3, [pc, #128]	; (800f198 <HandleRadioRxErrorTimeout+0x114>)
 800f118:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d003      	beq.n	800f128 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800f120:	4a1d      	ldr	r2, [pc, #116]	; (800f198 <HandleRadioRxErrorTimeout+0x114>)
 800f122:	79fb      	ldrb	r3, [r7, #7]
 800f124:	f882 3441 	strb.w	r3, [r2, #1089]	; 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800f128:	79fb      	ldrb	r3, [r7, #7]
 800f12a:	4618      	mov	r0, r3
 800f12c:	f004 fdfa 	bl	8013d24 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800f130:	4b17      	ldr	r3, [pc, #92]	; (800f190 <HandleRadioRxErrorTimeout+0x10c>)
 800f132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f134:	4618      	mov	r0, r3
 800f136:	f00e f96b 	bl	801d410 <UTIL_TIMER_GetElapsedTime>
 800f13a:	4602      	mov	r2, r0
 800f13c:	4b16      	ldr	r3, [pc, #88]	; (800f198 <HandleRadioRxErrorTimeout+0x114>)
 800f13e:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800f142:	429a      	cmp	r2, r3
 800f144:	d31e      	bcc.n	800f184 <HandleRadioRxErrorTimeout+0x100>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800f146:	4815      	ldr	r0, [pc, #84]	; (800f19c <HandleRadioRxErrorTimeout+0x118>)
 800f148:	f00e f836 	bl	801d1b8 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800f14c:	4a12      	ldr	r2, [pc, #72]	; (800f198 <HandleRadioRxErrorTimeout+0x114>)
 800f14e:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f152:	f043 0310 	orr.w	r3, r3, #16
 800f156:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 800f15a:	e013      	b.n	800f184 <HandleRadioRxErrorTimeout+0x100>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800f15c:	4b0e      	ldr	r3, [pc, #56]	; (800f198 <HandleRadioRxErrorTimeout+0x114>)
 800f15e:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800f162:	2b00      	cmp	r3, #0
 800f164:	d003      	beq.n	800f16e <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800f166:	4a0c      	ldr	r2, [pc, #48]	; (800f198 <HandleRadioRxErrorTimeout+0x114>)
 800f168:	79bb      	ldrb	r3, [r7, #6]
 800f16a:	f882 3441 	strb.w	r3, [r2, #1089]	; 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800f16e:	79bb      	ldrb	r3, [r7, #6]
 800f170:	4618      	mov	r0, r3
 800f172:	f004 fdd7 	bl	8013d24 <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.MacFlags.Bits.MacDone = 1;
 800f176:	4a08      	ldr	r2, [pc, #32]	; (800f198 <HandleRadioRxErrorTimeout+0x114>)
 800f178:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f17c:	f043 0310 	orr.w	r3, r3, #16
 800f180:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 800f184:	f7ff f95c 	bl	800e440 <UpdateRxSlotIdleState>
}
 800f188:	bf00      	nop
 800f18a:	3710      	adds	r7, #16
 800f18c:	46bd      	mov	sp, r7
 800f18e:	bd80      	pop	{r7, pc}
 800f190:	20000c5c 	.word	0x20000c5c
 800f194:	0801ea54 	.word	0x0801ea54
 800f198:	20000740 	.word	0x20000740
 800f19c:	20000ad8 	.word	0x20000ad8

0800f1a0 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800f1a4:	2106      	movs	r1, #6
 800f1a6:	2005      	movs	r0, #5
 800f1a8:	f7ff ff6c 	bl	800f084 <HandleRadioRxErrorTimeout>
}
 800f1ac:	bf00      	nop
 800f1ae:	bd80      	pop	{r7, pc}

0800f1b0 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800f1b4:	2104      	movs	r1, #4
 800f1b6:	2003      	movs	r0, #3
 800f1b8:	f7ff ff64 	bl	800f084 <HandleRadioRxErrorTimeout>
}
 800f1bc:	bf00      	nop
 800f1be:	bd80      	pop	{r7, pc}

0800f1c0 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800f1c0:	b580      	push	{r7, lr}
 800f1c2:	b084      	sub	sp, #16
 800f1c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f1c6:	f3ef 8310 	mrs	r3, PRIMASK
 800f1ca:	607b      	str	r3, [r7, #4]
  return(result);
 800f1cc:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800f1ce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800f1d0:	b672      	cpsid	i
}
 800f1d2:	bf00      	nop
    events = LoRaMacRadioEvents;
 800f1d4:	4b1d      	ldr	r3, [pc, #116]	; (800f24c <LoRaMacHandleIrqEvents+0x8c>)
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800f1da:	4b1c      	ldr	r3, [pc, #112]	; (800f24c <LoRaMacHandleIrqEvents+0x8c>)
 800f1dc:	2200      	movs	r2, #0
 800f1de:	601a      	str	r2, [r3, #0]
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f1e4:	68bb      	ldr	r3, [r7, #8]
 800f1e6:	f383 8810 	msr	PRIMASK, r3
}
 800f1ea:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800f1ec:	683b      	ldr	r3, [r7, #0]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d027      	beq.n	800f242 <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800f1f2:	783b      	ldrb	r3, [r7, #0]
 800f1f4:	f003 0320 	and.w	r3, r3, #32
 800f1f8:	b2db      	uxtb	r3, r3
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d001      	beq.n	800f202 <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800f1fe:	f7ff f937 	bl	800e470 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800f202:	783b      	ldrb	r3, [r7, #0]
 800f204:	f003 0310 	and.w	r3, r3, #16
 800f208:	b2db      	uxtb	r3, r3
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d001      	beq.n	800f212 <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800f20e:	f7ff f9fb 	bl	800e608 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800f212:	783b      	ldrb	r3, [r7, #0]
 800f214:	f003 0308 	and.w	r3, r3, #8
 800f218:	b2db      	uxtb	r3, r3
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d001      	beq.n	800f222 <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800f21e:	f7ff ff05 	bl	800f02c <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800f222:	783b      	ldrb	r3, [r7, #0]
 800f224:	f003 0304 	and.w	r3, r3, #4
 800f228:	b2db      	uxtb	r3, r3
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d001      	beq.n	800f232 <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800f22e:	f7ff ffb7 	bl	800f1a0 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800f232:	783b      	ldrb	r3, [r7, #0]
 800f234:	f003 0302 	and.w	r3, r3, #2
 800f238:	b2db      	uxtb	r3, r3
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d001      	beq.n	800f242 <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800f23e:	f7ff ffb7 	bl	800f1b0 <ProcessRadioRxTimeout>
        }
    }
}
 800f242:	bf00      	nop
 800f244:	3710      	adds	r7, #16
 800f246:	46bd      	mov	sp, r7
 800f248:	bd80      	pop	{r7, pc}
 800f24a:	bf00      	nop
 800f24c:	20001884 	.word	0x20001884

0800f250 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800f250:	b480      	push	{r7}
 800f252:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800f254:	4b10      	ldr	r3, [pc, #64]	; (800f298 <LoRaMacIsBusy+0x48>)
 800f256:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f25a:	2b01      	cmp	r3, #1
 800f25c:	d101      	bne.n	800f262 <LoRaMacIsBusy+0x12>
    {
        return false;
 800f25e:	2300      	movs	r3, #0
 800f260:	e015      	b.n	800f28e <LoRaMacIsBusy+0x3e>
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 800f262:	4b0e      	ldr	r3, [pc, #56]	; (800f29c <LoRaMacIsBusy+0x4c>)
 800f264:	781b      	ldrb	r3, [r3, #0]
 800f266:	f003 0301 	and.w	r3, r3, #1
 800f26a:	b2db      	uxtb	r3, r3
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d001      	beq.n	800f274 <LoRaMacIsBusy+0x24>
    {
        return true;
 800f270:	2301      	movs	r3, #1
 800f272:	e00c      	b.n	800f28e <LoRaMacIsBusy+0x3e>
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800f274:	4b08      	ldr	r3, [pc, #32]	; (800f298 <LoRaMacIsBusy+0x48>)
 800f276:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d106      	bne.n	800f28c <LoRaMacIsBusy+0x3c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800f27e:	4b06      	ldr	r3, [pc, #24]	; (800f298 <LoRaMacIsBusy+0x48>)
 800f280:	f893 3492 	ldrb.w	r3, [r3, #1170]	; 0x492
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800f284:	2b01      	cmp	r3, #1
 800f286:	d101      	bne.n	800f28c <LoRaMacIsBusy+0x3c>
    {
        return false;
 800f288:	2300      	movs	r3, #0
 800f28a:	e000      	b.n	800f28e <LoRaMacIsBusy+0x3e>
    }
    return true;
 800f28c:	2301      	movs	r3, #1
}
 800f28e:	4618      	mov	r0, r3
 800f290:	46bd      	mov	sp, r7
 800f292:	bc80      	pop	{r7}
 800f294:	4770      	bx	lr
 800f296:	bf00      	nop
 800f298:	20000740 	.word	0x20000740
 800f29c:	20001884 	.word	0x20001884

0800f2a0 <LoRaMacIsStopped>:

bool LoRaMacIsStopped( void )
{
 800f2a0:	b480      	push	{r7}
 800f2a2:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800f2a4:	4b05      	ldr	r3, [pc, #20]	; (800f2bc <LoRaMacIsStopped+0x1c>)
 800f2a6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f2aa:	2b01      	cmp	r3, #1
 800f2ac:	d101      	bne.n	800f2b2 <LoRaMacIsStopped+0x12>
    {
        return true;
 800f2ae:	2301      	movs	r3, #1
 800f2b0:	e000      	b.n	800f2b4 <LoRaMacIsStopped+0x14>
    }
    return false;
 800f2b2:	2300      	movs	r3, #0
}
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	bc80      	pop	{r7}
 800f2ba:	4770      	bx	lr
 800f2bc:	20000740 	.word	0x20000740

0800f2c0 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800f2c0:	b480      	push	{r7}
 800f2c2:	b083      	sub	sp, #12
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	4603      	mov	r3, r0
 800f2c8:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800f2ca:	4a04      	ldr	r2, [pc, #16]	; (800f2dc <LoRaMacEnableRequests+0x1c>)
 800f2cc:	79fb      	ldrb	r3, [r7, #7]
 800f2ce:	f882 3492 	strb.w	r3, [r2, #1170]	; 0x492
}
 800f2d2:	bf00      	nop
 800f2d4:	370c      	adds	r7, #12
 800f2d6:	46bd      	mov	sp, r7
 800f2d8:	bc80      	pop	{r7}
 800f2da:	4770      	bx	lr
 800f2dc:	20000740 	.word	0x20000740

0800f2e0 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800f2e0:	b580      	push	{r7, lr}
 800f2e2:	b082      	sub	sp, #8
 800f2e4:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800f2e6:	4b2c      	ldr	r3, [pc, #176]	; (800f398 <LoRaMacHandleRequestEvents+0xb8>)
 800f2e8:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800f2ec:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800f2ee:	4b2a      	ldr	r3, [pc, #168]	; (800f398 <LoRaMacHandleRequestEvents+0xb8>)
 800f2f0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d14a      	bne.n	800f38e <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800f2f8:	4b27      	ldr	r3, [pc, #156]	; (800f398 <LoRaMacHandleRequestEvents+0xb8>)
 800f2fa:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800f2fe:	f003 0301 	and.w	r3, r3, #1
 800f302:	b2db      	uxtb	r3, r3
 800f304:	2b00      	cmp	r3, #0
 800f306:	d006      	beq.n	800f316 <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800f308:	4a23      	ldr	r2, [pc, #140]	; (800f398 <LoRaMacHandleRequestEvents+0xb8>)
 800f30a:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f30e:	f36f 0300 	bfc	r3, #0, #1
 800f312:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800f316:	4b20      	ldr	r3, [pc, #128]	; (800f398 <LoRaMacHandleRequestEvents+0xb8>)
 800f318:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800f31c:	f003 0304 	and.w	r3, r3, #4
 800f320:	b2db      	uxtb	r3, r3
 800f322:	2b00      	cmp	r3, #0
 800f324:	d006      	beq.n	800f334 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800f326:	4a1c      	ldr	r2, [pc, #112]	; (800f398 <LoRaMacHandleRequestEvents+0xb8>)
 800f328:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f32c:	f36f 0382 	bfc	r3, #2, #1
 800f330:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800f334:	2001      	movs	r0, #1
 800f336:	f7ff ffc3 	bl	800f2c0 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800f33a:	793b      	ldrb	r3, [r7, #4]
 800f33c:	f003 0301 	and.w	r3, r3, #1
 800f340:	b2db      	uxtb	r3, r3
 800f342:	2b00      	cmp	r3, #0
 800f344:	d005      	beq.n	800f352 <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800f346:	4b14      	ldr	r3, [pc, #80]	; (800f398 <LoRaMacHandleRequestEvents+0xb8>)
 800f348:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	4813      	ldr	r0, [pc, #76]	; (800f39c <LoRaMacHandleRequestEvents+0xbc>)
 800f350:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800f352:	793b      	ldrb	r3, [r7, #4]
 800f354:	f003 0304 	and.w	r3, r3, #4
 800f358:	b2db      	uxtb	r3, r3
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d00e      	beq.n	800f37c <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800f35e:	4810      	ldr	r0, [pc, #64]	; (800f3a0 <LoRaMacHandleRequestEvents+0xc0>)
 800f360:	f004 fd2e 	bl	8013dc0 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800f364:	f004 fd7e 	bl	8013e64 <LoRaMacConfirmQueueGetCnt>
 800f368:	4603      	mov	r3, r0
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d006      	beq.n	800f37c <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800f36e:	4a0a      	ldr	r2, [pc, #40]	; (800f398 <LoRaMacHandleRequestEvents+0xb8>)
 800f370:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f374:	f043 0304 	orr.w	r3, r3, #4
 800f378:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800f37c:	f004 f828 	bl	80133d0 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800f380:	4a05      	ldr	r2, [pc, #20]	; (800f398 <LoRaMacHandleRequestEvents+0xb8>)
 800f382:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f386:	f36f 1304 	bfc	r3, #4, #1
 800f38a:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
}
 800f38e:	bf00      	nop
 800f390:	3708      	adds	r7, #8
 800f392:	46bd      	mov	sp, r7
 800f394:	bd80      	pop	{r7, pc}
 800f396:	bf00      	nop
 800f398:	20000740 	.word	0x20000740
 800f39c:	20000b80 	.word	0x20000b80
 800f3a0:	20000b94 	.word	0x20000b94

0800f3a4 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800f3a8:	4b16      	ldr	r3, [pc, #88]	; (800f404 <LoRaMacHandleIndicationEvents+0x60>)
 800f3aa:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800f3ae:	f003 0308 	and.w	r3, r3, #8
 800f3b2:	b2db      	uxtb	r3, r3
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d00d      	beq.n	800f3d4 <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800f3b8:	4a12      	ldr	r2, [pc, #72]	; (800f404 <LoRaMacHandleIndicationEvents+0x60>)
 800f3ba:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f3be:	f36f 03c3 	bfc	r3, #3, #1
 800f3c2:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800f3c6:	4b0f      	ldr	r3, [pc, #60]	; (800f404 <LoRaMacHandleIndicationEvents+0x60>)
 800f3c8:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800f3cc:	68db      	ldr	r3, [r3, #12]
 800f3ce:	490e      	ldr	r1, [pc, #56]	; (800f408 <LoRaMacHandleIndicationEvents+0x64>)
 800f3d0:	480e      	ldr	r0, [pc, #56]	; (800f40c <LoRaMacHandleIndicationEvents+0x68>)
 800f3d2:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800f3d4:	4b0b      	ldr	r3, [pc, #44]	; (800f404 <LoRaMacHandleIndicationEvents+0x60>)
 800f3d6:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800f3da:	f003 0302 	and.w	r3, r3, #2
 800f3de:	b2db      	uxtb	r3, r3
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d00d      	beq.n	800f400 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800f3e4:	4a07      	ldr	r2, [pc, #28]	; (800f404 <LoRaMacHandleIndicationEvents+0x60>)
 800f3e6:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f3ea:	f36f 0341 	bfc	r3, #1, #1
 800f3ee:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800f3f2:	4b04      	ldr	r3, [pc, #16]	; (800f404 <LoRaMacHandleIndicationEvents+0x60>)
 800f3f4:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800f3f8:	685b      	ldr	r3, [r3, #4]
 800f3fa:	4903      	ldr	r1, [pc, #12]	; (800f408 <LoRaMacHandleIndicationEvents+0x64>)
 800f3fc:	4804      	ldr	r0, [pc, #16]	; (800f410 <LoRaMacHandleIndicationEvents+0x6c>)
 800f3fe:	4798      	blx	r3
    }
}
 800f400:	bf00      	nop
 800f402:	bd80      	pop	{r7, pc}
 800f404:	20000740 	.word	0x20000740
 800f408:	20000bcc 	.word	0x20000bcc
 800f40c:	20000ba8 	.word	0x20000ba8
 800f410:	20000b60 	.word	0x20000b60

0800f414 <LoRaMacHandleMcpsRequest>:
    }
}
#endif /* LORAMAC_VERSION */

static void LoRaMacHandleMcpsRequest( void )
{
 800f414:	b580      	push	{r7, lr}
 800f416:	b082      	sub	sp, #8
 800f418:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800f41a:	4b2a      	ldr	r3, [pc, #168]	; (800f4c4 <LoRaMacHandleMcpsRequest+0xb0>)
 800f41c:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800f420:	f003 0301 	and.w	r3, r3, #1
 800f424:	b2db      	uxtb	r3, r3
 800f426:	2b00      	cmp	r3, #0
 800f428:	d048      	beq.n	800f4bc <LoRaMacHandleMcpsRequest+0xa8>
    {
        bool stopRetransmission = false;
 800f42a:	2300      	movs	r3, #0
 800f42c:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800f42e:	2300      	movs	r3, #0
 800f430:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800f432:	4b24      	ldr	r3, [pc, #144]	; (800f4c4 <LoRaMacHandleMcpsRequest+0xb0>)
 800f434:	f893 3440 	ldrb.w	r3, [r3, #1088]	; 0x440
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d004      	beq.n	800f446 <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800f43c:	4b21      	ldr	r3, [pc, #132]	; (800f4c4 <LoRaMacHandleMcpsRequest+0xb0>)
 800f43e:	f893 3440 	ldrb.w	r3, [r3, #1088]	; 0x440
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800f442:	2b03      	cmp	r3, #3
 800f444:	d104      	bne.n	800f450 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800f446:	f002 f943 	bl	80116d0 <CheckRetransUnconfirmedUplink>
 800f44a:	4603      	mov	r3, r0
 800f44c:	71fb      	strb	r3, [r7, #7]
 800f44e:	e010      	b.n	800f472 <LoRaMacHandleMcpsRequest+0x5e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800f450:	4b1c      	ldr	r3, [pc, #112]	; (800f4c4 <LoRaMacHandleMcpsRequest+0xb0>)
 800f452:	f893 3440 	ldrb.w	r3, [r3, #1088]	; 0x440
 800f456:	2b01      	cmp	r3, #1
 800f458:	d10b      	bne.n	800f472 <LoRaMacHandleMcpsRequest+0x5e>
            else
            {
                waitForRetransmission = true;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.RetransmitTimeoutRetry == true )
 800f45a:	4b1a      	ldr	r3, [pc, #104]	; (800f4c4 <LoRaMacHandleMcpsRequest+0xb0>)
 800f45c:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 800f460:	2b00      	cmp	r3, #0
 800f462:	d004      	beq.n	800f46e <LoRaMacHandleMcpsRequest+0x5a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800f464:	f002 f960 	bl	8011728 <CheckRetransConfirmedUplink>
 800f468:	4603      	mov	r3, r0
 800f46a:	71fb      	strb	r3, [r7, #7]
 800f46c:	e001      	b.n	800f472 <LoRaMacHandleMcpsRequest+0x5e>
            }
            else
            {
                waitForRetransmission = true;
 800f46e:	2301      	movs	r3, #1
 800f470:	71bb      	strb	r3, [r7, #6]
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 800f472:	79fb      	ldrb	r3, [r7, #7]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d00d      	beq.n	800f494 <LoRaMacHandleMcpsRequest+0x80>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800f478:	4813      	ldr	r0, [pc, #76]	; (800f4c8 <LoRaMacHandleMcpsRequest+0xb4>)
 800f47a:	f00d fe9d 	bl	801d1b8 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800f47e:	4b11      	ldr	r3, [pc, #68]	; (800f4c4 <LoRaMacHandleMcpsRequest+0xb0>)
 800f480:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f484:	f023 0320 	bic.w	r3, r3, #32
 800f488:	4a0e      	ldr	r2, [pc, #56]	; (800f4c4 <LoRaMacHandleMcpsRequest+0xb0>)
 800f48a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 800f48e:	f002 f985 	bl	801179c <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800f492:	e013      	b.n	800f4bc <LoRaMacHandleMcpsRequest+0xa8>
        else if( waitForRetransmission == false )
 800f494:	79bb      	ldrb	r3, [r7, #6]
 800f496:	f083 0301 	eor.w	r3, r3, #1
 800f49a:	b2db      	uxtb	r3, r3
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d00d      	beq.n	800f4bc <LoRaMacHandleMcpsRequest+0xa8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800f4a0:	4a08      	ldr	r2, [pc, #32]	; (800f4c4 <LoRaMacHandleMcpsRequest+0xb0>)
 800f4a2:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f4a6:	f36f 1304 	bfc	r3, #4, #1
 800f4aa:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
            MacCtx.RetransmitTimeoutRetry = false;
 800f4ae:	4b05      	ldr	r3, [pc, #20]	; (800f4c4 <LoRaMacHandleMcpsRequest+0xb0>)
 800f4b0:	2200      	movs	r2, #0
 800f4b2:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
            OnTxDelayedTimerEvent( NULL );
 800f4b6:	2000      	movs	r0, #0
 800f4b8:	f000 f9c8 	bl	800f84c <OnTxDelayedTimerEvent>
}
 800f4bc:	bf00      	nop
 800f4be:	3708      	adds	r7, #8
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	bd80      	pop	{r7, pc}
 800f4c4:	20000740 	.word	0x20000740
 800f4c8:	20000aa8 	.word	0x20000aa8

0800f4cc <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800f4cc:	b580      	push	{r7, lr}
 800f4ce:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800f4d0:	4b18      	ldr	r3, [pc, #96]	; (800f534 <LoRaMacHandleMlmeRequest+0x68>)
 800f4d2:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800f4d6:	f003 0304 	and.w	r3, r3, #4
 800f4da:	b2db      	uxtb	r3, r3
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d026      	beq.n	800f52e <LoRaMacHandleMlmeRequest+0x62>
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_1 ) == true ) ||
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_2 ) == true ) )
        {
            MacCtx.ChannelsNbTransCounter = 0;
#else
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800f4e0:	2001      	movs	r0, #1
 800f4e2:	f004 fc53 	bl	8013d8c <LoRaMacConfirmQueueIsCmdActive>
 800f4e6:	4603      	mov	r3, r0
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d012      	beq.n	800f512 <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800f4ec:	2001      	movs	r0, #1
 800f4ee:	f004 fbef 	bl	8013cd0 <LoRaMacConfirmQueueGetStatus>
 800f4f2:	4603      	mov	r3, r0
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d103      	bne.n	800f500 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800f4f8:	4b0e      	ldr	r3, [pc, #56]	; (800f534 <LoRaMacHandleMlmeRequest+0x68>)
 800f4fa:	2200      	movs	r2, #0
 800f4fc:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            }
#endif /* LORAMAC_VERSION */
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f500:	4b0c      	ldr	r3, [pc, #48]	; (800f534 <LoRaMacHandleMlmeRequest+0x68>)
 800f502:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f506:	f023 0302 	bic.w	r3, r3, #2
 800f50a:	4a0a      	ldr	r2, [pc, #40]	; (800f534 <LoRaMacHandleMlmeRequest+0x68>)
 800f50c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 800f510:	e00d      	b.n	800f52e <LoRaMacHandleMlmeRequest+0x62>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 800f512:	2006      	movs	r0, #6
 800f514:	f004 fc3a 	bl	8013d8c <LoRaMacConfirmQueueIsCmdActive>
 800f518:	4603      	mov	r3, r0
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d007      	beq.n	800f52e <LoRaMacHandleMlmeRequest+0x62>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f51e:	4b05      	ldr	r3, [pc, #20]	; (800f534 <LoRaMacHandleMlmeRequest+0x68>)
 800f520:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f524:	f023 0302 	bic.w	r3, r3, #2
 800f528:	4a02      	ldr	r2, [pc, #8]	; (800f534 <LoRaMacHandleMlmeRequest+0x68>)
 800f52a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 800f52e:	bf00      	nop
 800f530:	bd80      	pop	{r7, pc}
 800f532:	bf00      	nop
 800f534:	20000740 	.word	0x20000740

0800f538 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800f538:	b580      	push	{r7, lr}
 800f53a:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800f53c:	200b      	movs	r0, #11
 800f53e:	f004 fc25 	bl	8013d8c <LoRaMacConfirmQueueIsCmdActive>
 800f542:	4603      	mov	r3, r0
 800f544:	2b00      	cmp	r3, #0
 800f546:	d019      	beq.n	800f57c <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800f548:	4b0e      	ldr	r3, [pc, #56]	; (800f584 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f54a:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800f54e:	f003 0301 	and.w	r3, r3, #1
 800f552:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800f554:	2b00      	cmp	r3, #0
 800f556:	d111      	bne.n	800f57c <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800f558:	4b0a      	ldr	r3, [pc, #40]	; (800f584 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f55a:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800f55e:	f003 0304 	and.w	r3, r3, #4
 800f562:	b2db      	uxtb	r3, r3
 800f564:	2b00      	cmp	r3, #0
 800f566:	d009      	beq.n	800f57c <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f568:	4b06      	ldr	r3, [pc, #24]	; (800f584 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f56a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f56e:	f023 0302 	bic.w	r3, r3, #2
 800f572:	4a04      	ldr	r2, [pc, #16]	; (800f584 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f574:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 800f578:	2301      	movs	r3, #1
 800f57a:	e000      	b.n	800f57e <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 800f57c:	2300      	movs	r3, #0
}
 800f57e:	4618      	mov	r0, r3
 800f580:	bd80      	pop	{r7, pc}
 800f582:	bf00      	nop
 800f584:	20000740 	.word	0x20000740

0800f588 <CheckForMinimumAbpDatarate>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
 800f588:	b480      	push	{r7}
 800f58a:	b083      	sub	sp, #12
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	4603      	mov	r3, r0
 800f590:	71fb      	strb	r3, [r7, #7]
 800f592:	460b      	mov	r3, r1
 800f594:	71bb      	strb	r3, [r7, #6]
 800f596:	4613      	mov	r3, r2
 800f598:	717b      	strb	r3, [r7, #5]
    if( ( adr == true ) &&
 800f59a:	79fb      	ldrb	r3, [r7, #7]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d00a      	beq.n	800f5b6 <CheckForMinimumAbpDatarate+0x2e>
 800f5a0:	79bb      	ldrb	r3, [r7, #6]
 800f5a2:	2b01      	cmp	r3, #1
 800f5a4:	d107      	bne.n	800f5b6 <CheckForMinimumAbpDatarate+0x2e>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
 800f5a6:	797b      	ldrb	r3, [r7, #5]
 800f5a8:	f083 0301 	eor.w	r3, r3, #1
 800f5ac:	b2db      	uxtb	r3, r3
        ( activation == ACTIVATION_TYPE_ABP ) &&
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d001      	beq.n	800f5b6 <CheckForMinimumAbpDatarate+0x2e>
    {
        return true;
 800f5b2:	2301      	movs	r3, #1
 800f5b4:	e000      	b.n	800f5b8 <CheckForMinimumAbpDatarate+0x30>
    }
    return false;
 800f5b6:	2300      	movs	r3, #0
}
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	370c      	adds	r7, #12
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	bc80      	pop	{r7}
 800f5c0:	4770      	bx	lr
	...

0800f5c4 <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 800f5c4:	b480      	push	{r7}
 800f5c6:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800f5c8:	4b0d      	ldr	r3, [pc, #52]	; (800f600 <LoRaMacCheckForRxAbort+0x3c>)
 800f5ca:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f5ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d00f      	beq.n	800f5f6 <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800f5d6:	4b0a      	ldr	r3, [pc, #40]	; (800f600 <LoRaMacCheckForRxAbort+0x3c>)
 800f5d8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f5dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f5e0:	4a07      	ldr	r2, [pc, #28]	; (800f600 <LoRaMacCheckForRxAbort+0x3c>)
 800f5e2:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f5e6:	4b06      	ldr	r3, [pc, #24]	; (800f600 <LoRaMacCheckForRxAbort+0x3c>)
 800f5e8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f5ec:	f023 0302 	bic.w	r3, r3, #2
 800f5f0:	4a03      	ldr	r2, [pc, #12]	; (800f600 <LoRaMacCheckForRxAbort+0x3c>)
 800f5f2:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 800f5f6:	bf00      	nop
 800f5f8:	46bd      	mov	sp, r7
 800f5fa:	bc80      	pop	{r7}
 800f5fc:	4770      	bx	lr
 800f5fe:	bf00      	nop
 800f600:	20000740 	.word	0x20000740

0800f604 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 800f604:	b580      	push	{r7, lr}
 800f606:	b084      	sub	sp, #16
 800f608:	af00      	add	r7, sp, #0
 800f60a:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800f60c:	2300      	movs	r3, #0
 800f60e:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800f610:	2300      	movs	r3, #0
 800f612:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 800f614:	4b51      	ldr	r3, [pc, #324]	; (800f75c <LoRaMacHandleNvm+0x158>)
 800f616:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	f040 8099 	bne.w	800f752 <LoRaMacHandleNvm+0x14e>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	2124      	movs	r1, #36	; 0x24
 800f624:	4618      	mov	r0, r3
 800f626:	f009 fc81 	bl	8018f2c <Crc32>
 800f62a:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f630:	68ba      	ldr	r2, [r7, #8]
 800f632:	429a      	cmp	r2, r3
 800f634:	d006      	beq.n	800f644 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	68ba      	ldr	r2, [r7, #8]
 800f63a:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800f63c:	89fb      	ldrh	r3, [r7, #14]
 800f63e:	f043 0301 	orr.w	r3, r3, #1
 800f642:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	3328      	adds	r3, #40	; 0x28
 800f648:	211c      	movs	r1, #28
 800f64a:	4618      	mov	r0, r3
 800f64c:	f009 fc6e 	bl	8018f2c <Crc32>
 800f650:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f656:	68ba      	ldr	r2, [r7, #8]
 800f658:	429a      	cmp	r2, r3
 800f65a:	d006      	beq.n	800f66a <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	68ba      	ldr	r2, [r7, #8]
 800f660:	645a      	str	r2, [r3, #68]	; 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800f662:	89fb      	ldrh	r3, [r7, #14]
 800f664:	f043 0302 	orr.w	r3, r3, #2
 800f668:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	3348      	adds	r3, #72	; 0x48
 800f66e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f672:	4618      	mov	r0, r3
 800f674:	f009 fc5a 	bl	8018f2c <Crc32>
 800f678:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800f680:	68ba      	ldr	r2, [r7, #8]
 800f682:	429a      	cmp	r2, r3
 800f684:	d007      	beq.n	800f696 <LoRaMacHandleNvm+0x92>
    {
        nvmData->MacGroup2.Crc32 = crc;
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	68ba      	ldr	r2, [r7, #8]
 800f68a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800f68e:	89fb      	ldrh	r3, [r7, #14]
 800f690:	f043 0304 	orr.w	r3, r3, #4
 800f694:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800f69c:	21d4      	movs	r1, #212	; 0xd4
 800f69e:	4618      	mov	r0, r3
 800f6a0:	f009 fc44 	bl	8018f2c <Crc32>
 800f6a4:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800f6ac:	68ba      	ldr	r2, [r7, #8]
 800f6ae:	429a      	cmp	r2, r3
 800f6b0:	d007      	beq.n	800f6c2 <LoRaMacHandleNvm+0xbe>
    {
        nvmData->SecureElement.Crc32 = crc;
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	68ba      	ldr	r2, [r7, #8]
 800f6b6:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800f6ba:	89fb      	ldrh	r3, [r7, #14]
 800f6bc:	f043 0308 	orr.w	r3, r3, #8
 800f6c0:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	f503 7309 	add.w	r3, r3, #548	; 0x224
 800f6c8:	2110      	movs	r1, #16
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	f009 fc2e 	bl	8018f2c <Crc32>
 800f6d0:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 800f6d8:	68ba      	ldr	r2, [r7, #8]
 800f6da:	429a      	cmp	r2, r3
 800f6dc:	d007      	beq.n	800f6ee <LoRaMacHandleNvm+0xea>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	68ba      	ldr	r2, [r7, #8]
 800f6e2:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800f6e6:	89fb      	ldrh	r3, [r7, #14]
 800f6e8:	f043 0310 	orr.w	r3, r3, #16
 800f6ec:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	f503 730e 	add.w	r3, r3, #568	; 0x238
 800f6f4:	f44f 715e 	mov.w	r1, #888	; 0x378
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	f009 fc17 	bl	8018f2c <Crc32>
 800f6fe:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	; 0x5b0
 800f706:	68ba      	ldr	r2, [r7, #8]
 800f708:	429a      	cmp	r2, r3
 800f70a:	d007      	beq.n	800f71c <LoRaMacHandleNvm+0x118>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	68ba      	ldr	r2, [r7, #8]
 800f710:	f8c3 25b0 	str.w	r2, [r3, #1456]	; 0x5b0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800f714:	89fb      	ldrh	r3, [r7, #14]
 800f716:	f043 0320 	orr.w	r3, r3, #32
 800f71a:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	f203 53b4 	addw	r3, r3, #1460	; 0x5b4
 800f722:	2114      	movs	r1, #20
 800f724:	4618      	mov	r0, r3
 800f726:	f009 fc01 	bl	8018f2c <Crc32>
 800f72a:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	f8d3 35c8 	ldr.w	r3, [r3, #1480]	; 0x5c8
 800f732:	68ba      	ldr	r2, [r7, #8]
 800f734:	429a      	cmp	r2, r3
 800f736:	d007      	beq.n	800f748 <LoRaMacHandleNvm+0x144>
    {
        nvmData->ClassB.Crc32 = crc;
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	68ba      	ldr	r2, [r7, #8]
 800f73c:	f8c3 25c8 	str.w	r2, [r3, #1480]	; 0x5c8
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800f740:	89fb      	ldrh	r3, [r7, #14]
 800f742:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f746:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 800f748:	89fb      	ldrh	r3, [r7, #14]
 800f74a:	4618      	mov	r0, r3
 800f74c:	f002 f878 	bl	8011840 <CallNvmDataChangeCallback>
 800f750:	e000      	b.n	800f754 <LoRaMacHandleNvm+0x150>
        return;
 800f752:	bf00      	nop
}
 800f754:	3710      	adds	r7, #16
 800f756:	46bd      	mov	sp, r7
 800f758:	bd80      	pop	{r7, pc}
 800f75a:	bf00      	nop
 800f75c:	20000740 	.word	0x20000740

0800f760 <LoRaMacHandleResponseTimeout>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool LoRaMacHandleResponseTimeout( TimerTime_t timeoutInMs, TimerTime_t startTimeInMs )
{
 800f760:	b580      	push	{r7, lr}
 800f762:	b084      	sub	sp, #16
 800f764:	af00      	add	r7, sp, #0
 800f766:	6078      	str	r0, [r7, #4]
 800f768:	6039      	str	r1, [r7, #0]
    if( startTimeInMs != 0 )
 800f76a:	683b      	ldr	r3, [r7, #0]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d00d      	beq.n	800f78c <LoRaMacHandleResponseTimeout+0x2c>
    {
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 800f770:	6838      	ldr	r0, [r7, #0]
 800f772:	f00d fe4d 	bl	801d410 <UTIL_TIMER_GetElapsedTime>
 800f776:	60f8      	str	r0, [r7, #12]
        if( elapsedTime > timeoutInMs )
 800f778:	68fa      	ldr	r2, [r7, #12]
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	429a      	cmp	r2, r3
 800f77e:	d905      	bls.n	800f78c <LoRaMacHandleResponseTimeout+0x2c>
        {
            Nvm.MacGroup1.SrvAckRequested = false;
 800f780:	4b05      	ldr	r3, [pc, #20]	; (800f798 <LoRaMacHandleResponseTimeout+0x38>)
 800f782:	2200      	movs	r2, #0
 800f784:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
            return true;
 800f788:	2301      	movs	r3, #1
 800f78a:	e000      	b.n	800f78e <LoRaMacHandleResponseTimeout+0x2e>
        }
    }
    return false;
 800f78c:	2300      	movs	r3, #0
}
 800f78e:	4618      	mov	r0, r3
 800f790:	3710      	adds	r7, #16
 800f792:	46bd      	mov	sp, r7
 800f794:	bd80      	pop	{r7, pc}
 800f796:	bf00      	nop
 800f798:	20000c5c 	.word	0x20000c5c

0800f79c <LoRaMacProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 800f79c:	b580      	push	{r7, lr}
 800f79e:	b082      	sub	sp, #8
 800f7a0:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800f7a2:	2300      	movs	r3, #0
 800f7a4:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 800f7a6:	f7ff fd0b 	bl	800f1c0 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800f7aa:	f003 fe80 	bl	80134ae <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800f7ae:	4b25      	ldr	r3, [pc, #148]	; (800f844 <LoRaMacProcess+0xa8>)
 800f7b0:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800f7b4:	f003 0310 	and.w	r3, r3, #16
 800f7b8:	b2db      	uxtb	r3, r3
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d023      	beq.n	800f806 <LoRaMacProcess+0x6a>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800f7be:	2000      	movs	r0, #0
 800f7c0:	f7ff fd7e 	bl	800f2c0 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800f7c4:	f7ff fefe 	bl	800f5c4 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800f7c8:	f002 f858 	bl	801187c <IsRequestPending>
 800f7cc:	4603      	mov	r3, r0
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d006      	beq.n	800f7e0 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800f7d2:	f7ff feb1 	bl	800f538 <LoRaMacCheckForBeaconAcquisition>
 800f7d6:	4603      	mov	r3, r0
 800f7d8:	461a      	mov	r2, r3
 800f7da:	79fb      	ldrb	r3, [r7, #7]
 800f7dc:	4313      	orrs	r3, r2
 800f7de:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 800f7e0:	79fb      	ldrb	r3, [r7, #7]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d103      	bne.n	800f7ee <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 800f7e6:	f7ff fe71 	bl	800f4cc <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800f7ea:	f7ff fe13 	bl	800f414 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800f7ee:	f7ff fd77 	bl	800f2e0 <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800f7f2:	2001      	movs	r0, #1
 800f7f4:	f7ff fd64 	bl	800f2c0 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800f7f8:	4a12      	ldr	r2, [pc, #72]	; (800f844 <LoRaMacProcess+0xa8>)
 800f7fa:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f7fe:	f043 0320 	orr.w	r3, r3, #32
 800f802:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
    LoRaMacHandleIndicationEvents( );
 800f806:	f7ff fdcd 	bl	800f3a4 <LoRaMacHandleIndicationEvents>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    LoRaMacHandleRejoinEvents( );
#endif /* LORAMAC_VERSION */

    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800f80a:	4b0e      	ldr	r3, [pc, #56]	; (800f844 <LoRaMacProcess+0xa8>)
 800f80c:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 800f810:	2b02      	cmp	r3, #2
 800f812:	d101      	bne.n	800f818 <LoRaMacProcess+0x7c>
    {
        OpenContinuousRxCWindow( );
 800f814:	f001 fc1a 	bl	801104c <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800f818:	4b0a      	ldr	r3, [pc, #40]	; (800f844 <LoRaMacProcess+0xa8>)
 800f81a:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800f81e:	f003 0320 	and.w	r3, r3, #32
 800f822:	b2db      	uxtb	r3, r3
 800f824:	2b00      	cmp	r3, #0
 800f826:	d009      	beq.n	800f83c <LoRaMacProcess+0xa0>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800f828:	4a06      	ldr	r2, [pc, #24]	; (800f844 <LoRaMacProcess+0xa8>)
 800f82a:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f82e:	f36f 1345 	bfc	r3, #5, #1
 800f832:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        LoRaMacHandleNvm( &Nvm );
 800f836:	4804      	ldr	r0, [pc, #16]	; (800f848 <LoRaMacProcess+0xac>)
 800f838:	f7ff fee4 	bl	800f604 <LoRaMacHandleNvm>
    }
}
 800f83c:	bf00      	nop
 800f83e:	3708      	adds	r7, #8
 800f840:	46bd      	mov	sp, r7
 800f842:	bd80      	pop	{r7, pc}
 800f844:	20000740 	.word	0x20000740
 800f848:	20000c5c 	.word	0x20000c5c

0800f84c <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800f84c:	b580      	push	{r7, lr}
 800f84e:	b082      	sub	sp, #8
 800f850:	af00      	add	r7, sp, #0
 800f852:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800f854:	481e      	ldr	r0, [pc, #120]	; (800f8d0 <OnTxDelayedTimerEvent+0x84>)
 800f856:	f00d fcaf 	bl	801d1b8 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800f85a:	4b1e      	ldr	r3, [pc, #120]	; (800f8d4 <OnTxDelayedTimerEvent+0x88>)
 800f85c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f860:	f023 0320 	bic.w	r3, r3, #32
 800f864:	4a1b      	ldr	r2, [pc, #108]	; (800f8d4 <OnTxDelayedTimerEvent+0x88>)
 800f866:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800f86a:	4b1b      	ldr	r3, [pc, #108]	; (800f8d8 <OnTxDelayedTimerEvent+0x8c>)
 800f86c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f870:	4a18      	ldr	r2, [pc, #96]	; (800f8d4 <OnTxDelayedTimerEvent+0x88>)
 800f872:	f8d2 2498 	ldr.w	r2, [r2, #1176]	; 0x498
 800f876:	4611      	mov	r1, r2
 800f878:	4618      	mov	r0, r3
 800f87a:	f7ff ff71 	bl	800f760 <LoRaMacHandleResponseTimeout>
 800f87e:	4603      	mov	r3, r0
 800f880:	2b00      	cmp	r3, #0
 800f882:	d11e      	bne.n	800f8c2 <OnTxDelayedTimerEvent+0x76>
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800f884:	2001      	movs	r0, #1
 800f886:	f001 f92b 	bl	8010ae0 <ScheduleTx>
 800f88a:	4603      	mov	r3, r0
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d01a      	beq.n	800f8c6 <OnTxDelayedTimerEvent+0x7a>
 800f890:	2b0b      	cmp	r3, #11
 800f892:	d018      	beq.n	800f8c6 <OnTxDelayedTimerEvent+0x7a>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f894:	4b10      	ldr	r3, [pc, #64]	; (800f8d8 <OnTxDelayedTimerEvent+0x8c>)
 800f896:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f89a:	b2da      	uxtb	r2, r3
 800f89c:	4b0d      	ldr	r3, [pc, #52]	; (800f8d4 <OnTxDelayedTimerEvent+0x88>)
 800f89e:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800f8a2:	4b0c      	ldr	r3, [pc, #48]	; (800f8d4 <OnTxDelayedTimerEvent+0x88>)
 800f8a4:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800f8a8:	4b0a      	ldr	r3, [pc, #40]	; (800f8d4 <OnTxDelayedTimerEvent+0x88>)
 800f8aa:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800f8ae:	4b09      	ldr	r3, [pc, #36]	; (800f8d4 <OnTxDelayedTimerEvent+0x88>)
 800f8b0:	2209      	movs	r2, #9
 800f8b2:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800f8b6:	2009      	movs	r0, #9
 800f8b8:	f004 fa34 	bl	8013d24 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800f8bc:	f001 ff6e 	bl	801179c <StopRetransmission>
            break;
 800f8c0:	e002      	b.n	800f8c8 <OnTxDelayedTimerEvent+0x7c>
        return;
 800f8c2:	bf00      	nop
 800f8c4:	e000      	b.n	800f8c8 <OnTxDelayedTimerEvent+0x7c>
            break;
 800f8c6:	bf00      	nop
        }
    }
}
 800f8c8:	3708      	adds	r7, #8
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	bd80      	pop	{r7, pc}
 800f8ce:	bf00      	nop
 800f8d0:	20000aa8 	.word	0x20000aa8
 800f8d4:	20000740 	.word	0x20000740
 800f8d8:	20000c5c 	.word	0x20000c5c

0800f8dc <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b082      	sub	sp, #8
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800f8e4:	4b17      	ldr	r3, [pc, #92]	; (800f944 <OnRxWindow1TimerEvent+0x68>)
 800f8e6:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 800f8ea:	4b16      	ldr	r3, [pc, #88]	; (800f944 <OnRxWindow1TimerEvent+0x68>)
 800f8ec:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800f8f0:	4b15      	ldr	r3, [pc, #84]	; (800f948 <OnRxWindow1TimerEvent+0x6c>)
 800f8f2:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800f8f6:	b25a      	sxtb	r2, r3
 800f8f8:	4b12      	ldr	r3, [pc, #72]	; (800f944 <OnRxWindow1TimerEvent+0x68>)
 800f8fa:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f8fe:	4b12      	ldr	r3, [pc, #72]	; (800f948 <OnRxWindow1TimerEvent+0x6c>)
 800f900:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800f904:	4b0f      	ldr	r3, [pc, #60]	; (800f944 <OnRxWindow1TimerEvent+0x68>)
 800f906:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800f90a:	4b0f      	ldr	r3, [pc, #60]	; (800f948 <OnRxWindow1TimerEvent+0x6c>)
 800f90c:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 800f910:	4b0c      	ldr	r3, [pc, #48]	; (800f944 <OnRxWindow1TimerEvent+0x68>)
 800f912:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800f916:	4b0b      	ldr	r3, [pc, #44]	; (800f944 <OnRxWindow1TimerEvent+0x68>)
 800f918:	2200      	movs	r2, #0
 800f91a:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800f91e:	4b09      	ldr	r3, [pc, #36]	; (800f944 <OnRxWindow1TimerEvent+0x68>)
 800f920:	2200      	movs	r2, #0
 800f922:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800f926:	4b08      	ldr	r3, [pc, #32]	; (800f948 <OnRxWindow1TimerEvent+0x6c>)
 800f928:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 800f92c:	4b05      	ldr	r3, [pc, #20]	; (800f944 <OnRxWindow1TimerEvent+0x68>)
 800f92e:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800f932:	4906      	ldr	r1, [pc, #24]	; (800f94c <OnRxWindow1TimerEvent+0x70>)
 800f934:	4806      	ldr	r0, [pc, #24]	; (800f950 <OnRxWindow1TimerEvent+0x74>)
 800f936:	f001 fb55 	bl	8010fe4 <RxWindowSetup>
}
 800f93a:	bf00      	nop
 800f93c:	3708      	adds	r7, #8
 800f93e:	46bd      	mov	sp, r7
 800f940:	bd80      	pop	{r7, pc}
 800f942:	bf00      	nop
 800f944:	20000740 	.word	0x20000740
 800f948:	20000c5c 	.word	0x20000c5c
 800f94c:	20000af8 	.word	0x20000af8
 800f950:	20000ac0 	.word	0x20000ac0

0800f954 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800f954:	b580      	push	{r7, lr}
 800f956:	b082      	sub	sp, #8
 800f958:	af00      	add	r7, sp, #0
 800f95a:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800f95c:	4b19      	ldr	r3, [pc, #100]	; (800f9c4 <OnRxWindow2TimerEvent+0x70>)
 800f95e:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 800f962:	2b00      	cmp	r3, #0
 800f964:	d029      	beq.n	800f9ba <OnRxWindow2TimerEvent+0x66>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800f966:	4b17      	ldr	r3, [pc, #92]	; (800f9c4 <OnRxWindow2TimerEvent+0x70>)
 800f968:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 800f96c:	4b15      	ldr	r3, [pc, #84]	; (800f9c4 <OnRxWindow2TimerEvent+0x70>)
 800f96e:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800f972:	4b15      	ldr	r3, [pc, #84]	; (800f9c8 <OnRxWindow2TimerEvent+0x74>)
 800f974:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f976:	4a13      	ldr	r2, [pc, #76]	; (800f9c4 <OnRxWindow2TimerEvent+0x70>)
 800f978:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f97c:	4b12      	ldr	r3, [pc, #72]	; (800f9c8 <OnRxWindow2TimerEvent+0x74>)
 800f97e:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800f982:	4b10      	ldr	r3, [pc, #64]	; (800f9c4 <OnRxWindow2TimerEvent+0x70>)
 800f984:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800f988:	4b0f      	ldr	r3, [pc, #60]	; (800f9c8 <OnRxWindow2TimerEvent+0x74>)
 800f98a:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 800f98e:	4b0d      	ldr	r3, [pc, #52]	; (800f9c4 <OnRxWindow2TimerEvent+0x70>)
 800f990:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800f994:	4b0b      	ldr	r3, [pc, #44]	; (800f9c4 <OnRxWindow2TimerEvent+0x70>)
 800f996:	2200      	movs	r2, #0
 800f998:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800f99c:	4b09      	ldr	r3, [pc, #36]	; (800f9c4 <OnRxWindow2TimerEvent+0x70>)
 800f99e:	2201      	movs	r2, #1
 800f9a0:	f883 23e3 	strb.w	r2, [r3, #995]	; 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800f9a4:	4b08      	ldr	r3, [pc, #32]	; (800f9c8 <OnRxWindow2TimerEvent+0x74>)
 800f9a6:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 800f9aa:	4b06      	ldr	r3, [pc, #24]	; (800f9c4 <OnRxWindow2TimerEvent+0x70>)
 800f9ac:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800f9b0:	4906      	ldr	r1, [pc, #24]	; (800f9cc <OnRxWindow2TimerEvent+0x78>)
 800f9b2:	4807      	ldr	r0, [pc, #28]	; (800f9d0 <OnRxWindow2TimerEvent+0x7c>)
 800f9b4:	f001 fb16 	bl	8010fe4 <RxWindowSetup>
 800f9b8:	e000      	b.n	800f9bc <OnRxWindow2TimerEvent+0x68>
        return;
 800f9ba:	bf00      	nop
}
 800f9bc:	3708      	adds	r7, #8
 800f9be:	46bd      	mov	sp, r7
 800f9c0:	bd80      	pop	{r7, pc}
 800f9c2:	bf00      	nop
 800f9c4:	20000740 	.word	0x20000740
 800f9c8:	20000c5c 	.word	0x20000c5c
 800f9cc:	20000b10 	.word	0x20000b10
 800f9d0:	20000ad8 	.word	0x20000ad8

0800f9d4 <OnRetransmitTimeoutTimerEvent>:

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void OnRetransmitTimeoutTimerEvent( void* context )
{
 800f9d4:	b580      	push	{r7, lr}
 800f9d6:	b082      	sub	sp, #8
 800f9d8:	af00      	add	r7, sp, #0
 800f9da:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800f9dc:	4808      	ldr	r0, [pc, #32]	; (800fa00 <OnRetransmitTimeoutTimerEvent+0x2c>)
 800f9de:	f00d fbeb 	bl	801d1b8 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800f9e2:	4b08      	ldr	r3, [pc, #32]	; (800fa04 <OnRetransmitTimeoutTimerEvent+0x30>)
 800f9e4:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d003      	beq.n	800f9f4 <OnRetransmitTimeoutTimerEvent+0x20>
    {
        MacCtx.RetransmitTimeoutRetry = true;
 800f9ec:	4b05      	ldr	r3, [pc, #20]	; (800fa04 <OnRetransmitTimeoutTimerEvent+0x30>)
 800f9ee:	2201      	movs	r2, #1
 800f9f0:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
    }
    OnMacProcessNotify( );
 800f9f4:	f001 ff0e 	bl	8011814 <OnMacProcessNotify>
}
 800f9f8:	bf00      	nop
 800f9fa:	3708      	adds	r7, #8
 800f9fc:	46bd      	mov	sp, r7
 800f9fe:	bd80      	pop	{r7, pc}
 800fa00:	20000b40 	.word	0x20000b40
 800fa04:	20000740 	.word	0x20000740

0800fa08 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800fa08:	b580      	push	{r7, lr}
 800fa0a:	b084      	sub	sp, #16
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	60ba      	str	r2, [r7, #8]
 800fa10:	607b      	str	r3, [r7, #4]
 800fa12:	4603      	mov	r3, r0
 800fa14:	73fb      	strb	r3, [r7, #15]
 800fa16:	460b      	mov	r3, r1
 800fa18:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800fa1a:	68bb      	ldr	r3, [r7, #8]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d005      	beq.n	800fa2c <GetFCntDown+0x24>
 800fa20:	69bb      	ldr	r3, [r7, #24]
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d002      	beq.n	800fa2c <GetFCntDown+0x24>
 800fa26:	69fb      	ldr	r3, [r7, #28]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d101      	bne.n	800fa30 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800fa2c:	2309      	movs	r3, #9
 800fa2e:	e028      	b.n	800fa82 <GetFCntDown+0x7a>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800fa30:	7bfb      	ldrb	r3, [r7, #15]
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d016      	beq.n	800fa64 <GetFCntDown+0x5c>
 800fa36:	2b01      	cmp	r3, #1
 800fa38:	d118      	bne.n	800fa6c <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800fa3a:	79bb      	ldrb	r3, [r7, #6]
 800fa3c:	2b01      	cmp	r3, #1
 800fa3e:	d10d      	bne.n	800fa5c <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800fa40:	7bbb      	ldrb	r3, [r7, #14]
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d002      	beq.n	800fa4c <GetFCntDown+0x44>
 800fa46:	7bbb      	ldrb	r3, [r7, #14]
 800fa48:	2b03      	cmp	r3, #3
 800fa4a:	d103      	bne.n	800fa54 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 800fa4c:	69bb      	ldr	r3, [r7, #24]
 800fa4e:	2202      	movs	r2, #2
 800fa50:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800fa52:	e00d      	b.n	800fa70 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 800fa54:	69bb      	ldr	r3, [r7, #24]
 800fa56:	2201      	movs	r2, #1
 800fa58:	701a      	strb	r2, [r3, #0]
            break;
 800fa5a:	e009      	b.n	800fa70 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 800fa5c:	69bb      	ldr	r3, [r7, #24]
 800fa5e:	2203      	movs	r2, #3
 800fa60:	701a      	strb	r2, [r3, #0]
            break;
 800fa62:	e005      	b.n	800fa70 <GetFCntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800fa64:	69bb      	ldr	r3, [r7, #24]
 800fa66:	2204      	movs	r2, #4
 800fa68:	701a      	strb	r2, [r3, #0]
            break;
 800fa6a:	e001      	b.n	800fa70 <GetFCntDown+0x68>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800fa6c:	2305      	movs	r3, #5
 800fa6e:	e008      	b.n	800fa82 <GetFCntDown+0x7a>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 800fa70:	69bb      	ldr	r3, [r7, #24]
 800fa72:	7818      	ldrb	r0, [r3, #0]
 800fa74:	68bb      	ldr	r3, [r7, #8]
 800fa76:	89db      	ldrh	r3, [r3, #14]
 800fa78:	69fa      	ldr	r2, [r7, #28]
 800fa7a:	4619      	mov	r1, r3
 800fa7c:	f004 fd90 	bl	80145a0 <LoRaMacCryptoGetFCntDown>
 800fa80:	4603      	mov	r3, r0
}
 800fa82:	4618      	mov	r0, r3
 800fa84:	3710      	adds	r7, #16
 800fa86:	46bd      	mov	sp, r7
 800fa88:	bd80      	pop	{r7, pc}
	...

0800fa8c <SwitchClass>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800fa8c:	b5b0      	push	{r4, r5, r7, lr}
 800fa8e:	b084      	sub	sp, #16
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	4603      	mov	r3, r0
 800fa94:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fa96:	2303      	movs	r3, #3
 800fa98:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 800fa9a:	4b6e      	ldr	r3, [pc, #440]	; (800fc54 <SwitchClass+0x1c8>)
 800fa9c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800faa0:	2b02      	cmp	r3, #2
 800faa2:	f000 80bb 	beq.w	800fc1c <SwitchClass+0x190>
 800faa6:	2b02      	cmp	r3, #2
 800faa8:	f300 80ce 	bgt.w	800fc48 <SwitchClass+0x1bc>
 800faac:	2b00      	cmp	r3, #0
 800faae:	d003      	beq.n	800fab8 <SwitchClass+0x2c>
 800fab0:	2b01      	cmp	r3, #1
 800fab2:	f000 80a5 	beq.w	800fc00 <SwitchClass+0x174>
 800fab6:	e0c7      	b.n	800fc48 <SwitchClass+0x1bc>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800fab8:	79fb      	ldrb	r3, [r7, #7]
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d109      	bne.n	800fad2 <SwitchClass+0x46>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800fabe:	4b65      	ldr	r3, [pc, #404]	; (800fc54 <SwitchClass+0x1c8>)
 800fac0:	4a64      	ldr	r2, [pc, #400]	; (800fc54 <SwitchClass+0x1c8>)
 800fac2:	3374      	adds	r3, #116	; 0x74
 800fac4:	326c      	adds	r2, #108	; 0x6c
 800fac6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800faca:	e883 0003 	stmia.w	r3, {r0, r1}

                status = LORAMAC_STATUS_OK;
 800face:	2300      	movs	r3, #0
 800fad0:	73fb      	strb	r3, [r7, #15]
            }
            if( deviceClass == CLASS_B )
 800fad2:	79fb      	ldrb	r3, [r7, #7]
 800fad4:	2b01      	cmp	r3, #1
 800fad6:	d10c      	bne.n	800faf2 <SwitchClass+0x66>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800fad8:	79fb      	ldrb	r3, [r7, #7]
 800fada:	4618      	mov	r0, r3
 800fadc:	f003 fc7e 	bl	80133dc <LoRaMacClassBSwitchClass>
 800fae0:	4603      	mov	r3, r0
 800fae2:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 800fae4:	7bfb      	ldrb	r3, [r7, #15]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d103      	bne.n	800faf2 <SwitchClass+0x66>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800faea:	4a5a      	ldr	r2, [pc, #360]	; (800fc54 <SwitchClass+0x1c8>)
 800faec:	79fb      	ldrb	r3, [r7, #7]
 800faee:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
                }
            }

            if( deviceClass == CLASS_C )
 800faf2:	79fb      	ldrb	r3, [r7, #7]
 800faf4:	2b02      	cmp	r3, #2
 800faf6:	f040 80a2 	bne.w	800fc3e <SwitchClass+0x1b2>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800fafa:	4a56      	ldr	r2, [pc, #344]	; (800fc54 <SwitchClass+0x1c8>)
 800fafc:	79fb      	ldrb	r3, [r7, #7]
 800fafe:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800fb02:	4a55      	ldr	r2, [pc, #340]	; (800fc58 <SwitchClass+0x1cc>)
 800fb04:	4b54      	ldr	r3, [pc, #336]	; (800fc58 <SwitchClass+0x1cc>)
 800fb06:	f502 747a 	add.w	r4, r2, #1000	; 0x3e8
 800fb0a:	f503 7574 	add.w	r5, r3, #976	; 0x3d0
 800fb0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fb10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fb12:	e895 0003 	ldmia.w	r5, {r0, r1}
 800fb16:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800fb1a:	4b4f      	ldr	r3, [pc, #316]	; (800fc58 <SwitchClass+0x1cc>)
 800fb1c:	2202      	movs	r2, #2
 800fb1e:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800fb22:	2300      	movs	r3, #0
 800fb24:	73bb      	strb	r3, [r7, #14]
 800fb26:	e05b      	b.n	800fbe0 <SwitchClass+0x154>
                {
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800fb28:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800fb2c:	4949      	ldr	r1, [pc, #292]	; (800fc54 <SwitchClass+0x1c8>)
 800fb2e:	4613      	mov	r3, r2
 800fb30:	005b      	lsls	r3, r3, #1
 800fb32:	4413      	add	r3, r2
 800fb34:	011b      	lsls	r3, r3, #4
 800fb36:	440b      	add	r3, r1
 800fb38:	33e9      	adds	r3, #233	; 0xe9
 800fb3a:	781b      	ldrb	r3, [r3, #0]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d049      	beq.n	800fbd4 <SwitchClass+0x148>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 800fb40:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800fb44:	4943      	ldr	r1, [pc, #268]	; (800fc54 <SwitchClass+0x1c8>)
 800fb46:	4613      	mov	r3, r2
 800fb48:	005b      	lsls	r3, r3, #1
 800fb4a:	4413      	add	r3, r2
 800fb4c:	011b      	lsls	r3, r3, #4
 800fb4e:	440b      	add	r3, r1
 800fb50:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800fb54:	781b      	ldrb	r3, [r3, #0]
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800fb56:	2b02      	cmp	r3, #2
 800fb58:	d13c      	bne.n	800fbd4 <SwitchClass+0x148>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 800fb5a:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800fb5e:	493d      	ldr	r1, [pc, #244]	; (800fc54 <SwitchClass+0x1c8>)
 800fb60:	4613      	mov	r3, r2
 800fb62:	005b      	lsls	r3, r3, #1
 800fb64:	4413      	add	r3, r2
 800fb66:	011b      	lsls	r3, r3, #4
 800fb68:	440b      	add	r3, r1
 800fb6a:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	4a38      	ldr	r2, [pc, #224]	; (800fc54 <SwitchClass+0x1c8>)
 800fb72:	6753      	str	r3, [r2, #116]	; 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 800fb74:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800fb78:	4936      	ldr	r1, [pc, #216]	; (800fc54 <SwitchClass+0x1c8>)
 800fb7a:	4613      	mov	r3, r2
 800fb7c:	005b      	lsls	r3, r3, #1
 800fb7e:	4413      	add	r3, r2
 800fb80:	011b      	lsls	r3, r3, #4
 800fb82:	440b      	add	r3, r1
 800fb84:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800fb88:	f993 3000 	ldrsb.w	r3, [r3]
 800fb8c:	b2da      	uxtb	r2, r3
 800fb8e:	4b31      	ldr	r3, [pc, #196]	; (800fc54 <SwitchClass+0x1c8>)
 800fb90:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800fb94:	4b30      	ldr	r3, [pc, #192]	; (800fc58 <SwitchClass+0x1cc>)
 800fb96:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 800fb9a:	4b2f      	ldr	r3, [pc, #188]	; (800fc58 <SwitchClass+0x1cc>)
 800fb9c:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800fba0:	4b2c      	ldr	r3, [pc, #176]	; (800fc54 <SwitchClass+0x1c8>)
 800fba2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fba4:	4a2c      	ldr	r2, [pc, #176]	; (800fc58 <SwitchClass+0x1cc>)
 800fba6:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800fbaa:	4b2a      	ldr	r3, [pc, #168]	; (800fc54 <SwitchClass+0x1c8>)
 800fbac:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800fbb0:	4b29      	ldr	r3, [pc, #164]	; (800fc58 <SwitchClass+0x1cc>)
 800fbb2:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800fbb6:	4b27      	ldr	r3, [pc, #156]	; (800fc54 <SwitchClass+0x1c8>)
 800fbb8:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 800fbbc:	4b26      	ldr	r3, [pc, #152]	; (800fc58 <SwitchClass+0x1cc>)
 800fbbe:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800fbc2:	4b25      	ldr	r3, [pc, #148]	; (800fc58 <SwitchClass+0x1cc>)
 800fbc4:	2203      	movs	r2, #3
 800fbc6:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800fbca:	4b23      	ldr	r3, [pc, #140]	; (800fc58 <SwitchClass+0x1cc>)
 800fbcc:	2201      	movs	r2, #1
 800fbce:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
                        break;
 800fbd2:	e009      	b.n	800fbe8 <SwitchClass+0x15c>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800fbd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fbd8:	b2db      	uxtb	r3, r3
 800fbda:	3301      	adds	r3, #1
 800fbdc:	b2db      	uxtb	r3, r3
 800fbde:	73bb      	strb	r3, [r7, #14]
 800fbe0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	dd9f      	ble.n	800fb28 <SwitchClass+0x9c>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800fbe8:	4b1b      	ldr	r3, [pc, #108]	; (800fc58 <SwitchClass+0x1cc>)
 800fbea:	2200      	movs	r2, #0
 800fbec:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800fbf0:	4b1a      	ldr	r3, [pc, #104]	; (800fc5c <SwitchClass+0x1d0>)
 800fbf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbf4:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 800fbf6:	f001 fa29 	bl	801104c <OpenContinuousRxCWindow>
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */

                status = LORAMAC_STATUS_OK;
 800fbfa:	2300      	movs	r3, #0
 800fbfc:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800fbfe:	e01e      	b.n	800fc3e <SwitchClass+0x1b2>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800fc00:	79fb      	ldrb	r3, [r7, #7]
 800fc02:	4618      	mov	r0, r3
 800fc04:	f003 fbea 	bl	80133dc <LoRaMacClassBSwitchClass>
 800fc08:	4603      	mov	r3, r0
 800fc0a:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 800fc0c:	7bfb      	ldrb	r3, [r7, #15]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d117      	bne.n	800fc42 <SwitchClass+0x1b6>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800fc12:	4a10      	ldr	r2, [pc, #64]	; (800fc54 <SwitchClass+0x1c8>)
 800fc14:	79fb      	ldrb	r3, [r7, #7]
 800fc16:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
            }
            break;
 800fc1a:	e012      	b.n	800fc42 <SwitchClass+0x1b6>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800fc1c:	79fb      	ldrb	r3, [r7, #7]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d111      	bne.n	800fc46 <SwitchClass+0x1ba>
            {
                // Reset RxSlot to NONE
                MacCtx.RxSlot = RX_SLOT_NONE;
 800fc22:	4b0d      	ldr	r3, [pc, #52]	; (800fc58 <SwitchClass+0x1cc>)
 800fc24:	2206      	movs	r2, #6
 800fc26:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490

                Nvm.MacGroup2.DeviceClass = deviceClass;
 800fc2a:	4a0a      	ldr	r2, [pc, #40]	; (800fc54 <SwitchClass+0x1c8>)
 800fc2c:	79fb      	ldrb	r3, [r7, #7]
 800fc2e:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800fc32:	4b0a      	ldr	r3, [pc, #40]	; (800fc5c <SwitchClass+0x1d0>)
 800fc34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc36:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800fc38:	2300      	movs	r3, #0
 800fc3a:	73fb      	strb	r3, [r7, #15]
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */
            }
            break;
 800fc3c:	e003      	b.n	800fc46 <SwitchClass+0x1ba>
            break;
 800fc3e:	bf00      	nop
 800fc40:	e002      	b.n	800fc48 <SwitchClass+0x1bc>
            break;
 800fc42:	bf00      	nop
 800fc44:	e000      	b.n	800fc48 <SwitchClass+0x1bc>
            break;
 800fc46:	bf00      	nop
        }
    }

    return status;
 800fc48:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc4a:	4618      	mov	r0, r3
 800fc4c:	3710      	adds	r7, #16
 800fc4e:	46bd      	mov	sp, r7
 800fc50:	bdb0      	pop	{r4, r5, r7, pc}
 800fc52:	bf00      	nop
 800fc54:	20000c5c 	.word	0x20000c5c
 800fc58:	20000740 	.word	0x20000740
 800fc5c:	0801ea54 	.word	0x0801ea54

0800fc60 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800fc60:	b580      	push	{r7, lr}
 800fc62:	b086      	sub	sp, #24
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	4603      	mov	r3, r0
 800fc68:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800fc6a:	4b10      	ldr	r3, [pc, #64]	; (800fcac <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800fc6c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800fc70:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 800fc72:	79fb      	ldrb	r3, [r7, #7]
 800fc74:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800fc76:	230d      	movs	r3, #13
 800fc78:	743b      	strb	r3, [r7, #16]

    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800fc7a:	4b0c      	ldr	r3, [pc, #48]	; (800fcac <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800fc7c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d001      	beq.n	800fc88 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800fc84:	230e      	movs	r3, #14
 800fc86:	743b      	strb	r3, [r7, #16]
    }
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fc88:	4b08      	ldr	r3, [pc, #32]	; (800fcac <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800fc8a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800fc8e:	f107 0210 	add.w	r2, r7, #16
 800fc92:	4611      	mov	r1, r2
 800fc94:	4618      	mov	r0, r3
 800fc96:	f005 faf3 	bl	8015280 <RegionGetPhyParam>
 800fc9a:	4603      	mov	r3, r0
 800fc9c:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	b2db      	uxtb	r3, r3
}
 800fca2:	4618      	mov	r0, r3
 800fca4:	3718      	adds	r7, #24
 800fca6:	46bd      	mov	sp, r7
 800fca8:	bd80      	pop	{r7, pc}
 800fcaa:	bf00      	nop
 800fcac:	20000c5c 	.word	0x20000c5c

0800fcb0 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800fcb0:	b580      	push	{r7, lr}
 800fcb2:	b084      	sub	sp, #16
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	4603      	mov	r3, r0
 800fcb8:	71fb      	strb	r3, [r7, #7]
 800fcba:	460b      	mov	r3, r1
 800fcbc:	71bb      	strb	r3, [r7, #6]
 800fcbe:	4613      	mov	r3, r2
 800fcc0:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 800fcc6:	2300      	movs	r3, #0
 800fcc8:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800fcca:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800fcce:	4618      	mov	r0, r3
 800fcd0:	f7ff ffc6 	bl	800fc60 <GetMaxAppPayloadWithoutFOptsLength>
 800fcd4:	4603      	mov	r3, r0
 800fcd6:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800fcd8:	79fb      	ldrb	r3, [r7, #7]
 800fcda:	b29a      	uxth	r2, r3
 800fcdc:	797b      	ldrb	r3, [r7, #5]
 800fcde:	b29b      	uxth	r3, r3
 800fce0:	4413      	add	r3, r2
 800fce2:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800fce4:	89ba      	ldrh	r2, [r7, #12]
 800fce6:	89fb      	ldrh	r3, [r7, #14]
 800fce8:	429a      	cmp	r2, r3
 800fcea:	d804      	bhi.n	800fcf6 <ValidatePayloadLength+0x46>
 800fcec:	89bb      	ldrh	r3, [r7, #12]
 800fcee:	2bff      	cmp	r3, #255	; 0xff
 800fcf0:	d801      	bhi.n	800fcf6 <ValidatePayloadLength+0x46>
    {
        return true;
 800fcf2:	2301      	movs	r3, #1
 800fcf4:	e000      	b.n	800fcf8 <ValidatePayloadLength+0x48>
    }
    return false;
 800fcf6:	2300      	movs	r3, #0
}
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	3710      	adds	r7, #16
 800fcfc:	46bd      	mov	sp, r7
 800fcfe:	bd80      	pop	{r7, pc}

0800fd00 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800fd00:	b590      	push	{r4, r7, lr}
 800fd02:	b0a5      	sub	sp, #148	; 0x94
 800fd04:	af02      	add	r7, sp, #8
 800fd06:	6078      	str	r0, [r7, #4]
 800fd08:	4608      	mov	r0, r1
 800fd0a:	4611      	mov	r1, r2
 800fd0c:	461a      	mov	r2, r3
 800fd0e:	4603      	mov	r3, r0
 800fd10:	70fb      	strb	r3, [r7, #3]
 800fd12:	460b      	mov	r3, r1
 800fd14:	70bb      	strb	r3, [r7, #2]
 800fd16:	4613      	mov	r3, r2
 800fd18:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 800fd1a:	2300      	movs	r3, #0
 800fd1c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 800fd20:	2300      	movs	r3, #0
 800fd22:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800fd26:	2300      	movs	r3, #0
 800fd28:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    MacCommand_t* macCmd;
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 800fd2c:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	f000 84ab 	beq.w	801068c <ProcessMacCommands+0x98c>
 800fd36:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 800fd3a:	2b01      	cmp	r3, #1
 800fd3c:	f040 84ac 	bne.w	8010698 <ProcessMacCommands+0x998>
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 800fd40:	f000 bca4 	b.w	801068c <ProcessMacCommands+0x98c>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800fd44:	78fb      	ldrb	r3, [r7, #3]
 800fd46:	687a      	ldr	r2, [r7, #4]
 800fd48:	4413      	add	r3, r2
 800fd4a:	781b      	ldrb	r3, [r3, #0]
 800fd4c:	4618      	mov	r0, r3
 800fd4e:	f003 fe45 	bl	80139dc <LoRaMacCommandsGetCmdSize>
 800fd52:	4603      	mov	r3, r0
 800fd54:	461a      	mov	r2, r3
 800fd56:	78fb      	ldrb	r3, [r7, #3]
 800fd58:	441a      	add	r2, r3
 800fd5a:	78bb      	ldrb	r3, [r7, #2]
 800fd5c:	429a      	cmp	r2, r3
 800fd5e:	f300 849d 	bgt.w	801069c <ProcessMacCommands+0x99c>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800fd62:	78fb      	ldrb	r3, [r7, #3]
 800fd64:	1c5a      	adds	r2, r3, #1
 800fd66:	70fa      	strb	r2, [r7, #3]
 800fd68:	461a      	mov	r2, r3
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	4413      	add	r3, r2
 800fd6e:	781b      	ldrb	r3, [r3, #0]
 800fd70:	3b02      	subs	r3, #2
 800fd72:	2b11      	cmp	r3, #17
 800fd74:	f200 8494 	bhi.w	80106a0 <ProcessMacCommands+0x9a0>
 800fd78:	a201      	add	r2, pc, #4	; (adr r2, 800fd80 <ProcessMacCommands+0x80>)
 800fd7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd7e:	bf00      	nop
 800fd80:	0800fdc9 	.word	0x0800fdc9
 800fd84:	0800fe0b 	.word	0x0800fe0b
 800fd88:	0800ff87 	.word	0x0800ff87
 800fd8c:	0800ffc5 	.word	0x0800ffc5
 800fd90:	080100bd 	.word	0x080100bd
 800fd94:	0801010d 	.word	0x0801010d
 800fd98:	080101c9 	.word	0x080101c9
 800fd9c:	0801021f 	.word	0x0801021f
 800fda0:	08010305 	.word	0x08010305
 800fda4:	080106a1 	.word	0x080106a1
 800fda8:	080106a1 	.word	0x080106a1
 800fdac:	080103ad 	.word	0x080103ad
 800fdb0:	080106a1 	.word	0x080106a1
 800fdb4:	080106a1 	.word	0x080106a1
 800fdb8:	080104cd 	.word	0x080104cd
 800fdbc:	08010501 	.word	0x08010501
 800fdc0:	08010591 	.word	0x08010591
 800fdc4:	08010607 	.word	0x08010607
                break;
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800fdc8:	2005      	movs	r0, #5
 800fdca:	f003 ffdf 	bl	8013d8c <LoRaMacConfirmQueueIsCmdActive>
 800fdce:	4603      	mov	r3, r0
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	f000 845b 	beq.w	801068c <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800fdd6:	2105      	movs	r1, #5
 800fdd8:	2000      	movs	r0, #0
 800fdda:	f003 ff4b 	bl	8013c74 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800fdde:	78fb      	ldrb	r3, [r7, #3]
 800fde0:	1c5a      	adds	r2, r3, #1
 800fde2:	70fa      	strb	r2, [r7, #3]
 800fde4:	461a      	mov	r2, r3
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	4413      	add	r3, r2
 800fdea:	781a      	ldrb	r2, [r3, #0]
 800fdec:	4bb0      	ldr	r3, [pc, #704]	; (80100b0 <ProcessMacCommands+0x3b0>)
 800fdee:	f883 245c 	strb.w	r2, [r3, #1116]	; 0x45c
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800fdf2:	78fb      	ldrb	r3, [r7, #3]
 800fdf4:	1c5a      	adds	r2, r3, #1
 800fdf6:	70fa      	strb	r2, [r7, #3]
 800fdf8:	461a      	mov	r2, r3
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	4413      	add	r3, r2
 800fdfe:	781a      	ldrb	r2, [r3, #0]
 800fe00:	4bab      	ldr	r3, [pc, #684]	; (80100b0 <ProcessMacCommands+0x3b0>)
 800fe02:	f883 245d 	strb.w	r2, [r3, #1117]	; 0x45d
                }
                break;
 800fe06:	f000 bc41 	b.w	801068c <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800fe0a:	2300      	movs	r3, #0
 800fe0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 800fe10:	2300      	movs	r3, #0
 800fe12:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 800fe16:	2300      	movs	r3, #0
 800fe18:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
                }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                if( adrBlockFound == false )
 800fe22:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800fe26:	f083 0301 	eor.w	r3, r3, #1
 800fe2a:	b2db      	uxtb	r3, r3
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	f000 80a5 	beq.w	800ff7c <ProcessMacCommands+0x27c>
                {
                    adrBlockFound = true;
 800fe32:	2301      	movs	r3, #1
 800fe34:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    do
                    {
                        // Fill parameter structure
                        linkAdrReq.Payload = &payload[macIndex - 1];
 800fe38:	78fb      	ldrb	r3, [r7, #3]
 800fe3a:	3b01      	subs	r3, #1
 800fe3c:	687a      	ldr	r2, [r7, #4]
 800fe3e:	4413      	add	r3, r2
 800fe40:	65fb      	str	r3, [r7, #92]	; 0x5c
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800fe42:	4b9c      	ldr	r3, [pc, #624]	; (80100b4 <ProcessMacCommands+0x3b4>)
 800fe44:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 800fe48:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800fe4c:	4b99      	ldr	r3, [pc, #612]	; (80100b4 <ProcessMacCommands+0x3b4>)
 800fe4e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800fe52:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800fe56:	4b97      	ldr	r3, [pc, #604]	; (80100b4 <ProcessMacCommands+0x3b4>)
 800fe58:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800fe5c:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800fe60:	4b94      	ldr	r3, [pc, #592]	; (80100b4 <ProcessMacCommands+0x3b4>)
 800fe62:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800fe66:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800fe6a:	4b92      	ldr	r3, [pc, #584]	; (80100b4 <ProcessMacCommands+0x3b4>)
 800fe6c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800fe70:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 800fe74:	4b8f      	ldr	r3, [pc, #572]	; (80100b4 <ProcessMacCommands+0x3b4>)
 800fe76:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800fe7a:	65bb      	str	r3, [r7, #88]	; 0x58

                        // There is a fundamental difference in reporting the status
                        // of the LinkAdrRequests when ADR is on or off. When ADR is on, every
                        // LinkAdrAns contains the same value. This does not hold when ADR is off,
                        // where every LinkAdrAns requires an individual status.
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800fe7c:	4b8d      	ldr	r3, [pc, #564]	; (80100b4 <ProcessMacCommands+0x3b4>)
 800fe7e:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d008      	beq.n	800fe98 <ProcessMacCommands+0x198>
                        {
                            // When ADR is on, the function RegionLinkAdrReq will take care
                            // about the parsing and interpretation of the LinkAdrRequest block and
                            // it provides one status which shall be applied to every LinkAdrAns
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800fe86:	78ba      	ldrb	r2, [r7, #2]
 800fe88:	78fb      	ldrb	r3, [r7, #3]
 800fe8a:	1ad3      	subs	r3, r2, r3
 800fe8c:	b2db      	uxtb	r3, r3
 800fe8e:	3301      	adds	r3, #1
 800fe90:	b2db      	uxtb	r3, r3
 800fe92:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 800fe96:	e002      	b.n	800fe9e <ProcessMacCommands+0x19e>
                            // When ADR is off, this function will loop over the individual LinkAdrRequests
                            // and will call RegionLinkAdrReq for each individually, as every request
                            // requires an individual answer.
                            // When ADR is off, the function RegionLinkAdrReq ignores the new values for
                            // ChannelsDatarate, ChannelsTxPower and ChannelsNbTrans.
                            linkAdrReq.PayloadSize = 5;
 800fe98:	2305      	movs	r3, #5
 800fe9a:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                        }

                        // Process the ADR requests
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800fe9e:	4b85      	ldr	r3, [pc, #532]	; (80100b4 <ProcessMacCommands+0x3b4>)
 800fea0:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800fea4:	f107 0456 	add.w	r4, r7, #86	; 0x56
 800fea8:	f107 0257 	add.w	r2, r7, #87	; 0x57
 800feac:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800feb0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800feb4:	9301      	str	r3, [sp, #4]
 800feb6:	f107 0355 	add.w	r3, r7, #85	; 0x55
 800feba:	9300      	str	r3, [sp, #0]
 800febc:	4623      	mov	r3, r4
 800febe:	f005 fae2 	bl	8015486 <RegionLinkAdrReq>
 800fec2:	4603      	mov	r3, r0
 800fec4:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                                &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                        if( ( status & 0x07 ) == 0x07 )
 800fec8:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800fecc:	f003 0307 	and.w	r3, r3, #7
 800fed0:	2b07      	cmp	r3, #7
 800fed2:	d119      	bne.n	800ff08 <ProcessMacCommands+0x208>
                        {
                            // Set the status that the datarate has been increased
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 800fed4:	4b77      	ldr	r3, [pc, #476]	; (80100b4 <ProcessMacCommands+0x3b4>)
 800fed6:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 800feda:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800fede:	429a      	cmp	r2, r3
 800fee0:	da03      	bge.n	800feea <ProcessMacCommands+0x1ea>
                            {
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 800fee2:	4b74      	ldr	r3, [pc, #464]	; (80100b4 <ProcessMacCommands+0x3b4>)
 800fee4:	2201      	movs	r2, #1
 800fee6:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
                            }
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800feea:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 800feee:	4b71      	ldr	r3, [pc, #452]	; (80100b4 <ProcessMacCommands+0x3b4>)
 800fef0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800fef4:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 800fef8:	4b6e      	ldr	r3, [pc, #440]	; (80100b4 <ProcessMacCommands+0x3b4>)
 800fefa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800fefe:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800ff02:	4b6c      	ldr	r3, [pc, #432]	; (80100b4 <ProcessMacCommands+0x3b4>)
 800ff04:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                        }

                        // Add the answers to the buffer
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800ff08:	2300      	movs	r3, #0
 800ff0a:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800ff0e:	e00b      	b.n	800ff28 <ProcessMacCommands+0x228>
                        {
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800ff10:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 800ff14:	2201      	movs	r2, #1
 800ff16:	4619      	mov	r1, r3
 800ff18:	2003      	movs	r0, #3
 800ff1a:	f003 fbff 	bl	801371c <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800ff1e:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800ff22:	3301      	adds	r3, #1
 800ff24:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800ff28:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800ff2c:	4a62      	ldr	r2, [pc, #392]	; (80100b8 <ProcessMacCommands+0x3b8>)
 800ff2e:	fba2 2303 	umull	r2, r3, r2, r3
 800ff32:	089b      	lsrs	r3, r3, #2
 800ff34:	b2db      	uxtb	r3, r3
 800ff36:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 800ff3a:	429a      	cmp	r2, r3
 800ff3c:	d3e8      	bcc.n	800ff10 <ProcessMacCommands+0x210>
                        }
                        // Update MAC index
                        macIndex += linkAdrNbBytesParsed - 1;
 800ff3e:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800ff42:	78fb      	ldrb	r3, [r7, #3]
 800ff44:	4413      	add	r3, r2
 800ff46:	b2db      	uxtb	r3, r3
 800ff48:	3b01      	subs	r3, #1
 800ff4a:	70fb      	strb	r3, [r7, #3]

                        // Check to prevent invalid access
                        if( macIndex >= commandsSize )
 800ff4c:	78fa      	ldrb	r2, [r7, #3]
 800ff4e:	78bb      	ldrb	r3, [r7, #2]
 800ff50:	429a      	cmp	r2, r3
 800ff52:	d20a      	bcs.n	800ff6a <ProcessMacCommands+0x26a>
                            break;

                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 800ff54:	78fb      	ldrb	r3, [r7, #3]
 800ff56:	1c5a      	adds	r2, r3, #1
 800ff58:	70fa      	strb	r2, [r7, #3]
 800ff5a:	461a      	mov	r2, r3
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	4413      	add	r3, r2
 800ff60:	781b      	ldrb	r3, [r3, #0]
 800ff62:	2b03      	cmp	r3, #3
 800ff64:	f43f af68 	beq.w	800fe38 <ProcessMacCommands+0x138>
 800ff68:	e000      	b.n	800ff6c <ProcessMacCommands+0x26c>
                            break;
 800ff6a:	bf00      	nop

                    if( macIndex < commandsSize )
 800ff6c:	78fa      	ldrb	r2, [r7, #3]
 800ff6e:	78bb      	ldrb	r3, [r7, #2]
 800ff70:	429a      	cmp	r2, r3
 800ff72:	d206      	bcs.n	800ff82 <ProcessMacCommands+0x282>
                    {
                        // Decrease the index such that it points to the next MAC command
                        macIndex--;
 800ff74:	78fb      	ldrb	r3, [r7, #3]
 800ff76:	3b01      	subs	r3, #1
 800ff78:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 800ff7a:	e002      	b.n	800ff82 <ProcessMacCommands+0x282>
                    macIndex += 4;
 800ff7c:	78fb      	ldrb	r3, [r7, #3]
 800ff7e:	3304      	adds	r3, #4
 800ff80:	70fb      	strb	r3, [r7, #3]
                break;
 800ff82:	bf00      	nop
 800ff84:	e382      	b.n	801068c <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800ff86:	78fb      	ldrb	r3, [r7, #3]
 800ff88:	1c5a      	adds	r2, r3, #1
 800ff8a:	70fa      	strb	r2, [r7, #3]
 800ff8c:	461a      	mov	r2, r3
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	4413      	add	r3, r2
 800ff92:	781b      	ldrb	r3, [r3, #0]
 800ff94:	f003 030f 	and.w	r3, r3, #15
 800ff98:	b2da      	uxtb	r2, r3
 800ff9a:	4b46      	ldr	r3, [pc, #280]	; (80100b4 <ProcessMacCommands+0x3b4>)
 800ff9c:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800ffa0:	4b44      	ldr	r3, [pc, #272]	; (80100b4 <ProcessMacCommands+0x3b4>)
 800ffa2:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 800ffa6:	461a      	mov	r2, r3
 800ffa8:	2301      	movs	r3, #1
 800ffaa:	4093      	lsls	r3, r2
 800ffac:	b29a      	uxth	r2, r3
 800ffae:	4b41      	ldr	r3, [pc, #260]	; (80100b4 <ProcessMacCommands+0x3b4>)
 800ffb0:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800ffb4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800ffb8:	2200      	movs	r2, #0
 800ffba:	4619      	mov	r1, r3
 800ffbc:	2004      	movs	r0, #4
 800ffbe:	f003 fbad 	bl	801371c <LoRaMacCommandsAddCmd>
                break;
 800ffc2:	e363      	b.n	801068c <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 800ffc4:	2307      	movs	r3, #7
 800ffc6:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800ffca:	78fb      	ldrb	r3, [r7, #3]
 800ffcc:	687a      	ldr	r2, [r7, #4]
 800ffce:	4413      	add	r3, r2
 800ffd0:	781b      	ldrb	r3, [r3, #0]
 800ffd2:	091b      	lsrs	r3, r3, #4
 800ffd4:	b2db      	uxtb	r3, r3
 800ffd6:	b25b      	sxtb	r3, r3
 800ffd8:	f003 0307 	and.w	r3, r3, #7
 800ffdc:	b25b      	sxtb	r3, r3
 800ffde:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800ffe2:	78fb      	ldrb	r3, [r7, #3]
 800ffe4:	687a      	ldr	r2, [r7, #4]
 800ffe6:	4413      	add	r3, r2
 800ffe8:	781b      	ldrb	r3, [r3, #0]
 800ffea:	b25b      	sxtb	r3, r3
 800ffec:	f003 030f 	and.w	r3, r3, #15
 800fff0:	b25b      	sxtb	r3, r3
 800fff2:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 800fff6:	78fb      	ldrb	r3, [r7, #3]
 800fff8:	3301      	adds	r3, #1
 800fffa:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800fffc:	78fb      	ldrb	r3, [r7, #3]
 800fffe:	1c5a      	adds	r2, r3, #1
 8010000:	70fa      	strb	r2, [r7, #3]
 8010002:	461a      	mov	r2, r3
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	4413      	add	r3, r2
 8010008:	781b      	ldrb	r3, [r3, #0]
 801000a:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 801000c:	78fb      	ldrb	r3, [r7, #3]
 801000e:	1c5a      	adds	r2, r3, #1
 8010010:	70fa      	strb	r2, [r7, #3]
 8010012:	461a      	mov	r2, r3
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	4413      	add	r3, r2
 8010018:	781b      	ldrb	r3, [r3, #0]
 801001a:	021a      	lsls	r2, r3, #8
 801001c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801001e:	4313      	orrs	r3, r2
 8010020:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8010022:	78fb      	ldrb	r3, [r7, #3]
 8010024:	1c5a      	adds	r2, r3, #1
 8010026:	70fa      	strb	r2, [r7, #3]
 8010028:	461a      	mov	r2, r3
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	4413      	add	r3, r2
 801002e:	781b      	ldrb	r3, [r3, #0]
 8010030:	041a      	lsls	r2, r3, #16
 8010032:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010034:	4313      	orrs	r3, r2
 8010036:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 8010038:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801003a:	2264      	movs	r2, #100	; 0x64
 801003c:	fb02 f303 	mul.w	r3, r2, r3
 8010040:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 8010042:	4b1c      	ldr	r3, [pc, #112]	; (80100b4 <ProcessMacCommands+0x3b4>)
 8010044:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010048:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801004c:	4611      	mov	r1, r2
 801004e:	4618      	mov	r0, r3
 8010050:	f005 fa40 	bl	80154d4 <RegionRxParamSetupReq>
 8010054:	4603      	mov	r3, r0
 8010056:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 801005a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 801005e:	f003 0307 	and.w	r3, r3, #7
 8010062:	2b07      	cmp	r3, #7
 8010064:	d117      	bne.n	8010096 <ProcessMacCommands+0x396>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8010066:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 801006a:	b2da      	uxtb	r2, r3
 801006c:	4b11      	ldr	r3, [pc, #68]	; (80100b4 <ProcessMacCommands+0x3b4>)
 801006e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8010072:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 8010076:	b2da      	uxtb	r2, r3
 8010078:	4b0e      	ldr	r3, [pc, #56]	; (80100b4 <ProcessMacCommands+0x3b4>)
 801007a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 801007e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010080:	4a0c      	ldr	r2, [pc, #48]	; (80100b4 <ProcessMacCommands+0x3b4>)
 8010082:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8010084:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010086:	4a0b      	ldr	r2, [pc, #44]	; (80100b4 <ProcessMacCommands+0x3b4>)
 8010088:	6753      	str	r3, [r2, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 801008a:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 801008e:	b2da      	uxtb	r2, r3
 8010090:	4b08      	ldr	r3, [pc, #32]	; (80100b4 <ProcessMacCommands+0x3b4>)
 8010092:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                }
                macCmdPayload[0] = status;
 8010096:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 801009a:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 801009e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80100a2:	2201      	movs	r2, #1
 80100a4:	4619      	mov	r1, r3
 80100a6:	2005      	movs	r0, #5
 80100a8:	f003 fb38 	bl	801371c <LoRaMacCommandsAddCmd>
                break;
 80100ac:	bf00      	nop
 80100ae:	e2ed      	b.n	801068c <ProcessMacCommands+0x98c>
 80100b0:	20000740 	.word	0x20000740
 80100b4:	20000c5c 	.word	0x20000c5c
 80100b8:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 80100bc:	23ff      	movs	r3, #255	; 0xff
 80100be:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 80100c2:	4bb7      	ldr	r3, [pc, #732]	; (80103a0 <ProcessMacCommands+0x6a0>)
 80100c4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d00d      	beq.n	80100e8 <ProcessMacCommands+0x3e8>
 80100cc:	4bb4      	ldr	r3, [pc, #720]	; (80103a0 <ProcessMacCommands+0x6a0>)
 80100ce:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d007      	beq.n	80100e8 <ProcessMacCommands+0x3e8>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 80100d8:	4bb1      	ldr	r3, [pc, #708]	; (80103a0 <ProcessMacCommands+0x6a0>)
 80100da:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	4798      	blx	r3
 80100e2:	4603      	mov	r3, r0
 80100e4:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 80100e8:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80100ec:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 80100f0:	787b      	ldrb	r3, [r7, #1]
 80100f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80100f6:	b2db      	uxtb	r3, r3
 80100f8:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 80100fc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010100:	2202      	movs	r2, #2
 8010102:	4619      	mov	r1, r3
 8010104:	2006      	movs	r0, #6
 8010106:	f003 fb09 	bl	801371c <LoRaMacCommandsAddCmd>
                break;
 801010a:	e2bf      	b.n	801068c <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 801010c:	2303      	movs	r3, #3
 801010e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 8010112:	78fb      	ldrb	r3, [r7, #3]
 8010114:	1c5a      	adds	r2, r3, #1
 8010116:	70fa      	strb	r2, [r7, #3]
 8010118:	461a      	mov	r2, r3
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	4413      	add	r3, r2
 801011e:	781b      	ldrb	r3, [r3, #0]
 8010120:	b25b      	sxtb	r3, r3
 8010122:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 8010126:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801012a:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 801012c:	78fb      	ldrb	r3, [r7, #3]
 801012e:	1c5a      	adds	r2, r3, #1
 8010130:	70fa      	strb	r2, [r7, #3]
 8010132:	461a      	mov	r2, r3
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	4413      	add	r3, r2
 8010138:	781b      	ldrb	r3, [r3, #0]
 801013a:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 801013c:	78fb      	ldrb	r3, [r7, #3]
 801013e:	1c5a      	adds	r2, r3, #1
 8010140:	70fa      	strb	r2, [r7, #3]
 8010142:	461a      	mov	r2, r3
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	4413      	add	r3, r2
 8010148:	781b      	ldrb	r3, [r3, #0]
 801014a:	021a      	lsls	r2, r3, #8
 801014c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801014e:	4313      	orrs	r3, r2
 8010150:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8010152:	78fb      	ldrb	r3, [r7, #3]
 8010154:	1c5a      	adds	r2, r3, #1
 8010156:	70fa      	strb	r2, [r7, #3]
 8010158:	461a      	mov	r2, r3
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	4413      	add	r3, r2
 801015e:	781b      	ldrb	r3, [r3, #0]
 8010160:	041a      	lsls	r2, r3, #16
 8010162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010164:	4313      	orrs	r3, r2
 8010166:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 8010168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801016a:	2264      	movs	r2, #100	; 0x64
 801016c:	fb02 f303 	mul.w	r3, r2, r3
 8010170:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 8010172:	2300      	movs	r3, #0
 8010174:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 8010176:	78fb      	ldrb	r3, [r7, #3]
 8010178:	1c5a      	adds	r2, r3, #1
 801017a:	70fa      	strb	r2, [r7, #3]
 801017c:	461a      	mov	r2, r3
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	4413      	add	r3, r2
 8010182:	781b      	ldrb	r3, [r3, #0]
 8010184:	b25b      	sxtb	r3, r3
 8010186:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 801018a:	4b86      	ldr	r3, [pc, #536]	; (80103a4 <ProcessMacCommands+0x6a4>)
 801018c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010190:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8010194:	4611      	mov	r1, r2
 8010196:	4618      	mov	r0, r3
 8010198:	f005 f9b7 	bl	801550a <RegionNewChannelReq>
 801019c:	4603      	mov	r3, r0
 801019e:	b2db      	uxtb	r3, r3
 80101a0:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 80101a4:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80101a8:	b25b      	sxtb	r3, r3
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	db0a      	blt.n	80101c4 <ProcessMacCommands+0x4c4>
                {
                    macCmdPayload[0] = status;
 80101ae:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80101b2:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 80101b6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80101ba:	2201      	movs	r2, #1
 80101bc:	4619      	mov	r1, r3
 80101be:	2007      	movs	r0, #7
 80101c0:	f003 faac 	bl	801371c <LoRaMacCommandsAddCmd>
                }
                break;
 80101c4:	bf00      	nop
 80101c6:	e261      	b.n	801068c <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 80101c8:	78fb      	ldrb	r3, [r7, #3]
 80101ca:	1c5a      	adds	r2, r3, #1
 80101cc:	70fa      	strb	r2, [r7, #3]
 80101ce:	461a      	mov	r2, r3
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	4413      	add	r3, r2
 80101d4:	781b      	ldrb	r3, [r3, #0]
 80101d6:	f003 030f 	and.w	r3, r3, #15
 80101da:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 80101de:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d104      	bne.n	80101f0 <ProcessMacCommands+0x4f0>
                {
                    delay++;
 80101e6:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80101ea:	3301      	adds	r3, #1
 80101ec:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 80101f0:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80101f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80101f8:	fb02 f303 	mul.w	r3, r2, r3
 80101fc:	461a      	mov	r2, r3
 80101fe:	4b69      	ldr	r3, [pc, #420]	; (80103a4 <ProcessMacCommands+0x6a4>)
 8010200:	659a      	str	r2, [r3, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8010202:	4b68      	ldr	r3, [pc, #416]	; (80103a4 <ProcessMacCommands+0x6a4>)
 8010204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010206:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801020a:	4a66      	ldr	r2, [pc, #408]	; (80103a4 <ProcessMacCommands+0x6a4>)
 801020c:	65d3      	str	r3, [r2, #92]	; 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 801020e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010212:	2200      	movs	r2, #0
 8010214:	4619      	mov	r1, r3
 8010216:	2008      	movs	r0, #8
 8010218:	f003 fa80 	bl	801371c <LoRaMacCommandsAddCmd>
                break;
 801021c:	e236      	b.n	801068c <ProcessMacCommands+0x98c>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 801021e:	78fb      	ldrb	r3, [r7, #3]
 8010220:	1c5a      	adds	r2, r3, #1
 8010222:	70fa      	strb	r2, [r7, #3]
 8010224:	461a      	mov	r2, r3
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	4413      	add	r3, r2
 801022a:	781b      	ldrb	r3, [r3, #0]
 801022c:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 8010230:	2300      	movs	r3, #0
 8010232:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 8010236:	2300      	movs	r3, #0
 8010238:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 801023c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8010240:	f003 0320 	and.w	r3, r3, #32
 8010244:	2b00      	cmp	r3, #0
 8010246:	d002      	beq.n	801024e <ProcessMacCommands+0x54e>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 8010248:	2301      	movs	r3, #1
 801024a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 801024e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8010252:	f003 0310 	and.w	r3, r3, #16
 8010256:	2b00      	cmp	r3, #0
 8010258:	d002      	beq.n	8010260 <ProcessMacCommands+0x560>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 801025a:	2301      	movs	r3, #1
 801025c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8010260:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8010264:	f003 030f 	and.w	r3, r3, #15
 8010268:	b2db      	uxtb	r3, r3
 801026a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 801026e:	4b4d      	ldr	r3, [pc, #308]	; (80103a4 <ProcessMacCommands+0x6a4>)
 8010270:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010274:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8010278:	4611      	mov	r1, r2
 801027a:	4618      	mov	r0, r3
 801027c:	f005 f960 	bl	8015540 <RegionTxParamSetupReq>
 8010280:	4603      	mov	r3, r0
 8010282:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010286:	d03b      	beq.n	8010300 <ProcessMacCommands+0x600>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8010288:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 801028c:	4b45      	ldr	r3, [pc, #276]	; (80103a4 <ProcessMacCommands+0x6a4>)
 801028e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8010292:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8010296:	4b43      	ldr	r3, [pc, #268]	; (80103a4 <ProcessMacCommands+0x6a4>)
 8010298:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 801029c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80102a0:	461a      	mov	r2, r3
 80102a2:	4b41      	ldr	r3, [pc, #260]	; (80103a8 <ProcessMacCommands+0x6a8>)
 80102a4:	5c9b      	ldrb	r3, [r3, r2]
 80102a6:	4618      	mov	r0, r3
 80102a8:	f7f0 fa90 	bl	80007cc <__aeabi_ui2f>
 80102ac:	4603      	mov	r3, r0
 80102ae:	4a3d      	ldr	r2, [pc, #244]	; (80103a4 <ProcessMacCommands+0x6a4>)
 80102b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 80102b4:	2302      	movs	r3, #2
 80102b6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80102ba:	4b3a      	ldr	r3, [pc, #232]	; (80103a4 <ProcessMacCommands+0x6a4>)
 80102bc:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80102c0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80102c4:	4b37      	ldr	r3, [pc, #220]	; (80103a4 <ProcessMacCommands+0x6a4>)
 80102c6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80102ca:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80102ce:	4611      	mov	r1, r2
 80102d0:	4618      	mov	r0, r3
 80102d2:	f004 ffd5 	bl	8015280 <RegionGetPhyParam>
 80102d6:	4603      	mov	r3, r0
 80102d8:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 80102da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102dc:	b25a      	sxtb	r2, r3
 80102de:	4b31      	ldr	r3, [pc, #196]	; (80103a4 <ProcessMacCommands+0x6a4>)
 80102e0:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80102e4:	4293      	cmp	r3, r2
 80102e6:	bfb8      	it	lt
 80102e8:	4613      	movlt	r3, r2
 80102ea:	b25a      	sxtb	r2, r3
 80102ec:	4b2d      	ldr	r3, [pc, #180]	; (80103a4 <ProcessMacCommands+0x6a4>)
 80102ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 80102f2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80102f6:	2200      	movs	r2, #0
 80102f8:	4619      	mov	r1, r3
 80102fa:	2009      	movs	r0, #9
 80102fc:	f003 fa0e 	bl	801371c <LoRaMacCommandsAddCmd>
                }
                break;
 8010300:	bf00      	nop
 8010302:	e1c3      	b.n	801068c <ProcessMacCommands+0x98c>
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 8010304:	2303      	movs	r3, #3
 8010306:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 801030a:	78fb      	ldrb	r3, [r7, #3]
 801030c:	1c5a      	adds	r2, r3, #1
 801030e:	70fa      	strb	r2, [r7, #3]
 8010310:	461a      	mov	r2, r3
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	4413      	add	r3, r2
 8010316:	781b      	ldrb	r3, [r3, #0]
 8010318:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 801031c:	78fb      	ldrb	r3, [r7, #3]
 801031e:	1c5a      	adds	r2, r3, #1
 8010320:	70fa      	strb	r2, [r7, #3]
 8010322:	461a      	mov	r2, r3
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	4413      	add	r3, r2
 8010328:	781b      	ldrb	r3, [r3, #0]
 801032a:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 801032c:	78fb      	ldrb	r3, [r7, #3]
 801032e:	1c5a      	adds	r2, r3, #1
 8010330:	70fa      	strb	r2, [r7, #3]
 8010332:	461a      	mov	r2, r3
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	4413      	add	r3, r2
 8010338:	781b      	ldrb	r3, [r3, #0]
 801033a:	021a      	lsls	r2, r3, #8
 801033c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801033e:	4313      	orrs	r3, r2
 8010340:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8010342:	78fb      	ldrb	r3, [r7, #3]
 8010344:	1c5a      	adds	r2, r3, #1
 8010346:	70fa      	strb	r2, [r7, #3]
 8010348:	461a      	mov	r2, r3
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	4413      	add	r3, r2
 801034e:	781b      	ldrb	r3, [r3, #0]
 8010350:	041a      	lsls	r2, r3, #16
 8010352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010354:	4313      	orrs	r3, r2
 8010356:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 8010358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801035a:	2264      	movs	r2, #100	; 0x64
 801035c:	fb02 f303 	mul.w	r3, r2, r3
 8010360:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8010362:	4b10      	ldr	r3, [pc, #64]	; (80103a4 <ProcessMacCommands+0x6a4>)
 8010364:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010368:	f107 0220 	add.w	r2, r7, #32
 801036c:	4611      	mov	r1, r2
 801036e:	4618      	mov	r0, r3
 8010370:	f005 f901 	bl	8015576 <RegionDlChannelReq>
 8010374:	4603      	mov	r3, r0
 8010376:	b2db      	uxtb	r3, r3
 8010378:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 801037c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8010380:	b25b      	sxtb	r3, r3
 8010382:	2b00      	cmp	r3, #0
 8010384:	db0a      	blt.n	801039c <ProcessMacCommands+0x69c>
                {
                    macCmdPayload[0] = status;
 8010386:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 801038a:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 801038e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010392:	2201      	movs	r2, #1
 8010394:	4619      	mov	r1, r3
 8010396:	200a      	movs	r0, #10
 8010398:	f003 f9c0 	bl	801371c <LoRaMacCommandsAddCmd>
                }
                break;
 801039c:	bf00      	nop
 801039e:	e175      	b.n	801068c <ProcessMacCommands+0x98c>
 80103a0:	20000740 	.word	0x20000740
 80103a4:	20000c5c 	.word	0x20000c5c
 80103a8:	0801e988 	.word	0x0801e988
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 80103ac:	2009      	movs	r0, #9
 80103ae:	f003 fced 	bl	8013d8c <LoRaMacConfirmQueueIsCmdActive>
 80103b2:	4603      	mov	r3, r0
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	f000 8084 	beq.w	80104c2 <ProcessMacCommands+0x7c2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 80103ba:	2109      	movs	r1, #9
 80103bc:	2000      	movs	r0, #0
 80103be:	f003 fc59 	bl	8013c74 <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 80103c2:	f107 0318 	add.w	r3, r7, #24
 80103c6:	2200      	movs	r2, #0
 80103c8:	601a      	str	r2, [r3, #0]
 80103ca:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 80103cc:	f107 0310 	add.w	r3, r7, #16
 80103d0:	2200      	movs	r2, #0
 80103d2:	601a      	str	r2, [r3, #0]
 80103d4:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 80103d6:	f107 0308 	add.w	r3, r7, #8
 80103da:	2200      	movs	r2, #0
 80103dc:	601a      	str	r2, [r3, #0]
 80103de:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 80103e0:	78fb      	ldrb	r3, [r7, #3]
 80103e2:	1c5a      	adds	r2, r3, #1
 80103e4:	70fa      	strb	r2, [r7, #3]
 80103e6:	461a      	mov	r2, r3
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	4413      	add	r3, r2
 80103ec:	781b      	ldrb	r3, [r3, #0]
 80103ee:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 80103f0:	78fb      	ldrb	r3, [r7, #3]
 80103f2:	1c5a      	adds	r2, r3, #1
 80103f4:	70fa      	strb	r2, [r7, #3]
 80103f6:	461a      	mov	r2, r3
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	4413      	add	r3, r2
 80103fc:	781b      	ldrb	r3, [r3, #0]
 80103fe:	021a      	lsls	r2, r3, #8
 8010400:	69bb      	ldr	r3, [r7, #24]
 8010402:	4313      	orrs	r3, r2
 8010404:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8010406:	78fb      	ldrb	r3, [r7, #3]
 8010408:	1c5a      	adds	r2, r3, #1
 801040a:	70fa      	strb	r2, [r7, #3]
 801040c:	461a      	mov	r2, r3
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	4413      	add	r3, r2
 8010412:	781b      	ldrb	r3, [r3, #0]
 8010414:	041a      	lsls	r2, r3, #16
 8010416:	69bb      	ldr	r3, [r7, #24]
 8010418:	4313      	orrs	r3, r2
 801041a:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 801041c:	78fb      	ldrb	r3, [r7, #3]
 801041e:	1c5a      	adds	r2, r3, #1
 8010420:	70fa      	strb	r2, [r7, #3]
 8010422:	461a      	mov	r2, r3
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	4413      	add	r3, r2
 8010428:	781b      	ldrb	r3, [r3, #0]
 801042a:	061a      	lsls	r2, r3, #24
 801042c:	69bb      	ldr	r3, [r7, #24]
 801042e:	4313      	orrs	r3, r2
 8010430:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8010432:	78fb      	ldrb	r3, [r7, #3]
 8010434:	1c5a      	adds	r2, r3, #1
 8010436:	70fa      	strb	r2, [r7, #3]
 8010438:	461a      	mov	r2, r3
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	4413      	add	r3, r2
 801043e:	781b      	ldrb	r3, [r3, #0]
 8010440:	b21b      	sxth	r3, r3
 8010442:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8010444:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8010448:	461a      	mov	r2, r3
 801044a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801044e:	fb02 f303 	mul.w	r3, r2, r3
 8010452:	121b      	asrs	r3, r3, #8
 8010454:	b21b      	sxth	r3, r3
 8010456:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 8010458:	f107 0310 	add.w	r3, r7, #16
 801045c:	f107 0218 	add.w	r2, r7, #24
 8010460:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010464:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8010468:	693a      	ldr	r2, [r7, #16]
 801046a:	4b8f      	ldr	r3, [pc, #572]	; (80106a8 <ProcessMacCommands+0x9a8>)
 801046c:	4413      	add	r3, r2
 801046e:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 8010470:	f107 0308 	add.w	r3, r7, #8
 8010474:	4618      	mov	r0, r3
 8010476:	f00c f937 	bl	801c6e8 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 801047a:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 801047e:	4b8b      	ldr	r3, [pc, #556]	; (80106ac <ProcessMacCommands+0x9ac>)
 8010480:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 8010484:	9200      	str	r2, [sp, #0]
 8010486:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 801048a:	f107 0210 	add.w	r2, r7, #16
 801048e:	ca06      	ldmia	r2, {r1, r2}
 8010490:	f00c f8c3 	bl	801c61a <SysTimeSub>
 8010494:	f107 0010 	add.w	r0, r7, #16
 8010498:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801049a:	9300      	str	r3, [sp, #0]
 801049c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801049e:	f107 0208 	add.w	r2, r7, #8
 80104a2:	ca06      	ldmia	r2, {r1, r2}
 80104a4:	f00c f880 	bl	801c5a8 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 80104a8:	f107 0310 	add.w	r3, r7, #16
 80104ac:	e893 0003 	ldmia.w	r3, {r0, r1}
 80104b0:	f00c f8ec 	bl	801c68c <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 80104b4:	f002 ffd0 	bl	8013458 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 80104b8:	4b7c      	ldr	r3, [pc, #496]	; (80106ac <ProcessMacCommands+0x9ac>)
 80104ba:	2201      	movs	r2, #1
 80104bc:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
 80104c0:	e0e4      	b.n	801068c <ProcessMacCommands+0x98c>
                }
                else
                {
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 80104c2:	4b7a      	ldr	r3, [pc, #488]	; (80106ac <ProcessMacCommands+0x9ac>)
 80104c4:	2200      	movs	r2, #0
 80104c6:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
#endif /* LORAMAC_VERSION */
                }
                break;
 80104ca:	e0df      	b.n	801068c <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 80104cc:	200c      	movs	r0, #12
 80104ce:	f003 fc5d 	bl	8013d8c <LoRaMacConfirmQueueIsCmdActive>
 80104d2:	4603      	mov	r3, r0
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	f000 80d9 	beq.w	801068c <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 80104da:	210c      	movs	r1, #12
 80104dc:	2000      	movs	r0, #0
 80104de:	f003 fbc9 	bl	8013c74 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 80104e2:	4b72      	ldr	r3, [pc, #456]	; (80106ac <ProcessMacCommands+0x9ac>)
 80104e4:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 80104e8:	2b04      	cmp	r3, #4
 80104ea:	f000 80cf 	beq.w	801068c <ProcessMacCommands+0x98c>
 80104ee:	4b6f      	ldr	r3, [pc, #444]	; (80106ac <ProcessMacCommands+0x9ac>)
 80104f0:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 80104f4:	2b05      	cmp	r3, #5
 80104f6:	f000 80c9 	beq.w	801068c <ProcessMacCommands+0x98c>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 80104fa:	f002 ff8e 	bl	801341a <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 80104fe:	e0c5      	b.n	801068c <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 8010500:	2303      	movs	r3, #3
 8010502:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 8010506:	2300      	movs	r3, #0
 8010508:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 801050a:	78fb      	ldrb	r3, [r7, #3]
 801050c:	1c5a      	adds	r2, r3, #1
 801050e:	70fa      	strb	r2, [r7, #3]
 8010510:	461a      	mov	r2, r3
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	4413      	add	r3, r2
 8010516:	781b      	ldrb	r3, [r3, #0]
 8010518:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 801051a:	78fb      	ldrb	r3, [r7, #3]
 801051c:	1c5a      	adds	r2, r3, #1
 801051e:	70fa      	strb	r2, [r7, #3]
 8010520:	461a      	mov	r2, r3
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	4413      	add	r3, r2
 8010526:	781b      	ldrb	r3, [r3, #0]
 8010528:	021b      	lsls	r3, r3, #8
 801052a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801052c:	4313      	orrs	r3, r2
 801052e:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8010530:	78fb      	ldrb	r3, [r7, #3]
 8010532:	1c5a      	adds	r2, r3, #1
 8010534:	70fa      	strb	r2, [r7, #3]
 8010536:	461a      	mov	r2, r3
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	4413      	add	r3, r2
 801053c:	781b      	ldrb	r3, [r3, #0]
 801053e:	041b      	lsls	r3, r3, #16
 8010540:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010542:	4313      	orrs	r3, r2
 8010544:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 8010546:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010548:	2264      	movs	r2, #100	; 0x64
 801054a:	fb02 f303 	mul.w	r3, r2, r3
 801054e:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 8010550:	78fb      	ldrb	r3, [r7, #3]
 8010552:	1c5a      	adds	r2, r3, #1
 8010554:	70fa      	strb	r2, [r7, #3]
 8010556:	461a      	mov	r2, r3
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	4413      	add	r3, r2
 801055c:	781b      	ldrb	r3, [r3, #0]
 801055e:	f003 030f 	and.w	r3, r3, #15
 8010562:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8010566:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801056a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801056c:	4618      	mov	r0, r3
 801056e:	f002 ff5a 	bl	8013426 <LoRaMacClassBPingSlotChannelReq>
 8010572:	4603      	mov	r3, r0
 8010574:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 8010578:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 801057c:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 8010580:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010584:	2201      	movs	r2, #1
 8010586:	4619      	mov	r1, r3
 8010588:	2011      	movs	r0, #17
 801058a:	f003 f8c7 	bl	801371c <LoRaMacCommandsAddCmd>
#endif /* LORAMAC_VERSION */
                break;
 801058e:	e07d      	b.n	801068c <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8010590:	200d      	movs	r0, #13
 8010592:	f003 fbfb 	bl	8013d8c <LoRaMacConfirmQueueIsCmdActive>
 8010596:	4603      	mov	r3, r0
 8010598:	2b00      	cmp	r3, #0
 801059a:	d077      	beq.n	801068c <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 801059c:	210d      	movs	r1, #13
 801059e:	2000      	movs	r0, #0
 80105a0:	f003 fb68 	bl	8013c74 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 80105a4:	2300      	movs	r3, #0
 80105a6:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 80105aa:	2300      	movs	r3, #0
 80105ac:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 80105b0:	78fb      	ldrb	r3, [r7, #3]
 80105b2:	1c5a      	adds	r2, r3, #1
 80105b4:	70fa      	strb	r2, [r7, #3]
 80105b6:	461a      	mov	r2, r3
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	4413      	add	r3, r2
 80105bc:	781b      	ldrb	r3, [r3, #0]
 80105be:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 80105c2:	78fb      	ldrb	r3, [r7, #3]
 80105c4:	1c5a      	adds	r2, r3, #1
 80105c6:	70fa      	strb	r2, [r7, #3]
 80105c8:	461a      	mov	r2, r3
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	4413      	add	r3, r2
 80105ce:	781b      	ldrb	r3, [r3, #0]
 80105d0:	021b      	lsls	r3, r3, #8
 80105d2:	b21a      	sxth	r2, r3
 80105d4:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 80105d8:	4313      	orrs	r3, r2
 80105da:	b21b      	sxth	r3, r3
 80105dc:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 80105e0:	78fb      	ldrb	r3, [r7, #3]
 80105e2:	1c5a      	adds	r2, r3, #1
 80105e4:	70fa      	strb	r2, [r7, #3]
 80105e6:	461a      	mov	r2, r3
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	4413      	add	r3, r2
 80105ec:	781b      	ldrb	r3, [r3, #0]
 80105ee:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 80105f2:	4b2f      	ldr	r3, [pc, #188]	; (80106b0 <ProcessMacCommands+0x9b0>)
 80105f4:	681a      	ldr	r2, [r3, #0]
 80105f6:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 80105fa:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80105fe:	4618      	mov	r0, r3
 8010600:	f002 ff1d 	bl	801343e <LoRaMacClassBBeaconTimingAns>
                }
                break;
 8010604:	e042      	b.n	801068c <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 8010606:	2300      	movs	r3, #0
 8010608:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 801060c:	78fb      	ldrb	r3, [r7, #3]
 801060e:	1c5a      	adds	r2, r3, #1
 8010610:	70fa      	strb	r2, [r7, #3]
 8010612:	461a      	mov	r2, r3
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	4413      	add	r3, r2
 8010618:	781b      	ldrb	r3, [r3, #0]
 801061a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 801061e:	78fb      	ldrb	r3, [r7, #3]
 8010620:	1c5a      	adds	r2, r3, #1
 8010622:	70fa      	strb	r2, [r7, #3]
 8010624:	461a      	mov	r2, r3
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	4413      	add	r3, r2
 801062a:	781b      	ldrb	r3, [r3, #0]
 801062c:	021b      	lsls	r3, r3, #8
 801062e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010632:	4313      	orrs	r3, r2
 8010634:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8010638:	78fb      	ldrb	r3, [r7, #3]
 801063a:	1c5a      	adds	r2, r3, #1
 801063c:	70fa      	strb	r2, [r7, #3]
 801063e:	461a      	mov	r2, r3
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	4413      	add	r3, r2
 8010644:	781b      	ldrb	r3, [r3, #0]
 8010646:	041b      	lsls	r3, r3, #16
 8010648:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801064c:	4313      	orrs	r3, r2
 801064e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 8010652:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010656:	2264      	movs	r2, #100	; 0x64
 8010658:	fb02 f303 	mul.w	r3, r2, r3
 801065c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8010660:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8010664:	f002 fefe 	bl	8013464 <LoRaMacClassBBeaconFreqReq>
 8010668:	4603      	mov	r3, r0
 801066a:	2b00      	cmp	r3, #0
 801066c:	d003      	beq.n	8010676 <ProcessMacCommands+0x976>
                    {
                        macCmdPayload[0] = 1;
 801066e:	2301      	movs	r3, #1
 8010670:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 8010674:	e002      	b.n	801067c <ProcessMacCommands+0x97c>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 8010676:	2300      	movs	r3, #0
 8010678:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 801067c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010680:	2201      	movs	r2, #1
 8010682:	4619      	mov	r1, r3
 8010684:	2013      	movs	r0, #19
 8010686:	f003 f849 	bl	801371c <LoRaMacCommandsAddCmd>
                }
                break;
 801068a:	bf00      	nop
    while( macIndex < commandsSize )
 801068c:	78fa      	ldrb	r2, [r7, #3]
 801068e:	78bb      	ldrb	r3, [r7, #2]
 8010690:	429a      	cmp	r2, r3
 8010692:	f4ff ab57 	bcc.w	800fd44 <ProcessMacCommands+0x44>
 8010696:	e004      	b.n	80106a2 <ProcessMacCommands+0x9a2>
        return;
 8010698:	bf00      	nop
 801069a:	e002      	b.n	80106a2 <ProcessMacCommands+0x9a2>
            return;
 801069c:	bf00      	nop
 801069e:	e000      	b.n	80106a2 <ProcessMacCommands+0x9a2>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 80106a0:	bf00      	nop
        }
    }
}
 80106a2:	378c      	adds	r7, #140	; 0x8c
 80106a4:	46bd      	mov	sp, r7
 80106a6:	bd90      	pop	{r4, r7, pc}
 80106a8:	12d53d80 	.word	0x12d53d80
 80106ac:	20000740 	.word	0x20000740
 80106b0:	2000188c 	.word	0x2000188c

080106b4 <Send>:

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 80106b4:	b580      	push	{r7, lr}
 80106b6:	b08e      	sub	sp, #56	; 0x38
 80106b8:	af02      	add	r7, sp, #8
 80106ba:	60f8      	str	r0, [r7, #12]
 80106bc:	607a      	str	r2, [r7, #4]
 80106be:	461a      	mov	r2, r3
 80106c0:	460b      	mov	r3, r1
 80106c2:	72fb      	strb	r3, [r7, #11]
 80106c4:	4613      	mov	r3, r2
 80106c6:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80106c8:	2303      	movs	r3, #3
 80106ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 80106ce:	4b66      	ldr	r3, [pc, #408]	; (8010868 <Send+0x1b4>)
 80106d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80106d4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 80106d8:	4b63      	ldr	r3, [pc, #396]	; (8010868 <Send+0x1b4>)
 80106da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80106de:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80106e2:	4b61      	ldr	r3, [pc, #388]	; (8010868 <Send+0x1b4>)
 80106e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80106e6:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80106e8:	4b5f      	ldr	r3, [pc, #380]	; (8010868 <Send+0x1b4>)
 80106ea:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d101      	bne.n	80106f6 <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 80106f2:	2307      	movs	r3, #7
 80106f4:	e0b4      	b.n	8010860 <Send+0x1ac>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 80106f6:	4b5c      	ldr	r3, [pc, #368]	; (8010868 <Send+0x1b4>)
 80106f8:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d102      	bne.n	8010706 <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8010700:	4b59      	ldr	r3, [pc, #356]	; (8010868 <Send+0x1b4>)
 8010702:	2200      	movs	r2, #0
 8010704:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 8010706:	2300      	movs	r3, #0
 8010708:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 801070c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010710:	f36f 0303 	bfc	r3, #0, #4
 8010714:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8010718:	4b53      	ldr	r3, [pc, #332]	; (8010868 <Send+0x1b4>)
 801071a:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 801071e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010722:	f362 13c7 	bfi	r3, r2, #7, #1
 8010726:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801072a:	4b4f      	ldr	r3, [pc, #316]	; (8010868 <Send+0x1b4>)
 801072c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010730:	2b01      	cmp	r3, #1
 8010732:	d106      	bne.n	8010742 <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 8010734:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010738:	f043 0310 	orr.w	r3, r3, #16
 801073c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8010740:	e005      	b.n	801074e <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 8010742:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010746:	f36f 1304 	bfc	r3, #4, #1
 801074a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 801074e:	4b46      	ldr	r3, [pc, #280]	; (8010868 <Send+0x1b4>)
 8010750:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010754:	2b00      	cmp	r3, #0
 8010756:	d005      	beq.n	8010764 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 8010758:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801075c:	f043 0320 	orr.w	r3, r3, #32
 8010760:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
    adrNext.UpdateChanMask = true;
 8010764:	2301      	movs	r3, #1
 8010766:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8010768:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801076c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8010770:	b2db      	uxtb	r3, r3
 8010772:	2b00      	cmp	r3, #0
 8010774:	bf14      	ite	ne
 8010776:	2301      	movne	r3, #1
 8010778:	2300      	moveq	r3, #0
 801077a:	b2db      	uxtb	r3, r3
 801077c:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 801077e:	4b3a      	ldr	r3, [pc, #232]	; (8010868 <Send+0x1b4>)
 8010780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010782:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8010784:	4b38      	ldr	r3, [pc, #224]	; (8010868 <Send+0x1b4>)
 8010786:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 801078a:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 801078c:	4b36      	ldr	r3, [pc, #216]	; (8010868 <Send+0x1b4>)
 801078e:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8010792:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010794:	4b34      	ldr	r3, [pc, #208]	; (8010868 <Send+0x1b4>)
 8010796:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801079a:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 801079e:	4b32      	ldr	r3, [pc, #200]	; (8010868 <Send+0x1b4>)
 80107a0:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80107a4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80107a8:	4b2f      	ldr	r3, [pc, #188]	; (8010868 <Send+0x1b4>)
 80107aa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80107ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 80107b2:	4b2d      	ldr	r3, [pc, #180]	; (8010868 <Send+0x1b4>)
 80107b4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80107b8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80107bc:	4b2a      	ldr	r3, [pc, #168]	; (8010868 <Send+0x1b4>)
 80107be:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80107c2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 80107c6:	f107 0014 	add.w	r0, r7, #20
 80107ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80107ce:	9300      	str	r3, [sp, #0]
 80107d0:	4b26      	ldr	r3, [pc, #152]	; (801086c <Send+0x1b8>)
 80107d2:	4a27      	ldr	r2, [pc, #156]	; (8010870 <Send+0x1bc>)
 80107d4:	4927      	ldr	r1, [pc, #156]	; (8010874 <Send+0x1c0>)
 80107d6:	f002 fcbf 	bl	8013158 <LoRaMacAdrCalcNext>
 80107da:	4603      	mov	r3, r0
 80107dc:	461a      	mov	r2, r3
 80107de:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80107e2:	f362 1386 	bfi	r3, r2, #6, #1
 80107e6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 80107ea:	7afa      	ldrb	r2, [r7, #11]
 80107ec:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80107f0:	893b      	ldrh	r3, [r7, #8]
 80107f2:	9300      	str	r3, [sp, #0]
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	68f8      	ldr	r0, [r7, #12]
 80107f8:	f000 fc72 	bl	80110e0 <PrepareFrame>
 80107fc:	4603      	mov	r3, r0
 80107fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8010802:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010806:	2b00      	cmp	r3, #0
 8010808:	d003      	beq.n	8010812 <Send+0x15e>
 801080a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801080e:	2b0a      	cmp	r3, #10
 8010810:	d107      	bne.n	8010822 <Send+0x16e>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 8010812:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010816:	4618      	mov	r0, r3
 8010818:	f000 f962 	bl	8010ae0 <ScheduleTx>
 801081c:	4603      	mov	r3, r0
 801081e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 8010822:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010826:	2b00      	cmp	r3, #0
 8010828:	d00a      	beq.n	8010840 <Send+0x18c>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 801082a:	4a0f      	ldr	r2, [pc, #60]	; (8010868 <Send+0x1b4>)
 801082c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010830:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8010834:	4a0c      	ldr	r2, [pc, #48]	; (8010868 <Send+0x1b4>)
 8010836:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801083a:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 801083e:	e00d      	b.n	801085c <Send+0x1a8>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 8010840:	4b09      	ldr	r3, [pc, #36]	; (8010868 <Send+0x1b4>)
 8010842:	2200      	movs	r2, #0
 8010844:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8010848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801084a:	4a07      	ldr	r2, [pc, #28]	; (8010868 <Send+0x1b4>)
 801084c:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 801084e:	f003 f80b 	bl	8013868 <LoRaMacCommandsRemoveNoneStickyCmds>
 8010852:	4603      	mov	r3, r0
 8010854:	2b00      	cmp	r3, #0
 8010856:	d001      	beq.n	801085c <Send+0x1a8>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010858:	2313      	movs	r3, #19
 801085a:	e001      	b.n	8010860 <Send+0x1ac>
        }
    }
    return status;
 801085c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8010860:	4618      	mov	r0, r3
 8010862:	3730      	adds	r7, #48	; 0x30
 8010864:	46bd      	mov	sp, r7
 8010866:	bd80      	pop	{r7, pc}
 8010868:	20000c5c 	.word	0x20000c5c
 801086c:	20000cc4 	.word	0x20000cc4
 8010870:	20000c94 	.word	0x20000c94
 8010874:	20000c95 	.word	0x20000c95

08010878 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 8010878:	b580      	push	{r7, lr}
 801087a:	b084      	sub	sp, #16
 801087c:	af00      	add	r7, sp, #0
 801087e:	4603      	mov	r3, r0
 8010880:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010882:	2300      	movs	r3, #0
 8010884:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 8010886:	2300      	movs	r3, #0
 8010888:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 801088a:	2301      	movs	r3, #1
 801088c:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 801088e:	79fb      	ldrb	r3, [r7, #7]
 8010890:	2bff      	cmp	r3, #255	; 0xff
 8010892:	d11f      	bne.n	80108d4 <SendReJoinReq+0x5c>
            break;
        }
#endif /* LORAMAC_VERSION */
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 8010894:	2000      	movs	r0, #0
 8010896:	f7ff f8f9 	bl	800fa8c <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 801089a:	4b15      	ldr	r3, [pc, #84]	; (80108f0 <SendReJoinReq+0x78>)
 801089c:	2200      	movs	r2, #0
 801089e:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 80108a2:	4b13      	ldr	r3, [pc, #76]	; (80108f0 <SendReJoinReq+0x78>)
 80108a4:	4a13      	ldr	r2, [pc, #76]	; (80108f4 <SendReJoinReq+0x7c>)
 80108a6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 80108aa:	4b11      	ldr	r3, [pc, #68]	; (80108f0 <SendReJoinReq+0x78>)
 80108ac:	22ff      	movs	r2, #255	; 0xff
 80108ae:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 80108b2:	7b3b      	ldrb	r3, [r7, #12]
 80108b4:	f36f 1347 	bfc	r3, #5, #3
 80108b8:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 80108ba:	7b3a      	ldrb	r2, [r7, #12]
 80108bc:	4b0c      	ldr	r3, [pc, #48]	; (80108f0 <SendReJoinReq+0x78>)
 80108be:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 80108c2:	480d      	ldr	r0, [pc, #52]	; (80108f8 <SendReJoinReq+0x80>)
 80108c4:	f7fb ff38 	bl	800c738 <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 80108c8:	480c      	ldr	r0, [pc, #48]	; (80108fc <SendReJoinReq+0x84>)
 80108ca:	f7fb ff05 	bl	800c6d8 <SecureElementGetDevEui>

            allowDelayedTx = false;
 80108ce:	2300      	movs	r3, #0
 80108d0:	73fb      	strb	r3, [r7, #15]

            break;
 80108d2:	e002      	b.n	80108da <SendReJoinReq+0x62>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80108d4:	2302      	movs	r3, #2
 80108d6:	73bb      	strb	r3, [r7, #14]
            break;
 80108d8:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 80108da:	7bfb      	ldrb	r3, [r7, #15]
 80108dc:	4618      	mov	r0, r3
 80108de:	f000 f8ff 	bl	8010ae0 <ScheduleTx>
 80108e2:	4603      	mov	r3, r0
 80108e4:	73bb      	strb	r3, [r7, #14]
    return status;
 80108e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80108e8:	4618      	mov	r0, r3
 80108ea:	3710      	adds	r7, #16
 80108ec:	46bd      	mov	sp, r7
 80108ee:	bd80      	pop	{r7, pc}
 80108f0:	20000740 	.word	0x20000740
 80108f4:	20000742 	.word	0x20000742
 80108f8:	2000084e 	.word	0x2000084e
 80108fc:	20000856 	.word	0x20000856

08010900 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 8010900:	b580      	push	{r7, lr}
 8010902:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8010904:	f002 fd38 	bl	8013378 <LoRaMacClassBIsBeaconExpected>
 8010908:	4603      	mov	r3, r0
 801090a:	2b00      	cmp	r3, #0
 801090c:	d001      	beq.n	8010912 <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 801090e:	230e      	movs	r3, #14
 8010910:	e013      	b.n	801093a <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8010912:	4b0b      	ldr	r3, [pc, #44]	; (8010940 <CheckForClassBCollision+0x40>)
 8010914:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010918:	2b01      	cmp	r3, #1
 801091a:	d10d      	bne.n	8010938 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 801091c:	f002 fd33 	bl	8013386 <LoRaMacClassBIsPingExpected>
 8010920:	4603      	mov	r3, r0
 8010922:	2b00      	cmp	r3, #0
 8010924:	d001      	beq.n	801092a <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8010926:	230f      	movs	r3, #15
 8010928:	e007      	b.n	801093a <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 801092a:	f002 fd33 	bl	8013394 <LoRaMacClassBIsMulticastExpected>
 801092e:	4603      	mov	r3, r0
 8010930:	2b00      	cmp	r3, #0
 8010932:	d001      	beq.n	8010938 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8010934:	230f      	movs	r3, #15
 8010936:	e000      	b.n	801093a <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 8010938:	2300      	movs	r3, #0
}
 801093a:	4618      	mov	r0, r3
 801093c:	bd80      	pop	{r7, pc}
 801093e:	bf00      	nop
 8010940:	20000c5c 	.word	0x20000c5c

08010944 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 8010944:	b590      	push	{r4, r7, lr}
 8010946:	b083      	sub	sp, #12
 8010948:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801094a:	4b2d      	ldr	r3, [pc, #180]	; (8010a00 <ComputeRxWindowParameters+0xbc>)
 801094c:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8010950:	4b2b      	ldr	r3, [pc, #172]	; (8010a00 <ComputeRxWindowParameters+0xbc>)
 8010952:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8010956:	4b2a      	ldr	r3, [pc, #168]	; (8010a00 <ComputeRxWindowParameters+0xbc>)
 8010958:	f893 107d 	ldrb.w	r1, [r3, #125]	; 0x7d
 801095c:	4b28      	ldr	r3, [pc, #160]	; (8010a00 <ComputeRxWindowParameters+0xbc>)
 801095e:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 8010962:	4b27      	ldr	r3, [pc, #156]	; (8010a00 <ComputeRxWindowParameters+0xbc>)
 8010964:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8010968:	b25b      	sxtb	r3, r3
 801096a:	f004 fe68 	bl	801563e <RegionApplyDrOffset>
 801096e:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010970:	b259      	sxtb	r1, r3
 8010972:	4b23      	ldr	r3, [pc, #140]	; (8010a00 <ComputeRxWindowParameters+0xbc>)
 8010974:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8010978:	4b21      	ldr	r3, [pc, #132]	; (8010a00 <ComputeRxWindowParameters+0xbc>)
 801097a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801097c:	4821      	ldr	r0, [pc, #132]	; (8010a04 <ComputeRxWindowParameters+0xc0>)
 801097e:	9000      	str	r0, [sp, #0]
 8010980:	4620      	mov	r0, r4
 8010982:	f004 fd1e 	bl	80153c2 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010986:	4b1e      	ldr	r3, [pc, #120]	; (8010a00 <ComputeRxWindowParameters+0xbc>)
 8010988:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 801098c:	4b1c      	ldr	r3, [pc, #112]	; (8010a00 <ComputeRxWindowParameters+0xbc>)
 801098e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010992:	b259      	sxtb	r1, r3
 8010994:	4b1a      	ldr	r3, [pc, #104]	; (8010a00 <ComputeRxWindowParameters+0xbc>)
 8010996:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 801099a:	4b19      	ldr	r3, [pc, #100]	; (8010a00 <ComputeRxWindowParameters+0xbc>)
 801099c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801099e:	4c1a      	ldr	r4, [pc, #104]	; (8010a08 <ComputeRxWindowParameters+0xc4>)
 80109a0:	9400      	str	r4, [sp, #0]
 80109a2:	f004 fd0e 	bl	80153c2 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80109a6:	4b16      	ldr	r3, [pc, #88]	; (8010a00 <ComputeRxWindowParameters+0xbc>)
 80109a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80109aa:	4a18      	ldr	r2, [pc, #96]	; (8010a0c <ComputeRxWindowParameters+0xc8>)
 80109ac:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 80109b0:	4413      	add	r3, r2
 80109b2:	4a16      	ldr	r2, [pc, #88]	; (8010a0c <ComputeRxWindowParameters+0xc8>)
 80109b4:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80109b8:	4b11      	ldr	r3, [pc, #68]	; (8010a00 <ComputeRxWindowParameters+0xbc>)
 80109ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80109bc:	4a13      	ldr	r2, [pc, #76]	; (8010a0c <ComputeRxWindowParameters+0xc8>)
 80109be:	f8d2 23dc 	ldr.w	r2, [r2, #988]	; 0x3dc
 80109c2:	4413      	add	r3, r2
 80109c4:	4a11      	ldr	r2, [pc, #68]	; (8010a0c <ComputeRxWindowParameters+0xc8>)
 80109c6:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 80109ca:	4b10      	ldr	r3, [pc, #64]	; (8010a0c <ComputeRxWindowParameters+0xc8>)
 80109cc:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80109d0:	2b04      	cmp	r3, #4
 80109d2:	d011      	beq.n	80109f8 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80109d4:	4b0a      	ldr	r3, [pc, #40]	; (8010a00 <ComputeRxWindowParameters+0xbc>)
 80109d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80109d8:	4a0c      	ldr	r2, [pc, #48]	; (8010a0c <ComputeRxWindowParameters+0xc8>)
 80109da:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 80109de:	4413      	add	r3, r2
 80109e0:	4a0a      	ldr	r2, [pc, #40]	; (8010a0c <ComputeRxWindowParameters+0xc8>)
 80109e2:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80109e6:	4b06      	ldr	r3, [pc, #24]	; (8010a00 <ComputeRxWindowParameters+0xbc>)
 80109e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80109ea:	4a08      	ldr	r2, [pc, #32]	; (8010a0c <ComputeRxWindowParameters+0xc8>)
 80109ec:	f8d2 23dc 	ldr.w	r2, [r2, #988]	; 0x3dc
 80109f0:	4413      	add	r3, r2
 80109f2:	4a06      	ldr	r2, [pc, #24]	; (8010a0c <ComputeRxWindowParameters+0xc8>)
 80109f4:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 80109f8:	bf00      	nop
 80109fa:	3704      	adds	r7, #4
 80109fc:	46bd      	mov	sp, r7
 80109fe:	bd90      	pop	{r4, r7, pc}
 8010a00:	20000c5c 	.word	0x20000c5c
 8010a04:	20000af8 	.word	0x20000af8
 8010a08:	20000b10 	.word	0x20000b10
 8010a0c:	20000740 	.word	0x20000740

08010a10 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 8010a10:	b580      	push	{r7, lr}
 8010a12:	b082      	sub	sp, #8
 8010a14:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 8010a16:	2300      	movs	r3, #0
 8010a18:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8010a1a:	4b13      	ldr	r3, [pc, #76]	; (8010a68 <VerifyTxFrame+0x58>)
 8010a1c:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d01b      	beq.n	8010a5c <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8010a24:	1d3b      	adds	r3, r7, #4
 8010a26:	4618      	mov	r0, r3
 8010a28:	f002 ff6e 	bl	8013908 <LoRaMacCommandsGetSizeSerializedCmds>
 8010a2c:	4603      	mov	r3, r0
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d001      	beq.n	8010a36 <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010a32:	2313      	movs	r3, #19
 8010a34:	e013      	b.n	8010a5e <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8010a36:	4b0d      	ldr	r3, [pc, #52]	; (8010a6c <VerifyTxFrame+0x5c>)
 8010a38:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8010a3c:	4a0a      	ldr	r2, [pc, #40]	; (8010a68 <VerifyTxFrame+0x58>)
 8010a3e:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 8010a42:	687a      	ldr	r2, [r7, #4]
 8010a44:	b2d2      	uxtb	r2, r2
 8010a46:	4618      	mov	r0, r3
 8010a48:	f7ff f932 	bl	800fcb0 <ValidatePayloadLength>
 8010a4c:	4603      	mov	r3, r0
 8010a4e:	f083 0301 	eor.w	r3, r3, #1
 8010a52:	b2db      	uxtb	r3, r3
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d001      	beq.n	8010a5c <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 8010a58:	2308      	movs	r3, #8
 8010a5a:	e000      	b.n	8010a5e <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 8010a5c:	2300      	movs	r3, #0
}
 8010a5e:	4618      	mov	r0, r3
 8010a60:	3708      	adds	r7, #8
 8010a62:	46bd      	mov	sp, r7
 8010a64:	bd80      	pop	{r7, pc}
 8010a66:	bf00      	nop
 8010a68:	20000c5c 	.word	0x20000c5c
 8010a6c:	20000740 	.word	0x20000740

08010a70 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 8010a70:	b580      	push	{r7, lr}
 8010a72:	b082      	sub	sp, #8
 8010a74:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 8010a76:	4b18      	ldr	r3, [pc, #96]	; (8010ad8 <SerializeTxFrame+0x68>)
 8010a78:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d002      	beq.n	8010a86 <SerializeTxFrame+0x16>
 8010a80:	2b04      	cmp	r3, #4
 8010a82:	d011      	beq.n	8010aa8 <SerializeTxFrame+0x38>
 8010a84:	e021      	b.n	8010aca <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8010a86:	4815      	ldr	r0, [pc, #84]	; (8010adc <SerializeTxFrame+0x6c>)
 8010a88:	f004 fa6c 	bl	8014f64 <LoRaMacSerializerJoinRequest>
 8010a8c:	4603      	mov	r3, r0
 8010a8e:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8010a90:	79fb      	ldrb	r3, [r7, #7]
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d001      	beq.n	8010a9a <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010a96:	2311      	movs	r3, #17
 8010a98:	e01a      	b.n	8010ad0 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8010a9a:	4b0f      	ldr	r3, [pc, #60]	; (8010ad8 <SerializeTxFrame+0x68>)
 8010a9c:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8010aa0:	b29a      	uxth	r2, r3
 8010aa2:	4b0d      	ldr	r3, [pc, #52]	; (8010ad8 <SerializeTxFrame+0x68>)
 8010aa4:	801a      	strh	r2, [r3, #0]
            break;
 8010aa6:	e012      	b.n	8010ace <SerializeTxFrame+0x5e>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8010aa8:	480c      	ldr	r0, [pc, #48]	; (8010adc <SerializeTxFrame+0x6c>)
 8010aaa:	f004 fadd 	bl	8015068 <LoRaMacSerializerData>
 8010aae:	4603      	mov	r3, r0
 8010ab0:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8010ab2:	79fb      	ldrb	r3, [r7, #7]
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d001      	beq.n	8010abc <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010ab8:	2311      	movs	r3, #17
 8010aba:	e009      	b.n	8010ad0 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8010abc:	4b06      	ldr	r3, [pc, #24]	; (8010ad8 <SerializeTxFrame+0x68>)
 8010abe:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8010ac2:	b29a      	uxth	r2, r3
 8010ac4:	4b04      	ldr	r3, [pc, #16]	; (8010ad8 <SerializeTxFrame+0x68>)
 8010ac6:	801a      	strh	r2, [r3, #0]
            break;
 8010ac8:	e001      	b.n	8010ace <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8010aca:	2303      	movs	r3, #3
 8010acc:	e000      	b.n	8010ad0 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 8010ace:	2300      	movs	r3, #0
}
 8010ad0:	4618      	mov	r0, r3
 8010ad2:	3708      	adds	r7, #8
 8010ad4:	46bd      	mov	sp, r7
 8010ad6:	bd80      	pop	{r7, pc}
 8010ad8:	20000740 	.word	0x20000740
 8010adc:	20000848 	.word	0x20000848

08010ae0 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8010ae0:	b580      	push	{r7, lr}
 8010ae2:	b090      	sub	sp, #64	; 0x40
 8010ae4:	af02      	add	r7, sp, #8
 8010ae6:	4603      	mov	r3, r0
 8010ae8:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010aea:	2303      	movs	r3, #3
 8010aec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8010af0:	f7ff ff06 	bl	8010900 <CheckForClassBCollision>
 8010af4:	4603      	mov	r3, r0
 8010af6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8010afa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d002      	beq.n	8010b08 <ScheduleTx+0x28>
    {
        return status;
 8010b02:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010b06:	e092      	b.n	8010c2e <ScheduleTx+0x14e>
    }

    // Update back-off
    CalculateBackOff( );
 8010b08:	f000 f8f8 	bl	8010cfc <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8010b0c:	f7ff ffb0 	bl	8010a70 <SerializeTxFrame>
 8010b10:	4603      	mov	r3, r0
 8010b12:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8010b16:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d002      	beq.n	8010b24 <ScheduleTx+0x44>
    {
        return status;
 8010b1e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010b22:	e084      	b.n	8010c2e <ScheduleTx+0x14e>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8010b24:	4b44      	ldr	r3, [pc, #272]	; (8010c38 <ScheduleTx+0x158>)
 8010b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b28:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010b2a:	4b43      	ldr	r3, [pc, #268]	; (8010c38 <ScheduleTx+0x158>)
 8010b2c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010b30:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8010b32:	4b41      	ldr	r3, [pc, #260]	; (8010c38 <ScheduleTx+0x158>)
 8010b34:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8010b38:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8010b3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010b3e:	4618      	mov	r0, r3
 8010b40:	f00b fe0a 	bl	801c758 <SysTimeGetMcuTime>
 8010b44:	4638      	mov	r0, r7
 8010b46:	4b3c      	ldr	r3, [pc, #240]	; (8010c38 <ScheduleTx+0x158>)
 8010b48:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 8010b4c:	9200      	str	r2, [sp, #0]
 8010b4e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8010b52:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8010b56:	ca06      	ldmia	r2, {r1, r2}
 8010b58:	f00b fd5f 	bl	801c61a <SysTimeSub>
 8010b5c:	f107 0320 	add.w	r3, r7, #32
 8010b60:	463a      	mov	r2, r7
 8010b62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010b66:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8010b6a:	4b33      	ldr	r3, [pc, #204]	; (8010c38 <ScheduleTx+0x158>)
 8010b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b6e:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 8010b70:	2300      	movs	r3, #0
 8010b72:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 8010b76:	2301      	movs	r3, #1
 8010b78:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8010b7a:	4b30      	ldr	r3, [pc, #192]	; (8010c3c <ScheduleTx+0x15c>)
 8010b7c:	881b      	ldrh	r3, [r3, #0]
 8010b7e:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8010b80:	4b2d      	ldr	r3, [pc, #180]	; (8010c38 <ScheduleTx+0x158>)
 8010b82:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d104      	bne.n	8010b94 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 8010b8a:	2301      	movs	r3, #1
 8010b8c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 8010b90:	2300      	movs	r3, #0
 8010b92:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 8010b94:	4b28      	ldr	r3, [pc, #160]	; (8010c38 <ScheduleTx+0x158>)
 8010b96:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8010b9a:	f107 0114 	add.w	r1, r7, #20
 8010b9e:	4b28      	ldr	r3, [pc, #160]	; (8010c40 <ScheduleTx+0x160>)
 8010ba0:	9300      	str	r3, [sp, #0]
 8010ba2:	4b28      	ldr	r3, [pc, #160]	; (8010c44 <ScheduleTx+0x164>)
 8010ba4:	4a28      	ldr	r2, [pc, #160]	; (8010c48 <ScheduleTx+0x168>)
 8010ba6:	f004 fd27 	bl	80155f8 <RegionNextChannel>
 8010baa:	4603      	mov	r3, r0
 8010bac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 8010bb0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d025      	beq.n	8010c04 <ScheduleTx+0x124>
    {
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 8010bb8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010bbc:	2b0b      	cmp	r3, #11
 8010bbe:	d11e      	bne.n	8010bfe <ScheduleTx+0x11e>
        {
            if( MacCtx.DutyCycleWaitTime != 0 )
 8010bc0:	4b1e      	ldr	r3, [pc, #120]	; (8010c3c <ScheduleTx+0x15c>)
 8010bc2:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d01c      	beq.n	8010c04 <ScheduleTx+0x124>
            {
                if( allowDelayedTx == true )
 8010bca:	7bfb      	ldrb	r3, [r7, #15]
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d013      	beq.n	8010bf8 <ScheduleTx+0x118>
                {
                    // Allow delayed transmissions. We have to allow it in case
                    // the MAC must retransmit a frame with the frame repetitions
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8010bd0:	4b1a      	ldr	r3, [pc, #104]	; (8010c3c <ScheduleTx+0x15c>)
 8010bd2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010bd6:	f043 0320 	orr.w	r3, r3, #32
 8010bda:	4a18      	ldr	r2, [pc, #96]	; (8010c3c <ScheduleTx+0x15c>)
 8010bdc:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8010be0:	4b16      	ldr	r3, [pc, #88]	; (8010c3c <ScheduleTx+0x15c>)
 8010be2:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8010be6:	4619      	mov	r1, r3
 8010be8:	4818      	ldr	r0, [pc, #96]	; (8010c4c <ScheduleTx+0x16c>)
 8010bea:	f00c fb55 	bl	801d298 <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 8010bee:	4817      	ldr	r0, [pc, #92]	; (8010c4c <ScheduleTx+0x16c>)
 8010bf0:	f00c fa74 	bl	801d0dc <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 8010bf4:	2300      	movs	r3, #0
 8010bf6:	e01a      	b.n	8010c2e <ScheduleTx+0x14e>
                }
                // Need to delay, but allowDelayedTx does not allow it
                return status;
 8010bf8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010bfc:	e017      	b.n	8010c2e <ScheduleTx+0x14e>
            }
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8010bfe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010c02:	e014      	b.n	8010c2e <ScheduleTx+0x14e>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 8010c04:	f7ff fe9e 	bl	8010944 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 8010c08:	f7ff ff02 	bl	8010a10 <VerifyTxFrame>
 8010c0c:	4603      	mov	r3, r0
 8010c0e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8010c12:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d002      	beq.n	8010c20 <ScheduleTx+0x140>
    {
        return status;
 8010c1a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010c1e:	e006      	b.n	8010c2e <ScheduleTx+0x14e>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8010c20:	4b06      	ldr	r3, [pc, #24]	; (8010c3c <ScheduleTx+0x15c>)
 8010c22:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 8010c26:	4618      	mov	r0, r3
 8010c28:	f000 fb76 	bl	8011318 <SendFrameOnChannel>
 8010c2c:	4603      	mov	r3, r0
}
 8010c2e:	4618      	mov	r0, r3
 8010c30:	3738      	adds	r7, #56	; 0x38
 8010c32:	46bd      	mov	sp, r7
 8010c34:	bd80      	pop	{r7, pc}
 8010c36:	bf00      	nop
 8010c38:	20000c5c 	.word	0x20000c5c
 8010c3c:	20000740 	.word	0x20000740
 8010c40:	20000c8c 	.word	0x20000c8c
 8010c44:	20000bd4 	.word	0x20000bd4
 8010c48:	20000b5b 	.word	0x20000b5b
 8010c4c:	20000aa8 	.word	0x20000aa8

08010c50 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8010c50:	b580      	push	{r7, lr}
 8010c52:	b084      	sub	sp, #16
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	4603      	mov	r3, r0
 8010c58:	460a      	mov	r2, r1
 8010c5a:	71fb      	strb	r3, [r7, #7]
 8010c5c:	4613      	mov	r3, r2
 8010c5e:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8010c60:	2312      	movs	r3, #18
 8010c62:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 8010c64:	2300      	movs	r3, #0
 8010c66:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 8010c68:	4b22      	ldr	r3, [pc, #136]	; (8010cf4 <SecureFrame+0xa4>)
 8010c6a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d002      	beq.n	8010c78 <SecureFrame+0x28>
 8010c72:	2b04      	cmp	r3, #4
 8010c74:	d011      	beq.n	8010c9a <SecureFrame+0x4a>
 8010c76:	e036      	b.n	8010ce6 <SecureFrame+0x96>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8010c78:	481f      	ldr	r0, [pc, #124]	; (8010cf8 <SecureFrame+0xa8>)
 8010c7a:	f003 fd3f 	bl	80146fc <LoRaMacCryptoPrepareJoinRequest>
 8010c7e:	4603      	mov	r3, r0
 8010c80:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8010c82:	7bfb      	ldrb	r3, [r7, #15]
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d001      	beq.n	8010c8c <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010c88:	2311      	movs	r3, #17
 8010c8a:	e02f      	b.n	8010cec <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8010c8c:	4b19      	ldr	r3, [pc, #100]	; (8010cf4 <SecureFrame+0xa4>)
 8010c8e:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8010c92:	b29a      	uxth	r2, r3
 8010c94:	4b17      	ldr	r3, [pc, #92]	; (8010cf4 <SecureFrame+0xa4>)
 8010c96:	801a      	strh	r2, [r3, #0]
            break;
 8010c98:	e027      	b.n	8010cea <SecureFrame+0x9a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8010c9a:	f107 0308 	add.w	r3, r7, #8
 8010c9e:	4618      	mov	r0, r3
 8010ca0:	f003 fc66 	bl	8014570 <LoRaMacCryptoGetFCntUp>
 8010ca4:	4603      	mov	r3, r0
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d001      	beq.n	8010cae <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8010caa:	2312      	movs	r3, #18
 8010cac:	e01e      	b.n	8010cec <SecureFrame+0x9c>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 8010cae:	4b11      	ldr	r3, [pc, #68]	; (8010cf4 <SecureFrame+0xa4>)
 8010cb0:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d002      	beq.n	8010cbe <SecureFrame+0x6e>
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 8010cb8:	68bb      	ldr	r3, [r7, #8]
 8010cba:	3b01      	subs	r3, #1
 8010cbc:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8010cbe:	68b8      	ldr	r0, [r7, #8]
 8010cc0:	79ba      	ldrb	r2, [r7, #6]
 8010cc2:	79f9      	ldrb	r1, [r7, #7]
 8010cc4:	4b0c      	ldr	r3, [pc, #48]	; (8010cf8 <SecureFrame+0xa8>)
 8010cc6:	f003 fe41 	bl	801494c <LoRaMacCryptoSecureMessage>
 8010cca:	4603      	mov	r3, r0
 8010ccc:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8010cce:	7bfb      	ldrb	r3, [r7, #15]
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d001      	beq.n	8010cd8 <SecureFrame+0x88>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010cd4:	2311      	movs	r3, #17
 8010cd6:	e009      	b.n	8010cec <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8010cd8:	4b06      	ldr	r3, [pc, #24]	; (8010cf4 <SecureFrame+0xa4>)
 8010cda:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8010cde:	b29a      	uxth	r2, r3
 8010ce0:	4b04      	ldr	r3, [pc, #16]	; (8010cf4 <SecureFrame+0xa4>)
 8010ce2:	801a      	strh	r2, [r3, #0]
            break;
 8010ce4:	e001      	b.n	8010cea <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8010ce6:	2303      	movs	r3, #3
 8010ce8:	e000      	b.n	8010cec <SecureFrame+0x9c>
    }
    return LORAMAC_STATUS_OK;
 8010cea:	2300      	movs	r3, #0
}
 8010cec:	4618      	mov	r0, r3
 8010cee:	3710      	adds	r7, #16
 8010cf0:	46bd      	mov	sp, r7
 8010cf2:	bd80      	pop	{r7, pc}
 8010cf4:	20000740 	.word	0x20000740
 8010cf8:	20000848 	.word	0x20000848

08010cfc <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8010cfc:	b480      	push	{r7}
 8010cfe:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8010d00:	4b09      	ldr	r3, [pc, #36]	; (8010d28 <CalculateBackOff+0x2c>)
 8010d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d10a      	bne.n	8010d1e <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8010d08:	4b07      	ldr	r3, [pc, #28]	; (8010d28 <CalculateBackOff+0x2c>)
 8010d0a:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 8010d0e:	3b01      	subs	r3, #1
 8010d10:	4a06      	ldr	r2, [pc, #24]	; (8010d2c <CalculateBackOff+0x30>)
 8010d12:	f8d2 241c 	ldr.w	r2, [r2, #1052]	; 0x41c
 8010d16:	fb02 f303 	mul.w	r3, r2, r3
 8010d1a:	4a03      	ldr	r2, [pc, #12]	; (8010d28 <CalculateBackOff+0x2c>)
 8010d1c:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 8010d1e:	bf00      	nop
 8010d20:	46bd      	mov	sp, r7
 8010d22:	bc80      	pop	{r7}
 8010d24:	4770      	bx	lr
 8010d26:	bf00      	nop
 8010d28:	20000c5c 	.word	0x20000c5c
 8010d2c:	20000740 	.word	0x20000740

08010d30 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8010d30:	b580      	push	{r7, lr}
 8010d32:	b082      	sub	sp, #8
 8010d34:	af00      	add	r7, sp, #0
 8010d36:	4603      	mov	r3, r0
 8010d38:	7139      	strb	r1, [r7, #4]
 8010d3a:	71fb      	strb	r3, [r7, #7]
 8010d3c:	4613      	mov	r3, r2
 8010d3e:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8010d40:	79fb      	ldrb	r3, [r7, #7]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d002      	beq.n	8010d4c <RemoveMacCommands+0x1c>
 8010d46:	79fb      	ldrb	r3, [r7, #7]
 8010d48:	2b01      	cmp	r3, #1
 8010d4a:	d10d      	bne.n	8010d68 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 8010d4c:	79bb      	ldrb	r3, [r7, #6]
 8010d4e:	2b01      	cmp	r3, #1
 8010d50:	d108      	bne.n	8010d64 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 8010d52:	793b      	ldrb	r3, [r7, #4]
 8010d54:	f003 0320 	and.w	r3, r3, #32
 8010d58:	b2db      	uxtb	r3, r3
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d004      	beq.n	8010d68 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8010d5e:	f002 fda7 	bl	80138b0 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 8010d62:	e001      	b.n	8010d68 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8010d64:	f002 fda4 	bl	80138b0 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8010d68:	bf00      	nop
 8010d6a:	3708      	adds	r7, #8
 8010d6c:	46bd      	mov	sp, r7
 8010d6e:	bd80      	pop	{r7, pc}

08010d70 <ResetMacParameters>:

static void ResetMacParameters( bool isRejoin )
{
 8010d70:	b5b0      	push	{r4, r5, r7, lr}
 8010d72:	b092      	sub	sp, #72	; 0x48
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	4603      	mov	r3, r0
 8010d78:	71fb      	strb	r3, [r7, #7]
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( isRejoin == false )
 8010d7a:	79fb      	ldrb	r3, [r7, #7]
 8010d7c:	f083 0301 	eor.w	r3, r3, #1
 8010d80:	b2db      	uxtb	r3, r3
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d003      	beq.n	8010d8e <ResetMacParameters+0x1e>
    {
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8010d86:	4b88      	ldr	r3, [pc, #544]	; (8010fa8 <ResetMacParameters+0x238>)
 8010d88:	2200      	movs	r2, #0
 8010d8a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
    }

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 8010d8e:	4b86      	ldr	r3, [pc, #536]	; (8010fa8 <ResetMacParameters+0x238>)
 8010d90:	2200      	movs	r2, #0
 8010d92:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 8010d94:	4b85      	ldr	r3, [pc, #532]	; (8010fac <ResetMacParameters+0x23c>)
 8010d96:	2200      	movs	r2, #0
 8010d98:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 8010d9c:	4b83      	ldr	r3, [pc, #524]	; (8010fac <ResetMacParameters+0x23c>)
 8010d9e:	2200      	movs	r2, #0
 8010da0:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
    MacCtx.ResponseTimeoutStartTime = 0;
 8010da4:	4b81      	ldr	r3, [pc, #516]	; (8010fac <ResetMacParameters+0x23c>)
 8010da6:	2200      	movs	r2, #0
 8010da8:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 8010dac:	4b7e      	ldr	r3, [pc, #504]	; (8010fa8 <ResetMacParameters+0x238>)
 8010dae:	2200      	movs	r2, #0
 8010db0:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8010db4:	4b7c      	ldr	r3, [pc, #496]	; (8010fa8 <ResetMacParameters+0x238>)
 8010db6:	2201      	movs	r2, #1
 8010db8:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8010dbc:	4b7a      	ldr	r3, [pc, #488]	; (8010fa8 <ResetMacParameters+0x238>)
 8010dbe:	f993 20dc 	ldrsb.w	r2, [r3, #220]	; 0xdc
 8010dc2:	4b79      	ldr	r3, [pc, #484]	; (8010fa8 <ResetMacParameters+0x238>)
 8010dc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8010dc8:	4b77      	ldr	r3, [pc, #476]	; (8010fa8 <ResetMacParameters+0x238>)
 8010dca:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 8010dce:	4b76      	ldr	r3, [pc, #472]	; (8010fa8 <ResetMacParameters+0x238>)
 8010dd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8010dd4:	4b74      	ldr	r3, [pc, #464]	; (8010fa8 <ResetMacParameters+0x238>)
 8010dd6:	f893 20b1 	ldrb.w	r2, [r3, #177]	; 0xb1
 8010dda:	4b73      	ldr	r3, [pc, #460]	; (8010fa8 <ResetMacParameters+0x238>)
 8010ddc:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8010de0:	4b71      	ldr	r3, [pc, #452]	; (8010fa8 <ResetMacParameters+0x238>)
 8010de2:	4a71      	ldr	r2, [pc, #452]	; (8010fa8 <ResetMacParameters+0x238>)
 8010de4:	336c      	adds	r3, #108	; 0x6c
 8010de6:	32b4      	adds	r2, #180	; 0xb4
 8010de8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010dec:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8010df0:	4b6d      	ldr	r3, [pc, #436]	; (8010fa8 <ResetMacParameters+0x238>)
 8010df2:	4a6d      	ldr	r2, [pc, #436]	; (8010fa8 <ResetMacParameters+0x238>)
 8010df4:	3374      	adds	r3, #116	; 0x74
 8010df6:	32bc      	adds	r2, #188	; 0xbc
 8010df8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010dfc:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8010e00:	4b69      	ldr	r3, [pc, #420]	; (8010fa8 <ResetMacParameters+0x238>)
 8010e02:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
 8010e06:	4b68      	ldr	r3, [pc, #416]	; (8010fa8 <ResetMacParameters+0x238>)
 8010e08:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8010e0c:	4b66      	ldr	r3, [pc, #408]	; (8010fa8 <ResetMacParameters+0x238>)
 8010e0e:	f893 20c5 	ldrb.w	r2, [r3, #197]	; 0xc5
 8010e12:	4b65      	ldr	r3, [pc, #404]	; (8010fa8 <ResetMacParameters+0x238>)
 8010e14:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8010e18:	4b63      	ldr	r3, [pc, #396]	; (8010fa8 <ResetMacParameters+0x238>)
 8010e1a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8010e1e:	4a62      	ldr	r2, [pc, #392]	; (8010fa8 <ResetMacParameters+0x238>)
 8010e20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8010e24:	4b60      	ldr	r3, [pc, #384]	; (8010fa8 <ResetMacParameters+0x238>)
 8010e26:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8010e2a:	4a5f      	ldr	r2, [pc, #380]	; (8010fa8 <ResetMacParameters+0x238>)
 8010e2c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 8010e30:	4b5d      	ldr	r3, [pc, #372]	; (8010fa8 <ResetMacParameters+0x238>)
 8010e32:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 8010e36:	4b5c      	ldr	r3, [pc, #368]	; (8010fa8 <ResetMacParameters+0x238>)
 8010e38:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 8010e3c:	4b5a      	ldr	r3, [pc, #360]	; (8010fa8 <ResetMacParameters+0x238>)
 8010e3e:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 8010e42:	4b59      	ldr	r3, [pc, #356]	; (8010fa8 <ResetMacParameters+0x238>)
 8010e44:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

    MacCtx.NodeAckRequested = false;
 8010e48:	4b58      	ldr	r3, [pc, #352]	; (8010fac <ResetMacParameters+0x23c>)
 8010e4a:	2200      	movs	r2, #0
 8010e4c:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
    Nvm.MacGroup1.SrvAckRequested = false;
 8010e50:	4b55      	ldr	r3, [pc, #340]	; (8010fa8 <ResetMacParameters+0x238>)
 8010e52:	2200      	movs	r2, #0
 8010e54:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8010e58:	4b53      	ldr	r3, [pc, #332]	; (8010fa8 <ResetMacParameters+0x238>)
 8010e5a:	2200      	movs	r2, #0
 8010e5c:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
    Nvm.MacGroup2.DownlinkReceived = false;
 8010e60:	4b51      	ldr	r3, [pc, #324]	; (8010fa8 <ResetMacParameters+0x238>)
 8010e62:	2200      	movs	r2, #0
 8010e64:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 8010e68:	4b4f      	ldr	r3, [pc, #316]	; (8010fa8 <ResetMacParameters+0x238>)
 8010e6a:	2200      	movs	r2, #0
 8010e6c:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 8010e70:	4b4d      	ldr	r3, [pc, #308]	; (8010fa8 <ResetMacParameters+0x238>)
 8010e72:	2200      	movs	r2, #0
 8010e74:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
    Nvm.MacGroup2.ForceRejoinType = 0;
 8010e78:	4b4b      	ldr	r3, [pc, #300]	; (8010fa8 <ResetMacParameters+0x238>)
 8010e7a:	2200      	movs	r2, #0
 8010e7c:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 8010e80:	4b49      	ldr	r3, [pc, #292]	; (8010fa8 <ResetMacParameters+0x238>)
 8010e82:	2200      	movs	r2, #0
 8010e84:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 8010e88:	4b47      	ldr	r3, [pc, #284]	; (8010fa8 <ResetMacParameters+0x238>)
 8010e8a:	2200      	movs	r2, #0
 8010e8c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 8010e90:	4b45      	ldr	r3, [pc, #276]	; (8010fa8 <ResetMacParameters+0x238>)
 8010e92:	2200      	movs	r2, #0
 8010e94:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 8010e98:	4b43      	ldr	r3, [pc, #268]	; (8010fa8 <ResetMacParameters+0x238>)
 8010e9a:	2200      	movs	r2, #0
 8010e9c:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 8010ea0:	4b41      	ldr	r3, [pc, #260]	; (8010fa8 <ResetMacParameters+0x238>)
 8010ea2:	2200      	movs	r2, #0
 8010ea4:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8010ea8:	2301      	movs	r3, #1
 8010eaa:	763b      	strb	r3, [r7, #24]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8010eac:	4b40      	ldr	r3, [pc, #256]	; (8010fb0 <ResetMacParameters+0x240>)
 8010eae:	60fb      	str	r3, [r7, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8010eb0:	4b40      	ldr	r3, [pc, #256]	; (8010fb4 <ResetMacParameters+0x244>)
 8010eb2:	613b      	str	r3, [r7, #16]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    params.Bands = &RegionBands;
 8010eb4:	4b40      	ldr	r3, [pc, #256]	; (8010fb8 <ResetMacParameters+0x248>)
 8010eb6:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8010eb8:	4b3b      	ldr	r3, [pc, #236]	; (8010fa8 <ResetMacParameters+0x238>)
 8010eba:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010ebe:	f107 020c 	add.w	r2, r7, #12
 8010ec2:	4611      	mov	r1, r2
 8010ec4:	4618      	mov	r0, r3
 8010ec6:	f004 fa12 	bl	80152ee <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8010eca:	4b38      	ldr	r3, [pc, #224]	; (8010fac <ResetMacParameters+0x23c>)
 8010ecc:	2200      	movs	r2, #0
 8010ece:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8010ed2:	4b36      	ldr	r3, [pc, #216]	; (8010fac <ResetMacParameters+0x23c>)
 8010ed4:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 8010ed8:	4b34      	ldr	r3, [pc, #208]	; (8010fac <ResetMacParameters+0x23c>)
 8010eda:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8010ede:	4b32      	ldr	r3, [pc, #200]	; (8010fa8 <ResetMacParameters+0x238>)
 8010ee0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ee2:	4a32      	ldr	r2, [pc, #200]	; (8010fac <ResetMacParameters+0x23c>)
 8010ee4:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010ee8:	4b2f      	ldr	r3, [pc, #188]	; (8010fa8 <ResetMacParameters+0x238>)
 8010eea:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8010eee:	4b2f      	ldr	r3, [pc, #188]	; (8010fac <ResetMacParameters+0x23c>)
 8010ef0:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8010ef4:	4b2c      	ldr	r3, [pc, #176]	; (8010fa8 <ResetMacParameters+0x238>)
 8010ef6:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8010efa:	4b2c      	ldr	r3, [pc, #176]	; (8010fac <ResetMacParameters+0x23c>)
 8010efc:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 8010f00:	4b2a      	ldr	r3, [pc, #168]	; (8010fac <ResetMacParameters+0x23c>)
 8010f02:	2200      	movs	r2, #0
 8010f04:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8010f08:	4b28      	ldr	r3, [pc, #160]	; (8010fac <ResetMacParameters+0x23c>)
 8010f0a:	2201      	movs	r2, #1
 8010f0c:	f883 23e3 	strb.w	r2, [r3, #995]	; 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8010f10:	4b25      	ldr	r3, [pc, #148]	; (8010fa8 <ResetMacParameters+0x238>)
 8010f12:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8010f16:	4b25      	ldr	r3, [pc, #148]	; (8010fac <ResetMacParameters+0x23c>)
 8010f18:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8010f1c:	4a23      	ldr	r2, [pc, #140]	; (8010fac <ResetMacParameters+0x23c>)
 8010f1e:	4b23      	ldr	r3, [pc, #140]	; (8010fac <ResetMacParameters+0x23c>)
 8010f20:	f502 747a 	add.w	r4, r2, #1000	; 0x3e8
 8010f24:	f503 7574 	add.w	r5, r3, #976	; 0x3d0
 8010f28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010f2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010f2c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010f30:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8010f34:	4b1d      	ldr	r3, [pc, #116]	; (8010fac <ResetMacParameters+0x23c>)
 8010f36:	2201      	movs	r2, #1
 8010f38:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010f3c:	4b1b      	ldr	r3, [pc, #108]	; (8010fac <ResetMacParameters+0x23c>)
 8010f3e:	2202      	movs	r2, #2
 8010f40:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 8010f44:	2300      	movs	r3, #0
 8010f46:	643b      	str	r3, [r7, #64]	; 0x40
    classBCallbacks.MacProcessNotify = NULL;
 8010f48:	2300      	movs	r3, #0
 8010f4a:	647b      	str	r3, [r7, #68]	; 0x44

    if( MacCtx.MacCallbacks != NULL )
 8010f4c:	4b17      	ldr	r3, [pc, #92]	; (8010fac <ResetMacParameters+0x23c>)
 8010f4e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d009      	beq.n	8010f6a <ResetMacParameters+0x1fa>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8010f56:	4b15      	ldr	r3, [pc, #84]	; (8010fac <ResetMacParameters+0x23c>)
 8010f58:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010f5c:	685b      	ldr	r3, [r3, #4]
 8010f5e:	643b      	str	r3, [r7, #64]	; 0x40
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8010f60:	4b12      	ldr	r3, [pc, #72]	; (8010fac <ResetMacParameters+0x23c>)
 8010f62:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010f66:	695b      	ldr	r3, [r3, #20]
 8010f68:	647b      	str	r3, [r7, #68]	; 0x44
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8010f6a:	4b14      	ldr	r3, [pc, #80]	; (8010fbc <ResetMacParameters+0x24c>)
 8010f6c:	61fb      	str	r3, [r7, #28]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8010f6e:	4b14      	ldr	r3, [pc, #80]	; (8010fc0 <ResetMacParameters+0x250>)
 8010f70:	623b      	str	r3, [r7, #32]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8010f72:	4b14      	ldr	r3, [pc, #80]	; (8010fc4 <ResetMacParameters+0x254>)
 8010f74:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8010f76:	4b14      	ldr	r3, [pc, #80]	; (8010fc8 <ResetMacParameters+0x258>)
 8010f78:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8010f7a:	4b14      	ldr	r3, [pc, #80]	; (8010fcc <ResetMacParameters+0x25c>)
 8010f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8010f7e:	4b14      	ldr	r3, [pc, #80]	; (8010fd0 <ResetMacParameters+0x260>)
 8010f80:	633b      	str	r3, [r7, #48]	; 0x30
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8010f82:	4b14      	ldr	r3, [pc, #80]	; (8010fd4 <ResetMacParameters+0x264>)
 8010f84:	637b      	str	r3, [r7, #52]	; 0x34
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8010f86:	4b14      	ldr	r3, [pc, #80]	; (8010fd8 <ResetMacParameters+0x268>)
 8010f88:	63bb      	str	r3, [r7, #56]	; 0x38
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 8010f8a:	4b14      	ldr	r3, [pc, #80]	; (8010fdc <ResetMacParameters+0x26c>)
 8010f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8010f8e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8010f92:	f107 031c 	add.w	r3, r7, #28
 8010f96:	4a12      	ldr	r2, [pc, #72]	; (8010fe0 <ResetMacParameters+0x270>)
 8010f98:	4618      	mov	r0, r3
 8010f9a:	f002 f996 	bl	80132ca <LoRaMacClassBInit>
}
 8010f9e:	bf00      	nop
 8010fa0:	3748      	adds	r7, #72	; 0x48
 8010fa2:	46bd      	mov	sp, r7
 8010fa4:	bdb0      	pop	{r4, r5, r7, pc}
 8010fa6:	bf00      	nop
 8010fa8:	20000c5c 	.word	0x20000c5c
 8010fac:	20000740 	.word	0x20000740
 8010fb0:	20000e80 	.word	0x20000e80
 8010fb4:	20000e94 	.word	0x20000e94
 8010fb8:	200017f4 	.word	0x200017f4
 8010fbc:	20000ba8 	.word	0x20000ba8
 8010fc0:	20000b60 	.word	0x20000b60
 8010fc4:	20000b94 	.word	0x20000b94
 8010fc8:	20000bd1 	.word	0x20000bd1
 8010fcc:	20000d40 	.word	0x20000d40
 8010fd0:	20000ca4 	.word	0x20000ca4
 8010fd4:	20000ca8 	.word	0x20000ca8
 8010fd8:	20000d44 	.word	0x20000d44
 8010fdc:	20000d8c 	.word	0x20000d8c
 8010fe0:	20001210 	.word	0x20001210

08010fe4 <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8010fe4:	b580      	push	{r7, lr}
 8010fe6:	b082      	sub	sp, #8
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	6078      	str	r0, [r7, #4]
 8010fec:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 8010fee:	6878      	ldr	r0, [r7, #4]
 8010ff0:	f00c f8e2 	bl	801d1b8 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 8010ff4:	4b11      	ldr	r3, [pc, #68]	; (801103c <RxWindowSetup+0x58>)
 8010ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ff8:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8010ffa:	4b11      	ldr	r3, [pc, #68]	; (8011040 <RxWindowSetup+0x5c>)
 8010ffc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011000:	4a10      	ldr	r2, [pc, #64]	; (8011044 <RxWindowSetup+0x60>)
 8011002:	6839      	ldr	r1, [r7, #0]
 8011004:	4618      	mov	r0, r3
 8011006:	f004 f9ff 	bl	8015408 <RegionRxConfig>
 801100a:	4603      	mov	r3, r0
 801100c:	2b00      	cmp	r3, #0
 801100e:	d010      	beq.n	8011032 <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8011010:	4b0d      	ldr	r3, [pc, #52]	; (8011048 <RxWindowSetup+0x64>)
 8011012:	f893 2424 	ldrb.w	r2, [r3, #1060]	; 0x424
 8011016:	4b0c      	ldr	r3, [pc, #48]	; (8011048 <RxWindowSetup+0x64>)
 8011018:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 801101c:	4b07      	ldr	r3, [pc, #28]	; (801103c <RxWindowSetup+0x58>)
 801101e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011020:	4a07      	ldr	r2, [pc, #28]	; (8011040 <RxWindowSetup+0x5c>)
 8011022:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8011024:	4610      	mov	r0, r2
 8011026:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8011028:	683b      	ldr	r3, [r7, #0]
 801102a:	7cda      	ldrb	r2, [r3, #19]
 801102c:	4b06      	ldr	r3, [pc, #24]	; (8011048 <RxWindowSetup+0x64>)
 801102e:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
    }
}
 8011032:	bf00      	nop
 8011034:	3708      	adds	r7, #8
 8011036:	46bd      	mov	sp, r7
 8011038:	bd80      	pop	{r7, pc}
 801103a:	bf00      	nop
 801103c:	0801ea54 	.word	0x0801ea54
 8011040:	20000c5c 	.word	0x20000c5c
 8011044:	20000b64 	.word	0x20000b64
 8011048:	20000740 	.word	0x20000740

0801104c <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 801104c:	b590      	push	{r4, r7, lr}
 801104e:	b083      	sub	sp, #12
 8011050:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011052:	4b1e      	ldr	r3, [pc, #120]	; (80110cc <OpenContinuousRxCWindow+0x80>)
 8011054:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8011058:	4b1c      	ldr	r3, [pc, #112]	; (80110cc <OpenContinuousRxCWindow+0x80>)
 801105a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801105e:	b259      	sxtb	r1, r3
 8011060:	4b1a      	ldr	r3, [pc, #104]	; (80110cc <OpenContinuousRxCWindow+0x80>)
 8011062:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8011066:	4b19      	ldr	r3, [pc, #100]	; (80110cc <OpenContinuousRxCWindow+0x80>)
 8011068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801106a:	4c19      	ldr	r4, [pc, #100]	; (80110d0 <OpenContinuousRxCWindow+0x84>)
 801106c:	9400      	str	r4, [sp, #0]
 801106e:	f004 f9a8 	bl	80153c2 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8011072:	4b18      	ldr	r3, [pc, #96]	; (80110d4 <OpenContinuousRxCWindow+0x88>)
 8011074:	2202      	movs	r2, #2
 8011076:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 801107a:	4b14      	ldr	r3, [pc, #80]	; (80110cc <OpenContinuousRxCWindow+0x80>)
 801107c:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8011080:	4b14      	ldr	r3, [pc, #80]	; (80110d4 <OpenContinuousRxCWindow+0x88>)
 8011082:	f883 23fc 	strb.w	r2, [r3, #1020]	; 0x3fc
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8011086:	4b13      	ldr	r3, [pc, #76]	; (80110d4 <OpenContinuousRxCWindow+0x88>)
 8011088:	2201      	movs	r2, #1
 801108a:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 801108e:	4b0f      	ldr	r3, [pc, #60]	; (80110cc <OpenContinuousRxCWindow+0x80>)
 8011090:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011094:	4a10      	ldr	r2, [pc, #64]	; (80110d8 <OpenContinuousRxCWindow+0x8c>)
 8011096:	490e      	ldr	r1, [pc, #56]	; (80110d0 <OpenContinuousRxCWindow+0x84>)
 8011098:	4618      	mov	r0, r3
 801109a:	f004 f9b5 	bl	8015408 <RegionRxConfig>
 801109e:	4603      	mov	r3, r0
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d00f      	beq.n	80110c4 <OpenContinuousRxCWindow+0x78>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 80110a4:	4b0b      	ldr	r3, [pc, #44]	; (80110d4 <OpenContinuousRxCWindow+0x88>)
 80110a6:	f893 2424 	ldrb.w	r2, [r3, #1060]	; 0x424
 80110aa:	4b0a      	ldr	r3, [pc, #40]	; (80110d4 <OpenContinuousRxCWindow+0x88>)
 80110ac:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
        Radio.Rx( 0 ); // Continuous mode
 80110b0:	4b0a      	ldr	r3, [pc, #40]	; (80110dc <OpenContinuousRxCWindow+0x90>)
 80110b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110b4:	2000      	movs	r0, #0
 80110b6:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 80110b8:	4b06      	ldr	r3, [pc, #24]	; (80110d4 <OpenContinuousRxCWindow+0x88>)
 80110ba:	f893 23fb 	ldrb.w	r2, [r3, #1019]	; 0x3fb
 80110be:	4b05      	ldr	r3, [pc, #20]	; (80110d4 <OpenContinuousRxCWindow+0x88>)
 80110c0:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
    }
}
 80110c4:	bf00      	nop
 80110c6:	3704      	adds	r7, #4
 80110c8:	46bd      	mov	sp, r7
 80110ca:	bd90      	pop	{r4, r7, pc}
 80110cc:	20000c5c 	.word	0x20000c5c
 80110d0:	20000b28 	.word	0x20000b28
 80110d4:	20000740 	.word	0x20000740
 80110d8:	20000b64 	.word	0x20000b64
 80110dc:	0801ea54 	.word	0x0801ea54

080110e0 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 80110e0:	b580      	push	{r7, lr}
 80110e2:	b088      	sub	sp, #32
 80110e4:	af00      	add	r7, sp, #0
 80110e6:	60f8      	str	r0, [r7, #12]
 80110e8:	60b9      	str	r1, [r7, #8]
 80110ea:	603b      	str	r3, [r7, #0]
 80110ec:	4613      	mov	r3, r2
 80110ee:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 80110f0:	4b82      	ldr	r3, [pc, #520]	; (80112fc <PrepareFrame+0x21c>)
 80110f2:	2200      	movs	r2, #0
 80110f4:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 80110f6:	4b81      	ldr	r3, [pc, #516]	; (80112fc <PrepareFrame+0x21c>)
 80110f8:	2200      	movs	r2, #0
 80110fa:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
    uint32_t fCntUp = 0;
 80110fe:	2300      	movs	r3, #0
 8011100:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 8011102:	2300      	movs	r3, #0
 8011104:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 8011106:	2300      	movs	r3, #0
 8011108:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 801110a:	683b      	ldr	r3, [r7, #0]
 801110c:	2b00      	cmp	r3, #0
 801110e:	d101      	bne.n	8011114 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 8011110:	2300      	movs	r3, #0
 8011112:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8011114:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011116:	461a      	mov	r2, r3
 8011118:	6839      	ldr	r1, [r7, #0]
 801111a:	4879      	ldr	r0, [pc, #484]	; (8011300 <PrepareFrame+0x220>)
 801111c:	f007 feb1 	bl	8018e82 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8011120:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011122:	b2da      	uxtb	r2, r3
 8011124:	4b75      	ldr	r3, [pc, #468]	; (80112fc <PrepareFrame+0x21c>)
 8011126:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	781a      	ldrb	r2, [r3, #0]
 801112e:	4b73      	ldr	r3, [pc, #460]	; (80112fc <PrepareFrame+0x21c>)
 8011130:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	781b      	ldrb	r3, [r3, #0]
 8011136:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801113a:	b2db      	uxtb	r3, r3
 801113c:	2b07      	cmp	r3, #7
 801113e:	f000 80b9 	beq.w	80112b4 <PrepareFrame+0x1d4>
 8011142:	2b07      	cmp	r3, #7
 8011144:	f300 80d0 	bgt.w	80112e8 <PrepareFrame+0x208>
 8011148:	2b02      	cmp	r3, #2
 801114a:	d006      	beq.n	801115a <PrepareFrame+0x7a>
 801114c:	2b04      	cmp	r3, #4
 801114e:	f040 80cb 	bne.w	80112e8 <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 8011152:	4b6a      	ldr	r3, [pc, #424]	; (80112fc <PrepareFrame+0x21c>)
 8011154:	2201      	movs	r2, #1
 8011156:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 801115a:	4b68      	ldr	r3, [pc, #416]	; (80112fc <PrepareFrame+0x21c>)
 801115c:	2204      	movs	r2, #4
 801115e:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8011162:	4b66      	ldr	r3, [pc, #408]	; (80112fc <PrepareFrame+0x21c>)
 8011164:	4a67      	ldr	r2, [pc, #412]	; (8011304 <PrepareFrame+0x224>)
 8011166:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 801116a:	4b64      	ldr	r3, [pc, #400]	; (80112fc <PrepareFrame+0x21c>)
 801116c:	22ff      	movs	r2, #255	; 0xff
 801116e:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	781a      	ldrb	r2, [r3, #0]
 8011176:	4b61      	ldr	r3, [pc, #388]	; (80112fc <PrepareFrame+0x21c>)
 8011178:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 801117c:	4a5f      	ldr	r2, [pc, #380]	; (80112fc <PrepareFrame+0x21c>)
 801117e:	79fb      	ldrb	r3, [r7, #7]
 8011180:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8011184:	4b60      	ldr	r3, [pc, #384]	; (8011308 <PrepareFrame+0x228>)
 8011186:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 801118a:	4a5c      	ldr	r2, [pc, #368]	; (80112fc <PrepareFrame+0x21c>)
 801118c:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8011190:	68bb      	ldr	r3, [r7, #8]
 8011192:	781a      	ldrb	r2, [r3, #0]
 8011194:	4b59      	ldr	r3, [pc, #356]	; (80112fc <PrepareFrame+0x21c>)
 8011196:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 801119a:	4b58      	ldr	r3, [pc, #352]	; (80112fc <PrepareFrame+0x21c>)
 801119c:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 80111a0:	4b56      	ldr	r3, [pc, #344]	; (80112fc <PrepareFrame+0x21c>)
 80111a2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 80111a6:	4b55      	ldr	r3, [pc, #340]	; (80112fc <PrepareFrame+0x21c>)
 80111a8:	4a55      	ldr	r2, [pc, #340]	; (8011300 <PrepareFrame+0x220>)
 80111aa:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80111ae:	f107 0318 	add.w	r3, r7, #24
 80111b2:	4618      	mov	r0, r3
 80111b4:	f003 f9dc 	bl	8014570 <LoRaMacCryptoGetFCntUp>
 80111b8:	4603      	mov	r3, r0
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d001      	beq.n	80111c2 <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80111be:	2312      	movs	r3, #18
 80111c0:	e098      	b.n	80112f4 <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 80111c2:	69bb      	ldr	r3, [r7, #24]
 80111c4:	b29a      	uxth	r2, r3
 80111c6:	4b4d      	ldr	r3, [pc, #308]	; (80112fc <PrepareFrame+0x21c>)
 80111c8:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = 0;
 80111cc:	4b4b      	ldr	r3, [pc, #300]	; (80112fc <PrepareFrame+0x21c>)
 80111ce:	2200      	movs	r2, #0
 80111d0:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 80111d4:	4b49      	ldr	r3, [pc, #292]	; (80112fc <PrepareFrame+0x21c>)
 80111d6:	2200      	movs	r2, #0
 80111d8:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 80111dc:	69bb      	ldr	r3, [r7, #24]
 80111de:	4a47      	ldr	r2, [pc, #284]	; (80112fc <PrepareFrame+0x21c>)
 80111e0:	f8c2 344c 	str.w	r3, [r2, #1100]	; 0x44c

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80111e4:	f107 0314 	add.w	r3, r7, #20
 80111e8:	4618      	mov	r0, r3
 80111ea:	f002 fb8d 	bl	8013908 <LoRaMacCommandsGetSizeSerializedCmds>
 80111ee:	4603      	mov	r3, r0
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d001      	beq.n	80111f8 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80111f4:	2313      	movs	r3, #19
 80111f6:	e07d      	b.n	80112f4 <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 80111f8:	697b      	ldr	r3, [r7, #20]
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d076      	beq.n	80112ec <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 80111fe:	4b42      	ldr	r3, [pc, #264]	; (8011308 <PrepareFrame+0x228>)
 8011200:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011204:	4618      	mov	r0, r3
 8011206:	f7fe fd2b 	bl	800fc60 <GetMaxAppPayloadWithoutFOptsLength>
 801120a:	4603      	mov	r3, r0
 801120c:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 801120e:	4b3b      	ldr	r3, [pc, #236]	; (80112fc <PrepareFrame+0x21c>)
 8011210:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8011214:	2b00      	cmp	r3, #0
 8011216:	d01d      	beq.n	8011254 <PrepareFrame+0x174>
 8011218:	697b      	ldr	r3, [r7, #20]
 801121a:	2b0f      	cmp	r3, #15
 801121c:	d81a      	bhi.n	8011254 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 801121e:	f107 0314 	add.w	r3, r7, #20
 8011222:	4a3a      	ldr	r2, [pc, #232]	; (801130c <PrepareFrame+0x22c>)
 8011224:	4619      	mov	r1, r3
 8011226:	200f      	movs	r0, #15
 8011228:	f002 fb84 	bl	8013934 <LoRaMacCommandsSerializeCmds>
 801122c:	4603      	mov	r3, r0
 801122e:	2b00      	cmp	r3, #0
 8011230:	d001      	beq.n	8011236 <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011232:	2313      	movs	r3, #19
 8011234:	e05e      	b.n	80112f4 <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8011236:	697b      	ldr	r3, [r7, #20]
 8011238:	f003 030f 	and.w	r3, r3, #15
 801123c:	b2d9      	uxtb	r1, r3
 801123e:	68ba      	ldr	r2, [r7, #8]
 8011240:	7813      	ldrb	r3, [r2, #0]
 8011242:	f361 0303 	bfi	r3, r1, #0, #4
 8011246:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8011248:	68bb      	ldr	r3, [r7, #8]
 801124a:	781a      	ldrb	r2, [r3, #0]
 801124c:	4b2b      	ldr	r3, [pc, #172]	; (80112fc <PrepareFrame+0x21c>)
 801124e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 8011252:	e04b      	b.n	80112ec <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8011254:	4b29      	ldr	r3, [pc, #164]	; (80112fc <PrepareFrame+0x21c>)
 8011256:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 801125a:	2b00      	cmp	r3, #0
 801125c:	d010      	beq.n	8011280 <PrepareFrame+0x1a0>
 801125e:	697b      	ldr	r3, [r7, #20]
 8011260:	2b0f      	cmp	r3, #15
 8011262:	d90d      	bls.n	8011280 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8011264:	7ffb      	ldrb	r3, [r7, #31]
 8011266:	f107 0114 	add.w	r1, r7, #20
 801126a:	4a29      	ldr	r2, [pc, #164]	; (8011310 <PrepareFrame+0x230>)
 801126c:	4618      	mov	r0, r3
 801126e:	f002 fb61 	bl	8013934 <LoRaMacCommandsSerializeCmds>
 8011272:	4603      	mov	r3, r0
 8011274:	2b00      	cmp	r3, #0
 8011276:	d001      	beq.n	801127c <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011278:	2313      	movs	r3, #19
 801127a:	e03b      	b.n	80112f4 <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 801127c:	230a      	movs	r3, #10
 801127e:	e039      	b.n	80112f4 <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8011280:	7ffb      	ldrb	r3, [r7, #31]
 8011282:	f107 0114 	add.w	r1, r7, #20
 8011286:	4a22      	ldr	r2, [pc, #136]	; (8011310 <PrepareFrame+0x230>)
 8011288:	4618      	mov	r0, r3
 801128a:	f002 fb53 	bl	8013934 <LoRaMacCommandsSerializeCmds>
 801128e:	4603      	mov	r3, r0
 8011290:	2b00      	cmp	r3, #0
 8011292:	d001      	beq.n	8011298 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011294:	2313      	movs	r3, #19
 8011296:	e02d      	b.n	80112f4 <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8011298:	4b18      	ldr	r3, [pc, #96]	; (80112fc <PrepareFrame+0x21c>)
 801129a:	2200      	movs	r2, #0
 801129c:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 80112a0:	4b16      	ldr	r3, [pc, #88]	; (80112fc <PrepareFrame+0x21c>)
 80112a2:	4a1b      	ldr	r2, [pc, #108]	; (8011310 <PrepareFrame+0x230>)
 80112a4:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 80112a8:	697b      	ldr	r3, [r7, #20]
 80112aa:	b2da      	uxtb	r2, r3
 80112ac:	4b13      	ldr	r3, [pc, #76]	; (80112fc <PrepareFrame+0x21c>)
 80112ae:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 80112b2:	e01b      	b.n	80112ec <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 80112b4:	683b      	ldr	r3, [r7, #0]
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d01a      	beq.n	80112f0 <PrepareFrame+0x210>
 80112ba:	4b10      	ldr	r3, [pc, #64]	; (80112fc <PrepareFrame+0x21c>)
 80112bc:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d015      	beq.n	80112f0 <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 80112c4:	4813      	ldr	r0, [pc, #76]	; (8011314 <PrepareFrame+0x234>)
 80112c6:	4b0d      	ldr	r3, [pc, #52]	; (80112fc <PrepareFrame+0x21c>)
 80112c8:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80112cc:	b29b      	uxth	r3, r3
 80112ce:	461a      	mov	r2, r3
 80112d0:	6839      	ldr	r1, [r7, #0]
 80112d2:	f007 fdd6 	bl	8018e82 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 80112d6:	4b09      	ldr	r3, [pc, #36]	; (80112fc <PrepareFrame+0x21c>)
 80112d8:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80112dc:	b29b      	uxth	r3, r3
 80112de:	3301      	adds	r3, #1
 80112e0:	b29a      	uxth	r2, r3
 80112e2:	4b06      	ldr	r3, [pc, #24]	; (80112fc <PrepareFrame+0x21c>)
 80112e4:	801a      	strh	r2, [r3, #0]
            }
            break;
 80112e6:	e003      	b.n	80112f0 <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80112e8:	2302      	movs	r3, #2
 80112ea:	e003      	b.n	80112f4 <PrepareFrame+0x214>
            break;
 80112ec:	bf00      	nop
 80112ee:	e000      	b.n	80112f2 <PrepareFrame+0x212>
            break;
 80112f0:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 80112f2:	2300      	movs	r3, #0
}
 80112f4:	4618      	mov	r0, r3
 80112f6:	3720      	adds	r7, #32
 80112f8:	46bd      	mov	sp, r7
 80112fa:	bd80      	pop	{r7, pc}
 80112fc:	20000740 	.word	0x20000740
 8011300:	20000878 	.word	0x20000878
 8011304:	20000742 	.word	0x20000742
 8011308:	20000c5c 	.word	0x20000c5c
 801130c:	20000858 	.word	0x20000858
 8011310:	20000bdc 	.word	0x20000bdc
 8011314:	20000743 	.word	0x20000743

08011318 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8011318:	b580      	push	{r7, lr}
 801131a:	b08a      	sub	sp, #40	; 0x28
 801131c:	af00      	add	r7, sp, #0
 801131e:	4603      	mov	r3, r0
 8011320:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011322:	2303      	movs	r3, #3
 8011324:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8011328:	2300      	movs	r3, #0
 801132a:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 801132c:	79fb      	ldrb	r3, [r7, #7]
 801132e:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011330:	4b4b      	ldr	r3, [pc, #300]	; (8011460 <SendFrameOnChannel+0x148>)
 8011332:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011336:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011338:	4b49      	ldr	r3, [pc, #292]	; (8011460 <SendFrameOnChannel+0x148>)
 801133a:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 801133e:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8011340:	4b47      	ldr	r3, [pc, #284]	; (8011460 <SendFrameOnChannel+0x148>)
 8011342:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011346:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8011348:	4b45      	ldr	r3, [pc, #276]	; (8011460 <SendFrameOnChannel+0x148>)
 801134a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801134e:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8011350:	4b44      	ldr	r3, [pc, #272]	; (8011464 <SendFrameOnChannel+0x14c>)
 8011352:	881b      	ldrh	r3, [r3, #0]
 8011354:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8011356:	4b42      	ldr	r3, [pc, #264]	; (8011460 <SendFrameOnChannel+0x148>)
 8011358:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 801135c:	77bb      	strb	r3, [r7, #30]
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 801135e:	4b40      	ldr	r3, [pc, #256]	; (8011460 <SendFrameOnChannel+0x148>)
 8011360:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8011364:	f107 020f 	add.w	r2, r7, #15
 8011368:	f107 0110 	add.w	r1, r7, #16
 801136c:	4b3e      	ldr	r3, [pc, #248]	; (8011468 <SendFrameOnChannel+0x150>)
 801136e:	f004 f869 	bl	8015444 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011372:	4b3c      	ldr	r3, [pc, #240]	; (8011464 <SendFrameOnChannel+0x14c>)
 8011374:	2201      	movs	r2, #1
 8011376:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801137a:	4b39      	ldr	r3, [pc, #228]	; (8011460 <SendFrameOnChannel+0x148>)
 801137c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011380:	b2da      	uxtb	r2, r3
 8011382:	4b38      	ldr	r3, [pc, #224]	; (8011464 <SendFrameOnChannel+0x14c>)
 8011384:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
    MacCtx.McpsConfirm.TxPower = txPower;
 8011388:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801138c:	4b35      	ldr	r3, [pc, #212]	; (8011464 <SendFrameOnChannel+0x14c>)
 801138e:	f883 2443 	strb.w	r2, [r3, #1091]	; 0x443
    MacCtx.McpsConfirm.Channel = channel;
 8011392:	79fb      	ldrb	r3, [r7, #7]
 8011394:	4a33      	ldr	r2, [pc, #204]	; (8011464 <SendFrameOnChannel+0x14c>)
 8011396:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 801139a:	4b32      	ldr	r3, [pc, #200]	; (8011464 <SendFrameOnChannel+0x14c>)
 801139c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 80113a0:	4a30      	ldr	r2, [pc, #192]	; (8011464 <SendFrameOnChannel+0x14c>)
 80113a2:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80113a6:	4b2f      	ldr	r3, [pc, #188]	; (8011464 <SendFrameOnChannel+0x14c>)
 80113a8:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 80113ac:	4a2d      	ldr	r2, [pc, #180]	; (8011464 <SendFrameOnChannel+0x14c>)
 80113ae:	f8c2 3458 	str.w	r3, [r2, #1112]	; 0x458

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 80113b2:	f001 fff6 	bl	80133a2 <LoRaMacClassBIsBeaconModeActive>
 80113b6:	4603      	mov	r3, r0
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d00b      	beq.n	80113d4 <SendFrameOnChannel+0xbc>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 80113bc:	4b29      	ldr	r3, [pc, #164]	; (8011464 <SendFrameOnChannel+0x14c>)
 80113be:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 80113c2:	4618      	mov	r0, r3
 80113c4:	f002 f858 	bl	8013478 <LoRaMacClassBIsUplinkCollision>
 80113c8:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 80113ca:	6a3b      	ldr	r3, [r7, #32]
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d001      	beq.n	80113d4 <SendFrameOnChannel+0xbc>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 80113d0:	2310      	movs	r3, #16
 80113d2:	e040      	b.n	8011456 <SendFrameOnChannel+0x13e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80113d4:	4b22      	ldr	r3, [pc, #136]	; (8011460 <SendFrameOnChannel+0x148>)
 80113d6:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80113da:	2b01      	cmp	r3, #1
 80113dc:	d101      	bne.n	80113e2 <SendFrameOnChannel+0xca>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 80113de:	f002 f855 	bl	801348c <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 80113e2:	f001 ffef 	bl	80133c4 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 80113e6:	4b1e      	ldr	r3, [pc, #120]	; (8011460 <SendFrameOnChannel+0x148>)
 80113e8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80113ec:	b2db      	uxtb	r3, r3
 80113ee:	4a1d      	ldr	r2, [pc, #116]	; (8011464 <SendFrameOnChannel+0x14c>)
 80113f0:	f892 241b 	ldrb.w	r2, [r2, #1051]	; 0x41b
 80113f4:	4611      	mov	r1, r2
 80113f6:	4618      	mov	r0, r3
 80113f8:	f7ff fc2a 	bl	8010c50 <SecureFrame>
 80113fc:	4603      	mov	r3, r0
 80113fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 8011402:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011406:	2b00      	cmp	r3, #0
 8011408:	d002      	beq.n	8011410 <SendFrameOnChannel+0xf8>
    {
        return status;
 801140a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801140e:	e022      	b.n	8011456 <SendFrameOnChannel+0x13e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8011410:	4b14      	ldr	r3, [pc, #80]	; (8011464 <SendFrameOnChannel+0x14c>)
 8011412:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011416:	f043 0302 	orr.w	r3, r3, #2
 801141a:	4a12      	ldr	r2, [pc, #72]	; (8011464 <SendFrameOnChannel+0x14c>)
 801141c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.ChannelsNbTransCounter++;
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.ChannelsNbTransCounter++;
 8011420:	4b10      	ldr	r3, [pc, #64]	; (8011464 <SendFrameOnChannel+0x14c>)
 8011422:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8011426:	3301      	adds	r3, #1
 8011428:	b2da      	uxtb	r2, r3
 801142a:	4b0e      	ldr	r3, [pc, #56]	; (8011464 <SendFrameOnChannel+0x14c>)
 801142c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 8011430:	4b0c      	ldr	r3, [pc, #48]	; (8011464 <SendFrameOnChannel+0x14c>)
 8011432:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8011436:	4b0b      	ldr	r3, [pc, #44]	; (8011464 <SendFrameOnChannel+0x14c>)
 8011438:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
    MacCtx.ResponseTimeoutStartTime = 0;
 801143c:	4b09      	ldr	r3, [pc, #36]	; (8011464 <SendFrameOnChannel+0x14c>)
 801143e:	2200      	movs	r2, #0
 8011440:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8011444:	4b09      	ldr	r3, [pc, #36]	; (801146c <SendFrameOnChannel+0x154>)
 8011446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011448:	4a06      	ldr	r2, [pc, #24]	; (8011464 <SendFrameOnChannel+0x14c>)
 801144a:	8812      	ldrh	r2, [r2, #0]
 801144c:	b2d2      	uxtb	r2, r2
 801144e:	4611      	mov	r1, r2
 8011450:	4807      	ldr	r0, [pc, #28]	; (8011470 <SendFrameOnChannel+0x158>)
 8011452:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8011454:	2300      	movs	r3, #0
}
 8011456:	4618      	mov	r0, r3
 8011458:	3728      	adds	r7, #40	; 0x28
 801145a:	46bd      	mov	sp, r7
 801145c:	bd80      	pop	{r7, pc}
 801145e:	bf00      	nop
 8011460:	20000c5c 	.word	0x20000c5c
 8011464:	20000740 	.word	0x20000740
 8011468:	20000b5c 	.word	0x20000b5c
 801146c:	0801ea54 	.word	0x0801ea54
 8011470:	20000742 	.word	0x20000742

08011474 <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8011474:	b580      	push	{r7, lr}
 8011476:	b082      	sub	sp, #8
 8011478:	af00      	add	r7, sp, #0
 801147a:	4603      	mov	r3, r0
 801147c:	6039      	str	r1, [r7, #0]
 801147e:	80fb      	strh	r3, [r7, #6]
 8011480:	4613      	mov	r3, r2
 8011482:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8011484:	4b09      	ldr	r3, [pc, #36]	; (80114ac <SetTxContinuousWave+0x38>)
 8011486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011488:	f997 1005 	ldrsb.w	r1, [r7, #5]
 801148c:	88fa      	ldrh	r2, [r7, #6]
 801148e:	6838      	ldr	r0, [r7, #0]
 8011490:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8011492:	4b07      	ldr	r3, [pc, #28]	; (80114b0 <SetTxContinuousWave+0x3c>)
 8011494:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011498:	f043 0302 	orr.w	r3, r3, #2
 801149c:	4a04      	ldr	r2, [pc, #16]	; (80114b0 <SetTxContinuousWave+0x3c>)
 801149e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 80114a2:	2300      	movs	r3, #0
}
 80114a4:	4618      	mov	r0, r3
 80114a6:	3708      	adds	r7, #8
 80114a8:	46bd      	mov	sp, r7
 80114aa:	bd80      	pop	{r7, pc}
 80114ac:	0801ea54 	.word	0x0801ea54
 80114b0:	20000740 	.word	0x20000740

080114b4 <RestoreNvmData>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 80114b4:	b580      	push	{r7, lr}
 80114b6:	b082      	sub	sp, #8
 80114b8:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    uint32_t crc = 0;
 80114ba:	2300      	movs	r3, #0
 80114bc:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 80114be:	4b49      	ldr	r3, [pc, #292]	; (80115e4 <RestoreNvmData+0x130>)
 80114c0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80114c4:	2b01      	cmp	r3, #1
 80114c6:	d001      	beq.n	80114cc <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 80114c8:	2301      	movs	r3, #1
 80114ca:	e087      	b.n	80115dc <RestoreNvmData+0x128>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 80114cc:	2124      	movs	r1, #36	; 0x24
 80114ce:	4846      	ldr	r0, [pc, #280]	; (80115e8 <RestoreNvmData+0x134>)
 80114d0:	f007 fd2c 	bl	8018f2c <Crc32>
 80114d4:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 80114d6:	4b44      	ldr	r3, [pc, #272]	; (80115e8 <RestoreNvmData+0x134>)
 80114d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114da:	687a      	ldr	r2, [r7, #4]
 80114dc:	429a      	cmp	r2, r3
 80114de:	d001      	beq.n	80114e4 <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80114e0:	2317      	movs	r3, #23
 80114e2:	e07b      	b.n	80115dc <RestoreNvmData+0x128>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 80114e4:	211c      	movs	r1, #28
 80114e6:	4841      	ldr	r0, [pc, #260]	; (80115ec <RestoreNvmData+0x138>)
 80114e8:	f007 fd20 	bl	8018f2c <Crc32>
 80114ec:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 80114ee:	4b3e      	ldr	r3, [pc, #248]	; (80115e8 <RestoreNvmData+0x134>)
 80114f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80114f2:	687a      	ldr	r2, [r7, #4]
 80114f4:	429a      	cmp	r2, r3
 80114f6:	d001      	beq.n	80114fc <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80114f8:	2317      	movs	r3, #23
 80114fa:	e06f      	b.n	80115dc <RestoreNvmData+0x128>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 80114fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011500:	483b      	ldr	r0, [pc, #236]	; (80115f0 <RestoreNvmData+0x13c>)
 8011502:	f007 fd13 	bl	8018f2c <Crc32>
 8011506:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 8011508:	4b37      	ldr	r3, [pc, #220]	; (80115e8 <RestoreNvmData+0x134>)
 801150a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 801150e:	687a      	ldr	r2, [r7, #4]
 8011510:	429a      	cmp	r2, r3
 8011512:	d001      	beq.n	8011518 <RestoreNvmData+0x64>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8011514:	2317      	movs	r3, #23
 8011516:	e061      	b.n	80115dc <RestoreNvmData+0x128>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 8011518:	21d4      	movs	r1, #212	; 0xd4
 801151a:	4836      	ldr	r0, [pc, #216]	; (80115f4 <RestoreNvmData+0x140>)
 801151c:	f007 fd06 	bl	8018f2c <Crc32>
 8011520:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 8011522:	4b31      	ldr	r3, [pc, #196]	; (80115e8 <RestoreNvmData+0x134>)
 8011524:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8011528:	687a      	ldr	r2, [r7, #4]
 801152a:	429a      	cmp	r2, r3
 801152c:	d001      	beq.n	8011532 <RestoreNvmData+0x7e>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 801152e:	2317      	movs	r3, #23
 8011530:	e054      	b.n	80115dc <RestoreNvmData+0x128>
    }

    // RegionGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 8011532:	2110      	movs	r1, #16
 8011534:	4830      	ldr	r0, [pc, #192]	; (80115f8 <RestoreNvmData+0x144>)
 8011536:	f007 fcf9 	bl	8018f2c <Crc32>
 801153a:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 801153c:	4b2a      	ldr	r3, [pc, #168]	; (80115e8 <RestoreNvmData+0x134>)
 801153e:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 8011542:	687a      	ldr	r2, [r7, #4]
 8011544:	429a      	cmp	r2, r3
 8011546:	d001      	beq.n	801154c <RestoreNvmData+0x98>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8011548:	2317      	movs	r3, #23
 801154a:	e047      	b.n	80115dc <RestoreNvmData+0x128>
    }

    // RegionGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup2), sizeof( NvmBackup.RegionGroup2 ) -
 801154c:	f44f 715e 	mov.w	r1, #888	; 0x378
 8011550:	482a      	ldr	r0, [pc, #168]	; (80115fc <RestoreNvmData+0x148>)
 8011552:	f007 fceb 	bl	8018f2c <Crc32>
 8011556:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup2.Crc32 ) );
    if( crc != NvmBackup.RegionGroup2.Crc32 )
 8011558:	4b23      	ldr	r3, [pc, #140]	; (80115e8 <RestoreNvmData+0x134>)
 801155a:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	; 0x5b0
 801155e:	687a      	ldr	r2, [r7, #4]
 8011560:	429a      	cmp	r2, r3
 8011562:	d001      	beq.n	8011568 <RestoreNvmData+0xb4>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8011564:	2317      	movs	r3, #23
 8011566:	e039      	b.n	80115dc <RestoreNvmData+0x128>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 8011568:	2114      	movs	r1, #20
 801156a:	4825      	ldr	r0, [pc, #148]	; (8011600 <RestoreNvmData+0x14c>)
 801156c:	f007 fcde 	bl	8018f2c <Crc32>
 8011570:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 8011572:	4b1d      	ldr	r3, [pc, #116]	; (80115e8 <RestoreNvmData+0x134>)
 8011574:	f8d3 35c8 	ldr.w	r3, [r3, #1480]	; 0x5c8
 8011578:	687a      	ldr	r2, [r7, #4]
 801157a:	429a      	cmp	r2, r3
 801157c:	d001      	beq.n	8011582 <RestoreNvmData+0xce>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 801157e:	2317      	movs	r3, #23
 8011580:	e02c      	b.n	80115dc <RestoreNvmData+0x128>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 8011582:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8011586:	4918      	ldr	r1, [pc, #96]	; (80115e8 <RestoreNvmData+0x134>)
 8011588:	481e      	ldr	r0, [pc, #120]	; (8011604 <RestoreNvmData+0x150>)
 801158a:	f007 fc7a 	bl	8018e82 <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 801158e:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8011592:	2100      	movs	r1, #0
 8011594:	4814      	ldr	r0, [pc, #80]	; (80115e8 <RestoreNvmData+0x134>)
 8011596:	f007 fcaf 	bl	8018ef8 <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 801159a:	4b12      	ldr	r3, [pc, #72]	; (80115e4 <RestoreNvmData+0x130>)
 801159c:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 80115a0:	4b10      	ldr	r3, [pc, #64]	; (80115e4 <RestoreNvmData+0x130>)
 80115a2:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 80115a6:	4b17      	ldr	r3, [pc, #92]	; (8011604 <RestoreNvmData+0x150>)
 80115a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80115aa:	4a0e      	ldr	r2, [pc, #56]	; (80115e4 <RestoreNvmData+0x130>)
 80115ac:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80115b0:	4b14      	ldr	r3, [pc, #80]	; (8011604 <RestoreNvmData+0x150>)
 80115b2:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 80115b6:	4b0b      	ldr	r3, [pc, #44]	; (80115e4 <RestoreNvmData+0x130>)
 80115b8:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80115bc:	4b09      	ldr	r3, [pc, #36]	; (80115e4 <RestoreNvmData+0x130>)
 80115be:	2201      	movs	r2, #1
 80115c0:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80115c4:	4b07      	ldr	r3, [pc, #28]	; (80115e4 <RestoreNvmData+0x130>)
 80115c6:	2202      	movs	r2, #2
 80115c8:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

    // The public/private network flag may change upon reloading MacGroup2
    // from NVM and we thus need to synchronize the radio. The same function
    // is invoked in LoRaMacInitialization.
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80115cc:	4b0e      	ldr	r3, [pc, #56]	; (8011608 <RestoreNvmData+0x154>)
 80115ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80115d0:	4a0c      	ldr	r2, [pc, #48]	; (8011604 <RestoreNvmData+0x150>)
 80115d2:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 80115d6:	4610      	mov	r0, r2
 80115d8:	4798      	blx	r3
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

    return LORAMAC_STATUS_OK;
 80115da:	2300      	movs	r3, #0
}
 80115dc:	4618      	mov	r0, r3
 80115de:	3708      	adds	r7, #8
 80115e0:	46bd      	mov	sp, r7
 80115e2:	bd80      	pop	{r7, pc}
 80115e4:	20000740 	.word	0x20000740
 80115e8:	20001228 	.word	0x20001228
 80115ec:	20001250 	.word	0x20001250
 80115f0:	20001270 	.word	0x20001270
 80115f4:	20001374 	.word	0x20001374
 80115f8:	2000144c 	.word	0x2000144c
 80115fc:	20001460 	.word	0x20001460
 8011600:	200017dc 	.word	0x200017dc
 8011604:	20000c5c 	.word	0x20000c5c
 8011608:	0801ea54 	.word	0x0801ea54

0801160c <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 801160c:	b480      	push	{r7}
 801160e:	b083      	sub	sp, #12
 8011610:	af00      	add	r7, sp, #0
 8011612:	6078      	str	r0, [r7, #4]
 8011614:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	2b00      	cmp	r3, #0
 801161a:	d002      	beq.n	8011622 <DetermineFrameType+0x16>
 801161c:	683b      	ldr	r3, [r7, #0]
 801161e:	2b00      	cmp	r3, #0
 8011620:	d101      	bne.n	8011626 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011622:	2303      	movs	r3, #3
 8011624:	e03b      	b.n	801169e <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	7b1b      	ldrb	r3, [r3, #12]
 801162a:	f003 030f 	and.w	r3, r3, #15
 801162e:	b2db      	uxtb	r3, r3
 8011630:	2b00      	cmp	r3, #0
 8011632:	d008      	beq.n	8011646 <DetermineFrameType+0x3a>
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	f893 3020 	ldrb.w	r3, [r3, #32]
 801163a:	2b00      	cmp	r3, #0
 801163c:	d003      	beq.n	8011646 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 801163e:	683b      	ldr	r3, [r7, #0]
 8011640:	2200      	movs	r2, #0
 8011642:	701a      	strb	r2, [r3, #0]
 8011644:	e02a      	b.n	801169c <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801164c:	2b00      	cmp	r3, #0
 801164e:	d103      	bne.n	8011658 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8011650:	683b      	ldr	r3, [r7, #0]
 8011652:	2201      	movs	r2, #1
 8011654:	701a      	strb	r2, [r3, #0]
 8011656:	e021      	b.n	801169c <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	7b1b      	ldrb	r3, [r3, #12]
 801165c:	f003 030f 	and.w	r3, r3, #15
 8011660:	b2db      	uxtb	r3, r3
 8011662:	2b00      	cmp	r3, #0
 8011664:	d108      	bne.n	8011678 <DetermineFrameType+0x6c>
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	f893 3020 	ldrb.w	r3, [r3, #32]
 801166c:	2b00      	cmp	r3, #0
 801166e:	d103      	bne.n	8011678 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8011670:	683b      	ldr	r3, [r7, #0]
 8011672:	2202      	movs	r2, #2
 8011674:	701a      	strb	r2, [r3, #0]
 8011676:	e011      	b.n	801169c <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	7b1b      	ldrb	r3, [r3, #12]
 801167c:	f003 030f 	and.w	r3, r3, #15
 8011680:	b2db      	uxtb	r3, r3
 8011682:	2b00      	cmp	r3, #0
 8011684:	d108      	bne.n	8011698 <DetermineFrameType+0x8c>
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	f893 3020 	ldrb.w	r3, [r3, #32]
 801168c:	2b00      	cmp	r3, #0
 801168e:	d003      	beq.n	8011698 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8011690:	683b      	ldr	r3, [r7, #0]
 8011692:	2203      	movs	r2, #3
 8011694:	701a      	strb	r2, [r3, #0]
 8011696:	e001      	b.n	801169c <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8011698:	2318      	movs	r3, #24
 801169a:	e000      	b.n	801169e <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 801169c:	2300      	movs	r3, #0
}
 801169e:	4618      	mov	r0, r3
 80116a0:	370c      	adds	r7, #12
 80116a2:	46bd      	mov	sp, r7
 80116a4:	bc80      	pop	{r7}
 80116a6:	4770      	bx	lr

080116a8 <CheckRetrans>:
    }
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
 80116a8:	b480      	push	{r7}
 80116aa:	b083      	sub	sp, #12
 80116ac:	af00      	add	r7, sp, #0
 80116ae:	4603      	mov	r3, r0
 80116b0:	460a      	mov	r2, r1
 80116b2:	71fb      	strb	r3, [r7, #7]
 80116b4:	4613      	mov	r3, r2
 80116b6:	71bb      	strb	r3, [r7, #6]
    if( counter >= limit )
 80116b8:	79fa      	ldrb	r2, [r7, #7]
 80116ba:	79bb      	ldrb	r3, [r7, #6]
 80116bc:	429a      	cmp	r2, r3
 80116be:	d301      	bcc.n	80116c4 <CheckRetrans+0x1c>
    {
        return true;
 80116c0:	2301      	movs	r3, #1
 80116c2:	e000      	b.n	80116c6 <CheckRetrans+0x1e>
    }
    return false;
 80116c4:	2300      	movs	r3, #0
}
 80116c6:	4618      	mov	r0, r3
 80116c8:	370c      	adds	r7, #12
 80116ca:	46bd      	mov	sp, r7
 80116cc:	bc80      	pop	{r7}
 80116ce:	4770      	bx	lr

080116d0 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 80116d0:	b580      	push	{r7, lr}
 80116d2:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 80116d4:	4b12      	ldr	r3, [pc, #72]	; (8011720 <CheckRetransUnconfirmedUplink+0x50>)
 80116d6:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80116da:	4a12      	ldr	r2, [pc, #72]	; (8011724 <CheckRetransUnconfirmedUplink+0x54>)
 80116dc:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
 80116e0:	4611      	mov	r1, r2
 80116e2:	4618      	mov	r0, r3
 80116e4:	f7ff ffe0 	bl	80116a8 <CheckRetrans>
 80116e8:	4603      	mov	r3, r0
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d001      	beq.n	80116f2 <CheckRetransUnconfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 80116ee:	2301      	movs	r3, #1
 80116f0:	e014      	b.n	801171c <CheckRetransUnconfirmedUplink+0x4c>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80116f2:	4b0b      	ldr	r3, [pc, #44]	; (8011720 <CheckRetransUnconfirmedUplink+0x50>)
 80116f4:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 80116f8:	f003 0302 	and.w	r3, r3, #2
 80116fc:	b2db      	uxtb	r3, r3
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d00b      	beq.n	801171a <CheckRetransUnconfirmedUplink+0x4a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8011702:	4b07      	ldr	r3, [pc, #28]	; (8011720 <CheckRetransUnconfirmedUplink+0x50>)
 8011704:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8011708:	2b00      	cmp	r3, #0
 801170a:	d004      	beq.n	8011716 <CheckRetransUnconfirmedUplink+0x46>
            ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 801170c:	4b04      	ldr	r3, [pc, #16]	; (8011720 <CheckRetransUnconfirmedUplink+0x50>)
 801170e:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8011712:	2b01      	cmp	r3, #1
 8011714:	d101      	bne.n	801171a <CheckRetransUnconfirmedUplink+0x4a>
        {
            return true;
 8011716:	2301      	movs	r3, #1
 8011718:	e000      	b.n	801171c <CheckRetransUnconfirmedUplink+0x4c>
        }
    }
    return false;
 801171a:	2300      	movs	r3, #0
}
 801171c:	4618      	mov	r0, r3
 801171e:	bd80      	pop	{r7, pc}
 8011720:	20000740 	.word	0x20000740
 8011724:	20000c5c 	.word	0x20000c5c

08011728 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8011728:	b580      	push	{r7, lr}
 801172a:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 801172c:	4b10      	ldr	r3, [pc, #64]	; (8011770 <CheckRetransConfirmedUplink+0x48>)
 801172e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8011732:	4a10      	ldr	r2, [pc, #64]	; (8011774 <CheckRetransConfirmedUplink+0x4c>)
 8011734:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
 8011738:	4611      	mov	r1, r2
 801173a:	4618      	mov	r0, r3
 801173c:	f7ff ffb4 	bl	80116a8 <CheckRetrans>
 8011740:	4603      	mov	r3, r0
 8011742:	2b00      	cmp	r3, #0
 8011744:	d001      	beq.n	801174a <CheckRetransConfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 8011746:	2301      	movs	r3, #1
 8011748:	e00f      	b.n	801176a <CheckRetransConfirmedUplink+0x42>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 801174a:	4b09      	ldr	r3, [pc, #36]	; (8011770 <CheckRetransConfirmedUplink+0x48>)
 801174c:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8011750:	f003 0302 	and.w	r3, r3, #2
 8011754:	b2db      	uxtb	r3, r3
 8011756:	2b00      	cmp	r3, #0
 8011758:	d006      	beq.n	8011768 <CheckRetransConfirmedUplink+0x40>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 801175a:	4b05      	ldr	r3, [pc, #20]	; (8011770 <CheckRetransConfirmedUplink+0x48>)
 801175c:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 8011760:	2b00      	cmp	r3, #0
 8011762:	d001      	beq.n	8011768 <CheckRetransConfirmedUplink+0x40>
        {
            return true;
 8011764:	2301      	movs	r3, #1
 8011766:	e000      	b.n	801176a <CheckRetransConfirmedUplink+0x42>
        }
    }
    return false;
 8011768:	2300      	movs	r3, #0
}
 801176a:	4618      	mov	r0, r3
 801176c:	bd80      	pop	{r7, pc}
 801176e:	bf00      	nop
 8011770:	20000740 	.word	0x20000740
 8011774:	20000c5c 	.word	0x20000c5c

08011778 <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
 8011778:	b480      	push	{r7}
 801177a:	b083      	sub	sp, #12
 801177c:	af00      	add	r7, sp, #0
 801177e:	6078      	str	r0, [r7, #4]
    if( counter < ADR_ACK_COUNTER_MAX )
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011786:	d002      	beq.n	801178e <IncreaseAdrAckCounter+0x16>
    {
        counter++;
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	3301      	adds	r3, #1
 801178c:	607b      	str	r3, [r7, #4]
    }
    return counter;
 801178e:	687b      	ldr	r3, [r7, #4]
}
 8011790:	4618      	mov	r0, r3
 8011792:	370c      	adds	r7, #12
 8011794:	46bd      	mov	sp, r7
 8011796:	bc80      	pop	{r7}
 8011798:	4770      	bx	lr
	...

0801179c <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 801179c:	b580      	push	{r7, lr}
 801179e:	af00      	add	r7, sp, #0
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80117a0:	4b1a      	ldr	r3, [pc, #104]	; (801180c <StopRetransmission+0x70>)
 80117a2:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 80117a6:	f003 0302 	and.w	r3, r3, #2
 80117aa:	b2db      	uxtb	r3, r3
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d009      	beq.n	80117c4 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80117b0:	4b16      	ldr	r3, [pc, #88]	; (801180c <StopRetransmission+0x70>)
 80117b2:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d011      	beq.n	80117de <StopRetransmission+0x42>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 80117ba:	4b14      	ldr	r3, [pc, #80]	; (801180c <StopRetransmission+0x70>)
 80117bc:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80117c0:	2b01      	cmp	r3, #1
 80117c2:	d00c      	beq.n	80117de <StopRetransmission+0x42>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 80117c4:	4b12      	ldr	r3, [pc, #72]	; (8011810 <StopRetransmission+0x74>)
 80117c6:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d007      	beq.n	80117de <StopRetransmission+0x42>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 80117ce:	4b10      	ldr	r3, [pc, #64]	; (8011810 <StopRetransmission+0x74>)
 80117d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117d2:	4618      	mov	r0, r3
 80117d4:	f7ff ffd0 	bl	8011778 <IncreaseAdrAckCounter>
 80117d8:	4603      	mov	r3, r0
 80117da:	4a0d      	ldr	r2, [pc, #52]	; (8011810 <StopRetransmission+0x74>)
 80117dc:	6293      	str	r3, [r2, #40]	; 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 80117de:	4b0b      	ldr	r3, [pc, #44]	; (801180c <StopRetransmission+0x70>)
 80117e0:	2200      	movs	r2, #0
 80117e2:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    MacCtx.NodeAckRequested = false;
 80117e6:	4b09      	ldr	r3, [pc, #36]	; (801180c <StopRetransmission+0x70>)
 80117e8:	2200      	movs	r2, #0
 80117ea:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 80117ee:	4b07      	ldr	r3, [pc, #28]	; (801180c <StopRetransmission+0x70>)
 80117f0:	2200      	movs	r2, #0
 80117f2:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80117f6:	4b05      	ldr	r3, [pc, #20]	; (801180c <StopRetransmission+0x70>)
 80117f8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80117fc:	f023 0302 	bic.w	r3, r3, #2
 8011800:	4a02      	ldr	r2, [pc, #8]	; (801180c <StopRetransmission+0x70>)
 8011802:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 8011806:	2301      	movs	r3, #1
}
 8011808:	4618      	mov	r0, r3
 801180a:	bd80      	pop	{r7, pc}
 801180c:	20000740 	.word	0x20000740
 8011810:	20000c5c 	.word	0x20000c5c

08011814 <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 8011814:	b580      	push	{r7, lr}
 8011816:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8011818:	4b08      	ldr	r3, [pc, #32]	; (801183c <OnMacProcessNotify+0x28>)
 801181a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801181e:	2b00      	cmp	r3, #0
 8011820:	d00a      	beq.n	8011838 <OnMacProcessNotify+0x24>
 8011822:	4b06      	ldr	r3, [pc, #24]	; (801183c <OnMacProcessNotify+0x28>)
 8011824:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011828:	695b      	ldr	r3, [r3, #20]
 801182a:	2b00      	cmp	r3, #0
 801182c:	d004      	beq.n	8011838 <OnMacProcessNotify+0x24>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 801182e:	4b03      	ldr	r3, [pc, #12]	; (801183c <OnMacProcessNotify+0x28>)
 8011830:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011834:	695b      	ldr	r3, [r3, #20]
 8011836:	4798      	blx	r3
    }
}
 8011838:	bf00      	nop
 801183a:	bd80      	pop	{r7, pc}
 801183c:	20000740 	.word	0x20000740

08011840 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8011840:	b580      	push	{r7, lr}
 8011842:	b082      	sub	sp, #8
 8011844:	af00      	add	r7, sp, #0
 8011846:	4603      	mov	r3, r0
 8011848:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 801184a:	4b0b      	ldr	r3, [pc, #44]	; (8011878 <CallNvmDataChangeCallback+0x38>)
 801184c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011850:	2b00      	cmp	r3, #0
 8011852:	d00c      	beq.n	801186e <CallNvmDataChangeCallback+0x2e>
 8011854:	4b08      	ldr	r3, [pc, #32]	; (8011878 <CallNvmDataChangeCallback+0x38>)
 8011856:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801185a:	691b      	ldr	r3, [r3, #16]
 801185c:	2b00      	cmp	r3, #0
 801185e:	d006      	beq.n	801186e <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8011860:	4b05      	ldr	r3, [pc, #20]	; (8011878 <CallNvmDataChangeCallback+0x38>)
 8011862:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011866:	691b      	ldr	r3, [r3, #16]
 8011868:	88fa      	ldrh	r2, [r7, #6]
 801186a:	4610      	mov	r0, r2
 801186c:	4798      	blx	r3
    }
}
 801186e:	bf00      	nop
 8011870:	3708      	adds	r7, #8
 8011872:	46bd      	mov	sp, r7
 8011874:	bd80      	pop	{r7, pc}
 8011876:	bf00      	nop
 8011878:	20000740 	.word	0x20000740

0801187c <IsRequestPending>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 801187c:	b480      	push	{r7}
 801187e:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8011880:	4b0b      	ldr	r3, [pc, #44]	; (80118b0 <IsRequestPending+0x34>)
 8011882:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8011886:	f003 0304 	and.w	r3, r3, #4
 801188a:	b2db      	uxtb	r3, r3
 801188c:	2b00      	cmp	r3, #0
 801188e:	d107      	bne.n	80118a0 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8011890:	4b07      	ldr	r3, [pc, #28]	; (80118b0 <IsRequestPending+0x34>)
 8011892:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8011896:	f003 0301 	and.w	r3, r3, #1
 801189a:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 801189c:	2b00      	cmp	r3, #0
 801189e:	d001      	beq.n	80118a4 <IsRequestPending+0x28>
    {
        return 1;
 80118a0:	2301      	movs	r3, #1
 80118a2:	e000      	b.n	80118a6 <IsRequestPending+0x2a>
    }
    return 0;
 80118a4:	2300      	movs	r3, #0
}
 80118a6:	4618      	mov	r0, r3
 80118a8:	46bd      	mov	sp, r7
 80118aa:	bc80      	pop	{r7}
 80118ac:	4770      	bx	lr
 80118ae:	bf00      	nop
 80118b0:	20000740 	.word	0x20000740

080118b4 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 80118b4:	b590      	push	{r4, r7, lr}
 80118b6:	b091      	sub	sp, #68	; 0x44
 80118b8:	af02      	add	r7, sp, #8
 80118ba:	6178      	str	r0, [r7, #20]
 80118bc:	6139      	str	r1, [r7, #16]
 80118be:	4613      	mov	r3, r2
 80118c0:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 80118c2:	697b      	ldr	r3, [r7, #20]
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d002      	beq.n	80118ce <LoRaMacInitialization+0x1a>
 80118c8:	693b      	ldr	r3, [r7, #16]
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d101      	bne.n	80118d2 <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80118ce:	2303      	movs	r3, #3
 80118d0:	e27a      	b.n	8011dc8 <LoRaMacInitialization+0x514>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 80118d2:	697b      	ldr	r3, [r7, #20]
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d00b      	beq.n	80118f2 <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 80118da:	697b      	ldr	r3, [r7, #20]
 80118dc:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d007      	beq.n	80118f2 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 80118e2:	697b      	ldr	r3, [r7, #20]
 80118e4:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d003      	beq.n	80118f2 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 80118ea:	697b      	ldr	r3, [r7, #20]
 80118ec:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d101      	bne.n	80118f6 <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80118f2:	2303      	movs	r3, #3
 80118f4:	e268      	b.n	8011dc8 <LoRaMacInitialization+0x514>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 80118f6:	7bfb      	ldrb	r3, [r7, #15]
 80118f8:	4618      	mov	r0, r3
 80118fa:	f003 fcac 	bl	8015256 <RegionIsActive>
 80118fe:	4603      	mov	r3, r0
 8011900:	f083 0301 	eor.w	r3, r3, #1
 8011904:	b2db      	uxtb	r3, r3
 8011906:	2b00      	cmp	r3, #0
 8011908:	d001      	beq.n	801190e <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 801190a:	2309      	movs	r3, #9
 801190c:	e25c      	b.n	8011dc8 <LoRaMacInitialization+0x514>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 801190e:	6978      	ldr	r0, [r7, #20]
 8011910:	f002 f932 	bl	8013b78 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8011914:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8011918:	2100      	movs	r1, #0
 801191a:	48c7      	ldr	r0, [pc, #796]	; (8011c38 <LoRaMacInitialization+0x384>)
 801191c:	f007 faec 	bl	8018ef8 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8011920:	f240 521c 	movw	r2, #1308	; 0x51c
 8011924:	2100      	movs	r1, #0
 8011926:	48c5      	ldr	r0, [pc, #788]	; (8011c3c <LoRaMacInitialization+0x388>)
 8011928:	f007 fae6 	bl	8018ef8 <memset1>
    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 801192c:	4ac2      	ldr	r2, [pc, #776]	; (8011c38 <LoRaMacInitialization+0x384>)
 801192e:	7bfb      	ldrb	r3, [r7, #15]
 8011930:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8011934:	4bc0      	ldr	r3, [pc, #768]	; (8011c38 <LoRaMacInitialization+0x384>)
 8011936:	2200      	movs	r2, #0
 8011938:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 801193c:	4bbe      	ldr	r3, [pc, #760]	; (8011c38 <LoRaMacInitialization+0x384>)
 801193e:	2200      	movs	r2, #0
 8011940:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8011944:	4bbc      	ldr	r3, [pc, #752]	; (8011c38 <LoRaMacInitialization+0x384>)
 8011946:	4abe      	ldr	r2, [pc, #760]	; (8011c40 <LoRaMacInitialization+0x38c>)
 8011948:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 801194c:	2300      	movs	r3, #0
 801194e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8011952:	4bbc      	ldr	r3, [pc, #752]	; (8011c44 <LoRaMacInitialization+0x390>)
 8011954:	61fb      	str	r3, [r7, #28]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8011956:	4bbc      	ldr	r3, [pc, #752]	; (8011c48 <LoRaMacInitialization+0x394>)
 8011958:	623b      	str	r3, [r7, #32]
    params.Bands = &RegionBands;
 801195a:	4bbc      	ldr	r3, [pc, #752]	; (8011c4c <LoRaMacInitialization+0x398>)
 801195c:	627b      	str	r3, [r7, #36]	; 0x24
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 801195e:	4bb6      	ldr	r3, [pc, #728]	; (8011c38 <LoRaMacInitialization+0x384>)
 8011960:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011964:	f107 021c 	add.w	r2, r7, #28
 8011968:	4611      	mov	r1, r2
 801196a:	4618      	mov	r0, r3
 801196c:	f003 fcbf 	bl	80152ee <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8011970:	230f      	movs	r3, #15
 8011972:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011976:	4bb0      	ldr	r3, [pc, #704]	; (8011c38 <LoRaMacInitialization+0x384>)
 8011978:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801197c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011980:	4611      	mov	r1, r2
 8011982:	4618      	mov	r0, r3
 8011984:	f003 fc7c 	bl	8015280 <RegionGetPhyParam>
 8011988:	4603      	mov	r3, r0
 801198a:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 801198c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801198e:	2b00      	cmp	r3, #0
 8011990:	bf14      	ite	ne
 8011992:	2301      	movne	r3, #1
 8011994:	2300      	moveq	r3, #0
 8011996:	b2da      	uxtb	r2, r3
 8011998:	4ba7      	ldr	r3, [pc, #668]	; (8011c38 <LoRaMacInitialization+0x384>)
 801199a:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 801199e:	230a      	movs	r3, #10
 80119a0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80119a4:	4ba4      	ldr	r3, [pc, #656]	; (8011c38 <LoRaMacInitialization+0x384>)
 80119a6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80119aa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80119ae:	4611      	mov	r1, r2
 80119b0:	4618      	mov	r0, r3
 80119b2:	f003 fc65 	bl	8015280 <RegionGetPhyParam>
 80119b6:	4603      	mov	r3, r0
 80119b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 80119ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119bc:	b25a      	sxtb	r2, r3
 80119be:	4b9e      	ldr	r3, [pc, #632]	; (8011c38 <LoRaMacInitialization+0x384>)
 80119c0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 80119c4:	2306      	movs	r3, #6
 80119c6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80119ca:	4b9b      	ldr	r3, [pc, #620]	; (8011c38 <LoRaMacInitialization+0x384>)
 80119cc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80119d0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80119d4:	4611      	mov	r1, r2
 80119d6:	4618      	mov	r0, r3
 80119d8:	f003 fc52 	bl	8015280 <RegionGetPhyParam>
 80119dc:	4603      	mov	r3, r0
 80119de:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 80119e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119e2:	b25a      	sxtb	r2, r3
 80119e4:	4b94      	ldr	r3, [pc, #592]	; (8011c38 <LoRaMacInitialization+0x384>)
 80119e6:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 80119ea:	2310      	movs	r3, #16
 80119ec:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80119f0:	4b91      	ldr	r3, [pc, #580]	; (8011c38 <LoRaMacInitialization+0x384>)
 80119f2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80119f6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80119fa:	4611      	mov	r1, r2
 80119fc:	4618      	mov	r0, r3
 80119fe:	f003 fc3f 	bl	8015280 <RegionGetPhyParam>
 8011a02:	4603      	mov	r3, r0
 8011a04:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8011a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a08:	4a8b      	ldr	r2, [pc, #556]	; (8011c38 <LoRaMacInitialization+0x384>)
 8011a0a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8011a0e:	2311      	movs	r3, #17
 8011a10:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011a14:	4b88      	ldr	r3, [pc, #544]	; (8011c38 <LoRaMacInitialization+0x384>)
 8011a16:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011a1a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011a1e:	4611      	mov	r1, r2
 8011a20:	4618      	mov	r0, r3
 8011a22:	f003 fc2d 	bl	8015280 <RegionGetPhyParam>
 8011a26:	4603      	mov	r3, r0
 8011a28:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8011a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a2c:	4a82      	ldr	r2, [pc, #520]	; (8011c38 <LoRaMacInitialization+0x384>)
 8011a2e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8011a32:	2312      	movs	r3, #18
 8011a34:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011a38:	4b7f      	ldr	r3, [pc, #508]	; (8011c38 <LoRaMacInitialization+0x384>)
 8011a3a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011a3e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011a42:	4611      	mov	r1, r2
 8011a44:	4618      	mov	r0, r3
 8011a46:	f003 fc1b 	bl	8015280 <RegionGetPhyParam>
 8011a4a:	4603      	mov	r3, r0
 8011a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8011a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a50:	4a79      	ldr	r2, [pc, #484]	; (8011c38 <LoRaMacInitialization+0x384>)
 8011a52:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8011a56:	2313      	movs	r3, #19
 8011a58:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011a5c:	4b76      	ldr	r3, [pc, #472]	; (8011c38 <LoRaMacInitialization+0x384>)
 8011a5e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011a62:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011a66:	4611      	mov	r1, r2
 8011a68:	4618      	mov	r0, r3
 8011a6a:	f003 fc09 	bl	8015280 <RegionGetPhyParam>
 8011a6e:	4603      	mov	r3, r0
 8011a70:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8011a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a74:	4a70      	ldr	r2, [pc, #448]	; (8011c38 <LoRaMacInitialization+0x384>)
 8011a76:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8011a7a:	2314      	movs	r3, #20
 8011a7c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011a80:	4b6d      	ldr	r3, [pc, #436]	; (8011c38 <LoRaMacInitialization+0x384>)
 8011a82:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011a86:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011a8a:	4611      	mov	r1, r2
 8011a8c:	4618      	mov	r0, r3
 8011a8e:	f003 fbf7 	bl	8015280 <RegionGetPhyParam>
 8011a92:	4603      	mov	r3, r0
 8011a94:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8011a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a98:	4a67      	ldr	r2, [pc, #412]	; (8011c38 <LoRaMacInitialization+0x384>)
 8011a9a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8011a9e:	2316      	movs	r3, #22
 8011aa0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011aa4:	4b64      	ldr	r3, [pc, #400]	; (8011c38 <LoRaMacInitialization+0x384>)
 8011aa6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011aaa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011aae:	4611      	mov	r1, r2
 8011ab0:	4618      	mov	r0, r3
 8011ab2:	f003 fbe5 	bl	8015280 <RegionGetPhyParam>
 8011ab6:	4603      	mov	r3, r0
 8011ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8011aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011abc:	b2da      	uxtb	r2, r3
 8011abe:	4b5e      	ldr	r3, [pc, #376]	; (8011c38 <LoRaMacInitialization+0x384>)
 8011ac0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8011ac4:	2317      	movs	r3, #23
 8011ac6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011aca:	4b5b      	ldr	r3, [pc, #364]	; (8011c38 <LoRaMacInitialization+0x384>)
 8011acc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011ad0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011ad4:	4611      	mov	r1, r2
 8011ad6:	4618      	mov	r0, r3
 8011ad8:	f003 fbd2 	bl	8015280 <RegionGetPhyParam>
 8011adc:	4603      	mov	r3, r0
 8011ade:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8011ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ae2:	4a55      	ldr	r2, [pc, #340]	; (8011c38 <LoRaMacInitialization+0x384>)
 8011ae4:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8011ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aea:	4a53      	ldr	r2, [pc, #332]	; (8011c38 <LoRaMacInitialization+0x384>)
 8011aec:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8011af0:	2318      	movs	r3, #24
 8011af2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011af6:	4b50      	ldr	r3, [pc, #320]	; (8011c38 <LoRaMacInitialization+0x384>)
 8011af8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011afc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011b00:	4611      	mov	r1, r2
 8011b02:	4618      	mov	r0, r3
 8011b04:	f003 fbbc 	bl	8015280 <RegionGetPhyParam>
 8011b08:	4603      	mov	r3, r0
 8011b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8011b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b0e:	b2da      	uxtb	r2, r3
 8011b10:	4b49      	ldr	r3, [pc, #292]	; (8011c38 <LoRaMacInitialization+0x384>)
 8011b12:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8011b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b18:	b2da      	uxtb	r2, r3
 8011b1a:	4b47      	ldr	r3, [pc, #284]	; (8011c38 <LoRaMacInitialization+0x384>)
 8011b1c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8011b20:	231d      	movs	r3, #29
 8011b22:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011b26:	4b44      	ldr	r3, [pc, #272]	; (8011c38 <LoRaMacInitialization+0x384>)
 8011b28:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011b2c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011b30:	4611      	mov	r1, r2
 8011b32:	4618      	mov	r0, r3
 8011b34:	f003 fba4 	bl	8015280 <RegionGetPhyParam>
 8011b38:	4603      	mov	r3, r0
 8011b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8011b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b3e:	b2da      	uxtb	r2, r3
 8011b40:	4b3d      	ldr	r3, [pc, #244]	; (8011c38 <LoRaMacInitialization+0x384>)
 8011b42:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8011b46:	231e      	movs	r3, #30
 8011b48:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011b4c:	4b3a      	ldr	r3, [pc, #232]	; (8011c38 <LoRaMacInitialization+0x384>)
 8011b4e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011b52:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011b56:	4611      	mov	r1, r2
 8011b58:	4618      	mov	r0, r3
 8011b5a:	f003 fb91 	bl	8015280 <RegionGetPhyParam>
 8011b5e:	4603      	mov	r3, r0
 8011b60:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8011b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b64:	b2da      	uxtb	r2, r3
 8011b66:	4b34      	ldr	r3, [pc, #208]	; (8011c38 <LoRaMacInitialization+0x384>)
 8011b68:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8011b6c:	231f      	movs	r3, #31
 8011b6e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011b72:	4b31      	ldr	r3, [pc, #196]	; (8011c38 <LoRaMacInitialization+0x384>)
 8011b74:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011b78:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011b7c:	4611      	mov	r1, r2
 8011b7e:	4618      	mov	r0, r3
 8011b80:	f003 fb7e 	bl	8015280 <RegionGetPhyParam>
 8011b84:	4603      	mov	r3, r0
 8011b86:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8011b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b8a:	4a2b      	ldr	r2, [pc, #172]	; (8011c38 <LoRaMacInitialization+0x384>)
 8011b8c:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8011b90:	2320      	movs	r3, #32
 8011b92:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011b96:	4b28      	ldr	r3, [pc, #160]	; (8011c38 <LoRaMacInitialization+0x384>)
 8011b98:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011b9c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011ba0:	4611      	mov	r1, r2
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	f003 fb6c 	bl	8015280 <RegionGetPhyParam>
 8011ba8:	4603      	mov	r3, r0
 8011baa:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8011bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bae:	4a22      	ldr	r2, [pc, #136]	; (8011c38 <LoRaMacInitialization+0x384>)
 8011bb0:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8011bb4:	230b      	movs	r3, #11
 8011bb6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011bba:	4b1f      	ldr	r3, [pc, #124]	; (8011c38 <LoRaMacInitialization+0x384>)
 8011bbc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011bc0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011bc4:	4611      	mov	r1, r2
 8011bc6:	4618      	mov	r0, r3
 8011bc8:	f003 fb5a 	bl	8015280 <RegionGetPhyParam>
 8011bcc:	4603      	mov	r3, r0
 8011bce:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 8011bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bd2:	b29a      	uxth	r2, r3
 8011bd4:	4b18      	ldr	r3, [pc, #96]	; (8011c38 <LoRaMacInitialization+0x384>)
 8011bd6:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8011bda:	230c      	movs	r3, #12
 8011bdc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011be0:	4b15      	ldr	r3, [pc, #84]	; (8011c38 <LoRaMacInitialization+0x384>)
 8011be2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011be6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011bea:	4611      	mov	r1, r2
 8011bec:	4618      	mov	r0, r3
 8011bee:	f003 fb47 	bl	8015280 <RegionGetPhyParam>
 8011bf2:	4603      	mov	r3, r0
 8011bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 8011bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bf8:	b29a      	uxth	r2, r3
 8011bfa:	4b0f      	ldr	r3, [pc, #60]	; (8011c38 <LoRaMacInitialization+0x384>)
 8011bfc:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8011c00:	4b0d      	ldr	r3, [pc, #52]	; (8011c38 <LoRaMacInitialization+0x384>)
 8011c02:	2201      	movs	r2, #1
 8011c04:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8011c08:	4b0b      	ldr	r3, [pc, #44]	; (8011c38 <LoRaMacInitialization+0x384>)
 8011c0a:	220a      	movs	r2, #10
 8011c0c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8011c10:	4b09      	ldr	r3, [pc, #36]	; (8011c38 <LoRaMacInitialization+0x384>)
 8011c12:	2206      	movs	r2, #6
 8011c14:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8011c18:	4b07      	ldr	r3, [pc, #28]	; (8011c38 <LoRaMacInitialization+0x384>)
 8011c1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011c1e:	4a06      	ldr	r2, [pc, #24]	; (8011c38 <LoRaMacInitialization+0x384>)
 8011c20:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8011c22:	4b05      	ldr	r3, [pc, #20]	; (8011c38 <LoRaMacInitialization+0x384>)
 8011c24:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 8011c28:	4b03      	ldr	r3, [pc, #12]	; (8011c38 <LoRaMacInitialization+0x384>)
 8011c2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8011c2e:	4b02      	ldr	r3, [pc, #8]	; (8011c38 <LoRaMacInitialization+0x384>)
 8011c30:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8011c34:	e00c      	b.n	8011c50 <LoRaMacInitialization+0x39c>
 8011c36:	bf00      	nop
 8011c38:	20000c5c 	.word	0x20000c5c
 8011c3c:	20000740 	.word	0x20000740
 8011c40:	01000400 	.word	0x01000400
 8011c44:	20000e80 	.word	0x20000e80
 8011c48:	20000e94 	.word	0x20000e94
 8011c4c:	200017f4 	.word	0x200017f4
 8011c50:	4a5f      	ldr	r2, [pc, #380]	; (8011dd0 <LoRaMacInitialization+0x51c>)
 8011c52:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8011c54:	4b5e      	ldr	r3, [pc, #376]	; (8011dd0 <LoRaMacInitialization+0x51c>)
 8011c56:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8011c5a:	4a5d      	ldr	r2, [pc, #372]	; (8011dd0 <LoRaMacInitialization+0x51c>)
 8011c5c:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8011c5e:	4b5c      	ldr	r3, [pc, #368]	; (8011dd0 <LoRaMacInitialization+0x51c>)
 8011c60:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8011c64:	4a5a      	ldr	r2, [pc, #360]	; (8011dd0 <LoRaMacInitialization+0x51c>)
 8011c66:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8011c68:	4b59      	ldr	r3, [pc, #356]	; (8011dd0 <LoRaMacInitialization+0x51c>)
 8011c6a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8011c6e:	4a58      	ldr	r2, [pc, #352]	; (8011dd0 <LoRaMacInitialization+0x51c>)
 8011c70:	6613      	str	r3, [r2, #96]	; 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8011c72:	4b57      	ldr	r3, [pc, #348]	; (8011dd0 <LoRaMacInitialization+0x51c>)
 8011c74:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8011c78:	4a55      	ldr	r2, [pc, #340]	; (8011dd0 <LoRaMacInitialization+0x51c>)
 8011c7a:	6653      	str	r3, [r2, #100]	; 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8011c7c:	4b54      	ldr	r3, [pc, #336]	; (8011dd0 <LoRaMacInitialization+0x51c>)
 8011c7e:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
 8011c82:	4b53      	ldr	r3, [pc, #332]	; (8011dd0 <LoRaMacInitialization+0x51c>)
 8011c84:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 8011c88:	4b51      	ldr	r3, [pc, #324]	; (8011dd0 <LoRaMacInitialization+0x51c>)
 8011c8a:	2201      	movs	r2, #1
 8011c8c:	f883 211f 	strb.w	r2, [r3, #287]	; 0x11f
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 8011c90:	4a50      	ldr	r2, [pc, #320]	; (8011dd4 <LoRaMacInitialization+0x520>)
 8011c92:	693b      	ldr	r3, [r7, #16]
 8011c94:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( false );
 8011c98:	2000      	movs	r0, #0
 8011c9a:	f7ff f869 	bl	8010d70 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8011c9e:	4b4c      	ldr	r3, [pc, #304]	; (8011dd0 <LoRaMacInitialization+0x51c>)
 8011ca0:	2201      	movs	r2, #1
 8011ca2:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119

    MacCtx.MacPrimitives = primitives;
 8011ca6:	4a4b      	ldr	r2, [pc, #300]	; (8011dd4 <LoRaMacInitialization+0x520>)
 8011ca8:	697b      	ldr	r3, [r7, #20]
 8011caa:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 8011cae:	4b49      	ldr	r3, [pc, #292]	; (8011dd4 <LoRaMacInitialization+0x520>)
 8011cb0:	2200      	movs	r2, #0
 8011cb2:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
    MacCtx.MacState = LORAMAC_STOPPED;
 8011cb6:	4b47      	ldr	r3, [pc, #284]	; (8011dd4 <LoRaMacInitialization+0x520>)
 8011cb8:	2201      	movs	r2, #1
 8011cba:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8011cbe:	4b44      	ldr	r3, [pc, #272]	; (8011dd0 <LoRaMacInitialization+0x51c>)
 8011cc0:	2200      	movs	r2, #0
 8011cc2:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8011cc4:	4b42      	ldr	r3, [pc, #264]	; (8011dd0 <LoRaMacInitialization+0x51c>)
 8011cc6:	2200      	movs	r2, #0
 8011cc8:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8011cca:	2300      	movs	r3, #0
 8011ccc:	9300      	str	r3, [sp, #0]
 8011cce:	4b42      	ldr	r3, [pc, #264]	; (8011dd8 <LoRaMacInitialization+0x524>)
 8011cd0:	2200      	movs	r2, #0
 8011cd2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8011cd6:	4841      	ldr	r0, [pc, #260]	; (8011ddc <LoRaMacInitialization+0x528>)
 8011cd8:	f00b f9ca 	bl	801d070 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8011cdc:	2300      	movs	r3, #0
 8011cde:	9300      	str	r3, [sp, #0]
 8011ce0:	4b3f      	ldr	r3, [pc, #252]	; (8011de0 <LoRaMacInitialization+0x52c>)
 8011ce2:	2200      	movs	r2, #0
 8011ce4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8011ce8:	483e      	ldr	r0, [pc, #248]	; (8011de4 <LoRaMacInitialization+0x530>)
 8011cea:	f00b f9c1 	bl	801d070 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8011cee:	2300      	movs	r3, #0
 8011cf0:	9300      	str	r3, [sp, #0]
 8011cf2:	4b3d      	ldr	r3, [pc, #244]	; (8011de8 <LoRaMacInitialization+0x534>)
 8011cf4:	2200      	movs	r2, #0
 8011cf6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8011cfa:	483c      	ldr	r0, [pc, #240]	; (8011dec <LoRaMacInitialization+0x538>)
 8011cfc:	f00b f9b8 	bl	801d070 <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 8011d00:	2300      	movs	r3, #0
 8011d02:	9300      	str	r3, [sp, #0]
 8011d04:	4b3a      	ldr	r3, [pc, #232]	; (8011df0 <LoRaMacInitialization+0x53c>)
 8011d06:	2200      	movs	r2, #0
 8011d08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8011d0c:	4839      	ldr	r0, [pc, #228]	; (8011df4 <LoRaMacInitialization+0x540>)
 8011d0e:	f00b f9af 	bl	801d070 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8011d12:	4c2f      	ldr	r4, [pc, #188]	; (8011dd0 <LoRaMacInitialization+0x51c>)
 8011d14:	463b      	mov	r3, r7
 8011d16:	4618      	mov	r0, r3
 8011d18:	f00a fd1e 	bl	801c758 <SysTimeGetMcuTime>
 8011d1c:	f504 7392 	add.w	r3, r4, #292	; 0x124
 8011d20:	463a      	mov	r2, r7
 8011d22:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011d26:	e883 0003 	stmia.w	r3, {r0, r1}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 8011d2a:	4b33      	ldr	r3, [pc, #204]	; (8011df8 <LoRaMacInitialization+0x544>)
 8011d2c:	2200      	movs	r2, #0
 8011d2e:	601a      	str	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8011d30:	4b28      	ldr	r3, [pc, #160]	; (8011dd4 <LoRaMacInitialization+0x520>)
 8011d32:	4a32      	ldr	r2, [pc, #200]	; (8011dfc <LoRaMacInitialization+0x548>)
 8011d34:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8011d38:	4b26      	ldr	r3, [pc, #152]	; (8011dd4 <LoRaMacInitialization+0x520>)
 8011d3a:	4a31      	ldr	r2, [pc, #196]	; (8011e00 <LoRaMacInitialization+0x54c>)
 8011d3c:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8011d40:	4b24      	ldr	r3, [pc, #144]	; (8011dd4 <LoRaMacInitialization+0x520>)
 8011d42:	4a30      	ldr	r2, [pc, #192]	; (8011e04 <LoRaMacInitialization+0x550>)
 8011d44:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8011d48:	4b22      	ldr	r3, [pc, #136]	; (8011dd4 <LoRaMacInitialization+0x520>)
 8011d4a:	4a2f      	ldr	r2, [pc, #188]	; (8011e08 <LoRaMacInitialization+0x554>)
 8011d4c:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8011d50:	4b20      	ldr	r3, [pc, #128]	; (8011dd4 <LoRaMacInitialization+0x520>)
 8011d52:	4a2e      	ldr	r2, [pc, #184]	; (8011e0c <LoRaMacInitialization+0x558>)
 8011d54:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8011d58:	4b2d      	ldr	r3, [pc, #180]	; (8011e10 <LoRaMacInitialization+0x55c>)
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	482d      	ldr	r0, [pc, #180]	; (8011e14 <LoRaMacInitialization+0x560>)
 8011d5e:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 8011d60:	482d      	ldr	r0, [pc, #180]	; (8011e18 <LoRaMacInitialization+0x564>)
 8011d62:	f7fa f9f9 	bl	800c158 <SecureElementInit>
 8011d66:	4603      	mov	r3, r0
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d001      	beq.n	8011d70 <LoRaMacInitialization+0x4bc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8011d6c:	2311      	movs	r3, #17
 8011d6e:	e02b      	b.n	8011dc8 <LoRaMacInitialization+0x514>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8011d70:	4817      	ldr	r0, [pc, #92]	; (8011dd0 <LoRaMacInitialization+0x51c>)
 8011d72:	f002 fbc1 	bl	80144f8 <LoRaMacCryptoInit>
 8011d76:	4603      	mov	r3, r0
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d001      	beq.n	8011d80 <LoRaMacInitialization+0x4cc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8011d7c:	2311      	movs	r3, #17
 8011d7e:	e023      	b.n	8011dc8 <LoRaMacInitialization+0x514>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8011d80:	f001 fcbc 	bl	80136fc <LoRaMacCommandsInit>
 8011d84:	4603      	mov	r3, r0
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d001      	beq.n	8011d8e <LoRaMacInitialization+0x4da>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011d8a:	2313      	movs	r3, #19
 8011d8c:	e01c      	b.n	8011dc8 <LoRaMacInitialization+0x514>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8011d8e:	4823      	ldr	r0, [pc, #140]	; (8011e1c <LoRaMacInitialization+0x568>)
 8011d90:	f002 fc52 	bl	8014638 <LoRaMacCryptoSetMulticastReference>
 8011d94:	4603      	mov	r3, r0
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d001      	beq.n	8011d9e <LoRaMacInitialization+0x4ea>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8011d9a:	2311      	movs	r3, #17
 8011d9c:	e014      	b.n	8011dc8 <LoRaMacInitialization+0x514>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8011d9e:	4b1c      	ldr	r3, [pc, #112]	; (8011e10 <LoRaMacInitialization+0x55c>)
 8011da0:	695b      	ldr	r3, [r3, #20]
 8011da2:	4798      	blx	r3
 8011da4:	4603      	mov	r3, r0
 8011da6:	4618      	mov	r0, r3
 8011da8:	f007 f846 	bl	8018e38 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8011dac:	4b18      	ldr	r3, [pc, #96]	; (8011e10 <LoRaMacInitialization+0x55c>)
 8011dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011db0:	4a07      	ldr	r2, [pc, #28]	; (8011dd0 <LoRaMacInitialization+0x51c>)
 8011db2:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 8011db6:	4610      	mov	r0, r2
 8011db8:	4798      	blx	r3
    Radio.Sleep( );
 8011dba:	4b15      	ldr	r3, [pc, #84]	; (8011e10 <LoRaMacInitialization+0x55c>)
 8011dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011dbe:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8011dc0:	2001      	movs	r0, #1
 8011dc2:	f7fd fa7d 	bl	800f2c0 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8011dc6:	2300      	movs	r3, #0
}
 8011dc8:	4618      	mov	r0, r3
 8011dca:	373c      	adds	r7, #60	; 0x3c
 8011dcc:	46bd      	mov	sp, r7
 8011dce:	bd90      	pop	{r4, r7, pc}
 8011dd0:	20000c5c 	.word	0x20000c5c
 8011dd4:	20000740 	.word	0x20000740
 8011dd8:	0800f84d 	.word	0x0800f84d
 8011ddc:	20000aa8 	.word	0x20000aa8
 8011de0:	0800f8dd 	.word	0x0800f8dd
 8011de4:	20000ac0 	.word	0x20000ac0
 8011de8:	0800f955 	.word	0x0800f955
 8011dec:	20000ad8 	.word	0x20000ad8
 8011df0:	0800f9d5 	.word	0x0800f9d5
 8011df4:	20000b40 	.word	0x20000b40
 8011df8:	20001884 	.word	0x20001884
 8011dfc:	0800e2fd 	.word	0x0800e2fd
 8011e00:	0800e359 	.word	0x0800e359
 8011e04:	0800e3f9 	.word	0x0800e3f9
 8011e08:	0800e3cd 	.word	0x0800e3cd
 8011e0c:	0800e415 	.word	0x0800e415
 8011e10:	0801ea54 	.word	0x0801ea54
 8011e14:	20000a8c 	.word	0x20000a8c
 8011e18:	20000da8 	.word	0x20000da8
 8011e1c:	20000d44 	.word	0x20000d44

08011e20 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8011e20:	b580      	push	{r7, lr}
 8011e22:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8011e24:	4b04      	ldr	r3, [pc, #16]	; (8011e38 <LoRaMacStart+0x18>)
 8011e26:	2200      	movs	r2, #0
 8011e28:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    UpdateRxSlotIdleState();
 8011e2c:	f7fc fb08 	bl	800e440 <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
 8011e30:	2300      	movs	r3, #0
}
 8011e32:	4618      	mov	r0, r3
 8011e34:	bd80      	pop	{r7, pc}
 8011e36:	bf00      	nop
 8011e38:	20000740 	.word	0x20000740

08011e3c <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 8011e3c:	b580      	push	{r7, lr}
 8011e3e:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 8011e40:	f7fd fa06 	bl	800f250 <LoRaMacIsBusy>
 8011e44:	4603      	mov	r3, r0
 8011e46:	f083 0301 	eor.w	r3, r3, #1
 8011e4a:	b2db      	uxtb	r3, r3
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d00d      	beq.n	8011e6c <LoRaMacStop+0x30>
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8011e50:	4b0b      	ldr	r3, [pc, #44]	; (8011e80 <LoRaMacStop+0x44>)
 8011e52:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011e56:	2b02      	cmp	r3, #2
 8011e58:	d102      	bne.n	8011e60 <LoRaMacStop+0x24>
        {
            Radio.Sleep( );
 8011e5a:	4b0a      	ldr	r3, [pc, #40]	; (8011e84 <LoRaMacStop+0x48>)
 8011e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e5e:	4798      	blx	r3
        }
        MacCtx.MacState = LORAMAC_STOPPED;
 8011e60:	4b09      	ldr	r3, [pc, #36]	; (8011e88 <LoRaMacStop+0x4c>)
 8011e62:	2201      	movs	r2, #1
 8011e64:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 8011e68:	2300      	movs	r3, #0
 8011e6a:	e007      	b.n	8011e7c <LoRaMacStop+0x40>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 8011e6c:	4b06      	ldr	r3, [pc, #24]	; (8011e88 <LoRaMacStop+0x4c>)
 8011e6e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011e72:	2b01      	cmp	r3, #1
 8011e74:	d101      	bne.n	8011e7a <LoRaMacStop+0x3e>
    {
        return LORAMAC_STATUS_OK;
 8011e76:	2300      	movs	r3, #0
 8011e78:	e000      	b.n	8011e7c <LoRaMacStop+0x40>
    }
    return LORAMAC_STATUS_BUSY;
 8011e7a:	2301      	movs	r3, #1
}
 8011e7c:	4618      	mov	r0, r3
 8011e7e:	bd80      	pop	{r7, pc}
 8011e80:	20000c5c 	.word	0x20000c5c
 8011e84:	0801ea54 	.word	0x0801ea54
 8011e88:	20000740 	.word	0x20000740

08011e8c <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 8011e8c:	b580      	push	{r7, lr}
 8011e8e:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 8011e90:	4812      	ldr	r0, [pc, #72]	; (8011edc <LoRaMacHalt+0x50>)
 8011e92:	f00b f991 	bl	801d1b8 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 8011e96:	4812      	ldr	r0, [pc, #72]	; (8011ee0 <LoRaMacHalt+0x54>)
 8011e98:	f00b f98e 	bl	801d1b8 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 8011e9c:	4811      	ldr	r0, [pc, #68]	; (8011ee4 <LoRaMacHalt+0x58>)
 8011e9e:	f00b f98b 	bl	801d1b8 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 8011ea2:	4811      	ldr	r0, [pc, #68]	; (8011ee8 <LoRaMacHalt+0x5c>)
 8011ea4:	f00b f988 	bl	801d1b8 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 8011ea8:	f001 fa8c 	bl	80133c4 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 8011eac:	4b0f      	ldr	r3, [pc, #60]	; (8011eec <LoRaMacHalt+0x60>)
 8011eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011eb0:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 8011eb2:	4b0f      	ldr	r3, [pc, #60]	; (8011ef0 <LoRaMacHalt+0x64>)
 8011eb4:	2200      	movs	r2, #0
 8011eb6:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacHandleNvm( &Nvm );
 8011eba:	480e      	ldr	r0, [pc, #56]	; (8011ef4 <LoRaMacHalt+0x68>)
 8011ebc:	f7fd fba2 	bl	800f604 <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 8011ec0:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8011ec4:	490b      	ldr	r1, [pc, #44]	; (8011ef4 <LoRaMacHalt+0x68>)
 8011ec6:	480c      	ldr	r0, [pc, #48]	; (8011ef8 <LoRaMacHalt+0x6c>)
 8011ec8:	f006 ffdb 	bl	8018e82 <memcpy1>
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 8011ecc:	4b08      	ldr	r3, [pc, #32]	; (8011ef0 <LoRaMacHalt+0x64>)
 8011ece:	2201      	movs	r2, #1
 8011ed0:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8011ed4:	2300      	movs	r3, #0
}
 8011ed6:	4618      	mov	r0, r3
 8011ed8:	bd80      	pop	{r7, pc}
 8011eda:	bf00      	nop
 8011edc:	20000aa8 	.word	0x20000aa8
 8011ee0:	20000ac0 	.word	0x20000ac0
 8011ee4:	20000ad8 	.word	0x20000ad8
 8011ee8:	20000b40 	.word	0x20000b40
 8011eec:	0801ea54 	.word	0x0801ea54
 8011ef0:	20000740 	.word	0x20000740
 8011ef4:	20000c5c 	.word	0x20000c5c
 8011ef8:	20001228 	.word	0x20001228

08011efc <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8011efc:	b590      	push	{r4, r7, lr}
 8011efe:	b08d      	sub	sp, #52	; 0x34
 8011f00:	af02      	add	r7, sp, #8
 8011f02:	4603      	mov	r3, r0
 8011f04:	6039      	str	r1, [r7, #0]
 8011f06:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8011f08:	4b42      	ldr	r3, [pc, #264]	; (8012014 <LoRaMacQueryTxPossible+0x118>)
 8011f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f0c:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8011f0e:	4b41      	ldr	r3, [pc, #260]	; (8012014 <LoRaMacQueryTxPossible+0x118>)
 8011f10:	f993 30dd 	ldrsb.w	r3, [r3, #221]	; 0xdd
 8011f14:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8011f16:	4b3f      	ldr	r3, [pc, #252]	; (8012014 <LoRaMacQueryTxPossible+0x118>)
 8011f18:	f993 30dc 	ldrsb.w	r3, [r3, #220]	; 0xdc
 8011f1c:	73bb      	strb	r3, [r7, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 8011f1e:	4b3e      	ldr	r3, [pc, #248]	; (8012018 <LoRaMacQueryTxPossible+0x11c>)
 8011f20:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8011f24:	737b      	strb	r3, [r7, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 8011f26:	2300      	movs	r3, #0
 8011f28:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8011f2a:	683b      	ldr	r3, [r7, #0]
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d101      	bne.n	8011f34 <LoRaMacQueryTxPossible+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011f30:	2303      	movs	r3, #3
 8011f32:	e06b      	b.n	801200c <LoRaMacQueryTxPossible+0x110>

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 8011f34:	2300      	movs	r3, #0
 8011f36:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8011f38:	4b36      	ldr	r3, [pc, #216]	; (8012014 <LoRaMacQueryTxPossible+0x118>)
 8011f3a:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8011f3e:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8011f40:	4b34      	ldr	r3, [pc, #208]	; (8012014 <LoRaMacQueryTxPossible+0x118>)
 8011f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f44:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8011f46:	4b33      	ldr	r3, [pc, #204]	; (8012014 <LoRaMacQueryTxPossible+0x118>)
 8011f48:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8011f4c:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8011f4e:	4b31      	ldr	r3, [pc, #196]	; (8012014 <LoRaMacQueryTxPossible+0x118>)
 8011f50:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8011f54:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011f56:	4b2f      	ldr	r3, [pc, #188]	; (8012014 <LoRaMacQueryTxPossible+0x118>)
 8011f58:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011f5c:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011f60:	4b2c      	ldr	r3, [pc, #176]	; (8012014 <LoRaMacQueryTxPossible+0x118>)
 8011f62:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8011f66:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 8011f6a:	4b2b      	ldr	r3, [pc, #172]	; (8012018 <LoRaMacQueryTxPossible+0x11c>)
 8011f6c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8011f70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011f74:	4b27      	ldr	r3, [pc, #156]	; (8012014 <LoRaMacQueryTxPossible+0x118>)
 8011f76:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8011f7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 8011f7e:	4b25      	ldr	r3, [pc, #148]	; (8012014 <LoRaMacQueryTxPossible+0x118>)
 8011f80:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011f84:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 8011f88:	f107 040d 	add.w	r4, r7, #13
 8011f8c:	f107 020e 	add.w	r2, r7, #14
 8011f90:	f107 010f 	add.w	r1, r7, #15
 8011f94:	f107 0014 	add.w	r0, r7, #20
 8011f98:	f107 0310 	add.w	r3, r7, #16
 8011f9c:	9300      	str	r3, [sp, #0]
 8011f9e:	4623      	mov	r3, r4
 8011fa0:	f001 f8da 	bl	8013158 <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8011fa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011fa8:	4618      	mov	r0, r3
 8011faa:	f7fd fe59 	bl	800fc60 <GetMaxAppPayloadWithoutFOptsLength>
 8011fae:	4603      	mov	r3, r0
 8011fb0:	461a      	mov	r2, r3
 8011fb2:	683b      	ldr	r3, [r7, #0]
 8011fb4:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8011fb6:	f107 0308 	add.w	r3, r7, #8
 8011fba:	4618      	mov	r0, r3
 8011fbc:	f001 fca4 	bl	8013908 <LoRaMacCommandsGetSizeSerializedCmds>
 8011fc0:	4603      	mov	r3, r0
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d001      	beq.n	8011fca <LoRaMacQueryTxPossible+0xce>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011fc6:	2313      	movs	r3, #19
 8011fc8:	e020      	b.n	801200c <LoRaMacQueryTxPossible+0x110>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8011fca:	68bb      	ldr	r3, [r7, #8]
 8011fcc:	2b0f      	cmp	r3, #15
 8011fce:	d819      	bhi.n	8012004 <LoRaMacQueryTxPossible+0x108>
 8011fd0:	683b      	ldr	r3, [r7, #0]
 8011fd2:	785b      	ldrb	r3, [r3, #1]
 8011fd4:	461a      	mov	r2, r3
 8011fd6:	68bb      	ldr	r3, [r7, #8]
 8011fd8:	429a      	cmp	r2, r3
 8011fda:	d313      	bcc.n	8012004 <LoRaMacQueryTxPossible+0x108>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8011fdc:	683b      	ldr	r3, [r7, #0]
 8011fde:	785a      	ldrb	r2, [r3, #1]
 8011fe0:	68bb      	ldr	r3, [r7, #8]
 8011fe2:	b2db      	uxtb	r3, r3
 8011fe4:	1ad3      	subs	r3, r2, r3
 8011fe6:	b2da      	uxtb	r2, r3
 8011fe8:	683b      	ldr	r3, [r7, #0]
 8011fea:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8011fec:	683b      	ldr	r3, [r7, #0]
 8011fee:	785b      	ldrb	r3, [r3, #1]
 8011ff0:	4619      	mov	r1, r3
 8011ff2:	79fa      	ldrb	r2, [r7, #7]
 8011ff4:	68bb      	ldr	r3, [r7, #8]
 8011ff6:	4413      	add	r3, r2
 8011ff8:	4299      	cmp	r1, r3
 8011ffa:	d301      	bcc.n	8012000 <LoRaMacQueryTxPossible+0x104>
        {
            return LORAMAC_STATUS_OK;
 8011ffc:	2300      	movs	r3, #0
 8011ffe:	e005      	b.n	801200c <LoRaMacQueryTxPossible+0x110>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8012000:	2308      	movs	r3, #8
 8012002:	e003      	b.n	801200c <LoRaMacQueryTxPossible+0x110>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8012004:	683b      	ldr	r3, [r7, #0]
 8012006:	2200      	movs	r2, #0
 8012008:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 801200a:	2308      	movs	r3, #8
    }
}
 801200c:	4618      	mov	r0, r3
 801200e:	372c      	adds	r7, #44	; 0x2c
 8012010:	46bd      	mov	sp, r7
 8012012:	bd90      	pop	{r4, r7, pc}
 8012014:	20000c5c 	.word	0x20000c5c
 8012018:	20000740 	.word	0x20000740

0801201c <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 801201c:	b590      	push	{r4, r7, lr}
 801201e:	b087      	sub	sp, #28
 8012020:	af00      	add	r7, sp, #0
 8012022:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8012024:	2300      	movs	r3, #0
 8012026:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	2b00      	cmp	r3, #0
 801202c:	d101      	bne.n	8012032 <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801202e:	2303      	movs	r3, #3
 8012030:	e1c4      	b.n	80123bc <LoRaMacMibGetRequestConfirm+0x3a0>
    }

    switch( mibGet->Type )
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	781b      	ldrb	r3, [r3, #0]
 8012036:	2b41      	cmp	r3, #65	; 0x41
 8012038:	f200 81b9 	bhi.w	80123ae <LoRaMacMibGetRequestConfirm+0x392>
 801203c:	a201      	add	r2, pc, #4	; (adr r2, 8012044 <LoRaMacMibGetRequestConfirm+0x28>)
 801203e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012042:	bf00      	nop
 8012044:	0801214d 	.word	0x0801214d
 8012048:	08012159 	.word	0x08012159
 801204c:	08012165 	.word	0x08012165
 8012050:	08012171 	.word	0x08012171
 8012054:	0801217d 	.word	0x0801217d
 8012058:	08012189 	.word	0x08012189
 801205c:	08012195 	.word	0x08012195
 8012060:	080123af 	.word	0x080123af
 8012064:	080123af 	.word	0x080123af
 8012068:	080123af 	.word	0x080123af
 801206c:	080123af 	.word	0x080123af
 8012070:	080123af 	.word	0x080123af
 8012074:	080123af 	.word	0x080123af
 8012078:	080123af 	.word	0x080123af
 801207c:	080123af 	.word	0x080123af
 8012080:	080121a9 	.word	0x080121a9
 8012084:	080121b5 	.word	0x080121b5
 8012088:	080121c1 	.word	0x080121c1
 801208c:	080121e3 	.word	0x080121e3
 8012090:	080121f5 	.word	0x080121f5
 8012094:	08012207 	.word	0x08012207
 8012098:	08012219 	.word	0x08012219
 801209c:	0801224d 	.word	0x0801224d
 80120a0:	0801222b 	.word	0x0801222b
 80120a4:	0801226f 	.word	0x0801226f
 80120a8:	0801227b 	.word	0x0801227b
 80120ac:	08012285 	.word	0x08012285
 80120b0:	0801228f 	.word	0x0801228f
 80120b4:	08012299 	.word	0x08012299
 80120b8:	080122a3 	.word	0x080122a3
 80120bc:	080122ad 	.word	0x080122ad
 80120c0:	080122d9 	.word	0x080122d9
 80120c4:	080122e5 	.word	0x080122e5
 80120c8:	080122fd 	.word	0x080122fd
 80120cc:	080122f1 	.word	0x080122f1
 80120d0:	08012309 	.word	0x08012309
 80120d4:	08012313 	.word	0x08012313
 80120d8:	0801231f 	.word	0x0801231f
 80120dc:	0801233b 	.word	0x0801233b
 80120e0:	0801232b 	.word	0x0801232b
 80120e4:	08012333 	.word	0x08012333
 80120e8:	080123af 	.word	0x080123af
 80120ec:	08012347 	.word	0x08012347
 80120f0:	080123af 	.word	0x080123af
 80120f4:	080123af 	.word	0x080123af
 80120f8:	080123af 	.word	0x080123af
 80120fc:	080123af 	.word	0x080123af
 8012100:	080123af 	.word	0x080123af
 8012104:	080123af 	.word	0x080123af
 8012108:	080123af 	.word	0x080123af
 801210c:	080123af 	.word	0x080123af
 8012110:	080123af 	.word	0x080123af
 8012114:	080123af 	.word	0x080123af
 8012118:	080123af 	.word	0x080123af
 801211c:	080123af 	.word	0x080123af
 8012120:	080123af 	.word	0x080123af
 8012124:	080123af 	.word	0x080123af
 8012128:	080123af 	.word	0x080123af
 801212c:	0801235b 	.word	0x0801235b
 8012130:	08012367 	.word	0x08012367
 8012134:	08012373 	.word	0x08012373
 8012138:	0801237f 	.word	0x0801237f
 801213c:	0801238b 	.word	0x0801238b
 8012140:	08012397 	.word	0x08012397
 8012144:	080123a3 	.word	0x080123a3
 8012148:	080123a9 	.word	0x080123a9
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 801214c:	4b9d      	ldr	r3, [pc, #628]	; (80123c4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801214e:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	711a      	strb	r2, [r3, #4]
            break;
 8012156:	e130      	b.n	80123ba <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8012158:	4b9a      	ldr	r3, [pc, #616]	; (80123c4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801215a:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	711a      	strb	r2, [r3, #4]
            break;
 8012162:	e12a      	b.n	80123ba <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	685b      	ldr	r3, [r3, #4]
 8012168:	4618      	mov	r0, r3
 801216a:	f7fa fab5 	bl	800c6d8 <SecureElementGetDevEui>
            break;
 801216e:	e124      	b.n	80123ba <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	685b      	ldr	r3, [r3, #4]
 8012174:	4618      	mov	r0, r3
 8012176:	f7fa fadf 	bl	800c738 <SecureElementGetJoinEui>
            break;
 801217a:	e11e      	b.n	80123ba <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 801217c:	4b91      	ldr	r3, [pc, #580]	; (80123c4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801217e:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	711a      	strb	r2, [r3, #4]
            break;
 8012186:	e118      	b.n	80123ba <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8012188:	4b8e      	ldr	r3, [pc, #568]	; (80123c4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801218a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	605a      	str	r2, [r3, #4]
            break;
 8012192:	e112      	b.n	80123ba <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 8012194:	4b8b      	ldr	r3, [pc, #556]	; (80123c4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012196:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	3304      	adds	r3, #4
 801219e:	4619      	mov	r1, r3
 80121a0:	4610      	mov	r0, r2
 80121a2:	f7fa fafb 	bl	800c79c <SecureElementGetDevAddr>
            break;
 80121a6:	e108      	b.n	80123ba <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 80121a8:	4b86      	ldr	r3, [pc, #536]	; (80123c4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80121aa:	f893 2119 	ldrb.w	r2, [r3, #281]	; 0x119
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	711a      	strb	r2, [r3, #4]
            break;
 80121b2:	e102      	b.n	80123ba <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80121b4:	4b83      	ldr	r3, [pc, #524]	; (80123c4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80121b6:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	711a      	strb	r2, [r3, #4]
            break;
 80121be:	e0fc      	b.n	80123ba <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 80121c0:	231c      	movs	r3, #28
 80121c2:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80121c4:	4b7f      	ldr	r3, [pc, #508]	; (80123c4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80121c6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80121ca:	f107 0210 	add.w	r2, r7, #16
 80121ce:	4611      	mov	r1, r2
 80121d0:	4618      	mov	r0, r3
 80121d2:	f003 f855 	bl	8015280 <RegionGetPhyParam>
 80121d6:	4603      	mov	r3, r0
 80121d8:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 80121da:	68fa      	ldr	r2, [r7, #12]
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	605a      	str	r2, [r3, #4]
            break;
 80121e0:	e0eb      	b.n	80123ba <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	4a77      	ldr	r2, [pc, #476]	; (80123c4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80121e6:	3304      	adds	r3, #4
 80121e8:	326c      	adds	r2, #108	; 0x6c
 80121ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80121ee:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80121f2:	e0e2      	b.n	80123ba <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	4a73      	ldr	r2, [pc, #460]	; (80123c4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80121f8:	3304      	adds	r3, #4
 80121fa:	32b4      	adds	r2, #180	; 0xb4
 80121fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012200:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8012204:	e0d9      	b.n	80123ba <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	4a6e      	ldr	r2, [pc, #440]	; (80123c4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801220a:	3304      	adds	r3, #4
 801220c:	3274      	adds	r2, #116	; 0x74
 801220e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012212:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8012216:	e0d0      	b.n	80123ba <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	4a6a      	ldr	r2, [pc, #424]	; (80123c4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801221c:	3304      	adds	r3, #4
 801221e:	32bc      	adds	r2, #188	; 0xbc
 8012220:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012224:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8012228:	e0c7      	b.n	80123ba <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 801222a:	231a      	movs	r3, #26
 801222c:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801222e:	4b65      	ldr	r3, [pc, #404]	; (80123c4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012230:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012234:	f107 0210 	add.w	r2, r7, #16
 8012238:	4611      	mov	r1, r2
 801223a:	4618      	mov	r0, r3
 801223c:	f003 f820 	bl	8015280 <RegionGetPhyParam>
 8012240:	4603      	mov	r3, r0
 8012242:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8012244:	68fa      	ldr	r2, [r7, #12]
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	605a      	str	r2, [r3, #4]
            break;
 801224a:	e0b6      	b.n	80123ba <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 801224c:	2319      	movs	r3, #25
 801224e:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012250:	4b5c      	ldr	r3, [pc, #368]	; (80123c4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012252:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012256:	f107 0210 	add.w	r2, r7, #16
 801225a:	4611      	mov	r1, r2
 801225c:	4618      	mov	r0, r3
 801225e:	f003 f80f 	bl	8015280 <RegionGetPhyParam>
 8012262:	4603      	mov	r3, r0
 8012264:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 8012266:	68fa      	ldr	r2, [r7, #12]
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	605a      	str	r2, [r3, #4]
            break;
 801226c:	e0a5      	b.n	80123ba <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 801226e:	4b55      	ldr	r3, [pc, #340]	; (80123c4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012270:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	711a      	strb	r2, [r3, #4]
            break;
 8012278:	e09f      	b.n	80123ba <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 801227a:	4b52      	ldr	r3, [pc, #328]	; (80123c4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801227c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	605a      	str	r2, [r3, #4]
            break;
 8012282:	e09a      	b.n	80123ba <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8012284:	4b4f      	ldr	r3, [pc, #316]	; (80123c4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012286:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	605a      	str	r2, [r3, #4]
            break;
 801228c:	e095      	b.n	80123ba <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 801228e:	4b4d      	ldr	r3, [pc, #308]	; (80123c4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012290:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	605a      	str	r2, [r3, #4]
            break;
 8012296:	e090      	b.n	80123ba <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8012298:	4b4a      	ldr	r3, [pc, #296]	; (80123c4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801229a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	605a      	str	r2, [r3, #4]
            break;
 80122a0:	e08b      	b.n	80123ba <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 80122a2:	4b48      	ldr	r3, [pc, #288]	; (80123c4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80122a4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	605a      	str	r2, [r3, #4]
            break;
 80122aa:	e086      	b.n	80123ba <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_CHANNELS_MIN_TX_DATARATE:
        {
            getPhy.Attribute = PHY_MIN_TX_DR;
 80122ac:	2302      	movs	r3, #2
 80122ae:	743b      	strb	r3, [r7, #16]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80122b0:	4b44      	ldr	r3, [pc, #272]	; (80123c4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80122b2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80122b6:	74bb      	strb	r3, [r7, #18]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80122b8:	4b42      	ldr	r3, [pc, #264]	; (80123c4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80122ba:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80122be:	f107 0210 	add.w	r2, r7, #16
 80122c2:	4611      	mov	r1, r2
 80122c4:	4618      	mov	r0, r3
 80122c6:	f002 ffdb 	bl	8015280 <RegionGetPhyParam>
 80122ca:	4603      	mov	r3, r0
 80122cc:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 80122ce:	68fb      	ldr	r3, [r7, #12]
 80122d0:	b25a      	sxtb	r2, r3
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	711a      	strb	r2, [r3, #4]
            break;
 80122d6:	e070      	b.n	80123ba <LoRaMacMibGetRequestConfirm+0x39e>
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80122d8:	4b3a      	ldr	r3, [pc, #232]	; (80123c4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80122da:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	711a      	strb	r2, [r3, #4]
            break;
 80122e2:	e06a      	b.n	80123ba <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 80122e4:	4b37      	ldr	r3, [pc, #220]	; (80123c4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80122e6:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	711a      	strb	r2, [r3, #4]
            break;
 80122ee:	e064      	b.n	80123ba <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80122f0:	4b34      	ldr	r3, [pc, #208]	; (80123c4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80122f2:	f993 20dc 	ldrsb.w	r2, [r3, #220]	; 0xdc
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	711a      	strb	r2, [r3, #4]
            break;
 80122fa:	e05e      	b.n	80123ba <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 80122fc:	4b31      	ldr	r3, [pc, #196]	; (80123c4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80122fe:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	711a      	strb	r2, [r3, #4]
            break;
 8012306:	e058      	b.n	80123ba <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8012308:	4b2e      	ldr	r3, [pc, #184]	; (80123c4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801230a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	605a      	str	r2, [r3, #4]
            break;
 8012310:	e053      	b.n	80123ba <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8012312:	4b2c      	ldr	r3, [pc, #176]	; (80123c4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012314:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	711a      	strb	r2, [r3, #4]
            break;
 801231c:	e04d      	b.n	80123ba <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 801231e:	4b29      	ldr	r3, [pc, #164]	; (80123c4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012320:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	605a      	str	r2, [r3, #4]
            break;
 8012328:	e047      	b.n	80123ba <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	4a25      	ldr	r2, [pc, #148]	; (80123c4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801232e:	605a      	str	r2, [r3, #4]
            break;
 8012330:	e043      	b.n	80123ba <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	4a24      	ldr	r2, [pc, #144]	; (80123c8 <LoRaMacMibGetRequestConfirm+0x3ac>)
 8012336:	605a      	str	r2, [r3, #4]
#else
            mibGet->Param.BackupContexts = NULL;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 8012338:	e03f      	b.n	80123ba <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 801233a:	4b22      	ldr	r3, [pc, #136]	; (80123c4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801233c:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	605a      	str	r2, [r3, #4]
            break;
 8012344:	e039      	b.n	80123ba <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	4a1e      	ldr	r2, [pc, #120]	; (80123c4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801234a:	f8d2 212c 	ldr.w	r2, [r2, #300]	; 0x12c
 801234e:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8012350:	687c      	ldr	r4, [r7, #4]
 8012352:	f003 f9a3 	bl	801569c <RegionGetVersion>
 8012356:	60a0      	str	r0, [r4, #8]
            break;
 8012358:	e02f      	b.n	80123ba <LoRaMacMibGetRequestConfirm+0x39e>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 801235a:	4b1a      	ldr	r3, [pc, #104]	; (80123c4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801235c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	605a      	str	r2, [r3, #4]
            break;
 8012364:	e029      	b.n	80123ba <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 8012366:	4b17      	ldr	r3, [pc, #92]	; (80123c4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012368:	f893 211f 	ldrb.w	r2, [r3, #287]	; 0x11f
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	711a      	strb	r2, [r3, #4]
            break;
 8012370:	e023      	b.n	80123ba <LoRaMacMibGetRequestConfirm+0x39e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8012372:	4b14      	ldr	r3, [pc, #80]	; (80123c4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012374:	f8b3 2088 	ldrh.w	r2, [r3, #136]	; 0x88
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	809a      	strh	r2, [r3, #4]
            break;
 801237c:	e01d      	b.n	80123ba <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 801237e:	4b11      	ldr	r3, [pc, #68]	; (80123c4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012380:	f8b3 208a 	ldrh.w	r2, [r3, #138]	; 0x8a
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	809a      	strh	r2, [r3, #4]
            break;
 8012388:	e017      	b.n	80123ba <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 801238a:	4b0e      	ldr	r3, [pc, #56]	; (80123c4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801238c:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	809a      	strh	r2, [r3, #4]
            break;
 8012394:	e011      	b.n	80123ba <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 8012396:	4b0b      	ldr	r3, [pc, #44]	; (80123c4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8012398:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	809a      	strh	r2, [r3, #4]
            break;
 80123a0:	e00b      	b.n	80123ba <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.RssiFreeThreshold = Nvm.RegionGroup2.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 80123a2:	2318      	movs	r3, #24
 80123a4:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 80123a6:	e008      	b.n	80123ba <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.CarrierSenseTime = Nvm.RegionGroup2.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 80123a8:	2318      	movs	r3, #24
 80123aa:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 80123ac:	e005      	b.n	80123ba <LoRaMacMibGetRequestConfirm+0x39e>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 80123ae:	6878      	ldr	r0, [r7, #4]
 80123b0:	f001 f81f 	bl	80133f2 <LoRaMacClassBMibGetRequestConfirm>
 80123b4:	4603      	mov	r3, r0
 80123b6:	75fb      	strb	r3, [r7, #23]
            break;
 80123b8:	bf00      	nop
        }
    }
    return status;
 80123ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80123bc:	4618      	mov	r0, r3
 80123be:	371c      	adds	r7, #28
 80123c0:	46bd      	mov	sp, r7
 80123c2:	bd90      	pop	{r4, r7, pc}
 80123c4:	20000c5c 	.word	0x20000c5c
 80123c8:	20001228 	.word	0x20001228

080123cc <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 80123cc:	b580      	push	{r7, lr}
 80123ce:	b086      	sub	sp, #24
 80123d0:	af00      	add	r7, sp, #0
 80123d2:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80123d4:	2300      	movs	r3, #0
 80123d6:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d101      	bne.n	80123e2 <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80123de:	2303      	movs	r3, #3
 80123e0:	e396      	b.n	8012b10 <LoRaMacMibSetRequestConfirm+0x744>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 80123e2:	4bbd      	ldr	r3, [pc, #756]	; (80126d8 <LoRaMacMibSetRequestConfirm+0x30c>)
 80123e4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80123e8:	f003 0302 	and.w	r3, r3, #2
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d001      	beq.n	80123f4 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 80123f0:	2301      	movs	r3, #1
 80123f2:	e38d      	b.n	8012b10 <LoRaMacMibSetRequestConfirm+0x744>
    }

    switch( mibSet->Type )
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	781b      	ldrb	r3, [r3, #0]
 80123f8:	2b41      	cmp	r3, #65	; 0x41
 80123fa:	f200 835d 	bhi.w	8012ab8 <LoRaMacMibSetRequestConfirm+0x6ec>
 80123fe:	a201      	add	r2, pc, #4	; (adr r2, 8012404 <LoRaMacMibSetRequestConfirm+0x38>)
 8012400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012404:	0801250d 	.word	0x0801250d
 8012408:	0801251d 	.word	0x0801251d
 801240c:	08012537 	.word	0x08012537
 8012410:	0801254f 	.word	0x0801254f
 8012414:	08012567 	.word	0x08012567
 8012418:	08012573 	.word	0x08012573
 801241c:	0801257f 	.word	0x0801257f
 8012420:	080125a9 	.word	0x080125a9
 8012424:	080125cf 	.word	0x080125cf
 8012428:	080125f5 	.word	0x080125f5
 801242c:	0801261b 	.word	0x0801261b
 8012430:	08012641 	.word	0x08012641
 8012434:	08012667 	.word	0x08012667
 8012438:	0801268d 	.word	0x0801268d
 801243c:	080126b3 	.word	0x080126b3
 8012440:	080126e1 	.word	0x080126e1
 8012444:	08012701 	.word	0x08012701
 8012448:	08012ab9 	.word	0x08012ab9
 801244c:	0801270d 	.word	0x0801270d
 8012450:	0801277d 	.word	0x0801277d
 8012454:	080127bd 	.word	0x080127bd
 8012458:	0801281f 	.word	0x0801281f
 801245c:	0801288f 	.word	0x0801288f
 8012460:	0801285f 	.word	0x0801285f
 8012464:	080128bf 	.word	0x080128bf
 8012468:	080128e1 	.word	0x080128e1
 801246c:	080128eb 	.word	0x080128eb
 8012470:	080128f5 	.word	0x080128f5
 8012474:	080128ff 	.word	0x080128ff
 8012478:	08012909 	.word	0x08012909
 801247c:	08012ab9 	.word	0x08012ab9
 8012480:	08012913 	.word	0x08012913
 8012484:	08012945 	.word	0x08012945
 8012488:	080129b9 	.word	0x080129b9
 801248c:	0801297f 	.word	0x0801297f
 8012490:	080129eb 	.word	0x080129eb
 8012494:	08012a01 	.word	0x08012a01
 8012498:	08012a19 	.word	0x08012a19
 801249c:	08012a25 	.word	0x08012a25
 80124a0:	08012a31 	.word	0x08012a31
 80124a4:	08012ab9 	.word	0x08012ab9
 80124a8:	08012a3b 	.word	0x08012a3b
 80124ac:	08012ab9 	.word	0x08012ab9
 80124b0:	08012ab9 	.word	0x08012ab9
 80124b4:	08012ab9 	.word	0x08012ab9
 80124b8:	08012ab9 	.word	0x08012ab9
 80124bc:	08012ab9 	.word	0x08012ab9
 80124c0:	08012ab9 	.word	0x08012ab9
 80124c4:	08012ab9 	.word	0x08012ab9
 80124c8:	08012ab9 	.word	0x08012ab9
 80124cc:	08012ab9 	.word	0x08012ab9
 80124d0:	08012ab9 	.word	0x08012ab9
 80124d4:	08012ab9 	.word	0x08012ab9
 80124d8:	08012ab9 	.word	0x08012ab9
 80124dc:	08012ab9 	.word	0x08012ab9
 80124e0:	08012ab9 	.word	0x08012ab9
 80124e4:	08012ab9 	.word	0x08012ab9
 80124e8:	08012ab9 	.word	0x08012ab9
 80124ec:	08012a65 	.word	0x08012a65
 80124f0:	08012a71 	.word	0x08012a71
 80124f4:	08012a7d 	.word	0x08012a7d
 80124f8:	08012a89 	.word	0x08012a89
 80124fc:	08012a95 	.word	0x08012a95
 8012500:	08012aa1 	.word	0x08012aa1
 8012504:	08012aad 	.word	0x08012aad
 8012508:	08012ab3 	.word	0x08012ab3
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	791b      	ldrb	r3, [r3, #4]
 8012510:	4618      	mov	r0, r3
 8012512:	f7fd fabb 	bl	800fa8c <SwitchClass>
 8012516:	4603      	mov	r3, r0
 8012518:	75fb      	strb	r3, [r7, #23]
            break;
 801251a:	e2ee      	b.n	8012afa <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	791b      	ldrb	r3, [r3, #4]
 8012520:	2b02      	cmp	r3, #2
 8012522:	d005      	beq.n	8012530 <LoRaMacMibSetRequestConfirm+0x164>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	791a      	ldrb	r2, [r3, #4]
 8012528:	4b6c      	ldr	r3, [pc, #432]	; (80126dc <LoRaMacMibSetRequestConfirm+0x310>)
 801252a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801252e:	e2e4      	b.n	8012afa <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012530:	2303      	movs	r3, #3
 8012532:	75fb      	strb	r3, [r7, #23]
            break;
 8012534:	e2e1      	b.n	8012afa <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	685b      	ldr	r3, [r3, #4]
 801253a:	4618      	mov	r0, r3
 801253c:	f7fa f8b4 	bl	800c6a8 <SecureElementSetDevEui>
 8012540:	4603      	mov	r3, r0
 8012542:	2b00      	cmp	r3, #0
 8012544:	f000 82be 	beq.w	8012ac4 <LoRaMacMibSetRequestConfirm+0x6f8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012548:	2303      	movs	r3, #3
 801254a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801254c:	e2ba      	b.n	8012ac4 <LoRaMacMibSetRequestConfirm+0x6f8>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	685b      	ldr	r3, [r3, #4]
 8012552:	4618      	mov	r0, r3
 8012554:	f7fa f8d8 	bl	800c708 <SecureElementSetJoinEui>
 8012558:	4603      	mov	r3, r0
 801255a:	2b00      	cmp	r3, #0
 801255c:	f000 82b4 	beq.w	8012ac8 <LoRaMacMibSetRequestConfirm+0x6fc>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012560:	2303      	movs	r3, #3
 8012562:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012564:	e2b0      	b.n	8012ac8 <LoRaMacMibSetRequestConfirm+0x6fc>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	791a      	ldrb	r2, [r3, #4]
 801256a:	4b5c      	ldr	r3, [pc, #368]	; (80126dc <LoRaMacMibSetRequestConfirm+0x310>)
 801256c:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
            break;
 8012570:	e2c3      	b.n	8012afa <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	685b      	ldr	r3, [r3, #4]
 8012576:	4a59      	ldr	r2, [pc, #356]	; (80126dc <LoRaMacMibSetRequestConfirm+0x310>)
 8012578:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
            break;
 801257c:	e2bd      	b.n	8012afa <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEV_ADDR:
        {
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 801257e:	4b57      	ldr	r3, [pc, #348]	; (80126dc <LoRaMacMibSetRequestConfirm+0x310>)
 8012580:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	685b      	ldr	r3, [r3, #4]
 8012588:	4619      	mov	r1, r3
 801258a:	4610      	mov	r0, r2
 801258c:	f7fa f8ec 	bl	800c768 <SecureElementSetDevAddr>
 8012590:	4603      	mov	r3, r0
 8012592:	2b00      	cmp	r3, #0
 8012594:	d002      	beq.n	801259c <LoRaMacMibSetRequestConfirm+0x1d0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012596:	2303      	movs	r3, #3
 8012598:	75fb      	strb	r3, [r7, #23]
            else
            {
                /* Update Nvm.MacGroup2.devAdr to handle set/get sequence */
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
            }
            break;
 801259a:	e2ae      	b.n	8012afa <LoRaMacMibSetRequestConfirm+0x72e>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	685b      	ldr	r3, [r3, #4]
 80125a0:	4a4e      	ldr	r2, [pc, #312]	; (80126dc <LoRaMacMibSetRequestConfirm+0x310>)
 80125a2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
            break;
 80125a6:	e2a8      	b.n	8012afa <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	685b      	ldr	r3, [r3, #4]
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d00b      	beq.n	80125c8 <LoRaMacMibSetRequestConfirm+0x1fc>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	685b      	ldr	r3, [r3, #4]
 80125b4:	4619      	mov	r1, r3
 80125b6:	2000      	movs	r0, #0
 80125b8:	f002 f868 	bl	801468c <LoRaMacCryptoSetKey>
 80125bc:	4603      	mov	r3, r0
 80125be:	2b00      	cmp	r3, #0
 80125c0:	f000 8284 	beq.w	8012acc <LoRaMacMibSetRequestConfirm+0x700>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80125c4:	2311      	movs	r3, #17
 80125c6:	e2a3      	b.n	8012b10 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80125c8:	2303      	movs	r3, #3
 80125ca:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80125cc:	e27e      	b.n	8012acc <LoRaMacMibSetRequestConfirm+0x700>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	685b      	ldr	r3, [r3, #4]
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d00b      	beq.n	80125ee <LoRaMacMibSetRequestConfirm+0x222>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	685b      	ldr	r3, [r3, #4]
 80125da:	4619      	mov	r1, r3
 80125dc:	2001      	movs	r0, #1
 80125de:	f002 f855 	bl	801468c <LoRaMacCryptoSetKey>
 80125e2:	4603      	mov	r3, r0
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	f000 8273 	beq.w	8012ad0 <LoRaMacMibSetRequestConfirm+0x704>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80125ea:	2311      	movs	r3, #17
 80125ec:	e290      	b.n	8012b10 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80125ee:	2303      	movs	r3, #3
 80125f0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80125f2:	e26d      	b.n	8012ad0 <LoRaMacMibSetRequestConfirm+0x704>
            break;
        }
#else
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	685b      	ldr	r3, [r3, #4]
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d00b      	beq.n	8012614 <LoRaMacMibSetRequestConfirm+0x248>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	685b      	ldr	r3, [r3, #4]
 8012600:	4619      	mov	r1, r3
 8012602:	2008      	movs	r0, #8
 8012604:	f002 f842 	bl	801468c <LoRaMacCryptoSetKey>
 8012608:	4603      	mov	r3, r0
 801260a:	2b00      	cmp	r3, #0
 801260c:	f000 8262 	beq.w	8012ad4 <LoRaMacMibSetRequestConfirm+0x708>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012610:	2311      	movs	r3, #17
 8012612:	e27d      	b.n	8012b10 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012614:	2303      	movs	r3, #3
 8012616:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012618:	e25c      	b.n	8012ad4 <LoRaMacMibSetRequestConfirm+0x708>
        }
#endif /* LORAMAC_VERSION */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	685b      	ldr	r3, [r3, #4]
 801261e:	2b00      	cmp	r3, #0
 8012620:	d00b      	beq.n	801263a <LoRaMacMibSetRequestConfirm+0x26e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	685b      	ldr	r3, [r3, #4]
 8012626:	4619      	mov	r1, r3
 8012628:	2009      	movs	r0, #9
 801262a:	f002 f82f 	bl	801468c <LoRaMacCryptoSetKey>
 801262e:	4603      	mov	r3, r0
 8012630:	2b00      	cmp	r3, #0
 8012632:	f000 8251 	beq.w	8012ad8 <LoRaMacMibSetRequestConfirm+0x70c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012636:	2311      	movs	r3, #17
 8012638:	e26a      	b.n	8012b10 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801263a:	2303      	movs	r3, #3
 801263c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801263e:	e24b      	b.n	8012ad8 <LoRaMacMibSetRequestConfirm+0x70c>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	685b      	ldr	r3, [r3, #4]
 8012644:	2b00      	cmp	r3, #0
 8012646:	d00b      	beq.n	8012660 <LoRaMacMibSetRequestConfirm+0x294>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	685b      	ldr	r3, [r3, #4]
 801264c:	4619      	mov	r1, r3
 801264e:	200c      	movs	r0, #12
 8012650:	f002 f81c 	bl	801468c <LoRaMacCryptoSetKey>
 8012654:	4603      	mov	r3, r0
 8012656:	2b00      	cmp	r3, #0
 8012658:	f000 8240 	beq.w	8012adc <LoRaMacMibSetRequestConfirm+0x710>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801265c:	2311      	movs	r3, #17
 801265e:	e257      	b.n	8012b10 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012660:	2303      	movs	r3, #3
 8012662:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012664:	e23a      	b.n	8012adc <LoRaMacMibSetRequestConfirm+0x710>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	685b      	ldr	r3, [r3, #4]
 801266a:	2b00      	cmp	r3, #0
 801266c:	d00b      	beq.n	8012686 <LoRaMacMibSetRequestConfirm+0x2ba>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	685b      	ldr	r3, [r3, #4]
 8012672:	4619      	mov	r1, r3
 8012674:	200d      	movs	r0, #13
 8012676:	f002 f809 	bl	801468c <LoRaMacCryptoSetKey>
 801267a:	4603      	mov	r3, r0
 801267c:	2b00      	cmp	r3, #0
 801267e:	f000 822f 	beq.w	8012ae0 <LoRaMacMibSetRequestConfirm+0x714>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012682:	2311      	movs	r3, #17
 8012684:	e244      	b.n	8012b10 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012686:	2303      	movs	r3, #3
 8012688:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801268a:	e229      	b.n	8012ae0 <LoRaMacMibSetRequestConfirm+0x714>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	685b      	ldr	r3, [r3, #4]
 8012690:	2b00      	cmp	r3, #0
 8012692:	d00b      	beq.n	80126ac <LoRaMacMibSetRequestConfirm+0x2e0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	685b      	ldr	r3, [r3, #4]
 8012698:	4619      	mov	r1, r3
 801269a:	200e      	movs	r0, #14
 801269c:	f001 fff6 	bl	801468c <LoRaMacCryptoSetKey>
 80126a0:	4603      	mov	r3, r0
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	f000 821e 	beq.w	8012ae4 <LoRaMacMibSetRequestConfirm+0x718>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80126a8:	2311      	movs	r3, #17
 80126aa:	e231      	b.n	8012b10 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80126ac:	2303      	movs	r3, #3
 80126ae:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80126b0:	e218      	b.n	8012ae4 <LoRaMacMibSetRequestConfirm+0x718>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	685b      	ldr	r3, [r3, #4]
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d00b      	beq.n	80126d2 <LoRaMacMibSetRequestConfirm+0x306>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	685b      	ldr	r3, [r3, #4]
 80126be:	4619      	mov	r1, r3
 80126c0:	200f      	movs	r0, #15
 80126c2:	f001 ffe3 	bl	801468c <LoRaMacCryptoSetKey>
 80126c6:	4603      	mov	r3, r0
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	f000 820d 	beq.w	8012ae8 <LoRaMacMibSetRequestConfirm+0x71c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80126ce:	2311      	movs	r3, #17
 80126d0:	e21e      	b.n	8012b10 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80126d2:	2303      	movs	r3, #3
 80126d4:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80126d6:	e207      	b.n	8012ae8 <LoRaMacMibSetRequestConfirm+0x71c>
 80126d8:	20000740 	.word	0x20000740
 80126dc:	20000c5c 	.word	0x20000c5c
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	791a      	ldrb	r2, [r3, #4]
 80126e4:	4bb2      	ldr	r3, [pc, #712]	; (80129b0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80126e6:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80126ea:	4bb2      	ldr	r3, [pc, #712]	; (80129b4 <LoRaMacMibSetRequestConfirm+0x5e8>)
 80126ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80126ee:	4ab0      	ldr	r2, [pc, #704]	; (80129b0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80126f0:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 80126f4:	4610      	mov	r0, r2
 80126f6:	4798      	blx	r3
            Radio.Sleep( );
 80126f8:	4bae      	ldr	r3, [pc, #696]	; (80129b4 <LoRaMacMibSetRequestConfirm+0x5e8>)
 80126fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80126fc:	4798      	blx	r3
            break;
 80126fe:	e1fc      	b.n	8012afa <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	791a      	ldrb	r2, [r3, #4]
 8012704:	4baa      	ldr	r3, [pc, #680]	; (80129b0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012706:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
            break;
 801270a:	e1f6      	b.n	8012afa <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	7a1b      	ldrb	r3, [r3, #8]
 8012710:	b25b      	sxtb	r3, r3
 8012712:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012714:	4ba6      	ldr	r3, [pc, #664]	; (80129b0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012716:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 801271a:	727b      	strb	r3, [r7, #9]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 801271c:	4ba4      	ldr	r3, [pc, #656]	; (80129b0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801271e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012722:	f107 0108 	add.w	r1, r7, #8
 8012726:	2207      	movs	r2, #7
 8012728:	4618      	mov	r0, r3
 801272a:	f002 fdf7 	bl	801531c <RegionVerify>
 801272e:	4603      	mov	r3, r0
 8012730:	f083 0301 	eor.w	r3, r3, #1
 8012734:	b2db      	uxtb	r3, r3
 8012736:	2b00      	cmp	r3, #0
 8012738:	d002      	beq.n	8012740 <LoRaMacMibSetRequestConfirm+0x374>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801273a:	2303      	movs	r3, #3
 801273c:	75fb      	strb	r3, [r7, #23]
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            break;
 801273e:	e1dc      	b.n	8012afa <LoRaMacMibSetRequestConfirm+0x72e>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	685b      	ldr	r3, [r3, #4]
 8012744:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8012746:	4b9a      	ldr	r3, [pc, #616]	; (80129b0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012748:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801274c:	f107 0108 	add.w	r1, r7, #8
 8012750:	2200      	movs	r2, #0
 8012752:	4618      	mov	r0, r3
 8012754:	f002 fde2 	bl	801531c <RegionVerify>
 8012758:	4603      	mov	r3, r0
 801275a:	f083 0301 	eor.w	r3, r3, #1
 801275e:	b2db      	uxtb	r3, r3
 8012760:	2b00      	cmp	r3, #0
 8012762:	d002      	beq.n	801276a <LoRaMacMibSetRequestConfirm+0x39e>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012764:	2303      	movs	r3, #3
 8012766:	75fb      	strb	r3, [r7, #23]
            break;
 8012768:	e1c7      	b.n	8012afa <LoRaMacMibSetRequestConfirm+0x72e>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 801276a:	4b91      	ldr	r3, [pc, #580]	; (80129b0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801276c:	687a      	ldr	r2, [r7, #4]
 801276e:	336c      	adds	r3, #108	; 0x6c
 8012770:	3204      	adds	r2, #4
 8012772:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012776:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801277a:	e1be      	b.n	8012afa <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	7a1b      	ldrb	r3, [r3, #8]
 8012780:	b25b      	sxtb	r3, r3
 8012782:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012784:	4b8a      	ldr	r3, [pc, #552]	; (80129b0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012786:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 801278a:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 801278c:	4b88      	ldr	r3, [pc, #544]	; (80129b0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801278e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012792:	f107 0108 	add.w	r1, r7, #8
 8012796:	2207      	movs	r2, #7
 8012798:	4618      	mov	r0, r3
 801279a:	f002 fdbf 	bl	801531c <RegionVerify>
 801279e:	4603      	mov	r3, r0
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d008      	beq.n	80127b6 <LoRaMacMibSetRequestConfirm+0x3ea>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 80127a4:	4b82      	ldr	r3, [pc, #520]	; (80129b0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80127a6:	687a      	ldr	r2, [r7, #4]
 80127a8:	33b4      	adds	r3, #180	; 0xb4
 80127aa:	3204      	adds	r2, #4
 80127ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80127b0:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80127b4:	e1a1      	b.n	8012afa <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80127b6:	2303      	movs	r3, #3
 80127b8:	75fb      	strb	r3, [r7, #23]
            break;
 80127ba:	e19e      	b.n	8012afa <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	7a1b      	ldrb	r3, [r3, #8]
 80127c0:	b25b      	sxtb	r3, r3
 80127c2:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80127c4:	4b7a      	ldr	r3, [pc, #488]	; (80129b0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80127c6:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80127ca:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80127cc:	4b78      	ldr	r3, [pc, #480]	; (80129b0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80127ce:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80127d2:	f107 0108 	add.w	r1, r7, #8
 80127d6:	2207      	movs	r2, #7
 80127d8:	4618      	mov	r0, r3
 80127da:	f002 fd9f 	bl	801531c <RegionVerify>
 80127de:	4603      	mov	r3, r0
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d019      	beq.n	8012818 <LoRaMacMibSetRequestConfirm+0x44c>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 80127e4:	4b72      	ldr	r3, [pc, #456]	; (80129b0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80127e6:	687a      	ldr	r2, [r7, #4]
 80127e8:	3374      	adds	r3, #116	; 0x74
 80127ea:	3204      	adds	r2, #4
 80127ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80127f0:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 80127f4:	4b6e      	ldr	r3, [pc, #440]	; (80129b0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80127f6:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80127fa:	2b02      	cmp	r3, #2
 80127fc:	f040 8176 	bne.w	8012aec <LoRaMacMibSetRequestConfirm+0x720>
 8012800:	4b6b      	ldr	r3, [pc, #428]	; (80129b0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012802:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8012806:	2b00      	cmp	r3, #0
 8012808:	f000 8170 	beq.w	8012aec <LoRaMacMibSetRequestConfirm+0x720>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 801280c:	4b69      	ldr	r3, [pc, #420]	; (80129b4 <LoRaMacMibSetRequestConfirm+0x5e8>)
 801280e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012810:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8012812:	f7fe fc1b 	bl	801104c <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012816:	e169      	b.n	8012aec <LoRaMacMibSetRequestConfirm+0x720>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012818:	2303      	movs	r3, #3
 801281a:	75fb      	strb	r3, [r7, #23]
            break;
 801281c:	e166      	b.n	8012aec <LoRaMacMibSetRequestConfirm+0x720>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	7a1b      	ldrb	r3, [r3, #8]
 8012822:	b25b      	sxtb	r3, r3
 8012824:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012826:	4b62      	ldr	r3, [pc, #392]	; (80129b0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012828:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 801282c:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 801282e:	4b60      	ldr	r3, [pc, #384]	; (80129b0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012830:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012834:	f107 0108 	add.w	r1, r7, #8
 8012838:	2207      	movs	r2, #7
 801283a:	4618      	mov	r0, r3
 801283c:	f002 fd6e 	bl	801531c <RegionVerify>
 8012840:	4603      	mov	r3, r0
 8012842:	2b00      	cmp	r3, #0
 8012844:	d008      	beq.n	8012858 <LoRaMacMibSetRequestConfirm+0x48c>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8012846:	4b5a      	ldr	r3, [pc, #360]	; (80129b0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012848:	687a      	ldr	r2, [r7, #4]
 801284a:	33bc      	adds	r3, #188	; 0xbc
 801284c:	3204      	adds	r2, #4
 801284e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012852:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012856:	e150      	b.n	8012afa <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012858:	2303      	movs	r3, #3
 801285a:	75fb      	strb	r3, [r7, #23]
            break;
 801285c:	e14d      	b.n	8012afa <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	685b      	ldr	r3, [r3, #4]
 8012862:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8012864:	2301      	movs	r3, #1
 8012866:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8012868:	4b51      	ldr	r3, [pc, #324]	; (80129b0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801286a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801286e:	f107 020c 	add.w	r2, r7, #12
 8012872:	4611      	mov	r1, r2
 8012874:	4618      	mov	r0, r3
 8012876:	f002 fd89 	bl	801538c <RegionChanMaskSet>
 801287a:	4603      	mov	r3, r0
 801287c:	f083 0301 	eor.w	r3, r3, #1
 8012880:	b2db      	uxtb	r3, r3
 8012882:	2b00      	cmp	r3, #0
 8012884:	f000 8134 	beq.w	8012af0 <LoRaMacMibSetRequestConfirm+0x724>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012888:	2303      	movs	r3, #3
 801288a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801288c:	e130      	b.n	8012af0 <LoRaMacMibSetRequestConfirm+0x724>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	685b      	ldr	r3, [r3, #4]
 8012892:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8012894:	2300      	movs	r3, #0
 8012896:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8012898:	4b45      	ldr	r3, [pc, #276]	; (80129b0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801289a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801289e:	f107 020c 	add.w	r2, r7, #12
 80128a2:	4611      	mov	r1, r2
 80128a4:	4618      	mov	r0, r3
 80128a6:	f002 fd71 	bl	801538c <RegionChanMaskSet>
 80128aa:	4603      	mov	r3, r0
 80128ac:	f083 0301 	eor.w	r3, r3, #1
 80128b0:	b2db      	uxtb	r3, r3
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	f000 811e 	beq.w	8012af4 <LoRaMacMibSetRequestConfirm+0x728>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80128b8:	2303      	movs	r3, #3
 80128ba:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80128bc:	e11a      	b.n	8012af4 <LoRaMacMibSetRequestConfirm+0x728>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	791b      	ldrb	r3, [r3, #4]
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d009      	beq.n	80128da <LoRaMacMibSetRequestConfirm+0x50e>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 80128ca:	2b0f      	cmp	r3, #15
 80128cc:	d805      	bhi.n	80128da <LoRaMacMibSetRequestConfirm+0x50e>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	791a      	ldrb	r2, [r3, #4]
 80128d2:	4b37      	ldr	r3, [pc, #220]	; (80129b0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80128d4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80128d8:	e10f      	b.n	8012afa <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80128da:	2303      	movs	r3, #3
 80128dc:	75fb      	strb	r3, [r7, #23]
            break;
 80128de:	e10c      	b.n	8012afa <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	685b      	ldr	r3, [r3, #4]
 80128e4:	4a32      	ldr	r2, [pc, #200]	; (80129b0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80128e6:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 80128e8:	e107      	b.n	8012afa <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	685b      	ldr	r3, [r3, #4]
 80128ee:	4a30      	ldr	r2, [pc, #192]	; (80129b0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80128f0:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 80128f2:	e102      	b.n	8012afa <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	685b      	ldr	r3, [r3, #4]
 80128f8:	4a2d      	ldr	r2, [pc, #180]	; (80129b0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80128fa:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 80128fc:	e0fd      	b.n	8012afa <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	685b      	ldr	r3, [r3, #4]
 8012902:	4a2b      	ldr	r2, [pc, #172]	; (80129b0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012904:	6613      	str	r3, [r2, #96]	; 0x60
            break;
 8012906:	e0f8      	b.n	8012afa <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	685b      	ldr	r3, [r3, #4]
 801290c:	4a28      	ldr	r2, [pc, #160]	; (80129b0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801290e:	6653      	str	r3, [r2, #100]	; 0x64
            break;
 8012910:	e0f3      	b.n	8012afa <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012918:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 801291a:	4b25      	ldr	r3, [pc, #148]	; (80129b0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801291c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012920:	f107 0108 	add.w	r1, r7, #8
 8012924:	2206      	movs	r2, #6
 8012926:	4618      	mov	r0, r3
 8012928:	f002 fcf8 	bl	801531c <RegionVerify>
 801292c:	4603      	mov	r3, r0
 801292e:	2b00      	cmp	r3, #0
 8012930:	d005      	beq.n	801293e <LoRaMacMibSetRequestConfirm+0x572>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8012932:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8012936:	4b1e      	ldr	r3, [pc, #120]	; (80129b0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012938:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801293c:	e0dd      	b.n	8012afa <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801293e:	2303      	movs	r3, #3
 8012940:	75fb      	strb	r3, [r7, #23]
            break;
 8012942:	e0da      	b.n	8012afa <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801294a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801294c:	4b18      	ldr	r3, [pc, #96]	; (80129b0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801294e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8012952:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8012954:	4b16      	ldr	r3, [pc, #88]	; (80129b0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012956:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801295a:	f107 0108 	add.w	r1, r7, #8
 801295e:	2205      	movs	r2, #5
 8012960:	4618      	mov	r0, r3
 8012962:	f002 fcdb 	bl	801531c <RegionVerify>
 8012966:	4603      	mov	r3, r0
 8012968:	2b00      	cmp	r3, #0
 801296a:	d005      	beq.n	8012978 <LoRaMacMibSetRequestConfirm+0x5ac>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 801296c:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8012970:	4b0f      	ldr	r3, [pc, #60]	; (80129b0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012972:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012976:	e0c0      	b.n	8012afa <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012978:	2303      	movs	r3, #3
 801297a:	75fb      	strb	r3, [r7, #23]
            break;
 801297c:	e0bd      	b.n	8012afa <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012984:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8012986:	4b0a      	ldr	r3, [pc, #40]	; (80129b0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012988:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801298c:	f107 0108 	add.w	r1, r7, #8
 8012990:	220a      	movs	r2, #10
 8012992:	4618      	mov	r0, r3
 8012994:	f002 fcc2 	bl	801531c <RegionVerify>
 8012998:	4603      	mov	r3, r0
 801299a:	2b00      	cmp	r3, #0
 801299c:	d005      	beq.n	80129aa <LoRaMacMibSetRequestConfirm+0x5de>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 801299e:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80129a2:	4b03      	ldr	r3, [pc, #12]	; (80129b0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80129a4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80129a8:	e0a7      	b.n	8012afa <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80129aa:	2303      	movs	r3, #3
 80129ac:	75fb      	strb	r3, [r7, #23]
            break;
 80129ae:	e0a4      	b.n	8012afa <LoRaMacMibSetRequestConfirm+0x72e>
 80129b0:	20000c5c 	.word	0x20000c5c
 80129b4:	0801ea54 	.word	0x0801ea54
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80129be:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 80129c0:	4b55      	ldr	r3, [pc, #340]	; (8012b18 <LoRaMacMibSetRequestConfirm+0x74c>)
 80129c2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80129c6:	f107 0108 	add.w	r1, r7, #8
 80129ca:	2209      	movs	r2, #9
 80129cc:	4618      	mov	r0, r3
 80129ce:	f002 fca5 	bl	801531c <RegionVerify>
 80129d2:	4603      	mov	r3, r0
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d005      	beq.n	80129e4 <LoRaMacMibSetRequestConfirm+0x618>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 80129d8:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80129dc:	4b4e      	ldr	r3, [pc, #312]	; (8012b18 <LoRaMacMibSetRequestConfirm+0x74c>)
 80129de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80129e2:	e08a      	b.n	8012afa <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80129e4:	2303      	movs	r3, #3
 80129e6:	75fb      	strb	r3, [r7, #23]
            break;
 80129e8:	e087      	b.n	8012afa <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	685b      	ldr	r3, [r3, #4]
 80129ee:	4a4a      	ldr	r2, [pc, #296]	; (8012b18 <LoRaMacMibSetRequestConfirm+0x74c>)
 80129f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80129f4:	4b48      	ldr	r3, [pc, #288]	; (8012b18 <LoRaMacMibSetRequestConfirm+0x74c>)
 80129f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80129fa:	4a47      	ldr	r2, [pc, #284]	; (8012b18 <LoRaMacMibSetRequestConfirm+0x74c>)
 80129fc:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 80129fe:	e07c      	b.n	8012afa <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	791a      	ldrb	r2, [r3, #4]
 8012a04:	4b44      	ldr	r3, [pc, #272]	; (8012b18 <LoRaMacMibSetRequestConfirm+0x74c>)
 8012a06:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 8012a0a:	4b43      	ldr	r3, [pc, #268]	; (8012b18 <LoRaMacMibSetRequestConfirm+0x74c>)
 8012a0c:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 8012a10:	4b41      	ldr	r3, [pc, #260]	; (8012b18 <LoRaMacMibSetRequestConfirm+0x74c>)
 8012a12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            break;
 8012a16:	e070      	b.n	8012afa <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	685b      	ldr	r3, [r3, #4]
 8012a1c:	4a3e      	ldr	r2, [pc, #248]	; (8012b18 <LoRaMacMibSetRequestConfirm+0x74c>)
 8012a1e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            break;
 8012a22:	e06a      	b.n	8012afa <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	685b      	ldr	r3, [r3, #4]
 8012a28:	4a3b      	ldr	r2, [pc, #236]	; (8012b18 <LoRaMacMibSetRequestConfirm+0x74c>)
 8012a2a:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
            break;
 8012a2e:	e064      	b.n	8012afa <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 8012a30:	f7fe fd40 	bl	80114b4 <RestoreNvmData>
 8012a34:	4603      	mov	r3, r0
 8012a36:	75fb      	strb	r3, [r7, #23]
            break;
 8012a38:	e05f      	b.n	8012afa <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	799b      	ldrb	r3, [r3, #6]
 8012a3e:	2b01      	cmp	r3, #1
 8012a40:	d80d      	bhi.n	8012a5e <LoRaMacMibSetRequestConfirm+0x692>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8012a42:	4a35      	ldr	r2, [pc, #212]	; (8012b18 <LoRaMacMibSetRequestConfirm+0x74c>)
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	685b      	ldr	r3, [r3, #4]
 8012a48:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	6858      	ldr	r0, [r3, #4]
 8012a50:	f001 fd7e 	bl	8014550 <LoRaMacCryptoSetLrWanVersion>
 8012a54:	4603      	mov	r3, r0
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d04e      	beq.n	8012af8 <LoRaMacMibSetRequestConfirm+0x72c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012a5a:	2311      	movs	r3, #17
 8012a5c:	e058      	b.n	8012b10 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012a5e:	2303      	movs	r3, #3
 8012a60:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012a62:	e049      	b.n	8012af8 <LoRaMacMibSetRequestConfirm+0x72c>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	685b      	ldr	r3, [r3, #4]
 8012a68:	4a2b      	ldr	r2, [pc, #172]	; (8012b18 <LoRaMacMibSetRequestConfirm+0x74c>)
 8012a6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
            break;
 8012a6e:	e044      	b.n	8012afa <LoRaMacMibSetRequestConfirm+0x72e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	791a      	ldrb	r2, [r3, #4]
 8012a74:	4b28      	ldr	r3, [pc, #160]	; (8012b18 <LoRaMacMibSetRequestConfirm+0x74c>)
 8012a76:	f883 211f 	strb.w	r2, [r3, #287]	; 0x11f
            break;
 8012a7a:	e03e      	b.n	8012afa <LoRaMacMibSetRequestConfirm+0x72e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	889a      	ldrh	r2, [r3, #4]
 8012a80:	4b25      	ldr	r3, [pc, #148]	; (8012b18 <LoRaMacMibSetRequestConfirm+0x74c>)
 8012a82:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
            break;
 8012a86:	e038      	b.n	8012afa <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	889a      	ldrh	r2, [r3, #4]
 8012a8c:	4b22      	ldr	r3, [pc, #136]	; (8012b18 <LoRaMacMibSetRequestConfirm+0x74c>)
 8012a8e:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
            break;
 8012a92:	e032      	b.n	8012afa <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	889a      	ldrh	r2, [r3, #4]
 8012a98:	4b1f      	ldr	r3, [pc, #124]	; (8012b18 <LoRaMacMibSetRequestConfirm+0x74c>)
 8012a9a:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
            break;
 8012a9e:	e02c      	b.n	8012afa <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	889a      	ldrh	r2, [r3, #4]
 8012aa4:	4b1c      	ldr	r3, [pc, #112]	; (8012b18 <LoRaMacMibSetRequestConfirm+0x74c>)
 8012aa6:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
            break;
 8012aaa:	e026      	b.n	8012afa <LoRaMacMibSetRequestConfirm+0x72e>
            else
            {
                Nvm.RegionGroup2.RssiFreeThreshold = mibSet->Param.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8012aac:	2318      	movs	r3, #24
 8012aae:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8012ab0:	e023      	b.n	8012afa <LoRaMacMibSetRequestConfirm+0x72e>
            else
            {
                Nvm.RegionGroup2.CarrierSenseTime = mibSet->Param.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8012ab2:	2318      	movs	r3, #24
 8012ab4:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8012ab6:	e020      	b.n	8012afa <LoRaMacMibSetRequestConfirm+0x72e>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8012ab8:	6878      	ldr	r0, [r7, #4]
 8012aba:	f000 fca4 	bl	8013406 <LoRaMacMibClassBSetRequestConfirm>
 8012abe:	4603      	mov	r3, r0
 8012ac0:	75fb      	strb	r3, [r7, #23]
            break;
 8012ac2:	e01a      	b.n	8012afa <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8012ac4:	bf00      	nop
 8012ac6:	e018      	b.n	8012afa <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8012ac8:	bf00      	nop
 8012aca:	e016      	b.n	8012afa <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8012acc:	bf00      	nop
 8012ace:	e014      	b.n	8012afa <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8012ad0:	bf00      	nop
 8012ad2:	e012      	b.n	8012afa <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8012ad4:	bf00      	nop
 8012ad6:	e010      	b.n	8012afa <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8012ad8:	bf00      	nop
 8012ada:	e00e      	b.n	8012afa <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8012adc:	bf00      	nop
 8012ade:	e00c      	b.n	8012afa <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8012ae0:	bf00      	nop
 8012ae2:	e00a      	b.n	8012afa <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8012ae4:	bf00      	nop
 8012ae6:	e008      	b.n	8012afa <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8012ae8:	bf00      	nop
 8012aea:	e006      	b.n	8012afa <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8012aec:	bf00      	nop
 8012aee:	e004      	b.n	8012afa <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8012af0:	bf00      	nop
 8012af2:	e002      	b.n	8012afa <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8012af4:	bf00      	nop
 8012af6:	e000      	b.n	8012afa <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8012af8:	bf00      	nop
        }
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( status == LORAMAC_STATUS_OK )
 8012afa:	7dfb      	ldrb	r3, [r7, #23]
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d106      	bne.n	8012b0e <LoRaMacMibSetRequestConfirm+0x742>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8012b00:	4a06      	ldr	r2, [pc, #24]	; (8012b1c <LoRaMacMibSetRequestConfirm+0x750>)
 8012b02:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8012b06:	f043 0320 	orr.w	r3, r3, #32
 8012b0a:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
#endif /* LORAMAC_VERSION */
    return status;
 8012b0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012b10:	4618      	mov	r0, r3
 8012b12:	3718      	adds	r7, #24
 8012b14:	46bd      	mov	sp, r7
 8012b16:	bd80      	pop	{r7, pc}
 8012b18:	20000c5c 	.word	0x20000c5c
 8012b1c:	20000740 	.word	0x20000740

08012b20 <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8012b20:	b580      	push	{r7, lr}
 8012b22:	b08a      	sub	sp, #40	; 0x28
 8012b24:	af00      	add	r7, sp, #0
 8012b26:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012b28:	2302      	movs	r3, #2
 8012b2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8012b2e:	2300      	movs	r3, #0
 8012b30:	83bb      	strh	r3, [r7, #28]

    if( mlmeRequest == NULL )
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d101      	bne.n	8012b3c <LoRaMacMlmeRequest+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012b38:	2303      	movs	r3, #3
 8012b3a:	e17e      	b.n	8012e3a <LoRaMacMlmeRequest+0x31a>
    }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	2200      	movs	r2, #0
 8012b40:	611a      	str	r2, [r3, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 8012b42:	f7fc fb85 	bl	800f250 <LoRaMacIsBusy>
 8012b46:	4603      	mov	r3, r0
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d001      	beq.n	8012b50 <LoRaMacMlmeRequest+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 8012b4c:	2301      	movs	r3, #1
 8012b4e:	e174      	b.n	8012e3a <LoRaMacMlmeRequest+0x31a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8012b50:	f001 f994 	bl	8013e7c <LoRaMacConfirmQueueIsFull>
 8012b54:	4603      	mov	r3, r0
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d001      	beq.n	8012b5e <LoRaMacMlmeRequest+0x3e>
    {
        return LORAMAC_STATUS_BUSY;
 8012b5a:	2301      	movs	r3, #1
 8012b5c:	e16d      	b.n	8012e3a <LoRaMacMlmeRequest+0x31a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8012b5e:	f001 f981 	bl	8013e64 <LoRaMacConfirmQueueGetCnt>
 8012b62:	4603      	mov	r3, r0
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d104      	bne.n	8012b72 <LoRaMacMlmeRequest+0x52>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8012b68:	2214      	movs	r2, #20
 8012b6a:	2100      	movs	r1, #0
 8012b6c:	48b5      	ldr	r0, [pc, #724]	; (8012e44 <LoRaMacMlmeRequest+0x324>)
 8012b6e:	f006 f9c3 	bl	8018ef8 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012b72:	4bb5      	ldr	r3, [pc, #724]	; (8012e48 <LoRaMacMlmeRequest+0x328>)
 8012b74:	2201      	movs	r2, #1
 8012b76:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8012b7a:	4ab3      	ldr	r2, [pc, #716]	; (8012e48 <LoRaMacMlmeRequest+0x328>)
 8012b7c:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8012b80:	f043 0304 	orr.w	r3, r3, #4
 8012b84:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    queueElement.Request = mlmeRequest->Type;
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	781b      	ldrb	r3, [r3, #0]
 8012b8c:	f887 3020 	strb.w	r3, [r7, #32]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012b90:	2301      	movs	r3, #1
 8012b92:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    queueElement.RestrictCommonReadyToHandle = false;
 8012b96:	2300      	movs	r3, #0
 8012b98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    queueElement.ReadyToHandle = false;
 8012b9c:	2300      	movs	r3, #0
 8012b9e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	781b      	ldrb	r3, [r3, #0]
 8012ba6:	3b01      	subs	r3, #1
 8012ba8:	2b0c      	cmp	r3, #12
 8012baa:	f200 811a 	bhi.w	8012de2 <LoRaMacMlmeRequest+0x2c2>
 8012bae:	a201      	add	r2, pc, #4	; (adr r2, 8012bb4 <LoRaMacMlmeRequest+0x94>)
 8012bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012bb4:	08012be9 	.word	0x08012be9
 8012bb8:	08012de3 	.word	0x08012de3
 8012bbc:	08012de3 	.word	0x08012de3
 8012bc0:	08012de3 	.word	0x08012de3
 8012bc4:	08012cc7 	.word	0x08012cc7
 8012bc8:	08012ceb 	.word	0x08012ceb
 8012bcc:	08012de3 	.word	0x08012de3
 8012bd0:	08012de3 	.word	0x08012de3
 8012bd4:	08012d09 	.word	0x08012d09
 8012bd8:	08012de3 	.word	0x08012de3
 8012bdc:	08012db1 	.word	0x08012db1
 8012be0:	08012d45 	.word	0x08012d45
 8012be4:	08012d8f 	.word	0x08012d8f
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8012be8:	4b97      	ldr	r3, [pc, #604]	; (8012e48 <LoRaMacMlmeRequest+0x328>)
 8012bea:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012bee:	f003 0320 	and.w	r3, r3, #32
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d001      	beq.n	8012bfa <LoRaMacMlmeRequest+0xda>
            {
                return LORAMAC_STATUS_BUSY;
 8012bf6:	2301      	movs	r3, #1
 8012bf8:	e11f      	b.n	8012e3a <LoRaMacMlmeRequest+0x31a>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	791b      	ldrb	r3, [r3, #4]
 8012bfe:	2b02      	cmp	r3, #2
 8012c00:	d135      	bne.n	8012c6e <LoRaMacMlmeRequest+0x14e>
            {
                ResetMacParameters( false );
 8012c02:	2000      	movs	r0, #0
 8012c04:	f7fe f8b4 	bl	8010d70 <ResetMacParameters>

                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8012c08:	4b90      	ldr	r3, [pc, #576]	; (8012e4c <LoRaMacMlmeRequest+0x32c>)
 8012c0a:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	795b      	ldrb	r3, [r3, #5]
 8012c12:	b25b      	sxtb	r3, r3
 8012c14:	2200      	movs	r2, #0
 8012c16:	4619      	mov	r1, r3
 8012c18:	f002 fcc8 	bl	80155ac <RegionAlternateDr>
 8012c1c:	4603      	mov	r3, r0
 8012c1e:	461a      	mov	r2, r3
 8012c20:	4b8a      	ldr	r3, [pc, #552]	; (8012e4c <LoRaMacMlmeRequest+0x32c>)
 8012c22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8012c2c:	4b87      	ldr	r3, [pc, #540]	; (8012e4c <LoRaMacMlmeRequest+0x32c>)
 8012c2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8012c32:	2307      	movs	r3, #7
 8012c34:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

                status = SendReJoinReq( JOIN_REQ );
 8012c38:	20ff      	movs	r0, #255	; 0xff
 8012c3a:	f7fd fe1d 	bl	8010878 <SendReJoinReq>
 8012c3e:	4603      	mov	r3, r0
 8012c40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                if( status != LORAMAC_STATUS_OK )
 8012c44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	f000 80cc 	beq.w	8012de6 <LoRaMacMlmeRequest+0x2c6>
                {
                    // Revert back the previous datarate ( mainly used for US915 like regions )
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8012c4e:	4b7f      	ldr	r3, [pc, #508]	; (8012e4c <LoRaMacMlmeRequest+0x32c>)
 8012c50:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	795b      	ldrb	r3, [r3, #5]
 8012c58:	b25b      	sxtb	r3, r3
 8012c5a:	2201      	movs	r2, #1
 8012c5c:	4619      	mov	r1, r3
 8012c5e:	f002 fca5 	bl	80155ac <RegionAlternateDr>
 8012c62:	4603      	mov	r3, r0
 8012c64:	461a      	mov	r2, r3
 8012c66:	4b79      	ldr	r3, [pc, #484]	; (8012e4c <LoRaMacMlmeRequest+0x32c>)
 8012c68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                OnMacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 8012c6c:	e0bb      	b.n	8012de6 <LoRaMacMlmeRequest+0x2c6>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	791b      	ldrb	r3, [r3, #4]
 8012c72:	2b01      	cmp	r3, #1
 8012c74:	f040 80b7 	bne.w	8012de6 <LoRaMacMlmeRequest+0x2c6>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8012c78:	4b74      	ldr	r3, [pc, #464]	; (8012e4c <LoRaMacMlmeRequest+0x32c>)
 8012c7a:	2200      	movs	r2, #0
 8012c7c:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8012c80:	2302      	movs	r3, #2
 8012c82:	763b      	strb	r3, [r7, #24]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8012c84:	4b71      	ldr	r3, [pc, #452]	; (8012e4c <LoRaMacMlmeRequest+0x32c>)
 8012c86:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012c8a:	f107 020c 	add.w	r2, r7, #12
 8012c8e:	4611      	mov	r1, r2
 8012c90:	4618      	mov	r0, r3
 8012c92:	f002 fb2c 	bl	80152ee <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	791a      	ldrb	r2, [r3, #4]
 8012c9a:	4b6c      	ldr	r3, [pc, #432]	; (8012e4c <LoRaMacMlmeRequest+0x32c>)
 8012c9c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8012ca0:	2300      	movs	r3, #0
 8012ca2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                queueElement.ReadyToHandle = true;
 8012ca6:	2301      	movs	r3, #1
 8012ca8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
                OnMacProcessNotify( );
 8012cac:	f7fe fdb2 	bl	8011814 <OnMacProcessNotify>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8012cb0:	4a65      	ldr	r2, [pc, #404]	; (8012e48 <LoRaMacMlmeRequest+0x328>)
 8012cb2:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8012cb6:	f043 0310 	orr.w	r3, r3, #16
 8012cba:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
                status = LORAMAC_STATUS_OK;
 8012cbe:	2300      	movs	r3, #0
 8012cc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8012cc4:	e08f      	b.n	8012de6 <LoRaMacMlmeRequest+0x2c6>
        }
#endif /* LORAMAC_VERSION */
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8012cc6:	2300      	movs	r3, #0
 8012cc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8012ccc:	f107 031c 	add.w	r3, r7, #28
 8012cd0:	2200      	movs	r2, #0
 8012cd2:	4619      	mov	r1, r3
 8012cd4:	2002      	movs	r0, #2
 8012cd6:	f000 fd21 	bl	801371c <LoRaMacCommandsAddCmd>
 8012cda:	4603      	mov	r3, r0
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	f000 8084 	beq.w	8012dea <LoRaMacMlmeRequest+0x2ca>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012ce2:	2313      	movs	r3, #19
 8012ce4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 8012ce8:	e07f      	b.n	8012dea <LoRaMacMlmeRequest+0x2ca>
            break;
        }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	8898      	ldrh	r0, [r3, #4]
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	6899      	ldr	r1, [r3, #8]
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8012cf8:	b2db      	uxtb	r3, r3
 8012cfa:	461a      	mov	r2, r3
 8012cfc:	f7fe fbba 	bl	8011474 <SetTxContinuousWave>
 8012d00:	4603      	mov	r3, r0
 8012d02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8012d06:	e077      	b.n	8012df8 <LoRaMacMlmeRequest+0x2d8>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8012d08:	2300      	movs	r3, #0
 8012d0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            MacCommand_t* newCmd;
            /* ST_CODE Begin: Add MAC command condition to prevent some duplicated request */
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 8012d0e:	f107 0308 	add.w	r3, r7, #8
 8012d12:	4619      	mov	r1, r3
 8012d14:	200d      	movs	r0, #13
 8012d16:	f000 fd81 	bl	801381c <LoRaMacCommandsGetCmd>
 8012d1a:	4603      	mov	r3, r0
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d103      	bne.n	8012d28 <LoRaMacMlmeRequest+0x208>
            {
                status = LORAMAC_STATUS_OK;
 8012d20:	2300      	movs	r3, #0
 8012d22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            /* ST_CODE End */
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
            }
            break;
 8012d26:	e062      	b.n	8012dee <LoRaMacMlmeRequest+0x2ce>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8012d28:	f107 031c 	add.w	r3, r7, #28
 8012d2c:	2200      	movs	r2, #0
 8012d2e:	4619      	mov	r1, r3
 8012d30:	200d      	movs	r0, #13
 8012d32:	f000 fcf3 	bl	801371c <LoRaMacCommandsAddCmd>
 8012d36:	4603      	mov	r3, r0
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d058      	beq.n	8012dee <LoRaMacMlmeRequest+0x2ce>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012d3c:	2313      	movs	r3, #19
 8012d3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8012d42:	e054      	b.n	8012dee <LoRaMacMlmeRequest+0x2ce>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8012d44:	4b41      	ldr	r3, [pc, #260]	; (8012e4c <LoRaMacMlmeRequest+0x32c>)
 8012d46:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d151      	bne.n	8012df2 <LoRaMacMlmeRequest+0x2d2>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	791b      	ldrb	r3, [r3, #4]
 8012d52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	791b      	ldrb	r3, [r3, #4]
 8012d5a:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8012d5e:	b2db      	uxtb	r3, r3
 8012d60:	4618      	mov	r0, r3
 8012d62:	f000 fb25 	bl	80133b0 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8012d66:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012d6a:	773b      	strb	r3, [r7, #28]
                status = LORAMAC_STATUS_OK;
 8012d6c:	2300      	movs	r3, #0
 8012d6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8012d72:	f107 031c 	add.w	r3, r7, #28
 8012d76:	2201      	movs	r2, #1
 8012d78:	4619      	mov	r1, r3
 8012d7a:	2010      	movs	r0, #16
 8012d7c:	f000 fcce 	bl	801371c <LoRaMacCommandsAddCmd>
 8012d80:	4603      	mov	r3, r0
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d035      	beq.n	8012df2 <LoRaMacMlmeRequest+0x2d2>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012d86:	2313      	movs	r3, #19
 8012d88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
            }
            break;
 8012d8c:	e031      	b.n	8012df2 <LoRaMacMlmeRequest+0x2d2>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8012d8e:	2300      	movs	r3, #0
 8012d90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8012d94:	f107 031c 	add.w	r3, r7, #28
 8012d98:	2200      	movs	r2, #0
 8012d9a:	4619      	mov	r1, r3
 8012d9c:	2012      	movs	r0, #18
 8012d9e:	f000 fcbd 	bl	801371c <LoRaMacCommandsAddCmd>
 8012da2:	4603      	mov	r3, r0
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d026      	beq.n	8012df6 <LoRaMacMlmeRequest+0x2d6>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012da8:	2313      	movs	r3, #19
 8012daa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 8012dae:	e022      	b.n	8012df6 <LoRaMacMlmeRequest+0x2d6>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8012db0:	2301      	movs	r3, #1
 8012db2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8012db6:	f000 fab1 	bl	801331c <LoRaMacClassBIsAcquisitionInProgress>
 8012dba:	4603      	mov	r3, r0
 8012dbc:	f083 0301 	eor.w	r3, r3, #1
 8012dc0:	b2db      	uxtb	r3, r3
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d009      	beq.n	8012dda <LoRaMacMlmeRequest+0x2ba>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8012dc6:	2000      	movs	r0, #0
 8012dc8:	f000 fa8a 	bl	80132e0 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8012dcc:	2000      	movs	r0, #0
 8012dce:	f000 faac 	bl	801332a <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8012dd2:	2300      	movs	r3, #0
 8012dd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8012dd8:	e00e      	b.n	8012df8 <LoRaMacMlmeRequest+0x2d8>
                status = LORAMAC_STATUS_BUSY;
 8012dda:	2301      	movs	r3, #1
 8012ddc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8012de0:	e00a      	b.n	8012df8 <LoRaMacMlmeRequest+0x2d8>
        }
        default:
            break;
 8012de2:	bf00      	nop
 8012de4:	e008      	b.n	8012df8 <LoRaMacMlmeRequest+0x2d8>
            break;
 8012de6:	bf00      	nop
 8012de8:	e006      	b.n	8012df8 <LoRaMacMlmeRequest+0x2d8>
            break;
 8012dea:	bf00      	nop
 8012dec:	e004      	b.n	8012df8 <LoRaMacMlmeRequest+0x2d8>
            break;
 8012dee:	bf00      	nop
 8012df0:	e002      	b.n	8012df8 <LoRaMacMlmeRequest+0x2d8>
            break;
 8012df2:	bf00      	nop
 8012df4:	e000      	b.n	8012df8 <LoRaMacMlmeRequest+0x2d8>
            break;
 8012df6:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8012df8:	4b13      	ldr	r3, [pc, #76]	; (8012e48 <LoRaMacMlmeRequest+0x328>)
 8012dfa:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8012e02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d010      	beq.n	8012e2c <LoRaMacMlmeRequest+0x30c>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8012e0a:	f001 f82b 	bl	8013e64 <LoRaMacConfirmQueueGetCnt>
 8012e0e:	4603      	mov	r3, r0
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d110      	bne.n	8012e36 <LoRaMacMlmeRequest+0x316>
        {
            MacCtx.NodeAckRequested = false;
 8012e14:	4b0c      	ldr	r3, [pc, #48]	; (8012e48 <LoRaMacMlmeRequest+0x328>)
 8012e16:	2200      	movs	r2, #0
 8012e18:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8012e1c:	4a0a      	ldr	r2, [pc, #40]	; (8012e48 <LoRaMacMlmeRequest+0x328>)
 8012e1e:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8012e22:	f36f 0382 	bfc	r3, #2, #1
 8012e26:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 8012e2a:	e004      	b.n	8012e36 <LoRaMacMlmeRequest+0x316>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8012e2c:	f107 0320 	add.w	r3, r7, #32
 8012e30:	4618      	mov	r0, r3
 8012e32:	f000 fec3 	bl	8013bbc <LoRaMacConfirmQueueAdd>
    }
    return status;
 8012e36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8012e3a:	4618      	mov	r0, r3
 8012e3c:	3728      	adds	r7, #40	; 0x28
 8012e3e:	46bd      	mov	sp, r7
 8012e40:	bd80      	pop	{r7, pc}
 8012e42:	bf00      	nop
 8012e44:	20000b94 	.word	0x20000b94
 8012e48:	20000740 	.word	0x20000740
 8012e4c:	20000c5c 	.word	0x20000c5c

08012e50 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8012e50:	b5b0      	push	{r4, r5, r7, lr}
 8012e52:	b092      	sub	sp, #72	; 0x48
 8012e54:	af02      	add	r7, sp, #8
 8012e56:	6078      	str	r0, [r7, #4]
 8012e58:	460b      	mov	r3, r1
 8012e5a:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012e5c:	2302      	movs	r3, #2
 8012e5e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8012e62:	2300      	movs	r3, #0
 8012e64:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    void* fBuffer = NULL;
 8012e68:	2300      	movs	r3, #0
 8012e6a:	63bb      	str	r3, [r7, #56]	; 0x38
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8012e6c:	2300      	movs	r3, #0
 8012e6e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    bool readyToSend = false;
 8012e72:	2300      	movs	r3, #0
 8012e74:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    if( mcpsRequest == NULL )
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d101      	bne.n	8012e82 <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012e7e:	2303      	movs	r3, #3
 8012e80:	e113      	b.n	80130aa <LoRaMacMcpsRequest+0x25a>
        }
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	2200      	movs	r2, #0
 8012e86:	611a      	str	r2, [r3, #16]

    if( LoRaMacIsBusy( ) == true )
 8012e88:	f7fc f9e2 	bl	800f250 <LoRaMacIsBusy>
 8012e8c:	4603      	mov	r3, r0
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d001      	beq.n	8012e96 <LoRaMacMcpsRequest+0x46>
    {
        return LORAMAC_STATUS_BUSY;
 8012e92:	2301      	movs	r3, #1
 8012e94:	e109      	b.n	80130aa <LoRaMacMcpsRequest+0x25a>
    }

    McpsReq_t request = *mcpsRequest;
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	f107 040c 	add.w	r4, r7, #12
 8012e9c:	461d      	mov	r5, r3
 8012e9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012ea0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012ea2:	682b      	ldr	r3, [r5, #0]
 8012ea4:	6023      	str	r3, [r4, #0]

    macHdr.Value = 0;
 8012ea6:	2300      	movs	r3, #0
 8012ea8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8012eac:	2214      	movs	r2, #20
 8012eae:	2100      	movs	r1, #0
 8012eb0:	4880      	ldr	r0, [pc, #512]	; (80130b4 <LoRaMacMcpsRequest+0x264>)
 8012eb2:	f006 f821 	bl	8018ef8 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012eb6:	4b80      	ldr	r3, [pc, #512]	; (80130b8 <LoRaMacMcpsRequest+0x268>)
 8012eb8:	2201      	movs	r2, #1
 8012eba:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441

    // Apply confirmed downlinks, if the device has not received a valid
    // downlink after a join accept.
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 8012ebe:	4b7f      	ldr	r3, [pc, #508]	; (80130bc <LoRaMacMcpsRequest+0x26c>)
 8012ec0:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8012ec4:	2b02      	cmp	r3, #2
 8012ec6:	d111      	bne.n	8012eec <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8012ec8:	4b7c      	ldr	r3, [pc, #496]	; (80130bc <LoRaMacMcpsRequest+0x26c>)
 8012eca:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 8012ece:	2b02      	cmp	r3, #2
 8012ed0:	d10c      	bne.n	8012eec <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 8012ed2:	4b7a      	ldr	r3, [pc, #488]	; (80130bc <LoRaMacMcpsRequest+0x26c>)
 8012ed4:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
 8012ed8:	f083 0301 	eor.w	r3, r3, #1
 8012edc:	b2db      	uxtb	r3, r3
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d004      	beq.n	8012eec <LoRaMacMcpsRequest+0x9c>
        ( request.Type == MCPS_UNCONFIRMED ) )
 8012ee2:	7b3b      	ldrb	r3, [r7, #12]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d101      	bne.n	8012eec <LoRaMacMcpsRequest+0x9c>
    {
        request.Type = MCPS_CONFIRMED;
 8012ee8:	2301      	movs	r3, #1
 8012eea:	733b      	strb	r3, [r7, #12]
    }

    switch( request.Type )
 8012eec:	7b3b      	ldrb	r3, [r7, #12]
 8012eee:	2b03      	cmp	r3, #3
 8012ef0:	d030      	beq.n	8012f54 <LoRaMacMcpsRequest+0x104>
 8012ef2:	2b03      	cmp	r3, #3
 8012ef4:	dc3f      	bgt.n	8012f76 <LoRaMacMcpsRequest+0x126>
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d002      	beq.n	8012f00 <LoRaMacMcpsRequest+0xb0>
 8012efa:	2b01      	cmp	r3, #1
 8012efc:	d015      	beq.n	8012f2a <LoRaMacMcpsRequest+0xda>
            fBufferSize = request.Req.Proprietary.fBufferSize;
            datarate = request.Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8012efe:	e03a      	b.n	8012f76 <LoRaMacMcpsRequest+0x126>
            readyToSend = true;
 8012f00:	2301      	movs	r3, #1
 8012f02:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8012f06:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012f0a:	2202      	movs	r2, #2
 8012f0c:	f362 1347 	bfi	r3, r2, #5, #3
 8012f10:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fPort = request.Req.Unconfirmed.fPort;
 8012f14:	7c3b      	ldrb	r3, [r7, #16]
 8012f16:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            fBuffer = request.Req.Unconfirmed.fBuffer;
 8012f1a:	697b      	ldr	r3, [r7, #20]
 8012f1c:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 8012f1e:	8b3b      	ldrh	r3, [r7, #24]
 8012f20:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Unconfirmed.Datarate;
 8012f22:	7ebb      	ldrb	r3, [r7, #26]
 8012f24:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8012f28:	e026      	b.n	8012f78 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 8012f2a:	2301      	movs	r3, #1
 8012f2c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8012f30:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012f34:	2204      	movs	r2, #4
 8012f36:	f362 1347 	bfi	r3, r2, #5, #3
 8012f3a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fPort = request.Req.Confirmed.fPort;
 8012f3e:	7c3b      	ldrb	r3, [r7, #16]
 8012f40:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            fBuffer = request.Req.Confirmed.fBuffer;
 8012f44:	697b      	ldr	r3, [r7, #20]
 8012f46:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Confirmed.fBufferSize;
 8012f48:	8b3b      	ldrh	r3, [r7, #24]
 8012f4a:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Confirmed.Datarate;
 8012f4c:	7ebb      	ldrb	r3, [r7, #26]
 8012f4e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8012f52:	e011      	b.n	8012f78 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 8012f54:	2301      	movs	r3, #1
 8012f56:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8012f5a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012f5e:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8012f62:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fBuffer = request.Req.Proprietary.fBuffer;
 8012f66:	693b      	ldr	r3, [r7, #16]
 8012f68:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Proprietary.fBufferSize;
 8012f6a:	8abb      	ldrh	r3, [r7, #20]
 8012f6c:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Proprietary.Datarate;
 8012f6e:	7dbb      	ldrb	r3, [r7, #22]
 8012f70:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8012f74:	e000      	b.n	8012f78 <LoRaMacMcpsRequest+0x128>
            break;
 8012f76:	bf00      	nop
    }

    // Make sure that the input datarate is compliant
    // to the regional specification.
    getPhy.Attribute = PHY_MIN_TX_DR;
 8012f78:	2302      	movs	r3, #2
 8012f7a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012f7e:	4b4f      	ldr	r3, [pc, #316]	; (80130bc <LoRaMacMcpsRequest+0x26c>)
 8012f80:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8012f84:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012f88:	4b4c      	ldr	r3, [pc, #304]	; (80130bc <LoRaMacMcpsRequest+0x26c>)
 8012f8a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012f8e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8012f92:	4611      	mov	r1, r2
 8012f94:	4618      	mov	r0, r3
 8012f96:	f002 f973 	bl	8015280 <RegionGetPhyParam>
 8012f9a:	4603      	mov	r3, r0
 8012f9c:	62bb      	str	r3, [r7, #40]	; 0x28
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8012f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fa0:	b25b      	sxtb	r3, r3
 8012fa2:	f997 2035 	ldrsb.w	r2, [r7, #53]	; 0x35
 8012fa6:	4293      	cmp	r3, r2
 8012fa8:	bfb8      	it	lt
 8012faa:	4613      	movlt	r3, r2
 8012fac:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    // Apply minimum datarate in this special case.
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8012fb0:	4b42      	ldr	r3, [pc, #264]	; (80130bc <LoRaMacMcpsRequest+0x26c>)
 8012fb2:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8012fb6:	4a41      	ldr	r2, [pc, #260]	; (80130bc <LoRaMacMcpsRequest+0x26c>)
 8012fb8:	f892 1130 	ldrb.w	r1, [r2, #304]	; 0x130
 8012fbc:	4a3f      	ldr	r2, [pc, #252]	; (80130bc <LoRaMacMcpsRequest+0x26c>)
 8012fbe:	f892 211d 	ldrb.w	r2, [r2, #285]	; 0x11d
 8012fc2:	4618      	mov	r0, r3
 8012fc4:	f7fc fae0 	bl	800f588 <CheckForMinimumAbpDatarate>
 8012fc8:	4603      	mov	r3, r0
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	d002      	beq.n	8012fd4 <LoRaMacMcpsRequest+0x184>
                                    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true )
    {
        datarate = ( int8_t )phyParam.Value;
 8012fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fd0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if( readyToSend == true )
 8012fd4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d05f      	beq.n	801309c <LoRaMacMcpsRequest+0x24c>
    {
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8012fdc:	4b37      	ldr	r3, [pc, #220]	; (80130bc <LoRaMacMcpsRequest+0x26c>)
 8012fde:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8012fe2:	f083 0301 	eor.w	r3, r3, #1
 8012fe6:	b2db      	uxtb	r3, r3
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d10e      	bne.n	801300a <LoRaMacMcpsRequest+0x1ba>
            ( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8012fec:	4b33      	ldr	r3, [pc, #204]	; (80130bc <LoRaMacMcpsRequest+0x26c>)
 8012fee:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8012ff2:	4a32      	ldr	r2, [pc, #200]	; (80130bc <LoRaMacMcpsRequest+0x26c>)
 8012ff4:	f892 1130 	ldrb.w	r1, [r2, #304]	; 0x130
 8012ff8:	4a30      	ldr	r2, [pc, #192]	; (80130bc <LoRaMacMcpsRequest+0x26c>)
 8012ffa:	f892 211d 	ldrb.w	r2, [r2, #285]	; 0x11d
 8012ffe:	4618      	mov	r0, r3
 8013000:	f7fc fac2 	bl	800f588 <CheckForMinimumAbpDatarate>
 8013004:	4603      	mov	r3, r0
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8013006:	2b00      	cmp	r3, #0
 8013008:	d01c      	beq.n	8013044 <LoRaMacMcpsRequest+0x1f4>
                                          Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true ) )
        {
            verify.DatarateParams.Datarate = datarate;
 801300a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801300e:	f887 3020 	strb.w	r3, [r7, #32]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8013012:	4b2a      	ldr	r3, [pc, #168]	; (80130bc <LoRaMacMcpsRequest+0x26c>)
 8013014:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8013018:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 801301c:	4b27      	ldr	r3, [pc, #156]	; (80130bc <LoRaMacMcpsRequest+0x26c>)
 801301e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013022:	f107 0120 	add.w	r1, r7, #32
 8013026:	2205      	movs	r2, #5
 8013028:	4618      	mov	r0, r3
 801302a:	f002 f977 	bl	801531c <RegionVerify>
 801302e:	4603      	mov	r3, r0
 8013030:	2b00      	cmp	r3, #0
 8013032:	d005      	beq.n	8013040 <LoRaMacMcpsRequest+0x1f0>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8013034:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8013038:	4b20      	ldr	r3, [pc, #128]	; (80130bc <LoRaMacMcpsRequest+0x26c>)
 801303a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 801303e:	e001      	b.n	8013044 <LoRaMacMcpsRequest+0x1f4>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8013040:	2303      	movs	r3, #3
 8013042:	e032      	b.n	80130aa <LoRaMacMcpsRequest+0x25a>
            }
        }

        // Verification of response timeout for class b and class c
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 8013044:	4b1d      	ldr	r3, [pc, #116]	; (80130bc <LoRaMacMcpsRequest+0x26c>)
 8013046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801304a:	4a1b      	ldr	r2, [pc, #108]	; (80130b8 <LoRaMacMcpsRequest+0x268>)
 801304c:	f8d2 2498 	ldr.w	r2, [r2, #1176]	; 0x498
 8013050:	4611      	mov	r1, r2
 8013052:	4618      	mov	r0, r3
 8013054:	f7fc fb84 	bl	800f760 <LoRaMacHandleResponseTimeout>
                                      MacCtx.ResponseTimeoutStartTime );

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 8013058:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801305a:	f897 103e 	ldrb.w	r1, [r7, #62]	; 0x3e
 801305e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8013062:	78fb      	ldrb	r3, [r7, #3]
 8013064:	9300      	str	r3, [sp, #0]
 8013066:	4613      	mov	r3, r2
 8013068:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801306a:	f7fd fb23 	bl	80106b4 <Send>
 801306e:	4603      	mov	r3, r0
 8013070:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if( status == LORAMAC_STATUS_OK )
 8013074:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013078:	2b00      	cmp	r3, #0
 801307a:	d10b      	bne.n	8013094 <LoRaMacMcpsRequest+0x244>
        {
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 801307c:	7b3a      	ldrb	r2, [r7, #12]
 801307e:	4b0e      	ldr	r3, [pc, #56]	; (80130b8 <LoRaMacMcpsRequest+0x268>)
 8013080:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8013084:	4a0c      	ldr	r2, [pc, #48]	; (80130b8 <LoRaMacMcpsRequest+0x268>)
 8013086:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 801308a:	f043 0301 	orr.w	r3, r3, #1
 801308e:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 8013092:	e003      	b.n	801309c <LoRaMacMcpsRequest+0x24c>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8013094:	4b08      	ldr	r3, [pc, #32]	; (80130b8 <LoRaMacMcpsRequest+0x268>)
 8013096:	2200      	movs	r2, #0
 8013098:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 801309c:	4b06      	ldr	r3, [pc, #24]	; (80130b8 <LoRaMacMcpsRequest+0x268>)
 801309e:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	611a      	str	r2, [r3, #16]

    return status;
 80130a6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80130aa:	4618      	mov	r0, r3
 80130ac:	3740      	adds	r7, #64	; 0x40
 80130ae:	46bd      	mov	sp, r7
 80130b0:	bdb0      	pop	{r4, r5, r7, pc}
 80130b2:	bf00      	nop
 80130b4:	20000b80 	.word	0x20000b80
 80130b8:	20000740 	.word	0x20000740
 80130bc:	20000c5c 	.word	0x20000c5c

080130c0 <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 80130c0:	b580      	push	{r7, lr}
 80130c2:	b084      	sub	sp, #16
 80130c4:	af00      	add	r7, sp, #0
 80130c6:	4603      	mov	r3, r0
 80130c8:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 80130ca:	79fb      	ldrb	r3, [r7, #7]
 80130cc:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 80130ce:	4b0d      	ldr	r3, [pc, #52]	; (8013104 <LoRaMacTestSetDutyCycleOn+0x44>)
 80130d0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80130d4:	f107 010c 	add.w	r1, r7, #12
 80130d8:	220f      	movs	r2, #15
 80130da:	4618      	mov	r0, r3
 80130dc:	f002 f91e 	bl	801531c <RegionVerify>
 80130e0:	4603      	mov	r3, r0
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d00a      	beq.n	80130fc <LoRaMacTestSetDutyCycleOn+0x3c>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 80130e6:	4a07      	ldr	r2, [pc, #28]	; (8013104 <LoRaMacTestSetDutyCycleOn+0x44>)
 80130e8:	79fb      	ldrb	r3, [r7, #7]
 80130ea:	f882 311c 	strb.w	r3, [r2, #284]	; 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 80130ee:	4a06      	ldr	r2, [pc, #24]	; (8013108 <LoRaMacTestSetDutyCycleOn+0x48>)
 80130f0:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80130f4:	f043 0320 	orr.w	r3, r3, #32
 80130f8:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
}
 80130fc:	bf00      	nop
 80130fe:	3710      	adds	r7, #16
 8013100:	46bd      	mov	sp, r7
 8013102:	bd80      	pop	{r7, pc}
 8013104:	20000c5c 	.word	0x20000c5c
 8013108:	20000740 	.word	0x20000740

0801310c <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 801310c:	b580      	push	{r7, lr}
 801310e:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 8013110:	f7fe fe94 	bl	8011e3c <LoRaMacStop>
 8013114:	4603      	mov	r3, r0
 8013116:	2b00      	cmp	r3, #0
 8013118:	d112      	bne.n	8013140 <LoRaMacDeInitialization+0x34>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 801311a:	480b      	ldr	r0, [pc, #44]	; (8013148 <LoRaMacDeInitialization+0x3c>)
 801311c:	f00a f84c 	bl	801d1b8 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 8013120:	480a      	ldr	r0, [pc, #40]	; (801314c <LoRaMacDeInitialization+0x40>)
 8013122:	f00a f849 	bl	801d1b8 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 8013126:	480a      	ldr	r0, [pc, #40]	; (8013150 <LoRaMacDeInitialization+0x44>)
 8013128:	f00a f846 	bl	801d1b8 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 801312c:	f000 f94a 	bl	80133c4 <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( false );
 8013130:	2000      	movs	r0, #0
 8013132:	f7fd fe1d 	bl	8010d70 <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 8013136:	4b07      	ldr	r3, [pc, #28]	; (8013154 <LoRaMacDeInitialization+0x48>)
 8013138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801313a:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 801313c:	2300      	movs	r3, #0
 801313e:	e000      	b.n	8013142 <LoRaMacDeInitialization+0x36>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 8013140:	2301      	movs	r3, #1
    }
}
 8013142:	4618      	mov	r0, r3
 8013144:	bd80      	pop	{r7, pc}
 8013146:	bf00      	nop
 8013148:	20000aa8 	.word	0x20000aa8
 801314c:	20000ac0 	.word	0x20000ac0
 8013150:	20000ad8 	.word	0x20000ad8
 8013154:	0801ea54 	.word	0x0801ea54

08013158 <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 8013158:	b580      	push	{r7, lr}
 801315a:	b08c      	sub	sp, #48	; 0x30
 801315c:	af00      	add	r7, sp, #0
 801315e:	60f8      	str	r0, [r7, #12]
 8013160:	60b9      	str	r1, [r7, #8]
 8013162:	607a      	str	r2, [r7, #4]
 8013164:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8013166:	2300      	movs	r3, #0
 8013168:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 801316c:	68fb      	ldr	r3, [r7, #12]
 801316e:	7b1b      	ldrb	r3, [r3, #12]
 8013170:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 8013174:	68fb      	ldr	r3, [r7, #12]
 8013176:	7b5b      	ldrb	r3, [r3, #13]
 8013178:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint8_t nbTrans = adrNext->NbTrans;
 801317c:	68fb      	ldr	r3, [r7, #12]
 801317e:	7b9b      	ldrb	r3, [r3, #14]
 8013180:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8013184:	68fb      	ldr	r3, [r7, #12]
 8013186:	685a      	ldr	r2, [r3, #4]
 8013188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801318a:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	785b      	ldrb	r3, [r3, #1]
 8013190:	2b00      	cmp	r3, #0
 8013192:	f000 8088 	beq.w	80132a6 <LoRaMacAdrCalcNext+0x14e>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8013196:	2302      	movs	r3, #2
 8013198:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 801319c:	68fb      	ldr	r3, [r7, #12]
 801319e:	7bdb      	ldrb	r3, [r3, #15]
 80131a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80131a4:	68fb      	ldr	r3, [r7, #12]
 80131a6:	7c1b      	ldrb	r3, [r3, #16]
 80131a8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80131ac:	4611      	mov	r1, r2
 80131ae:	4618      	mov	r0, r3
 80131b0:	f002 f866 	bl	8015280 <RegionGetPhyParam>
 80131b4:	4603      	mov	r3, r0
 80131b6:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 80131b8:	6a3b      	ldr	r3, [r7, #32]
 80131ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        datarate = MAX( datarate, minTxDatarate );
 80131be:	f997 202b 	ldrsb.w	r2, [r7, #43]	; 0x2b
 80131c2:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80131c6:	4293      	cmp	r3, r2
 80131c8:	bfb8      	it	lt
 80131ca:	4613      	movlt	r3, r2
 80131cc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        // Verify if ADR ack req bit needs to be set.
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 80131d0:	68fb      	ldr	r3, [r7, #12]
 80131d2:	685b      	ldr	r3, [r3, #4]
 80131d4:	68fa      	ldr	r2, [r7, #12]
 80131d6:	8912      	ldrh	r2, [r2, #8]
 80131d8:	4293      	cmp	r3, r2
 80131da:	d302      	bcc.n	80131e2 <LoRaMacAdrCalcNext+0x8a>
        {
            adrAckReq = true;
 80131dc:	2301      	movs	r3, #1
 80131de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        // Verify, if we need to set the TX power to default
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	685b      	ldr	r3, [r3, #4]
 80131e6:	68fa      	ldr	r2, [r7, #12]
 80131e8:	8912      	ldrh	r2, [r2, #8]
 80131ea:	4611      	mov	r1, r2
 80131ec:	68fa      	ldr	r2, [r7, #12]
 80131ee:	8952      	ldrh	r2, [r2, #10]
 80131f0:	440a      	add	r2, r1
 80131f2:	4293      	cmp	r3, r2
 80131f4:	d30f      	bcc.n	8013216 <LoRaMacAdrCalcNext+0xbe>
        {
            // Set TX Power to default
            getPhy.Attribute = PHY_DEF_TX_POWER;
 80131f6:	230a      	movs	r3, #10
 80131f8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80131fc:	68fb      	ldr	r3, [r7, #12]
 80131fe:	7c1b      	ldrb	r3, [r3, #16]
 8013200:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8013204:	4611      	mov	r1, r2
 8013206:	4618      	mov	r0, r3
 8013208:	f002 f83a 	bl	8015280 <RegionGetPhyParam>
 801320c:	4603      	mov	r3, r0
 801320e:	623b      	str	r3, [r7, #32]
            txPower = phyParam.Value;
 8013210:	6a3b      	ldr	r3, [r7, #32]
 8013212:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        }

        // Verify, if we need to decrease the data rate
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 8013216:	68fb      	ldr	r3, [r7, #12]
 8013218:	685b      	ldr	r3, [r3, #4]
 801321a:	68fa      	ldr	r2, [r7, #12]
 801321c:	8912      	ldrh	r2, [r2, #8]
 801321e:	4611      	mov	r1, r2
 8013220:	68fa      	ldr	r2, [r7, #12]
 8013222:	8952      	ldrh	r2, [r2, #10]
 8013224:	0052      	lsls	r2, r2, #1
 8013226:	440a      	add	r2, r1
 8013228:	4293      	cmp	r3, r2
 801322a:	d33c      	bcc.n	80132a6 <LoRaMacAdrCalcNext+0x14e>
        {
            // Perform actions with every adrNext->AdrAckDelay only
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 801322c:	68fb      	ldr	r3, [r7, #12]
 801322e:	685b      	ldr	r3, [r3, #4]
 8013230:	68fa      	ldr	r2, [r7, #12]
 8013232:	8912      	ldrh	r2, [r2, #8]
 8013234:	1a9b      	subs	r3, r3, r2
 8013236:	68fa      	ldr	r2, [r7, #12]
 8013238:	8952      	ldrh	r2, [r2, #10]
 801323a:	fbb3 f1f2 	udiv	r1, r3, r2
 801323e:	fb01 f202 	mul.w	r2, r1, r2
 8013242:	1a9b      	subs	r3, r3, r2
 8013244:	2b00      	cmp	r3, #0
 8013246:	d12e      	bne.n	80132a6 <LoRaMacAdrCalcNext+0x14e>
            {
                if( datarate == minTxDatarate )
 8013248:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 801324c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8013250:	429a      	cmp	r2, r3
 8013252:	d110      	bne.n	8013276 <LoRaMacAdrCalcNext+0x11e>
                {
                    // Restore the channel mask
                    if( adrNext->UpdateChanMask == true )
 8013254:	68fb      	ldr	r3, [r7, #12]
 8013256:	781b      	ldrb	r3, [r3, #0]
 8013258:	2b00      	cmp	r3, #0
 801325a:	d009      	beq.n	8013270 <LoRaMacAdrCalcNext+0x118>
                    {
                        InitDefaultsParams_t params;
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 801325c:	2302      	movs	r3, #2
 801325e:	773b      	strb	r3, [r7, #28]
                        RegionInitDefaults( adrNext->Region, &params );
 8013260:	68fb      	ldr	r3, [r7, #12]
 8013262:	7c1b      	ldrb	r3, [r3, #16]
 8013264:	f107 0210 	add.w	r2, r7, #16
 8013268:	4611      	mov	r1, r2
 801326a:	4618      	mov	r0, r3
 801326c:	f002 f83f 	bl	80152ee <RegionInitDefaults>
                    }

                    // Restore NbTrans
                    nbTrans = 1;
 8013270:	2301      	movs	r3, #1
 8013272:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                // Decrease the datarate
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8013276:	2321      	movs	r3, #33	; 0x21
 8013278:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                getPhy.Datarate = datarate;
 801327c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8013280:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8013284:	68fb      	ldr	r3, [r7, #12]
 8013286:	7bdb      	ldrb	r3, [r3, #15]
 8013288:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 801328c:	68fb      	ldr	r3, [r7, #12]
 801328e:	7c1b      	ldrb	r3, [r3, #16]
 8013290:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8013294:	4611      	mov	r1, r2
 8013296:	4618      	mov	r0, r3
 8013298:	f001 fff2 	bl	8015280 <RegionGetPhyParam>
 801329c:	4603      	mov	r3, r0
 801329e:	623b      	str	r3, [r7, #32]
                datarate = phyParam.Value;
 80132a0:	6a3b      	ldr	r3, [r7, #32]
 80132a2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            }
        }
    }

    *drOut = datarate;
 80132a6:	68bb      	ldr	r3, [r7, #8]
 80132a8:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80132ac:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80132b4:	701a      	strb	r2, [r3, #0]
    *nbTransOut = nbTrans;
 80132b6:	683b      	ldr	r3, [r7, #0]
 80132b8:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80132bc:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 80132be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80132c2:	4618      	mov	r0, r3
 80132c4:	3730      	adds	r7, #48	; 0x30
 80132c6:	46bd      	mov	sp, r7
 80132c8:	bd80      	pop	{r7, pc}

080132ca <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 80132ca:	b480      	push	{r7}
 80132cc:	b085      	sub	sp, #20
 80132ce:	af00      	add	r7, sp, #0
 80132d0:	60f8      	str	r0, [r7, #12]
 80132d2:	60b9      	str	r1, [r7, #8]
 80132d4:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80132d6:	bf00      	nop
 80132d8:	3714      	adds	r7, #20
 80132da:	46bd      	mov	sp, r7
 80132dc:	bc80      	pop	{r7}
 80132de:	4770      	bx	lr

080132e0 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 80132e0:	b480      	push	{r7}
 80132e2:	b083      	sub	sp, #12
 80132e4:	af00      	add	r7, sp, #0
 80132e6:	4603      	mov	r3, r0
 80132e8:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80132ea:	bf00      	nop
 80132ec:	370c      	adds	r7, #12
 80132ee:	46bd      	mov	sp, r7
 80132f0:	bc80      	pop	{r7}
 80132f2:	4770      	bx	lr

080132f4 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 80132f4:	b480      	push	{r7}
 80132f6:	b083      	sub	sp, #12
 80132f8:	af00      	add	r7, sp, #0
 80132fa:	4603      	mov	r3, r0
 80132fc:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80132fe:	bf00      	nop
 8013300:	370c      	adds	r7, #12
 8013302:	46bd      	mov	sp, r7
 8013304:	bc80      	pop	{r7}
 8013306:	4770      	bx	lr

08013308 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8013308:	b480      	push	{r7}
 801330a:	b083      	sub	sp, #12
 801330c:	af00      	add	r7, sp, #0
 801330e:	4603      	mov	r3, r0
 8013310:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013312:	bf00      	nop
 8013314:	370c      	adds	r7, #12
 8013316:	46bd      	mov	sp, r7
 8013318:	bc80      	pop	{r7}
 801331a:	4770      	bx	lr

0801331c <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 801331c:	b480      	push	{r7}
 801331e:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8013320:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013322:	4618      	mov	r0, r3
 8013324:	46bd      	mov	sp, r7
 8013326:	bc80      	pop	{r7}
 8013328:	4770      	bx	lr

0801332a <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 801332a:	b480      	push	{r7}
 801332c:	b083      	sub	sp, #12
 801332e:	af00      	add	r7, sp, #0
 8013330:	6078      	str	r0, [r7, #4]
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013332:	bf00      	nop
 8013334:	370c      	adds	r7, #12
 8013336:	46bd      	mov	sp, r7
 8013338:	bc80      	pop	{r7}
 801333a:	4770      	bx	lr

0801333c <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 801333c:	b480      	push	{r7}
 801333e:	b083      	sub	sp, #12
 8013340:	af00      	add	r7, sp, #0
 8013342:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013344:	bf00      	nop
 8013346:	370c      	adds	r7, #12
 8013348:	46bd      	mov	sp, r7
 801334a:	bc80      	pop	{r7}
 801334c:	4770      	bx	lr

0801334e <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 801334e:	b480      	push	{r7}
 8013350:	b083      	sub	sp, #12
 8013352:	af00      	add	r7, sp, #0
 8013354:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013356:	bf00      	nop
 8013358:	370c      	adds	r7, #12
 801335a:	46bd      	mov	sp, r7
 801335c:	bc80      	pop	{r7}
 801335e:	4770      	bx	lr

08013360 <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 8013360:	b480      	push	{r7}
 8013362:	b083      	sub	sp, #12
 8013364:	af00      	add	r7, sp, #0
 8013366:	6078      	str	r0, [r7, #4]
 8013368:	460b      	mov	r3, r1
 801336a:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 801336c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801336e:	4618      	mov	r0, r3
 8013370:	370c      	adds	r7, #12
 8013372:	46bd      	mov	sp, r7
 8013374:	bc80      	pop	{r7}
 8013376:	4770      	bx	lr

08013378 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 8013378:	b480      	push	{r7}
 801337a:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 801337c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801337e:	4618      	mov	r0, r3
 8013380:	46bd      	mov	sp, r7
 8013382:	bc80      	pop	{r7}
 8013384:	4770      	bx	lr

08013386 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8013386:	b480      	push	{r7}
 8013388:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 801338a:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801338c:	4618      	mov	r0, r3
 801338e:	46bd      	mov	sp, r7
 8013390:	bc80      	pop	{r7}
 8013392:	4770      	bx	lr

08013394 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 8013394:	b480      	push	{r7}
 8013396:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8013398:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801339a:	4618      	mov	r0, r3
 801339c:	46bd      	mov	sp, r7
 801339e:	bc80      	pop	{r7}
 80133a0:	4770      	bx	lr

080133a2 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 80133a2:	b480      	push	{r7}
 80133a4:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80133a6:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80133a8:	4618      	mov	r0, r3
 80133aa:	46bd      	mov	sp, r7
 80133ac:	bc80      	pop	{r7}
 80133ae:	4770      	bx	lr

080133b0 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 80133b0:	b480      	push	{r7}
 80133b2:	b083      	sub	sp, #12
 80133b4:	af00      	add	r7, sp, #0
 80133b6:	4603      	mov	r3, r0
 80133b8:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80133ba:	bf00      	nop
 80133bc:	370c      	adds	r7, #12
 80133be:	46bd      	mov	sp, r7
 80133c0:	bc80      	pop	{r7}
 80133c2:	4770      	bx	lr

080133c4 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 80133c4:	b480      	push	{r7}
 80133c6:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80133c8:	bf00      	nop
 80133ca:	46bd      	mov	sp, r7
 80133cc:	bc80      	pop	{r7}
 80133ce:	4770      	bx	lr

080133d0 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 80133d0:	b480      	push	{r7}
 80133d2:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80133d4:	bf00      	nop
 80133d6:	46bd      	mov	sp, r7
 80133d8:	bc80      	pop	{r7}
 80133da:	4770      	bx	lr

080133dc <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 80133dc:	b480      	push	{r7}
 80133de:	b083      	sub	sp, #12
 80133e0:	af00      	add	r7, sp, #0
 80133e2:	4603      	mov	r3, r0
 80133e4:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80133e6:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80133e8:	4618      	mov	r0, r3
 80133ea:	370c      	adds	r7, #12
 80133ec:	46bd      	mov	sp, r7
 80133ee:	bc80      	pop	{r7}
 80133f0:	4770      	bx	lr

080133f2 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 80133f2:	b480      	push	{r7}
 80133f4:	b083      	sub	sp, #12
 80133f6:	af00      	add	r7, sp, #0
 80133f8:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80133fa:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80133fc:	4618      	mov	r0, r3
 80133fe:	370c      	adds	r7, #12
 8013400:	46bd      	mov	sp, r7
 8013402:	bc80      	pop	{r7}
 8013404:	4770      	bx	lr

08013406 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8013406:	b480      	push	{r7}
 8013408:	b083      	sub	sp, #12
 801340a:	af00      	add	r7, sp, #0
 801340c:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 801340e:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013410:	4618      	mov	r0, r3
 8013412:	370c      	adds	r7, #12
 8013414:	46bd      	mov	sp, r7
 8013416:	bc80      	pop	{r7}
 8013418:	4770      	bx	lr

0801341a <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 801341a:	b480      	push	{r7}
 801341c:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801341e:	bf00      	nop
 8013420:	46bd      	mov	sp, r7
 8013422:	bc80      	pop	{r7}
 8013424:	4770      	bx	lr

08013426 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8013426:	b480      	push	{r7}
 8013428:	b083      	sub	sp, #12
 801342a:	af00      	add	r7, sp, #0
 801342c:	4603      	mov	r3, r0
 801342e:	6039      	str	r1, [r7, #0]
 8013430:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 8013432:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013434:	4618      	mov	r0, r3
 8013436:	370c      	adds	r7, #12
 8013438:	46bd      	mov	sp, r7
 801343a:	bc80      	pop	{r7}
 801343c:	4770      	bx	lr

0801343e <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 801343e:	b480      	push	{r7}
 8013440:	b083      	sub	sp, #12
 8013442:	af00      	add	r7, sp, #0
 8013444:	4603      	mov	r3, r0
 8013446:	603a      	str	r2, [r7, #0]
 8013448:	80fb      	strh	r3, [r7, #6]
 801344a:	460b      	mov	r3, r1
 801344c:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801344e:	bf00      	nop
 8013450:	370c      	adds	r7, #12
 8013452:	46bd      	mov	sp, r7
 8013454:	bc80      	pop	{r7}
 8013456:	4770      	bx	lr

08013458 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8013458:	b480      	push	{r7}
 801345a:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801345c:	bf00      	nop
 801345e:	46bd      	mov	sp, r7
 8013460:	bc80      	pop	{r7}
 8013462:	4770      	bx	lr

08013464 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8013464:	b480      	push	{r7}
 8013466:	b083      	sub	sp, #12
 8013468:	af00      	add	r7, sp, #0
 801346a:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 801346c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801346e:	4618      	mov	r0, r3
 8013470:	370c      	adds	r7, #12
 8013472:	46bd      	mov	sp, r7
 8013474:	bc80      	pop	{r7}
 8013476:	4770      	bx	lr

08013478 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8013478:	b480      	push	{r7}
 801347a:	b083      	sub	sp, #12
 801347c:	af00      	add	r7, sp, #0
 801347e:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8013480:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013482:	4618      	mov	r0, r3
 8013484:	370c      	adds	r7, #12
 8013486:	46bd      	mov	sp, r7
 8013488:	bc80      	pop	{r7}
 801348a:	4770      	bx	lr

0801348c <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 801348c:	b480      	push	{r7}
 801348e:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013490:	bf00      	nop
 8013492:	46bd      	mov	sp, r7
 8013494:	bc80      	pop	{r7}
 8013496:	4770      	bx	lr

08013498 <LoRaMacClassBSetFPendingBit>:
#endif /* LORAMAC_CLASSB_ENABLED */
}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
void LoRaMacClassBSetFPendingBit( uint32_t address, uint8_t fPendingSet )
{
 8013498:	b480      	push	{r7}
 801349a:	b083      	sub	sp, #12
 801349c:	af00      	add	r7, sp, #0
 801349e:	6078      	str	r0, [r7, #4]
 80134a0:	460b      	mov	r3, r1
 80134a2:	70fb      	strb	r3, [r7, #3]
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80134a4:	bf00      	nop
 80134a6:	370c      	adds	r7, #12
 80134a8:	46bd      	mov	sp, r7
 80134aa:	bc80      	pop	{r7}
 80134ac:	4770      	bx	lr

080134ae <LoRaMacClassBProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 80134ae:	b480      	push	{r7}
 80134b0:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80134b2:	bf00      	nop
 80134b4:	46bd      	mov	sp, r7
 80134b6:	bc80      	pop	{r7}
 80134b8:	4770      	bx	lr

080134ba <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 80134ba:	b480      	push	{r7}
 80134bc:	b085      	sub	sp, #20
 80134be:	af00      	add	r7, sp, #0
 80134c0:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80134c6:	2300      	movs	r3, #0
 80134c8:	81fb      	strh	r3, [r7, #14]
 80134ca:	e00a      	b.n	80134e2 <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 80134cc:	89fb      	ldrh	r3, [r7, #14]
 80134ce:	68ba      	ldr	r2, [r7, #8]
 80134d0:	4413      	add	r3, r2
 80134d2:	781b      	ldrb	r3, [r3, #0]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d001      	beq.n	80134dc <IsSlotFree+0x22>
        {
            return false;
 80134d8:	2300      	movs	r3, #0
 80134da:	e006      	b.n	80134ea <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80134dc:	89fb      	ldrh	r3, [r7, #14]
 80134de:	3301      	adds	r3, #1
 80134e0:	81fb      	strh	r3, [r7, #14]
 80134e2:	89fb      	ldrh	r3, [r7, #14]
 80134e4:	2b0f      	cmp	r3, #15
 80134e6:	d9f1      	bls.n	80134cc <IsSlotFree+0x12>
        }
    }
    return true;
 80134e8:	2301      	movs	r3, #1
}
 80134ea:	4618      	mov	r0, r3
 80134ec:	3714      	adds	r7, #20
 80134ee:	46bd      	mov	sp, r7
 80134f0:	bc80      	pop	{r7}
 80134f2:	4770      	bx	lr

080134f4 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 80134f4:	b580      	push	{r7, lr}
 80134f6:	b082      	sub	sp, #8
 80134f8:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 80134fa:	2300      	movs	r3, #0
 80134fc:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 80134fe:	e007      	b.n	8013510 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8013500:	79fb      	ldrb	r3, [r7, #7]
 8013502:	3301      	adds	r3, #1
 8013504:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 8013506:	79fb      	ldrb	r3, [r7, #7]
 8013508:	2b20      	cmp	r3, #32
 801350a:	d101      	bne.n	8013510 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 801350c:	2300      	movs	r3, #0
 801350e:	e012      	b.n	8013536 <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8013510:	79fb      	ldrb	r3, [r7, #7]
 8013512:	011b      	lsls	r3, r3, #4
 8013514:	3308      	adds	r3, #8
 8013516:	4a0a      	ldr	r2, [pc, #40]	; (8013540 <MallocNewMacCommandSlot+0x4c>)
 8013518:	4413      	add	r3, r2
 801351a:	4618      	mov	r0, r3
 801351c:	f7ff ffcd 	bl	80134ba <IsSlotFree>
 8013520:	4603      	mov	r3, r0
 8013522:	f083 0301 	eor.w	r3, r3, #1
 8013526:	b2db      	uxtb	r3, r3
 8013528:	2b00      	cmp	r3, #0
 801352a:	d1e9      	bne.n	8013500 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 801352c:	79fb      	ldrb	r3, [r7, #7]
 801352e:	011b      	lsls	r3, r3, #4
 8013530:	3308      	adds	r3, #8
 8013532:	4a03      	ldr	r2, [pc, #12]	; (8013540 <MallocNewMacCommandSlot+0x4c>)
 8013534:	4413      	add	r3, r2
}
 8013536:	4618      	mov	r0, r3
 8013538:	3708      	adds	r7, #8
 801353a:	46bd      	mov	sp, r7
 801353c:	bd80      	pop	{r7, pc}
 801353e:	bf00      	nop
 8013540:	2000189c 	.word	0x2000189c

08013544 <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8013544:	b580      	push	{r7, lr}
 8013546:	b082      	sub	sp, #8
 8013548:	af00      	add	r7, sp, #0
 801354a:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	2b00      	cmp	r3, #0
 8013550:	d101      	bne.n	8013556 <FreeMacCommandSlot+0x12>
    {
        return false;
 8013552:	2300      	movs	r3, #0
 8013554:	e005      	b.n	8013562 <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8013556:	2210      	movs	r2, #16
 8013558:	2100      	movs	r1, #0
 801355a:	6878      	ldr	r0, [r7, #4]
 801355c:	f005 fccc 	bl	8018ef8 <memset1>

    return true;
 8013560:	2301      	movs	r3, #1
}
 8013562:	4618      	mov	r0, r3
 8013564:	3708      	adds	r7, #8
 8013566:	46bd      	mov	sp, r7
 8013568:	bd80      	pop	{r7, pc}

0801356a <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 801356a:	b480      	push	{r7}
 801356c:	b083      	sub	sp, #12
 801356e:	af00      	add	r7, sp, #0
 8013570:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	2b00      	cmp	r3, #0
 8013576:	d101      	bne.n	801357c <LinkedListInit+0x12>
    {
        return false;
 8013578:	2300      	movs	r3, #0
 801357a:	e006      	b.n	801358a <LinkedListInit+0x20>
    }

    list->First = NULL;
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	2200      	movs	r2, #0
 8013580:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	2200      	movs	r2, #0
 8013586:	605a      	str	r2, [r3, #4]

    return true;
 8013588:	2301      	movs	r3, #1
}
 801358a:	4618      	mov	r0, r3
 801358c:	370c      	adds	r7, #12
 801358e:	46bd      	mov	sp, r7
 8013590:	bc80      	pop	{r7}
 8013592:	4770      	bx	lr

08013594 <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8013594:	b480      	push	{r7}
 8013596:	b083      	sub	sp, #12
 8013598:	af00      	add	r7, sp, #0
 801359a:	6078      	str	r0, [r7, #4]
 801359c:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d002      	beq.n	80135aa <LinkedListAdd+0x16>
 80135a4:	683b      	ldr	r3, [r7, #0]
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d101      	bne.n	80135ae <LinkedListAdd+0x1a>
    {
        return false;
 80135aa:	2300      	movs	r3, #0
 80135ac:	e015      	b.n	80135da <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	681b      	ldr	r3, [r3, #0]
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	d102      	bne.n	80135bc <LinkedListAdd+0x28>
    {
        list->First = element;
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	683a      	ldr	r2, [r7, #0]
 80135ba:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	685b      	ldr	r3, [r3, #4]
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d003      	beq.n	80135cc <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	685b      	ldr	r3, [r3, #4]
 80135c8:	683a      	ldr	r2, [r7, #0]
 80135ca:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 80135cc:	683b      	ldr	r3, [r7, #0]
 80135ce:	2200      	movs	r2, #0
 80135d0:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	683a      	ldr	r2, [r7, #0]
 80135d6:	605a      	str	r2, [r3, #4]

    return true;
 80135d8:	2301      	movs	r3, #1
}
 80135da:	4618      	mov	r0, r3
 80135dc:	370c      	adds	r7, #12
 80135de:	46bd      	mov	sp, r7
 80135e0:	bc80      	pop	{r7}
 80135e2:	4770      	bx	lr

080135e4 <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 80135e4:	b480      	push	{r7}
 80135e6:	b085      	sub	sp, #20
 80135e8:	af00      	add	r7, sp, #0
 80135ea:	6078      	str	r0, [r7, #4]
 80135ec:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d002      	beq.n	80135fa <LinkedListGetPrevious+0x16>
 80135f4:	683b      	ldr	r3, [r7, #0]
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d101      	bne.n	80135fe <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 80135fa:	2300      	movs	r3, #0
 80135fc:	e016      	b.n	801362c <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	681b      	ldr	r3, [r3, #0]
 8013602:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8013604:	683a      	ldr	r2, [r7, #0]
 8013606:	68fb      	ldr	r3, [r7, #12]
 8013608:	429a      	cmp	r2, r3
 801360a:	d00c      	beq.n	8013626 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 801360c:	e002      	b.n	8013614 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 801360e:	68fb      	ldr	r3, [r7, #12]
 8013610:	681b      	ldr	r3, [r3, #0]
 8013612:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8013614:	68fb      	ldr	r3, [r7, #12]
 8013616:	2b00      	cmp	r3, #0
 8013618:	d007      	beq.n	801362a <LinkedListGetPrevious+0x46>
 801361a:	68fb      	ldr	r3, [r7, #12]
 801361c:	681b      	ldr	r3, [r3, #0]
 801361e:	683a      	ldr	r2, [r7, #0]
 8013620:	429a      	cmp	r2, r3
 8013622:	d1f4      	bne.n	801360e <LinkedListGetPrevious+0x2a>
 8013624:	e001      	b.n	801362a <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8013626:	2300      	movs	r3, #0
 8013628:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 801362a:	68fb      	ldr	r3, [r7, #12]
}
 801362c:	4618      	mov	r0, r3
 801362e:	3714      	adds	r7, #20
 8013630:	46bd      	mov	sp, r7
 8013632:	bc80      	pop	{r7}
 8013634:	4770      	bx	lr

08013636 <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8013636:	b580      	push	{r7, lr}
 8013638:	b084      	sub	sp, #16
 801363a:	af00      	add	r7, sp, #0
 801363c:	6078      	str	r0, [r7, #4]
 801363e:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	2b00      	cmp	r3, #0
 8013644:	d002      	beq.n	801364c <LinkedListRemove+0x16>
 8013646:	683b      	ldr	r3, [r7, #0]
 8013648:	2b00      	cmp	r3, #0
 801364a:	d101      	bne.n	8013650 <LinkedListRemove+0x1a>
    {
        return false;
 801364c:	2300      	movs	r3, #0
 801364e:	e020      	b.n	8013692 <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8013650:	6839      	ldr	r1, [r7, #0]
 8013652:	6878      	ldr	r0, [r7, #4]
 8013654:	f7ff ffc6 	bl	80135e4 <LinkedListGetPrevious>
 8013658:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	681b      	ldr	r3, [r3, #0]
 801365e:	683a      	ldr	r2, [r7, #0]
 8013660:	429a      	cmp	r2, r3
 8013662:	d103      	bne.n	801366c <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8013664:	683b      	ldr	r3, [r7, #0]
 8013666:	681a      	ldr	r2, [r3, #0]
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	685b      	ldr	r3, [r3, #4]
 8013670:	683a      	ldr	r2, [r7, #0]
 8013672:	429a      	cmp	r2, r3
 8013674:	d102      	bne.n	801367c <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	68fa      	ldr	r2, [r7, #12]
 801367a:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 801367c:	68fb      	ldr	r3, [r7, #12]
 801367e:	2b00      	cmp	r3, #0
 8013680:	d003      	beq.n	801368a <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 8013682:	683b      	ldr	r3, [r7, #0]
 8013684:	681a      	ldr	r2, [r3, #0]
 8013686:	68fb      	ldr	r3, [r7, #12]
 8013688:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 801368a:	683b      	ldr	r3, [r7, #0]
 801368c:	2200      	movs	r2, #0
 801368e:	601a      	str	r2, [r3, #0]

    return true;
 8013690:	2301      	movs	r3, #1
}
 8013692:	4618      	mov	r0, r3
 8013694:	3710      	adds	r7, #16
 8013696:	46bd      	mov	sp, r7
 8013698:	bd80      	pop	{r7, pc}
	...

0801369c <IsSticky>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 801369c:	b480      	push	{r7}
 801369e:	b083      	sub	sp, #12
 80136a0:	af00      	add	r7, sp, #0
 80136a2:	4603      	mov	r3, r0
 80136a4:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 80136a6:	79fb      	ldrb	r3, [r7, #7]
 80136a8:	2b11      	cmp	r3, #17
 80136aa:	bf8c      	ite	hi
 80136ac:	2201      	movhi	r2, #1
 80136ae:	2200      	movls	r2, #0
 80136b0:	b2d2      	uxtb	r2, r2
 80136b2:	2a00      	cmp	r2, #0
 80136b4:	d10d      	bne.n	80136d2 <IsSticky+0x36>
 80136b6:	4a0a      	ldr	r2, [pc, #40]	; (80136e0 <IsSticky+0x44>)
 80136b8:	fa22 f303 	lsr.w	r3, r2, r3
 80136bc:	f003 0301 	and.w	r3, r3, #1
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	bf14      	ite	ne
 80136c4:	2301      	movne	r3, #1
 80136c6:	2300      	moveq	r3, #0
 80136c8:	b2db      	uxtb	r3, r3
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d001      	beq.n	80136d2 <IsSticky+0x36>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 80136ce:	2301      	movs	r3, #1
 80136d0:	e000      	b.n	80136d4 <IsSticky+0x38>
        default:
            return false;
 80136d2:	2300      	movs	r3, #0
    }
}
 80136d4:	4618      	mov	r0, r3
 80136d6:	370c      	adds	r7, #12
 80136d8:	46bd      	mov	sp, r7
 80136da:	bc80      	pop	{r7}
 80136dc:	4770      	bx	lr
 80136de:	bf00      	nop
 80136e0:	00020720 	.word	0x00020720

080136e4 <IsConfirmationRequired>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsConfirmationRequired( uint8_t cid )
{
 80136e4:	b480      	push	{r7}
 80136e6:	b083      	sub	sp, #12
 80136e8:	af00      	add	r7, sp, #0
 80136ea:	4603      	mov	r3, r0
 80136ec:	71fb      	strb	r3, [r7, #7]
        case MOTE_MAC_REKEY_IND:
        case MOTE_MAC_DEVICE_MODE_IND:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
 80136ee:	2300      	movs	r3, #0
    }
}
 80136f0:	4618      	mov	r0, r3
 80136f2:	370c      	adds	r7, #12
 80136f4:	46bd      	mov	sp, r7
 80136f6:	bc80      	pop	{r7}
 80136f8:	4770      	bx	lr
	...

080136fc <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 80136fc:	b580      	push	{r7, lr}
 80136fe:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8013700:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8013704:	2100      	movs	r1, #0
 8013706:	4804      	ldr	r0, [pc, #16]	; (8013718 <LoRaMacCommandsInit+0x1c>)
 8013708:	f005 fbf6 	bl	8018ef8 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 801370c:	4802      	ldr	r0, [pc, #8]	; (8013718 <LoRaMacCommandsInit+0x1c>)
 801370e:	f7ff ff2c 	bl	801356a <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 8013712:	2300      	movs	r3, #0
}
 8013714:	4618      	mov	r0, r3
 8013716:	bd80      	pop	{r7, pc}
 8013718:	2000189c 	.word	0x2000189c

0801371c <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 801371c:	b580      	push	{r7, lr}
 801371e:	b086      	sub	sp, #24
 8013720:	af00      	add	r7, sp, #0
 8013722:	4603      	mov	r3, r0
 8013724:	60b9      	str	r1, [r7, #8]
 8013726:	607a      	str	r2, [r7, #4]
 8013728:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 801372a:	68bb      	ldr	r3, [r7, #8]
 801372c:	2b00      	cmp	r3, #0
 801372e:	d101      	bne.n	8013734 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8013730:	2301      	movs	r3, #1
 8013732:	e03b      	b.n	80137ac <LoRaMacCommandsAddCmd+0x90>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8013734:	f7ff fede 	bl	80134f4 <MallocNewMacCommandSlot>
 8013738:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 801373a:	697b      	ldr	r3, [r7, #20]
 801373c:	2b00      	cmp	r3, #0
 801373e:	d101      	bne.n	8013744 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8013740:	2302      	movs	r3, #2
 8013742:	e033      	b.n	80137ac <LoRaMacCommandsAddCmd+0x90>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8013744:	6979      	ldr	r1, [r7, #20]
 8013746:	481b      	ldr	r0, [pc, #108]	; (80137b4 <LoRaMacCommandsAddCmd+0x98>)
 8013748:	f7ff ff24 	bl	8013594 <LinkedListAdd>
 801374c:	4603      	mov	r3, r0
 801374e:	f083 0301 	eor.w	r3, r3, #1
 8013752:	b2db      	uxtb	r3, r3
 8013754:	2b00      	cmp	r3, #0
 8013756:	d001      	beq.n	801375c <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8013758:	2305      	movs	r3, #5
 801375a:	e027      	b.n	80137ac <LoRaMacCommandsAddCmd+0x90>
    }

    // Set Values
    newCmd->CID = cid;
 801375c:	697b      	ldr	r3, [r7, #20]
 801375e:	7bfa      	ldrb	r2, [r7, #15]
 8013760:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8013762:	697b      	ldr	r3, [r7, #20]
 8013764:	687a      	ldr	r2, [r7, #4]
 8013766:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8013768:	697b      	ldr	r3, [r7, #20]
 801376a:	3305      	adds	r3, #5
 801376c:	687a      	ldr	r2, [r7, #4]
 801376e:	b292      	uxth	r2, r2
 8013770:	68b9      	ldr	r1, [r7, #8]
 8013772:	4618      	mov	r0, r3
 8013774:	f005 fb85 	bl	8018e82 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8013778:	7bfb      	ldrb	r3, [r7, #15]
 801377a:	4618      	mov	r0, r3
 801377c:	f7ff ff8e 	bl	801369c <IsSticky>
 8013780:	4603      	mov	r3, r0
 8013782:	461a      	mov	r2, r3
 8013784:	697b      	ldr	r3, [r7, #20]
 8013786:	731a      	strb	r2, [r3, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 8013788:	7bfb      	ldrb	r3, [r7, #15]
 801378a:	4618      	mov	r0, r3
 801378c:	f7ff ffaa 	bl	80136e4 <IsConfirmationRequired>
 8013790:	4603      	mov	r3, r0
 8013792:	461a      	mov	r2, r3
 8013794:	697b      	ldr	r3, [r7, #20]
 8013796:	735a      	strb	r2, [r3, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8013798:	4b06      	ldr	r3, [pc, #24]	; (80137b4 <LoRaMacCommandsAddCmd+0x98>)
 801379a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	4413      	add	r3, r2
 80137a2:	3301      	adds	r3, #1
 80137a4:	4a03      	ldr	r2, [pc, #12]	; (80137b4 <LoRaMacCommandsAddCmd+0x98>)
 80137a6:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 80137aa:	2300      	movs	r3, #0
}
 80137ac:	4618      	mov	r0, r3
 80137ae:	3718      	adds	r7, #24
 80137b0:	46bd      	mov	sp, r7
 80137b2:	bd80      	pop	{r7, pc}
 80137b4:	2000189c 	.word	0x2000189c

080137b8 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 80137b8:	b580      	push	{r7, lr}
 80137ba:	b082      	sub	sp, #8
 80137bc:	af00      	add	r7, sp, #0
 80137be:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d101      	bne.n	80137ca <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80137c6:	2301      	movs	r3, #1
 80137c8:	e021      	b.n	801380e <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 80137ca:	6879      	ldr	r1, [r7, #4]
 80137cc:	4812      	ldr	r0, [pc, #72]	; (8013818 <LoRaMacCommandsRemoveCmd+0x60>)
 80137ce:	f7ff ff32 	bl	8013636 <LinkedListRemove>
 80137d2:	4603      	mov	r3, r0
 80137d4:	f083 0301 	eor.w	r3, r3, #1
 80137d8:	b2db      	uxtb	r3, r3
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d001      	beq.n	80137e2 <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 80137de:	2303      	movs	r3, #3
 80137e0:	e015      	b.n	801380e <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 80137e2:	4b0d      	ldr	r3, [pc, #52]	; (8013818 <LoRaMacCommandsRemoveCmd+0x60>)
 80137e4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	689b      	ldr	r3, [r3, #8]
 80137ec:	1ad3      	subs	r3, r2, r3
 80137ee:	3b01      	subs	r3, #1
 80137f0:	4a09      	ldr	r2, [pc, #36]	; (8013818 <LoRaMacCommandsRemoveCmd+0x60>)
 80137f2:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 80137f6:	6878      	ldr	r0, [r7, #4]
 80137f8:	f7ff fea4 	bl	8013544 <FreeMacCommandSlot>
 80137fc:	4603      	mov	r3, r0
 80137fe:	f083 0301 	eor.w	r3, r3, #1
 8013802:	b2db      	uxtb	r3, r3
 8013804:	2b00      	cmp	r3, #0
 8013806:	d001      	beq.n	801380c <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8013808:	2305      	movs	r3, #5
 801380a:	e000      	b.n	801380e <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 801380c:	2300      	movs	r3, #0
}
 801380e:	4618      	mov	r0, r3
 8013810:	3708      	adds	r7, #8
 8013812:	46bd      	mov	sp, r7
 8013814:	bd80      	pop	{r7, pc}
 8013816:	bf00      	nop
 8013818:	2000189c 	.word	0x2000189c

0801381c <LoRaMacCommandsGetCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
 801381c:	b480      	push	{r7}
 801381e:	b085      	sub	sp, #20
 8013820:	af00      	add	r7, sp, #0
 8013822:	4603      	mov	r3, r0
 8013824:	6039      	str	r1, [r7, #0]
 8013826:	71fb      	strb	r3, [r7, #7]
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8013828:	4b0e      	ldr	r3, [pc, #56]	; (8013864 <LoRaMacCommandsGetCmd+0x48>)
 801382a:	681b      	ldr	r3, [r3, #0]
 801382c:	60fb      	str	r3, [r7, #12]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 801382e:	e002      	b.n	8013836 <LoRaMacCommandsGetCmd+0x1a>
    {
        curElement = curElement->Next;
 8013830:	68fb      	ldr	r3, [r7, #12]
 8013832:	681b      	ldr	r3, [r3, #0]
 8013834:	60fb      	str	r3, [r7, #12]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8013836:	68fb      	ldr	r3, [r7, #12]
 8013838:	2b00      	cmp	r3, #0
 801383a:	d004      	beq.n	8013846 <LoRaMacCommandsGetCmd+0x2a>
 801383c:	68fb      	ldr	r3, [r7, #12]
 801383e:	791b      	ldrb	r3, [r3, #4]
 8013840:	79fa      	ldrb	r2, [r7, #7]
 8013842:	429a      	cmp	r2, r3
 8013844:	d1f4      	bne.n	8013830 <LoRaMacCommandsGetCmd+0x14>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 8013846:	683b      	ldr	r3, [r7, #0]
 8013848:	68fa      	ldr	r2, [r7, #12]
 801384a:	601a      	str	r2, [r3, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 801384c:	68fb      	ldr	r3, [r7, #12]
 801384e:	2b00      	cmp	r3, #0
 8013850:	d101      	bne.n	8013856 <LoRaMacCommandsGetCmd+0x3a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8013852:	2303      	movs	r3, #3
 8013854:	e000      	b.n	8013858 <LoRaMacCommandsGetCmd+0x3c>
    }
    return LORAMAC_COMMANDS_SUCCESS;
 8013856:	2300      	movs	r3, #0
}
 8013858:	4618      	mov	r0, r3
 801385a:	3714      	adds	r7, #20
 801385c:	46bd      	mov	sp, r7
 801385e:	bc80      	pop	{r7}
 8013860:	4770      	bx	lr
 8013862:	bf00      	nop
 8013864:	2000189c 	.word	0x2000189c

08013868 <LoRaMacCommandsRemoveNoneStickyCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8013868:	b580      	push	{r7, lr}
 801386a:	b082      	sub	sp, #8
 801386c:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 801386e:	4b0f      	ldr	r3, [pc, #60]	; (80138ac <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8013870:	681b      	ldr	r3, [r3, #0]
 8013872:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8013874:	e012      	b.n	801389c <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	7b1b      	ldrb	r3, [r3, #12]
 801387a:	f083 0301 	eor.w	r3, r3, #1
 801387e:	b2db      	uxtb	r3, r3
 8013880:	2b00      	cmp	r3, #0
 8013882:	d008      	beq.n	8013896 <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 801388a:	6878      	ldr	r0, [r7, #4]
 801388c:	f7ff ff94 	bl	80137b8 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8013890:	683b      	ldr	r3, [r7, #0]
 8013892:	607b      	str	r3, [r7, #4]
 8013894:	e002      	b.n	801389c <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	681b      	ldr	r3, [r3, #0]
 801389a:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d1e9      	bne.n	8013876 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80138a2:	2300      	movs	r3, #0
}
 80138a4:	4618      	mov	r0, r3
 80138a6:	3708      	adds	r7, #8
 80138a8:	46bd      	mov	sp, r7
 80138aa:	bd80      	pop	{r7, pc}
 80138ac:	2000189c 	.word	0x2000189c

080138b0 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 80138b0:	b580      	push	{r7, lr}
 80138b2:	b082      	sub	sp, #8
 80138b4:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80138b6:	4b13      	ldr	r3, [pc, #76]	; (8013904 <LoRaMacCommandsRemoveStickyAnsCmds+0x54>)
 80138b8:	681b      	ldr	r3, [r3, #0]
 80138ba:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 80138bc:	e01a      	b.n	80138f4 <LoRaMacCommandsRemoveStickyAnsCmds+0x44>
    {
        nexElement = curElement->Next;
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	681b      	ldr	r3, [r3, #0]
 80138c2:	603b      	str	r3, [r7, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	791b      	ldrb	r3, [r3, #4]
 80138c8:	4618      	mov	r0, r3
 80138ca:	f7ff fee7 	bl	801369c <IsSticky>
 80138ce:	4603      	mov	r3, r0
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d00d      	beq.n	80138f0 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	791b      	ldrb	r3, [r3, #4]
 80138d8:	4618      	mov	r0, r3
 80138da:	f7ff ff03 	bl	80136e4 <IsConfirmationRequired>
 80138de:	4603      	mov	r3, r0
 80138e0:	f083 0301 	eor.w	r3, r3, #1
 80138e4:	b2db      	uxtb	r3, r3
        if( ( IsSticky( curElement->CID ) == true ) &&
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	d002      	beq.n	80138f0 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 80138ea:	6878      	ldr	r0, [r7, #4]
 80138ec:	f7ff ff64 	bl	80137b8 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 80138f0:	683b      	ldr	r3, [r7, #0]
 80138f2:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d1e1      	bne.n	80138be <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80138fa:	2300      	movs	r3, #0
}
 80138fc:	4618      	mov	r0, r3
 80138fe:	3708      	adds	r7, #8
 8013900:	46bd      	mov	sp, r7
 8013902:	bd80      	pop	{r7, pc}
 8013904:	2000189c 	.word	0x2000189c

08013908 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8013908:	b480      	push	{r7}
 801390a:	b083      	sub	sp, #12
 801390c:	af00      	add	r7, sp, #0
 801390e:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	2b00      	cmp	r3, #0
 8013914:	d101      	bne.n	801391a <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8013916:	2301      	movs	r3, #1
 8013918:	e005      	b.n	8013926 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 801391a:	4b05      	ldr	r3, [pc, #20]	; (8013930 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 801391c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8013924:	2300      	movs	r3, #0
}
 8013926:	4618      	mov	r0, r3
 8013928:	370c      	adds	r7, #12
 801392a:	46bd      	mov	sp, r7
 801392c:	bc80      	pop	{r7}
 801392e:	4770      	bx	lr
 8013930:	2000189c 	.word	0x2000189c

08013934 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8013934:	b580      	push	{r7, lr}
 8013936:	b088      	sub	sp, #32
 8013938:	af00      	add	r7, sp, #0
 801393a:	60f8      	str	r0, [r7, #12]
 801393c:	60b9      	str	r1, [r7, #8]
 801393e:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8013940:	4b25      	ldr	r3, [pc, #148]	; (80139d8 <LoRaMacCommandsSerializeCmds+0xa4>)
 8013942:	681b      	ldr	r3, [r3, #0]
 8013944:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8013946:	2300      	movs	r3, #0
 8013948:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	2b00      	cmp	r3, #0
 801394e:	d002      	beq.n	8013956 <LoRaMacCommandsSerializeCmds+0x22>
 8013950:	68bb      	ldr	r3, [r7, #8]
 8013952:	2b00      	cmp	r3, #0
 8013954:	d126      	bne.n	80139a4 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8013956:	2301      	movs	r3, #1
 8013958:	e039      	b.n	80139ce <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 801395a:	7efb      	ldrb	r3, [r7, #27]
 801395c:	68fa      	ldr	r2, [r7, #12]
 801395e:	1ad2      	subs	r2, r2, r3
 8013960:	69fb      	ldr	r3, [r7, #28]
 8013962:	689b      	ldr	r3, [r3, #8]
 8013964:	3301      	adds	r3, #1
 8013966:	429a      	cmp	r2, r3
 8013968:	d320      	bcc.n	80139ac <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 801396a:	7efb      	ldrb	r3, [r7, #27]
 801396c:	1c5a      	adds	r2, r3, #1
 801396e:	76fa      	strb	r2, [r7, #27]
 8013970:	461a      	mov	r2, r3
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	4413      	add	r3, r2
 8013976:	69fa      	ldr	r2, [r7, #28]
 8013978:	7912      	ldrb	r2, [r2, #4]
 801397a:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 801397c:	7efb      	ldrb	r3, [r7, #27]
 801397e:	687a      	ldr	r2, [r7, #4]
 8013980:	18d0      	adds	r0, r2, r3
 8013982:	69fb      	ldr	r3, [r7, #28]
 8013984:	1d59      	adds	r1, r3, #5
 8013986:	69fb      	ldr	r3, [r7, #28]
 8013988:	689b      	ldr	r3, [r3, #8]
 801398a:	b29b      	uxth	r3, r3
 801398c:	461a      	mov	r2, r3
 801398e:	f005 fa78 	bl	8018e82 <memcpy1>
            itr += curElement->PayloadSize;
 8013992:	69fb      	ldr	r3, [r7, #28]
 8013994:	689b      	ldr	r3, [r3, #8]
 8013996:	b2da      	uxtb	r2, r3
 8013998:	7efb      	ldrb	r3, [r7, #27]
 801399a:	4413      	add	r3, r2
 801399c:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 801399e:	69fb      	ldr	r3, [r7, #28]
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80139a4:	69fb      	ldr	r3, [r7, #28]
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d1d7      	bne.n	801395a <LoRaMacCommandsSerializeCmds+0x26>
 80139aa:	e009      	b.n	80139c0 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 80139ac:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 80139ae:	e007      	b.n	80139c0 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 80139b0:	69fb      	ldr	r3, [r7, #28]
 80139b2:	681b      	ldr	r3, [r3, #0]
 80139b4:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 80139b6:	69f8      	ldr	r0, [r7, #28]
 80139b8:	f7ff fefe 	bl	80137b8 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 80139bc:	697b      	ldr	r3, [r7, #20]
 80139be:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80139c0:	69fb      	ldr	r3, [r7, #28]
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d1f4      	bne.n	80139b0 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 80139c6:	68b8      	ldr	r0, [r7, #8]
 80139c8:	f7ff ff9e 	bl	8013908 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 80139cc:	2300      	movs	r3, #0
}
 80139ce:	4618      	mov	r0, r3
 80139d0:	3720      	adds	r7, #32
 80139d2:	46bd      	mov	sp, r7
 80139d4:	bd80      	pop	{r7, pc}
 80139d6:	bf00      	nop
 80139d8:	2000189c 	.word	0x2000189c

080139dc <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 80139dc:	b480      	push	{r7}
 80139de:	b085      	sub	sp, #20
 80139e0:	af00      	add	r7, sp, #0
 80139e2:	4603      	mov	r3, r0
 80139e4:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 80139e6:	2300      	movs	r3, #0
 80139e8:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 80139ea:	79fb      	ldrb	r3, [r7, #7]
 80139ec:	3b02      	subs	r3, #2
 80139ee:	2b11      	cmp	r3, #17
 80139f0:	d850      	bhi.n	8013a94 <LoRaMacCommandsGetCmdSize+0xb8>
 80139f2:	a201      	add	r2, pc, #4	; (adr r2, 80139f8 <LoRaMacCommandsGetCmdSize+0x1c>)
 80139f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80139f8:	08013a41 	.word	0x08013a41
 80139fc:	08013a47 	.word	0x08013a47
 8013a00:	08013a4d 	.word	0x08013a4d
 8013a04:	08013a53 	.word	0x08013a53
 8013a08:	08013a59 	.word	0x08013a59
 8013a0c:	08013a5f 	.word	0x08013a5f
 8013a10:	08013a65 	.word	0x08013a65
 8013a14:	08013a6b 	.word	0x08013a6b
 8013a18:	08013a71 	.word	0x08013a71
 8013a1c:	08013a95 	.word	0x08013a95
 8013a20:	08013a95 	.word	0x08013a95
 8013a24:	08013a77 	.word	0x08013a77
 8013a28:	08013a95 	.word	0x08013a95
 8013a2c:	08013a95 	.word	0x08013a95
 8013a30:	08013a7d 	.word	0x08013a7d
 8013a34:	08013a83 	.word	0x08013a83
 8013a38:	08013a89 	.word	0x08013a89
 8013a3c:	08013a8f 	.word	0x08013a8f
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8013a40:	2303      	movs	r3, #3
 8013a42:	73fb      	strb	r3, [r7, #15]
            break;
 8013a44:	e027      	b.n	8013a96 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8013a46:	2305      	movs	r3, #5
 8013a48:	73fb      	strb	r3, [r7, #15]
            break;
 8013a4a:	e024      	b.n	8013a96 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8013a4c:	2302      	movs	r3, #2
 8013a4e:	73fb      	strb	r3, [r7, #15]
            break;
 8013a50:	e021      	b.n	8013a96 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 8013a52:	2305      	movs	r3, #5
 8013a54:	73fb      	strb	r3, [r7, #15]
            break;
 8013a56:	e01e      	b.n	8013a96 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8013a58:	2301      	movs	r3, #1
 8013a5a:	73fb      	strb	r3, [r7, #15]
            break;
 8013a5c:	e01b      	b.n	8013a96 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8013a5e:	2306      	movs	r3, #6
 8013a60:	73fb      	strb	r3, [r7, #15]
            break;
 8013a62:	e018      	b.n	8013a96 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8013a64:	2302      	movs	r3, #2
 8013a66:	73fb      	strb	r3, [r7, #15]
            break;
 8013a68:	e015      	b.n	8013a96 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8013a6a:	2302      	movs	r3, #2
 8013a6c:	73fb      	strb	r3, [r7, #15]
            break;
 8013a6e:	e012      	b.n	8013a96 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8013a70:	2305      	movs	r3, #5
 8013a72:	73fb      	strb	r3, [r7, #15]
            break;
 8013a74:	e00f      	b.n	8013a96 <LoRaMacCommandsGetCmdSize+0xba>
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8013a76:	2306      	movs	r3, #6
 8013a78:	73fb      	strb	r3, [r7, #15]
            break;
 8013a7a:	e00c      	b.n	8013a96 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8013a7c:	2301      	movs	r3, #1
 8013a7e:	73fb      	strb	r3, [r7, #15]
            break;
 8013a80:	e009      	b.n	8013a96 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8013a82:	2305      	movs	r3, #5
 8013a84:	73fb      	strb	r3, [r7, #15]
            break;
 8013a86:	e006      	b.n	8013a96 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8013a88:	2304      	movs	r3, #4
 8013a8a:	73fb      	strb	r3, [r7, #15]
            break;
 8013a8c:	e003      	b.n	8013a96 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8013a8e:	2304      	movs	r3, #4
 8013a90:	73fb      	strb	r3, [r7, #15]
            break;
 8013a92:	e000      	b.n	8013a96 <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8013a94:	bf00      	nop
        }
    }
    return cidSize;
 8013a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a98:	4618      	mov	r0, r3
 8013a9a:	3714      	adds	r7, #20
 8013a9c:	46bd      	mov	sp, r7
 8013a9e:	bc80      	pop	{r7}
 8013aa0:	4770      	bx	lr
 8013aa2:	bf00      	nop

08013aa4 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8013aa4:	b480      	push	{r7}
 8013aa6:	b083      	sub	sp, #12
 8013aa8:	af00      	add	r7, sp, #0
 8013aaa:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	4a07      	ldr	r2, [pc, #28]	; (8013acc <IncreaseBufferPointer+0x28>)
 8013ab0:	4293      	cmp	r3, r2
 8013ab2:	d102      	bne.n	8013aba <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8013ab4:	4b06      	ldr	r3, [pc, #24]	; (8013ad0 <IncreaseBufferPointer+0x2c>)
 8013ab6:	607b      	str	r3, [r7, #4]
 8013ab8:	e002      	b.n	8013ac0 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	3304      	adds	r3, #4
 8013abe:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8013ac0:	687b      	ldr	r3, [r7, #4]
}
 8013ac2:	4618      	mov	r0, r3
 8013ac4:	370c      	adds	r7, #12
 8013ac6:	46bd      	mov	sp, r7
 8013ac8:	bc80      	pop	{r7}
 8013aca:	4770      	bx	lr
 8013acc:	20001ac4 	.word	0x20001ac4
 8013ad0:	20001ab4 	.word	0x20001ab4

08013ad4 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8013ad4:	b480      	push	{r7}
 8013ad6:	b083      	sub	sp, #12
 8013ad8:	af00      	add	r7, sp, #0
 8013ada:	4603      	mov	r3, r0
 8013adc:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8013ade:	79fb      	ldrb	r3, [r7, #7]
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d101      	bne.n	8013ae8 <IsListEmpty+0x14>
    {
        return true;
 8013ae4:	2301      	movs	r3, #1
 8013ae6:	e000      	b.n	8013aea <IsListEmpty+0x16>
    }
    return false;
 8013ae8:	2300      	movs	r3, #0
}
 8013aea:	4618      	mov	r0, r3
 8013aec:	370c      	adds	r7, #12
 8013aee:	46bd      	mov	sp, r7
 8013af0:	bc80      	pop	{r7}
 8013af2:	4770      	bx	lr

08013af4 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8013af4:	b480      	push	{r7}
 8013af6:	b083      	sub	sp, #12
 8013af8:	af00      	add	r7, sp, #0
 8013afa:	4603      	mov	r3, r0
 8013afc:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8013afe:	79fb      	ldrb	r3, [r7, #7]
 8013b00:	2b04      	cmp	r3, #4
 8013b02:	d901      	bls.n	8013b08 <IsListFull+0x14>
    {
        return true;
 8013b04:	2301      	movs	r3, #1
 8013b06:	e000      	b.n	8013b0a <IsListFull+0x16>
    }
    return false;
 8013b08:	2300      	movs	r3, #0
}
 8013b0a:	4618      	mov	r0, r3
 8013b0c:	370c      	adds	r7, #12
 8013b0e:	46bd      	mov	sp, r7
 8013b10:	bc80      	pop	{r7}
 8013b12:	4770      	bx	lr

08013b14 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8013b14:	b580      	push	{r7, lr}
 8013b16:	b086      	sub	sp, #24
 8013b18:	af00      	add	r7, sp, #0
 8013b1a:	4603      	mov	r3, r0
 8013b1c:	60b9      	str	r1, [r7, #8]
 8013b1e:	607a      	str	r2, [r7, #4]
 8013b20:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 8013b22:	68bb      	ldr	r3, [r7, #8]
 8013b24:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013b26:	4b13      	ldr	r3, [pc, #76]	; (8013b74 <GetElement+0x60>)
 8013b28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013b2c:	4618      	mov	r0, r3
 8013b2e:	f7ff ffd1 	bl	8013ad4 <IsListEmpty>
 8013b32:	4603      	mov	r3, r0
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d001      	beq.n	8013b3c <GetElement+0x28>
    {
        return NULL;
 8013b38:	2300      	movs	r3, #0
 8013b3a:	e017      	b.n	8013b6c <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8013b3c:	2300      	movs	r3, #0
 8013b3e:	74fb      	strb	r3, [r7, #19]
 8013b40:	e00d      	b.n	8013b5e <GetElement+0x4a>
    {
        if( element->Request == request )
 8013b42:	697b      	ldr	r3, [r7, #20]
 8013b44:	781b      	ldrb	r3, [r3, #0]
 8013b46:	7bfa      	ldrb	r2, [r7, #15]
 8013b48:	429a      	cmp	r2, r3
 8013b4a:	d101      	bne.n	8013b50 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8013b4c:	697b      	ldr	r3, [r7, #20]
 8013b4e:	e00d      	b.n	8013b6c <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8013b50:	6978      	ldr	r0, [r7, #20]
 8013b52:	f7ff ffa7 	bl	8013aa4 <IncreaseBufferPointer>
 8013b56:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8013b58:	7cfb      	ldrb	r3, [r7, #19]
 8013b5a:	3301      	adds	r3, #1
 8013b5c:	74fb      	strb	r3, [r7, #19]
 8013b5e:	4b05      	ldr	r3, [pc, #20]	; (8013b74 <GetElement+0x60>)
 8013b60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013b64:	7cfa      	ldrb	r2, [r7, #19]
 8013b66:	429a      	cmp	r2, r3
 8013b68:	d3eb      	bcc.n	8013b42 <GetElement+0x2e>
    }

    return NULL;
 8013b6a:	2300      	movs	r3, #0
}
 8013b6c:	4618      	mov	r0, r3
 8013b6e:	3718      	adds	r7, #24
 8013b70:	46bd      	mov	sp, r7
 8013b72:	bd80      	pop	{r7, pc}
 8013b74:	20001aa8 	.word	0x20001aa8

08013b78 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8013b78:	b580      	push	{r7, lr}
 8013b7a:	b082      	sub	sp, #8
 8013b7c:	af00      	add	r7, sp, #0
 8013b7e:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8013b80:	4a0c      	ldr	r2, [pc, #48]	; (8013bb4 <LoRaMacConfirmQueueInit+0x3c>)
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 8013b86:	4b0b      	ldr	r3, [pc, #44]	; (8013bb4 <LoRaMacConfirmQueueInit+0x3c>)
 8013b88:	2200      	movs	r2, #0
 8013b8a:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8013b8e:	4b09      	ldr	r3, [pc, #36]	; (8013bb4 <LoRaMacConfirmQueueInit+0x3c>)
 8013b90:	4a09      	ldr	r2, [pc, #36]	; (8013bb8 <LoRaMacConfirmQueueInit+0x40>)
 8013b92:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8013b94:	4b07      	ldr	r3, [pc, #28]	; (8013bb4 <LoRaMacConfirmQueueInit+0x3c>)
 8013b96:	4a08      	ldr	r2, [pc, #32]	; (8013bb8 <LoRaMacConfirmQueueInit+0x40>)
 8013b98:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8013b9a:	2214      	movs	r2, #20
 8013b9c:	21ff      	movs	r1, #255	; 0xff
 8013b9e:	4806      	ldr	r0, [pc, #24]	; (8013bb8 <LoRaMacConfirmQueueInit+0x40>)
 8013ba0:	f005 f9aa 	bl	8018ef8 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013ba4:	4b03      	ldr	r3, [pc, #12]	; (8013bb4 <LoRaMacConfirmQueueInit+0x3c>)
 8013ba6:	2201      	movs	r2, #1
 8013ba8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8013bac:	bf00      	nop
 8013bae:	3708      	adds	r7, #8
 8013bb0:	46bd      	mov	sp, r7
 8013bb2:	bd80      	pop	{r7, pc}
 8013bb4:	20001aa8 	.word	0x20001aa8
 8013bb8:	20001ab4 	.word	0x20001ab4

08013bbc <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8013bbc:	b580      	push	{r7, lr}
 8013bbe:	b082      	sub	sp, #8
 8013bc0:	af00      	add	r7, sp, #0
 8013bc2:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013bc4:	4b19      	ldr	r3, [pc, #100]	; (8013c2c <LoRaMacConfirmQueueAdd+0x70>)
 8013bc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013bca:	4618      	mov	r0, r3
 8013bcc:	f7ff ff92 	bl	8013af4 <IsListFull>
 8013bd0:	4603      	mov	r3, r0
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d001      	beq.n	8013bda <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 8013bd6:	2300      	movs	r3, #0
 8013bd8:	e024      	b.n	8013c24 <LoRaMacConfirmQueueAdd+0x68>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8013bda:	4b14      	ldr	r3, [pc, #80]	; (8013c2c <LoRaMacConfirmQueueAdd+0x70>)
 8013bdc:	689b      	ldr	r3, [r3, #8]
 8013bde:	687a      	ldr	r2, [r7, #4]
 8013be0:	7812      	ldrb	r2, [r2, #0]
 8013be2:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8013be4:	4b11      	ldr	r3, [pc, #68]	; (8013c2c <LoRaMacConfirmQueueAdd+0x70>)
 8013be6:	689b      	ldr	r3, [r3, #8]
 8013be8:	687a      	ldr	r2, [r7, #4]
 8013bea:	7852      	ldrb	r2, [r2, #1]
 8013bec:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8013bee:	4b0f      	ldr	r3, [pc, #60]	; (8013c2c <LoRaMacConfirmQueueAdd+0x70>)
 8013bf0:	689b      	ldr	r3, [r3, #8]
 8013bf2:	687a      	ldr	r2, [r7, #4]
 8013bf4:	78d2      	ldrb	r2, [r2, #3]
 8013bf6:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 8013bf8:	4b0c      	ldr	r3, [pc, #48]	; (8013c2c <LoRaMacConfirmQueueAdd+0x70>)
 8013bfa:	689b      	ldr	r3, [r3, #8]
 8013bfc:	687a      	ldr	r2, [r7, #4]
 8013bfe:	7892      	ldrb	r2, [r2, #2]
 8013c00:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8013c02:	4b0a      	ldr	r3, [pc, #40]	; (8013c2c <LoRaMacConfirmQueueAdd+0x70>)
 8013c04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013c08:	3301      	adds	r3, #1
 8013c0a:	b2da      	uxtb	r2, r3
 8013c0c:	4b07      	ldr	r3, [pc, #28]	; (8013c2c <LoRaMacConfirmQueueAdd+0x70>)
 8013c0e:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8013c12:	4b06      	ldr	r3, [pc, #24]	; (8013c2c <LoRaMacConfirmQueueAdd+0x70>)
 8013c14:	689b      	ldr	r3, [r3, #8]
 8013c16:	4618      	mov	r0, r3
 8013c18:	f7ff ff44 	bl	8013aa4 <IncreaseBufferPointer>
 8013c1c:	4603      	mov	r3, r0
 8013c1e:	4a03      	ldr	r2, [pc, #12]	; (8013c2c <LoRaMacConfirmQueueAdd+0x70>)
 8013c20:	6093      	str	r3, [r2, #8]

    return true;
 8013c22:	2301      	movs	r3, #1
}
 8013c24:	4618      	mov	r0, r3
 8013c26:	3708      	adds	r7, #8
 8013c28:	46bd      	mov	sp, r7
 8013c2a:	bd80      	pop	{r7, pc}
 8013c2c:	20001aa8 	.word	0x20001aa8

08013c30 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8013c30:	b580      	push	{r7, lr}
 8013c32:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013c34:	4b0e      	ldr	r3, [pc, #56]	; (8013c70 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013c36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013c3a:	4618      	mov	r0, r3
 8013c3c:	f7ff ff4a 	bl	8013ad4 <IsListEmpty>
 8013c40:	4603      	mov	r3, r0
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	d001      	beq.n	8013c4a <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8013c46:	2300      	movs	r3, #0
 8013c48:	e010      	b.n	8013c6c <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8013c4a:	4b09      	ldr	r3, [pc, #36]	; (8013c70 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013c4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013c50:	3b01      	subs	r3, #1
 8013c52:	b2da      	uxtb	r2, r3
 8013c54:	4b06      	ldr	r3, [pc, #24]	; (8013c70 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013c56:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8013c5a:	4b05      	ldr	r3, [pc, #20]	; (8013c70 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013c5c:	685b      	ldr	r3, [r3, #4]
 8013c5e:	4618      	mov	r0, r3
 8013c60:	f7ff ff20 	bl	8013aa4 <IncreaseBufferPointer>
 8013c64:	4603      	mov	r3, r0
 8013c66:	4a02      	ldr	r2, [pc, #8]	; (8013c70 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013c68:	6053      	str	r3, [r2, #4]

    return true;
 8013c6a:	2301      	movs	r3, #1
}
 8013c6c:	4618      	mov	r0, r3
 8013c6e:	bd80      	pop	{r7, pc}
 8013c70:	20001aa8 	.word	0x20001aa8

08013c74 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8013c74:	b580      	push	{r7, lr}
 8013c76:	b084      	sub	sp, #16
 8013c78:	af00      	add	r7, sp, #0
 8013c7a:	4603      	mov	r3, r0
 8013c7c:	460a      	mov	r2, r1
 8013c7e:	71fb      	strb	r3, [r7, #7]
 8013c80:	4613      	mov	r3, r2
 8013c82:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8013c84:	2300      	movs	r3, #0
 8013c86:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8013c88:	4b10      	ldr	r3, [pc, #64]	; (8013ccc <LoRaMacConfirmQueueSetStatus+0x58>)
 8013c8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013c8e:	4618      	mov	r0, r3
 8013c90:	f7ff ff20 	bl	8013ad4 <IsListEmpty>
 8013c94:	4603      	mov	r3, r0
 8013c96:	f083 0301 	eor.w	r3, r3, #1
 8013c9a:	b2db      	uxtb	r3, r3
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d011      	beq.n	8013cc4 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8013ca0:	4b0a      	ldr	r3, [pc, #40]	; (8013ccc <LoRaMacConfirmQueueSetStatus+0x58>)
 8013ca2:	6859      	ldr	r1, [r3, #4]
 8013ca4:	4b09      	ldr	r3, [pc, #36]	; (8013ccc <LoRaMacConfirmQueueSetStatus+0x58>)
 8013ca6:	689a      	ldr	r2, [r3, #8]
 8013ca8:	79bb      	ldrb	r3, [r7, #6]
 8013caa:	4618      	mov	r0, r3
 8013cac:	f7ff ff32 	bl	8013b14 <GetElement>
 8013cb0:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8013cb2:	68fb      	ldr	r3, [r7, #12]
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d005      	beq.n	8013cc4 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8013cb8:	68fb      	ldr	r3, [r7, #12]
 8013cba:	79fa      	ldrb	r2, [r7, #7]
 8013cbc:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8013cbe:	68fb      	ldr	r3, [r7, #12]
 8013cc0:	2201      	movs	r2, #1
 8013cc2:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8013cc4:	bf00      	nop
 8013cc6:	3710      	adds	r7, #16
 8013cc8:	46bd      	mov	sp, r7
 8013cca:	bd80      	pop	{r7, pc}
 8013ccc:	20001aa8 	.word	0x20001aa8

08013cd0 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8013cd0:	b580      	push	{r7, lr}
 8013cd2:	b084      	sub	sp, #16
 8013cd4:	af00      	add	r7, sp, #0
 8013cd6:	4603      	mov	r3, r0
 8013cd8:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8013cda:	2300      	movs	r3, #0
 8013cdc:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8013cde:	4b10      	ldr	r3, [pc, #64]	; (8013d20 <LoRaMacConfirmQueueGetStatus+0x50>)
 8013ce0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013ce4:	4618      	mov	r0, r3
 8013ce6:	f7ff fef5 	bl	8013ad4 <IsListEmpty>
 8013cea:	4603      	mov	r3, r0
 8013cec:	f083 0301 	eor.w	r3, r3, #1
 8013cf0:	b2db      	uxtb	r3, r3
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	d00e      	beq.n	8013d14 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8013cf6:	4b0a      	ldr	r3, [pc, #40]	; (8013d20 <LoRaMacConfirmQueueGetStatus+0x50>)
 8013cf8:	6859      	ldr	r1, [r3, #4]
 8013cfa:	4b09      	ldr	r3, [pc, #36]	; (8013d20 <LoRaMacConfirmQueueGetStatus+0x50>)
 8013cfc:	689a      	ldr	r2, [r3, #8]
 8013cfe:	79fb      	ldrb	r3, [r7, #7]
 8013d00:	4618      	mov	r0, r3
 8013d02:	f7ff ff07 	bl	8013b14 <GetElement>
 8013d06:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8013d08:	68fb      	ldr	r3, [r7, #12]
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d002      	beq.n	8013d14 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8013d0e:	68fb      	ldr	r3, [r7, #12]
 8013d10:	785b      	ldrb	r3, [r3, #1]
 8013d12:	e000      	b.n	8013d16 <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013d14:	2301      	movs	r3, #1
}
 8013d16:	4618      	mov	r0, r3
 8013d18:	3710      	adds	r7, #16
 8013d1a:	46bd      	mov	sp, r7
 8013d1c:	bd80      	pop	{r7, pc}
 8013d1e:	bf00      	nop
 8013d20:	20001aa8 	.word	0x20001aa8

08013d24 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8013d24:	b580      	push	{r7, lr}
 8013d26:	b084      	sub	sp, #16
 8013d28:	af00      	add	r7, sp, #0
 8013d2a:	4603      	mov	r3, r0
 8013d2c:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8013d2e:	4b16      	ldr	r3, [pc, #88]	; (8013d88 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013d30:	685b      	ldr	r3, [r3, #4]
 8013d32:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8013d34:	4a14      	ldr	r2, [pc, #80]	; (8013d88 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013d36:	79fb      	ldrb	r3, [r7, #7]
 8013d38:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8013d3c:	4b12      	ldr	r3, [pc, #72]	; (8013d88 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013d3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013d42:	4618      	mov	r0, r3
 8013d44:	f7ff fec6 	bl	8013ad4 <IsListEmpty>
 8013d48:	4603      	mov	r3, r0
 8013d4a:	f083 0301 	eor.w	r3, r3, #1
 8013d4e:	b2db      	uxtb	r3, r3
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d015      	beq.n	8013d80 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8013d54:	68fb      	ldr	r3, [r7, #12]
 8013d56:	79fa      	ldrb	r2, [r7, #7]
 8013d58:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8013d5a:	68fb      	ldr	r3, [r7, #12]
 8013d5c:	78db      	ldrb	r3, [r3, #3]
 8013d5e:	f083 0301 	eor.w	r3, r3, #1
 8013d62:	b2db      	uxtb	r3, r3
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d002      	beq.n	8013d6e <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8013d68:	68fb      	ldr	r3, [r7, #12]
 8013d6a:	2201      	movs	r2, #1
 8013d6c:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8013d6e:	68f8      	ldr	r0, [r7, #12]
 8013d70:	f7ff fe98 	bl	8013aa4 <IncreaseBufferPointer>
 8013d74:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8013d76:	4b04      	ldr	r3, [pc, #16]	; (8013d88 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013d78:	689b      	ldr	r3, [r3, #8]
 8013d7a:	68fa      	ldr	r2, [r7, #12]
 8013d7c:	429a      	cmp	r2, r3
 8013d7e:	d1e9      	bne.n	8013d54 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8013d80:	bf00      	nop
 8013d82:	3710      	adds	r7, #16
 8013d84:	46bd      	mov	sp, r7
 8013d86:	bd80      	pop	{r7, pc}
 8013d88:	20001aa8 	.word	0x20001aa8

08013d8c <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8013d8c:	b580      	push	{r7, lr}
 8013d8e:	b082      	sub	sp, #8
 8013d90:	af00      	add	r7, sp, #0
 8013d92:	4603      	mov	r3, r0
 8013d94:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8013d96:	4b09      	ldr	r3, [pc, #36]	; (8013dbc <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8013d98:	6859      	ldr	r1, [r3, #4]
 8013d9a:	4b08      	ldr	r3, [pc, #32]	; (8013dbc <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8013d9c:	689a      	ldr	r2, [r3, #8]
 8013d9e:	79fb      	ldrb	r3, [r7, #7]
 8013da0:	4618      	mov	r0, r3
 8013da2:	f7ff feb7 	bl	8013b14 <GetElement>
 8013da6:	4603      	mov	r3, r0
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d001      	beq.n	8013db0 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8013dac:	2301      	movs	r3, #1
 8013dae:	e000      	b.n	8013db2 <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8013db0:	2300      	movs	r3, #0
}
 8013db2:	4618      	mov	r0, r3
 8013db4:	3708      	adds	r7, #8
 8013db6:	46bd      	mov	sp, r7
 8013db8:	bd80      	pop	{r7, pc}
 8013dba:	bf00      	nop
 8013dbc:	20001aa8 	.word	0x20001aa8

08013dc0 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8013dc0:	b580      	push	{r7, lr}
 8013dc2:	b084      	sub	sp, #16
 8013dc4:	af00      	add	r7, sp, #0
 8013dc6:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8013dc8:	4b25      	ldr	r3, [pc, #148]	; (8013e60 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8013dca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013dce:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8013dd0:	2300      	movs	r3, #0
 8013dd2:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 8013dd4:	f107 0308 	add.w	r3, r7, #8
 8013dd8:	2204      	movs	r2, #4
 8013dda:	2100      	movs	r1, #0
 8013ddc:	4618      	mov	r0, r3
 8013dde:	f005 f88b 	bl	8018ef8 <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 8013de2:	2300      	movs	r3, #0
 8013de4:	73fb      	strb	r3, [r7, #15]
 8013de6:	e032      	b.n	8013e4e <LoRaMacConfirmQueueHandleCb+0x8e>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8013de8:	4b1d      	ldr	r3, [pc, #116]	; (8013e60 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8013dea:	685b      	ldr	r3, [r3, #4]
 8013dec:	781a      	ldrb	r2, [r3, #0]
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8013df2:	4b1b      	ldr	r3, [pc, #108]	; (8013e60 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8013df4:	685b      	ldr	r3, [r3, #4]
 8013df6:	785a      	ldrb	r2, [r3, #1]
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8013dfc:	4b18      	ldr	r3, [pc, #96]	; (8013e60 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8013dfe:	685b      	ldr	r3, [r3, #4]
 8013e00:	789b      	ldrb	r3, [r3, #2]
 8013e02:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8013e04:	7b7b      	ldrb	r3, [r7, #13]
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d005      	beq.n	8013e16 <LoRaMacConfirmQueueHandleCb+0x56>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8013e0a:	4b15      	ldr	r3, [pc, #84]	; (8013e60 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8013e0c:	681b      	ldr	r3, [r3, #0]
 8013e0e:	689b      	ldr	r3, [r3, #8]
 8013e10:	6878      	ldr	r0, [r7, #4]
 8013e12:	4798      	blx	r3
 8013e14:	e00b      	b.n	8013e2e <LoRaMacConfirmQueueHandleCb+0x6e>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8013e16:	4b12      	ldr	r3, [pc, #72]	; (8013e60 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8013e18:	685b      	ldr	r3, [r3, #4]
 8013e1a:	781b      	ldrb	r3, [r3, #0]
 8013e1c:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8013e1e:	4b10      	ldr	r3, [pc, #64]	; (8013e60 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8013e20:	685b      	ldr	r3, [r3, #4]
 8013e22:	785b      	ldrb	r3, [r3, #1]
 8013e24:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8013e26:	4b0e      	ldr	r3, [pc, #56]	; (8013e60 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8013e28:	685b      	ldr	r3, [r3, #4]
 8013e2a:	78db      	ldrb	r3, [r3, #3]
 8013e2c:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8013e2e:	f7ff feff 	bl	8013c30 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8013e32:	7b7b      	ldrb	r3, [r7, #13]
 8013e34:	f083 0301 	eor.w	r3, r3, #1
 8013e38:	b2db      	uxtb	r3, r3
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	d004      	beq.n	8013e48 <LoRaMacConfirmQueueHandleCb+0x88>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8013e3e:	f107 0308 	add.w	r3, r7, #8
 8013e42:	4618      	mov	r0, r3
 8013e44:	f7ff feba 	bl	8013bbc <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8013e48:	7bfb      	ldrb	r3, [r7, #15]
 8013e4a:	3301      	adds	r3, #1
 8013e4c:	73fb      	strb	r3, [r7, #15]
 8013e4e:	7bfa      	ldrb	r2, [r7, #15]
 8013e50:	7bbb      	ldrb	r3, [r7, #14]
 8013e52:	429a      	cmp	r2, r3
 8013e54:	d3c8      	bcc.n	8013de8 <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 8013e56:	bf00      	nop
 8013e58:	bf00      	nop
 8013e5a:	3710      	adds	r7, #16
 8013e5c:	46bd      	mov	sp, r7
 8013e5e:	bd80      	pop	{r7, pc}
 8013e60:	20001aa8 	.word	0x20001aa8

08013e64 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8013e64:	b480      	push	{r7}
 8013e66:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8013e68:	4b03      	ldr	r3, [pc, #12]	; (8013e78 <LoRaMacConfirmQueueGetCnt+0x14>)
 8013e6a:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8013e6e:	4618      	mov	r0, r3
 8013e70:	46bd      	mov	sp, r7
 8013e72:	bc80      	pop	{r7}
 8013e74:	4770      	bx	lr
 8013e76:	bf00      	nop
 8013e78:	20001aa8 	.word	0x20001aa8

08013e7c <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8013e7c:	b580      	push	{r7, lr}
 8013e7e:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013e80:	4b06      	ldr	r3, [pc, #24]	; (8013e9c <LoRaMacConfirmQueueIsFull+0x20>)
 8013e82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013e86:	4618      	mov	r0, r3
 8013e88:	f7ff fe34 	bl	8013af4 <IsListFull>
 8013e8c:	4603      	mov	r3, r0
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d001      	beq.n	8013e96 <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 8013e92:	2301      	movs	r3, #1
 8013e94:	e000      	b.n	8013e98 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 8013e96:	2300      	movs	r3, #0
    }
}
 8013e98:	4618      	mov	r0, r3
 8013e9a:	bd80      	pop	{r7, pc}
 8013e9c:	20001aa8 	.word	0x20001aa8

08013ea0 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8013ea0:	b580      	push	{r7, lr}
 8013ea2:	b08e      	sub	sp, #56	; 0x38
 8013ea4:	af00      	add	r7, sp, #0
 8013ea6:	60f8      	str	r0, [r7, #12]
 8013ea8:	607b      	str	r3, [r7, #4]
 8013eaa:	460b      	mov	r3, r1
 8013eac:	817b      	strh	r3, [r7, #10]
 8013eae:	4613      	mov	r3, r2
 8013eb0:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 8013eb2:	68fb      	ldr	r3, [r7, #12]
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	d101      	bne.n	8013ebc <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013eb8:	2309      	movs	r3, #9
 8013eba:	e086      	b.n	8013fca <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 8013ebc:	2300      	movs	r3, #0
 8013ebe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 8013ec2:	2301      	movs	r3, #1
 8013ec4:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 8013ec6:	2300      	movs	r3, #0
 8013ec8:	623b      	str	r3, [r7, #32]
 8013eca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013ece:	2200      	movs	r2, #0
 8013ed0:	601a      	str	r2, [r3, #0]
 8013ed2:	605a      	str	r2, [r3, #4]
 8013ed4:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 8013ed6:	2300      	movs	r3, #0
 8013ed8:	613b      	str	r3, [r7, #16]
 8013eda:	f107 0314 	add.w	r3, r7, #20
 8013ede:	2200      	movs	r2, #0
 8013ee0:	601a      	str	r2, [r3, #0]
 8013ee2:	605a      	str	r2, [r3, #4]
 8013ee4:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 8013ee6:	2301      	movs	r3, #1
 8013ee8:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8013eea:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8013eee:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	b2db      	uxtb	r3, r3
 8013ef4:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	0a1b      	lsrs	r3, r3, #8
 8013efa:	b2db      	uxtb	r3, r3
 8013efc:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	0c1b      	lsrs	r3, r3, #16
 8013f02:	b2db      	uxtb	r3, r3
 8013f04:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	0e1b      	lsrs	r3, r3, #24
 8013f0a:	b2db      	uxtb	r3, r3
 8013f0c:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 8013f0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013f10:	b2db      	uxtb	r3, r3
 8013f12:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8013f14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013f16:	0a1b      	lsrs	r3, r3, #8
 8013f18:	b2db      	uxtb	r3, r3
 8013f1a:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8013f1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013f1e:	0c1b      	lsrs	r3, r3, #16
 8013f20:	b2db      	uxtb	r3, r3
 8013f22:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8013f24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013f26:	0e1b      	lsrs	r3, r3, #24
 8013f28:	b2db      	uxtb	r3, r3
 8013f2a:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8013f2c:	e048      	b.n	8013fc0 <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 8013f2e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013f30:	b2db      	uxtb	r3, r3
 8013f32:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8013f34:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013f36:	3301      	adds	r3, #1
 8013f38:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8013f3a:	f107 0320 	add.w	r3, r7, #32
 8013f3e:	7a7a      	ldrb	r2, [r7, #9]
 8013f40:	f107 0010 	add.w	r0, r7, #16
 8013f44:	2110      	movs	r1, #16
 8013f46:	f7f8 fa79 	bl	800c43c <SecureElementAesEncrypt>
 8013f4a:	4603      	mov	r3, r0
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d001      	beq.n	8013f54 <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013f50:	230e      	movs	r3, #14
 8013f52:	e03a      	b.n	8013fca <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8013f54:	2300      	movs	r3, #0
 8013f56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013f5a:	e01e      	b.n	8013f9a <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8013f5c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013f60:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013f64:	4413      	add	r3, r2
 8013f66:	461a      	mov	r2, r3
 8013f68:	68fb      	ldr	r3, [r7, #12]
 8013f6a:	4413      	add	r3, r2
 8013f6c:	7819      	ldrb	r1, [r3, #0]
 8013f6e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013f72:	3338      	adds	r3, #56	; 0x38
 8013f74:	443b      	add	r3, r7
 8013f76:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8013f7a:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8013f7e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013f82:	4403      	add	r3, r0
 8013f84:	4618      	mov	r0, r3
 8013f86:	68fb      	ldr	r3, [r7, #12]
 8013f88:	4403      	add	r3, r0
 8013f8a:	404a      	eors	r2, r1
 8013f8c:	b2d2      	uxtb	r2, r2
 8013f8e:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8013f90:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013f94:	3301      	adds	r3, #1
 8013f96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013f9a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013f9e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8013fa2:	2a10      	cmp	r2, #16
 8013fa4:	bfa8      	it	ge
 8013fa6:	2210      	movge	r2, #16
 8013fa8:	b212      	sxth	r2, r2
 8013faa:	4293      	cmp	r3, r2
 8013fac:	dbd6      	blt.n	8013f5c <PayloadEncrypt+0xbc>
        }
        size -= 16;
 8013fae:	897b      	ldrh	r3, [r7, #10]
 8013fb0:	3b10      	subs	r3, #16
 8013fb2:	b29b      	uxth	r3, r3
 8013fb4:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 8013fb6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013fba:	3310      	adds	r3, #16
 8013fbc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 8013fc0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	dcb2      	bgt.n	8013f2e <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013fc8:	2300      	movs	r3, #0
}
 8013fca:	4618      	mov	r0, r3
 8013fcc:	3738      	adds	r7, #56	; 0x38
 8013fce:	46bd      	mov	sp, r7
 8013fd0:	bd80      	pop	{r7, pc}

08013fd2 <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8013fd2:	b490      	push	{r4, r7}
 8013fd4:	b082      	sub	sp, #8
 8013fd6:	af00      	add	r7, sp, #0
 8013fd8:	4604      	mov	r4, r0
 8013fda:	4608      	mov	r0, r1
 8013fdc:	4611      	mov	r1, r2
 8013fde:	461a      	mov	r2, r3
 8013fe0:	4623      	mov	r3, r4
 8013fe2:	80fb      	strh	r3, [r7, #6]
 8013fe4:	4603      	mov	r3, r0
 8013fe6:	717b      	strb	r3, [r7, #5]
 8013fe8:	460b      	mov	r3, r1
 8013fea:	713b      	strb	r3, [r7, #4]
 8013fec:	4613      	mov	r3, r2
 8013fee:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8013ff0:	69bb      	ldr	r3, [r7, #24]
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d101      	bne.n	8013ffa <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013ff6:	2309      	movs	r3, #9
 8013ff8:	e04e      	b.n	8014098 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 8013ffa:	69bb      	ldr	r3, [r7, #24]
 8013ffc:	2249      	movs	r2, #73	; 0x49
 8013ffe:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 8014000:	69bb      	ldr	r3, [r7, #24]
 8014002:	3301      	adds	r3, #1
 8014004:	2200      	movs	r2, #0
 8014006:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8014008:	69bb      	ldr	r3, [r7, #24]
 801400a:	3302      	adds	r3, #2
 801400c:	2200      	movs	r2, #0
 801400e:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8014010:	69bb      	ldr	r3, [r7, #24]
 8014012:	3303      	adds	r3, #3
 8014014:	2200      	movs	r2, #0
 8014016:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8014018:	69bb      	ldr	r3, [r7, #24]
 801401a:	3304      	adds	r3, #4
 801401c:	2200      	movs	r2, #0
 801401e:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8014020:	69bb      	ldr	r3, [r7, #24]
 8014022:	3305      	adds	r3, #5
 8014024:	78fa      	ldrb	r2, [r7, #3]
 8014026:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8014028:	69bb      	ldr	r3, [r7, #24]
 801402a:	3306      	adds	r3, #6
 801402c:	693a      	ldr	r2, [r7, #16]
 801402e:	b2d2      	uxtb	r2, r2
 8014030:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8014032:	693b      	ldr	r3, [r7, #16]
 8014034:	0a1a      	lsrs	r2, r3, #8
 8014036:	69bb      	ldr	r3, [r7, #24]
 8014038:	3307      	adds	r3, #7
 801403a:	b2d2      	uxtb	r2, r2
 801403c:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 801403e:	693b      	ldr	r3, [r7, #16]
 8014040:	0c1a      	lsrs	r2, r3, #16
 8014042:	69bb      	ldr	r3, [r7, #24]
 8014044:	3308      	adds	r3, #8
 8014046:	b2d2      	uxtb	r2, r2
 8014048:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 801404a:	693b      	ldr	r3, [r7, #16]
 801404c:	0e1a      	lsrs	r2, r3, #24
 801404e:	69bb      	ldr	r3, [r7, #24]
 8014050:	3309      	adds	r3, #9
 8014052:	b2d2      	uxtb	r2, r2
 8014054:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8014056:	69bb      	ldr	r3, [r7, #24]
 8014058:	330a      	adds	r3, #10
 801405a:	697a      	ldr	r2, [r7, #20]
 801405c:	b2d2      	uxtb	r2, r2
 801405e:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8014060:	697b      	ldr	r3, [r7, #20]
 8014062:	0a1a      	lsrs	r2, r3, #8
 8014064:	69bb      	ldr	r3, [r7, #24]
 8014066:	330b      	adds	r3, #11
 8014068:	b2d2      	uxtb	r2, r2
 801406a:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 801406c:	697b      	ldr	r3, [r7, #20]
 801406e:	0c1a      	lsrs	r2, r3, #16
 8014070:	69bb      	ldr	r3, [r7, #24]
 8014072:	330c      	adds	r3, #12
 8014074:	b2d2      	uxtb	r2, r2
 8014076:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8014078:	697b      	ldr	r3, [r7, #20]
 801407a:	0e1a      	lsrs	r2, r3, #24
 801407c:	69bb      	ldr	r3, [r7, #24]
 801407e:	330d      	adds	r3, #13
 8014080:	b2d2      	uxtb	r2, r2
 8014082:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8014084:	69bb      	ldr	r3, [r7, #24]
 8014086:	330e      	adds	r3, #14
 8014088:	2200      	movs	r2, #0
 801408a:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 801408c:	69bb      	ldr	r3, [r7, #24]
 801408e:	330f      	adds	r3, #15
 8014090:	88fa      	ldrh	r2, [r7, #6]
 8014092:	b2d2      	uxtb	r2, r2
 8014094:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8014096:	2300      	movs	r3, #0
}
 8014098:	4618      	mov	r0, r3
 801409a:	3708      	adds	r7, #8
 801409c:	46bd      	mov	sp, r7
 801409e:	bc90      	pop	{r4, r7}
 80140a0:	4770      	bx	lr

080140a2 <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 80140a2:	b590      	push	{r4, r7, lr}
 80140a4:	b08b      	sub	sp, #44	; 0x2c
 80140a6:	af04      	add	r7, sp, #16
 80140a8:	6078      	str	r0, [r7, #4]
 80140aa:	4608      	mov	r0, r1
 80140ac:	4611      	mov	r1, r2
 80140ae:	461a      	mov	r2, r3
 80140b0:	4603      	mov	r3, r0
 80140b2:	807b      	strh	r3, [r7, #2]
 80140b4:	460b      	mov	r3, r1
 80140b6:	707b      	strb	r3, [r7, #1]
 80140b8:	4613      	mov	r3, r2
 80140ba:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	2b00      	cmp	r3, #0
 80140c0:	d002      	beq.n	80140c8 <ComputeCmacB0+0x26>
 80140c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	d101      	bne.n	80140cc <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80140c8:	2309      	movs	r3, #9
 80140ca:	e024      	b.n	8014116 <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80140cc:	887b      	ldrh	r3, [r7, #2]
 80140ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80140d2:	d901      	bls.n	80140d8 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 80140d4:	230d      	movs	r3, #13
 80140d6:	e01e      	b.n	8014116 <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE] ALIGN(4);

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80140d8:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 80140dc:	783a      	ldrb	r2, [r7, #0]
 80140de:	7879      	ldrb	r1, [r7, #1]
 80140e0:	8878      	ldrh	r0, [r7, #2]
 80140e2:	f107 0308 	add.w	r3, r7, #8
 80140e6:	9302      	str	r3, [sp, #8]
 80140e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140ea:	9301      	str	r3, [sp, #4]
 80140ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140ee:	9300      	str	r3, [sp, #0]
 80140f0:	4623      	mov	r3, r4
 80140f2:	f7ff ff6e 	bl	8013fd2 <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 80140f6:	887a      	ldrh	r2, [r7, #2]
 80140f8:	7879      	ldrb	r1, [r7, #1]
 80140fa:	f107 0008 	add.w	r0, r7, #8
 80140fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014100:	9300      	str	r3, [sp, #0]
 8014102:	460b      	mov	r3, r1
 8014104:	6879      	ldr	r1, [r7, #4]
 8014106:	f7f8 f953 	bl	800c3b0 <SecureElementComputeAesCmac>
 801410a:	4603      	mov	r3, r0
 801410c:	2b00      	cmp	r3, #0
 801410e:	d001      	beq.n	8014114 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014110:	230e      	movs	r3, #14
 8014112:	e000      	b.n	8014116 <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8014114:	2300      	movs	r3, #0
}
 8014116:	4618      	mov	r0, r3
 8014118:	371c      	adds	r7, #28
 801411a:	46bd      	mov	sp, r7
 801411c:	bd90      	pop	{r4, r7, pc}

0801411e <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 801411e:	b590      	push	{r4, r7, lr}
 8014120:	b0cd      	sub	sp, #308	; 0x134
 8014122:	af04      	add	r7, sp, #16
 8014124:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8014128:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 801412c:	6020      	str	r0, [r4, #0]
 801412e:	460c      	mov	r4, r1
 8014130:	4610      	mov	r0, r2
 8014132:	4619      	mov	r1, r3
 8014134:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014138:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 801413c:	4622      	mov	r2, r4
 801413e:	801a      	strh	r2, [r3, #0]
 8014140:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014144:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8014148:	4602      	mov	r2, r0
 801414a:	701a      	strb	r2, [r3, #0]
 801414c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014150:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8014154:	460a      	mov	r2, r1
 8014156:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8014158:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801415c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8014160:	681b      	ldr	r3, [r3, #0]
 8014162:	2b00      	cmp	r3, #0
 8014164:	d101      	bne.n	801416a <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014166:	2309      	movs	r3, #9
 8014168:	e063      	b.n	8014232 <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 801416a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801416e:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8014172:	881b      	ldrh	r3, [r3, #0]
 8014174:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014178:	d901      	bls.n	801417e <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 801417a:	230d      	movs	r3, #13
 801417c:	e059      	b.n	8014232 <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 801417e:	f107 030c 	add.w	r3, r7, #12
 8014182:	f44f 7288 	mov.w	r2, #272	; 0x110
 8014186:	2100      	movs	r1, #0
 8014188:	4618      	mov	r0, r3
 801418a:	f004 feb5 	bl	8018ef8 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 801418e:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 8014192:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014196:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801419a:	781a      	ldrb	r2, [r3, #0]
 801419c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80141a0:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 80141a4:	7819      	ldrb	r1, [r3, #0]
 80141a6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80141aa:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 80141ae:	8818      	ldrh	r0, [r3, #0]
 80141b0:	f107 030c 	add.w	r3, r7, #12
 80141b4:	9302      	str	r3, [sp, #8]
 80141b6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80141ba:	9301      	str	r3, [sp, #4]
 80141bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80141c0:	9300      	str	r3, [sp, #0]
 80141c2:	4623      	mov	r3, r4
 80141c4:	f7ff ff05 	bl	8013fd2 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 80141c8:	f107 030c 	add.w	r3, r7, #12
 80141cc:	3310      	adds	r3, #16
 80141ce:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80141d2:	f5a2 728f 	sub.w	r2, r2, #286	; 0x11e
 80141d6:	8812      	ldrh	r2, [r2, #0]
 80141d8:	f507 7190 	add.w	r1, r7, #288	; 0x120
 80141dc:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 80141e0:	6809      	ldr	r1, [r1, #0]
 80141e2:	4618      	mov	r0, r3
 80141e4:	f004 fe4d 	bl	8018e82 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 80141e8:	2306      	movs	r3, #6
 80141ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 80141ee:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80141f2:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 80141f6:	881b      	ldrh	r3, [r3, #0]
 80141f8:	3310      	adds	r3, #16
 80141fa:	4619      	mov	r1, r3
 80141fc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014200:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8014204:	781b      	ldrb	r3, [r3, #0]
 8014206:	f107 000c 	add.w	r0, r7, #12
 801420a:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801420e:	f7f8 f8e9 	bl	800c3e4 <SecureElementVerifyAesCmac>
 8014212:	4603      	mov	r3, r0
 8014214:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8014218:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801421c:	2b00      	cmp	r3, #0
 801421e:	d101      	bne.n	8014224 <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8014220:	2300      	movs	r3, #0
 8014222:	e006      	b.n	8014232 <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8014224:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014228:	2b01      	cmp	r3, #1
 801422a:	d101      	bne.n	8014230 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 801422c:	2301      	movs	r3, #1
 801422e:	e000      	b.n	8014232 <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014230:	230e      	movs	r3, #14
}
 8014232:	4618      	mov	r0, r3
 8014234:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8014238:	46bd      	mov	sp, r7
 801423a:	bd90      	pop	{r4, r7, pc}

0801423c <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 801423c:	b480      	push	{r7}
 801423e:	b085      	sub	sp, #20
 8014240:	af00      	add	r7, sp, #0
 8014242:	4603      	mov	r3, r0
 8014244:	6039      	str	r1, [r7, #0]
 8014246:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8014248:	2300      	movs	r3, #0
 801424a:	73fb      	strb	r3, [r7, #15]
 801424c:	e011      	b.n	8014272 <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 801424e:	7bfb      	ldrb	r3, [r7, #15]
 8014250:	4a0c      	ldr	r2, [pc, #48]	; (8014284 <GetKeyAddrItem+0x48>)
 8014252:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8014256:	79fa      	ldrb	r2, [r7, #7]
 8014258:	429a      	cmp	r2, r3
 801425a:	d107      	bne.n	801426c <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 801425c:	7bfb      	ldrb	r3, [r7, #15]
 801425e:	009b      	lsls	r3, r3, #2
 8014260:	4a08      	ldr	r2, [pc, #32]	; (8014284 <GetKeyAddrItem+0x48>)
 8014262:	441a      	add	r2, r3
 8014264:	683b      	ldr	r3, [r7, #0]
 8014266:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8014268:	2300      	movs	r3, #0
 801426a:	e006      	b.n	801427a <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 801426c:	7bfb      	ldrb	r3, [r7, #15]
 801426e:	3301      	adds	r3, #1
 8014270:	73fb      	strb	r3, [r7, #15]
 8014272:	7bfb      	ldrb	r3, [r7, #15]
 8014274:	2b01      	cmp	r3, #1
 8014276:	d9ea      	bls.n	801424e <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8014278:	230b      	movs	r3, #11
}
 801427a:	4618      	mov	r0, r3
 801427c:	3714      	adds	r7, #20
 801427e:	46bd      	mov	sp, r7
 8014280:	bc80      	pop	{r7}
 8014282:	4770      	bx	lr
 8014284:	20000110 	.word	0x20000110

08014288 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8014288:	b580      	push	{r7, lr}
 801428a:	b088      	sub	sp, #32
 801428c:	af00      	add	r7, sp, #0
 801428e:	60b9      	str	r1, [r7, #8]
 8014290:	607a      	str	r2, [r7, #4]
 8014292:	461a      	mov	r2, r3
 8014294:	4603      	mov	r3, r0
 8014296:	73fb      	strb	r3, [r7, #15]
 8014298:	4613      	mov	r3, r2
 801429a:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 801429c:	2300      	movs	r3, #0
 801429e:	613b      	str	r3, [r7, #16]
 80142a0:	f107 0314 	add.w	r3, r7, #20
 80142a4:	2200      	movs	r2, #0
 80142a6:	601a      	str	r2, [r3, #0]
 80142a8:	605a      	str	r2, [r3, #4]
 80142aa:	609a      	str	r2, [r3, #8]

    switch( keyID )
 80142ac:	7bfb      	ldrb	r3, [r7, #15]
 80142ae:	2b08      	cmp	r3, #8
 80142b0:	d002      	beq.n	80142b8 <DeriveSessionKey10x+0x30>
 80142b2:	2b09      	cmp	r3, #9
 80142b4:	d003      	beq.n	80142be <DeriveSessionKey10x+0x36>
 80142b6:	e005      	b.n	80142c4 <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else
        case NWK_S_KEY:
#endif /* LORAMAC_VERSION */
            compBase[0] = 0x01;
 80142b8:	2301      	movs	r3, #1
 80142ba:	743b      	strb	r3, [r7, #16]
            break;
 80142bc:	e004      	b.n	80142c8 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 80142be:	2302      	movs	r3, #2
 80142c0:	743b      	strb	r3, [r7, #16]
            break;
 80142c2:	e001      	b.n	80142c8 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80142c4:	230a      	movs	r3, #10
 80142c6:	e02a      	b.n	801431e <DeriveSessionKey10x+0x96>
    }

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 80142c8:	68bb      	ldr	r3, [r7, #8]
 80142ca:	b2db      	uxtb	r3, r3
 80142cc:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 80142ce:	68bb      	ldr	r3, [r7, #8]
 80142d0:	0a1b      	lsrs	r3, r3, #8
 80142d2:	b2db      	uxtb	r3, r3
 80142d4:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 80142d6:	68bb      	ldr	r3, [r7, #8]
 80142d8:	0c1b      	lsrs	r3, r3, #16
 80142da:	b2db      	uxtb	r3, r3
 80142dc:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	b2db      	uxtb	r3, r3
 80142e2:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	0a1b      	lsrs	r3, r3, #8
 80142e8:	b2db      	uxtb	r3, r3
 80142ea:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	0c1b      	lsrs	r3, r3, #16
 80142f0:	b2db      	uxtb	r3, r3
 80142f2:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 80142f4:	89bb      	ldrh	r3, [r7, #12]
 80142f6:	b2db      	uxtb	r3, r3
 80142f8:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 80142fa:	89bb      	ldrh	r3, [r7, #12]
 80142fc:	0a1b      	lsrs	r3, r3, #8
 80142fe:	b29b      	uxth	r3, r3
 8014300:	b2db      	uxtb	r3, r3
 8014302:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8014304:	7bfa      	ldrb	r2, [r7, #15]
 8014306:	f107 0310 	add.w	r3, r7, #16
 801430a:	2101      	movs	r1, #1
 801430c:	4618      	mov	r0, r3
 801430e:	f7f8 f915 	bl	800c53c <SecureElementDeriveAndStoreKey>
 8014312:	4603      	mov	r3, r0
 8014314:	2b00      	cmp	r3, #0
 8014316:	d001      	beq.n	801431c <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014318:	230e      	movs	r3, #14
 801431a:	e000      	b.n	801431e <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801431c:	2300      	movs	r3, #0
}
 801431e:	4618      	mov	r0, r3
 8014320:	3720      	adds	r7, #32
 8014322:	46bd      	mov	sp, r7
 8014324:	bd80      	pop	{r7, pc}
	...

08014328 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8014328:	b480      	push	{r7}
 801432a:	b083      	sub	sp, #12
 801432c:	af00      	add	r7, sp, #0
 801432e:	4603      	mov	r3, r0
 8014330:	6039      	str	r1, [r7, #0]
 8014332:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8014334:	683b      	ldr	r3, [r7, #0]
 8014336:	2b00      	cmp	r3, #0
 8014338:	d101      	bne.n	801433e <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801433a:	2309      	movs	r3, #9
 801433c:	e029      	b.n	8014392 <GetLastFcntDown+0x6a>
    }
    switch( fCntID )
 801433e:	79fb      	ldrb	r3, [r7, #7]
 8014340:	3b01      	subs	r3, #1
 8014342:	2b03      	cmp	r3, #3
 8014344:	d822      	bhi.n	801438c <GetLastFcntDown+0x64>
 8014346:	a201      	add	r2, pc, #4	; (adr r2, 801434c <GetLastFcntDown+0x24>)
 8014348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801434c:	0801435d 	.word	0x0801435d
 8014350:	08014369 	.word	0x08014369
 8014354:	08014375 	.word	0x08014375
 8014358:	08014381 	.word	0x08014381
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 801435c:	4b0f      	ldr	r3, [pc, #60]	; (801439c <GetLastFcntDown+0x74>)
 801435e:	681b      	ldr	r3, [r3, #0]
 8014360:	691a      	ldr	r2, [r3, #16]
 8014362:	683b      	ldr	r3, [r7, #0]
 8014364:	601a      	str	r2, [r3, #0]
            break;
 8014366:	e013      	b.n	8014390 <GetLastFcntDown+0x68>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8014368:	4b0c      	ldr	r3, [pc, #48]	; (801439c <GetLastFcntDown+0x74>)
 801436a:	681b      	ldr	r3, [r3, #0]
 801436c:	695a      	ldr	r2, [r3, #20]
 801436e:	683b      	ldr	r3, [r7, #0]
 8014370:	601a      	str	r2, [r3, #0]
            break;
 8014372:	e00d      	b.n	8014390 <GetLastFcntDown+0x68>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8014374:	4b09      	ldr	r3, [pc, #36]	; (801439c <GetLastFcntDown+0x74>)
 8014376:	681b      	ldr	r3, [r3, #0]
 8014378:	699a      	ldr	r2, [r3, #24]
 801437a:	683b      	ldr	r3, [r7, #0]
 801437c:	601a      	str	r2, [r3, #0]
            break;
 801437e:	e007      	b.n	8014390 <GetLastFcntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8014380:	4b06      	ldr	r3, [pc, #24]	; (801439c <GetLastFcntDown+0x74>)
 8014382:	681b      	ldr	r3, [r3, #0]
 8014384:	69da      	ldr	r2, [r3, #28]
 8014386:	683b      	ldr	r3, [r7, #0]
 8014388:	601a      	str	r2, [r3, #0]
            break;
 801438a:	e001      	b.n	8014390 <GetLastFcntDown+0x68>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 801438c:	2305      	movs	r3, #5
 801438e:	e000      	b.n	8014392 <GetLastFcntDown+0x6a>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8014390:	2300      	movs	r3, #0
}
 8014392:	4618      	mov	r0, r3
 8014394:	370c      	adds	r7, #12
 8014396:	46bd      	mov	sp, r7
 8014398:	bc80      	pop	{r7}
 801439a:	4770      	bx	lr
 801439c:	20001acc 	.word	0x20001acc

080143a0 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80143a0:	b580      	push	{r7, lr}
 80143a2:	b084      	sub	sp, #16
 80143a4:	af00      	add	r7, sp, #0
 80143a6:	4603      	mov	r3, r0
 80143a8:	6039      	str	r1, [r7, #0]
 80143aa:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 80143ac:	2300      	movs	r3, #0
 80143ae:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 80143b0:	f107 020c 	add.w	r2, r7, #12
 80143b4:	79fb      	ldrb	r3, [r7, #7]
 80143b6:	4611      	mov	r1, r2
 80143b8:	4618      	mov	r0, r3
 80143ba:	f7ff ffb5 	bl	8014328 <GetLastFcntDown>
 80143be:	4603      	mov	r3, r0
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	d001      	beq.n	80143c8 <CheckFCntDown+0x28>
    {
        return false;
 80143c4:	2300      	movs	r3, #0
 80143c6:	e00a      	b.n	80143de <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 80143c8:	68fb      	ldr	r3, [r7, #12]
 80143ca:	683a      	ldr	r2, [r7, #0]
 80143cc:	429a      	cmp	r2, r3
 80143ce:	d803      	bhi.n	80143d8 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITIAL_VALUE ) )
 80143d0:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 80143d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80143d6:	d101      	bne.n	80143dc <CheckFCntDown+0x3c>
    {
        return true;
 80143d8:	2301      	movs	r3, #1
 80143da:	e000      	b.n	80143de <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 80143dc:	2300      	movs	r3, #0
    }
}
 80143de:	4618      	mov	r0, r3
 80143e0:	3710      	adds	r7, #16
 80143e2:	46bd      	mov	sp, r7
 80143e4:	bd80      	pop	{r7, pc}
	...

080143e8 <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80143e8:	b480      	push	{r7}
 80143ea:	b083      	sub	sp, #12
 80143ec:	af00      	add	r7, sp, #0
 80143ee:	4603      	mov	r3, r0
 80143f0:	6039      	str	r1, [r7, #0]
 80143f2:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 80143f4:	79fb      	ldrb	r3, [r7, #7]
 80143f6:	3b01      	subs	r3, #1
 80143f8:	2b03      	cmp	r3, #3
 80143fa:	d82b      	bhi.n	8014454 <UpdateFCntDown+0x6c>
 80143fc:	a201      	add	r2, pc, #4	; (adr r2, 8014404 <UpdateFCntDown+0x1c>)
 80143fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014402:	bf00      	nop
 8014404:	08014415 	.word	0x08014415
 8014408:	08014427 	.word	0x08014427
 801440c:	08014439 	.word	0x08014439
 8014410:	0801444b 	.word	0x0801444b
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8014414:	4b12      	ldr	r3, [pc, #72]	; (8014460 <UpdateFCntDown+0x78>)
 8014416:	681b      	ldr	r3, [r3, #0]
 8014418:	683a      	ldr	r2, [r7, #0]
 801441a:	611a      	str	r2, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 801441c:	4b10      	ldr	r3, [pc, #64]	; (8014460 <UpdateFCntDown+0x78>)
 801441e:	681b      	ldr	r3, [r3, #0]
 8014420:	683a      	ldr	r2, [r7, #0]
 8014422:	621a      	str	r2, [r3, #32]
            break;
 8014424:	e017      	b.n	8014456 <UpdateFCntDown+0x6e>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8014426:	4b0e      	ldr	r3, [pc, #56]	; (8014460 <UpdateFCntDown+0x78>)
 8014428:	681b      	ldr	r3, [r3, #0]
 801442a:	683a      	ldr	r2, [r7, #0]
 801442c:	615a      	str	r2, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 801442e:	4b0c      	ldr	r3, [pc, #48]	; (8014460 <UpdateFCntDown+0x78>)
 8014430:	681b      	ldr	r3, [r3, #0]
 8014432:	683a      	ldr	r2, [r7, #0]
 8014434:	621a      	str	r2, [r3, #32]
            break;
 8014436:	e00e      	b.n	8014456 <UpdateFCntDown+0x6e>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8014438:	4b09      	ldr	r3, [pc, #36]	; (8014460 <UpdateFCntDown+0x78>)
 801443a:	681b      	ldr	r3, [r3, #0]
 801443c:	683a      	ldr	r2, [r7, #0]
 801443e:	619a      	str	r2, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 8014440:	4b07      	ldr	r3, [pc, #28]	; (8014460 <UpdateFCntDown+0x78>)
 8014442:	681b      	ldr	r3, [r3, #0]
 8014444:	683a      	ldr	r2, [r7, #0]
 8014446:	621a      	str	r2, [r3, #32]
            break;
 8014448:	e005      	b.n	8014456 <UpdateFCntDown+0x6e>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 801444a:	4b05      	ldr	r3, [pc, #20]	; (8014460 <UpdateFCntDown+0x78>)
 801444c:	681b      	ldr	r3, [r3, #0]
 801444e:	683a      	ldr	r2, [r7, #0]
 8014450:	61da      	str	r2, [r3, #28]
            break;
 8014452:	e000      	b.n	8014456 <UpdateFCntDown+0x6e>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8014454:	bf00      	nop
    }
}
 8014456:	bf00      	nop
 8014458:	370c      	adds	r7, #12
 801445a:	46bd      	mov	sp, r7
 801445c:	bc80      	pop	{r7}
 801445e:	4770      	bx	lr
 8014460:	20001acc 	.word	0x20001acc

08014464 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8014464:	b480      	push	{r7}
 8014466:	b083      	sub	sp, #12
 8014468:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 801446a:	4b18      	ldr	r3, [pc, #96]	; (80144cc <ResetFCnts+0x68>)
 801446c:	681b      	ldr	r3, [r3, #0]
 801446e:	2200      	movs	r2, #0
 8014470:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8014472:	4b16      	ldr	r3, [pc, #88]	; (80144cc <ResetFCnts+0x68>)
 8014474:	681b      	ldr	r3, [r3, #0]
 8014476:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801447a:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 801447c:	4b13      	ldr	r3, [pc, #76]	; (80144cc <ResetFCnts+0x68>)
 801447e:	681b      	ldr	r3, [r3, #0]
 8014480:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014484:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 8014486:	4b11      	ldr	r3, [pc, #68]	; (80144cc <ResetFCnts+0x68>)
 8014488:	681b      	ldr	r3, [r3, #0]
 801448a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801448e:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8014490:	4b0e      	ldr	r3, [pc, #56]	; (80144cc <ResetFCnts+0x68>)
 8014492:	681a      	ldr	r2, [r3, #0]
 8014494:	4b0d      	ldr	r3, [pc, #52]	; (80144cc <ResetFCnts+0x68>)
 8014496:	681b      	ldr	r3, [r3, #0]
 8014498:	6992      	ldr	r2, [r2, #24]
 801449a:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801449c:	2300      	movs	r3, #0
 801449e:	607b      	str	r3, [r7, #4]
 80144a0:	e00b      	b.n	80144ba <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 80144a2:	4b0a      	ldr	r3, [pc, #40]	; (80144cc <ResetFCnts+0x68>)
 80144a4:	681a      	ldr	r2, [r3, #0]
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	3306      	adds	r3, #6
 80144aa:	009b      	lsls	r3, r3, #2
 80144ac:	4413      	add	r3, r2
 80144ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80144b2:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	3301      	adds	r3, #1
 80144b8:	607b      	str	r3, [r7, #4]
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	2b00      	cmp	r3, #0
 80144be:	ddf0      	ble.n	80144a2 <ResetFCnts+0x3e>
    }
}
 80144c0:	bf00      	nop
 80144c2:	bf00      	nop
 80144c4:	370c      	adds	r7, #12
 80144c6:	46bd      	mov	sp, r7
 80144c8:	bc80      	pop	{r7}
 80144ca:	4770      	bx	lr
 80144cc:	20001acc 	.word	0x20001acc

080144d0 <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
 80144d0:	b480      	push	{r7}
 80144d2:	b083      	sub	sp, #12
 80144d4:	af00      	add	r7, sp, #0
 80144d6:	6078      	str	r0, [r7, #4]
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 80144d8:	4b06      	ldr	r3, [pc, #24]	; (80144f4 <IsJoinNonce10xOk+0x24>)
 80144da:	681b      	ldr	r3, [r3, #0]
 80144dc:	689b      	ldr	r3, [r3, #8]
 80144de:	687a      	ldr	r2, [r7, #4]
 80144e0:	429a      	cmp	r2, r3
 80144e2:	bf8c      	ite	hi
 80144e4:	2301      	movhi	r3, #1
 80144e6:	2300      	movls	r3, #0
 80144e8:	b2db      	uxtb	r3, r3
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 80144ea:	4618      	mov	r0, r3
 80144ec:	370c      	adds	r7, #12
 80144ee:	46bd      	mov	sp, r7
 80144f0:	bc80      	pop	{r7}
 80144f2:	4770      	bx	lr
 80144f4:	20001acc 	.word	0x20001acc

080144f8 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 80144f8:	b580      	push	{r7, lr}
 80144fa:	b082      	sub	sp, #8
 80144fc:	af00      	add	r7, sp, #0
 80144fe:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	2b00      	cmp	r3, #0
 8014504:	d101      	bne.n	801450a <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8014506:	2308      	movs	r3, #8
 8014508:	e01c      	b.n	8014544 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 801450a:	4a10      	ldr	r2, [pc, #64]	; (801454c <LoRaMacCryptoInit+0x54>)
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8014510:	4b0e      	ldr	r3, [pc, #56]	; (801454c <LoRaMacCryptoInit+0x54>)
 8014512:	681b      	ldr	r3, [r3, #0]
 8014514:	2228      	movs	r2, #40	; 0x28
 8014516:	2100      	movs	r1, #0
 8014518:	4618      	mov	r0, r3
 801451a:	f004 fced 	bl	8018ef8 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 801451e:	4b0b      	ldr	r3, [pc, #44]	; (801454c <LoRaMacCryptoInit+0x54>)
 8014520:	681b      	ldr	r3, [r3, #0]
 8014522:	2201      	movs	r2, #1
 8014524:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8014526:	4b09      	ldr	r3, [pc, #36]	; (801454c <LoRaMacCryptoInit+0x54>)
 8014528:	681b      	ldr	r3, [r3, #0]
 801452a:	2201      	movs	r2, #1
 801452c:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 801452e:	4b07      	ldr	r3, [pc, #28]	; (801454c <LoRaMacCryptoInit+0x54>)
 8014530:	681b      	ldr	r3, [r3, #0]
 8014532:	2201      	movs	r2, #1
 8014534:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8014536:	4b05      	ldr	r3, [pc, #20]	; (801454c <LoRaMacCryptoInit+0x54>)
 8014538:	681b      	ldr	r3, [r3, #0]
 801453a:	2200      	movs	r2, #0
 801453c:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 801453e:	f7ff ff91 	bl	8014464 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8014542:	2300      	movs	r3, #0
}
 8014544:	4618      	mov	r0, r3
 8014546:	3708      	adds	r7, #8
 8014548:	46bd      	mov	sp, r7
 801454a:	bd80      	pop	{r7, pc}
 801454c:	20001acc 	.word	0x20001acc

08014550 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8014550:	b480      	push	{r7}
 8014552:	b083      	sub	sp, #12
 8014554:	af00      	add	r7, sp, #0
 8014556:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8014558:	4b04      	ldr	r3, [pc, #16]	; (801456c <LoRaMacCryptoSetLrWanVersion+0x1c>)
 801455a:	681b      	ldr	r3, [r3, #0]
 801455c:	687a      	ldr	r2, [r7, #4]
 801455e:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8014560:	2300      	movs	r3, #0
}
 8014562:	4618      	mov	r0, r3
 8014564:	370c      	adds	r7, #12
 8014566:	46bd      	mov	sp, r7
 8014568:	bc80      	pop	{r7}
 801456a:	4770      	bx	lr
 801456c:	20001acc 	.word	0x20001acc

08014570 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8014570:	b480      	push	{r7}
 8014572:	b083      	sub	sp, #12
 8014574:	af00      	add	r7, sp, #0
 8014576:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	2b00      	cmp	r3, #0
 801457c:	d101      	bne.n	8014582 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801457e:	2309      	movs	r3, #9
 8014580:	e006      	b.n	8014590 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8014582:	4b06      	ldr	r3, [pc, #24]	; (801459c <LoRaMacCryptoGetFCntUp+0x2c>)
 8014584:	681b      	ldr	r3, [r3, #0]
 8014586:	68db      	ldr	r3, [r3, #12]
 8014588:	1c5a      	adds	r2, r3, #1
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 801458e:	2300      	movs	r3, #0
}
 8014590:	4618      	mov	r0, r3
 8014592:	370c      	adds	r7, #12
 8014594:	46bd      	mov	sp, r7
 8014596:	bc80      	pop	{r7}
 8014598:	4770      	bx	lr
 801459a:	bf00      	nop
 801459c:	20001acc 	.word	0x20001acc

080145a0 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 80145a0:	b580      	push	{r7, lr}
 80145a2:	b088      	sub	sp, #32
 80145a4:	af00      	add	r7, sp, #0
 80145a6:	4603      	mov	r3, r0
 80145a8:	60b9      	str	r1, [r7, #8]
 80145aa:	607a      	str	r2, [r7, #4]
 80145ac:	73fb      	strb	r3, [r7, #15]
    uint32_t lastDown = 0;
 80145ae:	2300      	movs	r3, #0
 80145b0:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 80145b2:	2300      	movs	r3, #0
 80145b4:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 80145b6:	2312      	movs	r3, #18
 80145b8:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	2b00      	cmp	r3, #0
 80145be:	d101      	bne.n	80145c4 <LoRaMacCryptoGetFCntDown+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80145c0:	2309      	movs	r3, #9
 80145c2:	e035      	b.n	8014630 <LoRaMacCryptoGetFCntDown+0x90>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 80145c4:	f107 0214 	add.w	r2, r7, #20
 80145c8:	7bfb      	ldrb	r3, [r7, #15]
 80145ca:	4611      	mov	r1, r2
 80145cc:	4618      	mov	r0, r3
 80145ce:	f7ff feab 	bl	8014328 <GetLastFcntDown>
 80145d2:	4603      	mov	r3, r0
 80145d4:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80145d6:	7efb      	ldrb	r3, [r7, #27]
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d001      	beq.n	80145e0 <LoRaMacCryptoGetFCntDown+0x40>
    {
        return cryptoStatus;
 80145dc:	7efb      	ldrb	r3, [r7, #27]
 80145de:	e027      	b.n	8014630 <LoRaMacCryptoGetFCntDown+0x90>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 80145e0:	697b      	ldr	r3, [r7, #20]
 80145e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80145e6:	d103      	bne.n	80145f0 <LoRaMacCryptoGetFCntDown+0x50>
    {
        *currentDown = frameFcnt;
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	68ba      	ldr	r2, [r7, #8]
 80145ec:	601a      	str	r2, [r3, #0]
 80145ee:	e01e      	b.n	801462e <LoRaMacCryptoGetFCntDown+0x8e>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 80145f0:	697b      	ldr	r3, [r7, #20]
 80145f2:	b29b      	uxth	r3, r3
 80145f4:	68ba      	ldr	r2, [r7, #8]
 80145f6:	1ad3      	subs	r3, r2, r3
 80145f8:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 80145fa:	69fb      	ldr	r3, [r7, #28]
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	dd05      	ble.n	801460c <LoRaMacCryptoGetFCntDown+0x6c>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8014600:	697a      	ldr	r2, [r7, #20]
 8014602:	69fb      	ldr	r3, [r7, #28]
 8014604:	441a      	add	r2, r3
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	601a      	str	r2, [r3, #0]
 801460a:	e010      	b.n	801462e <LoRaMacCryptoGetFCntDown+0x8e>
        }
        else if( fCntDiff == 0 )
 801460c:	69fb      	ldr	r3, [r7, #28]
 801460e:	2b00      	cmp	r3, #0
 8014610:	d104      	bne.n	801461c <LoRaMacCryptoGetFCntDown+0x7c>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8014612:	697a      	ldr	r2, [r7, #20]
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8014618:	2307      	movs	r3, #7
 801461a:	e009      	b.n	8014630 <LoRaMacCryptoGetFCntDown+0x90>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 801461c:	697b      	ldr	r3, [r7, #20]
 801461e:	0c1b      	lsrs	r3, r3, #16
 8014620:	041b      	lsls	r3, r3, #16
 8014622:	68ba      	ldr	r2, [r7, #8]
 8014624:	4413      	add	r3, r2
 8014626:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	601a      	str	r2, [r3, #0]
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801462e:	2300      	movs	r3, #0
}
 8014630:	4618      	mov	r0, r3
 8014632:	3720      	adds	r7, #32
 8014634:	46bd      	mov	sp, r7
 8014636:	bd80      	pop	{r7, pc}

08014638 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8014638:	b480      	push	{r7}
 801463a:	b085      	sub	sp, #20
 801463c:	af00      	add	r7, sp, #0
 801463e:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	2b00      	cmp	r3, #0
 8014644:	d101      	bne.n	801464a <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014646:	2309      	movs	r3, #9
 8014648:	e019      	b.n	801467e <LoRaMacCryptoSetMulticastReference+0x46>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801464a:	2300      	movs	r3, #0
 801464c:	60fb      	str	r3, [r7, #12]
 801464e:	e012      	b.n	8014676 <LoRaMacCryptoSetMulticastReference+0x3e>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8014650:	4b0d      	ldr	r3, [pc, #52]	; (8014688 <LoRaMacCryptoSetMulticastReference+0x50>)
 8014652:	6819      	ldr	r1, [r3, #0]
 8014654:	68fa      	ldr	r2, [r7, #12]
 8014656:	4613      	mov	r3, r2
 8014658:	005b      	lsls	r3, r3, #1
 801465a:	4413      	add	r3, r2
 801465c:	011b      	lsls	r3, r3, #4
 801465e:	461a      	mov	r2, r3
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	4413      	add	r3, r2
 8014664:	68fa      	ldr	r2, [r7, #12]
 8014666:	3206      	adds	r2, #6
 8014668:	0092      	lsls	r2, r2, #2
 801466a:	440a      	add	r2, r1
 801466c:	3204      	adds	r2, #4
 801466e:	625a      	str	r2, [r3, #36]	; 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8014670:	68fb      	ldr	r3, [r7, #12]
 8014672:	3301      	adds	r3, #1
 8014674:	60fb      	str	r3, [r7, #12]
 8014676:	68fb      	ldr	r3, [r7, #12]
 8014678:	2b00      	cmp	r3, #0
 801467a:	dde9      	ble.n	8014650 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801467c:	2300      	movs	r3, #0
}
 801467e:	4618      	mov	r0, r3
 8014680:	3714      	adds	r7, #20
 8014682:	46bd      	mov	sp, r7
 8014684:	bc80      	pop	{r7}
 8014686:	4770      	bx	lr
 8014688:	20001acc 	.word	0x20001acc

0801468c <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 801468c:	b580      	push	{r7, lr}
 801468e:	b082      	sub	sp, #8
 8014690:	af00      	add	r7, sp, #0
 8014692:	4603      	mov	r3, r0
 8014694:	6039      	str	r1, [r7, #0]
 8014696:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8014698:	79fb      	ldrb	r3, [r7, #7]
 801469a:	6839      	ldr	r1, [r7, #0]
 801469c:	4618      	mov	r0, r3
 801469e:	f7f7 fe29 	bl	800c2f4 <SecureElementSetKey>
 80146a2:	4603      	mov	r3, r0
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	d001      	beq.n	80146ac <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80146a8:	230e      	movs	r3, #14
 80146aa:	e021      	b.n	80146f0 <LoRaMacCryptoSetKey+0x64>
    }
    if( keyID == APP_KEY )
 80146ac:	79fb      	ldrb	r3, [r7, #7]
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	d11d      	bne.n	80146ee <LoRaMacCryptoSetKey+0x62>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 80146b2:	4b11      	ldr	r3, [pc, #68]	; (80146f8 <LoRaMacCryptoSetKey+0x6c>)
 80146b4:	681b      	ldr	r3, [r3, #0]
 80146b6:	789b      	ldrb	r3, [r3, #2]
 80146b8:	210b      	movs	r1, #11
 80146ba:	4618      	mov	r0, r3
 80146bc:	f000 fa58 	bl	8014b70 <LoRaMacCryptoDeriveLifeTimeKey>
 80146c0:	4603      	mov	r3, r0
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	d001      	beq.n	80146ca <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80146c6:	230e      	movs	r3, #14
 80146c8:	e012      	b.n	80146f0 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 80146ca:	210c      	movs	r1, #12
 80146cc:	2000      	movs	r0, #0
 80146ce:	f000 fa4f 	bl	8014b70 <LoRaMacCryptoDeriveLifeTimeKey>
 80146d2:	4603      	mov	r3, r0
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d001      	beq.n	80146dc <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80146d8:	230e      	movs	r3, #14
 80146da:	e009      	b.n	80146f0 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 80146dc:	210a      	movs	r1, #10
 80146de:	2000      	movs	r0, #0
 80146e0:	f000 fa46 	bl	8014b70 <LoRaMacCryptoDeriveLifeTimeKey>
 80146e4:	4603      	mov	r3, r0
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	d001      	beq.n	80146ee <LoRaMacCryptoSetKey+0x62>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80146ea:	230e      	movs	r3, #14
 80146ec:	e000      	b.n	80146f0 <LoRaMacCryptoSetKey+0x64>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80146ee:	2300      	movs	r3, #0
}
 80146f0:	4618      	mov	r0, r3
 80146f2:	3708      	adds	r7, #8
 80146f4:	46bd      	mov	sp, r7
 80146f6:	bd80      	pop	{r7, pc}
 80146f8:	20001acc 	.word	0x20001acc

080146fc <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 80146fc:	b580      	push	{r7, lr}
 80146fe:	b086      	sub	sp, #24
 8014700:	af02      	add	r7, sp, #8
 8014702:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	2b00      	cmp	r3, #0
 8014708:	d101      	bne.n	801470e <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801470a:	2309      	movs	r3, #9
 801470c:	e02d      	b.n	801476a <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 801470e:	2301      	movs	r3, #1
 8014710:	73fb      	strb	r3, [r7, #15]
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 8014712:	4b18      	ldr	r3, [pc, #96]	; (8014774 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 8014714:	681b      	ldr	r3, [r3, #0]
 8014716:	889a      	ldrh	r2, [r3, #4]
 8014718:	3201      	adds	r2, #1
 801471a:	b292      	uxth	r2, r2
 801471c:	809a      	strh	r2, [r3, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 801471e:	4b15      	ldr	r3, [pc, #84]	; (8014774 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 8014720:	681b      	ldr	r3, [r3, #0]
 8014722:	889a      	ldrh	r2, [r3, #4]
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8014728:	6878      	ldr	r0, [r7, #4]
 801472a:	f000 fc1b 	bl	8014f64 <LoRaMacSerializerJoinRequest>
 801472e:	4603      	mov	r3, r0
 8014730:	2b00      	cmp	r3, #0
 8014732:	d001      	beq.n	8014738 <LoRaMacCryptoPrepareJoinRequest+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8014734:	2310      	movs	r3, #16
 8014736:	e018      	b.n	801476a <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	6819      	ldr	r1, [r3, #0]
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	3318      	adds	r3, #24
 8014740:	7bfa      	ldrb	r2, [r7, #15]
 8014742:	9300      	str	r3, [sp, #0]
 8014744:	4613      	mov	r3, r2
 8014746:	2213      	movs	r2, #19
 8014748:	2000      	movs	r0, #0
 801474a:	f7f7 fe31 	bl	800c3b0 <SecureElementComputeAesCmac>
 801474e:	4603      	mov	r3, r0
 8014750:	2b00      	cmp	r3, #0
 8014752:	d001      	beq.n	8014758 <LoRaMacCryptoPrepareJoinRequest+0x5c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014754:	230e      	movs	r3, #14
 8014756:	e008      	b.n	801476a <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8014758:	6878      	ldr	r0, [r7, #4]
 801475a:	f000 fc03 	bl	8014f64 <LoRaMacSerializerJoinRequest>
 801475e:	4603      	mov	r3, r0
 8014760:	2b00      	cmp	r3, #0
 8014762:	d001      	beq.n	8014768 <LoRaMacCryptoPrepareJoinRequest+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8014764:	2310      	movs	r3, #16
 8014766:	e000      	b.n	801476a <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014768:	2300      	movs	r3, #0
}
 801476a:	4618      	mov	r0, r3
 801476c:	3710      	adds	r7, #16
 801476e:	46bd      	mov	sp, r7
 8014770:	bd80      	pop	{r7, pc}
 8014772:	bf00      	nop
 8014774:	20001acc 	.word	0x20001acc

08014778 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8014778:	b590      	push	{r4, r7, lr}
 801477a:	b097      	sub	sp, #92	; 0x5c
 801477c:	af04      	add	r7, sp, #16
 801477e:	4603      	mov	r3, r0
 8014780:	60b9      	str	r1, [r7, #8]
 8014782:	607a      	str	r2, [r7, #4]
 8014784:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	2b00      	cmp	r3, #0
 801478a:	d002      	beq.n	8014792 <LoRaMacCryptoHandleJoinAccept+0x1a>
 801478c:	68bb      	ldr	r3, [r7, #8]
 801478e:	2b00      	cmp	r3, #0
 8014790:	d101      	bne.n	8014796 <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014792:	2309      	movs	r3, #9
 8014794:	e0d3      	b.n	801493e <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8014796:	2312      	movs	r3, #18
 8014798:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 801479c:	2300      	movs	r3, #0
 801479e:	617b      	str	r3, [r7, #20]
 80147a0:	f107 0318 	add.w	r3, r7, #24
 80147a4:	221d      	movs	r2, #29
 80147a6:	2100      	movs	r1, #0
 80147a8:	4618      	mov	r0, r3
 80147aa:	f009 f987 	bl	801dabc <memset>
    uint8_t versionMinor         = 0;
 80147ae:	2300      	movs	r3, #0
 80147b0:	74fb      	strb	r3, [r7, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 80147b2:	4b65      	ldr	r3, [pc, #404]	; (8014948 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 80147b4:	681b      	ldr	r3, [r3, #0]
 80147b6:	889b      	ldrh	r3, [r3, #4]
 80147b8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* LORAMAC_VERSION */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	681c      	ldr	r4, [r3, #0]
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	791b      	ldrb	r3, [r3, #4]
 80147c4:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 80147c8:	7bf8      	ldrb	r0, [r7, #15]
 80147ca:	f107 0213 	add.w	r2, r7, #19
 80147ce:	9202      	str	r2, [sp, #8]
 80147d0:	f107 0214 	add.w	r2, r7, #20
 80147d4:	9201      	str	r2, [sp, #4]
 80147d6:	9300      	str	r3, [sp, #0]
 80147d8:	4623      	mov	r3, r4
 80147da:	460a      	mov	r2, r1
 80147dc:	68b9      	ldr	r1, [r7, #8]
 80147de:	f7f7 feed 	bl	800c5bc <SecureElementProcessJoinAccept>
 80147e2:	4603      	mov	r3, r0
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d001      	beq.n	80147ec <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80147e8:	230e      	movs	r3, #14
 80147ea:	e0a8      	b.n	801493e <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	6818      	ldr	r0, [r3, #0]
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	791b      	ldrb	r3, [r3, #4]
 80147f4:	b29a      	uxth	r2, r3
 80147f6:	f107 0314 	add.w	r3, r7, #20
 80147fa:	4619      	mov	r1, r3
 80147fc:	f004 fb41 	bl	8018e82 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8014800:	6878      	ldr	r0, [r7, #4]
 8014802:	f000 f9f0 	bl	8014be6 <LoRaMacParserJoinAccept>
 8014806:	4603      	mov	r3, r0
 8014808:	2b00      	cmp	r3, #0
 801480a:	d001      	beq.n	8014810 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 801480c:	230f      	movs	r3, #15
 801480e:	e096      	b.n	801493e <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    uint32_t currentJoinNonce;
    bool isJoinNonceOk = false;
 8014810:	2300      	movs	r3, #0
 8014812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	799b      	ldrb	r3, [r3, #6]
 801481a:	63fb      	str	r3, [r7, #60]	; 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	79db      	ldrb	r3, [r3, #7]
 8014820:	021b      	lsls	r3, r3, #8
 8014822:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014824:	4313      	orrs	r3, r2
 8014826:	63fb      	str	r3, [r7, #60]	; 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	7a1b      	ldrb	r3, [r3, #8]
 801482c:	041b      	lsls	r3, r3, #16
 801482e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014830:	4313      	orrs	r3, r2
 8014832:	63fb      	str	r3, [r7, #60]	; 0x3c
        isJoinNonceOk = IsJoinNonce11xOk( currentJoinNonce );
    }
    else
#endif /* LORAMAC_VERSION */
    {
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 8014834:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014836:	f7ff fe4b 	bl	80144d0 <IsJoinNonce10xOk>
 801483a:	4603      	mov	r3, r0
 801483c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    }

    if( isJoinNonceOk == true )
 8014840:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8014844:	2b00      	cmp	r3, #0
 8014846:	d010      	beq.n	801486a <LoRaMacCryptoHandleJoinAccept+0xf2>
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8014848:	4b3f      	ldr	r3, [pc, #252]	; (8014948 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 801484a:	681b      	ldr	r3, [r3, #0]
 801484c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801484e:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 8014850:	7cfb      	ldrb	r3, [r7, #19]
 8014852:	210b      	movs	r1, #11
 8014854:	4618      	mov	r0, r3
 8014856:	f000 f98b 	bl	8014b70 <LoRaMacCryptoDeriveLifeTimeKey>
 801485a:	4603      	mov	r3, r0
 801485c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014860:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014864:	2b00      	cmp	r3, #0
 8014866:	d005      	beq.n	8014874 <LoRaMacCryptoHandleJoinAccept+0xfc>
 8014868:	e001      	b.n	801486e <LoRaMacCryptoHandleJoinAccept+0xf6>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 801486a:	2303      	movs	r3, #3
 801486c:	e067      	b.n	801493e <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        return retval;
 801486e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014872:	e064      	b.n	801493e <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 8014874:	210c      	movs	r1, #12
 8014876:	2000      	movs	r0, #0
 8014878:	f000 f97a 	bl	8014b70 <LoRaMacCryptoDeriveLifeTimeKey>
 801487c:	4603      	mov	r3, r0
 801487e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014882:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014886:	2b00      	cmp	r3, #0
 8014888:	d002      	beq.n	8014890 <LoRaMacCryptoHandleJoinAccept+0x118>
    {
        return retval;
 801488a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801488e:	e056      	b.n	801493e <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 8014890:	210a      	movs	r1, #10
 8014892:	2000      	movs	r0, #0
 8014894:	f000 f96c 	bl	8014b70 <LoRaMacCryptoDeriveLifeTimeKey>
 8014898:	4603      	mov	r3, r0
 801489a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801489e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	d002      	beq.n	80148ac <LoRaMacCryptoHandleJoinAccept+0x134>
    {
        return retval;
 80148a6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80148aa:	e048      	b.n	801493e <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	7a5b      	ldrb	r3, [r3, #9]
 80148b0:	63bb      	str	r3, [r7, #56]	; 0x38
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	7a9b      	ldrb	r3, [r3, #10]
 80148b6:	021b      	lsls	r3, r3, #8
 80148b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80148ba:	4313      	orrs	r3, r2
 80148bc:	63bb      	str	r3, [r7, #56]	; 0x38
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	7adb      	ldrb	r3, [r3, #11]
 80148c2:	041b      	lsls	r3, r3, #16
 80148c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80148c6:	4313      	orrs	r3, r2
 80148c8:	63bb      	str	r3, [r7, #56]	; 0x38

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 80148ca:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80148ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80148d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80148d2:	2009      	movs	r0, #9
 80148d4:	f7ff fcd8 	bl	8014288 <DeriveSessionKey10x>
 80148d8:	4603      	mov	r3, r0
 80148da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80148de:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d002      	beq.n	80148ec <LoRaMacCryptoHandleJoinAccept+0x174>
        {
            return retval;
 80148e6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80148ea:	e028      	b.n	801493e <LoRaMacCryptoHandleJoinAccept+0x1c6>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 80148ec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80148f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80148f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80148f4:	2008      	movs	r0, #8
 80148f6:	f7ff fcc7 	bl	8014288 <DeriveSessionKey10x>
 80148fa:	4603      	mov	r3, r0
 80148fc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* LORAMAC_VERSION */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014900:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014904:	2b00      	cmp	r3, #0
 8014906:	d002      	beq.n	801490e <LoRaMacCryptoHandleJoinAccept+0x196>
        {
            return retval;
 8014908:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801490c:	e017      	b.n	801493e <LoRaMacCryptoHandleJoinAccept+0x1c6>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 801490e:	4b0e      	ldr	r3, [pc, #56]	; (8014948 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	7cfa      	ldrb	r2, [r7, #19]
 8014914:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    RJcount0 = 0;
#endif /* LORAMAC_VERSION */
    CryptoNvm->FCntList.FCntUp = 0;
 8014916:	4b0c      	ldr	r3, [pc, #48]	; (8014948 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8014918:	681b      	ldr	r3, [r3, #0]
 801491a:	2200      	movs	r2, #0
 801491c:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 801491e:	4b0a      	ldr	r3, [pc, #40]	; (8014948 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8014920:	681b      	ldr	r3, [r3, #0]
 8014922:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014926:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8014928:	4b07      	ldr	r3, [pc, #28]	; (8014948 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 801492a:	681b      	ldr	r3, [r3, #0]
 801492c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014930:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8014932:	4b05      	ldr	r3, [pc, #20]	; (8014948 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8014934:	681b      	ldr	r3, [r3, #0]
 8014936:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801493a:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 801493c:	2300      	movs	r3, #0
}
 801493e:	4618      	mov	r0, r3
 8014940:	374c      	adds	r7, #76	; 0x4c
 8014942:	46bd      	mov	sp, r7
 8014944:	bd90      	pop	{r4, r7, pc}
 8014946:	bf00      	nop
 8014948:	20001acc 	.word	0x20001acc

0801494c <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 801494c:	b590      	push	{r4, r7, lr}
 801494e:	b08b      	sub	sp, #44	; 0x2c
 8014950:	af04      	add	r7, sp, #16
 8014952:	60f8      	str	r0, [r7, #12]
 8014954:	607b      	str	r3, [r7, #4]
 8014956:	460b      	mov	r3, r1
 8014958:	72fb      	strb	r3, [r7, #11]
 801495a:	4613      	mov	r3, r2
 801495c:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801495e:	2312      	movs	r3, #18
 8014960:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8014962:	2309      	movs	r3, #9
 8014964:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	2b00      	cmp	r3, #0
 801496a:	d101      	bne.n	8014970 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801496c:	2309      	movs	r3, #9
 801496e:	e05f      	b.n	8014a30 <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8014970:	4b31      	ldr	r3, [pc, #196]	; (8014a38 <LoRaMacCryptoSecureMessage+0xec>)
 8014972:	681b      	ldr	r3, [r3, #0]
 8014974:	68db      	ldr	r3, [r3, #12]
 8014976:	68fa      	ldr	r2, [r7, #12]
 8014978:	429a      	cmp	r2, r3
 801497a:	d201      	bcs.n	8014980 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 801497c:	2306      	movs	r3, #6
 801497e:	e057      	b.n	8014a30 <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014986:	2b00      	cmp	r3, #0
 8014988:	d101      	bne.n	801498e <LoRaMacCryptoSecureMessage+0x42>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 801498a:	2308      	movs	r3, #8
 801498c:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 801498e:	4b2a      	ldr	r3, [pc, #168]	; (8014a38 <LoRaMacCryptoSecureMessage+0xec>)
 8014990:	681b      	ldr	r3, [r3, #0]
 8014992:	68db      	ldr	r3, [r3, #12]
 8014994:	68fa      	ldr	r2, [r7, #12]
 8014996:	429a      	cmp	r2, r3
 8014998:	d916      	bls.n	80149c8 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80149a4:	b219      	sxth	r1, r3
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	689c      	ldr	r4, [r3, #8]
 80149aa:	7dfa      	ldrb	r2, [r7, #23]
 80149ac:	68fb      	ldr	r3, [r7, #12]
 80149ae:	9301      	str	r3, [sp, #4]
 80149b0:	2300      	movs	r3, #0
 80149b2:	9300      	str	r3, [sp, #0]
 80149b4:	4623      	mov	r3, r4
 80149b6:	f7ff fa73 	bl	8013ea0 <PayloadEncrypt>
 80149ba:	4603      	mov	r3, r0
 80149bc:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80149be:	7dbb      	ldrb	r3, [r7, #22]
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d001      	beq.n	80149c8 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 80149c4:	7dbb      	ldrb	r3, [r7, #22]
 80149c6:	e033      	b.n	8014a30 <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80149c8:	6878      	ldr	r0, [r7, #4]
 80149ca:	f000 fb4d 	bl	8015068 <LoRaMacSerializerData>
 80149ce:	4603      	mov	r3, r0
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d001      	beq.n	80149d8 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80149d4:	2310      	movs	r3, #16
 80149d6:	e02b      	b.n	8014a30 <LoRaMacCryptoSecureMessage+0xe4>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 80149d8:	2308      	movs	r3, #8
 80149da:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	6818      	ldr	r0, [r3, #0]
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	791b      	ldrb	r3, [r3, #4]
 80149e4:	b29b      	uxth	r3, r3
 80149e6:	3b04      	subs	r3, #4
 80149e8:	b299      	uxth	r1, r3
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	689b      	ldr	r3, [r3, #8]
 80149ee:	687a      	ldr	r2, [r7, #4]
 80149f0:	322c      	adds	r2, #44	; 0x2c
 80149f2:	7dfc      	ldrb	r4, [r7, #23]
 80149f4:	9203      	str	r2, [sp, #12]
 80149f6:	68fa      	ldr	r2, [r7, #12]
 80149f8:	9202      	str	r2, [sp, #8]
 80149fa:	9301      	str	r3, [sp, #4]
 80149fc:	2300      	movs	r3, #0
 80149fe:	9300      	str	r3, [sp, #0]
 8014a00:	2300      	movs	r3, #0
 8014a02:	4622      	mov	r2, r4
 8014a04:	f7ff fb4d 	bl	80140a2 <ComputeCmacB0>
 8014a08:	4603      	mov	r3, r0
 8014a0a:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014a0c:	7dbb      	ldrb	r3, [r7, #22]
 8014a0e:	2b00      	cmp	r3, #0
 8014a10:	d001      	beq.n	8014a16 <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 8014a12:	7dbb      	ldrb	r3, [r7, #22]
 8014a14:	e00c      	b.n	8014a30 <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8014a16:	6878      	ldr	r0, [r7, #4]
 8014a18:	f000 fb26 	bl	8015068 <LoRaMacSerializerData>
 8014a1c:	4603      	mov	r3, r0
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	d001      	beq.n	8014a26 <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8014a22:	2310      	movs	r3, #16
 8014a24:	e004      	b.n	8014a30 <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8014a26:	4b04      	ldr	r3, [pc, #16]	; (8014a38 <LoRaMacCryptoSecureMessage+0xec>)
 8014a28:	681b      	ldr	r3, [r3, #0]
 8014a2a:	68fa      	ldr	r2, [r7, #12]
 8014a2c:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8014a2e:	2300      	movs	r3, #0
}
 8014a30:	4618      	mov	r0, r3
 8014a32:	371c      	adds	r7, #28
 8014a34:	46bd      	mov	sp, r7
 8014a36:	bd90      	pop	{r4, r7, pc}
 8014a38:	20001acc 	.word	0x20001acc

08014a3c <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8014a3c:	b590      	push	{r4, r7, lr}
 8014a3e:	b08b      	sub	sp, #44	; 0x2c
 8014a40:	af04      	add	r7, sp, #16
 8014a42:	60b9      	str	r1, [r7, #8]
 8014a44:	607b      	str	r3, [r7, #4]
 8014a46:	4603      	mov	r3, r0
 8014a48:	73fb      	strb	r3, [r7, #15]
 8014a4a:	4613      	mov	r3, r2
 8014a4c:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8014a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d101      	bne.n	8014a58 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014a54:	2309      	movs	r3, #9
 8014a56:	e084      	b.n	8014b62 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8014a58:	7bbb      	ldrb	r3, [r7, #14]
 8014a5a:	6879      	ldr	r1, [r7, #4]
 8014a5c:	4618      	mov	r0, r3
 8014a5e:	f7ff fc9f 	bl	80143a0 <CheckFCntDown>
 8014a62:	4603      	mov	r3, r0
 8014a64:	f083 0301 	eor.w	r3, r3, #1
 8014a68:	b2db      	uxtb	r3, r3
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d001      	beq.n	8014a72 <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8014a6e:	2306      	movs	r3, #6
 8014a70:	e077      	b.n	8014b62 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8014a72:	2312      	movs	r3, #18
 8014a74:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8014a76:	2309      	movs	r3, #9
 8014a78:	75fb      	strb	r3, [r7, #23]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8014a7a:	2308      	movs	r3, #8
 8014a7c:	753b      	strb	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8014a7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014a80:	f000 f97c 	bl	8014d7c <LoRaMacParserData>
 8014a84:	4603      	mov	r3, r0
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	d001      	beq.n	8014a8e <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8014a8a:	230f      	movs	r3, #15
 8014a8c:	e069      	b.n	8014b62 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8014a8e:	f107 0210 	add.w	r2, r7, #16
 8014a92:	7bfb      	ldrb	r3, [r7, #15]
 8014a94:	4611      	mov	r1, r2
 8014a96:	4618      	mov	r0, r3
 8014a98:	f7ff fbd0 	bl	801423c <GetKeyAddrItem>
 8014a9c:	4603      	mov	r3, r0
 8014a9e:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014aa0:	7d7b      	ldrb	r3, [r7, #21]
 8014aa2:	2b00      	cmp	r3, #0
 8014aa4:	d001      	beq.n	8014aaa <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 8014aa6:	7d7b      	ldrb	r3, [r7, #21]
 8014aa8:	e05b      	b.n	8014b62 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8014aaa:	693b      	ldr	r3, [r7, #16]
 8014aac:	785b      	ldrb	r3, [r3, #1]
 8014aae:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8014ab0:	693b      	ldr	r3, [r7, #16]
 8014ab2:	789b      	ldrb	r3, [r3, #2]
 8014ab4:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8014ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ab8:	689b      	ldr	r3, [r3, #8]
 8014aba:	68ba      	ldr	r2, [r7, #8]
 8014abc:	429a      	cmp	r2, r3
 8014abe:	d001      	beq.n	8014ac4 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8014ac0:	2302      	movs	r3, #2
 8014ac2:	e04e      	b.n	8014b62 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8014ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ac6:	7b1b      	ldrb	r3, [r3, #12]
 8014ac8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8014acc:	b2db      	uxtb	r3, r3
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	bf14      	ite	ne
 8014ad2:	2301      	movne	r3, #1
 8014ad4:	2300      	moveq	r3, #0
 8014ad6:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8014ad8:	4b24      	ldr	r3, [pc, #144]	; (8014b6c <LoRaMacCryptoUnsecureMessage+0x130>)
 8014ada:	681b      	ldr	r3, [r3, #0]
 8014adc:	789b      	ldrb	r3, [r3, #2]
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d101      	bne.n	8014ae6 <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8014ae2:	2300      	movs	r3, #0
 8014ae4:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8014ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ae8:	6818      	ldr	r0, [r3, #0]
 8014aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014aec:	791b      	ldrb	r3, [r3, #4]
 8014aee:	b29b      	uxth	r3, r3
 8014af0:	3b04      	subs	r3, #4
 8014af2:	b299      	uxth	r1, r3
 8014af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014af8:	7dbc      	ldrb	r4, [r7, #22]
 8014afa:	7d3a      	ldrb	r2, [r7, #20]
 8014afc:	9303      	str	r3, [sp, #12]
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	9302      	str	r3, [sp, #8]
 8014b02:	68bb      	ldr	r3, [r7, #8]
 8014b04:	9301      	str	r3, [sp, #4]
 8014b06:	2301      	movs	r3, #1
 8014b08:	9300      	str	r3, [sp, #0]
 8014b0a:	4623      	mov	r3, r4
 8014b0c:	f7ff fb07 	bl	801411e <VerifyCmacB0>
 8014b10:	4603      	mov	r3, r0
 8014b12:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014b14:	7d7b      	ldrb	r3, [r7, #21]
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	d001      	beq.n	8014b1e <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 8014b1a:	7d7b      	ldrb	r3, [r7, #21]
 8014b1c:	e021      	b.n	8014b62 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8014b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d101      	bne.n	8014b2c <LoRaMacCryptoUnsecureMessage+0xf0>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8014b28:	2308      	movs	r3, #8
 8014b2a:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8014b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b2e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8014b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014b36:	b219      	sxth	r1, r3
 8014b38:	7dfa      	ldrb	r2, [r7, #23]
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	9301      	str	r3, [sp, #4]
 8014b3e:	2301      	movs	r3, #1
 8014b40:	9300      	str	r3, [sp, #0]
 8014b42:	68bb      	ldr	r3, [r7, #8]
 8014b44:	f7ff f9ac 	bl	8013ea0 <PayloadEncrypt>
 8014b48:	4603      	mov	r3, r0
 8014b4a:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014b4c:	7d7b      	ldrb	r3, [r7, #21]
 8014b4e:	2b00      	cmp	r3, #0
 8014b50:	d001      	beq.n	8014b56 <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 8014b52:	7d7b      	ldrb	r3, [r7, #21]
 8014b54:	e005      	b.n	8014b62 <LoRaMacCryptoUnsecureMessage+0x126>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 8014b56:	7bbb      	ldrb	r3, [r7, #14]
 8014b58:	6879      	ldr	r1, [r7, #4]
 8014b5a:	4618      	mov	r0, r3
 8014b5c:	f7ff fc44 	bl	80143e8 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8014b60:	2300      	movs	r3, #0
}
 8014b62:	4618      	mov	r0, r3
 8014b64:	371c      	adds	r7, #28
 8014b66:	46bd      	mov	sp, r7
 8014b68:	bd90      	pop	{r4, r7, pc}
 8014b6a:	bf00      	nop
 8014b6c:	20001acc 	.word	0x20001acc

08014b70 <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8014b70:	b580      	push	{r7, lr}
 8014b72:	b088      	sub	sp, #32
 8014b74:	af00      	add	r7, sp, #0
 8014b76:	4603      	mov	r3, r0
 8014b78:	460a      	mov	r2, r1
 8014b7a:	71fb      	strb	r3, [r7, #7]
 8014b7c:	4613      	mov	r3, r2
 8014b7e:	71bb      	strb	r3, [r7, #6]
    uint8_t compBase[16] = { 0 };
 8014b80:	2300      	movs	r3, #0
 8014b82:	60fb      	str	r3, [r7, #12]
 8014b84:	f107 0310 	add.w	r3, r7, #16
 8014b88:	2200      	movs	r2, #0
 8014b8a:	601a      	str	r2, [r3, #0]
 8014b8c:	605a      	str	r2, [r3, #4]
 8014b8e:	609a      	str	r2, [r3, #8]
    KeyIdentifier_t rootKeyId = APP_KEY;
 8014b90:	2300      	movs	r3, #0
 8014b92:	77fb      	strb	r3, [r7, #31]
    switch( keyID )
 8014b94:	79bb      	ldrb	r3, [r7, #6]
 8014b96:	2b0c      	cmp	r3, #12
 8014b98:	d00b      	beq.n	8014bb2 <LoRaMacCryptoDeriveLifeTimeKey+0x42>
 8014b9a:	2b0c      	cmp	r3, #12
 8014b9c:	dc0f      	bgt.n	8014bbe <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
 8014b9e:	2b0a      	cmp	r3, #10
 8014ba0:	d00a      	beq.n	8014bb8 <LoRaMacCryptoDeriveLifeTimeKey+0x48>
 8014ba2:	2b0b      	cmp	r3, #11
 8014ba4:	d10b      	bne.n	8014bbe <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
    {
        case MC_ROOT_KEY:
            if( versionMinor == 1 )
 8014ba6:	79fb      	ldrb	r3, [r7, #7]
 8014ba8:	2b01      	cmp	r3, #1
 8014baa:	d10a      	bne.n	8014bc2 <LoRaMacCryptoDeriveLifeTimeKey+0x52>
            {
                compBase[0] = 0x20;
 8014bac:	2320      	movs	r3, #32
 8014bae:	733b      	strb	r3, [r7, #12]
            }
            break;
 8014bb0:	e007      	b.n	8014bc2 <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        case MC_KE_KEY:
            rootKeyId = MC_ROOT_KEY;
 8014bb2:	230b      	movs	r3, #11
 8014bb4:	77fb      	strb	r3, [r7, #31]
            break;
 8014bb6:	e005      	b.n	8014bc4 <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        case DATABLOCK_INT_KEY:
            compBase[0] = 0x30;
 8014bb8:	2330      	movs	r3, #48	; 0x30
 8014bba:	733b      	strb	r3, [r7, #12]
            break;
 8014bbc:	e002      	b.n	8014bc4 <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8014bbe:	230a      	movs	r3, #10
 8014bc0:	e00d      	b.n	8014bde <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
            break;
 8014bc2:	bf00      	nop
    }

    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 8014bc4:	79ba      	ldrb	r2, [r7, #6]
 8014bc6:	7ff9      	ldrb	r1, [r7, #31]
 8014bc8:	f107 030c 	add.w	r3, r7, #12
 8014bcc:	4618      	mov	r0, r3
 8014bce:	f7f7 fcb5 	bl	800c53c <SecureElementDeriveAndStoreKey>
 8014bd2:	4603      	mov	r3, r0
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d001      	beq.n	8014bdc <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014bd8:	230e      	movs	r3, #14
 8014bda:	e000      	b.n	8014bde <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014bdc:	2300      	movs	r3, #0
}
 8014bde:	4618      	mov	r0, r3
 8014be0:	3720      	adds	r7, #32
 8014be2:	46bd      	mov	sp, r7
 8014be4:	bd80      	pop	{r7, pc}

08014be6 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8014be6:	b580      	push	{r7, lr}
 8014be8:	b084      	sub	sp, #16
 8014bea:	af00      	add	r7, sp, #0
 8014bec:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	2b00      	cmp	r3, #0
 8014bf2:	d003      	beq.n	8014bfc <LoRaMacParserJoinAccept+0x16>
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	681b      	ldr	r3, [r3, #0]
 8014bf8:	2b00      	cmp	r3, #0
 8014bfa:	d101      	bne.n	8014c00 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8014bfc:	2302      	movs	r3, #2
 8014bfe:	e0b9      	b.n	8014d74 <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8014c00:	2300      	movs	r3, #0
 8014c02:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	681a      	ldr	r2, [r3, #0]
 8014c08:	89fb      	ldrh	r3, [r7, #14]
 8014c0a:	1c59      	adds	r1, r3, #1
 8014c0c:	81f9      	strh	r1, [r7, #14]
 8014c0e:	4413      	add	r3, r2
 8014c10:	781a      	ldrb	r2, [r3, #0]
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	1d98      	adds	r0, r3, #6
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	681a      	ldr	r2, [r3, #0]
 8014c1e:	89fb      	ldrh	r3, [r7, #14]
 8014c20:	4413      	add	r3, r2
 8014c22:	2203      	movs	r2, #3
 8014c24:	4619      	mov	r1, r3
 8014c26:	f004 f92c 	bl	8018e82 <memcpy1>
    bufItr = bufItr + 3;
 8014c2a:	89fb      	ldrh	r3, [r7, #14]
 8014c2c:	3303      	adds	r3, #3
 8014c2e:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	f103 0009 	add.w	r0, r3, #9
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	681a      	ldr	r2, [r3, #0]
 8014c3a:	89fb      	ldrh	r3, [r7, #14]
 8014c3c:	4413      	add	r3, r2
 8014c3e:	2203      	movs	r2, #3
 8014c40:	4619      	mov	r1, r3
 8014c42:	f004 f91e 	bl	8018e82 <memcpy1>
    bufItr = bufItr + 3;
 8014c46:	89fb      	ldrh	r3, [r7, #14]
 8014c48:	3303      	adds	r3, #3
 8014c4a:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	681a      	ldr	r2, [r3, #0]
 8014c50:	89fb      	ldrh	r3, [r7, #14]
 8014c52:	1c59      	adds	r1, r3, #1
 8014c54:	81f9      	strh	r1, [r7, #14]
 8014c56:	4413      	add	r3, r2
 8014c58:	781b      	ldrb	r3, [r3, #0]
 8014c5a:	461a      	mov	r2, r3
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	681a      	ldr	r2, [r3, #0]
 8014c64:	89fb      	ldrh	r3, [r7, #14]
 8014c66:	1c59      	adds	r1, r3, #1
 8014c68:	81f9      	strh	r1, [r7, #14]
 8014c6a:	4413      	add	r3, r2
 8014c6c:	781b      	ldrb	r3, [r3, #0]
 8014c6e:	021a      	lsls	r2, r3, #8
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	68db      	ldr	r3, [r3, #12]
 8014c74:	431a      	orrs	r2, r3
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	681a      	ldr	r2, [r3, #0]
 8014c7e:	89fb      	ldrh	r3, [r7, #14]
 8014c80:	1c59      	adds	r1, r3, #1
 8014c82:	81f9      	strh	r1, [r7, #14]
 8014c84:	4413      	add	r3, r2
 8014c86:	781b      	ldrb	r3, [r3, #0]
 8014c88:	041a      	lsls	r2, r3, #16
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	68db      	ldr	r3, [r3, #12]
 8014c8e:	431a      	orrs	r2, r3
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	681a      	ldr	r2, [r3, #0]
 8014c98:	89fb      	ldrh	r3, [r7, #14]
 8014c9a:	1c59      	adds	r1, r3, #1
 8014c9c:	81f9      	strh	r1, [r7, #14]
 8014c9e:	4413      	add	r3, r2
 8014ca0:	781b      	ldrb	r3, [r3, #0]
 8014ca2:	061a      	lsls	r2, r3, #24
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	68db      	ldr	r3, [r3, #12]
 8014ca8:	431a      	orrs	r2, r3
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	681a      	ldr	r2, [r3, #0]
 8014cb2:	89fb      	ldrh	r3, [r7, #14]
 8014cb4:	1c59      	adds	r1, r3, #1
 8014cb6:	81f9      	strh	r1, [r7, #14]
 8014cb8:	4413      	add	r3, r2
 8014cba:	781a      	ldrb	r2, [r3, #0]
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	681a      	ldr	r2, [r3, #0]
 8014cc4:	89fb      	ldrh	r3, [r7, #14]
 8014cc6:	1c59      	adds	r1, r3, #1
 8014cc8:	81f9      	strh	r1, [r7, #14]
 8014cca:	4413      	add	r3, r2
 8014ccc:	781a      	ldrb	r2, [r3, #0]
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	791b      	ldrb	r3, [r3, #4]
 8014cd6:	1f1a      	subs	r2, r3, #4
 8014cd8:	89fb      	ldrh	r3, [r7, #14]
 8014cda:	1ad3      	subs	r3, r2, r3
 8014cdc:	2b10      	cmp	r3, #16
 8014cde:	d10e      	bne.n	8014cfe <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	f103 0012 	add.w	r0, r3, #18
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	681a      	ldr	r2, [r3, #0]
 8014cea:	89fb      	ldrh	r3, [r7, #14]
 8014cec:	4413      	add	r3, r2
 8014cee:	2210      	movs	r2, #16
 8014cf0:	4619      	mov	r1, r3
 8014cf2:	f004 f8c6 	bl	8018e82 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8014cf6:	89fb      	ldrh	r3, [r7, #14]
 8014cf8:	3310      	adds	r3, #16
 8014cfa:	81fb      	strh	r3, [r7, #14]
 8014cfc:	e008      	b.n	8014d10 <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	791b      	ldrb	r3, [r3, #4]
 8014d02:	1f1a      	subs	r2, r3, #4
 8014d04:	89fb      	ldrh	r3, [r7, #14]
 8014d06:	1ad3      	subs	r3, r2, r3
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	dd01      	ble.n	8014d10 <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8014d0c:	2301      	movs	r3, #1
 8014d0e:	e031      	b.n	8014d74 <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	681a      	ldr	r2, [r3, #0]
 8014d14:	89fb      	ldrh	r3, [r7, #14]
 8014d16:	1c59      	adds	r1, r3, #1
 8014d18:	81f9      	strh	r1, [r7, #14]
 8014d1a:	4413      	add	r3, r2
 8014d1c:	781b      	ldrb	r3, [r3, #0]
 8014d1e:	461a      	mov	r2, r3
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	681a      	ldr	r2, [r3, #0]
 8014d28:	89fb      	ldrh	r3, [r7, #14]
 8014d2a:	1c59      	adds	r1, r3, #1
 8014d2c:	81f9      	strh	r1, [r7, #14]
 8014d2e:	4413      	add	r3, r2
 8014d30:	781b      	ldrb	r3, [r3, #0]
 8014d32:	021a      	lsls	r2, r3, #8
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d38:	431a      	orrs	r2, r3
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	681a      	ldr	r2, [r3, #0]
 8014d42:	89fb      	ldrh	r3, [r7, #14]
 8014d44:	1c59      	adds	r1, r3, #1
 8014d46:	81f9      	strh	r1, [r7, #14]
 8014d48:	4413      	add	r3, r2
 8014d4a:	781b      	ldrb	r3, [r3, #0]
 8014d4c:	041a      	lsls	r2, r3, #16
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d52:	431a      	orrs	r2, r3
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	681a      	ldr	r2, [r3, #0]
 8014d5c:	89fb      	ldrh	r3, [r7, #14]
 8014d5e:	1c59      	adds	r1, r3, #1
 8014d60:	81f9      	strh	r1, [r7, #14]
 8014d62:	4413      	add	r3, r2
 8014d64:	781b      	ldrb	r3, [r3, #0]
 8014d66:	061a      	lsls	r2, r3, #24
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d6c:	431a      	orrs	r2, r3
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 8014d72:	2300      	movs	r3, #0
}
 8014d74:	4618      	mov	r0, r3
 8014d76:	3710      	adds	r7, #16
 8014d78:	46bd      	mov	sp, r7
 8014d7a:	bd80      	pop	{r7, pc}

08014d7c <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8014d7c:	b580      	push	{r7, lr}
 8014d7e:	b084      	sub	sp, #16
 8014d80:	af00      	add	r7, sp, #0
 8014d82:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	d003      	beq.n	8014d92 <LoRaMacParserData+0x16>
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	681b      	ldr	r3, [r3, #0]
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	d101      	bne.n	8014d96 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8014d92:	2302      	movs	r3, #2
 8014d94:	e0e2      	b.n	8014f5c <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 8014d96:	2300      	movs	r3, #0
 8014d98:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	681a      	ldr	r2, [r3, #0]
 8014d9e:	89fb      	ldrh	r3, [r7, #14]
 8014da0:	1c59      	adds	r1, r3, #1
 8014da2:	81f9      	strh	r1, [r7, #14]
 8014da4:	4413      	add	r3, r2
 8014da6:	781a      	ldrb	r2, [r3, #0]
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	681a      	ldr	r2, [r3, #0]
 8014db0:	89fb      	ldrh	r3, [r7, #14]
 8014db2:	1c59      	adds	r1, r3, #1
 8014db4:	81f9      	strh	r1, [r7, #14]
 8014db6:	4413      	add	r3, r2
 8014db8:	781b      	ldrb	r3, [r3, #0]
 8014dba:	461a      	mov	r2, r3
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	681a      	ldr	r2, [r3, #0]
 8014dc4:	89fb      	ldrh	r3, [r7, #14]
 8014dc6:	1c59      	adds	r1, r3, #1
 8014dc8:	81f9      	strh	r1, [r7, #14]
 8014dca:	4413      	add	r3, r2
 8014dcc:	781b      	ldrb	r3, [r3, #0]
 8014dce:	021a      	lsls	r2, r3, #8
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	689b      	ldr	r3, [r3, #8]
 8014dd4:	431a      	orrs	r2, r3
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	681a      	ldr	r2, [r3, #0]
 8014dde:	89fb      	ldrh	r3, [r7, #14]
 8014de0:	1c59      	adds	r1, r3, #1
 8014de2:	81f9      	strh	r1, [r7, #14]
 8014de4:	4413      	add	r3, r2
 8014de6:	781b      	ldrb	r3, [r3, #0]
 8014de8:	041a      	lsls	r2, r3, #16
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	689b      	ldr	r3, [r3, #8]
 8014dee:	431a      	orrs	r2, r3
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	681a      	ldr	r2, [r3, #0]
 8014df8:	89fb      	ldrh	r3, [r7, #14]
 8014dfa:	1c59      	adds	r1, r3, #1
 8014dfc:	81f9      	strh	r1, [r7, #14]
 8014dfe:	4413      	add	r3, r2
 8014e00:	781b      	ldrb	r3, [r3, #0]
 8014e02:	061a      	lsls	r2, r3, #24
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	689b      	ldr	r3, [r3, #8]
 8014e08:	431a      	orrs	r2, r3
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	681a      	ldr	r2, [r3, #0]
 8014e12:	89fb      	ldrh	r3, [r7, #14]
 8014e14:	1c59      	adds	r1, r3, #1
 8014e16:	81f9      	strh	r1, [r7, #14]
 8014e18:	4413      	add	r3, r2
 8014e1a:	781a      	ldrb	r2, [r3, #0]
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	681a      	ldr	r2, [r3, #0]
 8014e24:	89fb      	ldrh	r3, [r7, #14]
 8014e26:	1c59      	adds	r1, r3, #1
 8014e28:	81f9      	strh	r1, [r7, #14]
 8014e2a:	4413      	add	r3, r2
 8014e2c:	781b      	ldrb	r3, [r3, #0]
 8014e2e:	b29a      	uxth	r2, r3
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	681a      	ldr	r2, [r3, #0]
 8014e38:	89fb      	ldrh	r3, [r7, #14]
 8014e3a:	1c59      	adds	r1, r3, #1
 8014e3c:	81f9      	strh	r1, [r7, #14]
 8014e3e:	4413      	add	r3, r2
 8014e40:	781b      	ldrb	r3, [r3, #0]
 8014e42:	0219      	lsls	r1, r3, #8
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	89db      	ldrh	r3, [r3, #14]
 8014e48:	b21a      	sxth	r2, r3
 8014e4a:	b20b      	sxth	r3, r1
 8014e4c:	4313      	orrs	r3, r2
 8014e4e:	b21b      	sxth	r3, r3
 8014e50:	b29a      	uxth	r2, r3
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	81da      	strh	r2, [r3, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	f103 0010 	add.w	r0, r3, #16
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	681a      	ldr	r2, [r3, #0]
 8014e60:	89fb      	ldrh	r3, [r7, #14]
 8014e62:	18d1      	adds	r1, r2, r3
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	7b1b      	ldrb	r3, [r3, #12]
 8014e68:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014e6c:	b2db      	uxtb	r3, r3
 8014e6e:	b29b      	uxth	r3, r3
 8014e70:	461a      	mov	r2, r3
 8014e72:	f004 f806 	bl	8018e82 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	7b1b      	ldrb	r3, [r3, #12]
 8014e7a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014e7e:	b2db      	uxtb	r3, r3
 8014e80:	b29a      	uxth	r2, r3
 8014e82:	89fb      	ldrh	r3, [r7, #14]
 8014e84:	4413      	add	r3, r2
 8014e86:	81fb      	strh	r3, [r7, #14]

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	2200      	movs	r2, #0
 8014e8c:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	2200      	movs	r2, #0
 8014e94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	791b      	ldrb	r3, [r3, #4]
 8014e9c:	461a      	mov	r2, r3
 8014e9e:	89fb      	ldrh	r3, [r7, #14]
 8014ea0:	1ad3      	subs	r3, r2, r3
 8014ea2:	2b04      	cmp	r3, #4
 8014ea4:	dd28      	ble.n	8014ef8 <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	681a      	ldr	r2, [r3, #0]
 8014eaa:	89fb      	ldrh	r3, [r7, #14]
 8014eac:	1c59      	adds	r1, r3, #1
 8014eae:	81f9      	strh	r1, [r7, #14]
 8014eb0:	4413      	add	r3, r2
 8014eb2:	781a      	ldrb	r2, [r3, #0]
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	791a      	ldrb	r2, [r3, #4]
 8014ebe:	89fb      	ldrh	r3, [r7, #14]
 8014ec0:	b2db      	uxtb	r3, r3
 8014ec2:	1ad3      	subs	r3, r2, r3
 8014ec4:	b2db      	uxtb	r3, r3
 8014ec6:	3b04      	subs	r3, #4
 8014ec8:	b2da      	uxtb	r2, r3
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	681a      	ldr	r2, [r3, #0]
 8014ed8:	89fb      	ldrh	r3, [r7, #14]
 8014eda:	18d1      	adds	r1, r2, r3
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014ee2:	b29b      	uxth	r3, r3
 8014ee4:	461a      	mov	r2, r3
 8014ee6:	f003 ffcc 	bl	8018e82 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014ef0:	b29a      	uxth	r2, r3
 8014ef2:	89fb      	ldrh	r3, [r7, #14]
 8014ef4:	4413      	add	r3, r2
 8014ef6:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	681a      	ldr	r2, [r3, #0]
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	791b      	ldrb	r3, [r3, #4]
 8014f00:	3b04      	subs	r3, #4
 8014f02:	4413      	add	r3, r2
 8014f04:	781b      	ldrb	r3, [r3, #0]
 8014f06:	461a      	mov	r2, r3
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	6819      	ldr	r1, [r3, #0]
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	791b      	ldrb	r3, [r3, #4]
 8014f18:	3b03      	subs	r3, #3
 8014f1a:	440b      	add	r3, r1
 8014f1c:	781b      	ldrb	r3, [r3, #0]
 8014f1e:	021b      	lsls	r3, r3, #8
 8014f20:	431a      	orrs	r2, r3
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	6819      	ldr	r1, [r3, #0]
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	791b      	ldrb	r3, [r3, #4]
 8014f32:	3b02      	subs	r3, #2
 8014f34:	440b      	add	r3, r1
 8014f36:	781b      	ldrb	r3, [r3, #0]
 8014f38:	041b      	lsls	r3, r3, #16
 8014f3a:	431a      	orrs	r2, r3
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	6819      	ldr	r1, [r3, #0]
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	791b      	ldrb	r3, [r3, #4]
 8014f4c:	3b01      	subs	r3, #1
 8014f4e:	440b      	add	r3, r1
 8014f50:	781b      	ldrb	r3, [r3, #0]
 8014f52:	061b      	lsls	r3, r3, #24
 8014f54:	431a      	orrs	r2, r3
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8014f5a:	2300      	movs	r3, #0
}
 8014f5c:	4618      	mov	r0, r3
 8014f5e:	3710      	adds	r7, #16
 8014f60:	46bd      	mov	sp, r7
 8014f62:	bd80      	pop	{r7, pc}

08014f64 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8014f64:	b580      	push	{r7, lr}
 8014f66:	b084      	sub	sp, #16
 8014f68:	af00      	add	r7, sp, #0
 8014f6a:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	2b00      	cmp	r3, #0
 8014f70:	d003      	beq.n	8014f7a <LoRaMacSerializerJoinRequest+0x16>
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	681b      	ldr	r3, [r3, #0]
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	d101      	bne.n	8014f7e <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8014f7a:	2301      	movs	r3, #1
 8014f7c:	e070      	b.n	8015060 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8014f7e:	2300      	movs	r3, #0
 8014f80:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	791b      	ldrb	r3, [r3, #4]
 8014f86:	2b16      	cmp	r3, #22
 8014f88:	d801      	bhi.n	8014f8e <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8014f8a:	2302      	movs	r3, #2
 8014f8c:	e068      	b.n	8015060 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	681a      	ldr	r2, [r3, #0]
 8014f92:	89fb      	ldrh	r3, [r7, #14]
 8014f94:	1c59      	adds	r1, r3, #1
 8014f96:	81f9      	strh	r1, [r7, #14]
 8014f98:	4413      	add	r3, r2
 8014f9a:	687a      	ldr	r2, [r7, #4]
 8014f9c:	7952      	ldrb	r2, [r2, #5]
 8014f9e:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	681a      	ldr	r2, [r3, #0]
 8014fa4:	89fb      	ldrh	r3, [r7, #14]
 8014fa6:	18d0      	adds	r0, r2, r3
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	3306      	adds	r3, #6
 8014fac:	2208      	movs	r2, #8
 8014fae:	4619      	mov	r1, r3
 8014fb0:	f003 ff82 	bl	8018eb8 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8014fb4:	89fb      	ldrh	r3, [r7, #14]
 8014fb6:	3308      	adds	r3, #8
 8014fb8:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	681a      	ldr	r2, [r3, #0]
 8014fbe:	89fb      	ldrh	r3, [r7, #14]
 8014fc0:	18d0      	adds	r0, r2, r3
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	330e      	adds	r3, #14
 8014fc6:	2208      	movs	r2, #8
 8014fc8:	4619      	mov	r1, r3
 8014fca:	f003 ff75 	bl	8018eb8 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8014fce:	89fb      	ldrh	r3, [r7, #14]
 8014fd0:	3308      	adds	r3, #8
 8014fd2:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	8ad9      	ldrh	r1, [r3, #22]
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	681a      	ldr	r2, [r3, #0]
 8014fdc:	89fb      	ldrh	r3, [r7, #14]
 8014fde:	1c58      	adds	r0, r3, #1
 8014fe0:	81f8      	strh	r0, [r7, #14]
 8014fe2:	4413      	add	r3, r2
 8014fe4:	b2ca      	uxtb	r2, r1
 8014fe6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	8adb      	ldrh	r3, [r3, #22]
 8014fec:	0a1b      	lsrs	r3, r3, #8
 8014fee:	b299      	uxth	r1, r3
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	681a      	ldr	r2, [r3, #0]
 8014ff4:	89fb      	ldrh	r3, [r7, #14]
 8014ff6:	1c58      	adds	r0, r3, #1
 8014ff8:	81f8      	strh	r0, [r7, #14]
 8014ffa:	4413      	add	r3, r2
 8014ffc:	b2ca      	uxtb	r2, r1
 8014ffe:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	6999      	ldr	r1, [r3, #24]
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	681a      	ldr	r2, [r3, #0]
 8015008:	89fb      	ldrh	r3, [r7, #14]
 801500a:	1c58      	adds	r0, r3, #1
 801500c:	81f8      	strh	r0, [r7, #14]
 801500e:	4413      	add	r3, r2
 8015010:	b2ca      	uxtb	r2, r1
 8015012:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	699b      	ldr	r3, [r3, #24]
 8015018:	0a19      	lsrs	r1, r3, #8
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	681a      	ldr	r2, [r3, #0]
 801501e:	89fb      	ldrh	r3, [r7, #14]
 8015020:	1c58      	adds	r0, r3, #1
 8015022:	81f8      	strh	r0, [r7, #14]
 8015024:	4413      	add	r3, r2
 8015026:	b2ca      	uxtb	r2, r1
 8015028:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	699b      	ldr	r3, [r3, #24]
 801502e:	0c19      	lsrs	r1, r3, #16
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	681a      	ldr	r2, [r3, #0]
 8015034:	89fb      	ldrh	r3, [r7, #14]
 8015036:	1c58      	adds	r0, r3, #1
 8015038:	81f8      	strh	r0, [r7, #14]
 801503a:	4413      	add	r3, r2
 801503c:	b2ca      	uxtb	r2, r1
 801503e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	699b      	ldr	r3, [r3, #24]
 8015044:	0e19      	lsrs	r1, r3, #24
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	681a      	ldr	r2, [r3, #0]
 801504a:	89fb      	ldrh	r3, [r7, #14]
 801504c:	1c58      	adds	r0, r3, #1
 801504e:	81f8      	strh	r0, [r7, #14]
 8015050:	4413      	add	r3, r2
 8015052:	b2ca      	uxtb	r2, r1
 8015054:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8015056:	89fb      	ldrh	r3, [r7, #14]
 8015058:	b2da      	uxtb	r2, r3
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 801505e:	2300      	movs	r3, #0
}
 8015060:	4618      	mov	r0, r3
 8015062:	3710      	adds	r7, #16
 8015064:	46bd      	mov	sp, r7
 8015066:	bd80      	pop	{r7, pc}

08015068 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8015068:	b580      	push	{r7, lr}
 801506a:	b084      	sub	sp, #16
 801506c:	af00      	add	r7, sp, #0
 801506e:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	2b00      	cmp	r3, #0
 8015074:	d003      	beq.n	801507e <LoRaMacSerializerData+0x16>
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	681b      	ldr	r3, [r3, #0]
 801507a:	2b00      	cmp	r3, #0
 801507c:	d101      	bne.n	8015082 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 801507e:	2301      	movs	r3, #1
 8015080:	e0e5      	b.n	801524e <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 8015082:	2300      	movs	r3, #0
 8015084:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8015086:	2308      	movs	r3, #8
 8015088:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	7b1b      	ldrb	r3, [r3, #12]
 801508e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8015092:	b2db      	uxtb	r3, r3
 8015094:	b29a      	uxth	r2, r3
 8015096:	89bb      	ldrh	r3, [r7, #12]
 8015098:	4413      	add	r3, r2
 801509a:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d002      	beq.n	80150ac <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 80150a6:	89bb      	ldrh	r3, [r7, #12]
 80150a8:	3301      	adds	r3, #1
 80150aa:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80150b2:	b29a      	uxth	r2, r3
 80150b4:	89bb      	ldrh	r3, [r7, #12]
 80150b6:	4413      	add	r3, r2
 80150b8:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 80150ba:	89bb      	ldrh	r3, [r7, #12]
 80150bc:	3304      	adds	r3, #4
 80150be:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	791b      	ldrb	r3, [r3, #4]
 80150c4:	b29b      	uxth	r3, r3
 80150c6:	89ba      	ldrh	r2, [r7, #12]
 80150c8:	429a      	cmp	r2, r3
 80150ca:	d901      	bls.n	80150d0 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80150cc:	2302      	movs	r3, #2
 80150ce:	e0be      	b.n	801524e <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	681a      	ldr	r2, [r3, #0]
 80150d4:	89fb      	ldrh	r3, [r7, #14]
 80150d6:	1c59      	adds	r1, r3, #1
 80150d8:	81f9      	strh	r1, [r7, #14]
 80150da:	4413      	add	r3, r2
 80150dc:	687a      	ldr	r2, [r7, #4]
 80150de:	7952      	ldrb	r2, [r2, #5]
 80150e0:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	6899      	ldr	r1, [r3, #8]
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	681a      	ldr	r2, [r3, #0]
 80150ea:	89fb      	ldrh	r3, [r7, #14]
 80150ec:	1c58      	adds	r0, r3, #1
 80150ee:	81f8      	strh	r0, [r7, #14]
 80150f0:	4413      	add	r3, r2
 80150f2:	b2ca      	uxtb	r2, r1
 80150f4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	689b      	ldr	r3, [r3, #8]
 80150fa:	0a19      	lsrs	r1, r3, #8
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	681a      	ldr	r2, [r3, #0]
 8015100:	89fb      	ldrh	r3, [r7, #14]
 8015102:	1c58      	adds	r0, r3, #1
 8015104:	81f8      	strh	r0, [r7, #14]
 8015106:	4413      	add	r3, r2
 8015108:	b2ca      	uxtb	r2, r1
 801510a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	689b      	ldr	r3, [r3, #8]
 8015110:	0c19      	lsrs	r1, r3, #16
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	681a      	ldr	r2, [r3, #0]
 8015116:	89fb      	ldrh	r3, [r7, #14]
 8015118:	1c58      	adds	r0, r3, #1
 801511a:	81f8      	strh	r0, [r7, #14]
 801511c:	4413      	add	r3, r2
 801511e:	b2ca      	uxtb	r2, r1
 8015120:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	689b      	ldr	r3, [r3, #8]
 8015126:	0e19      	lsrs	r1, r3, #24
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	681a      	ldr	r2, [r3, #0]
 801512c:	89fb      	ldrh	r3, [r7, #14]
 801512e:	1c58      	adds	r0, r3, #1
 8015130:	81f8      	strh	r0, [r7, #14]
 8015132:	4413      	add	r3, r2
 8015134:	b2ca      	uxtb	r2, r1
 8015136:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	681a      	ldr	r2, [r3, #0]
 801513c:	89fb      	ldrh	r3, [r7, #14]
 801513e:	1c59      	adds	r1, r3, #1
 8015140:	81f9      	strh	r1, [r7, #14]
 8015142:	4413      	add	r3, r2
 8015144:	687a      	ldr	r2, [r7, #4]
 8015146:	7b12      	ldrb	r2, [r2, #12]
 8015148:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	89d9      	ldrh	r1, [r3, #14]
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	681a      	ldr	r2, [r3, #0]
 8015152:	89fb      	ldrh	r3, [r7, #14]
 8015154:	1c58      	adds	r0, r3, #1
 8015156:	81f8      	strh	r0, [r7, #14]
 8015158:	4413      	add	r3, r2
 801515a:	b2ca      	uxtb	r2, r1
 801515c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	89db      	ldrh	r3, [r3, #14]
 8015162:	0a1b      	lsrs	r3, r3, #8
 8015164:	b299      	uxth	r1, r3
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	681a      	ldr	r2, [r3, #0]
 801516a:	89fb      	ldrh	r3, [r7, #14]
 801516c:	1c58      	adds	r0, r3, #1
 801516e:	81f8      	strh	r0, [r7, #14]
 8015170:	4413      	add	r3, r2
 8015172:	b2ca      	uxtb	r2, r1
 8015174:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	681a      	ldr	r2, [r3, #0]
 801517a:	89fb      	ldrh	r3, [r7, #14]
 801517c:	18d0      	adds	r0, r2, r3
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	f103 0110 	add.w	r1, r3, #16
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	7b1b      	ldrb	r3, [r3, #12]
 8015188:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801518c:	b2db      	uxtb	r3, r3
 801518e:	b29b      	uxth	r3, r3
 8015190:	461a      	mov	r2, r3
 8015192:	f003 fe76 	bl	8018e82 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	7b1b      	ldrb	r3, [r3, #12]
 801519a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801519e:	b2db      	uxtb	r3, r3
 80151a0:	b29a      	uxth	r2, r3
 80151a2:	89fb      	ldrh	r3, [r7, #14]
 80151a4:	4413      	add	r3, r2
 80151a6:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80151ae:	2b00      	cmp	r3, #0
 80151b0:	d009      	beq.n	80151c6 <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	681a      	ldr	r2, [r3, #0]
 80151b6:	89fb      	ldrh	r3, [r7, #14]
 80151b8:	1c59      	adds	r1, r3, #1
 80151ba:	81f9      	strh	r1, [r7, #14]
 80151bc:	4413      	add	r3, r2
 80151be:	687a      	ldr	r2, [r7, #4]
 80151c0:	f892 2020 	ldrb.w	r2, [r2, #32]
 80151c4:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	681a      	ldr	r2, [r3, #0]
 80151ca:	89fb      	ldrh	r3, [r7, #14]
 80151cc:	18d0      	adds	r0, r2, r3
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80151d8:	b29b      	uxth	r3, r3
 80151da:	461a      	mov	r2, r3
 80151dc:	f003 fe51 	bl	8018e82 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80151e6:	b29a      	uxth	r2, r3
 80151e8:	89fb      	ldrh	r3, [r7, #14]
 80151ea:	4413      	add	r3, r2
 80151ec:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	681a      	ldr	r2, [r3, #0]
 80151f6:	89fb      	ldrh	r3, [r7, #14]
 80151f8:	1c58      	adds	r0, r3, #1
 80151fa:	81f8      	strh	r0, [r7, #14]
 80151fc:	4413      	add	r3, r2
 80151fe:	b2ca      	uxtb	r2, r1
 8015200:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015206:	0a19      	lsrs	r1, r3, #8
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	681a      	ldr	r2, [r3, #0]
 801520c:	89fb      	ldrh	r3, [r7, #14]
 801520e:	1c58      	adds	r0, r3, #1
 8015210:	81f8      	strh	r0, [r7, #14]
 8015212:	4413      	add	r3, r2
 8015214:	b2ca      	uxtb	r2, r1
 8015216:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801521c:	0c19      	lsrs	r1, r3, #16
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	681a      	ldr	r2, [r3, #0]
 8015222:	89fb      	ldrh	r3, [r7, #14]
 8015224:	1c58      	adds	r0, r3, #1
 8015226:	81f8      	strh	r0, [r7, #14]
 8015228:	4413      	add	r3, r2
 801522a:	b2ca      	uxtb	r2, r1
 801522c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015232:	0e19      	lsrs	r1, r3, #24
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	681a      	ldr	r2, [r3, #0]
 8015238:	89fb      	ldrh	r3, [r7, #14]
 801523a:	1c58      	adds	r0, r3, #1
 801523c:	81f8      	strh	r0, [r7, #14]
 801523e:	4413      	add	r3, r2
 8015240:	b2ca      	uxtb	r2, r1
 8015242:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8015244:	89fb      	ldrh	r3, [r7, #14]
 8015246:	b2da      	uxtb	r2, r3
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 801524c:	2300      	movs	r3, #0
}
 801524e:	4618      	mov	r0, r3
 8015250:	3710      	adds	r7, #16
 8015252:	46bd      	mov	sp, r7
 8015254:	bd80      	pop	{r7, pc}

08015256 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8015256:	b480      	push	{r7}
 8015258:	b083      	sub	sp, #12
 801525a:	af00      	add	r7, sp, #0
 801525c:	4603      	mov	r3, r0
 801525e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015260:	79fb      	ldrb	r3, [r7, #7]
 8015262:	2b05      	cmp	r3, #5
 8015264:	d002      	beq.n	801526c <RegionIsActive+0x16>
 8015266:	2b08      	cmp	r3, #8
 8015268:	d002      	beq.n	8015270 <RegionIsActive+0x1a>
 801526a:	e003      	b.n	8015274 <RegionIsActive+0x1e>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 801526c:	2301      	movs	r3, #1
 801526e:	e002      	b.n	8015276 <RegionIsActive+0x20>
        KR920_IS_ACTIVE( );
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
 8015270:	2301      	movs	r3, #1
 8015272:	e000      	b.n	8015276 <RegionIsActive+0x20>
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8015274:	2300      	movs	r3, #0
        }
    }
}
 8015276:	4618      	mov	r0, r3
 8015278:	370c      	adds	r7, #12
 801527a:	46bd      	mov	sp, r7
 801527c:	bc80      	pop	{r7}
 801527e:	4770      	bx	lr

08015280 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8015280:	b580      	push	{r7, lr}
 8015282:	b084      	sub	sp, #16
 8015284:	af00      	add	r7, sp, #0
 8015286:	4603      	mov	r3, r0
 8015288:	6039      	str	r1, [r7, #0]
 801528a:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 801528c:	2300      	movs	r3, #0
 801528e:	60bb      	str	r3, [r7, #8]
    switch( region )
 8015290:	79fb      	ldrb	r3, [r7, #7]
 8015292:	2b05      	cmp	r3, #5
 8015294:	d002      	beq.n	801529c <RegionGetPhyParam+0x1c>
 8015296:	2b08      	cmp	r3, #8
 8015298:	d006      	beq.n	80152a8 <RegionGetPhyParam+0x28>
 801529a:	e00b      	b.n	80152b4 <RegionGetPhyParam+0x34>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 801529c:	6838      	ldr	r0, [r7, #0]
 801529e:	f001 fad1 	bl	8016844 <RegionEU868GetPhyParam>
 80152a2:	4603      	mov	r3, r0
 80152a4:	60fb      	str	r3, [r7, #12]
 80152a6:	e007      	b.n	80152b8 <RegionGetPhyParam+0x38>
        KR920_GET_PHY_PARAM( );
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
 80152a8:	6838      	ldr	r0, [r7, #0]
 80152aa:	f002 fc51 	bl	8017b50 <RegionUS915GetPhyParam>
 80152ae:	4603      	mov	r3, r0
 80152b0:	60fb      	str	r3, [r7, #12]
 80152b2:	e001      	b.n	80152b8 <RegionGetPhyParam+0x38>
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 80152b4:	68bb      	ldr	r3, [r7, #8]
 80152b6:	60fb      	str	r3, [r7, #12]
        }
    }
}
 80152b8:	68fb      	ldr	r3, [r7, #12]
 80152ba:	4618      	mov	r0, r3
 80152bc:	3710      	adds	r7, #16
 80152be:	46bd      	mov	sp, r7
 80152c0:	bd80      	pop	{r7, pc}

080152c2 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 80152c2:	b580      	push	{r7, lr}
 80152c4:	b082      	sub	sp, #8
 80152c6:	af00      	add	r7, sp, #0
 80152c8:	4603      	mov	r3, r0
 80152ca:	6039      	str	r1, [r7, #0]
 80152cc:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80152ce:	79fb      	ldrb	r3, [r7, #7]
 80152d0:	2b05      	cmp	r3, #5
 80152d2:	d002      	beq.n	80152da <RegionSetBandTxDone+0x18>
 80152d4:	2b08      	cmp	r3, #8
 80152d6:	d004      	beq.n	80152e2 <RegionSetBandTxDone+0x20>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 80152d8:	e006      	b.n	80152e8 <RegionSetBandTxDone+0x26>
        EU868_SET_BAND_TX_DONE( );
 80152da:	6838      	ldr	r0, [r7, #0]
 80152dc:	f001 fbf8 	bl	8016ad0 <RegionEU868SetBandTxDone>
 80152e0:	e002      	b.n	80152e8 <RegionSetBandTxDone+0x26>
        US915_SET_BAND_TX_DONE( );
 80152e2:	6838      	ldr	r0, [r7, #0]
 80152e4:	f002 fd90 	bl	8017e08 <RegionUS915SetBandTxDone>
        }
    }
}
 80152e8:	3708      	adds	r7, #8
 80152ea:	46bd      	mov	sp, r7
 80152ec:	bd80      	pop	{r7, pc}

080152ee <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 80152ee:	b580      	push	{r7, lr}
 80152f0:	b082      	sub	sp, #8
 80152f2:	af00      	add	r7, sp, #0
 80152f4:	4603      	mov	r3, r0
 80152f6:	6039      	str	r1, [r7, #0]
 80152f8:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80152fa:	79fb      	ldrb	r3, [r7, #7]
 80152fc:	2b05      	cmp	r3, #5
 80152fe:	d002      	beq.n	8015306 <RegionInitDefaults+0x18>
 8015300:	2b08      	cmp	r3, #8
 8015302:	d004      	beq.n	801530e <RegionInitDefaults+0x20>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8015304:	e006      	b.n	8015314 <RegionInitDefaults+0x26>
        EU868_INIT_DEFAULTS( );
 8015306:	6838      	ldr	r0, [r7, #0]
 8015308:	f001 fc0e 	bl	8016b28 <RegionEU868InitDefaults>
 801530c:	e002      	b.n	8015314 <RegionInitDefaults+0x26>
        US915_INIT_DEFAULTS( );
 801530e:	6838      	ldr	r0, [r7, #0]
 8015310:	f002 fda6 	bl	8017e60 <RegionUS915InitDefaults>
        }
    }
}
 8015314:	bf00      	nop
 8015316:	3708      	adds	r7, #8
 8015318:	46bd      	mov	sp, r7
 801531a:	bd80      	pop	{r7, pc}

0801531c <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 801531c:	b580      	push	{r7, lr}
 801531e:	b082      	sub	sp, #8
 8015320:	af00      	add	r7, sp, #0
 8015322:	4603      	mov	r3, r0
 8015324:	6039      	str	r1, [r7, #0]
 8015326:	71fb      	strb	r3, [r7, #7]
 8015328:	4613      	mov	r3, r2
 801532a:	71bb      	strb	r3, [r7, #6]
    switch( region )
 801532c:	79fb      	ldrb	r3, [r7, #7]
 801532e:	2b05      	cmp	r3, #5
 8015330:	d002      	beq.n	8015338 <RegionVerify+0x1c>
 8015332:	2b08      	cmp	r3, #8
 8015334:	d007      	beq.n	8015346 <RegionVerify+0x2a>
 8015336:	e00d      	b.n	8015354 <RegionVerify+0x38>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8015338:	79bb      	ldrb	r3, [r7, #6]
 801533a:	4619      	mov	r1, r3
 801533c:	6838      	ldr	r0, [r7, #0]
 801533e:	f001 fc91 	bl	8016c64 <RegionEU868Verify>
 8015342:	4603      	mov	r3, r0
 8015344:	e007      	b.n	8015356 <RegionVerify+0x3a>
        KR920_VERIFY( );
        IN865_VERIFY( );
        US915_VERIFY( );
 8015346:	79bb      	ldrb	r3, [r7, #6]
 8015348:	4619      	mov	r1, r3
 801534a:	6838      	ldr	r0, [r7, #0]
 801534c:	f002 feba 	bl	80180c4 <RegionUS915Verify>
 8015350:	4603      	mov	r3, r0
 8015352:	e000      	b.n	8015356 <RegionVerify+0x3a>
        RU864_VERIFY( );
        default:
        {
            return false;
 8015354:	2300      	movs	r3, #0
        }
    }
}
 8015356:	4618      	mov	r0, r3
 8015358:	3708      	adds	r7, #8
 801535a:	46bd      	mov	sp, r7
 801535c:	bd80      	pop	{r7, pc}

0801535e <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 801535e:	b580      	push	{r7, lr}
 8015360:	b082      	sub	sp, #8
 8015362:	af00      	add	r7, sp, #0
 8015364:	4603      	mov	r3, r0
 8015366:	6039      	str	r1, [r7, #0]
 8015368:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801536a:	79fb      	ldrb	r3, [r7, #7]
 801536c:	2b05      	cmp	r3, #5
 801536e:	d002      	beq.n	8015376 <RegionApplyCFList+0x18>
 8015370:	2b08      	cmp	r3, #8
 8015372:	d004      	beq.n	801537e <RegionApplyCFList+0x20>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8015374:	e006      	b.n	8015384 <RegionApplyCFList+0x26>
        EU868_APPLY_CF_LIST( );
 8015376:	6838      	ldr	r0, [r7, #0]
 8015378:	f001 fcf0 	bl	8016d5c <RegionEU868ApplyCFList>
 801537c:	e002      	b.n	8015384 <RegionApplyCFList+0x26>
        US915_APPLY_CF_LIST( );
 801537e:	6838      	ldr	r0, [r7, #0]
 8015380:	f002 ff16 	bl	80181b0 <RegionUS915ApplyCFList>
        }
    }
}
 8015384:	bf00      	nop
 8015386:	3708      	adds	r7, #8
 8015388:	46bd      	mov	sp, r7
 801538a:	bd80      	pop	{r7, pc}

0801538c <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 801538c:	b580      	push	{r7, lr}
 801538e:	b082      	sub	sp, #8
 8015390:	af00      	add	r7, sp, #0
 8015392:	4603      	mov	r3, r0
 8015394:	6039      	str	r1, [r7, #0]
 8015396:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015398:	79fb      	ldrb	r3, [r7, #7]
 801539a:	2b05      	cmp	r3, #5
 801539c:	d002      	beq.n	80153a4 <RegionChanMaskSet+0x18>
 801539e:	2b08      	cmp	r3, #8
 80153a0:	d005      	beq.n	80153ae <RegionChanMaskSet+0x22>
 80153a2:	e009      	b.n	80153b8 <RegionChanMaskSet+0x2c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 80153a4:	6838      	ldr	r0, [r7, #0]
 80153a6:	f001 fd4d 	bl	8016e44 <RegionEU868ChanMaskSet>
 80153aa:	4603      	mov	r3, r0
 80153ac:	e005      	b.n	80153ba <RegionChanMaskSet+0x2e>
        KR920_CHAN_MASK_SET( );
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
 80153ae:	6838      	ldr	r0, [r7, #0]
 80153b0:	f002 ff72 	bl	8018298 <RegionUS915ChanMaskSet>
 80153b4:	4603      	mov	r3, r0
 80153b6:	e000      	b.n	80153ba <RegionChanMaskSet+0x2e>
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 80153b8:	2300      	movs	r3, #0
        }
    }
}
 80153ba:	4618      	mov	r0, r3
 80153bc:	3708      	adds	r7, #8
 80153be:	46bd      	mov	sp, r7
 80153c0:	bd80      	pop	{r7, pc}

080153c2 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80153c2:	b580      	push	{r7, lr}
 80153c4:	b082      	sub	sp, #8
 80153c6:	af00      	add	r7, sp, #0
 80153c8:	603b      	str	r3, [r7, #0]
 80153ca:	4603      	mov	r3, r0
 80153cc:	71fb      	strb	r3, [r7, #7]
 80153ce:	460b      	mov	r3, r1
 80153d0:	71bb      	strb	r3, [r7, #6]
 80153d2:	4613      	mov	r3, r2
 80153d4:	717b      	strb	r3, [r7, #5]
    switch( region )
 80153d6:	79fb      	ldrb	r3, [r7, #7]
 80153d8:	2b05      	cmp	r3, #5
 80153da:	d002      	beq.n	80153e2 <RegionComputeRxWindowParameters+0x20>
 80153dc:	2b08      	cmp	r3, #8
 80153de:	d008      	beq.n	80153f2 <RegionComputeRxWindowParameters+0x30>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 80153e0:	e00e      	b.n	8015400 <RegionComputeRxWindowParameters+0x3e>
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 80153e2:	7979      	ldrb	r1, [r7, #5]
 80153e4:	f997 0006 	ldrsb.w	r0, [r7, #6]
 80153e8:	693b      	ldr	r3, [r7, #16]
 80153ea:	683a      	ldr	r2, [r7, #0]
 80153ec:	f001 fd54 	bl	8016e98 <RegionEU868ComputeRxWindowParameters>
 80153f0:	e006      	b.n	8015400 <RegionComputeRxWindowParameters+0x3e>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 80153f2:	7979      	ldrb	r1, [r7, #5]
 80153f4:	f997 0006 	ldrsb.w	r0, [r7, #6]
 80153f8:	693b      	ldr	r3, [r7, #16]
 80153fa:	683a      	ldr	r2, [r7, #0]
 80153fc:	f002 ffb4 	bl	8018368 <RegionUS915ComputeRxWindowParameters>
        }
    }
}
 8015400:	bf00      	nop
 8015402:	3708      	adds	r7, #8
 8015404:	46bd      	mov	sp, r7
 8015406:	bd80      	pop	{r7, pc}

08015408 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8015408:	b580      	push	{r7, lr}
 801540a:	b084      	sub	sp, #16
 801540c:	af00      	add	r7, sp, #0
 801540e:	4603      	mov	r3, r0
 8015410:	60b9      	str	r1, [r7, #8]
 8015412:	607a      	str	r2, [r7, #4]
 8015414:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8015416:	7bfb      	ldrb	r3, [r7, #15]
 8015418:	2b05      	cmp	r3, #5
 801541a:	d002      	beq.n	8015422 <RegionRxConfig+0x1a>
 801541c:	2b08      	cmp	r3, #8
 801541e:	d006      	beq.n	801542e <RegionRxConfig+0x26>
 8015420:	e00b      	b.n	801543a <RegionRxConfig+0x32>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8015422:	6879      	ldr	r1, [r7, #4]
 8015424:	68b8      	ldr	r0, [r7, #8]
 8015426:	f001 fd91 	bl	8016f4c <RegionEU868RxConfig>
 801542a:	4603      	mov	r3, r0
 801542c:	e006      	b.n	801543c <RegionRxConfig+0x34>
        KR920_RX_CONFIG( );
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
 801542e:	6879      	ldr	r1, [r7, #4]
 8015430:	68b8      	ldr	r0, [r7, #8]
 8015432:	f002 ffe3 	bl	80183fc <RegionUS915RxConfig>
 8015436:	4603      	mov	r3, r0
 8015438:	e000      	b.n	801543c <RegionRxConfig+0x34>
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 801543a:	2300      	movs	r3, #0
        }
    }
}
 801543c:	4618      	mov	r0, r3
 801543e:	3710      	adds	r7, #16
 8015440:	46bd      	mov	sp, r7
 8015442:	bd80      	pop	{r7, pc}

08015444 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8015444:	b580      	push	{r7, lr}
 8015446:	b084      	sub	sp, #16
 8015448:	af00      	add	r7, sp, #0
 801544a:	60b9      	str	r1, [r7, #8]
 801544c:	607a      	str	r2, [r7, #4]
 801544e:	603b      	str	r3, [r7, #0]
 8015450:	4603      	mov	r3, r0
 8015452:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8015454:	7bfb      	ldrb	r3, [r7, #15]
 8015456:	2b05      	cmp	r3, #5
 8015458:	d002      	beq.n	8015460 <RegionTxConfig+0x1c>
 801545a:	2b08      	cmp	r3, #8
 801545c:	d007      	beq.n	801546e <RegionTxConfig+0x2a>
 801545e:	e00d      	b.n	801547c <RegionTxConfig+0x38>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8015460:	683a      	ldr	r2, [r7, #0]
 8015462:	6879      	ldr	r1, [r7, #4]
 8015464:	68b8      	ldr	r0, [r7, #8]
 8015466:	f001 fe41 	bl	80170ec <RegionEU868TxConfig>
 801546a:	4603      	mov	r3, r0
 801546c:	e007      	b.n	801547e <RegionTxConfig+0x3a>
        KR920_TX_CONFIG( );
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
 801546e:	683a      	ldr	r2, [r7, #0]
 8015470:	6879      	ldr	r1, [r7, #4]
 8015472:	68b8      	ldr	r0, [r7, #8]
 8015474:	f003 f846 	bl	8018504 <RegionUS915TxConfig>
 8015478:	4603      	mov	r3, r0
 801547a:	e000      	b.n	801547e <RegionTxConfig+0x3a>
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 801547c:	2300      	movs	r3, #0
        }
    }
}
 801547e:	4618      	mov	r0, r3
 8015480:	3710      	adds	r7, #16
 8015482:	46bd      	mov	sp, r7
 8015484:	bd80      	pop	{r7, pc}

08015486 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8015486:	b580      	push	{r7, lr}
 8015488:	b086      	sub	sp, #24
 801548a:	af02      	add	r7, sp, #8
 801548c:	60b9      	str	r1, [r7, #8]
 801548e:	607a      	str	r2, [r7, #4]
 8015490:	603b      	str	r3, [r7, #0]
 8015492:	4603      	mov	r3, r0
 8015494:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8015496:	7bfb      	ldrb	r3, [r7, #15]
 8015498:	2b05      	cmp	r3, #5
 801549a:	d002      	beq.n	80154a2 <RegionLinkAdrReq+0x1c>
 801549c:	2b08      	cmp	r3, #8
 801549e:	d00a      	beq.n	80154b6 <RegionLinkAdrReq+0x30>
 80154a0:	e013      	b.n	80154ca <RegionLinkAdrReq+0x44>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 80154a2:	69fb      	ldr	r3, [r7, #28]
 80154a4:	9300      	str	r3, [sp, #0]
 80154a6:	69bb      	ldr	r3, [r7, #24]
 80154a8:	683a      	ldr	r2, [r7, #0]
 80154aa:	6879      	ldr	r1, [r7, #4]
 80154ac:	68b8      	ldr	r0, [r7, #8]
 80154ae:	f001 feed 	bl	801728c <RegionEU868LinkAdrReq>
 80154b2:	4603      	mov	r3, r0
 80154b4:	e00a      	b.n	80154cc <RegionLinkAdrReq+0x46>
        KR920_LINK_ADR_REQ( );
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
 80154b6:	69fb      	ldr	r3, [r7, #28]
 80154b8:	9300      	str	r3, [sp, #0]
 80154ba:	69bb      	ldr	r3, [r7, #24]
 80154bc:	683a      	ldr	r2, [r7, #0]
 80154be:	6879      	ldr	r1, [r7, #4]
 80154c0:	68b8      	ldr	r0, [r7, #8]
 80154c2:	f003 f8c9 	bl	8018658 <RegionUS915LinkAdrReq>
 80154c6:	4603      	mov	r3, r0
 80154c8:	e000      	b.n	80154cc <RegionLinkAdrReq+0x46>
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 80154ca:	2300      	movs	r3, #0
        }
    }
}
 80154cc:	4618      	mov	r0, r3
 80154ce:	3710      	adds	r7, #16
 80154d0:	46bd      	mov	sp, r7
 80154d2:	bd80      	pop	{r7, pc}

080154d4 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 80154d4:	b580      	push	{r7, lr}
 80154d6:	b082      	sub	sp, #8
 80154d8:	af00      	add	r7, sp, #0
 80154da:	4603      	mov	r3, r0
 80154dc:	6039      	str	r1, [r7, #0]
 80154de:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80154e0:	79fb      	ldrb	r3, [r7, #7]
 80154e2:	2b05      	cmp	r3, #5
 80154e4:	d002      	beq.n	80154ec <RegionRxParamSetupReq+0x18>
 80154e6:	2b08      	cmp	r3, #8
 80154e8:	d005      	beq.n	80154f6 <RegionRxParamSetupReq+0x22>
 80154ea:	e009      	b.n	8015500 <RegionRxParamSetupReq+0x2c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 80154ec:	6838      	ldr	r0, [r7, #0]
 80154ee:	f001 ffef 	bl	80174d0 <RegionEU868RxParamSetupReq>
 80154f2:	4603      	mov	r3, r0
 80154f4:	e005      	b.n	8015502 <RegionRxParamSetupReq+0x2e>
        KR920_RX_PARAM_SETUP_REQ( );
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
 80154f6:	6838      	ldr	r0, [r7, #0]
 80154f8:	f003 fac8 	bl	8018a8c <RegionUS915RxParamSetupReq>
 80154fc:	4603      	mov	r3, r0
 80154fe:	e000      	b.n	8015502 <RegionRxParamSetupReq+0x2e>
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8015500:	2300      	movs	r3, #0
        }
    }
}
 8015502:	4618      	mov	r0, r3
 8015504:	3708      	adds	r7, #8
 8015506:	46bd      	mov	sp, r7
 8015508:	bd80      	pop	{r7, pc}

0801550a <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 801550a:	b580      	push	{r7, lr}
 801550c:	b082      	sub	sp, #8
 801550e:	af00      	add	r7, sp, #0
 8015510:	4603      	mov	r3, r0
 8015512:	6039      	str	r1, [r7, #0]
 8015514:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015516:	79fb      	ldrb	r3, [r7, #7]
 8015518:	2b05      	cmp	r3, #5
 801551a:	d002      	beq.n	8015522 <RegionNewChannelReq+0x18>
 801551c:	2b08      	cmp	r3, #8
 801551e:	d005      	beq.n	801552c <RegionNewChannelReq+0x22>
 8015520:	e009      	b.n	8015536 <RegionNewChannelReq+0x2c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 8015522:	6838      	ldr	r0, [r7, #0]
 8015524:	f002 f812 	bl	801754c <RegionEU868NewChannelReq>
 8015528:	4603      	mov	r3, r0
 801552a:	e005      	b.n	8015538 <RegionNewChannelReq+0x2e>
        KR920_NEW_CHANNEL_REQ( );
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
 801552c:	6838      	ldr	r0, [r7, #0]
 801552e:	f003 faf9 	bl	8018b24 <RegionUS915NewChannelReq>
 8015532:	4603      	mov	r3, r0
 8015534:	e000      	b.n	8015538 <RegionNewChannelReq+0x2e>
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8015536:	2300      	movs	r3, #0
        }
    }
}
 8015538:	4618      	mov	r0, r3
 801553a:	3708      	adds	r7, #8
 801553c:	46bd      	mov	sp, r7
 801553e:	bd80      	pop	{r7, pc}

08015540 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8015540:	b580      	push	{r7, lr}
 8015542:	b082      	sub	sp, #8
 8015544:	af00      	add	r7, sp, #0
 8015546:	4603      	mov	r3, r0
 8015548:	6039      	str	r1, [r7, #0]
 801554a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801554c:	79fb      	ldrb	r3, [r7, #7]
 801554e:	2b05      	cmp	r3, #5
 8015550:	d002      	beq.n	8015558 <RegionTxParamSetupReq+0x18>
 8015552:	2b08      	cmp	r3, #8
 8015554:	d005      	beq.n	8015562 <RegionTxParamSetupReq+0x22>
 8015556:	e009      	b.n	801556c <RegionTxParamSetupReq+0x2c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 8015558:	6838      	ldr	r0, [r7, #0]
 801555a:	f002 f855 	bl	8017608 <RegionEU868TxParamSetupReq>
 801555e:	4603      	mov	r3, r0
 8015560:	e005      	b.n	801556e <RegionTxParamSetupReq+0x2e>
        KR920_TX_PARAM_SETUP_REQ( );
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
 8015562:	6838      	ldr	r0, [r7, #0]
 8015564:	f003 fae9 	bl	8018b3a <RegionUS915TxParamSetupReq>
 8015568:	4603      	mov	r3, r0
 801556a:	e000      	b.n	801556e <RegionTxParamSetupReq+0x2e>
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 801556c:	2300      	movs	r3, #0
        }
    }
}
 801556e:	4618      	mov	r0, r3
 8015570:	3708      	adds	r7, #8
 8015572:	46bd      	mov	sp, r7
 8015574:	bd80      	pop	{r7, pc}

08015576 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8015576:	b580      	push	{r7, lr}
 8015578:	b082      	sub	sp, #8
 801557a:	af00      	add	r7, sp, #0
 801557c:	4603      	mov	r3, r0
 801557e:	6039      	str	r1, [r7, #0]
 8015580:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015582:	79fb      	ldrb	r3, [r7, #7]
 8015584:	2b05      	cmp	r3, #5
 8015586:	d002      	beq.n	801558e <RegionDlChannelReq+0x18>
 8015588:	2b08      	cmp	r3, #8
 801558a:	d005      	beq.n	8015598 <RegionDlChannelReq+0x22>
 801558c:	e009      	b.n	80155a2 <RegionDlChannelReq+0x2c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 801558e:	6838      	ldr	r0, [r7, #0]
 8015590:	f002 f846 	bl	8017620 <RegionEU868DlChannelReq>
 8015594:	4603      	mov	r3, r0
 8015596:	e005      	b.n	80155a4 <RegionDlChannelReq+0x2e>
        KR920_DL_CHANNEL_REQ( );
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
 8015598:	6838      	ldr	r0, [r7, #0]
 801559a:	f003 fad9 	bl	8018b50 <RegionUS915DlChannelReq>
 801559e:	4603      	mov	r3, r0
 80155a0:	e000      	b.n	80155a4 <RegionDlChannelReq+0x2e>
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 80155a2:	2300      	movs	r3, #0
        }
    }
}
 80155a4:	4618      	mov	r0, r3
 80155a6:	3708      	adds	r7, #8
 80155a8:	46bd      	mov	sp, r7
 80155aa:	bd80      	pop	{r7, pc}

080155ac <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 80155ac:	b580      	push	{r7, lr}
 80155ae:	b082      	sub	sp, #8
 80155b0:	af00      	add	r7, sp, #0
 80155b2:	4603      	mov	r3, r0
 80155b4:	71fb      	strb	r3, [r7, #7]
 80155b6:	460b      	mov	r3, r1
 80155b8:	71bb      	strb	r3, [r7, #6]
 80155ba:	4613      	mov	r3, r2
 80155bc:	717b      	strb	r3, [r7, #5]
    switch( region )
 80155be:	79fb      	ldrb	r3, [r7, #7]
 80155c0:	2b05      	cmp	r3, #5
 80155c2:	d002      	beq.n	80155ca <RegionAlternateDr+0x1e>
 80155c4:	2b08      	cmp	r3, #8
 80155c6:	d009      	beq.n	80155dc <RegionAlternateDr+0x30>
 80155c8:	e011      	b.n	80155ee <RegionAlternateDr+0x42>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 80155ca:	797a      	ldrb	r2, [r7, #5]
 80155cc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80155d0:	4611      	mov	r1, r2
 80155d2:	4618      	mov	r0, r3
 80155d4:	f002 f86e 	bl	80176b4 <RegionEU868AlternateDr>
 80155d8:	4603      	mov	r3, r0
 80155da:	e009      	b.n	80155f0 <RegionAlternateDr+0x44>
        KR920_ALTERNATE_DR( );
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
 80155dc:	797a      	ldrb	r2, [r7, #5]
 80155de:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80155e2:	4611      	mov	r1, r2
 80155e4:	4618      	mov	r0, r3
 80155e6:	f003 fabf 	bl	8018b68 <RegionUS915AlternateDr>
 80155ea:	4603      	mov	r3, r0
 80155ec:	e000      	b.n	80155f0 <RegionAlternateDr+0x44>
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 80155ee:	2300      	movs	r3, #0
        }
    }
}
 80155f0:	4618      	mov	r0, r3
 80155f2:	3708      	adds	r7, #8
 80155f4:	46bd      	mov	sp, r7
 80155f6:	bd80      	pop	{r7, pc}

080155f8 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80155f8:	b580      	push	{r7, lr}
 80155fa:	b084      	sub	sp, #16
 80155fc:	af00      	add	r7, sp, #0
 80155fe:	60b9      	str	r1, [r7, #8]
 8015600:	607a      	str	r2, [r7, #4]
 8015602:	603b      	str	r3, [r7, #0]
 8015604:	4603      	mov	r3, r0
 8015606:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8015608:	7bfb      	ldrb	r3, [r7, #15]
 801560a:	2b05      	cmp	r3, #5
 801560c:	d002      	beq.n	8015614 <RegionNextChannel+0x1c>
 801560e:	2b08      	cmp	r3, #8
 8015610:	d008      	beq.n	8015624 <RegionNextChannel+0x2c>
 8015612:	e00f      	b.n	8015634 <RegionNextChannel+0x3c>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8015614:	69bb      	ldr	r3, [r7, #24]
 8015616:	683a      	ldr	r2, [r7, #0]
 8015618:	6879      	ldr	r1, [r7, #4]
 801561a:	68b8      	ldr	r0, [r7, #8]
 801561c:	f002 f85a 	bl	80176d4 <RegionEU868NextChannel>
 8015620:	4603      	mov	r3, r0
 8015622:	e008      	b.n	8015636 <RegionNextChannel+0x3e>
        KR920_NEXT_CHANNEL( );
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
 8015624:	69bb      	ldr	r3, [r7, #24]
 8015626:	683a      	ldr	r2, [r7, #0]
 8015628:	6879      	ldr	r1, [r7, #4]
 801562a:	68b8      	ldr	r0, [r7, #8]
 801562c:	f003 fad2 	bl	8018bd4 <RegionUS915NextChannel>
 8015630:	4603      	mov	r3, r0
 8015632:	e000      	b.n	8015636 <RegionNextChannel+0x3e>
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8015634:	2309      	movs	r3, #9
        }
    }
}
 8015636:	4618      	mov	r0, r3
 8015638:	3710      	adds	r7, #16
 801563a:	46bd      	mov	sp, r7
 801563c:	bd80      	pop	{r7, pc}

0801563e <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 801563e:	b590      	push	{r4, r7, lr}
 8015640:	b083      	sub	sp, #12
 8015642:	af00      	add	r7, sp, #0
 8015644:	4604      	mov	r4, r0
 8015646:	4608      	mov	r0, r1
 8015648:	4611      	mov	r1, r2
 801564a:	461a      	mov	r2, r3
 801564c:	4623      	mov	r3, r4
 801564e:	71fb      	strb	r3, [r7, #7]
 8015650:	4603      	mov	r3, r0
 8015652:	71bb      	strb	r3, [r7, #6]
 8015654:	460b      	mov	r3, r1
 8015656:	717b      	strb	r3, [r7, #5]
 8015658:	4613      	mov	r3, r2
 801565a:	713b      	strb	r3, [r7, #4]
    switch( region )
 801565c:	79fb      	ldrb	r3, [r7, #7]
 801565e:	2b05      	cmp	r3, #5
 8015660:	d002      	beq.n	8015668 <RegionApplyDrOffset+0x2a>
 8015662:	2b08      	cmp	r3, #8
 8015664:	d00a      	beq.n	801567c <RegionApplyDrOffset+0x3e>
 8015666:	e013      	b.n	8015690 <RegionApplyDrOffset+0x52>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 8015668:	f997 2004 	ldrsb.w	r2, [r7, #4]
 801566c:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8015670:	79bb      	ldrb	r3, [r7, #6]
 8015672:	4618      	mov	r0, r3
 8015674:	f002 f9a8 	bl	80179c8 <RegionEU868ApplyDrOffset>
 8015678:	4603      	mov	r3, r0
 801567a:	e00a      	b.n	8015692 <RegionApplyDrOffset+0x54>
        KR920_APPLY_DR_OFFSET( );
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
 801567c:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8015680:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8015684:	79bb      	ldrb	r3, [r7, #6]
 8015686:	4618      	mov	r0, r3
 8015688:	f003 fb92 	bl	8018db0 <RegionUS915ApplyDrOffset>
 801568c:	4603      	mov	r3, r0
 801568e:	e000      	b.n	8015692 <RegionApplyDrOffset+0x54>
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8015690:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8015692:	4618      	mov	r0, r3
 8015694:	370c      	adds	r7, #12
 8015696:	46bd      	mov	sp, r7
 8015698:	bd90      	pop	{r4, r7, pc}
	...

0801569c <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 801569c:	b480      	push	{r7}
 801569e:	b083      	sub	sp, #12
 80156a0:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 80156a2:	4b04      	ldr	r3, [pc, #16]	; (80156b4 <RegionGetVersion+0x18>)
 80156a4:	607b      	str	r3, [r7, #4]

    return version;
 80156a6:	687b      	ldr	r3, [r7, #4]
}
 80156a8:	4618      	mov	r0, r3
 80156aa:	370c      	adds	r7, #12
 80156ac:	46bd      	mov	sp, r7
 80156ae:	bc80      	pop	{r7}
 80156b0:	4770      	bx	lr
 80156b2:	bf00      	nop
 80156b4:	02010001 	.word	0x02010001

080156b8 <FindAvailable125kHzChannels>:
 *
 * \retval Status
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
 80156b8:	b480      	push	{r7}
 80156ba:	b087      	sub	sp, #28
 80156bc:	af00      	add	r7, sp, #0
 80156be:	4603      	mov	r3, r0
 80156c0:	60b9      	str	r1, [r7, #8]
 80156c2:	607a      	str	r2, [r7, #4]
 80156c4:	81fb      	strh	r3, [r7, #14]
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 80156c6:	68bb      	ldr	r3, [r7, #8]
 80156c8:	2b00      	cmp	r3, #0
 80156ca:	d002      	beq.n	80156d2 <FindAvailable125kHzChannels+0x1a>
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	2b00      	cmp	r3, #0
 80156d0:	d101      	bne.n	80156d6 <FindAvailable125kHzChannels+0x1e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80156d2:	2303      	movs	r3, #3
 80156d4:	e021      	b.n	801571a <FindAvailable125kHzChannels+0x62>
    }

    // Initialize counter
    *availableChannels = 0;
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	2200      	movs	r2, #0
 80156da:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 80156dc:	2300      	movs	r3, #0
 80156de:	75fb      	strb	r3, [r7, #23]
 80156e0:	e017      	b.n	8015712 <FindAvailable125kHzChannels+0x5a>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 80156e2:	89fa      	ldrh	r2, [r7, #14]
 80156e4:	7dfb      	ldrb	r3, [r7, #23]
 80156e6:	fa42 f303 	asr.w	r3, r2, r3
 80156ea:	f003 0301 	and.w	r3, r3, #1
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	d00c      	beq.n	801570c <FindAvailable125kHzChannels+0x54>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	781b      	ldrb	r3, [r3, #0]
 80156f6:	461a      	mov	r2, r3
 80156f8:	68bb      	ldr	r3, [r7, #8]
 80156fa:	4413      	add	r3, r2
 80156fc:	7dfa      	ldrb	r2, [r7, #23]
 80156fe:	701a      	strb	r2, [r3, #0]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	781b      	ldrb	r3, [r3, #0]
 8015704:	3301      	adds	r3, #1
 8015706:	b2da      	uxtb	r2, r3
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 801570c:	7dfb      	ldrb	r3, [r7, #23]
 801570e:	3301      	adds	r3, #1
 8015710:	75fb      	strb	r3, [r7, #23]
 8015712:	7dfb      	ldrb	r3, [r7, #23]
 8015714:	2b07      	cmp	r3, #7
 8015716:	d9e4      	bls.n	80156e2 <FindAvailable125kHzChannels+0x2a>
        }
    }

    return LORAMAC_STATUS_OK;
 8015718:	2300      	movs	r3, #0
}
 801571a:	4618      	mov	r0, r3
 801571c:	371c      	adds	r7, #28
 801571e:	46bd      	mov	sp, r7
 8015720:	bc80      	pop	{r7}
 8015722:	4770      	bx	lr

08015724 <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 8015724:	b590      	push	{r4, r7, lr}
 8015726:	b089      	sub	sp, #36	; 0x24
 8015728:	af00      	add	r7, sp, #0
 801572a:	60f8      	str	r0, [r7, #12]
 801572c:	60b9      	str	r1, [r7, #8]
 801572e:	607a      	str	r2, [r7, #4]
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 8015730:	2300      	movs	r3, #0
 8015732:	617b      	str	r3, [r7, #20]
 8015734:	2300      	movs	r3, #0
 8015736:	61bb      	str	r3, [r7, #24]
    uint8_t availableChannels = 0;
 8015738:	2300      	movs	r3, #0
 801573a:	74fb      	strb	r3, [r7, #19]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 801573c:	68fb      	ldr	r3, [r7, #12]
 801573e:	2b00      	cmp	r3, #0
 8015740:	d005      	beq.n	801574e <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 8015742:	68bb      	ldr	r3, [r7, #8]
 8015744:	2b00      	cmp	r3, #0
 8015746:	d002      	beq.n	801574e <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	2b00      	cmp	r3, #0
 801574c:	d101      	bne.n	8015752 <RegionBaseUSComputeNext125kHzJoinChannel+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801574e:	2303      	movs	r3, #3
 8015750:	e055      	b.n	80157fe <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 8015752:	68bb      	ldr	r3, [r7, #8]
 8015754:	781b      	ldrb	r3, [r3, #0]
 8015756:	777b      	strb	r3, [r7, #29]

    do
    {
        // Current ChannelMaskRemaining, two groups per channel mask. For example Group 0 and 1 (8 bit) are ChannelMaskRemaining 0 (16 bit), etc.
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 8015758:	7f7b      	ldrb	r3, [r7, #29]
 801575a:	085b      	lsrs	r3, r3, #1
 801575c:	773b      	strb	r3, [r7, #28]

        // For even numbers we need the 8 LSBs and for uneven the 8 MSBs
        if( ( startIndex % 2 ) == 0 )
 801575e:	7f7b      	ldrb	r3, [r7, #29]
 8015760:	f003 0301 	and.w	r3, r3, #1
 8015764:	b2db      	uxtb	r3, r3
 8015766:	2b00      	cmp	r3, #0
 8015768:	d107      	bne.n	801577a <RegionBaseUSComputeNext125kHzJoinChannel+0x56>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 801576a:	7f3b      	ldrb	r3, [r7, #28]
 801576c:	005b      	lsls	r3, r3, #1
 801576e:	68fa      	ldr	r2, [r7, #12]
 8015770:	4413      	add	r3, r2
 8015772:	881b      	ldrh	r3, [r3, #0]
 8015774:	b2db      	uxtb	r3, r3
 8015776:	83fb      	strh	r3, [r7, #30]
 8015778:	e006      	b.n	8015788 <RegionBaseUSComputeNext125kHzJoinChannel+0x64>
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 801577a:	7f3b      	ldrb	r3, [r7, #28]
 801577c:	005b      	lsls	r3, r3, #1
 801577e:	68fa      	ldr	r2, [r7, #12]
 8015780:	4413      	add	r3, r2
 8015782:	881b      	ldrh	r3, [r3, #0]
 8015784:	0a1b      	lsrs	r3, r3, #8
 8015786:	83fb      	strh	r3, [r7, #30]
        }

        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 8015788:	f107 0213 	add.w	r2, r7, #19
 801578c:	f107 0114 	add.w	r1, r7, #20
 8015790:	8bfb      	ldrh	r3, [r7, #30]
 8015792:	4618      	mov	r0, r3
 8015794:	f7ff ff90 	bl	80156b8 <FindAvailable125kHzChannels>
 8015798:	4603      	mov	r3, r0
 801579a:	2b03      	cmp	r3, #3
 801579c:	d101      	bne.n	80157a2 <RegionBaseUSComputeNext125kHzJoinChannel+0x7e>
        {
            return LORAMAC_STATUS_PARAMETER_INVALID;
 801579e:	2303      	movs	r3, #3
 80157a0:	e02d      	b.n	80157fe <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
        }

        if ( availableChannels > 0 )
 80157a2:	7cfb      	ldrb	r3, [r7, #19]
 80157a4:	2b00      	cmp	r3, #0
 80157a6:	d011      	beq.n	80157cc <RegionBaseUSComputeNext125kHzJoinChannel+0xa8>
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 80157a8:	7f7b      	ldrb	r3, [r7, #29]
 80157aa:	00db      	lsls	r3, r3, #3
 80157ac:	b2dc      	uxtb	r4, r3
 80157ae:	7cfb      	ldrb	r3, [r7, #19]
 80157b0:	3b01      	subs	r3, #1
 80157b2:	4619      	mov	r1, r3
 80157b4:	2000      	movs	r0, #0
 80157b6:	f003 fb4d 	bl	8018e54 <randr>
 80157ba:	4603      	mov	r3, r0
 80157bc:	3320      	adds	r3, #32
 80157be:	443b      	add	r3, r7
 80157c0:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80157c4:	4423      	add	r3, r4
 80157c6:	b2da      	uxtb	r2, r3
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	701a      	strb	r2, [r3, #0]
        }

        // Increment start index
        startIndex++;
 80157cc:	7f7b      	ldrb	r3, [r7, #29]
 80157ce:	3301      	adds	r3, #1
 80157d0:	777b      	strb	r3, [r7, #29]
        if ( startIndex > 7 )
 80157d2:	7f7b      	ldrb	r3, [r7, #29]
 80157d4:	2b07      	cmp	r3, #7
 80157d6:	d901      	bls.n	80157dc <RegionBaseUSComputeNext125kHzJoinChannel+0xb8>
        {
            startIndex = 0;
 80157d8:	2300      	movs	r3, #0
 80157da:	777b      	strb	r3, [r7, #29]
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 80157dc:	7cfb      	ldrb	r3, [r7, #19]
 80157de:	2b00      	cmp	r3, #0
 80157e0:	d104      	bne.n	80157ec <RegionBaseUSComputeNext125kHzJoinChannel+0xc8>
 80157e2:	68bb      	ldr	r3, [r7, #8]
 80157e4:	781b      	ldrb	r3, [r3, #0]
 80157e6:	7f7a      	ldrb	r2, [r7, #29]
 80157e8:	429a      	cmp	r2, r3
 80157ea:	d1b5      	bne.n	8015758 <RegionBaseUSComputeNext125kHzJoinChannel+0x34>

    if ( availableChannels > 0 )
 80157ec:	7cfb      	ldrb	r3, [r7, #19]
 80157ee:	2b00      	cmp	r3, #0
 80157f0:	d004      	beq.n	80157fc <RegionBaseUSComputeNext125kHzJoinChannel+0xd8>
    {
        *groupsCurrentIndex = startIndex;
 80157f2:	68bb      	ldr	r3, [r7, #8]
 80157f4:	7f7a      	ldrb	r2, [r7, #29]
 80157f6:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 80157f8:	2300      	movs	r3, #0
 80157fa:	e000      	b.n	80157fe <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 80157fc:	2303      	movs	r3, #3
}
 80157fe:	4618      	mov	r0, r3
 8015800:	3724      	adds	r7, #36	; 0x24
 8015802:	46bd      	mov	sp, r7
 8015804:	bd90      	pop	{r4, r7, pc}

08015806 <RegionBaseUSCalcDownlinkFrequency>:
    return true;
}

uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
 8015806:	b480      	push	{r7}
 8015808:	b085      	sub	sp, #20
 801580a:	af00      	add	r7, sp, #0
 801580c:	4603      	mov	r3, r0
 801580e:	60b9      	str	r1, [r7, #8]
 8015810:	607a      	str	r2, [r7, #4]
 8015812:	73fb      	strb	r3, [r7, #15]
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
 8015814:	7bfb      	ldrb	r3, [r7, #15]
 8015816:	687a      	ldr	r2, [r7, #4]
 8015818:	fb03 f202 	mul.w	r2, r3, r2
 801581c:	68bb      	ldr	r3, [r7, #8]
 801581e:	4413      	add	r3, r2
}
 8015820:	4618      	mov	r0, r3
 8015822:	3714      	adds	r7, #20
 8015824:	46bd      	mov	sp, r7
 8015826:	bc80      	pop	{r7}
 8015828:	4770      	bx	lr

0801582a <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 801582a:	b480      	push	{r7}
 801582c:	b087      	sub	sp, #28
 801582e:	af00      	add	r7, sp, #0
 8015830:	60f8      	str	r0, [r7, #12]
 8015832:	4608      	mov	r0, r1
 8015834:	4639      	mov	r1, r7
 8015836:	e881 000c 	stmia.w	r1, {r2, r3}
 801583a:	4603      	mov	r3, r0
 801583c:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 801583e:	68fb      	ldr	r3, [r7, #12]
 8015840:	881b      	ldrh	r3, [r3, #0]
 8015842:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8015844:	7afb      	ldrb	r3, [r7, #11]
 8015846:	f083 0301 	eor.w	r3, r3, #1
 801584a:	b2db      	uxtb	r3, r3
 801584c:	2b00      	cmp	r3, #0
 801584e:	d01b      	beq.n	8015888 <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8015850:	f242 7310 	movw	r3, #10000	; 0x2710
 8015854:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8015856:	683b      	ldr	r3, [r7, #0]
 8015858:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 801585c:	d202      	bcs.n	8015864 <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 801585e:	2364      	movs	r3, #100	; 0x64
 8015860:	82bb      	strh	r3, [r7, #20]
 8015862:	e00b      	b.n	801587c <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8015864:	683b      	ldr	r3, [r7, #0]
 8015866:	f649 22af 	movw	r2, #39599	; 0x9aaf
 801586a:	4293      	cmp	r3, r2
 801586c:	d803      	bhi.n	8015876 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 801586e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015872:	82bb      	strh	r3, [r7, #20]
 8015874:	e002      	b.n	801587c <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8015876:	f242 7310 	movw	r3, #10000	; 0x2710
 801587a:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 801587c:	8aba      	ldrh	r2, [r7, #20]
 801587e:	8afb      	ldrh	r3, [r7, #22]
 8015880:	4293      	cmp	r3, r2
 8015882:	bf38      	it	cc
 8015884:	4613      	movcc	r3, r2
 8015886:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8015888:	8afb      	ldrh	r3, [r7, #22]
 801588a:	2b00      	cmp	r3, #0
 801588c:	d101      	bne.n	8015892 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 801588e:	2301      	movs	r3, #1
 8015890:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8015892:	8afb      	ldrh	r3, [r7, #22]
}
 8015894:	4618      	mov	r0, r3
 8015896:	371c      	adds	r7, #28
 8015898:	46bd      	mov	sp, r7
 801589a:	bc80      	pop	{r7}
 801589c:	4770      	bx	lr
	...

080158a0 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 80158a0:	b580      	push	{r7, lr}
 80158a2:	b08e      	sub	sp, #56	; 0x38
 80158a4:	af02      	add	r7, sp, #8
 80158a6:	60f8      	str	r0, [r7, #12]
 80158a8:	4608      	mov	r0, r1
 80158aa:	4639      	mov	r1, r7
 80158ac:	e881 000c 	stmia.w	r1, {r2, r3}
 80158b0:	4603      	mov	r3, r0
 80158b2:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 80158b4:	68fb      	ldr	r3, [r7, #12]
 80158b6:	881b      	ldrh	r3, [r3, #0]
 80158b8:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80158ba:	4b4b      	ldr	r3, [pc, #300]	; (80159e8 <SetMaxTimeCredits+0x148>)
 80158bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 80158be:	463b      	mov	r3, r7
 80158c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80158c4:	f006 ff68 	bl	801c798 <SysTimeToMs>
 80158c8:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 80158ca:	f107 0314 	add.w	r3, r7, #20
 80158ce:	2200      	movs	r2, #0
 80158d0:	601a      	str	r2, [r3, #0]
 80158d2:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80158d4:	7af9      	ldrb	r1, [r7, #11]
 80158d6:	463b      	mov	r3, r7
 80158d8:	cb0c      	ldmia	r3, {r2, r3}
 80158da:	68f8      	ldr	r0, [r7, #12]
 80158dc:	f7ff ffa5 	bl	801582a <GetDutyCycle>
 80158e0:	4603      	mov	r3, r0
 80158e2:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 80158e4:	7afb      	ldrb	r3, [r7, #11]
 80158e6:	f083 0301 	eor.w	r3, r3, #1
 80158ea:	b2db      	uxtb	r3, r3
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	d062      	beq.n	80159b6 <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 80158f0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80158f2:	2b64      	cmp	r3, #100	; 0x64
 80158f4:	d105      	bne.n	8015902 <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80158f6:	4b3c      	ldr	r3, [pc, #240]	; (80159e8 <SetMaxTimeCredits+0x148>)
 80158f8:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 80158fa:	68fb      	ldr	r3, [r7, #12]
 80158fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80158fe:	609a      	str	r2, [r3, #8]
 8015900:	e00b      	b.n	801591a <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8015902:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015904:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015908:	d105      	bne.n	8015916 <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 801590a:	4b38      	ldr	r3, [pc, #224]	; (80159ec <SetMaxTimeCredits+0x14c>)
 801590c:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 801590e:	68fb      	ldr	r3, [r7, #12]
 8015910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015912:	609a      	str	r2, [r3, #8]
 8015914:	e001      	b.n	801591a <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 8015916:	4b36      	ldr	r3, [pc, #216]	; (80159f0 <SetMaxTimeCredits+0x150>)
 8015918:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 801591a:	68fb      	ldr	r3, [r7, #12]
 801591c:	689a      	ldr	r2, [r3, #8]
 801591e:	f107 031c 	add.w	r3, r7, #28
 8015922:	4611      	mov	r1, r2
 8015924:	4618      	mov	r0, r3
 8015926:	f006 ff5f 	bl	801c7e8 <SysTimeFromMs>
 801592a:	f107 0014 	add.w	r0, r7, #20
 801592e:	6a3b      	ldr	r3, [r7, #32]
 8015930:	9300      	str	r3, [sp, #0]
 8015932:	69fb      	ldr	r3, [r7, #28]
 8015934:	463a      	mov	r2, r7
 8015936:	ca06      	ldmia	r2, {r1, r2}
 8015938:	f006 fe6f 	bl	801c61a <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 801593c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8015940:	f083 0301 	eor.w	r3, r3, #1
 8015944:	b2db      	uxtb	r3, r3
 8015946:	2b00      	cmp	r3, #0
 8015948:	d006      	beq.n	8015958 <SetMaxTimeCredits+0xb8>
 801594a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801594e:	f083 0301 	eor.w	r3, r3, #1
 8015952:	b2db      	uxtb	r3, r3
 8015954:	2b00      	cmp	r3, #0
 8015956:	d108      	bne.n	801596a <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8015958:	68fb      	ldr	r3, [r7, #12]
 801595a:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 801595c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801595e:	429a      	cmp	r2, r3
 8015960:	d103      	bne.n	801596a <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 8015962:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8015964:	4a23      	ldr	r2, [pc, #140]	; (80159f4 <SetMaxTimeCredits+0x154>)
 8015966:	4293      	cmp	r3, r2
 8015968:	d92f      	bls.n	80159ca <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 801596a:	68fb      	ldr	r3, [r7, #12]
 801596c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801596e:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8015970:	683b      	ldr	r3, [r7, #0]
 8015972:	4a21      	ldr	r2, [pc, #132]	; (80159f8 <SetMaxTimeCredits+0x158>)
 8015974:	4293      	cmp	r3, r2
 8015976:	d928      	bls.n	80159ca <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8015978:	683b      	ldr	r3, [r7, #0]
 801597a:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 801597e:	3b30      	subs	r3, #48	; 0x30
 8015980:	4a1e      	ldr	r2, [pc, #120]	; (80159fc <SetMaxTimeCredits+0x15c>)
 8015982:	fba2 2303 	umull	r2, r3, r2, r3
 8015986:	0c1b      	lsrs	r3, r3, #16
 8015988:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 801598a:	697b      	ldr	r3, [r7, #20]
 801598c:	4a1c      	ldr	r2, [pc, #112]	; (8015a00 <SetMaxTimeCredits+0x160>)
 801598e:	fb02 f303 	mul.w	r3, r2, r3
 8015992:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8015994:	697b      	ldr	r3, [r7, #20]
 8015996:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 801599a:	3330      	adds	r3, #48	; 0x30
 801599c:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 801599e:	2300      	movs	r3, #0
 80159a0:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 80159a2:	f107 0314 	add.w	r3, r7, #20
 80159a6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80159aa:	f006 fef5 	bl	801c798 <SysTimeToMs>
 80159ae:	4602      	mov	r2, r0
 80159b0:	68fb      	ldr	r3, [r7, #12]
 80159b2:	609a      	str	r2, [r3, #8]
 80159b4:	e009      	b.n	80159ca <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 80159b6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80159ba:	f083 0301 	eor.w	r3, r3, #1
 80159be:	b2db      	uxtb	r3, r3
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	d002      	beq.n	80159ca <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 80159c4:	68fb      	ldr	r3, [r7, #12]
 80159c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80159c8:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 80159ca:	68fb      	ldr	r3, [r7, #12]
 80159cc:	685b      	ldr	r3, [r3, #4]
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	d102      	bne.n	80159d8 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 80159d2:	68fb      	ldr	r3, [r7, #12]
 80159d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80159d6:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 80159d8:	68fb      	ldr	r3, [r7, #12]
 80159da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80159dc:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 80159de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 80159e0:	4618      	mov	r0, r3
 80159e2:	3730      	adds	r7, #48	; 0x30
 80159e4:	46bd      	mov	sp, r7
 80159e6:	bd80      	pop	{r7, pc}
 80159e8:	001b7740 	.word	0x001b7740
 80159ec:	0112a880 	.word	0x0112a880
 80159f0:	02932e00 	.word	0x02932e00
 80159f4:	0001517f 	.word	0x0001517f
 80159f8:	0001ec2f 	.word	0x0001ec2f
 80159fc:	c22e4507 	.word	0xc22e4507
 8015a00:	00015180 	.word	0x00015180

08015a04 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8015a04:	b580      	push	{r7, lr}
 8015a06:	b086      	sub	sp, #24
 8015a08:	af02      	add	r7, sp, #8
 8015a0a:	6078      	str	r0, [r7, #4]
 8015a0c:	4608      	mov	r0, r1
 8015a0e:	4611      	mov	r1, r2
 8015a10:	461a      	mov	r2, r3
 8015a12:	4603      	mov	r3, r0
 8015a14:	70fb      	strb	r3, [r7, #3]
 8015a16:	460b      	mov	r3, r1
 8015a18:	70bb      	strb	r3, [r7, #2]
 8015a1a:	4613      	mov	r3, r2
 8015a1c:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8015a1e:	78f9      	ldrb	r1, [r7, #3]
 8015a20:	787b      	ldrb	r3, [r7, #1]
 8015a22:	9301      	str	r3, [sp, #4]
 8015a24:	78bb      	ldrb	r3, [r7, #2]
 8015a26:	9300      	str	r3, [sp, #0]
 8015a28:	f107 0318 	add.w	r3, r7, #24
 8015a2c:	cb0c      	ldmia	r3, {r2, r3}
 8015a2e:	6878      	ldr	r0, [r7, #4]
 8015a30:	f7ff ff36 	bl	80158a0 <SetMaxTimeCredits>
 8015a34:	4603      	mov	r3, r0
 8015a36:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8015a38:	78fb      	ldrb	r3, [r7, #3]
 8015a3a:	2b00      	cmp	r3, #0
 8015a3c:	d00a      	beq.n	8015a54 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	685b      	ldr	r3, [r3, #4]
 8015a42:	4618      	mov	r0, r3
 8015a44:	f007 fce4 	bl	801d410 <UTIL_TIMER_GetElapsedTime>
 8015a48:	4602      	mov	r2, r0
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	68db      	ldr	r3, [r3, #12]
 8015a4e:	441a      	add	r2, r3
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	68da      	ldr	r2, [r3, #12]
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	691b      	ldr	r3, [r3, #16]
 8015a5c:	429a      	cmp	r2, r3
 8015a5e:	d903      	bls.n	8015a68 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	691a      	ldr	r2, [r3, #16]
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	6a3a      	ldr	r2, [r7, #32]
 8015a6c:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 8015a6e:	89fb      	ldrh	r3, [r7, #14]
}
 8015a70:	4618      	mov	r0, r3
 8015a72:	3710      	adds	r7, #16
 8015a74:	46bd      	mov	sp, r7
 8015a76:	bd80      	pop	{r7, pc}

08015a78 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8015a78:	b480      	push	{r7}
 8015a7a:	b085      	sub	sp, #20
 8015a7c:	af00      	add	r7, sp, #0
 8015a7e:	4603      	mov	r3, r0
 8015a80:	460a      	mov	r2, r1
 8015a82:	80fb      	strh	r3, [r7, #6]
 8015a84:	4613      	mov	r3, r2
 8015a86:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8015a88:	2300      	movs	r3, #0
 8015a8a:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8015a8c:	2300      	movs	r3, #0
 8015a8e:	73bb      	strb	r3, [r7, #14]
 8015a90:	e011      	b.n	8015ab6 <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8015a92:	88fa      	ldrh	r2, [r7, #6]
 8015a94:	7bbb      	ldrb	r3, [r7, #14]
 8015a96:	2101      	movs	r1, #1
 8015a98:	fa01 f303 	lsl.w	r3, r1, r3
 8015a9c:	401a      	ands	r2, r3
 8015a9e:	7bbb      	ldrb	r3, [r7, #14]
 8015aa0:	2101      	movs	r1, #1
 8015aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8015aa6:	429a      	cmp	r2, r3
 8015aa8:	d102      	bne.n	8015ab0 <CountChannels+0x38>
        {
            nbActiveBits++;
 8015aaa:	7bfb      	ldrb	r3, [r7, #15]
 8015aac:	3301      	adds	r3, #1
 8015aae:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8015ab0:	7bbb      	ldrb	r3, [r7, #14]
 8015ab2:	3301      	adds	r3, #1
 8015ab4:	73bb      	strb	r3, [r7, #14]
 8015ab6:	7bba      	ldrb	r2, [r7, #14]
 8015ab8:	797b      	ldrb	r3, [r7, #5]
 8015aba:	429a      	cmp	r2, r3
 8015abc:	d3e9      	bcc.n	8015a92 <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 8015abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8015ac0:	4618      	mov	r0, r3
 8015ac2:	3714      	adds	r7, #20
 8015ac4:	46bd      	mov	sp, r7
 8015ac6:	bc80      	pop	{r7}
 8015ac8:	4770      	bx	lr

08015aca <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8015aca:	b580      	push	{r7, lr}
 8015acc:	b084      	sub	sp, #16
 8015ace:	af00      	add	r7, sp, #0
 8015ad0:	6039      	str	r1, [r7, #0]
 8015ad2:	4611      	mov	r1, r2
 8015ad4:	461a      	mov	r2, r3
 8015ad6:	4603      	mov	r3, r0
 8015ad8:	71fb      	strb	r3, [r7, #7]
 8015ada:	460b      	mov	r3, r1
 8015adc:	71bb      	strb	r3, [r7, #6]
 8015ade:	4613      	mov	r3, r2
 8015ae0:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8015ae2:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8015ae6:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8015aea:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015aee:	4618      	mov	r0, r3
 8015af0:	f000 f85d 	bl	8015bae <RegionCommonValueInRange>
 8015af4:	4603      	mov	r3, r0
 8015af6:	2b00      	cmp	r3, #0
 8015af8:	d101      	bne.n	8015afe <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 8015afa:	2300      	movs	r3, #0
 8015afc:	e053      	b.n	8015ba6 <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8015afe:	2300      	movs	r3, #0
 8015b00:	73fb      	strb	r3, [r7, #15]
 8015b02:	2300      	movs	r3, #0
 8015b04:	73bb      	strb	r3, [r7, #14]
 8015b06:	e049      	b.n	8015b9c <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8015b08:	2300      	movs	r3, #0
 8015b0a:	737b      	strb	r3, [r7, #13]
 8015b0c:	e03d      	b.n	8015b8a <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8015b0e:	7bbb      	ldrb	r3, [r7, #14]
 8015b10:	005b      	lsls	r3, r3, #1
 8015b12:	683a      	ldr	r2, [r7, #0]
 8015b14:	4413      	add	r3, r2
 8015b16:	881b      	ldrh	r3, [r3, #0]
 8015b18:	461a      	mov	r2, r3
 8015b1a:	7b7b      	ldrb	r3, [r7, #13]
 8015b1c:	fa42 f303 	asr.w	r3, r2, r3
 8015b20:	f003 0301 	and.w	r3, r3, #1
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	d02d      	beq.n	8015b84 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8015b28:	7bfa      	ldrb	r2, [r7, #15]
 8015b2a:	7b7b      	ldrb	r3, [r7, #13]
 8015b2c:	4413      	add	r3, r2
 8015b2e:	461a      	mov	r2, r3
 8015b30:	4613      	mov	r3, r2
 8015b32:	005b      	lsls	r3, r3, #1
 8015b34:	4413      	add	r3, r2
 8015b36:	009b      	lsls	r3, r3, #2
 8015b38:	461a      	mov	r2, r3
 8015b3a:	69fb      	ldr	r3, [r7, #28]
 8015b3c:	4413      	add	r3, r2
 8015b3e:	7a1b      	ldrb	r3, [r3, #8]
 8015b40:	f343 0303 	sbfx	r3, r3, #0, #4
 8015b44:	b25b      	sxtb	r3, r3
 8015b46:	f003 030f 	and.w	r3, r3, #15
 8015b4a:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8015b4c:	7bfa      	ldrb	r2, [r7, #15]
 8015b4e:	7b7b      	ldrb	r3, [r7, #13]
 8015b50:	4413      	add	r3, r2
 8015b52:	461a      	mov	r2, r3
 8015b54:	4613      	mov	r3, r2
 8015b56:	005b      	lsls	r3, r3, #1
 8015b58:	4413      	add	r3, r2
 8015b5a:	009b      	lsls	r3, r3, #2
 8015b5c:	461a      	mov	r2, r3
 8015b5e:	69fb      	ldr	r3, [r7, #28]
 8015b60:	4413      	add	r3, r2
 8015b62:	7a1b      	ldrb	r3, [r3, #8]
 8015b64:	f343 1303 	sbfx	r3, r3, #4, #4
 8015b68:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8015b6a:	f003 030f 	and.w	r3, r3, #15
 8015b6e:	b25a      	sxtb	r2, r3
 8015b70:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015b74:	4618      	mov	r0, r3
 8015b76:	f000 f81a 	bl	8015bae <RegionCommonValueInRange>
 8015b7a:	4603      	mov	r3, r0
 8015b7c:	2b01      	cmp	r3, #1
 8015b7e:	d101      	bne.n	8015b84 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8015b80:	2301      	movs	r3, #1
 8015b82:	e010      	b.n	8015ba6 <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8015b84:	7b7b      	ldrb	r3, [r7, #13]
 8015b86:	3301      	adds	r3, #1
 8015b88:	737b      	strb	r3, [r7, #13]
 8015b8a:	7b7b      	ldrb	r3, [r7, #13]
 8015b8c:	2b0f      	cmp	r3, #15
 8015b8e:	d9be      	bls.n	8015b0e <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8015b90:	7bfb      	ldrb	r3, [r7, #15]
 8015b92:	3310      	adds	r3, #16
 8015b94:	73fb      	strb	r3, [r7, #15]
 8015b96:	7bbb      	ldrb	r3, [r7, #14]
 8015b98:	3301      	adds	r3, #1
 8015b9a:	73bb      	strb	r3, [r7, #14]
 8015b9c:	7bfa      	ldrb	r2, [r7, #15]
 8015b9e:	79fb      	ldrb	r3, [r7, #7]
 8015ba0:	429a      	cmp	r2, r3
 8015ba2:	d3b1      	bcc.n	8015b08 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8015ba4:	2300      	movs	r3, #0
}
 8015ba6:	4618      	mov	r0, r3
 8015ba8:	3710      	adds	r7, #16
 8015baa:	46bd      	mov	sp, r7
 8015bac:	bd80      	pop	{r7, pc}

08015bae <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8015bae:	b480      	push	{r7}
 8015bb0:	b083      	sub	sp, #12
 8015bb2:	af00      	add	r7, sp, #0
 8015bb4:	4603      	mov	r3, r0
 8015bb6:	71fb      	strb	r3, [r7, #7]
 8015bb8:	460b      	mov	r3, r1
 8015bba:	71bb      	strb	r3, [r7, #6]
 8015bbc:	4613      	mov	r3, r2
 8015bbe:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8015bc0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8015bc4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015bc8:	429a      	cmp	r2, r3
 8015bca:	db07      	blt.n	8015bdc <RegionCommonValueInRange+0x2e>
 8015bcc:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8015bd0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8015bd4:	429a      	cmp	r2, r3
 8015bd6:	dc01      	bgt.n	8015bdc <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8015bd8:	2301      	movs	r3, #1
 8015bda:	e000      	b.n	8015bde <RegionCommonValueInRange+0x30>
    }
    return 0;
 8015bdc:	2300      	movs	r3, #0
}
 8015bde:	4618      	mov	r0, r3
 8015be0:	370c      	adds	r7, #12
 8015be2:	46bd      	mov	sp, r7
 8015be4:	bc80      	pop	{r7}
 8015be6:	4770      	bx	lr

08015be8 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8015be8:	b480      	push	{r7}
 8015bea:	b085      	sub	sp, #20
 8015bec:	af00      	add	r7, sp, #0
 8015bee:	6078      	str	r0, [r7, #4]
 8015bf0:	460b      	mov	r3, r1
 8015bf2:	70fb      	strb	r3, [r7, #3]
 8015bf4:	4613      	mov	r3, r2
 8015bf6:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8015bf8:	78fb      	ldrb	r3, [r7, #3]
 8015bfa:	091b      	lsrs	r3, r3, #4
 8015bfc:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8015bfe:	78bb      	ldrb	r3, [r7, #2]
 8015c00:	091b      	lsrs	r3, r3, #4
 8015c02:	b2db      	uxtb	r3, r3
 8015c04:	7bfa      	ldrb	r2, [r7, #15]
 8015c06:	429a      	cmp	r2, r3
 8015c08:	d803      	bhi.n	8015c12 <RegionCommonChanDisable+0x2a>
 8015c0a:	78fa      	ldrb	r2, [r7, #3]
 8015c0c:	78bb      	ldrb	r3, [r7, #2]
 8015c0e:	429a      	cmp	r2, r3
 8015c10:	d301      	bcc.n	8015c16 <RegionCommonChanDisable+0x2e>
    {
        return false;
 8015c12:	2300      	movs	r3, #0
 8015c14:	e017      	b.n	8015c46 <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8015c16:	7bfb      	ldrb	r3, [r7, #15]
 8015c18:	005b      	lsls	r3, r3, #1
 8015c1a:	687a      	ldr	r2, [r7, #4]
 8015c1c:	4413      	add	r3, r2
 8015c1e:	881b      	ldrh	r3, [r3, #0]
 8015c20:	b21a      	sxth	r2, r3
 8015c22:	78fb      	ldrb	r3, [r7, #3]
 8015c24:	f003 030f 	and.w	r3, r3, #15
 8015c28:	2101      	movs	r1, #1
 8015c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8015c2e:	b21b      	sxth	r3, r3
 8015c30:	43db      	mvns	r3, r3
 8015c32:	b21b      	sxth	r3, r3
 8015c34:	4013      	ands	r3, r2
 8015c36:	b219      	sxth	r1, r3
 8015c38:	7bfb      	ldrb	r3, [r7, #15]
 8015c3a:	005b      	lsls	r3, r3, #1
 8015c3c:	687a      	ldr	r2, [r7, #4]
 8015c3e:	4413      	add	r3, r2
 8015c40:	b28a      	uxth	r2, r1
 8015c42:	801a      	strh	r2, [r3, #0]

    return true;
 8015c44:	2301      	movs	r3, #1
}
 8015c46:	4618      	mov	r0, r3
 8015c48:	3714      	adds	r7, #20
 8015c4a:	46bd      	mov	sp, r7
 8015c4c:	bc80      	pop	{r7}
 8015c4e:	4770      	bx	lr

08015c50 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8015c50:	b580      	push	{r7, lr}
 8015c52:	b084      	sub	sp, #16
 8015c54:	af00      	add	r7, sp, #0
 8015c56:	6078      	str	r0, [r7, #4]
 8015c58:	460b      	mov	r3, r1
 8015c5a:	70fb      	strb	r3, [r7, #3]
 8015c5c:	4613      	mov	r3, r2
 8015c5e:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8015c60:	2300      	movs	r3, #0
 8015c62:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	d101      	bne.n	8015c6e <RegionCommonCountChannels+0x1e>
    {
        return 0;
 8015c6a:	2300      	movs	r3, #0
 8015c6c:	e018      	b.n	8015ca0 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8015c6e:	78fb      	ldrb	r3, [r7, #3]
 8015c70:	73bb      	strb	r3, [r7, #14]
 8015c72:	e010      	b.n	8015c96 <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8015c74:	7bbb      	ldrb	r3, [r7, #14]
 8015c76:	005b      	lsls	r3, r3, #1
 8015c78:	687a      	ldr	r2, [r7, #4]
 8015c7a:	4413      	add	r3, r2
 8015c7c:	881b      	ldrh	r3, [r3, #0]
 8015c7e:	2110      	movs	r1, #16
 8015c80:	4618      	mov	r0, r3
 8015c82:	f7ff fef9 	bl	8015a78 <CountChannels>
 8015c86:	4603      	mov	r3, r0
 8015c88:	461a      	mov	r2, r3
 8015c8a:	7bfb      	ldrb	r3, [r7, #15]
 8015c8c:	4413      	add	r3, r2
 8015c8e:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8015c90:	7bbb      	ldrb	r3, [r7, #14]
 8015c92:	3301      	adds	r3, #1
 8015c94:	73bb      	strb	r3, [r7, #14]
 8015c96:	7bba      	ldrb	r2, [r7, #14]
 8015c98:	78bb      	ldrb	r3, [r7, #2]
 8015c9a:	429a      	cmp	r2, r3
 8015c9c:	d3ea      	bcc.n	8015c74 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 8015c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015ca0:	4618      	mov	r0, r3
 8015ca2:	3710      	adds	r7, #16
 8015ca4:	46bd      	mov	sp, r7
 8015ca6:	bd80      	pop	{r7, pc}

08015ca8 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8015ca8:	b480      	push	{r7}
 8015caa:	b087      	sub	sp, #28
 8015cac:	af00      	add	r7, sp, #0
 8015cae:	60f8      	str	r0, [r7, #12]
 8015cb0:	60b9      	str	r1, [r7, #8]
 8015cb2:	4613      	mov	r3, r2
 8015cb4:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8015cb6:	68fb      	ldr	r3, [r7, #12]
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	d016      	beq.n	8015cea <RegionCommonChanMaskCopy+0x42>
 8015cbc:	68bb      	ldr	r3, [r7, #8]
 8015cbe:	2b00      	cmp	r3, #0
 8015cc0:	d013      	beq.n	8015cea <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 8015cc2:	2300      	movs	r3, #0
 8015cc4:	75fb      	strb	r3, [r7, #23]
 8015cc6:	e00c      	b.n	8015ce2 <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8015cc8:	7dfb      	ldrb	r3, [r7, #23]
 8015cca:	005b      	lsls	r3, r3, #1
 8015ccc:	68ba      	ldr	r2, [r7, #8]
 8015cce:	441a      	add	r2, r3
 8015cd0:	7dfb      	ldrb	r3, [r7, #23]
 8015cd2:	005b      	lsls	r3, r3, #1
 8015cd4:	68f9      	ldr	r1, [r7, #12]
 8015cd6:	440b      	add	r3, r1
 8015cd8:	8812      	ldrh	r2, [r2, #0]
 8015cda:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8015cdc:	7dfb      	ldrb	r3, [r7, #23]
 8015cde:	3301      	adds	r3, #1
 8015ce0:	75fb      	strb	r3, [r7, #23]
 8015ce2:	7dfa      	ldrb	r2, [r7, #23]
 8015ce4:	79fb      	ldrb	r3, [r7, #7]
 8015ce6:	429a      	cmp	r2, r3
 8015ce8:	d3ee      	bcc.n	8015cc8 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8015cea:	bf00      	nop
 8015cec:	371c      	adds	r7, #28
 8015cee:	46bd      	mov	sp, r7
 8015cf0:	bc80      	pop	{r7}
 8015cf2:	4770      	bx	lr

08015cf4 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8015cf4:	b082      	sub	sp, #8
 8015cf6:	b580      	push	{r7, lr}
 8015cf8:	b086      	sub	sp, #24
 8015cfa:	af00      	add	r7, sp, #0
 8015cfc:	60f8      	str	r0, [r7, #12]
 8015cfe:	60b9      	str	r1, [r7, #8]
 8015d00:	627b      	str	r3, [r7, #36]	; 0x24
 8015d02:	4613      	mov	r3, r2
 8015d04:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8015d06:	79f9      	ldrb	r1, [r7, #7]
 8015d08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015d0c:	cb0c      	ldmia	r3, {r2, r3}
 8015d0e:	68f8      	ldr	r0, [r7, #12]
 8015d10:	f7ff fd8b 	bl	801582a <GetDutyCycle>
 8015d14:	4603      	mov	r3, r0
 8015d16:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8015d18:	68fb      	ldr	r3, [r7, #12]
 8015d1a:	68da      	ldr	r2, [r3, #12]
 8015d1c:	8afb      	ldrh	r3, [r7, #22]
 8015d1e:	68b9      	ldr	r1, [r7, #8]
 8015d20:	fb01 f303 	mul.w	r3, r1, r3
 8015d24:	429a      	cmp	r2, r3
 8015d26:	d909      	bls.n	8015d3c <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8015d28:	68fb      	ldr	r3, [r7, #12]
 8015d2a:	68da      	ldr	r2, [r3, #12]
 8015d2c:	8afb      	ldrh	r3, [r7, #22]
 8015d2e:	68b9      	ldr	r1, [r7, #8]
 8015d30:	fb01 f303 	mul.w	r3, r1, r3
 8015d34:	1ad2      	subs	r2, r2, r3
 8015d36:	68fb      	ldr	r3, [r7, #12]
 8015d38:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8015d3a:	e002      	b.n	8015d42 <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8015d3c:	68fb      	ldr	r3, [r7, #12]
 8015d3e:	2200      	movs	r2, #0
 8015d40:	60da      	str	r2, [r3, #12]
}
 8015d42:	bf00      	nop
 8015d44:	3718      	adds	r7, #24
 8015d46:	46bd      	mov	sp, r7
 8015d48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015d4c:	b002      	add	sp, #8
 8015d4e:	4770      	bx	lr

08015d50 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8015d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d52:	b08f      	sub	sp, #60	; 0x3c
 8015d54:	af04      	add	r7, sp, #16
 8015d56:	6039      	str	r1, [r7, #0]
 8015d58:	4611      	mov	r1, r2
 8015d5a:	461a      	mov	r2, r3
 8015d5c:	4603      	mov	r3, r0
 8015d5e:	71fb      	strb	r3, [r7, #7]
 8015d60:	460b      	mov	r3, r1
 8015d62:	71bb      	strb	r3, [r7, #6]
 8015d64:	4613      	mov	r3, r2
 8015d66:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8015d68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015d6c:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8015d6e:	f007 fb3d 	bl	801d3ec <UTIL_TIMER_GetCurrentTime>
 8015d72:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8015d74:	2300      	movs	r3, #0
 8015d76:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8015d78:	2301      	movs	r3, #1
 8015d7a:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8015d7c:	2300      	movs	r3, #0
 8015d7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8015d82:	2300      	movs	r3, #0
 8015d84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8015d88:	e0ba      	b.n	8015f00 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8015d8a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015d8e:	4613      	mov	r3, r2
 8015d90:	005b      	lsls	r3, r3, #1
 8015d92:	4413      	add	r3, r2
 8015d94:	00db      	lsls	r3, r3, #3
 8015d96:	461a      	mov	r2, r3
 8015d98:	683b      	ldr	r3, [r7, #0]
 8015d9a:	189c      	adds	r4, r3, r2
 8015d9c:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 8015da0:	797a      	ldrb	r2, [r7, #5]
 8015da2:	79fd      	ldrb	r5, [r7, #7]
 8015da4:	69fb      	ldr	r3, [r7, #28]
 8015da6:	9302      	str	r3, [sp, #8]
 8015da8:	46ec      	mov	ip, sp
 8015daa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015dae:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015db2:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015db6:	4633      	mov	r3, r6
 8015db8:	4629      	mov	r1, r5
 8015dba:	4620      	mov	r0, r4
 8015dbc:	f7ff fe22 	bl	8015a04 <UpdateTimeCredits>
 8015dc0:	4603      	mov	r3, r0
 8015dc2:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8015dc4:	8afa      	ldrh	r2, [r7, #22]
 8015dc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015dc8:	fb02 f303 	mul.w	r3, r2, r3
 8015dcc:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 8015dce:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015dd2:	4613      	mov	r3, r2
 8015dd4:	005b      	lsls	r3, r3, #1
 8015dd6:	4413      	add	r3, r2
 8015dd8:	00db      	lsls	r3, r3, #3
 8015dda:	461a      	mov	r2, r3
 8015ddc:	683b      	ldr	r3, [r7, #0]
 8015dde:	4413      	add	r3, r2
 8015de0:	68db      	ldr	r3, [r3, #12]
 8015de2:	69ba      	ldr	r2, [r7, #24]
 8015de4:	429a      	cmp	r2, r3
 8015de6:	d908      	bls.n	8015dfa <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8015de8:	797b      	ldrb	r3, [r7, #5]
 8015dea:	f083 0301 	eor.w	r3, r3, #1
 8015dee:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 8015df0:	2b00      	cmp	r3, #0
 8015df2:	d013      	beq.n	8015e1c <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8015df4:	79fb      	ldrb	r3, [r7, #7]
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d010      	beq.n	8015e1c <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 8015dfa:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015dfe:	4613      	mov	r3, r2
 8015e00:	005b      	lsls	r3, r3, #1
 8015e02:	4413      	add	r3, r2
 8015e04:	00db      	lsls	r3, r3, #3
 8015e06:	461a      	mov	r2, r3
 8015e08:	683b      	ldr	r3, [r7, #0]
 8015e0a:	4413      	add	r3, r2
 8015e0c:	2201      	movs	r2, #1
 8015e0e:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8015e10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015e14:	3301      	adds	r3, #1
 8015e16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8015e1a:	e06c      	b.n	8015ef6 <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8015e1c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015e20:	4613      	mov	r3, r2
 8015e22:	005b      	lsls	r3, r3, #1
 8015e24:	4413      	add	r3, r2
 8015e26:	00db      	lsls	r3, r3, #3
 8015e28:	461a      	mov	r2, r3
 8015e2a:	683b      	ldr	r3, [r7, #0]
 8015e2c:	4413      	add	r3, r2
 8015e2e:	2200      	movs	r2, #0
 8015e30:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits >= creditCosts )
 8015e32:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015e36:	4613      	mov	r3, r2
 8015e38:	005b      	lsls	r3, r3, #1
 8015e3a:	4413      	add	r3, r2
 8015e3c:	00db      	lsls	r3, r3, #3
 8015e3e:	461a      	mov	r2, r3
 8015e40:	683b      	ldr	r3, [r7, #0]
 8015e42:	4413      	add	r3, r2
 8015e44:	691b      	ldr	r3, [r3, #16]
 8015e46:	69ba      	ldr	r2, [r7, #24]
 8015e48:	429a      	cmp	r2, r3
 8015e4a:	d815      	bhi.n	8015e78 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8015e4c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015e50:	4613      	mov	r3, r2
 8015e52:	005b      	lsls	r3, r3, #1
 8015e54:	4413      	add	r3, r2
 8015e56:	00db      	lsls	r3, r3, #3
 8015e58:	461a      	mov	r2, r3
 8015e5a:	683b      	ldr	r3, [r7, #0]
 8015e5c:	4413      	add	r3, r2
 8015e5e:	68db      	ldr	r3, [r3, #12]
 8015e60:	69ba      	ldr	r2, [r7, #24]
 8015e62:	1ad3      	subs	r3, r2, r3
 8015e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015e66:	4293      	cmp	r3, r2
 8015e68:	bf28      	it	cs
 8015e6a:	4613      	movcs	r3, r2
 8015e6c:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8015e6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015e72:	3301      	adds	r3, #1
 8015e74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8015e78:	79fb      	ldrb	r3, [r7, #7]
 8015e7a:	f083 0301 	eor.w	r3, r3, #1
 8015e7e:	b2db      	uxtb	r3, r3
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	d038      	beq.n	8015ef6 <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8015e84:	2300      	movs	r3, #0
 8015e86:	60fb      	str	r3, [r7, #12]
 8015e88:	2300      	movs	r3, #0
 8015e8a:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8015e8c:	8afb      	ldrh	r3, [r7, #22]
 8015e8e:	2b64      	cmp	r3, #100	; 0x64
 8015e90:	d103      	bne.n	8015e9a <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8015e92:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8015e96:	60fb      	str	r3, [r7, #12]
 8015e98:	e009      	b.n	8015eae <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8015e9a:	8afb      	ldrh	r3, [r7, #22]
 8015e9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015ea0:	d103      	bne.n	8015eaa <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8015ea2:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 8015ea6:	60fb      	str	r3, [r7, #12]
 8015ea8:	e001      	b.n	8015eae <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8015eaa:	4b1e      	ldr	r3, [pc, #120]	; (8015f24 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8015eac:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8015eae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015eb0:	4a1c      	ldr	r2, [pc, #112]	; (8015f24 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8015eb2:	4293      	cmp	r3, r2
 8015eb4:	d90e      	bls.n	8015ed4 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8015eb6:	68fa      	ldr	r2, [r7, #12]
 8015eb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015eba:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8015ebe:	3b30      	subs	r3, #48	; 0x30
 8015ec0:	4919      	ldr	r1, [pc, #100]	; (8015f28 <RegionCommonUpdateBandTimeOff+0x1d8>)
 8015ec2:	fba1 1303 	umull	r1, r3, r1, r3
 8015ec6:	0c1b      	lsrs	r3, r3, #16
 8015ec8:	3301      	adds	r3, #1
 8015eca:	4918      	ldr	r1, [pc, #96]	; (8015f2c <RegionCommonUpdateBandTimeOff+0x1dc>)
 8015ecc:	fb01 f303 	mul.w	r3, r1, r3
 8015ed0:	4413      	add	r3, r2
 8015ed2:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8015ed4:	f107 000c 	add.w	r0, r7, #12
 8015ed8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015eda:	9300      	str	r3, [sp, #0]
 8015edc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015ede:	f107 020c 	add.w	r2, r7, #12
 8015ee2:	ca06      	ldmia	r2, {r1, r2}
 8015ee4:	f006 fb99 	bl	801c61a <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8015ee8:	f107 030c 	add.w	r3, r7, #12
 8015eec:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015ef0:	f006 fc52 	bl	801c798 <SysTimeToMs>
 8015ef4:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 8015ef6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015efa:	3301      	adds	r3, #1
 8015efc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8015f00:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015f04:	79bb      	ldrb	r3, [r7, #6]
 8015f06:	429a      	cmp	r2, r3
 8015f08:	f4ff af3f 	bcc.w	8015d8a <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 8015f0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	d102      	bne.n	8015f1a <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8015f14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015f18:	e000      	b.n	8015f1c <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 8015f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015f1c:	4618      	mov	r0, r3
 8015f1e:	372c      	adds	r7, #44	; 0x2c
 8015f20:	46bd      	mov	sp, r7
 8015f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015f24:	0001ec30 	.word	0x0001ec30
 8015f28:	c22e4507 	.word	0xc22e4507
 8015f2c:	00015180 	.word	0x00015180

08015f30 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8015f30:	b480      	push	{r7}
 8015f32:	b085      	sub	sp, #20
 8015f34:	af00      	add	r7, sp, #0
 8015f36:	6078      	str	r0, [r7, #4]
 8015f38:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8015f3a:	2300      	movs	r3, #0
 8015f3c:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	781b      	ldrb	r3, [r3, #0]
 8015f42:	2b03      	cmp	r3, #3
 8015f44:	d13f      	bne.n	8015fc6 <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	3301      	adds	r3, #1
 8015f4a:	781b      	ldrb	r3, [r3, #0]
 8015f4c:	b25a      	sxtb	r2, r3
 8015f4e:	683b      	ldr	r3, [r7, #0]
 8015f50:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8015f52:	683b      	ldr	r3, [r7, #0]
 8015f54:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015f58:	f003 030f 	and.w	r3, r3, #15
 8015f5c:	b25a      	sxtb	r2, r3
 8015f5e:	683b      	ldr	r3, [r7, #0]
 8015f60:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8015f62:	683b      	ldr	r3, [r7, #0]
 8015f64:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015f68:	b2db      	uxtb	r3, r3
 8015f6a:	091b      	lsrs	r3, r3, #4
 8015f6c:	b2db      	uxtb	r3, r3
 8015f6e:	b25a      	sxtb	r2, r3
 8015f70:	683b      	ldr	r3, [r7, #0]
 8015f72:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	3302      	adds	r3, #2
 8015f78:	781b      	ldrb	r3, [r3, #0]
 8015f7a:	b29a      	uxth	r2, r3
 8015f7c:	683b      	ldr	r3, [r7, #0]
 8015f7e:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8015f80:	683b      	ldr	r3, [r7, #0]
 8015f82:	889b      	ldrh	r3, [r3, #4]
 8015f84:	b21a      	sxth	r2, r3
 8015f86:	687b      	ldr	r3, [r7, #4]
 8015f88:	3303      	adds	r3, #3
 8015f8a:	781b      	ldrb	r3, [r3, #0]
 8015f8c:	021b      	lsls	r3, r3, #8
 8015f8e:	b21b      	sxth	r3, r3
 8015f90:	4313      	orrs	r3, r2
 8015f92:	b21b      	sxth	r3, r3
 8015f94:	b29a      	uxth	r2, r3
 8015f96:	683b      	ldr	r3, [r7, #0]
 8015f98:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	791a      	ldrb	r2, [r3, #4]
 8015f9e:	683b      	ldr	r3, [r7, #0]
 8015fa0:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8015fa2:	683b      	ldr	r3, [r7, #0]
 8015fa4:	781b      	ldrb	r3, [r3, #0]
 8015fa6:	091b      	lsrs	r3, r3, #4
 8015fa8:	b2db      	uxtb	r3, r3
 8015faa:	f003 0307 	and.w	r3, r3, #7
 8015fae:	b2da      	uxtb	r2, r3
 8015fb0:	683b      	ldr	r3, [r7, #0]
 8015fb2:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8015fb4:	683b      	ldr	r3, [r7, #0]
 8015fb6:	781b      	ldrb	r3, [r3, #0]
 8015fb8:	f003 030f 	and.w	r3, r3, #15
 8015fbc:	b2da      	uxtb	r2, r3
 8015fbe:	683b      	ldr	r3, [r7, #0]
 8015fc0:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8015fc2:	2305      	movs	r3, #5
 8015fc4:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 8015fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8015fc8:	4618      	mov	r0, r3
 8015fca:	3714      	adds	r7, #20
 8015fcc:	46bd      	mov	sp, r7
 8015fce:	bc80      	pop	{r7}
 8015fd0:	4770      	bx	lr

08015fd2 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8015fd2:	b5b0      	push	{r4, r5, r7, lr}
 8015fd4:	b088      	sub	sp, #32
 8015fd6:	af02      	add	r7, sp, #8
 8015fd8:	60f8      	str	r0, [r7, #12]
 8015fda:	60b9      	str	r1, [r7, #8]
 8015fdc:	607a      	str	r2, [r7, #4]
 8015fde:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8015fe0:	68fb      	ldr	r3, [r7, #12]
 8015fe2:	791b      	ldrb	r3, [r3, #4]
 8015fe4:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 8015fe6:	68fb      	ldr	r3, [r7, #12]
 8015fe8:	799b      	ldrb	r3, [r3, #6]
 8015fea:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8015fec:	68fb      	ldr	r3, [r7, #12]
 8015fee:	79db      	ldrb	r3, [r3, #7]
 8015ff0:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 8015ff2:	68fb      	ldr	r3, [r7, #12]
 8015ff4:	7a1b      	ldrb	r3, [r3, #8]
 8015ff6:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8015ff8:	68fb      	ldr	r3, [r7, #12]
 8015ffa:	795b      	ldrb	r3, [r3, #5]
 8015ffc:	f083 0301 	eor.w	r3, r3, #1
 8016000:	b2db      	uxtb	r3, r3
 8016002:	2b00      	cmp	r3, #0
 8016004:	d008      	beq.n	8016018 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8016006:	68fb      	ldr	r3, [r7, #12]
 8016008:	7adb      	ldrb	r3, [r3, #11]
 801600a:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 801600c:	68fb      	ldr	r3, [r7, #12]
 801600e:	7a5b      	ldrb	r3, [r3, #9]
 8016010:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 8016012:	68fb      	ldr	r3, [r7, #12]
 8016014:	7a9b      	ldrb	r3, [r3, #10]
 8016016:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 8016018:	7dfb      	ldrb	r3, [r7, #23]
 801601a:	2b00      	cmp	r3, #0
 801601c:	d04a      	beq.n	80160b4 <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 801601e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8016022:	2b0f      	cmp	r3, #15
 8016024:	d103      	bne.n	801602e <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 8016026:	68fb      	ldr	r3, [r7, #12]
 8016028:	7a5b      	ldrb	r3, [r3, #9]
 801602a:	75bb      	strb	r3, [r7, #22]
 801602c:	e01d      	b.n	801606a <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 801602e:	68fb      	ldr	r3, [r7, #12]
 8016030:	7b18      	ldrb	r0, [r3, #12]
 8016032:	68fb      	ldr	r3, [r7, #12]
 8016034:	6919      	ldr	r1, [r3, #16]
 8016036:	68fb      	ldr	r3, [r7, #12]
 8016038:	f993 5014 	ldrsb.w	r5, [r3, #20]
 801603c:	68fb      	ldr	r3, [r7, #12]
 801603e:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8016042:	68fa      	ldr	r2, [r7, #12]
 8016044:	6992      	ldr	r2, [r2, #24]
 8016046:	f997 4016 	ldrsb.w	r4, [r7, #22]
 801604a:	9201      	str	r2, [sp, #4]
 801604c:	9300      	str	r3, [sp, #0]
 801604e:	462b      	mov	r3, r5
 8016050:	4622      	mov	r2, r4
 8016052:	f7ff fd3a 	bl	8015aca <RegionCommonChanVerifyDr>
 8016056:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8016058:	f083 0301 	eor.w	r3, r3, #1
 801605c:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 801605e:	2b00      	cmp	r3, #0
 8016060:	d003      	beq.n	801606a <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 8016062:	7dfb      	ldrb	r3, [r7, #23]
 8016064:	f023 0302 	bic.w	r3, r3, #2
 8016068:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 801606a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 801606e:	2b0f      	cmp	r3, #15
 8016070:	d103      	bne.n	801607a <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 8016072:	68fb      	ldr	r3, [r7, #12]
 8016074:	7a9b      	ldrb	r3, [r3, #10]
 8016076:	757b      	strb	r3, [r7, #21]
 8016078:	e01c      	b.n	80160b4 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 801607a:	68fb      	ldr	r3, [r7, #12]
 801607c:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8016080:	68fb      	ldr	r3, [r7, #12]
 8016082:	f993 201c 	ldrsb.w	r2, [r3, #28]
 8016086:	f997 3015 	ldrsb.w	r3, [r7, #21]
 801608a:	4618      	mov	r0, r3
 801608c:	f7ff fd8f 	bl	8015bae <RegionCommonValueInRange>
 8016090:	4603      	mov	r3, r0
 8016092:	2b00      	cmp	r3, #0
 8016094:	d10e      	bne.n	80160b4 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8016096:	68fb      	ldr	r3, [r7, #12]
 8016098:	f993 301d 	ldrsb.w	r3, [r3, #29]
 801609c:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80160a0:	429a      	cmp	r2, r3
 80160a2:	da03      	bge.n	80160ac <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 80160a4:	68fb      	ldr	r3, [r7, #12]
 80160a6:	7f5b      	ldrb	r3, [r3, #29]
 80160a8:	757b      	strb	r3, [r7, #21]
 80160aa:	e003      	b.n	80160b4 <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 80160ac:	7dfb      	ldrb	r3, [r7, #23]
 80160ae:	f023 0304 	bic.w	r3, r3, #4
 80160b2:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 80160b4:	7dfb      	ldrb	r3, [r7, #23]
 80160b6:	2b07      	cmp	r3, #7
 80160b8:	d105      	bne.n	80160c6 <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 80160ba:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80160be:	2b00      	cmp	r3, #0
 80160c0:	d101      	bne.n	80160c6 <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 80160c2:	2301      	movs	r3, #1
 80160c4:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 80160c6:	68bb      	ldr	r3, [r7, #8]
 80160c8:	7dba      	ldrb	r2, [r7, #22]
 80160ca:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	7d7a      	ldrb	r2, [r7, #21]
 80160d0:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 80160d2:	7d3a      	ldrb	r2, [r7, #20]
 80160d4:	683b      	ldr	r3, [r7, #0]
 80160d6:	701a      	strb	r2, [r3, #0]

    return status;
 80160d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80160da:	4618      	mov	r0, r3
 80160dc:	3718      	adds	r7, #24
 80160de:	46bd      	mov	sp, r7
 80160e0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080160e4 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 80160e4:	b480      	push	{r7}
 80160e6:	b083      	sub	sp, #12
 80160e8:	af00      	add	r7, sp, #0
 80160ea:	4603      	mov	r3, r0
 80160ec:	6039      	str	r1, [r7, #0]
 80160ee:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 80160f0:	79fb      	ldrb	r3, [r7, #7]
 80160f2:	4a06      	ldr	r2, [pc, #24]	; (801610c <RegionCommonComputeSymbolTimeLoRa+0x28>)
 80160f4:	fa02 f303 	lsl.w	r3, r2, r3
 80160f8:	461a      	mov	r2, r3
 80160fa:	683b      	ldr	r3, [r7, #0]
 80160fc:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8016100:	4618      	mov	r0, r3
 8016102:	370c      	adds	r7, #12
 8016104:	46bd      	mov	sp, r7
 8016106:	bc80      	pop	{r7}
 8016108:	4770      	bx	lr
 801610a:	bf00      	nop
 801610c:	000f4240 	.word	0x000f4240

08016110 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8016110:	b480      	push	{r7}
 8016112:	b083      	sub	sp, #12
 8016114:	af00      	add	r7, sp, #0
 8016116:	4603      	mov	r3, r0
 8016118:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 801611a:	79fb      	ldrb	r3, [r7, #7]
 801611c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8016120:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8016124:	4618      	mov	r0, r3
 8016126:	370c      	adds	r7, #12
 8016128:	46bd      	mov	sp, r7
 801612a:	bc80      	pop	{r7}
 801612c:	4770      	bx	lr
	...

08016130 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8016130:	b480      	push	{r7}
 8016132:	b085      	sub	sp, #20
 8016134:	af00      	add	r7, sp, #0
 8016136:	60f8      	str	r0, [r7, #12]
 8016138:	607a      	str	r2, [r7, #4]
 801613a:	603b      	str	r3, [r7, #0]
 801613c:	460b      	mov	r3, r1
 801613e:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8016140:	7afa      	ldrb	r2, [r7, #11]
 8016142:	7afb      	ldrb	r3, [r7, #11]
 8016144:	3b04      	subs	r3, #4
 8016146:	4619      	mov	r1, r3
 8016148:	68fb      	ldr	r3, [r7, #12]
 801614a:	fb03 f101 	mul.w	r1, r3, r1
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8016154:	fb00 f303 	mul.w	r3, r0, r3
 8016158:	440b      	add	r3, r1
 801615a:	005b      	lsls	r3, r3, #1
 801615c:	2b00      	cmp	r3, #0
 801615e:	d013      	beq.n	8016188 <RegionCommonComputeRxWindowParameters+0x58>
 8016160:	7afb      	ldrb	r3, [r7, #11]
 8016162:	3b04      	subs	r3, #4
 8016164:	4619      	mov	r1, r3
 8016166:	68fb      	ldr	r3, [r7, #12]
 8016168:	fb03 f101 	mul.w	r1, r3, r1
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8016172:	fb00 f303 	mul.w	r3, r0, r3
 8016176:	440b      	add	r3, r1
 8016178:	0059      	lsls	r1, r3, #1
 801617a:	68fb      	ldr	r3, [r7, #12]
 801617c:	440b      	add	r3, r1
 801617e:	1e59      	subs	r1, r3, #1
 8016180:	68fb      	ldr	r3, [r7, #12]
 8016182:	fbb1 f3f3 	udiv	r3, r1, r3
 8016186:	e00f      	b.n	80161a8 <RegionCommonComputeRxWindowParameters+0x78>
 8016188:	7afb      	ldrb	r3, [r7, #11]
 801618a:	3b04      	subs	r3, #4
 801618c:	4619      	mov	r1, r3
 801618e:	68fb      	ldr	r3, [r7, #12]
 8016190:	fb03 f101 	mul.w	r1, r3, r1
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801619a:	fb00 f303 	mul.w	r3, r0, r3
 801619e:	440b      	add	r3, r1
 80161a0:	0059      	lsls	r1, r3, #1
 80161a2:	68fb      	ldr	r3, [r7, #12]
 80161a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80161a8:	429a      	cmp	r2, r3
 80161aa:	bf38      	it	cc
 80161ac:	461a      	movcc	r2, r3
 80161ae:	69bb      	ldr	r3, [r7, #24]
 80161b0:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 80161b2:	68fb      	ldr	r3, [r7, #12]
 80161b4:	009b      	lsls	r3, r3, #2
 80161b6:	4619      	mov	r1, r3
 80161b8:	69bb      	ldr	r3, [r7, #24]
 80161ba:	681b      	ldr	r3, [r3, #0]
 80161bc:	68fa      	ldr	r2, [r7, #12]
 80161be:	fb02 f303 	mul.w	r3, r2, r3
 80161c2:	2b00      	cmp	r3, #0
 80161c4:	d007      	beq.n	80161d6 <RegionCommonComputeRxWindowParameters+0xa6>
 80161c6:	69bb      	ldr	r3, [r7, #24]
 80161c8:	681b      	ldr	r3, [r3, #0]
 80161ca:	68fa      	ldr	r2, [r7, #12]
 80161cc:	fb02 f303 	mul.w	r3, r2, r3
 80161d0:	3301      	adds	r3, #1
 80161d2:	085b      	lsrs	r3, r3, #1
 80161d4:	e005      	b.n	80161e2 <RegionCommonComputeRxWindowParameters+0xb2>
 80161d6:	69bb      	ldr	r3, [r7, #24]
 80161d8:	681b      	ldr	r3, [r3, #0]
 80161da:	68fa      	ldr	r2, [r7, #12]
 80161dc:	fb02 f303 	mul.w	r3, r2, r3
 80161e0:	085b      	lsrs	r3, r3, #1
 80161e2:	1acb      	subs	r3, r1, r3
 80161e4:	683a      	ldr	r2, [r7, #0]
 80161e6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80161ea:	fb01 f202 	mul.w	r2, r1, r2
 80161ee:	1a9b      	subs	r3, r3, r2
 80161f0:	2b00      	cmp	r3, #0
 80161f2:	dd27      	ble.n	8016244 <RegionCommonComputeRxWindowParameters+0x114>
 80161f4:	68fb      	ldr	r3, [r7, #12]
 80161f6:	009b      	lsls	r3, r3, #2
 80161f8:	4619      	mov	r1, r3
 80161fa:	69bb      	ldr	r3, [r7, #24]
 80161fc:	681b      	ldr	r3, [r3, #0]
 80161fe:	68fa      	ldr	r2, [r7, #12]
 8016200:	fb02 f303 	mul.w	r3, r2, r3
 8016204:	2b00      	cmp	r3, #0
 8016206:	d007      	beq.n	8016218 <RegionCommonComputeRxWindowParameters+0xe8>
 8016208:	69bb      	ldr	r3, [r7, #24]
 801620a:	681b      	ldr	r3, [r3, #0]
 801620c:	68fa      	ldr	r2, [r7, #12]
 801620e:	fb02 f303 	mul.w	r3, r2, r3
 8016212:	3301      	adds	r3, #1
 8016214:	085b      	lsrs	r3, r3, #1
 8016216:	e005      	b.n	8016224 <RegionCommonComputeRxWindowParameters+0xf4>
 8016218:	69bb      	ldr	r3, [r7, #24]
 801621a:	681b      	ldr	r3, [r3, #0]
 801621c:	68fa      	ldr	r2, [r7, #12]
 801621e:	fb02 f303 	mul.w	r3, r2, r3
 8016222:	085b      	lsrs	r3, r3, #1
 8016224:	1acb      	subs	r3, r1, r3
 8016226:	683a      	ldr	r2, [r7, #0]
 8016228:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801622c:	fb01 f202 	mul.w	r2, r1, r2
 8016230:	1a9b      	subs	r3, r3, r2
 8016232:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8016236:	4a19      	ldr	r2, [pc, #100]	; (801629c <RegionCommonComputeRxWindowParameters+0x16c>)
 8016238:	fb82 1203 	smull	r1, r2, r2, r3
 801623c:	1192      	asrs	r2, r2, #6
 801623e:	17db      	asrs	r3, r3, #31
 8016240:	1ad3      	subs	r3, r2, r3
 8016242:	e024      	b.n	801628e <RegionCommonComputeRxWindowParameters+0x15e>
 8016244:	68fb      	ldr	r3, [r7, #12]
 8016246:	009b      	lsls	r3, r3, #2
 8016248:	4619      	mov	r1, r3
 801624a:	69bb      	ldr	r3, [r7, #24]
 801624c:	681b      	ldr	r3, [r3, #0]
 801624e:	68fa      	ldr	r2, [r7, #12]
 8016250:	fb02 f303 	mul.w	r3, r2, r3
 8016254:	2b00      	cmp	r3, #0
 8016256:	d007      	beq.n	8016268 <RegionCommonComputeRxWindowParameters+0x138>
 8016258:	69bb      	ldr	r3, [r7, #24]
 801625a:	681b      	ldr	r3, [r3, #0]
 801625c:	68fa      	ldr	r2, [r7, #12]
 801625e:	fb02 f303 	mul.w	r3, r2, r3
 8016262:	3301      	adds	r3, #1
 8016264:	085b      	lsrs	r3, r3, #1
 8016266:	e005      	b.n	8016274 <RegionCommonComputeRxWindowParameters+0x144>
 8016268:	69bb      	ldr	r3, [r7, #24]
 801626a:	681b      	ldr	r3, [r3, #0]
 801626c:	68fa      	ldr	r2, [r7, #12]
 801626e:	fb02 f303 	mul.w	r3, r2, r3
 8016272:	085b      	lsrs	r3, r3, #1
 8016274:	1acb      	subs	r3, r1, r3
 8016276:	683a      	ldr	r2, [r7, #0]
 8016278:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801627c:	fb01 f202 	mul.w	r2, r1, r2
 8016280:	1a9b      	subs	r3, r3, r2
 8016282:	4a06      	ldr	r2, [pc, #24]	; (801629c <RegionCommonComputeRxWindowParameters+0x16c>)
 8016284:	fb82 1203 	smull	r1, r2, r2, r3
 8016288:	1192      	asrs	r2, r2, #6
 801628a:	17db      	asrs	r3, r3, #31
 801628c:	1ad3      	subs	r3, r2, r3
 801628e:	69fa      	ldr	r2, [r7, #28]
 8016290:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8016292:	bf00      	nop
 8016294:	3714      	adds	r7, #20
 8016296:	46bd      	mov	sp, r7
 8016298:	bc80      	pop	{r7}
 801629a:	4770      	bx	lr
 801629c:	10624dd3 	.word	0x10624dd3

080162a0 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 80162a0:	b580      	push	{r7, lr}
 80162a2:	b086      	sub	sp, #24
 80162a4:	af00      	add	r7, sp, #0
 80162a6:	4603      	mov	r3, r0
 80162a8:	60b9      	str	r1, [r7, #8]
 80162aa:	607a      	str	r2, [r7, #4]
 80162ac:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 80162ae:	2300      	movs	r3, #0
 80162b0:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 80162b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80162b6:	005b      	lsls	r3, r3, #1
 80162b8:	4618      	mov	r0, r3
 80162ba:	f7ea fa87 	bl	80007cc <__aeabi_ui2f>
 80162be:	4603      	mov	r3, r0
 80162c0:	4619      	mov	r1, r3
 80162c2:	68b8      	ldr	r0, [r7, #8]
 80162c4:	f7ea f9d0 	bl	8000668 <__aeabi_fsub>
 80162c8:	4603      	mov	r3, r0
 80162ca:	6879      	ldr	r1, [r7, #4]
 80162cc:	4618      	mov	r0, r3
 80162ce:	f7ea f9cb 	bl	8000668 <__aeabi_fsub>
 80162d2:	4603      	mov	r3, r0
 80162d4:	4618      	mov	r0, r3
 80162d6:	f7ea f8bb 	bl	8000450 <__aeabi_f2d>
 80162da:	4602      	mov	r2, r0
 80162dc:	460b      	mov	r3, r1
 80162de:	4610      	mov	r0, r2
 80162e0:	4619      	mov	r1, r3
 80162e2:	f007 fc19 	bl	801db18 <floor>
 80162e6:	4602      	mov	r2, r0
 80162e8:	460b      	mov	r3, r1
 80162ea:	4610      	mov	r0, r2
 80162ec:	4619      	mov	r1, r3
 80162ee:	f7ea f98f 	bl	8000610 <__aeabi_d2iz>
 80162f2:	4603      	mov	r3, r0
 80162f4:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 80162f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80162fa:	4618      	mov	r0, r3
 80162fc:	3718      	adds	r7, #24
 80162fe:	46bd      	mov	sp, r7
 8016300:	bd80      	pop	{r7, pc}

08016302 <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8016302:	b590      	push	{r4, r7, lr}
 8016304:	b087      	sub	sp, #28
 8016306:	af00      	add	r7, sp, #0
 8016308:	60f8      	str	r0, [r7, #12]
 801630a:	60b9      	str	r1, [r7, #8]
 801630c:	607a      	str	r2, [r7, #4]
 801630e:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8016310:	2300      	movs	r3, #0
 8016312:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8016314:	2300      	movs	r3, #0
 8016316:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8016318:	2300      	movs	r3, #0
 801631a:	757b      	strb	r3, [r7, #21]
 801631c:	2300      	movs	r3, #0
 801631e:	753b      	strb	r3, [r7, #20]
 8016320:	e09c      	b.n	801645c <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8016322:	2300      	movs	r3, #0
 8016324:	74fb      	strb	r3, [r7, #19]
 8016326:	e08f      	b.n	8016448 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8016328:	68fb      	ldr	r3, [r7, #12]
 801632a:	685a      	ldr	r2, [r3, #4]
 801632c:	7d3b      	ldrb	r3, [r7, #20]
 801632e:	005b      	lsls	r3, r3, #1
 8016330:	4413      	add	r3, r2
 8016332:	881b      	ldrh	r3, [r3, #0]
 8016334:	461a      	mov	r2, r3
 8016336:	7cfb      	ldrb	r3, [r7, #19]
 8016338:	fa42 f303 	asr.w	r3, r2, r3
 801633c:	f003 0301 	and.w	r3, r3, #1
 8016340:	2b00      	cmp	r3, #0
 8016342:	d07e      	beq.n	8016442 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8016344:	68fb      	ldr	r3, [r7, #12]
 8016346:	689a      	ldr	r2, [r3, #8]
 8016348:	7d79      	ldrb	r1, [r7, #21]
 801634a:	7cfb      	ldrb	r3, [r7, #19]
 801634c:	440b      	add	r3, r1
 801634e:	4619      	mov	r1, r3
 8016350:	460b      	mov	r3, r1
 8016352:	005b      	lsls	r3, r3, #1
 8016354:	440b      	add	r3, r1
 8016356:	009b      	lsls	r3, r3, #2
 8016358:	4413      	add	r3, r2
 801635a:	681b      	ldr	r3, [r3, #0]
 801635c:	2b00      	cmp	r3, #0
 801635e:	d06b      	beq.n	8016438 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8016360:	68fb      	ldr	r3, [r7, #12]
 8016362:	781b      	ldrb	r3, [r3, #0]
 8016364:	f083 0301 	eor.w	r3, r3, #1
 8016368:	b2db      	uxtb	r3, r3
 801636a:	2b00      	cmp	r3, #0
 801636c:	d011      	beq.n	8016392 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 801636e:	68fb      	ldr	r3, [r7, #12]
 8016370:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8016372:	2b00      	cmp	r3, #0
 8016374:	d00d      	beq.n	8016392 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8016376:	68fb      	ldr	r3, [r7, #12]
 8016378:	695a      	ldr	r2, [r3, #20]
 801637a:	7d3b      	ldrb	r3, [r7, #20]
 801637c:	005b      	lsls	r3, r3, #1
 801637e:	4413      	add	r3, r2
 8016380:	881b      	ldrh	r3, [r3, #0]
 8016382:	461a      	mov	r2, r3
 8016384:	7cfb      	ldrb	r3, [r7, #19]
 8016386:	fa42 f303 	asr.w	r3, r2, r3
 801638a:	f003 0301 	and.w	r3, r3, #1
 801638e:	2b00      	cmp	r3, #0
 8016390:	d054      	beq.n	801643c <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8016392:	68fb      	ldr	r3, [r7, #12]
 8016394:	785b      	ldrb	r3, [r3, #1]
 8016396:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8016398:	68fb      	ldr	r3, [r7, #12]
 801639a:	689a      	ldr	r2, [r3, #8]
 801639c:	7d79      	ldrb	r1, [r7, #21]
 801639e:	7cfb      	ldrb	r3, [r7, #19]
 80163a0:	440b      	add	r3, r1
 80163a2:	4619      	mov	r1, r3
 80163a4:	460b      	mov	r3, r1
 80163a6:	005b      	lsls	r3, r3, #1
 80163a8:	440b      	add	r3, r1
 80163aa:	009b      	lsls	r3, r3, #2
 80163ac:	4413      	add	r3, r2
 80163ae:	7a1b      	ldrb	r3, [r3, #8]
 80163b0:	f343 0303 	sbfx	r3, r3, #0, #4
 80163b4:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80163b6:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 80163b8:	68fb      	ldr	r3, [r7, #12]
 80163ba:	689a      	ldr	r2, [r3, #8]
 80163bc:	7d79      	ldrb	r1, [r7, #21]
 80163be:	7cfb      	ldrb	r3, [r7, #19]
 80163c0:	440b      	add	r3, r1
 80163c2:	4619      	mov	r1, r3
 80163c4:	460b      	mov	r3, r1
 80163c6:	005b      	lsls	r3, r3, #1
 80163c8:	440b      	add	r3, r1
 80163ca:	009b      	lsls	r3, r3, #2
 80163cc:	4413      	add	r3, r2
 80163ce:	7a1b      	ldrb	r3, [r3, #8]
 80163d0:	f343 1303 	sbfx	r3, r3, #4, #4
 80163d4:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80163d6:	461a      	mov	r2, r3
 80163d8:	4621      	mov	r1, r4
 80163da:	f7ff fbe8 	bl	8015bae <RegionCommonValueInRange>
 80163de:	4603      	mov	r3, r0
 80163e0:	2b00      	cmp	r3, #0
 80163e2:	d02d      	beq.n	8016440 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 80163e4:	68fb      	ldr	r3, [r7, #12]
 80163e6:	68da      	ldr	r2, [r3, #12]
 80163e8:	68fb      	ldr	r3, [r7, #12]
 80163ea:	6899      	ldr	r1, [r3, #8]
 80163ec:	7d78      	ldrb	r0, [r7, #21]
 80163ee:	7cfb      	ldrb	r3, [r7, #19]
 80163f0:	4403      	add	r3, r0
 80163f2:	4618      	mov	r0, r3
 80163f4:	4603      	mov	r3, r0
 80163f6:	005b      	lsls	r3, r3, #1
 80163f8:	4403      	add	r3, r0
 80163fa:	009b      	lsls	r3, r3, #2
 80163fc:	440b      	add	r3, r1
 80163fe:	7a5b      	ldrb	r3, [r3, #9]
 8016400:	4619      	mov	r1, r3
 8016402:	460b      	mov	r3, r1
 8016404:	005b      	lsls	r3, r3, #1
 8016406:	440b      	add	r3, r1
 8016408:	00db      	lsls	r3, r3, #3
 801640a:	4413      	add	r3, r2
 801640c:	7d1b      	ldrb	r3, [r3, #20]
 801640e:	f083 0301 	eor.w	r3, r3, #1
 8016412:	b2db      	uxtb	r3, r3
 8016414:	2b00      	cmp	r3, #0
 8016416:	d003      	beq.n	8016420 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8016418:	7dbb      	ldrb	r3, [r7, #22]
 801641a:	3301      	adds	r3, #1
 801641c:	75bb      	strb	r3, [r7, #22]
                    continue;
 801641e:	e010      	b.n	8016442 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8016420:	7dfb      	ldrb	r3, [r7, #23]
 8016422:	1c5a      	adds	r2, r3, #1
 8016424:	75fa      	strb	r2, [r7, #23]
 8016426:	461a      	mov	r2, r3
 8016428:	68bb      	ldr	r3, [r7, #8]
 801642a:	4413      	add	r3, r2
 801642c:	7d79      	ldrb	r1, [r7, #21]
 801642e:	7cfa      	ldrb	r2, [r7, #19]
 8016430:	440a      	add	r2, r1
 8016432:	b2d2      	uxtb	r2, r2
 8016434:	701a      	strb	r2, [r3, #0]
 8016436:	e004      	b.n	8016442 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8016438:	bf00      	nop
 801643a:	e002      	b.n	8016442 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 801643c:	bf00      	nop
 801643e:	e000      	b.n	8016442 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8016440:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8016442:	7cfb      	ldrb	r3, [r7, #19]
 8016444:	3301      	adds	r3, #1
 8016446:	74fb      	strb	r3, [r7, #19]
 8016448:	7cfb      	ldrb	r3, [r7, #19]
 801644a:	2b0f      	cmp	r3, #15
 801644c:	f67f af6c 	bls.w	8016328 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8016450:	7d7b      	ldrb	r3, [r7, #21]
 8016452:	3310      	adds	r3, #16
 8016454:	757b      	strb	r3, [r7, #21]
 8016456:	7d3b      	ldrb	r3, [r7, #20]
 8016458:	3301      	adds	r3, #1
 801645a:	753b      	strb	r3, [r7, #20]
 801645c:	7d7b      	ldrb	r3, [r7, #21]
 801645e:	b29a      	uxth	r2, r3
 8016460:	68fb      	ldr	r3, [r7, #12]
 8016462:	8a1b      	ldrh	r3, [r3, #16]
 8016464:	429a      	cmp	r2, r3
 8016466:	f4ff af5c 	bcc.w	8016322 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	7dfa      	ldrb	r2, [r7, #23]
 801646e:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8016470:	683b      	ldr	r3, [r7, #0]
 8016472:	7dba      	ldrb	r2, [r7, #22]
 8016474:	701a      	strb	r2, [r3, #0]
}
 8016476:	bf00      	nop
 8016478:	371c      	adds	r7, #28
 801647a:	46bd      	mov	sp, r7
 801647c:	bd90      	pop	{r4, r7, pc}

0801647e <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 801647e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016480:	b08b      	sub	sp, #44	; 0x2c
 8016482:	af04      	add	r7, sp, #16
 8016484:	60f8      	str	r0, [r7, #12]
 8016486:	60b9      	str	r1, [r7, #8]
 8016488:	607a      	str	r2, [r7, #4]
 801648a:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 801648c:	68fb      	ldr	r3, [r7, #12]
 801648e:	685b      	ldr	r3, [r3, #4]
 8016490:	4618      	mov	r0, r3
 8016492:	f006 ffbd 	bl	801d410 <UTIL_TIMER_GetElapsedTime>
 8016496:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8016498:	68fb      	ldr	r3, [r7, #12]
 801649a:	681a      	ldr	r2, [r3, #0]
 801649c:	697b      	ldr	r3, [r7, #20]
 801649e:	1ad2      	subs	r2, r2, r3
 80164a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80164a2:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 80164a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164a6:	2201      	movs	r2, #1
 80164a8:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 80164aa:	683b      	ldr	r3, [r7, #0]
 80164ac:	2200      	movs	r2, #0
 80164ae:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 80164b0:	68fb      	ldr	r3, [r7, #12]
 80164b2:	685b      	ldr	r3, [r3, #4]
 80164b4:	2b00      	cmp	r3, #0
 80164b6:	d004      	beq.n	80164c2 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 80164b8:	68fb      	ldr	r3, [r7, #12]
 80164ba:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 80164bc:	697a      	ldr	r2, [r7, #20]
 80164be:	429a      	cmp	r2, r3
 80164c0:	d32b      	bcc.n	801651a <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 80164c2:	68bb      	ldr	r3, [r7, #8]
 80164c4:	2200      	movs	r2, #0
 80164c6:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 80164c8:	68fb      	ldr	r3, [r7, #12]
 80164ca:	69db      	ldr	r3, [r3, #28]
 80164cc:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 80164ce:	68fb      	ldr	r3, [r7, #12]
 80164d0:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 80164d2:	68dd      	ldr	r5, [r3, #12]
 80164d4:	68fb      	ldr	r3, [r7, #12]
 80164d6:	7a5e      	ldrb	r6, [r3, #9]
 80164d8:	68fb      	ldr	r3, [r7, #12]
 80164da:	f893 c008 	ldrb.w	ip, [r3, #8]
 80164de:	68fb      	ldr	r3, [r7, #12]
 80164e0:	7d1b      	ldrb	r3, [r3, #20]
 80164e2:	68fa      	ldr	r2, [r7, #12]
 80164e4:	6992      	ldr	r2, [r2, #24]
 80164e6:	9203      	str	r2, [sp, #12]
 80164e8:	68fa      	ldr	r2, [r7, #12]
 80164ea:	f10d 0e04 	add.w	lr, sp, #4
 80164ee:	320c      	adds	r2, #12
 80164f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80164f4:	e88e 0003 	stmia.w	lr, {r0, r1}
 80164f8:	9300      	str	r3, [sp, #0]
 80164fa:	4663      	mov	r3, ip
 80164fc:	4632      	mov	r2, r6
 80164fe:	4629      	mov	r1, r5
 8016500:	4620      	mov	r0, r4
 8016502:	f7ff fc25 	bl	8015d50 <RegionCommonUpdateBandTimeOff>
 8016506:	4602      	mov	r2, r0
 8016508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801650a:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 801650c:	68fb      	ldr	r3, [r7, #12]
 801650e:	69d8      	ldr	r0, [r3, #28]
 8016510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016512:	683a      	ldr	r2, [r7, #0]
 8016514:	6879      	ldr	r1, [r7, #4]
 8016516:	f7ff fef4 	bl	8016302 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 801651a:	683b      	ldr	r3, [r7, #0]
 801651c:	781b      	ldrb	r3, [r3, #0]
 801651e:	2b00      	cmp	r3, #0
 8016520:	d004      	beq.n	801652c <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 8016522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016524:	2200      	movs	r2, #0
 8016526:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8016528:	2300      	movs	r3, #0
 801652a:	e006      	b.n	801653a <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 801652c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801652e:	781b      	ldrb	r3, [r3, #0]
 8016530:	2b00      	cmp	r3, #0
 8016532:	d001      	beq.n	8016538 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8016534:	230b      	movs	r3, #11
 8016536:	e000      	b.n	801653a <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8016538:	230c      	movs	r3, #12
    }
}
 801653a:	4618      	mov	r0, r3
 801653c:	371c      	adds	r7, #28
 801653e:	46bd      	mov	sp, r7
 8016540:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016542 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8016542:	b5b0      	push	{r4, r5, r7, lr}
 8016544:	b086      	sub	sp, #24
 8016546:	af02      	add	r7, sp, #8
 8016548:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 801654a:	687b      	ldr	r3, [r7, #4]
 801654c:	781b      	ldrb	r3, [r3, #0]
 801654e:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	f993 2000 	ldrsb.w	r2, [r3]
 8016556:	687b      	ldr	r3, [r7, #4]
 8016558:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801655c:	429a      	cmp	r2, r3
 801655e:	d103      	bne.n	8016568 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8016566:	e026      	b.n	80165b6 <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8016568:	7bfb      	ldrb	r3, [r7, #15]
 801656a:	3b01      	subs	r3, #1
 801656c:	b2db      	uxtb	r3, r3
 801656e:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8016570:	687b      	ldr	r3, [r7, #4]
 8016572:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8016576:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801657a:	429a      	cmp	r2, r3
 801657c:	d019      	beq.n	80165b2 <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 801657e:	687b      	ldr	r3, [r7, #4]
 8016580:	78d8      	ldrb	r0, [r3, #3]
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	6859      	ldr	r1, [r3, #4]
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	f993 5002 	ldrsb.w	r5, [r3, #2]
 801658c:	687b      	ldr	r3, [r7, #4]
 801658e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016592:	687a      	ldr	r2, [r7, #4]
 8016594:	6892      	ldr	r2, [r2, #8]
 8016596:	f997 400f 	ldrsb.w	r4, [r7, #15]
 801659a:	9201      	str	r2, [sp, #4]
 801659c:	9300      	str	r3, [sp, #0]
 801659e:	462b      	mov	r3, r5
 80165a0:	4622      	mov	r2, r4
 80165a2:	f7ff fa92 	bl	8015aca <RegionCommonChanVerifyDr>
 80165a6:	4603      	mov	r3, r0
 80165a8:	f083 0301 	eor.w	r3, r3, #1
 80165ac:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	d1da      	bne.n	8016568 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 80165b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 80165b6:	4618      	mov	r0, r3
 80165b8:	3710      	adds	r7, #16
 80165ba:	46bd      	mov	sp, r7
 80165bc:	bdb0      	pop	{r4, r5, r7, pc}

080165be <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 80165be:	b480      	push	{r7}
 80165c0:	b083      	sub	sp, #12
 80165c2:	af00      	add	r7, sp, #0
 80165c4:	4603      	mov	r3, r0
 80165c6:	460a      	mov	r2, r1
 80165c8:	71fb      	strb	r3, [r7, #7]
 80165ca:	4613      	mov	r3, r2
 80165cc:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 80165ce:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80165d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80165d6:	4293      	cmp	r3, r2
 80165d8:	bfb8      	it	lt
 80165da:	4613      	movlt	r3, r2
 80165dc:	b25b      	sxtb	r3, r3
}
 80165de:	4618      	mov	r0, r3
 80165e0:	370c      	adds	r7, #12
 80165e2:	46bd      	mov	sp, r7
 80165e4:	bc80      	pop	{r7}
 80165e6:	4770      	bx	lr

080165e8 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 80165e8:	b480      	push	{r7}
 80165ea:	b083      	sub	sp, #12
 80165ec:	af00      	add	r7, sp, #0
 80165ee:	6078      	str	r0, [r7, #4]
 80165f0:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	009b      	lsls	r3, r3, #2
 80165f6:	683a      	ldr	r2, [r7, #0]
 80165f8:	4413      	add	r3, r2
 80165fa:	681b      	ldr	r3, [r3, #0]
 80165fc:	4a07      	ldr	r2, [pc, #28]	; (801661c <RegionCommonGetBandwidth+0x34>)
 80165fe:	4293      	cmp	r3, r2
 8016600:	d004      	beq.n	801660c <RegionCommonGetBandwidth+0x24>
 8016602:	4a07      	ldr	r2, [pc, #28]	; (8016620 <RegionCommonGetBandwidth+0x38>)
 8016604:	4293      	cmp	r3, r2
 8016606:	d003      	beq.n	8016610 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 8016608:	2300      	movs	r3, #0
 801660a:	e002      	b.n	8016612 <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 801660c:	2301      	movs	r3, #1
 801660e:	e000      	b.n	8016612 <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8016610:	2302      	movs	r3, #2
    }
}
 8016612:	4618      	mov	r0, r3
 8016614:	370c      	adds	r7, #12
 8016616:	46bd      	mov	sp, r7
 8016618:	bc80      	pop	{r7}
 801661a:	4770      	bx	lr
 801661c:	0003d090 	.word	0x0003d090
 8016620:	0007a120 	.word	0x0007a120

08016624 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8016624:	b580      	push	{r7, lr}
 8016626:	b086      	sub	sp, #24
 8016628:	af04      	add	r7, sp, #16
 801662a:	4603      	mov	r3, r0
 801662c:	6039      	str	r1, [r7, #0]
 801662e:	71fb      	strb	r3, [r7, #7]
 8016630:	4613      	mov	r3, r2
 8016632:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 8016634:	79fb      	ldrb	r3, [r7, #7]
 8016636:	2b05      	cmp	r3, #5
 8016638:	d810      	bhi.n	801665c <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 801663a:	79fb      	ldrb	r3, [r7, #7]
 801663c:	4a0f      	ldr	r2, [pc, #60]	; (801667c <RegionCommonRxConfigPrint+0x58>)
 801663e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016642:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8016646:	9202      	str	r2, [sp, #8]
 8016648:	683a      	ldr	r2, [r7, #0]
 801664a:	9201      	str	r2, [sp, #4]
 801664c:	9300      	str	r3, [sp, #0]
 801664e:	4b0c      	ldr	r3, [pc, #48]	; (8016680 <RegionCommonRxConfigPrint+0x5c>)
 8016650:	2201      	movs	r2, #1
 8016652:	2100      	movs	r1, #0
 8016654:	2002      	movs	r0, #2
 8016656:	f006 ffb9 	bl	801d5cc <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 801665a:	e00a      	b.n	8016672 <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 801665c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016660:	9301      	str	r3, [sp, #4]
 8016662:	683b      	ldr	r3, [r7, #0]
 8016664:	9300      	str	r3, [sp, #0]
 8016666:	4b07      	ldr	r3, [pc, #28]	; (8016684 <RegionCommonRxConfigPrint+0x60>)
 8016668:	2201      	movs	r2, #1
 801666a:	2100      	movs	r1, #0
 801666c:	2002      	movs	r0, #2
 801666e:	f006 ffad 	bl	801d5cc <UTIL_ADV_TRACE_COND_FSend>
}
 8016672:	bf00      	nop
 8016674:	3708      	adds	r7, #8
 8016676:	46bd      	mov	sp, r7
 8016678:	bd80      	pop	{r7, pc}
 801667a:	bf00      	nop
 801667c:	20000118 	.word	0x20000118
 8016680:	0801e370 	.word	0x0801e370
 8016684:	0801e390 	.word	0x0801e390

08016688 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8016688:	b580      	push	{r7, lr}
 801668a:	b084      	sub	sp, #16
 801668c:	af02      	add	r7, sp, #8
 801668e:	6078      	str	r0, [r7, #4]
 8016690:	460b      	mov	r3, r1
 8016692:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8016694:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016698:	9301      	str	r3, [sp, #4]
 801669a:	687b      	ldr	r3, [r7, #4]
 801669c:	9300      	str	r3, [sp, #0]
 801669e:	4b05      	ldr	r3, [pc, #20]	; (80166b4 <RegionCommonTxConfigPrint+0x2c>)
 80166a0:	2201      	movs	r2, #1
 80166a2:	2100      	movs	r1, #0
 80166a4:	2002      	movs	r0, #2
 80166a6:	f006 ff91 	bl	801d5cc <UTIL_ADV_TRACE_COND_FSend>
}
 80166aa:	bf00      	nop
 80166ac:	3708      	adds	r7, #8
 80166ae:	46bd      	mov	sp, r7
 80166b0:	bd80      	pop	{r7, pc}
 80166b2:	bf00      	nop
 80166b4:	0801e3ac 	.word	0x0801e3ac

080166b8 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 80166b8:	b580      	push	{r7, lr}
 80166ba:	b082      	sub	sp, #8
 80166bc:	af00      	add	r7, sp, #0
 80166be:	6078      	str	r0, [r7, #4]
 80166c0:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 80166c2:	4b2d      	ldr	r3, [pc, #180]	; (8016778 <VerifyRfFreq+0xc0>)
 80166c4:	6a1b      	ldr	r3, [r3, #32]
 80166c6:	6878      	ldr	r0, [r7, #4]
 80166c8:	4798      	blx	r3
 80166ca:	4603      	mov	r3, r0
 80166cc:	f083 0301 	eor.w	r3, r3, #1
 80166d0:	b2db      	uxtb	r3, r3
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	d001      	beq.n	80166da <VerifyRfFreq+0x22>
    {
        return false;
 80166d6:	2300      	movs	r3, #0
 80166d8:	e04a      	b.n	8016770 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	4a27      	ldr	r2, [pc, #156]	; (801677c <VerifyRfFreq+0xc4>)
 80166de:	4293      	cmp	r3, r2
 80166e0:	d307      	bcc.n	80166f2 <VerifyRfFreq+0x3a>
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	4a26      	ldr	r2, [pc, #152]	; (8016780 <VerifyRfFreq+0xc8>)
 80166e6:	4293      	cmp	r3, r2
 80166e8:	d803      	bhi.n	80166f2 <VerifyRfFreq+0x3a>
    {
        *band = 2;
 80166ea:	683b      	ldr	r3, [r7, #0]
 80166ec:	2202      	movs	r2, #2
 80166ee:	701a      	strb	r2, [r3, #0]
 80166f0:	e03d      	b.n	801676e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	4a22      	ldr	r2, [pc, #136]	; (8016780 <VerifyRfFreq+0xc8>)
 80166f6:	4293      	cmp	r3, r2
 80166f8:	d907      	bls.n	801670a <VerifyRfFreq+0x52>
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	4a21      	ldr	r2, [pc, #132]	; (8016784 <VerifyRfFreq+0xcc>)
 80166fe:	4293      	cmp	r3, r2
 8016700:	d803      	bhi.n	801670a <VerifyRfFreq+0x52>
    {
        *band = 0;
 8016702:	683b      	ldr	r3, [r7, #0]
 8016704:	2200      	movs	r2, #0
 8016706:	701a      	strb	r2, [r3, #0]
 8016708:	e031      	b.n	801676e <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 801670a:	687b      	ldr	r3, [r7, #4]
 801670c:	4a1d      	ldr	r2, [pc, #116]	; (8016784 <VerifyRfFreq+0xcc>)
 801670e:	4293      	cmp	r3, r2
 8016710:	d907      	bls.n	8016722 <VerifyRfFreq+0x6a>
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	4a1c      	ldr	r2, [pc, #112]	; (8016788 <VerifyRfFreq+0xd0>)
 8016716:	4293      	cmp	r3, r2
 8016718:	d803      	bhi.n	8016722 <VerifyRfFreq+0x6a>
    {
        *band = 1;
 801671a:	683b      	ldr	r3, [r7, #0]
 801671c:	2201      	movs	r2, #1
 801671e:	701a      	strb	r2, [r3, #0]
 8016720:	e025      	b.n	801676e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	4a19      	ldr	r2, [pc, #100]	; (801678c <VerifyRfFreq+0xd4>)
 8016726:	4293      	cmp	r3, r2
 8016728:	d907      	bls.n	801673a <VerifyRfFreq+0x82>
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	4a18      	ldr	r2, [pc, #96]	; (8016790 <VerifyRfFreq+0xd8>)
 801672e:	4293      	cmp	r3, r2
 8016730:	d803      	bhi.n	801673a <VerifyRfFreq+0x82>
    {
        *band = 5;
 8016732:	683b      	ldr	r3, [r7, #0]
 8016734:	2205      	movs	r2, #5
 8016736:	701a      	strb	r2, [r3, #0]
 8016738:	e019      	b.n	801676e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 801673a:	687b      	ldr	r3, [r7, #4]
 801673c:	4a15      	ldr	r2, [pc, #84]	; (8016794 <VerifyRfFreq+0xdc>)
 801673e:	4293      	cmp	r3, r2
 8016740:	d907      	bls.n	8016752 <VerifyRfFreq+0x9a>
 8016742:	687b      	ldr	r3, [r7, #4]
 8016744:	4a14      	ldr	r2, [pc, #80]	; (8016798 <VerifyRfFreq+0xe0>)
 8016746:	4293      	cmp	r3, r2
 8016748:	d803      	bhi.n	8016752 <VerifyRfFreq+0x9a>
    {
        *band = 3;
 801674a:	683b      	ldr	r3, [r7, #0]
 801674c:	2203      	movs	r2, #3
 801674e:	701a      	strb	r2, [r3, #0]
 8016750:	e00d      	b.n	801676e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	4a11      	ldr	r2, [pc, #68]	; (801679c <VerifyRfFreq+0xe4>)
 8016756:	4293      	cmp	r3, r2
 8016758:	d307      	bcc.n	801676a <VerifyRfFreq+0xb2>
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	4a10      	ldr	r2, [pc, #64]	; (80167a0 <VerifyRfFreq+0xe8>)
 801675e:	4293      	cmp	r3, r2
 8016760:	d803      	bhi.n	801676a <VerifyRfFreq+0xb2>
    {
        *band = 4;
 8016762:	683b      	ldr	r3, [r7, #0]
 8016764:	2204      	movs	r2, #4
 8016766:	701a      	strb	r2, [r3, #0]
 8016768:	e001      	b.n	801676e <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 801676a:	2300      	movs	r3, #0
 801676c:	e000      	b.n	8016770 <VerifyRfFreq+0xb8>
    }
    return true;
 801676e:	2301      	movs	r3, #1
}
 8016770:	4618      	mov	r0, r3
 8016772:	3708      	adds	r7, #8
 8016774:	46bd      	mov	sp, r7
 8016776:	bd80      	pop	{r7, pc}
 8016778:	0801ea54 	.word	0x0801ea54
 801677c:	337055c0 	.word	0x337055c0
 8016780:	338eda3f 	.word	0x338eda3f
 8016784:	33bca100 	.word	0x33bca100
 8016788:	33c5c8c0 	.word	0x33c5c8c0
 801678c:	33c74f5f 	.word	0x33c74f5f
 8016790:	33cef080 	.word	0x33cef080
 8016794:	33d1fdbf 	.word	0x33d1fdbf
 8016798:	33d5ce50 	.word	0x33d5ce50
 801679c:	33d691a0 	.word	0x33d691a0
 80167a0:	33db2580 	.word	0x33db2580

080167a4 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 80167a4:	b590      	push	{r4, r7, lr}
 80167a6:	b08b      	sub	sp, #44	; 0x2c
 80167a8:	af04      	add	r7, sp, #16
 80167aa:	4603      	mov	r3, r0
 80167ac:	460a      	mov	r2, r1
 80167ae:	71fb      	strb	r3, [r7, #7]
 80167b0:	4613      	mov	r3, r2
 80167b2:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 80167b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80167b8:	4a1f      	ldr	r2, [pc, #124]	; (8016838 <GetTimeOnAir+0x94>)
 80167ba:	5cd3      	ldrb	r3, [r2, r3]
 80167bc:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 80167be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80167c2:	491e      	ldr	r1, [pc, #120]	; (801683c <GetTimeOnAir+0x98>)
 80167c4:	4618      	mov	r0, r3
 80167c6:	f7ff ff0f 	bl	80165e8 <RegionCommonGetBandwidth>
 80167ca:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 80167cc:	2300      	movs	r3, #0
 80167ce:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 80167d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80167d4:	2b07      	cmp	r3, #7
 80167d6:	d118      	bne.n	801680a <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 80167d8:	4b19      	ldr	r3, [pc, #100]	; (8016840 <GetTimeOnAir+0x9c>)
 80167da:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80167dc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80167e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80167e4:	fb02 f303 	mul.w	r3, r2, r3
 80167e8:	4619      	mov	r1, r3
 80167ea:	88bb      	ldrh	r3, [r7, #4]
 80167ec:	b2db      	uxtb	r3, r3
 80167ee:	2201      	movs	r2, #1
 80167f0:	9203      	str	r2, [sp, #12]
 80167f2:	9302      	str	r3, [sp, #8]
 80167f4:	2300      	movs	r3, #0
 80167f6:	9301      	str	r3, [sp, #4]
 80167f8:	2305      	movs	r3, #5
 80167fa:	9300      	str	r3, [sp, #0]
 80167fc:	2300      	movs	r3, #0
 80167fe:	460a      	mov	r2, r1
 8016800:	68f9      	ldr	r1, [r7, #12]
 8016802:	2000      	movs	r0, #0
 8016804:	47a0      	blx	r4
 8016806:	6178      	str	r0, [r7, #20]
 8016808:	e011      	b.n	801682e <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 801680a:	4b0d      	ldr	r3, [pc, #52]	; (8016840 <GetTimeOnAir+0x9c>)
 801680c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801680e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8016812:	88bb      	ldrh	r3, [r7, #4]
 8016814:	b2db      	uxtb	r3, r3
 8016816:	2101      	movs	r1, #1
 8016818:	9103      	str	r1, [sp, #12]
 801681a:	9302      	str	r3, [sp, #8]
 801681c:	2300      	movs	r3, #0
 801681e:	9301      	str	r3, [sp, #4]
 8016820:	2308      	movs	r3, #8
 8016822:	9300      	str	r3, [sp, #0]
 8016824:	2301      	movs	r3, #1
 8016826:	68f9      	ldr	r1, [r7, #12]
 8016828:	2001      	movs	r0, #1
 801682a:	47a0      	blx	r4
 801682c:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 801682e:	697b      	ldr	r3, [r7, #20]
}
 8016830:	4618      	mov	r0, r3
 8016832:	371c      	adds	r7, #28
 8016834:	46bd      	mov	sp, r7
 8016836:	bd90      	pop	{r4, r7, pc}
 8016838:	0801e998 	.word	0x0801e998
 801683c:	0801e9a0 	.word	0x0801e9a0
 8016840:	0801ea54 	.word	0x0801ea54

08016844 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8016844:	b580      	push	{r7, lr}
 8016846:	b088      	sub	sp, #32
 8016848:	af00      	add	r7, sp, #0
 801684a:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 801684c:	2300      	movs	r3, #0
 801684e:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	781b      	ldrb	r3, [r3, #0]
 8016854:	3b01      	subs	r3, #1
 8016856:	2b37      	cmp	r3, #55	; 0x37
 8016858:	f200 8122 	bhi.w	8016aa0 <RegionEU868GetPhyParam+0x25c>
 801685c:	a201      	add	r2, pc, #4	; (adr r2, 8016864 <RegionEU868GetPhyParam+0x20>)
 801685e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016862:	bf00      	nop
 8016864:	08016945 	.word	0x08016945
 8016868:	0801694b 	.word	0x0801694b
 801686c:	08016aa1 	.word	0x08016aa1
 8016870:	08016aa1 	.word	0x08016aa1
 8016874:	08016aa1 	.word	0x08016aa1
 8016878:	08016951 	.word	0x08016951
 801687c:	08016aa1 	.word	0x08016aa1
 8016880:	0801698b 	.word	0x0801698b
 8016884:	08016aa1 	.word	0x08016aa1
 8016888:	08016991 	.word	0x08016991
 801688c:	08016997 	.word	0x08016997
 8016890:	0801699d 	.word	0x0801699d
 8016894:	080169a3 	.word	0x080169a3
 8016898:	080169b3 	.word	0x080169b3
 801689c:	080169c3 	.word	0x080169c3
 80168a0:	080169c9 	.word	0x080169c9
 80168a4:	080169d1 	.word	0x080169d1
 80168a8:	080169d9 	.word	0x080169d9
 80168ac:	080169e1 	.word	0x080169e1
 80168b0:	080169e9 	.word	0x080169e9
 80168b4:	080169f1 	.word	0x080169f1
 80168b8:	08016a05 	.word	0x08016a05
 80168bc:	08016a0b 	.word	0x08016a0b
 80168c0:	08016a11 	.word	0x08016a11
 80168c4:	08016a17 	.word	0x08016a17
 80168c8:	08016a23 	.word	0x08016a23
 80168cc:	08016a2f 	.word	0x08016a2f
 80168d0:	08016a35 	.word	0x08016a35
 80168d4:	08016a3d 	.word	0x08016a3d
 80168d8:	08016a43 	.word	0x08016a43
 80168dc:	08016a49 	.word	0x08016a49
 80168e0:	08016a51 	.word	0x08016a51
 80168e4:	08016957 	.word	0x08016957
 80168e8:	08016aa1 	.word	0x08016aa1
 80168ec:	08016aa1 	.word	0x08016aa1
 80168f0:	08016aa1 	.word	0x08016aa1
 80168f4:	08016aa1 	.word	0x08016aa1
 80168f8:	08016aa1 	.word	0x08016aa1
 80168fc:	08016aa1 	.word	0x08016aa1
 8016900:	08016aa1 	.word	0x08016aa1
 8016904:	08016aa1 	.word	0x08016aa1
 8016908:	08016aa1 	.word	0x08016aa1
 801690c:	08016aa1 	.word	0x08016aa1
 8016910:	08016aa1 	.word	0x08016aa1
 8016914:	08016aa1 	.word	0x08016aa1
 8016918:	08016aa1 	.word	0x08016aa1
 801691c:	08016a57 	.word	0x08016a57
 8016920:	08016a5d 	.word	0x08016a5d
 8016924:	08016a6b 	.word	0x08016a6b
 8016928:	08016aa1 	.word	0x08016aa1
 801692c:	08016aa1 	.word	0x08016aa1
 8016930:	08016a71 	.word	0x08016a71
 8016934:	08016a77 	.word	0x08016a77
 8016938:	08016aa1 	.word	0x08016aa1
 801693c:	08016a7d 	.word	0x08016a7d
 8016940:	08016a8d 	.word	0x08016a8d
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8016944:	2300      	movs	r3, #0
 8016946:	61bb      	str	r3, [r7, #24]
            break;
 8016948:	e0ab      	b.n	8016aa2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 801694a:	2300      	movs	r3, #0
 801694c:	61bb      	str	r3, [r7, #24]
            break;
 801694e:	e0a8      	b.n	8016aa2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8016950:	2300      	movs	r3, #0
 8016952:	61bb      	str	r3, [r7, #24]
            break;
 8016954:	e0a5      	b.n	8016aa2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8016956:	687b      	ldr	r3, [r7, #4]
 8016958:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801695c:	733b      	strb	r3, [r7, #12]
 801695e:	2307      	movs	r3, #7
 8016960:	737b      	strb	r3, [r7, #13]
 8016962:	2300      	movs	r3, #0
 8016964:	73bb      	strb	r3, [r7, #14]
 8016966:	2310      	movs	r3, #16
 8016968:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 801696a:	4b51      	ldr	r3, [pc, #324]	; (8016ab0 <RegionEU868GetPhyParam+0x26c>)
 801696c:	681b      	ldr	r3, [r3, #0]
 801696e:	f503 7358 	add.w	r3, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8016972:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8016974:	4b4e      	ldr	r3, [pc, #312]	; (8016ab0 <RegionEU868GetPhyParam+0x26c>)
 8016976:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8016978:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 801697a:	f107 030c 	add.w	r3, r7, #12
 801697e:	4618      	mov	r0, r3
 8016980:	f7ff fddf 	bl	8016542 <RegionCommonGetNextLowerTxDr>
 8016984:	4603      	mov	r3, r0
 8016986:	61bb      	str	r3, [r7, #24]
            break;
 8016988:	e08b      	b.n	8016aa2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 801698a:	2300      	movs	r3, #0
 801698c:	61bb      	str	r3, [r7, #24]
            break;
 801698e:	e088      	b.n	8016aa2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8016990:	2300      	movs	r3, #0
 8016992:	61bb      	str	r3, [r7, #24]
            break;
 8016994:	e085      	b.n	8016aa2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8016996:	2340      	movs	r3, #64	; 0x40
 8016998:	61bb      	str	r3, [r7, #24]
            break;
 801699a:	e082      	b.n	8016aa2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 801699c:	2320      	movs	r3, #32
 801699e:	61bb      	str	r3, [r7, #24]
            break;
 80169a0:	e07f      	b.n	8016aa2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 80169a2:	687b      	ldr	r3, [r7, #4]
 80169a4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80169a8:	461a      	mov	r2, r3
 80169aa:	4b42      	ldr	r3, [pc, #264]	; (8016ab4 <RegionEU868GetPhyParam+0x270>)
 80169ac:	5c9b      	ldrb	r3, [r3, r2]
 80169ae:	61bb      	str	r3, [r7, #24]
            break;
 80169b0:	e077      	b.n	8016aa2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80169b8:	461a      	mov	r2, r3
 80169ba:	4b3f      	ldr	r3, [pc, #252]	; (8016ab8 <RegionEU868GetPhyParam+0x274>)
 80169bc:	5c9b      	ldrb	r3, [r3, r2]
 80169be:	61bb      	str	r3, [r7, #24]
            break;
 80169c0:	e06f      	b.n	8016aa2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 80169c2:	2301      	movs	r3, #1
 80169c4:	61bb      	str	r3, [r7, #24]
            break;
 80169c6:	e06c      	b.n	8016aa2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 80169c8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80169cc:	61bb      	str	r3, [r7, #24]
            break;
 80169ce:	e068      	b.n	8016aa2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 80169d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80169d4:	61bb      	str	r3, [r7, #24]
            break;
 80169d6:	e064      	b.n	8016aa2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 80169d8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80169dc:	61bb      	str	r3, [r7, #24]
            break;
 80169de:	e060      	b.n	8016aa2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 80169e0:	f241 3388 	movw	r3, #5000	; 0x1388
 80169e4:	61bb      	str	r3, [r7, #24]
            break;
 80169e6:	e05c      	b.n	8016aa2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 80169e8:	f241 7370 	movw	r3, #6000	; 0x1770
 80169ec:	61bb      	str	r3, [r7, #24]
            break;
 80169ee:	e058      	b.n	8016aa2 <RegionEU868GetPhyParam+0x25e>
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))

        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 80169f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80169f4:	4831      	ldr	r0, [pc, #196]	; (8016abc <RegionEU868GetPhyParam+0x278>)
 80169f6:	f002 fa2d 	bl	8018e54 <randr>
 80169fa:	4603      	mov	r3, r0
 80169fc:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8016a00:	61bb      	str	r3, [r7, #24]
            break;
 8016a02:	e04e      	b.n	8016aa2 <RegionEU868GetPhyParam+0x25e>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8016a04:	2300      	movs	r3, #0
 8016a06:	61bb      	str	r3, [r7, #24]
            break;
 8016a08:	e04b      	b.n	8016aa2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8016a0a:	4b2d      	ldr	r3, [pc, #180]	; (8016ac0 <RegionEU868GetPhyParam+0x27c>)
 8016a0c:	61bb      	str	r3, [r7, #24]
            break;
 8016a0e:	e048      	b.n	8016aa2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8016a10:	2300      	movs	r3, #0
 8016a12:	61bb      	str	r3, [r7, #24]
            break;
 8016a14:	e045      	b.n	8016aa2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8016a16:	4b26      	ldr	r3, [pc, #152]	; (8016ab0 <RegionEU868GetPhyParam+0x26c>)
 8016a18:	681b      	ldr	r3, [r3, #0]
 8016a1a:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8016a1e:	61bb      	str	r3, [r7, #24]
            break;
 8016a20:	e03f      	b.n	8016aa2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8016a22:	4b23      	ldr	r3, [pc, #140]	; (8016ab0 <RegionEU868GetPhyParam+0x26c>)
 8016a24:	681b      	ldr	r3, [r3, #0]
 8016a26:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8016a2a:	61bb      	str	r3, [r7, #24]
            break;
 8016a2c:	e039      	b.n	8016aa2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8016a2e:	2310      	movs	r3, #16
 8016a30:	61bb      	str	r3, [r7, #24]
            break;
 8016a32:	e036      	b.n	8016aa2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8016a34:	4b1e      	ldr	r3, [pc, #120]	; (8016ab0 <RegionEU868GetPhyParam+0x26c>)
 8016a36:	681b      	ldr	r3, [r3, #0]
 8016a38:	61bb      	str	r3, [r7, #24]
            break;
 8016a3a:	e032      	b.n	8016aa2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 8016a3c:	2300      	movs	r3, #0
 8016a3e:	61bb      	str	r3, [r7, #24]
            break;
 8016a40:	e02f      	b.n	8016aa2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8016a42:	2300      	movs	r3, #0
 8016a44:	61bb      	str	r3, [r7, #24]
            break;
 8016a46:	e02c      	b.n	8016aa2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8016a48:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8016a4c:	61bb      	str	r3, [r7, #24]
            break;
 8016a4e:	e028      	b.n	8016aa2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8016a50:	4b1c      	ldr	r3, [pc, #112]	; (8016ac4 <RegionEU868GetPhyParam+0x280>)
 8016a52:	61bb      	str	r3, [r7, #24]
            break;
 8016a54:	e025      	b.n	8016aa2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8016a56:	4b1a      	ldr	r3, [pc, #104]	; (8016ac0 <RegionEU868GetPhyParam+0x27c>)
 8016a58:	61bb      	str	r3, [r7, #24]
            break;
 8016a5a:	e022      	b.n	8016aa2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8016a5c:	2311      	movs	r3, #17
 8016a5e:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8016a60:	2301      	movs	r3, #1
 8016a62:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 8016a64:	2300      	movs	r3, #0
 8016a66:	76bb      	strb	r3, [r7, #26]
            break;
 8016a68:	e01b      	b.n	8016aa2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8016a6a:	2303      	movs	r3, #3
 8016a6c:	61bb      	str	r3, [r7, #24]
            break;
 8016a6e:	e018      	b.n	8016aa2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8016a70:	4b13      	ldr	r3, [pc, #76]	; (8016ac0 <RegionEU868GetPhyParam+0x27c>)
 8016a72:	61bb      	str	r3, [r7, #24]
            break;
 8016a74:	e015      	b.n	8016aa2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 8016a76:	2303      	movs	r3, #3
 8016a78:	61bb      	str	r3, [r7, #24]
            break;
 8016a7a:	e012      	b.n	8016aa2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016a82:	461a      	mov	r2, r3
 8016a84:	4b10      	ldr	r3, [pc, #64]	; (8016ac8 <RegionEU868GetPhyParam+0x284>)
 8016a86:	5c9b      	ldrb	r3, [r3, r2]
 8016a88:	61bb      	str	r3, [r7, #24]
            break;
 8016a8a:	e00a      	b.n	8016aa2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016a92:	490e      	ldr	r1, [pc, #56]	; (8016acc <RegionEU868GetPhyParam+0x288>)
 8016a94:	4618      	mov	r0, r3
 8016a96:	f7ff fda7 	bl	80165e8 <RegionCommonGetBandwidth>
 8016a9a:	4603      	mov	r3, r0
 8016a9c:	61bb      	str	r3, [r7, #24]
            break;
 8016a9e:	e000      	b.n	8016aa2 <RegionEU868GetPhyParam+0x25e>
        }
        default:
        {
            break;
 8016aa0:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 8016aa2:	69bb      	ldr	r3, [r7, #24]
 8016aa4:	61fb      	str	r3, [r7, #28]
 8016aa6:	69fb      	ldr	r3, [r7, #28]
}
 8016aa8:	4618      	mov	r0, r3
 8016aaa:	3720      	adds	r7, #32
 8016aac:	46bd      	mov	sp, r7
 8016aae:	bd80      	pop	{r7, pc}
 8016ab0:	20001ad0 	.word	0x20001ad0
 8016ab4:	0801e9c0 	.word	0x0801e9c0
 8016ab8:	0801e9c8 	.word	0x0801e9c8
 8016abc:	fffffc18 	.word	0xfffffc18
 8016ac0:	33d3e608 	.word	0x33d3e608
 8016ac4:	4009999a 	.word	0x4009999a
 8016ac8:	0801e998 	.word	0x0801e998
 8016acc:	0801e9a0 	.word	0x0801e9a0

08016ad0 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8016ad0:	b590      	push	{r4, r7, lr}
 8016ad2:	b085      	sub	sp, #20
 8016ad4:	af02      	add	r7, sp, #8
 8016ad6:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8016ad8:	4b11      	ldr	r3, [pc, #68]	; (8016b20 <RegionEU868SetBandTxDone+0x50>)
 8016ada:	681a      	ldr	r2, [r3, #0]
 8016adc:	4b11      	ldr	r3, [pc, #68]	; (8016b24 <RegionEU868SetBandTxDone+0x54>)
 8016ade:	6819      	ldr	r1, [r3, #0]
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	781b      	ldrb	r3, [r3, #0]
 8016ae4:	4618      	mov	r0, r3
 8016ae6:	4603      	mov	r3, r0
 8016ae8:	005b      	lsls	r3, r3, #1
 8016aea:	4403      	add	r3, r0
 8016aec:	009b      	lsls	r3, r3, #2
 8016aee:	440b      	add	r3, r1
 8016af0:	3309      	adds	r3, #9
 8016af2:	781b      	ldrb	r3, [r3, #0]
 8016af4:	4619      	mov	r1, r3
 8016af6:	460b      	mov	r3, r1
 8016af8:	005b      	lsls	r3, r3, #1
 8016afa:	440b      	add	r3, r1
 8016afc:	00db      	lsls	r3, r3, #3
 8016afe:	18d0      	adds	r0, r2, r3
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	6899      	ldr	r1, [r3, #8]
 8016b04:	687b      	ldr	r3, [r7, #4]
 8016b06:	785c      	ldrb	r4, [r3, #1]
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	691a      	ldr	r2, [r3, #16]
 8016b0c:	9200      	str	r2, [sp, #0]
 8016b0e:	68db      	ldr	r3, [r3, #12]
 8016b10:	4622      	mov	r2, r4
 8016b12:	f7ff f8ef 	bl	8015cf4 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 8016b16:	bf00      	nop
 8016b18:	370c      	adds	r7, #12
 8016b1a:	46bd      	mov	sp, r7
 8016b1c:	bd90      	pop	{r4, r7, pc}
 8016b1e:	bf00      	nop
 8016b20:	20001ad4 	.word	0x20001ad4
 8016b24:	20001ad0 	.word	0x20001ad0

08016b28 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8016b28:	b580      	push	{r7, lr}
 8016b2a:	b0b0      	sub	sp, #192	; 0xc0
 8016b2c:	af00      	add	r7, sp, #0
 8016b2e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 8016b30:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016b34:	2290      	movs	r2, #144	; 0x90
 8016b36:	2100      	movs	r1, #0
 8016b38:	4618      	mov	r0, r3
 8016b3a:	f006 ffbf 	bl	801dabc <memset>
 8016b3e:	2364      	movs	r3, #100	; 0x64
 8016b40:	863b      	strh	r3, [r7, #48]	; 0x30
 8016b42:	2364      	movs	r3, #100	; 0x64
 8016b44:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8016b48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016b4c:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8016b50:	230a      	movs	r3, #10
 8016b52:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8016b56:	2364      	movs	r3, #100	; 0x64
 8016b58:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8016b5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016b60:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8016b64:	687b      	ldr	r3, [r7, #4]
 8016b66:	7b1b      	ldrb	r3, [r3, #12]
 8016b68:	2b02      	cmp	r3, #2
 8016b6a:	d05d      	beq.n	8016c28 <RegionEU868InitDefaults+0x100>
 8016b6c:	2b02      	cmp	r3, #2
 8016b6e:	dc6a      	bgt.n	8016c46 <RegionEU868InitDefaults+0x11e>
 8016b70:	2b00      	cmp	r3, #0
 8016b72:	d002      	beq.n	8016b7a <RegionEU868InitDefaults+0x52>
 8016b74:	2b01      	cmp	r3, #1
 8016b76:	d03e      	beq.n	8016bf6 <RegionEU868InitDefaults+0xce>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8016b78:	e065      	b.n	8016c46 <RegionEU868InitDefaults+0x11e>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8016b7a:	687b      	ldr	r3, [r7, #4]
 8016b7c:	681b      	ldr	r3, [r3, #0]
 8016b7e:	2b00      	cmp	r3, #0
 8016b80:	d062      	beq.n	8016c48 <RegionEU868InitDefaults+0x120>
 8016b82:	687b      	ldr	r3, [r7, #4]
 8016b84:	685b      	ldr	r3, [r3, #4]
 8016b86:	2b00      	cmp	r3, #0
 8016b88:	d05e      	beq.n	8016c48 <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8016b8a:	687b      	ldr	r3, [r7, #4]
 8016b8c:	685b      	ldr	r3, [r3, #4]
 8016b8e:	4a30      	ldr	r2, [pc, #192]	; (8016c50 <RegionEU868InitDefaults+0x128>)
 8016b90:	6013      	str	r3, [r2, #0]
            RegionBands = (Band_t*) params->Bands;
 8016b92:	687b      	ldr	r3, [r7, #4]
 8016b94:	689b      	ldr	r3, [r3, #8]
 8016b96:	4a2f      	ldr	r2, [pc, #188]	; (8016c54 <RegionEU868InitDefaults+0x12c>)
 8016b98:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8016b9a:	4b2e      	ldr	r3, [pc, #184]	; (8016c54 <RegionEU868InitDefaults+0x12c>)
 8016b9c:	681b      	ldr	r3, [r3, #0]
 8016b9e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8016ba2:	2290      	movs	r2, #144	; 0x90
 8016ba4:	4618      	mov	r0, r3
 8016ba6:	f002 f96c 	bl	8018e82 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8016baa:	4b29      	ldr	r3, [pc, #164]	; (8016c50 <RegionEU868InitDefaults+0x128>)
 8016bac:	681b      	ldr	r3, [r3, #0]
 8016bae:	4a2a      	ldr	r2, [pc, #168]	; (8016c58 <RegionEU868InitDefaults+0x130>)
 8016bb0:	ca07      	ldmia	r2, {r0, r1, r2}
 8016bb2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8016bb6:	4b26      	ldr	r3, [pc, #152]	; (8016c50 <RegionEU868InitDefaults+0x128>)
 8016bb8:	681b      	ldr	r3, [r3, #0]
 8016bba:	4a28      	ldr	r2, [pc, #160]	; (8016c5c <RegionEU868InitDefaults+0x134>)
 8016bbc:	330c      	adds	r3, #12
 8016bbe:	ca07      	ldmia	r2, {r0, r1, r2}
 8016bc0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8016bc4:	4b22      	ldr	r3, [pc, #136]	; (8016c50 <RegionEU868InitDefaults+0x128>)
 8016bc6:	681b      	ldr	r3, [r3, #0]
 8016bc8:	4a25      	ldr	r2, [pc, #148]	; (8016c60 <RegionEU868InitDefaults+0x138>)
 8016bca:	3318      	adds	r3, #24
 8016bcc:	ca07      	ldmia	r2, {r0, r1, r2}
 8016bce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8016bd2:	4b1f      	ldr	r3, [pc, #124]	; (8016c50 <RegionEU868InitDefaults+0x128>)
 8016bd4:	681b      	ldr	r3, [r3, #0]
 8016bd6:	2207      	movs	r2, #7
 8016bd8:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8016bdc:	4b1c      	ldr	r3, [pc, #112]	; (8016c50 <RegionEU868InitDefaults+0x128>)
 8016bde:	681b      	ldr	r3, [r3, #0]
 8016be0:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8016be4:	4b1a      	ldr	r3, [pc, #104]	; (8016c50 <RegionEU868InitDefaults+0x128>)
 8016be6:	681b      	ldr	r3, [r3, #0]
 8016be8:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8016bec:	2201      	movs	r2, #1
 8016bee:	4619      	mov	r1, r3
 8016bf0:	f7ff f85a 	bl	8015ca8 <RegionCommonChanMaskCopy>
 8016bf4:	e028      	b.n	8016c48 <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8016bf6:	4b16      	ldr	r3, [pc, #88]	; (8016c50 <RegionEU868InitDefaults+0x128>)
 8016bf8:	681b      	ldr	r3, [r3, #0]
 8016bfa:	2200      	movs	r2, #0
 8016bfc:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8016bfe:	4b14      	ldr	r3, [pc, #80]	; (8016c50 <RegionEU868InitDefaults+0x128>)
 8016c00:	681b      	ldr	r3, [r3, #0]
 8016c02:	2200      	movs	r2, #0
 8016c04:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 8016c06:	4b12      	ldr	r3, [pc, #72]	; (8016c50 <RegionEU868InitDefaults+0x128>)
 8016c08:	681b      	ldr	r3, [r3, #0]
 8016c0a:	2200      	movs	r2, #0
 8016c0c:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8016c0e:	4b10      	ldr	r3, [pc, #64]	; (8016c50 <RegionEU868InitDefaults+0x128>)
 8016c10:	681b      	ldr	r3, [r3, #0]
 8016c12:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8016c16:	4b0e      	ldr	r3, [pc, #56]	; (8016c50 <RegionEU868InitDefaults+0x128>)
 8016c18:	681b      	ldr	r3, [r3, #0]
 8016c1a:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8016c1e:	2201      	movs	r2, #1
 8016c20:	4619      	mov	r1, r3
 8016c22:	f7ff f841 	bl	8015ca8 <RegionCommonChanMaskCopy>
            break;
 8016c26:	e00f      	b.n	8016c48 <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8016c28:	4b09      	ldr	r3, [pc, #36]	; (8016c50 <RegionEU868InitDefaults+0x128>)
 8016c2a:	681b      	ldr	r3, [r3, #0]
 8016c2c:	f8b3 1360 	ldrh.w	r1, [r3, #864]	; 0x360
 8016c30:	4b07      	ldr	r3, [pc, #28]	; (8016c50 <RegionEU868InitDefaults+0x128>)
 8016c32:	681b      	ldr	r3, [r3, #0]
 8016c34:	f8b3 236c 	ldrh.w	r2, [r3, #876]	; 0x36c
 8016c38:	4b05      	ldr	r3, [pc, #20]	; (8016c50 <RegionEU868InitDefaults+0x128>)
 8016c3a:	681b      	ldr	r3, [r3, #0]
 8016c3c:	430a      	orrs	r2, r1
 8016c3e:	b292      	uxth	r2, r2
 8016c40:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
            break;
 8016c44:	e000      	b.n	8016c48 <RegionEU868InitDefaults+0x120>
            break;
 8016c46:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8016c48:	37c0      	adds	r7, #192	; 0xc0
 8016c4a:	46bd      	mov	sp, r7
 8016c4c:	bd80      	pop	{r7, pc}
 8016c4e:	bf00      	nop
 8016c50:	20001ad0 	.word	0x20001ad0
 8016c54:	20001ad4 	.word	0x20001ad4
 8016c58:	0801e3c8 	.word	0x0801e3c8
 8016c5c:	0801e3d4 	.word	0x0801e3d4
 8016c60:	0801e3e0 	.word	0x0801e3e0

08016c64 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8016c64:	b580      	push	{r7, lr}
 8016c66:	b084      	sub	sp, #16
 8016c68:	af00      	add	r7, sp, #0
 8016c6a:	6078      	str	r0, [r7, #4]
 8016c6c:	460b      	mov	r3, r1
 8016c6e:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 8016c70:	78fb      	ldrb	r3, [r7, #3]
 8016c72:	2b0f      	cmp	r3, #15
 8016c74:	d86c      	bhi.n	8016d50 <RegionEU868Verify+0xec>
 8016c76:	a201      	add	r2, pc, #4	; (adr r2, 8016c7c <RegionEU868Verify+0x18>)
 8016c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016c7c:	08016cbd 	.word	0x08016cbd
 8016c80:	08016d51 	.word	0x08016d51
 8016c84:	08016d51 	.word	0x08016d51
 8016c88:	08016d51 	.word	0x08016d51
 8016c8c:	08016d51 	.word	0x08016d51
 8016c90:	08016cd5 	.word	0x08016cd5
 8016c94:	08016cf3 	.word	0x08016cf3
 8016c98:	08016d11 	.word	0x08016d11
 8016c9c:	08016d51 	.word	0x08016d51
 8016ca0:	08016d2f 	.word	0x08016d2f
 8016ca4:	08016d2f 	.word	0x08016d2f
 8016ca8:	08016d51 	.word	0x08016d51
 8016cac:	08016d51 	.word	0x08016d51
 8016cb0:	08016d51 	.word	0x08016d51
 8016cb4:	08016d51 	.word	0x08016d51
 8016cb8:	08016d4d 	.word	0x08016d4d
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8016cbc:	2300      	movs	r3, #0
 8016cbe:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	681b      	ldr	r3, [r3, #0]
 8016cc4:	f107 020f 	add.w	r2, r7, #15
 8016cc8:	4611      	mov	r1, r2
 8016cca:	4618      	mov	r0, r3
 8016ccc:	f7ff fcf4 	bl	80166b8 <VerifyRfFreq>
 8016cd0:	4603      	mov	r3, r0
 8016cd2:	e03e      	b.n	8016d52 <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	f993 3000 	ldrsb.w	r3, [r3]
 8016cda:	2207      	movs	r2, #7
 8016cdc:	2100      	movs	r1, #0
 8016cde:	4618      	mov	r0, r3
 8016ce0:	f7fe ff65 	bl	8015bae <RegionCommonValueInRange>
 8016ce4:	4603      	mov	r3, r0
 8016ce6:	2b00      	cmp	r3, #0
 8016ce8:	bf14      	ite	ne
 8016cea:	2301      	movne	r3, #1
 8016cec:	2300      	moveq	r3, #0
 8016cee:	b2db      	uxtb	r3, r3
 8016cf0:	e02f      	b.n	8016d52 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8016cf2:	687b      	ldr	r3, [r7, #4]
 8016cf4:	f993 3000 	ldrsb.w	r3, [r3]
 8016cf8:	2205      	movs	r2, #5
 8016cfa:	2100      	movs	r1, #0
 8016cfc:	4618      	mov	r0, r3
 8016cfe:	f7fe ff56 	bl	8015bae <RegionCommonValueInRange>
 8016d02:	4603      	mov	r3, r0
 8016d04:	2b00      	cmp	r3, #0
 8016d06:	bf14      	ite	ne
 8016d08:	2301      	movne	r3, #1
 8016d0a:	2300      	moveq	r3, #0
 8016d0c:	b2db      	uxtb	r3, r3
 8016d0e:	e020      	b.n	8016d52 <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8016d10:	687b      	ldr	r3, [r7, #4]
 8016d12:	f993 3000 	ldrsb.w	r3, [r3]
 8016d16:	2207      	movs	r2, #7
 8016d18:	2100      	movs	r1, #0
 8016d1a:	4618      	mov	r0, r3
 8016d1c:	f7fe ff47 	bl	8015bae <RegionCommonValueInRange>
 8016d20:	4603      	mov	r3, r0
 8016d22:	2b00      	cmp	r3, #0
 8016d24:	bf14      	ite	ne
 8016d26:	2301      	movne	r3, #1
 8016d28:	2300      	moveq	r3, #0
 8016d2a:	b2db      	uxtb	r3, r3
 8016d2c:	e011      	b.n	8016d52 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8016d2e:	687b      	ldr	r3, [r7, #4]
 8016d30:	f993 3000 	ldrsb.w	r3, [r3]
 8016d34:	2207      	movs	r2, #7
 8016d36:	2100      	movs	r1, #0
 8016d38:	4618      	mov	r0, r3
 8016d3a:	f7fe ff38 	bl	8015bae <RegionCommonValueInRange>
 8016d3e:	4603      	mov	r3, r0
 8016d40:	2b00      	cmp	r3, #0
 8016d42:	bf14      	ite	ne
 8016d44:	2301      	movne	r3, #1
 8016d46:	2300      	moveq	r3, #0
 8016d48:	b2db      	uxtb	r3, r3
 8016d4a:	e002      	b.n	8016d52 <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8016d4c:	2301      	movs	r3, #1
 8016d4e:	e000      	b.n	8016d52 <RegionEU868Verify+0xee>
        }
        default:
            return false;
 8016d50:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 8016d52:	4618      	mov	r0, r3
 8016d54:	3710      	adds	r7, #16
 8016d56:	46bd      	mov	sp, r7
 8016d58:	bd80      	pop	{r7, pc}
 8016d5a:	bf00      	nop

08016d5c <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8016d5c:	b580      	push	{r7, lr}
 8016d5e:	b08a      	sub	sp, #40	; 0x28
 8016d60:	af00      	add	r7, sp, #0
 8016d62:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8016d64:	2350      	movs	r3, #80	; 0x50
 8016d66:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8016d6a:	687b      	ldr	r3, [r7, #4]
 8016d6c:	7a1b      	ldrb	r3, [r3, #8]
 8016d6e:	2b10      	cmp	r3, #16
 8016d70:	d162      	bne.n	8016e38 <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8016d72:	687b      	ldr	r3, [r7, #4]
 8016d74:	685b      	ldr	r3, [r3, #4]
 8016d76:	330f      	adds	r3, #15
 8016d78:	781b      	ldrb	r3, [r3, #0]
 8016d7a:	2b00      	cmp	r3, #0
 8016d7c:	d15e      	bne.n	8016e3c <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8016d7e:	2300      	movs	r3, #0
 8016d80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016d84:	2303      	movs	r3, #3
 8016d86:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016d8a:	e050      	b.n	8016e2e <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8016d8c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016d90:	2b07      	cmp	r3, #7
 8016d92:	d824      	bhi.n	8016dde <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	685a      	ldr	r2, [r3, #4]
 8016d98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016d9c:	4413      	add	r3, r2
 8016d9e:	781b      	ldrb	r3, [r3, #0]
 8016da0:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8016da2:	69ba      	ldr	r2, [r7, #24]
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	6859      	ldr	r1, [r3, #4]
 8016da8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016dac:	3301      	adds	r3, #1
 8016dae:	440b      	add	r3, r1
 8016db0:	781b      	ldrb	r3, [r3, #0]
 8016db2:	021b      	lsls	r3, r3, #8
 8016db4:	4313      	orrs	r3, r2
 8016db6:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8016db8:	69ba      	ldr	r2, [r7, #24]
 8016dba:	687b      	ldr	r3, [r7, #4]
 8016dbc:	6859      	ldr	r1, [r3, #4]
 8016dbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016dc2:	3302      	adds	r3, #2
 8016dc4:	440b      	add	r3, r1
 8016dc6:	781b      	ldrb	r3, [r3, #0]
 8016dc8:	041b      	lsls	r3, r3, #16
 8016dca:	4313      	orrs	r3, r2
 8016dcc:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 8016dce:	69bb      	ldr	r3, [r7, #24]
 8016dd0:	2264      	movs	r2, #100	; 0x64
 8016dd2:	fb02 f303 	mul.w	r3, r2, r3
 8016dd6:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8016dd8:	2300      	movs	r3, #0
 8016dda:	61fb      	str	r3, [r7, #28]
 8016ddc:	e006      	b.n	8016dec <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 8016dde:	2300      	movs	r3, #0
 8016de0:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 8016de2:	2300      	movs	r3, #0
 8016de4:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8016de8:	2300      	movs	r3, #0
 8016dea:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8016dec:	69bb      	ldr	r3, [r7, #24]
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	d00b      	beq.n	8016e0a <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 8016df2:	f107 0318 	add.w	r3, r7, #24
 8016df6:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8016df8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016dfc:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 8016dfe:	f107 0310 	add.w	r3, r7, #16
 8016e02:	4618      	mov	r0, r3
 8016e04:	f000 fd14 	bl	8017830 <RegionEU868ChannelAdd>
 8016e08:	e007      	b.n	8016e1a <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8016e0a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016e0e:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 8016e10:	f107 030c 	add.w	r3, r7, #12
 8016e14:	4618      	mov	r0, r3
 8016e16:	f000 fdad 	bl	8017974 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8016e1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016e1e:	3303      	adds	r3, #3
 8016e20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016e24:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016e28:	3301      	adds	r3, #1
 8016e2a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016e2e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016e32:	2b0f      	cmp	r3, #15
 8016e34:	d9aa      	bls.n	8016d8c <RegionEU868ApplyCFList+0x30>
 8016e36:	e002      	b.n	8016e3e <RegionEU868ApplyCFList+0xe2>
        return;
 8016e38:	bf00      	nop
 8016e3a:	e000      	b.n	8016e3e <RegionEU868ApplyCFList+0xe2>
        return;
 8016e3c:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8016e3e:	3728      	adds	r7, #40	; 0x28
 8016e40:	46bd      	mov	sp, r7
 8016e42:	bd80      	pop	{r7, pc}

08016e44 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8016e44:	b580      	push	{r7, lr}
 8016e46:	b082      	sub	sp, #8
 8016e48:	af00      	add	r7, sp, #0
 8016e4a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 8016e4c:	687b      	ldr	r3, [r7, #4]
 8016e4e:	791b      	ldrb	r3, [r3, #4]
 8016e50:	2b00      	cmp	r3, #0
 8016e52:	d002      	beq.n	8016e5a <RegionEU868ChanMaskSet+0x16>
 8016e54:	2b01      	cmp	r3, #1
 8016e56:	d00b      	beq.n	8016e70 <RegionEU868ChanMaskSet+0x2c>
 8016e58:	e015      	b.n	8016e86 <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8016e5a:	4b0e      	ldr	r3, [pc, #56]	; (8016e94 <RegionEU868ChanMaskSet+0x50>)
 8016e5c:	681b      	ldr	r3, [r3, #0]
 8016e5e:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8016e62:	687b      	ldr	r3, [r7, #4]
 8016e64:	681b      	ldr	r3, [r3, #0]
 8016e66:	2201      	movs	r2, #1
 8016e68:	4619      	mov	r1, r3
 8016e6a:	f7fe ff1d 	bl	8015ca8 <RegionCommonChanMaskCopy>
            break;
 8016e6e:	e00c      	b.n	8016e8a <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8016e70:	4b08      	ldr	r3, [pc, #32]	; (8016e94 <RegionEU868ChanMaskSet+0x50>)
 8016e72:	681b      	ldr	r3, [r3, #0]
 8016e74:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	681b      	ldr	r3, [r3, #0]
 8016e7c:	2201      	movs	r2, #1
 8016e7e:	4619      	mov	r1, r3
 8016e80:	f7fe ff12 	bl	8015ca8 <RegionCommonChanMaskCopy>
            break;
 8016e84:	e001      	b.n	8016e8a <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 8016e86:	2300      	movs	r3, #0
 8016e88:	e000      	b.n	8016e8c <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 8016e8a:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8016e8c:	4618      	mov	r0, r3
 8016e8e:	3708      	adds	r7, #8
 8016e90:	46bd      	mov	sp, r7
 8016e92:	bd80      	pop	{r7, pc}
 8016e94:	20001ad0 	.word	0x20001ad0

08016e98 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8016e98:	b580      	push	{r7, lr}
 8016e9a:	b088      	sub	sp, #32
 8016e9c:	af02      	add	r7, sp, #8
 8016e9e:	60ba      	str	r2, [r7, #8]
 8016ea0:	607b      	str	r3, [r7, #4]
 8016ea2:	4603      	mov	r3, r0
 8016ea4:	73fb      	strb	r3, [r7, #15]
 8016ea6:	460b      	mov	r3, r1
 8016ea8:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 8016eaa:	2300      	movs	r3, #0
 8016eac:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8016eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016eb2:	2b07      	cmp	r3, #7
 8016eb4:	bfa8      	it	ge
 8016eb6:	2307      	movge	r3, #7
 8016eb8:	b25a      	sxtb	r2, r3
 8016eba:	687b      	ldr	r3, [r7, #4]
 8016ebc:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016ec4:	491e      	ldr	r1, [pc, #120]	; (8016f40 <RegionEU868ComputeRxWindowParameters+0xa8>)
 8016ec6:	4618      	mov	r0, r3
 8016ec8:	f7ff fb8e 	bl	80165e8 <RegionCommonGetBandwidth>
 8016ecc:	4603      	mov	r3, r0
 8016ece:	b2da      	uxtb	r2, r3
 8016ed0:	687b      	ldr	r3, [r7, #4]
 8016ed2:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016eda:	2b07      	cmp	r3, #7
 8016edc:	d10a      	bne.n	8016ef4 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 8016ede:	687b      	ldr	r3, [r7, #4]
 8016ee0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016ee4:	461a      	mov	r2, r3
 8016ee6:	4b17      	ldr	r3, [pc, #92]	; (8016f44 <RegionEU868ComputeRxWindowParameters+0xac>)
 8016ee8:	5c9b      	ldrb	r3, [r3, r2]
 8016eea:	4618      	mov	r0, r3
 8016eec:	f7ff f910 	bl	8016110 <RegionCommonComputeSymbolTimeFsk>
 8016ef0:	6178      	str	r0, [r7, #20]
 8016ef2:	e011      	b.n	8016f18 <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8016ef4:	687b      	ldr	r3, [r7, #4]
 8016ef6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016efa:	461a      	mov	r2, r3
 8016efc:	4b11      	ldr	r3, [pc, #68]	; (8016f44 <RegionEU868ComputeRxWindowParameters+0xac>)
 8016efe:	5c9a      	ldrb	r2, [r3, r2]
 8016f00:	687b      	ldr	r3, [r7, #4]
 8016f02:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016f06:	4619      	mov	r1, r3
 8016f08:	4b0d      	ldr	r3, [pc, #52]	; (8016f40 <RegionEU868ComputeRxWindowParameters+0xa8>)
 8016f0a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016f0e:	4619      	mov	r1, r3
 8016f10:	4610      	mov	r0, r2
 8016f12:	f7ff f8e7 	bl	80160e4 <RegionCommonComputeSymbolTimeLoRa>
 8016f16:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8016f18:	4b0b      	ldr	r3, [pc, #44]	; (8016f48 <RegionEU868ComputeRxWindowParameters+0xb0>)
 8016f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016f1c:	4798      	blx	r3
 8016f1e:	687b      	ldr	r3, [r7, #4]
 8016f20:	3308      	adds	r3, #8
 8016f22:	687a      	ldr	r2, [r7, #4]
 8016f24:	320c      	adds	r2, #12
 8016f26:	7bb9      	ldrb	r1, [r7, #14]
 8016f28:	9201      	str	r2, [sp, #4]
 8016f2a:	9300      	str	r3, [sp, #0]
 8016f2c:	4603      	mov	r3, r0
 8016f2e:	68ba      	ldr	r2, [r7, #8]
 8016f30:	6978      	ldr	r0, [r7, #20]
 8016f32:	f7ff f8fd 	bl	8016130 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 8016f36:	bf00      	nop
 8016f38:	3718      	adds	r7, #24
 8016f3a:	46bd      	mov	sp, r7
 8016f3c:	bd80      	pop	{r7, pc}
 8016f3e:	bf00      	nop
 8016f40:	0801e9a0 	.word	0x0801e9a0
 8016f44:	0801e998 	.word	0x0801e998
 8016f48:	0801ea54 	.word	0x0801ea54

08016f4c <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8016f4c:	b5b0      	push	{r4, r5, r7, lr}
 8016f4e:	b090      	sub	sp, #64	; 0x40
 8016f50:	af0a      	add	r7, sp, #40	; 0x28
 8016f52:	6078      	str	r0, [r7, #4]
 8016f54:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	785b      	ldrb	r3, [r3, #1]
 8016f5a:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8016f5c:	2300      	movs	r3, #0
 8016f5e:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8016f60:	2300      	movs	r3, #0
 8016f62:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8016f64:	687b      	ldr	r3, [r7, #4]
 8016f66:	685b      	ldr	r3, [r3, #4]
 8016f68:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8016f6a:	4b5a      	ldr	r3, [pc, #360]	; (80170d4 <RegionEU868RxConfig+0x188>)
 8016f6c:	685b      	ldr	r3, [r3, #4]
 8016f6e:	4798      	blx	r3
 8016f70:	4603      	mov	r3, r0
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	d001      	beq.n	8016f7a <RegionEU868RxConfig+0x2e>
    {
        return false;
 8016f76:	2300      	movs	r3, #0
 8016f78:	e0a8      	b.n	80170cc <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8016f7a:	687b      	ldr	r3, [r7, #4]
 8016f7c:	7cdb      	ldrb	r3, [r3, #19]
 8016f7e:	2b00      	cmp	r3, #0
 8016f80:	d126      	bne.n	8016fd0 <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8016f82:	4b55      	ldr	r3, [pc, #340]	; (80170d8 <RegionEU868RxConfig+0x18c>)
 8016f84:	681a      	ldr	r2, [r3, #0]
 8016f86:	687b      	ldr	r3, [r7, #4]
 8016f88:	781b      	ldrb	r3, [r3, #0]
 8016f8a:	4619      	mov	r1, r3
 8016f8c:	460b      	mov	r3, r1
 8016f8e:	005b      	lsls	r3, r3, #1
 8016f90:	440b      	add	r3, r1
 8016f92:	009b      	lsls	r3, r3, #2
 8016f94:	4413      	add	r3, r2
 8016f96:	681b      	ldr	r3, [r3, #0]
 8016f98:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8016f9a:	4b4f      	ldr	r3, [pc, #316]	; (80170d8 <RegionEU868RxConfig+0x18c>)
 8016f9c:	681a      	ldr	r2, [r3, #0]
 8016f9e:	687b      	ldr	r3, [r7, #4]
 8016fa0:	781b      	ldrb	r3, [r3, #0]
 8016fa2:	4619      	mov	r1, r3
 8016fa4:	460b      	mov	r3, r1
 8016fa6:	005b      	lsls	r3, r3, #1
 8016fa8:	440b      	add	r3, r1
 8016faa:	009b      	lsls	r3, r3, #2
 8016fac:	4413      	add	r3, r2
 8016fae:	3304      	adds	r3, #4
 8016fb0:	681b      	ldr	r3, [r3, #0]
 8016fb2:	2b00      	cmp	r3, #0
 8016fb4:	d00c      	beq.n	8016fd0 <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 8016fb6:	4b48      	ldr	r3, [pc, #288]	; (80170d8 <RegionEU868RxConfig+0x18c>)
 8016fb8:	681a      	ldr	r2, [r3, #0]
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	781b      	ldrb	r3, [r3, #0]
 8016fbe:	4619      	mov	r1, r3
 8016fc0:	460b      	mov	r3, r1
 8016fc2:	005b      	lsls	r3, r3, #1
 8016fc4:	440b      	add	r3, r1
 8016fc6:	009b      	lsls	r3, r3, #2
 8016fc8:	4413      	add	r3, r2
 8016fca:	3304      	adds	r3, #4
 8016fcc:	681b      	ldr	r3, [r3, #0]
 8016fce:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8016fd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016fd4:	4a41      	ldr	r2, [pc, #260]	; (80170dc <RegionEU868RxConfig+0x190>)
 8016fd6:	5cd3      	ldrb	r3, [r2, r3]
 8016fd8:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8016fda:	4b3e      	ldr	r3, [pc, #248]	; (80170d4 <RegionEU868RxConfig+0x188>)
 8016fdc:	68db      	ldr	r3, [r3, #12]
 8016fde:	6938      	ldr	r0, [r7, #16]
 8016fe0:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8016fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016fe6:	2b07      	cmp	r3, #7
 8016fe8:	d128      	bne.n	801703c <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 8016fea:	2300      	movs	r3, #0
 8016fec:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8016fee:	4b39      	ldr	r3, [pc, #228]	; (80170d4 <RegionEU868RxConfig+0x188>)
 8016ff0:	699c      	ldr	r4, [r3, #24]
 8016ff2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016ff6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8016ffa:	fb02 f303 	mul.w	r3, r2, r3
 8016ffe:	4619      	mov	r1, r3
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	689b      	ldr	r3, [r3, #8]
 8017004:	b29b      	uxth	r3, r3
 8017006:	687a      	ldr	r2, [r7, #4]
 8017008:	7c92      	ldrb	r2, [r2, #18]
 801700a:	7df8      	ldrb	r0, [r7, #23]
 801700c:	9209      	str	r2, [sp, #36]	; 0x24
 801700e:	2200      	movs	r2, #0
 8017010:	9208      	str	r2, [sp, #32]
 8017012:	2200      	movs	r2, #0
 8017014:	9207      	str	r2, [sp, #28]
 8017016:	2200      	movs	r2, #0
 8017018:	9206      	str	r2, [sp, #24]
 801701a:	2201      	movs	r2, #1
 801701c:	9205      	str	r2, [sp, #20]
 801701e:	2200      	movs	r2, #0
 8017020:	9204      	str	r2, [sp, #16]
 8017022:	2200      	movs	r2, #0
 8017024:	9203      	str	r2, [sp, #12]
 8017026:	9302      	str	r3, [sp, #8]
 8017028:	2305      	movs	r3, #5
 801702a:	9301      	str	r3, [sp, #4]
 801702c:	4b2c      	ldr	r3, [pc, #176]	; (80170e0 <RegionEU868RxConfig+0x194>)
 801702e:	9300      	str	r3, [sp, #0]
 8017030:	2300      	movs	r3, #0
 8017032:	460a      	mov	r2, r1
 8017034:	f24c 3150 	movw	r1, #50000	; 0xc350
 8017038:	47a0      	blx	r4
 801703a:	e024      	b.n	8017086 <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 801703c:	2301      	movs	r3, #1
 801703e:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8017040:	4b24      	ldr	r3, [pc, #144]	; (80170d4 <RegionEU868RxConfig+0x188>)
 8017042:	699c      	ldr	r4, [r3, #24]
 8017044:	687b      	ldr	r3, [r7, #4]
 8017046:	789b      	ldrb	r3, [r3, #2]
 8017048:	461d      	mov	r5, r3
 801704a:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	689b      	ldr	r3, [r3, #8]
 8017052:	b29b      	uxth	r3, r3
 8017054:	687a      	ldr	r2, [r7, #4]
 8017056:	7c92      	ldrb	r2, [r2, #18]
 8017058:	7df8      	ldrb	r0, [r7, #23]
 801705a:	9209      	str	r2, [sp, #36]	; 0x24
 801705c:	2201      	movs	r2, #1
 801705e:	9208      	str	r2, [sp, #32]
 8017060:	2200      	movs	r2, #0
 8017062:	9207      	str	r2, [sp, #28]
 8017064:	2200      	movs	r2, #0
 8017066:	9206      	str	r2, [sp, #24]
 8017068:	2200      	movs	r2, #0
 801706a:	9205      	str	r2, [sp, #20]
 801706c:	2200      	movs	r2, #0
 801706e:	9204      	str	r2, [sp, #16]
 8017070:	2200      	movs	r2, #0
 8017072:	9203      	str	r2, [sp, #12]
 8017074:	9302      	str	r3, [sp, #8]
 8017076:	2308      	movs	r3, #8
 8017078:	9301      	str	r3, [sp, #4]
 801707a:	2300      	movs	r3, #0
 801707c:	9300      	str	r3, [sp, #0]
 801707e:	2301      	movs	r3, #1
 8017080:	460a      	mov	r2, r1
 8017082:	4629      	mov	r1, r5
 8017084:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 8017086:	687b      	ldr	r3, [r7, #4]
 8017088:	7c5b      	ldrb	r3, [r3, #17]
 801708a:	2b00      	cmp	r3, #0
 801708c:	d005      	beq.n	801709a <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 801708e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017092:	4a14      	ldr	r2, [pc, #80]	; (80170e4 <RegionEU868RxConfig+0x198>)
 8017094:	5cd3      	ldrb	r3, [r2, r3]
 8017096:	75bb      	strb	r3, [r7, #22]
 8017098:	e004      	b.n	80170a4 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 801709a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801709e:	4a12      	ldr	r2, [pc, #72]	; (80170e8 <RegionEU868RxConfig+0x19c>)
 80170a0:	5cd3      	ldrb	r3, [r2, r3]
 80170a2:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 80170a4:	4b0b      	ldr	r3, [pc, #44]	; (80170d4 <RegionEU868RxConfig+0x188>)
 80170a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80170a8:	7dba      	ldrb	r2, [r7, #22]
 80170aa:	320d      	adds	r2, #13
 80170ac:	b2d1      	uxtb	r1, r2
 80170ae:	7dfa      	ldrb	r2, [r7, #23]
 80170b0:	4610      	mov	r0, r2
 80170b2:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 80170b4:	687b      	ldr	r3, [r7, #4]
 80170b6:	7cdb      	ldrb	r3, [r3, #19]
 80170b8:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80170bc:	6939      	ldr	r1, [r7, #16]
 80170be:	4618      	mov	r0, r3
 80170c0:	f7ff fab0 	bl	8016624 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 80170c4:	683b      	ldr	r3, [r7, #0]
 80170c6:	7bfa      	ldrb	r2, [r7, #15]
 80170c8:	701a      	strb	r2, [r3, #0]
    return true;
 80170ca:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 80170cc:	4618      	mov	r0, r3
 80170ce:	3718      	adds	r7, #24
 80170d0:	46bd      	mov	sp, r7
 80170d2:	bdb0      	pop	{r4, r5, r7, pc}
 80170d4:	0801ea54 	.word	0x0801ea54
 80170d8:	20001ad0 	.word	0x20001ad0
 80170dc:	0801e998 	.word	0x0801e998
 80170e0:	00014585 	.word	0x00014585
 80170e4:	0801e9c8 	.word	0x0801e9c8
 80170e8:	0801e9c0 	.word	0x0801e9c0

080170ec <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80170ec:	b590      	push	{r4, r7, lr}
 80170ee:	b093      	sub	sp, #76	; 0x4c
 80170f0:	af0a      	add	r7, sp, #40	; 0x28
 80170f2:	60f8      	str	r0, [r7, #12]
 80170f4:	60b9      	str	r1, [r7, #8]
 80170f6:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 80170f8:	68fb      	ldr	r3, [r7, #12]
 80170fa:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80170fe:	461a      	mov	r2, r3
 8017100:	4b5d      	ldr	r3, [pc, #372]	; (8017278 <RegionEU868TxConfig+0x18c>)
 8017102:	5c9b      	ldrb	r3, [r3, r2]
 8017104:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8017106:	68fb      	ldr	r3, [r7, #12]
 8017108:	f993 0002 	ldrsb.w	r0, [r3, #2]
 801710c:	4b5b      	ldr	r3, [pc, #364]	; (801727c <RegionEU868TxConfig+0x190>)
 801710e:	681a      	ldr	r2, [r3, #0]
 8017110:	4b5b      	ldr	r3, [pc, #364]	; (8017280 <RegionEU868TxConfig+0x194>)
 8017112:	6819      	ldr	r1, [r3, #0]
 8017114:	68fb      	ldr	r3, [r7, #12]
 8017116:	781b      	ldrb	r3, [r3, #0]
 8017118:	461c      	mov	r4, r3
 801711a:	4623      	mov	r3, r4
 801711c:	005b      	lsls	r3, r3, #1
 801711e:	4423      	add	r3, r4
 8017120:	009b      	lsls	r3, r3, #2
 8017122:	440b      	add	r3, r1
 8017124:	3309      	adds	r3, #9
 8017126:	781b      	ldrb	r3, [r3, #0]
 8017128:	4619      	mov	r1, r3
 801712a:	460b      	mov	r3, r1
 801712c:	005b      	lsls	r3, r3, #1
 801712e:	440b      	add	r3, r1
 8017130:	00db      	lsls	r3, r3, #3
 8017132:	4413      	add	r3, r2
 8017134:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8017138:	4619      	mov	r1, r3
 801713a:	f7ff fa40 	bl	80165be <RegionCommonLimitTxPower>
 801713e:	4603      	mov	r3, r0
 8017140:	777b      	strb	r3, [r7, #29]
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8017142:	68fb      	ldr	r3, [r7, #12]
 8017144:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017148:	494e      	ldr	r1, [pc, #312]	; (8017284 <RegionEU868TxConfig+0x198>)
 801714a:	4618      	mov	r0, r3
 801714c:	f7ff fa4c 	bl	80165e8 <RegionCommonGetBandwidth>
 8017150:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8017152:	2300      	movs	r3, #0
 8017154:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8017156:	68fb      	ldr	r3, [r7, #12]
 8017158:	6859      	ldr	r1, [r3, #4]
 801715a:	68fb      	ldr	r3, [r7, #12]
 801715c:	689a      	ldr	r2, [r3, #8]
 801715e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8017162:	4618      	mov	r0, r3
 8017164:	f7ff f89c 	bl	80162a0 <RegionCommonComputeTxPower>
 8017168:	4603      	mov	r3, r0
 801716a:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 801716c:	4b46      	ldr	r3, [pc, #280]	; (8017288 <RegionEU868TxConfig+0x19c>)
 801716e:	68da      	ldr	r2, [r3, #12]
 8017170:	4b43      	ldr	r3, [pc, #268]	; (8017280 <RegionEU868TxConfig+0x194>)
 8017172:	6819      	ldr	r1, [r3, #0]
 8017174:	68fb      	ldr	r3, [r7, #12]
 8017176:	781b      	ldrb	r3, [r3, #0]
 8017178:	4618      	mov	r0, r3
 801717a:	4603      	mov	r3, r0
 801717c:	005b      	lsls	r3, r3, #1
 801717e:	4403      	add	r3, r0
 8017180:	009b      	lsls	r3, r3, #2
 8017182:	440b      	add	r3, r1
 8017184:	681b      	ldr	r3, [r3, #0]
 8017186:	4618      	mov	r0, r3
 8017188:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 801718a:	68fb      	ldr	r3, [r7, #12]
 801718c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017190:	2b07      	cmp	r3, #7
 8017192:	d124      	bne.n	80171de <RegionEU868TxConfig+0xf2>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8017194:	2300      	movs	r3, #0
 8017196:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8017198:	4b3b      	ldr	r3, [pc, #236]	; (8017288 <RegionEU868TxConfig+0x19c>)
 801719a:	69dc      	ldr	r4, [r3, #28]
 801719c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80171a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80171a4:	fb02 f303 	mul.w	r3, r2, r3
 80171a8:	461a      	mov	r2, r3
 80171aa:	f997 1017 	ldrsb.w	r1, [r7, #23]
 80171ae:	7ff8      	ldrb	r0, [r7, #31]
 80171b0:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80171b4:	9308      	str	r3, [sp, #32]
 80171b6:	2300      	movs	r3, #0
 80171b8:	9307      	str	r3, [sp, #28]
 80171ba:	2300      	movs	r3, #0
 80171bc:	9306      	str	r3, [sp, #24]
 80171be:	2300      	movs	r3, #0
 80171c0:	9305      	str	r3, [sp, #20]
 80171c2:	2301      	movs	r3, #1
 80171c4:	9304      	str	r3, [sp, #16]
 80171c6:	2300      	movs	r3, #0
 80171c8:	9303      	str	r3, [sp, #12]
 80171ca:	2305      	movs	r3, #5
 80171cc:	9302      	str	r3, [sp, #8]
 80171ce:	2300      	movs	r3, #0
 80171d0:	9301      	str	r3, [sp, #4]
 80171d2:	9200      	str	r2, [sp, #0]
 80171d4:	69bb      	ldr	r3, [r7, #24]
 80171d6:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80171da:	47a0      	blx	r4
 80171dc:	e01d      	b.n	801721a <RegionEU868TxConfig+0x12e>
    }
    else
    {
        modem = MODEM_LORA;
 80171de:	2301      	movs	r3, #1
 80171e0:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 80171e2:	4b29      	ldr	r3, [pc, #164]	; (8017288 <RegionEU868TxConfig+0x19c>)
 80171e4:	69dc      	ldr	r4, [r3, #28]
 80171e6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80171ea:	f997 1017 	ldrsb.w	r1, [r7, #23]
 80171ee:	7ff8      	ldrb	r0, [r7, #31]
 80171f0:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80171f4:	9208      	str	r2, [sp, #32]
 80171f6:	2200      	movs	r2, #0
 80171f8:	9207      	str	r2, [sp, #28]
 80171fa:	2200      	movs	r2, #0
 80171fc:	9206      	str	r2, [sp, #24]
 80171fe:	2200      	movs	r2, #0
 8017200:	9205      	str	r2, [sp, #20]
 8017202:	2201      	movs	r2, #1
 8017204:	9204      	str	r2, [sp, #16]
 8017206:	2200      	movs	r2, #0
 8017208:	9203      	str	r2, [sp, #12]
 801720a:	2208      	movs	r2, #8
 801720c:	9202      	str	r2, [sp, #8]
 801720e:	2201      	movs	r2, #1
 8017210:	9201      	str	r2, [sp, #4]
 8017212:	9300      	str	r3, [sp, #0]
 8017214:	69bb      	ldr	r3, [r7, #24]
 8017216:	2200      	movs	r2, #0
 8017218:	47a0      	blx	r4
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 801721a:	4b19      	ldr	r3, [pc, #100]	; (8017280 <RegionEU868TxConfig+0x194>)
 801721c:	681a      	ldr	r2, [r3, #0]
 801721e:	68fb      	ldr	r3, [r7, #12]
 8017220:	781b      	ldrb	r3, [r3, #0]
 8017222:	4619      	mov	r1, r3
 8017224:	460b      	mov	r3, r1
 8017226:	005b      	lsls	r3, r3, #1
 8017228:	440b      	add	r3, r1
 801722a:	009b      	lsls	r3, r3, #2
 801722c:	4413      	add	r3, r2
 801722e:	681a      	ldr	r2, [r3, #0]
 8017230:	68fb      	ldr	r3, [r7, #12]
 8017232:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017236:	4619      	mov	r1, r3
 8017238:	4610      	mov	r0, r2
 801723a:	f7ff fa25 	bl	8016688 <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 801723e:	68fb      	ldr	r3, [r7, #12]
 8017240:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8017244:	68fb      	ldr	r3, [r7, #12]
 8017246:	899b      	ldrh	r3, [r3, #12]
 8017248:	4619      	mov	r1, r3
 801724a:	4610      	mov	r0, r2
 801724c:	f7ff faaa 	bl	80167a4 <GetTimeOnAir>
 8017250:	4602      	mov	r2, r0
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8017256:	4b0c      	ldr	r3, [pc, #48]	; (8017288 <RegionEU868TxConfig+0x19c>)
 8017258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801725a:	68fa      	ldr	r2, [r7, #12]
 801725c:	8992      	ldrh	r2, [r2, #12]
 801725e:	b2d1      	uxtb	r1, r2
 8017260:	7ffa      	ldrb	r2, [r7, #31]
 8017262:	4610      	mov	r0, r2
 8017264:	4798      	blx	r3

    *txPower = txPowerLimited;
 8017266:	68bb      	ldr	r3, [r7, #8]
 8017268:	7f7a      	ldrb	r2, [r7, #29]
 801726a:	701a      	strb	r2, [r3, #0]
    return true;
 801726c:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 801726e:	4618      	mov	r0, r3
 8017270:	3724      	adds	r7, #36	; 0x24
 8017272:	46bd      	mov	sp, r7
 8017274:	bd90      	pop	{r4, r7, pc}
 8017276:	bf00      	nop
 8017278:	0801e998 	.word	0x0801e998
 801727c:	20001ad4 	.word	0x20001ad4
 8017280:	20001ad0 	.word	0x20001ad0
 8017284:	0801e9a0 	.word	0x0801e9a0
 8017288:	0801ea54 	.word	0x0801ea54

0801728c <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801728c:	b590      	push	{r4, r7, lr}
 801728e:	b093      	sub	sp, #76	; 0x4c
 8017290:	af00      	add	r7, sp, #0
 8017292:	60f8      	str	r0, [r7, #12]
 8017294:	60b9      	str	r1, [r7, #8]
 8017296:	607a      	str	r2, [r7, #4]
 8017298:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 801729a:	2307      	movs	r3, #7
 801729c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 80172a0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80172a4:	2200      	movs	r2, #0
 80172a6:	601a      	str	r2, [r3, #0]
 80172a8:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 80172aa:	2300      	movs	r3, #0
 80172ac:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t bytesProcessed = 0;
 80172b0:	2300      	movs	r3, #0
 80172b2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint16_t chMask = 0;
 80172b6:	2300      	movs	r3, #0
 80172b8:	877b      	strh	r3, [r7, #58]	; 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 80172ba:	e085      	b.n	80173c8 <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 80172bc:	68fb      	ldr	r3, [r7, #12]
 80172be:	685a      	ldr	r2, [r3, #4]
 80172c0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80172c4:	4413      	add	r3, r2
 80172c6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80172ca:	4611      	mov	r1, r2
 80172cc:	4618      	mov	r0, r3
 80172ce:	f7fe fe2f 	bl	8015f30 <RegionCommonParseLinkAdrReq>
 80172d2:	4603      	mov	r3, r0
 80172d4:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

        if( nextIndex == 0 )
 80172d8:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80172dc:	2b00      	cmp	r3, #0
 80172de:	d07b      	beq.n	80173d8 <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 80172e0:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80172e4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80172e8:	4413      	add	r3, r2
 80172ea:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 80172ee:	2307      	movs	r3, #7
 80172f0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 80172f4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80172f8:	877b      	strh	r3, [r7, #58]	; 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 80172fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80172fe:	2b00      	cmp	r3, #0
 8017300:	d109      	bne.n	8017316 <RegionEU868LinkAdrReq+0x8a>
 8017302:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017304:	2b00      	cmp	r3, #0
 8017306:	d106      	bne.n	8017316 <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 8017308:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801730c:	f023 0301 	bic.w	r3, r3, #1
 8017310:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8017314:	e058      	b.n	80173c8 <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8017316:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801731a:	2b00      	cmp	r3, #0
 801731c:	d003      	beq.n	8017326 <RegionEU868LinkAdrReq+0x9a>
 801731e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8017322:	2b05      	cmp	r3, #5
 8017324:	d903      	bls.n	801732e <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8017326:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 801732a:	2b06      	cmp	r3, #6
 801732c:	d906      	bls.n	801733c <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 801732e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8017332:	f023 0301 	bic.w	r3, r3, #1
 8017336:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801733a:	e045      	b.n	80173c8 <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 801733c:	2300      	movs	r3, #0
 801733e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8017342:	e03d      	b.n	80173c0 <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8017344:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8017348:	2b06      	cmp	r3, #6
 801734a:	d118      	bne.n	801737e <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 801734c:	4b5f      	ldr	r3, [pc, #380]	; (80174cc <RegionEU868LinkAdrReq+0x240>)
 801734e:	6819      	ldr	r1, [r3, #0]
 8017350:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8017354:	4613      	mov	r3, r2
 8017356:	005b      	lsls	r3, r3, #1
 8017358:	4413      	add	r3, r2
 801735a:	009b      	lsls	r3, r3, #2
 801735c:	440b      	add	r3, r1
 801735e:	681b      	ldr	r3, [r3, #0]
 8017360:	2b00      	cmp	r3, #0
 8017362:	d028      	beq.n	80173b6 <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 8017364:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8017368:	2201      	movs	r2, #1
 801736a:	fa02 f303 	lsl.w	r3, r2, r3
 801736e:	b21a      	sxth	r2, r3
 8017370:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017372:	b21b      	sxth	r3, r3
 8017374:	4313      	orrs	r3, r2
 8017376:	b21b      	sxth	r3, r3
 8017378:	b29b      	uxth	r3, r3
 801737a:	877b      	strh	r3, [r7, #58]	; 0x3a
 801737c:	e01b      	b.n	80173b6 <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801737e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017380:	461a      	mov	r2, r3
 8017382:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8017386:	fa42 f303 	asr.w	r3, r2, r3
 801738a:	f003 0301 	and.w	r3, r3, #1
 801738e:	2b00      	cmp	r3, #0
 8017390:	d011      	beq.n	80173b6 <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8017392:	4b4e      	ldr	r3, [pc, #312]	; (80174cc <RegionEU868LinkAdrReq+0x240>)
 8017394:	6819      	ldr	r1, [r3, #0]
 8017396:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 801739a:	4613      	mov	r3, r2
 801739c:	005b      	lsls	r3, r3, #1
 801739e:	4413      	add	r3, r2
 80173a0:	009b      	lsls	r3, r3, #2
 80173a2:	440b      	add	r3, r1
 80173a4:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80173a6:	2b00      	cmp	r3, #0
 80173a8:	d105      	bne.n	80173b6 <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 80173aa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80173ae:	f023 0301 	bic.w	r3, r3, #1
 80173b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 80173b6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80173ba:	3301      	adds	r3, #1
 80173bc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80173c0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80173c4:	2b0f      	cmp	r3, #15
 80173c6:	d9bd      	bls.n	8017344 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 80173c8:	68fb      	ldr	r3, [r7, #12]
 80173ca:	7a1b      	ldrb	r3, [r3, #8]
 80173cc:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80173d0:	429a      	cmp	r2, r3
 80173d2:	f4ff af73 	bcc.w	80172bc <RegionEU868LinkAdrReq+0x30>
 80173d6:	e000      	b.n	80173da <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 80173d8:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 80173da:	2302      	movs	r3, #2
 80173dc:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 80173e0:	68fb      	ldr	r3, [r7, #12]
 80173e2:	7a5b      	ldrb	r3, [r3, #9]
 80173e4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 80173e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80173ec:	4618      	mov	r0, r3
 80173ee:	f7ff fa29 	bl	8016844 <RegionEU868GetPhyParam>
 80173f2:	4603      	mov	r3, r0
 80173f4:	633b      	str	r3, [r7, #48]	; 0x30

    linkAdrVerifyParams.Status = status;
 80173f6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80173fa:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 80173fc:	68fb      	ldr	r3, [r7, #12]
 80173fe:	7a9b      	ldrb	r3, [r3, #10]
 8017400:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8017402:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 8017406:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8017408:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 801740c:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801740e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8017412:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8017414:	68fb      	ldr	r3, [r7, #12]
 8017416:	f993 300b 	ldrsb.w	r3, [r3, #11]
 801741a:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 801741c:	68fb      	ldr	r3, [r7, #12]
 801741e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8017422:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8017424:	68fb      	ldr	r3, [r7, #12]
 8017426:	7b5b      	ldrb	r3, [r3, #13]
 8017428:	b25b      	sxtb	r3, r3
 801742a:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 801742c:	2310      	movs	r3, #16
 801742e:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8017430:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8017434:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8017436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017438:	b25b      	sxtb	r3, r3
 801743a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 801743e:	2307      	movs	r3, #7
 8017440:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8017444:	4b21      	ldr	r3, [pc, #132]	; (80174cc <RegionEU868LinkAdrReq+0x240>)
 8017446:	681b      	ldr	r3, [r3, #0]
 8017448:	62bb      	str	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 801744a:	2307      	movs	r3, #7
 801744c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8017450:	2300      	movs	r3, #0
 8017452:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8017456:	68fb      	ldr	r3, [r7, #12]
 8017458:	681b      	ldr	r3, [r3, #0]
 801745a:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 801745c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8017460:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8017464:	1c9a      	adds	r2, r3, #2
 8017466:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801746a:	1c59      	adds	r1, r3, #1
 801746c:	f107 0010 	add.w	r0, r7, #16
 8017470:	4623      	mov	r3, r4
 8017472:	f7fe fdae 	bl	8015fd2 <RegionCommonLinkAdrReqVerifyParams>
 8017476:	4603      	mov	r3, r0
 8017478:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 801747c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8017480:	2b07      	cmp	r3, #7
 8017482:	d10d      	bne.n	80174a0 <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8017484:	4b11      	ldr	r3, [pc, #68]	; (80174cc <RegionEU868LinkAdrReq+0x240>)
 8017486:	681b      	ldr	r3, [r3, #0]
 8017488:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801748c:	220c      	movs	r2, #12
 801748e:	2100      	movs	r1, #0
 8017490:	4618      	mov	r0, r3
 8017492:	f001 fd31 	bl	8018ef8 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8017496:	4b0d      	ldr	r3, [pc, #52]	; (80174cc <RegionEU868LinkAdrReq+0x240>)
 8017498:	681b      	ldr	r3, [r3, #0]
 801749a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801749c:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 80174a0:	f997 203d 	ldrsb.w	r2, [r7, #61]	; 0x3d
 80174a4:	68bb      	ldr	r3, [r7, #8]
 80174a6:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 80174a8:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 80174ac:	687b      	ldr	r3, [r7, #4]
 80174ae:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 80174b0:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80174b4:	683b      	ldr	r3, [r7, #0]
 80174b6:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 80174b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80174ba:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80174be:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 80174c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80174c4:	4618      	mov	r0, r3
 80174c6:	374c      	adds	r7, #76	; 0x4c
 80174c8:	46bd      	mov	sp, r7
 80174ca:	bd90      	pop	{r4, r7, pc}
 80174cc:	20001ad0 	.word	0x20001ad0

080174d0 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 80174d0:	b580      	push	{r7, lr}
 80174d2:	b084      	sub	sp, #16
 80174d4:	af00      	add	r7, sp, #0
 80174d6:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 80174d8:	2307      	movs	r3, #7
 80174da:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 80174dc:	2300      	movs	r3, #0
 80174de:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 80174e0:	687b      	ldr	r3, [r7, #4]
 80174e2:	685b      	ldr	r3, [r3, #4]
 80174e4:	f107 020e 	add.w	r2, r7, #14
 80174e8:	4611      	mov	r1, r2
 80174ea:	4618      	mov	r0, r3
 80174ec:	f7ff f8e4 	bl	80166b8 <VerifyRfFreq>
 80174f0:	4603      	mov	r3, r0
 80174f2:	f083 0301 	eor.w	r3, r3, #1
 80174f6:	b2db      	uxtb	r3, r3
 80174f8:	2b00      	cmp	r3, #0
 80174fa:	d003      	beq.n	8017504 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 80174fc:	7bfb      	ldrb	r3, [r7, #15]
 80174fe:	f023 0301 	bic.w	r3, r3, #1
 8017502:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	f993 3000 	ldrsb.w	r3, [r3]
 801750a:	2207      	movs	r2, #7
 801750c:	2100      	movs	r1, #0
 801750e:	4618      	mov	r0, r3
 8017510:	f7fe fb4d 	bl	8015bae <RegionCommonValueInRange>
 8017514:	4603      	mov	r3, r0
 8017516:	2b00      	cmp	r3, #0
 8017518:	d103      	bne.n	8017522 <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 801751a:	7bfb      	ldrb	r3, [r7, #15]
 801751c:	f023 0302 	bic.w	r3, r3, #2
 8017520:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8017522:	687b      	ldr	r3, [r7, #4]
 8017524:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017528:	2205      	movs	r2, #5
 801752a:	2100      	movs	r1, #0
 801752c:	4618      	mov	r0, r3
 801752e:	f7fe fb3e 	bl	8015bae <RegionCommonValueInRange>
 8017532:	4603      	mov	r3, r0
 8017534:	2b00      	cmp	r3, #0
 8017536:	d103      	bne.n	8017540 <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8017538:	7bfb      	ldrb	r3, [r7, #15]
 801753a:	f023 0304 	bic.w	r3, r3, #4
 801753e:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 8017540:	7bfb      	ldrb	r3, [r7, #15]
}
 8017542:	4618      	mov	r0, r3
 8017544:	3710      	adds	r7, #16
 8017546:	46bd      	mov	sp, r7
 8017548:	bd80      	pop	{r7, pc}
	...

0801754c <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 801754c:	b580      	push	{r7, lr}
 801754e:	b086      	sub	sp, #24
 8017550:	af00      	add	r7, sp, #0
 8017552:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8017554:	2303      	movs	r3, #3
 8017556:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	681b      	ldr	r3, [r3, #0]
 801755c:	681b      	ldr	r3, [r3, #0]
 801755e:	2b00      	cmp	r3, #0
 8017560:	d114      	bne.n	801758c <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8017562:	687b      	ldr	r3, [r7, #4]
 8017564:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8017568:	b2db      	uxtb	r3, r3
 801756a:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 801756c:	f107 0308 	add.w	r3, r7, #8
 8017570:	4618      	mov	r0, r3
 8017572:	f000 f9ff 	bl	8017974 <RegionEU868ChannelsRemove>
 8017576:	4603      	mov	r3, r0
 8017578:	f083 0301 	eor.w	r3, r3, #1
 801757c:	b2db      	uxtb	r3, r3
 801757e:	2b00      	cmp	r3, #0
 8017580:	d03b      	beq.n	80175fa <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 8017582:	7dfb      	ldrb	r3, [r7, #23]
 8017584:	f023 0303 	bic.w	r3, r3, #3
 8017588:	75fb      	strb	r3, [r7, #23]
 801758a:	e036      	b.n	80175fa <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 801758c:	687b      	ldr	r3, [r7, #4]
 801758e:	681b      	ldr	r3, [r3, #0]
 8017590:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8017592:	687b      	ldr	r3, [r7, #4]
 8017594:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8017598:	b2db      	uxtb	r3, r3
 801759a:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 801759c:	f107 030c 	add.w	r3, r7, #12
 80175a0:	4618      	mov	r0, r3
 80175a2:	f000 f945 	bl	8017830 <RegionEU868ChannelAdd>
 80175a6:	4603      	mov	r3, r0
 80175a8:	2b06      	cmp	r3, #6
 80175aa:	d820      	bhi.n	80175ee <RegionEU868NewChannelReq+0xa2>
 80175ac:	a201      	add	r2, pc, #4	; (adr r2, 80175b4 <RegionEU868NewChannelReq+0x68>)
 80175ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80175b2:	bf00      	nop
 80175b4:	080175f9 	.word	0x080175f9
 80175b8:	080175ef 	.word	0x080175ef
 80175bc:	080175ef 	.word	0x080175ef
 80175c0:	080175ef 	.word	0x080175ef
 80175c4:	080175d1 	.word	0x080175d1
 80175c8:	080175db 	.word	0x080175db
 80175cc:	080175e5 	.word	0x080175e5
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 80175d0:	7dfb      	ldrb	r3, [r7, #23]
 80175d2:	f023 0301 	bic.w	r3, r3, #1
 80175d6:	75fb      	strb	r3, [r7, #23]
                break;
 80175d8:	e00f      	b.n	80175fa <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 80175da:	7dfb      	ldrb	r3, [r7, #23]
 80175dc:	f023 0302 	bic.w	r3, r3, #2
 80175e0:	75fb      	strb	r3, [r7, #23]
                break;
 80175e2:	e00a      	b.n	80175fa <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 80175e4:	7dfb      	ldrb	r3, [r7, #23]
 80175e6:	f023 0303 	bic.w	r3, r3, #3
 80175ea:	75fb      	strb	r3, [r7, #23]
                break;
 80175ec:	e005      	b.n	80175fa <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 80175ee:	7dfb      	ldrb	r3, [r7, #23]
 80175f0:	f023 0303 	bic.w	r3, r3, #3
 80175f4:	75fb      	strb	r3, [r7, #23]
                break;
 80175f6:	e000      	b.n	80175fa <RegionEU868NewChannelReq+0xae>
                break;
 80175f8:	bf00      	nop
            }
        }
    }

    return status;
 80175fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80175fe:	4618      	mov	r0, r3
 8017600:	3718      	adds	r7, #24
 8017602:	46bd      	mov	sp, r7
 8017604:	bd80      	pop	{r7, pc}
 8017606:	bf00      	nop

08017608 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8017608:	b480      	push	{r7}
 801760a:	b083      	sub	sp, #12
 801760c:	af00      	add	r7, sp, #0
 801760e:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8017610:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8017614:	4618      	mov	r0, r3
 8017616:	370c      	adds	r7, #12
 8017618:	46bd      	mov	sp, r7
 801761a:	bc80      	pop	{r7}
 801761c:	4770      	bx	lr
	...

08017620 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8017620:	b580      	push	{r7, lr}
 8017622:	b084      	sub	sp, #16
 8017624:	af00      	add	r7, sp, #0
 8017626:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8017628:	2303      	movs	r3, #3
 801762a:	73fb      	strb	r3, [r7, #15]

#if defined( REGION_EU868 )
    uint8_t band = 0;
 801762c:	2300      	movs	r3, #0
 801762e:	73bb      	strb	r3, [r7, #14]

    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 8017630:	687b      	ldr	r3, [r7, #4]
 8017632:	781b      	ldrb	r3, [r3, #0]
 8017634:	2b0f      	cmp	r3, #15
 8017636:	d901      	bls.n	801763c <RegionEU868DlChannelReq+0x1c>
    {
        return 0;
 8017638:	2300      	movs	r3, #0
 801763a:	e035      	b.n	80176a8 <RegionEU868DlChannelReq+0x88>
    }

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 801763c:	687b      	ldr	r3, [r7, #4]
 801763e:	685b      	ldr	r3, [r3, #4]
 8017640:	f107 020e 	add.w	r2, r7, #14
 8017644:	4611      	mov	r1, r2
 8017646:	4618      	mov	r0, r3
 8017648:	f7ff f836 	bl	80166b8 <VerifyRfFreq>
 801764c:	4603      	mov	r3, r0
 801764e:	f083 0301 	eor.w	r3, r3, #1
 8017652:	b2db      	uxtb	r3, r3
 8017654:	2b00      	cmp	r3, #0
 8017656:	d003      	beq.n	8017660 <RegionEU868DlChannelReq+0x40>
    {
        status &= 0xFE;
 8017658:	7bfb      	ldrb	r3, [r7, #15]
 801765a:	f023 0301 	bic.w	r3, r3, #1
 801765e:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8017660:	4b13      	ldr	r3, [pc, #76]	; (80176b0 <RegionEU868DlChannelReq+0x90>)
 8017662:	681a      	ldr	r2, [r3, #0]
 8017664:	687b      	ldr	r3, [r7, #4]
 8017666:	781b      	ldrb	r3, [r3, #0]
 8017668:	4619      	mov	r1, r3
 801766a:	460b      	mov	r3, r1
 801766c:	005b      	lsls	r3, r3, #1
 801766e:	440b      	add	r3, r1
 8017670:	009b      	lsls	r3, r3, #2
 8017672:	4413      	add	r3, r2
 8017674:	681b      	ldr	r3, [r3, #0]
 8017676:	2b00      	cmp	r3, #0
 8017678:	d103      	bne.n	8017682 <RegionEU868DlChannelReq+0x62>
    {
        status &= 0xFD;
 801767a:	7bfb      	ldrb	r3, [r7, #15]
 801767c:	f023 0302 	bic.w	r3, r3, #2
 8017680:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8017682:	7bfb      	ldrb	r3, [r7, #15]
 8017684:	2b03      	cmp	r3, #3
 8017686:	d10d      	bne.n	80176a4 <RegionEU868DlChannelReq+0x84>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8017688:	4b09      	ldr	r3, [pc, #36]	; (80176b0 <RegionEU868DlChannelReq+0x90>)
 801768a:	6819      	ldr	r1, [r3, #0]
 801768c:	687b      	ldr	r3, [r7, #4]
 801768e:	781b      	ldrb	r3, [r3, #0]
 8017690:	4618      	mov	r0, r3
 8017692:	687b      	ldr	r3, [r7, #4]
 8017694:	685a      	ldr	r2, [r3, #4]
 8017696:	4603      	mov	r3, r0
 8017698:	005b      	lsls	r3, r3, #1
 801769a:	4403      	add	r3, r0
 801769c:	009b      	lsls	r3, r3, #2
 801769e:	440b      	add	r3, r1
 80176a0:	3304      	adds	r3, #4
 80176a2:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 80176a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80176a8:	4618      	mov	r0, r3
 80176aa:	3710      	adds	r7, #16
 80176ac:	46bd      	mov	sp, r7
 80176ae:	bd80      	pop	{r7, pc}
 80176b0:	20001ad0 	.word	0x20001ad0

080176b4 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 80176b4:	b480      	push	{r7}
 80176b6:	b083      	sub	sp, #12
 80176b8:	af00      	add	r7, sp, #0
 80176ba:	4603      	mov	r3, r0
 80176bc:	460a      	mov	r2, r1
 80176be:	71fb      	strb	r3, [r7, #7]
 80176c0:	4613      	mov	r3, r2
 80176c2:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 80176c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 80176c8:	4618      	mov	r0, r3
 80176ca:	370c      	adds	r7, #12
 80176cc:	46bd      	mov	sp, r7
 80176ce:	bc80      	pop	{r7}
 80176d0:	4770      	bx	lr
	...

080176d4 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80176d4:	b580      	push	{r7, lr}
 80176d6:	b09a      	sub	sp, #104	; 0x68
 80176d8:	af02      	add	r7, sp, #8
 80176da:	60f8      	str	r0, [r7, #12]
 80176dc:	60b9      	str	r1, [r7, #8]
 80176de:	607a      	str	r2, [r7, #4]
 80176e0:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 80176e2:	2300      	movs	r3, #0
 80176e4:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 80176e8:	2300      	movs	r3, #0
 80176ea:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 80176ee:	2300      	movs	r3, #0
 80176f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80176f2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80176f6:	2200      	movs	r2, #0
 80176f8:	601a      	str	r2, [r3, #0]
 80176fa:	605a      	str	r2, [r3, #4]
 80176fc:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80176fe:	230c      	movs	r3, #12
 8017700:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 8017704:	2307      	movs	r3, #7
 8017706:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8017708:	4b47      	ldr	r3, [pc, #284]	; (8017828 <RegionEU868NextChannel+0x154>)
 801770a:	681b      	ldr	r3, [r3, #0]
 801770c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8017710:	2201      	movs	r2, #1
 8017712:	2100      	movs	r1, #0
 8017714:	4618      	mov	r0, r3
 8017716:	f7fe fa9b 	bl	8015c50 <RegionCommonCountChannels>
 801771a:	4603      	mov	r3, r0
 801771c:	2b00      	cmp	r3, #0
 801771e:	d10a      	bne.n	8017736 <RegionEU868NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8017720:	4b41      	ldr	r3, [pc, #260]	; (8017828 <RegionEU868NextChannel+0x154>)
 8017722:	681b      	ldr	r3, [r3, #0]
 8017724:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 8017728:	4b3f      	ldr	r3, [pc, #252]	; (8017828 <RegionEU868NextChannel+0x154>)
 801772a:	681b      	ldr	r3, [r3, #0]
 801772c:	f042 0207 	orr.w	r2, r2, #7
 8017730:	b292      	uxth	r2, r2
 8017732:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8017736:	68fb      	ldr	r3, [r7, #12]
 8017738:	7a5b      	ldrb	r3, [r3, #9]
 801773a:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 801773c:	68fb      	ldr	r3, [r7, #12]
 801773e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8017742:	b2db      	uxtb	r3, r3
 8017744:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8017746:	4b38      	ldr	r3, [pc, #224]	; (8017828 <RegionEU868NextChannel+0x154>)
 8017748:	681b      	ldr	r3, [r3, #0]
 801774a:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801774e:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8017750:	4b35      	ldr	r3, [pc, #212]	; (8017828 <RegionEU868NextChannel+0x154>)
 8017752:	681b      	ldr	r3, [r3, #0]
 8017754:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 8017756:	4b35      	ldr	r3, [pc, #212]	; (801782c <RegionEU868NextChannel+0x158>)
 8017758:	681b      	ldr	r3, [r3, #0]
 801775a:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 801775c:	2310      	movs	r3, #16
 801775e:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 8017760:	f107 0312 	add.w	r3, r7, #18
 8017764:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8017766:	68fb      	ldr	r3, [r7, #12]
 8017768:	681b      	ldr	r3, [r3, #0]
 801776a:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 801776c:	68fb      	ldr	r3, [r7, #12]
 801776e:	685b      	ldr	r3, [r3, #4]
 8017770:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8017772:	68fb      	ldr	r3, [r7, #12]
 8017774:	7a9b      	ldrb	r3, [r3, #10]
 8017776:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 801777a:	2306      	movs	r3, #6
 801777c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8017780:	68fa      	ldr	r2, [r7, #12]
 8017782:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8017786:	320c      	adds	r2, #12
 8017788:	e892 0003 	ldmia.w	r2, {r0, r1}
 801778c:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8017790:	68fb      	ldr	r3, [r7, #12]
 8017792:	7d1b      	ldrb	r3, [r3, #20]
 8017794:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8017798:	68fb      	ldr	r3, [r7, #12]
 801779a:	f993 2008 	ldrsb.w	r2, [r3, #8]
 801779e:	68fb      	ldr	r3, [r7, #12]
 80177a0:	8adb      	ldrh	r3, [r3, #22]
 80177a2:	4619      	mov	r1, r3
 80177a4:	4610      	mov	r0, r2
 80177a6:	f7fe fffd 	bl	80167a4 <GetTimeOnAir>
 80177aa:	4603      	mov	r3, r0
 80177ac:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 80177ae:	f107 0314 	add.w	r3, r7, #20
 80177b2:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 80177b4:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 80177b8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80177bc:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	9301      	str	r3, [sp, #4]
 80177c4:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 80177c8:	9300      	str	r3, [sp, #0]
 80177ca:	460b      	mov	r3, r1
 80177cc:	6839      	ldr	r1, [r7, #0]
 80177ce:	f7fe fe56 	bl	801647e <RegionCommonIdentifyChannels>
 80177d2:	4603      	mov	r3, r0
 80177d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 80177d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80177dc:	2b00      	cmp	r3, #0
 80177de:	d10e      	bne.n	80177fe <RegionEU868NextChannel+0x12a>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 80177e0:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80177e4:	3b01      	subs	r3, #1
 80177e6:	4619      	mov	r1, r3
 80177e8:	2000      	movs	r0, #0
 80177ea:	f001 fb33 	bl	8018e54 <randr>
 80177ee:	4603      	mov	r3, r0
 80177f0:	3360      	adds	r3, #96	; 0x60
 80177f2:	443b      	add	r3, r7
 80177f4:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 80177f8:	68bb      	ldr	r3, [r7, #8]
 80177fa:	701a      	strb	r2, [r3, #0]
 80177fc:	e00e      	b.n	801781c <RegionEU868NextChannel+0x148>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 80177fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017802:	2b0c      	cmp	r3, #12
 8017804:	d10a      	bne.n	801781c <RegionEU868NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8017806:	4b08      	ldr	r3, [pc, #32]	; (8017828 <RegionEU868NextChannel+0x154>)
 8017808:	681b      	ldr	r3, [r3, #0]
 801780a:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 801780e:	4b06      	ldr	r3, [pc, #24]	; (8017828 <RegionEU868NextChannel+0x154>)
 8017810:	681b      	ldr	r3, [r3, #0]
 8017812:	f042 0207 	orr.w	r2, r2, #7
 8017816:	b292      	uxth	r2, r2
 8017818:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }
    return status;
 801781c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8017820:	4618      	mov	r0, r3
 8017822:	3760      	adds	r7, #96	; 0x60
 8017824:	46bd      	mov	sp, r7
 8017826:	bd80      	pop	{r7, pc}
 8017828:	20001ad0 	.word	0x20001ad0
 801782c:	20001ad4 	.word	0x20001ad4

08017830 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8017830:	b580      	push	{r7, lr}
 8017832:	b084      	sub	sp, #16
 8017834:	af00      	add	r7, sp, #0
 8017836:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8017838:	2300      	movs	r3, #0
 801783a:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 801783c:	2300      	movs	r3, #0
 801783e:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 8017840:	2300      	movs	r3, #0
 8017842:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8017844:	687b      	ldr	r3, [r7, #4]
 8017846:	791b      	ldrb	r3, [r3, #4]
 8017848:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 801784a:	7b7b      	ldrb	r3, [r7, #13]
 801784c:	2b02      	cmp	r3, #2
 801784e:	d801      	bhi.n	8017854 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8017850:	2306      	movs	r3, #6
 8017852:	e089      	b.n	8017968 <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8017854:	7b7b      	ldrb	r3, [r7, #13]
 8017856:	2b0f      	cmp	r3, #15
 8017858:	d901      	bls.n	801785e <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801785a:	2303      	movs	r3, #3
 801785c:	e084      	b.n	8017968 <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 801785e:	687b      	ldr	r3, [r7, #4]
 8017860:	681b      	ldr	r3, [r3, #0]
 8017862:	7a1b      	ldrb	r3, [r3, #8]
 8017864:	f343 0303 	sbfx	r3, r3, #0, #4
 8017868:	b25b      	sxtb	r3, r3
 801786a:	2207      	movs	r2, #7
 801786c:	2100      	movs	r1, #0
 801786e:	4618      	mov	r0, r3
 8017870:	f7fe f99d 	bl	8015bae <RegionCommonValueInRange>
 8017874:	4603      	mov	r3, r0
 8017876:	2b00      	cmp	r3, #0
 8017878:	d101      	bne.n	801787e <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 801787a:	2301      	movs	r3, #1
 801787c:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 801787e:	687b      	ldr	r3, [r7, #4]
 8017880:	681b      	ldr	r3, [r3, #0]
 8017882:	7a1b      	ldrb	r3, [r3, #8]
 8017884:	f343 1303 	sbfx	r3, r3, #4, #4
 8017888:	b25b      	sxtb	r3, r3
 801788a:	2207      	movs	r2, #7
 801788c:	2100      	movs	r1, #0
 801788e:	4618      	mov	r0, r3
 8017890:	f7fe f98d 	bl	8015bae <RegionCommonValueInRange>
 8017894:	4603      	mov	r3, r0
 8017896:	2b00      	cmp	r3, #0
 8017898:	d101      	bne.n	801789e <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 801789a:	2301      	movs	r3, #1
 801789c:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 801789e:	687b      	ldr	r3, [r7, #4]
 80178a0:	681b      	ldr	r3, [r3, #0]
 80178a2:	7a1b      	ldrb	r3, [r3, #8]
 80178a4:	f343 0303 	sbfx	r3, r3, #0, #4
 80178a8:	b25a      	sxtb	r2, r3
 80178aa:	687b      	ldr	r3, [r7, #4]
 80178ac:	681b      	ldr	r3, [r3, #0]
 80178ae:	7a1b      	ldrb	r3, [r3, #8]
 80178b0:	f343 1303 	sbfx	r3, r3, #4, #4
 80178b4:	b25b      	sxtb	r3, r3
 80178b6:	429a      	cmp	r2, r3
 80178b8:	dd01      	ble.n	80178be <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 80178ba:	2301      	movs	r3, #1
 80178bc:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 80178be:	7bbb      	ldrb	r3, [r7, #14]
 80178c0:	f083 0301 	eor.w	r3, r3, #1
 80178c4:	b2db      	uxtb	r3, r3
 80178c6:	2b00      	cmp	r3, #0
 80178c8:	d010      	beq.n	80178ec <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 80178ca:	687b      	ldr	r3, [r7, #4]
 80178cc:	681b      	ldr	r3, [r3, #0]
 80178ce:	681b      	ldr	r3, [r3, #0]
 80178d0:	f107 020c 	add.w	r2, r7, #12
 80178d4:	4611      	mov	r1, r2
 80178d6:	4618      	mov	r0, r3
 80178d8:	f7fe feee 	bl	80166b8 <VerifyRfFreq>
 80178dc:	4603      	mov	r3, r0
 80178de:	f083 0301 	eor.w	r3, r3, #1
 80178e2:	b2db      	uxtb	r3, r3
 80178e4:	2b00      	cmp	r3, #0
 80178e6:	d001      	beq.n	80178ec <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 80178e8:	2301      	movs	r3, #1
 80178ea:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 80178ec:	7bfb      	ldrb	r3, [r7, #15]
 80178ee:	2b00      	cmp	r3, #0
 80178f0:	d004      	beq.n	80178fc <RegionEU868ChannelAdd+0xcc>
 80178f2:	7bbb      	ldrb	r3, [r7, #14]
 80178f4:	2b00      	cmp	r3, #0
 80178f6:	d001      	beq.n	80178fc <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80178f8:	2306      	movs	r3, #6
 80178fa:	e035      	b.n	8017968 <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 80178fc:	7bfb      	ldrb	r3, [r7, #15]
 80178fe:	2b00      	cmp	r3, #0
 8017900:	d001      	beq.n	8017906 <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8017902:	2305      	movs	r3, #5
 8017904:	e030      	b.n	8017968 <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 8017906:	7bbb      	ldrb	r3, [r7, #14]
 8017908:	2b00      	cmp	r3, #0
 801790a:	d001      	beq.n	8017910 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 801790c:	2304      	movs	r3, #4
 801790e:	e02b      	b.n	8017968 <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8017910:	4b17      	ldr	r3, [pc, #92]	; (8017970 <RegionEU868ChannelAdd+0x140>)
 8017912:	6819      	ldr	r1, [r3, #0]
 8017914:	7b7a      	ldrb	r2, [r7, #13]
 8017916:	4613      	mov	r3, r2
 8017918:	005b      	lsls	r3, r3, #1
 801791a:	4413      	add	r3, r2
 801791c:	009b      	lsls	r3, r3, #2
 801791e:	18c8      	adds	r0, r1, r3
 8017920:	687b      	ldr	r3, [r7, #4]
 8017922:	681b      	ldr	r3, [r3, #0]
 8017924:	220c      	movs	r2, #12
 8017926:	4619      	mov	r1, r3
 8017928:	f001 faab 	bl	8018e82 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 801792c:	4b10      	ldr	r3, [pc, #64]	; (8017970 <RegionEU868ChannelAdd+0x140>)
 801792e:	6819      	ldr	r1, [r3, #0]
 8017930:	7b7a      	ldrb	r2, [r7, #13]
 8017932:	7b38      	ldrb	r0, [r7, #12]
 8017934:	4613      	mov	r3, r2
 8017936:	005b      	lsls	r3, r3, #1
 8017938:	4413      	add	r3, r2
 801793a:	009b      	lsls	r3, r3, #2
 801793c:	440b      	add	r3, r1
 801793e:	3309      	adds	r3, #9
 8017940:	4602      	mov	r2, r0
 8017942:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8017944:	4b0a      	ldr	r3, [pc, #40]	; (8017970 <RegionEU868ChannelAdd+0x140>)
 8017946:	681b      	ldr	r3, [r3, #0]
 8017948:	f8b3 3360 	ldrh.w	r3, [r3, #864]	; 0x360
 801794c:	b21a      	sxth	r2, r3
 801794e:	7b7b      	ldrb	r3, [r7, #13]
 8017950:	2101      	movs	r1, #1
 8017952:	fa01 f303 	lsl.w	r3, r1, r3
 8017956:	b21b      	sxth	r3, r3
 8017958:	4313      	orrs	r3, r2
 801795a:	b21a      	sxth	r2, r3
 801795c:	4b04      	ldr	r3, [pc, #16]	; (8017970 <RegionEU868ChannelAdd+0x140>)
 801795e:	681b      	ldr	r3, [r3, #0]
 8017960:	b292      	uxth	r2, r2
 8017962:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    return LORAMAC_STATUS_OK;
 8017966:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8017968:	4618      	mov	r0, r3
 801796a:	3710      	adds	r7, #16
 801796c:	46bd      	mov	sp, r7
 801796e:	bd80      	pop	{r7, pc}
 8017970:	20001ad0 	.word	0x20001ad0

08017974 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8017974:	b580      	push	{r7, lr}
 8017976:	b086      	sub	sp, #24
 8017978:	af00      	add	r7, sp, #0
 801797a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 801797c:	687b      	ldr	r3, [r7, #4]
 801797e:	781b      	ldrb	r3, [r3, #0]
 8017980:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8017982:	7dfb      	ldrb	r3, [r7, #23]
 8017984:	2b02      	cmp	r3, #2
 8017986:	d801      	bhi.n	801798c <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 8017988:	2300      	movs	r3, #0
 801798a:	e016      	b.n	80179ba <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 801798c:	4b0d      	ldr	r3, [pc, #52]	; (80179c4 <RegionEU868ChannelsRemove+0x50>)
 801798e:	6819      	ldr	r1, [r3, #0]
 8017990:	7dfa      	ldrb	r2, [r7, #23]
 8017992:	4613      	mov	r3, r2
 8017994:	005b      	lsls	r3, r3, #1
 8017996:	4413      	add	r3, r2
 8017998:	009b      	lsls	r3, r3, #2
 801799a:	440b      	add	r3, r1
 801799c:	461a      	mov	r2, r3
 801799e:	2300      	movs	r3, #0
 80179a0:	6013      	str	r3, [r2, #0]
 80179a2:	6053      	str	r3, [r2, #4]
 80179a4:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 80179a6:	4b07      	ldr	r3, [pc, #28]	; (80179c4 <RegionEU868ChannelsRemove+0x50>)
 80179a8:	681b      	ldr	r3, [r3, #0]
 80179aa:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80179ae:	7df9      	ldrb	r1, [r7, #23]
 80179b0:	2210      	movs	r2, #16
 80179b2:	4618      	mov	r0, r3
 80179b4:	f7fe f918 	bl	8015be8 <RegionCommonChanDisable>
 80179b8:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 80179ba:	4618      	mov	r0, r3
 80179bc:	3718      	adds	r7, #24
 80179be:	46bd      	mov	sp, r7
 80179c0:	bd80      	pop	{r7, pc}
 80179c2:	bf00      	nop
 80179c4:	20001ad0 	.word	0x20001ad0

080179c8 <RegionEU868ApplyDrOffset>:
#endif /* REGION_EU868 */
}
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80179c8:	b480      	push	{r7}
 80179ca:	b085      	sub	sp, #20
 80179cc:	af00      	add	r7, sp, #0
 80179ce:	4603      	mov	r3, r0
 80179d0:	71fb      	strb	r3, [r7, #7]
 80179d2:	460b      	mov	r3, r1
 80179d4:	71bb      	strb	r3, [r7, #6]
 80179d6:	4613      	mov	r3, r2
 80179d8:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 80179da:	79ba      	ldrb	r2, [r7, #6]
 80179dc:	797b      	ldrb	r3, [r7, #5]
 80179de:	1ad3      	subs	r3, r2, r3
 80179e0:	b2db      	uxtb	r3, r3
 80179e2:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 80179e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80179e8:	2b00      	cmp	r3, #0
 80179ea:	da01      	bge.n	80179f0 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 80179ec:	2300      	movs	r3, #0
 80179ee:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 80179f0:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 80179f2:	4618      	mov	r0, r3
 80179f4:	3714      	adds	r7, #20
 80179f6:	46bd      	mov	sp, r7
 80179f8:	bc80      	pop	{r7}
 80179fa:	4770      	bx	lr

080179fc <LimitTxPower>:
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
static Band_t* RegionBands;
#endif /* REGION_VERSION */

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 80179fc:	b580      	push	{r7, lr}
 80179fe:	b084      	sub	sp, #16
 8017a00:	af00      	add	r7, sp, #0
 8017a02:	603b      	str	r3, [r7, #0]
 8017a04:	4603      	mov	r3, r0
 8017a06:	71fb      	strb	r3, [r7, #7]
 8017a08:	460b      	mov	r3, r1
 8017a0a:	71bb      	strb	r3, [r7, #6]
 8017a0c:	4613      	mov	r3, r2
 8017a0e:	717b      	strb	r3, [r7, #5]
    int8_t txPowerResult = txPower;
 8017a10:	79fb      	ldrb	r3, [r7, #7]
 8017a12:	73fb      	strb	r3, [r7, #15]

    // Limit tx power to the band max
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 8017a14:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8017a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017a1c:	4611      	mov	r1, r2
 8017a1e:	4618      	mov	r0, r3
 8017a20:	f7fe fdcd 	bl	80165be <RegionCommonLimitTxPower>
 8017a24:	4603      	mov	r3, r0
 8017a26:	73fb      	strb	r3, [r7, #15]

    if( datarate == DR_4 )
 8017a28:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8017a2c:	2b04      	cmp	r3, #4
 8017a2e:	d106      	bne.n	8017a3e <LimitTxPower+0x42>
    {// Limit tx power to max 26dBm
        txPowerResult = MAX( txPower, TX_POWER_2 );
 8017a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017a34:	2b02      	cmp	r3, #2
 8017a36:	bfb8      	it	lt
 8017a38:	2302      	movlt	r3, #2
 8017a3a:	73fb      	strb	r3, [r7, #15]
 8017a3c:	e00d      	b.n	8017a5a <LimitTxPower+0x5e>
    }
    else
    {
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 8017a3e:	2204      	movs	r2, #4
 8017a40:	2100      	movs	r1, #0
 8017a42:	6838      	ldr	r0, [r7, #0]
 8017a44:	f7fe f904 	bl	8015c50 <RegionCommonCountChannels>
 8017a48:	4603      	mov	r3, r0
 8017a4a:	2b31      	cmp	r3, #49	; 0x31
 8017a4c:	d805      	bhi.n	8017a5a <LimitTxPower+0x5e>
        {// Limit tx power to max 21dBm
            txPowerResult = MAX( txPower, TX_POWER_5 );
 8017a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017a52:	2b05      	cmp	r3, #5
 8017a54:	bfb8      	it	lt
 8017a56:	2305      	movlt	r3, #5
 8017a58:	73fb      	strb	r3, [r7, #15]
        }
    }
    return txPowerResult;
 8017a5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017a5e:	4618      	mov	r0, r3
 8017a60:	3710      	adds	r7, #16
 8017a62:	46bd      	mov	sp, r7
 8017a64:	bd80      	pop	{r7, pc}
	...

08017a68 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 8017a68:	b580      	push	{r7, lr}
 8017a6a:	b082      	sub	sp, #8
 8017a6c:	af00      	add	r7, sp, #0
 8017a6e:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8017a70:	4b18      	ldr	r3, [pc, #96]	; (8017ad4 <VerifyRfFreq+0x6c>)
 8017a72:	6a1b      	ldr	r3, [r3, #32]
 8017a74:	6878      	ldr	r0, [r7, #4]
 8017a76:	4798      	blx	r3
 8017a78:	4603      	mov	r3, r0
 8017a7a:	f083 0301 	eor.w	r3, r3, #1
 8017a7e:	b2db      	uxtb	r3, r3
 8017a80:	2b00      	cmp	r3, #0
 8017a82:	d001      	beq.n	8017a88 <VerifyRfFreq+0x20>
    {
        return false;
 8017a84:	2300      	movs	r3, #0
 8017a86:	e021      	b.n	8017acc <VerifyRfFreq+0x64>
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	4a13      	ldr	r2, [pc, #76]	; (8017ad8 <VerifyRfFreq+0x70>)
 8017a8c:	4293      	cmp	r3, r2
 8017a8e:	d910      	bls.n	8017ab2 <VerifyRfFreq+0x4a>
 8017a90:	687b      	ldr	r3, [r7, #4]
 8017a92:	4a12      	ldr	r2, [pc, #72]	; (8017adc <VerifyRfFreq+0x74>)
 8017a94:	4293      	cmp	r3, r2
 8017a96:	d80c      	bhi.n	8017ab2 <VerifyRfFreq+0x4a>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 8017a98:	687a      	ldr	r2, [r7, #4]
 8017a9a:	4b11      	ldr	r3, [pc, #68]	; (8017ae0 <VerifyRfFreq+0x78>)
 8017a9c:	4413      	add	r3, r2
 8017a9e:	4a11      	ldr	r2, [pc, #68]	; (8017ae4 <VerifyRfFreq+0x7c>)
 8017aa0:	fba2 1203 	umull	r1, r2, r2, r3
 8017aa4:	0c92      	lsrs	r2, r2, #18
 8017aa6:	4910      	ldr	r1, [pc, #64]	; (8017ae8 <VerifyRfFreq+0x80>)
 8017aa8:	fb01 f202 	mul.w	r2, r1, r2
 8017aac:	1a9a      	subs	r2, r3, r2
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 8017aae:	2a00      	cmp	r2, #0
 8017ab0:	d001      	beq.n	8017ab6 <VerifyRfFreq+0x4e>
    {
        return false;
 8017ab2:	2300      	movs	r3, #0
 8017ab4:	e00a      	b.n	8017acc <VerifyRfFreq+0x64>
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 8017ab6:	687b      	ldr	r3, [r7, #4]
 8017ab8:	4a0c      	ldr	r2, [pc, #48]	; (8017aec <VerifyRfFreq+0x84>)
 8017aba:	4293      	cmp	r3, r2
 8017abc:	d903      	bls.n	8017ac6 <VerifyRfFreq+0x5e>
 8017abe:	687b      	ldr	r3, [r7, #4]
 8017ac0:	4a06      	ldr	r2, [pc, #24]	; (8017adc <VerifyRfFreq+0x74>)
 8017ac2:	4293      	cmp	r3, r2
 8017ac4:	d901      	bls.n	8017aca <VerifyRfFreq+0x62>
    {
        return false;
 8017ac6:	2300      	movs	r3, #0
 8017ac8:	e000      	b.n	8017acc <VerifyRfFreq+0x64>
    }
    return true;
 8017aca:	2301      	movs	r3, #1
}
 8017acc:	4618      	mov	r0, r3
 8017ace:	3708      	adds	r7, #8
 8017ad0:	46bd      	mov	sp, r7
 8017ad2:	bd80      	pop	{r7, pc}
 8017ad4:	0801ea54 	.word	0x0801ea54
 8017ad8:	3708709f 	.word	0x3708709f
 8017adc:	374886e0 	.word	0x374886e0
 8017ae0:	c8f78f60 	.word	0xc8f78f60
 8017ae4:	6fd91d85 	.word	0x6fd91d85
 8017ae8:	000927c0 	.word	0x000927c0
 8017aec:	35c8015f 	.word	0x35c8015f

08017af0 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8017af0:	b590      	push	{r4, r7, lr}
 8017af2:	b089      	sub	sp, #36	; 0x24
 8017af4:	af04      	add	r7, sp, #16
 8017af6:	4603      	mov	r3, r0
 8017af8:	460a      	mov	r2, r1
 8017afa:	71fb      	strb	r3, [r7, #7]
 8017afc:	4613      	mov	r3, r2
 8017afe:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesUS915[datarate];
 8017b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017b04:	4a0f      	ldr	r2, [pc, #60]	; (8017b44 <GetTimeOnAir+0x54>)
 8017b06:	5cd3      	ldrb	r3, [r2, r3]
 8017b08:	73fb      	strb	r3, [r7, #15]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 8017b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017b0e:	490e      	ldr	r1, [pc, #56]	; (8017b48 <GetTimeOnAir+0x58>)
 8017b10:	4618      	mov	r0, r3
 8017b12:	f7fe fd69 	bl	80165e8 <RegionCommonGetBandwidth>
 8017b16:	60b8      	str	r0, [r7, #8]

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8017b18:	4b0c      	ldr	r3, [pc, #48]	; (8017b4c <GetTimeOnAir+0x5c>)
 8017b1a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8017b1c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8017b20:	88bb      	ldrh	r3, [r7, #4]
 8017b22:	b2db      	uxtb	r3, r3
 8017b24:	2101      	movs	r1, #1
 8017b26:	9103      	str	r1, [sp, #12]
 8017b28:	9302      	str	r3, [sp, #8]
 8017b2a:	2300      	movs	r3, #0
 8017b2c:	9301      	str	r3, [sp, #4]
 8017b2e:	2308      	movs	r3, #8
 8017b30:	9300      	str	r3, [sp, #0]
 8017b32:	2301      	movs	r3, #1
 8017b34:	68b9      	ldr	r1, [r7, #8]
 8017b36:	2001      	movs	r0, #1
 8017b38:	47a0      	blx	r4
 8017b3a:	4603      	mov	r3, r0
}
 8017b3c:	4618      	mov	r0, r3
 8017b3e:	3714      	adds	r7, #20
 8017b40:	46bd      	mov	sp, r7
 8017b42:	bd90      	pop	{r4, r7, pc}
 8017b44:	0801e9d0 	.word	0x0801e9d0
 8017b48:	0801e9e0 	.word	0x0801e9e0
 8017b4c:	0801ea54 	.word	0x0801ea54

08017b50 <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 8017b50:	b580      	push	{r7, lr}
 8017b52:	b088      	sub	sp, #32
 8017b54:	af00      	add	r7, sp, #0
 8017b56:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8017b58:	2300      	movs	r3, #0
 8017b5a:	61bb      	str	r3, [r7, #24]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 8017b5c:	687b      	ldr	r3, [r7, #4]
 8017b5e:	781b      	ldrb	r3, [r3, #0]
 8017b60:	3b01      	subs	r3, #1
 8017b62:	2b37      	cmp	r3, #55	; 0x37
 8017b64:	f200 8136 	bhi.w	8017dd4 <RegionUS915GetPhyParam+0x284>
 8017b68:	a201      	add	r2, pc, #4	; (adr r2, 8017b70 <RegionUS915GetPhyParam+0x20>)
 8017b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017b6e:	bf00      	nop
 8017b70:	08017c51 	.word	0x08017c51
 8017b74:	08017c57 	.word	0x08017c57
 8017b78:	08017dd5 	.word	0x08017dd5
 8017b7c:	08017dd5 	.word	0x08017dd5
 8017b80:	08017dd5 	.word	0x08017dd5
 8017b84:	08017c5d 	.word	0x08017c5d
 8017b88:	08017dd5 	.word	0x08017dd5
 8017b8c:	08017c97 	.word	0x08017c97
 8017b90:	08017dd5 	.word	0x08017dd5
 8017b94:	08017c9d 	.word	0x08017c9d
 8017b98:	08017ca3 	.word	0x08017ca3
 8017b9c:	08017ca9 	.word	0x08017ca9
 8017ba0:	08017caf 	.word	0x08017caf
 8017ba4:	08017cbf 	.word	0x08017cbf
 8017ba8:	08017ccf 	.word	0x08017ccf
 8017bac:	08017cd5 	.word	0x08017cd5
 8017bb0:	08017cdd 	.word	0x08017cdd
 8017bb4:	08017ce5 	.word	0x08017ce5
 8017bb8:	08017ced 	.word	0x08017ced
 8017bbc:	08017cf5 	.word	0x08017cf5
 8017bc0:	08017cfd 	.word	0x08017cfd
 8017bc4:	08017d11 	.word	0x08017d11
 8017bc8:	08017d17 	.word	0x08017d17
 8017bcc:	08017d1d 	.word	0x08017d1d
 8017bd0:	08017d23 	.word	0x08017d23
 8017bd4:	08017d2f 	.word	0x08017d2f
 8017bd8:	08017d3b 	.word	0x08017d3b
 8017bdc:	08017d41 	.word	0x08017d41
 8017be0:	08017d49 	.word	0x08017d49
 8017be4:	08017d4f 	.word	0x08017d4f
 8017be8:	08017d55 	.word	0x08017d55
 8017bec:	08017d5b 	.word	0x08017d5b
 8017bf0:	08017c63 	.word	0x08017c63
 8017bf4:	08017dd5 	.word	0x08017dd5
 8017bf8:	08017dd5 	.word	0x08017dd5
 8017bfc:	08017dd5 	.word	0x08017dd5
 8017c00:	08017dd5 	.word	0x08017dd5
 8017c04:	08017dd5 	.word	0x08017dd5
 8017c08:	08017dd5 	.word	0x08017dd5
 8017c0c:	08017dd5 	.word	0x08017dd5
 8017c10:	08017dd5 	.word	0x08017dd5
 8017c14:	08017dd5 	.word	0x08017dd5
 8017c18:	08017dd5 	.word	0x08017dd5
 8017c1c:	08017dd5 	.word	0x08017dd5
 8017c20:	08017dd5 	.word	0x08017dd5
 8017c24:	08017dd5 	.word	0x08017dd5
 8017c28:	08017d63 	.word	0x08017d63
 8017c2c:	08017d77 	.word	0x08017d77
 8017c30:	08017d85 	.word	0x08017d85
 8017c34:	08017d8b 	.word	0x08017d8b
 8017c38:	08017dd5 	.word	0x08017dd5
 8017c3c:	08017d91 	.word	0x08017d91
 8017c40:	08017da5 	.word	0x08017da5
 8017c44:	08017dab 	.word	0x08017dab
 8017c48:	08017db1 	.word	0x08017db1
 8017c4c:	08017dc1 	.word	0x08017dc1
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 8017c50:	2308      	movs	r3, #8
 8017c52:	61bb      	str	r3, [r7, #24]
            break;
 8017c54:	e0bf      	b.n	8017dd6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = US915_TX_MIN_DATARATE;
 8017c56:	2300      	movs	r3, #0
 8017c58:	61bb      	str	r3, [r7, #24]
            break;
 8017c5a:	e0bc      	b.n	8017dd6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = US915_DEFAULT_DATARATE;
 8017c5c:	2300      	movs	r3, #0
 8017c5e:	61bb      	str	r3, [r7, #24]
            break;
 8017c60:	e0b9      	b.n	8017dd6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8017c62:	687b      	ldr	r3, [r7, #4]
 8017c64:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8017c68:	733b      	strb	r3, [r7, #12]
 8017c6a:	2304      	movs	r3, #4
 8017c6c:	737b      	strb	r3, [r7, #13]
 8017c6e:	2300      	movs	r3, #0
 8017c70:	73bb      	strb	r3, [r7, #14]
 8017c72:	2348      	movs	r3, #72	; 0x48
 8017c74:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )US915_TX_MAX_DATARATE,
                .MinDr = ( int8_t )US915_TX_MIN_DATARATE,
                .NbChannels = US915_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8017c76:	4b5b      	ldr	r3, [pc, #364]	; (8017de4 <RegionUS915GetPhyParam+0x294>)
 8017c78:	681b      	ldr	r3, [r3, #0]
 8017c7a:	f503 7358 	add.w	r3, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8017c7e:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8017c80:	4b58      	ldr	r3, [pc, #352]	; (8017de4 <RegionUS915GetPhyParam+0x294>)
 8017c82:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8017c84:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8017c86:	f107 030c 	add.w	r3, r7, #12
 8017c8a:	4618      	mov	r0, r3
 8017c8c:	f7fe fc59 	bl	8016542 <RegionCommonGetNextLowerTxDr>
 8017c90:	4603      	mov	r3, r0
 8017c92:	61bb      	str	r3, [r7, #24]
            break;
 8017c94:	e09f      	b.n	8017dd6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = US915_MAX_TX_POWER;
 8017c96:	2300      	movs	r3, #0
 8017c98:	61bb      	str	r3, [r7, #24]
            break;
 8017c9a:	e09c      	b.n	8017dd6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = US915_DEFAULT_TX_POWER;
 8017c9c:	2300      	movs	r3, #0
 8017c9e:	61bb      	str	r3, [r7, #24]
            break;
 8017ca0:	e099      	b.n	8017dd6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8017ca2:	2340      	movs	r3, #64	; 0x40
 8017ca4:	61bb      	str	r3, [r7, #24]
            break;
 8017ca6:	e096      	b.n	8017dd6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8017ca8:	2320      	movs	r3, #32
 8017caa:	61bb      	str	r3, [r7, #24]
            break;
 8017cac:	e093      	b.n	8017dd6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 8017cae:	687b      	ldr	r3, [r7, #4]
 8017cb0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017cb4:	461a      	mov	r2, r3
 8017cb6:	4b4c      	ldr	r3, [pc, #304]	; (8017de8 <RegionUS915GetPhyParam+0x298>)
 8017cb8:	5c9b      	ldrb	r3, [r3, r2]
 8017cba:	61bb      	str	r3, [r7, #24]
            break;
 8017cbc:	e08b      	b.n	8017dd6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 8017cbe:	687b      	ldr	r3, [r7, #4]
 8017cc0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017cc4:	461a      	mov	r2, r3
 8017cc6:	4b49      	ldr	r3, [pc, #292]	; (8017dec <RegionUS915GetPhyParam+0x29c>)
 8017cc8:	5c9b      	ldrb	r3, [r3, r2]
 8017cca:	61bb      	str	r3, [r7, #24]
            break;
 8017ccc:	e083      	b.n	8017dd6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = US915_DUTY_CYCLE_ENABLED;
 8017cce:	2300      	movs	r3, #0
 8017cd0:	61bb      	str	r3, [r7, #24]
            break;
 8017cd2:	e080      	b.n	8017dd6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = US915_MAX_RX_WINDOW;
 8017cd4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8017cd8:	61bb      	str	r3, [r7, #24]
            break;
 8017cda:	e07c      	b.n	8017dd6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8017cdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017ce0:	61bb      	str	r3, [r7, #24]
            break;
 8017ce2:	e078      	b.n	8017dd6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8017ce4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8017ce8:	61bb      	str	r3, [r7, #24]
            break;
 8017cea:	e074      	b.n	8017dd6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8017cec:	f241 3388 	movw	r3, #5000	; 0x1388
 8017cf0:	61bb      	str	r3, [r7, #24]
            break;
 8017cf2:	e070      	b.n	8017dd6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8017cf4:	f241 7370 	movw	r3, #6000	; 0x1770
 8017cf8:	61bb      	str	r3, [r7, #24]
            break;
 8017cfa:	e06c      	b.n	8017dd6 <RegionUS915GetPhyParam+0x286>
            break;
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 8017cfc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8017d00:	483b      	ldr	r0, [pc, #236]	; (8017df0 <RegionUS915GetPhyParam+0x2a0>)
 8017d02:	f001 f8a7 	bl	8018e54 <randr>
 8017d06:	4603      	mov	r3, r0
 8017d08:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8017d0c:	61bb      	str	r3, [r7, #24]
            break;
 8017d0e:	e062      	b.n	8017dd6 <RegionUS915GetPhyParam+0x286>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8017d10:	2300      	movs	r3, #0
 8017d12:	61bb      	str	r3, [r7, #24]
            break;
 8017d14:	e05f      	b.n	8017dd6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = US915_RX_WND_2_FREQ;
 8017d16:	4b37      	ldr	r3, [pc, #220]	; (8017df4 <RegionUS915GetPhyParam+0x2a4>)
 8017d18:	61bb      	str	r3, [r7, #24]
            break;
 8017d1a:	e05c      	b.n	8017dd6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = US915_RX_WND_2_DR;
 8017d1c:	2308      	movs	r3, #8
 8017d1e:	61bb      	str	r3, [r7, #24]
            break;
 8017d20:	e059      	b.n	8017dd6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8017d22:	4b30      	ldr	r3, [pc, #192]	; (8017de4 <RegionUS915GetPhyParam+0x294>)
 8017d24:	681b      	ldr	r3, [r3, #0]
 8017d26:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8017d2a:	61bb      	str	r3, [r7, #24]
            break;
 8017d2c:	e053      	b.n	8017dd6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8017d2e:	4b2d      	ldr	r3, [pc, #180]	; (8017de4 <RegionUS915GetPhyParam+0x294>)
 8017d30:	681b      	ldr	r3, [r3, #0]
 8017d32:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8017d36:	61bb      	str	r3, [r7, #24]
            break;
 8017d38:	e04d      	b.n	8017dd6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = US915_MAX_NB_CHANNELS;
 8017d3a:	2348      	movs	r3, #72	; 0x48
 8017d3c:	61bb      	str	r3, [r7, #24]
            break;
 8017d3e:	e04a      	b.n	8017dd6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8017d40:	4b28      	ldr	r3, [pc, #160]	; (8017de4 <RegionUS915GetPhyParam+0x294>)
 8017d42:	681b      	ldr	r3, [r3, #0]
 8017d44:	61bb      	str	r3, [r7, #24]
            break;
 8017d46:	e046      	b.n	8017dd6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = US915_DEFAULT_UPLINK_DWELL_TIME;
 8017d48:	2300      	movs	r3, #0
 8017d4a:	61bb      	str	r3, [r7, #24]
            break;
 8017d4c:	e043      	b.n	8017dd6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8017d4e:	2300      	movs	r3, #0
 8017d50:	61bb      	str	r3, [r7, #24]
            break;
 8017d52:	e040      	b.n	8017dd6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 8017d54:	4b28      	ldr	r3, [pc, #160]	; (8017df8 <RegionUS915GetPhyParam+0x2a8>)
 8017d56:	61bb      	str	r3, [r7, #24]
            break;
 8017d58:	e03d      	b.n	8017dd6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = 0;
 8017d5a:	f04f 0300 	mov.w	r3, #0
 8017d5e:	61bb      	str	r3, [r7, #24]
            break;
 8017d60:	e039      	b.n	8017dd6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 8017d62:	687b      	ldr	r3, [r7, #4]
 8017d64:	791b      	ldrb	r3, [r3, #4]
 8017d66:	4a25      	ldr	r2, [pc, #148]	; (8017dfc <RegionUS915GetPhyParam+0x2ac>)
 8017d68:	4922      	ldr	r1, [pc, #136]	; (8017df4 <RegionUS915GetPhyParam+0x2a4>)
 8017d6a:	4618      	mov	r0, r3
 8017d6c:	f7fd fd4b 	bl	8015806 <RegionBaseUSCalcDownlinkFrequency>
 8017d70:	4603      	mov	r3, r0
 8017d72:	61bb      	str	r3, [r7, #24]
                                                                US915_BEACON_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 8017d74:	e02f      	b.n	8017dd6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 8017d76:	2317      	movs	r3, #23
 8017d78:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 8017d7a:	2304      	movs	r3, #4
 8017d7c:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 8017d7e:	2303      	movs	r3, #3
 8017d80:	76bb      	strb	r3, [r7, #26]
            break;
 8017d82:	e028      	b.n	8017dd6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 8017d84:	2308      	movs	r3, #8
 8017d86:	61bb      	str	r3, [r7, #24]
            break;
 8017d88:	e025      	b.n	8017dd6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8017d8a:	2308      	movs	r3, #8
 8017d8c:	61bb      	str	r3, [r7, #24]
            break;
 8017d8e:	e022      	b.n	8017dd6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 8017d90:	687b      	ldr	r3, [r7, #4]
 8017d92:	791b      	ldrb	r3, [r3, #4]
 8017d94:	4a19      	ldr	r2, [pc, #100]	; (8017dfc <RegionUS915GetPhyParam+0x2ac>)
 8017d96:	4917      	ldr	r1, [pc, #92]	; (8017df4 <RegionUS915GetPhyParam+0x2a4>)
 8017d98:	4618      	mov	r0, r3
 8017d9a:	f7fd fd34 	bl	8015806 <RegionBaseUSCalcDownlinkFrequency>
 8017d9e:	4603      	mov	r3, r0
 8017da0:	61bb      	str	r3, [r7, #24]
                                                                US915_PING_SLOT_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 8017da2:	e018      	b.n	8017dd6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 8017da4:	2308      	movs	r3, #8
 8017da6:	61bb      	str	r3, [r7, #24]
            break;
 8017da8:	e015      	b.n	8017dd6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8017daa:	2308      	movs	r3, #8
 8017dac:	61bb      	str	r3, [r7, #24]
            break;
 8017dae:	e012      	b.n	8017dd6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 8017db0:	687b      	ldr	r3, [r7, #4]
 8017db2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017db6:	461a      	mov	r2, r3
 8017db8:	4b11      	ldr	r3, [pc, #68]	; (8017e00 <RegionUS915GetPhyParam+0x2b0>)
 8017dba:	5c9b      	ldrb	r3, [r3, r2]
 8017dbc:	61bb      	str	r3, [r7, #24]
            break;
 8017dbe:	e00a      	b.n	8017dd6 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 8017dc0:	687b      	ldr	r3, [r7, #4]
 8017dc2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017dc6:	490f      	ldr	r1, [pc, #60]	; (8017e04 <RegionUS915GetPhyParam+0x2b4>)
 8017dc8:	4618      	mov	r0, r3
 8017dca:	f7fe fc0d 	bl	80165e8 <RegionCommonGetBandwidth>
 8017dce:	4603      	mov	r3, r0
 8017dd0:	61bb      	str	r3, [r7, #24]
            break;
 8017dd2:	e000      	b.n	8017dd6 <RegionUS915GetPhyParam+0x286>
        }
        default:
        {
            break;
 8017dd4:	bf00      	nop
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 8017dd6:	69bb      	ldr	r3, [r7, #24]
 8017dd8:	61fb      	str	r3, [r7, #28]
 8017dda:	69fb      	ldr	r3, [r7, #28]
}
 8017ddc:	4618      	mov	r0, r3
 8017dde:	3720      	adds	r7, #32
 8017de0:	46bd      	mov	sp, r7
 8017de2:	bd80      	pop	{r7, pc}
 8017de4:	20001adc 	.word	0x20001adc
 8017de8:	0801ea34 	.word	0x0801ea34
 8017dec:	0801ea44 	.word	0x0801ea44
 8017df0:	fffffc18 	.word	0xfffffc18
 8017df4:	370870a0 	.word	0x370870a0
 8017df8:	4200999a 	.word	0x4200999a
 8017dfc:	000927c0 	.word	0x000927c0
 8017e00:	0801e9d0 	.word	0x0801e9d0
 8017e04:	0801e9e0 	.word	0x0801e9e0

08017e08 <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8017e08:	b590      	push	{r4, r7, lr}
 8017e0a:	b085      	sub	sp, #20
 8017e0c:	af02      	add	r7, sp, #8
 8017e0e:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8017e10:	4b11      	ldr	r3, [pc, #68]	; (8017e58 <RegionUS915SetBandTxDone+0x50>)
 8017e12:	681a      	ldr	r2, [r3, #0]
 8017e14:	4b11      	ldr	r3, [pc, #68]	; (8017e5c <RegionUS915SetBandTxDone+0x54>)
 8017e16:	6819      	ldr	r1, [r3, #0]
 8017e18:	687b      	ldr	r3, [r7, #4]
 8017e1a:	781b      	ldrb	r3, [r3, #0]
 8017e1c:	4618      	mov	r0, r3
 8017e1e:	4603      	mov	r3, r0
 8017e20:	005b      	lsls	r3, r3, #1
 8017e22:	4403      	add	r3, r0
 8017e24:	009b      	lsls	r3, r3, #2
 8017e26:	440b      	add	r3, r1
 8017e28:	3309      	adds	r3, #9
 8017e2a:	781b      	ldrb	r3, [r3, #0]
 8017e2c:	4619      	mov	r1, r3
 8017e2e:	460b      	mov	r3, r1
 8017e30:	005b      	lsls	r3, r3, #1
 8017e32:	440b      	add	r3, r1
 8017e34:	00db      	lsls	r3, r3, #3
 8017e36:	18d0      	adds	r0, r2, r3
 8017e38:	687b      	ldr	r3, [r7, #4]
 8017e3a:	6899      	ldr	r1, [r3, #8]
 8017e3c:	687b      	ldr	r3, [r7, #4]
 8017e3e:	785c      	ldrb	r4, [r3, #1]
 8017e40:	687b      	ldr	r3, [r7, #4]
 8017e42:	691a      	ldr	r2, [r3, #16]
 8017e44:	9200      	str	r2, [sp, #0]
 8017e46:	68db      	ldr	r3, [r3, #12]
 8017e48:	4622      	mov	r2, r4
 8017e4a:	f7fd ff53 	bl	8015cf4 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_US915 */
}
 8017e4e:	bf00      	nop
 8017e50:	370c      	adds	r7, #12
 8017e52:	46bd      	mov	sp, r7
 8017e54:	bd90      	pop	{r4, r7, pc}
 8017e56:	bf00      	nop
 8017e58:	20001ae0 	.word	0x20001ae0
 8017e5c:	20001adc 	.word	0x20001adc

08017e60 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 8017e60:	b580      	push	{r7, lr}
 8017e62:	b08a      	sub	sp, #40	; 0x28
 8017e64:	af00      	add	r7, sp, #0
 8017e66:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 8017e68:	2301      	movs	r3, #1
 8017e6a:	81bb      	strh	r3, [r7, #12]
 8017e6c:	2300      	movs	r3, #0
 8017e6e:	73bb      	strb	r3, [r7, #14]
 8017e70:	2300      	movs	r3, #0
 8017e72:	613b      	str	r3, [r7, #16]
 8017e74:	2300      	movs	r3, #0
 8017e76:	617b      	str	r3, [r7, #20]
 8017e78:	2300      	movs	r3, #0
 8017e7a:	61bb      	str	r3, [r7, #24]
 8017e7c:	2300      	movs	r3, #0
 8017e7e:	61fb      	str	r3, [r7, #28]
 8017e80:	2300      	movs	r3, #0
 8017e82:	f887 3020 	strb.w	r3, [r7, #32]
    {
       US915_BAND0
    };

    switch( params->Type )
 8017e86:	687b      	ldr	r3, [r7, #4]
 8017e88:	7b1b      	ldrb	r3, [r3, #12]
 8017e8a:	2b00      	cmp	r3, #0
 8017e8c:	d007      	beq.n	8017e9e <RegionUS915InitDefaults+0x3e>
 8017e8e:	2b00      	cmp	r3, #0
 8017e90:	f2c0 8104 	blt.w	801809c <RegionUS915InitDefaults+0x23c>
 8017e94:	3b01      	subs	r3, #1
 8017e96:	2b01      	cmp	r3, #1
 8017e98:	f200 8100 	bhi.w	801809c <RegionUS915InitDefaults+0x23c>
 8017e9c:	e0ce      	b.n	801803c <RegionUS915InitDefaults+0x1dc>
    {
        case INIT_TYPE_DEFAULTS:
        {
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8017e9e:	687b      	ldr	r3, [r7, #4]
 8017ea0:	681b      	ldr	r3, [r3, #0]
 8017ea2:	2b00      	cmp	r3, #0
 8017ea4:	f000 80fc 	beq.w	80180a0 <RegionUS915InitDefaults+0x240>
 8017ea8:	687b      	ldr	r3, [r7, #4]
 8017eaa:	685b      	ldr	r3, [r3, #4]
 8017eac:	2b00      	cmp	r3, #0
 8017eae:	f000 80f7 	beq.w	80180a0 <RegionUS915InitDefaults+0x240>
            {
                return;
            }

            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 8017eb2:	687b      	ldr	r3, [r7, #4]
 8017eb4:	681b      	ldr	r3, [r3, #0]
 8017eb6:	4a7c      	ldr	r2, [pc, #496]	; (80180a8 <RegionUS915InitDefaults+0x248>)
 8017eb8:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8017eba:	687b      	ldr	r3, [r7, #4]
 8017ebc:	685b      	ldr	r3, [r3, #4]
 8017ebe:	4a7b      	ldr	r2, [pc, #492]	; (80180ac <RegionUS915InitDefaults+0x24c>)
 8017ec0:	6013      	str	r3, [r2, #0]
            RegionNvmGroup1->JoinTrialsCounter = 0;

            // Default bands
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            RegionBands = (Band_t*) params->Bands;
 8017ec2:	687b      	ldr	r3, [r7, #4]
 8017ec4:	689b      	ldr	r3, [r3, #8]
 8017ec6:	4a7a      	ldr	r2, [pc, #488]	; (80180b0 <RegionUS915InitDefaults+0x250>)
 8017ec8:	6013      	str	r3, [r2, #0]

            // Initialize 8 bit channel groups index
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8017eca:	4b77      	ldr	r3, [pc, #476]	; (80180a8 <RegionUS915InitDefaults+0x248>)
 8017ecc:	681b      	ldr	r3, [r3, #0]
 8017ece:	2200      	movs	r2, #0
 8017ed0:	731a      	strb	r2, [r3, #12]

            // Initialize the join trials counter
            RegionNvmGroup1->JoinTrialsCounter = 0;
 8017ed2:	4b75      	ldr	r3, [pc, #468]	; (80180a8 <RegionUS915InitDefaults+0x248>)
 8017ed4:	681b      	ldr	r3, [r3, #0]
 8017ed6:	2200      	movs	r2, #0
 8017ed8:	735a      	strb	r2, [r3, #13]

            // Default bands
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 8017eda:	4b75      	ldr	r3, [pc, #468]	; (80180b0 <RegionUS915InitDefaults+0x250>)
 8017edc:	681b      	ldr	r3, [r3, #0]
 8017ede:	f107 010c 	add.w	r1, r7, #12
 8017ee2:	2218      	movs	r2, #24
 8017ee4:	4618      	mov	r0, r3
 8017ee6:	f000 ffcc 	bl	8018e82 <memcpy1>
#endif /* REGION_VERSION */

            // Default channels
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 8017eea:	2300      	movs	r3, #0
 8017eec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017ef0:	e02e      	b.n	8017f50 <RegionUS915InitDefaults+0xf0>
            {
                // 125 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 8017ef2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017ef6:	4a6f      	ldr	r2, [pc, #444]	; (80180b4 <RegionUS915InitDefaults+0x254>)
 8017ef8:	fb03 f202 	mul.w	r2, r3, r2
 8017efc:	4b6e      	ldr	r3, [pc, #440]	; (80180b8 <RegionUS915InitDefaults+0x258>)
 8017efe:	4413      	add	r3, r2
 8017f00:	4a6a      	ldr	r2, [pc, #424]	; (80180ac <RegionUS915InitDefaults+0x24c>)
 8017f02:	6811      	ldr	r1, [r2, #0]
 8017f04:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8017f08:	4618      	mov	r0, r3
 8017f0a:	4613      	mov	r3, r2
 8017f0c:	005b      	lsls	r3, r3, #1
 8017f0e:	4413      	add	r3, r2
 8017f10:	009b      	lsls	r3, r3, #2
 8017f12:	440b      	add	r3, r1
 8017f14:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 8017f16:	4b65      	ldr	r3, [pc, #404]	; (80180ac <RegionUS915InitDefaults+0x24c>)
 8017f18:	6819      	ldr	r1, [r3, #0]
 8017f1a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8017f1e:	4613      	mov	r3, r2
 8017f20:	005b      	lsls	r3, r3, #1
 8017f22:	4413      	add	r3, r2
 8017f24:	009b      	lsls	r3, r3, #2
 8017f26:	440b      	add	r3, r1
 8017f28:	3308      	adds	r3, #8
 8017f2a:	2230      	movs	r2, #48	; 0x30
 8017f2c:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 8017f2e:	4b5f      	ldr	r3, [pc, #380]	; (80180ac <RegionUS915InitDefaults+0x24c>)
 8017f30:	6819      	ldr	r1, [r3, #0]
 8017f32:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8017f36:	4613      	mov	r3, r2
 8017f38:	005b      	lsls	r3, r3, #1
 8017f3a:	4413      	add	r3, r2
 8017f3c:	009b      	lsls	r3, r3, #2
 8017f3e:	440b      	add	r3, r1
 8017f40:	3309      	adds	r3, #9
 8017f42:	2200      	movs	r2, #0
 8017f44:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 8017f46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017f4a:	3301      	adds	r3, #1
 8017f4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017f50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017f54:	2b3f      	cmp	r3, #63	; 0x3f
 8017f56:	d9cc      	bls.n	8017ef2 <RegionUS915InitDefaults+0x92>
            }
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 8017f58:	2340      	movs	r3, #64	; 0x40
 8017f5a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8017f5e:	e02f      	b.n	8017fc0 <RegionUS915InitDefaults+0x160>
            {
                // 500 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 8017f60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017f64:	3b40      	subs	r3, #64	; 0x40
 8017f66:	4a55      	ldr	r2, [pc, #340]	; (80180bc <RegionUS915InitDefaults+0x25c>)
 8017f68:	fb03 f202 	mul.w	r2, r3, r2
 8017f6c:	4b54      	ldr	r3, [pc, #336]	; (80180c0 <RegionUS915InitDefaults+0x260>)
 8017f6e:	4413      	add	r3, r2
 8017f70:	4a4e      	ldr	r2, [pc, #312]	; (80180ac <RegionUS915InitDefaults+0x24c>)
 8017f72:	6811      	ldr	r1, [r2, #0]
 8017f74:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8017f78:	4618      	mov	r0, r3
 8017f7a:	4613      	mov	r3, r2
 8017f7c:	005b      	lsls	r3, r3, #1
 8017f7e:	4413      	add	r3, r2
 8017f80:	009b      	lsls	r3, r3, #2
 8017f82:	440b      	add	r3, r1
 8017f84:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 8017f86:	4b49      	ldr	r3, [pc, #292]	; (80180ac <RegionUS915InitDefaults+0x24c>)
 8017f88:	6819      	ldr	r1, [r3, #0]
 8017f8a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8017f8e:	4613      	mov	r3, r2
 8017f90:	005b      	lsls	r3, r3, #1
 8017f92:	4413      	add	r3, r2
 8017f94:	009b      	lsls	r3, r3, #2
 8017f96:	440b      	add	r3, r1
 8017f98:	3308      	adds	r3, #8
 8017f9a:	2244      	movs	r2, #68	; 0x44
 8017f9c:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 8017f9e:	4b43      	ldr	r3, [pc, #268]	; (80180ac <RegionUS915InitDefaults+0x24c>)
 8017fa0:	6819      	ldr	r1, [r3, #0]
 8017fa2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8017fa6:	4613      	mov	r3, r2
 8017fa8:	005b      	lsls	r3, r3, #1
 8017faa:	4413      	add	r3, r2
 8017fac:	009b      	lsls	r3, r3, #2
 8017fae:	440b      	add	r3, r1
 8017fb0:	3309      	adds	r3, #9
 8017fb2:	2200      	movs	r2, #0
 8017fb4:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 8017fb6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017fba:	3301      	adds	r3, #1
 8017fbc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8017fc0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017fc4:	2b47      	cmp	r3, #71	; 0x47
 8017fc6:	d9cb      	bls.n	8017f60 <RegionUS915InitDefaults+0x100>
            RegionNvmGroup2->ChannelsDefaultMask[2] = HYBRID_DEFAULT_MASK2;
            RegionNvmGroup2->ChannelsDefaultMask[3] = HYBRID_DEFAULT_MASK3;
            RegionNvmGroup2->ChannelsDefaultMask[4] = HYBRID_DEFAULT_MASK4;
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
#else
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 8017fc8:	4b38      	ldr	r3, [pc, #224]	; (80180ac <RegionUS915InitDefaults+0x24c>)
 8017fca:	681b      	ldr	r3, [r3, #0]
 8017fcc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017fd0:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 8017fd4:	4b35      	ldr	r3, [pc, #212]	; (80180ac <RegionUS915InitDefaults+0x24c>)
 8017fd6:	681b      	ldr	r3, [r3, #0]
 8017fd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017fdc:	f8a3 236e 	strh.w	r2, [r3, #878]	; 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 8017fe0:	4b32      	ldr	r3, [pc, #200]	; (80180ac <RegionUS915InitDefaults+0x24c>)
 8017fe2:	681b      	ldr	r3, [r3, #0]
 8017fe4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017fe8:	f8a3 2370 	strh.w	r2, [r3, #880]	; 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 8017fec:	4b2f      	ldr	r3, [pc, #188]	; (80180ac <RegionUS915InitDefaults+0x24c>)
 8017fee:	681b      	ldr	r3, [r3, #0]
 8017ff0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017ff4:	f8a3 2372 	strh.w	r2, [r3, #882]	; 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 8017ff8:	4b2c      	ldr	r3, [pc, #176]	; (80180ac <RegionUS915InitDefaults+0x24c>)
 8017ffa:	681b      	ldr	r3, [r3, #0]
 8017ffc:	22ff      	movs	r2, #255	; 0xff
 8017ffe:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 8018002:	4b2a      	ldr	r3, [pc, #168]	; (80180ac <RegionUS915InitDefaults+0x24c>)
 8018004:	681b      	ldr	r3, [r3, #0]
 8018006:	2200      	movs	r2, #0
 8018008:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376
#endif /* HYBRID_ENABLED == 1 */

            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801800c:	4b27      	ldr	r3, [pc, #156]	; (80180ac <RegionUS915InitDefaults+0x24c>)
 801800e:	681b      	ldr	r3, [r3, #0]
 8018010:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8018014:	4b25      	ldr	r3, [pc, #148]	; (80180ac <RegionUS915InitDefaults+0x24c>)
 8018016:	681b      	ldr	r3, [r3, #0]
 8018018:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 801801c:	2206      	movs	r2, #6
 801801e:	4619      	mov	r1, r3
 8018020:	f7fd fe42 	bl	8015ca8 <RegionCommonChanMaskCopy>

            // Copy into channels mask remaining
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 8018024:	4b20      	ldr	r3, [pc, #128]	; (80180a8 <RegionUS915InitDefaults+0x248>)
 8018026:	681b      	ldr	r3, [r3, #0]
 8018028:	4618      	mov	r0, r3
 801802a:	4b20      	ldr	r3, [pc, #128]	; (80180ac <RegionUS915InitDefaults+0x24c>)
 801802c:	681b      	ldr	r3, [r3, #0]
 801802e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8018032:	2206      	movs	r2, #6
 8018034:	4619      	mov	r1, r3
 8018036:	f7fd fe37 	bl	8015ca8 <RegionCommonChanMaskCopy>
            break;
 801803a:	e032      	b.n	80180a2 <RegionUS915InitDefaults+0x242>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801803c:	4b1b      	ldr	r3, [pc, #108]	; (80180ac <RegionUS915InitDefaults+0x24c>)
 801803e:	681b      	ldr	r3, [r3, #0]
 8018040:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8018044:	4b19      	ldr	r3, [pc, #100]	; (80180ac <RegionUS915InitDefaults+0x24c>)
 8018046:	681b      	ldr	r3, [r3, #0]
 8018048:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 801804c:	2206      	movs	r2, #6
 801804e:	4619      	mov	r1, r3
 8018050:	f7fd fe2a 	bl	8015ca8 <RegionCommonChanMaskCopy>

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            for( uint8_t i = 0; i < 6; i++ )
 8018054:	2300      	movs	r3, #0
 8018056:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801805a:	e01a      	b.n	8018092 <RegionUS915InitDefaults+0x232>
#endif /* REGION_VERSION */
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 801805c:	4b12      	ldr	r3, [pc, #72]	; (80180a8 <RegionUS915InitDefaults+0x248>)
 801805e:	681b      	ldr	r3, [r3, #0]
 8018060:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8018064:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8018068:	4b10      	ldr	r3, [pc, #64]	; (80180ac <RegionUS915InitDefaults+0x24c>)
 801806a:	681b      	ldr	r3, [r3, #0]
 801806c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8018070:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8018074:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8018078:	4b0b      	ldr	r3, [pc, #44]	; (80180a8 <RegionUS915InitDefaults+0x248>)
 801807a:	681b      	ldr	r3, [r3, #0]
 801807c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8018080:	4001      	ands	r1, r0
 8018082:	b289      	uxth	r1, r1
 8018084:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < 6; i++ )
 8018088:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801808c:	3301      	adds	r3, #1
 801808e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8018092:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8018096:	2b05      	cmp	r3, #5
 8018098:	d9e0      	bls.n	801805c <RegionUS915InitDefaults+0x1fc>
            }
            break;
 801809a:	e002      	b.n	80180a2 <RegionUS915InitDefaults+0x242>
        }
        default:
        {
            break;
 801809c:	bf00      	nop
 801809e:	e000      	b.n	80180a2 <RegionUS915InitDefaults+0x242>
                return;
 80180a0:	bf00      	nop
        }
    }
#endif /* REGION_US915 */
}
 80180a2:	3728      	adds	r7, #40	; 0x28
 80180a4:	46bd      	mov	sp, r7
 80180a6:	bd80      	pop	{r7, pc}
 80180a8:	20001ad8 	.word	0x20001ad8
 80180ac:	20001adc 	.word	0x20001adc
 80180b0:	20001ae0 	.word	0x20001ae0
 80180b4:	00030d40 	.word	0x00030d40
 80180b8:	35c80160 	.word	0x35c80160
 80180bc:	00186a00 	.word	0x00186a00
 80180c0:	35d2afc0 	.word	0x35d2afc0

080180c4 <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80180c4:	b580      	push	{r7, lr}
 80180c6:	b082      	sub	sp, #8
 80180c8:	af00      	add	r7, sp, #0
 80180ca:	6078      	str	r0, [r7, #4]
 80180cc:	460b      	mov	r3, r1
 80180ce:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_US915 )
    switch( phyAttribute )
 80180d0:	78fb      	ldrb	r3, [r7, #3]
 80180d2:	2b0f      	cmp	r3, #15
 80180d4:	d867      	bhi.n	80181a6 <RegionUS915Verify+0xe2>
 80180d6:	a201      	add	r2, pc, #4	; (adr r2, 80180dc <RegionUS915Verify+0x18>)
 80180d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80180dc:	0801811d 	.word	0x0801811d
 80180e0:	080181a7 	.word	0x080181a7
 80180e4:	080181a7 	.word	0x080181a7
 80180e8:	080181a7 	.word	0x080181a7
 80180ec:	080181a7 	.word	0x080181a7
 80180f0:	0801812b 	.word	0x0801812b
 80180f4:	08018149 	.word	0x08018149
 80180f8:	08018167 	.word	0x08018167
 80180fc:	080181a7 	.word	0x080181a7
 8018100:	08018185 	.word	0x08018185
 8018104:	08018185 	.word	0x08018185
 8018108:	080181a7 	.word	0x080181a7
 801810c:	080181a7 	.word	0x080181a7
 8018110:	080181a7 	.word	0x080181a7
 8018114:	080181a7 	.word	0x080181a7
 8018118:	080181a3 	.word	0x080181a3
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 801811c:	687b      	ldr	r3, [r7, #4]
 801811e:	681b      	ldr	r3, [r3, #0]
 8018120:	4618      	mov	r0, r3
 8018122:	f7ff fca1 	bl	8017a68 <VerifyRfFreq>
 8018126:	4603      	mov	r3, r0
 8018128:	e03e      	b.n	80181a8 <RegionUS915Verify+0xe4>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 801812a:	687b      	ldr	r3, [r7, #4]
 801812c:	f993 3000 	ldrsb.w	r3, [r3]
 8018130:	2204      	movs	r2, #4
 8018132:	2100      	movs	r1, #0
 8018134:	4618      	mov	r0, r3
 8018136:	f7fd fd3a 	bl	8015bae <RegionCommonValueInRange>
 801813a:	4603      	mov	r3, r0
 801813c:	2b00      	cmp	r3, #0
 801813e:	bf14      	ite	ne
 8018140:	2301      	movne	r3, #1
 8018142:	2300      	moveq	r3, #0
 8018144:	b2db      	uxtb	r3, r3
 8018146:	e02f      	b.n	80181a8 <RegionUS915Verify+0xe4>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8018148:	687b      	ldr	r3, [r7, #4]
 801814a:	f993 3000 	ldrsb.w	r3, [r3]
 801814e:	2205      	movs	r2, #5
 8018150:	2100      	movs	r1, #0
 8018152:	4618      	mov	r0, r3
 8018154:	f7fd fd2b 	bl	8015bae <RegionCommonValueInRange>
 8018158:	4603      	mov	r3, r0
 801815a:	2b00      	cmp	r3, #0
 801815c:	bf14      	ite	ne
 801815e:	2301      	movne	r3, #1
 8018160:	2300      	moveq	r3, #0
 8018162:	b2db      	uxtb	r3, r3
 8018164:	e020      	b.n	80181a8 <RegionUS915Verify+0xe4>
        }
#endif /* REGION_VERSION */
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 8018166:	687b      	ldr	r3, [r7, #4]
 8018168:	f993 3000 	ldrsb.w	r3, [r3]
 801816c:	220d      	movs	r2, #13
 801816e:	2108      	movs	r1, #8
 8018170:	4618      	mov	r0, r3
 8018172:	f7fd fd1c 	bl	8015bae <RegionCommonValueInRange>
 8018176:	4603      	mov	r3, r0
 8018178:	2b00      	cmp	r3, #0
 801817a:	bf14      	ite	ne
 801817c:	2301      	movne	r3, #1
 801817e:	2300      	moveq	r3, #0
 8018180:	b2db      	uxtb	r3, r3
 8018182:	e011      	b.n	80181a8 <RegionUS915Verify+0xe4>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 8018184:	687b      	ldr	r3, [r7, #4]
 8018186:	f993 3000 	ldrsb.w	r3, [r3]
 801818a:	220e      	movs	r2, #14
 801818c:	2100      	movs	r1, #0
 801818e:	4618      	mov	r0, r3
 8018190:	f7fd fd0d 	bl	8015bae <RegionCommonValueInRange>
 8018194:	4603      	mov	r3, r0
 8018196:	2b00      	cmp	r3, #0
 8018198:	bf14      	ite	ne
 801819a:	2301      	movne	r3, #1
 801819c:	2300      	moveq	r3, #0
 801819e:	b2db      	uxtb	r3, r3
 80181a0:	e002      	b.n	80181a8 <RegionUS915Verify+0xe4>
        }
        case PHY_DUTY_CYCLE:
        {
            return US915_DUTY_CYCLE_ENABLED;
 80181a2:	2300      	movs	r3, #0
 80181a4:	e000      	b.n	80181a8 <RegionUS915Verify+0xe4>
        }
        default:
            return false;
 80181a6:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_US915 */
}
 80181a8:	4618      	mov	r0, r3
 80181aa:	3708      	adds	r7, #8
 80181ac:	46bd      	mov	sp, r7
 80181ae:	bd80      	pop	{r7, pc}

080181b0 <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 80181b0:	b480      	push	{r7}
 80181b2:	b085      	sub	sp, #20
 80181b4:	af00      	add	r7, sp, #0
 80181b6:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 80181b8:	687b      	ldr	r3, [r7, #4]
 80181ba:	7a1b      	ldrb	r3, [r3, #8]
 80181bc:	2b10      	cmp	r3, #16
 80181be:	d160      	bne.n	8018282 <RegionUS915ApplyCFList+0xd2>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 80181c0:	687b      	ldr	r3, [r7, #4]
 80181c2:	685b      	ldr	r3, [r3, #4]
 80181c4:	330f      	adds	r3, #15
 80181c6:	781b      	ldrb	r3, [r3, #0]
 80181c8:	2b01      	cmp	r3, #1
 80181ca:	d15c      	bne.n	8018286 <RegionUS915ApplyCFList+0xd6>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 80181cc:	2300      	movs	r3, #0
 80181ce:	73fb      	strb	r3, [r7, #15]
 80181d0:	2300      	movs	r3, #0
 80181d2:	73bb      	strb	r3, [r7, #14]
 80181d4:	e051      	b.n	801827a <RegionUS915ApplyCFList+0xca>
    {
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	685a      	ldr	r2, [r3, #4]
 80181da:	7bbb      	ldrb	r3, [r7, #14]
 80181dc:	4413      	add	r3, r2
 80181de:	7819      	ldrb	r1, [r3, #0]
 80181e0:	4b2b      	ldr	r3, [pc, #172]	; (8018290 <RegionUS915ApplyCFList+0xe0>)
 80181e2:	681b      	ldr	r3, [r3, #0]
 80181e4:	7bfa      	ldrb	r2, [r7, #15]
 80181e6:	b289      	uxth	r1, r1
 80181e8:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 80181ec:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 80181f0:	4b27      	ldr	r3, [pc, #156]	; (8018290 <RegionUS915ApplyCFList+0xe0>)
 80181f2:	681b      	ldr	r3, [r3, #0]
 80181f4:	7bfa      	ldrb	r2, [r7, #15]
 80181f6:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 80181fa:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80181fe:	687b      	ldr	r3, [r7, #4]
 8018200:	685a      	ldr	r2, [r3, #4]
 8018202:	7bbb      	ldrb	r3, [r7, #14]
 8018204:	3301      	adds	r3, #1
 8018206:	4413      	add	r3, r2
 8018208:	781b      	ldrb	r3, [r3, #0]
 801820a:	b29b      	uxth	r3, r3
 801820c:	021b      	lsls	r3, r3, #8
 801820e:	b299      	uxth	r1, r3
 8018210:	4b1f      	ldr	r3, [pc, #124]	; (8018290 <RegionUS915ApplyCFList+0xe0>)
 8018212:	681b      	ldr	r3, [r3, #0]
 8018214:	7bfa      	ldrb	r2, [r7, #15]
 8018216:	4301      	orrs	r1, r0
 8018218:	b289      	uxth	r1, r1
 801821a:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801821e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        if( chMaskItr == 4 )
 8018222:	7bfb      	ldrb	r3, [r7, #15]
 8018224:	2b04      	cmp	r3, #4
 8018226:	d10f      	bne.n	8018248 <RegionUS915ApplyCFList+0x98>
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 8018228:	4b19      	ldr	r3, [pc, #100]	; (8018290 <RegionUS915ApplyCFList+0xe0>)
 801822a:	681b      	ldr	r3, [r3, #0]
 801822c:	7bfa      	ldrb	r2, [r7, #15]
 801822e:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8018232:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8018236:	4b16      	ldr	r3, [pc, #88]	; (8018290 <RegionUS915ApplyCFList+0xe0>)
 8018238:	681b      	ldr	r3, [r3, #0]
 801823a:	7bfa      	ldrb	r2, [r7, #15]
 801823c:	b2c9      	uxtb	r1, r1
 801823e:	b289      	uxth	r1, r1
 8018240:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8018244:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 8018248:	4b12      	ldr	r3, [pc, #72]	; (8018294 <RegionUS915ApplyCFList+0xe4>)
 801824a:	681b      	ldr	r3, [r3, #0]
 801824c:	7bfa      	ldrb	r2, [r7, #15]
 801824e:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8018252:	4b0f      	ldr	r3, [pc, #60]	; (8018290 <RegionUS915ApplyCFList+0xe0>)
 8018254:	681b      	ldr	r3, [r3, #0]
 8018256:	7bfa      	ldrb	r2, [r7, #15]
 8018258:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801825c:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8018260:	4b0c      	ldr	r3, [pc, #48]	; (8018294 <RegionUS915ApplyCFList+0xe4>)
 8018262:	681b      	ldr	r3, [r3, #0]
 8018264:	7bfa      	ldrb	r2, [r7, #15]
 8018266:	4001      	ands	r1, r0
 8018268:	b289      	uxth	r1, r1
 801826a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 801826e:	7bfb      	ldrb	r3, [r7, #15]
 8018270:	3301      	adds	r3, #1
 8018272:	73fb      	strb	r3, [r7, #15]
 8018274:	7bbb      	ldrb	r3, [r7, #14]
 8018276:	3302      	adds	r3, #2
 8018278:	73bb      	strb	r3, [r7, #14]
 801827a:	7bfb      	ldrb	r3, [r7, #15]
 801827c:	2b04      	cmp	r3, #4
 801827e:	d9aa      	bls.n	80181d6 <RegionUS915ApplyCFList+0x26>
 8018280:	e002      	b.n	8018288 <RegionUS915ApplyCFList+0xd8>
        return;
 8018282:	bf00      	nop
 8018284:	e000      	b.n	8018288 <RegionUS915ApplyCFList+0xd8>
        return;
 8018286:	bf00      	nop
    }
#endif /* REGION_US915 */
}
 8018288:	3714      	adds	r7, #20
 801828a:	46bd      	mov	sp, r7
 801828c:	bc80      	pop	{r7}
 801828e:	4770      	bx	lr
 8018290:	20001adc 	.word	0x20001adc
 8018294:	20001ad8 	.word	0x20001ad8

08018298 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8018298:	b580      	push	{r7, lr}
 801829a:	b084      	sub	sp, #16
 801829c:	af00      	add	r7, sp, #0
 801829e:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 80182a0:	687b      	ldr	r3, [r7, #4]
 80182a2:	681b      	ldr	r3, [r3, #0]
 80182a4:	2204      	movs	r2, #4
 80182a6:	2100      	movs	r1, #0
 80182a8:	4618      	mov	r0, r3
 80182aa:	f7fd fcd1 	bl	8015c50 <RegionCommonCountChannels>
 80182ae:	4603      	mov	r3, r0
 80182b0:	73bb      	strb	r3, [r7, #14]

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 80182b2:	7bbb      	ldrb	r3, [r7, #14]
 80182b4:	2b01      	cmp	r3, #1
 80182b6:	d804      	bhi.n	80182c2 <RegionUS915ChanMaskSet+0x2a>
 80182b8:	7bbb      	ldrb	r3, [r7, #14]
 80182ba:	2b00      	cmp	r3, #0
 80182bc:	d001      	beq.n	80182c2 <RegionUS915ChanMaskSet+0x2a>
        ( nbChannels > 0 ) )
    {
        return false;
 80182be:	2300      	movs	r3, #0
 80182c0:	e04a      	b.n	8018358 <RegionUS915ChanMaskSet+0xc0>
    }

    switch( chanMaskSet->ChannelsMaskType )
 80182c2:	687b      	ldr	r3, [r7, #4]
 80182c4:	791b      	ldrb	r3, [r3, #4]
 80182c6:	2b00      	cmp	r3, #0
 80182c8:	d002      	beq.n	80182d0 <RegionUS915ChanMaskSet+0x38>
 80182ca:	2b01      	cmp	r3, #1
 80182cc:	d036      	beq.n	801833c <RegionUS915ChanMaskSet+0xa4>
 80182ce:	e040      	b.n	8018352 <RegionUS915ChanMaskSet+0xba>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80182d0:	4b23      	ldr	r3, [pc, #140]	; (8018360 <RegionUS915ChanMaskSet+0xc8>)
 80182d2:	681b      	ldr	r3, [r3, #0]
 80182d4:	f503 7058 	add.w	r0, r3, #864	; 0x360
 80182d8:	687b      	ldr	r3, [r7, #4]
 80182da:	681b      	ldr	r3, [r3, #0]
 80182dc:	2206      	movs	r2, #6
 80182de:	4619      	mov	r1, r3
 80182e0:	f7fd fce2 	bl	8015ca8 <RegionCommonChanMaskCopy>

            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 80182e4:	4b1e      	ldr	r3, [pc, #120]	; (8018360 <RegionUS915ChanMaskSet+0xc8>)
 80182e6:	681b      	ldr	r3, [r3, #0]
 80182e8:	f8b3 2374 	ldrh.w	r2, [r3, #884]	; 0x374
 80182ec:	4b1c      	ldr	r3, [pc, #112]	; (8018360 <RegionUS915ChanMaskSet+0xc8>)
 80182ee:	681b      	ldr	r3, [r3, #0]
 80182f0:	b2d2      	uxtb	r2, r2
 80182f2:	b292      	uxth	r2, r2
 80182f4:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 80182f8:	4b19      	ldr	r3, [pc, #100]	; (8018360 <RegionUS915ChanMaskSet+0xc8>)
 80182fa:	681b      	ldr	r3, [r3, #0]
 80182fc:	2200      	movs	r2, #0
 80182fe:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8018302:	2300      	movs	r3, #0
 8018304:	73fb      	strb	r3, [r7, #15]
 8018306:	e015      	b.n	8018334 <RegionUS915ChanMaskSet+0x9c>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 8018308:	4b16      	ldr	r3, [pc, #88]	; (8018364 <RegionUS915ChanMaskSet+0xcc>)
 801830a:	681b      	ldr	r3, [r3, #0]
 801830c:	7bfa      	ldrb	r2, [r7, #15]
 801830e:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8018312:	4b13      	ldr	r3, [pc, #76]	; (8018360 <RegionUS915ChanMaskSet+0xc8>)
 8018314:	681b      	ldr	r3, [r3, #0]
 8018316:	7bfa      	ldrb	r2, [r7, #15]
 8018318:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801831c:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8018320:	4b10      	ldr	r3, [pc, #64]	; (8018364 <RegionUS915ChanMaskSet+0xcc>)
 8018322:	681b      	ldr	r3, [r3, #0]
 8018324:	7bfa      	ldrb	r2, [r7, #15]
 8018326:	4001      	ands	r1, r0
 8018328:	b289      	uxth	r1, r1
 801832a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 801832e:	7bfb      	ldrb	r3, [r7, #15]
 8018330:	3301      	adds	r3, #1
 8018332:	73fb      	strb	r3, [r7, #15]
 8018334:	7bfb      	ldrb	r3, [r7, #15]
 8018336:	2b05      	cmp	r3, #5
 8018338:	d9e6      	bls.n	8018308 <RegionUS915ChanMaskSet+0x70>
            }
            break;
 801833a:	e00c      	b.n	8018356 <RegionUS915ChanMaskSet+0xbe>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801833c:	4b08      	ldr	r3, [pc, #32]	; (8018360 <RegionUS915ChanMaskSet+0xc8>)
 801833e:	681b      	ldr	r3, [r3, #0]
 8018340:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 8018344:	687b      	ldr	r3, [r7, #4]
 8018346:	681b      	ldr	r3, [r3, #0]
 8018348:	2206      	movs	r2, #6
 801834a:	4619      	mov	r1, r3
 801834c:	f7fd fcac 	bl	8015ca8 <RegionCommonChanMaskCopy>
            break;
 8018350:	e001      	b.n	8018356 <RegionUS915ChanMaskSet+0xbe>
        }
        default:
            return false;
 8018352:	2300      	movs	r3, #0
 8018354:	e000      	b.n	8018358 <RegionUS915ChanMaskSet+0xc0>
    }
    return true;
 8018356:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8018358:	4618      	mov	r0, r3
 801835a:	3710      	adds	r7, #16
 801835c:	46bd      	mov	sp, r7
 801835e:	bd80      	pop	{r7, pc}
 8018360:	20001adc 	.word	0x20001adc
 8018364:	20001ad8 	.word	0x20001ad8

08018368 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8018368:	b580      	push	{r7, lr}
 801836a:	b088      	sub	sp, #32
 801836c:	af02      	add	r7, sp, #8
 801836e:	60ba      	str	r2, [r7, #8]
 8018370:	607b      	str	r3, [r7, #4]
 8018372:	4603      	mov	r3, r0
 8018374:	73fb      	strb	r3, [r7, #15]
 8018376:	460b      	mov	r3, r1
 8018378:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;
 801837a:	2300      	movs	r3, #0
 801837c:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 801837e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018382:	2b0d      	cmp	r3, #13
 8018384:	bfa8      	it	ge
 8018386:	230d      	movge	r3, #13
 8018388:	b25a      	sxtb	r2, r3
 801838a:	687b      	ldr	r3, [r7, #4]
 801838c:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 801838e:	687b      	ldr	r3, [r7, #4]
 8018390:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018394:	4916      	ldr	r1, [pc, #88]	; (80183f0 <RegionUS915ComputeRxWindowParameters+0x88>)
 8018396:	4618      	mov	r0, r3
 8018398:	f7fe f926 	bl	80165e8 <RegionCommonGetBandwidth>
 801839c:	4603      	mov	r3, r0
 801839e:	b2da      	uxtb	r2, r3
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	709a      	strb	r2, [r3, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 80183a4:	687b      	ldr	r3, [r7, #4]
 80183a6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80183aa:	461a      	mov	r2, r3
 80183ac:	4b11      	ldr	r3, [pc, #68]	; (80183f4 <RegionUS915ComputeRxWindowParameters+0x8c>)
 80183ae:	5c9a      	ldrb	r2, [r3, r2]
 80183b0:	687b      	ldr	r3, [r7, #4]
 80183b2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80183b6:	4619      	mov	r1, r3
 80183b8:	4b0d      	ldr	r3, [pc, #52]	; (80183f0 <RegionUS915ComputeRxWindowParameters+0x88>)
 80183ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80183be:	4619      	mov	r1, r3
 80183c0:	4610      	mov	r0, r2
 80183c2:	f7fd fe8f 	bl	80160e4 <RegionCommonComputeSymbolTimeLoRa>
 80183c6:	6178      	str	r0, [r7, #20]

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 80183c8:	4b0b      	ldr	r3, [pc, #44]	; (80183f8 <RegionUS915ComputeRxWindowParameters+0x90>)
 80183ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80183cc:	4798      	blx	r3
 80183ce:	687b      	ldr	r3, [r7, #4]
 80183d0:	3308      	adds	r3, #8
 80183d2:	687a      	ldr	r2, [r7, #4]
 80183d4:	320c      	adds	r2, #12
 80183d6:	7bb9      	ldrb	r1, [r7, #14]
 80183d8:	9201      	str	r2, [sp, #4]
 80183da:	9300      	str	r3, [sp, #0]
 80183dc:	4603      	mov	r3, r0
 80183de:	68ba      	ldr	r2, [r7, #8]
 80183e0:	6978      	ldr	r0, [r7, #20]
 80183e2:	f7fd fea5 	bl	8016130 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 80183e6:	bf00      	nop
 80183e8:	3718      	adds	r7, #24
 80183ea:	46bd      	mov	sp, r7
 80183ec:	bd80      	pop	{r7, pc}
 80183ee:	bf00      	nop
 80183f0:	0801e9e0 	.word	0x0801e9e0
 80183f4:	0801e9d0 	.word	0x0801e9d0
 80183f8:	0801ea54 	.word	0x0801ea54

080183fc <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80183fc:	b590      	push	{r4, r7, lr}
 80183fe:	b091      	sub	sp, #68	; 0x44
 8018400:	af0a      	add	r7, sp, #40	; 0x28
 8018402:	6078      	str	r0, [r7, #4]
 8018404:	6039      	str	r1, [r7, #0]
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 8018406:	687b      	ldr	r3, [r7, #4]
 8018408:	785b      	ldrb	r3, [r3, #1]
 801840a:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 801840c:	2300      	movs	r3, #0
 801840e:	75fb      	strb	r3, [r7, #23]
    int8_t phyDr = 0;
 8018410:	2300      	movs	r3, #0
 8018412:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8018414:	687b      	ldr	r3, [r7, #4]
 8018416:	685b      	ldr	r3, [r3, #4]
 8018418:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 801841a:	4b34      	ldr	r3, [pc, #208]	; (80184ec <RegionUS915RxConfig+0xf0>)
 801841c:	685b      	ldr	r3, [r3, #4]
 801841e:	4798      	blx	r3
 8018420:	4603      	mov	r3, r0
 8018422:	2b00      	cmp	r3, #0
 8018424:	d001      	beq.n	801842a <RegionUS915RxConfig+0x2e>
    {
        return false;
 8018426:	2300      	movs	r3, #0
 8018428:	e05c      	b.n	80184e4 <RegionUS915RxConfig+0xe8>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801842a:	687b      	ldr	r3, [r7, #4]
 801842c:	7cdb      	ldrb	r3, [r3, #19]
 801842e:	2b00      	cmp	r3, #0
 8018430:	d109      	bne.n	8018446 <RegionUS915RxConfig+0x4a>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 8018432:	687b      	ldr	r3, [r7, #4]
 8018434:	781b      	ldrb	r3, [r3, #0]
 8018436:	f003 0307 	and.w	r3, r3, #7
 801843a:	4a2d      	ldr	r2, [pc, #180]	; (80184f0 <RegionUS915RxConfig+0xf4>)
 801843c:	fb03 f202 	mul.w	r2, r3, r2
 8018440:	4b2c      	ldr	r3, [pc, #176]	; (80184f4 <RegionUS915RxConfig+0xf8>)
 8018442:	4413      	add	r3, r2
 8018444:	613b      	str	r3, [r7, #16]
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 8018446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801844a:	4a2b      	ldr	r2, [pc, #172]	; (80184f8 <RegionUS915RxConfig+0xfc>)
 801844c:	5cd3      	ldrb	r3, [r2, r3]
 801844e:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8018450:	4b26      	ldr	r3, [pc, #152]	; (80184ec <RegionUS915RxConfig+0xf0>)
 8018452:	68db      	ldr	r3, [r3, #12]
 8018454:	6938      	ldr	r0, [r7, #16]
 8018456:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8018458:	4b24      	ldr	r3, [pc, #144]	; (80184ec <RegionUS915RxConfig+0xf0>)
 801845a:	699c      	ldr	r4, [r3, #24]
 801845c:	687b      	ldr	r3, [r7, #4]
 801845e:	789b      	ldrb	r3, [r3, #2]
 8018460:	4618      	mov	r0, r3
 8018462:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8018466:	687b      	ldr	r3, [r7, #4]
 8018468:	689b      	ldr	r3, [r3, #8]
 801846a:	b29b      	uxth	r3, r3
 801846c:	687a      	ldr	r2, [r7, #4]
 801846e:	7c92      	ldrb	r2, [r2, #18]
 8018470:	9209      	str	r2, [sp, #36]	; 0x24
 8018472:	2201      	movs	r2, #1
 8018474:	9208      	str	r2, [sp, #32]
 8018476:	2200      	movs	r2, #0
 8018478:	9207      	str	r2, [sp, #28]
 801847a:	2200      	movs	r2, #0
 801847c:	9206      	str	r2, [sp, #24]
 801847e:	2200      	movs	r2, #0
 8018480:	9205      	str	r2, [sp, #20]
 8018482:	2200      	movs	r2, #0
 8018484:	9204      	str	r2, [sp, #16]
 8018486:	2200      	movs	r2, #0
 8018488:	9203      	str	r2, [sp, #12]
 801848a:	9302      	str	r3, [sp, #8]
 801848c:	2308      	movs	r3, #8
 801848e:	9301      	str	r3, [sp, #4]
 8018490:	2300      	movs	r3, #0
 8018492:	9300      	str	r3, [sp, #0]
 8018494:	2301      	movs	r3, #1
 8018496:	460a      	mov	r2, r1
 8018498:	4601      	mov	r1, r0
 801849a:	2001      	movs	r0, #1
 801849c:	47a0      	blx	r4

    if( rxConfig->RepeaterSupport == true )
 801849e:	687b      	ldr	r3, [r7, #4]
 80184a0:	7c5b      	ldrb	r3, [r3, #17]
 80184a2:	2b00      	cmp	r3, #0
 80184a4:	d005      	beq.n	80184b2 <RegionUS915RxConfig+0xb6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 80184a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80184aa:	4a14      	ldr	r2, [pc, #80]	; (80184fc <RegionUS915RxConfig+0x100>)
 80184ac:	5cd3      	ldrb	r3, [r2, r3]
 80184ae:	75fb      	strb	r3, [r7, #23]
 80184b0:	e004      	b.n	80184bc <RegionUS915RxConfig+0xc0>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 80184b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80184b6:	4a12      	ldr	r2, [pc, #72]	; (8018500 <RegionUS915RxConfig+0x104>)
 80184b8:	5cd3      	ldrb	r3, [r2, r3]
 80184ba:	75fb      	strb	r3, [r7, #23]
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 80184bc:	4b0b      	ldr	r3, [pc, #44]	; (80184ec <RegionUS915RxConfig+0xf0>)
 80184be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80184c0:	7dfa      	ldrb	r2, [r7, #23]
 80184c2:	320d      	adds	r2, #13
 80184c4:	b2d2      	uxtb	r2, r2
 80184c6:	4611      	mov	r1, r2
 80184c8:	2001      	movs	r0, #1
 80184ca:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 80184cc:	687b      	ldr	r3, [r7, #4]
 80184ce:	7cdb      	ldrb	r3, [r3, #19]
 80184d0:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80184d4:	6939      	ldr	r1, [r7, #16]
 80184d6:	4618      	mov	r0, r3
 80184d8:	f7fe f8a4 	bl	8016624 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 80184dc:	683b      	ldr	r3, [r7, #0]
 80184de:	7bfa      	ldrb	r2, [r7, #15]
 80184e0:	701a      	strb	r2, [r3, #0]
    return true;
 80184e2:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 80184e4:	4618      	mov	r0, r3
 80184e6:	371c      	adds	r7, #28
 80184e8:	46bd      	mov	sp, r7
 80184ea:	bd90      	pop	{r4, r7, pc}
 80184ec:	0801ea54 	.word	0x0801ea54
 80184f0:	000927c0 	.word	0x000927c0
 80184f4:	370870a0 	.word	0x370870a0
 80184f8:	0801e9d0 	.word	0x0801e9d0
 80184fc:	0801ea44 	.word	0x0801ea44
 8018500:	0801ea34 	.word	0x0801ea34

08018504 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8018504:	b590      	push	{r4, r7, lr}
 8018506:	b093      	sub	sp, #76	; 0x4c
 8018508:	af0a      	add	r7, sp, #40	; 0x28
 801850a:	60f8      	str	r0, [r7, #12]
 801850c:	60b9      	str	r1, [r7, #8]
 801850e:	607a      	str	r2, [r7, #4]
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 8018510:	68fb      	ldr	r3, [r7, #12]
 8018512:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018516:	461a      	mov	r2, r3
 8018518:	4b49      	ldr	r3, [pc, #292]	; (8018640 <RegionUS915TxConfig+0x13c>)
 801851a:	5c9b      	ldrb	r3, [r3, r2]
 801851c:	77fb      	strb	r3, [r7, #31]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 801851e:	68fb      	ldr	r3, [r7, #12]
 8018520:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8018524:	4b47      	ldr	r3, [pc, #284]	; (8018644 <RegionUS915TxConfig+0x140>)
 8018526:	681a      	ldr	r2, [r3, #0]
 8018528:	4b47      	ldr	r3, [pc, #284]	; (8018648 <RegionUS915TxConfig+0x144>)
 801852a:	6819      	ldr	r1, [r3, #0]
 801852c:	68fb      	ldr	r3, [r7, #12]
 801852e:	781b      	ldrb	r3, [r3, #0]
 8018530:	461c      	mov	r4, r3
 8018532:	4623      	mov	r3, r4
 8018534:	005b      	lsls	r3, r3, #1
 8018536:	4423      	add	r3, r4
 8018538:	009b      	lsls	r3, r3, #2
 801853a:	440b      	add	r3, r1
 801853c:	3309      	adds	r3, #9
 801853e:	781b      	ldrb	r3, [r3, #0]
 8018540:	4619      	mov	r1, r3
 8018542:	460b      	mov	r3, r1
 8018544:	005b      	lsls	r3, r3, #1
 8018546:	440b      	add	r3, r1
 8018548:	00db      	lsls	r3, r3, #3
 801854a:	4413      	add	r3, r2
 801854c:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8018550:	68fb      	ldr	r3, [r7, #12]
 8018552:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8018556:	4b3c      	ldr	r3, [pc, #240]	; (8018648 <RegionUS915TxConfig+0x144>)
 8018558:	681b      	ldr	r3, [r3, #0]
 801855a:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801855e:	f7ff fa4d 	bl	80179fc <LimitTxPower>
 8018562:	4603      	mov	r3, r0
 8018564:	77bb      	strb	r3, [r7, #30]
#endif /* REGION_VERSION */

    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 8018566:	68fb      	ldr	r3, [r7, #12]
 8018568:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801856c:	4937      	ldr	r1, [pc, #220]	; (801864c <RegionUS915TxConfig+0x148>)
 801856e:	4618      	mov	r0, r3
 8018570:	f7fe f83a 	bl	80165e8 <RegionCommonGetBandwidth>
 8018574:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8018576:	2300      	movs	r3, #0
 8018578:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 801857a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801857e:	f04f 0200 	mov.w	r2, #0
 8018582:	4933      	ldr	r1, [pc, #204]	; (8018650 <RegionUS915TxConfig+0x14c>)
 8018584:	4618      	mov	r0, r3
 8018586:	f7fd fe8b 	bl	80162a0 <RegionCommonComputeTxPower>
 801858a:	4603      	mov	r3, r0
 801858c:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 801858e:	4b31      	ldr	r3, [pc, #196]	; (8018654 <RegionUS915TxConfig+0x150>)
 8018590:	68da      	ldr	r2, [r3, #12]
 8018592:	4b2d      	ldr	r3, [pc, #180]	; (8018648 <RegionUS915TxConfig+0x144>)
 8018594:	6819      	ldr	r1, [r3, #0]
 8018596:	68fb      	ldr	r3, [r7, #12]
 8018598:	781b      	ldrb	r3, [r3, #0]
 801859a:	4618      	mov	r0, r3
 801859c:	4603      	mov	r3, r0
 801859e:	005b      	lsls	r3, r3, #1
 80185a0:	4403      	add	r3, r0
 80185a2:	009b      	lsls	r3, r3, #2
 80185a4:	440b      	add	r3, r1
 80185a6:	681b      	ldr	r3, [r3, #0]
 80185a8:	4618      	mov	r0, r3
 80185aa:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 80185ac:	4b29      	ldr	r3, [pc, #164]	; (8018654 <RegionUS915TxConfig+0x150>)
 80185ae:	69dc      	ldr	r4, [r3, #28]
 80185b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80185b4:	f997 1017 	ldrsb.w	r1, [r7, #23]
 80185b8:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80185bc:	9208      	str	r2, [sp, #32]
 80185be:	2200      	movs	r2, #0
 80185c0:	9207      	str	r2, [sp, #28]
 80185c2:	2200      	movs	r2, #0
 80185c4:	9206      	str	r2, [sp, #24]
 80185c6:	2200      	movs	r2, #0
 80185c8:	9205      	str	r2, [sp, #20]
 80185ca:	2201      	movs	r2, #1
 80185cc:	9204      	str	r2, [sp, #16]
 80185ce:	2200      	movs	r2, #0
 80185d0:	9203      	str	r2, [sp, #12]
 80185d2:	2208      	movs	r2, #8
 80185d4:	9202      	str	r2, [sp, #8]
 80185d6:	2201      	movs	r2, #1
 80185d8:	9201      	str	r2, [sp, #4]
 80185da:	9300      	str	r3, [sp, #0]
 80185dc:	69bb      	ldr	r3, [r7, #24]
 80185de:	2200      	movs	r2, #0
 80185e0:	2001      	movs	r0, #1
 80185e2:	47a0      	blx	r4
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 80185e4:	4b18      	ldr	r3, [pc, #96]	; (8018648 <RegionUS915TxConfig+0x144>)
 80185e6:	681a      	ldr	r2, [r3, #0]
 80185e8:	68fb      	ldr	r3, [r7, #12]
 80185ea:	781b      	ldrb	r3, [r3, #0]
 80185ec:	4619      	mov	r1, r3
 80185ee:	460b      	mov	r3, r1
 80185f0:	005b      	lsls	r3, r3, #1
 80185f2:	440b      	add	r3, r1
 80185f4:	009b      	lsls	r3, r3, #2
 80185f6:	4413      	add	r3, r2
 80185f8:	681a      	ldr	r2, [r3, #0]
 80185fa:	68fb      	ldr	r3, [r7, #12]
 80185fc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018600:	4619      	mov	r1, r3
 8018602:	4610      	mov	r0, r2
 8018604:	f7fe f840 	bl	8016688 <RegionCommonTxConfigPrint>

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 8018608:	4b12      	ldr	r3, [pc, #72]	; (8018654 <RegionUS915TxConfig+0x150>)
 801860a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801860c:	68fa      	ldr	r2, [r7, #12]
 801860e:	8992      	ldrh	r2, [r2, #12]
 8018610:	b2d2      	uxtb	r2, r2
 8018612:	4611      	mov	r1, r2
 8018614:	2001      	movs	r0, #1
 8018616:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8018618:	68fb      	ldr	r3, [r7, #12]
 801861a:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801861e:	68fb      	ldr	r3, [r7, #12]
 8018620:	899b      	ldrh	r3, [r3, #12]
 8018622:	4619      	mov	r1, r3
 8018624:	4610      	mov	r0, r2
 8018626:	f7ff fa63 	bl	8017af0 <GetTimeOnAir>
 801862a:	4602      	mov	r2, r0
 801862c:	687b      	ldr	r3, [r7, #4]
 801862e:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 8018630:	68bb      	ldr	r3, [r7, #8]
 8018632:	7fba      	ldrb	r2, [r7, #30]
 8018634:	701a      	strb	r2, [r3, #0]
    return true;
 8018636:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8018638:	4618      	mov	r0, r3
 801863a:	3724      	adds	r7, #36	; 0x24
 801863c:	46bd      	mov	sp, r7
 801863e:	bd90      	pop	{r4, r7, pc}
 8018640:	0801e9d0 	.word	0x0801e9d0
 8018644:	20001ae0 	.word	0x20001ae0
 8018648:	20001adc 	.word	0x20001adc
 801864c:	0801e9e0 	.word	0x0801e9e0
 8018650:	41f00000 	.word	0x41f00000
 8018654:	0801ea54 	.word	0x0801ea54

08018658 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8018658:	b590      	push	{r4, r7, lr}
 801865a:	b097      	sub	sp, #92	; 0x5c
 801865c:	af00      	add	r7, sp, #0
 801865e:	60f8      	str	r0, [r7, #12]
 8018660:	60b9      	str	r1, [r7, #8]
 8018662:	607a      	str	r2, [r7, #4]
 8018664:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8018666:	2307      	movs	r3, #7
 8018668:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 801866c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8018670:	2200      	movs	r2, #0
 8018672:	601a      	str	r2, [r3, #0]
 8018674:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8018676:	2300      	movs	r3, #0
 8018678:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    uint8_t bytesProcessed = 0;
 801867c:	2300      	movs	r3, #0
 801867e:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 8018682:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018686:	2200      	movs	r2, #0
 8018688:	601a      	str	r2, [r3, #0]
 801868a:	605a      	str	r2, [r3, #4]
 801868c:	609a      	str	r2, [r3, #8]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 801868e:	4b97      	ldr	r3, [pc, #604]	; (80188ec <RegionUS915LinkAdrReq+0x294>)
 8018690:	681b      	ldr	r3, [r3, #0]
 8018692:	f503 7158 	add.w	r1, r3, #864	; 0x360
 8018696:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801869a:	2206      	movs	r2, #6
 801869c:	4618      	mov	r0, r3
 801869e:	f7fd fb03 	bl	8015ca8 <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 80186a2:	e11b      	b.n	80188dc <RegionUS915LinkAdrReq+0x284>
    {
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 80186a4:	68fb      	ldr	r3, [r7, #12]
 80186a6:	685a      	ldr	r2, [r3, #4]
 80186a8:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80186ac:	4413      	add	r3, r2
 80186ae:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80186b2:	4611      	mov	r1, r2
 80186b4:	4618      	mov	r0, r3
 80186b6:	f7fd fc3b 	bl	8015f30 <RegionCommonParseLinkAdrReq>
 80186ba:	4603      	mov	r3, r0
 80186bc:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

        if( nextIndex == 0 )
 80186c0:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80186c4:	2b00      	cmp	r3, #0
 80186c6:	f000 8113 	beq.w	80188f0 <RegionUS915LinkAdrReq+0x298>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 80186ca:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 80186ce:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80186d2:	4413      	add	r3, r2
 80186d4:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 80186d8:	2307      	movs	r3, #7
 80186da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

        if( linkAdrParams.ChMaskCtrl == 6 )
 80186de:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80186e2:	2b06      	cmp	r3, #6
 80186e4:	d116      	bne.n	8018714 <RegionUS915LinkAdrReq+0xbc>
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 80186e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80186ea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            channelsMask[1] = 0xFFFF;
 80186ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80186f2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            channelsMask[2] = 0xFFFF;
 80186f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80186fa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            channelsMask[3] = 0xFFFF;
 80186fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018702:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 8018706:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 801870a:	b2db      	uxtb	r3, r3
 801870c:	b29b      	uxth	r3, r3
 801870e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8018712:	e0e3      	b.n	80188dc <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 8018714:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8018718:	2b07      	cmp	r3, #7
 801871a:	d112      	bne.n	8018742 <RegionUS915LinkAdrReq+0xea>
        {
            // Disable all 125 kHz channels
            channelsMask[0] = 0x0000;
 801871c:	2300      	movs	r3, #0
 801871e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            channelsMask[1] = 0x0000;
 8018722:	2300      	movs	r3, #0
 8018724:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            channelsMask[2] = 0x0000;
 8018728:	2300      	movs	r3, #0
 801872a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            channelsMask[3] = 0x0000;
 801872e:	2300      	movs	r3, #0
 8018730:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 8018734:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8018738:	b2db      	uxtb	r3, r3
 801873a:	b29b      	uxth	r3, r3
 801873c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8018740:	e0cc      	b.n	80188dc <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 8018742:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8018746:	2b05      	cmp	r3, #5
 8018748:	f040 80bf 	bne.w	80188ca <RegionUS915LinkAdrReq+0x272>
        {
            // Start value for comparison
            uint8_t bitMask = 1;
 801874c:	2301      	movs	r3, #1
 801874e:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52

            // cntChannelMask for channelsMask[0] until channelsMask[3]
            uint8_t cntChannelMask = 0;
 8018752:	2300      	movs	r3, #0
 8018754:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

            // i will be 1, 2, 3, ..., 7
            for( uint8_t i = 0; i <= 7; i++ )
 8018758:	2300      	movs	r3, #0
 801875a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 801875e:	e0ae      	b.n	80188be <RegionUS915LinkAdrReq+0x266>
            {
                // 8 MSBs of ChMask are RFU
                // Checking if the ChMask is set, then true
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 8018760:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8018764:	b2da      	uxtb	r2, r3
 8018766:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801876a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801876e:	fa01 f303 	lsl.w	r3, r1, r3
 8018772:	4013      	ands	r3, r2
 8018774:	2b00      	cmp	r3, #0
 8018776:	d04d      	beq.n	8018814 <RegionUS915LinkAdrReq+0x1bc>
                {
                    if( ( i % 2 ) == 0 )
 8018778:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801877c:	f003 0301 	and.w	r3, r3, #1
 8018780:	b2db      	uxtb	r3, r3
 8018782:	2b00      	cmp	r3, #0
 8018784:	d120      	bne.n	80187c8 <RegionUS915LinkAdrReq+0x170>
                    {
                        // Enable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] |= 0x00FF;
 8018786:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801878a:	005b      	lsls	r3, r3, #1
 801878c:	3358      	adds	r3, #88	; 0x58
 801878e:	443b      	add	r3, r7
 8018790:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8018794:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8018798:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 801879c:	b292      	uxth	r2, r2
 801879e:	005b      	lsls	r3, r3, #1
 80187a0:	3358      	adds	r3, #88	; 0x58
 80187a2:	443b      	add	r3, r7
 80187a4:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 80187a8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80187ac:	b21a      	sxth	r2, r3
 80187ae:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 80187b2:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80187b6:	fa01 f303 	lsl.w	r3, r1, r3
 80187ba:	b21b      	sxth	r3, r3
 80187bc:	4313      	orrs	r3, r2
 80187be:	b21b      	sxth	r3, r3
 80187c0:	b29b      	uxth	r3, r3
 80187c2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80187c6:	e075      	b.n	80188b4 <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] |= 0xFF00;
 80187c8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80187cc:	005b      	lsls	r3, r3, #1
 80187ce:	3358      	adds	r3, #88	; 0x58
 80187d0:	443b      	add	r3, r7
 80187d2:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 80187d6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80187da:	f062 02ff 	orn	r2, r2, #255	; 0xff
 80187de:	b292      	uxth	r2, r2
 80187e0:	005b      	lsls	r3, r3, #1
 80187e2:	3358      	adds	r3, #88	; 0x58
 80187e4:	443b      	add	r3, r7
 80187e6:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 80187ea:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80187ee:	b21a      	sxth	r2, r3
 80187f0:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 80187f4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80187f8:	fa01 f303 	lsl.w	r3, r1, r3
 80187fc:	b21b      	sxth	r3, r3
 80187fe:	4313      	orrs	r3, r2
 8018800:	b21b      	sxth	r3, r3
 8018802:	b29b      	uxth	r3, r3
 8018804:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 8018808:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801880c:	3301      	adds	r3, #1
 801880e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 8018812:	e04f      	b.n	80188b4 <RegionUS915LinkAdrReq+0x25c>
                    }
                }
                // ChMask is not set
                else
                {
                    if( ( i % 2 ) == 0 )
 8018814:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8018818:	f003 0301 	and.w	r3, r3, #1
 801881c:	b2db      	uxtb	r3, r3
 801881e:	2b00      	cmp	r3, #0
 8018820:	d122      	bne.n	8018868 <RegionUS915LinkAdrReq+0x210>
                    {
                        // Disable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] &= 0xFF00;
 8018822:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8018826:	005b      	lsls	r3, r3, #1
 8018828:	3358      	adds	r3, #88	; 0x58
 801882a:	443b      	add	r3, r7
 801882c:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8018830:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8018834:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8018838:	b292      	uxth	r2, r2
 801883a:	005b      	lsls	r3, r3, #1
 801883c:	3358      	adds	r3, #88	; 0x58
 801883e:	443b      	add	r3, r7
 8018840:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 8018844:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8018848:	b21a      	sxth	r2, r3
 801884a:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801884e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8018852:	fa01 f303 	lsl.w	r3, r1, r3
 8018856:	b21b      	sxth	r3, r3
 8018858:	43db      	mvns	r3, r3
 801885a:	b21b      	sxth	r3, r3
 801885c:	4013      	ands	r3, r2
 801885e:	b21b      	sxth	r3, r3
 8018860:	b29b      	uxth	r3, r3
 8018862:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8018866:	e025      	b.n	80188b4 <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] &= 0x00FF;
 8018868:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801886c:	005b      	lsls	r3, r3, #1
 801886e:	3358      	adds	r3, #88	; 0x58
 8018870:	443b      	add	r3, r7
 8018872:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8018876:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801887a:	b2d2      	uxtb	r2, r2
 801887c:	b292      	uxth	r2, r2
 801887e:	005b      	lsls	r3, r3, #1
 8018880:	3358      	adds	r3, #88	; 0x58
 8018882:	443b      	add	r3, r7
 8018884:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 8018888:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801888c:	b21a      	sxth	r2, r3
 801888e:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 8018892:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8018896:	fa01 f303 	lsl.w	r3, r1, r3
 801889a:	b21b      	sxth	r3, r3
 801889c:	43db      	mvns	r3, r3
 801889e:	b21b      	sxth	r3, r3
 80188a0:	4013      	ands	r3, r2
 80188a2:	b21b      	sxth	r3, r3
 80188a4:	b29b      	uxth	r3, r3
 80188a6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 80188aa:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80188ae:	3301      	adds	r3, #1
 80188b0:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
            for( uint8_t i = 0; i <= 7; i++ )
 80188b4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80188b8:	3301      	adds	r3, #1
 80188ba:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 80188be:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80188c2:	2b07      	cmp	r3, #7
 80188c4:	f67f af4c 	bls.w	8018760 <RegionUS915LinkAdrReq+0x108>
 80188c8:	e008      	b.n	80188dc <RegionUS915LinkAdrReq+0x284>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 80188ca:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80188ce:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80188d2:	005b      	lsls	r3, r3, #1
 80188d4:	3358      	adds	r3, #88	; 0x58
 80188d6:	443b      	add	r3, r7
 80188d8:	f823 2c18 	strh.w	r2, [r3, #-24]
    while( bytesProcessed < linkAdrReq->PayloadSize )
 80188dc:	68fb      	ldr	r3, [r7, #12]
 80188de:	7a1b      	ldrb	r3, [r3, #8]
 80188e0:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 80188e4:	429a      	cmp	r2, r3
 80188e6:	f4ff aedd 	bcc.w	80186a4 <RegionUS915LinkAdrReq+0x4c>
 80188ea:	e002      	b.n	80188f2 <RegionUS915LinkAdrReq+0x29a>
 80188ec:	20001adc 	.word	0x20001adc
            break; // break loop, since no more request has been found
 80188f0:	bf00      	nop
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 80188f2:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 80188f6:	2b03      	cmp	r3, #3
 80188f8:	dc0f      	bgt.n	801891a <RegionUS915LinkAdrReq+0x2c2>
 80188fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80188fe:	2204      	movs	r2, #4
 8018900:	2100      	movs	r1, #0
 8018902:	4618      	mov	r0, r3
 8018904:	f7fd f9a4 	bl	8015c50 <RegionCommonCountChannels>
 8018908:	4603      	mov	r3, r0
 801890a:	2b01      	cmp	r3, #1
 801890c:	d805      	bhi.n	801891a <RegionUS915LinkAdrReq+0x2c2>
    {
        status &= 0xFE; // Channel mask KO
 801890e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018912:	f023 0301 	bic.w	r3, r3, #1
 8018916:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801891a:	2302      	movs	r3, #2
 801891c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8018920:	68fb      	ldr	r3, [r7, #12]
 8018922:	7a5b      	ldrb	r3, [r3, #9]
 8018924:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
    phyParam = RegionUS915GetPhyParam( &getPhy );
 8018928:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801892c:	4618      	mov	r0, r3
 801892e:	f7ff f90f 	bl	8017b50 <RegionUS915GetPhyParam>
 8018932:	4603      	mov	r3, r0
 8018934:	637b      	str	r3, [r7, #52]	; 0x34

    linkAdrVerifyParams.Status = status;
 8018936:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801893a:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 801893c:	68fb      	ldr	r3, [r7, #12]
 801893e:	7a9b      	ldrb	r3, [r3, #10]
 8018940:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8018942:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8018946:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8018948:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 801894c:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801894e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8018952:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8018954:	68fb      	ldr	r3, [r7, #12]
 8018956:	f993 300b 	ldrsb.w	r3, [r3, #11]
 801895a:	777b      	strb	r3, [r7, #29]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 801895c:	68fb      	ldr	r3, [r7, #12]
 801895e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8018962:	77bb      	strb	r3, [r7, #30]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8018964:	68fb      	ldr	r3, [r7, #12]
 8018966:	7b5b      	ldrb	r3, [r3, #13]
 8018968:	b25b      	sxtb	r3, r3
 801896a:	77fb      	strb	r3, [r7, #31]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 801896c:	2348      	movs	r3, #72	; 0x48
 801896e:	f887 3020 	strb.w	r3, [r7, #32]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 8018972:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018976:	627b      	str	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8018978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801897a:	b25b      	sxtb	r3, r3
 801897c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 8018980:	2304      	movs	r3, #4
 8018982:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8018986:	4b3f      	ldr	r3, [pc, #252]	; (8018a84 <RegionUS915LinkAdrReq+0x42c>)
 8018988:	681b      	ldr	r3, [r3, #0]
 801898a:	62fb      	str	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 801898c:	230e      	movs	r3, #14
 801898e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 8018992:	2300      	movs	r3, #0
 8018994:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8018998:	68fb      	ldr	r3, [r7, #12]
 801899a:	681b      	ldr	r3, [r3, #0]
 801899c:	617b      	str	r3, [r7, #20]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 801899e:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80189a2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80189a6:	1c9a      	adds	r2, r3, #2
 80189a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80189ac:	1c59      	adds	r1, r3, #1
 80189ae:	f107 0014 	add.w	r0, r7, #20
 80189b2:	4623      	mov	r3, r4
 80189b4:	f7fd fb0d 	bl	8015fd2 <RegionCommonLinkAdrReqVerifyParams>
 80189b8:	4603      	mov	r3, r0
 80189ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 80189be:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80189c2:	2b07      	cmp	r3, #7
 80189c4:	d147      	bne.n	8018a56 <RegionUS915LinkAdrReq+0x3fe>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 80189c6:	4b2f      	ldr	r3, [pc, #188]	; (8018a84 <RegionUS915LinkAdrReq+0x42c>)
 80189c8:	681b      	ldr	r3, [r3, #0]
 80189ca:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80189ce:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80189d2:	2206      	movs	r2, #6
 80189d4:	4618      	mov	r0, r3
 80189d6:	f7fd f967 	bl	8015ca8 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 80189da:	4b2b      	ldr	r3, [pc, #172]	; (8018a88 <RegionUS915LinkAdrReq+0x430>)
 80189dc:	681b      	ldr	r3, [r3, #0]
 80189de:	8819      	ldrh	r1, [r3, #0]
 80189e0:	4b28      	ldr	r3, [pc, #160]	; (8018a84 <RegionUS915LinkAdrReq+0x42c>)
 80189e2:	681b      	ldr	r3, [r3, #0]
 80189e4:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 80189e8:	4b27      	ldr	r3, [pc, #156]	; (8018a88 <RegionUS915LinkAdrReq+0x430>)
 80189ea:	681b      	ldr	r3, [r3, #0]
 80189ec:	400a      	ands	r2, r1
 80189ee:	b292      	uxth	r2, r2
 80189f0:	801a      	strh	r2, [r3, #0]
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 80189f2:	4b25      	ldr	r3, [pc, #148]	; (8018a88 <RegionUS915LinkAdrReq+0x430>)
 80189f4:	681b      	ldr	r3, [r3, #0]
 80189f6:	8859      	ldrh	r1, [r3, #2]
 80189f8:	4b22      	ldr	r3, [pc, #136]	; (8018a84 <RegionUS915LinkAdrReq+0x42c>)
 80189fa:	681b      	ldr	r3, [r3, #0]
 80189fc:	f8b3 2362 	ldrh.w	r2, [r3, #866]	; 0x362
 8018a00:	4b21      	ldr	r3, [pc, #132]	; (8018a88 <RegionUS915LinkAdrReq+0x430>)
 8018a02:	681b      	ldr	r3, [r3, #0]
 8018a04:	400a      	ands	r2, r1
 8018a06:	b292      	uxth	r2, r2
 8018a08:	805a      	strh	r2, [r3, #2]
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 8018a0a:	4b1f      	ldr	r3, [pc, #124]	; (8018a88 <RegionUS915LinkAdrReq+0x430>)
 8018a0c:	681b      	ldr	r3, [r3, #0]
 8018a0e:	8899      	ldrh	r1, [r3, #4]
 8018a10:	4b1c      	ldr	r3, [pc, #112]	; (8018a84 <RegionUS915LinkAdrReq+0x42c>)
 8018a12:	681b      	ldr	r3, [r3, #0]
 8018a14:	f8b3 2364 	ldrh.w	r2, [r3, #868]	; 0x364
 8018a18:	4b1b      	ldr	r3, [pc, #108]	; (8018a88 <RegionUS915LinkAdrReq+0x430>)
 8018a1a:	681b      	ldr	r3, [r3, #0]
 8018a1c:	400a      	ands	r2, r1
 8018a1e:	b292      	uxth	r2, r2
 8018a20:	809a      	strh	r2, [r3, #4]
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 8018a22:	4b19      	ldr	r3, [pc, #100]	; (8018a88 <RegionUS915LinkAdrReq+0x430>)
 8018a24:	681b      	ldr	r3, [r3, #0]
 8018a26:	88d9      	ldrh	r1, [r3, #6]
 8018a28:	4b16      	ldr	r3, [pc, #88]	; (8018a84 <RegionUS915LinkAdrReq+0x42c>)
 8018a2a:	681b      	ldr	r3, [r3, #0]
 8018a2c:	f8b3 2366 	ldrh.w	r2, [r3, #870]	; 0x366
 8018a30:	4b15      	ldr	r3, [pc, #84]	; (8018a88 <RegionUS915LinkAdrReq+0x430>)
 8018a32:	681b      	ldr	r3, [r3, #0]
 8018a34:	400a      	ands	r2, r1
 8018a36:	b292      	uxth	r2, r2
 8018a38:	80da      	strh	r2, [r3, #6]
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8018a3a:	4b12      	ldr	r3, [pc, #72]	; (8018a84 <RegionUS915LinkAdrReq+0x42c>)
 8018a3c:	681a      	ldr	r2, [r3, #0]
 8018a3e:	4b12      	ldr	r3, [pc, #72]	; (8018a88 <RegionUS915LinkAdrReq+0x430>)
 8018a40:	681b      	ldr	r3, [r3, #0]
 8018a42:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 8018a46:	811a      	strh	r2, [r3, #8]
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 8018a48:	4b0e      	ldr	r3, [pc, #56]	; (8018a84 <RegionUS915LinkAdrReq+0x42c>)
 8018a4a:	681a      	ldr	r2, [r3, #0]
 8018a4c:	4b0e      	ldr	r3, [pc, #56]	; (8018a88 <RegionUS915LinkAdrReq+0x430>)
 8018a4e:	681b      	ldr	r3, [r3, #0]
 8018a50:	f8b2 236a 	ldrh.w	r2, [r2, #874]	; 0x36a
 8018a54:	815a      	strh	r2, [r3, #10]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8018a56:	f997 204d 	ldrsb.w	r2, [r7, #77]	; 0x4d
 8018a5a:	68bb      	ldr	r3, [r7, #8]
 8018a5c:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8018a5e:	f997 204e 	ldrsb.w	r2, [r7, #78]	; 0x4e
 8018a62:	687b      	ldr	r3, [r7, #4]
 8018a64:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8018a66:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8018a6a:	683b      	ldr	r3, [r7, #0]
 8018a6c:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8018a6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018a70:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8018a74:	701a      	strb	r2, [r3, #0]

#endif /* REGION_US915 */
    return status;
 8018a76:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8018a7a:	4618      	mov	r0, r3
 8018a7c:	375c      	adds	r7, #92	; 0x5c
 8018a7e:	46bd      	mov	sp, r7
 8018a80:	bd90      	pop	{r4, r7, pc}
 8018a82:	bf00      	nop
 8018a84:	20001adc 	.word	0x20001adc
 8018a88:	20001ad8 	.word	0x20001ad8

08018a8c <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8018a8c:	b580      	push	{r7, lr}
 8018a8e:	b084      	sub	sp, #16
 8018a90:	af00      	add	r7, sp, #0
 8018a92:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8018a94:	2307      	movs	r3, #7
 8018a96:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8018a98:	687b      	ldr	r3, [r7, #4]
 8018a9a:	685b      	ldr	r3, [r3, #4]
 8018a9c:	4618      	mov	r0, r3
 8018a9e:	f7fe ffe3 	bl	8017a68 <VerifyRfFreq>
 8018aa2:	4603      	mov	r3, r0
 8018aa4:	f083 0301 	eor.w	r3, r3, #1
 8018aa8:	b2db      	uxtb	r3, r3
 8018aaa:	2b00      	cmp	r3, #0
 8018aac:	d003      	beq.n	8018ab6 <RegionUS915RxParamSetupReq+0x2a>
    {
        status &= 0xFE; // Channel frequency KO
 8018aae:	7bfb      	ldrb	r3, [r7, #15]
 8018ab0:	f023 0301 	bic.w	r3, r3, #1
 8018ab4:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 8018ab6:	687b      	ldr	r3, [r7, #4]
 8018ab8:	f993 3000 	ldrsb.w	r3, [r3]
 8018abc:	220d      	movs	r2, #13
 8018abe:	2108      	movs	r1, #8
 8018ac0:	4618      	mov	r0, r3
 8018ac2:	f7fd f874 	bl	8015bae <RegionCommonValueInRange>
 8018ac6:	4603      	mov	r3, r0
 8018ac8:	2b00      	cmp	r3, #0
 8018aca:	d103      	bne.n	8018ad4 <RegionUS915RxParamSetupReq+0x48>
    {
        status &= 0xFD; // Datarate KO
 8018acc:	7bfb      	ldrb	r3, [r7, #15]
 8018ace:	f023 0302 	bic.w	r3, r3, #2
 8018ad2:	73fb      	strb	r3, [r7, #15]
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8018ad4:	687b      	ldr	r3, [r7, #4]
 8018ad6:	f993 3000 	ldrsb.w	r3, [r3]
 8018ada:	2207      	movs	r2, #7
 8018adc:	2105      	movs	r1, #5
 8018ade:	4618      	mov	r0, r3
 8018ae0:	f7fd f865 	bl	8015bae <RegionCommonValueInRange>
 8018ae4:	4603      	mov	r3, r0
 8018ae6:	2b01      	cmp	r3, #1
 8018ae8:	d004      	beq.n	8018af4 <RegionUS915RxParamSetupReq+0x68>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 8018aea:	687b      	ldr	r3, [r7, #4]
 8018aec:	f993 3000 	ldrsb.w	r3, [r3]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8018af0:	2b0d      	cmp	r3, #13
 8018af2:	dd03      	ble.n	8018afc <RegionUS915RxParamSetupReq+0x70>
    {
        status &= 0xFD; // Datarate KO
 8018af4:	7bfb      	ldrb	r3, [r7, #15]
 8018af6:	f023 0302 	bic.w	r3, r3, #2
 8018afa:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 8018afc:	687b      	ldr	r3, [r7, #4]
 8018afe:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018b02:	2203      	movs	r2, #3
 8018b04:	2100      	movs	r1, #0
 8018b06:	4618      	mov	r0, r3
 8018b08:	f7fd f851 	bl	8015bae <RegionCommonValueInRange>
 8018b0c:	4603      	mov	r3, r0
 8018b0e:	2b00      	cmp	r3, #0
 8018b10:	d103      	bne.n	8018b1a <RegionUS915RxParamSetupReq+0x8e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8018b12:	7bfb      	ldrb	r3, [r7, #15]
 8018b14:	f023 0304 	bic.w	r3, r3, #4
 8018b18:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_US915 */
    return status;
 8018b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8018b1c:	4618      	mov	r0, r3
 8018b1e:	3710      	adds	r7, #16
 8018b20:	46bd      	mov	sp, r7
 8018b22:	bd80      	pop	{r7, pc}

08018b24 <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8018b24:	b480      	push	{r7}
 8018b26:	b083      	sub	sp, #12
 8018b28:	af00      	add	r7, sp, #0
 8018b2a:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8018b2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8018b30:	4618      	mov	r0, r3
 8018b32:	370c      	adds	r7, #12
 8018b34:	46bd      	mov	sp, r7
 8018b36:	bc80      	pop	{r7}
 8018b38:	4770      	bx	lr

08018b3a <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8018b3a:	b480      	push	{r7}
 8018b3c:	b083      	sub	sp, #12
 8018b3e:	af00      	add	r7, sp, #0
 8018b40:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8018b42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8018b46:	4618      	mov	r0, r3
 8018b48:	370c      	adds	r7, #12
 8018b4a:	46bd      	mov	sp, r7
 8018b4c:	bc80      	pop	{r7}
 8018b4e:	4770      	bx	lr

08018b50 <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8018b50:	b480      	push	{r7}
 8018b52:	b083      	sub	sp, #12
 8018b54:	af00      	add	r7, sp, #0
 8018b56:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8018b58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8018b5c:	4618      	mov	r0, r3
 8018b5e:	370c      	adds	r7, #12
 8018b60:	46bd      	mov	sp, r7
 8018b62:	bc80      	pop	{r7}
 8018b64:	4770      	bx	lr
	...

08018b68 <RegionUS915AlternateDr>:

int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8018b68:	b480      	push	{r7}
 8018b6a:	b083      	sub	sp, #12
 8018b6c:	af00      	add	r7, sp, #0
 8018b6e:	4603      	mov	r3, r0
 8018b70:	460a      	mov	r2, r1
 8018b72:	71fb      	strb	r3, [r7, #7]
 8018b74:	4613      	mov	r3, r2
 8018b76:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 8018b78:	79bb      	ldrb	r3, [r7, #6]
 8018b7a:	2b00      	cmp	r3, #0
 8018b7c:	d106      	bne.n	8018b8c <RegionUS915AlternateDr+0x24>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 8018b7e:	4b13      	ldr	r3, [pc, #76]	; (8018bcc <RegionUS915AlternateDr+0x64>)
 8018b80:	681b      	ldr	r3, [r3, #0]
 8018b82:	7b5a      	ldrb	r2, [r3, #13]
 8018b84:	3201      	adds	r2, #1
 8018b86:	b2d2      	uxtb	r2, r2
 8018b88:	735a      	strb	r2, [r3, #13]
 8018b8a:	e005      	b.n	8018b98 <RegionUS915AlternateDr+0x30>
    }
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
 8018b8c:	4b0f      	ldr	r3, [pc, #60]	; (8018bcc <RegionUS915AlternateDr+0x64>)
 8018b8e:	681b      	ldr	r3, [r3, #0]
 8018b90:	7b5a      	ldrb	r2, [r3, #13]
 8018b92:	3a01      	subs	r2, #1
 8018b94:	b2d2      	uxtb	r2, r2
 8018b96:	735a      	strb	r2, [r3, #13]
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 8018b98:	4b0c      	ldr	r3, [pc, #48]	; (8018bcc <RegionUS915AlternateDr+0x64>)
 8018b9a:	681b      	ldr	r3, [r3, #0]
 8018b9c:	7b5a      	ldrb	r2, [r3, #13]
 8018b9e:	4b0c      	ldr	r3, [pc, #48]	; (8018bd0 <RegionUS915AlternateDr+0x68>)
 8018ba0:	fba3 1302 	umull	r1, r3, r3, r2
 8018ba4:	0859      	lsrs	r1, r3, #1
 8018ba6:	460b      	mov	r3, r1
 8018ba8:	00db      	lsls	r3, r3, #3
 8018baa:	440b      	add	r3, r1
 8018bac:	1ad3      	subs	r3, r2, r3
 8018bae:	b2db      	uxtb	r3, r3
 8018bb0:	2b00      	cmp	r3, #0
 8018bb2:	d102      	bne.n	8018bba <RegionUS915AlternateDr+0x52>
    {
        // Use DR_4 every 9th times.
        currentDr = DR_4;
 8018bb4:	2304      	movs	r3, #4
 8018bb6:	71fb      	strb	r3, [r7, #7]
 8018bb8:	e001      	b.n	8018bbe <RegionUS915AlternateDr+0x56>
    }
    else
    {
        currentDr = DR_0;
 8018bba:	2300      	movs	r3, #0
 8018bbc:	71fb      	strb	r3, [r7, #7]
    }
    return currentDr;
 8018bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_US915 */
}
 8018bc2:	4618      	mov	r0, r3
 8018bc4:	370c      	adds	r7, #12
 8018bc6:	46bd      	mov	sp, r7
 8018bc8:	bc80      	pop	{r7}
 8018bca:	4770      	bx	lr
 8018bcc:	20001ad8 	.word	0x20001ad8
 8018bd0:	38e38e39 	.word	0x38e38e39

08018bd4 <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8018bd4:	b580      	push	{r7, lr}
 8018bd6:	b0a8      	sub	sp, #160	; 0xa0
 8018bd8:	af02      	add	r7, sp, #8
 8018bda:	60f8      	str	r0, [r7, #12]
 8018bdc:	60b9      	str	r1, [r7, #8]
 8018bde:	607a      	str	r2, [r7, #4]
 8018be0:	603b      	str	r3, [r7, #0]
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 8018be2:	2300      	movs	r3, #0
 8018be4:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
    uint8_t nbRestrictedChannels = 0;
 8018be8:	2300      	movs	r3, #0
 8018bea:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 8018bee:	2300      	movs	r3, #0
 8018bf0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018bf2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8018bf6:	2244      	movs	r2, #68	; 0x44
 8018bf8:	2100      	movs	r1, #0
 8018bfa:	4618      	mov	r0, r3
 8018bfc:	f004 ff5e 	bl	801dabc <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8018c00:	230c      	movs	r3, #12
 8018c02:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 8018c06:	4b67      	ldr	r3, [pc, #412]	; (8018da4 <RegionUS915NextChannel+0x1d0>)
 8018c08:	681b      	ldr	r3, [r3, #0]
 8018c0a:	2204      	movs	r2, #4
 8018c0c:	2100      	movs	r1, #0
 8018c0e:	4618      	mov	r0, r3
 8018c10:	f7fd f81e 	bl	8015c50 <RegionCommonCountChannels>
 8018c14:	4603      	mov	r3, r0
 8018c16:	2b00      	cmp	r3, #0
 8018c18:	d10e      	bne.n	8018c38 <RegionUS915NextChannel+0x64>
    { // Reactivate default channels
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 8018c1a:	4b62      	ldr	r3, [pc, #392]	; (8018da4 <RegionUS915NextChannel+0x1d0>)
 8018c1c:	681b      	ldr	r3, [r3, #0]
 8018c1e:	4618      	mov	r0, r3
 8018c20:	4b61      	ldr	r3, [pc, #388]	; (8018da8 <RegionUS915NextChannel+0x1d4>)
 8018c22:	681b      	ldr	r3, [r3, #0]
 8018c24:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8018c28:	2204      	movs	r2, #4
 8018c2a:	4619      	mov	r1, r3
 8018c2c:	f7fd f83c 	bl	8015ca8 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8018c30:	4b5c      	ldr	r3, [pc, #368]	; (8018da4 <RegionUS915NextChannel+0x1d0>)
 8018c32:	681b      	ldr	r3, [r3, #0]
 8018c34:	2200      	movs	r2, #0
 8018c36:	731a      	strb	r2, [r3, #12]
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 8018c38:	68fb      	ldr	r3, [r7, #12]
 8018c3a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018c3e:	2b03      	cmp	r3, #3
 8018c40:	dd0c      	ble.n	8018c5c <RegionUS915NextChannel+0x88>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 8018c42:	4b58      	ldr	r3, [pc, #352]	; (8018da4 <RegionUS915NextChannel+0x1d0>)
 8018c44:	681b      	ldr	r3, [r3, #0]
 8018c46:	891b      	ldrh	r3, [r3, #8]
 8018c48:	b2db      	uxtb	r3, r3
 8018c4a:	2b00      	cmp	r3, #0
 8018c4c:	d106      	bne.n	8018c5c <RegionUS915NextChannel+0x88>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8018c4e:	4b56      	ldr	r3, [pc, #344]	; (8018da8 <RegionUS915NextChannel+0x1d4>)
 8018c50:	681a      	ldr	r2, [r3, #0]
 8018c52:	4b54      	ldr	r3, [pc, #336]	; (8018da4 <RegionUS915NextChannel+0x1d0>)
 8018c54:	681b      	ldr	r3, [r3, #0]
 8018c56:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 8018c5a:	811a      	strh	r2, [r3, #8]
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8018c5c:	68fb      	ldr	r3, [r7, #12]
 8018c5e:	7a5b      	ldrb	r3, [r3, #9]
 8018c60:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8018c62:	68fb      	ldr	r3, [r7, #12]
 8018c64:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018c68:	b2db      	uxtb	r3, r3
 8018c6a:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 8018c6c:	4b4d      	ldr	r3, [pc, #308]	; (8018da4 <RegionUS915NextChannel+0x1d0>)
 8018c6e:	681b      	ldr	r3, [r3, #0]
 8018c70:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8018c72:	4b4d      	ldr	r3, [pc, #308]	; (8018da8 <RegionUS915NextChannel+0x1d4>)
 8018c74:	681b      	ldr	r3, [r3, #0]
 8018c76:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 8018c78:	4b4c      	ldr	r3, [pc, #304]	; (8018dac <RegionUS915NextChannel+0x1d8>)
 8018c7a:	681b      	ldr	r3, [r3, #0]
 8018c7c:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 8018c7e:	2348      	movs	r3, #72	; 0x48
 8018c80:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = NULL;
 8018c82:	2300      	movs	r3, #0
 8018c84:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8018c86:	68fb      	ldr	r3, [r7, #12]
 8018c88:	681b      	ldr	r3, [r3, #0]
 8018c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8018c8c:	68fb      	ldr	r3, [r7, #12]
 8018c8e:	685b      	ldr	r3, [r3, #4]
 8018c90:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8018c92:	68fb      	ldr	r3, [r7, #12]
 8018c94:	7a9b      	ldrb	r3, [r3, #10]
 8018c96:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 8018c9a:	2301      	movs	r3, #1
 8018c9c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8018ca0:	f107 0314 	add.w	r3, r7, #20
 8018ca4:	64bb      	str	r3, [r7, #72]	; 0x48

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8018ca6:	68fa      	ldr	r2, [r7, #12]
 8018ca8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8018cac:	320c      	adds	r2, #12
 8018cae:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018cb2:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8018cb6:	68fb      	ldr	r3, [r7, #12]
 8018cb8:	7d1b      	ldrb	r3, [r3, #20]
 8018cba:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8018cbe:	68fb      	ldr	r3, [r7, #12]
 8018cc0:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8018cc4:	68fb      	ldr	r3, [r7, #12]
 8018cc6:	8adb      	ldrh	r3, [r3, #22]
 8018cc8:	4619      	mov	r1, r3
 8018cca:	4610      	mov	r0, r2
 8018ccc:	f7fe ff10 	bl	8017af0 <GetTimeOnAir>
 8018cd0:	4603      	mov	r3, r0
 8018cd2:	647b      	str	r3, [r7, #68]	; 0x44
#endif /* REGION_VERSION */

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8018cd4:	f107 0195 	add.w	r1, r7, #149	; 0x95
 8018cd8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8018cdc:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8018ce0:	687b      	ldr	r3, [r7, #4]
 8018ce2:	9301      	str	r3, [sp, #4]
 8018ce4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8018ce8:	9300      	str	r3, [sp, #0]
 8018cea:	460b      	mov	r3, r1
 8018cec:	6839      	ldr	r1, [r7, #0]
 8018cee:	f7fd fbc6 	bl	801647e <RegionCommonIdentifyChannels>
 8018cf2:	4603      	mov	r3, r0
 8018cf4:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8018cf8:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8018cfc:	2b00      	cmp	r3, #0
 8018cfe:	d14a      	bne.n	8018d96 <RegionUS915NextChannel+0x1c2>
    {
        if( nextChanParams->Joined == true )
 8018d00:	68fb      	ldr	r3, [r7, #12]
 8018d02:	7a5b      	ldrb	r3, [r3, #9]
 8018d04:	2b00      	cmp	r3, #0
 8018d06:	d00e      	beq.n	8018d26 <RegionUS915NextChannel+0x152>
        {
            // Choose randomly on of the remaining channels
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8018d08:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8018d0c:	3b01      	subs	r3, #1
 8018d0e:	4619      	mov	r1, r3
 8018d10:	2000      	movs	r0, #0
 8018d12:	f000 f89f 	bl	8018e54 <randr>
 8018d16:	4603      	mov	r3, r0
 8018d18:	3398      	adds	r3, #152	; 0x98
 8018d1a:	443b      	add	r3, r7
 8018d1c:	f813 2c4c 	ldrb.w	r2, [r3, #-76]
 8018d20:	68bb      	ldr	r3, [r7, #8]
 8018d22:	701a      	strb	r2, [r3, #0]
 8018d24:	e02e      	b.n	8018d84 <RegionUS915NextChannel+0x1b0>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 8018d26:	68fb      	ldr	r3, [r7, #12]
 8018d28:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018d2c:	2b00      	cmp	r3, #0
 8018d2e:	d10e      	bne.n	8018d4e <RegionUS915NextChannel+0x17a>
            {
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 8018d30:	4b1c      	ldr	r3, [pc, #112]	; (8018da4 <RegionUS915NextChannel+0x1d0>)
 8018d32:	681b      	ldr	r3, [r3, #0]
 8018d34:	4618      	mov	r0, r3
                    &RegionNvmGroup1->JoinChannelGroupsCurrentIndex, channel ) == LORAMAC_STATUS_PARAMETER_INVALID )
 8018d36:	4b1b      	ldr	r3, [pc, #108]	; (8018da4 <RegionUS915NextChannel+0x1d0>)
 8018d38:	681b      	ldr	r3, [r3, #0]
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 8018d3a:	330c      	adds	r3, #12
 8018d3c:	68ba      	ldr	r2, [r7, #8]
 8018d3e:	4619      	mov	r1, r3
 8018d40:	f7fc fcf0 	bl	8015724 <RegionBaseUSComputeNext125kHzJoinChannel>
 8018d44:	4603      	mov	r3, r0
 8018d46:	2b03      	cmp	r3, #3
 8018d48:	d11c      	bne.n	8018d84 <RegionUS915NextChannel+0x1b0>
                {
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 8018d4a:	2303      	movs	r3, #3
 8018d4c:	e025      	b.n	8018d9a <RegionUS915NextChannel+0x1c6>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 8018d4e:	2300      	movs	r3, #0
 8018d50:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 8018d54:	e004      	b.n	8018d60 <RegionUS915NextChannel+0x18c>
                {
                    i++;
 8018d56:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8018d5a:	3301      	adds	r3, #1
 8018d5c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 8018d60:	4b10      	ldr	r3, [pc, #64]	; (8018da4 <RegionUS915NextChannel+0x1d0>)
 8018d62:	681b      	ldr	r3, [r3, #0]
 8018d64:	891b      	ldrh	r3, [r3, #8]
 8018d66:	b2da      	uxtb	r2, r3
 8018d68:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8018d6c:	fa42 f303 	asr.w	r3, r2, r3
 8018d70:	f003 0301 	and.w	r3, r3, #1
 8018d74:	2b00      	cmp	r3, #0
 8018d76:	d0ee      	beq.n	8018d56 <RegionUS915NextChannel+0x182>
                }
                *channel = 64 + i;
 8018d78:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8018d7c:	3340      	adds	r3, #64	; 0x40
 8018d7e:	b2da      	uxtb	r2, r3
 8018d80:	68bb      	ldr	r3, [r7, #8]
 8018d82:	701a      	strb	r2, [r3, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 8018d84:	4b07      	ldr	r3, [pc, #28]	; (8018da4 <RegionUS915NextChannel+0x1d0>)
 8018d86:	681b      	ldr	r3, [r3, #0]
 8018d88:	4618      	mov	r0, r3
 8018d8a:	68bb      	ldr	r3, [r7, #8]
 8018d8c:	781b      	ldrb	r3, [r3, #0]
 8018d8e:	2248      	movs	r2, #72	; 0x48
 8018d90:	4619      	mov	r1, r3
 8018d92:	f7fc ff29 	bl	8015be8 <RegionCommonChanDisable>
    }
    return status;
 8018d96:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 8018d9a:	4618      	mov	r0, r3
 8018d9c:	3798      	adds	r7, #152	; 0x98
 8018d9e:	46bd      	mov	sp, r7
 8018da0:	bd80      	pop	{r7, pc}
 8018da2:	bf00      	nop
 8018da4:	20001ad8 	.word	0x20001ad8
 8018da8:	20001adc 	.word	0x20001adc
 8018dac:	20001ae0 	.word	0x20001ae0

08018db0 <RegionUS915ApplyDrOffset>:
#endif /* REGION_US915 */
}
#endif /* REGION_VERSION */

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8018db0:	b480      	push	{r7}
 8018db2:	b085      	sub	sp, #20
 8018db4:	af00      	add	r7, sp, #0
 8018db6:	4603      	mov	r3, r0
 8018db8:	71fb      	strb	r3, [r7, #7]
 8018dba:	460b      	mov	r3, r1
 8018dbc:	71bb      	strb	r3, [r7, #6]
 8018dbe:	4613      	mov	r3, r2
 8018dc0:	717b      	strb	r3, [r7, #5]
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 8018dc2:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8018dc6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8018dca:	4909      	ldr	r1, [pc, #36]	; (8018df0 <RegionUS915ApplyDrOffset+0x40>)
 8018dcc:	0092      	lsls	r2, r2, #2
 8018dce:	440a      	add	r2, r1
 8018dd0:	4413      	add	r3, r2
 8018dd2:	781b      	ldrb	r3, [r3, #0]
 8018dd4:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8018dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018dda:	2b00      	cmp	r3, #0
 8018ddc:	da01      	bge.n	8018de2 <RegionUS915ApplyDrOffset+0x32>
    {
        datarate = DR_0;
 8018dde:	2300      	movs	r3, #0
 8018de0:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8018de2:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_US915 */
}
 8018de4:	4618      	mov	r0, r3
 8018de6:	3714      	adds	r7, #20
 8018de8:	46bd      	mov	sp, r7
 8018dea:	bc80      	pop	{r7}
 8018dec:	4770      	bx	lr
 8018dee:	bf00      	nop
 8018df0:	0801ea20 	.word	0x0801ea20

08018df4 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8018df4:	b480      	push	{r7}
 8018df6:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8018df8:	4b0d      	ldr	r3, [pc, #52]	; (8018e30 <rand1+0x3c>)
 8018dfa:	681b      	ldr	r3, [r3, #0]
 8018dfc:	4a0d      	ldr	r2, [pc, #52]	; (8018e34 <rand1+0x40>)
 8018dfe:	fb02 f303 	mul.w	r3, r2, r3
 8018e02:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8018e06:	3339      	adds	r3, #57	; 0x39
 8018e08:	4a09      	ldr	r2, [pc, #36]	; (8018e30 <rand1+0x3c>)
 8018e0a:	6013      	str	r3, [r2, #0]
 8018e0c:	4b08      	ldr	r3, [pc, #32]	; (8018e30 <rand1+0x3c>)
 8018e0e:	681a      	ldr	r2, [r3, #0]
 8018e10:	2303      	movs	r3, #3
 8018e12:	fba3 1302 	umull	r1, r3, r3, r2
 8018e16:	1ad1      	subs	r1, r2, r3
 8018e18:	0849      	lsrs	r1, r1, #1
 8018e1a:	440b      	add	r3, r1
 8018e1c:	0f99      	lsrs	r1, r3, #30
 8018e1e:	460b      	mov	r3, r1
 8018e20:	07db      	lsls	r3, r3, #31
 8018e22:	1a5b      	subs	r3, r3, r1
 8018e24:	1ad1      	subs	r1, r2, r3
 8018e26:	460b      	mov	r3, r1
}
 8018e28:	4618      	mov	r0, r3
 8018e2a:	46bd      	mov	sp, r7
 8018e2c:	bc80      	pop	{r7}
 8018e2e:	4770      	bx	lr
 8018e30:	20000130 	.word	0x20000130
 8018e34:	41c64e6d 	.word	0x41c64e6d

08018e38 <srand1>:

void srand1( uint32_t seed )
{
 8018e38:	b480      	push	{r7}
 8018e3a:	b083      	sub	sp, #12
 8018e3c:	af00      	add	r7, sp, #0
 8018e3e:	6078      	str	r0, [r7, #4]
    next = seed;
 8018e40:	4a03      	ldr	r2, [pc, #12]	; (8018e50 <srand1+0x18>)
 8018e42:	687b      	ldr	r3, [r7, #4]
 8018e44:	6013      	str	r3, [r2, #0]
}
 8018e46:	bf00      	nop
 8018e48:	370c      	adds	r7, #12
 8018e4a:	46bd      	mov	sp, r7
 8018e4c:	bc80      	pop	{r7}
 8018e4e:	4770      	bx	lr
 8018e50:	20000130 	.word	0x20000130

08018e54 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8018e54:	b580      	push	{r7, lr}
 8018e56:	b082      	sub	sp, #8
 8018e58:	af00      	add	r7, sp, #0
 8018e5a:	6078      	str	r0, [r7, #4]
 8018e5c:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8018e5e:	f7ff ffc9 	bl	8018df4 <rand1>
 8018e62:	4602      	mov	r2, r0
 8018e64:	6839      	ldr	r1, [r7, #0]
 8018e66:	687b      	ldr	r3, [r7, #4]
 8018e68:	1acb      	subs	r3, r1, r3
 8018e6a:	3301      	adds	r3, #1
 8018e6c:	fb92 f1f3 	sdiv	r1, r2, r3
 8018e70:	fb01 f303 	mul.w	r3, r1, r3
 8018e74:	1ad2      	subs	r2, r2, r3
 8018e76:	687b      	ldr	r3, [r7, #4]
 8018e78:	4413      	add	r3, r2
}
 8018e7a:	4618      	mov	r0, r3
 8018e7c:	3708      	adds	r7, #8
 8018e7e:	46bd      	mov	sp, r7
 8018e80:	bd80      	pop	{r7, pc}

08018e82 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8018e82:	b480      	push	{r7}
 8018e84:	b085      	sub	sp, #20
 8018e86:	af00      	add	r7, sp, #0
 8018e88:	60f8      	str	r0, [r7, #12]
 8018e8a:	60b9      	str	r1, [r7, #8]
 8018e8c:	4613      	mov	r3, r2
 8018e8e:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8018e90:	e007      	b.n	8018ea2 <memcpy1+0x20>
    {
        *dst++ = *src++;
 8018e92:	68ba      	ldr	r2, [r7, #8]
 8018e94:	1c53      	adds	r3, r2, #1
 8018e96:	60bb      	str	r3, [r7, #8]
 8018e98:	68fb      	ldr	r3, [r7, #12]
 8018e9a:	1c59      	adds	r1, r3, #1
 8018e9c:	60f9      	str	r1, [r7, #12]
 8018e9e:	7812      	ldrb	r2, [r2, #0]
 8018ea0:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8018ea2:	88fb      	ldrh	r3, [r7, #6]
 8018ea4:	1e5a      	subs	r2, r3, #1
 8018ea6:	80fa      	strh	r2, [r7, #6]
 8018ea8:	2b00      	cmp	r3, #0
 8018eaa:	d1f2      	bne.n	8018e92 <memcpy1+0x10>
    }
}
 8018eac:	bf00      	nop
 8018eae:	bf00      	nop
 8018eb0:	3714      	adds	r7, #20
 8018eb2:	46bd      	mov	sp, r7
 8018eb4:	bc80      	pop	{r7}
 8018eb6:	4770      	bx	lr

08018eb8 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8018eb8:	b480      	push	{r7}
 8018eba:	b085      	sub	sp, #20
 8018ebc:	af00      	add	r7, sp, #0
 8018ebe:	60f8      	str	r0, [r7, #12]
 8018ec0:	60b9      	str	r1, [r7, #8]
 8018ec2:	4613      	mov	r3, r2
 8018ec4:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 8018ec6:	88fb      	ldrh	r3, [r7, #6]
 8018ec8:	3b01      	subs	r3, #1
 8018eca:	68fa      	ldr	r2, [r7, #12]
 8018ecc:	4413      	add	r3, r2
 8018ece:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8018ed0:	e007      	b.n	8018ee2 <memcpyr+0x2a>
    {
        *dst-- = *src++;
 8018ed2:	68ba      	ldr	r2, [r7, #8]
 8018ed4:	1c53      	adds	r3, r2, #1
 8018ed6:	60bb      	str	r3, [r7, #8]
 8018ed8:	68fb      	ldr	r3, [r7, #12]
 8018eda:	1e59      	subs	r1, r3, #1
 8018edc:	60f9      	str	r1, [r7, #12]
 8018ede:	7812      	ldrb	r2, [r2, #0]
 8018ee0:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8018ee2:	88fb      	ldrh	r3, [r7, #6]
 8018ee4:	1e5a      	subs	r2, r3, #1
 8018ee6:	80fa      	strh	r2, [r7, #6]
 8018ee8:	2b00      	cmp	r3, #0
 8018eea:	d1f2      	bne.n	8018ed2 <memcpyr+0x1a>
    }
}
 8018eec:	bf00      	nop
 8018eee:	bf00      	nop
 8018ef0:	3714      	adds	r7, #20
 8018ef2:	46bd      	mov	sp, r7
 8018ef4:	bc80      	pop	{r7}
 8018ef6:	4770      	bx	lr

08018ef8 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8018ef8:	b480      	push	{r7}
 8018efa:	b083      	sub	sp, #12
 8018efc:	af00      	add	r7, sp, #0
 8018efe:	6078      	str	r0, [r7, #4]
 8018f00:	460b      	mov	r3, r1
 8018f02:	70fb      	strb	r3, [r7, #3]
 8018f04:	4613      	mov	r3, r2
 8018f06:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8018f08:	e004      	b.n	8018f14 <memset1+0x1c>
    {
        *dst++ = value;
 8018f0a:	687b      	ldr	r3, [r7, #4]
 8018f0c:	1c5a      	adds	r2, r3, #1
 8018f0e:	607a      	str	r2, [r7, #4]
 8018f10:	78fa      	ldrb	r2, [r7, #3]
 8018f12:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8018f14:	883b      	ldrh	r3, [r7, #0]
 8018f16:	1e5a      	subs	r2, r3, #1
 8018f18:	803a      	strh	r2, [r7, #0]
 8018f1a:	2b00      	cmp	r3, #0
 8018f1c:	d1f5      	bne.n	8018f0a <memset1+0x12>
    }
}
 8018f1e:	bf00      	nop
 8018f20:	bf00      	nop
 8018f22:	370c      	adds	r7, #12
 8018f24:	46bd      	mov	sp, r7
 8018f26:	bc80      	pop	{r7}
 8018f28:	4770      	bx	lr
	...

08018f2c <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8018f2c:	b480      	push	{r7}
 8018f2e:	b085      	sub	sp, #20
 8018f30:	af00      	add	r7, sp, #0
 8018f32:	6078      	str	r0, [r7, #4]
 8018f34:	460b      	mov	r3, r1
 8018f36:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 8018f38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018f3c:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 8018f3e:	687b      	ldr	r3, [r7, #4]
 8018f40:	2b00      	cmp	r3, #0
 8018f42:	d101      	bne.n	8018f48 <Crc32+0x1c>
    {
        return 0;
 8018f44:	2300      	movs	r3, #0
 8018f46:	e026      	b.n	8018f96 <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 8018f48:	2300      	movs	r3, #0
 8018f4a:	817b      	strh	r3, [r7, #10]
 8018f4c:	e01d      	b.n	8018f8a <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 8018f4e:	897b      	ldrh	r3, [r7, #10]
 8018f50:	687a      	ldr	r2, [r7, #4]
 8018f52:	4413      	add	r3, r2
 8018f54:	781b      	ldrb	r3, [r3, #0]
 8018f56:	461a      	mov	r2, r3
 8018f58:	68fb      	ldr	r3, [r7, #12]
 8018f5a:	4053      	eors	r3, r2
 8018f5c:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8018f5e:	2300      	movs	r3, #0
 8018f60:	813b      	strh	r3, [r7, #8]
 8018f62:	e00c      	b.n	8018f7e <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8018f64:	68fb      	ldr	r3, [r7, #12]
 8018f66:	085a      	lsrs	r2, r3, #1
 8018f68:	68fb      	ldr	r3, [r7, #12]
 8018f6a:	f003 0301 	and.w	r3, r3, #1
 8018f6e:	425b      	negs	r3, r3
 8018f70:	490b      	ldr	r1, [pc, #44]	; (8018fa0 <Crc32+0x74>)
 8018f72:	400b      	ands	r3, r1
 8018f74:	4053      	eors	r3, r2
 8018f76:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8018f78:	893b      	ldrh	r3, [r7, #8]
 8018f7a:	3301      	adds	r3, #1
 8018f7c:	813b      	strh	r3, [r7, #8]
 8018f7e:	893b      	ldrh	r3, [r7, #8]
 8018f80:	2b07      	cmp	r3, #7
 8018f82:	d9ef      	bls.n	8018f64 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 8018f84:	897b      	ldrh	r3, [r7, #10]
 8018f86:	3301      	adds	r3, #1
 8018f88:	817b      	strh	r3, [r7, #10]
 8018f8a:	897a      	ldrh	r2, [r7, #10]
 8018f8c:	887b      	ldrh	r3, [r7, #2]
 8018f8e:	429a      	cmp	r2, r3
 8018f90:	d3dd      	bcc.n	8018f4e <Crc32+0x22>
        }
    }

    return ~crc;
 8018f92:	68fb      	ldr	r3, [r7, #12]
 8018f94:	43db      	mvns	r3, r3
}
 8018f96:	4618      	mov	r0, r3
 8018f98:	3714      	adds	r7, #20
 8018f9a:	46bd      	mov	sp, r7
 8018f9c:	bc80      	pop	{r7}
 8018f9e:	4770      	bx	lr
 8018fa0:	edb88320 	.word	0xedb88320

08018fa4 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8018fa4:	b580      	push	{r7, lr}
 8018fa6:	b084      	sub	sp, #16
 8018fa8:	af02      	add	r7, sp, #8
 8018faa:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8018fac:	4a24      	ldr	r2, [pc, #144]	; (8019040 <RadioInit+0x9c>)
 8018fae:	687b      	ldr	r3, [r7, #4]
 8018fb0:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8018fb2:	4b24      	ldr	r3, [pc, #144]	; (8019044 <RadioInit+0xa0>)
 8018fb4:	2200      	movs	r2, #0
 8018fb6:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8018fb8:	4b22      	ldr	r3, [pc, #136]	; (8019044 <RadioInit+0xa0>)
 8018fba:	2200      	movs	r2, #0
 8018fbc:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8018fbe:	4b21      	ldr	r3, [pc, #132]	; (8019044 <RadioInit+0xa0>)
 8018fc0:	2200      	movs	r2, #0
 8018fc2:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8018fc4:	4b1f      	ldr	r3, [pc, #124]	; (8019044 <RadioInit+0xa0>)
 8018fc6:	2200      	movs	r2, #0
 8018fc8:	659a      	str	r2, [r3, #88]	; 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 8018fca:	481f      	ldr	r0, [pc, #124]	; (8019048 <RadioInit+0xa4>)
 8018fcc:	f001 ffc2 	bl	801af54 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8018fd0:	4b1c      	ldr	r3, [pc, #112]	; (8019044 <RadioInit+0xa0>)
 8018fd2:	2200      	movs	r2, #0
 8018fd4:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8018fd6:	4b1b      	ldr	r3, [pc, #108]	; (8019044 <RadioInit+0xa0>)
 8018fd8:	2200      	movs	r2, #0
 8018fda:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8018fdc:	f002 fa56 	bl	801b48c <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8018fe0:	2100      	movs	r1, #0
 8018fe2:	2000      	movs	r0, #0
 8018fe4:	f002 fe22 	bl	801bc2c <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8018fe8:	2204      	movs	r2, #4
 8018fea:	2100      	movs	r1, #0
 8018fec:	2001      	movs	r0, #1
 8018fee:	f002 fbdf 	bl	801b7b0 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8018ff2:	2300      	movs	r3, #0
 8018ff4:	2200      	movs	r2, #0
 8018ff6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8018ffa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8018ffe:	f002 fb0f 	bl	801b620 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 8019002:	f000 fe99 	bl	8019d38 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8019006:	2300      	movs	r3, #0
 8019008:	9300      	str	r3, [sp, #0]
 801900a:	4b10      	ldr	r3, [pc, #64]	; (801904c <RadioInit+0xa8>)
 801900c:	2200      	movs	r2, #0
 801900e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8019012:	480f      	ldr	r0, [pc, #60]	; (8019050 <RadioInit+0xac>)
 8019014:	f004 f82c 	bl	801d070 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8019018:	2300      	movs	r3, #0
 801901a:	9300      	str	r3, [sp, #0]
 801901c:	4b0d      	ldr	r3, [pc, #52]	; (8019054 <RadioInit+0xb0>)
 801901e:	2200      	movs	r2, #0
 8019020:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8019024:	480c      	ldr	r0, [pc, #48]	; (8019058 <RadioInit+0xb4>)
 8019026:	f004 f823 	bl	801d070 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 801902a:	4809      	ldr	r0, [pc, #36]	; (8019050 <RadioInit+0xac>)
 801902c:	f004 f8c4 	bl	801d1b8 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8019030:	4809      	ldr	r0, [pc, #36]	; (8019058 <RadioInit+0xb4>)
 8019032:	f004 f8c1 	bl	801d1b8 <UTIL_TIMER_Stop>
}
 8019036:	bf00      	nop
 8019038:	3708      	adds	r7, #8
 801903a:	46bd      	mov	sp, r7
 801903c:	bd80      	pop	{r7, pc}
 801903e:	bf00      	nop
 8019040:	20001be4 	.word	0x20001be4
 8019044:	20001be8 	.word	0x20001be8
 8019048:	0801a131 	.word	0x0801a131
 801904c:	0801a0b9 	.word	0x0801a0b9
 8019050:	20001c44 	.word	0x20001c44
 8019054:	0801a0cd 	.word	0x0801a0cd
 8019058:	20001c5c 	.word	0x20001c5c

0801905c <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 801905c:	b580      	push	{r7, lr}
 801905e:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8019060:	f001 ffc0 	bl	801afe4 <SUBGRF_GetOperatingMode>
 8019064:	4603      	mov	r3, r0
 8019066:	2b07      	cmp	r3, #7
 8019068:	d00a      	beq.n	8019080 <RadioGetStatus+0x24>
 801906a:	2b07      	cmp	r3, #7
 801906c:	dc0a      	bgt.n	8019084 <RadioGetStatus+0x28>
 801906e:	2b04      	cmp	r3, #4
 8019070:	d002      	beq.n	8019078 <RadioGetStatus+0x1c>
 8019072:	2b05      	cmp	r3, #5
 8019074:	d002      	beq.n	801907c <RadioGetStatus+0x20>
 8019076:	e005      	b.n	8019084 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8019078:	2302      	movs	r3, #2
 801907a:	e004      	b.n	8019086 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 801907c:	2301      	movs	r3, #1
 801907e:	e002      	b.n	8019086 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8019080:	2303      	movs	r3, #3
 8019082:	e000      	b.n	8019086 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8019084:	2300      	movs	r3, #0
    }
}
 8019086:	4618      	mov	r0, r3
 8019088:	bd80      	pop	{r7, pc}
	...

0801908c <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 801908c:	b580      	push	{r7, lr}
 801908e:	b082      	sub	sp, #8
 8019090:	af00      	add	r7, sp, #0
 8019092:	4603      	mov	r3, r0
 8019094:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8019096:	4a2a      	ldr	r2, [pc, #168]	; (8019140 <RadioSetModem+0xb4>)
 8019098:	79fb      	ldrb	r3, [r7, #7]
 801909a:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 801909c:	79fb      	ldrb	r3, [r7, #7]
 801909e:	4618      	mov	r0, r3
 80190a0:	f003 f997 	bl	801c3d2 <RFW_SetRadioModem>
    switch( modem )
 80190a4:	79fb      	ldrb	r3, [r7, #7]
 80190a6:	2b05      	cmp	r3, #5
 80190a8:	d80e      	bhi.n	80190c8 <RadioSetModem+0x3c>
 80190aa:	a201      	add	r2, pc, #4	; (adr r2, 80190b0 <RadioSetModem+0x24>)
 80190ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80190b0:	080190d7 	.word	0x080190d7
 80190b4:	080190e5 	.word	0x080190e5
 80190b8:	080190c9 	.word	0x080190c9
 80190bc:	0801910b 	.word	0x0801910b
 80190c0:	08019119 	.word	0x08019119
 80190c4:	08019127 	.word	0x08019127
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 80190c8:	2003      	movs	r0, #3
 80190ca:	f002 fb4b 	bl	801b764 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80190ce:	4b1c      	ldr	r3, [pc, #112]	; (8019140 <RadioSetModem+0xb4>)
 80190d0:	2200      	movs	r2, #0
 80190d2:	735a      	strb	r2, [r3, #13]
        break;
 80190d4:	e02f      	b.n	8019136 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80190d6:	2000      	movs	r0, #0
 80190d8:	f002 fb44 	bl	801b764 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80190dc:	4b18      	ldr	r3, [pc, #96]	; (8019140 <RadioSetModem+0xb4>)
 80190de:	2200      	movs	r2, #0
 80190e0:	735a      	strb	r2, [r3, #13]
        break;
 80190e2:	e028      	b.n	8019136 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 80190e4:	2001      	movs	r0, #1
 80190e6:	f002 fb3d 	bl	801b764 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 80190ea:	4b15      	ldr	r3, [pc, #84]	; (8019140 <RadioSetModem+0xb4>)
 80190ec:	7b5a      	ldrb	r2, [r3, #13]
 80190ee:	4b14      	ldr	r3, [pc, #80]	; (8019140 <RadioSetModem+0xb4>)
 80190f0:	7b1b      	ldrb	r3, [r3, #12]
 80190f2:	429a      	cmp	r2, r3
 80190f4:	d01e      	beq.n	8019134 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 80190f6:	4b12      	ldr	r3, [pc, #72]	; (8019140 <RadioSetModem+0xb4>)
 80190f8:	7b1a      	ldrb	r2, [r3, #12]
 80190fa:	4b11      	ldr	r3, [pc, #68]	; (8019140 <RadioSetModem+0xb4>)
 80190fc:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 80190fe:	4b10      	ldr	r3, [pc, #64]	; (8019140 <RadioSetModem+0xb4>)
 8019100:	7b5b      	ldrb	r3, [r3, #13]
 8019102:	4618      	mov	r0, r3
 8019104:	f000 ffa2 	bl	801a04c <RadioSetPublicNetwork>
        }
        break;
 8019108:	e014      	b.n	8019134 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801910a:	2002      	movs	r0, #2
 801910c:	f002 fb2a 	bl	801b764 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8019110:	4b0b      	ldr	r3, [pc, #44]	; (8019140 <RadioSetModem+0xb4>)
 8019112:	2200      	movs	r2, #0
 8019114:	735a      	strb	r2, [r3, #13]
        break;
 8019116:	e00e      	b.n	8019136 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8019118:	2002      	movs	r0, #2
 801911a:	f002 fb23 	bl	801b764 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801911e:	4b08      	ldr	r3, [pc, #32]	; (8019140 <RadioSetModem+0xb4>)
 8019120:	2200      	movs	r2, #0
 8019122:	735a      	strb	r2, [r3, #13]
        break;
 8019124:	e007      	b.n	8019136 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8019126:	2000      	movs	r0, #0
 8019128:	f002 fb1c 	bl	801b764 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801912c:	4b04      	ldr	r3, [pc, #16]	; (8019140 <RadioSetModem+0xb4>)
 801912e:	2200      	movs	r2, #0
 8019130:	735a      	strb	r2, [r3, #13]
        break;
 8019132:	e000      	b.n	8019136 <RadioSetModem+0xaa>
        break;
 8019134:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 8019136:	bf00      	nop
 8019138:	3708      	adds	r7, #8
 801913a:	46bd      	mov	sp, r7
 801913c:	bd80      	pop	{r7, pc}
 801913e:	bf00      	nop
 8019140:	20001be8 	.word	0x20001be8

08019144 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8019144:	b580      	push	{r7, lr}
 8019146:	b082      	sub	sp, #8
 8019148:	af00      	add	r7, sp, #0
 801914a:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 801914c:	6878      	ldr	r0, [r7, #4]
 801914e:	f002 fac3 	bl	801b6d8 <SUBGRF_SetRfFrequency>
}
 8019152:	bf00      	nop
 8019154:	3708      	adds	r7, #8
 8019156:	46bd      	mov	sp, r7
 8019158:	bd80      	pop	{r7, pc}

0801915a <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 801915a:	b580      	push	{r7, lr}
 801915c:	b090      	sub	sp, #64	; 0x40
 801915e:	af0a      	add	r7, sp, #40	; 0x28
 8019160:	60f8      	str	r0, [r7, #12]
 8019162:	60b9      	str	r1, [r7, #8]
 8019164:	603b      	str	r3, [r7, #0]
 8019166:	4613      	mov	r3, r2
 8019168:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 801916a:	2301      	movs	r3, #1
 801916c:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 801916e:	2300      	movs	r3, #0
 8019170:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8019172:	2300      	movs	r3, #0
 8019174:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 8019176:	f000 fdf2 	bl	8019d5e <RadioStandby>

    RadioSetModem( MODEM_FSK );
 801917a:	2000      	movs	r0, #0
 801917c:	f7ff ff86 	bl	801908c <RadioSetModem>

    RadioSetChannel( freq );
 8019180:	68f8      	ldr	r0, [r7, #12]
 8019182:	f7ff ffdf 	bl	8019144 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8019186:	2301      	movs	r3, #1
 8019188:	9309      	str	r3, [sp, #36]	; 0x24
 801918a:	2300      	movs	r3, #0
 801918c:	9308      	str	r3, [sp, #32]
 801918e:	2300      	movs	r3, #0
 8019190:	9307      	str	r3, [sp, #28]
 8019192:	2300      	movs	r3, #0
 8019194:	9306      	str	r3, [sp, #24]
 8019196:	2300      	movs	r3, #0
 8019198:	9305      	str	r3, [sp, #20]
 801919a:	2300      	movs	r3, #0
 801919c:	9304      	str	r3, [sp, #16]
 801919e:	2300      	movs	r3, #0
 80191a0:	9303      	str	r3, [sp, #12]
 80191a2:	2300      	movs	r3, #0
 80191a4:	9302      	str	r3, [sp, #8]
 80191a6:	2303      	movs	r3, #3
 80191a8:	9301      	str	r3, [sp, #4]
 80191aa:	68bb      	ldr	r3, [r7, #8]
 80191ac:	9300      	str	r3, [sp, #0]
 80191ae:	2300      	movs	r3, #0
 80191b0:	f44f 7216 	mov.w	r2, #600	; 0x258
 80191b4:	68b9      	ldr	r1, [r7, #8]
 80191b6:	2000      	movs	r0, #0
 80191b8:	f000 f83c 	bl	8019234 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 80191bc:	2000      	movs	r0, #0
 80191be:	f000 fdd5 	bl	8019d6c <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 80191c2:	f000 ff71 	bl	801a0a8 <RadioGetWakeupTime>
 80191c6:	4603      	mov	r3, r0
 80191c8:	4618      	mov	r0, r3
 80191ca:	f7e9 f81b 	bl	8002204 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 80191ce:	f004 f90d 	bl	801d3ec <UTIL_TIMER_GetCurrentTime>
 80191d2:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80191d4:	e00d      	b.n	80191f2 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 80191d6:	2000      	movs	r0, #0
 80191d8:	f000 feb6 	bl	8019f48 <RadioRssi>
 80191dc:	4603      	mov	r3, r0
 80191de:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 80191e0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80191e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80191e8:	429a      	cmp	r2, r3
 80191ea:	dd02      	ble.n	80191f2 <RadioIsChannelFree+0x98>
        {
            status = false;
 80191ec:	2300      	movs	r3, #0
 80191ee:	75fb      	strb	r3, [r7, #23]
            break;
 80191f0:	e006      	b.n	8019200 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80191f2:	6938      	ldr	r0, [r7, #16]
 80191f4:	f004 f90c 	bl	801d410 <UTIL_TIMER_GetElapsedTime>
 80191f8:	4602      	mov	r2, r0
 80191fa:	683b      	ldr	r3, [r7, #0]
 80191fc:	4293      	cmp	r3, r2
 80191fe:	d8ea      	bhi.n	80191d6 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 8019200:	f000 fdad 	bl	8019d5e <RadioStandby>

    return status;
 8019204:	7dfb      	ldrb	r3, [r7, #23]
}
 8019206:	4618      	mov	r0, r3
 8019208:	3718      	adds	r7, #24
 801920a:	46bd      	mov	sp, r7
 801920c:	bd80      	pop	{r7, pc}

0801920e <RadioRandom>:

static uint32_t RadioRandom( void )
{
 801920e:	b580      	push	{r7, lr}
 8019210:	b082      	sub	sp, #8
 8019212:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8019214:	2300      	movs	r3, #0
 8019216:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8019218:	2300      	movs	r3, #0
 801921a:	2200      	movs	r2, #0
 801921c:	2100      	movs	r1, #0
 801921e:	2000      	movs	r0, #0
 8019220:	f002 f9fe 	bl	801b620 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8019224:	f001 ffaf 	bl	801b186 <SUBGRF_GetRandom>
 8019228:	6078      	str	r0, [r7, #4]

    return rnd;
 801922a:	687b      	ldr	r3, [r7, #4]
}
 801922c:	4618      	mov	r0, r3
 801922e:	3708      	adds	r7, #8
 8019230:	46bd      	mov	sp, r7
 8019232:	bd80      	pop	{r7, pc}

08019234 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8019234:	b580      	push	{r7, lr}
 8019236:	b08a      	sub	sp, #40	; 0x28
 8019238:	af00      	add	r7, sp, #0
 801923a:	60b9      	str	r1, [r7, #8]
 801923c:	607a      	str	r2, [r7, #4]
 801923e:	461a      	mov	r2, r3
 8019240:	4603      	mov	r3, r0
 8019242:	73fb      	strb	r3, [r7, #15]
 8019244:	4613      	mov	r3, r2
 8019246:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8019248:	4ab9      	ldr	r2, [pc, #740]	; (8019530 <RadioSetRxConfig+0x2fc>)
 801924a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801924e:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 8019250:	f003 f87d 	bl	801c34e <RFW_DeInit>
    if( rxContinuous == true )
 8019254:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8019258:	2b00      	cmp	r3, #0
 801925a:	d001      	beq.n	8019260 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 801925c:	2300      	movs	r3, #0
 801925e:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8019260:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8019264:	2b00      	cmp	r3, #0
 8019266:	d004      	beq.n	8019272 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8019268:	4ab2      	ldr	r2, [pc, #712]	; (8019534 <RadioSetRxConfig+0x300>)
 801926a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 801926e:	7013      	strb	r3, [r2, #0]
 8019270:	e002      	b.n	8019278 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8019272:	4bb0      	ldr	r3, [pc, #704]	; (8019534 <RadioSetRxConfig+0x300>)
 8019274:	22ff      	movs	r2, #255	; 0xff
 8019276:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8019278:	7bfb      	ldrb	r3, [r7, #15]
 801927a:	2b05      	cmp	r3, #5
 801927c:	d009      	beq.n	8019292 <RadioSetRxConfig+0x5e>
 801927e:	2b05      	cmp	r3, #5
 8019280:	f300 81d7 	bgt.w	8019632 <RadioSetRxConfig+0x3fe>
 8019284:	2b00      	cmp	r3, #0
 8019286:	f000 80bf 	beq.w	8019408 <RadioSetRxConfig+0x1d4>
 801928a:	2b01      	cmp	r3, #1
 801928c:	f000 8124 	beq.w	80194d8 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8019290:	e1cf      	b.n	8019632 <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8019292:	2001      	movs	r0, #1
 8019294:	f002 f8bc 	bl	801b410 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8019298:	4ba5      	ldr	r3, [pc, #660]	; (8019530 <RadioSetRxConfig+0x2fc>)
 801929a:	2200      	movs	r2, #0
 801929c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80192a0:	4aa3      	ldr	r2, [pc, #652]	; (8019530 <RadioSetRxConfig+0x2fc>)
 80192a2:	687b      	ldr	r3, [r7, #4]
 80192a4:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 80192a6:	4ba2      	ldr	r3, [pc, #648]	; (8019530 <RadioSetRxConfig+0x2fc>)
 80192a8:	2209      	movs	r2, #9
 80192aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 80192ae:	4ba0      	ldr	r3, [pc, #640]	; (8019530 <RadioSetRxConfig+0x2fc>)
 80192b0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80192b4:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80192b6:	68b8      	ldr	r0, [r7, #8]
 80192b8:	f002 ff7c 	bl	801c1b4 <SUBGRF_GetFskBandwidthRegValue>
 80192bc:	4603      	mov	r3, r0
 80192be:	461a      	mov	r2, r3
 80192c0:	4b9b      	ldr	r3, [pc, #620]	; (8019530 <RadioSetRxConfig+0x2fc>)
 80192c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80192c6:	4b9a      	ldr	r3, [pc, #616]	; (8019530 <RadioSetRxConfig+0x2fc>)
 80192c8:	2200      	movs	r2, #0
 80192ca:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80192cc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80192ce:	00db      	lsls	r3, r3, #3
 80192d0:	b29a      	uxth	r2, r3
 80192d2:	4b97      	ldr	r3, [pc, #604]	; (8019530 <RadioSetRxConfig+0x2fc>)
 80192d4:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 80192d6:	4b96      	ldr	r3, [pc, #600]	; (8019530 <RadioSetRxConfig+0x2fc>)
 80192d8:	2200      	movs	r2, #0
 80192da:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 80192dc:	4b94      	ldr	r3, [pc, #592]	; (8019530 <RadioSetRxConfig+0x2fc>)
 80192de:	2210      	movs	r2, #16
 80192e0:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80192e2:	4b93      	ldr	r3, [pc, #588]	; (8019530 <RadioSetRxConfig+0x2fc>)
 80192e4:	2200      	movs	r2, #0
 80192e6:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 80192e8:	4b91      	ldr	r3, [pc, #580]	; (8019530 <RadioSetRxConfig+0x2fc>)
 80192ea:	2200      	movs	r2, #0
 80192ec:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80192ee:	4b91      	ldr	r3, [pc, #580]	; (8019534 <RadioSetRxConfig+0x300>)
 80192f0:	781a      	ldrb	r2, [r3, #0]
 80192f2:	4b8f      	ldr	r3, [pc, #572]	; (8019530 <RadioSetRxConfig+0x2fc>)
 80192f4:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80192f6:	4b8e      	ldr	r3, [pc, #568]	; (8019530 <RadioSetRxConfig+0x2fc>)
 80192f8:	2201      	movs	r2, #1
 80192fa:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 80192fc:	4b8c      	ldr	r3, [pc, #560]	; (8019530 <RadioSetRxConfig+0x2fc>)
 80192fe:	2200      	movs	r2, #0
 8019300:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8019302:	2005      	movs	r0, #5
 8019304:	f7ff fec2 	bl	801908c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019308:	488b      	ldr	r0, [pc, #556]	; (8019538 <RadioSetRxConfig+0x304>)
 801930a:	f002 fb1f 	bl	801b94c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801930e:	488b      	ldr	r0, [pc, #556]	; (801953c <RadioSetRxConfig+0x308>)
 8019310:	f002 fbee 	bl	801baf0 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8019314:	4a8a      	ldr	r2, [pc, #552]	; (8019540 <RadioSetRxConfig+0x30c>)
 8019316:	f107 031c 	add.w	r3, r7, #28
 801931a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801931e:	e883 0003 	stmia.w	r3, {r0, r1}
 8019322:	f107 031c 	add.w	r3, r7, #28
 8019326:	4618      	mov	r0, r3
 8019328:	f001 feab 	bl	801b082 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801932c:	f240 10ff 	movw	r0, #511	; 0x1ff
 8019330:	f001 fef6 	bl	801b120 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8019334:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8019338:	f000 fe25 	bl	8019f86 <RadioRead>
 801933c:	4603      	mov	r3, r0
 801933e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 8019342:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019346:	f023 0310 	bic.w	r3, r3, #16
 801934a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 801934e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019352:	4619      	mov	r1, r3
 8019354:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8019358:	f000 fe03 	bl	8019f62 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 801935c:	2104      	movs	r1, #4
 801935e:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8019362:	f000 fdfe 	bl	8019f62 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8019366:	f640 009b 	movw	r0, #2203	; 0x89b
 801936a:	f000 fe0c 	bl	8019f86 <RadioRead>
 801936e:	4603      	mov	r3, r0
 8019370:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8019374:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019378:	f023 031c 	bic.w	r3, r3, #28
 801937c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8019380:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019384:	f043 0308 	orr.w	r3, r3, #8
 8019388:	b2db      	uxtb	r3, r3
 801938a:	4619      	mov	r1, r3
 801938c:	f640 009b 	movw	r0, #2203	; 0x89b
 8019390:	f000 fde7 	bl	8019f62 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8019394:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8019398:	f000 fdf5 	bl	8019f86 <RadioRead>
 801939c:	4603      	mov	r3, r0
 801939e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80193a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80193a6:	f023 0318 	bic.w	r3, r3, #24
 80193aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 80193ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80193b2:	f043 0318 	orr.w	r3, r3, #24
 80193b6:	b2db      	uxtb	r3, r3
 80193b8:	4619      	mov	r1, r3
 80193ba:	f240 60d1 	movw	r0, #1745	; 0x6d1
 80193be:	f000 fdd0 	bl	8019f62 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 80193c2:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80193c6:	f000 fdde 	bl	8019f86 <RadioRead>
 80193ca:	4603      	mov	r3, r0
 80193cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 80193d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80193d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80193d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 80193dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80193e0:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80193e4:	b2db      	uxtb	r3, r3
 80193e6:	4619      	mov	r1, r3
 80193e8:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80193ec:	f000 fdb9 	bl	8019f62 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80193f0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80193f2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80193f6:	fb02 f303 	mul.w	r3, r2, r3
 80193fa:	461a      	mov	r2, r3
 80193fc:	687b      	ldr	r3, [r7, #4]
 80193fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8019402:	4a4b      	ldr	r2, [pc, #300]	; (8019530 <RadioSetRxConfig+0x2fc>)
 8019404:	6093      	str	r3, [r2, #8]
            break;
 8019406:	e115      	b.n	8019634 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8019408:	2000      	movs	r0, #0
 801940a:	f002 f801 	bl	801b410 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801940e:	4b48      	ldr	r3, [pc, #288]	; (8019530 <RadioSetRxConfig+0x2fc>)
 8019410:	2200      	movs	r2, #0
 8019412:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8019416:	4a46      	ldr	r2, [pc, #280]	; (8019530 <RadioSetRxConfig+0x2fc>)
 8019418:	687b      	ldr	r3, [r7, #4]
 801941a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801941c:	4b44      	ldr	r3, [pc, #272]	; (8019530 <RadioSetRxConfig+0x2fc>)
 801941e:	220b      	movs	r2, #11
 8019420:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8019424:	68b8      	ldr	r0, [r7, #8]
 8019426:	f002 fec5 	bl	801c1b4 <SUBGRF_GetFskBandwidthRegValue>
 801942a:	4603      	mov	r3, r0
 801942c:	461a      	mov	r2, r3
 801942e:	4b40      	ldr	r3, [pc, #256]	; (8019530 <RadioSetRxConfig+0x2fc>)
 8019430:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8019434:	4b3e      	ldr	r3, [pc, #248]	; (8019530 <RadioSetRxConfig+0x2fc>)
 8019436:	2200      	movs	r2, #0
 8019438:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801943a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801943c:	00db      	lsls	r3, r3, #3
 801943e:	b29a      	uxth	r2, r3
 8019440:	4b3b      	ldr	r3, [pc, #236]	; (8019530 <RadioSetRxConfig+0x2fc>)
 8019442:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8019444:	4b3a      	ldr	r3, [pc, #232]	; (8019530 <RadioSetRxConfig+0x2fc>)
 8019446:	2204      	movs	r2, #4
 8019448:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 801944a:	4b39      	ldr	r3, [pc, #228]	; (8019530 <RadioSetRxConfig+0x2fc>)
 801944c:	2218      	movs	r2, #24
 801944e:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8019450:	4b37      	ldr	r3, [pc, #220]	; (8019530 <RadioSetRxConfig+0x2fc>)
 8019452:	2200      	movs	r2, #0
 8019454:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8019456:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801945a:	f083 0301 	eor.w	r3, r3, #1
 801945e:	b2db      	uxtb	r3, r3
 8019460:	461a      	mov	r2, r3
 8019462:	4b33      	ldr	r3, [pc, #204]	; (8019530 <RadioSetRxConfig+0x2fc>)
 8019464:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8019466:	4b33      	ldr	r3, [pc, #204]	; (8019534 <RadioSetRxConfig+0x300>)
 8019468:	781a      	ldrb	r2, [r3, #0]
 801946a:	4b31      	ldr	r3, [pc, #196]	; (8019530 <RadioSetRxConfig+0x2fc>)
 801946c:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 801946e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8019472:	2b00      	cmp	r3, #0
 8019474:	d003      	beq.n	801947e <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8019476:	4b2e      	ldr	r3, [pc, #184]	; (8019530 <RadioSetRxConfig+0x2fc>)
 8019478:	22f2      	movs	r2, #242	; 0xf2
 801947a:	75da      	strb	r2, [r3, #23]
 801947c:	e002      	b.n	8019484 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801947e:	4b2c      	ldr	r3, [pc, #176]	; (8019530 <RadioSetRxConfig+0x2fc>)
 8019480:	2201      	movs	r2, #1
 8019482:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8019484:	4b2a      	ldr	r3, [pc, #168]	; (8019530 <RadioSetRxConfig+0x2fc>)
 8019486:	2201      	movs	r2, #1
 8019488:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801948a:	f000 fc68 	bl	8019d5e <RadioStandby>
            RadioSetModem( MODEM_FSK );
 801948e:	2000      	movs	r0, #0
 8019490:	f7ff fdfc 	bl	801908c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019494:	4828      	ldr	r0, [pc, #160]	; (8019538 <RadioSetRxConfig+0x304>)
 8019496:	f002 fa59 	bl	801b94c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801949a:	4828      	ldr	r0, [pc, #160]	; (801953c <RadioSetRxConfig+0x308>)
 801949c:	f002 fb28 	bl	801baf0 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80194a0:	4a28      	ldr	r2, [pc, #160]	; (8019544 <RadioSetRxConfig+0x310>)
 80194a2:	f107 0314 	add.w	r3, r7, #20
 80194a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80194aa:	e883 0003 	stmia.w	r3, {r0, r1}
 80194ae:	f107 0314 	add.w	r3, r7, #20
 80194b2:	4618      	mov	r0, r3
 80194b4:	f001 fde5 	bl	801b082 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80194b8:	f240 10ff 	movw	r0, #511	; 0x1ff
 80194bc:	f001 fe30 	bl	801b120 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80194c0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80194c2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80194c6:	fb02 f303 	mul.w	r3, r2, r3
 80194ca:	461a      	mov	r2, r3
 80194cc:	687b      	ldr	r3, [r7, #4]
 80194ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80194d2:	4a17      	ldr	r2, [pc, #92]	; (8019530 <RadioSetRxConfig+0x2fc>)
 80194d4:	6093      	str	r3, [r2, #8]
            break;
 80194d6:	e0ad      	b.n	8019634 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80194d8:	2000      	movs	r0, #0
 80194da:	f001 ff99 	bl	801b410 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80194de:	4b14      	ldr	r3, [pc, #80]	; (8019530 <RadioSetRxConfig+0x2fc>)
 80194e0:	2201      	movs	r2, #1
 80194e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 80194e6:	687b      	ldr	r3, [r7, #4]
 80194e8:	b2da      	uxtb	r2, r3
 80194ea:	4b11      	ldr	r3, [pc, #68]	; (8019530 <RadioSetRxConfig+0x2fc>)
 80194ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 80194f0:	4a15      	ldr	r2, [pc, #84]	; (8019548 <RadioSetRxConfig+0x314>)
 80194f2:	68bb      	ldr	r3, [r7, #8]
 80194f4:	4413      	add	r3, r2
 80194f6:	781a      	ldrb	r2, [r3, #0]
 80194f8:	4b0d      	ldr	r3, [pc, #52]	; (8019530 <RadioSetRxConfig+0x2fc>)
 80194fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 80194fe:	4a0c      	ldr	r2, [pc, #48]	; (8019530 <RadioSetRxConfig+0x2fc>)
 8019500:	7bbb      	ldrb	r3, [r7, #14]
 8019502:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8019506:	68bb      	ldr	r3, [r7, #8]
 8019508:	2b00      	cmp	r3, #0
 801950a:	d105      	bne.n	8019518 <RadioSetRxConfig+0x2e4>
 801950c:	687b      	ldr	r3, [r7, #4]
 801950e:	2b0b      	cmp	r3, #11
 8019510:	d008      	beq.n	8019524 <RadioSetRxConfig+0x2f0>
 8019512:	687b      	ldr	r3, [r7, #4]
 8019514:	2b0c      	cmp	r3, #12
 8019516:	d005      	beq.n	8019524 <RadioSetRxConfig+0x2f0>
 8019518:	68bb      	ldr	r3, [r7, #8]
 801951a:	2b01      	cmp	r3, #1
 801951c:	d116      	bne.n	801954c <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801951e:	687b      	ldr	r3, [r7, #4]
 8019520:	2b0c      	cmp	r3, #12
 8019522:	d113      	bne.n	801954c <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8019524:	4b02      	ldr	r3, [pc, #8]	; (8019530 <RadioSetRxConfig+0x2fc>)
 8019526:	2201      	movs	r2, #1
 8019528:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801952c:	e012      	b.n	8019554 <RadioSetRxConfig+0x320>
 801952e:	bf00      	nop
 8019530:	20001be8 	.word	0x20001be8
 8019534:	20000134 	.word	0x20000134
 8019538:	20001c20 	.word	0x20001c20
 801953c:	20001bf6 	.word	0x20001bf6
 8019540:	0801e3ec 	.word	0x0801e3ec
 8019544:	0801e3f4 	.word	0x0801e3f4
 8019548:	0801eae0 	.word	0x0801eae0
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801954c:	4b3b      	ldr	r3, [pc, #236]	; (801963c <RadioSetRxConfig+0x408>)
 801954e:	2200      	movs	r2, #0
 8019550:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8019554:	4b39      	ldr	r3, [pc, #228]	; (801963c <RadioSetRxConfig+0x408>)
 8019556:	2201      	movs	r2, #1
 8019558:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801955a:	4b38      	ldr	r3, [pc, #224]	; (801963c <RadioSetRxConfig+0x408>)
 801955c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8019560:	2b05      	cmp	r3, #5
 8019562:	d004      	beq.n	801956e <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8019564:	4b35      	ldr	r3, [pc, #212]	; (801963c <RadioSetRxConfig+0x408>)
 8019566:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801956a:	2b06      	cmp	r3, #6
 801956c:	d10a      	bne.n	8019584 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 801956e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019570:	2b0b      	cmp	r3, #11
 8019572:	d803      	bhi.n	801957c <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8019574:	4b31      	ldr	r3, [pc, #196]	; (801963c <RadioSetRxConfig+0x408>)
 8019576:	220c      	movs	r2, #12
 8019578:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801957a:	e006      	b.n	801958a <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801957c:	4a2f      	ldr	r2, [pc, #188]	; (801963c <RadioSetRxConfig+0x408>)
 801957e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019580:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8019582:	e002      	b.n	801958a <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8019584:	4a2d      	ldr	r2, [pc, #180]	; (801963c <RadioSetRxConfig+0x408>)
 8019586:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019588:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801958a:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801958e:	4b2b      	ldr	r3, [pc, #172]	; (801963c <RadioSetRxConfig+0x408>)
 8019590:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8019592:	4b2b      	ldr	r3, [pc, #172]	; (8019640 <RadioSetRxConfig+0x40c>)
 8019594:	781a      	ldrb	r2, [r3, #0]
 8019596:	4b29      	ldr	r3, [pc, #164]	; (801963c <RadioSetRxConfig+0x408>)
 8019598:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801959a:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 801959e:	4b27      	ldr	r3, [pc, #156]	; (801963c <RadioSetRxConfig+0x408>)
 80195a0:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80195a4:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80195a8:	4b24      	ldr	r3, [pc, #144]	; (801963c <RadioSetRxConfig+0x408>)
 80195aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 80195ae:	f000 fbd6 	bl	8019d5e <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80195b2:	2001      	movs	r0, #1
 80195b4:	f7ff fd6a 	bl	801908c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80195b8:	4822      	ldr	r0, [pc, #136]	; (8019644 <RadioSetRxConfig+0x410>)
 80195ba:	f002 f9c7 	bl	801b94c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80195be:	4822      	ldr	r0, [pc, #136]	; (8019648 <RadioSetRxConfig+0x414>)
 80195c0:	f002 fa96 	bl	801baf0 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80195c4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80195c6:	b2db      	uxtb	r3, r3
 80195c8:	4618      	mov	r0, r3
 80195ca:	f001 ff30 	bl	801b42e <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 80195ce:	f640 00a3 	movw	r0, #2211	; 0x8a3
 80195d2:	f002 fbe9 	bl	801bda8 <SUBGRF_ReadRegister>
 80195d6:	4603      	mov	r3, r0
 80195d8:	f003 0301 	and.w	r3, r3, #1
 80195dc:	b2db      	uxtb	r3, r3
 80195de:	4619      	mov	r1, r3
 80195e0:	f640 00a3 	movw	r0, #2211	; 0x8a3
 80195e4:	f002 fbcc 	bl	801bd80 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80195e8:	4b14      	ldr	r3, [pc, #80]	; (801963c <RadioSetRxConfig+0x408>)
 80195ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80195ee:	2b01      	cmp	r3, #1
 80195f0:	d10d      	bne.n	801960e <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 80195f2:	f240 7036 	movw	r0, #1846	; 0x736
 80195f6:	f002 fbd7 	bl	801bda8 <SUBGRF_ReadRegister>
 80195fa:	4603      	mov	r3, r0
 80195fc:	f023 0304 	bic.w	r3, r3, #4
 8019600:	b2db      	uxtb	r3, r3
 8019602:	4619      	mov	r1, r3
 8019604:	f240 7036 	movw	r0, #1846	; 0x736
 8019608:	f002 fbba 	bl	801bd80 <SUBGRF_WriteRegister>
 801960c:	e00c      	b.n	8019628 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801960e:	f240 7036 	movw	r0, #1846	; 0x736
 8019612:	f002 fbc9 	bl	801bda8 <SUBGRF_ReadRegister>
 8019616:	4603      	mov	r3, r0
 8019618:	f043 0304 	orr.w	r3, r3, #4
 801961c:	b2db      	uxtb	r3, r3
 801961e:	4619      	mov	r1, r3
 8019620:	f240 7036 	movw	r0, #1846	; 0x736
 8019624:	f002 fbac 	bl	801bd80 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8019628:	4b04      	ldr	r3, [pc, #16]	; (801963c <RadioSetRxConfig+0x408>)
 801962a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801962e:	609a      	str	r2, [r3, #8]
            break;
 8019630:	e000      	b.n	8019634 <RadioSetRxConfig+0x400>
            break;
 8019632:	bf00      	nop
    }
}
 8019634:	bf00      	nop
 8019636:	3728      	adds	r7, #40	; 0x28
 8019638:	46bd      	mov	sp, r7
 801963a:	bd80      	pop	{r7, pc}
 801963c:	20001be8 	.word	0x20001be8
 8019640:	20000134 	.word	0x20000134
 8019644:	20001c20 	.word	0x20001c20
 8019648:	20001bf6 	.word	0x20001bf6

0801964c <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 801964c:	b580      	push	{r7, lr}
 801964e:	b086      	sub	sp, #24
 8019650:	af00      	add	r7, sp, #0
 8019652:	60ba      	str	r2, [r7, #8]
 8019654:	607b      	str	r3, [r7, #4]
 8019656:	4603      	mov	r3, r0
 8019658:	73fb      	strb	r3, [r7, #15]
 801965a:	460b      	mov	r3, r1
 801965c:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 801965e:	f002 fe76 	bl	801c34e <RFW_DeInit>
    switch( modem )
 8019662:	7bfb      	ldrb	r3, [r7, #15]
 8019664:	2b04      	cmp	r3, #4
 8019666:	f000 80c7 	beq.w	80197f8 <RadioSetTxConfig+0x1ac>
 801966a:	2b04      	cmp	r3, #4
 801966c:	f300 80d6 	bgt.w	801981c <RadioSetTxConfig+0x1d0>
 8019670:	2b00      	cmp	r3, #0
 8019672:	d002      	beq.n	801967a <RadioSetTxConfig+0x2e>
 8019674:	2b01      	cmp	r3, #1
 8019676:	d059      	beq.n	801972c <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8019678:	e0d0      	b.n	801981c <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801967a:	4b77      	ldr	r3, [pc, #476]	; (8019858 <RadioSetTxConfig+0x20c>)
 801967c:	2200      	movs	r2, #0
 801967e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8019682:	4a75      	ldr	r2, [pc, #468]	; (8019858 <RadioSetTxConfig+0x20c>)
 8019684:	6a3b      	ldr	r3, [r7, #32]
 8019686:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8019688:	4b73      	ldr	r3, [pc, #460]	; (8019858 <RadioSetTxConfig+0x20c>)
 801968a:	220b      	movs	r2, #11
 801968c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8019690:	6878      	ldr	r0, [r7, #4]
 8019692:	f002 fd8f 	bl	801c1b4 <SUBGRF_GetFskBandwidthRegValue>
 8019696:	4603      	mov	r3, r0
 8019698:	461a      	mov	r2, r3
 801969a:	4b6f      	ldr	r3, [pc, #444]	; (8019858 <RadioSetTxConfig+0x20c>)
 801969c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 80196a0:	4a6d      	ldr	r2, [pc, #436]	; (8019858 <RadioSetTxConfig+0x20c>)
 80196a2:	68bb      	ldr	r3, [r7, #8]
 80196a4:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80196a6:	4b6c      	ldr	r3, [pc, #432]	; (8019858 <RadioSetTxConfig+0x20c>)
 80196a8:	2200      	movs	r2, #0
 80196aa:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80196ac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80196ae:	00db      	lsls	r3, r3, #3
 80196b0:	b29a      	uxth	r2, r3
 80196b2:	4b69      	ldr	r3, [pc, #420]	; (8019858 <RadioSetTxConfig+0x20c>)
 80196b4:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80196b6:	4b68      	ldr	r3, [pc, #416]	; (8019858 <RadioSetTxConfig+0x20c>)
 80196b8:	2204      	movs	r2, #4
 80196ba:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 80196bc:	4b66      	ldr	r3, [pc, #408]	; (8019858 <RadioSetTxConfig+0x20c>)
 80196be:	2218      	movs	r2, #24
 80196c0:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80196c2:	4b65      	ldr	r3, [pc, #404]	; (8019858 <RadioSetTxConfig+0x20c>)
 80196c4:	2200      	movs	r2, #0
 80196c6:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80196c8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80196cc:	f083 0301 	eor.w	r3, r3, #1
 80196d0:	b2db      	uxtb	r3, r3
 80196d2:	461a      	mov	r2, r3
 80196d4:	4b60      	ldr	r3, [pc, #384]	; (8019858 <RadioSetTxConfig+0x20c>)
 80196d6:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 80196d8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80196dc:	2b00      	cmp	r3, #0
 80196de:	d003      	beq.n	80196e8 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80196e0:	4b5d      	ldr	r3, [pc, #372]	; (8019858 <RadioSetTxConfig+0x20c>)
 80196e2:	22f2      	movs	r2, #242	; 0xf2
 80196e4:	75da      	strb	r2, [r3, #23]
 80196e6:	e002      	b.n	80196ee <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80196e8:	4b5b      	ldr	r3, [pc, #364]	; (8019858 <RadioSetTxConfig+0x20c>)
 80196ea:	2201      	movs	r2, #1
 80196ec:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80196ee:	4b5a      	ldr	r3, [pc, #360]	; (8019858 <RadioSetTxConfig+0x20c>)
 80196f0:	2201      	movs	r2, #1
 80196f2:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80196f4:	f000 fb33 	bl	8019d5e <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 80196f8:	2000      	movs	r0, #0
 80196fa:	f7ff fcc7 	bl	801908c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80196fe:	4857      	ldr	r0, [pc, #348]	; (801985c <RadioSetTxConfig+0x210>)
 8019700:	f002 f924 	bl	801b94c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019704:	4856      	ldr	r0, [pc, #344]	; (8019860 <RadioSetTxConfig+0x214>)
 8019706:	f002 f9f3 	bl	801baf0 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801970a:	4a56      	ldr	r2, [pc, #344]	; (8019864 <RadioSetTxConfig+0x218>)
 801970c:	f107 0310 	add.w	r3, r7, #16
 8019710:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019714:	e883 0003 	stmia.w	r3, {r0, r1}
 8019718:	f107 0310 	add.w	r3, r7, #16
 801971c:	4618      	mov	r0, r3
 801971e:	f001 fcb0 	bl	801b082 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8019722:	f240 10ff 	movw	r0, #511	; 0x1ff
 8019726:	f001 fcfb 	bl	801b120 <SUBGRF_SetWhiteningSeed>
            break;
 801972a:	e078      	b.n	801981e <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801972c:	4b4a      	ldr	r3, [pc, #296]	; (8019858 <RadioSetTxConfig+0x20c>)
 801972e:	2201      	movs	r2, #1
 8019730:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8019734:	6a3b      	ldr	r3, [r7, #32]
 8019736:	b2da      	uxtb	r2, r3
 8019738:	4b47      	ldr	r3, [pc, #284]	; (8019858 <RadioSetTxConfig+0x20c>)
 801973a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 801973e:	4a4a      	ldr	r2, [pc, #296]	; (8019868 <RadioSetTxConfig+0x21c>)
 8019740:	687b      	ldr	r3, [r7, #4]
 8019742:	4413      	add	r3, r2
 8019744:	781a      	ldrb	r2, [r3, #0]
 8019746:	4b44      	ldr	r3, [pc, #272]	; (8019858 <RadioSetTxConfig+0x20c>)
 8019748:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 801974c:	4a42      	ldr	r2, [pc, #264]	; (8019858 <RadioSetTxConfig+0x20c>)
 801974e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019752:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8019756:	687b      	ldr	r3, [r7, #4]
 8019758:	2b00      	cmp	r3, #0
 801975a:	d105      	bne.n	8019768 <RadioSetTxConfig+0x11c>
 801975c:	6a3b      	ldr	r3, [r7, #32]
 801975e:	2b0b      	cmp	r3, #11
 8019760:	d008      	beq.n	8019774 <RadioSetTxConfig+0x128>
 8019762:	6a3b      	ldr	r3, [r7, #32]
 8019764:	2b0c      	cmp	r3, #12
 8019766:	d005      	beq.n	8019774 <RadioSetTxConfig+0x128>
 8019768:	687b      	ldr	r3, [r7, #4]
 801976a:	2b01      	cmp	r3, #1
 801976c:	d107      	bne.n	801977e <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801976e:	6a3b      	ldr	r3, [r7, #32]
 8019770:	2b0c      	cmp	r3, #12
 8019772:	d104      	bne.n	801977e <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8019774:	4b38      	ldr	r3, [pc, #224]	; (8019858 <RadioSetTxConfig+0x20c>)
 8019776:	2201      	movs	r2, #1
 8019778:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801977c:	e003      	b.n	8019786 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801977e:	4b36      	ldr	r3, [pc, #216]	; (8019858 <RadioSetTxConfig+0x20c>)
 8019780:	2200      	movs	r2, #0
 8019782:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8019786:	4b34      	ldr	r3, [pc, #208]	; (8019858 <RadioSetTxConfig+0x20c>)
 8019788:	2201      	movs	r2, #1
 801978a:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801978c:	4b32      	ldr	r3, [pc, #200]	; (8019858 <RadioSetTxConfig+0x20c>)
 801978e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8019792:	2b05      	cmp	r3, #5
 8019794:	d004      	beq.n	80197a0 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8019796:	4b30      	ldr	r3, [pc, #192]	; (8019858 <RadioSetTxConfig+0x20c>)
 8019798:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801979c:	2b06      	cmp	r3, #6
 801979e:	d10a      	bne.n	80197b6 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 80197a0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80197a2:	2b0b      	cmp	r3, #11
 80197a4:	d803      	bhi.n	80197ae <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80197a6:	4b2c      	ldr	r3, [pc, #176]	; (8019858 <RadioSetTxConfig+0x20c>)
 80197a8:	220c      	movs	r2, #12
 80197aa:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80197ac:	e006      	b.n	80197bc <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80197ae:	4a2a      	ldr	r2, [pc, #168]	; (8019858 <RadioSetTxConfig+0x20c>)
 80197b0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80197b2:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80197b4:	e002      	b.n	80197bc <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80197b6:	4a28      	ldr	r2, [pc, #160]	; (8019858 <RadioSetTxConfig+0x20c>)
 80197b8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80197ba:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80197bc:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80197c0:	4b25      	ldr	r3, [pc, #148]	; (8019858 <RadioSetTxConfig+0x20c>)
 80197c2:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80197c4:	4b29      	ldr	r3, [pc, #164]	; (801986c <RadioSetTxConfig+0x220>)
 80197c6:	781a      	ldrb	r2, [r3, #0]
 80197c8:	4b23      	ldr	r3, [pc, #140]	; (8019858 <RadioSetTxConfig+0x20c>)
 80197ca:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80197cc:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80197d0:	4b21      	ldr	r3, [pc, #132]	; (8019858 <RadioSetTxConfig+0x20c>)
 80197d2:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80197d6:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80197da:	4b1f      	ldr	r3, [pc, #124]	; (8019858 <RadioSetTxConfig+0x20c>)
 80197dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 80197e0:	f000 fabd 	bl	8019d5e <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80197e4:	2001      	movs	r0, #1
 80197e6:	f7ff fc51 	bl	801908c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80197ea:	481c      	ldr	r0, [pc, #112]	; (801985c <RadioSetTxConfig+0x210>)
 80197ec:	f002 f8ae 	bl	801b94c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80197f0:	481b      	ldr	r0, [pc, #108]	; (8019860 <RadioSetTxConfig+0x214>)
 80197f2:	f002 f97d 	bl	801baf0 <SUBGRF_SetPacketParams>
            break;
 80197f6:	e012      	b.n	801981e <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 80197f8:	2004      	movs	r0, #4
 80197fa:	f7ff fc47 	bl	801908c <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80197fe:	4b16      	ldr	r3, [pc, #88]	; (8019858 <RadioSetTxConfig+0x20c>)
 8019800:	2202      	movs	r2, #2
 8019802:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8019806:	4a14      	ldr	r2, [pc, #80]	; (8019858 <RadioSetTxConfig+0x20c>)
 8019808:	6a3b      	ldr	r3, [r7, #32]
 801980a:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801980c:	4b12      	ldr	r3, [pc, #72]	; (8019858 <RadioSetTxConfig+0x20c>)
 801980e:	2216      	movs	r2, #22
 8019810:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019814:	4811      	ldr	r0, [pc, #68]	; (801985c <RadioSetTxConfig+0x210>)
 8019816:	f002 f899 	bl	801b94c <SUBGRF_SetModulationParams>
            break;
 801981a:	e000      	b.n	801981e <RadioSetTxConfig+0x1d2>
            break;
 801981c:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801981e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8019822:	4618      	mov	r0, r3
 8019824:	f002 fbc8 	bl	801bfb8 <SUBGRF_SetRfTxPower>
 8019828:	4603      	mov	r3, r0
 801982a:	461a      	mov	r2, r3
 801982c:	4b0a      	ldr	r3, [pc, #40]	; (8019858 <RadioSetTxConfig+0x20c>)
 801982e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8019832:	210e      	movs	r1, #14
 8019834:	f640 101f 	movw	r0, #2335	; 0x91f
 8019838:	f002 faa2 	bl	801bd80 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801983c:	4b06      	ldr	r3, [pc, #24]	; (8019858 <RadioSetTxConfig+0x20c>)
 801983e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019842:	4618      	mov	r0, r3
 8019844:	f002 fd97 	bl	801c376 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8019848:	4a03      	ldr	r2, [pc, #12]	; (8019858 <RadioSetTxConfig+0x20c>)
 801984a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801984c:	6053      	str	r3, [r2, #4]
}
 801984e:	bf00      	nop
 8019850:	3718      	adds	r7, #24
 8019852:	46bd      	mov	sp, r7
 8019854:	bd80      	pop	{r7, pc}
 8019856:	bf00      	nop
 8019858:	20001be8 	.word	0x20001be8
 801985c:	20001c20 	.word	0x20001c20
 8019860:	20001bf6 	.word	0x20001bf6
 8019864:	0801e3f4 	.word	0x0801e3f4
 8019868:	0801eae0 	.word	0x0801eae0
 801986c:	20000134 	.word	0x20000134

08019870 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8019870:	b480      	push	{r7}
 8019872:	b083      	sub	sp, #12
 8019874:	af00      	add	r7, sp, #0
 8019876:	6078      	str	r0, [r7, #4]
    return true;
 8019878:	2301      	movs	r3, #1
}
 801987a:	4618      	mov	r0, r3
 801987c:	370c      	adds	r7, #12
 801987e:	46bd      	mov	sp, r7
 8019880:	bc80      	pop	{r7}
 8019882:	4770      	bx	lr

08019884 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8019884:	b480      	push	{r7}
 8019886:	b085      	sub	sp, #20
 8019888:	af00      	add	r7, sp, #0
 801988a:	4603      	mov	r3, r0
 801988c:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 801988e:	2300      	movs	r3, #0
 8019890:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8019892:	79fb      	ldrb	r3, [r7, #7]
 8019894:	2b0a      	cmp	r3, #10
 8019896:	d83e      	bhi.n	8019916 <RadioGetLoRaBandwidthInHz+0x92>
 8019898:	a201      	add	r2, pc, #4	; (adr r2, 80198a0 <RadioGetLoRaBandwidthInHz+0x1c>)
 801989a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801989e:	bf00      	nop
 80198a0:	080198cd 	.word	0x080198cd
 80198a4:	080198dd 	.word	0x080198dd
 80198a8:	080198ed 	.word	0x080198ed
 80198ac:	080198fd 	.word	0x080198fd
 80198b0:	08019905 	.word	0x08019905
 80198b4:	0801990b 	.word	0x0801990b
 80198b8:	08019911 	.word	0x08019911
 80198bc:	08019917 	.word	0x08019917
 80198c0:	080198d5 	.word	0x080198d5
 80198c4:	080198e5 	.word	0x080198e5
 80198c8:	080198f5 	.word	0x080198f5
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 80198cc:	f641 6384 	movw	r3, #7812	; 0x1e84
 80198d0:	60fb      	str	r3, [r7, #12]
        break;
 80198d2:	e020      	b.n	8019916 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 80198d4:	f642 03b1 	movw	r3, #10417	; 0x28b1
 80198d8:	60fb      	str	r3, [r7, #12]
        break;
 80198da:	e01c      	b.n	8019916 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 80198dc:	f643 5309 	movw	r3, #15625	; 0x3d09
 80198e0:	60fb      	str	r3, [r7, #12]
        break;
 80198e2:	e018      	b.n	8019916 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 80198e4:	f245 1361 	movw	r3, #20833	; 0x5161
 80198e8:	60fb      	str	r3, [r7, #12]
        break;
 80198ea:	e014      	b.n	8019916 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 80198ec:	f647 2312 	movw	r3, #31250	; 0x7a12
 80198f0:	60fb      	str	r3, [r7, #12]
        break;
 80198f2:	e010      	b.n	8019916 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 80198f4:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 80198f8:	60fb      	str	r3, [r7, #12]
        break;
 80198fa:	e00c      	b.n	8019916 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 80198fc:	f24f 4324 	movw	r3, #62500	; 0xf424
 8019900:	60fb      	str	r3, [r7, #12]
        break;
 8019902:	e008      	b.n	8019916 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8019904:	4b07      	ldr	r3, [pc, #28]	; (8019924 <RadioGetLoRaBandwidthInHz+0xa0>)
 8019906:	60fb      	str	r3, [r7, #12]
        break;
 8019908:	e005      	b.n	8019916 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 801990a:	4b07      	ldr	r3, [pc, #28]	; (8019928 <RadioGetLoRaBandwidthInHz+0xa4>)
 801990c:	60fb      	str	r3, [r7, #12]
        break;
 801990e:	e002      	b.n	8019916 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8019910:	4b06      	ldr	r3, [pc, #24]	; (801992c <RadioGetLoRaBandwidthInHz+0xa8>)
 8019912:	60fb      	str	r3, [r7, #12]
        break;
 8019914:	bf00      	nop
    }

    return bandwidthInHz;
 8019916:	68fb      	ldr	r3, [r7, #12]
}
 8019918:	4618      	mov	r0, r3
 801991a:	3714      	adds	r7, #20
 801991c:	46bd      	mov	sp, r7
 801991e:	bc80      	pop	{r7}
 8019920:	4770      	bx	lr
 8019922:	bf00      	nop
 8019924:	0001e848 	.word	0x0001e848
 8019928:	0003d090 	.word	0x0003d090
 801992c:	0007a120 	.word	0x0007a120

08019930 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8019930:	b480      	push	{r7}
 8019932:	b083      	sub	sp, #12
 8019934:	af00      	add	r7, sp, #0
 8019936:	6078      	str	r0, [r7, #4]
 8019938:	4608      	mov	r0, r1
 801993a:	4611      	mov	r1, r2
 801993c:	461a      	mov	r2, r3
 801993e:	4603      	mov	r3, r0
 8019940:	70fb      	strb	r3, [r7, #3]
 8019942:	460b      	mov	r3, r1
 8019944:	803b      	strh	r3, [r7, #0]
 8019946:	4613      	mov	r3, r2
 8019948:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 801994a:	883b      	ldrh	r3, [r7, #0]
 801994c:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801994e:	78ba      	ldrb	r2, [r7, #2]
 8019950:	f082 0201 	eor.w	r2, r2, #1
 8019954:	b2d2      	uxtb	r2, r2
 8019956:	2a00      	cmp	r2, #0
 8019958:	d001      	beq.n	801995e <RadioGetGfskTimeOnAirNumerator+0x2e>
 801995a:	2208      	movs	r2, #8
 801995c:	e000      	b.n	8019960 <RadioGetGfskTimeOnAirNumerator+0x30>
 801995e:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8019960:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8019962:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8019966:	7c3b      	ldrb	r3, [r7, #16]
 8019968:	7d39      	ldrb	r1, [r7, #20]
 801996a:	2900      	cmp	r1, #0
 801996c:	d001      	beq.n	8019972 <RadioGetGfskTimeOnAirNumerator+0x42>
 801996e:	2102      	movs	r1, #2
 8019970:	e000      	b.n	8019974 <RadioGetGfskTimeOnAirNumerator+0x44>
 8019972:	2100      	movs	r1, #0
 8019974:	440b      	add	r3, r1
 8019976:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8019978:	4413      	add	r3, r2
}
 801997a:	4618      	mov	r0, r3
 801997c:	370c      	adds	r7, #12
 801997e:	46bd      	mov	sp, r7
 8019980:	bc80      	pop	{r7}
 8019982:	4770      	bx	lr

08019984 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8019984:	b480      	push	{r7}
 8019986:	b08b      	sub	sp, #44	; 0x2c
 8019988:	af00      	add	r7, sp, #0
 801998a:	60f8      	str	r0, [r7, #12]
 801998c:	60b9      	str	r1, [r7, #8]
 801998e:	4611      	mov	r1, r2
 8019990:	461a      	mov	r2, r3
 8019992:	460b      	mov	r3, r1
 8019994:	71fb      	strb	r3, [r7, #7]
 8019996:	4613      	mov	r3, r2
 8019998:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 801999a:	79fb      	ldrb	r3, [r7, #7]
 801999c:	3304      	adds	r3, #4
 801999e:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 80199a0:	2300      	movs	r3, #0
 80199a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 80199a6:	68bb      	ldr	r3, [r7, #8]
 80199a8:	2b05      	cmp	r3, #5
 80199aa:	d002      	beq.n	80199b2 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 80199ac:	68bb      	ldr	r3, [r7, #8]
 80199ae:	2b06      	cmp	r3, #6
 80199b0:	d104      	bne.n	80199bc <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 80199b2:	88bb      	ldrh	r3, [r7, #4]
 80199b4:	2b0b      	cmp	r3, #11
 80199b6:	d801      	bhi.n	80199bc <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 80199b8:	230c      	movs	r3, #12
 80199ba:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80199bc:	68fb      	ldr	r3, [r7, #12]
 80199be:	2b00      	cmp	r3, #0
 80199c0:	d105      	bne.n	80199ce <RadioGetLoRaTimeOnAirNumerator+0x4a>
 80199c2:	68bb      	ldr	r3, [r7, #8]
 80199c4:	2b0b      	cmp	r3, #11
 80199c6:	d008      	beq.n	80199da <RadioGetLoRaTimeOnAirNumerator+0x56>
 80199c8:	68bb      	ldr	r3, [r7, #8]
 80199ca:	2b0c      	cmp	r3, #12
 80199cc:	d005      	beq.n	80199da <RadioGetLoRaTimeOnAirNumerator+0x56>
 80199ce:	68fb      	ldr	r3, [r7, #12]
 80199d0:	2b01      	cmp	r3, #1
 80199d2:	d105      	bne.n	80199e0 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80199d4:	68bb      	ldr	r3, [r7, #8]
 80199d6:	2b0c      	cmp	r3, #12
 80199d8:	d102      	bne.n	80199e0 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 80199da:	2301      	movs	r3, #1
 80199dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80199e0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80199e4:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 80199e6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80199ea:	2a00      	cmp	r2, #0
 80199ec:	d001      	beq.n	80199f2 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 80199ee:	2210      	movs	r2, #16
 80199f0:	e000      	b.n	80199f4 <RadioGetLoRaTimeOnAirNumerator+0x70>
 80199f2:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80199f4:	4413      	add	r3, r2
 80199f6:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 80199f8:	68bb      	ldr	r3, [r7, #8]
 80199fa:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 80199fc:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 80199fe:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8019a02:	2a00      	cmp	r2, #0
 8019a04:	d001      	beq.n	8019a0a <RadioGetLoRaTimeOnAirNumerator+0x86>
 8019a06:	2200      	movs	r2, #0
 8019a08:	e000      	b.n	8019a0c <RadioGetLoRaTimeOnAirNumerator+0x88>
 8019a0a:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8019a0c:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8019a0e:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8019a10:	68bb      	ldr	r3, [r7, #8]
 8019a12:	2b06      	cmp	r3, #6
 8019a14:	d803      	bhi.n	8019a1e <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8019a16:	68bb      	ldr	r3, [r7, #8]
 8019a18:	009b      	lsls	r3, r3, #2
 8019a1a:	623b      	str	r3, [r7, #32]
 8019a1c:	e00e      	b.n	8019a3c <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8019a1e:	69fb      	ldr	r3, [r7, #28]
 8019a20:	3308      	adds	r3, #8
 8019a22:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8019a24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019a28:	2b00      	cmp	r3, #0
 8019a2a:	d004      	beq.n	8019a36 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8019a2c:	68bb      	ldr	r3, [r7, #8]
 8019a2e:	3b02      	subs	r3, #2
 8019a30:	009b      	lsls	r3, r3, #2
 8019a32:	623b      	str	r3, [r7, #32]
 8019a34:	e002      	b.n	8019a3c <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8019a36:	68bb      	ldr	r3, [r7, #8]
 8019a38:	009b      	lsls	r3, r3, #2
 8019a3a:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8019a3c:	69fb      	ldr	r3, [r7, #28]
 8019a3e:	2b00      	cmp	r3, #0
 8019a40:	da01      	bge.n	8019a46 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8019a42:	2300      	movs	r3, #0
 8019a44:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8019a46:	69fa      	ldr	r2, [r7, #28]
 8019a48:	6a3b      	ldr	r3, [r7, #32]
 8019a4a:	4413      	add	r3, r2
 8019a4c:	1e5a      	subs	r2, r3, #1
 8019a4e:	6a3b      	ldr	r3, [r7, #32]
 8019a50:	fb92 f3f3 	sdiv	r3, r2, r3
 8019a54:	697a      	ldr	r2, [r7, #20]
 8019a56:	fb03 f202 	mul.w	r2, r3, r2
 8019a5a:	88bb      	ldrh	r3, [r7, #4]
 8019a5c:	4413      	add	r3, r2
    int32_t intermediate =
 8019a5e:	330c      	adds	r3, #12
 8019a60:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8019a62:	68bb      	ldr	r3, [r7, #8]
 8019a64:	2b06      	cmp	r3, #6
 8019a66:	d802      	bhi.n	8019a6e <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8019a68:	69bb      	ldr	r3, [r7, #24]
 8019a6a:	3302      	adds	r3, #2
 8019a6c:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8019a6e:	69bb      	ldr	r3, [r7, #24]
 8019a70:	009b      	lsls	r3, r3, #2
 8019a72:	1c5a      	adds	r2, r3, #1
 8019a74:	68bb      	ldr	r3, [r7, #8]
 8019a76:	3b02      	subs	r3, #2
 8019a78:	fa02 f303 	lsl.w	r3, r2, r3
}
 8019a7c:	4618      	mov	r0, r3
 8019a7e:	372c      	adds	r7, #44	; 0x2c
 8019a80:	46bd      	mov	sp, r7
 8019a82:	bc80      	pop	{r7}
 8019a84:	4770      	bx	lr
	...

08019a88 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8019a88:	b580      	push	{r7, lr}
 8019a8a:	b08a      	sub	sp, #40	; 0x28
 8019a8c:	af04      	add	r7, sp, #16
 8019a8e:	60b9      	str	r1, [r7, #8]
 8019a90:	607a      	str	r2, [r7, #4]
 8019a92:	461a      	mov	r2, r3
 8019a94:	4603      	mov	r3, r0
 8019a96:	73fb      	strb	r3, [r7, #15]
 8019a98:	4613      	mov	r3, r2
 8019a9a:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8019a9c:	2300      	movs	r3, #0
 8019a9e:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8019aa0:	2301      	movs	r3, #1
 8019aa2:	613b      	str	r3, [r7, #16]

    switch( modem )
 8019aa4:	7bfb      	ldrb	r3, [r7, #15]
 8019aa6:	2b00      	cmp	r3, #0
 8019aa8:	d002      	beq.n	8019ab0 <RadioTimeOnAir+0x28>
 8019aaa:	2b01      	cmp	r3, #1
 8019aac:	d017      	beq.n	8019ade <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8019aae:	e035      	b.n	8019b1c <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8019ab0:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8019ab4:	8c3a      	ldrh	r2, [r7, #32]
 8019ab6:	7bb9      	ldrb	r1, [r7, #14]
 8019ab8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8019abc:	9301      	str	r3, [sp, #4]
 8019abe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8019ac2:	9300      	str	r3, [sp, #0]
 8019ac4:	4603      	mov	r3, r0
 8019ac6:	6878      	ldr	r0, [r7, #4]
 8019ac8:	f7ff ff32 	bl	8019930 <RadioGetGfskTimeOnAirNumerator>
 8019acc:	4603      	mov	r3, r0
 8019ace:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019ad2:	fb02 f303 	mul.w	r3, r2, r3
 8019ad6:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8019ad8:	687b      	ldr	r3, [r7, #4]
 8019ada:	613b      	str	r3, [r7, #16]
        break;
 8019adc:	e01e      	b.n	8019b1c <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8019ade:	8c39      	ldrh	r1, [r7, #32]
 8019ae0:	7bba      	ldrb	r2, [r7, #14]
 8019ae2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8019ae6:	9302      	str	r3, [sp, #8]
 8019ae8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8019aec:	9301      	str	r3, [sp, #4]
 8019aee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019af2:	9300      	str	r3, [sp, #0]
 8019af4:	460b      	mov	r3, r1
 8019af6:	6879      	ldr	r1, [r7, #4]
 8019af8:	68b8      	ldr	r0, [r7, #8]
 8019afa:	f7ff ff43 	bl	8019984 <RadioGetLoRaTimeOnAirNumerator>
 8019afe:	4603      	mov	r3, r0
 8019b00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019b04:	fb02 f303 	mul.w	r3, r2, r3
 8019b08:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8019b0a:	4a0a      	ldr	r2, [pc, #40]	; (8019b34 <RadioTimeOnAir+0xac>)
 8019b0c:	68bb      	ldr	r3, [r7, #8]
 8019b0e:	4413      	add	r3, r2
 8019b10:	781b      	ldrb	r3, [r3, #0]
 8019b12:	4618      	mov	r0, r3
 8019b14:	f7ff feb6 	bl	8019884 <RadioGetLoRaBandwidthInHz>
 8019b18:	6138      	str	r0, [r7, #16]
        break;
 8019b1a:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8019b1c:	697a      	ldr	r2, [r7, #20]
 8019b1e:	693b      	ldr	r3, [r7, #16]
 8019b20:	4413      	add	r3, r2
 8019b22:	1e5a      	subs	r2, r3, #1
 8019b24:	693b      	ldr	r3, [r7, #16]
 8019b26:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8019b2a:	4618      	mov	r0, r3
 8019b2c:	3718      	adds	r7, #24
 8019b2e:	46bd      	mov	sp, r7
 8019b30:	bd80      	pop	{r7, pc}
 8019b32:	bf00      	nop
 8019b34:	0801eae0 	.word	0x0801eae0

08019b38 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 8019b38:	b580      	push	{r7, lr}
 8019b3a:	b084      	sub	sp, #16
 8019b3c:	af00      	add	r7, sp, #0
 8019b3e:	6078      	str	r0, [r7, #4]
 8019b40:	460b      	mov	r3, r1
 8019b42:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8019b44:	2300      	movs	r3, #0
 8019b46:	2200      	movs	r2, #0
 8019b48:	f240 2101 	movw	r1, #513	; 0x201
 8019b4c:	f240 2001 	movw	r0, #513	; 0x201
 8019b50:	f001 fd66 	bl	801b620 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8019b54:	4b73      	ldr	r3, [pc, #460]	; (8019d24 <RadioSend+0x1ec>)
 8019b56:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019b5a:	2101      	movs	r1, #1
 8019b5c:	4618      	mov	r0, r3
 8019b5e:	f002 fa03 	bl	801bf68 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8019b62:	4b70      	ldr	r3, [pc, #448]	; (8019d24 <RadioSend+0x1ec>)
 8019b64:	781b      	ldrb	r3, [r3, #0]
 8019b66:	2b01      	cmp	r3, #1
 8019b68:	d112      	bne.n	8019b90 <RadioSend+0x58>
 8019b6a:	4b6e      	ldr	r3, [pc, #440]	; (8019d24 <RadioSend+0x1ec>)
 8019b6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8019b70:	2b06      	cmp	r3, #6
 8019b72:	d10d      	bne.n	8019b90 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8019b74:	f640 0089 	movw	r0, #2185	; 0x889
 8019b78:	f002 f916 	bl	801bda8 <SUBGRF_ReadRegister>
 8019b7c:	4603      	mov	r3, r0
 8019b7e:	f023 0304 	bic.w	r3, r3, #4
 8019b82:	b2db      	uxtb	r3, r3
 8019b84:	4619      	mov	r1, r3
 8019b86:	f640 0089 	movw	r0, #2185	; 0x889
 8019b8a:	f002 f8f9 	bl	801bd80 <SUBGRF_WriteRegister>
 8019b8e:	e00c      	b.n	8019baa <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8019b90:	f640 0089 	movw	r0, #2185	; 0x889
 8019b94:	f002 f908 	bl	801bda8 <SUBGRF_ReadRegister>
 8019b98:	4603      	mov	r3, r0
 8019b9a:	f043 0304 	orr.w	r3, r3, #4
 8019b9e:	b2db      	uxtb	r3, r3
 8019ba0:	4619      	mov	r1, r3
 8019ba2:	f640 0089 	movw	r0, #2185	; 0x889
 8019ba6:	f002 f8eb 	bl	801bd80 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 8019baa:	4b5e      	ldr	r3, [pc, #376]	; (8019d24 <RadioSend+0x1ec>)
 8019bac:	781b      	ldrb	r3, [r3, #0]
 8019bae:	2b04      	cmp	r3, #4
 8019bb0:	f200 80a8 	bhi.w	8019d04 <RadioSend+0x1cc>
 8019bb4:	a201      	add	r2, pc, #4	; (adr r2, 8019bbc <RadioSend+0x84>)
 8019bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019bba:	bf00      	nop
 8019bbc:	08019beb 	.word	0x08019beb
 8019bc0:	08019bd1 	.word	0x08019bd1
 8019bc4:	08019beb 	.word	0x08019beb
 8019bc8:	08019c4d 	.word	0x08019c4d
 8019bcc:	08019c6d 	.word	0x08019c6d
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8019bd0:	4a54      	ldr	r2, [pc, #336]	; (8019d24 <RadioSend+0x1ec>)
 8019bd2:	78fb      	ldrb	r3, [r7, #3]
 8019bd4:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019bd6:	4854      	ldr	r0, [pc, #336]	; (8019d28 <RadioSend+0x1f0>)
 8019bd8:	f001 ff8a 	bl	801baf0 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8019bdc:	78fb      	ldrb	r3, [r7, #3]
 8019bde:	2200      	movs	r2, #0
 8019be0:	4619      	mov	r1, r3
 8019be2:	6878      	ldr	r0, [r7, #4]
 8019be4:	f001 fa3a 	bl	801b05c <SUBGRF_SendPayload>
            break;
 8019be8:	e08d      	b.n	8019d06 <RadioSend+0x1ce>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8019bea:	f002 fbb6 	bl	801c35a <RFW_Is_Init>
 8019bee:	4603      	mov	r3, r0
 8019bf0:	2b01      	cmp	r3, #1
 8019bf2:	d11e      	bne.n	8019c32 <RadioSend+0xfa>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8019bf4:	f107 020d 	add.w	r2, r7, #13
 8019bf8:	78fb      	ldrb	r3, [r7, #3]
 8019bfa:	4619      	mov	r1, r3
 8019bfc:	6878      	ldr	r0, [r7, #4]
 8019bfe:	f002 fbc4 	bl	801c38a <RFW_TransmitInit>
 8019c02:	4603      	mov	r3, r0
 8019c04:	2b00      	cmp	r3, #0
 8019c06:	d10c      	bne.n	8019c22 <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8019c08:	7b7a      	ldrb	r2, [r7, #13]
 8019c0a:	4b46      	ldr	r3, [pc, #280]	; (8019d24 <RadioSend+0x1ec>)
 8019c0c:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019c0e:	4846      	ldr	r0, [pc, #280]	; (8019d28 <RadioSend+0x1f0>)
 8019c10:	f001 ff6e 	bl	801baf0 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 8019c14:	7b7b      	ldrb	r3, [r7, #13]
 8019c16:	2200      	movs	r2, #0
 8019c18:	4619      	mov	r1, r3
 8019c1a:	6878      	ldr	r0, [r7, #4]
 8019c1c:	f001 fa1e 	bl	801b05c <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8019c20:	e071      	b.n	8019d06 <RadioSend+0x1ce>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 8019c22:	4b42      	ldr	r3, [pc, #264]	; (8019d2c <RadioSend+0x1f4>)
 8019c24:	2201      	movs	r2, #1
 8019c26:	2100      	movs	r1, #0
 8019c28:	2002      	movs	r0, #2
 8019c2a:	f003 fccf 	bl	801d5cc <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 8019c2e:	2303      	movs	r3, #3
 8019c30:	e073      	b.n	8019d1a <RadioSend+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8019c32:	4a3c      	ldr	r2, [pc, #240]	; (8019d24 <RadioSend+0x1ec>)
 8019c34:	78fb      	ldrb	r3, [r7, #3]
 8019c36:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019c38:	483b      	ldr	r0, [pc, #236]	; (8019d28 <RadioSend+0x1f0>)
 8019c3a:	f001 ff59 	bl	801baf0 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 8019c3e:	78fb      	ldrb	r3, [r7, #3]
 8019c40:	2200      	movs	r2, #0
 8019c42:	4619      	mov	r1, r3
 8019c44:	6878      	ldr	r0, [r7, #4]
 8019c46:	f001 fa09 	bl	801b05c <SUBGRF_SendPayload>
            break;
 8019c4a:	e05c      	b.n	8019d06 <RadioSend+0x1ce>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8019c4c:	4b35      	ldr	r3, [pc, #212]	; (8019d24 <RadioSend+0x1ec>)
 8019c4e:	2202      	movs	r2, #2
 8019c50:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8019c52:	4a34      	ldr	r2, [pc, #208]	; (8019d24 <RadioSend+0x1ec>)
 8019c54:	78fb      	ldrb	r3, [r7, #3]
 8019c56:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019c58:	4833      	ldr	r0, [pc, #204]	; (8019d28 <RadioSend+0x1f0>)
 8019c5a:	f001 ff49 	bl	801baf0 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8019c5e:	78fb      	ldrb	r3, [r7, #3]
 8019c60:	2200      	movs	r2, #0
 8019c62:	4619      	mov	r1, r3
 8019c64:	6878      	ldr	r0, [r7, #4]
 8019c66:	f001 f9f9 	bl	801b05c <SUBGRF_SendPayload>
            break;
 8019c6a:	e04c      	b.n	8019d06 <RadioSend+0x1ce>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8019c6c:	78fb      	ldrb	r3, [r7, #3]
 8019c6e:	461a      	mov	r2, r3
 8019c70:	6879      	ldr	r1, [r7, #4]
 8019c72:	482f      	ldr	r0, [pc, #188]	; (8019d30 <RadioSend+0x1f8>)
 8019c74:	f000 fccc 	bl	801a610 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8019c78:	4b2a      	ldr	r3, [pc, #168]	; (8019d24 <RadioSend+0x1ec>)
 8019c7a:	2202      	movs	r2, #2
 8019c7c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8019c7e:	78fb      	ldrb	r3, [r7, #3]
 8019c80:	3301      	adds	r3, #1
 8019c82:	b2da      	uxtb	r2, r3
 8019c84:	4b27      	ldr	r3, [pc, #156]	; (8019d24 <RadioSend+0x1ec>)
 8019c86:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019c88:	4827      	ldr	r0, [pc, #156]	; (8019d28 <RadioSend+0x1f0>)
 8019c8a:	f001 ff31 	bl	801baf0 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8019c8e:	2100      	movs	r1, #0
 8019c90:	20f1      	movs	r0, #241	; 0xf1
 8019c92:	f000 f966 	bl	8019f62 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8019c96:	2100      	movs	r1, #0
 8019c98:	20f0      	movs	r0, #240	; 0xf0
 8019c9a:	f000 f962 	bl	8019f62 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8019c9e:	4b21      	ldr	r3, [pc, #132]	; (8019d24 <RadioSend+0x1ec>)
 8019ca0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019ca2:	2b64      	cmp	r3, #100	; 0x64
 8019ca4:	d108      	bne.n	8019cb8 <RadioSend+0x180>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8019ca6:	2170      	movs	r1, #112	; 0x70
 8019ca8:	20f3      	movs	r0, #243	; 0xf3
 8019caa:	f000 f95a 	bl	8019f62 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8019cae:	211d      	movs	r1, #29
 8019cb0:	20f2      	movs	r0, #242	; 0xf2
 8019cb2:	f000 f956 	bl	8019f62 <RadioWrite>
 8019cb6:	e007      	b.n	8019cc8 <RadioSend+0x190>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8019cb8:	21e1      	movs	r1, #225	; 0xe1
 8019cba:	20f3      	movs	r0, #243	; 0xf3
 8019cbc:	f000 f951 	bl	8019f62 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8019cc0:	2104      	movs	r1, #4
 8019cc2:	20f2      	movs	r0, #242	; 0xf2
 8019cc4:	f000 f94d 	bl	8019f62 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8019cc8:	78fb      	ldrb	r3, [r7, #3]
 8019cca:	b29b      	uxth	r3, r3
 8019ccc:	00db      	lsls	r3, r3, #3
 8019cce:	b29b      	uxth	r3, r3
 8019cd0:	3302      	adds	r3, #2
 8019cd2:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8019cd4:	89fb      	ldrh	r3, [r7, #14]
 8019cd6:	0a1b      	lsrs	r3, r3, #8
 8019cd8:	b29b      	uxth	r3, r3
 8019cda:	b2db      	uxtb	r3, r3
 8019cdc:	4619      	mov	r1, r3
 8019cde:	20f4      	movs	r0, #244	; 0xf4
 8019ce0:	f000 f93f 	bl	8019f62 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8019ce4:	89fb      	ldrh	r3, [r7, #14]
 8019ce6:	b2db      	uxtb	r3, r3
 8019ce8:	4619      	mov	r1, r3
 8019cea:	20f5      	movs	r0, #245	; 0xf5
 8019cec:	f000 f939 	bl	8019f62 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 8019cf0:	78fb      	ldrb	r3, [r7, #3]
 8019cf2:	3301      	adds	r3, #1
 8019cf4:	b2db      	uxtb	r3, r3
 8019cf6:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8019cfa:	4619      	mov	r1, r3
 8019cfc:	480c      	ldr	r0, [pc, #48]	; (8019d30 <RadioSend+0x1f8>)
 8019cfe:	f001 f9ad 	bl	801b05c <SUBGRF_SendPayload>
            break;
 8019d02:	e000      	b.n	8019d06 <RadioSend+0x1ce>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8019d04:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8019d06:	4b07      	ldr	r3, [pc, #28]	; (8019d24 <RadioSend+0x1ec>)
 8019d08:	685b      	ldr	r3, [r3, #4]
 8019d0a:	4619      	mov	r1, r3
 8019d0c:	4809      	ldr	r0, [pc, #36]	; (8019d34 <RadioSend+0x1fc>)
 8019d0e:	f003 fac3 	bl	801d298 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 8019d12:	4808      	ldr	r0, [pc, #32]	; (8019d34 <RadioSend+0x1fc>)
 8019d14:	f003 f9e2 	bl	801d0dc <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 8019d18:	2300      	movs	r3, #0
}
 8019d1a:	4618      	mov	r0, r3
 8019d1c:	3710      	adds	r7, #16
 8019d1e:	46bd      	mov	sp, r7
 8019d20:	bd80      	pop	{r7, pc}
 8019d22:	bf00      	nop
 8019d24:	20001be8 	.word	0x20001be8
 8019d28:	20001bf6 	.word	0x20001bf6
 8019d2c:	0801e3fc 	.word	0x0801e3fc
 8019d30:	20001ae4 	.word	0x20001ae4
 8019d34:	20001c44 	.word	0x20001c44

08019d38 <RadioSleep>:

static void RadioSleep( void )
{
 8019d38:	b580      	push	{r7, lr}
 8019d3a:	b082      	sub	sp, #8
 8019d3c:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8019d3e:	2300      	movs	r3, #0
 8019d40:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8019d42:	793b      	ldrb	r3, [r7, #4]
 8019d44:	f043 0304 	orr.w	r3, r3, #4
 8019d48:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8019d4a:	7938      	ldrb	r0, [r7, #4]
 8019d4c:	f001 fa62 	bl	801b214 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8019d50:	2002      	movs	r0, #2
 8019d52:	f7e8 fa57 	bl	8002204 <HAL_Delay>
}
 8019d56:	bf00      	nop
 8019d58:	3708      	adds	r7, #8
 8019d5a:	46bd      	mov	sp, r7
 8019d5c:	bd80      	pop	{r7, pc}

08019d5e <RadioStandby>:

static void RadioStandby( void )
{
 8019d5e:	b580      	push	{r7, lr}
 8019d60:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8019d62:	2000      	movs	r0, #0
 8019d64:	f001 fa88 	bl	801b278 <SUBGRF_SetStandby>
}
 8019d68:	bf00      	nop
 8019d6a:	bd80      	pop	{r7, pc}

08019d6c <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8019d6c:	b580      	push	{r7, lr}
 8019d6e:	b082      	sub	sp, #8
 8019d70:	af00      	add	r7, sp, #0
 8019d72:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 8019d74:	f002 faf1 	bl	801c35a <RFW_Is_Init>
 8019d78:	4603      	mov	r3, r0
 8019d7a:	2b01      	cmp	r3, #1
 8019d7c:	d102      	bne.n	8019d84 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 8019d7e:	f002 fb14 	bl	801c3aa <RFW_ReceiveInit>
 8019d82:	e007      	b.n	8019d94 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8019d84:	2300      	movs	r3, #0
 8019d86:	2200      	movs	r2, #0
 8019d88:	f240 2162 	movw	r1, #610	; 0x262
 8019d8c:	f240 2062 	movw	r0, #610	; 0x262
 8019d90:	f001 fc46 	bl	801b620 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8019d94:	687b      	ldr	r3, [r7, #4]
 8019d96:	2b00      	cmp	r3, #0
 8019d98:	d006      	beq.n	8019da8 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8019d9a:	6879      	ldr	r1, [r7, #4]
 8019d9c:	4811      	ldr	r0, [pc, #68]	; (8019de4 <RadioRx+0x78>)
 8019d9e:	f003 fa7b 	bl	801d298 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8019da2:	4810      	ldr	r0, [pc, #64]	; (8019de4 <RadioRx+0x78>)
 8019da4:	f003 f99a 	bl	801d0dc <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8019da8:	4b0f      	ldr	r3, [pc, #60]	; (8019de8 <RadioRx+0x7c>)
 8019daa:	2200      	movs	r2, #0
 8019dac:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8019dae:	4b0e      	ldr	r3, [pc, #56]	; (8019de8 <RadioRx+0x7c>)
 8019db0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019db4:	2100      	movs	r1, #0
 8019db6:	4618      	mov	r0, r3
 8019db8:	f002 f8d6 	bl	801bf68 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8019dbc:	4b0a      	ldr	r3, [pc, #40]	; (8019de8 <RadioRx+0x7c>)
 8019dbe:	785b      	ldrb	r3, [r3, #1]
 8019dc0:	2b00      	cmp	r3, #0
 8019dc2:	d004      	beq.n	8019dce <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8019dc4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8019dc8:	f001 fa92 	bl	801b2f0 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8019dcc:	e005      	b.n	8019dda <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8019dce:	4b06      	ldr	r3, [pc, #24]	; (8019de8 <RadioRx+0x7c>)
 8019dd0:	689b      	ldr	r3, [r3, #8]
 8019dd2:	019b      	lsls	r3, r3, #6
 8019dd4:	4618      	mov	r0, r3
 8019dd6:	f001 fa8b 	bl	801b2f0 <SUBGRF_SetRx>
}
 8019dda:	bf00      	nop
 8019ddc:	3708      	adds	r7, #8
 8019dde:	46bd      	mov	sp, r7
 8019de0:	bd80      	pop	{r7, pc}
 8019de2:	bf00      	nop
 8019de4:	20001c5c 	.word	0x20001c5c
 8019de8:	20001be8 	.word	0x20001be8

08019dec <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8019dec:	b580      	push	{r7, lr}
 8019dee:	b082      	sub	sp, #8
 8019df0:	af00      	add	r7, sp, #0
 8019df2:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 8019df4:	f002 fab1 	bl	801c35a <RFW_Is_Init>
 8019df8:	4603      	mov	r3, r0
 8019dfa:	2b01      	cmp	r3, #1
 8019dfc:	d102      	bne.n	8019e04 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 8019dfe:	f002 fad4 	bl	801c3aa <RFW_ReceiveInit>
 8019e02:	e007      	b.n	8019e14 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8019e04:	2300      	movs	r3, #0
 8019e06:	2200      	movs	r2, #0
 8019e08:	f240 2162 	movw	r1, #610	; 0x262
 8019e0c:	f240 2062 	movw	r0, #610	; 0x262
 8019e10:	f001 fc06 	bl	801b620 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8019e14:	687b      	ldr	r3, [r7, #4]
 8019e16:	2b00      	cmp	r3, #0
 8019e18:	d006      	beq.n	8019e28 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8019e1a:	6879      	ldr	r1, [r7, #4]
 8019e1c:	4811      	ldr	r0, [pc, #68]	; (8019e64 <RadioRxBoosted+0x78>)
 8019e1e:	f003 fa3b 	bl	801d298 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8019e22:	4810      	ldr	r0, [pc, #64]	; (8019e64 <RadioRxBoosted+0x78>)
 8019e24:	f003 f95a 	bl	801d0dc <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8019e28:	4b0f      	ldr	r3, [pc, #60]	; (8019e68 <RadioRxBoosted+0x7c>)
 8019e2a:	2200      	movs	r2, #0
 8019e2c:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8019e2e:	4b0e      	ldr	r3, [pc, #56]	; (8019e68 <RadioRxBoosted+0x7c>)
 8019e30:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019e34:	2100      	movs	r1, #0
 8019e36:	4618      	mov	r0, r3
 8019e38:	f002 f896 	bl	801bf68 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8019e3c:	4b0a      	ldr	r3, [pc, #40]	; (8019e68 <RadioRxBoosted+0x7c>)
 8019e3e:	785b      	ldrb	r3, [r3, #1]
 8019e40:	2b00      	cmp	r3, #0
 8019e42:	d004      	beq.n	8019e4e <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8019e44:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8019e48:	f001 fa72 	bl	801b330 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8019e4c:	e005      	b.n	8019e5a <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8019e4e:	4b06      	ldr	r3, [pc, #24]	; (8019e68 <RadioRxBoosted+0x7c>)
 8019e50:	689b      	ldr	r3, [r3, #8]
 8019e52:	019b      	lsls	r3, r3, #6
 8019e54:	4618      	mov	r0, r3
 8019e56:	f001 fa6b 	bl	801b330 <SUBGRF_SetRxBoosted>
}
 8019e5a:	bf00      	nop
 8019e5c:	3708      	adds	r7, #8
 8019e5e:	46bd      	mov	sp, r7
 8019e60:	bd80      	pop	{r7, pc}
 8019e62:	bf00      	nop
 8019e64:	20001c5c 	.word	0x20001c5c
 8019e68:	20001be8 	.word	0x20001be8

08019e6c <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8019e6c:	b580      	push	{r7, lr}
 8019e6e:	b082      	sub	sp, #8
 8019e70:	af00      	add	r7, sp, #0
 8019e72:	6078      	str	r0, [r7, #4]
 8019e74:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8019e76:	687b      	ldr	r3, [r7, #4]
 8019e78:	005a      	lsls	r2, r3, #1
 8019e7a:	683b      	ldr	r3, [r7, #0]
 8019e7c:	4413      	add	r3, r2
 8019e7e:	4a0c      	ldr	r2, [pc, #48]	; (8019eb0 <RadioSetRxDutyCycle+0x44>)
 8019e80:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8019e82:	2300      	movs	r3, #0
 8019e84:	2200      	movs	r2, #0
 8019e86:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8019e8a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8019e8e:	f001 fbc7 	bl	801b620 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8019e92:	4b07      	ldr	r3, [pc, #28]	; (8019eb0 <RadioSetRxDutyCycle+0x44>)
 8019e94:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019e98:	2100      	movs	r1, #0
 8019e9a:	4618      	mov	r0, r3
 8019e9c:	f002 f864 	bl	801bf68 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8019ea0:	6839      	ldr	r1, [r7, #0]
 8019ea2:	6878      	ldr	r0, [r7, #4]
 8019ea4:	f001 fa68 	bl	801b378 <SUBGRF_SetRxDutyCycle>
}
 8019ea8:	bf00      	nop
 8019eaa:	3708      	adds	r7, #8
 8019eac:	46bd      	mov	sp, r7
 8019eae:	bd80      	pop	{r7, pc}
 8019eb0:	20001be8 	.word	0x20001be8

08019eb4 <RadioStartCad>:

static void RadioStartCad( void )
{
 8019eb4:	b580      	push	{r7, lr}
 8019eb6:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8019eb8:	4b09      	ldr	r3, [pc, #36]	; (8019ee0 <RadioStartCad+0x2c>)
 8019eba:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019ebe:	2100      	movs	r1, #0
 8019ec0:	4618      	mov	r0, r3
 8019ec2:	f002 f851 	bl	801bf68 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8019ec6:	2300      	movs	r3, #0
 8019ec8:	2200      	movs	r2, #0
 8019eca:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8019ece:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8019ed2:	f001 fba5 	bl	801b620 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8019ed6:	f001 fa7b 	bl	801b3d0 <SUBGRF_SetCad>
}
 8019eda:	bf00      	nop
 8019edc:	bd80      	pop	{r7, pc}
 8019ede:	bf00      	nop
 8019ee0:	20001be8 	.word	0x20001be8

08019ee4 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8019ee4:	b580      	push	{r7, lr}
 8019ee6:	b084      	sub	sp, #16
 8019ee8:	af00      	add	r7, sp, #0
 8019eea:	6078      	str	r0, [r7, #4]
 8019eec:	460b      	mov	r3, r1
 8019eee:	70fb      	strb	r3, [r7, #3]
 8019ef0:	4613      	mov	r3, r2
 8019ef2:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 8019ef4:	883b      	ldrh	r3, [r7, #0]
 8019ef6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019efa:	fb02 f303 	mul.w	r3, r2, r3
 8019efe:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8019f00:	6878      	ldr	r0, [r7, #4]
 8019f02:	f001 fbe9 	bl	801b6d8 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8019f06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019f0a:	4618      	mov	r0, r3
 8019f0c:	f002 f854 	bl	801bfb8 <SUBGRF_SetRfTxPower>
 8019f10:	4603      	mov	r3, r0
 8019f12:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8019f14:	210e      	movs	r1, #14
 8019f16:	f640 101f 	movw	r0, #2335	; 0x91f
 8019f1a:	f001 ff31 	bl	801bd80 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8019f1e:	7afb      	ldrb	r3, [r7, #11]
 8019f20:	2101      	movs	r1, #1
 8019f22:	4618      	mov	r0, r3
 8019f24:	f002 f820 	bl	801bf68 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8019f28:	f001 fa60 	bl	801b3ec <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8019f2c:	68f9      	ldr	r1, [r7, #12]
 8019f2e:	4805      	ldr	r0, [pc, #20]	; (8019f44 <RadioSetTxContinuousWave+0x60>)
 8019f30:	f003 f9b2 	bl	801d298 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8019f34:	4803      	ldr	r0, [pc, #12]	; (8019f44 <RadioSetTxContinuousWave+0x60>)
 8019f36:	f003 f8d1 	bl	801d0dc <UTIL_TIMER_Start>
}
 8019f3a:	bf00      	nop
 8019f3c:	3710      	adds	r7, #16
 8019f3e:	46bd      	mov	sp, r7
 8019f40:	bd80      	pop	{r7, pc}
 8019f42:	bf00      	nop
 8019f44:	20001c44 	.word	0x20001c44

08019f48 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8019f48:	b580      	push	{r7, lr}
 8019f4a:	b082      	sub	sp, #8
 8019f4c:	af00      	add	r7, sp, #0
 8019f4e:	4603      	mov	r3, r0
 8019f50:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8019f52:	f001 fe82 	bl	801bc5a <SUBGRF_GetRssiInst>
 8019f56:	4603      	mov	r3, r0
 8019f58:	b21b      	sxth	r3, r3
}
 8019f5a:	4618      	mov	r0, r3
 8019f5c:	3708      	adds	r7, #8
 8019f5e:	46bd      	mov	sp, r7
 8019f60:	bd80      	pop	{r7, pc}

08019f62 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8019f62:	b580      	push	{r7, lr}
 8019f64:	b082      	sub	sp, #8
 8019f66:	af00      	add	r7, sp, #0
 8019f68:	4603      	mov	r3, r0
 8019f6a:	460a      	mov	r2, r1
 8019f6c:	80fb      	strh	r3, [r7, #6]
 8019f6e:	4613      	mov	r3, r2
 8019f70:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8019f72:	797a      	ldrb	r2, [r7, #5]
 8019f74:	88fb      	ldrh	r3, [r7, #6]
 8019f76:	4611      	mov	r1, r2
 8019f78:	4618      	mov	r0, r3
 8019f7a:	f001 ff01 	bl	801bd80 <SUBGRF_WriteRegister>
}
 8019f7e:	bf00      	nop
 8019f80:	3708      	adds	r7, #8
 8019f82:	46bd      	mov	sp, r7
 8019f84:	bd80      	pop	{r7, pc}

08019f86 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8019f86:	b580      	push	{r7, lr}
 8019f88:	b082      	sub	sp, #8
 8019f8a:	af00      	add	r7, sp, #0
 8019f8c:	4603      	mov	r3, r0
 8019f8e:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8019f90:	88fb      	ldrh	r3, [r7, #6]
 8019f92:	4618      	mov	r0, r3
 8019f94:	f001 ff08 	bl	801bda8 <SUBGRF_ReadRegister>
 8019f98:	4603      	mov	r3, r0
}
 8019f9a:	4618      	mov	r0, r3
 8019f9c:	3708      	adds	r7, #8
 8019f9e:	46bd      	mov	sp, r7
 8019fa0:	bd80      	pop	{r7, pc}

08019fa2 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8019fa2:	b580      	push	{r7, lr}
 8019fa4:	b082      	sub	sp, #8
 8019fa6:	af00      	add	r7, sp, #0
 8019fa8:	4603      	mov	r3, r0
 8019faa:	6039      	str	r1, [r7, #0]
 8019fac:	80fb      	strh	r3, [r7, #6]
 8019fae:	4613      	mov	r3, r2
 8019fb0:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8019fb2:	797b      	ldrb	r3, [r7, #5]
 8019fb4:	b29a      	uxth	r2, r3
 8019fb6:	88fb      	ldrh	r3, [r7, #6]
 8019fb8:	6839      	ldr	r1, [r7, #0]
 8019fba:	4618      	mov	r0, r3
 8019fbc:	f001 ff08 	bl	801bdd0 <SUBGRF_WriteRegisters>
}
 8019fc0:	bf00      	nop
 8019fc2:	3708      	adds	r7, #8
 8019fc4:	46bd      	mov	sp, r7
 8019fc6:	bd80      	pop	{r7, pc}

08019fc8 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8019fc8:	b580      	push	{r7, lr}
 8019fca:	b082      	sub	sp, #8
 8019fcc:	af00      	add	r7, sp, #0
 8019fce:	4603      	mov	r3, r0
 8019fd0:	6039      	str	r1, [r7, #0]
 8019fd2:	80fb      	strh	r3, [r7, #6]
 8019fd4:	4613      	mov	r3, r2
 8019fd6:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8019fd8:	797b      	ldrb	r3, [r7, #5]
 8019fda:	b29a      	uxth	r2, r3
 8019fdc:	88fb      	ldrh	r3, [r7, #6]
 8019fde:	6839      	ldr	r1, [r7, #0]
 8019fe0:	4618      	mov	r0, r3
 8019fe2:	f001 ff17 	bl	801be14 <SUBGRF_ReadRegisters>
}
 8019fe6:	bf00      	nop
 8019fe8:	3708      	adds	r7, #8
 8019fea:	46bd      	mov	sp, r7
 8019fec:	bd80      	pop	{r7, pc}
	...

08019ff0 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8019ff0:	b580      	push	{r7, lr}
 8019ff2:	b082      	sub	sp, #8
 8019ff4:	af00      	add	r7, sp, #0
 8019ff6:	4603      	mov	r3, r0
 8019ff8:	460a      	mov	r2, r1
 8019ffa:	71fb      	strb	r3, [r7, #7]
 8019ffc:	4613      	mov	r3, r2
 8019ffe:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 801a000:	79fb      	ldrb	r3, [r7, #7]
 801a002:	2b01      	cmp	r3, #1
 801a004:	d10a      	bne.n	801a01c <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 801a006:	4a0e      	ldr	r2, [pc, #56]	; (801a040 <RadioSetMaxPayloadLength+0x50>)
 801a008:	79bb      	ldrb	r3, [r7, #6]
 801a00a:	7013      	strb	r3, [r2, #0]
 801a00c:	4b0c      	ldr	r3, [pc, #48]	; (801a040 <RadioSetMaxPayloadLength+0x50>)
 801a00e:	781a      	ldrb	r2, [r3, #0]
 801a010:	4b0c      	ldr	r3, [pc, #48]	; (801a044 <RadioSetMaxPayloadLength+0x54>)
 801a012:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a014:	480c      	ldr	r0, [pc, #48]	; (801a048 <RadioSetMaxPayloadLength+0x58>)
 801a016:	f001 fd6b 	bl	801baf0 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 801a01a:	e00d      	b.n	801a038 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 801a01c:	4b09      	ldr	r3, [pc, #36]	; (801a044 <RadioSetMaxPayloadLength+0x54>)
 801a01e:	7d5b      	ldrb	r3, [r3, #21]
 801a020:	2b01      	cmp	r3, #1
 801a022:	d109      	bne.n	801a038 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 801a024:	4a06      	ldr	r2, [pc, #24]	; (801a040 <RadioSetMaxPayloadLength+0x50>)
 801a026:	79bb      	ldrb	r3, [r7, #6]
 801a028:	7013      	strb	r3, [r2, #0]
 801a02a:	4b05      	ldr	r3, [pc, #20]	; (801a040 <RadioSetMaxPayloadLength+0x50>)
 801a02c:	781a      	ldrb	r2, [r3, #0]
 801a02e:	4b05      	ldr	r3, [pc, #20]	; (801a044 <RadioSetMaxPayloadLength+0x54>)
 801a030:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a032:	4805      	ldr	r0, [pc, #20]	; (801a048 <RadioSetMaxPayloadLength+0x58>)
 801a034:	f001 fd5c 	bl	801baf0 <SUBGRF_SetPacketParams>
}
 801a038:	bf00      	nop
 801a03a:	3708      	adds	r7, #8
 801a03c:	46bd      	mov	sp, r7
 801a03e:	bd80      	pop	{r7, pc}
 801a040:	20000134 	.word	0x20000134
 801a044:	20001be8 	.word	0x20001be8
 801a048:	20001bf6 	.word	0x20001bf6

0801a04c <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 801a04c:	b580      	push	{r7, lr}
 801a04e:	b082      	sub	sp, #8
 801a050:	af00      	add	r7, sp, #0
 801a052:	4603      	mov	r3, r0
 801a054:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 801a056:	4a13      	ldr	r2, [pc, #76]	; (801a0a4 <RadioSetPublicNetwork+0x58>)
 801a058:	79fb      	ldrb	r3, [r7, #7]
 801a05a:	7313      	strb	r3, [r2, #12]
 801a05c:	4b11      	ldr	r3, [pc, #68]	; (801a0a4 <RadioSetPublicNetwork+0x58>)
 801a05e:	7b1a      	ldrb	r2, [r3, #12]
 801a060:	4b10      	ldr	r3, [pc, #64]	; (801a0a4 <RadioSetPublicNetwork+0x58>)
 801a062:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 801a064:	2001      	movs	r0, #1
 801a066:	f7ff f811 	bl	801908c <RadioSetModem>
    if( enable == true )
 801a06a:	79fb      	ldrb	r3, [r7, #7]
 801a06c:	2b00      	cmp	r3, #0
 801a06e:	d00a      	beq.n	801a086 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 801a070:	2134      	movs	r1, #52	; 0x34
 801a072:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801a076:	f001 fe83 	bl	801bd80 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 801a07a:	2144      	movs	r1, #68	; 0x44
 801a07c:	f240 7041 	movw	r0, #1857	; 0x741
 801a080:	f001 fe7e 	bl	801bd80 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 801a084:	e009      	b.n	801a09a <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 801a086:	2114      	movs	r1, #20
 801a088:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801a08c:	f001 fe78 	bl	801bd80 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 801a090:	2124      	movs	r1, #36	; 0x24
 801a092:	f240 7041 	movw	r0, #1857	; 0x741
 801a096:	f001 fe73 	bl	801bd80 <SUBGRF_WriteRegister>
}
 801a09a:	bf00      	nop
 801a09c:	3708      	adds	r7, #8
 801a09e:	46bd      	mov	sp, r7
 801a0a0:	bd80      	pop	{r7, pc}
 801a0a2:	bf00      	nop
 801a0a4:	20001be8 	.word	0x20001be8

0801a0a8 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 801a0a8:	b580      	push	{r7, lr}
 801a0aa:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 801a0ac:	f001 ffb8 	bl	801c020 <SUBGRF_GetRadioWakeUpTime>
 801a0b0:	4603      	mov	r3, r0
 801a0b2:	3303      	adds	r3, #3
}
 801a0b4:	4618      	mov	r0, r3
 801a0b6:	bd80      	pop	{r7, pc}

0801a0b8 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 801a0b8:	b580      	push	{r7, lr}
 801a0ba:	b082      	sub	sp, #8
 801a0bc:	af00      	add	r7, sp, #0
 801a0be:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 801a0c0:	f000 f80e 	bl	801a0e0 <RadioOnTxTimeoutProcess>
}
 801a0c4:	bf00      	nop
 801a0c6:	3708      	adds	r7, #8
 801a0c8:	46bd      	mov	sp, r7
 801a0ca:	bd80      	pop	{r7, pc}

0801a0cc <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 801a0cc:	b580      	push	{r7, lr}
 801a0ce:	b082      	sub	sp, #8
 801a0d0:	af00      	add	r7, sp, #0
 801a0d2:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 801a0d4:	f000 f818 	bl	801a108 <RadioOnRxTimeoutProcess>
}
 801a0d8:	bf00      	nop
 801a0da:	3708      	adds	r7, #8
 801a0dc:	46bd      	mov	sp, r7
 801a0de:	bd80      	pop	{r7, pc}

0801a0e0 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 801a0e0:	b580      	push	{r7, lr}
 801a0e2:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801a0e4:	4b07      	ldr	r3, [pc, #28]	; (801a104 <RadioOnTxTimeoutProcess+0x24>)
 801a0e6:	681b      	ldr	r3, [r3, #0]
 801a0e8:	2b00      	cmp	r3, #0
 801a0ea:	d008      	beq.n	801a0fe <RadioOnTxTimeoutProcess+0x1e>
 801a0ec:	4b05      	ldr	r3, [pc, #20]	; (801a104 <RadioOnTxTimeoutProcess+0x24>)
 801a0ee:	681b      	ldr	r3, [r3, #0]
 801a0f0:	685b      	ldr	r3, [r3, #4]
 801a0f2:	2b00      	cmp	r3, #0
 801a0f4:	d003      	beq.n	801a0fe <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 801a0f6:	4b03      	ldr	r3, [pc, #12]	; (801a104 <RadioOnTxTimeoutProcess+0x24>)
 801a0f8:	681b      	ldr	r3, [r3, #0]
 801a0fa:	685b      	ldr	r3, [r3, #4]
 801a0fc:	4798      	blx	r3
    }
}
 801a0fe:	bf00      	nop
 801a100:	bd80      	pop	{r7, pc}
 801a102:	bf00      	nop
 801a104:	20001be4 	.word	0x20001be4

0801a108 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 801a108:	b580      	push	{r7, lr}
 801a10a:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801a10c:	4b07      	ldr	r3, [pc, #28]	; (801a12c <RadioOnRxTimeoutProcess+0x24>)
 801a10e:	681b      	ldr	r3, [r3, #0]
 801a110:	2b00      	cmp	r3, #0
 801a112:	d008      	beq.n	801a126 <RadioOnRxTimeoutProcess+0x1e>
 801a114:	4b05      	ldr	r3, [pc, #20]	; (801a12c <RadioOnRxTimeoutProcess+0x24>)
 801a116:	681b      	ldr	r3, [r3, #0]
 801a118:	68db      	ldr	r3, [r3, #12]
 801a11a:	2b00      	cmp	r3, #0
 801a11c:	d003      	beq.n	801a126 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 801a11e:	4b03      	ldr	r3, [pc, #12]	; (801a12c <RadioOnRxTimeoutProcess+0x24>)
 801a120:	681b      	ldr	r3, [r3, #0]
 801a122:	68db      	ldr	r3, [r3, #12]
 801a124:	4798      	blx	r3
    }
}
 801a126:	bf00      	nop
 801a128:	bd80      	pop	{r7, pc}
 801a12a:	bf00      	nop
 801a12c:	20001be4 	.word	0x20001be4

0801a130 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 801a130:	b580      	push	{r7, lr}
 801a132:	b082      	sub	sp, #8
 801a134:	af00      	add	r7, sp, #0
 801a136:	4603      	mov	r3, r0
 801a138:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 801a13a:	4a05      	ldr	r2, [pc, #20]	; (801a150 <RadioOnDioIrq+0x20>)
 801a13c:	88fb      	ldrh	r3, [r7, #6]
 801a13e:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 801a142:	f000 f807 	bl	801a154 <RadioIrqProcess>
}
 801a146:	bf00      	nop
 801a148:	3708      	adds	r7, #8
 801a14a:	46bd      	mov	sp, r7
 801a14c:	bd80      	pop	{r7, pc}
 801a14e:	bf00      	nop
 801a150:	20001be8 	.word	0x20001be8

0801a154 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 801a154:	b5b0      	push	{r4, r5, r7, lr}
 801a156:	b082      	sub	sp, #8
 801a158:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 801a15a:	2300      	movs	r3, #0
 801a15c:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 801a15e:	2300      	movs	r3, #0
 801a160:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 801a162:	4ba8      	ldr	r3, [pc, #672]	; (801a404 <RadioIrqProcess+0x2b0>)
 801a164:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801a168:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a16c:	f000 810d 	beq.w	801a38a <RadioIrqProcess+0x236>
 801a170:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a174:	f300 81e8 	bgt.w	801a548 <RadioIrqProcess+0x3f4>
 801a178:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a17c:	f000 80f1 	beq.w	801a362 <RadioIrqProcess+0x20e>
 801a180:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a184:	f300 81e0 	bgt.w	801a548 <RadioIrqProcess+0x3f4>
 801a188:	2b80      	cmp	r3, #128	; 0x80
 801a18a:	f000 80d6 	beq.w	801a33a <RadioIrqProcess+0x1e6>
 801a18e:	2b80      	cmp	r3, #128	; 0x80
 801a190:	f300 81da 	bgt.w	801a548 <RadioIrqProcess+0x3f4>
 801a194:	2b20      	cmp	r3, #32
 801a196:	dc49      	bgt.n	801a22c <RadioIrqProcess+0xd8>
 801a198:	2b00      	cmp	r3, #0
 801a19a:	f340 81d5 	ble.w	801a548 <RadioIrqProcess+0x3f4>
 801a19e:	3b01      	subs	r3, #1
 801a1a0:	2b1f      	cmp	r3, #31
 801a1a2:	f200 81d1 	bhi.w	801a548 <RadioIrqProcess+0x3f4>
 801a1a6:	a201      	add	r2, pc, #4	; (adr r2, 801a1ac <RadioIrqProcess+0x58>)
 801a1a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a1ac:	0801a235 	.word	0x0801a235
 801a1b0:	0801a26f 	.word	0x0801a26f
 801a1b4:	0801a549 	.word	0x0801a549
 801a1b8:	0801a425 	.word	0x0801a425
 801a1bc:	0801a549 	.word	0x0801a549
 801a1c0:	0801a549 	.word	0x0801a549
 801a1c4:	0801a549 	.word	0x0801a549
 801a1c8:	0801a4a1 	.word	0x0801a4a1
 801a1cc:	0801a549 	.word	0x0801a549
 801a1d0:	0801a549 	.word	0x0801a549
 801a1d4:	0801a549 	.word	0x0801a549
 801a1d8:	0801a549 	.word	0x0801a549
 801a1dc:	0801a549 	.word	0x0801a549
 801a1e0:	0801a549 	.word	0x0801a549
 801a1e4:	0801a549 	.word	0x0801a549
 801a1e8:	0801a4bd 	.word	0x0801a4bd
 801a1ec:	0801a549 	.word	0x0801a549
 801a1f0:	0801a549 	.word	0x0801a549
 801a1f4:	0801a549 	.word	0x0801a549
 801a1f8:	0801a549 	.word	0x0801a549
 801a1fc:	0801a549 	.word	0x0801a549
 801a200:	0801a549 	.word	0x0801a549
 801a204:	0801a549 	.word	0x0801a549
 801a208:	0801a549 	.word	0x0801a549
 801a20c:	0801a549 	.word	0x0801a549
 801a210:	0801a549 	.word	0x0801a549
 801a214:	0801a549 	.word	0x0801a549
 801a218:	0801a549 	.word	0x0801a549
 801a21c:	0801a549 	.word	0x0801a549
 801a220:	0801a549 	.word	0x0801a549
 801a224:	0801a549 	.word	0x0801a549
 801a228:	0801a4cb 	.word	0x0801a4cb
 801a22c:	2b40      	cmp	r3, #64	; 0x40
 801a22e:	f000 816d 	beq.w	801a50c <RadioIrqProcess+0x3b8>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 801a232:	e189      	b.n	801a548 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 801a234:	4874      	ldr	r0, [pc, #464]	; (801a408 <RadioIrqProcess+0x2b4>)
 801a236:	f002 ffbf 	bl	801d1b8 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 801a23a:	2000      	movs	r0, #0
 801a23c:	f001 f81c 	bl	801b278 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 801a240:	f002 f892 	bl	801c368 <RFW_Is_LongPacketModeEnabled>
 801a244:	4603      	mov	r3, r0
 801a246:	2b01      	cmp	r3, #1
 801a248:	d101      	bne.n	801a24e <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 801a24a:	f002 f8b6 	bl	801c3ba <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801a24e:	4b6f      	ldr	r3, [pc, #444]	; (801a40c <RadioIrqProcess+0x2b8>)
 801a250:	681b      	ldr	r3, [r3, #0]
 801a252:	2b00      	cmp	r3, #0
 801a254:	f000 817a 	beq.w	801a54c <RadioIrqProcess+0x3f8>
 801a258:	4b6c      	ldr	r3, [pc, #432]	; (801a40c <RadioIrqProcess+0x2b8>)
 801a25a:	681b      	ldr	r3, [r3, #0]
 801a25c:	681b      	ldr	r3, [r3, #0]
 801a25e:	2b00      	cmp	r3, #0
 801a260:	f000 8174 	beq.w	801a54c <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 801a264:	4b69      	ldr	r3, [pc, #420]	; (801a40c <RadioIrqProcess+0x2b8>)
 801a266:	681b      	ldr	r3, [r3, #0]
 801a268:	681b      	ldr	r3, [r3, #0]
 801a26a:	4798      	blx	r3
        break;
 801a26c:	e16e      	b.n	801a54c <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 801a26e:	4868      	ldr	r0, [pc, #416]	; (801a410 <RadioIrqProcess+0x2bc>)
 801a270:	f002 ffa2 	bl	801d1b8 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801a274:	4b63      	ldr	r3, [pc, #396]	; (801a404 <RadioIrqProcess+0x2b0>)
 801a276:	785b      	ldrb	r3, [r3, #1]
 801a278:	f083 0301 	eor.w	r3, r3, #1
 801a27c:	b2db      	uxtb	r3, r3
 801a27e:	2b00      	cmp	r3, #0
 801a280:	d014      	beq.n	801a2ac <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 801a282:	2000      	movs	r0, #0
 801a284:	f000 fff8 	bl	801b278 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 801a288:	2100      	movs	r1, #0
 801a28a:	f640 1002 	movw	r0, #2306	; 0x902
 801a28e:	f001 fd77 	bl	801bd80 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 801a292:	f640 1044 	movw	r0, #2372	; 0x944
 801a296:	f001 fd87 	bl	801bda8 <SUBGRF_ReadRegister>
 801a29a:	4603      	mov	r3, r0
 801a29c:	f043 0302 	orr.w	r3, r3, #2
 801a2a0:	b2db      	uxtb	r3, r3
 801a2a2:	4619      	mov	r1, r3
 801a2a4:	f640 1044 	movw	r0, #2372	; 0x944
 801a2a8:	f001 fd6a 	bl	801bd80 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 801a2ac:	1dfb      	adds	r3, r7, #7
 801a2ae:	22ff      	movs	r2, #255	; 0xff
 801a2b0:	4619      	mov	r1, r3
 801a2b2:	4858      	ldr	r0, [pc, #352]	; (801a414 <RadioIrqProcess+0x2c0>)
 801a2b4:	f000 feb0 	bl	801b018 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 801a2b8:	4857      	ldr	r0, [pc, #348]	; (801a418 <RadioIrqProcess+0x2c4>)
 801a2ba:	f001 fd0f 	bl	801bcdc <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801a2be:	4b53      	ldr	r3, [pc, #332]	; (801a40c <RadioIrqProcess+0x2b8>)
 801a2c0:	681b      	ldr	r3, [r3, #0]
 801a2c2:	2b00      	cmp	r3, #0
 801a2c4:	f000 8144 	beq.w	801a550 <RadioIrqProcess+0x3fc>
 801a2c8:	4b50      	ldr	r3, [pc, #320]	; (801a40c <RadioIrqProcess+0x2b8>)
 801a2ca:	681b      	ldr	r3, [r3, #0]
 801a2cc:	689b      	ldr	r3, [r3, #8]
 801a2ce:	2b00      	cmp	r3, #0
 801a2d0:	f000 813e 	beq.w	801a550 <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 801a2d4:	4b4b      	ldr	r3, [pc, #300]	; (801a404 <RadioIrqProcess+0x2b0>)
 801a2d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801a2da:	2b01      	cmp	r3, #1
 801a2dc:	d10e      	bne.n	801a2fc <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 801a2de:	4b4b      	ldr	r3, [pc, #300]	; (801a40c <RadioIrqProcess+0x2b8>)
 801a2e0:	681b      	ldr	r3, [r3, #0]
 801a2e2:	689c      	ldr	r4, [r3, #8]
 801a2e4:	79fb      	ldrb	r3, [r7, #7]
 801a2e6:	b299      	uxth	r1, r3
 801a2e8:	4b46      	ldr	r3, [pc, #280]	; (801a404 <RadioIrqProcess+0x2b0>)
 801a2ea:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 801a2ee:	b21a      	sxth	r2, r3
 801a2f0:	4b44      	ldr	r3, [pc, #272]	; (801a404 <RadioIrqProcess+0x2b0>)
 801a2f2:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 801a2f6:	4847      	ldr	r0, [pc, #284]	; (801a414 <RadioIrqProcess+0x2c0>)
 801a2f8:	47a0      	blx	r4
                break;
 801a2fa:	e01d      	b.n	801a338 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 801a2fc:	4b41      	ldr	r3, [pc, #260]	; (801a404 <RadioIrqProcess+0x2b0>)
 801a2fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a300:	463a      	mov	r2, r7
 801a302:	4611      	mov	r1, r2
 801a304:	4618      	mov	r0, r3
 801a306:	f001 ff7d 	bl	801c204 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 801a30a:	4b40      	ldr	r3, [pc, #256]	; (801a40c <RadioIrqProcess+0x2b8>)
 801a30c:	681b      	ldr	r3, [r3, #0]
 801a30e:	689c      	ldr	r4, [r3, #8]
 801a310:	79fb      	ldrb	r3, [r7, #7]
 801a312:	b299      	uxth	r1, r3
 801a314:	4b3b      	ldr	r3, [pc, #236]	; (801a404 <RadioIrqProcess+0x2b0>)
 801a316:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 801a31a:	b218      	sxth	r0, r3
 801a31c:	683b      	ldr	r3, [r7, #0]
 801a31e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 801a322:	4a3e      	ldr	r2, [pc, #248]	; (801a41c <RadioIrqProcess+0x2c8>)
 801a324:	fb82 5203 	smull	r5, r2, r2, r3
 801a328:	1192      	asrs	r2, r2, #6
 801a32a:	17db      	asrs	r3, r3, #31
 801a32c:	1ad3      	subs	r3, r2, r3
 801a32e:	b25b      	sxtb	r3, r3
 801a330:	4602      	mov	r2, r0
 801a332:	4838      	ldr	r0, [pc, #224]	; (801a414 <RadioIrqProcess+0x2c0>)
 801a334:	47a0      	blx	r4
                break;
 801a336:	bf00      	nop
        break;
 801a338:	e10a      	b.n	801a550 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 801a33a:	2000      	movs	r0, #0
 801a33c:	f000 ff9c 	bl	801b278 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801a340:	4b32      	ldr	r3, [pc, #200]	; (801a40c <RadioIrqProcess+0x2b8>)
 801a342:	681b      	ldr	r3, [r3, #0]
 801a344:	2b00      	cmp	r3, #0
 801a346:	f000 8105 	beq.w	801a554 <RadioIrqProcess+0x400>
 801a34a:	4b30      	ldr	r3, [pc, #192]	; (801a40c <RadioIrqProcess+0x2b8>)
 801a34c:	681b      	ldr	r3, [r3, #0]
 801a34e:	699b      	ldr	r3, [r3, #24]
 801a350:	2b00      	cmp	r3, #0
 801a352:	f000 80ff 	beq.w	801a554 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 801a356:	4b2d      	ldr	r3, [pc, #180]	; (801a40c <RadioIrqProcess+0x2b8>)
 801a358:	681b      	ldr	r3, [r3, #0]
 801a35a:	699b      	ldr	r3, [r3, #24]
 801a35c:	2000      	movs	r0, #0
 801a35e:	4798      	blx	r3
        break;
 801a360:	e0f8      	b.n	801a554 <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 801a362:	2000      	movs	r0, #0
 801a364:	f000 ff88 	bl	801b278 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801a368:	4b28      	ldr	r3, [pc, #160]	; (801a40c <RadioIrqProcess+0x2b8>)
 801a36a:	681b      	ldr	r3, [r3, #0]
 801a36c:	2b00      	cmp	r3, #0
 801a36e:	f000 80f3 	beq.w	801a558 <RadioIrqProcess+0x404>
 801a372:	4b26      	ldr	r3, [pc, #152]	; (801a40c <RadioIrqProcess+0x2b8>)
 801a374:	681b      	ldr	r3, [r3, #0]
 801a376:	699b      	ldr	r3, [r3, #24]
 801a378:	2b00      	cmp	r3, #0
 801a37a:	f000 80ed 	beq.w	801a558 <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 801a37e:	4b23      	ldr	r3, [pc, #140]	; (801a40c <RadioIrqProcess+0x2b8>)
 801a380:	681b      	ldr	r3, [r3, #0]
 801a382:	699b      	ldr	r3, [r3, #24]
 801a384:	2001      	movs	r0, #1
 801a386:	4798      	blx	r3
        break;
 801a388:	e0e6      	b.n	801a558 <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 801a38a:	4b25      	ldr	r3, [pc, #148]	; (801a420 <RadioIrqProcess+0x2cc>)
 801a38c:	2201      	movs	r2, #1
 801a38e:	2100      	movs	r1, #0
 801a390:	2002      	movs	r0, #2
 801a392:	f003 f91b 	bl	801d5cc <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 801a396:	f000 fe25 	bl	801afe4 <SUBGRF_GetOperatingMode>
 801a39a:	4603      	mov	r3, r0
 801a39c:	2b04      	cmp	r3, #4
 801a39e:	d115      	bne.n	801a3cc <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 801a3a0:	4819      	ldr	r0, [pc, #100]	; (801a408 <RadioIrqProcess+0x2b4>)
 801a3a2:	f002 ff09 	bl	801d1b8 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801a3a6:	2000      	movs	r0, #0
 801a3a8:	f000 ff66 	bl	801b278 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801a3ac:	4b17      	ldr	r3, [pc, #92]	; (801a40c <RadioIrqProcess+0x2b8>)
 801a3ae:	681b      	ldr	r3, [r3, #0]
 801a3b0:	2b00      	cmp	r3, #0
 801a3b2:	f000 80d3 	beq.w	801a55c <RadioIrqProcess+0x408>
 801a3b6:	4b15      	ldr	r3, [pc, #84]	; (801a40c <RadioIrqProcess+0x2b8>)
 801a3b8:	681b      	ldr	r3, [r3, #0]
 801a3ba:	685b      	ldr	r3, [r3, #4]
 801a3bc:	2b00      	cmp	r3, #0
 801a3be:	f000 80cd 	beq.w	801a55c <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 801a3c2:	4b12      	ldr	r3, [pc, #72]	; (801a40c <RadioIrqProcess+0x2b8>)
 801a3c4:	681b      	ldr	r3, [r3, #0]
 801a3c6:	685b      	ldr	r3, [r3, #4]
 801a3c8:	4798      	blx	r3
        break;
 801a3ca:	e0c7      	b.n	801a55c <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 801a3cc:	f000 fe0a 	bl	801afe4 <SUBGRF_GetOperatingMode>
 801a3d0:	4603      	mov	r3, r0
 801a3d2:	2b05      	cmp	r3, #5
 801a3d4:	f040 80c2 	bne.w	801a55c <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 801a3d8:	480d      	ldr	r0, [pc, #52]	; (801a410 <RadioIrqProcess+0x2bc>)
 801a3da:	f002 feed 	bl	801d1b8 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801a3de:	2000      	movs	r0, #0
 801a3e0:	f000 ff4a 	bl	801b278 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801a3e4:	4b09      	ldr	r3, [pc, #36]	; (801a40c <RadioIrqProcess+0x2b8>)
 801a3e6:	681b      	ldr	r3, [r3, #0]
 801a3e8:	2b00      	cmp	r3, #0
 801a3ea:	f000 80b7 	beq.w	801a55c <RadioIrqProcess+0x408>
 801a3ee:	4b07      	ldr	r3, [pc, #28]	; (801a40c <RadioIrqProcess+0x2b8>)
 801a3f0:	681b      	ldr	r3, [r3, #0]
 801a3f2:	68db      	ldr	r3, [r3, #12]
 801a3f4:	2b00      	cmp	r3, #0
 801a3f6:	f000 80b1 	beq.w	801a55c <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 801a3fa:	4b04      	ldr	r3, [pc, #16]	; (801a40c <RadioIrqProcess+0x2b8>)
 801a3fc:	681b      	ldr	r3, [r3, #0]
 801a3fe:	68db      	ldr	r3, [r3, #12]
 801a400:	4798      	blx	r3
        break;
 801a402:	e0ab      	b.n	801a55c <RadioIrqProcess+0x408>
 801a404:	20001be8 	.word	0x20001be8
 801a408:	20001c44 	.word	0x20001c44
 801a40c:	20001be4 	.word	0x20001be4
 801a410:	20001c5c 	.word	0x20001c5c
 801a414:	20001ae4 	.word	0x20001ae4
 801a418:	20001c0c 	.word	0x20001c0c
 801a41c:	10624dd3 	.word	0x10624dd3
 801a420:	0801e414 	.word	0x0801e414
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 801a424:	4b54      	ldr	r3, [pc, #336]	; (801a578 <RadioIrqProcess+0x424>)
 801a426:	2201      	movs	r2, #1
 801a428:	2100      	movs	r1, #0
 801a42a:	2002      	movs	r0, #2
 801a42c:	f003 f8ce 	bl	801d5cc <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 801a430:	4b52      	ldr	r3, [pc, #328]	; (801a57c <RadioIrqProcess+0x428>)
 801a432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a434:	2b00      	cmp	r3, #0
 801a436:	f000 8093 	beq.w	801a560 <RadioIrqProcess+0x40c>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 801a43a:	4a51      	ldr	r2, [pc, #324]	; (801a580 <RadioIrqProcess+0x42c>)
 801a43c:	4b4f      	ldr	r3, [pc, #316]	; (801a57c <RadioIrqProcess+0x428>)
 801a43e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a440:	0c1b      	lsrs	r3, r3, #16
 801a442:	b2db      	uxtb	r3, r3
 801a444:	4619      	mov	r1, r3
 801a446:	f640 1003 	movw	r0, #2307	; 0x903
 801a44a:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 801a44c:	4a4c      	ldr	r2, [pc, #304]	; (801a580 <RadioIrqProcess+0x42c>)
 801a44e:	4b4b      	ldr	r3, [pc, #300]	; (801a57c <RadioIrqProcess+0x428>)
 801a450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a452:	0a1b      	lsrs	r3, r3, #8
 801a454:	b2db      	uxtb	r3, r3
 801a456:	4619      	mov	r1, r3
 801a458:	f640 1004 	movw	r0, #2308	; 0x904
 801a45c:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 801a45e:	4a48      	ldr	r2, [pc, #288]	; (801a580 <RadioIrqProcess+0x42c>)
 801a460:	4b46      	ldr	r3, [pc, #280]	; (801a57c <RadioIrqProcess+0x428>)
 801a462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a464:	b2db      	uxtb	r3, r3
 801a466:	4619      	mov	r1, r3
 801a468:	f640 1005 	movw	r0, #2309	; 0x905
 801a46c:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 801a46e:	4c44      	ldr	r4, [pc, #272]	; (801a580 <RadioIrqProcess+0x42c>)
 801a470:	4b44      	ldr	r3, [pc, #272]	; (801a584 <RadioIrqProcess+0x430>)
 801a472:	f640 1002 	movw	r0, #2306	; 0x902
 801a476:	4798      	blx	r3
 801a478:	4603      	mov	r3, r0
 801a47a:	f043 0301 	orr.w	r3, r3, #1
 801a47e:	b2db      	uxtb	r3, r3
 801a480:	4619      	mov	r1, r3
 801a482:	f640 1002 	movw	r0, #2306	; 0x902
 801a486:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 801a488:	4b3c      	ldr	r3, [pc, #240]	; (801a57c <RadioIrqProcess+0x428>)
 801a48a:	2200      	movs	r2, #0
 801a48c:	659a      	str	r2, [r3, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801a48e:	2300      	movs	r3, #0
 801a490:	2200      	movs	r2, #0
 801a492:	f240 2162 	movw	r1, #610	; 0x262
 801a496:	f240 2062 	movw	r0, #610	; 0x262
 801a49a:	f001 f8c1 	bl	801b620 <SUBGRF_SetDioIrqParams>
        break;
 801a49e:	e05f      	b.n	801a560 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 801a4a0:	4b39      	ldr	r3, [pc, #228]	; (801a588 <RadioIrqProcess+0x434>)
 801a4a2:	2201      	movs	r2, #1
 801a4a4:	2100      	movs	r1, #0
 801a4a6:	2002      	movs	r0, #2
 801a4a8:	f003 f890 	bl	801d5cc <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 801a4ac:	f001 ff55 	bl	801c35a <RFW_Is_Init>
 801a4b0:	4603      	mov	r3, r0
 801a4b2:	2b01      	cmp	r3, #1
 801a4b4:	d156      	bne.n	801a564 <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 801a4b6:	f001 ff86 	bl	801c3c6 <RFW_ReceivePayload>
        break;
 801a4ba:	e053      	b.n	801a564 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 801a4bc:	4b33      	ldr	r3, [pc, #204]	; (801a58c <RadioIrqProcess+0x438>)
 801a4be:	2201      	movs	r2, #1
 801a4c0:	2100      	movs	r1, #0
 801a4c2:	2002      	movs	r0, #2
 801a4c4:	f003 f882 	bl	801d5cc <UTIL_ADV_TRACE_COND_FSend>
        break;
 801a4c8:	e051      	b.n	801a56e <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 801a4ca:	4831      	ldr	r0, [pc, #196]	; (801a590 <RadioIrqProcess+0x43c>)
 801a4cc:	f002 fe74 	bl	801d1b8 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801a4d0:	4b2a      	ldr	r3, [pc, #168]	; (801a57c <RadioIrqProcess+0x428>)
 801a4d2:	785b      	ldrb	r3, [r3, #1]
 801a4d4:	f083 0301 	eor.w	r3, r3, #1
 801a4d8:	b2db      	uxtb	r3, r3
 801a4da:	2b00      	cmp	r3, #0
 801a4dc:	d002      	beq.n	801a4e4 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 801a4de:	2000      	movs	r0, #0
 801a4e0:	f000 feca 	bl	801b278 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801a4e4:	4b2b      	ldr	r3, [pc, #172]	; (801a594 <RadioIrqProcess+0x440>)
 801a4e6:	681b      	ldr	r3, [r3, #0]
 801a4e8:	2b00      	cmp	r3, #0
 801a4ea:	d03d      	beq.n	801a568 <RadioIrqProcess+0x414>
 801a4ec:	4b29      	ldr	r3, [pc, #164]	; (801a594 <RadioIrqProcess+0x440>)
 801a4ee:	681b      	ldr	r3, [r3, #0]
 801a4f0:	68db      	ldr	r3, [r3, #12]
 801a4f2:	2b00      	cmp	r3, #0
 801a4f4:	d038      	beq.n	801a568 <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 801a4f6:	4b27      	ldr	r3, [pc, #156]	; (801a594 <RadioIrqProcess+0x440>)
 801a4f8:	681b      	ldr	r3, [r3, #0]
 801a4fa:	68db      	ldr	r3, [r3, #12]
 801a4fc:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 801a4fe:	4b26      	ldr	r3, [pc, #152]	; (801a598 <RadioIrqProcess+0x444>)
 801a500:	2201      	movs	r2, #1
 801a502:	2100      	movs	r1, #0
 801a504:	2002      	movs	r0, #2
 801a506:	f003 f861 	bl	801d5cc <UTIL_ADV_TRACE_COND_FSend>
        break;
 801a50a:	e02d      	b.n	801a568 <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 801a50c:	4b23      	ldr	r3, [pc, #140]	; (801a59c <RadioIrqProcess+0x448>)
 801a50e:	2201      	movs	r2, #1
 801a510:	2100      	movs	r1, #0
 801a512:	2002      	movs	r0, #2
 801a514:	f003 f85a 	bl	801d5cc <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 801a518:	4b18      	ldr	r3, [pc, #96]	; (801a57c <RadioIrqProcess+0x428>)
 801a51a:	785b      	ldrb	r3, [r3, #1]
 801a51c:	f083 0301 	eor.w	r3, r3, #1
 801a520:	b2db      	uxtb	r3, r3
 801a522:	2b00      	cmp	r3, #0
 801a524:	d002      	beq.n	801a52c <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 801a526:	2000      	movs	r0, #0
 801a528:	f000 fea6 	bl	801b278 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 801a52c:	4b19      	ldr	r3, [pc, #100]	; (801a594 <RadioIrqProcess+0x440>)
 801a52e:	681b      	ldr	r3, [r3, #0]
 801a530:	2b00      	cmp	r3, #0
 801a532:	d01b      	beq.n	801a56c <RadioIrqProcess+0x418>
 801a534:	4b17      	ldr	r3, [pc, #92]	; (801a594 <RadioIrqProcess+0x440>)
 801a536:	681b      	ldr	r3, [r3, #0]
 801a538:	691b      	ldr	r3, [r3, #16]
 801a53a:	2b00      	cmp	r3, #0
 801a53c:	d016      	beq.n	801a56c <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 801a53e:	4b15      	ldr	r3, [pc, #84]	; (801a594 <RadioIrqProcess+0x440>)
 801a540:	681b      	ldr	r3, [r3, #0]
 801a542:	691b      	ldr	r3, [r3, #16]
 801a544:	4798      	blx	r3
        break;
 801a546:	e011      	b.n	801a56c <RadioIrqProcess+0x418>
        break;
 801a548:	bf00      	nop
 801a54a:	e010      	b.n	801a56e <RadioIrqProcess+0x41a>
        break;
 801a54c:	bf00      	nop
 801a54e:	e00e      	b.n	801a56e <RadioIrqProcess+0x41a>
        break;
 801a550:	bf00      	nop
 801a552:	e00c      	b.n	801a56e <RadioIrqProcess+0x41a>
        break;
 801a554:	bf00      	nop
 801a556:	e00a      	b.n	801a56e <RadioIrqProcess+0x41a>
        break;
 801a558:	bf00      	nop
 801a55a:	e008      	b.n	801a56e <RadioIrqProcess+0x41a>
        break;
 801a55c:	bf00      	nop
 801a55e:	e006      	b.n	801a56e <RadioIrqProcess+0x41a>
        break;
 801a560:	bf00      	nop
 801a562:	e004      	b.n	801a56e <RadioIrqProcess+0x41a>
        break;
 801a564:	bf00      	nop
 801a566:	e002      	b.n	801a56e <RadioIrqProcess+0x41a>
        break;
 801a568:	bf00      	nop
 801a56a:	e000      	b.n	801a56e <RadioIrqProcess+0x41a>
        break;
 801a56c:	bf00      	nop
    }
}
 801a56e:	bf00      	nop
 801a570:	3708      	adds	r7, #8
 801a572:	46bd      	mov	sp, r7
 801a574:	bdb0      	pop	{r4, r5, r7, pc}
 801a576:	bf00      	nop
 801a578:	0801e428 	.word	0x0801e428
 801a57c:	20001be8 	.word	0x20001be8
 801a580:	08019f63 	.word	0x08019f63
 801a584:	08019f87 	.word	0x08019f87
 801a588:	0801e434 	.word	0x0801e434
 801a58c:	0801e440 	.word	0x0801e440
 801a590:	20001c5c 	.word	0x20001c5c
 801a594:	20001be4 	.word	0x20001be4
 801a598:	0801e44c 	.word	0x0801e44c
 801a59c:	0801e458 	.word	0x0801e458

0801a5a0 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 801a5a0:	b580      	push	{r7, lr}
 801a5a2:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801a5a4:	4b09      	ldr	r3, [pc, #36]	; (801a5cc <RadioTxPrbs+0x2c>)
 801a5a6:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a5aa:	2101      	movs	r1, #1
 801a5ac:	4618      	mov	r0, r3
 801a5ae:	f001 fcdb 	bl	801bf68 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 801a5b2:	4b07      	ldr	r3, [pc, #28]	; (801a5d0 <RadioTxPrbs+0x30>)
 801a5b4:	212d      	movs	r1, #45	; 0x2d
 801a5b6:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801a5ba:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 801a5bc:	f000 ff1f 	bl	801b3fe <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 801a5c0:	4804      	ldr	r0, [pc, #16]	; (801a5d4 <RadioTxPrbs+0x34>)
 801a5c2:	f000 fe75 	bl	801b2b0 <SUBGRF_SetTx>
}
 801a5c6:	bf00      	nop
 801a5c8:	bd80      	pop	{r7, pc}
 801a5ca:	bf00      	nop
 801a5cc:	20001be8 	.word	0x20001be8
 801a5d0:	08019f63 	.word	0x08019f63
 801a5d4:	000fffff 	.word	0x000fffff

0801a5d8 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 801a5d8:	b580      	push	{r7, lr}
 801a5da:	b084      	sub	sp, #16
 801a5dc:	af00      	add	r7, sp, #0
 801a5de:	4603      	mov	r3, r0
 801a5e0:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 801a5e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a5e6:	4618      	mov	r0, r3
 801a5e8:	f001 fce6 	bl	801bfb8 <SUBGRF_SetRfTxPower>
 801a5ec:	4603      	mov	r3, r0
 801a5ee:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801a5f0:	210e      	movs	r1, #14
 801a5f2:	f640 101f 	movw	r0, #2335	; 0x91f
 801a5f6:	f001 fbc3 	bl	801bd80 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 801a5fa:	7bfb      	ldrb	r3, [r7, #15]
 801a5fc:	2101      	movs	r1, #1
 801a5fe:	4618      	mov	r0, r3
 801a600:	f001 fcb2 	bl	801bf68 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 801a604:	f000 fef2 	bl	801b3ec <SUBGRF_SetTxContinuousWave>
}
 801a608:	bf00      	nop
 801a60a:	3710      	adds	r7, #16
 801a60c:	46bd      	mov	sp, r7
 801a60e:	bd80      	pop	{r7, pc}

0801a610 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 801a610:	b480      	push	{r7}
 801a612:	b089      	sub	sp, #36	; 0x24
 801a614:	af00      	add	r7, sp, #0
 801a616:	60f8      	str	r0, [r7, #12]
 801a618:	60b9      	str	r1, [r7, #8]
 801a61a:	4613      	mov	r3, r2
 801a61c:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 801a61e:	2300      	movs	r3, #0
 801a620:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 801a622:	2300      	movs	r3, #0
 801a624:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 801a626:	2300      	movs	r3, #0
 801a628:	61bb      	str	r3, [r7, #24]
 801a62a:	e011      	b.n	801a650 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 801a62c:	69bb      	ldr	r3, [r7, #24]
 801a62e:	68ba      	ldr	r2, [r7, #8]
 801a630:	4413      	add	r3, r2
 801a632:	781a      	ldrb	r2, [r3, #0]
 801a634:	69bb      	ldr	r3, [r7, #24]
 801a636:	68b9      	ldr	r1, [r7, #8]
 801a638:	440b      	add	r3, r1
 801a63a:	43d2      	mvns	r2, r2
 801a63c:	b2d2      	uxtb	r2, r2
 801a63e:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 801a640:	69bb      	ldr	r3, [r7, #24]
 801a642:	68fa      	ldr	r2, [r7, #12]
 801a644:	4413      	add	r3, r2
 801a646:	2200      	movs	r2, #0
 801a648:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 801a64a:	69bb      	ldr	r3, [r7, #24]
 801a64c:	3301      	adds	r3, #1
 801a64e:	61bb      	str	r3, [r7, #24]
 801a650:	79fb      	ldrb	r3, [r7, #7]
 801a652:	69ba      	ldr	r2, [r7, #24]
 801a654:	429a      	cmp	r2, r3
 801a656:	dbe9      	blt.n	801a62c <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 801a658:	2300      	movs	r3, #0
 801a65a:	61bb      	str	r3, [r7, #24]
 801a65c:	e049      	b.n	801a6f2 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 801a65e:	69bb      	ldr	r3, [r7, #24]
 801a660:	425a      	negs	r2, r3
 801a662:	f003 0307 	and.w	r3, r3, #7
 801a666:	f002 0207 	and.w	r2, r2, #7
 801a66a:	bf58      	it	pl
 801a66c:	4253      	negpl	r3, r2
 801a66e:	b2db      	uxtb	r3, r3
 801a670:	f1c3 0307 	rsb	r3, r3, #7
 801a674:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 801a676:	69bb      	ldr	r3, [r7, #24]
 801a678:	2b00      	cmp	r3, #0
 801a67a:	da00      	bge.n	801a67e <payload_integration+0x6e>
 801a67c:	3307      	adds	r3, #7
 801a67e:	10db      	asrs	r3, r3, #3
 801a680:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 801a682:	69bb      	ldr	r3, [r7, #24]
 801a684:	3301      	adds	r3, #1
 801a686:	425a      	negs	r2, r3
 801a688:	f003 0307 	and.w	r3, r3, #7
 801a68c:	f002 0207 	and.w	r2, r2, #7
 801a690:	bf58      	it	pl
 801a692:	4253      	negpl	r3, r2
 801a694:	b2db      	uxtb	r3, r3
 801a696:	f1c3 0307 	rsb	r3, r3, #7
 801a69a:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 801a69c:	69bb      	ldr	r3, [r7, #24]
 801a69e:	3301      	adds	r3, #1
 801a6a0:	2b00      	cmp	r3, #0
 801a6a2:	da00      	bge.n	801a6a6 <payload_integration+0x96>
 801a6a4:	3307      	adds	r3, #7
 801a6a6:	10db      	asrs	r3, r3, #3
 801a6a8:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 801a6aa:	7dbb      	ldrb	r3, [r7, #22]
 801a6ac:	68ba      	ldr	r2, [r7, #8]
 801a6ae:	4413      	add	r3, r2
 801a6b0:	781b      	ldrb	r3, [r3, #0]
 801a6b2:	461a      	mov	r2, r3
 801a6b4:	7dfb      	ldrb	r3, [r7, #23]
 801a6b6:	fa42 f303 	asr.w	r3, r2, r3
 801a6ba:	b2db      	uxtb	r3, r3
 801a6bc:	f003 0301 	and.w	r3, r3, #1
 801a6c0:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 801a6c2:	7ffa      	ldrb	r2, [r7, #31]
 801a6c4:	7cfb      	ldrb	r3, [r7, #19]
 801a6c6:	4053      	eors	r3, r2
 801a6c8:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 801a6ca:	7d3b      	ldrb	r3, [r7, #20]
 801a6cc:	68fa      	ldr	r2, [r7, #12]
 801a6ce:	4413      	add	r3, r2
 801a6d0:	781b      	ldrb	r3, [r3, #0]
 801a6d2:	b25a      	sxtb	r2, r3
 801a6d4:	7ff9      	ldrb	r1, [r7, #31]
 801a6d6:	7d7b      	ldrb	r3, [r7, #21]
 801a6d8:	fa01 f303 	lsl.w	r3, r1, r3
 801a6dc:	b25b      	sxtb	r3, r3
 801a6de:	4313      	orrs	r3, r2
 801a6e0:	b259      	sxtb	r1, r3
 801a6e2:	7d3b      	ldrb	r3, [r7, #20]
 801a6e4:	68fa      	ldr	r2, [r7, #12]
 801a6e6:	4413      	add	r3, r2
 801a6e8:	b2ca      	uxtb	r2, r1
 801a6ea:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 801a6ec:	69bb      	ldr	r3, [r7, #24]
 801a6ee:	3301      	adds	r3, #1
 801a6f0:	61bb      	str	r3, [r7, #24]
 801a6f2:	79fb      	ldrb	r3, [r7, #7]
 801a6f4:	00db      	lsls	r3, r3, #3
 801a6f6:	69ba      	ldr	r2, [r7, #24]
 801a6f8:	429a      	cmp	r2, r3
 801a6fa:	dbb0      	blt.n	801a65e <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 801a6fc:	7ffb      	ldrb	r3, [r7, #31]
 801a6fe:	01db      	lsls	r3, r3, #7
 801a700:	b25a      	sxtb	r2, r3
 801a702:	7ffb      	ldrb	r3, [r7, #31]
 801a704:	019b      	lsls	r3, r3, #6
 801a706:	b25b      	sxtb	r3, r3
 801a708:	4313      	orrs	r3, r2
 801a70a:	b25b      	sxtb	r3, r3
 801a70c:	7ffa      	ldrb	r2, [r7, #31]
 801a70e:	2a00      	cmp	r2, #0
 801a710:	d101      	bne.n	801a716 <payload_integration+0x106>
 801a712:	2220      	movs	r2, #32
 801a714:	e000      	b.n	801a718 <payload_integration+0x108>
 801a716:	2200      	movs	r2, #0
 801a718:	4313      	orrs	r3, r2
 801a71a:	b259      	sxtb	r1, r3
 801a71c:	79fb      	ldrb	r3, [r7, #7]
 801a71e:	68fa      	ldr	r2, [r7, #12]
 801a720:	4413      	add	r3, r2
 801a722:	b2ca      	uxtb	r2, r1
 801a724:	701a      	strb	r2, [r3, #0]
}
 801a726:	bf00      	nop
 801a728:	3724      	adds	r7, #36	; 0x24
 801a72a:	46bd      	mov	sp, r7
 801a72c:	bc80      	pop	{r7}
 801a72e:	4770      	bx	lr

0801a730 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 801a730:	b580      	push	{r7, lr}
 801a732:	b08c      	sub	sp, #48	; 0x30
 801a734:	af00      	add	r7, sp, #0
 801a736:	60b9      	str	r1, [r7, #8]
 801a738:	607a      	str	r2, [r7, #4]
 801a73a:	603b      	str	r3, [r7, #0]
 801a73c:	4603      	mov	r3, r0
 801a73e:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 801a740:	2300      	movs	r3, #0
 801a742:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 801a744:	2300      	movs	r3, #0
 801a746:	623b      	str	r3, [r7, #32]
 801a748:	2300      	movs	r3, #0
 801a74a:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801a74c:	f001 fdff 	bl	801c34e <RFW_DeInit>

    if( rxContinuous != 0 )
 801a750:	687b      	ldr	r3, [r7, #4]
 801a752:	2b00      	cmp	r3, #0
 801a754:	d001      	beq.n	801a75a <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 801a756:	2300      	movs	r3, #0
 801a758:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 801a75a:	687b      	ldr	r3, [r7, #4]
 801a75c:	2b00      	cmp	r3, #0
 801a75e:	bf14      	ite	ne
 801a760:	2301      	movne	r3, #1
 801a762:	2300      	moveq	r3, #0
 801a764:	b2da      	uxtb	r2, r3
 801a766:	4ba3      	ldr	r3, [pc, #652]	; (801a9f4 <RadioSetRxGenericConfig+0x2c4>)
 801a768:	705a      	strb	r2, [r3, #1]

    switch( modem )
 801a76a:	7bfb      	ldrb	r3, [r7, #15]
 801a76c:	2b00      	cmp	r3, #0
 801a76e:	d003      	beq.n	801a778 <RadioSetRxGenericConfig+0x48>
 801a770:	2b01      	cmp	r3, #1
 801a772:	f000 80dc 	beq.w	801a92e <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 801a776:	e194      	b.n	801aaa2 <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 801a778:	68bb      	ldr	r3, [r7, #8]
 801a77a:	689b      	ldr	r3, [r3, #8]
 801a77c:	2b00      	cmp	r3, #0
 801a77e:	d003      	beq.n	801a788 <RadioSetRxGenericConfig+0x58>
 801a780:	68bb      	ldr	r3, [r7, #8]
 801a782:	68db      	ldr	r3, [r3, #12]
 801a784:	2b00      	cmp	r3, #0
 801a786:	d102      	bne.n	801a78e <RadioSetRxGenericConfig+0x5e>
            return -1;
 801a788:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a78c:	e18a      	b.n	801aaa4 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 801a78e:	68bb      	ldr	r3, [r7, #8]
 801a790:	7f9b      	ldrb	r3, [r3, #30]
 801a792:	2b08      	cmp	r3, #8
 801a794:	d902      	bls.n	801a79c <RadioSetRxGenericConfig+0x6c>
            return -1;
 801a796:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a79a:	e183      	b.n	801aaa4 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801a79c:	68bb      	ldr	r3, [r7, #8]
 801a79e:	6919      	ldr	r1, [r3, #16]
 801a7a0:	68bb      	ldr	r3, [r7, #8]
 801a7a2:	7f9b      	ldrb	r3, [r3, #30]
 801a7a4:	b29a      	uxth	r2, r3
 801a7a6:	f107 0320 	add.w	r3, r7, #32
 801a7aa:	4618      	mov	r0, r3
 801a7ac:	f001 fec2 	bl	801c534 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801a7b0:	68bb      	ldr	r3, [r7, #8]
 801a7b2:	681b      	ldr	r3, [r3, #0]
 801a7b4:	2b00      	cmp	r3, #0
 801a7b6:	bf14      	ite	ne
 801a7b8:	2301      	movne	r3, #1
 801a7ba:	2300      	moveq	r3, #0
 801a7bc:	b2db      	uxtb	r3, r3
 801a7be:	4618      	mov	r0, r3
 801a7c0:	f000 fe26 	bl	801b410 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a7c4:	4b8b      	ldr	r3, [pc, #556]	; (801a9f4 <RadioSetRxGenericConfig+0x2c4>)
 801a7c6:	2200      	movs	r2, #0
 801a7c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801a7cc:	68bb      	ldr	r3, [r7, #8]
 801a7ce:	689b      	ldr	r3, [r3, #8]
 801a7d0:	4a88      	ldr	r2, [pc, #544]	; (801a9f4 <RadioSetRxGenericConfig+0x2c4>)
 801a7d2:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801a7d4:	68bb      	ldr	r3, [r7, #8]
 801a7d6:	f893 2020 	ldrb.w	r2, [r3, #32]
 801a7da:	4b86      	ldr	r3, [pc, #536]	; (801a9f4 <RadioSetRxGenericConfig+0x2c4>)
 801a7dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 801a7e0:	68bb      	ldr	r3, [r7, #8]
 801a7e2:	685b      	ldr	r3, [r3, #4]
 801a7e4:	4618      	mov	r0, r3
 801a7e6:	f001 fce5 	bl	801c1b4 <SUBGRF_GetFskBandwidthRegValue>
 801a7ea:	4603      	mov	r3, r0
 801a7ec:	461a      	mov	r2, r3
 801a7ee:	4b81      	ldr	r3, [pc, #516]	; (801a9f4 <RadioSetRxGenericConfig+0x2c4>)
 801a7f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a7f4:	4b7f      	ldr	r3, [pc, #508]	; (801a9f4 <RadioSetRxGenericConfig+0x2c4>)
 801a7f6:	2200      	movs	r2, #0
 801a7f8:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 801a7fa:	68bb      	ldr	r3, [r7, #8]
 801a7fc:	68db      	ldr	r3, [r3, #12]
 801a7fe:	b29b      	uxth	r3, r3
 801a800:	00db      	lsls	r3, r3, #3
 801a802:	b29a      	uxth	r2, r3
 801a804:	4b7b      	ldr	r3, [pc, #492]	; (801a9f4 <RadioSetRxGenericConfig+0x2c4>)
 801a806:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 801a808:	68bb      	ldr	r3, [r7, #8]
 801a80a:	7fda      	ldrb	r2, [r3, #31]
 801a80c:	4b79      	ldr	r3, [pc, #484]	; (801a9f4 <RadioSetRxGenericConfig+0x2c4>)
 801a80e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801a810:	68bb      	ldr	r3, [r7, #8]
 801a812:	7f9b      	ldrb	r3, [r3, #30]
 801a814:	00db      	lsls	r3, r3, #3
 801a816:	b2da      	uxtb	r2, r3
 801a818:	4b76      	ldr	r3, [pc, #472]	; (801a9f4 <RadioSetRxGenericConfig+0x2c4>)
 801a81a:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 801a81c:	68bb      	ldr	r3, [r7, #8]
 801a81e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 801a822:	4b74      	ldr	r3, [pc, #464]	; (801a9f4 <RadioSetRxGenericConfig+0x2c4>)
 801a824:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 801a826:	68bb      	ldr	r3, [r7, #8]
 801a828:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801a82c:	2b00      	cmp	r3, #0
 801a82e:	d105      	bne.n	801a83c <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 801a830:	68bb      	ldr	r3, [r7, #8]
 801a832:	695b      	ldr	r3, [r3, #20]
 801a834:	b2da      	uxtb	r2, r3
 801a836:	4b6f      	ldr	r3, [pc, #444]	; (801a9f4 <RadioSetRxGenericConfig+0x2c4>)
 801a838:	759a      	strb	r2, [r3, #22]
 801a83a:	e00b      	b.n	801a854 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 801a83c:	68bb      	ldr	r3, [r7, #8]
 801a83e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801a842:	2b02      	cmp	r3, #2
 801a844:	d103      	bne.n	801a84e <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801a846:	4b6b      	ldr	r3, [pc, #428]	; (801a9f4 <RadioSetRxGenericConfig+0x2c4>)
 801a848:	22ff      	movs	r2, #255	; 0xff
 801a84a:	759a      	strb	r2, [r3, #22]
 801a84c:	e002      	b.n	801a854 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801a84e:	4b69      	ldr	r3, [pc, #420]	; (801a9f4 <RadioSetRxGenericConfig+0x2c4>)
 801a850:	22ff      	movs	r2, #255	; 0xff
 801a852:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801a854:	68bb      	ldr	r3, [r7, #8]
 801a856:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801a85a:	2b02      	cmp	r3, #2
 801a85c:	d004      	beq.n	801a868 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801a85e:	68bb      	ldr	r3, [r7, #8]
 801a860:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801a864:	2b02      	cmp	r3, #2
 801a866:	d12d      	bne.n	801a8c4 <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801a868:	68bb      	ldr	r3, [r7, #8]
 801a86a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801a86e:	2bf1      	cmp	r3, #241	; 0xf1
 801a870:	d00c      	beq.n	801a88c <RadioSetRxGenericConfig+0x15c>
 801a872:	68bb      	ldr	r3, [r7, #8]
 801a874:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801a878:	2bf2      	cmp	r3, #242	; 0xf2
 801a87a:	d007      	beq.n	801a88c <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801a87c:	68bb      	ldr	r3, [r7, #8]
 801a87e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801a882:	2b01      	cmp	r3, #1
 801a884:	d002      	beq.n	801a88c <RadioSetRxGenericConfig+0x15c>
                return -1;
 801a886:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a88a:	e10b      	b.n	801aaa4 <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 801a88c:	2300      	movs	r3, #0
 801a88e:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 801a890:	68bb      	ldr	r3, [r7, #8]
 801a892:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 801a894:	4b58      	ldr	r3, [pc, #352]	; (801a9f8 <RadioSetRxGenericConfig+0x2c8>)
 801a896:	6819      	ldr	r1, [r3, #0]
 801a898:	f107 0314 	add.w	r3, r7, #20
 801a89c:	4a57      	ldr	r2, [pc, #348]	; (801a9fc <RadioSetRxGenericConfig+0x2cc>)
 801a89e:	4618      	mov	r0, r3
 801a8a0:	f001 fd48 	bl	801c334 <RFW_Init>
 801a8a4:	4603      	mov	r3, r0
 801a8a6:	2b00      	cmp	r3, #0
 801a8a8:	d002      	beq.n	801a8b0 <RadioSetRxGenericConfig+0x180>
                return -1;
 801a8aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a8ae:	e0f9      	b.n	801aaa4 <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801a8b0:	4b50      	ldr	r3, [pc, #320]	; (801a9f4 <RadioSetRxGenericConfig+0x2c4>)
 801a8b2:	2200      	movs	r2, #0
 801a8b4:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801a8b6:	4b4f      	ldr	r3, [pc, #316]	; (801a9f4 <RadioSetRxGenericConfig+0x2c4>)
 801a8b8:	2201      	movs	r2, #1
 801a8ba:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801a8bc:	4b4d      	ldr	r3, [pc, #308]	; (801a9f4 <RadioSetRxGenericConfig+0x2c4>)
 801a8be:	2200      	movs	r2, #0
 801a8c0:	755a      	strb	r2, [r3, #21]
        {
 801a8c2:	e00e      	b.n	801a8e2 <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801a8c4:	68bb      	ldr	r3, [r7, #8]
 801a8c6:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 801a8ca:	4b4a      	ldr	r3, [pc, #296]	; (801a9f4 <RadioSetRxGenericConfig+0x2c4>)
 801a8cc:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801a8ce:	68bb      	ldr	r3, [r7, #8]
 801a8d0:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801a8d4:	4b47      	ldr	r3, [pc, #284]	; (801a9f4 <RadioSetRxGenericConfig+0x2c4>)
 801a8d6:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 801a8d8:	68bb      	ldr	r3, [r7, #8]
 801a8da:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 801a8de:	4b45      	ldr	r3, [pc, #276]	; (801a9f4 <RadioSetRxGenericConfig+0x2c4>)
 801a8e0:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801a8e2:	f7ff fa3c 	bl	8019d5e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801a8e6:	2000      	movs	r0, #0
 801a8e8:	f7fe fbd0 	bl	801908c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a8ec:	4844      	ldr	r0, [pc, #272]	; (801aa00 <RadioSetRxGenericConfig+0x2d0>)
 801a8ee:	f001 f82d 	bl	801b94c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a8f2:	4844      	ldr	r0, [pc, #272]	; (801aa04 <RadioSetRxGenericConfig+0x2d4>)
 801a8f4:	f001 f8fc 	bl	801baf0 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801a8f8:	f107 0320 	add.w	r3, r7, #32
 801a8fc:	4618      	mov	r0, r3
 801a8fe:	f000 fbc0 	bl	801b082 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801a902:	68bb      	ldr	r3, [r7, #8]
 801a904:	8b9b      	ldrh	r3, [r3, #28]
 801a906:	4618      	mov	r0, r3
 801a908:	f000 fc0a 	bl	801b120 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801a90c:	68bb      	ldr	r3, [r7, #8]
 801a90e:	8b1b      	ldrh	r3, [r3, #24]
 801a910:	4618      	mov	r0, r3
 801a912:	f000 fbe5 	bl	801b0e0 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 801a916:	683b      	ldr	r3, [r7, #0]
 801a918:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801a91c:	fb03 f202 	mul.w	r2, r3, r2
 801a920:	68bb      	ldr	r3, [r7, #8]
 801a922:	689b      	ldr	r3, [r3, #8]
 801a924:	fbb2 f3f3 	udiv	r3, r2, r3
 801a928:	4a32      	ldr	r2, [pc, #200]	; (801a9f4 <RadioSetRxGenericConfig+0x2c4>)
 801a92a:	6093      	str	r3, [r2, #8]
        break;
 801a92c:	e0b9      	b.n	801aaa2 <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 801a92e:	68bb      	ldr	r3, [r7, #8]
 801a930:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801a932:	2b00      	cmp	r3, #0
 801a934:	d102      	bne.n	801a93c <RadioSetRxGenericConfig+0x20c>
            return -1;
 801a936:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a93a:	e0b3      	b.n	801aaa4 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 801a93c:	68bb      	ldr	r3, [r7, #8]
 801a93e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801a942:	2b01      	cmp	r3, #1
 801a944:	d104      	bne.n	801a950 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 801a946:	68bb      	ldr	r3, [r7, #8]
 801a948:	695b      	ldr	r3, [r3, #20]
 801a94a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801a94e:	e002      	b.n	801a956 <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 801a950:	23ff      	movs	r3, #255	; 0xff
 801a952:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801a956:	68bb      	ldr	r3, [r7, #8]
 801a958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a95a:	2b00      	cmp	r3, #0
 801a95c:	bf14      	ite	ne
 801a95e:	2301      	movne	r3, #1
 801a960:	2300      	moveq	r3, #0
 801a962:	b2db      	uxtb	r3, r3
 801a964:	4618      	mov	r0, r3
 801a966:	f000 fd53 	bl	801b410 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801a96a:	683b      	ldr	r3, [r7, #0]
 801a96c:	b2db      	uxtb	r3, r3
 801a96e:	4618      	mov	r0, r3
 801a970:	f000 fd5d 	bl	801b42e <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801a974:	4b1f      	ldr	r3, [pc, #124]	; (801a9f4 <RadioSetRxGenericConfig+0x2c4>)
 801a976:	2201      	movs	r2, #1
 801a978:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801a97c:	68bb      	ldr	r3, [r7, #8]
 801a97e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 801a982:	4b1c      	ldr	r3, [pc, #112]	; (801a9f4 <RadioSetRxGenericConfig+0x2c4>)
 801a984:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801a988:	68bb      	ldr	r3, [r7, #8]
 801a98a:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 801a98e:	4b19      	ldr	r3, [pc, #100]	; (801a9f4 <RadioSetRxGenericConfig+0x2c4>)
 801a990:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801a994:	68bb      	ldr	r3, [r7, #8]
 801a996:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801a99a:	4b16      	ldr	r3, [pc, #88]	; (801a9f4 <RadioSetRxGenericConfig+0x2c4>)
 801a99c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801a9a0:	68bb      	ldr	r3, [r7, #8]
 801a9a2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801a9a6:	2b02      	cmp	r3, #2
 801a9a8:	d010      	beq.n	801a9cc <RadioSetRxGenericConfig+0x29c>
 801a9aa:	2b02      	cmp	r3, #2
 801a9ac:	dc2c      	bgt.n	801aa08 <RadioSetRxGenericConfig+0x2d8>
 801a9ae:	2b00      	cmp	r3, #0
 801a9b0:	d002      	beq.n	801a9b8 <RadioSetRxGenericConfig+0x288>
 801a9b2:	2b01      	cmp	r3, #1
 801a9b4:	d005      	beq.n	801a9c2 <RadioSetRxGenericConfig+0x292>
            break;
 801a9b6:	e027      	b.n	801aa08 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801a9b8:	4b0e      	ldr	r3, [pc, #56]	; (801a9f4 <RadioSetRxGenericConfig+0x2c4>)
 801a9ba:	2200      	movs	r2, #0
 801a9bc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a9c0:	e023      	b.n	801aa0a <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801a9c2:	4b0c      	ldr	r3, [pc, #48]	; (801a9f4 <RadioSetRxGenericConfig+0x2c4>)
 801a9c4:	2201      	movs	r2, #1
 801a9c6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a9ca:	e01e      	b.n	801aa0a <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801a9cc:	68bb      	ldr	r3, [r7, #8]
 801a9ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801a9d2:	2b0b      	cmp	r3, #11
 801a9d4:	d004      	beq.n	801a9e0 <RadioSetRxGenericConfig+0x2b0>
 801a9d6:	68bb      	ldr	r3, [r7, #8]
 801a9d8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801a9dc:	2b0c      	cmp	r3, #12
 801a9de:	d104      	bne.n	801a9ea <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801a9e0:	4b04      	ldr	r3, [pc, #16]	; (801a9f4 <RadioSetRxGenericConfig+0x2c4>)
 801a9e2:	2201      	movs	r2, #1
 801a9e4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a9e8:	e00f      	b.n	801aa0a <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801a9ea:	4b02      	ldr	r3, [pc, #8]	; (801a9f4 <RadioSetRxGenericConfig+0x2c4>)
 801a9ec:	2200      	movs	r2, #0
 801a9ee:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a9f2:	e00a      	b.n	801aa0a <RadioSetRxGenericConfig+0x2da>
 801a9f4:	20001be8 	.word	0x20001be8
 801a9f8:	20001be4 	.word	0x20001be4
 801a9fc:	20001c5c 	.word	0x20001c5c
 801aa00:	20001c20 	.word	0x20001c20
 801aa04:	20001bf6 	.word	0x20001bf6
            break;
 801aa08:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801aa0a:	4b28      	ldr	r3, [pc, #160]	; (801aaac <RadioSetRxGenericConfig+0x37c>)
 801aa0c:	2201      	movs	r2, #1
 801aa0e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801aa10:	68bb      	ldr	r3, [r7, #8]
 801aa12:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 801aa14:	4b25      	ldr	r3, [pc, #148]	; (801aaac <RadioSetRxGenericConfig+0x37c>)
 801aa16:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801aa18:	68bb      	ldr	r3, [r7, #8]
 801aa1a:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 801aa1e:	4b23      	ldr	r3, [pc, #140]	; (801aaac <RadioSetRxGenericConfig+0x37c>)
 801aa20:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801aa22:	4a22      	ldr	r2, [pc, #136]	; (801aaac <RadioSetRxGenericConfig+0x37c>)
 801aa24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801aa28:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801aa2a:	68bb      	ldr	r3, [r7, #8]
 801aa2c:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 801aa30:	4b1e      	ldr	r3, [pc, #120]	; (801aaac <RadioSetRxGenericConfig+0x37c>)
 801aa32:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801aa36:	68bb      	ldr	r3, [r7, #8]
 801aa38:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 801aa3c:	4b1b      	ldr	r3, [pc, #108]	; (801aaac <RadioSetRxGenericConfig+0x37c>)
 801aa3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 801aa42:	f7ff f98c 	bl	8019d5e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801aa46:	2001      	movs	r0, #1
 801aa48:	f7fe fb20 	bl	801908c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801aa4c:	4818      	ldr	r0, [pc, #96]	; (801aab0 <RadioSetRxGenericConfig+0x380>)
 801aa4e:	f000 ff7d 	bl	801b94c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801aa52:	4818      	ldr	r0, [pc, #96]	; (801aab4 <RadioSetRxGenericConfig+0x384>)
 801aa54:	f001 f84c 	bl	801baf0 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801aa58:	4b14      	ldr	r3, [pc, #80]	; (801aaac <RadioSetRxGenericConfig+0x37c>)
 801aa5a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801aa5e:	2b01      	cmp	r3, #1
 801aa60:	d10d      	bne.n	801aa7e <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801aa62:	f240 7036 	movw	r0, #1846	; 0x736
 801aa66:	f001 f99f 	bl	801bda8 <SUBGRF_ReadRegister>
 801aa6a:	4603      	mov	r3, r0
 801aa6c:	f023 0304 	bic.w	r3, r3, #4
 801aa70:	b2db      	uxtb	r3, r3
 801aa72:	4619      	mov	r1, r3
 801aa74:	f240 7036 	movw	r0, #1846	; 0x736
 801aa78:	f001 f982 	bl	801bd80 <SUBGRF_WriteRegister>
 801aa7c:	e00c      	b.n	801aa98 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801aa7e:	f240 7036 	movw	r0, #1846	; 0x736
 801aa82:	f001 f991 	bl	801bda8 <SUBGRF_ReadRegister>
 801aa86:	4603      	mov	r3, r0
 801aa88:	f043 0304 	orr.w	r3, r3, #4
 801aa8c:	b2db      	uxtb	r3, r3
 801aa8e:	4619      	mov	r1, r3
 801aa90:	f240 7036 	movw	r0, #1846	; 0x736
 801aa94:	f001 f974 	bl	801bd80 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 801aa98:	4b04      	ldr	r3, [pc, #16]	; (801aaac <RadioSetRxGenericConfig+0x37c>)
 801aa9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801aa9e:	609a      	str	r2, [r3, #8]
        break;
 801aaa0:	bf00      	nop
    }
    return status;
 801aaa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801aaa4:	4618      	mov	r0, r3
 801aaa6:	3730      	adds	r7, #48	; 0x30
 801aaa8:	46bd      	mov	sp, r7
 801aaaa:	bd80      	pop	{r7, pc}
 801aaac:	20001be8 	.word	0x20001be8
 801aab0:	20001c20 	.word	0x20001c20
 801aab4:	20001bf6 	.word	0x20001bf6

0801aab8 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 801aab8:	b580      	push	{r7, lr}
 801aaba:	b08e      	sub	sp, #56	; 0x38
 801aabc:	af00      	add	r7, sp, #0
 801aabe:	60b9      	str	r1, [r7, #8]
 801aac0:	607b      	str	r3, [r7, #4]
 801aac2:	4603      	mov	r3, r0
 801aac4:	73fb      	strb	r3, [r7, #15]
 801aac6:	4613      	mov	r3, r2
 801aac8:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 801aaca:	2300      	movs	r3, #0
 801aacc:	62fb      	str	r3, [r7, #44]	; 0x2c
 801aace:	2300      	movs	r3, #0
 801aad0:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801aad2:	f001 fc3c 	bl	801c34e <RFW_DeInit>
    switch( modem )
 801aad6:	7bfb      	ldrb	r3, [r7, #15]
 801aad8:	2b03      	cmp	r3, #3
 801aada:	f200 8204 	bhi.w	801aee6 <RadioSetTxGenericConfig+0x42e>
 801aade:	a201      	add	r2, pc, #4	; (adr r2, 801aae4 <RadioSetTxGenericConfig+0x2c>)
 801aae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801aae4:	0801ac69 	.word	0x0801ac69
 801aae8:	0801adb1 	.word	0x0801adb1
 801aaec:	0801aea9 	.word	0x0801aea9
 801aaf0:	0801aaf5 	.word	0x0801aaf5
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 801aaf4:	68bb      	ldr	r3, [r7, #8]
 801aaf6:	7c9b      	ldrb	r3, [r3, #18]
 801aaf8:	2b08      	cmp	r3, #8
 801aafa:	d902      	bls.n	801ab02 <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 801aafc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ab00:	e206      	b.n	801af10 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 801ab02:	68bb      	ldr	r3, [r7, #8]
 801ab04:	6899      	ldr	r1, [r3, #8]
 801ab06:	68bb      	ldr	r3, [r7, #8]
 801ab08:	7c9b      	ldrb	r3, [r3, #18]
 801ab0a:	b29a      	uxth	r2, r3
 801ab0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801ab10:	4618      	mov	r0, r3
 801ab12:	f001 fd0f 	bl	801c534 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 801ab16:	68bb      	ldr	r3, [r7, #8]
 801ab18:	681b      	ldr	r3, [r3, #0]
 801ab1a:	2b00      	cmp	r3, #0
 801ab1c:	d102      	bne.n	801ab24 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 801ab1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ab22:	e1f5      	b.n	801af10 <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 801ab24:	68bb      	ldr	r3, [r7, #8]
 801ab26:	681b      	ldr	r3, [r3, #0]
 801ab28:	f242 7210 	movw	r2, #10000	; 0x2710
 801ab2c:	4293      	cmp	r3, r2
 801ab2e:	d813      	bhi.n	801ab58 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 801ab30:	2302      	movs	r3, #2
 801ab32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 801ab36:	4b99      	ldr	r3, [pc, #612]	; (801ad9c <RadioSetTxGenericConfig+0x2e4>)
 801ab38:	2203      	movs	r2, #3
 801ab3a:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 801ab3c:	4b97      	ldr	r3, [pc, #604]	; (801ad9c <RadioSetTxGenericConfig+0x2e4>)
 801ab3e:	2203      	movs	r2, #3
 801ab40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801ab44:	68bb      	ldr	r3, [r7, #8]
 801ab46:	681b      	ldr	r3, [r3, #0]
 801ab48:	4a94      	ldr	r2, [pc, #592]	; (801ad9c <RadioSetTxGenericConfig+0x2e4>)
 801ab4a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801ab4c:	68bb      	ldr	r3, [r7, #8]
 801ab4e:	7cda      	ldrb	r2, [r3, #19]
 801ab50:	4b92      	ldr	r3, [pc, #584]	; (801ad9c <RadioSetTxGenericConfig+0x2e4>)
 801ab52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801ab56:	e017      	b.n	801ab88 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 801ab58:	2300      	movs	r3, #0
 801ab5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801ab5e:	4b8f      	ldr	r3, [pc, #572]	; (801ad9c <RadioSetTxGenericConfig+0x2e4>)
 801ab60:	2200      	movs	r2, #0
 801ab62:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801ab64:	4b8d      	ldr	r3, [pc, #564]	; (801ad9c <RadioSetTxGenericConfig+0x2e4>)
 801ab66:	2200      	movs	r2, #0
 801ab68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801ab6c:	68bb      	ldr	r3, [r7, #8]
 801ab6e:	681b      	ldr	r3, [r3, #0]
 801ab70:	4a8a      	ldr	r2, [pc, #552]	; (801ad9c <RadioSetTxGenericConfig+0x2e4>)
 801ab72:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801ab74:	68bb      	ldr	r3, [r7, #8]
 801ab76:	7cda      	ldrb	r2, [r3, #19]
 801ab78:	4b88      	ldr	r3, [pc, #544]	; (801ad9c <RadioSetTxGenericConfig+0x2e4>)
 801ab7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 801ab7e:	68bb      	ldr	r3, [r7, #8]
 801ab80:	681b      	ldr	r3, [r3, #0]
 801ab82:	089b      	lsrs	r3, r3, #2
 801ab84:	4a85      	ldr	r2, [pc, #532]	; (801ad9c <RadioSetTxGenericConfig+0x2e4>)
 801ab86:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 801ab88:	68bb      	ldr	r3, [r7, #8]
 801ab8a:	685b      	ldr	r3, [r3, #4]
 801ab8c:	b29b      	uxth	r3, r3
 801ab8e:	00db      	lsls	r3, r3, #3
 801ab90:	b29a      	uxth	r2, r3
 801ab92:	4b82      	ldr	r3, [pc, #520]	; (801ad9c <RadioSetTxGenericConfig+0x2e4>)
 801ab94:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801ab96:	4b81      	ldr	r3, [pc, #516]	; (801ad9c <RadioSetTxGenericConfig+0x2e4>)
 801ab98:	2204      	movs	r2, #4
 801ab9a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 801ab9c:	68bb      	ldr	r3, [r7, #8]
 801ab9e:	7c9b      	ldrb	r3, [r3, #18]
 801aba0:	00db      	lsls	r3, r3, #3
 801aba2:	b2da      	uxtb	r2, r3
 801aba4:	4b7d      	ldr	r3, [pc, #500]	; (801ad9c <RadioSetTxGenericConfig+0x2e4>)
 801aba6:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801aba8:	4b7c      	ldr	r3, [pc, #496]	; (801ad9c <RadioSetTxGenericConfig+0x2e4>)
 801abaa:	2200      	movs	r2, #0
 801abac:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801abae:	68bb      	ldr	r3, [r7, #8]
 801abb0:	7d9b      	ldrb	r3, [r3, #22]
 801abb2:	2b02      	cmp	r3, #2
 801abb4:	d003      	beq.n	801abbe <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801abb6:	68bb      	ldr	r3, [r7, #8]
 801abb8:	7d1b      	ldrb	r3, [r3, #20]
 801abba:	2b02      	cmp	r3, #2
 801abbc:	d12b      	bne.n	801ac16 <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801abbe:	68bb      	ldr	r3, [r7, #8]
 801abc0:	7d5b      	ldrb	r3, [r3, #21]
 801abc2:	2bf1      	cmp	r3, #241	; 0xf1
 801abc4:	d00a      	beq.n	801abdc <RadioSetTxGenericConfig+0x124>
 801abc6:	68bb      	ldr	r3, [r7, #8]
 801abc8:	7d5b      	ldrb	r3, [r3, #21]
 801abca:	2bf2      	cmp	r3, #242	; 0xf2
 801abcc:	d006      	beq.n	801abdc <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801abce:	68bb      	ldr	r3, [r7, #8]
 801abd0:	7d5b      	ldrb	r3, [r3, #21]
 801abd2:	2b01      	cmp	r3, #1
 801abd4:	d002      	beq.n	801abdc <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 801abd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801abda:	e199      	b.n	801af10 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 801abdc:	68bb      	ldr	r3, [r7, #8]
 801abde:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 801abe0:	2301      	movs	r3, #1
 801abe2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801abe6:	4b6e      	ldr	r3, [pc, #440]	; (801ada0 <RadioSetTxGenericConfig+0x2e8>)
 801abe8:	6819      	ldr	r1, [r3, #0]
 801abea:	f107 0320 	add.w	r3, r7, #32
 801abee:	4a6d      	ldr	r2, [pc, #436]	; (801ada4 <RadioSetTxGenericConfig+0x2ec>)
 801abf0:	4618      	mov	r0, r3
 801abf2:	f001 fb9f 	bl	801c334 <RFW_Init>
 801abf6:	4603      	mov	r3, r0
 801abf8:	2b00      	cmp	r3, #0
 801abfa:	d002      	beq.n	801ac02 <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 801abfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ac00:	e186      	b.n	801af10 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801ac02:	4b66      	ldr	r3, [pc, #408]	; (801ad9c <RadioSetTxGenericConfig+0x2e4>)
 801ac04:	2200      	movs	r2, #0
 801ac06:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801ac08:	4b64      	ldr	r3, [pc, #400]	; (801ad9c <RadioSetTxGenericConfig+0x2e4>)
 801ac0a:	2201      	movs	r2, #1
 801ac0c:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801ac0e:	4b63      	ldr	r3, [pc, #396]	; (801ad9c <RadioSetTxGenericConfig+0x2e4>)
 801ac10:	2200      	movs	r2, #0
 801ac12:	755a      	strb	r2, [r3, #21]
        {
 801ac14:	e00b      	b.n	801ac2e <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 801ac16:	68bb      	ldr	r3, [r7, #8]
 801ac18:	7d5a      	ldrb	r2, [r3, #21]
 801ac1a:	4b60      	ldr	r3, [pc, #384]	; (801ad9c <RadioSetTxGenericConfig+0x2e4>)
 801ac1c:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 801ac1e:	68bb      	ldr	r3, [r7, #8]
 801ac20:	7d9a      	ldrb	r2, [r3, #22]
 801ac22:	4b5e      	ldr	r3, [pc, #376]	; (801ad9c <RadioSetTxGenericConfig+0x2e4>)
 801ac24:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 801ac26:	68bb      	ldr	r3, [r7, #8]
 801ac28:	7d1a      	ldrb	r2, [r3, #20]
 801ac2a:	4b5c      	ldr	r3, [pc, #368]	; (801ad9c <RadioSetTxGenericConfig+0x2e4>)
 801ac2c:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801ac2e:	f7ff f896 	bl	8019d5e <RadioStandby>
        RadioSetModem( radio_modem );
 801ac32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801ac36:	4618      	mov	r0, r3
 801ac38:	f7fe fa28 	bl	801908c <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801ac3c:	485a      	ldr	r0, [pc, #360]	; (801ada8 <RadioSetTxGenericConfig+0x2f0>)
 801ac3e:	f000 fe85 	bl	801b94c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ac42:	485a      	ldr	r0, [pc, #360]	; (801adac <RadioSetTxGenericConfig+0x2f4>)
 801ac44:	f000 ff54 	bl	801baf0 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801ac48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801ac4c:	4618      	mov	r0, r3
 801ac4e:	f000 fa18 	bl	801b082 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 801ac52:	68bb      	ldr	r3, [r7, #8]
 801ac54:	8a1b      	ldrh	r3, [r3, #16]
 801ac56:	4618      	mov	r0, r3
 801ac58:	f000 fa62 	bl	801b120 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 801ac5c:	68bb      	ldr	r3, [r7, #8]
 801ac5e:	899b      	ldrh	r3, [r3, #12]
 801ac60:	4618      	mov	r0, r3
 801ac62:	f000 fa3d 	bl	801b0e0 <SUBGRF_SetCrcPolynomial>
        break;
 801ac66:	e13f      	b.n	801aee8 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 801ac68:	68bb      	ldr	r3, [r7, #8]
 801ac6a:	681b      	ldr	r3, [r3, #0]
 801ac6c:	2b00      	cmp	r3, #0
 801ac6e:	d102      	bne.n	801ac76 <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 801ac70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ac74:	e14c      	b.n	801af10 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 801ac76:	68bb      	ldr	r3, [r7, #8]
 801ac78:	7c9b      	ldrb	r3, [r3, #18]
 801ac7a:	2b08      	cmp	r3, #8
 801ac7c:	d902      	bls.n	801ac84 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 801ac7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ac82:	e145      	b.n	801af10 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801ac84:	68bb      	ldr	r3, [r7, #8]
 801ac86:	6899      	ldr	r1, [r3, #8]
 801ac88:	68bb      	ldr	r3, [r7, #8]
 801ac8a:	7c9b      	ldrb	r3, [r3, #18]
 801ac8c:	b29a      	uxth	r2, r3
 801ac8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801ac92:	4618      	mov	r0, r3
 801ac94:	f001 fc4e 	bl	801c534 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801ac98:	4b40      	ldr	r3, [pc, #256]	; (801ad9c <RadioSetTxGenericConfig+0x2e4>)
 801ac9a:	2200      	movs	r2, #0
 801ac9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801aca0:	68bb      	ldr	r3, [r7, #8]
 801aca2:	681b      	ldr	r3, [r3, #0]
 801aca4:	4a3d      	ldr	r2, [pc, #244]	; (801ad9c <RadioSetTxGenericConfig+0x2e4>)
 801aca6:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801aca8:	68bb      	ldr	r3, [r7, #8]
 801acaa:	7cda      	ldrb	r2, [r3, #19]
 801acac:	4b3b      	ldr	r3, [pc, #236]	; (801ad9c <RadioSetTxGenericConfig+0x2e4>)
 801acae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801acb2:	68bb      	ldr	r3, [r7, #8]
 801acb4:	699b      	ldr	r3, [r3, #24]
 801acb6:	4a39      	ldr	r2, [pc, #228]	; (801ad9c <RadioSetTxGenericConfig+0x2e4>)
 801acb8:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801acba:	4b38      	ldr	r3, [pc, #224]	; (801ad9c <RadioSetTxGenericConfig+0x2e4>)
 801acbc:	2200      	movs	r2, #0
 801acbe:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 801acc0:	68bb      	ldr	r3, [r7, #8]
 801acc2:	685b      	ldr	r3, [r3, #4]
 801acc4:	b29b      	uxth	r3, r3
 801acc6:	00db      	lsls	r3, r3, #3
 801acc8:	b29a      	uxth	r2, r3
 801acca:	4b34      	ldr	r3, [pc, #208]	; (801ad9c <RadioSetTxGenericConfig+0x2e4>)
 801accc:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801acce:	4b33      	ldr	r3, [pc, #204]	; (801ad9c <RadioSetTxGenericConfig+0x2e4>)
 801acd0:	2204      	movs	r2, #4
 801acd2:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801acd4:	68bb      	ldr	r3, [r7, #8]
 801acd6:	7c9b      	ldrb	r3, [r3, #18]
 801acd8:	00db      	lsls	r3, r3, #3
 801acda:	b2da      	uxtb	r2, r3
 801acdc:	4b2f      	ldr	r3, [pc, #188]	; (801ad9c <RadioSetTxGenericConfig+0x2e4>)
 801acde:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801ace0:	4b2e      	ldr	r3, [pc, #184]	; (801ad9c <RadioSetTxGenericConfig+0x2e4>)
 801ace2:	2200      	movs	r2, #0
 801ace4:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801ace6:	68bb      	ldr	r3, [r7, #8]
 801ace8:	7d9b      	ldrb	r3, [r3, #22]
 801acea:	2b02      	cmp	r3, #2
 801acec:	d003      	beq.n	801acf6 <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801acee:	68bb      	ldr	r3, [r7, #8]
 801acf0:	7d1b      	ldrb	r3, [r3, #20]
 801acf2:	2b02      	cmp	r3, #2
 801acf4:	d12a      	bne.n	801ad4c <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801acf6:	68bb      	ldr	r3, [r7, #8]
 801acf8:	7d5b      	ldrb	r3, [r3, #21]
 801acfa:	2bf1      	cmp	r3, #241	; 0xf1
 801acfc:	d00a      	beq.n	801ad14 <RadioSetTxGenericConfig+0x25c>
 801acfe:	68bb      	ldr	r3, [r7, #8]
 801ad00:	7d5b      	ldrb	r3, [r3, #21]
 801ad02:	2bf2      	cmp	r3, #242	; 0xf2
 801ad04:	d006      	beq.n	801ad14 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801ad06:	68bb      	ldr	r3, [r7, #8]
 801ad08:	7d5b      	ldrb	r3, [r3, #21]
 801ad0a:	2b01      	cmp	r3, #1
 801ad0c:	d002      	beq.n	801ad14 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 801ad0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ad12:	e0fd      	b.n	801af10 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 801ad14:	2301      	movs	r3, #1
 801ad16:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 801ad18:	68bb      	ldr	r3, [r7, #8]
 801ad1a:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801ad1c:	4b20      	ldr	r3, [pc, #128]	; (801ada0 <RadioSetTxGenericConfig+0x2e8>)
 801ad1e:	6819      	ldr	r1, [r3, #0]
 801ad20:	f107 0314 	add.w	r3, r7, #20
 801ad24:	4a1f      	ldr	r2, [pc, #124]	; (801ada4 <RadioSetTxGenericConfig+0x2ec>)
 801ad26:	4618      	mov	r0, r3
 801ad28:	f001 fb04 	bl	801c334 <RFW_Init>
 801ad2c:	4603      	mov	r3, r0
 801ad2e:	2b00      	cmp	r3, #0
 801ad30:	d002      	beq.n	801ad38 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 801ad32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ad36:	e0eb      	b.n	801af10 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801ad38:	4b18      	ldr	r3, [pc, #96]	; (801ad9c <RadioSetTxGenericConfig+0x2e4>)
 801ad3a:	2200      	movs	r2, #0
 801ad3c:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801ad3e:	4b17      	ldr	r3, [pc, #92]	; (801ad9c <RadioSetTxGenericConfig+0x2e4>)
 801ad40:	2201      	movs	r2, #1
 801ad42:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801ad44:	4b15      	ldr	r3, [pc, #84]	; (801ad9c <RadioSetTxGenericConfig+0x2e4>)
 801ad46:	2200      	movs	r2, #0
 801ad48:	755a      	strb	r2, [r3, #21]
        {
 801ad4a:	e00b      	b.n	801ad64 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801ad4c:	68bb      	ldr	r3, [r7, #8]
 801ad4e:	7d5a      	ldrb	r2, [r3, #21]
 801ad50:	4b12      	ldr	r3, [pc, #72]	; (801ad9c <RadioSetTxGenericConfig+0x2e4>)
 801ad52:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801ad54:	68bb      	ldr	r3, [r7, #8]
 801ad56:	7d9a      	ldrb	r2, [r3, #22]
 801ad58:	4b10      	ldr	r3, [pc, #64]	; (801ad9c <RadioSetTxGenericConfig+0x2e4>)
 801ad5a:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 801ad5c:	68bb      	ldr	r3, [r7, #8]
 801ad5e:	7d1a      	ldrb	r2, [r3, #20]
 801ad60:	4b0e      	ldr	r3, [pc, #56]	; (801ad9c <RadioSetTxGenericConfig+0x2e4>)
 801ad62:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801ad64:	f7fe fffb 	bl	8019d5e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801ad68:	2000      	movs	r0, #0
 801ad6a:	f7fe f98f 	bl	801908c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801ad6e:	480e      	ldr	r0, [pc, #56]	; (801ada8 <RadioSetTxGenericConfig+0x2f0>)
 801ad70:	f000 fdec 	bl	801b94c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ad74:	480d      	ldr	r0, [pc, #52]	; (801adac <RadioSetTxGenericConfig+0x2f4>)
 801ad76:	f000 febb 	bl	801baf0 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801ad7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801ad7e:	4618      	mov	r0, r3
 801ad80:	f000 f97f 	bl	801b082 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801ad84:	68bb      	ldr	r3, [r7, #8]
 801ad86:	8a1b      	ldrh	r3, [r3, #16]
 801ad88:	4618      	mov	r0, r3
 801ad8a:	f000 f9c9 	bl	801b120 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801ad8e:	68bb      	ldr	r3, [r7, #8]
 801ad90:	899b      	ldrh	r3, [r3, #12]
 801ad92:	4618      	mov	r0, r3
 801ad94:	f000 f9a4 	bl	801b0e0 <SUBGRF_SetCrcPolynomial>
        break;
 801ad98:	e0a6      	b.n	801aee8 <RadioSetTxGenericConfig+0x430>
 801ad9a:	bf00      	nop
 801ad9c:	20001be8 	.word	0x20001be8
 801ada0:	20001be4 	.word	0x20001be4
 801ada4:	20001c44 	.word	0x20001c44
 801ada8:	20001c20 	.word	0x20001c20
 801adac:	20001bf6 	.word	0x20001bf6
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801adb0:	4b59      	ldr	r3, [pc, #356]	; (801af18 <RadioSetTxGenericConfig+0x460>)
 801adb2:	2201      	movs	r2, #1
 801adb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801adb8:	68bb      	ldr	r3, [r7, #8]
 801adba:	781a      	ldrb	r2, [r3, #0]
 801adbc:	4b56      	ldr	r3, [pc, #344]	; (801af18 <RadioSetTxGenericConfig+0x460>)
 801adbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801adc2:	68bb      	ldr	r3, [r7, #8]
 801adc4:	785a      	ldrb	r2, [r3, #1]
 801adc6:	4b54      	ldr	r3, [pc, #336]	; (801af18 <RadioSetTxGenericConfig+0x460>)
 801adc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801adcc:	68bb      	ldr	r3, [r7, #8]
 801adce:	789a      	ldrb	r2, [r3, #2]
 801add0:	4b51      	ldr	r3, [pc, #324]	; (801af18 <RadioSetTxGenericConfig+0x460>)
 801add2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801add6:	68bb      	ldr	r3, [r7, #8]
 801add8:	78db      	ldrb	r3, [r3, #3]
 801adda:	2b02      	cmp	r3, #2
 801addc:	d010      	beq.n	801ae00 <RadioSetTxGenericConfig+0x348>
 801adde:	2b02      	cmp	r3, #2
 801ade0:	dc20      	bgt.n	801ae24 <RadioSetTxGenericConfig+0x36c>
 801ade2:	2b00      	cmp	r3, #0
 801ade4:	d002      	beq.n	801adec <RadioSetTxGenericConfig+0x334>
 801ade6:	2b01      	cmp	r3, #1
 801ade8:	d005      	beq.n	801adf6 <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 801adea:	e01b      	b.n	801ae24 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801adec:	4b4a      	ldr	r3, [pc, #296]	; (801af18 <RadioSetTxGenericConfig+0x460>)
 801adee:	2200      	movs	r2, #0
 801adf0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801adf4:	e017      	b.n	801ae26 <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801adf6:	4b48      	ldr	r3, [pc, #288]	; (801af18 <RadioSetTxGenericConfig+0x460>)
 801adf8:	2201      	movs	r2, #1
 801adfa:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801adfe:	e012      	b.n	801ae26 <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801ae00:	68bb      	ldr	r3, [r7, #8]
 801ae02:	781b      	ldrb	r3, [r3, #0]
 801ae04:	2b0b      	cmp	r3, #11
 801ae06:	d003      	beq.n	801ae10 <RadioSetTxGenericConfig+0x358>
 801ae08:	68bb      	ldr	r3, [r7, #8]
 801ae0a:	781b      	ldrb	r3, [r3, #0]
 801ae0c:	2b0c      	cmp	r3, #12
 801ae0e:	d104      	bne.n	801ae1a <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801ae10:	4b41      	ldr	r3, [pc, #260]	; (801af18 <RadioSetTxGenericConfig+0x460>)
 801ae12:	2201      	movs	r2, #1
 801ae14:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801ae18:	e005      	b.n	801ae26 <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801ae1a:	4b3f      	ldr	r3, [pc, #252]	; (801af18 <RadioSetTxGenericConfig+0x460>)
 801ae1c:	2200      	movs	r2, #0
 801ae1e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801ae22:	e000      	b.n	801ae26 <RadioSetTxGenericConfig+0x36e>
            break;
 801ae24:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801ae26:	4b3c      	ldr	r3, [pc, #240]	; (801af18 <RadioSetTxGenericConfig+0x460>)
 801ae28:	2201      	movs	r2, #1
 801ae2a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801ae2c:	68bb      	ldr	r3, [r7, #8]
 801ae2e:	889a      	ldrh	r2, [r3, #4]
 801ae30:	4b39      	ldr	r3, [pc, #228]	; (801af18 <RadioSetTxGenericConfig+0x460>)
 801ae32:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801ae34:	68bb      	ldr	r3, [r7, #8]
 801ae36:	799a      	ldrb	r2, [r3, #6]
 801ae38:	4b37      	ldr	r3, [pc, #220]	; (801af18 <RadioSetTxGenericConfig+0x460>)
 801ae3a:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801ae3c:	68bb      	ldr	r3, [r7, #8]
 801ae3e:	79da      	ldrb	r2, [r3, #7]
 801ae40:	4b35      	ldr	r3, [pc, #212]	; (801af18 <RadioSetTxGenericConfig+0x460>)
 801ae42:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801ae46:	68bb      	ldr	r3, [r7, #8]
 801ae48:	7a1a      	ldrb	r2, [r3, #8]
 801ae4a:	4b33      	ldr	r3, [pc, #204]	; (801af18 <RadioSetTxGenericConfig+0x460>)
 801ae4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 801ae50:	f7fe ff85 	bl	8019d5e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801ae54:	2001      	movs	r0, #1
 801ae56:	f7fe f919 	bl	801908c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801ae5a:	4830      	ldr	r0, [pc, #192]	; (801af1c <RadioSetTxGenericConfig+0x464>)
 801ae5c:	f000 fd76 	bl	801b94c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ae60:	482f      	ldr	r0, [pc, #188]	; (801af20 <RadioSetTxGenericConfig+0x468>)
 801ae62:	f000 fe45 	bl	801baf0 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801ae66:	4b2c      	ldr	r3, [pc, #176]	; (801af18 <RadioSetTxGenericConfig+0x460>)
 801ae68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801ae6c:	2b06      	cmp	r3, #6
 801ae6e:	d10d      	bne.n	801ae8c <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801ae70:	f640 0089 	movw	r0, #2185	; 0x889
 801ae74:	f000 ff98 	bl	801bda8 <SUBGRF_ReadRegister>
 801ae78:	4603      	mov	r3, r0
 801ae7a:	f023 0304 	bic.w	r3, r3, #4
 801ae7e:	b2db      	uxtb	r3, r3
 801ae80:	4619      	mov	r1, r3
 801ae82:	f640 0089 	movw	r0, #2185	; 0x889
 801ae86:	f000 ff7b 	bl	801bd80 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 801ae8a:	e02d      	b.n	801aee8 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801ae8c:	f640 0089 	movw	r0, #2185	; 0x889
 801ae90:	f000 ff8a 	bl	801bda8 <SUBGRF_ReadRegister>
 801ae94:	4603      	mov	r3, r0
 801ae96:	f043 0304 	orr.w	r3, r3, #4
 801ae9a:	b2db      	uxtb	r3, r3
 801ae9c:	4619      	mov	r1, r3
 801ae9e:	f640 0089 	movw	r0, #2185	; 0x889
 801aea2:	f000 ff6d 	bl	801bd80 <SUBGRF_WriteRegister>
        break;
 801aea6:	e01f      	b.n	801aee8 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801aea8:	68bb      	ldr	r3, [r7, #8]
 801aeaa:	681b      	ldr	r3, [r3, #0]
 801aeac:	2b00      	cmp	r3, #0
 801aeae:	d004      	beq.n	801aeba <RadioSetTxGenericConfig+0x402>
 801aeb0:	68bb      	ldr	r3, [r7, #8]
 801aeb2:	681b      	ldr	r3, [r3, #0]
 801aeb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801aeb8:	d902      	bls.n	801aec0 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 801aeba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801aebe:	e027      	b.n	801af10 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 801aec0:	2003      	movs	r0, #3
 801aec2:	f7fe f8e3 	bl	801908c <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801aec6:	4b14      	ldr	r3, [pc, #80]	; (801af18 <RadioSetTxGenericConfig+0x460>)
 801aec8:	2202      	movs	r2, #2
 801aeca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 801aece:	68bb      	ldr	r3, [r7, #8]
 801aed0:	681b      	ldr	r3, [r3, #0]
 801aed2:	4a11      	ldr	r2, [pc, #68]	; (801af18 <RadioSetTxGenericConfig+0x460>)
 801aed4:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801aed6:	4b10      	ldr	r3, [pc, #64]	; (801af18 <RadioSetTxGenericConfig+0x460>)
 801aed8:	2216      	movs	r2, #22
 801aeda:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801aede:	480f      	ldr	r0, [pc, #60]	; (801af1c <RadioSetTxGenericConfig+0x464>)
 801aee0:	f000 fd34 	bl	801b94c <SUBGRF_SetModulationParams>
        break;
 801aee4:	e000      	b.n	801aee8 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 801aee6:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801aee8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801aeec:	4618      	mov	r0, r3
 801aeee:	f001 f863 	bl	801bfb8 <SUBGRF_SetRfTxPower>
 801aef2:	4603      	mov	r3, r0
 801aef4:	461a      	mov	r2, r3
 801aef6:	4b08      	ldr	r3, [pc, #32]	; (801af18 <RadioSetTxGenericConfig+0x460>)
 801aef8:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801aefc:	4b06      	ldr	r3, [pc, #24]	; (801af18 <RadioSetTxGenericConfig+0x460>)
 801aefe:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801af02:	4618      	mov	r0, r3
 801af04:	f001 fa37 	bl	801c376 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801af08:	4a03      	ldr	r2, [pc, #12]	; (801af18 <RadioSetTxGenericConfig+0x460>)
 801af0a:	687b      	ldr	r3, [r7, #4]
 801af0c:	6053      	str	r3, [r2, #4]
    return 0;
 801af0e:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801af10:	4618      	mov	r0, r3
 801af12:	3738      	adds	r7, #56	; 0x38
 801af14:	46bd      	mov	sp, r7
 801af16:	bd80      	pop	{r7, pc}
 801af18:	20001be8 	.word	0x20001be8
 801af1c:	20001c20 	.word	0x20001c20
 801af20:	20001bf6 	.word	0x20001bf6

0801af24 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 801af24:	b480      	push	{r7}
 801af26:	b085      	sub	sp, #20
 801af28:	af00      	add	r7, sp, #0
 801af2a:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 801af2c:	2301      	movs	r3, #1
 801af2e:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 801af30:	7bfb      	ldrb	r3, [r7, #15]
}
 801af32:	4618      	mov	r0, r3
 801af34:	3714      	adds	r7, #20
 801af36:	46bd      	mov	sp, r7
 801af38:	bc80      	pop	{r7}
 801af3a:	4770      	bx	lr

0801af3c <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 801af3c:	b480      	push	{r7}
 801af3e:	b083      	sub	sp, #12
 801af40:	af00      	add	r7, sp, #0
 801af42:	6078      	str	r0, [r7, #4]
 801af44:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 801af46:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 801af48:	4618      	mov	r0, r3
 801af4a:	370c      	adds	r7, #12
 801af4c:	46bd      	mov	sp, r7
 801af4e:	bc80      	pop	{r7}
 801af50:	4770      	bx	lr
	...

0801af54 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 801af54:	b580      	push	{r7, lr}
 801af56:	b084      	sub	sp, #16
 801af58:	af00      	add	r7, sp, #0
 801af5a:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 801af5c:	687b      	ldr	r3, [r7, #4]
 801af5e:	2b00      	cmp	r3, #0
 801af60:	d002      	beq.n	801af68 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801af62:	4a1d      	ldr	r2, [pc, #116]	; (801afd8 <SUBGRF_Init+0x84>)
 801af64:	687b      	ldr	r3, [r7, #4]
 801af66:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 801af68:	f7e6 ff7e 	bl	8001e68 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801af6c:	2002      	movs	r0, #2
 801af6e:	f001 f8ff 	bl	801c170 <Radio_SMPS_Set>

    ImageCalibrated = false;
 801af72:	4b1a      	ldr	r3, [pc, #104]	; (801afdc <SUBGRF_Init+0x88>)
 801af74:	2200      	movs	r2, #0
 801af76:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 801af78:	2000      	movs	r0, #0
 801af7a:	f000 f97d 	bl	801b278 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801af7e:	f7ef ff73 	bl	800ae68 <RBI_IsTCXO>
 801af82:	4603      	mov	r3, r0
 801af84:	2b01      	cmp	r3, #1
 801af86:	d10e      	bne.n	801afa6 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801af88:	2140      	movs	r1, #64	; 0x40
 801af8a:	2001      	movs	r0, #1
 801af8c:	f000 fb82 	bl	801b694 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801af90:	2100      	movs	r1, #0
 801af92:	f640 1011 	movw	r0, #2321	; 0x911
 801af96:	f000 fef3 	bl	801bd80 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801af9a:	237f      	movs	r3, #127	; 0x7f
 801af9c:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801af9e:	7b38      	ldrb	r0, [r7, #12]
 801afa0:	f000 fa8b 	bl	801b4ba <SUBGRF_Calibrate>
 801afa4:	e009      	b.n	801afba <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801afa6:	2120      	movs	r1, #32
 801afa8:	f640 1011 	movw	r0, #2321	; 0x911
 801afac:	f000 fee8 	bl	801bd80 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801afb0:	2120      	movs	r1, #32
 801afb2:	f640 1012 	movw	r0, #2322	; 0x912
 801afb6:	f000 fee3 	bl	801bd80 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801afba:	210e      	movs	r1, #14
 801afbc:	f640 101f 	movw	r0, #2335	; 0x91f
 801afc0:	f000 fede 	bl	801bd80 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 801afc4:	f7ef ff34 	bl	800ae30 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801afc8:	4b05      	ldr	r3, [pc, #20]	; (801afe0 <SUBGRF_Init+0x8c>)
 801afca:	2201      	movs	r2, #1
 801afcc:	701a      	strb	r2, [r3, #0]
}
 801afce:	bf00      	nop
 801afd0:	3710      	adds	r7, #16
 801afd2:	46bd      	mov	sp, r7
 801afd4:	bd80      	pop	{r7, pc}
 801afd6:	bf00      	nop
 801afd8:	20001c80 	.word	0x20001c80
 801afdc:	20001c7c 	.word	0x20001c7c
 801afe0:	20001c74 	.word	0x20001c74

0801afe4 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801afe4:	b480      	push	{r7}
 801afe6:	af00      	add	r7, sp, #0
    return OperatingMode;
 801afe8:	4b02      	ldr	r3, [pc, #8]	; (801aff4 <SUBGRF_GetOperatingMode+0x10>)
 801afea:	781b      	ldrb	r3, [r3, #0]
}
 801afec:	4618      	mov	r0, r3
 801afee:	46bd      	mov	sp, r7
 801aff0:	bc80      	pop	{r7}
 801aff2:	4770      	bx	lr
 801aff4:	20001c74 	.word	0x20001c74

0801aff8 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 801aff8:	b580      	push	{r7, lr}
 801affa:	b082      	sub	sp, #8
 801affc:	af00      	add	r7, sp, #0
 801affe:	6078      	str	r0, [r7, #4]
 801b000:	460b      	mov	r3, r1
 801b002:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801b004:	78fb      	ldrb	r3, [r7, #3]
 801b006:	461a      	mov	r2, r3
 801b008:	6879      	ldr	r1, [r7, #4]
 801b00a:	2000      	movs	r0, #0
 801b00c:	f000 ff24 	bl	801be58 <SUBGRF_WriteBuffer>
}
 801b010:	bf00      	nop
 801b012:	3708      	adds	r7, #8
 801b014:	46bd      	mov	sp, r7
 801b016:	bd80      	pop	{r7, pc}

0801b018 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 801b018:	b580      	push	{r7, lr}
 801b01a:	b086      	sub	sp, #24
 801b01c:	af00      	add	r7, sp, #0
 801b01e:	60f8      	str	r0, [r7, #12]
 801b020:	60b9      	str	r1, [r7, #8]
 801b022:	4613      	mov	r3, r2
 801b024:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801b026:	2300      	movs	r3, #0
 801b028:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801b02a:	f107 0317 	add.w	r3, r7, #23
 801b02e:	4619      	mov	r1, r3
 801b030:	68b8      	ldr	r0, [r7, #8]
 801b032:	f000 fe27 	bl	801bc84 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801b036:	68bb      	ldr	r3, [r7, #8]
 801b038:	781b      	ldrb	r3, [r3, #0]
 801b03a:	79fa      	ldrb	r2, [r7, #7]
 801b03c:	429a      	cmp	r2, r3
 801b03e:	d201      	bcs.n	801b044 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801b040:	2301      	movs	r3, #1
 801b042:	e007      	b.n	801b054 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801b044:	7df8      	ldrb	r0, [r7, #23]
 801b046:	68bb      	ldr	r3, [r7, #8]
 801b048:	781b      	ldrb	r3, [r3, #0]
 801b04a:	461a      	mov	r2, r3
 801b04c:	68f9      	ldr	r1, [r7, #12]
 801b04e:	f000 ff25 	bl	801be9c <SUBGRF_ReadBuffer>

    return 0;
 801b052:	2300      	movs	r3, #0
}
 801b054:	4618      	mov	r0, r3
 801b056:	3718      	adds	r7, #24
 801b058:	46bd      	mov	sp, r7
 801b05a:	bd80      	pop	{r7, pc}

0801b05c <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 801b05c:	b580      	push	{r7, lr}
 801b05e:	b084      	sub	sp, #16
 801b060:	af00      	add	r7, sp, #0
 801b062:	60f8      	str	r0, [r7, #12]
 801b064:	460b      	mov	r3, r1
 801b066:	607a      	str	r2, [r7, #4]
 801b068:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801b06a:	7afb      	ldrb	r3, [r7, #11]
 801b06c:	4619      	mov	r1, r3
 801b06e:	68f8      	ldr	r0, [r7, #12]
 801b070:	f7ff ffc2 	bl	801aff8 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801b074:	6878      	ldr	r0, [r7, #4]
 801b076:	f000 f91b 	bl	801b2b0 <SUBGRF_SetTx>
}
 801b07a:	bf00      	nop
 801b07c:	3710      	adds	r7, #16
 801b07e:	46bd      	mov	sp, r7
 801b080:	bd80      	pop	{r7, pc}

0801b082 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801b082:	b580      	push	{r7, lr}
 801b084:	b082      	sub	sp, #8
 801b086:	af00      	add	r7, sp, #0
 801b088:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801b08a:	2208      	movs	r2, #8
 801b08c:	6879      	ldr	r1, [r7, #4]
 801b08e:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 801b092:	f000 fe9d 	bl	801bdd0 <SUBGRF_WriteRegisters>
    return 0;
 801b096:	2300      	movs	r3, #0
}
 801b098:	4618      	mov	r0, r3
 801b09a:	3708      	adds	r7, #8
 801b09c:	46bd      	mov	sp, r7
 801b09e:	bd80      	pop	{r7, pc}

0801b0a0 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 801b0a0:	b580      	push	{r7, lr}
 801b0a2:	b084      	sub	sp, #16
 801b0a4:	af00      	add	r7, sp, #0
 801b0a6:	4603      	mov	r3, r0
 801b0a8:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801b0aa:	88fb      	ldrh	r3, [r7, #6]
 801b0ac:	0a1b      	lsrs	r3, r3, #8
 801b0ae:	b29b      	uxth	r3, r3
 801b0b0:	b2db      	uxtb	r3, r3
 801b0b2:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801b0b4:	88fb      	ldrh	r3, [r7, #6]
 801b0b6:	b2db      	uxtb	r3, r3
 801b0b8:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801b0ba:	f000 fb6f 	bl	801b79c <SUBGRF_GetPacketType>
 801b0be:	4603      	mov	r3, r0
 801b0c0:	2b00      	cmp	r3, #0
 801b0c2:	d108      	bne.n	801b0d6 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801b0c4:	f107 030c 	add.w	r3, r7, #12
 801b0c8:	2202      	movs	r2, #2
 801b0ca:	4619      	mov	r1, r3
 801b0cc:	f240 60bc 	movw	r0, #1724	; 0x6bc
 801b0d0:	f000 fe7e 	bl	801bdd0 <SUBGRF_WriteRegisters>
            break;
 801b0d4:	e000      	b.n	801b0d8 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801b0d6:	bf00      	nop
    }
}
 801b0d8:	bf00      	nop
 801b0da:	3710      	adds	r7, #16
 801b0dc:	46bd      	mov	sp, r7
 801b0de:	bd80      	pop	{r7, pc}

0801b0e0 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 801b0e0:	b580      	push	{r7, lr}
 801b0e2:	b084      	sub	sp, #16
 801b0e4:	af00      	add	r7, sp, #0
 801b0e6:	4603      	mov	r3, r0
 801b0e8:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801b0ea:	88fb      	ldrh	r3, [r7, #6]
 801b0ec:	0a1b      	lsrs	r3, r3, #8
 801b0ee:	b29b      	uxth	r3, r3
 801b0f0:	b2db      	uxtb	r3, r3
 801b0f2:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801b0f4:	88fb      	ldrh	r3, [r7, #6]
 801b0f6:	b2db      	uxtb	r3, r3
 801b0f8:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801b0fa:	f000 fb4f 	bl	801b79c <SUBGRF_GetPacketType>
 801b0fe:	4603      	mov	r3, r0
 801b100:	2b00      	cmp	r3, #0
 801b102:	d108      	bne.n	801b116 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801b104:	f107 030c 	add.w	r3, r7, #12
 801b108:	2202      	movs	r2, #2
 801b10a:	4619      	mov	r1, r3
 801b10c:	f240 60be 	movw	r0, #1726	; 0x6be
 801b110:	f000 fe5e 	bl	801bdd0 <SUBGRF_WriteRegisters>
            break;
 801b114:	e000      	b.n	801b118 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 801b116:	bf00      	nop
    }
}
 801b118:	bf00      	nop
 801b11a:	3710      	adds	r7, #16
 801b11c:	46bd      	mov	sp, r7
 801b11e:	bd80      	pop	{r7, pc}

0801b120 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 801b120:	b580      	push	{r7, lr}
 801b122:	b084      	sub	sp, #16
 801b124:	af00      	add	r7, sp, #0
 801b126:	4603      	mov	r3, r0
 801b128:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801b12a:	2300      	movs	r3, #0
 801b12c:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801b12e:	f000 fb35 	bl	801b79c <SUBGRF_GetPacketType>
 801b132:	4603      	mov	r3, r0
 801b134:	2b00      	cmp	r3, #0
 801b136:	d121      	bne.n	801b17c <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801b138:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801b13c:	f000 fe34 	bl	801bda8 <SUBGRF_ReadRegister>
 801b140:	4603      	mov	r3, r0
 801b142:	f023 0301 	bic.w	r3, r3, #1
 801b146:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801b148:	88fb      	ldrh	r3, [r7, #6]
 801b14a:	0a1b      	lsrs	r3, r3, #8
 801b14c:	b29b      	uxth	r3, r3
 801b14e:	b25b      	sxtb	r3, r3
 801b150:	f003 0301 	and.w	r3, r3, #1
 801b154:	b25a      	sxtb	r2, r3
 801b156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b15a:	4313      	orrs	r3, r2
 801b15c:	b25b      	sxtb	r3, r3
 801b15e:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801b160:	7bfb      	ldrb	r3, [r7, #15]
 801b162:	4619      	mov	r1, r3
 801b164:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801b168:	f000 fe0a 	bl	801bd80 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801b16c:	88fb      	ldrh	r3, [r7, #6]
 801b16e:	b2db      	uxtb	r3, r3
 801b170:	4619      	mov	r1, r3
 801b172:	f240 60b9 	movw	r0, #1721	; 0x6b9
 801b176:	f000 fe03 	bl	801bd80 <SUBGRF_WriteRegister>
            break;
 801b17a:	e000      	b.n	801b17e <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801b17c:	bf00      	nop
    }
}
 801b17e:	bf00      	nop
 801b180:	3710      	adds	r7, #16
 801b182:	46bd      	mov	sp, r7
 801b184:	bd80      	pop	{r7, pc}

0801b186 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801b186:	b580      	push	{r7, lr}
 801b188:	b082      	sub	sp, #8
 801b18a:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801b18c:	2300      	movs	r3, #0
 801b18e:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 801b190:	2300      	movs	r3, #0
 801b192:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801b194:	2300      	movs	r3, #0
 801b196:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801b198:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801b19c:	f000 fe04 	bl	801bda8 <SUBGRF_ReadRegister>
 801b1a0:	4603      	mov	r3, r0
 801b1a2:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801b1a4:	79fb      	ldrb	r3, [r7, #7]
 801b1a6:	f023 0301 	bic.w	r3, r3, #1
 801b1aa:	b2db      	uxtb	r3, r3
 801b1ac:	4619      	mov	r1, r3
 801b1ae:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801b1b2:	f000 fde5 	bl	801bd80 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801b1b6:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801b1ba:	f000 fdf5 	bl	801bda8 <SUBGRF_ReadRegister>
 801b1be:	4603      	mov	r3, r0
 801b1c0:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801b1c2:	79bb      	ldrb	r3, [r7, #6]
 801b1c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801b1c8:	b2db      	uxtb	r3, r3
 801b1ca:	4619      	mov	r1, r3
 801b1cc:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801b1d0:	f000 fdd6 	bl	801bd80 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801b1d4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801b1d8:	f000 f88a 	bl	801b2f0 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801b1dc:	463b      	mov	r3, r7
 801b1de:	2204      	movs	r2, #4
 801b1e0:	4619      	mov	r1, r3
 801b1e2:	f640 0019 	movw	r0, #2073	; 0x819
 801b1e6:	f000 fe15 	bl	801be14 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801b1ea:	2000      	movs	r0, #0
 801b1ec:	f000 f844 	bl	801b278 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801b1f0:	79fb      	ldrb	r3, [r7, #7]
 801b1f2:	4619      	mov	r1, r3
 801b1f4:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801b1f8:	f000 fdc2 	bl	801bd80 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801b1fc:	79bb      	ldrb	r3, [r7, #6]
 801b1fe:	4619      	mov	r1, r3
 801b200:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801b204:	f000 fdbc 	bl	801bd80 <SUBGRF_WriteRegister>

    return number;
 801b208:	683b      	ldr	r3, [r7, #0]
}
 801b20a:	4618      	mov	r0, r3
 801b20c:	3708      	adds	r7, #8
 801b20e:	46bd      	mov	sp, r7
 801b210:	bd80      	pop	{r7, pc}
	...

0801b214 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 801b214:	b580      	push	{r7, lr}
 801b216:	b084      	sub	sp, #16
 801b218:	af00      	add	r7, sp, #0
 801b21a:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801b21c:	2000      	movs	r0, #0
 801b21e:	f7ef fe0e 	bl	800ae3e <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801b222:	2002      	movs	r0, #2
 801b224:	f000 ffa4 	bl	801c170 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801b228:	793b      	ldrb	r3, [r7, #4]
 801b22a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801b22e:	b2db      	uxtb	r3, r3
 801b230:	009b      	lsls	r3, r3, #2
 801b232:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801b234:	793b      	ldrb	r3, [r7, #4]
 801b236:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801b23a:	b2db      	uxtb	r3, r3
 801b23c:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801b23e:	b25b      	sxtb	r3, r3
 801b240:	4313      	orrs	r3, r2
 801b242:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801b244:	793b      	ldrb	r3, [r7, #4]
 801b246:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801b24a:	b2db      	uxtb	r3, r3
 801b24c:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801b24e:	4313      	orrs	r3, r2
 801b250:	b25b      	sxtb	r3, r3
 801b252:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801b254:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801b256:	f107 030f 	add.w	r3, r7, #15
 801b25a:	2201      	movs	r2, #1
 801b25c:	4619      	mov	r1, r3
 801b25e:	2084      	movs	r0, #132	; 0x84
 801b260:	f000 fe3e 	bl	801bee0 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801b264:	4b03      	ldr	r3, [pc, #12]	; (801b274 <SUBGRF_SetSleep+0x60>)
 801b266:	2200      	movs	r2, #0
 801b268:	701a      	strb	r2, [r3, #0]
}
 801b26a:	bf00      	nop
 801b26c:	3710      	adds	r7, #16
 801b26e:	46bd      	mov	sp, r7
 801b270:	bd80      	pop	{r7, pc}
 801b272:	bf00      	nop
 801b274:	20001c74 	.word	0x20001c74

0801b278 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801b278:	b580      	push	{r7, lr}
 801b27a:	b082      	sub	sp, #8
 801b27c:	af00      	add	r7, sp, #0
 801b27e:	4603      	mov	r3, r0
 801b280:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801b282:	1dfb      	adds	r3, r7, #7
 801b284:	2201      	movs	r2, #1
 801b286:	4619      	mov	r1, r3
 801b288:	2080      	movs	r0, #128	; 0x80
 801b28a:	f000 fe29 	bl	801bee0 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801b28e:	79fb      	ldrb	r3, [r7, #7]
 801b290:	2b00      	cmp	r3, #0
 801b292:	d103      	bne.n	801b29c <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 801b294:	4b05      	ldr	r3, [pc, #20]	; (801b2ac <SUBGRF_SetStandby+0x34>)
 801b296:	2201      	movs	r2, #1
 801b298:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801b29a:	e002      	b.n	801b2a2 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 801b29c:	4b03      	ldr	r3, [pc, #12]	; (801b2ac <SUBGRF_SetStandby+0x34>)
 801b29e:	2202      	movs	r2, #2
 801b2a0:	701a      	strb	r2, [r3, #0]
}
 801b2a2:	bf00      	nop
 801b2a4:	3708      	adds	r7, #8
 801b2a6:	46bd      	mov	sp, r7
 801b2a8:	bd80      	pop	{r7, pc}
 801b2aa:	bf00      	nop
 801b2ac:	20001c74 	.word	0x20001c74

0801b2b0 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 801b2b0:	b580      	push	{r7, lr}
 801b2b2:	b084      	sub	sp, #16
 801b2b4:	af00      	add	r7, sp, #0
 801b2b6:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 801b2b8:	4b0c      	ldr	r3, [pc, #48]	; (801b2ec <SUBGRF_SetTx+0x3c>)
 801b2ba:	2204      	movs	r2, #4
 801b2bc:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801b2be:	687b      	ldr	r3, [r7, #4]
 801b2c0:	0c1b      	lsrs	r3, r3, #16
 801b2c2:	b2db      	uxtb	r3, r3
 801b2c4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801b2c6:	687b      	ldr	r3, [r7, #4]
 801b2c8:	0a1b      	lsrs	r3, r3, #8
 801b2ca:	b2db      	uxtb	r3, r3
 801b2cc:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801b2ce:	687b      	ldr	r3, [r7, #4]
 801b2d0:	b2db      	uxtb	r3, r3
 801b2d2:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801b2d4:	f107 030c 	add.w	r3, r7, #12
 801b2d8:	2203      	movs	r2, #3
 801b2da:	4619      	mov	r1, r3
 801b2dc:	2083      	movs	r0, #131	; 0x83
 801b2de:	f000 fdff 	bl	801bee0 <SUBGRF_WriteCommand>
}
 801b2e2:	bf00      	nop
 801b2e4:	3710      	adds	r7, #16
 801b2e6:	46bd      	mov	sp, r7
 801b2e8:	bd80      	pop	{r7, pc}
 801b2ea:	bf00      	nop
 801b2ec:	20001c74 	.word	0x20001c74

0801b2f0 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801b2f0:	b580      	push	{r7, lr}
 801b2f2:	b084      	sub	sp, #16
 801b2f4:	af00      	add	r7, sp, #0
 801b2f6:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801b2f8:	4b0c      	ldr	r3, [pc, #48]	; (801b32c <SUBGRF_SetRx+0x3c>)
 801b2fa:	2205      	movs	r2, #5
 801b2fc:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801b2fe:	687b      	ldr	r3, [r7, #4]
 801b300:	0c1b      	lsrs	r3, r3, #16
 801b302:	b2db      	uxtb	r3, r3
 801b304:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801b306:	687b      	ldr	r3, [r7, #4]
 801b308:	0a1b      	lsrs	r3, r3, #8
 801b30a:	b2db      	uxtb	r3, r3
 801b30c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801b30e:	687b      	ldr	r3, [r7, #4]
 801b310:	b2db      	uxtb	r3, r3
 801b312:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801b314:	f107 030c 	add.w	r3, r7, #12
 801b318:	2203      	movs	r2, #3
 801b31a:	4619      	mov	r1, r3
 801b31c:	2082      	movs	r0, #130	; 0x82
 801b31e:	f000 fddf 	bl	801bee0 <SUBGRF_WriteCommand>
}
 801b322:	bf00      	nop
 801b324:	3710      	adds	r7, #16
 801b326:	46bd      	mov	sp, r7
 801b328:	bd80      	pop	{r7, pc}
 801b32a:	bf00      	nop
 801b32c:	20001c74 	.word	0x20001c74

0801b330 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 801b330:	b580      	push	{r7, lr}
 801b332:	b084      	sub	sp, #16
 801b334:	af00      	add	r7, sp, #0
 801b336:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801b338:	4b0e      	ldr	r3, [pc, #56]	; (801b374 <SUBGRF_SetRxBoosted+0x44>)
 801b33a:	2205      	movs	r2, #5
 801b33c:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801b33e:	2197      	movs	r1, #151	; 0x97
 801b340:	f640 00ac 	movw	r0, #2220	; 0x8ac
 801b344:	f000 fd1c 	bl	801bd80 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801b348:	687b      	ldr	r3, [r7, #4]
 801b34a:	0c1b      	lsrs	r3, r3, #16
 801b34c:	b2db      	uxtb	r3, r3
 801b34e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801b350:	687b      	ldr	r3, [r7, #4]
 801b352:	0a1b      	lsrs	r3, r3, #8
 801b354:	b2db      	uxtb	r3, r3
 801b356:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801b358:	687b      	ldr	r3, [r7, #4]
 801b35a:	b2db      	uxtb	r3, r3
 801b35c:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801b35e:	f107 030c 	add.w	r3, r7, #12
 801b362:	2203      	movs	r2, #3
 801b364:	4619      	mov	r1, r3
 801b366:	2082      	movs	r0, #130	; 0x82
 801b368:	f000 fdba 	bl	801bee0 <SUBGRF_WriteCommand>
}
 801b36c:	bf00      	nop
 801b36e:	3710      	adds	r7, #16
 801b370:	46bd      	mov	sp, r7
 801b372:	bd80      	pop	{r7, pc}
 801b374:	20001c74 	.word	0x20001c74

0801b378 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801b378:	b580      	push	{r7, lr}
 801b37a:	b084      	sub	sp, #16
 801b37c:	af00      	add	r7, sp, #0
 801b37e:	6078      	str	r0, [r7, #4]
 801b380:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801b382:	687b      	ldr	r3, [r7, #4]
 801b384:	0c1b      	lsrs	r3, r3, #16
 801b386:	b2db      	uxtb	r3, r3
 801b388:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801b38a:	687b      	ldr	r3, [r7, #4]
 801b38c:	0a1b      	lsrs	r3, r3, #8
 801b38e:	b2db      	uxtb	r3, r3
 801b390:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801b392:	687b      	ldr	r3, [r7, #4]
 801b394:	b2db      	uxtb	r3, r3
 801b396:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801b398:	683b      	ldr	r3, [r7, #0]
 801b39a:	0c1b      	lsrs	r3, r3, #16
 801b39c:	b2db      	uxtb	r3, r3
 801b39e:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801b3a0:	683b      	ldr	r3, [r7, #0]
 801b3a2:	0a1b      	lsrs	r3, r3, #8
 801b3a4:	b2db      	uxtb	r3, r3
 801b3a6:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801b3a8:	683b      	ldr	r3, [r7, #0]
 801b3aa:	b2db      	uxtb	r3, r3
 801b3ac:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801b3ae:	f107 0308 	add.w	r3, r7, #8
 801b3b2:	2206      	movs	r2, #6
 801b3b4:	4619      	mov	r1, r3
 801b3b6:	2094      	movs	r0, #148	; 0x94
 801b3b8:	f000 fd92 	bl	801bee0 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801b3bc:	4b03      	ldr	r3, [pc, #12]	; (801b3cc <SUBGRF_SetRxDutyCycle+0x54>)
 801b3be:	2206      	movs	r2, #6
 801b3c0:	701a      	strb	r2, [r3, #0]
}
 801b3c2:	bf00      	nop
 801b3c4:	3710      	adds	r7, #16
 801b3c6:	46bd      	mov	sp, r7
 801b3c8:	bd80      	pop	{r7, pc}
 801b3ca:	bf00      	nop
 801b3cc:	20001c74 	.word	0x20001c74

0801b3d0 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801b3d0:	b580      	push	{r7, lr}
 801b3d2:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801b3d4:	2200      	movs	r2, #0
 801b3d6:	2100      	movs	r1, #0
 801b3d8:	20c5      	movs	r0, #197	; 0xc5
 801b3da:	f000 fd81 	bl	801bee0 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801b3de:	4b02      	ldr	r3, [pc, #8]	; (801b3e8 <SUBGRF_SetCad+0x18>)
 801b3e0:	2207      	movs	r2, #7
 801b3e2:	701a      	strb	r2, [r3, #0]
}
 801b3e4:	bf00      	nop
 801b3e6:	bd80      	pop	{r7, pc}
 801b3e8:	20001c74 	.word	0x20001c74

0801b3ec <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801b3ec:	b580      	push	{r7, lr}
 801b3ee:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801b3f0:	2200      	movs	r2, #0
 801b3f2:	2100      	movs	r1, #0
 801b3f4:	20d1      	movs	r0, #209	; 0xd1
 801b3f6:	f000 fd73 	bl	801bee0 <SUBGRF_WriteCommand>
}
 801b3fa:	bf00      	nop
 801b3fc:	bd80      	pop	{r7, pc}

0801b3fe <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801b3fe:	b580      	push	{r7, lr}
 801b400:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801b402:	2200      	movs	r2, #0
 801b404:	2100      	movs	r1, #0
 801b406:	20d2      	movs	r0, #210	; 0xd2
 801b408:	f000 fd6a 	bl	801bee0 <SUBGRF_WriteCommand>
}
 801b40c:	bf00      	nop
 801b40e:	bd80      	pop	{r7, pc}

0801b410 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 801b410:	b580      	push	{r7, lr}
 801b412:	b082      	sub	sp, #8
 801b414:	af00      	add	r7, sp, #0
 801b416:	4603      	mov	r3, r0
 801b418:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801b41a:	1dfb      	adds	r3, r7, #7
 801b41c:	2201      	movs	r2, #1
 801b41e:	4619      	mov	r1, r3
 801b420:	209f      	movs	r0, #159	; 0x9f
 801b422:	f000 fd5d 	bl	801bee0 <SUBGRF_WriteCommand>
}
 801b426:	bf00      	nop
 801b428:	3708      	adds	r7, #8
 801b42a:	46bd      	mov	sp, r7
 801b42c:	bd80      	pop	{r7, pc}

0801b42e <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801b42e:	b580      	push	{r7, lr}
 801b430:	b084      	sub	sp, #16
 801b432:	af00      	add	r7, sp, #0
 801b434:	4603      	mov	r3, r0
 801b436:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801b438:	1dfb      	adds	r3, r7, #7
 801b43a:	2201      	movs	r2, #1
 801b43c:	4619      	mov	r1, r3
 801b43e:	20a0      	movs	r0, #160	; 0xa0
 801b440:	f000 fd4e 	bl	801bee0 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 801b444:	79fb      	ldrb	r3, [r7, #7]
 801b446:	2b3f      	cmp	r3, #63	; 0x3f
 801b448:	d91c      	bls.n	801b484 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801b44a:	79fb      	ldrb	r3, [r7, #7]
 801b44c:	085b      	lsrs	r3, r3, #1
 801b44e:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 801b450:	2300      	movs	r3, #0
 801b452:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 801b454:	2300      	movs	r3, #0
 801b456:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801b458:	e005      	b.n	801b466 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801b45a:	7bfb      	ldrb	r3, [r7, #15]
 801b45c:	089b      	lsrs	r3, r3, #2
 801b45e:	73fb      	strb	r3, [r7, #15]
            exp++;
 801b460:	7bbb      	ldrb	r3, [r7, #14]
 801b462:	3301      	adds	r3, #1
 801b464:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801b466:	7bfb      	ldrb	r3, [r7, #15]
 801b468:	2b1f      	cmp	r3, #31
 801b46a:	d8f6      	bhi.n	801b45a <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801b46c:	7bfb      	ldrb	r3, [r7, #15]
 801b46e:	00db      	lsls	r3, r3, #3
 801b470:	b2da      	uxtb	r2, r3
 801b472:	7bbb      	ldrb	r3, [r7, #14]
 801b474:	4413      	add	r3, r2
 801b476:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801b478:	7b7b      	ldrb	r3, [r7, #13]
 801b47a:	4619      	mov	r1, r3
 801b47c:	f240 7006 	movw	r0, #1798	; 0x706
 801b480:	f000 fc7e 	bl	801bd80 <SUBGRF_WriteRegister>
    }
}
 801b484:	bf00      	nop
 801b486:	3710      	adds	r7, #16
 801b488:	46bd      	mov	sp, r7
 801b48a:	bd80      	pop	{r7, pc}

0801b48c <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801b48c:	b580      	push	{r7, lr}
 801b48e:	b082      	sub	sp, #8
 801b490:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801b492:	f7ef fcf0 	bl	800ae76 <RBI_IsDCDC>
 801b496:	4603      	mov	r3, r0
 801b498:	2b01      	cmp	r3, #1
 801b49a:	d102      	bne.n	801b4a2 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801b49c:	2301      	movs	r3, #1
 801b49e:	71fb      	strb	r3, [r7, #7]
 801b4a0:	e001      	b.n	801b4a6 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801b4a2:	2300      	movs	r3, #0
 801b4a4:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801b4a6:	1dfb      	adds	r3, r7, #7
 801b4a8:	2201      	movs	r2, #1
 801b4aa:	4619      	mov	r1, r3
 801b4ac:	2096      	movs	r0, #150	; 0x96
 801b4ae:	f000 fd17 	bl	801bee0 <SUBGRF_WriteCommand>
}
 801b4b2:	bf00      	nop
 801b4b4:	3708      	adds	r7, #8
 801b4b6:	46bd      	mov	sp, r7
 801b4b8:	bd80      	pop	{r7, pc}

0801b4ba <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801b4ba:	b580      	push	{r7, lr}
 801b4bc:	b084      	sub	sp, #16
 801b4be:	af00      	add	r7, sp, #0
 801b4c0:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801b4c2:	793b      	ldrb	r3, [r7, #4]
 801b4c4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801b4c8:	b2db      	uxtb	r3, r3
 801b4ca:	019b      	lsls	r3, r3, #6
 801b4cc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801b4ce:	793b      	ldrb	r3, [r7, #4]
 801b4d0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801b4d4:	b2db      	uxtb	r3, r3
 801b4d6:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801b4d8:	b25b      	sxtb	r3, r3
 801b4da:	4313      	orrs	r3, r2
 801b4dc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801b4de:	793b      	ldrb	r3, [r7, #4]
 801b4e0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801b4e4:	b2db      	uxtb	r3, r3
 801b4e6:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801b4e8:	b25b      	sxtb	r3, r3
 801b4ea:	4313      	orrs	r3, r2
 801b4ec:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801b4ee:	793b      	ldrb	r3, [r7, #4]
 801b4f0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801b4f4:	b2db      	uxtb	r3, r3
 801b4f6:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801b4f8:	b25b      	sxtb	r3, r3
 801b4fa:	4313      	orrs	r3, r2
 801b4fc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801b4fe:	793b      	ldrb	r3, [r7, #4]
 801b500:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801b504:	b2db      	uxtb	r3, r3
 801b506:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801b508:	b25b      	sxtb	r3, r3
 801b50a:	4313      	orrs	r3, r2
 801b50c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801b50e:	793b      	ldrb	r3, [r7, #4]
 801b510:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801b514:	b2db      	uxtb	r3, r3
 801b516:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801b518:	b25b      	sxtb	r3, r3
 801b51a:	4313      	orrs	r3, r2
 801b51c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801b51e:	793b      	ldrb	r3, [r7, #4]
 801b520:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801b524:	b2db      	uxtb	r3, r3
 801b526:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801b528:	4313      	orrs	r3, r2
 801b52a:	b25b      	sxtb	r3, r3
 801b52c:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801b52e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801b530:	f107 030f 	add.w	r3, r7, #15
 801b534:	2201      	movs	r2, #1
 801b536:	4619      	mov	r1, r3
 801b538:	2089      	movs	r0, #137	; 0x89
 801b53a:	f000 fcd1 	bl	801bee0 <SUBGRF_WriteCommand>
}
 801b53e:	bf00      	nop
 801b540:	3710      	adds	r7, #16
 801b542:	46bd      	mov	sp, r7
 801b544:	bd80      	pop	{r7, pc}
	...

0801b548 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 801b548:	b580      	push	{r7, lr}
 801b54a:	b084      	sub	sp, #16
 801b54c:	af00      	add	r7, sp, #0
 801b54e:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801b550:	687b      	ldr	r3, [r7, #4]
 801b552:	4a1d      	ldr	r2, [pc, #116]	; (801b5c8 <SUBGRF_CalibrateImage+0x80>)
 801b554:	4293      	cmp	r3, r2
 801b556:	d904      	bls.n	801b562 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 801b558:	23e1      	movs	r3, #225	; 0xe1
 801b55a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801b55c:	23e9      	movs	r3, #233	; 0xe9
 801b55e:	737b      	strb	r3, [r7, #13]
 801b560:	e027      	b.n	801b5b2 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 801b562:	687b      	ldr	r3, [r7, #4]
 801b564:	4a19      	ldr	r2, [pc, #100]	; (801b5cc <SUBGRF_CalibrateImage+0x84>)
 801b566:	4293      	cmp	r3, r2
 801b568:	d904      	bls.n	801b574 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801b56a:	23d7      	movs	r3, #215	; 0xd7
 801b56c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801b56e:	23db      	movs	r3, #219	; 0xdb
 801b570:	737b      	strb	r3, [r7, #13]
 801b572:	e01e      	b.n	801b5b2 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 801b574:	687b      	ldr	r3, [r7, #4]
 801b576:	4a16      	ldr	r2, [pc, #88]	; (801b5d0 <SUBGRF_CalibrateImage+0x88>)
 801b578:	4293      	cmp	r3, r2
 801b57a:	d904      	bls.n	801b586 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801b57c:	23c1      	movs	r3, #193	; 0xc1
 801b57e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 801b580:	23c5      	movs	r3, #197	; 0xc5
 801b582:	737b      	strb	r3, [r7, #13]
 801b584:	e015      	b.n	801b5b2 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 801b586:	687b      	ldr	r3, [r7, #4]
 801b588:	4a12      	ldr	r2, [pc, #72]	; (801b5d4 <SUBGRF_CalibrateImage+0x8c>)
 801b58a:	4293      	cmp	r3, r2
 801b58c:	d904      	bls.n	801b598 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801b58e:	2375      	movs	r3, #117	; 0x75
 801b590:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801b592:	2381      	movs	r3, #129	; 0x81
 801b594:	737b      	strb	r3, [r7, #13]
 801b596:	e00c      	b.n	801b5b2 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 801b598:	687b      	ldr	r3, [r7, #4]
 801b59a:	4a0f      	ldr	r2, [pc, #60]	; (801b5d8 <SUBGRF_CalibrateImage+0x90>)
 801b59c:	4293      	cmp	r3, r2
 801b59e:	d904      	bls.n	801b5aa <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 801b5a0:	236b      	movs	r3, #107	; 0x6b
 801b5a2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801b5a4:	236f      	movs	r3, #111	; 0x6f
 801b5a6:	737b      	strb	r3, [r7, #13]
 801b5a8:	e003      	b.n	801b5b2 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 801b5aa:	2329      	movs	r3, #41	; 0x29
 801b5ac:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 801b5ae:	232b      	movs	r3, #43	; 0x2b
 801b5b0:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801b5b2:	f107 030c 	add.w	r3, r7, #12
 801b5b6:	2202      	movs	r2, #2
 801b5b8:	4619      	mov	r1, r3
 801b5ba:	2098      	movs	r0, #152	; 0x98
 801b5bc:	f000 fc90 	bl	801bee0 <SUBGRF_WriteCommand>
}
 801b5c0:	bf00      	nop
 801b5c2:	3710      	adds	r7, #16
 801b5c4:	46bd      	mov	sp, r7
 801b5c6:	bd80      	pop	{r7, pc}
 801b5c8:	35a4e900 	.word	0x35a4e900
 801b5cc:	32a9f880 	.word	0x32a9f880
 801b5d0:	2de54480 	.word	0x2de54480
 801b5d4:	1b6b0b00 	.word	0x1b6b0b00
 801b5d8:	1954fc40 	.word	0x1954fc40

0801b5dc <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801b5dc:	b590      	push	{r4, r7, lr}
 801b5de:	b085      	sub	sp, #20
 801b5e0:	af00      	add	r7, sp, #0
 801b5e2:	4604      	mov	r4, r0
 801b5e4:	4608      	mov	r0, r1
 801b5e6:	4611      	mov	r1, r2
 801b5e8:	461a      	mov	r2, r3
 801b5ea:	4623      	mov	r3, r4
 801b5ec:	71fb      	strb	r3, [r7, #7]
 801b5ee:	4603      	mov	r3, r0
 801b5f0:	71bb      	strb	r3, [r7, #6]
 801b5f2:	460b      	mov	r3, r1
 801b5f4:	717b      	strb	r3, [r7, #5]
 801b5f6:	4613      	mov	r3, r2
 801b5f8:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801b5fa:	79fb      	ldrb	r3, [r7, #7]
 801b5fc:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801b5fe:	79bb      	ldrb	r3, [r7, #6]
 801b600:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801b602:	797b      	ldrb	r3, [r7, #5]
 801b604:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801b606:	793b      	ldrb	r3, [r7, #4]
 801b608:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801b60a:	f107 030c 	add.w	r3, r7, #12
 801b60e:	2204      	movs	r2, #4
 801b610:	4619      	mov	r1, r3
 801b612:	2095      	movs	r0, #149	; 0x95
 801b614:	f000 fc64 	bl	801bee0 <SUBGRF_WriteCommand>
}
 801b618:	bf00      	nop
 801b61a:	3714      	adds	r7, #20
 801b61c:	46bd      	mov	sp, r7
 801b61e:	bd90      	pop	{r4, r7, pc}

0801b620 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801b620:	b590      	push	{r4, r7, lr}
 801b622:	b085      	sub	sp, #20
 801b624:	af00      	add	r7, sp, #0
 801b626:	4604      	mov	r4, r0
 801b628:	4608      	mov	r0, r1
 801b62a:	4611      	mov	r1, r2
 801b62c:	461a      	mov	r2, r3
 801b62e:	4623      	mov	r3, r4
 801b630:	80fb      	strh	r3, [r7, #6]
 801b632:	4603      	mov	r3, r0
 801b634:	80bb      	strh	r3, [r7, #4]
 801b636:	460b      	mov	r3, r1
 801b638:	807b      	strh	r3, [r7, #2]
 801b63a:	4613      	mov	r3, r2
 801b63c:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801b63e:	88fb      	ldrh	r3, [r7, #6]
 801b640:	0a1b      	lsrs	r3, r3, #8
 801b642:	b29b      	uxth	r3, r3
 801b644:	b2db      	uxtb	r3, r3
 801b646:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801b648:	88fb      	ldrh	r3, [r7, #6]
 801b64a:	b2db      	uxtb	r3, r3
 801b64c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801b64e:	88bb      	ldrh	r3, [r7, #4]
 801b650:	0a1b      	lsrs	r3, r3, #8
 801b652:	b29b      	uxth	r3, r3
 801b654:	b2db      	uxtb	r3, r3
 801b656:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801b658:	88bb      	ldrh	r3, [r7, #4]
 801b65a:	b2db      	uxtb	r3, r3
 801b65c:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801b65e:	887b      	ldrh	r3, [r7, #2]
 801b660:	0a1b      	lsrs	r3, r3, #8
 801b662:	b29b      	uxth	r3, r3
 801b664:	b2db      	uxtb	r3, r3
 801b666:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801b668:	887b      	ldrh	r3, [r7, #2]
 801b66a:	b2db      	uxtb	r3, r3
 801b66c:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801b66e:	883b      	ldrh	r3, [r7, #0]
 801b670:	0a1b      	lsrs	r3, r3, #8
 801b672:	b29b      	uxth	r3, r3
 801b674:	b2db      	uxtb	r3, r3
 801b676:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801b678:	883b      	ldrh	r3, [r7, #0]
 801b67a:	b2db      	uxtb	r3, r3
 801b67c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801b67e:	f107 0308 	add.w	r3, r7, #8
 801b682:	2208      	movs	r2, #8
 801b684:	4619      	mov	r1, r3
 801b686:	2008      	movs	r0, #8
 801b688:	f000 fc2a 	bl	801bee0 <SUBGRF_WriteCommand>
}
 801b68c:	bf00      	nop
 801b68e:	3714      	adds	r7, #20
 801b690:	46bd      	mov	sp, r7
 801b692:	bd90      	pop	{r4, r7, pc}

0801b694 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801b694:	b580      	push	{r7, lr}
 801b696:	b084      	sub	sp, #16
 801b698:	af00      	add	r7, sp, #0
 801b69a:	4603      	mov	r3, r0
 801b69c:	6039      	str	r1, [r7, #0]
 801b69e:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 801b6a0:	79fb      	ldrb	r3, [r7, #7]
 801b6a2:	f003 0307 	and.w	r3, r3, #7
 801b6a6:	b2db      	uxtb	r3, r3
 801b6a8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801b6aa:	683b      	ldr	r3, [r7, #0]
 801b6ac:	0c1b      	lsrs	r3, r3, #16
 801b6ae:	b2db      	uxtb	r3, r3
 801b6b0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801b6b2:	683b      	ldr	r3, [r7, #0]
 801b6b4:	0a1b      	lsrs	r3, r3, #8
 801b6b6:	b2db      	uxtb	r3, r3
 801b6b8:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801b6ba:	683b      	ldr	r3, [r7, #0]
 801b6bc:	b2db      	uxtb	r3, r3
 801b6be:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801b6c0:	f107 030c 	add.w	r3, r7, #12
 801b6c4:	2204      	movs	r2, #4
 801b6c6:	4619      	mov	r1, r3
 801b6c8:	2097      	movs	r0, #151	; 0x97
 801b6ca:	f000 fc09 	bl	801bee0 <SUBGRF_WriteCommand>
}
 801b6ce:	bf00      	nop
 801b6d0:	3710      	adds	r7, #16
 801b6d2:	46bd      	mov	sp, r7
 801b6d4:	bd80      	pop	{r7, pc}
	...

0801b6d8 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801b6d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801b6dc:	b084      	sub	sp, #16
 801b6de:	af00      	add	r7, sp, #0
 801b6e0:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801b6e2:	2300      	movs	r3, #0
 801b6e4:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801b6e6:	4b1d      	ldr	r3, [pc, #116]	; (801b75c <SUBGRF_SetRfFrequency+0x84>)
 801b6e8:	781b      	ldrb	r3, [r3, #0]
 801b6ea:	f083 0301 	eor.w	r3, r3, #1
 801b6ee:	b2db      	uxtb	r3, r3
 801b6f0:	2b00      	cmp	r3, #0
 801b6f2:	d005      	beq.n	801b700 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801b6f4:	6878      	ldr	r0, [r7, #4]
 801b6f6:	f7ff ff27 	bl	801b548 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801b6fa:	4b18      	ldr	r3, [pc, #96]	; (801b75c <SUBGRF_SetRfFrequency+0x84>)
 801b6fc:	2201      	movs	r2, #1
 801b6fe:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801b700:	687b      	ldr	r3, [r7, #4]
 801b702:	2200      	movs	r2, #0
 801b704:	461c      	mov	r4, r3
 801b706:	4615      	mov	r5, r2
 801b708:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801b70c:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801b710:	4a13      	ldr	r2, [pc, #76]	; (801b760 <SUBGRF_SetRfFrequency+0x88>)
 801b712:	f04f 0300 	mov.w	r3, #0
 801b716:	4640      	mov	r0, r8
 801b718:	4649      	mov	r1, r9
 801b71a:	f7e5 fa45 	bl	8000ba8 <__aeabi_uldivmod>
 801b71e:	4602      	mov	r2, r0
 801b720:	460b      	mov	r3, r1
 801b722:	4613      	mov	r3, r2
 801b724:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801b726:	68fb      	ldr	r3, [r7, #12]
 801b728:	0e1b      	lsrs	r3, r3, #24
 801b72a:	b2db      	uxtb	r3, r3
 801b72c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801b72e:	68fb      	ldr	r3, [r7, #12]
 801b730:	0c1b      	lsrs	r3, r3, #16
 801b732:	b2db      	uxtb	r3, r3
 801b734:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801b736:	68fb      	ldr	r3, [r7, #12]
 801b738:	0a1b      	lsrs	r3, r3, #8
 801b73a:	b2db      	uxtb	r3, r3
 801b73c:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801b73e:	68fb      	ldr	r3, [r7, #12]
 801b740:	b2db      	uxtb	r3, r3
 801b742:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801b744:	f107 0308 	add.w	r3, r7, #8
 801b748:	2204      	movs	r2, #4
 801b74a:	4619      	mov	r1, r3
 801b74c:	2086      	movs	r0, #134	; 0x86
 801b74e:	f000 fbc7 	bl	801bee0 <SUBGRF_WriteCommand>
}
 801b752:	bf00      	nop
 801b754:	3710      	adds	r7, #16
 801b756:	46bd      	mov	sp, r7
 801b758:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801b75c:	20001c7c 	.word	0x20001c7c
 801b760:	01e84800 	.word	0x01e84800

0801b764 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801b764:	b580      	push	{r7, lr}
 801b766:	b082      	sub	sp, #8
 801b768:	af00      	add	r7, sp, #0
 801b76a:	4603      	mov	r3, r0
 801b76c:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801b76e:	79fa      	ldrb	r2, [r7, #7]
 801b770:	4b09      	ldr	r3, [pc, #36]	; (801b798 <SUBGRF_SetPacketType+0x34>)
 801b772:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801b774:	79fb      	ldrb	r3, [r7, #7]
 801b776:	2b00      	cmp	r3, #0
 801b778:	d104      	bne.n	801b784 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801b77a:	2100      	movs	r1, #0
 801b77c:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801b780:	f000 fafe 	bl	801bd80 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801b784:	1dfb      	adds	r3, r7, #7
 801b786:	2201      	movs	r2, #1
 801b788:	4619      	mov	r1, r3
 801b78a:	208a      	movs	r0, #138	; 0x8a
 801b78c:	f000 fba8 	bl	801bee0 <SUBGRF_WriteCommand>
}
 801b790:	bf00      	nop
 801b792:	3708      	adds	r7, #8
 801b794:	46bd      	mov	sp, r7
 801b796:	bd80      	pop	{r7, pc}
 801b798:	20001c75 	.word	0x20001c75

0801b79c <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801b79c:	b480      	push	{r7}
 801b79e:	af00      	add	r7, sp, #0
    return PacketType;
 801b7a0:	4b02      	ldr	r3, [pc, #8]	; (801b7ac <SUBGRF_GetPacketType+0x10>)
 801b7a2:	781b      	ldrb	r3, [r3, #0]
}
 801b7a4:	4618      	mov	r0, r3
 801b7a6:	46bd      	mov	sp, r7
 801b7a8:	bc80      	pop	{r7}
 801b7aa:	4770      	bx	lr
 801b7ac:	20001c75 	.word	0x20001c75

0801b7b0 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 801b7b0:	b580      	push	{r7, lr}
 801b7b2:	b084      	sub	sp, #16
 801b7b4:	af00      	add	r7, sp, #0
 801b7b6:	4603      	mov	r3, r0
 801b7b8:	71fb      	strb	r3, [r7, #7]
 801b7ba:	460b      	mov	r3, r1
 801b7bc:	71bb      	strb	r3, [r7, #6]
 801b7be:	4613      	mov	r3, r2
 801b7c0:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 801b7c2:	79fb      	ldrb	r3, [r7, #7]
 801b7c4:	2b01      	cmp	r3, #1
 801b7c6:	d149      	bne.n	801b85c <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801b7c8:	2000      	movs	r0, #0
 801b7ca:	f7ef fb5b 	bl	800ae84 <RBI_GetRFOMaxPowerConfig>
 801b7ce:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 801b7d0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b7d4:	68fa      	ldr	r2, [r7, #12]
 801b7d6:	429a      	cmp	r2, r3
 801b7d8:	da01      	bge.n	801b7de <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801b7da:	68fb      	ldr	r3, [r7, #12]
 801b7dc:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 801b7de:	68fb      	ldr	r3, [r7, #12]
 801b7e0:	2b0e      	cmp	r3, #14
 801b7e2:	d10e      	bne.n	801b802 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801b7e4:	2301      	movs	r3, #1
 801b7e6:	2201      	movs	r2, #1
 801b7e8:	2100      	movs	r1, #0
 801b7ea:	2004      	movs	r0, #4
 801b7ec:	f7ff fef6 	bl	801b5dc <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801b7f0:	79ba      	ldrb	r2, [r7, #6]
 801b7f2:	68fb      	ldr	r3, [r7, #12]
 801b7f4:	b2db      	uxtb	r3, r3
 801b7f6:	1ad3      	subs	r3, r2, r3
 801b7f8:	b2db      	uxtb	r3, r3
 801b7fa:	330e      	adds	r3, #14
 801b7fc:	b2db      	uxtb	r3, r3
 801b7fe:	71bb      	strb	r3, [r7, #6]
 801b800:	e01f      	b.n	801b842 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 801b802:	68fb      	ldr	r3, [r7, #12]
 801b804:	2b0a      	cmp	r3, #10
 801b806:	d10e      	bne.n	801b826 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801b808:	2301      	movs	r3, #1
 801b80a:	2201      	movs	r2, #1
 801b80c:	2100      	movs	r1, #0
 801b80e:	2001      	movs	r0, #1
 801b810:	f7ff fee4 	bl	801b5dc <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801b814:	79ba      	ldrb	r2, [r7, #6]
 801b816:	68fb      	ldr	r3, [r7, #12]
 801b818:	b2db      	uxtb	r3, r3
 801b81a:	1ad3      	subs	r3, r2, r3
 801b81c:	b2db      	uxtb	r3, r3
 801b81e:	330d      	adds	r3, #13
 801b820:	b2db      	uxtb	r3, r3
 801b822:	71bb      	strb	r3, [r7, #6]
 801b824:	e00d      	b.n	801b842 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 801b826:	2301      	movs	r3, #1
 801b828:	2201      	movs	r2, #1
 801b82a:	2100      	movs	r1, #0
 801b82c:	2007      	movs	r0, #7
 801b82e:	f7ff fed5 	bl	801b5dc <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801b832:	79ba      	ldrb	r2, [r7, #6]
 801b834:	68fb      	ldr	r3, [r7, #12]
 801b836:	b2db      	uxtb	r3, r3
 801b838:	1ad3      	subs	r3, r2, r3
 801b83a:	b2db      	uxtb	r3, r3
 801b83c:	330e      	adds	r3, #14
 801b83e:	b2db      	uxtb	r3, r3
 801b840:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801b842:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b846:	f113 0f11 	cmn.w	r3, #17
 801b84a:	da01      	bge.n	801b850 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 801b84c:	23ef      	movs	r3, #239	; 0xef
 801b84e:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801b850:	2118      	movs	r1, #24
 801b852:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801b856:	f000 fa93 	bl	801bd80 <SUBGRF_WriteRegister>
 801b85a:	e067      	b.n	801b92c <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801b85c:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801b860:	f000 faa2 	bl	801bda8 <SUBGRF_ReadRegister>
 801b864:	4603      	mov	r3, r0
 801b866:	f043 031e 	orr.w	r3, r3, #30
 801b86a:	b2db      	uxtb	r3, r3
 801b86c:	4619      	mov	r1, r3
 801b86e:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801b872:	f000 fa85 	bl	801bd80 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801b876:	2001      	movs	r0, #1
 801b878:	f7ef fb04 	bl	800ae84 <RBI_GetRFOMaxPowerConfig>
 801b87c:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801b87e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b882:	68fa      	ldr	r2, [r7, #12]
 801b884:	429a      	cmp	r2, r3
 801b886:	da01      	bge.n	801b88c <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 801b888:	68fb      	ldr	r3, [r7, #12]
 801b88a:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801b88c:	68fb      	ldr	r3, [r7, #12]
 801b88e:	2b14      	cmp	r3, #20
 801b890:	d10e      	bne.n	801b8b0 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801b892:	2301      	movs	r3, #1
 801b894:	2200      	movs	r2, #0
 801b896:	2105      	movs	r1, #5
 801b898:	2003      	movs	r0, #3
 801b89a:	f7ff fe9f 	bl	801b5dc <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801b89e:	79ba      	ldrb	r2, [r7, #6]
 801b8a0:	68fb      	ldr	r3, [r7, #12]
 801b8a2:	b2db      	uxtb	r3, r3
 801b8a4:	1ad3      	subs	r3, r2, r3
 801b8a6:	b2db      	uxtb	r3, r3
 801b8a8:	3316      	adds	r3, #22
 801b8aa:	b2db      	uxtb	r3, r3
 801b8ac:	71bb      	strb	r3, [r7, #6]
 801b8ae:	e031      	b.n	801b914 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 801b8b0:	68fb      	ldr	r3, [r7, #12]
 801b8b2:	2b11      	cmp	r3, #17
 801b8b4:	d10e      	bne.n	801b8d4 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801b8b6:	2301      	movs	r3, #1
 801b8b8:	2200      	movs	r2, #0
 801b8ba:	2103      	movs	r1, #3
 801b8bc:	2002      	movs	r0, #2
 801b8be:	f7ff fe8d 	bl	801b5dc <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801b8c2:	79ba      	ldrb	r2, [r7, #6]
 801b8c4:	68fb      	ldr	r3, [r7, #12]
 801b8c6:	b2db      	uxtb	r3, r3
 801b8c8:	1ad3      	subs	r3, r2, r3
 801b8ca:	b2db      	uxtb	r3, r3
 801b8cc:	3316      	adds	r3, #22
 801b8ce:	b2db      	uxtb	r3, r3
 801b8d0:	71bb      	strb	r3, [r7, #6]
 801b8d2:	e01f      	b.n	801b914 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 801b8d4:	68fb      	ldr	r3, [r7, #12]
 801b8d6:	2b0e      	cmp	r3, #14
 801b8d8:	d10e      	bne.n	801b8f8 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801b8da:	2301      	movs	r3, #1
 801b8dc:	2200      	movs	r2, #0
 801b8de:	2102      	movs	r1, #2
 801b8e0:	2002      	movs	r0, #2
 801b8e2:	f7ff fe7b 	bl	801b5dc <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801b8e6:	79ba      	ldrb	r2, [r7, #6]
 801b8e8:	68fb      	ldr	r3, [r7, #12]
 801b8ea:	b2db      	uxtb	r3, r3
 801b8ec:	1ad3      	subs	r3, r2, r3
 801b8ee:	b2db      	uxtb	r3, r3
 801b8f0:	330e      	adds	r3, #14
 801b8f2:	b2db      	uxtb	r3, r3
 801b8f4:	71bb      	strb	r3, [r7, #6]
 801b8f6:	e00d      	b.n	801b914 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801b8f8:	2301      	movs	r3, #1
 801b8fa:	2200      	movs	r2, #0
 801b8fc:	2107      	movs	r1, #7
 801b8fe:	2004      	movs	r0, #4
 801b900:	f7ff fe6c 	bl	801b5dc <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801b904:	79ba      	ldrb	r2, [r7, #6]
 801b906:	68fb      	ldr	r3, [r7, #12]
 801b908:	b2db      	uxtb	r3, r3
 801b90a:	1ad3      	subs	r3, r2, r3
 801b90c:	b2db      	uxtb	r3, r3
 801b90e:	3316      	adds	r3, #22
 801b910:	b2db      	uxtb	r3, r3
 801b912:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 801b914:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b918:	f113 0f09 	cmn.w	r3, #9
 801b91c:	da01      	bge.n	801b922 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 801b91e:	23f7      	movs	r3, #247	; 0xf7
 801b920:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801b922:	2138      	movs	r1, #56	; 0x38
 801b924:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801b928:	f000 fa2a 	bl	801bd80 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801b92c:	79bb      	ldrb	r3, [r7, #6]
 801b92e:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 801b930:	797b      	ldrb	r3, [r7, #5]
 801b932:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801b934:	f107 0308 	add.w	r3, r7, #8
 801b938:	2202      	movs	r2, #2
 801b93a:	4619      	mov	r1, r3
 801b93c:	208e      	movs	r0, #142	; 0x8e
 801b93e:	f000 facf 	bl	801bee0 <SUBGRF_WriteCommand>
}
 801b942:	bf00      	nop
 801b944:	3710      	adds	r7, #16
 801b946:	46bd      	mov	sp, r7
 801b948:	bd80      	pop	{r7, pc}
	...

0801b94c <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801b94c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801b950:	b086      	sub	sp, #24
 801b952:	af00      	add	r7, sp, #0
 801b954:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801b956:	2300      	movs	r3, #0
 801b958:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801b95a:	4a61      	ldr	r2, [pc, #388]	; (801bae0 <SUBGRF_SetModulationParams+0x194>)
 801b95c:	f107 0308 	add.w	r3, r7, #8
 801b960:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b964:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801b968:	687b      	ldr	r3, [r7, #4]
 801b96a:	781a      	ldrb	r2, [r3, #0]
 801b96c:	4b5d      	ldr	r3, [pc, #372]	; (801bae4 <SUBGRF_SetModulationParams+0x198>)
 801b96e:	781b      	ldrb	r3, [r3, #0]
 801b970:	429a      	cmp	r2, r3
 801b972:	d004      	beq.n	801b97e <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801b974:	687b      	ldr	r3, [r7, #4]
 801b976:	781b      	ldrb	r3, [r3, #0]
 801b978:	4618      	mov	r0, r3
 801b97a:	f7ff fef3 	bl	801b764 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801b97e:	687b      	ldr	r3, [r7, #4]
 801b980:	781b      	ldrb	r3, [r3, #0]
 801b982:	2b03      	cmp	r3, #3
 801b984:	f200 80a5 	bhi.w	801bad2 <SUBGRF_SetModulationParams+0x186>
 801b988:	a201      	add	r2, pc, #4	; (adr r2, 801b990 <SUBGRF_SetModulationParams+0x44>)
 801b98a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b98e:	bf00      	nop
 801b990:	0801b9a1 	.word	0x0801b9a1
 801b994:	0801ba61 	.word	0x0801ba61
 801b998:	0801ba23 	.word	0x0801ba23
 801b99c:	0801ba8f 	.word	0x0801ba8f
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801b9a0:	2308      	movs	r3, #8
 801b9a2:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801b9a4:	687b      	ldr	r3, [r7, #4]
 801b9a6:	685b      	ldr	r3, [r3, #4]
 801b9a8:	4a4f      	ldr	r2, [pc, #316]	; (801bae8 <SUBGRF_SetModulationParams+0x19c>)
 801b9aa:	fbb2 f3f3 	udiv	r3, r2, r3
 801b9ae:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801b9b0:	697b      	ldr	r3, [r7, #20]
 801b9b2:	0c1b      	lsrs	r3, r3, #16
 801b9b4:	b2db      	uxtb	r3, r3
 801b9b6:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801b9b8:	697b      	ldr	r3, [r7, #20]
 801b9ba:	0a1b      	lsrs	r3, r3, #8
 801b9bc:	b2db      	uxtb	r3, r3
 801b9be:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801b9c0:	697b      	ldr	r3, [r7, #20]
 801b9c2:	b2db      	uxtb	r3, r3
 801b9c4:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801b9c6:	687b      	ldr	r3, [r7, #4]
 801b9c8:	7b1b      	ldrb	r3, [r3, #12]
 801b9ca:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801b9cc:	687b      	ldr	r3, [r7, #4]
 801b9ce:	7b5b      	ldrb	r3, [r3, #13]
 801b9d0:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801b9d2:	687b      	ldr	r3, [r7, #4]
 801b9d4:	689b      	ldr	r3, [r3, #8]
 801b9d6:	2200      	movs	r2, #0
 801b9d8:	461c      	mov	r4, r3
 801b9da:	4615      	mov	r5, r2
 801b9dc:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801b9e0:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801b9e4:	4a41      	ldr	r2, [pc, #260]	; (801baec <SUBGRF_SetModulationParams+0x1a0>)
 801b9e6:	f04f 0300 	mov.w	r3, #0
 801b9ea:	4640      	mov	r0, r8
 801b9ec:	4649      	mov	r1, r9
 801b9ee:	f7e5 f8db 	bl	8000ba8 <__aeabi_uldivmod>
 801b9f2:	4602      	mov	r2, r0
 801b9f4:	460b      	mov	r3, r1
 801b9f6:	4613      	mov	r3, r2
 801b9f8:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801b9fa:	697b      	ldr	r3, [r7, #20]
 801b9fc:	0c1b      	lsrs	r3, r3, #16
 801b9fe:	b2db      	uxtb	r3, r3
 801ba00:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801ba02:	697b      	ldr	r3, [r7, #20]
 801ba04:	0a1b      	lsrs	r3, r3, #8
 801ba06:	b2db      	uxtb	r3, r3
 801ba08:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801ba0a:	697b      	ldr	r3, [r7, #20]
 801ba0c:	b2db      	uxtb	r3, r3
 801ba0e:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801ba10:	7cfb      	ldrb	r3, [r7, #19]
 801ba12:	b29a      	uxth	r2, r3
 801ba14:	f107 0308 	add.w	r3, r7, #8
 801ba18:	4619      	mov	r1, r3
 801ba1a:	208b      	movs	r0, #139	; 0x8b
 801ba1c:	f000 fa60 	bl	801bee0 <SUBGRF_WriteCommand>
        break;
 801ba20:	e058      	b.n	801bad4 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 801ba22:	2304      	movs	r3, #4
 801ba24:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801ba26:	687b      	ldr	r3, [r7, #4]
 801ba28:	691b      	ldr	r3, [r3, #16]
 801ba2a:	4a2f      	ldr	r2, [pc, #188]	; (801bae8 <SUBGRF_SetModulationParams+0x19c>)
 801ba2c:	fbb2 f3f3 	udiv	r3, r2, r3
 801ba30:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801ba32:	697b      	ldr	r3, [r7, #20]
 801ba34:	0c1b      	lsrs	r3, r3, #16
 801ba36:	b2db      	uxtb	r3, r3
 801ba38:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801ba3a:	697b      	ldr	r3, [r7, #20]
 801ba3c:	0a1b      	lsrs	r3, r3, #8
 801ba3e:	b2db      	uxtb	r3, r3
 801ba40:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801ba42:	697b      	ldr	r3, [r7, #20]
 801ba44:	b2db      	uxtb	r3, r3
 801ba46:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801ba48:	687b      	ldr	r3, [r7, #4]
 801ba4a:	7d1b      	ldrb	r3, [r3, #20]
 801ba4c:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801ba4e:	7cfb      	ldrb	r3, [r7, #19]
 801ba50:	b29a      	uxth	r2, r3
 801ba52:	f107 0308 	add.w	r3, r7, #8
 801ba56:	4619      	mov	r1, r3
 801ba58:	208b      	movs	r0, #139	; 0x8b
 801ba5a:	f000 fa41 	bl	801bee0 <SUBGRF_WriteCommand>
        break;
 801ba5e:	e039      	b.n	801bad4 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 801ba60:	2304      	movs	r3, #4
 801ba62:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801ba64:	687b      	ldr	r3, [r7, #4]
 801ba66:	7e1b      	ldrb	r3, [r3, #24]
 801ba68:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801ba6a:	687b      	ldr	r3, [r7, #4]
 801ba6c:	7e5b      	ldrb	r3, [r3, #25]
 801ba6e:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801ba70:	687b      	ldr	r3, [r7, #4]
 801ba72:	7e9b      	ldrb	r3, [r3, #26]
 801ba74:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801ba76:	687b      	ldr	r3, [r7, #4]
 801ba78:	7edb      	ldrb	r3, [r3, #27]
 801ba7a:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801ba7c:	7cfb      	ldrb	r3, [r7, #19]
 801ba7e:	b29a      	uxth	r2, r3
 801ba80:	f107 0308 	add.w	r3, r7, #8
 801ba84:	4619      	mov	r1, r3
 801ba86:	208b      	movs	r0, #139	; 0x8b
 801ba88:	f000 fa2a 	bl	801bee0 <SUBGRF_WriteCommand>

        break;
 801ba8c:	e022      	b.n	801bad4 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 801ba8e:	2305      	movs	r3, #5
 801ba90:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801ba92:	687b      	ldr	r3, [r7, #4]
 801ba94:	685b      	ldr	r3, [r3, #4]
 801ba96:	4a14      	ldr	r2, [pc, #80]	; (801bae8 <SUBGRF_SetModulationParams+0x19c>)
 801ba98:	fbb2 f3f3 	udiv	r3, r2, r3
 801ba9c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801ba9e:	697b      	ldr	r3, [r7, #20]
 801baa0:	0c1b      	lsrs	r3, r3, #16
 801baa2:	b2db      	uxtb	r3, r3
 801baa4:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801baa6:	697b      	ldr	r3, [r7, #20]
 801baa8:	0a1b      	lsrs	r3, r3, #8
 801baaa:	b2db      	uxtb	r3, r3
 801baac:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801baae:	697b      	ldr	r3, [r7, #20]
 801bab0:	b2db      	uxtb	r3, r3
 801bab2:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801bab4:	687b      	ldr	r3, [r7, #4]
 801bab6:	7b1b      	ldrb	r3, [r3, #12]
 801bab8:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801baba:	687b      	ldr	r3, [r7, #4]
 801babc:	7b5b      	ldrb	r3, [r3, #13]
 801babe:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801bac0:	7cfb      	ldrb	r3, [r7, #19]
 801bac2:	b29a      	uxth	r2, r3
 801bac4:	f107 0308 	add.w	r3, r7, #8
 801bac8:	4619      	mov	r1, r3
 801baca:	208b      	movs	r0, #139	; 0x8b
 801bacc:	f000 fa08 	bl	801bee0 <SUBGRF_WriteCommand>
        break;
 801bad0:	e000      	b.n	801bad4 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 801bad2:	bf00      	nop
    }
}
 801bad4:	bf00      	nop
 801bad6:	3718      	adds	r7, #24
 801bad8:	46bd      	mov	sp, r7
 801bada:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801bade:	bf00      	nop
 801bae0:	0801e468 	.word	0x0801e468
 801bae4:	20001c75 	.word	0x20001c75
 801bae8:	3d090000 	.word	0x3d090000
 801baec:	01e84800 	.word	0x01e84800

0801baf0 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801baf0:	b580      	push	{r7, lr}
 801baf2:	b086      	sub	sp, #24
 801baf4:	af00      	add	r7, sp, #0
 801baf6:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801baf8:	2300      	movs	r3, #0
 801bafa:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801bafc:	4a48      	ldr	r2, [pc, #288]	; (801bc20 <SUBGRF_SetPacketParams+0x130>)
 801bafe:	f107 030c 	add.w	r3, r7, #12
 801bb02:	ca07      	ldmia	r2, {r0, r1, r2}
 801bb04:	c303      	stmia	r3!, {r0, r1}
 801bb06:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801bb08:	687b      	ldr	r3, [r7, #4]
 801bb0a:	781a      	ldrb	r2, [r3, #0]
 801bb0c:	4b45      	ldr	r3, [pc, #276]	; (801bc24 <SUBGRF_SetPacketParams+0x134>)
 801bb0e:	781b      	ldrb	r3, [r3, #0]
 801bb10:	429a      	cmp	r2, r3
 801bb12:	d004      	beq.n	801bb1e <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801bb14:	687b      	ldr	r3, [r7, #4]
 801bb16:	781b      	ldrb	r3, [r3, #0]
 801bb18:	4618      	mov	r0, r3
 801bb1a:	f7ff fe23 	bl	801b764 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801bb1e:	687b      	ldr	r3, [r7, #4]
 801bb20:	781b      	ldrb	r3, [r3, #0]
 801bb22:	2b03      	cmp	r3, #3
 801bb24:	d878      	bhi.n	801bc18 <SUBGRF_SetPacketParams+0x128>
 801bb26:	a201      	add	r2, pc, #4	; (adr r2, 801bb2c <SUBGRF_SetPacketParams+0x3c>)
 801bb28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bb2c:	0801bb3d 	.word	0x0801bb3d
 801bb30:	0801bbcd 	.word	0x0801bbcd
 801bb34:	0801bbc1 	.word	0x0801bbc1
 801bb38:	0801bb3d 	.word	0x0801bb3d
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801bb3c:	687b      	ldr	r3, [r7, #4]
 801bb3e:	7a5b      	ldrb	r3, [r3, #9]
 801bb40:	2bf1      	cmp	r3, #241	; 0xf1
 801bb42:	d10a      	bne.n	801bb5a <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801bb44:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801bb48:	f7ff faaa 	bl	801b0a0 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801bb4c:	f248 0005 	movw	r0, #32773	; 0x8005
 801bb50:	f7ff fac6 	bl	801b0e0 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801bb54:	2302      	movs	r3, #2
 801bb56:	75bb      	strb	r3, [r7, #22]
 801bb58:	e011      	b.n	801bb7e <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801bb5a:	687b      	ldr	r3, [r7, #4]
 801bb5c:	7a5b      	ldrb	r3, [r3, #9]
 801bb5e:	2bf2      	cmp	r3, #242	; 0xf2
 801bb60:	d10a      	bne.n	801bb78 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801bb62:	f641 500f 	movw	r0, #7439	; 0x1d0f
 801bb66:	f7ff fa9b 	bl	801b0a0 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801bb6a:	f241 0021 	movw	r0, #4129	; 0x1021
 801bb6e:	f7ff fab7 	bl	801b0e0 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801bb72:	2306      	movs	r3, #6
 801bb74:	75bb      	strb	r3, [r7, #22]
 801bb76:	e002      	b.n	801bb7e <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801bb78:	687b      	ldr	r3, [r7, #4]
 801bb7a:	7a5b      	ldrb	r3, [r3, #9]
 801bb7c:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801bb7e:	2309      	movs	r3, #9
 801bb80:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801bb82:	687b      	ldr	r3, [r7, #4]
 801bb84:	885b      	ldrh	r3, [r3, #2]
 801bb86:	0a1b      	lsrs	r3, r3, #8
 801bb88:	b29b      	uxth	r3, r3
 801bb8a:	b2db      	uxtb	r3, r3
 801bb8c:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801bb8e:	687b      	ldr	r3, [r7, #4]
 801bb90:	885b      	ldrh	r3, [r3, #2]
 801bb92:	b2db      	uxtb	r3, r3
 801bb94:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801bb96:	687b      	ldr	r3, [r7, #4]
 801bb98:	791b      	ldrb	r3, [r3, #4]
 801bb9a:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801bb9c:	687b      	ldr	r3, [r7, #4]
 801bb9e:	795b      	ldrb	r3, [r3, #5]
 801bba0:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801bba2:	687b      	ldr	r3, [r7, #4]
 801bba4:	799b      	ldrb	r3, [r3, #6]
 801bba6:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801bba8:	687b      	ldr	r3, [r7, #4]
 801bbaa:	79db      	ldrb	r3, [r3, #7]
 801bbac:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801bbae:	687b      	ldr	r3, [r7, #4]
 801bbb0:	7a1b      	ldrb	r3, [r3, #8]
 801bbb2:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801bbb4:	7dbb      	ldrb	r3, [r7, #22]
 801bbb6:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801bbb8:	687b      	ldr	r3, [r7, #4]
 801bbba:	7a9b      	ldrb	r3, [r3, #10]
 801bbbc:	753b      	strb	r3, [r7, #20]
        break;
 801bbbe:	e022      	b.n	801bc06 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801bbc0:	2301      	movs	r3, #1
 801bbc2:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801bbc4:	687b      	ldr	r3, [r7, #4]
 801bbc6:	7b1b      	ldrb	r3, [r3, #12]
 801bbc8:	733b      	strb	r3, [r7, #12]
        break;
 801bbca:	e01c      	b.n	801bc06 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801bbcc:	2306      	movs	r3, #6
 801bbce:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801bbd0:	687b      	ldr	r3, [r7, #4]
 801bbd2:	89db      	ldrh	r3, [r3, #14]
 801bbd4:	0a1b      	lsrs	r3, r3, #8
 801bbd6:	b29b      	uxth	r3, r3
 801bbd8:	b2db      	uxtb	r3, r3
 801bbda:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801bbdc:	687b      	ldr	r3, [r7, #4]
 801bbde:	89db      	ldrh	r3, [r3, #14]
 801bbe0:	b2db      	uxtb	r3, r3
 801bbe2:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801bbe4:	687b      	ldr	r3, [r7, #4]
 801bbe6:	7c1a      	ldrb	r2, [r3, #16]
 801bbe8:	4b0f      	ldr	r3, [pc, #60]	; (801bc28 <SUBGRF_SetPacketParams+0x138>)
 801bbea:	4611      	mov	r1, r2
 801bbec:	7019      	strb	r1, [r3, #0]
 801bbee:	4613      	mov	r3, r2
 801bbf0:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801bbf2:	687b      	ldr	r3, [r7, #4]
 801bbf4:	7c5b      	ldrb	r3, [r3, #17]
 801bbf6:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801bbf8:	687b      	ldr	r3, [r7, #4]
 801bbfa:	7c9b      	ldrb	r3, [r3, #18]
 801bbfc:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801bbfe:	687b      	ldr	r3, [r7, #4]
 801bc00:	7cdb      	ldrb	r3, [r3, #19]
 801bc02:	747b      	strb	r3, [r7, #17]
        break;
 801bc04:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801bc06:	7dfb      	ldrb	r3, [r7, #23]
 801bc08:	b29a      	uxth	r2, r3
 801bc0a:	f107 030c 	add.w	r3, r7, #12
 801bc0e:	4619      	mov	r1, r3
 801bc10:	208c      	movs	r0, #140	; 0x8c
 801bc12:	f000 f965 	bl	801bee0 <SUBGRF_WriteCommand>
 801bc16:	e000      	b.n	801bc1a <SUBGRF_SetPacketParams+0x12a>
        return;
 801bc18:	bf00      	nop
}
 801bc1a:	3718      	adds	r7, #24
 801bc1c:	46bd      	mov	sp, r7
 801bc1e:	bd80      	pop	{r7, pc}
 801bc20:	0801e470 	.word	0x0801e470
 801bc24:	20001c75 	.word	0x20001c75
 801bc28:	20001c76 	.word	0x20001c76

0801bc2c <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801bc2c:	b580      	push	{r7, lr}
 801bc2e:	b084      	sub	sp, #16
 801bc30:	af00      	add	r7, sp, #0
 801bc32:	4603      	mov	r3, r0
 801bc34:	460a      	mov	r2, r1
 801bc36:	71fb      	strb	r3, [r7, #7]
 801bc38:	4613      	mov	r3, r2
 801bc3a:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801bc3c:	79fb      	ldrb	r3, [r7, #7]
 801bc3e:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801bc40:	79bb      	ldrb	r3, [r7, #6]
 801bc42:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801bc44:	f107 030c 	add.w	r3, r7, #12
 801bc48:	2202      	movs	r2, #2
 801bc4a:	4619      	mov	r1, r3
 801bc4c:	208f      	movs	r0, #143	; 0x8f
 801bc4e:	f000 f947 	bl	801bee0 <SUBGRF_WriteCommand>
}
 801bc52:	bf00      	nop
 801bc54:	3710      	adds	r7, #16
 801bc56:	46bd      	mov	sp, r7
 801bc58:	bd80      	pop	{r7, pc}

0801bc5a <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801bc5a:	b580      	push	{r7, lr}
 801bc5c:	b082      	sub	sp, #8
 801bc5e:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801bc60:	2300      	movs	r3, #0
 801bc62:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801bc64:	1d3b      	adds	r3, r7, #4
 801bc66:	2201      	movs	r2, #1
 801bc68:	4619      	mov	r1, r3
 801bc6a:	2015      	movs	r0, #21
 801bc6c:	f000 f95a 	bl	801bf24 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801bc70:	793b      	ldrb	r3, [r7, #4]
 801bc72:	425b      	negs	r3, r3
 801bc74:	105b      	asrs	r3, r3, #1
 801bc76:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801bc78:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801bc7c:	4618      	mov	r0, r3
 801bc7e:	3708      	adds	r7, #8
 801bc80:	46bd      	mov	sp, r7
 801bc82:	bd80      	pop	{r7, pc}

0801bc84 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801bc84:	b580      	push	{r7, lr}
 801bc86:	b084      	sub	sp, #16
 801bc88:	af00      	add	r7, sp, #0
 801bc8a:	6078      	str	r0, [r7, #4]
 801bc8c:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801bc8e:	f107 030c 	add.w	r3, r7, #12
 801bc92:	2202      	movs	r2, #2
 801bc94:	4619      	mov	r1, r3
 801bc96:	2013      	movs	r0, #19
 801bc98:	f000 f944 	bl	801bf24 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801bc9c:	f7ff fd7e 	bl	801b79c <SUBGRF_GetPacketType>
 801bca0:	4603      	mov	r3, r0
 801bca2:	2b01      	cmp	r3, #1
 801bca4:	d10d      	bne.n	801bcc2 <SUBGRF_GetRxBufferStatus+0x3e>
 801bca6:	4b0c      	ldr	r3, [pc, #48]	; (801bcd8 <SUBGRF_GetRxBufferStatus+0x54>)
 801bca8:	781b      	ldrb	r3, [r3, #0]
 801bcaa:	b2db      	uxtb	r3, r3
 801bcac:	2b01      	cmp	r3, #1
 801bcae:	d108      	bne.n	801bcc2 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801bcb0:	f240 7002 	movw	r0, #1794	; 0x702
 801bcb4:	f000 f878 	bl	801bda8 <SUBGRF_ReadRegister>
 801bcb8:	4603      	mov	r3, r0
 801bcba:	461a      	mov	r2, r3
 801bcbc:	687b      	ldr	r3, [r7, #4]
 801bcbe:	701a      	strb	r2, [r3, #0]
 801bcc0:	e002      	b.n	801bcc8 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801bcc2:	7b3a      	ldrb	r2, [r7, #12]
 801bcc4:	687b      	ldr	r3, [r7, #4]
 801bcc6:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801bcc8:	7b7a      	ldrb	r2, [r7, #13]
 801bcca:	683b      	ldr	r3, [r7, #0]
 801bccc:	701a      	strb	r2, [r3, #0]
}
 801bcce:	bf00      	nop
 801bcd0:	3710      	adds	r7, #16
 801bcd2:	46bd      	mov	sp, r7
 801bcd4:	bd80      	pop	{r7, pc}
 801bcd6:	bf00      	nop
 801bcd8:	20001c76 	.word	0x20001c76

0801bcdc <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801bcdc:	b580      	push	{r7, lr}
 801bcde:	b084      	sub	sp, #16
 801bce0:	af00      	add	r7, sp, #0
 801bce2:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801bce4:	f107 030c 	add.w	r3, r7, #12
 801bce8:	2203      	movs	r2, #3
 801bcea:	4619      	mov	r1, r3
 801bcec:	2014      	movs	r0, #20
 801bcee:	f000 f919 	bl	801bf24 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801bcf2:	f7ff fd53 	bl	801b79c <SUBGRF_GetPacketType>
 801bcf6:	4603      	mov	r3, r0
 801bcf8:	461a      	mov	r2, r3
 801bcfa:	687b      	ldr	r3, [r7, #4]
 801bcfc:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801bcfe:	687b      	ldr	r3, [r7, #4]
 801bd00:	781b      	ldrb	r3, [r3, #0]
 801bd02:	2b00      	cmp	r3, #0
 801bd04:	d002      	beq.n	801bd0c <SUBGRF_GetPacketStatus+0x30>
 801bd06:	2b01      	cmp	r3, #1
 801bd08:	d013      	beq.n	801bd32 <SUBGRF_GetPacketStatus+0x56>
 801bd0a:	e02a      	b.n	801bd62 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801bd0c:	7b3a      	ldrb	r2, [r7, #12]
 801bd0e:	687b      	ldr	r3, [r7, #4]
 801bd10:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801bd12:	7b7b      	ldrb	r3, [r7, #13]
 801bd14:	425b      	negs	r3, r3
 801bd16:	105b      	asrs	r3, r3, #1
 801bd18:	b25a      	sxtb	r2, r3
 801bd1a:	687b      	ldr	r3, [r7, #4]
 801bd1c:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801bd1e:	7bbb      	ldrb	r3, [r7, #14]
 801bd20:	425b      	negs	r3, r3
 801bd22:	105b      	asrs	r3, r3, #1
 801bd24:	b25a      	sxtb	r2, r3
 801bd26:	687b      	ldr	r3, [r7, #4]
 801bd28:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801bd2a:	687b      	ldr	r3, [r7, #4]
 801bd2c:	2200      	movs	r2, #0
 801bd2e:	609a      	str	r2, [r3, #8]
            break;
 801bd30:	e020      	b.n	801bd74 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801bd32:	7b3b      	ldrb	r3, [r7, #12]
 801bd34:	425b      	negs	r3, r3
 801bd36:	105b      	asrs	r3, r3, #1
 801bd38:	b25a      	sxtb	r2, r3
 801bd3a:	687b      	ldr	r3, [r7, #4]
 801bd3c:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801bd3e:	7b7b      	ldrb	r3, [r7, #13]
 801bd40:	b25b      	sxtb	r3, r3
 801bd42:	3302      	adds	r3, #2
 801bd44:	109b      	asrs	r3, r3, #2
 801bd46:	b25a      	sxtb	r2, r3
 801bd48:	687b      	ldr	r3, [r7, #4]
 801bd4a:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801bd4c:	7bbb      	ldrb	r3, [r7, #14]
 801bd4e:	425b      	negs	r3, r3
 801bd50:	105b      	asrs	r3, r3, #1
 801bd52:	b25a      	sxtb	r2, r3
 801bd54:	687b      	ldr	r3, [r7, #4]
 801bd56:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801bd58:	4b08      	ldr	r3, [pc, #32]	; (801bd7c <SUBGRF_GetPacketStatus+0xa0>)
 801bd5a:	681a      	ldr	r2, [r3, #0]
 801bd5c:	687b      	ldr	r3, [r7, #4]
 801bd5e:	611a      	str	r2, [r3, #16]
            break;
 801bd60:	e008      	b.n	801bd74 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801bd62:	2214      	movs	r2, #20
 801bd64:	2100      	movs	r1, #0
 801bd66:	6878      	ldr	r0, [r7, #4]
 801bd68:	f000 fc03 	bl	801c572 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801bd6c:	687b      	ldr	r3, [r7, #4]
 801bd6e:	220f      	movs	r2, #15
 801bd70:	701a      	strb	r2, [r3, #0]
            break;
 801bd72:	bf00      	nop
    }
}
 801bd74:	bf00      	nop
 801bd76:	3710      	adds	r7, #16
 801bd78:	46bd      	mov	sp, r7
 801bd7a:	bd80      	pop	{r7, pc}
 801bd7c:	20001c78 	.word	0x20001c78

0801bd80 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801bd80:	b580      	push	{r7, lr}
 801bd82:	b082      	sub	sp, #8
 801bd84:	af00      	add	r7, sp, #0
 801bd86:	4603      	mov	r3, r0
 801bd88:	460a      	mov	r2, r1
 801bd8a:	80fb      	strh	r3, [r7, #6]
 801bd8c:	4613      	mov	r3, r2
 801bd8e:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801bd90:	1d7a      	adds	r2, r7, #5
 801bd92:	88f9      	ldrh	r1, [r7, #6]
 801bd94:	2301      	movs	r3, #1
 801bd96:	4803      	ldr	r0, [pc, #12]	; (801bda4 <SUBGRF_WriteRegister+0x24>)
 801bd98:	f7eb fc4e 	bl	8007638 <HAL_SUBGHZ_WriteRegisters>
}
 801bd9c:	bf00      	nop
 801bd9e:	3708      	adds	r7, #8
 801bda0:	46bd      	mov	sp, r7
 801bda2:	bd80      	pop	{r7, pc}
 801bda4:	200002bc 	.word	0x200002bc

0801bda8 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801bda8:	b580      	push	{r7, lr}
 801bdaa:	b084      	sub	sp, #16
 801bdac:	af00      	add	r7, sp, #0
 801bdae:	4603      	mov	r3, r0
 801bdb0:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801bdb2:	f107 020f 	add.w	r2, r7, #15
 801bdb6:	88f9      	ldrh	r1, [r7, #6]
 801bdb8:	2301      	movs	r3, #1
 801bdba:	4804      	ldr	r0, [pc, #16]	; (801bdcc <SUBGRF_ReadRegister+0x24>)
 801bdbc:	f7eb fc9b 	bl	80076f6 <HAL_SUBGHZ_ReadRegisters>
    return data;
 801bdc0:	7bfb      	ldrb	r3, [r7, #15]
}
 801bdc2:	4618      	mov	r0, r3
 801bdc4:	3710      	adds	r7, #16
 801bdc6:	46bd      	mov	sp, r7
 801bdc8:	bd80      	pop	{r7, pc}
 801bdca:	bf00      	nop
 801bdcc:	200002bc 	.word	0x200002bc

0801bdd0 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801bdd0:	b580      	push	{r7, lr}
 801bdd2:	b086      	sub	sp, #24
 801bdd4:	af00      	add	r7, sp, #0
 801bdd6:	4603      	mov	r3, r0
 801bdd8:	6039      	str	r1, [r7, #0]
 801bdda:	80fb      	strh	r3, [r7, #6]
 801bddc:	4613      	mov	r3, r2
 801bdde:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bde0:	f3ef 8310 	mrs	r3, PRIMASK
 801bde4:	60fb      	str	r3, [r7, #12]
  return(result);
 801bde6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801bde8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bdea:	b672      	cpsid	i
}
 801bdec:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801bdee:	88bb      	ldrh	r3, [r7, #4]
 801bdf0:	88f9      	ldrh	r1, [r7, #6]
 801bdf2:	683a      	ldr	r2, [r7, #0]
 801bdf4:	4806      	ldr	r0, [pc, #24]	; (801be10 <SUBGRF_WriteRegisters+0x40>)
 801bdf6:	f7eb fc1f 	bl	8007638 <HAL_SUBGHZ_WriteRegisters>
 801bdfa:	697b      	ldr	r3, [r7, #20]
 801bdfc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bdfe:	693b      	ldr	r3, [r7, #16]
 801be00:	f383 8810 	msr	PRIMASK, r3
}
 801be04:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801be06:	bf00      	nop
 801be08:	3718      	adds	r7, #24
 801be0a:	46bd      	mov	sp, r7
 801be0c:	bd80      	pop	{r7, pc}
 801be0e:	bf00      	nop
 801be10:	200002bc 	.word	0x200002bc

0801be14 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801be14:	b580      	push	{r7, lr}
 801be16:	b086      	sub	sp, #24
 801be18:	af00      	add	r7, sp, #0
 801be1a:	4603      	mov	r3, r0
 801be1c:	6039      	str	r1, [r7, #0]
 801be1e:	80fb      	strh	r3, [r7, #6]
 801be20:	4613      	mov	r3, r2
 801be22:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801be24:	f3ef 8310 	mrs	r3, PRIMASK
 801be28:	60fb      	str	r3, [r7, #12]
  return(result);
 801be2a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801be2c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801be2e:	b672      	cpsid	i
}
 801be30:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801be32:	88bb      	ldrh	r3, [r7, #4]
 801be34:	88f9      	ldrh	r1, [r7, #6]
 801be36:	683a      	ldr	r2, [r7, #0]
 801be38:	4806      	ldr	r0, [pc, #24]	; (801be54 <SUBGRF_ReadRegisters+0x40>)
 801be3a:	f7eb fc5c 	bl	80076f6 <HAL_SUBGHZ_ReadRegisters>
 801be3e:	697b      	ldr	r3, [r7, #20]
 801be40:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801be42:	693b      	ldr	r3, [r7, #16]
 801be44:	f383 8810 	msr	PRIMASK, r3
}
 801be48:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801be4a:	bf00      	nop
 801be4c:	3718      	adds	r7, #24
 801be4e:	46bd      	mov	sp, r7
 801be50:	bd80      	pop	{r7, pc}
 801be52:	bf00      	nop
 801be54:	200002bc 	.word	0x200002bc

0801be58 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801be58:	b580      	push	{r7, lr}
 801be5a:	b086      	sub	sp, #24
 801be5c:	af00      	add	r7, sp, #0
 801be5e:	4603      	mov	r3, r0
 801be60:	6039      	str	r1, [r7, #0]
 801be62:	71fb      	strb	r3, [r7, #7]
 801be64:	4613      	mov	r3, r2
 801be66:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801be68:	f3ef 8310 	mrs	r3, PRIMASK
 801be6c:	60fb      	str	r3, [r7, #12]
  return(result);
 801be6e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801be70:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801be72:	b672      	cpsid	i
}
 801be74:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801be76:	79bb      	ldrb	r3, [r7, #6]
 801be78:	b29b      	uxth	r3, r3
 801be7a:	79f9      	ldrb	r1, [r7, #7]
 801be7c:	683a      	ldr	r2, [r7, #0]
 801be7e:	4806      	ldr	r0, [pc, #24]	; (801be98 <SUBGRF_WriteBuffer+0x40>)
 801be80:	f7eb fd4d 	bl	800791e <HAL_SUBGHZ_WriteBuffer>
 801be84:	697b      	ldr	r3, [r7, #20]
 801be86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801be88:	693b      	ldr	r3, [r7, #16]
 801be8a:	f383 8810 	msr	PRIMASK, r3
}
 801be8e:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801be90:	bf00      	nop
 801be92:	3718      	adds	r7, #24
 801be94:	46bd      	mov	sp, r7
 801be96:	bd80      	pop	{r7, pc}
 801be98:	200002bc 	.word	0x200002bc

0801be9c <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801be9c:	b580      	push	{r7, lr}
 801be9e:	b086      	sub	sp, #24
 801bea0:	af00      	add	r7, sp, #0
 801bea2:	4603      	mov	r3, r0
 801bea4:	6039      	str	r1, [r7, #0]
 801bea6:	71fb      	strb	r3, [r7, #7]
 801bea8:	4613      	mov	r3, r2
 801beaa:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801beac:	f3ef 8310 	mrs	r3, PRIMASK
 801beb0:	60fb      	str	r3, [r7, #12]
  return(result);
 801beb2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801beb4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801beb6:	b672      	cpsid	i
}
 801beb8:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801beba:	79bb      	ldrb	r3, [r7, #6]
 801bebc:	b29b      	uxth	r3, r3
 801bebe:	79f9      	ldrb	r1, [r7, #7]
 801bec0:	683a      	ldr	r2, [r7, #0]
 801bec2:	4806      	ldr	r0, [pc, #24]	; (801bedc <SUBGRF_ReadBuffer+0x40>)
 801bec4:	f7eb fd7e 	bl	80079c4 <HAL_SUBGHZ_ReadBuffer>
 801bec8:	697b      	ldr	r3, [r7, #20]
 801beca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801becc:	693b      	ldr	r3, [r7, #16]
 801bece:	f383 8810 	msr	PRIMASK, r3
}
 801bed2:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801bed4:	bf00      	nop
 801bed6:	3718      	adds	r7, #24
 801bed8:	46bd      	mov	sp, r7
 801beda:	bd80      	pop	{r7, pc}
 801bedc:	200002bc 	.word	0x200002bc

0801bee0 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801bee0:	b580      	push	{r7, lr}
 801bee2:	b086      	sub	sp, #24
 801bee4:	af00      	add	r7, sp, #0
 801bee6:	4603      	mov	r3, r0
 801bee8:	6039      	str	r1, [r7, #0]
 801beea:	71fb      	strb	r3, [r7, #7]
 801beec:	4613      	mov	r3, r2
 801beee:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bef0:	f3ef 8310 	mrs	r3, PRIMASK
 801bef4:	60fb      	str	r3, [r7, #12]
  return(result);
 801bef6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801bef8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801befa:	b672      	cpsid	i
}
 801befc:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801befe:	88bb      	ldrh	r3, [r7, #4]
 801bf00:	79f9      	ldrb	r1, [r7, #7]
 801bf02:	683a      	ldr	r2, [r7, #0]
 801bf04:	4806      	ldr	r0, [pc, #24]	; (801bf20 <SUBGRF_WriteCommand+0x40>)
 801bf06:	f7eb fc57 	bl	80077b8 <HAL_SUBGHZ_ExecSetCmd>
 801bf0a:	697b      	ldr	r3, [r7, #20]
 801bf0c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bf0e:	693b      	ldr	r3, [r7, #16]
 801bf10:	f383 8810 	msr	PRIMASK, r3
}
 801bf14:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801bf16:	bf00      	nop
 801bf18:	3718      	adds	r7, #24
 801bf1a:	46bd      	mov	sp, r7
 801bf1c:	bd80      	pop	{r7, pc}
 801bf1e:	bf00      	nop
 801bf20:	200002bc 	.word	0x200002bc

0801bf24 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801bf24:	b580      	push	{r7, lr}
 801bf26:	b086      	sub	sp, #24
 801bf28:	af00      	add	r7, sp, #0
 801bf2a:	4603      	mov	r3, r0
 801bf2c:	6039      	str	r1, [r7, #0]
 801bf2e:	71fb      	strb	r3, [r7, #7]
 801bf30:	4613      	mov	r3, r2
 801bf32:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bf34:	f3ef 8310 	mrs	r3, PRIMASK
 801bf38:	60fb      	str	r3, [r7, #12]
  return(result);
 801bf3a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801bf3c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bf3e:	b672      	cpsid	i
}
 801bf40:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801bf42:	88bb      	ldrh	r3, [r7, #4]
 801bf44:	79f9      	ldrb	r1, [r7, #7]
 801bf46:	683a      	ldr	r2, [r7, #0]
 801bf48:	4806      	ldr	r0, [pc, #24]	; (801bf64 <SUBGRF_ReadCommand+0x40>)
 801bf4a:	f7eb fc94 	bl	8007876 <HAL_SUBGHZ_ExecGetCmd>
 801bf4e:	697b      	ldr	r3, [r7, #20]
 801bf50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bf52:	693b      	ldr	r3, [r7, #16]
 801bf54:	f383 8810 	msr	PRIMASK, r3
}
 801bf58:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801bf5a:	bf00      	nop
 801bf5c:	3718      	adds	r7, #24
 801bf5e:	46bd      	mov	sp, r7
 801bf60:	bd80      	pop	{r7, pc}
 801bf62:	bf00      	nop
 801bf64:	200002bc 	.word	0x200002bc

0801bf68 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801bf68:	b580      	push	{r7, lr}
 801bf6a:	b084      	sub	sp, #16
 801bf6c:	af00      	add	r7, sp, #0
 801bf6e:	4603      	mov	r3, r0
 801bf70:	460a      	mov	r2, r1
 801bf72:	71fb      	strb	r3, [r7, #7]
 801bf74:	4613      	mov	r3, r2
 801bf76:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801bf78:	2301      	movs	r3, #1
 801bf7a:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801bf7c:	79bb      	ldrb	r3, [r7, #6]
 801bf7e:	2b01      	cmp	r3, #1
 801bf80:	d10d      	bne.n	801bf9e <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801bf82:	79fb      	ldrb	r3, [r7, #7]
 801bf84:	2b01      	cmp	r3, #1
 801bf86:	d104      	bne.n	801bf92 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801bf88:	2302      	movs	r3, #2
 801bf8a:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801bf8c:	2004      	movs	r0, #4
 801bf8e:	f000 f8ef 	bl	801c170 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801bf92:	79fb      	ldrb	r3, [r7, #7]
 801bf94:	2b02      	cmp	r3, #2
 801bf96:	d107      	bne.n	801bfa8 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801bf98:	2303      	movs	r3, #3
 801bf9a:	73fb      	strb	r3, [r7, #15]
 801bf9c:	e004      	b.n	801bfa8 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801bf9e:	79bb      	ldrb	r3, [r7, #6]
 801bfa0:	2b00      	cmp	r3, #0
 801bfa2:	d101      	bne.n	801bfa8 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801bfa4:	2301      	movs	r3, #1
 801bfa6:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801bfa8:	7bfb      	ldrb	r3, [r7, #15]
 801bfaa:	4618      	mov	r0, r3
 801bfac:	f7ee ff47 	bl	800ae3e <RBI_ConfigRFSwitch>
}
 801bfb0:	bf00      	nop
 801bfb2:	3710      	adds	r7, #16
 801bfb4:	46bd      	mov	sp, r7
 801bfb6:	bd80      	pop	{r7, pc}

0801bfb8 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801bfb8:	b580      	push	{r7, lr}
 801bfba:	b084      	sub	sp, #16
 801bfbc:	af00      	add	r7, sp, #0
 801bfbe:	4603      	mov	r3, r0
 801bfc0:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801bfc2:	2301      	movs	r3, #1
 801bfc4:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801bfc6:	f7ee ff48 	bl	800ae5a <RBI_GetTxConfig>
 801bfca:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801bfcc:	68bb      	ldr	r3, [r7, #8]
 801bfce:	2b02      	cmp	r3, #2
 801bfd0:	d016      	beq.n	801c000 <SUBGRF_SetRfTxPower+0x48>
 801bfd2:	68bb      	ldr	r3, [r7, #8]
 801bfd4:	2b02      	cmp	r3, #2
 801bfd6:	dc16      	bgt.n	801c006 <SUBGRF_SetRfTxPower+0x4e>
 801bfd8:	68bb      	ldr	r3, [r7, #8]
 801bfda:	2b00      	cmp	r3, #0
 801bfdc:	d003      	beq.n	801bfe6 <SUBGRF_SetRfTxPower+0x2e>
 801bfde:	68bb      	ldr	r3, [r7, #8]
 801bfe0:	2b01      	cmp	r3, #1
 801bfe2:	d00a      	beq.n	801bffa <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801bfe4:	e00f      	b.n	801c006 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801bfe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bfea:	2b0f      	cmp	r3, #15
 801bfec:	dd02      	ble.n	801bff4 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801bfee:	2302      	movs	r3, #2
 801bff0:	73fb      	strb	r3, [r7, #15]
            break;
 801bff2:	e009      	b.n	801c008 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801bff4:	2301      	movs	r3, #1
 801bff6:	73fb      	strb	r3, [r7, #15]
            break;
 801bff8:	e006      	b.n	801c008 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801bffa:	2301      	movs	r3, #1
 801bffc:	73fb      	strb	r3, [r7, #15]
            break;
 801bffe:	e003      	b.n	801c008 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801c000:	2302      	movs	r3, #2
 801c002:	73fb      	strb	r3, [r7, #15]
            break;
 801c004:	e000      	b.n	801c008 <SUBGRF_SetRfTxPower+0x50>
            break;
 801c006:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801c008:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801c00c:	7bfb      	ldrb	r3, [r7, #15]
 801c00e:	2202      	movs	r2, #2
 801c010:	4618      	mov	r0, r3
 801c012:	f7ff fbcd 	bl	801b7b0 <SUBGRF_SetTxParams>

    return paSelect;
 801c016:	7bfb      	ldrb	r3, [r7, #15]
}
 801c018:	4618      	mov	r0, r3
 801c01a:	3710      	adds	r7, #16
 801c01c:	46bd      	mov	sp, r7
 801c01e:	bd80      	pop	{r7, pc}

0801c020 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801c020:	b480      	push	{r7}
 801c022:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801c024:	2301      	movs	r3, #1
}
 801c026:	4618      	mov	r0, r3
 801c028:	46bd      	mov	sp, r7
 801c02a:	bc80      	pop	{r7}
 801c02c:	4770      	bx	lr
	...

0801c030 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c030:	b580      	push	{r7, lr}
 801c032:	b082      	sub	sp, #8
 801c034:	af00      	add	r7, sp, #0
 801c036:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801c038:	4b03      	ldr	r3, [pc, #12]	; (801c048 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801c03a:	681b      	ldr	r3, [r3, #0]
 801c03c:	2001      	movs	r0, #1
 801c03e:	4798      	blx	r3
}
 801c040:	bf00      	nop
 801c042:	3708      	adds	r7, #8
 801c044:	46bd      	mov	sp, r7
 801c046:	bd80      	pop	{r7, pc}
 801c048:	20001c80 	.word	0x20001c80

0801c04c <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c04c:	b580      	push	{r7, lr}
 801c04e:	b082      	sub	sp, #8
 801c050:	af00      	add	r7, sp, #0
 801c052:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801c054:	4b03      	ldr	r3, [pc, #12]	; (801c064 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801c056:	681b      	ldr	r3, [r3, #0]
 801c058:	2002      	movs	r0, #2
 801c05a:	4798      	blx	r3
}
 801c05c:	bf00      	nop
 801c05e:	3708      	adds	r7, #8
 801c060:	46bd      	mov	sp, r7
 801c062:	bd80      	pop	{r7, pc}
 801c064:	20001c80 	.word	0x20001c80

0801c068 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801c068:	b580      	push	{r7, lr}
 801c06a:	b082      	sub	sp, #8
 801c06c:	af00      	add	r7, sp, #0
 801c06e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801c070:	4b03      	ldr	r3, [pc, #12]	; (801c080 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801c072:	681b      	ldr	r3, [r3, #0]
 801c074:	2040      	movs	r0, #64	; 0x40
 801c076:	4798      	blx	r3
}
 801c078:	bf00      	nop
 801c07a:	3708      	adds	r7, #8
 801c07c:	46bd      	mov	sp, r7
 801c07e:	bd80      	pop	{r7, pc}
 801c080:	20001c80 	.word	0x20001c80

0801c084 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801c084:	b580      	push	{r7, lr}
 801c086:	b082      	sub	sp, #8
 801c088:	af00      	add	r7, sp, #0
 801c08a:	6078      	str	r0, [r7, #4]
 801c08c:	460b      	mov	r3, r1
 801c08e:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801c090:	78fb      	ldrb	r3, [r7, #3]
 801c092:	2b00      	cmp	r3, #0
 801c094:	d002      	beq.n	801c09c <HAL_SUBGHZ_CADStatusCallback+0x18>
 801c096:	2b01      	cmp	r3, #1
 801c098:	d005      	beq.n	801c0a6 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801c09a:	e00a      	b.n	801c0b2 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801c09c:	4b07      	ldr	r3, [pc, #28]	; (801c0bc <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801c09e:	681b      	ldr	r3, [r3, #0]
 801c0a0:	2080      	movs	r0, #128	; 0x80
 801c0a2:	4798      	blx	r3
            break;
 801c0a4:	e005      	b.n	801c0b2 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801c0a6:	4b05      	ldr	r3, [pc, #20]	; (801c0bc <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801c0a8:	681b      	ldr	r3, [r3, #0]
 801c0aa:	f44f 7080 	mov.w	r0, #256	; 0x100
 801c0ae:	4798      	blx	r3
            break;
 801c0b0:	bf00      	nop
    }
}
 801c0b2:	bf00      	nop
 801c0b4:	3708      	adds	r7, #8
 801c0b6:	46bd      	mov	sp, r7
 801c0b8:	bd80      	pop	{r7, pc}
 801c0ba:	bf00      	nop
 801c0bc:	20001c80 	.word	0x20001c80

0801c0c0 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c0c0:	b580      	push	{r7, lr}
 801c0c2:	b082      	sub	sp, #8
 801c0c4:	af00      	add	r7, sp, #0
 801c0c6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801c0c8:	4b04      	ldr	r3, [pc, #16]	; (801c0dc <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801c0ca:	681b      	ldr	r3, [r3, #0]
 801c0cc:	f44f 7000 	mov.w	r0, #512	; 0x200
 801c0d0:	4798      	blx	r3
}
 801c0d2:	bf00      	nop
 801c0d4:	3708      	adds	r7, #8
 801c0d6:	46bd      	mov	sp, r7
 801c0d8:	bd80      	pop	{r7, pc}
 801c0da:	bf00      	nop
 801c0dc:	20001c80 	.word	0x20001c80

0801c0e0 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c0e0:	b580      	push	{r7, lr}
 801c0e2:	b082      	sub	sp, #8
 801c0e4:	af00      	add	r7, sp, #0
 801c0e6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801c0e8:	4b03      	ldr	r3, [pc, #12]	; (801c0f8 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801c0ea:	681b      	ldr	r3, [r3, #0]
 801c0ec:	2020      	movs	r0, #32
 801c0ee:	4798      	blx	r3
}
 801c0f0:	bf00      	nop
 801c0f2:	3708      	adds	r7, #8
 801c0f4:	46bd      	mov	sp, r7
 801c0f6:	bd80      	pop	{r7, pc}
 801c0f8:	20001c80 	.word	0x20001c80

0801c0fc <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c0fc:	b580      	push	{r7, lr}
 801c0fe:	b082      	sub	sp, #8
 801c100:	af00      	add	r7, sp, #0
 801c102:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801c104:	4b03      	ldr	r3, [pc, #12]	; (801c114 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801c106:	681b      	ldr	r3, [r3, #0]
 801c108:	2004      	movs	r0, #4
 801c10a:	4798      	blx	r3
}
 801c10c:	bf00      	nop
 801c10e:	3708      	adds	r7, #8
 801c110:	46bd      	mov	sp, r7
 801c112:	bd80      	pop	{r7, pc}
 801c114:	20001c80 	.word	0x20001c80

0801c118 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c118:	b580      	push	{r7, lr}
 801c11a:	b082      	sub	sp, #8
 801c11c:	af00      	add	r7, sp, #0
 801c11e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801c120:	4b03      	ldr	r3, [pc, #12]	; (801c130 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801c122:	681b      	ldr	r3, [r3, #0]
 801c124:	2008      	movs	r0, #8
 801c126:	4798      	blx	r3
}
 801c128:	bf00      	nop
 801c12a:	3708      	adds	r7, #8
 801c12c:	46bd      	mov	sp, r7
 801c12e:	bd80      	pop	{r7, pc}
 801c130:	20001c80 	.word	0x20001c80

0801c134 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c134:	b580      	push	{r7, lr}
 801c136:	b082      	sub	sp, #8
 801c138:	af00      	add	r7, sp, #0
 801c13a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801c13c:	4b03      	ldr	r3, [pc, #12]	; (801c14c <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801c13e:	681b      	ldr	r3, [r3, #0]
 801c140:	2010      	movs	r0, #16
 801c142:	4798      	blx	r3
}
 801c144:	bf00      	nop
 801c146:	3708      	adds	r7, #8
 801c148:	46bd      	mov	sp, r7
 801c14a:	bd80      	pop	{r7, pc}
 801c14c:	20001c80 	.word	0x20001c80

0801c150 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c150:	b580      	push	{r7, lr}
 801c152:	b082      	sub	sp, #8
 801c154:	af00      	add	r7, sp, #0
 801c156:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 801c158:	4b04      	ldr	r3, [pc, #16]	; (801c16c <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 801c15a:	681b      	ldr	r3, [r3, #0]
 801c15c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 801c160:	4798      	blx	r3
}
 801c162:	bf00      	nop
 801c164:	3708      	adds	r7, #8
 801c166:	46bd      	mov	sp, r7
 801c168:	bd80      	pop	{r7, pc}
 801c16a:	bf00      	nop
 801c16c:	20001c80 	.word	0x20001c80

0801c170 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801c170:	b580      	push	{r7, lr}
 801c172:	b084      	sub	sp, #16
 801c174:	af00      	add	r7, sp, #0
 801c176:	4603      	mov	r3, r0
 801c178:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801c17a:	f7ee fe7c 	bl	800ae76 <RBI_IsDCDC>
 801c17e:	4603      	mov	r3, r0
 801c180:	2b01      	cmp	r3, #1
 801c182:	d112      	bne.n	801c1aa <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801c184:	f640 1023 	movw	r0, #2339	; 0x923
 801c188:	f7ff fe0e 	bl	801bda8 <SUBGRF_ReadRegister>
 801c18c:	4603      	mov	r3, r0
 801c18e:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801c190:	7bfb      	ldrb	r3, [r7, #15]
 801c192:	f023 0306 	bic.w	r3, r3, #6
 801c196:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801c198:	7bfa      	ldrb	r2, [r7, #15]
 801c19a:	79fb      	ldrb	r3, [r7, #7]
 801c19c:	4313      	orrs	r3, r2
 801c19e:	b2db      	uxtb	r3, r3
 801c1a0:	4619      	mov	r1, r3
 801c1a2:	f640 1023 	movw	r0, #2339	; 0x923
 801c1a6:	f7ff fdeb 	bl	801bd80 <SUBGRF_WriteRegister>
  }
}
 801c1aa:	bf00      	nop
 801c1ac:	3710      	adds	r7, #16
 801c1ae:	46bd      	mov	sp, r7
 801c1b0:	bd80      	pop	{r7, pc}
	...

0801c1b4 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801c1b4:	b480      	push	{r7}
 801c1b6:	b085      	sub	sp, #20
 801c1b8:	af00      	add	r7, sp, #0
 801c1ba:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801c1bc:	687b      	ldr	r3, [r7, #4]
 801c1be:	2b00      	cmp	r3, #0
 801c1c0:	d101      	bne.n	801c1c6 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801c1c2:	231f      	movs	r3, #31
 801c1c4:	e016      	b.n	801c1f4 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801c1c6:	2300      	movs	r3, #0
 801c1c8:	73fb      	strb	r3, [r7, #15]
 801c1ca:	e00f      	b.n	801c1ec <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801c1cc:	7bfb      	ldrb	r3, [r7, #15]
 801c1ce:	4a0c      	ldr	r2, [pc, #48]	; (801c200 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801c1d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801c1d4:	687a      	ldr	r2, [r7, #4]
 801c1d6:	429a      	cmp	r2, r3
 801c1d8:	d205      	bcs.n	801c1e6 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801c1da:	7bfb      	ldrb	r3, [r7, #15]
 801c1dc:	4a08      	ldr	r2, [pc, #32]	; (801c200 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801c1de:	00db      	lsls	r3, r3, #3
 801c1e0:	4413      	add	r3, r2
 801c1e2:	791b      	ldrb	r3, [r3, #4]
 801c1e4:	e006      	b.n	801c1f4 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801c1e6:	7bfb      	ldrb	r3, [r7, #15]
 801c1e8:	3301      	adds	r3, #1
 801c1ea:	73fb      	strb	r3, [r7, #15]
 801c1ec:	7bfb      	ldrb	r3, [r7, #15]
 801c1ee:	2b15      	cmp	r3, #21
 801c1f0:	d9ec      	bls.n	801c1cc <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 801c1f2:	e7fe      	b.n	801c1f2 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801c1f4:	4618      	mov	r0, r3
 801c1f6:	3714      	adds	r7, #20
 801c1f8:	46bd      	mov	sp, r7
 801c1fa:	bc80      	pop	{r7}
 801c1fc:	4770      	bx	lr
 801c1fe:	bf00      	nop
 801c200:	0801eae4 	.word	0x0801eae4

0801c204 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801c204:	b580      	push	{r7, lr}
 801c206:	b08a      	sub	sp, #40	; 0x28
 801c208:	af00      	add	r7, sp, #0
 801c20a:	6078      	str	r0, [r7, #4]
 801c20c:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801c20e:	4b35      	ldr	r3, [pc, #212]	; (801c2e4 <SUBGRF_GetCFO+0xe0>)
 801c210:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801c212:	f640 0007 	movw	r0, #2055	; 0x807
 801c216:	f7ff fdc7 	bl	801bda8 <SUBGRF_ReadRegister>
 801c21a:	4603      	mov	r3, r0
 801c21c:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801c21e:	7ffb      	ldrb	r3, [r7, #31]
 801c220:	08db      	lsrs	r3, r3, #3
 801c222:	b2db      	uxtb	r3, r3
 801c224:	f003 0303 	and.w	r3, r3, #3
 801c228:	3328      	adds	r3, #40	; 0x28
 801c22a:	443b      	add	r3, r7
 801c22c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801c230:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801c232:	7ffb      	ldrb	r3, [r7, #31]
 801c234:	f003 0307 	and.w	r3, r3, #7
 801c238:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 801c23a:	7fba      	ldrb	r2, [r7, #30]
 801c23c:	7f7b      	ldrb	r3, [r7, #29]
 801c23e:	3301      	adds	r3, #1
 801c240:	fa02 f303 	lsl.w	r3, r2, r3
 801c244:	461a      	mov	r2, r3
 801c246:	4b28      	ldr	r3, [pc, #160]	; (801c2e8 <SUBGRF_GetCFO+0xe4>)
 801c248:	fbb3 f3f2 	udiv	r3, r3, r2
 801c24c:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801c24e:	69ba      	ldr	r2, [r7, #24]
 801c250:	687b      	ldr	r3, [r7, #4]
 801c252:	fbb2 f3f3 	udiv	r3, r2, r3
 801c256:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801c258:	2301      	movs	r3, #1
 801c25a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801c25e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c262:	697a      	ldr	r2, [r7, #20]
 801c264:	fb02 f303 	mul.w	r3, r2, r3
 801c268:	2b07      	cmp	r3, #7
 801c26a:	d802      	bhi.n	801c272 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801c26c:	2302      	movs	r3, #2
 801c26e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 801c272:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c276:	697a      	ldr	r2, [r7, #20]
 801c278:	fb02 f303 	mul.w	r3, r2, r3
 801c27c:	2b03      	cmp	r3, #3
 801c27e:	d802      	bhi.n	801c286 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801c280:	2304      	movs	r3, #4
 801c282:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801c286:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801c28a:	69bb      	ldr	r3, [r7, #24]
 801c28c:	fb02 f303 	mul.w	r3, r2, r3
 801c290:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801c292:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 801c296:	f7ff fd87 	bl	801bda8 <SUBGRF_ReadRegister>
 801c29a:	4603      	mov	r3, r0
 801c29c:	021b      	lsls	r3, r3, #8
 801c29e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801c2a2:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801c2a4:	f240 60b1 	movw	r0, #1713	; 0x6b1
 801c2a8:	f7ff fd7e 	bl	801bda8 <SUBGRF_ReadRegister>
 801c2ac:	4603      	mov	r3, r0
 801c2ae:	461a      	mov	r2, r3
 801c2b0:	6a3b      	ldr	r3, [r7, #32]
 801c2b2:	4313      	orrs	r3, r2
 801c2b4:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801c2b6:	6a3b      	ldr	r3, [r7, #32]
 801c2b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801c2bc:	2b00      	cmp	r3, #0
 801c2be:	d005      	beq.n	801c2cc <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801c2c0:	6a3b      	ldr	r3, [r7, #32]
 801c2c2:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801c2c6:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801c2ca:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801c2cc:	693b      	ldr	r3, [r7, #16]
 801c2ce:	095b      	lsrs	r3, r3, #5
 801c2d0:	6a3a      	ldr	r2, [r7, #32]
 801c2d2:	fb02 f303 	mul.w	r3, r2, r3
 801c2d6:	11da      	asrs	r2, r3, #7
 801c2d8:	683b      	ldr	r3, [r7, #0]
 801c2da:	601a      	str	r2, [r3, #0]
}
 801c2dc:	bf00      	nop
 801c2de:	3728      	adds	r7, #40	; 0x28
 801c2e0:	46bd      	mov	sp, r7
 801c2e2:	bd80      	pop	{r7, pc}
 801c2e4:	0c0a0804 	.word	0x0c0a0804
 801c2e8:	01e84800 	.word	0x01e84800

0801c2ec <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 801c2ec:	b480      	push	{r7}
 801c2ee:	b087      	sub	sp, #28
 801c2f0:	af00      	add	r7, sp, #0
 801c2f2:	4603      	mov	r3, r0
 801c2f4:	60b9      	str	r1, [r7, #8]
 801c2f6:	607a      	str	r2, [r7, #4]
 801c2f8:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 801c2fa:	2300      	movs	r3, #0
 801c2fc:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 801c2fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c302:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801c304:	697b      	ldr	r3, [r7, #20]
}
 801c306:	4618      	mov	r0, r3
 801c308:	371c      	adds	r7, #28
 801c30a:	46bd      	mov	sp, r7
 801c30c:	bc80      	pop	{r7}
 801c30e:	4770      	bx	lr

0801c310 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 801c310:	b480      	push	{r7}
 801c312:	b087      	sub	sp, #28
 801c314:	af00      	add	r7, sp, #0
 801c316:	4603      	mov	r3, r0
 801c318:	60b9      	str	r1, [r7, #8]
 801c31a:	607a      	str	r2, [r7, #4]
 801c31c:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 801c31e:	2300      	movs	r3, #0
 801c320:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 801c322:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c326:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801c328:	697b      	ldr	r3, [r7, #20]
}
 801c32a:	4618      	mov	r0, r3
 801c32c:	371c      	adds	r7, #28
 801c32e:	46bd      	mov	sp, r7
 801c330:	bc80      	pop	{r7}
 801c332:	4770      	bx	lr

0801c334 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 801c334:	b480      	push	{r7}
 801c336:	b085      	sub	sp, #20
 801c338:	af00      	add	r7, sp, #0
 801c33a:	60f8      	str	r0, [r7, #12]
 801c33c:	60b9      	str	r1, [r7, #8]
 801c33e:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 801c340:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 801c344:	4618      	mov	r0, r3
 801c346:	3714      	adds	r7, #20
 801c348:	46bd      	mov	sp, r7
 801c34a:	bc80      	pop	{r7}
 801c34c:	4770      	bx	lr

0801c34e <RFW_DeInit>:

void RFW_DeInit( void )
{
 801c34e:	b480      	push	{r7}
 801c350:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 801c352:	bf00      	nop
 801c354:	46bd      	mov	sp, r7
 801c356:	bc80      	pop	{r7}
 801c358:	4770      	bx	lr

0801c35a <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 801c35a:	b480      	push	{r7}
 801c35c:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 801c35e:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801c360:	4618      	mov	r0, r3
 801c362:	46bd      	mov	sp, r7
 801c364:	bc80      	pop	{r7}
 801c366:	4770      	bx	lr

0801c368 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 801c368:	b480      	push	{r7}
 801c36a:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 801c36c:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801c36e:	4618      	mov	r0, r3
 801c370:	46bd      	mov	sp, r7
 801c372:	bc80      	pop	{r7}
 801c374:	4770      	bx	lr

0801c376 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 801c376:	b480      	push	{r7}
 801c378:	b083      	sub	sp, #12
 801c37a:	af00      	add	r7, sp, #0
 801c37c:	4603      	mov	r3, r0
 801c37e:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 801c380:	bf00      	nop
 801c382:	370c      	adds	r7, #12
 801c384:	46bd      	mov	sp, r7
 801c386:	bc80      	pop	{r7}
 801c388:	4770      	bx	lr

0801c38a <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 801c38a:	b480      	push	{r7}
 801c38c:	b087      	sub	sp, #28
 801c38e:	af00      	add	r7, sp, #0
 801c390:	60f8      	str	r0, [r7, #12]
 801c392:	460b      	mov	r3, r1
 801c394:	607a      	str	r2, [r7, #4]
 801c396:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 801c398:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c39c:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 801c39e:	697b      	ldr	r3, [r7, #20]
}
 801c3a0:	4618      	mov	r0, r3
 801c3a2:	371c      	adds	r7, #28
 801c3a4:	46bd      	mov	sp, r7
 801c3a6:	bc80      	pop	{r7}
 801c3a8:	4770      	bx	lr

0801c3aa <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801c3aa:	b480      	push	{r7}
 801c3ac:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 801c3ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 801c3b2:	4618      	mov	r0, r3
 801c3b4:	46bd      	mov	sp, r7
 801c3b6:	bc80      	pop	{r7}
 801c3b8:	4770      	bx	lr

0801c3ba <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 801c3ba:	b480      	push	{r7}
 801c3bc:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 801c3be:	bf00      	nop
 801c3c0:	46bd      	mov	sp, r7
 801c3c2:	bc80      	pop	{r7}
 801c3c4:	4770      	bx	lr

0801c3c6 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801c3c6:	b480      	push	{r7}
 801c3c8:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 801c3ca:	bf00      	nop
 801c3cc:	46bd      	mov	sp, r7
 801c3ce:	bc80      	pop	{r7}
 801c3d0:	4770      	bx	lr

0801c3d2 <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 801c3d2:	b480      	push	{r7}
 801c3d4:	b083      	sub	sp, #12
 801c3d6:	af00      	add	r7, sp, #0
 801c3d8:	4603      	mov	r3, r0
 801c3da:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 801c3dc:	bf00      	nop
 801c3de:	370c      	adds	r7, #12
 801c3e0:	46bd      	mov	sp, r7
 801c3e2:	bc80      	pop	{r7}
 801c3e4:	4770      	bx	lr
	...

0801c3e8 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801c3e8:	b480      	push	{r7}
 801c3ea:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801c3ec:	4b04      	ldr	r3, [pc, #16]	; (801c400 <UTIL_LPM_Init+0x18>)
 801c3ee:	2200      	movs	r2, #0
 801c3f0:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801c3f2:	4b04      	ldr	r3, [pc, #16]	; (801c404 <UTIL_LPM_Init+0x1c>)
 801c3f4:	2200      	movs	r2, #0
 801c3f6:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801c3f8:	bf00      	nop
 801c3fa:	46bd      	mov	sp, r7
 801c3fc:	bc80      	pop	{r7}
 801c3fe:	4770      	bx	lr
 801c400:	20001c84 	.word	0x20001c84
 801c404:	20001c88 	.word	0x20001c88

0801c408 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801c408:	b480      	push	{r7}
 801c40a:	b087      	sub	sp, #28
 801c40c:	af00      	add	r7, sp, #0
 801c40e:	6078      	str	r0, [r7, #4]
 801c410:	460b      	mov	r3, r1
 801c412:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c414:	f3ef 8310 	mrs	r3, PRIMASK
 801c418:	613b      	str	r3, [r7, #16]
  return(result);
 801c41a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801c41c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c41e:	b672      	cpsid	i
}
 801c420:	bf00      	nop
  
  switch( state )
 801c422:	78fb      	ldrb	r3, [r7, #3]
 801c424:	2b00      	cmp	r3, #0
 801c426:	d008      	beq.n	801c43a <UTIL_LPM_SetStopMode+0x32>
 801c428:	2b01      	cmp	r3, #1
 801c42a:	d10e      	bne.n	801c44a <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801c42c:	4b0d      	ldr	r3, [pc, #52]	; (801c464 <UTIL_LPM_SetStopMode+0x5c>)
 801c42e:	681a      	ldr	r2, [r3, #0]
 801c430:	687b      	ldr	r3, [r7, #4]
 801c432:	4313      	orrs	r3, r2
 801c434:	4a0b      	ldr	r2, [pc, #44]	; (801c464 <UTIL_LPM_SetStopMode+0x5c>)
 801c436:	6013      	str	r3, [r2, #0]
      break;
 801c438:	e008      	b.n	801c44c <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801c43a:	687b      	ldr	r3, [r7, #4]
 801c43c:	43da      	mvns	r2, r3
 801c43e:	4b09      	ldr	r3, [pc, #36]	; (801c464 <UTIL_LPM_SetStopMode+0x5c>)
 801c440:	681b      	ldr	r3, [r3, #0]
 801c442:	4013      	ands	r3, r2
 801c444:	4a07      	ldr	r2, [pc, #28]	; (801c464 <UTIL_LPM_SetStopMode+0x5c>)
 801c446:	6013      	str	r3, [r2, #0]
      break;
 801c448:	e000      	b.n	801c44c <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801c44a:	bf00      	nop
 801c44c:	697b      	ldr	r3, [r7, #20]
 801c44e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c450:	68fb      	ldr	r3, [r7, #12]
 801c452:	f383 8810 	msr	PRIMASK, r3
}
 801c456:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801c458:	bf00      	nop
 801c45a:	371c      	adds	r7, #28
 801c45c:	46bd      	mov	sp, r7
 801c45e:	bc80      	pop	{r7}
 801c460:	4770      	bx	lr
 801c462:	bf00      	nop
 801c464:	20001c84 	.word	0x20001c84

0801c468 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801c468:	b480      	push	{r7}
 801c46a:	b087      	sub	sp, #28
 801c46c:	af00      	add	r7, sp, #0
 801c46e:	6078      	str	r0, [r7, #4]
 801c470:	460b      	mov	r3, r1
 801c472:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c474:	f3ef 8310 	mrs	r3, PRIMASK
 801c478:	613b      	str	r3, [r7, #16]
  return(result);
 801c47a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801c47c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c47e:	b672      	cpsid	i
}
 801c480:	bf00      	nop
  
  switch(state)
 801c482:	78fb      	ldrb	r3, [r7, #3]
 801c484:	2b00      	cmp	r3, #0
 801c486:	d008      	beq.n	801c49a <UTIL_LPM_SetOffMode+0x32>
 801c488:	2b01      	cmp	r3, #1
 801c48a:	d10e      	bne.n	801c4aa <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801c48c:	4b0d      	ldr	r3, [pc, #52]	; (801c4c4 <UTIL_LPM_SetOffMode+0x5c>)
 801c48e:	681a      	ldr	r2, [r3, #0]
 801c490:	687b      	ldr	r3, [r7, #4]
 801c492:	4313      	orrs	r3, r2
 801c494:	4a0b      	ldr	r2, [pc, #44]	; (801c4c4 <UTIL_LPM_SetOffMode+0x5c>)
 801c496:	6013      	str	r3, [r2, #0]
      break;
 801c498:	e008      	b.n	801c4ac <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801c49a:	687b      	ldr	r3, [r7, #4]
 801c49c:	43da      	mvns	r2, r3
 801c49e:	4b09      	ldr	r3, [pc, #36]	; (801c4c4 <UTIL_LPM_SetOffMode+0x5c>)
 801c4a0:	681b      	ldr	r3, [r3, #0]
 801c4a2:	4013      	ands	r3, r2
 801c4a4:	4a07      	ldr	r2, [pc, #28]	; (801c4c4 <UTIL_LPM_SetOffMode+0x5c>)
 801c4a6:	6013      	str	r3, [r2, #0]
      break;
 801c4a8:	e000      	b.n	801c4ac <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801c4aa:	bf00      	nop
 801c4ac:	697b      	ldr	r3, [r7, #20]
 801c4ae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c4b0:	68fb      	ldr	r3, [r7, #12]
 801c4b2:	f383 8810 	msr	PRIMASK, r3
}
 801c4b6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801c4b8:	bf00      	nop
 801c4ba:	371c      	adds	r7, #28
 801c4bc:	46bd      	mov	sp, r7
 801c4be:	bc80      	pop	{r7}
 801c4c0:	4770      	bx	lr
 801c4c2:	bf00      	nop
 801c4c4:	20001c88 	.word	0x20001c88

0801c4c8 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801c4c8:	b580      	push	{r7, lr}
 801c4ca:	b084      	sub	sp, #16
 801c4cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c4ce:	f3ef 8310 	mrs	r3, PRIMASK
 801c4d2:	60bb      	str	r3, [r7, #8]
  return(result);
 801c4d4:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801c4d6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801c4d8:	b672      	cpsid	i
}
 801c4da:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801c4dc:	4b12      	ldr	r3, [pc, #72]	; (801c528 <UTIL_LPM_EnterLowPower+0x60>)
 801c4de:	681b      	ldr	r3, [r3, #0]
 801c4e0:	2b00      	cmp	r3, #0
 801c4e2:	d006      	beq.n	801c4f2 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801c4e4:	4b11      	ldr	r3, [pc, #68]	; (801c52c <UTIL_LPM_EnterLowPower+0x64>)
 801c4e6:	681b      	ldr	r3, [r3, #0]
 801c4e8:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801c4ea:	4b10      	ldr	r3, [pc, #64]	; (801c52c <UTIL_LPM_EnterLowPower+0x64>)
 801c4ec:	685b      	ldr	r3, [r3, #4]
 801c4ee:	4798      	blx	r3
 801c4f0:	e010      	b.n	801c514 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801c4f2:	4b0f      	ldr	r3, [pc, #60]	; (801c530 <UTIL_LPM_EnterLowPower+0x68>)
 801c4f4:	681b      	ldr	r3, [r3, #0]
 801c4f6:	2b00      	cmp	r3, #0
 801c4f8:	d006      	beq.n	801c508 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801c4fa:	4b0c      	ldr	r3, [pc, #48]	; (801c52c <UTIL_LPM_EnterLowPower+0x64>)
 801c4fc:	689b      	ldr	r3, [r3, #8]
 801c4fe:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801c500:	4b0a      	ldr	r3, [pc, #40]	; (801c52c <UTIL_LPM_EnterLowPower+0x64>)
 801c502:	68db      	ldr	r3, [r3, #12]
 801c504:	4798      	blx	r3
 801c506:	e005      	b.n	801c514 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801c508:	4b08      	ldr	r3, [pc, #32]	; (801c52c <UTIL_LPM_EnterLowPower+0x64>)
 801c50a:	691b      	ldr	r3, [r3, #16]
 801c50c:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801c50e:	4b07      	ldr	r3, [pc, #28]	; (801c52c <UTIL_LPM_EnterLowPower+0x64>)
 801c510:	695b      	ldr	r3, [r3, #20]
 801c512:	4798      	blx	r3
 801c514:	68fb      	ldr	r3, [r7, #12]
 801c516:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c518:	687b      	ldr	r3, [r7, #4]
 801c51a:	f383 8810 	msr	PRIMASK, r3
}
 801c51e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801c520:	bf00      	nop
 801c522:	3710      	adds	r7, #16
 801c524:	46bd      	mov	sp, r7
 801c526:	bd80      	pop	{r7, pc}
 801c528:	20001c84 	.word	0x20001c84
 801c52c:	0801e4d4 	.word	0x0801e4d4
 801c530:	20001c88 	.word	0x20001c88

0801c534 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801c534:	b480      	push	{r7}
 801c536:	b087      	sub	sp, #28
 801c538:	af00      	add	r7, sp, #0
 801c53a:	60f8      	str	r0, [r7, #12]
 801c53c:	60b9      	str	r1, [r7, #8]
 801c53e:	4613      	mov	r3, r2
 801c540:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801c542:	68fb      	ldr	r3, [r7, #12]
 801c544:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801c546:	68bb      	ldr	r3, [r7, #8]
 801c548:	613b      	str	r3, [r7, #16]

  while( size-- )
 801c54a:	e007      	b.n	801c55c <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801c54c:	693a      	ldr	r2, [r7, #16]
 801c54e:	1c53      	adds	r3, r2, #1
 801c550:	613b      	str	r3, [r7, #16]
 801c552:	697b      	ldr	r3, [r7, #20]
 801c554:	1c59      	adds	r1, r3, #1
 801c556:	6179      	str	r1, [r7, #20]
 801c558:	7812      	ldrb	r2, [r2, #0]
 801c55a:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801c55c:	88fb      	ldrh	r3, [r7, #6]
 801c55e:	1e5a      	subs	r2, r3, #1
 801c560:	80fa      	strh	r2, [r7, #6]
 801c562:	2b00      	cmp	r3, #0
 801c564:	d1f2      	bne.n	801c54c <UTIL_MEM_cpy_8+0x18>
    }
}
 801c566:	bf00      	nop
 801c568:	bf00      	nop
 801c56a:	371c      	adds	r7, #28
 801c56c:	46bd      	mov	sp, r7
 801c56e:	bc80      	pop	{r7}
 801c570:	4770      	bx	lr

0801c572 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801c572:	b480      	push	{r7}
 801c574:	b085      	sub	sp, #20
 801c576:	af00      	add	r7, sp, #0
 801c578:	6078      	str	r0, [r7, #4]
 801c57a:	460b      	mov	r3, r1
 801c57c:	70fb      	strb	r3, [r7, #3]
 801c57e:	4613      	mov	r3, r2
 801c580:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801c582:	687b      	ldr	r3, [r7, #4]
 801c584:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801c586:	e004      	b.n	801c592 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801c588:	68fb      	ldr	r3, [r7, #12]
 801c58a:	1c5a      	adds	r2, r3, #1
 801c58c:	60fa      	str	r2, [r7, #12]
 801c58e:	78fa      	ldrb	r2, [r7, #3]
 801c590:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801c592:	883b      	ldrh	r3, [r7, #0]
 801c594:	1e5a      	subs	r2, r3, #1
 801c596:	803a      	strh	r2, [r7, #0]
 801c598:	2b00      	cmp	r3, #0
 801c59a:	d1f5      	bne.n	801c588 <UTIL_MEM_set_8+0x16>
  }
}
 801c59c:	bf00      	nop
 801c59e:	bf00      	nop
 801c5a0:	3714      	adds	r7, #20
 801c5a2:	46bd      	mov	sp, r7
 801c5a4:	bc80      	pop	{r7}
 801c5a6:	4770      	bx	lr

0801c5a8 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801c5a8:	b082      	sub	sp, #8
 801c5aa:	b480      	push	{r7}
 801c5ac:	b087      	sub	sp, #28
 801c5ae:	af00      	add	r7, sp, #0
 801c5b0:	60f8      	str	r0, [r7, #12]
 801c5b2:	1d38      	adds	r0, r7, #4
 801c5b4:	e880 0006 	stmia.w	r0, {r1, r2}
 801c5b8:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801c5ba:	2300      	movs	r3, #0
 801c5bc:	613b      	str	r3, [r7, #16]
 801c5be:	2300      	movs	r3, #0
 801c5c0:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801c5c2:	687a      	ldr	r2, [r7, #4]
 801c5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c5c6:	4413      	add	r3, r2
 801c5c8:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801c5ca:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801c5ce:	b29a      	uxth	r2, r3
 801c5d0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801c5d4:	b29b      	uxth	r3, r3
 801c5d6:	4413      	add	r3, r2
 801c5d8:	b29b      	uxth	r3, r3
 801c5da:	b21b      	sxth	r3, r3
 801c5dc:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801c5de:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801c5e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801c5e6:	db0a      	blt.n	801c5fe <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801c5e8:	693b      	ldr	r3, [r7, #16]
 801c5ea:	3301      	adds	r3, #1
 801c5ec:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801c5ee:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801c5f2:	b29b      	uxth	r3, r3
 801c5f4:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 801c5f8:	b29b      	uxth	r3, r3
 801c5fa:	b21b      	sxth	r3, r3
 801c5fc:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801c5fe:	68fb      	ldr	r3, [r7, #12]
 801c600:	461a      	mov	r2, r3
 801c602:	f107 0310 	add.w	r3, r7, #16
 801c606:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c60a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801c60e:	68f8      	ldr	r0, [r7, #12]
 801c610:	371c      	adds	r7, #28
 801c612:	46bd      	mov	sp, r7
 801c614:	bc80      	pop	{r7}
 801c616:	b002      	add	sp, #8
 801c618:	4770      	bx	lr

0801c61a <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801c61a:	b082      	sub	sp, #8
 801c61c:	b480      	push	{r7}
 801c61e:	b087      	sub	sp, #28
 801c620:	af00      	add	r7, sp, #0
 801c622:	60f8      	str	r0, [r7, #12]
 801c624:	1d38      	adds	r0, r7, #4
 801c626:	e880 0006 	stmia.w	r0, {r1, r2}
 801c62a:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801c62c:	2300      	movs	r3, #0
 801c62e:	613b      	str	r3, [r7, #16]
 801c630:	2300      	movs	r3, #0
 801c632:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801c634:	687a      	ldr	r2, [r7, #4]
 801c636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c638:	1ad3      	subs	r3, r2, r3
 801c63a:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801c63c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801c640:	b29a      	uxth	r2, r3
 801c642:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801c646:	b29b      	uxth	r3, r3
 801c648:	1ad3      	subs	r3, r2, r3
 801c64a:	b29b      	uxth	r3, r3
 801c64c:	b21b      	sxth	r3, r3
 801c64e:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801c650:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801c654:	2b00      	cmp	r3, #0
 801c656:	da0a      	bge.n	801c66e <SysTimeSub+0x54>
  {
    c.Seconds--;
 801c658:	693b      	ldr	r3, [r7, #16]
 801c65a:	3b01      	subs	r3, #1
 801c65c:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801c65e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801c662:	b29b      	uxth	r3, r3
 801c664:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801c668:	b29b      	uxth	r3, r3
 801c66a:	b21b      	sxth	r3, r3
 801c66c:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801c66e:	68fb      	ldr	r3, [r7, #12]
 801c670:	461a      	mov	r2, r3
 801c672:	f107 0310 	add.w	r3, r7, #16
 801c676:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c67a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801c67e:	68f8      	ldr	r0, [r7, #12]
 801c680:	371c      	adds	r7, #28
 801c682:	46bd      	mov	sp, r7
 801c684:	bc80      	pop	{r7}
 801c686:	b002      	add	sp, #8
 801c688:	4770      	bx	lr
	...

0801c68c <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801c68c:	b580      	push	{r7, lr}
 801c68e:	b088      	sub	sp, #32
 801c690:	af02      	add	r7, sp, #8
 801c692:	463b      	mov	r3, r7
 801c694:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801c698:	2300      	movs	r3, #0
 801c69a:	60bb      	str	r3, [r7, #8]
 801c69c:	2300      	movs	r3, #0
 801c69e:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801c6a0:	4b10      	ldr	r3, [pc, #64]	; (801c6e4 <SysTimeSet+0x58>)
 801c6a2:	691b      	ldr	r3, [r3, #16]
 801c6a4:	f107 0208 	add.w	r2, r7, #8
 801c6a8:	3204      	adds	r2, #4
 801c6aa:	4610      	mov	r0, r2
 801c6ac:	4798      	blx	r3
 801c6ae:	4603      	mov	r3, r0
 801c6b0:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801c6b2:	f107 0010 	add.w	r0, r7, #16
 801c6b6:	68fb      	ldr	r3, [r7, #12]
 801c6b8:	9300      	str	r3, [sp, #0]
 801c6ba:	68bb      	ldr	r3, [r7, #8]
 801c6bc:	463a      	mov	r2, r7
 801c6be:	ca06      	ldmia	r2, {r1, r2}
 801c6c0:	f7ff ffab 	bl	801c61a <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801c6c4:	4b07      	ldr	r3, [pc, #28]	; (801c6e4 <SysTimeSet+0x58>)
 801c6c6:	681b      	ldr	r3, [r3, #0]
 801c6c8:	693a      	ldr	r2, [r7, #16]
 801c6ca:	4610      	mov	r0, r2
 801c6cc:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801c6ce:	4b05      	ldr	r3, [pc, #20]	; (801c6e4 <SysTimeSet+0x58>)
 801c6d0:	689b      	ldr	r3, [r3, #8]
 801c6d2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801c6d6:	4610      	mov	r0, r2
 801c6d8:	4798      	blx	r3
}
 801c6da:	bf00      	nop
 801c6dc:	3718      	adds	r7, #24
 801c6de:	46bd      	mov	sp, r7
 801c6e0:	bd80      	pop	{r7, pc}
 801c6e2:	bf00      	nop
 801c6e4:	0801e5b8 	.word	0x0801e5b8

0801c6e8 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801c6e8:	b580      	push	{r7, lr}
 801c6ea:	b08a      	sub	sp, #40	; 0x28
 801c6ec:	af02      	add	r7, sp, #8
 801c6ee:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801c6f0:	2300      	movs	r3, #0
 801c6f2:	61bb      	str	r3, [r7, #24]
 801c6f4:	2300      	movs	r3, #0
 801c6f6:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801c6f8:	2300      	movs	r3, #0
 801c6fa:	613b      	str	r3, [r7, #16]
 801c6fc:	2300      	movs	r3, #0
 801c6fe:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801c700:	4b14      	ldr	r3, [pc, #80]	; (801c754 <SysTimeGet+0x6c>)
 801c702:	691b      	ldr	r3, [r3, #16]
 801c704:	f107 0218 	add.w	r2, r7, #24
 801c708:	3204      	adds	r2, #4
 801c70a:	4610      	mov	r0, r2
 801c70c:	4798      	blx	r3
 801c70e:	4603      	mov	r3, r0
 801c710:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801c712:	4b10      	ldr	r3, [pc, #64]	; (801c754 <SysTimeGet+0x6c>)
 801c714:	68db      	ldr	r3, [r3, #12]
 801c716:	4798      	blx	r3
 801c718:	4603      	mov	r3, r0
 801c71a:	b21b      	sxth	r3, r3
 801c71c:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801c71e:	4b0d      	ldr	r3, [pc, #52]	; (801c754 <SysTimeGet+0x6c>)
 801c720:	685b      	ldr	r3, [r3, #4]
 801c722:	4798      	blx	r3
 801c724:	4603      	mov	r3, r0
 801c726:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801c728:	f107 0010 	add.w	r0, r7, #16
 801c72c:	69fb      	ldr	r3, [r7, #28]
 801c72e:	9300      	str	r3, [sp, #0]
 801c730:	69bb      	ldr	r3, [r7, #24]
 801c732:	f107 0208 	add.w	r2, r7, #8
 801c736:	ca06      	ldmia	r2, {r1, r2}
 801c738:	f7ff ff36 	bl	801c5a8 <SysTimeAdd>

  return sysTime;
 801c73c:	687b      	ldr	r3, [r7, #4]
 801c73e:	461a      	mov	r2, r3
 801c740:	f107 0310 	add.w	r3, r7, #16
 801c744:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c748:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801c74c:	6878      	ldr	r0, [r7, #4]
 801c74e:	3720      	adds	r7, #32
 801c750:	46bd      	mov	sp, r7
 801c752:	bd80      	pop	{r7, pc}
 801c754:	0801e5b8 	.word	0x0801e5b8

0801c758 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801c758:	b580      	push	{r7, lr}
 801c75a:	b084      	sub	sp, #16
 801c75c:	af00      	add	r7, sp, #0
 801c75e:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801c760:	2300      	movs	r3, #0
 801c762:	60bb      	str	r3, [r7, #8]
 801c764:	2300      	movs	r3, #0
 801c766:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801c768:	4b0a      	ldr	r3, [pc, #40]	; (801c794 <SysTimeGetMcuTime+0x3c>)
 801c76a:	691b      	ldr	r3, [r3, #16]
 801c76c:	f107 0208 	add.w	r2, r7, #8
 801c770:	3204      	adds	r2, #4
 801c772:	4610      	mov	r0, r2
 801c774:	4798      	blx	r3
 801c776:	4603      	mov	r3, r0
 801c778:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801c77a:	687b      	ldr	r3, [r7, #4]
 801c77c:	461a      	mov	r2, r3
 801c77e:	f107 0308 	add.w	r3, r7, #8
 801c782:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c786:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801c78a:	6878      	ldr	r0, [r7, #4]
 801c78c:	3710      	adds	r7, #16
 801c78e:	46bd      	mov	sp, r7
 801c790:	bd80      	pop	{r7, pc}
 801c792:	bf00      	nop
 801c794:	0801e5b8 	.word	0x0801e5b8

0801c798 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801c798:	b580      	push	{r7, lr}
 801c79a:	b088      	sub	sp, #32
 801c79c:	af02      	add	r7, sp, #8
 801c79e:	463b      	mov	r3, r7
 801c7a0:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801c7a4:	4b0f      	ldr	r3, [pc, #60]	; (801c7e4 <SysTimeToMs+0x4c>)
 801c7a6:	68db      	ldr	r3, [r3, #12]
 801c7a8:	4798      	blx	r3
 801c7aa:	4603      	mov	r3, r0
 801c7ac:	b21b      	sxth	r3, r3
 801c7ae:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801c7b0:	4b0c      	ldr	r3, [pc, #48]	; (801c7e4 <SysTimeToMs+0x4c>)
 801c7b2:	685b      	ldr	r3, [r3, #4]
 801c7b4:	4798      	blx	r3
 801c7b6:	4603      	mov	r3, r0
 801c7b8:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801c7ba:	f107 0008 	add.w	r0, r7, #8
 801c7be:	697b      	ldr	r3, [r7, #20]
 801c7c0:	9300      	str	r3, [sp, #0]
 801c7c2:	693b      	ldr	r3, [r7, #16]
 801c7c4:	463a      	mov	r2, r7
 801c7c6:	ca06      	ldmia	r2, {r1, r2}
 801c7c8:	f7ff ff27 	bl	801c61a <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801c7cc:	68bb      	ldr	r3, [r7, #8]
 801c7ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801c7d2:	fb02 f303 	mul.w	r3, r2, r3
 801c7d6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801c7da:	4413      	add	r3, r2
}
 801c7dc:	4618      	mov	r0, r3
 801c7de:	3718      	adds	r7, #24
 801c7e0:	46bd      	mov	sp, r7
 801c7e2:	bd80      	pop	{r7, pc}
 801c7e4:	0801e5b8 	.word	0x0801e5b8

0801c7e8 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801c7e8:	b580      	push	{r7, lr}
 801c7ea:	b08a      	sub	sp, #40	; 0x28
 801c7ec:	af02      	add	r7, sp, #8
 801c7ee:	6078      	str	r0, [r7, #4]
 801c7f0:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801c7f2:	683b      	ldr	r3, [r7, #0]
 801c7f4:	4a19      	ldr	r2, [pc, #100]	; (801c85c <SysTimeFromMs+0x74>)
 801c7f6:	fba2 2303 	umull	r2, r3, r2, r3
 801c7fa:	099b      	lsrs	r3, r3, #6
 801c7fc:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801c7fe:	69fb      	ldr	r3, [r7, #28]
 801c800:	617b      	str	r3, [r7, #20]
 801c802:	683b      	ldr	r3, [r7, #0]
 801c804:	b29a      	uxth	r2, r3
 801c806:	69fb      	ldr	r3, [r7, #28]
 801c808:	b29b      	uxth	r3, r3
 801c80a:	4619      	mov	r1, r3
 801c80c:	0149      	lsls	r1, r1, #5
 801c80e:	1ac9      	subs	r1, r1, r3
 801c810:	0089      	lsls	r1, r1, #2
 801c812:	440b      	add	r3, r1
 801c814:	00db      	lsls	r3, r3, #3
 801c816:	b29b      	uxth	r3, r3
 801c818:	1ad3      	subs	r3, r2, r3
 801c81a:	b29b      	uxth	r3, r3
 801c81c:	b21b      	sxth	r3, r3
 801c81e:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801c820:	f107 030c 	add.w	r3, r7, #12
 801c824:	2200      	movs	r2, #0
 801c826:	601a      	str	r2, [r3, #0]
 801c828:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801c82a:	4b0d      	ldr	r3, [pc, #52]	; (801c860 <SysTimeFromMs+0x78>)
 801c82c:	68db      	ldr	r3, [r3, #12]
 801c82e:	4798      	blx	r3
 801c830:	4603      	mov	r3, r0
 801c832:	b21b      	sxth	r3, r3
 801c834:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801c836:	4b0a      	ldr	r3, [pc, #40]	; (801c860 <SysTimeFromMs+0x78>)
 801c838:	685b      	ldr	r3, [r3, #4]
 801c83a:	4798      	blx	r3
 801c83c:	4603      	mov	r3, r0
 801c83e:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801c840:	6878      	ldr	r0, [r7, #4]
 801c842:	693b      	ldr	r3, [r7, #16]
 801c844:	9300      	str	r3, [sp, #0]
 801c846:	68fb      	ldr	r3, [r7, #12]
 801c848:	f107 0214 	add.w	r2, r7, #20
 801c84c:	ca06      	ldmia	r2, {r1, r2}
 801c84e:	f7ff feab 	bl	801c5a8 <SysTimeAdd>
}
 801c852:	6878      	ldr	r0, [r7, #4]
 801c854:	3720      	adds	r7, #32
 801c856:	46bd      	mov	sp, r7
 801c858:	bd80      	pop	{r7, pc}
 801c85a:	bf00      	nop
 801c85c:	10624dd3 	.word	0x10624dd3
 801c860:	0801e5b8 	.word	0x0801e5b8

0801c864 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801c864:	b480      	push	{r7}
 801c866:	b085      	sub	sp, #20
 801c868:	af00      	add	r7, sp, #0
 801c86a:	6078      	str	r0, [r7, #4]
  int i = 0;
 801c86c:	2300      	movs	r3, #0
 801c86e:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801c870:	e00e      	b.n	801c890 <ee_skip_atoi+0x2c>
 801c872:	68fa      	ldr	r2, [r7, #12]
 801c874:	4613      	mov	r3, r2
 801c876:	009b      	lsls	r3, r3, #2
 801c878:	4413      	add	r3, r2
 801c87a:	005b      	lsls	r3, r3, #1
 801c87c:	4618      	mov	r0, r3
 801c87e:	687b      	ldr	r3, [r7, #4]
 801c880:	681b      	ldr	r3, [r3, #0]
 801c882:	1c59      	adds	r1, r3, #1
 801c884:	687a      	ldr	r2, [r7, #4]
 801c886:	6011      	str	r1, [r2, #0]
 801c888:	781b      	ldrb	r3, [r3, #0]
 801c88a:	4403      	add	r3, r0
 801c88c:	3b30      	subs	r3, #48	; 0x30
 801c88e:	60fb      	str	r3, [r7, #12]
 801c890:	687b      	ldr	r3, [r7, #4]
 801c892:	681b      	ldr	r3, [r3, #0]
 801c894:	781b      	ldrb	r3, [r3, #0]
 801c896:	2b2f      	cmp	r3, #47	; 0x2f
 801c898:	d904      	bls.n	801c8a4 <ee_skip_atoi+0x40>
 801c89a:	687b      	ldr	r3, [r7, #4]
 801c89c:	681b      	ldr	r3, [r3, #0]
 801c89e:	781b      	ldrb	r3, [r3, #0]
 801c8a0:	2b39      	cmp	r3, #57	; 0x39
 801c8a2:	d9e6      	bls.n	801c872 <ee_skip_atoi+0xe>
  return i;
 801c8a4:	68fb      	ldr	r3, [r7, #12]
}
 801c8a6:	4618      	mov	r0, r3
 801c8a8:	3714      	adds	r7, #20
 801c8aa:	46bd      	mov	sp, r7
 801c8ac:	bc80      	pop	{r7}
 801c8ae:	4770      	bx	lr

0801c8b0 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801c8b0:	b480      	push	{r7}
 801c8b2:	b099      	sub	sp, #100	; 0x64
 801c8b4:	af00      	add	r7, sp, #0
 801c8b6:	60f8      	str	r0, [r7, #12]
 801c8b8:	60b9      	str	r1, [r7, #8]
 801c8ba:	607a      	str	r2, [r7, #4]
 801c8bc:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801c8be:	4b71      	ldr	r3, [pc, #452]	; (801ca84 <ee_number+0x1d4>)
 801c8c0:	681b      	ldr	r3, [r3, #0]
 801c8c2:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801c8c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c8c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c8ca:	2b00      	cmp	r3, #0
 801c8cc:	d002      	beq.n	801c8d4 <ee_number+0x24>
 801c8ce:	4b6e      	ldr	r3, [pc, #440]	; (801ca88 <ee_number+0x1d8>)
 801c8d0:	681b      	ldr	r3, [r3, #0]
 801c8d2:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801c8d4:	683b      	ldr	r3, [r7, #0]
 801c8d6:	2b01      	cmp	r3, #1
 801c8d8:	dd02      	ble.n	801c8e0 <ee_number+0x30>
 801c8da:	683b      	ldr	r3, [r7, #0]
 801c8dc:	2b24      	cmp	r3, #36	; 0x24
 801c8de:	dd01      	ble.n	801c8e4 <ee_number+0x34>
 801c8e0:	2300      	movs	r3, #0
 801c8e2:	e0ca      	b.n	801ca7a <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801c8e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c8e6:	f003 0301 	and.w	r3, r3, #1
 801c8ea:	2b00      	cmp	r3, #0
 801c8ec:	d001      	beq.n	801c8f2 <ee_number+0x42>
 801c8ee:	2330      	movs	r3, #48	; 0x30
 801c8f0:	e000      	b.n	801c8f4 <ee_number+0x44>
 801c8f2:	2320      	movs	r3, #32
 801c8f4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 801c8f8:	2300      	movs	r3, #0
 801c8fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 801c8fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c900:	f003 0302 	and.w	r3, r3, #2
 801c904:	2b00      	cmp	r3, #0
 801c906:	d00b      	beq.n	801c920 <ee_number+0x70>
  {
    if (num < 0)
 801c908:	687b      	ldr	r3, [r7, #4]
 801c90a:	2b00      	cmp	r3, #0
 801c90c:	da08      	bge.n	801c920 <ee_number+0x70>
    {
      sign = '-';
 801c90e:	232d      	movs	r3, #45	; 0x2d
 801c910:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 801c914:	687b      	ldr	r3, [r7, #4]
 801c916:	425b      	negs	r3, r3
 801c918:	607b      	str	r3, [r7, #4]
      size--;
 801c91a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c91c:	3b01      	subs	r3, #1
 801c91e:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801c920:	2300      	movs	r3, #0
 801c922:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 801c924:	687b      	ldr	r3, [r7, #4]
 801c926:	2b00      	cmp	r3, #0
 801c928:	d11e      	bne.n	801c968 <ee_number+0xb8>
    tmp[i++] = '0';
 801c92a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c92c:	1c5a      	adds	r2, r3, #1
 801c92e:	657a      	str	r2, [r7, #84]	; 0x54
 801c930:	3360      	adds	r3, #96	; 0x60
 801c932:	443b      	add	r3, r7
 801c934:	2230      	movs	r2, #48	; 0x30
 801c936:	f803 2c50 	strb.w	r2, [r3, #-80]
 801c93a:	e018      	b.n	801c96e <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801c93c:	687b      	ldr	r3, [r7, #4]
 801c93e:	683a      	ldr	r2, [r7, #0]
 801c940:	fbb3 f1f2 	udiv	r1, r3, r2
 801c944:	fb01 f202 	mul.w	r2, r1, r2
 801c948:	1a9b      	subs	r3, r3, r2
 801c94a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801c94c:	441a      	add	r2, r3
 801c94e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c950:	1c59      	adds	r1, r3, #1
 801c952:	6579      	str	r1, [r7, #84]	; 0x54
 801c954:	7812      	ldrb	r2, [r2, #0]
 801c956:	3360      	adds	r3, #96	; 0x60
 801c958:	443b      	add	r3, r7
 801c95a:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801c95e:	687a      	ldr	r2, [r7, #4]
 801c960:	683b      	ldr	r3, [r7, #0]
 801c962:	fbb2 f3f3 	udiv	r3, r2, r3
 801c966:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801c968:	687b      	ldr	r3, [r7, #4]
 801c96a:	2b00      	cmp	r3, #0
 801c96c:	d1e6      	bne.n	801c93c <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801c96e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801c970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c972:	429a      	cmp	r2, r3
 801c974:	dd01      	ble.n	801c97a <ee_number+0xca>
 801c976:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c978:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 801c97a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801c97c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c97e:	1ad3      	subs	r3, r2, r3
 801c980:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801c982:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c984:	f003 0301 	and.w	r3, r3, #1
 801c988:	2b00      	cmp	r3, #0
 801c98a:	d112      	bne.n	801c9b2 <ee_number+0x102>
 801c98c:	e00c      	b.n	801c9a8 <ee_number+0xf8>
 801c98e:	68fb      	ldr	r3, [r7, #12]
 801c990:	1c5a      	adds	r2, r3, #1
 801c992:	60fa      	str	r2, [r7, #12]
 801c994:	2220      	movs	r2, #32
 801c996:	701a      	strb	r2, [r3, #0]
 801c998:	68bb      	ldr	r3, [r7, #8]
 801c99a:	3b01      	subs	r3, #1
 801c99c:	60bb      	str	r3, [r7, #8]
 801c99e:	68bb      	ldr	r3, [r7, #8]
 801c9a0:	2b00      	cmp	r3, #0
 801c9a2:	d101      	bne.n	801c9a8 <ee_number+0xf8>
 801c9a4:	68fb      	ldr	r3, [r7, #12]
 801c9a6:	e068      	b.n	801ca7a <ee_number+0x1ca>
 801c9a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c9aa:	1e5a      	subs	r2, r3, #1
 801c9ac:	66ba      	str	r2, [r7, #104]	; 0x68
 801c9ae:	2b00      	cmp	r3, #0
 801c9b0:	dced      	bgt.n	801c98e <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801c9b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801c9b6:	2b00      	cmp	r3, #0
 801c9b8:	d01b      	beq.n	801c9f2 <ee_number+0x142>
 801c9ba:	68fb      	ldr	r3, [r7, #12]
 801c9bc:	1c5a      	adds	r2, r3, #1
 801c9be:	60fa      	str	r2, [r7, #12]
 801c9c0:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801c9c4:	701a      	strb	r2, [r3, #0]
 801c9c6:	68bb      	ldr	r3, [r7, #8]
 801c9c8:	3b01      	subs	r3, #1
 801c9ca:	60bb      	str	r3, [r7, #8]
 801c9cc:	68bb      	ldr	r3, [r7, #8]
 801c9ce:	2b00      	cmp	r3, #0
 801c9d0:	d10f      	bne.n	801c9f2 <ee_number+0x142>
 801c9d2:	68fb      	ldr	r3, [r7, #12]
 801c9d4:	e051      	b.n	801ca7a <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801c9d6:	68fb      	ldr	r3, [r7, #12]
 801c9d8:	1c5a      	adds	r2, r3, #1
 801c9da:	60fa      	str	r2, [r7, #12]
 801c9dc:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 801c9e0:	701a      	strb	r2, [r3, #0]
 801c9e2:	68bb      	ldr	r3, [r7, #8]
 801c9e4:	3b01      	subs	r3, #1
 801c9e6:	60bb      	str	r3, [r7, #8]
 801c9e8:	68bb      	ldr	r3, [r7, #8]
 801c9ea:	2b00      	cmp	r3, #0
 801c9ec:	d101      	bne.n	801c9f2 <ee_number+0x142>
 801c9ee:	68fb      	ldr	r3, [r7, #12]
 801c9f0:	e043      	b.n	801ca7a <ee_number+0x1ca>
 801c9f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c9f4:	1e5a      	subs	r2, r3, #1
 801c9f6:	66ba      	str	r2, [r7, #104]	; 0x68
 801c9f8:	2b00      	cmp	r3, #0
 801c9fa:	dcec      	bgt.n	801c9d6 <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801c9fc:	e00c      	b.n	801ca18 <ee_number+0x168>
 801c9fe:	68fb      	ldr	r3, [r7, #12]
 801ca00:	1c5a      	adds	r2, r3, #1
 801ca02:	60fa      	str	r2, [r7, #12]
 801ca04:	2230      	movs	r2, #48	; 0x30
 801ca06:	701a      	strb	r2, [r3, #0]
 801ca08:	68bb      	ldr	r3, [r7, #8]
 801ca0a:	3b01      	subs	r3, #1
 801ca0c:	60bb      	str	r3, [r7, #8]
 801ca0e:	68bb      	ldr	r3, [r7, #8]
 801ca10:	2b00      	cmp	r3, #0
 801ca12:	d101      	bne.n	801ca18 <ee_number+0x168>
 801ca14:	68fb      	ldr	r3, [r7, #12]
 801ca16:	e030      	b.n	801ca7a <ee_number+0x1ca>
 801ca18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ca1a:	1e5a      	subs	r2, r3, #1
 801ca1c:	66fa      	str	r2, [r7, #108]	; 0x6c
 801ca1e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801ca20:	429a      	cmp	r2, r3
 801ca22:	dbec      	blt.n	801c9fe <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801ca24:	e010      	b.n	801ca48 <ee_number+0x198>
 801ca26:	68fb      	ldr	r3, [r7, #12]
 801ca28:	1c5a      	adds	r2, r3, #1
 801ca2a:	60fa      	str	r2, [r7, #12]
 801ca2c:	f107 0110 	add.w	r1, r7, #16
 801ca30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801ca32:	440a      	add	r2, r1
 801ca34:	7812      	ldrb	r2, [r2, #0]
 801ca36:	701a      	strb	r2, [r3, #0]
 801ca38:	68bb      	ldr	r3, [r7, #8]
 801ca3a:	3b01      	subs	r3, #1
 801ca3c:	60bb      	str	r3, [r7, #8]
 801ca3e:	68bb      	ldr	r3, [r7, #8]
 801ca40:	2b00      	cmp	r3, #0
 801ca42:	d101      	bne.n	801ca48 <ee_number+0x198>
 801ca44:	68fb      	ldr	r3, [r7, #12]
 801ca46:	e018      	b.n	801ca7a <ee_number+0x1ca>
 801ca48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ca4a:	1e5a      	subs	r2, r3, #1
 801ca4c:	657a      	str	r2, [r7, #84]	; 0x54
 801ca4e:	2b00      	cmp	r3, #0
 801ca50:	dce9      	bgt.n	801ca26 <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801ca52:	e00c      	b.n	801ca6e <ee_number+0x1be>
 801ca54:	68fb      	ldr	r3, [r7, #12]
 801ca56:	1c5a      	adds	r2, r3, #1
 801ca58:	60fa      	str	r2, [r7, #12]
 801ca5a:	2220      	movs	r2, #32
 801ca5c:	701a      	strb	r2, [r3, #0]
 801ca5e:	68bb      	ldr	r3, [r7, #8]
 801ca60:	3b01      	subs	r3, #1
 801ca62:	60bb      	str	r3, [r7, #8]
 801ca64:	68bb      	ldr	r3, [r7, #8]
 801ca66:	2b00      	cmp	r3, #0
 801ca68:	d101      	bne.n	801ca6e <ee_number+0x1be>
 801ca6a:	68fb      	ldr	r3, [r7, #12]
 801ca6c:	e005      	b.n	801ca7a <ee_number+0x1ca>
 801ca6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801ca70:	1e5a      	subs	r2, r3, #1
 801ca72:	66ba      	str	r2, [r7, #104]	; 0x68
 801ca74:	2b00      	cmp	r3, #0
 801ca76:	dced      	bgt.n	801ca54 <ee_number+0x1a4>

  return str;
 801ca78:	68fb      	ldr	r3, [r7, #12]
}
 801ca7a:	4618      	mov	r0, r3
 801ca7c:	3764      	adds	r7, #100	; 0x64
 801ca7e:	46bd      	mov	sp, r7
 801ca80:	bc80      	pop	{r7}
 801ca82:	4770      	bx	lr
 801ca84:	20000138 	.word	0x20000138
 801ca88:	2000013c 	.word	0x2000013c

0801ca8c <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801ca8c:	b580      	push	{r7, lr}
 801ca8e:	b092      	sub	sp, #72	; 0x48
 801ca90:	af04      	add	r7, sp, #16
 801ca92:	60f8      	str	r0, [r7, #12]
 801ca94:	60b9      	str	r1, [r7, #8]
 801ca96:	607a      	str	r2, [r7, #4]
 801ca98:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801ca9a:	68bb      	ldr	r3, [r7, #8]
 801ca9c:	2b00      	cmp	r3, #0
 801ca9e:	dc01      	bgt.n	801caa4 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801caa0:	2300      	movs	r3, #0
 801caa2:	e13e      	b.n	801cd22 <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801caa4:	68fb      	ldr	r3, [r7, #12]
 801caa6:	62fb      	str	r3, [r7, #44]	; 0x2c
 801caa8:	e128      	b.n	801ccfc <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 801caaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801caac:	68fb      	ldr	r3, [r7, #12]
 801caae:	1ad2      	subs	r2, r2, r3
 801cab0:	68bb      	ldr	r3, [r7, #8]
 801cab2:	3b01      	subs	r3, #1
 801cab4:	429a      	cmp	r2, r3
 801cab6:	f280 812e 	bge.w	801cd16 <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 801caba:	687b      	ldr	r3, [r7, #4]
 801cabc:	781b      	ldrb	r3, [r3, #0]
 801cabe:	2b25      	cmp	r3, #37	; 0x25
 801cac0:	d006      	beq.n	801cad0 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801cac2:	687a      	ldr	r2, [r7, #4]
 801cac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cac6:	1c59      	adds	r1, r3, #1
 801cac8:	62f9      	str	r1, [r7, #44]	; 0x2c
 801caca:	7812      	ldrb	r2, [r2, #0]
 801cacc:	701a      	strb	r2, [r3, #0]
      continue;
 801cace:	e112      	b.n	801ccf6 <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 801cad0:	2300      	movs	r3, #0
 801cad2:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801cad4:	687b      	ldr	r3, [r7, #4]
 801cad6:	3301      	adds	r3, #1
 801cad8:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801cada:	687b      	ldr	r3, [r7, #4]
 801cadc:	781b      	ldrb	r3, [r3, #0]
 801cade:	2b30      	cmp	r3, #48	; 0x30
 801cae0:	d103      	bne.n	801caea <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801cae2:	6a3b      	ldr	r3, [r7, #32]
 801cae4:	f043 0301 	orr.w	r3, r3, #1
 801cae8:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801caea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801caee:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801caf0:	687b      	ldr	r3, [r7, #4]
 801caf2:	781b      	ldrb	r3, [r3, #0]
 801caf4:	2b2f      	cmp	r3, #47	; 0x2f
 801caf6:	d908      	bls.n	801cb0a <tiny_vsnprintf_like+0x7e>
 801caf8:	687b      	ldr	r3, [r7, #4]
 801cafa:	781b      	ldrb	r3, [r3, #0]
 801cafc:	2b39      	cmp	r3, #57	; 0x39
 801cafe:	d804      	bhi.n	801cb0a <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801cb00:	1d3b      	adds	r3, r7, #4
 801cb02:	4618      	mov	r0, r3
 801cb04:	f7ff feae 	bl	801c864 <ee_skip_atoi>
 801cb08:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801cb0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801cb0e:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801cb10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801cb14:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801cb16:	230a      	movs	r3, #10
 801cb18:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801cb1a:	687b      	ldr	r3, [r7, #4]
 801cb1c:	781b      	ldrb	r3, [r3, #0]
 801cb1e:	3b58      	subs	r3, #88	; 0x58
 801cb20:	2b20      	cmp	r3, #32
 801cb22:	f200 8094 	bhi.w	801cc4e <tiny_vsnprintf_like+0x1c2>
 801cb26:	a201      	add	r2, pc, #4	; (adr r2, 801cb2c <tiny_vsnprintf_like+0xa0>)
 801cb28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cb2c:	0801cc37 	.word	0x0801cc37
 801cb30:	0801cc4f 	.word	0x0801cc4f
 801cb34:	0801cc4f 	.word	0x0801cc4f
 801cb38:	0801cc4f 	.word	0x0801cc4f
 801cb3c:	0801cc4f 	.word	0x0801cc4f
 801cb40:	0801cc4f 	.word	0x0801cc4f
 801cb44:	0801cc4f 	.word	0x0801cc4f
 801cb48:	0801cc4f 	.word	0x0801cc4f
 801cb4c:	0801cc4f 	.word	0x0801cc4f
 801cb50:	0801cc4f 	.word	0x0801cc4f
 801cb54:	0801cc4f 	.word	0x0801cc4f
 801cb58:	0801cbbb 	.word	0x0801cbbb
 801cb5c:	0801cc45 	.word	0x0801cc45
 801cb60:	0801cc4f 	.word	0x0801cc4f
 801cb64:	0801cc4f 	.word	0x0801cc4f
 801cb68:	0801cc4f 	.word	0x0801cc4f
 801cb6c:	0801cc4f 	.word	0x0801cc4f
 801cb70:	0801cc45 	.word	0x0801cc45
 801cb74:	0801cc4f 	.word	0x0801cc4f
 801cb78:	0801cc4f 	.word	0x0801cc4f
 801cb7c:	0801cc4f 	.word	0x0801cc4f
 801cb80:	0801cc4f 	.word	0x0801cc4f
 801cb84:	0801cc4f 	.word	0x0801cc4f
 801cb88:	0801cc4f 	.word	0x0801cc4f
 801cb8c:	0801cc4f 	.word	0x0801cc4f
 801cb90:	0801cc4f 	.word	0x0801cc4f
 801cb94:	0801cc4f 	.word	0x0801cc4f
 801cb98:	0801cbdb 	.word	0x0801cbdb
 801cb9c:	0801cc4f 	.word	0x0801cc4f
 801cba0:	0801cc9b 	.word	0x0801cc9b
 801cba4:	0801cc4f 	.word	0x0801cc4f
 801cba8:	0801cc4f 	.word	0x0801cc4f
 801cbac:	0801cc3f 	.word	0x0801cc3f
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801cbb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cbb2:	1c5a      	adds	r2, r3, #1
 801cbb4:	62fa      	str	r2, [r7, #44]	; 0x2c
 801cbb6:	2220      	movs	r2, #32
 801cbb8:	701a      	strb	r2, [r3, #0]
 801cbba:	69fb      	ldr	r3, [r7, #28]
 801cbbc:	3b01      	subs	r3, #1
 801cbbe:	61fb      	str	r3, [r7, #28]
 801cbc0:	69fb      	ldr	r3, [r7, #28]
 801cbc2:	2b00      	cmp	r3, #0
 801cbc4:	dcf4      	bgt.n	801cbb0 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801cbc6:	683b      	ldr	r3, [r7, #0]
 801cbc8:	1d1a      	adds	r2, r3, #4
 801cbca:	603a      	str	r2, [r7, #0]
 801cbcc:	6819      	ldr	r1, [r3, #0]
 801cbce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cbd0:	1c5a      	adds	r2, r3, #1
 801cbd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 801cbd4:	b2ca      	uxtb	r2, r1
 801cbd6:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801cbd8:	e08d      	b.n	801ccf6 <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 801cbda:	683b      	ldr	r3, [r7, #0]
 801cbdc:	1d1a      	adds	r2, r3, #4
 801cbde:	603a      	str	r2, [r7, #0]
 801cbe0:	681b      	ldr	r3, [r3, #0]
 801cbe2:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801cbe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cbe6:	2b00      	cmp	r3, #0
 801cbe8:	d101      	bne.n	801cbee <tiny_vsnprintf_like+0x162>
 801cbea:	4b50      	ldr	r3, [pc, #320]	; (801cd2c <tiny_vsnprintf_like+0x2a0>)
 801cbec:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801cbee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801cbf0:	f7e3 fac2 	bl	8000178 <strlen>
 801cbf4:	4603      	mov	r3, r0
 801cbf6:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801cbf8:	e004      	b.n	801cc04 <tiny_vsnprintf_like+0x178>
 801cbfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cbfc:	1c5a      	adds	r2, r3, #1
 801cbfe:	62fa      	str	r2, [r7, #44]	; 0x2c
 801cc00:	2220      	movs	r2, #32
 801cc02:	701a      	strb	r2, [r3, #0]
 801cc04:	69fb      	ldr	r3, [r7, #28]
 801cc06:	1e5a      	subs	r2, r3, #1
 801cc08:	61fa      	str	r2, [r7, #28]
 801cc0a:	693a      	ldr	r2, [r7, #16]
 801cc0c:	429a      	cmp	r2, r3
 801cc0e:	dbf4      	blt.n	801cbfa <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801cc10:	2300      	movs	r3, #0
 801cc12:	62bb      	str	r3, [r7, #40]	; 0x28
 801cc14:	e00a      	b.n	801cc2c <tiny_vsnprintf_like+0x1a0>
 801cc16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cc18:	1c53      	adds	r3, r2, #1
 801cc1a:	627b      	str	r3, [r7, #36]	; 0x24
 801cc1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cc1e:	1c59      	adds	r1, r3, #1
 801cc20:	62f9      	str	r1, [r7, #44]	; 0x2c
 801cc22:	7812      	ldrb	r2, [r2, #0]
 801cc24:	701a      	strb	r2, [r3, #0]
 801cc26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cc28:	3301      	adds	r3, #1
 801cc2a:	62bb      	str	r3, [r7, #40]	; 0x28
 801cc2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801cc2e:	693b      	ldr	r3, [r7, #16]
 801cc30:	429a      	cmp	r2, r3
 801cc32:	dbf0      	blt.n	801cc16 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801cc34:	e05f      	b.n	801ccf6 <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801cc36:	6a3b      	ldr	r3, [r7, #32]
 801cc38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cc3c:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801cc3e:	2310      	movs	r3, #16
 801cc40:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801cc42:	e02b      	b.n	801cc9c <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 801cc44:	6a3b      	ldr	r3, [r7, #32]
 801cc46:	f043 0302 	orr.w	r3, r3, #2
 801cc4a:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801cc4c:	e025      	b.n	801cc9a <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801cc4e:	687b      	ldr	r3, [r7, #4]
 801cc50:	781b      	ldrb	r3, [r3, #0]
 801cc52:	2b25      	cmp	r3, #37	; 0x25
 801cc54:	d004      	beq.n	801cc60 <tiny_vsnprintf_like+0x1d4>
 801cc56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cc58:	1c5a      	adds	r2, r3, #1
 801cc5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801cc5c:	2225      	movs	r2, #37	; 0x25
 801cc5e:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801cc60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cc62:	68fb      	ldr	r3, [r7, #12]
 801cc64:	1ad2      	subs	r2, r2, r3
 801cc66:	68bb      	ldr	r3, [r7, #8]
 801cc68:	3b01      	subs	r3, #1
 801cc6a:	429a      	cmp	r2, r3
 801cc6c:	da16      	bge.n	801cc9c <tiny_vsnprintf_like+0x210>
        if (*fmt)
 801cc6e:	687b      	ldr	r3, [r7, #4]
 801cc70:	781b      	ldrb	r3, [r3, #0]
 801cc72:	2b00      	cmp	r3, #0
 801cc74:	d006      	beq.n	801cc84 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801cc76:	687a      	ldr	r2, [r7, #4]
 801cc78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cc7a:	1c59      	adds	r1, r3, #1
 801cc7c:	62f9      	str	r1, [r7, #44]	; 0x2c
 801cc7e:	7812      	ldrb	r2, [r2, #0]
 801cc80:	701a      	strb	r2, [r3, #0]
 801cc82:	e002      	b.n	801cc8a <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801cc84:	687b      	ldr	r3, [r7, #4]
 801cc86:	3b01      	subs	r3, #1
 801cc88:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801cc8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cc8c:	68fb      	ldr	r3, [r7, #12]
 801cc8e:	1ad2      	subs	r2, r2, r3
 801cc90:	68bb      	ldr	r3, [r7, #8]
 801cc92:	3b01      	subs	r3, #1
 801cc94:	429a      	cmp	r2, r3
 801cc96:	db2d      	blt.n	801ccf4 <tiny_vsnprintf_like+0x268>
 801cc98:	e000      	b.n	801cc9c <tiny_vsnprintf_like+0x210>
        break;
 801cc9a:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801cc9c:	697b      	ldr	r3, [r7, #20]
 801cc9e:	2b6c      	cmp	r3, #108	; 0x6c
 801cca0:	d105      	bne.n	801ccae <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 801cca2:	683b      	ldr	r3, [r7, #0]
 801cca4:	1d1a      	adds	r2, r3, #4
 801cca6:	603a      	str	r2, [r7, #0]
 801cca8:	681b      	ldr	r3, [r3, #0]
 801ccaa:	637b      	str	r3, [r7, #52]	; 0x34
 801ccac:	e00f      	b.n	801ccce <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 801ccae:	6a3b      	ldr	r3, [r7, #32]
 801ccb0:	f003 0302 	and.w	r3, r3, #2
 801ccb4:	2b00      	cmp	r3, #0
 801ccb6:	d005      	beq.n	801ccc4 <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 801ccb8:	683b      	ldr	r3, [r7, #0]
 801ccba:	1d1a      	adds	r2, r3, #4
 801ccbc:	603a      	str	r2, [r7, #0]
 801ccbe:	681b      	ldr	r3, [r3, #0]
 801ccc0:	637b      	str	r3, [r7, #52]	; 0x34
 801ccc2:	e004      	b.n	801ccce <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 801ccc4:	683b      	ldr	r3, [r7, #0]
 801ccc6:	1d1a      	adds	r2, r3, #4
 801ccc8:	603a      	str	r2, [r7, #0]
 801ccca:	681b      	ldr	r3, [r3, #0]
 801cccc:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801ccce:	68bb      	ldr	r3, [r7, #8]
 801ccd0:	1e5a      	subs	r2, r3, #1
 801ccd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801ccd4:	68fb      	ldr	r3, [r7, #12]
 801ccd6:	1acb      	subs	r3, r1, r3
 801ccd8:	1ad1      	subs	r1, r2, r3
 801ccda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ccdc:	6a3b      	ldr	r3, [r7, #32]
 801ccde:	9302      	str	r3, [sp, #8]
 801cce0:	69bb      	ldr	r3, [r7, #24]
 801cce2:	9301      	str	r3, [sp, #4]
 801cce4:	69fb      	ldr	r3, [r7, #28]
 801cce6:	9300      	str	r3, [sp, #0]
 801cce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ccea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801ccec:	f7ff fde0 	bl	801c8b0 <ee_number>
 801ccf0:	62f8      	str	r0, [r7, #44]	; 0x2c
 801ccf2:	e000      	b.n	801ccf6 <tiny_vsnprintf_like+0x26a>
        continue;
 801ccf4:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801ccf6:	687b      	ldr	r3, [r7, #4]
 801ccf8:	3301      	adds	r3, #1
 801ccfa:	607b      	str	r3, [r7, #4]
 801ccfc:	687b      	ldr	r3, [r7, #4]
 801ccfe:	781b      	ldrb	r3, [r3, #0]
 801cd00:	2b00      	cmp	r3, #0
 801cd02:	f47f aed2 	bne.w	801caaa <tiny_vsnprintf_like+0x1e>
 801cd06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cd08:	68fb      	ldr	r3, [r7, #12]
 801cd0a:	1ad2      	subs	r2, r2, r3
 801cd0c:	68bb      	ldr	r3, [r7, #8]
 801cd0e:	3b01      	subs	r3, #1
 801cd10:	429a      	cmp	r2, r3
 801cd12:	f6bf aeca 	bge.w	801caaa <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 801cd16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cd18:	2200      	movs	r2, #0
 801cd1a:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801cd1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cd1e:	68fb      	ldr	r3, [r7, #12]
 801cd20:	1ad3      	subs	r3, r2, r3
}
 801cd22:	4618      	mov	r0, r3
 801cd24:	3738      	adds	r7, #56	; 0x38
 801cd26:	46bd      	mov	sp, r7
 801cd28:	bd80      	pop	{r7, pc}
 801cd2a:	bf00      	nop
 801cd2c:	0801e4cc 	.word	0x0801e4cc

0801cd30 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801cd30:	b580      	push	{r7, lr}
 801cd32:	b090      	sub	sp, #64	; 0x40
 801cd34:	af00      	add	r7, sp, #0
 801cd36:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801cd38:	4b73      	ldr	r3, [pc, #460]	; (801cf08 <UTIL_SEQ_Run+0x1d8>)
 801cd3a:	681b      	ldr	r3, [r3, #0]
 801cd3c:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801cd3e:	4b72      	ldr	r3, [pc, #456]	; (801cf08 <UTIL_SEQ_Run+0x1d8>)
 801cd40:	681a      	ldr	r2, [r3, #0]
 801cd42:	687b      	ldr	r3, [r7, #4]
 801cd44:	4013      	ands	r3, r2
 801cd46:	4a70      	ldr	r2, [pc, #448]	; (801cf08 <UTIL_SEQ_Run+0x1d8>)
 801cd48:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801cd4a:	4b70      	ldr	r3, [pc, #448]	; (801cf0c <UTIL_SEQ_Run+0x1dc>)
 801cd4c:	681b      	ldr	r3, [r3, #0]
 801cd4e:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801cd50:	4b6f      	ldr	r3, [pc, #444]	; (801cf10 <UTIL_SEQ_Run+0x1e0>)
 801cd52:	681b      	ldr	r3, [r3, #0]
 801cd54:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801cd56:	4b6f      	ldr	r3, [pc, #444]	; (801cf14 <UTIL_SEQ_Run+0x1e4>)
 801cd58:	681b      	ldr	r3, [r3, #0]
 801cd5a:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 801cd5c:	4b6e      	ldr	r3, [pc, #440]	; (801cf18 <UTIL_SEQ_Run+0x1e8>)
 801cd5e:	681b      	ldr	r3, [r3, #0]
 801cd60:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801cd62:	e08d      	b.n	801ce80 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801cd64:	2300      	movs	r3, #0
 801cd66:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801cd68:	e002      	b.n	801cd70 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801cd6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cd6c:	3301      	adds	r3, #1
 801cd6e:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801cd70:	4a6a      	ldr	r2, [pc, #424]	; (801cf1c <UTIL_SEQ_Run+0x1ec>)
 801cd72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cd74:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801cd78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cd7a:	401a      	ands	r2, r3
 801cd7c:	4b62      	ldr	r3, [pc, #392]	; (801cf08 <UTIL_SEQ_Run+0x1d8>)
 801cd7e:	681b      	ldr	r3, [r3, #0]
 801cd80:	4013      	ands	r3, r2
 801cd82:	2b00      	cmp	r3, #0
 801cd84:	d0f1      	beq.n	801cd6a <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801cd86:	4a65      	ldr	r2, [pc, #404]	; (801cf1c <UTIL_SEQ_Run+0x1ec>)
 801cd88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cd8a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801cd8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cd90:	401a      	ands	r2, r3
 801cd92:	4b5d      	ldr	r3, [pc, #372]	; (801cf08 <UTIL_SEQ_Run+0x1d8>)
 801cd94:	681b      	ldr	r3, [r3, #0]
 801cd96:	4013      	ands	r3, r2
 801cd98:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801cd9a:	4a60      	ldr	r2, [pc, #384]	; (801cf1c <UTIL_SEQ_Run+0x1ec>)
 801cd9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cd9e:	00db      	lsls	r3, r3, #3
 801cda0:	4413      	add	r3, r2
 801cda2:	685a      	ldr	r2, [r3, #4]
 801cda4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cda6:	4013      	ands	r3, r2
 801cda8:	2b00      	cmp	r3, #0
 801cdaa:	d106      	bne.n	801cdba <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801cdac:	4a5b      	ldr	r2, [pc, #364]	; (801cf1c <UTIL_SEQ_Run+0x1ec>)
 801cdae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cdb0:	00db      	lsls	r3, r3, #3
 801cdb2:	4413      	add	r3, r2
 801cdb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801cdb8:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801cdba:	4a58      	ldr	r2, [pc, #352]	; (801cf1c <UTIL_SEQ_Run+0x1ec>)
 801cdbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cdbe:	00db      	lsls	r3, r3, #3
 801cdc0:	4413      	add	r3, r2
 801cdc2:	685a      	ldr	r2, [r3, #4]
 801cdc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cdc6:	4013      	ands	r3, r2
 801cdc8:	4618      	mov	r0, r3
 801cdca:	f000 f907 	bl	801cfdc <SEQ_BitPosition>
 801cdce:	4603      	mov	r3, r0
 801cdd0:	461a      	mov	r2, r3
 801cdd2:	4b53      	ldr	r3, [pc, #332]	; (801cf20 <UTIL_SEQ_Run+0x1f0>)
 801cdd4:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801cdd6:	4a51      	ldr	r2, [pc, #324]	; (801cf1c <UTIL_SEQ_Run+0x1ec>)
 801cdd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cdda:	00db      	lsls	r3, r3, #3
 801cddc:	4413      	add	r3, r2
 801cdde:	685a      	ldr	r2, [r3, #4]
 801cde0:	4b4f      	ldr	r3, [pc, #316]	; (801cf20 <UTIL_SEQ_Run+0x1f0>)
 801cde2:	681b      	ldr	r3, [r3, #0]
 801cde4:	2101      	movs	r1, #1
 801cde6:	fa01 f303 	lsl.w	r3, r1, r3
 801cdea:	43db      	mvns	r3, r3
 801cdec:	401a      	ands	r2, r3
 801cdee:	494b      	ldr	r1, [pc, #300]	; (801cf1c <UTIL_SEQ_Run+0x1ec>)
 801cdf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cdf2:	00db      	lsls	r3, r3, #3
 801cdf4:	440b      	add	r3, r1
 801cdf6:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cdf8:	f3ef 8310 	mrs	r3, PRIMASK
 801cdfc:	61bb      	str	r3, [r7, #24]
  return(result);
 801cdfe:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801ce00:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801ce02:	b672      	cpsid	i
}
 801ce04:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801ce06:	4b46      	ldr	r3, [pc, #280]	; (801cf20 <UTIL_SEQ_Run+0x1f0>)
 801ce08:	681b      	ldr	r3, [r3, #0]
 801ce0a:	2201      	movs	r2, #1
 801ce0c:	fa02 f303 	lsl.w	r3, r2, r3
 801ce10:	43da      	mvns	r2, r3
 801ce12:	4b3e      	ldr	r3, [pc, #248]	; (801cf0c <UTIL_SEQ_Run+0x1dc>)
 801ce14:	681b      	ldr	r3, [r3, #0]
 801ce16:	4013      	ands	r3, r2
 801ce18:	4a3c      	ldr	r2, [pc, #240]	; (801cf0c <UTIL_SEQ_Run+0x1dc>)
 801ce1a:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801ce1c:	2301      	movs	r3, #1
 801ce1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 801ce20:	e013      	b.n	801ce4a <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801ce22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ce24:	3b01      	subs	r3, #1
 801ce26:	4a3d      	ldr	r2, [pc, #244]	; (801cf1c <UTIL_SEQ_Run+0x1ec>)
 801ce28:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801ce2c:	4b3c      	ldr	r3, [pc, #240]	; (801cf20 <UTIL_SEQ_Run+0x1f0>)
 801ce2e:	681b      	ldr	r3, [r3, #0]
 801ce30:	2201      	movs	r2, #1
 801ce32:	fa02 f303 	lsl.w	r3, r2, r3
 801ce36:	43da      	mvns	r2, r3
 801ce38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ce3a:	3b01      	subs	r3, #1
 801ce3c:	400a      	ands	r2, r1
 801ce3e:	4937      	ldr	r1, [pc, #220]	; (801cf1c <UTIL_SEQ_Run+0x1ec>)
 801ce40:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801ce44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ce46:	3b01      	subs	r3, #1
 801ce48:	63fb      	str	r3, [r7, #60]	; 0x3c
 801ce4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ce4c:	2b00      	cmp	r3, #0
 801ce4e:	d1e8      	bne.n	801ce22 <UTIL_SEQ_Run+0xf2>
 801ce50:	6a3b      	ldr	r3, [r7, #32]
 801ce52:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ce54:	697b      	ldr	r3, [r7, #20]
 801ce56:	f383 8810 	msr	PRIMASK, r3
}
 801ce5a:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801ce5c:	4b30      	ldr	r3, [pc, #192]	; (801cf20 <UTIL_SEQ_Run+0x1f0>)
 801ce5e:	681b      	ldr	r3, [r3, #0]
 801ce60:	4a30      	ldr	r2, [pc, #192]	; (801cf24 <UTIL_SEQ_Run+0x1f4>)
 801ce62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ce66:	4798      	blx	r3

    local_taskset = TaskSet;
 801ce68:	4b28      	ldr	r3, [pc, #160]	; (801cf0c <UTIL_SEQ_Run+0x1dc>)
 801ce6a:	681b      	ldr	r3, [r3, #0]
 801ce6c:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 801ce6e:	4b28      	ldr	r3, [pc, #160]	; (801cf10 <UTIL_SEQ_Run+0x1e0>)
 801ce70:	681b      	ldr	r3, [r3, #0]
 801ce72:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 801ce74:	4b27      	ldr	r3, [pc, #156]	; (801cf14 <UTIL_SEQ_Run+0x1e4>)
 801ce76:	681b      	ldr	r3, [r3, #0]
 801ce78:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 801ce7a:	4b27      	ldr	r3, [pc, #156]	; (801cf18 <UTIL_SEQ_Run+0x1e8>)
 801ce7c:	681b      	ldr	r3, [r3, #0]
 801ce7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801ce80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ce82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ce84:	401a      	ands	r2, r3
 801ce86:	4b20      	ldr	r3, [pc, #128]	; (801cf08 <UTIL_SEQ_Run+0x1d8>)
 801ce88:	681b      	ldr	r3, [r3, #0]
 801ce8a:	4013      	ands	r3, r2
 801ce8c:	2b00      	cmp	r3, #0
 801ce8e:	d005      	beq.n	801ce9c <UTIL_SEQ_Run+0x16c>
 801ce90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ce92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ce94:	4013      	ands	r3, r2
 801ce96:	2b00      	cmp	r3, #0
 801ce98:	f43f af64 	beq.w	801cd64 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801ce9c:	4b20      	ldr	r3, [pc, #128]	; (801cf20 <UTIL_SEQ_Run+0x1f0>)
 801ce9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801cea2:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801cea4:	f000 f88e 	bl	801cfc4 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cea8:	f3ef 8310 	mrs	r3, PRIMASK
 801ceac:	613b      	str	r3, [r7, #16]
  return(result);
 801ceae:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801ceb0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801ceb2:	b672      	cpsid	i
}
 801ceb4:	bf00      	nop
  local_taskset = TaskSet;
 801ceb6:	4b15      	ldr	r3, [pc, #84]	; (801cf0c <UTIL_SEQ_Run+0x1dc>)
 801ceb8:	681b      	ldr	r3, [r3, #0]
 801ceba:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801cebc:	4b14      	ldr	r3, [pc, #80]	; (801cf10 <UTIL_SEQ_Run+0x1e0>)
 801cebe:	681b      	ldr	r3, [r3, #0]
 801cec0:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801cec2:	4b14      	ldr	r3, [pc, #80]	; (801cf14 <UTIL_SEQ_Run+0x1e4>)
 801cec4:	681b      	ldr	r3, [r3, #0]
 801cec6:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801cec8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ceca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cecc:	401a      	ands	r2, r3
 801cece:	4b0e      	ldr	r3, [pc, #56]	; (801cf08 <UTIL_SEQ_Run+0x1d8>)
 801ced0:	681b      	ldr	r3, [r3, #0]
 801ced2:	4013      	ands	r3, r2
 801ced4:	2b00      	cmp	r3, #0
 801ced6:	d107      	bne.n	801cee8 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801ced8:	4b0f      	ldr	r3, [pc, #60]	; (801cf18 <UTIL_SEQ_Run+0x1e8>)
 801ceda:	681a      	ldr	r2, [r3, #0]
 801cedc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cede:	4013      	ands	r3, r2
 801cee0:	2b00      	cmp	r3, #0
 801cee2:	d101      	bne.n	801cee8 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801cee4:	f7e5 f844 	bl	8001f70 <UTIL_SEQ_Idle>
 801cee8:	69fb      	ldr	r3, [r7, #28]
 801ceea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ceec:	68fb      	ldr	r3, [r7, #12]
 801ceee:	f383 8810 	msr	PRIMASK, r3
}
 801cef2:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801cef4:	f000 f86c 	bl	801cfd0 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801cef8:	4a03      	ldr	r2, [pc, #12]	; (801cf08 <UTIL_SEQ_Run+0x1d8>)
 801cefa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cefc:	6013      	str	r3, [r2, #0]

  return;
 801cefe:	bf00      	nop
}
 801cf00:	3740      	adds	r7, #64	; 0x40
 801cf02:	46bd      	mov	sp, r7
 801cf04:	bd80      	pop	{r7, pc}
 801cf06:	bf00      	nop
 801cf08:	20000144 	.word	0x20000144
 801cf0c:	20001c8c 	.word	0x20001c8c
 801cf10:	20001c90 	.word	0x20001c90
 801cf14:	20000140 	.word	0x20000140
 801cf18:	20001c94 	.word	0x20001c94
 801cf1c:	20001cac 	.word	0x20001cac
 801cf20:	20001c98 	.word	0x20001c98
 801cf24:	20001c9c 	.word	0x20001c9c

0801cf28 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801cf28:	b580      	push	{r7, lr}
 801cf2a:	b088      	sub	sp, #32
 801cf2c:	af00      	add	r7, sp, #0
 801cf2e:	60f8      	str	r0, [r7, #12]
 801cf30:	60b9      	str	r1, [r7, #8]
 801cf32:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cf34:	f3ef 8310 	mrs	r3, PRIMASK
 801cf38:	617b      	str	r3, [r7, #20]
  return(result);
 801cf3a:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801cf3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801cf3e:	b672      	cpsid	i
}
 801cf40:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801cf42:	68f8      	ldr	r0, [r7, #12]
 801cf44:	f000 f84a 	bl	801cfdc <SEQ_BitPosition>
 801cf48:	4603      	mov	r3, r0
 801cf4a:	4619      	mov	r1, r3
 801cf4c:	4a06      	ldr	r2, [pc, #24]	; (801cf68 <UTIL_SEQ_RegTask+0x40>)
 801cf4e:	687b      	ldr	r3, [r7, #4]
 801cf50:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801cf54:	69fb      	ldr	r3, [r7, #28]
 801cf56:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cf58:	69bb      	ldr	r3, [r7, #24]
 801cf5a:	f383 8810 	msr	PRIMASK, r3
}
 801cf5e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801cf60:	bf00      	nop
}
 801cf62:	3720      	adds	r7, #32
 801cf64:	46bd      	mov	sp, r7
 801cf66:	bd80      	pop	{r7, pc}
 801cf68:	20001c9c 	.word	0x20001c9c

0801cf6c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801cf6c:	b480      	push	{r7}
 801cf6e:	b087      	sub	sp, #28
 801cf70:	af00      	add	r7, sp, #0
 801cf72:	6078      	str	r0, [r7, #4]
 801cf74:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cf76:	f3ef 8310 	mrs	r3, PRIMASK
 801cf7a:	60fb      	str	r3, [r7, #12]
  return(result);
 801cf7c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801cf7e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801cf80:	b672      	cpsid	i
}
 801cf82:	bf00      	nop

  TaskSet |= TaskId_bm;
 801cf84:	4b0d      	ldr	r3, [pc, #52]	; (801cfbc <UTIL_SEQ_SetTask+0x50>)
 801cf86:	681a      	ldr	r2, [r3, #0]
 801cf88:	687b      	ldr	r3, [r7, #4]
 801cf8a:	4313      	orrs	r3, r2
 801cf8c:	4a0b      	ldr	r2, [pc, #44]	; (801cfbc <UTIL_SEQ_SetTask+0x50>)
 801cf8e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801cf90:	4a0b      	ldr	r2, [pc, #44]	; (801cfc0 <UTIL_SEQ_SetTask+0x54>)
 801cf92:	683b      	ldr	r3, [r7, #0]
 801cf94:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801cf98:	687b      	ldr	r3, [r7, #4]
 801cf9a:	431a      	orrs	r2, r3
 801cf9c:	4908      	ldr	r1, [pc, #32]	; (801cfc0 <UTIL_SEQ_SetTask+0x54>)
 801cf9e:	683b      	ldr	r3, [r7, #0]
 801cfa0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801cfa4:	697b      	ldr	r3, [r7, #20]
 801cfa6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cfa8:	693b      	ldr	r3, [r7, #16]
 801cfaa:	f383 8810 	msr	PRIMASK, r3
}
 801cfae:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801cfb0:	bf00      	nop
}
 801cfb2:	371c      	adds	r7, #28
 801cfb4:	46bd      	mov	sp, r7
 801cfb6:	bc80      	pop	{r7}
 801cfb8:	4770      	bx	lr
 801cfba:	bf00      	nop
 801cfbc:	20001c8c 	.word	0x20001c8c
 801cfc0:	20001cac 	.word	0x20001cac

0801cfc4 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801cfc4:	b480      	push	{r7}
 801cfc6:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801cfc8:	bf00      	nop
}
 801cfca:	46bd      	mov	sp, r7
 801cfcc:	bc80      	pop	{r7}
 801cfce:	4770      	bx	lr

0801cfd0 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801cfd0:	b480      	push	{r7}
 801cfd2:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801cfd4:	bf00      	nop
}
 801cfd6:	46bd      	mov	sp, r7
 801cfd8:	bc80      	pop	{r7}
 801cfda:	4770      	bx	lr

0801cfdc <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801cfdc:	b480      	push	{r7}
 801cfde:	b085      	sub	sp, #20
 801cfe0:	af00      	add	r7, sp, #0
 801cfe2:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801cfe4:	2300      	movs	r3, #0
 801cfe6:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801cfe8:	687b      	ldr	r3, [r7, #4]
 801cfea:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801cfec:	68bb      	ldr	r3, [r7, #8]
 801cfee:	0c1b      	lsrs	r3, r3, #16
 801cff0:	041b      	lsls	r3, r3, #16
 801cff2:	2b00      	cmp	r3, #0
 801cff4:	d104      	bne.n	801d000 <SEQ_BitPosition+0x24>
 801cff6:	2310      	movs	r3, #16
 801cff8:	73fb      	strb	r3, [r7, #15]
 801cffa:	68bb      	ldr	r3, [r7, #8]
 801cffc:	041b      	lsls	r3, r3, #16
 801cffe:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801d000:	68bb      	ldr	r3, [r7, #8]
 801d002:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801d006:	2b00      	cmp	r3, #0
 801d008:	d105      	bne.n	801d016 <SEQ_BitPosition+0x3a>
 801d00a:	7bfb      	ldrb	r3, [r7, #15]
 801d00c:	3308      	adds	r3, #8
 801d00e:	73fb      	strb	r3, [r7, #15]
 801d010:	68bb      	ldr	r3, [r7, #8]
 801d012:	021b      	lsls	r3, r3, #8
 801d014:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801d016:	68bb      	ldr	r3, [r7, #8]
 801d018:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801d01c:	2b00      	cmp	r3, #0
 801d01e:	d105      	bne.n	801d02c <SEQ_BitPosition+0x50>
 801d020:	7bfb      	ldrb	r3, [r7, #15]
 801d022:	3304      	adds	r3, #4
 801d024:	73fb      	strb	r3, [r7, #15]
 801d026:	68bb      	ldr	r3, [r7, #8]
 801d028:	011b      	lsls	r3, r3, #4
 801d02a:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801d02c:	68bb      	ldr	r3, [r7, #8]
 801d02e:	0f1b      	lsrs	r3, r3, #28
 801d030:	4a06      	ldr	r2, [pc, #24]	; (801d04c <SEQ_BitPosition+0x70>)
 801d032:	5cd2      	ldrb	r2, [r2, r3]
 801d034:	7bfb      	ldrb	r3, [r7, #15]
 801d036:	4413      	add	r3, r2
 801d038:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801d03a:	7bfb      	ldrb	r3, [r7, #15]
 801d03c:	f1c3 031f 	rsb	r3, r3, #31
 801d040:	b2db      	uxtb	r3, r3
}
 801d042:	4618      	mov	r0, r3
 801d044:	3714      	adds	r7, #20
 801d046:	46bd      	mov	sp, r7
 801d048:	bc80      	pop	{r7}
 801d04a:	4770      	bx	lr
 801d04c:	0801eb94 	.word	0x0801eb94

0801d050 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801d050:	b580      	push	{r7, lr}
 801d052:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801d054:	4b04      	ldr	r3, [pc, #16]	; (801d068 <UTIL_TIMER_Init+0x18>)
 801d056:	2200      	movs	r2, #0
 801d058:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801d05a:	4b04      	ldr	r3, [pc, #16]	; (801d06c <UTIL_TIMER_Init+0x1c>)
 801d05c:	681b      	ldr	r3, [r3, #0]
 801d05e:	4798      	blx	r3
 801d060:	4603      	mov	r3, r0
}
 801d062:	4618      	mov	r0, r3
 801d064:	bd80      	pop	{r7, pc}
 801d066:	bf00      	nop
 801d068:	20001cb4 	.word	0x20001cb4
 801d06c:	0801e58c 	.word	0x0801e58c

0801d070 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801d070:	b580      	push	{r7, lr}
 801d072:	b084      	sub	sp, #16
 801d074:	af00      	add	r7, sp, #0
 801d076:	60f8      	str	r0, [r7, #12]
 801d078:	60b9      	str	r1, [r7, #8]
 801d07a:	603b      	str	r3, [r7, #0]
 801d07c:	4613      	mov	r3, r2
 801d07e:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801d080:	68fb      	ldr	r3, [r7, #12]
 801d082:	2b00      	cmp	r3, #0
 801d084:	d023      	beq.n	801d0ce <UTIL_TIMER_Create+0x5e>
 801d086:	683b      	ldr	r3, [r7, #0]
 801d088:	2b00      	cmp	r3, #0
 801d08a:	d020      	beq.n	801d0ce <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801d08c:	68fb      	ldr	r3, [r7, #12]
 801d08e:	2200      	movs	r2, #0
 801d090:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801d092:	4b11      	ldr	r3, [pc, #68]	; (801d0d8 <UTIL_TIMER_Create+0x68>)
 801d094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d096:	68b8      	ldr	r0, [r7, #8]
 801d098:	4798      	blx	r3
 801d09a:	4602      	mov	r2, r0
 801d09c:	68fb      	ldr	r3, [r7, #12]
 801d09e:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801d0a0:	68fb      	ldr	r3, [r7, #12]
 801d0a2:	2200      	movs	r2, #0
 801d0a4:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801d0a6:	68fb      	ldr	r3, [r7, #12]
 801d0a8:	2200      	movs	r2, #0
 801d0aa:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801d0ac:	68fb      	ldr	r3, [r7, #12]
 801d0ae:	2200      	movs	r2, #0
 801d0b0:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801d0b2:	68fb      	ldr	r3, [r7, #12]
 801d0b4:	683a      	ldr	r2, [r7, #0]
 801d0b6:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801d0b8:	68fb      	ldr	r3, [r7, #12]
 801d0ba:	69ba      	ldr	r2, [r7, #24]
 801d0bc:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801d0be:	68fb      	ldr	r3, [r7, #12]
 801d0c0:	79fa      	ldrb	r2, [r7, #7]
 801d0c2:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801d0c4:	68fb      	ldr	r3, [r7, #12]
 801d0c6:	2200      	movs	r2, #0
 801d0c8:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801d0ca:	2300      	movs	r3, #0
 801d0cc:	e000      	b.n	801d0d0 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801d0ce:	2301      	movs	r3, #1
  }
}
 801d0d0:	4618      	mov	r0, r3
 801d0d2:	3710      	adds	r7, #16
 801d0d4:	46bd      	mov	sp, r7
 801d0d6:	bd80      	pop	{r7, pc}
 801d0d8:	0801e58c 	.word	0x0801e58c

0801d0dc <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801d0dc:	b580      	push	{r7, lr}
 801d0de:	b08a      	sub	sp, #40	; 0x28
 801d0e0:	af00      	add	r7, sp, #0
 801d0e2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801d0e4:	2300      	movs	r3, #0
 801d0e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801d0ea:	687b      	ldr	r3, [r7, #4]
 801d0ec:	2b00      	cmp	r3, #0
 801d0ee:	d056      	beq.n	801d19e <UTIL_TIMER_Start+0xc2>
 801d0f0:	6878      	ldr	r0, [r7, #4]
 801d0f2:	f000 f9a9 	bl	801d448 <TimerExists>
 801d0f6:	4603      	mov	r3, r0
 801d0f8:	f083 0301 	eor.w	r3, r3, #1
 801d0fc:	b2db      	uxtb	r3, r3
 801d0fe:	2b00      	cmp	r3, #0
 801d100:	d04d      	beq.n	801d19e <UTIL_TIMER_Start+0xc2>
 801d102:	687b      	ldr	r3, [r7, #4]
 801d104:	7a5b      	ldrb	r3, [r3, #9]
 801d106:	2b00      	cmp	r3, #0
 801d108:	d149      	bne.n	801d19e <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d10a:	f3ef 8310 	mrs	r3, PRIMASK
 801d10e:	613b      	str	r3, [r7, #16]
  return(result);
 801d110:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801d112:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801d114:	b672      	cpsid	i
}
 801d116:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801d118:	687b      	ldr	r3, [r7, #4]
 801d11a:	685b      	ldr	r3, [r3, #4]
 801d11c:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801d11e:	4b24      	ldr	r3, [pc, #144]	; (801d1b0 <UTIL_TIMER_Start+0xd4>)
 801d120:	6a1b      	ldr	r3, [r3, #32]
 801d122:	4798      	blx	r3
 801d124:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801d126:	6a3a      	ldr	r2, [r7, #32]
 801d128:	69bb      	ldr	r3, [r7, #24]
 801d12a:	429a      	cmp	r2, r3
 801d12c:	d201      	bcs.n	801d132 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801d12e:	69bb      	ldr	r3, [r7, #24]
 801d130:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801d132:	687b      	ldr	r3, [r7, #4]
 801d134:	6a3a      	ldr	r2, [r7, #32]
 801d136:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801d138:	687b      	ldr	r3, [r7, #4]
 801d13a:	2200      	movs	r2, #0
 801d13c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801d13e:	687b      	ldr	r3, [r7, #4]
 801d140:	2201      	movs	r2, #1
 801d142:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801d144:	687b      	ldr	r3, [r7, #4]
 801d146:	2200      	movs	r2, #0
 801d148:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801d14a:	4b1a      	ldr	r3, [pc, #104]	; (801d1b4 <UTIL_TIMER_Start+0xd8>)
 801d14c:	681b      	ldr	r3, [r3, #0]
 801d14e:	2b00      	cmp	r3, #0
 801d150:	d106      	bne.n	801d160 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801d152:	4b17      	ldr	r3, [pc, #92]	; (801d1b0 <UTIL_TIMER_Start+0xd4>)
 801d154:	691b      	ldr	r3, [r3, #16]
 801d156:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801d158:	6878      	ldr	r0, [r7, #4]
 801d15a:	f000 f9eb 	bl	801d534 <TimerInsertNewHeadTimer>
 801d15e:	e017      	b.n	801d190 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801d160:	4b13      	ldr	r3, [pc, #76]	; (801d1b0 <UTIL_TIMER_Start+0xd4>)
 801d162:	699b      	ldr	r3, [r3, #24]
 801d164:	4798      	blx	r3
 801d166:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801d168:	687b      	ldr	r3, [r7, #4]
 801d16a:	681a      	ldr	r2, [r3, #0]
 801d16c:	697b      	ldr	r3, [r7, #20]
 801d16e:	441a      	add	r2, r3
 801d170:	687b      	ldr	r3, [r7, #4]
 801d172:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801d174:	687b      	ldr	r3, [r7, #4]
 801d176:	681a      	ldr	r2, [r3, #0]
 801d178:	4b0e      	ldr	r3, [pc, #56]	; (801d1b4 <UTIL_TIMER_Start+0xd8>)
 801d17a:	681b      	ldr	r3, [r3, #0]
 801d17c:	681b      	ldr	r3, [r3, #0]
 801d17e:	429a      	cmp	r2, r3
 801d180:	d203      	bcs.n	801d18a <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801d182:	6878      	ldr	r0, [r7, #4]
 801d184:	f000 f9d6 	bl	801d534 <TimerInsertNewHeadTimer>
 801d188:	e002      	b.n	801d190 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801d18a:	6878      	ldr	r0, [r7, #4]
 801d18c:	f000 f9a2 	bl	801d4d4 <TimerInsertTimer>
 801d190:	69fb      	ldr	r3, [r7, #28]
 801d192:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d194:	68fb      	ldr	r3, [r7, #12]
 801d196:	f383 8810 	msr	PRIMASK, r3
}
 801d19a:	bf00      	nop
  {
 801d19c:	e002      	b.n	801d1a4 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801d19e:	2301      	movs	r3, #1
 801d1a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 801d1a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801d1a8:	4618      	mov	r0, r3
 801d1aa:	3728      	adds	r7, #40	; 0x28
 801d1ac:	46bd      	mov	sp, r7
 801d1ae:	bd80      	pop	{r7, pc}
 801d1b0:	0801e58c 	.word	0x0801e58c
 801d1b4:	20001cb4 	.word	0x20001cb4

0801d1b8 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801d1b8:	b580      	push	{r7, lr}
 801d1ba:	b088      	sub	sp, #32
 801d1bc:	af00      	add	r7, sp, #0
 801d1be:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801d1c0:	2300      	movs	r3, #0
 801d1c2:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801d1c4:	687b      	ldr	r3, [r7, #4]
 801d1c6:	2b00      	cmp	r3, #0
 801d1c8:	d05b      	beq.n	801d282 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d1ca:	f3ef 8310 	mrs	r3, PRIMASK
 801d1ce:	60fb      	str	r3, [r7, #12]
  return(result);
 801d1d0:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801d1d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801d1d4:	b672      	cpsid	i
}
 801d1d6:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801d1d8:	4b2d      	ldr	r3, [pc, #180]	; (801d290 <UTIL_TIMER_Stop+0xd8>)
 801d1da:	681b      	ldr	r3, [r3, #0]
 801d1dc:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801d1de:	4b2c      	ldr	r3, [pc, #176]	; (801d290 <UTIL_TIMER_Stop+0xd8>)
 801d1e0:	681b      	ldr	r3, [r3, #0]
 801d1e2:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801d1e4:	687b      	ldr	r3, [r7, #4]
 801d1e6:	2201      	movs	r2, #1
 801d1e8:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801d1ea:	4b29      	ldr	r3, [pc, #164]	; (801d290 <UTIL_TIMER_Stop+0xd8>)
 801d1ec:	681b      	ldr	r3, [r3, #0]
 801d1ee:	2b00      	cmp	r3, #0
 801d1f0:	d041      	beq.n	801d276 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801d1f2:	687b      	ldr	r3, [r7, #4]
 801d1f4:	2200      	movs	r2, #0
 801d1f6:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801d1f8:	4b25      	ldr	r3, [pc, #148]	; (801d290 <UTIL_TIMER_Stop+0xd8>)
 801d1fa:	681b      	ldr	r3, [r3, #0]
 801d1fc:	687a      	ldr	r2, [r7, #4]
 801d1fe:	429a      	cmp	r2, r3
 801d200:	d134      	bne.n	801d26c <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801d202:	4b23      	ldr	r3, [pc, #140]	; (801d290 <UTIL_TIMER_Stop+0xd8>)
 801d204:	681b      	ldr	r3, [r3, #0]
 801d206:	2200      	movs	r2, #0
 801d208:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801d20a:	4b21      	ldr	r3, [pc, #132]	; (801d290 <UTIL_TIMER_Stop+0xd8>)
 801d20c:	681b      	ldr	r3, [r3, #0]
 801d20e:	695b      	ldr	r3, [r3, #20]
 801d210:	2b00      	cmp	r3, #0
 801d212:	d00a      	beq.n	801d22a <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801d214:	4b1e      	ldr	r3, [pc, #120]	; (801d290 <UTIL_TIMER_Stop+0xd8>)
 801d216:	681b      	ldr	r3, [r3, #0]
 801d218:	695b      	ldr	r3, [r3, #20]
 801d21a:	4a1d      	ldr	r2, [pc, #116]	; (801d290 <UTIL_TIMER_Stop+0xd8>)
 801d21c:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801d21e:	4b1c      	ldr	r3, [pc, #112]	; (801d290 <UTIL_TIMER_Stop+0xd8>)
 801d220:	681b      	ldr	r3, [r3, #0]
 801d222:	4618      	mov	r0, r3
 801d224:	f000 f92c 	bl	801d480 <TimerSetTimeout>
 801d228:	e023      	b.n	801d272 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801d22a:	4b1a      	ldr	r3, [pc, #104]	; (801d294 <UTIL_TIMER_Stop+0xdc>)
 801d22c:	68db      	ldr	r3, [r3, #12]
 801d22e:	4798      	blx	r3
            TimerListHead = NULL;
 801d230:	4b17      	ldr	r3, [pc, #92]	; (801d290 <UTIL_TIMER_Stop+0xd8>)
 801d232:	2200      	movs	r2, #0
 801d234:	601a      	str	r2, [r3, #0]
 801d236:	e01c      	b.n	801d272 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801d238:	697a      	ldr	r2, [r7, #20]
 801d23a:	687b      	ldr	r3, [r7, #4]
 801d23c:	429a      	cmp	r2, r3
 801d23e:	d110      	bne.n	801d262 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801d240:	697b      	ldr	r3, [r7, #20]
 801d242:	695b      	ldr	r3, [r3, #20]
 801d244:	2b00      	cmp	r3, #0
 801d246:	d006      	beq.n	801d256 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801d248:	697b      	ldr	r3, [r7, #20]
 801d24a:	695b      	ldr	r3, [r3, #20]
 801d24c:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801d24e:	69bb      	ldr	r3, [r7, #24]
 801d250:	697a      	ldr	r2, [r7, #20]
 801d252:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801d254:	e00d      	b.n	801d272 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801d256:	2300      	movs	r3, #0
 801d258:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801d25a:	69bb      	ldr	r3, [r7, #24]
 801d25c:	697a      	ldr	r2, [r7, #20]
 801d25e:	615a      	str	r2, [r3, #20]
            break;
 801d260:	e007      	b.n	801d272 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801d262:	697b      	ldr	r3, [r7, #20]
 801d264:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801d266:	697b      	ldr	r3, [r7, #20]
 801d268:	695b      	ldr	r3, [r3, #20]
 801d26a:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801d26c:	697b      	ldr	r3, [r7, #20]
 801d26e:	2b00      	cmp	r3, #0
 801d270:	d1e2      	bne.n	801d238 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801d272:	2300      	movs	r3, #0
 801d274:	77fb      	strb	r3, [r7, #31]
 801d276:	693b      	ldr	r3, [r7, #16]
 801d278:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d27a:	68bb      	ldr	r3, [r7, #8]
 801d27c:	f383 8810 	msr	PRIMASK, r3
}
 801d280:	e001      	b.n	801d286 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801d282:	2301      	movs	r3, #1
 801d284:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801d286:	7ffb      	ldrb	r3, [r7, #31]
}
 801d288:	4618      	mov	r0, r3
 801d28a:	3720      	adds	r7, #32
 801d28c:	46bd      	mov	sp, r7
 801d28e:	bd80      	pop	{r7, pc}
 801d290:	20001cb4 	.word	0x20001cb4
 801d294:	0801e58c 	.word	0x0801e58c

0801d298 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801d298:	b580      	push	{r7, lr}
 801d29a:	b084      	sub	sp, #16
 801d29c:	af00      	add	r7, sp, #0
 801d29e:	6078      	str	r0, [r7, #4]
 801d2a0:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801d2a2:	2300      	movs	r3, #0
 801d2a4:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801d2a6:	687b      	ldr	r3, [r7, #4]
 801d2a8:	2b00      	cmp	r3, #0
 801d2aa:	d102      	bne.n	801d2b2 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801d2ac:	2301      	movs	r3, #1
 801d2ae:	73fb      	strb	r3, [r7, #15]
 801d2b0:	e014      	b.n	801d2dc <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801d2b2:	4b0d      	ldr	r3, [pc, #52]	; (801d2e8 <UTIL_TIMER_SetPeriod+0x50>)
 801d2b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d2b6:	6838      	ldr	r0, [r7, #0]
 801d2b8:	4798      	blx	r3
 801d2ba:	4602      	mov	r2, r0
 801d2bc:	687b      	ldr	r3, [r7, #4]
 801d2be:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801d2c0:	6878      	ldr	r0, [r7, #4]
 801d2c2:	f000 f8c1 	bl	801d448 <TimerExists>
 801d2c6:	4603      	mov	r3, r0
 801d2c8:	2b00      	cmp	r3, #0
 801d2ca:	d007      	beq.n	801d2dc <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801d2cc:	6878      	ldr	r0, [r7, #4]
 801d2ce:	f7ff ff73 	bl	801d1b8 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801d2d2:	6878      	ldr	r0, [r7, #4]
 801d2d4:	f7ff ff02 	bl	801d0dc <UTIL_TIMER_Start>
 801d2d8:	4603      	mov	r3, r0
 801d2da:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801d2dc:	7bfb      	ldrb	r3, [r7, #15]
}
 801d2de:	4618      	mov	r0, r3
 801d2e0:	3710      	adds	r7, #16
 801d2e2:	46bd      	mov	sp, r7
 801d2e4:	bd80      	pop	{r7, pc}
 801d2e6:	bf00      	nop
 801d2e8:	0801e58c 	.word	0x0801e58c

0801d2ec <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801d2ec:	b590      	push	{r4, r7, lr}
 801d2ee:	b089      	sub	sp, #36	; 0x24
 801d2f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d2f2:	f3ef 8310 	mrs	r3, PRIMASK
 801d2f6:	60bb      	str	r3, [r7, #8]
  return(result);
 801d2f8:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801d2fa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801d2fc:	b672      	cpsid	i
}
 801d2fe:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801d300:	4b38      	ldr	r3, [pc, #224]	; (801d3e4 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801d302:	695b      	ldr	r3, [r3, #20]
 801d304:	4798      	blx	r3
 801d306:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801d308:	4b36      	ldr	r3, [pc, #216]	; (801d3e4 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801d30a:	691b      	ldr	r3, [r3, #16]
 801d30c:	4798      	blx	r3
 801d30e:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801d310:	693a      	ldr	r2, [r7, #16]
 801d312:	697b      	ldr	r3, [r7, #20]
 801d314:	1ad3      	subs	r3, r2, r3
 801d316:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801d318:	4b33      	ldr	r3, [pc, #204]	; (801d3e8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d31a:	681b      	ldr	r3, [r3, #0]
 801d31c:	2b00      	cmp	r3, #0
 801d31e:	d037      	beq.n	801d390 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801d320:	4b31      	ldr	r3, [pc, #196]	; (801d3e8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d322:	681b      	ldr	r3, [r3, #0]
 801d324:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801d326:	69fb      	ldr	r3, [r7, #28]
 801d328:	681b      	ldr	r3, [r3, #0]
 801d32a:	68fa      	ldr	r2, [r7, #12]
 801d32c:	429a      	cmp	r2, r3
 801d32e:	d206      	bcs.n	801d33e <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801d330:	69fb      	ldr	r3, [r7, #28]
 801d332:	681a      	ldr	r2, [r3, #0]
 801d334:	68fb      	ldr	r3, [r7, #12]
 801d336:	1ad2      	subs	r2, r2, r3
 801d338:	69fb      	ldr	r3, [r7, #28]
 801d33a:	601a      	str	r2, [r3, #0]
 801d33c:	e002      	b.n	801d344 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801d33e:	69fb      	ldr	r3, [r7, #28]
 801d340:	2200      	movs	r2, #0
 801d342:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801d344:	69fb      	ldr	r3, [r7, #28]
 801d346:	695b      	ldr	r3, [r3, #20]
 801d348:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801d34a:	69fb      	ldr	r3, [r7, #28]
 801d34c:	2b00      	cmp	r3, #0
 801d34e:	d1ea      	bne.n	801d326 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801d350:	e01e      	b.n	801d390 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801d352:	4b25      	ldr	r3, [pc, #148]	; (801d3e8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d354:	681b      	ldr	r3, [r3, #0]
 801d356:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801d358:	4b23      	ldr	r3, [pc, #140]	; (801d3e8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d35a:	681b      	ldr	r3, [r3, #0]
 801d35c:	695b      	ldr	r3, [r3, #20]
 801d35e:	4a22      	ldr	r2, [pc, #136]	; (801d3e8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d360:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801d362:	69fb      	ldr	r3, [r7, #28]
 801d364:	2200      	movs	r2, #0
 801d366:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801d368:	69fb      	ldr	r3, [r7, #28]
 801d36a:	2200      	movs	r2, #0
 801d36c:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801d36e:	69fb      	ldr	r3, [r7, #28]
 801d370:	68db      	ldr	r3, [r3, #12]
 801d372:	69fa      	ldr	r2, [r7, #28]
 801d374:	6912      	ldr	r2, [r2, #16]
 801d376:	4610      	mov	r0, r2
 801d378:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801d37a:	69fb      	ldr	r3, [r7, #28]
 801d37c:	7adb      	ldrb	r3, [r3, #11]
 801d37e:	2b01      	cmp	r3, #1
 801d380:	d106      	bne.n	801d390 <UTIL_TIMER_IRQ_Handler+0xa4>
 801d382:	69fb      	ldr	r3, [r7, #28]
 801d384:	7a9b      	ldrb	r3, [r3, #10]
 801d386:	2b00      	cmp	r3, #0
 801d388:	d102      	bne.n	801d390 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801d38a:	69f8      	ldr	r0, [r7, #28]
 801d38c:	f7ff fea6 	bl	801d0dc <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801d390:	4b15      	ldr	r3, [pc, #84]	; (801d3e8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d392:	681b      	ldr	r3, [r3, #0]
 801d394:	2b00      	cmp	r3, #0
 801d396:	d00d      	beq.n	801d3b4 <UTIL_TIMER_IRQ_Handler+0xc8>
 801d398:	4b13      	ldr	r3, [pc, #76]	; (801d3e8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d39a:	681b      	ldr	r3, [r3, #0]
 801d39c:	681b      	ldr	r3, [r3, #0]
 801d39e:	2b00      	cmp	r3, #0
 801d3a0:	d0d7      	beq.n	801d352 <UTIL_TIMER_IRQ_Handler+0x66>
 801d3a2:	4b11      	ldr	r3, [pc, #68]	; (801d3e8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d3a4:	681b      	ldr	r3, [r3, #0]
 801d3a6:	681c      	ldr	r4, [r3, #0]
 801d3a8:	4b0e      	ldr	r3, [pc, #56]	; (801d3e4 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801d3aa:	699b      	ldr	r3, [r3, #24]
 801d3ac:	4798      	blx	r3
 801d3ae:	4603      	mov	r3, r0
 801d3b0:	429c      	cmp	r4, r3
 801d3b2:	d3ce      	bcc.n	801d352 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801d3b4:	4b0c      	ldr	r3, [pc, #48]	; (801d3e8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d3b6:	681b      	ldr	r3, [r3, #0]
 801d3b8:	2b00      	cmp	r3, #0
 801d3ba:	d009      	beq.n	801d3d0 <UTIL_TIMER_IRQ_Handler+0xe4>
 801d3bc:	4b0a      	ldr	r3, [pc, #40]	; (801d3e8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d3be:	681b      	ldr	r3, [r3, #0]
 801d3c0:	7a1b      	ldrb	r3, [r3, #8]
 801d3c2:	2b00      	cmp	r3, #0
 801d3c4:	d104      	bne.n	801d3d0 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801d3c6:	4b08      	ldr	r3, [pc, #32]	; (801d3e8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d3c8:	681b      	ldr	r3, [r3, #0]
 801d3ca:	4618      	mov	r0, r3
 801d3cc:	f000 f858 	bl	801d480 <TimerSetTimeout>
 801d3d0:	69bb      	ldr	r3, [r7, #24]
 801d3d2:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d3d4:	687b      	ldr	r3, [r7, #4]
 801d3d6:	f383 8810 	msr	PRIMASK, r3
}
 801d3da:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801d3dc:	bf00      	nop
 801d3de:	3724      	adds	r7, #36	; 0x24
 801d3e0:	46bd      	mov	sp, r7
 801d3e2:	bd90      	pop	{r4, r7, pc}
 801d3e4:	0801e58c 	.word	0x0801e58c
 801d3e8:	20001cb4 	.word	0x20001cb4

0801d3ec <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801d3ec:	b580      	push	{r7, lr}
 801d3ee:	b082      	sub	sp, #8
 801d3f0:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801d3f2:	4b06      	ldr	r3, [pc, #24]	; (801d40c <UTIL_TIMER_GetCurrentTime+0x20>)
 801d3f4:	69db      	ldr	r3, [r3, #28]
 801d3f6:	4798      	blx	r3
 801d3f8:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801d3fa:	4b04      	ldr	r3, [pc, #16]	; (801d40c <UTIL_TIMER_GetCurrentTime+0x20>)
 801d3fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d3fe:	6878      	ldr	r0, [r7, #4]
 801d400:	4798      	blx	r3
 801d402:	4603      	mov	r3, r0
}
 801d404:	4618      	mov	r0, r3
 801d406:	3708      	adds	r7, #8
 801d408:	46bd      	mov	sp, r7
 801d40a:	bd80      	pop	{r7, pc}
 801d40c:	0801e58c 	.word	0x0801e58c

0801d410 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801d410:	b580      	push	{r7, lr}
 801d412:	b084      	sub	sp, #16
 801d414:	af00      	add	r7, sp, #0
 801d416:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801d418:	4b0a      	ldr	r3, [pc, #40]	; (801d444 <UTIL_TIMER_GetElapsedTime+0x34>)
 801d41a:	69db      	ldr	r3, [r3, #28]
 801d41c:	4798      	blx	r3
 801d41e:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801d420:	4b08      	ldr	r3, [pc, #32]	; (801d444 <UTIL_TIMER_GetElapsedTime+0x34>)
 801d422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d424:	6878      	ldr	r0, [r7, #4]
 801d426:	4798      	blx	r3
 801d428:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801d42a:	4b06      	ldr	r3, [pc, #24]	; (801d444 <UTIL_TIMER_GetElapsedTime+0x34>)
 801d42c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d42e:	68f9      	ldr	r1, [r7, #12]
 801d430:	68ba      	ldr	r2, [r7, #8]
 801d432:	1a8a      	subs	r2, r1, r2
 801d434:	4610      	mov	r0, r2
 801d436:	4798      	blx	r3
 801d438:	4603      	mov	r3, r0
}
 801d43a:	4618      	mov	r0, r3
 801d43c:	3710      	adds	r7, #16
 801d43e:	46bd      	mov	sp, r7
 801d440:	bd80      	pop	{r7, pc}
 801d442:	bf00      	nop
 801d444:	0801e58c 	.word	0x0801e58c

0801d448 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801d448:	b480      	push	{r7}
 801d44a:	b085      	sub	sp, #20
 801d44c:	af00      	add	r7, sp, #0
 801d44e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801d450:	4b0a      	ldr	r3, [pc, #40]	; (801d47c <TimerExists+0x34>)
 801d452:	681b      	ldr	r3, [r3, #0]
 801d454:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801d456:	e008      	b.n	801d46a <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801d458:	68fa      	ldr	r2, [r7, #12]
 801d45a:	687b      	ldr	r3, [r7, #4]
 801d45c:	429a      	cmp	r2, r3
 801d45e:	d101      	bne.n	801d464 <TimerExists+0x1c>
    {
      return true;
 801d460:	2301      	movs	r3, #1
 801d462:	e006      	b.n	801d472 <TimerExists+0x2a>
    }
    cur = cur->Next;
 801d464:	68fb      	ldr	r3, [r7, #12]
 801d466:	695b      	ldr	r3, [r3, #20]
 801d468:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801d46a:	68fb      	ldr	r3, [r7, #12]
 801d46c:	2b00      	cmp	r3, #0
 801d46e:	d1f3      	bne.n	801d458 <TimerExists+0x10>
  }
  return false;
 801d470:	2300      	movs	r3, #0
}
 801d472:	4618      	mov	r0, r3
 801d474:	3714      	adds	r7, #20
 801d476:	46bd      	mov	sp, r7
 801d478:	bc80      	pop	{r7}
 801d47a:	4770      	bx	lr
 801d47c:	20001cb4 	.word	0x20001cb4

0801d480 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801d480:	b590      	push	{r4, r7, lr}
 801d482:	b085      	sub	sp, #20
 801d484:	af00      	add	r7, sp, #0
 801d486:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801d488:	4b11      	ldr	r3, [pc, #68]	; (801d4d0 <TimerSetTimeout+0x50>)
 801d48a:	6a1b      	ldr	r3, [r3, #32]
 801d48c:	4798      	blx	r3
 801d48e:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801d490:	687b      	ldr	r3, [r7, #4]
 801d492:	2201      	movs	r2, #1
 801d494:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801d496:	687b      	ldr	r3, [r7, #4]
 801d498:	681c      	ldr	r4, [r3, #0]
 801d49a:	4b0d      	ldr	r3, [pc, #52]	; (801d4d0 <TimerSetTimeout+0x50>)
 801d49c:	699b      	ldr	r3, [r3, #24]
 801d49e:	4798      	blx	r3
 801d4a0:	4602      	mov	r2, r0
 801d4a2:	68fb      	ldr	r3, [r7, #12]
 801d4a4:	4413      	add	r3, r2
 801d4a6:	429c      	cmp	r4, r3
 801d4a8:	d207      	bcs.n	801d4ba <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801d4aa:	4b09      	ldr	r3, [pc, #36]	; (801d4d0 <TimerSetTimeout+0x50>)
 801d4ac:	699b      	ldr	r3, [r3, #24]
 801d4ae:	4798      	blx	r3
 801d4b0:	4602      	mov	r2, r0
 801d4b2:	68fb      	ldr	r3, [r7, #12]
 801d4b4:	441a      	add	r2, r3
 801d4b6:	687b      	ldr	r3, [r7, #4]
 801d4b8:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801d4ba:	4b05      	ldr	r3, [pc, #20]	; (801d4d0 <TimerSetTimeout+0x50>)
 801d4bc:	689b      	ldr	r3, [r3, #8]
 801d4be:	687a      	ldr	r2, [r7, #4]
 801d4c0:	6812      	ldr	r2, [r2, #0]
 801d4c2:	4610      	mov	r0, r2
 801d4c4:	4798      	blx	r3
}
 801d4c6:	bf00      	nop
 801d4c8:	3714      	adds	r7, #20
 801d4ca:	46bd      	mov	sp, r7
 801d4cc:	bd90      	pop	{r4, r7, pc}
 801d4ce:	bf00      	nop
 801d4d0:	0801e58c 	.word	0x0801e58c

0801d4d4 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801d4d4:	b480      	push	{r7}
 801d4d6:	b085      	sub	sp, #20
 801d4d8:	af00      	add	r7, sp, #0
 801d4da:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801d4dc:	4b14      	ldr	r3, [pc, #80]	; (801d530 <TimerInsertTimer+0x5c>)
 801d4de:	681b      	ldr	r3, [r3, #0]
 801d4e0:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801d4e2:	4b13      	ldr	r3, [pc, #76]	; (801d530 <TimerInsertTimer+0x5c>)
 801d4e4:	681b      	ldr	r3, [r3, #0]
 801d4e6:	695b      	ldr	r3, [r3, #20]
 801d4e8:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801d4ea:	e012      	b.n	801d512 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801d4ec:	687b      	ldr	r3, [r7, #4]
 801d4ee:	681a      	ldr	r2, [r3, #0]
 801d4f0:	68bb      	ldr	r3, [r7, #8]
 801d4f2:	681b      	ldr	r3, [r3, #0]
 801d4f4:	429a      	cmp	r2, r3
 801d4f6:	d905      	bls.n	801d504 <TimerInsertTimer+0x30>
    {
        cur = next;
 801d4f8:	68bb      	ldr	r3, [r7, #8]
 801d4fa:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801d4fc:	68bb      	ldr	r3, [r7, #8]
 801d4fe:	695b      	ldr	r3, [r3, #20]
 801d500:	60bb      	str	r3, [r7, #8]
 801d502:	e006      	b.n	801d512 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801d504:	68fb      	ldr	r3, [r7, #12]
 801d506:	687a      	ldr	r2, [r7, #4]
 801d508:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801d50a:	687b      	ldr	r3, [r7, #4]
 801d50c:	68ba      	ldr	r2, [r7, #8]
 801d50e:	615a      	str	r2, [r3, #20]
        return;
 801d510:	e009      	b.n	801d526 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801d512:	68fb      	ldr	r3, [r7, #12]
 801d514:	695b      	ldr	r3, [r3, #20]
 801d516:	2b00      	cmp	r3, #0
 801d518:	d1e8      	bne.n	801d4ec <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801d51a:	68fb      	ldr	r3, [r7, #12]
 801d51c:	687a      	ldr	r2, [r7, #4]
 801d51e:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801d520:	687b      	ldr	r3, [r7, #4]
 801d522:	2200      	movs	r2, #0
 801d524:	615a      	str	r2, [r3, #20]
}
 801d526:	3714      	adds	r7, #20
 801d528:	46bd      	mov	sp, r7
 801d52a:	bc80      	pop	{r7}
 801d52c:	4770      	bx	lr
 801d52e:	bf00      	nop
 801d530:	20001cb4 	.word	0x20001cb4

0801d534 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801d534:	b580      	push	{r7, lr}
 801d536:	b084      	sub	sp, #16
 801d538:	af00      	add	r7, sp, #0
 801d53a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801d53c:	4b0b      	ldr	r3, [pc, #44]	; (801d56c <TimerInsertNewHeadTimer+0x38>)
 801d53e:	681b      	ldr	r3, [r3, #0]
 801d540:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801d542:	68fb      	ldr	r3, [r7, #12]
 801d544:	2b00      	cmp	r3, #0
 801d546:	d002      	beq.n	801d54e <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801d548:	68fb      	ldr	r3, [r7, #12]
 801d54a:	2200      	movs	r2, #0
 801d54c:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801d54e:	687b      	ldr	r3, [r7, #4]
 801d550:	68fa      	ldr	r2, [r7, #12]
 801d552:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801d554:	4a05      	ldr	r2, [pc, #20]	; (801d56c <TimerInsertNewHeadTimer+0x38>)
 801d556:	687b      	ldr	r3, [r7, #4]
 801d558:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801d55a:	4b04      	ldr	r3, [pc, #16]	; (801d56c <TimerInsertNewHeadTimer+0x38>)
 801d55c:	681b      	ldr	r3, [r3, #0]
 801d55e:	4618      	mov	r0, r3
 801d560:	f7ff ff8e 	bl	801d480 <TimerSetTimeout>
}
 801d564:	bf00      	nop
 801d566:	3710      	adds	r7, #16
 801d568:	46bd      	mov	sp, r7
 801d56a:	bd80      	pop	{r7, pc}
 801d56c:	20001cb4 	.word	0x20001cb4

0801d570 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801d570:	b580      	push	{r7, lr}
 801d572:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801d574:	2218      	movs	r2, #24
 801d576:	2100      	movs	r1, #0
 801d578:	4807      	ldr	r0, [pc, #28]	; (801d598 <UTIL_ADV_TRACE_Init+0x28>)
 801d57a:	f7fe fffa 	bl	801c572 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801d57e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801d582:	2100      	movs	r1, #0
 801d584:	4805      	ldr	r0, [pc, #20]	; (801d59c <UTIL_ADV_TRACE_Init+0x2c>)
 801d586:	f7fe fff4 	bl	801c572 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801d58a:	4b05      	ldr	r3, [pc, #20]	; (801d5a0 <UTIL_ADV_TRACE_Init+0x30>)
 801d58c:	681b      	ldr	r3, [r3, #0]
 801d58e:	4805      	ldr	r0, [pc, #20]	; (801d5a4 <UTIL_ADV_TRACE_Init+0x34>)
 801d590:	4798      	blx	r3
 801d592:	4603      	mov	r3, r0
}
 801d594:	4618      	mov	r0, r3
 801d596:	bd80      	pop	{r7, pc}
 801d598:	20001cb8 	.word	0x20001cb8
 801d59c:	20001cd0 	.word	0x20001cd0
 801d5a0:	0801e5cc 	.word	0x0801e5cc
 801d5a4:	0801d811 	.word	0x0801d811

0801d5a8 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801d5a8:	b480      	push	{r7}
 801d5aa:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801d5ac:	4b06      	ldr	r3, [pc, #24]	; (801d5c8 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801d5ae:	8a5a      	ldrh	r2, [r3, #18]
 801d5b0:	4b05      	ldr	r3, [pc, #20]	; (801d5c8 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801d5b2:	8a1b      	ldrh	r3, [r3, #16]
 801d5b4:	429a      	cmp	r2, r3
 801d5b6:	d101      	bne.n	801d5bc <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801d5b8:	2301      	movs	r3, #1
 801d5ba:	e000      	b.n	801d5be <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801d5bc:	2300      	movs	r3, #0
}
 801d5be:	4618      	mov	r0, r3
 801d5c0:	46bd      	mov	sp, r7
 801d5c2:	bc80      	pop	{r7}
 801d5c4:	4770      	bx	lr
 801d5c6:	bf00      	nop
 801d5c8:	20001cb8 	.word	0x20001cb8

0801d5cc <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801d5cc:	b408      	push	{r3}
 801d5ce:	b580      	push	{r7, lr}
 801d5d0:	b08d      	sub	sp, #52	; 0x34
 801d5d2:	af00      	add	r7, sp, #0
 801d5d4:	60f8      	str	r0, [r7, #12]
 801d5d6:	60b9      	str	r1, [r7, #8]
 801d5d8:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801d5da:	2300      	movs	r3, #0
 801d5dc:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801d5de:	2300      	movs	r3, #0
 801d5e0:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801d5e2:	4b37      	ldr	r3, [pc, #220]	; (801d6c0 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801d5e4:	7a1b      	ldrb	r3, [r3, #8]
 801d5e6:	461a      	mov	r2, r3
 801d5e8:	68fb      	ldr	r3, [r7, #12]
 801d5ea:	4293      	cmp	r3, r2
 801d5ec:	d902      	bls.n	801d5f4 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801d5ee:	f06f 0304 	mvn.w	r3, #4
 801d5f2:	e05e      	b.n	801d6b2 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801d5f4:	4b32      	ldr	r3, [pc, #200]	; (801d6c0 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801d5f6:	68da      	ldr	r2, [r3, #12]
 801d5f8:	68bb      	ldr	r3, [r7, #8]
 801d5fa:	4013      	ands	r3, r2
 801d5fc:	68ba      	ldr	r2, [r7, #8]
 801d5fe:	429a      	cmp	r2, r3
 801d600:	d002      	beq.n	801d608 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801d602:	f06f 0305 	mvn.w	r3, #5
 801d606:	e054      	b.n	801d6b2 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801d608:	4b2d      	ldr	r3, [pc, #180]	; (801d6c0 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801d60a:	685b      	ldr	r3, [r3, #4]
 801d60c:	2b00      	cmp	r3, #0
 801d60e:	d00a      	beq.n	801d626 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801d610:	687b      	ldr	r3, [r7, #4]
 801d612:	2b00      	cmp	r3, #0
 801d614:	d007      	beq.n	801d626 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801d616:	4b2a      	ldr	r3, [pc, #168]	; (801d6c0 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801d618:	685b      	ldr	r3, [r3, #4]
 801d61a:	f107 0116 	add.w	r1, r7, #22
 801d61e:	f107 0218 	add.w	r2, r7, #24
 801d622:	4610      	mov	r0, r2
 801d624:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801d626:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d62a:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801d62c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d62e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801d630:	f44f 7100 	mov.w	r1, #512	; 0x200
 801d634:	4823      	ldr	r0, [pc, #140]	; (801d6c4 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801d636:	f7ff fa29 	bl	801ca8c <tiny_vsnprintf_like>
 801d63a:	4603      	mov	r3, r0
 801d63c:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 801d63e:	f000 f9f1 	bl	801da24 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801d642:	8afa      	ldrh	r2, [r7, #22]
 801d644:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801d646:	4413      	add	r3, r2
 801d648:	b29b      	uxth	r3, r3
 801d64a:	f107 0214 	add.w	r2, r7, #20
 801d64e:	4611      	mov	r1, r2
 801d650:	4618      	mov	r0, r3
 801d652:	f000 f969 	bl	801d928 <TRACE_AllocateBufer>
 801d656:	4603      	mov	r3, r0
 801d658:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801d65c:	d025      	beq.n	801d6aa <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801d65e:	2300      	movs	r3, #0
 801d660:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801d662:	e00e      	b.n	801d682 <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801d664:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801d666:	8aba      	ldrh	r2, [r7, #20]
 801d668:	3330      	adds	r3, #48	; 0x30
 801d66a:	443b      	add	r3, r7
 801d66c:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801d670:	4b15      	ldr	r3, [pc, #84]	; (801d6c8 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801d672:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801d674:	8abb      	ldrh	r3, [r7, #20]
 801d676:	3301      	adds	r3, #1
 801d678:	b29b      	uxth	r3, r3
 801d67a:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801d67c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801d67e:	3301      	adds	r3, #1
 801d680:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801d682:	8afb      	ldrh	r3, [r7, #22]
 801d684:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801d686:	429a      	cmp	r2, r3
 801d688:	d3ec      	bcc.n	801d664 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801d68a:	8abb      	ldrh	r3, [r7, #20]
 801d68c:	461a      	mov	r2, r3
 801d68e:	4b0e      	ldr	r3, [pc, #56]	; (801d6c8 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801d690:	18d0      	adds	r0, r2, r3
 801d692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d694:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801d696:	f44f 7100 	mov.w	r1, #512	; 0x200
 801d69a:	f7ff f9f7 	bl	801ca8c <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801d69e:	f000 f9df 	bl	801da60 <TRACE_UnLock>

    return TRACE_Send();
 801d6a2:	f000 f831 	bl	801d708 <TRACE_Send>
 801d6a6:	4603      	mov	r3, r0
 801d6a8:	e003      	b.n	801d6b2 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801d6aa:	f000 f9d9 	bl	801da60 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801d6ae:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801d6b2:	4618      	mov	r0, r3
 801d6b4:	3734      	adds	r7, #52	; 0x34
 801d6b6:	46bd      	mov	sp, r7
 801d6b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801d6bc:	b001      	add	sp, #4
 801d6be:	4770      	bx	lr
 801d6c0:	20001cb8 	.word	0x20001cb8
 801d6c4:	200020d0 	.word	0x200020d0
 801d6c8:	20001cd0 	.word	0x20001cd0

0801d6cc <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801d6cc:	b480      	push	{r7}
 801d6ce:	b083      	sub	sp, #12
 801d6d0:	af00      	add	r7, sp, #0
 801d6d2:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801d6d4:	4a03      	ldr	r2, [pc, #12]	; (801d6e4 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801d6d6:	687b      	ldr	r3, [r7, #4]
 801d6d8:	6053      	str	r3, [r2, #4]
}
 801d6da:	bf00      	nop
 801d6dc:	370c      	adds	r7, #12
 801d6de:	46bd      	mov	sp, r7
 801d6e0:	bc80      	pop	{r7}
 801d6e2:	4770      	bx	lr
 801d6e4:	20001cb8 	.word	0x20001cb8

0801d6e8 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801d6e8:	b480      	push	{r7}
 801d6ea:	b083      	sub	sp, #12
 801d6ec:	af00      	add	r7, sp, #0
 801d6ee:	4603      	mov	r3, r0
 801d6f0:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801d6f2:	4a04      	ldr	r2, [pc, #16]	; (801d704 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801d6f4:	79fb      	ldrb	r3, [r7, #7]
 801d6f6:	7213      	strb	r3, [r2, #8]
}
 801d6f8:	bf00      	nop
 801d6fa:	370c      	adds	r7, #12
 801d6fc:	46bd      	mov	sp, r7
 801d6fe:	bc80      	pop	{r7}
 801d700:	4770      	bx	lr
 801d702:	bf00      	nop
 801d704:	20001cb8 	.word	0x20001cb8

0801d708 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801d708:	b580      	push	{r7, lr}
 801d70a:	b088      	sub	sp, #32
 801d70c:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801d70e:	2300      	movs	r3, #0
 801d710:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801d712:	2300      	movs	r3, #0
 801d714:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d716:	f3ef 8310 	mrs	r3, PRIMASK
 801d71a:	613b      	str	r3, [r7, #16]
  return(result);
 801d71c:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801d71e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d720:	b672      	cpsid	i
}
 801d722:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801d724:	f000 f9ba 	bl	801da9c <TRACE_IsLocked>
 801d728:	4603      	mov	r3, r0
 801d72a:	2b00      	cmp	r3, #0
 801d72c:	d15d      	bne.n	801d7ea <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801d72e:	f000 f979 	bl	801da24 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801d732:	4b34      	ldr	r3, [pc, #208]	; (801d804 <TRACE_Send+0xfc>)
 801d734:	8a1a      	ldrh	r2, [r3, #16]
 801d736:	4b33      	ldr	r3, [pc, #204]	; (801d804 <TRACE_Send+0xfc>)
 801d738:	8a5b      	ldrh	r3, [r3, #18]
 801d73a:	429a      	cmp	r2, r3
 801d73c:	d04d      	beq.n	801d7da <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801d73e:	4b31      	ldr	r3, [pc, #196]	; (801d804 <TRACE_Send+0xfc>)
 801d740:	789b      	ldrb	r3, [r3, #2]
 801d742:	2b01      	cmp	r3, #1
 801d744:	d117      	bne.n	801d776 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801d746:	4b2f      	ldr	r3, [pc, #188]	; (801d804 <TRACE_Send+0xfc>)
 801d748:	881a      	ldrh	r2, [r3, #0]
 801d74a:	4b2e      	ldr	r3, [pc, #184]	; (801d804 <TRACE_Send+0xfc>)
 801d74c:	8a1b      	ldrh	r3, [r3, #16]
 801d74e:	1ad3      	subs	r3, r2, r3
 801d750:	b29a      	uxth	r2, r3
 801d752:	4b2c      	ldr	r3, [pc, #176]	; (801d804 <TRACE_Send+0xfc>)
 801d754:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801d756:	4b2b      	ldr	r3, [pc, #172]	; (801d804 <TRACE_Send+0xfc>)
 801d758:	2202      	movs	r2, #2
 801d75a:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801d75c:	4b29      	ldr	r3, [pc, #164]	; (801d804 <TRACE_Send+0xfc>)
 801d75e:	2200      	movs	r2, #0
 801d760:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801d762:	4b28      	ldr	r3, [pc, #160]	; (801d804 <TRACE_Send+0xfc>)
 801d764:	8a9b      	ldrh	r3, [r3, #20]
 801d766:	2b00      	cmp	r3, #0
 801d768:	d105      	bne.n	801d776 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801d76a:	4b26      	ldr	r3, [pc, #152]	; (801d804 <TRACE_Send+0xfc>)
 801d76c:	2200      	movs	r2, #0
 801d76e:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801d770:	4b24      	ldr	r3, [pc, #144]	; (801d804 <TRACE_Send+0xfc>)
 801d772:	2200      	movs	r2, #0
 801d774:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801d776:	4b23      	ldr	r3, [pc, #140]	; (801d804 <TRACE_Send+0xfc>)
 801d778:	789b      	ldrb	r3, [r3, #2]
 801d77a:	2b00      	cmp	r3, #0
 801d77c:	d115      	bne.n	801d7aa <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801d77e:	4b21      	ldr	r3, [pc, #132]	; (801d804 <TRACE_Send+0xfc>)
 801d780:	8a5a      	ldrh	r2, [r3, #18]
 801d782:	4b20      	ldr	r3, [pc, #128]	; (801d804 <TRACE_Send+0xfc>)
 801d784:	8a1b      	ldrh	r3, [r3, #16]
 801d786:	429a      	cmp	r2, r3
 801d788:	d908      	bls.n	801d79c <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801d78a:	4b1e      	ldr	r3, [pc, #120]	; (801d804 <TRACE_Send+0xfc>)
 801d78c:	8a5a      	ldrh	r2, [r3, #18]
 801d78e:	4b1d      	ldr	r3, [pc, #116]	; (801d804 <TRACE_Send+0xfc>)
 801d790:	8a1b      	ldrh	r3, [r3, #16]
 801d792:	1ad3      	subs	r3, r2, r3
 801d794:	b29a      	uxth	r2, r3
 801d796:	4b1b      	ldr	r3, [pc, #108]	; (801d804 <TRACE_Send+0xfc>)
 801d798:	829a      	strh	r2, [r3, #20]
 801d79a:	e006      	b.n	801d7aa <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801d79c:	4b19      	ldr	r3, [pc, #100]	; (801d804 <TRACE_Send+0xfc>)
 801d79e:	8a1b      	ldrh	r3, [r3, #16]
 801d7a0:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801d7a4:	b29a      	uxth	r2, r3
 801d7a6:	4b17      	ldr	r3, [pc, #92]	; (801d804 <TRACE_Send+0xfc>)
 801d7a8:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801d7aa:	4b16      	ldr	r3, [pc, #88]	; (801d804 <TRACE_Send+0xfc>)
 801d7ac:	8a1b      	ldrh	r3, [r3, #16]
 801d7ae:	461a      	mov	r2, r3
 801d7b0:	4b15      	ldr	r3, [pc, #84]	; (801d808 <TRACE_Send+0x100>)
 801d7b2:	4413      	add	r3, r2
 801d7b4:	61bb      	str	r3, [r7, #24]
 801d7b6:	697b      	ldr	r3, [r7, #20]
 801d7b8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d7ba:	68fb      	ldr	r3, [r7, #12]
 801d7bc:	f383 8810 	msr	PRIMASK, r3
}
 801d7c0:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801d7c2:	f7e4 fcdb 	bl	800217c <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801d7c6:	4b11      	ldr	r3, [pc, #68]	; (801d80c <TRACE_Send+0x104>)
 801d7c8:	68db      	ldr	r3, [r3, #12]
 801d7ca:	4a0e      	ldr	r2, [pc, #56]	; (801d804 <TRACE_Send+0xfc>)
 801d7cc:	8a92      	ldrh	r2, [r2, #20]
 801d7ce:	4611      	mov	r1, r2
 801d7d0:	69b8      	ldr	r0, [r7, #24]
 801d7d2:	4798      	blx	r3
 801d7d4:	4603      	mov	r3, r0
 801d7d6:	77fb      	strb	r3, [r7, #31]
 801d7d8:	e00d      	b.n	801d7f6 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801d7da:	f000 f941 	bl	801da60 <TRACE_UnLock>
 801d7de:	697b      	ldr	r3, [r7, #20]
 801d7e0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d7e2:	68bb      	ldr	r3, [r7, #8]
 801d7e4:	f383 8810 	msr	PRIMASK, r3
}
 801d7e8:	e005      	b.n	801d7f6 <TRACE_Send+0xee>
 801d7ea:	697b      	ldr	r3, [r7, #20]
 801d7ec:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d7ee:	687b      	ldr	r3, [r7, #4]
 801d7f0:	f383 8810 	msr	PRIMASK, r3
}
 801d7f4:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801d7f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801d7fa:	4618      	mov	r0, r3
 801d7fc:	3720      	adds	r7, #32
 801d7fe:	46bd      	mov	sp, r7
 801d800:	bd80      	pop	{r7, pc}
 801d802:	bf00      	nop
 801d804:	20001cb8 	.word	0x20001cb8
 801d808:	20001cd0 	.word	0x20001cd0
 801d80c:	0801e5cc 	.word	0x0801e5cc

0801d810 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801d810:	b580      	push	{r7, lr}
 801d812:	b088      	sub	sp, #32
 801d814:	af00      	add	r7, sp, #0
 801d816:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801d818:	2300      	movs	r3, #0
 801d81a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d81c:	f3ef 8310 	mrs	r3, PRIMASK
 801d820:	617b      	str	r3, [r7, #20]
  return(result);
 801d822:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801d824:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801d826:	b672      	cpsid	i
}
 801d828:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801d82a:	4b3c      	ldr	r3, [pc, #240]	; (801d91c <TRACE_TxCpltCallback+0x10c>)
 801d82c:	789b      	ldrb	r3, [r3, #2]
 801d82e:	2b02      	cmp	r3, #2
 801d830:	d106      	bne.n	801d840 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801d832:	4b3a      	ldr	r3, [pc, #232]	; (801d91c <TRACE_TxCpltCallback+0x10c>)
 801d834:	2200      	movs	r2, #0
 801d836:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801d838:	4b38      	ldr	r3, [pc, #224]	; (801d91c <TRACE_TxCpltCallback+0x10c>)
 801d83a:	2200      	movs	r2, #0
 801d83c:	821a      	strh	r2, [r3, #16]
 801d83e:	e00a      	b.n	801d856 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801d840:	4b36      	ldr	r3, [pc, #216]	; (801d91c <TRACE_TxCpltCallback+0x10c>)
 801d842:	8a1a      	ldrh	r2, [r3, #16]
 801d844:	4b35      	ldr	r3, [pc, #212]	; (801d91c <TRACE_TxCpltCallback+0x10c>)
 801d846:	8a9b      	ldrh	r3, [r3, #20]
 801d848:	4413      	add	r3, r2
 801d84a:	b29b      	uxth	r3, r3
 801d84c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801d850:	b29a      	uxth	r2, r3
 801d852:	4b32      	ldr	r3, [pc, #200]	; (801d91c <TRACE_TxCpltCallback+0x10c>)
 801d854:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801d856:	4b31      	ldr	r3, [pc, #196]	; (801d91c <TRACE_TxCpltCallback+0x10c>)
 801d858:	8a1a      	ldrh	r2, [r3, #16]
 801d85a:	4b30      	ldr	r3, [pc, #192]	; (801d91c <TRACE_TxCpltCallback+0x10c>)
 801d85c:	8a5b      	ldrh	r3, [r3, #18]
 801d85e:	429a      	cmp	r2, r3
 801d860:	d04d      	beq.n	801d8fe <TRACE_TxCpltCallback+0xee>
 801d862:	4b2e      	ldr	r3, [pc, #184]	; (801d91c <TRACE_TxCpltCallback+0x10c>)
 801d864:	8adb      	ldrh	r3, [r3, #22]
 801d866:	2b01      	cmp	r3, #1
 801d868:	d149      	bne.n	801d8fe <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801d86a:	4b2c      	ldr	r3, [pc, #176]	; (801d91c <TRACE_TxCpltCallback+0x10c>)
 801d86c:	789b      	ldrb	r3, [r3, #2]
 801d86e:	2b01      	cmp	r3, #1
 801d870:	d117      	bne.n	801d8a2 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801d872:	4b2a      	ldr	r3, [pc, #168]	; (801d91c <TRACE_TxCpltCallback+0x10c>)
 801d874:	881a      	ldrh	r2, [r3, #0]
 801d876:	4b29      	ldr	r3, [pc, #164]	; (801d91c <TRACE_TxCpltCallback+0x10c>)
 801d878:	8a1b      	ldrh	r3, [r3, #16]
 801d87a:	1ad3      	subs	r3, r2, r3
 801d87c:	b29a      	uxth	r2, r3
 801d87e:	4b27      	ldr	r3, [pc, #156]	; (801d91c <TRACE_TxCpltCallback+0x10c>)
 801d880:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801d882:	4b26      	ldr	r3, [pc, #152]	; (801d91c <TRACE_TxCpltCallback+0x10c>)
 801d884:	2202      	movs	r2, #2
 801d886:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801d888:	4b24      	ldr	r3, [pc, #144]	; (801d91c <TRACE_TxCpltCallback+0x10c>)
 801d88a:	2200      	movs	r2, #0
 801d88c:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801d88e:	4b23      	ldr	r3, [pc, #140]	; (801d91c <TRACE_TxCpltCallback+0x10c>)
 801d890:	8a9b      	ldrh	r3, [r3, #20]
 801d892:	2b00      	cmp	r3, #0
 801d894:	d105      	bne.n	801d8a2 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801d896:	4b21      	ldr	r3, [pc, #132]	; (801d91c <TRACE_TxCpltCallback+0x10c>)
 801d898:	2200      	movs	r2, #0
 801d89a:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801d89c:	4b1f      	ldr	r3, [pc, #124]	; (801d91c <TRACE_TxCpltCallback+0x10c>)
 801d89e:	2200      	movs	r2, #0
 801d8a0:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801d8a2:	4b1e      	ldr	r3, [pc, #120]	; (801d91c <TRACE_TxCpltCallback+0x10c>)
 801d8a4:	789b      	ldrb	r3, [r3, #2]
 801d8a6:	2b00      	cmp	r3, #0
 801d8a8:	d115      	bne.n	801d8d6 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801d8aa:	4b1c      	ldr	r3, [pc, #112]	; (801d91c <TRACE_TxCpltCallback+0x10c>)
 801d8ac:	8a5a      	ldrh	r2, [r3, #18]
 801d8ae:	4b1b      	ldr	r3, [pc, #108]	; (801d91c <TRACE_TxCpltCallback+0x10c>)
 801d8b0:	8a1b      	ldrh	r3, [r3, #16]
 801d8b2:	429a      	cmp	r2, r3
 801d8b4:	d908      	bls.n	801d8c8 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801d8b6:	4b19      	ldr	r3, [pc, #100]	; (801d91c <TRACE_TxCpltCallback+0x10c>)
 801d8b8:	8a5a      	ldrh	r2, [r3, #18]
 801d8ba:	4b18      	ldr	r3, [pc, #96]	; (801d91c <TRACE_TxCpltCallback+0x10c>)
 801d8bc:	8a1b      	ldrh	r3, [r3, #16]
 801d8be:	1ad3      	subs	r3, r2, r3
 801d8c0:	b29a      	uxth	r2, r3
 801d8c2:	4b16      	ldr	r3, [pc, #88]	; (801d91c <TRACE_TxCpltCallback+0x10c>)
 801d8c4:	829a      	strh	r2, [r3, #20]
 801d8c6:	e006      	b.n	801d8d6 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801d8c8:	4b14      	ldr	r3, [pc, #80]	; (801d91c <TRACE_TxCpltCallback+0x10c>)
 801d8ca:	8a1b      	ldrh	r3, [r3, #16]
 801d8cc:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801d8d0:	b29a      	uxth	r2, r3
 801d8d2:	4b12      	ldr	r3, [pc, #72]	; (801d91c <TRACE_TxCpltCallback+0x10c>)
 801d8d4:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801d8d6:	4b11      	ldr	r3, [pc, #68]	; (801d91c <TRACE_TxCpltCallback+0x10c>)
 801d8d8:	8a1b      	ldrh	r3, [r3, #16]
 801d8da:	461a      	mov	r2, r3
 801d8dc:	4b10      	ldr	r3, [pc, #64]	; (801d920 <TRACE_TxCpltCallback+0x110>)
 801d8de:	4413      	add	r3, r2
 801d8e0:	61fb      	str	r3, [r7, #28]
 801d8e2:	69bb      	ldr	r3, [r7, #24]
 801d8e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d8e6:	693b      	ldr	r3, [r7, #16]
 801d8e8:	f383 8810 	msr	PRIMASK, r3
}
 801d8ec:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801d8ee:	4b0d      	ldr	r3, [pc, #52]	; (801d924 <TRACE_TxCpltCallback+0x114>)
 801d8f0:	68db      	ldr	r3, [r3, #12]
 801d8f2:	4a0a      	ldr	r2, [pc, #40]	; (801d91c <TRACE_TxCpltCallback+0x10c>)
 801d8f4:	8a92      	ldrh	r2, [r2, #20]
 801d8f6:	4611      	mov	r1, r2
 801d8f8:	69f8      	ldr	r0, [r7, #28]
 801d8fa:	4798      	blx	r3
 801d8fc:	e00a      	b.n	801d914 <TRACE_TxCpltCallback+0x104>
 801d8fe:	69bb      	ldr	r3, [r7, #24]
 801d900:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d902:	68fb      	ldr	r3, [r7, #12]
 801d904:	f383 8810 	msr	PRIMASK, r3
}
 801d908:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801d90a:	f7e4 fc3f 	bl	800218c <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801d90e:	f000 f8a7 	bl	801da60 <TRACE_UnLock>
  }
}
 801d912:	bf00      	nop
 801d914:	bf00      	nop
 801d916:	3720      	adds	r7, #32
 801d918:	46bd      	mov	sp, r7
 801d91a:	bd80      	pop	{r7, pc}
 801d91c:	20001cb8 	.word	0x20001cb8
 801d920:	20001cd0 	.word	0x20001cd0
 801d924:	0801e5cc 	.word	0x0801e5cc

0801d928 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801d928:	b480      	push	{r7}
 801d92a:	b087      	sub	sp, #28
 801d92c:	af00      	add	r7, sp, #0
 801d92e:	4603      	mov	r3, r0
 801d930:	6039      	str	r1, [r7, #0]
 801d932:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801d934:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d938:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d93a:	f3ef 8310 	mrs	r3, PRIMASK
 801d93e:	60fb      	str	r3, [r7, #12]
  return(result);
 801d940:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801d942:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801d944:	b672      	cpsid	i
}
 801d946:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801d948:	4b35      	ldr	r3, [pc, #212]	; (801da20 <TRACE_AllocateBufer+0xf8>)
 801d94a:	8a5a      	ldrh	r2, [r3, #18]
 801d94c:	4b34      	ldr	r3, [pc, #208]	; (801da20 <TRACE_AllocateBufer+0xf8>)
 801d94e:	8a1b      	ldrh	r3, [r3, #16]
 801d950:	429a      	cmp	r2, r3
 801d952:	d11b      	bne.n	801d98c <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801d954:	4b32      	ldr	r3, [pc, #200]	; (801da20 <TRACE_AllocateBufer+0xf8>)
 801d956:	8a5b      	ldrh	r3, [r3, #18]
 801d958:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801d95c:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801d95e:	88fa      	ldrh	r2, [r7, #6]
 801d960:	8afb      	ldrh	r3, [r7, #22]
 801d962:	429a      	cmp	r2, r3
 801d964:	d33a      	bcc.n	801d9dc <TRACE_AllocateBufer+0xb4>
 801d966:	4b2e      	ldr	r3, [pc, #184]	; (801da20 <TRACE_AllocateBufer+0xf8>)
 801d968:	8a1b      	ldrh	r3, [r3, #16]
 801d96a:	88fa      	ldrh	r2, [r7, #6]
 801d96c:	429a      	cmp	r2, r3
 801d96e:	d235      	bcs.n	801d9dc <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801d970:	4b2b      	ldr	r3, [pc, #172]	; (801da20 <TRACE_AllocateBufer+0xf8>)
 801d972:	2201      	movs	r2, #1
 801d974:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801d976:	4b2a      	ldr	r3, [pc, #168]	; (801da20 <TRACE_AllocateBufer+0xf8>)
 801d978:	8a5a      	ldrh	r2, [r3, #18]
 801d97a:	4b29      	ldr	r3, [pc, #164]	; (801da20 <TRACE_AllocateBufer+0xf8>)
 801d97c:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801d97e:	4b28      	ldr	r3, [pc, #160]	; (801da20 <TRACE_AllocateBufer+0xf8>)
 801d980:	8a1b      	ldrh	r3, [r3, #16]
 801d982:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801d984:	4b26      	ldr	r3, [pc, #152]	; (801da20 <TRACE_AllocateBufer+0xf8>)
 801d986:	2200      	movs	r2, #0
 801d988:	825a      	strh	r2, [r3, #18]
 801d98a:	e027      	b.n	801d9dc <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801d98c:	4b24      	ldr	r3, [pc, #144]	; (801da20 <TRACE_AllocateBufer+0xf8>)
 801d98e:	8a5a      	ldrh	r2, [r3, #18]
 801d990:	4b23      	ldr	r3, [pc, #140]	; (801da20 <TRACE_AllocateBufer+0xf8>)
 801d992:	8a1b      	ldrh	r3, [r3, #16]
 801d994:	429a      	cmp	r2, r3
 801d996:	d91b      	bls.n	801d9d0 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801d998:	4b21      	ldr	r3, [pc, #132]	; (801da20 <TRACE_AllocateBufer+0xf8>)
 801d99a:	8a5b      	ldrh	r3, [r3, #18]
 801d99c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801d9a0:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801d9a2:	88fa      	ldrh	r2, [r7, #6]
 801d9a4:	8afb      	ldrh	r3, [r7, #22]
 801d9a6:	429a      	cmp	r2, r3
 801d9a8:	d318      	bcc.n	801d9dc <TRACE_AllocateBufer+0xb4>
 801d9aa:	4b1d      	ldr	r3, [pc, #116]	; (801da20 <TRACE_AllocateBufer+0xf8>)
 801d9ac:	8a1b      	ldrh	r3, [r3, #16]
 801d9ae:	88fa      	ldrh	r2, [r7, #6]
 801d9b0:	429a      	cmp	r2, r3
 801d9b2:	d213      	bcs.n	801d9dc <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801d9b4:	4b1a      	ldr	r3, [pc, #104]	; (801da20 <TRACE_AllocateBufer+0xf8>)
 801d9b6:	2201      	movs	r2, #1
 801d9b8:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801d9ba:	4b19      	ldr	r3, [pc, #100]	; (801da20 <TRACE_AllocateBufer+0xf8>)
 801d9bc:	8a5a      	ldrh	r2, [r3, #18]
 801d9be:	4b18      	ldr	r3, [pc, #96]	; (801da20 <TRACE_AllocateBufer+0xf8>)
 801d9c0:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801d9c2:	4b17      	ldr	r3, [pc, #92]	; (801da20 <TRACE_AllocateBufer+0xf8>)
 801d9c4:	8a1b      	ldrh	r3, [r3, #16]
 801d9c6:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801d9c8:	4b15      	ldr	r3, [pc, #84]	; (801da20 <TRACE_AllocateBufer+0xf8>)
 801d9ca:	2200      	movs	r2, #0
 801d9cc:	825a      	strh	r2, [r3, #18]
 801d9ce:	e005      	b.n	801d9dc <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801d9d0:	4b13      	ldr	r3, [pc, #76]	; (801da20 <TRACE_AllocateBufer+0xf8>)
 801d9d2:	8a1a      	ldrh	r2, [r3, #16]
 801d9d4:	4b12      	ldr	r3, [pc, #72]	; (801da20 <TRACE_AllocateBufer+0xf8>)
 801d9d6:	8a5b      	ldrh	r3, [r3, #18]
 801d9d8:	1ad3      	subs	r3, r2, r3
 801d9da:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801d9dc:	8afa      	ldrh	r2, [r7, #22]
 801d9de:	88fb      	ldrh	r3, [r7, #6]
 801d9e0:	429a      	cmp	r2, r3
 801d9e2:	d90f      	bls.n	801da04 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801d9e4:	4b0e      	ldr	r3, [pc, #56]	; (801da20 <TRACE_AllocateBufer+0xf8>)
 801d9e6:	8a5a      	ldrh	r2, [r3, #18]
 801d9e8:	683b      	ldr	r3, [r7, #0]
 801d9ea:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801d9ec:	4b0c      	ldr	r3, [pc, #48]	; (801da20 <TRACE_AllocateBufer+0xf8>)
 801d9ee:	8a5a      	ldrh	r2, [r3, #18]
 801d9f0:	88fb      	ldrh	r3, [r7, #6]
 801d9f2:	4413      	add	r3, r2
 801d9f4:	b29b      	uxth	r3, r3
 801d9f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801d9fa:	b29a      	uxth	r2, r3
 801d9fc:	4b08      	ldr	r3, [pc, #32]	; (801da20 <TRACE_AllocateBufer+0xf8>)
 801d9fe:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801da00:	2300      	movs	r3, #0
 801da02:	82bb      	strh	r3, [r7, #20]
 801da04:	693b      	ldr	r3, [r7, #16]
 801da06:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801da08:	68bb      	ldr	r3, [r7, #8]
 801da0a:	f383 8810 	msr	PRIMASK, r3
}
 801da0e:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801da10:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801da14:	4618      	mov	r0, r3
 801da16:	371c      	adds	r7, #28
 801da18:	46bd      	mov	sp, r7
 801da1a:	bc80      	pop	{r7}
 801da1c:	4770      	bx	lr
 801da1e:	bf00      	nop
 801da20:	20001cb8 	.word	0x20001cb8

0801da24 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801da24:	b480      	push	{r7}
 801da26:	b085      	sub	sp, #20
 801da28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801da2a:	f3ef 8310 	mrs	r3, PRIMASK
 801da2e:	607b      	str	r3, [r7, #4]
  return(result);
 801da30:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801da32:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801da34:	b672      	cpsid	i
}
 801da36:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801da38:	4b08      	ldr	r3, [pc, #32]	; (801da5c <TRACE_Lock+0x38>)
 801da3a:	8adb      	ldrh	r3, [r3, #22]
 801da3c:	3301      	adds	r3, #1
 801da3e:	b29a      	uxth	r2, r3
 801da40:	4b06      	ldr	r3, [pc, #24]	; (801da5c <TRACE_Lock+0x38>)
 801da42:	82da      	strh	r2, [r3, #22]
 801da44:	68fb      	ldr	r3, [r7, #12]
 801da46:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801da48:	68bb      	ldr	r3, [r7, #8]
 801da4a:	f383 8810 	msr	PRIMASK, r3
}
 801da4e:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801da50:	bf00      	nop
 801da52:	3714      	adds	r7, #20
 801da54:	46bd      	mov	sp, r7
 801da56:	bc80      	pop	{r7}
 801da58:	4770      	bx	lr
 801da5a:	bf00      	nop
 801da5c:	20001cb8 	.word	0x20001cb8

0801da60 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801da60:	b480      	push	{r7}
 801da62:	b085      	sub	sp, #20
 801da64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801da66:	f3ef 8310 	mrs	r3, PRIMASK
 801da6a:	607b      	str	r3, [r7, #4]
  return(result);
 801da6c:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801da6e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801da70:	b672      	cpsid	i
}
 801da72:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801da74:	4b08      	ldr	r3, [pc, #32]	; (801da98 <TRACE_UnLock+0x38>)
 801da76:	8adb      	ldrh	r3, [r3, #22]
 801da78:	3b01      	subs	r3, #1
 801da7a:	b29a      	uxth	r2, r3
 801da7c:	4b06      	ldr	r3, [pc, #24]	; (801da98 <TRACE_UnLock+0x38>)
 801da7e:	82da      	strh	r2, [r3, #22]
 801da80:	68fb      	ldr	r3, [r7, #12]
 801da82:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801da84:	68bb      	ldr	r3, [r7, #8]
 801da86:	f383 8810 	msr	PRIMASK, r3
}
 801da8a:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801da8c:	bf00      	nop
 801da8e:	3714      	adds	r7, #20
 801da90:	46bd      	mov	sp, r7
 801da92:	bc80      	pop	{r7}
 801da94:	4770      	bx	lr
 801da96:	bf00      	nop
 801da98:	20001cb8 	.word	0x20001cb8

0801da9c <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801da9c:	b480      	push	{r7}
 801da9e:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801daa0:	4b05      	ldr	r3, [pc, #20]	; (801dab8 <TRACE_IsLocked+0x1c>)
 801daa2:	8adb      	ldrh	r3, [r3, #22]
 801daa4:	2b00      	cmp	r3, #0
 801daa6:	bf14      	ite	ne
 801daa8:	2301      	movne	r3, #1
 801daaa:	2300      	moveq	r3, #0
 801daac:	b2db      	uxtb	r3, r3
}
 801daae:	4618      	mov	r0, r3
 801dab0:	46bd      	mov	sp, r7
 801dab2:	bc80      	pop	{r7}
 801dab4:	4770      	bx	lr
 801dab6:	bf00      	nop
 801dab8:	20001cb8 	.word	0x20001cb8

0801dabc <memset>:
 801dabc:	4402      	add	r2, r0
 801dabe:	4603      	mov	r3, r0
 801dac0:	4293      	cmp	r3, r2
 801dac2:	d100      	bne.n	801dac6 <memset+0xa>
 801dac4:	4770      	bx	lr
 801dac6:	f803 1b01 	strb.w	r1, [r3], #1
 801daca:	e7f9      	b.n	801dac0 <memset+0x4>

0801dacc <__libc_init_array>:
 801dacc:	b570      	push	{r4, r5, r6, lr}
 801dace:	4d0d      	ldr	r5, [pc, #52]	; (801db04 <__libc_init_array+0x38>)
 801dad0:	4c0d      	ldr	r4, [pc, #52]	; (801db08 <__libc_init_array+0x3c>)
 801dad2:	1b64      	subs	r4, r4, r5
 801dad4:	10a4      	asrs	r4, r4, #2
 801dad6:	2600      	movs	r6, #0
 801dad8:	42a6      	cmp	r6, r4
 801dada:	d109      	bne.n	801daf0 <__libc_init_array+0x24>
 801dadc:	4d0b      	ldr	r5, [pc, #44]	; (801db0c <__libc_init_array+0x40>)
 801dade:	4c0c      	ldr	r4, [pc, #48]	; (801db10 <__libc_init_array+0x44>)
 801dae0:	f000 f89a 	bl	801dc18 <_init>
 801dae4:	1b64      	subs	r4, r4, r5
 801dae6:	10a4      	asrs	r4, r4, #2
 801dae8:	2600      	movs	r6, #0
 801daea:	42a6      	cmp	r6, r4
 801daec:	d105      	bne.n	801dafa <__libc_init_array+0x2e>
 801daee:	bd70      	pop	{r4, r5, r6, pc}
 801daf0:	f855 3b04 	ldr.w	r3, [r5], #4
 801daf4:	4798      	blx	r3
 801daf6:	3601      	adds	r6, #1
 801daf8:	e7ee      	b.n	801dad8 <__libc_init_array+0xc>
 801dafa:	f855 3b04 	ldr.w	r3, [r5], #4
 801dafe:	4798      	blx	r3
 801db00:	3601      	adds	r6, #1
 801db02:	e7f2      	b.n	801daea <__libc_init_array+0x1e>
 801db04:	0801ec84 	.word	0x0801ec84
 801db08:	0801ec84 	.word	0x0801ec84
 801db0c:	0801ec84 	.word	0x0801ec84
 801db10:	0801ec88 	.word	0x0801ec88
 801db14:	00000000 	.word	0x00000000

0801db18 <floor>:
 801db18:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801db1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801db20:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801db24:	2e13      	cmp	r6, #19
 801db26:	460b      	mov	r3, r1
 801db28:	4607      	mov	r7, r0
 801db2a:	460c      	mov	r4, r1
 801db2c:	4605      	mov	r5, r0
 801db2e:	dc32      	bgt.n	801db96 <floor+0x7e>
 801db30:	2e00      	cmp	r6, #0
 801db32:	da14      	bge.n	801db5e <floor+0x46>
 801db34:	a334      	add	r3, pc, #208	; (adr r3, 801dc08 <floor+0xf0>)
 801db36:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db3a:	f7e2 fb2b 	bl	8000194 <__adddf3>
 801db3e:	2200      	movs	r2, #0
 801db40:	2300      	movs	r3, #0
 801db42:	f7e2 fd5b 	bl	80005fc <__aeabi_dcmpgt>
 801db46:	b138      	cbz	r0, 801db58 <floor+0x40>
 801db48:	2c00      	cmp	r4, #0
 801db4a:	da56      	bge.n	801dbfa <floor+0xe2>
 801db4c:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801db50:	4325      	orrs	r5, r4
 801db52:	d055      	beq.n	801dc00 <floor+0xe8>
 801db54:	4c2e      	ldr	r4, [pc, #184]	; (801dc10 <floor+0xf8>)
 801db56:	2500      	movs	r5, #0
 801db58:	4623      	mov	r3, r4
 801db5a:	462f      	mov	r7, r5
 801db5c:	e025      	b.n	801dbaa <floor+0x92>
 801db5e:	4a2d      	ldr	r2, [pc, #180]	; (801dc14 <floor+0xfc>)
 801db60:	fa42 f806 	asr.w	r8, r2, r6
 801db64:	ea01 0208 	and.w	r2, r1, r8
 801db68:	4302      	orrs	r2, r0
 801db6a:	d01e      	beq.n	801dbaa <floor+0x92>
 801db6c:	a326      	add	r3, pc, #152	; (adr r3, 801dc08 <floor+0xf0>)
 801db6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db72:	f7e2 fb0f 	bl	8000194 <__adddf3>
 801db76:	2200      	movs	r2, #0
 801db78:	2300      	movs	r3, #0
 801db7a:	f7e2 fd3f 	bl	80005fc <__aeabi_dcmpgt>
 801db7e:	2800      	cmp	r0, #0
 801db80:	d0ea      	beq.n	801db58 <floor+0x40>
 801db82:	2c00      	cmp	r4, #0
 801db84:	bfbe      	ittt	lt
 801db86:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801db8a:	4133      	asrlt	r3, r6
 801db8c:	18e4      	addlt	r4, r4, r3
 801db8e:	ea24 0408 	bic.w	r4, r4, r8
 801db92:	2500      	movs	r5, #0
 801db94:	e7e0      	b.n	801db58 <floor+0x40>
 801db96:	2e33      	cmp	r6, #51	; 0x33
 801db98:	dd0b      	ble.n	801dbb2 <floor+0x9a>
 801db9a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801db9e:	d104      	bne.n	801dbaa <floor+0x92>
 801dba0:	4602      	mov	r2, r0
 801dba2:	f7e2 faf7 	bl	8000194 <__adddf3>
 801dba6:	4607      	mov	r7, r0
 801dba8:	460b      	mov	r3, r1
 801dbaa:	4638      	mov	r0, r7
 801dbac:	4619      	mov	r1, r3
 801dbae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dbb2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801dbb6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801dbba:	fa28 f802 	lsr.w	r8, r8, r2
 801dbbe:	ea10 0f08 	tst.w	r0, r8
 801dbc2:	d0f2      	beq.n	801dbaa <floor+0x92>
 801dbc4:	a310      	add	r3, pc, #64	; (adr r3, 801dc08 <floor+0xf0>)
 801dbc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dbca:	f7e2 fae3 	bl	8000194 <__adddf3>
 801dbce:	2200      	movs	r2, #0
 801dbd0:	2300      	movs	r3, #0
 801dbd2:	f7e2 fd13 	bl	80005fc <__aeabi_dcmpgt>
 801dbd6:	2800      	cmp	r0, #0
 801dbd8:	d0be      	beq.n	801db58 <floor+0x40>
 801dbda:	2c00      	cmp	r4, #0
 801dbdc:	da0a      	bge.n	801dbf4 <floor+0xdc>
 801dbde:	2e14      	cmp	r6, #20
 801dbe0:	d101      	bne.n	801dbe6 <floor+0xce>
 801dbe2:	3401      	adds	r4, #1
 801dbe4:	e006      	b.n	801dbf4 <floor+0xdc>
 801dbe6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801dbea:	2301      	movs	r3, #1
 801dbec:	40b3      	lsls	r3, r6
 801dbee:	441d      	add	r5, r3
 801dbf0:	42af      	cmp	r7, r5
 801dbf2:	d8f6      	bhi.n	801dbe2 <floor+0xca>
 801dbf4:	ea25 0508 	bic.w	r5, r5, r8
 801dbf8:	e7ae      	b.n	801db58 <floor+0x40>
 801dbfa:	2500      	movs	r5, #0
 801dbfc:	462c      	mov	r4, r5
 801dbfe:	e7ab      	b.n	801db58 <floor+0x40>
 801dc00:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801dc04:	e7a8      	b.n	801db58 <floor+0x40>
 801dc06:	bf00      	nop
 801dc08:	8800759c 	.word	0x8800759c
 801dc0c:	7e37e43c 	.word	0x7e37e43c
 801dc10:	bff00000 	.word	0xbff00000
 801dc14:	000fffff 	.word	0x000fffff

0801dc18 <_init>:
 801dc18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dc1a:	bf00      	nop
 801dc1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801dc1e:	bc08      	pop	{r3}
 801dc20:	469e      	mov	lr, r3
 801dc22:	4770      	bx	lr

0801dc24 <_fini>:
 801dc24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dc26:	bf00      	nop
 801dc28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801dc2a:	bc08      	pop	{r3}
 801dc2c:	469e      	mov	lr, r3
 801dc2e:	4770      	bx	lr
